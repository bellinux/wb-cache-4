1|1|Public
40|$|The paper {{introduces}} {{a method to}} design software process models. The method is based on object oriented design extended with a kernel of PM specific classes and relations. A graphical notation to depict process model designs is given together with few structuring and presentation rules. 1 Introduction One of {{the aims of the}} E 3 project is to devise a method to design process models before implementing them. Initially the object oriented (OO) Coad and <b>Yourdon</b> <b>methodology</b> has been investigated and used to design both the ISPW 6 example problem and the software process of a local software organization. The latter software process was described by a textual document of more than one hundred pages. The resulting OO design is based on: 1. a set of kernel classes and relations with PM semantics. Classes identify the root for activity, data, tool, and role submodel; 2. a set of domain specific classes and relations. Once the kernel was identified, it was straighten to obtain the process model [...] ...|$|E
40|$|This {{dissertation}} {{investigates the}} effects of computer-aided systems engineering (CASE) tool methodology support on the system specification output from structured analysis. A replicated project study was employed to allow {{for control of the}} requirements specification. Sixteen groups of four upper-division, undergraduate MIS students developed a system specification from the requirements specification of a hotel information system. The groups developed the specifications by following the <b>Yourdon</b> structured analysis <b>methodology,</b> with the aid of two popular, personal computer-based CASE tools. Both CASE tools claim to support the methodology but the methodology support offered by the two tools is different. Specifically, the size of the rule base varies between the tools, and the implementation mechanism for enforcing a specific methodology rule varies both between tools and between rules. It is hypothesized that the number of violations of a particular methodology rule {{is a function of the}} implementation mechanism, i. e., rules that are rigidly enforced will be violated less frequently than rules that are not rigidly enforced or are not a part of the CASE tool's rule base. The results indicate that, regardless of the type of methodology support supplied by the CASE tool, there are very few violations of the methodology rules that apply to the internal consistency of a data flow diagram. However, when the system is examined by verifying the hierarchical consistency of the data flow diagrams, the number of specification errors increases. Further, for some of the methodology rules, the number of violations is proportional to the amount of support provided by the CASE tool. One consequence of these results is that rules applying to the hierarchical consistency of data flows diagrams should be enforced by the CASE tool in as strict a manner as possible to assist in preventing errors from propagating down to the primitive process specifications and corrupting the construction of structure charts...|$|R

