6|10000|Public
40|$|Researchers of {{commercial}} search engines often collect data using the {{application programming interface}} (API) or by “scraping ” results from the <b>web</b> <b>user</b> <b>interface</b> (<b>WUI),</b> but anecdotal evidence suggests the interfaces produce different results. We provide the first in-depth quantitative analysis of the results produced by the Google, MSN and Yahoo API and WUI interfaces. After submitting a variety of queries to the interfaces for 5 months, we found significant discrepancies in several categories. Our {{findings suggest that the}} API indexes are not older, but they are probably smaller for Google and Yahoo. Researchers may use our findings to better understand the differences between the interfaces and choose the best API for their particular types of queries...|$|E
30|$|Namenode {{acts as the}} {{management}} master of HDFS. Datanodes {{are responsible for the}} data blocks storage in HDFS, and reporting their status to Namenode with the heartbeat response periodically. If the Namenode does not obtain heartbeats from a Datanode, it will modify the configuration for Datanodes’ directory, and determine whether the Datanode appears fault. If so, it will not get the data operation request, then the client will read the same blocks from another Datanode, and the client applications access to the data in a streaming way in the HDFS system. Hive provides the applications with command line interface (CLI), client interface (Client) and <b>web</b> <b>user</b> <b>interface</b> (<b>WUI).</b> Attributes such as table name, column, and partition of Hive are stored in metadata database.|$|E
40|$|There are {{currently}} many online education systems, but however there isn’t any {{system that is}} well designed to increase both the users and the developers experience in using the site. This report shows how we designed and developed a new remote education system that will solve these problems by using a newly developed methodology – Aspect-Oriented Component Engineering (AOCE). This report also describes how we used some other good programming practices during our development such as eXtreme programming (XP) and test driven development (TDD). The project aims to provide not only easy use <b>web</b> <b>user</b> <b>interface</b> (<b>WUI)</b> to the users but also provide easy understandable and highly reusable code, flexible and extendible components to the developers. The overall accessibility and efficiency of our online education system has increase dramatically {{when compared to the}} existing systems. 1...|$|E
5000|$|Web-based <b>user</b> <b>interfaces</b> or <b>web</b> <b>user</b> <b>interfaces</b> (<b>WUI)</b> that accept {{input and}} provide output by {{generating}} web pages which are transmitted via the Internet and {{viewed by the}} <b>user</b> using a <b>web</b> browser program. Newer implementations utilize PHP, Java, JavaScript, AJAX, Apache Flex, [...]NET Framework, or similar technologies to provide real-time control in a separate program, eliminating the need to refresh a traditional HTML based web browser. Administrative web interfaces for web-servers, servers and networked computers are often called control panels.|$|R
40|$|Google, Yahoo and MSN all {{provide both}} <b>web</b> <b>user</b> <b>interfaces</b> (<b>WUIs)</b> and {{application}} programming interfaces (APIs) to their collections. Whether building collections of resources or studying the search engines themselves, the search engines request that researchers use their APIs and not “scrape ” the WUIs. However, anecdotal evidence suggests the interfaces produce different results. We provide {{the first in}} depth quantitative analysis of the results produced by the Google, MSN and Yahoo API and <b>WUI</b> <b>interfaces.</b> We have queried both interfaces for five months and found significant discrepancies between the interfaces in several categories. In general, we found MSN to produce the most consistent results between their two interfaces. Our {{findings suggest that the}} API indexes are not older, but they are probably smaller for Google and Yahoo. We also examined how search results decay over time and built predictive models based on the observed decay rates. Based on our findings, it can take over a year for half of the top 10 results to a popular query to be replaced in Google and Yahoo; for MSN it may take only 2 - 3 months...|$|R
40|$|Because of the {{platform}} differentiation of software products today, the dominant styles of interfaces are: GUI (Graphical <b>User</b> <b>Interface),</b> <b>WUI</b> (<b>Web</b> <b>User</b> <b>Interface)</b> and HUI (Handheld <b>User</b> <b>Interface).</b> Similar goals, principles, rules, heuristics are valid for every of the listed styles at the conceptual level, while substantial differences are present {{at the level of}} the physical design. The domination trend favors GUI and its derivatives. GUI dominates on the PC platform and, in essence, there are a small number of its variations. WUI dominates in the field of the approaches to the Internet, extranet and intranet. The HUI design mostly depends on the extent to which extent the PDA device supports the GUI style and the size of the display. The work presents the basic characteristics of GUI and <b>WUI</b> <b>interface</b> styles, their similarities and important differences...|$|R
40|$|Many of the {{production}} costs for producing tea are attributable {{to the process of}} drying the tea. E-manufacturing can assist companies to reduce these production costs by making crucial information available to decision-makers so that they can make informed decisions. This paper presents an application of e-manufacturing to the design of an automatic tea drying control system. This control system will ensure that the multiple drying parameters such as temperature, dryer-exit tea moisture content, and fuel consumption are maintained at optimal states {{during the course of the}} drying of tea. The additional aim of this system is to balance the cost of production and the quality of the final product. Using the Guggenheim-Anderson-De Boer (GAB) model, the optimum drying temperature was found to be 100 - 110 °C, while maintaining a dryer-exit tea moisture content of 3 to 3. 12 per cent, at a drying rate of 3 per cent per minute. A Barix control application to control the system’s activities, using the <b>web</b> <b>user</b> <b>interface</b> (<b>WUI),</b> was also developed. ...|$|E
40|$|E-Learning {{plays an}} {{important}} role in our society today; hence, higher institutions now offer courses through distance learning. Several studies and methodologies towards improving e-Learning have been proposed and provided. However, not too many works are dedicated to the design and implementation of e-Learning for the visually impaired learners. Sight challenge is a serious form of disability, yet, the existing e-Learning platform (web, mobile, etc) have not devoted enough attention to the plight of the visually impaired particularly in the area of usability. The objective of this paper is to present an intelligent speech-based e-Learning system with dual interface – Voice User Interface (VUI) and <b>Web</b> <b>User</b> <b>Interface</b> (<b>WUI).</b> Case-Based Reasoning (CBR) was engaged to provide intelligent services. Voice Extensible Markup Language (VoiceXML) was used to develop the VUI, Hypertext Preprocessor (PHP) for the WUI and Apache as the middle ware. The VUI and WUI are accessed through mobile phone by dialing a telephone number and the WUI using the Internet respectively. The e-Learning system will especially be useful for students who are visually impaired and those with dyslexia ailment that make reading, writing and spelling difficult. The application will complement the existing e-Learning systems such as web-based learning, m-Learning and others...|$|E
40|$|Although the Internet has {{received}} significant attention in recent years, voice {{is still the}} most convenient and natural way of communicating between human to human or human to computer. In voice applications, users may have different needs which will require the ability of the system to reason, make decisions, be flexible and adapt to requests during interaction. These needs have placed new requirements in voice application development such as use of advanced models, techniques and methodologies which take into account the needs of different users and environments. The ability of a system to behave close to human reasoning is often mentioned as one of the major requirements for the development of voice applications. In this paper, we present a framework for an intelligent voice-enabled e-Education application and an adaptation of the framework {{for the development of a}} prototype Course Registration and Examination (CourseRegExamOnline) module. This study is a preliminary report of an ongoing e-Education project containing the following modules: enrollment, course registration and examination, enquiries/information, messaging/collaboration, e-Learning and library. The CourseRegExamOnline module was developed using VoiceXML for the voice user interface(VUI), PHP for the <b>web</b> <b>user</b> <b>interface</b> (<b>WUI),</b> Apache as the middle-ware and MySQL database as back-end. The system would offer dual access modes using the VUI and WUI. The framework would serve as a reference model for developing voice-based e-Education applications. The e-Education system when fully developed would meet the needs of students who are normal users and those with certain forms of disabilities such as visual impairment, repetitive strain injury (RSI), etc, that make reading and writing difficult...|$|E
5000|$|Elm (programming language) Reactive {{composition}} of <b>web</b> <b>user</b> <b>interface.</b>|$|R
5000|$|OpenCMIS Server Webapps: a CMIS server and <b>web</b> <b>user</b> <b>interface</b> ...|$|R
5000|$|Example: Growth of {{high-quality}} <b>web</b> <b>user</b> <b>interfaces</b> driven by Ajax technology ...|$|R
5000|$|... #Subtitle level 3: Elm - {{reactive}} {{composition of}} <b>web</b> <b>user</b> <b>interfaces</b> ...|$|R
5000|$|Icinga Reporting module {{based on}} open source Jasper Reports for both Icinga Classic and Icinga <b>Web</b> <b>user</b> <b>interfaces</b> ...|$|R
40|$|This thesis {{describes}} {{challenges in}} designing, developing and testing <b>web</b> <b>user</b> <b>interfaces.</b> It discusses human-computer interaction, communication channels and <b>user</b> <b>interface</b> analogy {{to the real}} world. <b>User</b> <b>interfaces</b> can be designed     to be optimal for a specific action or to suite the user. A design of <b>interfaces</b> focused on <b>users</b> utilize methods, such as gamification and improving user experience, which can improve <b>interface</b> usability. <b>User</b> <b>interface</b> development is demonstrated on     web page development. Further, the thesis describes 3 <b>web</b> <b>user</b> <b>interface</b> testing methods. The methods are demonstrated by designing, developing, and testing <b>user</b> <b>interface</b> of a <b>web</b> strategy game...|$|R
40|$|This paper {{investigates the}} key {{components}} of an intelligent <b>web</b> <b>user</b> <b>interface</b> to facilitate online investment as a novel approach to compensating for the impersonality of e-commerce. By analyzing challenges to online brokerage services and evaluating key criteria for a viable intelligence system, we develop a decision tree based intelligent <b>web</b> <b>user</b> <b>interfaces</b> model. The resulting intelligent model is intended to help online shoppers avoid common mistakes by means of implicit reasoning, flexible knowledge granularity, and effective reasoning-by-exception, which is {{significantly different from the}} traditional approaches that largely rely on assistance from remote control knowledge engines. One of the key contributions of the intelligent <b>web</b> <b>user</b> <b>interfaces</b> model introduced in this paper is that it provides a heuristic guidance behind the scene for both online shoppers and online stores without extra structural constraints or financial burdens...|$|R
500|$|... {{fewer than}} half of tweets posted were posted using the <b>web</b> <b>user</b> <b>interface</b> with most <b>users</b> using {{third-party}} applications (based on an analysis of 500 million tweets by Sysomos).|$|R
40|$|<b>User</b> <b>interface</b> is {{the main}} point of contact between the user and the application. With an aim to simplify its use and improve the user {{experience}} different approaches and models have been proposed for a more efficient development of <b>user</b> <b>interfaces.</b> This has resulted in approaches for application integration at different levels. In this Master’s thesis, we are focusing exclusively on the integration of <b>web</b> <b>user</b> <b>interfaces.</b> We present our own model for <b>web</b> <b>user</b> <b>interface</b> integration, which uses WUIIDL (<b>Web</b> <b>User</b> <b>Interface</b> Integration Description Language). The WUIIDL language has been developed {{within the context of}} the Master's thesis to describe the integration key points. The structure of the language was defined using XSD (XML Schema Definition) schemas and indirectly represents the structure of the input data. Communication between the individual components of the model was performed using web services which are described with WSDL (Web Service Description Language) file. We have prepared a prototype, its implementation being based on the Java EE platform. Integration was performed using Apache Wicket framework which has been helpful in displaying the components on the <b>web</b> <b>user</b> <b>interface.</b> The prototype also supports the validation process, namely based on the input data provided using the WUIIDL description language. The model was evaluated by testing a set of SaaS (Software as a Service) application examples used to prepare a set of four commonly used scenarios. We found that the model addresses the key parts necessary to ensure comprehensive integration...|$|R
50|$|Express {{improved}} on the functionality of SmoothWall GPL {{by using}} the 2.4 Linux kernel, improving the <b>web</b> <b>user</b> <b>interface,</b> and making many changes to existing features and adding several new ones.|$|R
50|$|It {{comes with}} a set of system checks, a mod_python and JavaScript based <b>web</b> <b>user</b> <b>interface,</b> and a module that allows fast access to the Nagios core. On top of Nagios it also adds {{additional}} features.|$|R
5000|$|A new <b>web</b> <b>user</b> <b>interface,</b> codenamed Falcon, is in development. It {{supports}} encrypted {{sessions and}} the ability of going through firewalls without port forwarding, while being more complete and easier to start using than its predecessor.|$|R
50|$|The {{most common}} {{operating}} system on such embedded devices is Linux. More seldomly, VxWorks is being used. The devices are configured over a <b>web</b> <b>user</b> <b>interface</b> {{served by a}} light web server software running on the device.|$|R
50|$|In setups {{using the}} {{optional}} Icinga <b>Web</b> <b>user</b> <b>interface,</b> monitoring data from multiple Icinga Core instances can be displayed {{as long as}} each instance writes to the same IDODB. In this way, distributed monitoring is also simpler to administer.|$|R
40|$|Mobile {{technologies}} are evolving very fast {{and according to}} specialists they will become the main tool used to access the internet in the 10 next years. So it is natural that more and mode services are served through mobile internet. As all regular applications, mobile web applications should be usable and user friendly. These aspects make a quite big influence on success of software. The main goal of this work {{is to make a}} usability research on <b>web</b> <b>user</b> <b>interface</b> for mobile devices. This research will show if there is a sense to make separate <b>user</b> <b>interface</b> for mobile devices when you are going to develop web system which will be also used by mobile devices users. The field of this work is <b>web</b> <b>user</b> <b>interface</b> for mobile devices and its usability. The object of this work is <b>user</b> <b>interface</b> usability research methodology...|$|R
5000|$|With {{the output}} module Xplico can have {{different}} <b>user</b> <b>interfaces,</b> {{in fact it}} can be used from command line and from a <b>web</b> <b>user</b> <b>interface</b> called [...] "Xplico Interface". The protocol dissector is the modules for the decoding of the individual protocol, each protocol dissector can reconstruct and extract the data of the protocol.|$|R
50|$|By using a {{multilingual}} <b>web</b> <b>user</b> <b>interface,</b> OTRS is usable independently {{from the}} respective operating systems {{since it is}} operated from a web browser. Furthermore, this facilitates the usage of OTRS by external agents or even customers participating in, working on or contributing to tickets.|$|R
50|$|MemSQL {{ships with}} an installation, {{management}} and monitoring tool called MemSQL Ops. When installing MemSQL, Ops {{can be used}} to set up the distributed MemSQL database across machines, and provide metrics about the running system. MemSQL Ops has both a <b>web</b> <b>user</b> <b>interface</b> and command line interface.|$|R
40|$|Using {{a mobile}} device while moving limits {{attention}} and motor ability and {{can result in}} reduced performance. Mobile devices that can sense and adapt to contextual factors such as movement may reduce this performance deficit. We performed two studies evaluating the feasibility of walking <b>user</b> <b>interfaces</b> (<b>WUIs)</b> that adapt their layout when the user is moving. In a pilot study with 6 users, we evaluated the effects of different button sizes on performance when walking while using a portable music player. Results showed significant interactions between size and movement. In the second study, 29 users evaluated {{the performance of a}} WUI that dynamically changed button sizes as the user moved. Results show that our dynamic <b>user</b> <b>interface</b> performs at the level of its component static interfaces without any additional penalty due to adaptation. This work adds to our design knowledge about walking <b>user</b> <b>interfaces</b> and provides lessons learned in evaluating mobile devices while walking in public spaces...|$|R
50|$|The {{program has}} a <b>web</b> <b>user</b> <b>interface.</b> However, {{it is not}} hosted on the web (SAAS), but is {{available}} for download and use on the local machine. When starting OpenRefine, it starts a web server and starts a browser to open the web UI powered by this web server.|$|R
5000|$|The S2 <b>web</b> <b>user</b> <b>interface</b> allows <b>users</b> {{to change}} {{the values of the}} {{properties}} of a layout without requiring them to write actual S2 source code. This interface is termed the [...] "customization wizard", and it creates a user layer which stores the user's preferred values of the properties.|$|R
40|$|The Web Evolution study [2] {{investigates the}} issues {{affecting}} the <b>web</b> <b>user</b> <b>interface</b> through understanding {{the evolution of}} the web. A Web robot [1] was used to capture data for the study. This re-port provides instructions for using the code, and for customising the code for future work. Human Centred Web 2 Web Evolution The Web Evolution project is investigating into the issues that cause the lag between the introduction of standards and recommendations and when they were adopted by the developers. We will focus on the relationship between these issues, especially those involving the <b>web</b> <b>user</b> <b>interface.</b> This project will identify trends, and provide us with graphs demonstrating how the web has been evolving over the past ten years. By understanding these evolutionary trends we can inform and predict web development in the future...|$|R
40|$|Mission and Assets Database (MADB) Version 1. 0 is an SQL {{database}} {{system with}} a <b>Web</b> <b>user</b> <b>interface</b> to centralize information. The database stores flight project support resource requirements, view periods, antenna information, schedule, and forecast results for use in mid-range and long-term planning of Deep Space Network (DSN) assets...|$|R
40|$|Updated {{release of}} RobotReviewer {{software}} Includes: trained classifiers {{as used in}} the RobotReviewer validation study in JAMIA, plus Python code for using them easy-to-use JSON webservice for integrating into web applications optional RobotReviewer <b>web</b> <b>user</b> <b>interface</b> (the Vortext viewer) Updates for this version: Installation instructions improved Faster loading model file...|$|R
50|$|In cloud {{computing}} servers may be provisioned via a <b>web</b> <b>user</b> <b>interface</b> or an application programming interface. One {{of the unique}} things about {{cloud computing}} is how rapidly and easily this can be done. Monitoring software {{can be used to}} trigger automatic provisioning when existing resources become too heavily stressed.|$|R
40|$|In {{order to}} produce <b>Web</b> <b>User</b> <b>Interfaces</b> {{tailored}} for multiple platforms. This paper introduces an algorithm for semi-automated generation of <b>user</b> <b>interface</b> containers based on a task model. <b>User</b> <b>interface</b> containers are first derived from the configuration of a task model and then refined according to parameters characterizing user and computing platform. In this way, {{it is possible to}} render container structures for <b>user</b> <b>interfaces</b> in a specific language and platform. 1...|$|R
50|$|It is a {{centralized}} <b>web</b> <b>user</b> <b>interface</b> which enables easier coordination and planning {{of a network}} with monitoring at the same time. Furthermore, {{it is also a}} web based firmware image generator which generates a customized image of a system for a given network node, so no node configuration after flashing is necessary.|$|R
