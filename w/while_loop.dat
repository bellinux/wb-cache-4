163|1166|Public
25|$|Parameters {{can also}} be passed to {{arbitrary}} blocks, which act as closures. This is how, for example, for and <b>while</b> <b>loop</b> iterators are named. In the following example, a list is traversed, 3 elements at a time, and passed to the loop's block as the variables, $a, $b, $c.|$|E
25|$|<b>While</b> <b>loop</b> diuretics remain {{first-line}} {{for most}} people with heart failure, spironolactone has shown to reduce both morbidity and mortality in numerous studies and remains an important agent for treating fluid retention, edema, and symptoms of heart failure. Current recommendations from the American Heart Association are to use spironolactone in patients with NYHA Class II-IV heart failure who have a left ventricular ejection fraction of <35%.|$|E
2500|$|Infinite loops can be {{implemented}} using other control flow constructs. Most commonly, in unstructured programming this is jump back up (goto), while in structured programming this is an indefinite loop (<b>while</b> <b>loop)</b> set to never end, either by omitting the condition or explicitly setting it to true, as while (true) .... Some languages have special constructs for infinite loops, typically by omitting the condition from an indefinite loop. Examples include Ada (loop ... end loop), Fortran (DO ... END DO), Go (for { ... }), and Ruby (loop do ... end).|$|E
5000|$|Overcomplicated expressionsâ€”Unnecessary if statements, for loops {{that could}} be <b>while</b> <b>loops.</b>|$|R
5000|$|These <b>while</b> <b>loops</b> will {{calculate}} the factorial {{of the number}} 5: ...|$|R
40|$|One central {{problem in}} the {{execution}} of parallel nested loops with non-affine bounds is the precise scanning (i. e., enumeration) of the points in their iteration space and the detection of their termination. Scanning schemes have been proposed for both sharedmemory and distributed-memory implementations. However, these schemes work only for perfectly nested <b>while</b> <b>loops.</b> We propose a scheme which works for imperfectly nested <b>while</b> <b>loops</b> on shared memory. This scheme has been incorporated in our loop parallelizer LooPo. Index terms: loop parallelization, for <b>loops,</b> <b>while</b> <b>loops,</b> termination detection, nonspeculative execution, code generation. 1 Introduction Loop nests in programs have the highest potential for speedup through parallelization, {{and there is a}} well developed body of work on the automatic parallelization of for loop nests with affine bounds [11, 20]. However, many practical applications require loops with more general bounds. Examples are <b>while</b> <b>loops</b> in convergence algori [...] ...|$|R
2500|$|Dijkstra's thesis {{was that}} departures from linear control flow were clearer if allowed only in disciplined higher-level {{structures}} such as the if-then-else statement and the <b>while</b> <b>loop.</b> This methodology was developed into structured programming movement, {{the title of his}} 1972 book, coauthored with C.A.R. Hoare and Ole-Johan Dahl. Considered by many as the first significant movement in history of computer programming, structured programming became the new programming orthodoxy during the 1970s. Bertrand Meyer remarked that, [...] "The revolution in views of programming started by Dijkstra's iconoclasm led to a movement known as structured programming, which advocated a systematic, rational approach to program construction. Structured programming is the basis for all that has been done since in programming methodology, including object-oriented programming." ...|$|E
5000|$|Lua {{has four}} types of loops: the <b>while</b> <b>loop,</b> the repeat loop (similar to a [...] do <b>while</b> <b>loop),</b> the numeric for loop, and the generic for loop.|$|E
50|$|In most {{computer}} programming languages, a <b>while</b> <b>loop</b> is a control flow statement that allows code {{to be executed}} repeatedly based on a given Boolean condition. The <b>while</b> <b>loop</b> {{can be thought of}} as a repeating if statement.|$|E
40|$|Since their {{introduction}} {{more than}} four decades ago, invariant assertions have, justiably, dominated the analysis of <b>while</b> <b>loops,</b> and have been the focus of sustained research interest in the seventies and eighties, and renewed interest in the last decade. In this paper, we tentatively submit an alternative concept for the analysis of <b>while</b> <b>loops,</b> explore its attributes, and its relationship to invariant assertions...|$|R
50|$|Some scene {{description}} language may include variables, constants, conditional statements, <b>while</b> <b>loops</b> and for loops.|$|R
5000|$|<b>While</b> <b>loops</b> are {{frequently}} used for reading data {{line by line}} (as defined by the [...] line separator) from open filehandles: ...|$|R
50|$|A {{simplified}} way {{to create}} a <b>while</b> <b>loop.</b>|$|E
5000|$|LOOP, LOOP <b>WHILE,</b> <b>LOOP</b> UNTIL, LOOP FOR, EXITLOOP, NEXTLOOP, ENDLOOP, and ENDLOOP REPEAT statements.|$|E
5000|$|... the {{lookahead}} token is *, with precedence 2. {{the outer}} <b>while</b> <b>loop</b> is entered.|$|E
5000|$|Hurricane Charlie (1950), one {{of eight}} major hurricanes of the 1950 Atlantic Hurricane Season, peaked as a Category 3 storm <b>while</b> <b>looping</b> well east of Bermuda ...|$|R
25|$|JavaScript {{supports}} {{much of the}} {{structured programming}} syntax from C (e.g., if statements, <b>while</b> <b>loops,</b> switch statements, do <b>while</b> <b>loops,</b> etc.). One partial exception is scoping: JavaScript originally had only function scoping with var. ECMAScript 2015 added keywords let and const for block scoping, meaning JavaScript now has both function and block scoping. Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allows the semicolons that would normally terminate statements to be omitted.|$|R
5000|$|Icon adds several control {{structures}} for looping throughgenerators. The every operator {{is similar to}} <b>while,</b> <b>looping</b> through every item returned by a generator and exiting on failure: ...|$|R
5000|$|... the {{lookahead}} token is +, with precedence 1. {{the inner}} <b>while</b> <b>loop</b> is not entered.|$|E
5000|$|... {{the next}} token is +, with {{precedence}} 1. the inner <b>while</b> <b>loop</b> is not entered.|$|E
5000|$|... {{the next}} token is end-of-line, {{which is not}} an operator. the outer <b>while</b> <b>loop</b> is left.|$|E
40|$|The polytope {{model is}} one {{possible}} (mathematical) basis for par-allelizing sequential computer programs automatically. It {{proved to be}} well suited for the parallelization of loop nests containing only for loops whose bounds satisfy several restrictions. Recent research efforts propose {{an extension of the}} polytope model, the polyhedron model, and provide an implementation for perfectly nested <b>while</b> <b>loops.</b> The first part of this thesis examines the implications of different loop types for target code generation and integrates the results in a class hierarchy. The second part extends the polyhedron model to imperfect loop nests containing general for <b>loops,</b> <b>while</b> <b>loops</b> and if statements. We provide also one possible implementation...|$|R
5000|$|The {{following}} still {{shot from}} a ribbon kinemage shows one subunit from the crystal structure 1MUM, {{which includes a}} magnesium ion (gray) but no substrate; helices are red <b>while</b> <b>loops</b> are white and beta strands are green.|$|R
50|$|As a {{procedural}} language by definition, PL/SQL provides several iteration constructs, including basic <b>LOOP</b> statements, <b>WHILE</b> <b>loops,</b> FOR loops, and Cursor FOR loops. Since Oracle 7.3 the REF CURSOR type {{was introduced to}} allow recordsets to be returned from stored procedures and functions. Oracle 9i introduced the predefined SYS_REFCURSOR type, meaning {{we no longer have}} to define our own REF CURSOR types.|$|R
5000|$|The {{following}} script fragment {{shows the}} use of variable declaration, assignment, comparison and the <b>while</b> <b>loop</b> construct: ...|$|E
5000|$|Specifically in Floyd-Hoare logic, {{the partial}} {{correctness}} of a <b>while</b> <b>loop</b> {{is governed by}} the following rule of inference: ...|$|E
5000|$|Also, in C and its descendants, a <b>while</b> <b>loop</b> is a for loop with no {{initialization}} or counting expressions, i.e., ...|$|E
5|$|In {{terms of}} {{keywords}} and language syntax, PHP {{is similar to}} the C style syntax. if conditions, for and <b>while</b> <b>loops,</b> and function returns are similar in syntax to languages such as C, C++, C#, Java and Perl.|$|R
5000|$|The {{group has}} its origins at parties in Guelph, Ontario, where {{frontman}} Matt Collins rapped <b>while</b> <b>looping</b> samples of James Brown. [...] NHS released an EP and a full-length album on Blocks Recording Club; both releases garnered airplay on CBC Radio 3.|$|R
5000|$|The same syntax {{was used}} for , [...] blocks with {{semantics}} comparable to <b>while</b> <b>loops</b> in conventional programming languages. This is illustrated in the following example, from page S6 of the Summary of TUTOR Commands and System Variables (10th ed) by Elaine Avner, 1981: ...|$|R
5000|$|... the {{lookahead}} token is *, with precedence 2. {{the inner}} <b>while</b> <b>loop</b> is entered.parse_expression_1 (lhs = 3, min_precedence = 2) ...|$|E
50|$|In computing, a <b>while</b> <b>loop</b> {{sets the}} truth of a {{statement}} as a condition precedent for the execution of a given subroutine or other code segment. By contrast, a do <b>while</b> <b>loop</b> provides for the action's ongoing execution unless a given condition is determined to be false, i.e., provides for that action's execution subject to defeasance by the condition's falsity, which falsity (i.e., {{the truth of}} the condition's negation) is set as a condition subsequent.|$|E
50|$|The while {{construct}} {{consists of}} a block of code and a condition/expression. The condition/expression is evaluated, and if the condition/expression is true, the code within the block is executed. This repeats until the condition/expression becomes false. Because the <b>while</b> <b>loop</b> checks the condition/expression before the block is executed, the control structure is often {{also known as a}} pre-test loop. Compare this with the do <b>while</b> <b>loop,</b> which tests the condition/expression after the loop has executed.|$|E
2500|$|The else {{clause in}} the above example {{is linked to the}} for statement, and not the inner if statement. [...] Both Python's for and <b>while</b> <b>loops</b> support such an else clause, which is {{executed}} only if early exit of the loop has not occurred.|$|R
40|$|In {{relational}} semantics, the input-output semantics of {{a program}} is a relation on its set of states. We generalize this in considering elements of Kleene algebras as semantical values. In a nondeterministic context, the demonic semantics is calculated by considering the worst behavior of the program. In this paper, we concentrate on <b>while</b> <b>loops.</b> Calculatin...|$|R
50|$|On November 27, a {{tropical}} storm formed north of Puerto Rico. It moved to the west-northwest, and looped to the northeast. <b>While</b> <b>looping,</b> it peaked at 80 mi/h km/h, but rapid weakening began while the storm was moving to the northeast. The storm was last seen on December 4 in the open Atlantic Ocean.|$|R
