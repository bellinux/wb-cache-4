35|12|Public
2500|$|The Spanish at the {{beginning}} of the colonial period introduced new raw materials, new products and new techniques to diversify the products the region’s artisans produced. In the pre Hispanic period, the main fibers were cotton and ixtle (made from maguey leaves), and the main <b>weaving</b> <b>mechanism</b> was the backstrap loom. The Spanish introduced wool and silk, along with new dyes/colors as well as the pedal loom, which allows faster weaving and the creation of larger pieces. Today Oaxacan weavers produce rugs, handkerchiefs, carrying bags, ponchos, various articles of clothing and more. [...] These changes did not eliminate the older methods. The backstrap loom in still in use as are dyes made from local plants, animals and minerals such as cochineal, an insect which is used to create red and tishinda, a marine snail used to create purple. The Spanish also introduced glazed ceramics, the filigree method of making gold and silver jewelry and the working of new metals, especially tin and iron.|$|E
50|$|The {{drop box}} {{probably}} caused {{an increase in}} the use of the flying shuttle because the two combined, although making the <b>weaving</b> <b>mechanism</b> more complex, greatly increased the speed of production of even fairly complex cloths.|$|E
50|$|The Spanish at the {{beginning}} of the colonial period introduced new raw materials, new products and new techniques to diversify the products the region’s artisans produced. In the pre Hispanic period, the main fibers were cotton and ixtle (made from maguey leaves), and the main <b>weaving</b> <b>mechanism</b> was the backstrap loom. The Spanish introduced wool and silk, along with new dyes/colors as well as the pedal loom, which allows faster weaving and the creation of larger pieces. Today Oaxacan weavers produce rugs, handkerchiefs, carrying bags, ponchos, various articles of clothing and more. These changes did not eliminate the older methods. The backstrap loom in still in use as are dyes made from local plants, animals and minerals such as cochineal, an insect which is used to create red and tishinda, a marine snail used to create purple. The Spanish also introduced glazed ceramics, the filigree method of making gold and silver jewelry and the working of new metals, especially tin and iron.|$|E
40|$|Aspects avoid tangled {{solutions}} for cross-cutting design concerns. However, {{there are various}} reasons why {{it may be hard}} to use an aspect language as a solution, even though developers are faced with cross-cutting design concerns. For instance, certain limitations of specific aspect composition (or <b>weaving)</b> <b>mechanisms</b> may hinder the use of aspects or the use is cumbersome. Or because of particular project requirements, such as used language, performance, or memory limitations, developers are not able to use an aspect language. In such cases, developers would benefit from better understanding current aspect composition mechanisms to customize existing techniques or implement (simple) aspect extensions from scratch. For these purposes, we present a pattern language for structure and dependency tracing, and then explain different, existing aspect implementations as sequences through this pattern language...|$|R
40|$|Despite all colossal {{efforts and}} {{investments}} by Information Systems (IS) practitioners and researchers,todays IS still remain far from timely exhibiting the required levels of adaptivity dictated by highlyvolatile, competitive and inter-organizational ("socio-techno-business") distributed environment. Difficultiesin approaching dynamic adaptivity in IS remain essentially on how promoting manageability (e. g. simplicity/understandability/incrementality) without compromising correctness and distribution. Recapitulating from the wide acceptance and understandability of UML diagrammatical artifacts and therigorous and distributed capabilities of component-based formalisms, we propose a stepwise approach for de-veloping evolving distributed IS. Staring from UML-OCL descriptions, we smoothly shift them towards atailored component Petri nets variant we called CO-NETS, where validation is geared by true-concurrent symbolic computations using rewriting logic. Applyingideas from recent AOP techniques, we then incrementally cope with behavioral dynamic changes by conceiving {{on top of}} each CO-NETS component and/or coordination a Petri net-based evolutionary aspect-layer and endow it with sound yet simple runtime <b>weaving</b> <b>mechanisms.</b> For further information, please visit this web site...|$|R
40|$|This paper {{presents}} an empirical analysis on lane changing behaviour using a trajectory data set collected at a weaving section in Grenoble (France). A detailed literature review {{shows that a}} strong empirical understanding of the <b>weaving</b> <b>mechanisms</b> is still lacking. This paper is devoted to fill this gap by investigating the lane changing behaviour at a microscopic level. We distinguished lane changes from the main road and those towards the main road. We conducted a descriptive empirical analysis of the weaving lane changes examining {{the positions of the}} lane changes and the accepted gaps. Our results show that under heavy congested traffic conditions the weaving vehicles tend to change lane as soon as possible after the start of the weaving section. When the traffic conditions are fluid, the lane changing positions are more spread along {{the first part of the}} weaving section. The weaving vehicles coming from the main road tend to change lane earlier than the weaving vehicles coming from the auxiliary lane. As the weaving vehicles change lane at the beginning of the studied weaving section, our findings ask whether the length of the weaving section is a key variable to estimate its capacity. Our findings raise also some questions about the more relevant micro-simulation models to reproduce the operation of weaving sections. Transport and Plannin...|$|R
40|$|The {{previous}} implementations {{of dynamic}} weaving in AOP (Aspect-Oriented Programming) systems have drawbacks {{although it is}} receiving growing interests in both the academia and the industry. Typical dynamic weaving techniques are divided into two kinds of levels in terms of granularity of aspect weaving: a class-level and an object-level weaving. Either of weaving techniques also has each problem: serious performance penalties and the version barrier, respectively. To provide an efficient, fine-grained, dynamic <b>weaving</b> <b>mechanism</b> at the class-level and object-level by addressing these problems, this thesis proposes new two mechanisms at each weaving level. One is a selective, just-in-time, aspect <b>weaving</b> <b>mechanism</b> for efficient class-level dynamic AOP, which seeks the performance improvement of weaving an aspect, executing an advice code, {{and the performance of}} normal execution. The other is the new concept for loosely-separated namespaces to enabling fine-grained object-level dynamic weaving, which can securely and efficiently relax the version barrier between namespaces...|$|E
40|$|Aspect-Oriented Programming (AOP) {{has emerged}} {{recently}} as a language concept for expressing cross-cutting concerns, mainly in object-oriented software. Since then, the concept {{has been applied to}} a wide variety of other contexts. In this paper, we explore some cross-cutting concerns for parallel programs of reactive systems: we propose an aspect language, Larissa, and a <b>weaving</b> <b>mechanism,</b> in a core language based on parallel communicating Mealy machines. ...|$|E
40|$|A {{sketch of}} StrongRelaxAJ is presented. StrongRelaxAJ is an {{extension}} to AspectJ with a type system for around ad-vice that integrates the ones in RelaxAJ and StrongAspectJ. In other words, StrongRelaxAJ employs the type-relaxed <b>weaving</b> <b>mechanism</b> in RelaxAJ for better adaptability of around advice, and supports type variables and explicit sig-natures of proceed for better expressiveness without relying on dangerous and annoying dynamic casting on the return values from proceed...|$|E
40|$|J 2 EE is a {{middleware}} architecture augmented with supporting {{tools for}} developing large scale client/server and multi-tier applications. J 2 EE uses Enterprise JavaBeans as its component model. The realization of these components by a J 2 EE application server can be conceptually decomposed into distinct aspects such as persistence, transaction management, security, and load balancing. However, current servers do not employ aspect-oriented programming in their implementation. In this paper, we describe a new aspect language, AspectJ 2 EE, geared towards the generalized implementation of J 2 EE application servers, and applications within this framework. AspectJ 2 EE {{can be easily}} employed to extend the fixed set of services that these servers provide with new services such as logging and performance monitoring. Even tier-cutting concerns like encryption, data compression, and memoization can be added while avoiding the drags of cross-cutting and scattered code. AspectJ 2 EE is less general (and hence less complicated) than AspectJ, yet demonstrably powerful enough for the systematic development of large scale (and distributed) applications. The introduction of parameterized aspects makes aspects in AspectJ 2 EE more flexible and reusable than aspects in AspectJ. AspectJ 2 EE also generalizes the process of binding services to user applications in the application server into a novel deploy-time weaving of aspects. Deploytime weaving is superior to traditional <b>weaving</b> <b>mechanisms,</b> in that it preserves the object model, has a better management of aspect scope, and presents a more understandable and maintainable semantic model...|$|R
40|$|TRB 2014 - Transportation Research Board 93 rd Annual Meeting, WASHINGTON D. C, ETATS-UNIS, 12 -/ 01 / 2014 - 16 / 01 / 2014 An {{empirical}} {{analysis is}} conducted on lane changing behavior using a trajectory data set collected at a weaving section in Grenoble (France). A detailed literature review shows that strong empirical {{understanding of the}} <b>weaving</b> <b>mechanisms</b> is still lacking. The goal is to investigate the lane changing behavior at a microscopic level. Data collection distinguished lane changes from the main road and those towards the main road. Descriptive empirical analysis examines {{the positions of the}} lane changes and the corresponding accepted gaps. Results show that under heavy congested traffic conditions the weaving vehicles tend to change lane as soon as possible after the start of the weaving section. When the traffic conditions are fluid, the weaving vehicles coming from the main road tend to change lane earlier than the weaving vehicles coming from the auxiliary lane. Moreover, weaving vehicles coming from the auxiliary lane accept smaller gaps and headways than the weaving vehicles coming from the main road. Our findings are questioning some results of previous works using micro-simulation to study weaving sections. As the weaving vehicles change lane {{at the beginning of the}} studied weaving section, our findings ask whether the length of the weaving section is a key variable to estimate its capacity. Our findings raise also some questions about the relevance of the gap acceptance theory to model lane changes at weaving sections. But further research are needed to asses these hypothesis...|$|R
40|$|Abstract. This paper {{presents}} {{a set of}} the let-off mechanism of carbon fiber multilayer diagonal loom, which can accomplish thirty layer fabric <b>weaving.</b> This <b>mechanism</b> can realize multi-layer positive warp let-off and negative warp tension control and can meet different fabric structure and different types of warp weaving requirements. According to the requirement of the multi-layer weaving and the characteristics of carbon fiber, 3 d virtual prototype model of carbon fiber multilayer diagonal loom is established by applying the 3 d design software Solidworks and using the mechanical analysis software ANSYS analyses the mechanical properties of the key parts in different working conditions. Virtual prototype design ensures the rationality and reliability of {{the design of the}} whole machine...|$|R
40|$|Statically typed aspect-oriented {{programming}} languages restrict {{application of}} around advice {{only to the}} join points that have conforming types. Though the restriction guarantees type safety, it can prohibit application of advice that is useful, yet does not cause runtime type errors. To this problem, we present a novel <b>weaving</b> <b>mechanism,</b> called the type relaxed weaving, that allows such advice applications while preserving type safety. We formalized the mechanism, and implemented as an AspectJ compatible compiler, called RelaxAJ...|$|E
40|$|Abstract—In {{spite of}} the {{modularization}} benefits supported by the Aspect-Oriented programming paradigm, different usability issues have hindered its adoption. The decoupling between aspect definitions and base code, and the compile-time <b>weaving</b> <b>mechanism</b> adopted by different AOP languages, require developers to manage the consistency between base code and aspect code themselves. These mechanisms create opportunities for errors related to aspect weaving invisibility and non-local control characteristics of AOP languages. This paper describes XE (Extreme Editor), an IDE that supports developers in managing these issues in the functional aspect-oriented programming domain. I...|$|E
40|$|We {{explore the}} {{semantics}} of aspect oriented programming languages {{in the context}} of embedded reactive systems. For reactive systems, {{there are a lot of}} simple and expressive formal models that can be used, based on traces and automata. Moreover, the main construct in the programming languages of the domain is parallel composition, and the notion of transverse modification is quite natural. We propose: 1) a semantical definition of an aspect, allowing one to study its impact on the original program; 2) some operational constructs that can constitute the basis of a <b>weaving</b> <b>mechanism...</b>|$|E
40|$|The {{manufacturers}} of weaving equipment recently endeavour to minimise the necessary designing {{plays in the}} <b>weaving</b> loom <b>mechanisms.</b> One of the mechanisms most exposed to stress is the shedding motion that defines the held-shaft stroke. Its end part is the heald shaft. The heald shaft constitutes a problematic assembly of the shedding motion. The design employed presently is characterised by dynamic impact loading caused by designing play in the suspension of healds into the heald shaft. During weaving cycle, the healds fly between the main beams of the heald shaft, producing a considerable force pulse. This paper {{is concerned with the}} description of dynamic behaviour of the existing design on the basis of mathematical modelling and verification of obtained results by means of experimental analysis...|$|R
40|$|Security {{requirements}} {{are concerned with}} protecting assets of a system from harm. Implemented as code aspects to <b>weave</b> protection <b>mechanisms</b> into the system, se-curity requirements need to be validated when changes are made to the programs during system evolution. However, {{it was not clear}} for developers whether exist-ing validation procedures such as test cases are sufficient for security and when the implemented aspects need to adapt. In this chapter, we propose an approach for detecting any change to the satisfaction of security requirements in three steps: (1) identify the asset variables in the systems that are only accessed by a join-point method; (2) trace these asset variables to identify both control and data dependen-cies between the non-aspect and aspect functions; and (3) update the test cases ac-cording to implementation of these dependencies to strengthen the protection when a change happens. These steps are illustrated by a case study of a meeting scheduling system where security is a critical concern. 1...|$|R
40|$|Property {{concerns}} conflicts - both {{conflicts between}} individuals and conflicts of interest. Conflicts between individuals {{have long been}} the paradigmatic property focus. According to this view, property debates circle around issues of autonomy and productive competition. But this is an impoverished view. In this Article, we shift attention to conflicts of interest. By helping people manage conflicts of interest, a well-governed property system balances interdependence with autonomy and productive cooperation with productive competition. We identify three <b>mechanisms</b> <b>woven</b> throughout property law that help manage conflicts of interest: (1) internalization of externalities; (2) democratization of management; and (3) de-escalation of transactions. We show that property law predictably selects among these mechanisms depending on the ratio of economic to social benefits that people seek from a group resource. When economic concerns predominate, property law typically uses contribution-based allocations of rights and responsibilities mediated by formal, foreground procedures, while at the social {{end of the spectrum}} we tend to see more egalitarian substantive rules operating as an informal, background safety net...|$|R
40|$|A model driven {{engineering}} process involves different and heterogeneous models that represent various {{perspectives of the}} system under development. The model composition operation allows combining those sub-models into an integrated view, but remains a tedious activity. For that, traceability information must be maintained to comprehend the composition effects and better manage the operation itself. Against this context, the current paper describes a framework for model composition traceability. We consider the traces generation concern as a crosscutting concern where the <b>weaving</b> <b>mechanism</b> is performed using graph transformations. A composition specification case study is presented to illustrate our contribution...|$|E
40|$|AspectJ is a {{well-established}} programming language for the im-plementation of aspect-oriented programs. It supports the aspect-oriented programming paradigm {{by providing a}} special unit, called "aspect", which encapsulates crosscutting code. While with AspectJ a suitable aspect-oriented programming language is at hand, no feasible modeling language is available that supports the design of AspectJ programs. In this work, such a design notation for AspectJ programs is presented based on the UML. It provides representations for all language constructs in AspectJ and speci-fies an UML implementation of AspectJ's <b>weaving</b> <b>mechanism.</b> The design notation eases the perception of aspect-orientation and AspectJ programs. It carries over the advantages of aspect-orientation to the design level...|$|E
40|$|Dynamic weaving is {{much more}} {{flexible}} than static weaving because the separation of concerns remains at runtime. This results in highly configurable and adaptable applications, since the rules that govern the weaving of aspects can evolve during the application execution, according to different cri-teria – i. e. user preferences, execution context, etc. In this paper we describe the dynamic <b>weaving</b> <b>mechanism</b> offered by CAM/DAOP, our own component and aspect platform. The most relevant feature is that the plugging of compo-nents and aspects {{is driven by the}} application architectural information, which is loaded into the internal structures of the CAM/DAOP platform to be consulted at runtime...|$|E
40|$|AbstractA {{computationally}} economic finite-element-based {{stress analysis}} model, developed previously by the authors, {{has been extended}} to predict the thermal behaviour of ceramic matrix composites with strain-induced damage. The finite element analysis utilises a solid element to represent a homogenised orthotropic medium of a heterogeneous uni-directional tow. The non-linear multi-axial strain dependent thermal behaviour has been discretised by multi-linear curves, which have been implemented by a user defined subroutine, USDFLD, in the commercial finite element package, ABAQUS. The model {{has been used to}} study the performance of two CMC composites: a SiC (Nicalon) fibre-calcium aluminosilicate (CAS) matrix, 0 °/ 90 ° cross-ply laminate Nicalon-CAS; and, carbon fibre-dual carbon-SiC matrix (C/C-SiC), plain weave laminate DLR-XT. The global through-thickness thermal conductivity degradation with composite uni-axial strain has been predicted. Comparisons have been made between the predictions and experimental data for both materials, and good agreement has been achieved. For the Nicalon-CAS 0 °/ 90 ° cross-ply the dominant mechanism of thermal conductivity degradation is combined fibre failure and associated wake debonding; and, for the DLR-XT plain <b>weave</b> the same <b>mechanisms</b> act in combination with out-of-plane shear failure...|$|R
40|$|Bis(3 -pyridyl) ureas with ethylene, propylene, butylene, {{phenylene}} and napthy- lene spacer {{groups were}} synthesised by {{the reaction of}} 3 -isocyanato-pyridine, pre- pared in situ from nicotinoyl azide, with the appropriate diamine. Each ligand was crystallised and their structures were solved using X-ray crystallography. The urea groups of the napthylene-spaced ligand adopt a bifurcated hydrogen-bonding mode, thereby forming an α-tape whereas in the the propylene-, butylene- and phenylene- spaced ligands, every other bifurcated interaction is replaced with a NH···Ourea and a NH···Npyridyl, caused {{by the presence of}} a single competing intramolecular CH···Ourea set-up by the electron-withdrawing pyridyl nitrogen. With the ethylene-spaced urea, the bifurcated hydrogen-bonding motif is absent. These differences in the intermolec- ular bonding may be only be due to the packing requirements of the spacer group: as these interactions become stronger, either by greater van der Waals attraction in a longer oliomethylene chain or the greater π-π stacking interactions of the napthy- lene ring, adjacent urea groups become closer and bind preferentially to form the bifurcated interaction. The bis(3 -pyridyl) ureas were subsequently tested for their ability to form gels, and in some cases, crystallised in the presence of selected silver(I) salts. Compound 2. 1 formed five pseudo-polymorphs of a Borromean-type structure upon slow crys- tallisation in various solvent mixtures with silver(I) nitrate. Within each struc- ture, there are layers made up of paired Borromean <b>weaves</b> and the <b>mechanism</b> by which these layers stack, though unclear, must ultimately be driven by the inter- actions of the solvent molecules incorporated into the structures. When the coun- teranion in the crystallisation was replaced by either acetate, tetrafluoroborate or hexafluorophosphate, several coordination polymers were synthesised but the Bor- romean structure was not reproduced. A similar dependency on counteranion was observed with N,N"-pentylene- 1, 5 -diylbis(N'-pyridin- 3 -ylurea) which was similarly crystallised with silver(I) nitrate, acetate and tetrafluoroborate. In the presence of the latter, a quintuple helix formed. Several bis(3 -pyridylureas) with ethylene, pyridine, methylenebisphenylene and cyclohexylene spacer groups were shown to form gels and crystals in the presence of silver(I) nitrate. Two macrocyclic structures were grown from gel states which may be further indication as to how the same molecules aggregate in the gel fibres with silver(I) nitrate promoting aggregation of the molecules along one direction...|$|R
40|$|The work of {{this thesis}} has {{comprised}} addressing issues regarding design and development of composite Domain-Specific Languages, evaluation of DSLs with respect to frameworks, and meta modelling using components. COMPOSITE LANGUAGE DESIGN AND DEVELOPMENT Language Driven Development is an increasingly popular approach in software engineering. However, as motivated, {{there are not many}} practical solutions of unifying languages and ensuring that best-practices are followed. Moreover, changing and evolving requirements may potentially imply a tedious and inefficient development process since changes can not easily be reflected in languages. To address these issues, a complete platform for design, development and model execution has been constructed. This platform includes tools, editors and runtime environments that address the shortcomings of traditional Domain-Specific Language use and development. Aspect-oriented weaving has been identified as a mechanism for supporting dynamic language composition. Specifically, the platform supports: - Standardised language design and structuring - Unification and reuse of languages based on a common platform and meta model architecture - Aspect-oriented customisation and extension of languages to meet new requirements - Evolving languages by recycling models - Modelling according to aspects / language views - Decentralised development and language integration - Execution of models conforming to composite languages As we have seen in this thesis, composite language design provides software engineers with an efficient approach in software development. Important key principles are focus on flexibility, integrability and reusability. Recycling of models Evolving languages results in incompatibility issues between models and meta models. Specifically, changed language properties imply new language versions. As a consequence, models of an earlier language version are likely not to conform to the new language version’s meta model. This can be addressed using model transformations where a model conforming to an earlier language version is merged with a set of aspect language models. The result of the transformation process is a model that conforms to the updated language version, and thus, reflects new language properties. Modelling according to aspects / views Aspect-oriented <b>weaving</b> is a <b>mechanism</b> of incorporating aspect languages into a primary language. This mechanism also supports modelling according to custom language views. Consequently, software engineers can focus on language segments that reflect concepts and concerns within their area of expertise by creating models according to certain views. Subsequently, these models can be transformed to achieve a composite model conforming to the composite DSL, known as convergence of multiple views. Decentralised development Specialisation and distribution of knowledge complicate software development. Domain expertise is often possessed by stakeholders that do not necessarily have software development skills. Hence, good communication between domain experts and software developers is crucial. If this communication fails, the result can be poor or, in worst case, useless software. Two aspects of decentralised software development have been addressed in thesis. Firstly, aspect languages can be created in a decentralised manner and woven together to constitute a rich composite language. Secondly, models conforming to each aspect language can be created by different parties and subsequently merged together. Community-based cooperation is a typical example of decentralised development. This kind of development can be supported by providing a community website with communication tools, including a database for available aspect languages - a remote Language Repository. This way, aspect languages can be downloaded on a need-to-have basis and woven together with a primary language to provide functionality for a given type of concerns. FRAMEWORKS AND DSLs Frameworks, DSLs and composite DSLs are all highly usable approaches in modelling problem domain concerns. There are scenarios where frameworks are better suited than DSLs, and vice versa. Frameworks provide a high degree of customisation and flexibility, as illustrated with the Ecommerce framework. However, framework instantiation is questionable since this requires manual writing of instantiation code. Conversely, traditional DSLs are static in nature and do not provide mechanisms for customisation. There is, however, no known reason why a DSL should not be created in a manner that supports reuse and composition as illustrated by the {{work of this}} thesis. META MODELLING USING COMPONENTS Mechanisms for creation of and modelling with meta components have been elaborated. These mechanisms are based on meta model nesting and a dual interpretation of meta classes. Specifically, a meta class can have two roles: a traditional meta class or a meta component. Meta components can be used to group language features together. For instance, all constructs of a language can be defined by means of inner meta classes of a enclosing meta class. This increases encapsulation and modularisation. Moreover, a component can be designed to address a certain aspect in a similar manner as an aspect language. An important observation is that a component is still a meta class. Hence, components can be used directly as language constructs providing means of hierarchical meta modelling. In other words, languages can be created in two dimensions. The first dimension corresponds to classical flat meta modelling, while the second dimension reflects nesting of meta classes / components. Meta model nesting provides a mechanism for defining super- and subcomponents in the proper contextual setting. That is, within an enclosing class / component...|$|R
40|$|The Aspect-Oriented Design Model (AODM) is a {{new design}} model for the {{development}} of AspectJ programs with the UML. It extends existing UML concepts using standard UML extension mechanisms to provide aspect-oriented concepts as they are found in AspectJ. Further, the AODM specifies how an aspect-oriented design model may be transformed into an ordinary UML design model. It demonstrates how this <b>weaving</b> <b>mechanism</b> may be represented with help of existing UML concepts. The AODM facilitates the perception of aspect-oriented crosscutting in AspectJ programs and carries over the advantages of aspectorientation to the design level. This paper explains the reasoning behind the AODM and demonstrates how it may be used to design aspect-oriented crosscutting in general...|$|E
40|$|Abstract. In {{spite of}} the {{modularization}} benefits supported by the Aspect-Oriented programming paradigm, different usability issues have hindered its adoption. The decoupling between aspect definitions and base code, and the compile-time <b>weaving</b> <b>mechanism</b> adopted by different AOP languages, require developers to manage the consistency between base code and aspect code themselves. These mechanisms create opportunities for errors related to aspect weaving invisibility and non-local control characteristics of AOP languages. In short, AOP developers lack adequate support for: 1) visualizing and identifying the exact points in the code where aspects are woven; 2) preventing aspect-base code inconsistencies, and 3) evolving aspect-oriented code in a coherent way. This paper describes XE (Extreme Editor), an IDE that supports developers in managing these issues in the functional aspect-oriented programming domain...|$|E
40|$|Several {{approaches}} for aspect-oriented modeling (AOM) {{have been developed}} to modularize crosscutting concerns properly in UML models. In this position paper we present a combination of AOM approaches and show how they can be applied in a model-driven process targeting business applications. We present a UML 2 profile for platform independent AOM with advanced pointcut expressions and a corresponding model <b>weaving</b> <b>mechanism</b> for behavior models using UML 2 Actions. We show that a seamless integration of aspect-oriented concepts into an existing model-driven process can be achieved easily with state-of-the-art technology. We applied our approach {{in the context of an}} industrial case study and performed an evaluation that shows a significantly improved understandability and maintainability of platform independent models using aspects...|$|E
40|$|The project {{deals with}} an {{investigation}} to determine experimentally the axial and bending strains (normal {{to the plane}} of the mechanism) in the two connecting rods of the <b>weaving</b> <b>mechanism</b> of a small textile loom. A complete theoretical, kinematic, force and stress analysis has been made on the six-bar chain constituting the mechanism. The peak to peak strain values have been measured at various different crank speeds. The nature of the bending strains in a direction normal to {{the plane of the}} mechanism have been further examined by static tests which have been performed on the mechanism. Measured dynamic strain data for the connecting rods is presented and comparison is made between calculated and measured values. Experimental results for axial peak to peak and cyclic strain variation showed good agreement with the calculated value...|$|E
40|$|This paper {{presents}} {{an approach to}} generating tests for adequately exercising interaction between aspects and classes based on aspect-oriented UML models. In this approach, an aspect-oriented model consists of class diagrams, aspect diagrams, and sequence diagrams. Since methods of classes and advices of aspects are both specified by sequence diagrams, the advices on a given method can be weaved into a new sequence diagram, which {{is essential to the}} <b>weaving</b> <b>mechanism</b> in AOSD. For a woven sequence diagram, the approach exploits goal-directed reasoning to construct a flow graph for a given coverage criteria (e. g. the combination of branch coverage and polymorphic coverage in this paper), and further expands the graph to a flow tree, where each path is a test. Then the approach derives objects with desired states for exercising each test in the flow tree...|$|E
40|$|Nowadays, aspect-oriented {{techniques}} {{are widely used}} to better modularize object-oriented programs by introducing crosscutting concerns in a safe and non invasive way, i. e., aspect-oriented mechanisms better address the modularization of functionality that orthogonally crosscut {{the implementation of the}} application. The high modularization is done by three main concepts: encapsulation of crosscutting concerns in a modular unit (the aspect), selection of the exact point where the concern should be inserted (join point selection or pointcut) and insertion of the concern into the selected join points (the <b>weaving</b> <b>mechanism).</b> Unfortunately, as noted by several researchers, most of the current aspect-oriented approaches are too coupled with the application code, and this fact hinders the concerns separability and consequently their re-usability since each aspect is strictly tailored on the base application. Moreover, the join points, i. e. the locations affected by a crosscutting concerns, actually are defined at operation level. It implies that the possible set of join points includes every operation (e. g., metho...|$|E
40|$|International audienceConcerns such as logging, {{auditing}} {{and accounting}} {{need to be}} addressed already in the business process modeling phase and not only in the process implementation phase. Mostly, such concerns are modeled as part of the normal flow in business process models. However, the crosscutting nature of such concerns leads to complex, scattered, and tangled models that are hard to understand and to manage. The lack of appropriate means to modularize crosscutting concerns in business process modeling languages seriously affects understandability, maintainability and reusability. In a previous work we proposed AO 4 BPMN 1. 0 as an aspect-oriented extension of BPMN that allows the modularization of crosscutting concerns. However, there were several open issues in that proposal. First, it lacks a concrete <b>weaving</b> <b>mechanism</b> for composing business processes and aspects. Second, it lacks a well-defined pointcut language to select join points. Third, it does not support BPMN 2. 0, which was still under development at that time. In this paper we tackle these issues and present a weaver for AO 4 BPMN based on model transformation as well as an OCL-based pointcut language...|$|E
40|$|Aspect-Oriented Programming (AOP) started {{ten years}} ago with the remark that {{modularization}} of so-called crosscutting functionalities is a fundamental problem for the engineering of large-scale applications. Originating at Xerox PARC, this observation has sparked {{the development of a new}} style of programming featured that is gradually gaining traction, as it is the case for the related concept of code injection, in the guise of frameworks such as Swing and Google Guice. However, AOP lacks theoretical foundations to clarify this new idea. This paper proposes to put a bridge between AOP and the notion of 2 -category to enhance the conceptual understanding of AOP. Starting from the connection between the λ-calculus and the theory of categories, we propose to see an aspect as a morphism between morphisms—that is as a program that transforms the execution of a program. To make this connection precise, we develop an advised λ-calculus that provides an internal language for 2 -categories and show how it can be used as a base for the definition of the <b>weaving</b> <b>mechanism</b> of a realistic functional AOP language, called MinAML...|$|E
40|$|Aspect-Oriented Software Development (AOSD) is an {{emerging}} paradigm {{that addresses the}} limitation of Object-Oriented (OO) technology in localizing crosscutting concerns (e. g. logging, tracing, etc.) by introducing a new modularization mechanism: the aspect. Aspects localize the behaviour of crosscutting concerns (called advice) and specify points in the structure or execution trace of the core system (called join points) where advice applies. A <b>weaving</b> <b>mechanism</b> interleaves {{the execution of the}} aspects and the core. The behaviour of an Aspect-Oriented (AO) system is the woven behaviour of the aspects and the core; this woven behaviour may reveal conflicts in the goals of system concerns (core or crosscutting) : such conflicts are called concern interactions. In this thesis, we present a process for detecting concern interactions in AO designs expressed in the UML and our weaving rule specification language (WRL). The process consists of two tasks: 1) a light-weight syntactic analysis of the AO model to reveal advice overlaps (e. g. instances where multiple advice applies to the same join point) as potential sources of interaction and 2) verification of desired i 0. Abstract i...|$|E
40|$|International audienceAspect-Oriented Programming (AOP) started {{ten years}} ago with the remark that {{modularization}} of so-called crosscutting functionalities is a fundamental problem for the engineering of large-scale applications. Originating at Xerox PARC, this observation has sparked {{the development of a new}} style of programming featured that is gradually gaining traction, as it is the case for the related concept of code injection, in the guise of frameworks such as Swing and Google Guice. However, AOP lacks theoretical foundations to clarify this new idea. This paper proposes to put a bridge between AOP and the notion of 2 -category to enhance the conceptual understanding of AOP. Starting from the connection between the !-calculus and the theory of categories, we propose to see an aspect as a morphism between morphismsâthat is as a program that transforms the execution of a program. To make this connection precise, we develop an advised !-calculus that provides an internal language for 2 -categories and show how it can be used as a base for the definition of the <b>weaving</b> <b>mechanism</b> of a realistic functional AOP language, called MinAML...|$|E
40|$|Aspect Oriented Programming (AOP) started {{ten years}} ago with the remark that {{modularization}} of so-called crosscutting functionalities is a fundamental problem for the engineering of large-scale applications. Originating at Xerox PARC, this observation has sparked {{the development of a new}} style of programming featured that is gradually gaining traction, as it is the case for the related concept of code injection, in the guise of frameworks such as Swing and Google Guice. However, AOP lacks theoretical foundations to clarify this new idea. This paper proposes to put a bridge between AOP and the notion of 2 -category to enhance the conceptual understanding of AOP. Starting from the connection between the λ-calculus and the theory of categories, we propose to see an aspect as a morphism between morphisms [...] -that is as a program that transforms the execution of a program. To make this connection precise, we develop an advised lambda-calculus that provides an internal language for 2 -categories and show how it can be used as a base for the definition of the <b>weaving</b> <b>mechanism</b> of a realistic functional AOP language, called MinAML. Finally, we advocate for a formalization of more complex AOP languages (eg. with references or exceptions) using the notion of enriched Lawvere theories...|$|E
40|$|Abstract Aspect-oriented {{programming}} modularizes crosscutting concerns into aspects {{with the}} advice invoked at the specified points of program execution. Aspects {{can be used}} in a harmful way that invalidates desired properties and even destroys the conceptual integrity of programs. To assure the quality of an aspect-oriented system, rigorous analysis and design of aspects are highly desirable. In this paper, we present an approach to aspect-oriented modeling and verification with finite state machines. Our approach provides explicit notations (e. g., pointcut, advice and aspect) for capturing crosscutting concerns and incremental modification requirements with respect to class state models. For verification purposes, we compose the aspect models and class models in an aspect-oriented model through a <b>weaving</b> <b>mechanism.</b> Then we transform the woven models and the class models not affected by the aspects into FSP (Finite State Processes), which are to be checked by the LTSA (Labeled Transition System Analyzer) model checker against the desired system properties. We have applied our approach to the modeling and verification of three aspect-oriented systems. To further evaluate the effectiveness of verification, we created a large number of flawed aspect models and verified them against the system requirements. The results show that the verification has revealed all flawed models. This indicates that our approach is effective in qualit...|$|E
