190|104|Public
5|$|Windows Server 2012 {{includes}} version 8.0 of Internet Information Services (IIS). The {{new version}} contains new {{features such as}} SNI, CPU usage caps for particular websites, centralized management of SSL certificates, <b>WebSocket</b> support and improved support for NUMA, but few other substantial changes were made.|$|E
5|$|According to game creator Steven Howse, he was {{inspired}} to create the game while he was experiencing financial problems. As {{a result of these}} financial issues, he had to move from Minneapolis to Michigan, where he realized the popularity of Agar.io. He had long wanted to create an online multiplayer game, but the only option for the development at the time was in Adobe Flash, and not wanting to use this method, he gave up the idea for a while. Howse finally created the game when he realized that <b>WebSocket,</b> a low-latency protocol supported by most major browsers, was sufficient and stable enough to run an HTML game similar to other games such as Agar.io. The most difficult part of the development was in making each server stable enough to handle 600 players at a time. Howse struggled to find space on servers with enough space in regions where there was more demand and tried to avoid cloud services like Amazon Web Services, owing to the high cost that these services would incur based on the amount of bandwidth used.|$|E
25|$|Many of {{the latest}} HTML5 features: {{almost all of the}} Web Platform's features: GPU-accelerated canvas, {{including}} CSS 3D Transforms, CSS animations, SVG, <b>WebSocket</b> (including binary messages), Dedicated Workers; it has overflow scroll support, strong HTML5 video support, and new capabilities such as IndexedDB, WebWorkers, Application Cache and the File APIs, date- and time-pickers, parts of the Media Capture API. Also supports mobile oriented features such as Device Orientation and Geolocation.|$|E
40|$|Indiana University-Purdue University Indianapolis (IUPUI) Asynchronous JavaScript and XML (AJAX) is {{the primary}} method for {{enabling}} asynchronous communication over the Web. Although AJAX is providing warranted real-time capabilities to the Web, it requires unconventional programming methods {{at the expense of}} extensive resource usage. <b>WebSockets,</b> which is an emerging protocol, has the potential to address many challenges with implementing asynchronous communication over the Web. There, however, has been no in-depth study that quantitatively compares AJAX and <b>WebSockets.</b> This thesis therefore provides two contributions to Web development. First, it provides an experience report for adding real-time monitoring support over the Web to the Open-source Architecture of Software Instrumentation of Systems(OASIS), which is open-source real-time instrumentation middleware for distributed real-time and embedded (DRE) systems. Secondly, it quantitatively compares using AJAX and <b>WebSockets</b> to stream collected instrumentation data over the Web in real-time. Results from quantitative comparison between <b>WebSockets</b> and AJAX show that a <b>WebSockets</b> server consumes 50 % less network bandwidth than an AJAX server; a <b>WebSockets</b> client consumes memory at constant rate, not at an increasing rate; and <b>WebSockets</b> can send up to 215. 44 % more data samples when consuming the same amount network bandwidth as AJAX...|$|R
50|$|The {{continuously}} evolving Pepper API {{also supports}} Gamepads (version 19) and <b>WebSockets</b> (version 18).|$|R
5000|$|... total.js - web {{application}} framework for node.js - Server-Sent Events example + supports <b>WebSockets</b> (RFC 6455) ...|$|R
50|$|While the <b>WebSocket</b> {{protocol}} {{itself is}} unaware of proxy servers and firewalls, it features an HTTP-compatible handshake thus allowing HTTP servers {{to share their}} default HTTP and HTTPS ports (80 and 443) with a <b>WebSocket</b> gateway or server. The <b>WebSocket</b> protocol defines a ws:// and wss:// prefix to indicate a <b>WebSocket</b> and a <b>WebSocket</b> Secure connection, respectively. Both schemes use an HTTP upgrade mechanism to upgrade to the <b>WebSocket</b> protocol. Some proxy servers are transparent and work fine with WebSocket; others will prevent <b>WebSocket</b> from working correctly, causing the connection to fail. In some cases, additional proxy server configuration may be required, and certain proxy servers {{may need to be}} upgraded to support <b>WebSocket.</b>|$|E
50|$|To {{establish}} a <b>WebSocket</b> connection, the client sends a <b>WebSocket</b> handshake request, {{for which the}} server returns a <b>WebSocket</b> handshake response, {{as shown in the}} example below.|$|E
5000|$|... javax/websocket: The Java API for <b>WebSocket</b> {{specification}} {{defines a}} set of APIs to service <b>WebSocket</b> connections.|$|E
5000|$|Unreal HTML5 player uses MSE for {{low latency}} (sub-second) live {{playback}} of streams sent via <b>WebSockets</b> by Unreal Media Server ...|$|R
50|$|<b>WebSockets</b> are a {{bidirectional}} stateful real-time client-server {{communication technology}} {{part of the}} HTML5 specification, superior to Ajax in terms of performance and simplicity.|$|R
5000|$|PySCXML a Python-implementation. Supports a {{wide range}} of technologies, {{including}} <b>websockets</b> and SOAP. Highly standards-compliant. Also supports the ECMAScript datamodel. (last push 2013) ...|$|R
50|$|<b>WebSocket</b> is a {{computer}} communications protocol, providing full-duplex communication channels over a single TCP connection. The <b>WebSocket</b> protocol was standardized by the IETF as RFC 6455 in 2011, and the <b>WebSocket</b> API in Web IDL is being standardized by the W3C.|$|E
50|$|Using {{the browser}} Developer Tools, {{developers}} can inspect the <b>WebSocket</b> handshake {{as well as}} the <b>WebSocket</b> frames.|$|E
50|$|Unlike HTTP, <b>WebSocket</b> {{provides}} full-duplex communication.Additionally, <b>WebSocket</b> enables {{streams of}} messages {{on top of}} TCP. TCP alone deals with streams of bytes with no inherent concept of a message. Before <b>WebSocket,</b> port 80 full-duplex communication was attainable using Comet channels; however, Comet implementation is nontrivial, and due to the TCP handshake and HTTP header overhead, it is inefficient for small messages. <b>WebSocket</b> protocol aims to solve these problems without compromising security assumptions of the web.|$|E
50|$|BrowserQuest {{is written}} in HTML5 and <b>WebSockets</b> and is playable from modern web browsers. The client makes use of HTML5's canvas element to render the graphics, web workers to {{initialize}} the map without affecting {{the rest of the}} page, localStorage to save progress, media queries to dynamically resize the game to the device, and HTML5 Audio to render the sound. The server uses node.js communicating with the browser using <b>WebSockets.</b> BrowserQuest is a demonstration of the technology that it uses.|$|R
50|$|Cloudflare {{supports}} new web protocols, including SPDY and HTTP/2. In {{addition to}} this, Cloudflare offers support for HTTP/2 Server Push. Cloudflare also supports proxying <b>Websockets.</b>|$|R
50|$|On 9 September 2014, Oracle Corporation {{released}} GlassFish 4.1. This release {{includes many}} bug fixes (over a thousand) {{and the latest}} MR releases of CDI and <b>WebSockets.</b>|$|R
50|$|If an {{encrypted}} <b>WebSocket</b> {{connection is}} used, then {{the use of}} Transport Layer Security (TLS) in the <b>WebSocket</b> Secure connection ensures that an HTTP CONNECT command is issued when the browser is configured to use an explicit proxy server. This sets up a tunnel, which provides low-level end-to-end TCP communication through the HTTP proxy, between the <b>WebSocket</b> Secure client and the <b>WebSocket</b> server. In the case of transparent proxy servers, the browser is unaware of the proxy server, so no HTTP CONNECT is sent. However, since the wire traffic is encrypted, intermediate transparent proxy servers may simply allow the encrypted traffic through, {{so there is a}} much better chance that the <b>WebSocket</b> connection will succeed if <b>WebSocket</b> Secure is used. Using encryption is not free of resource cost, but often provides the highest success rate since it would be travelling through a secure tunnel.|$|E
50|$|The <b>WebSocket</b> {{protocol}} {{is currently}} supported in most major browsers including Google Chrome, Microsoft Edge, Internet Explorer, Firefox, Safari and Opera. <b>WebSocket</b> also requires web applications on the server to support it.|$|E
50|$|Modern browsers {{will permit}} a script {{to connect to}} a <b>WebSocket</b> address without {{applying}} the same-origin policy. However, they recognize when a <b>WebSocket</b> URI is used, and insert an Origin: header into the request that indicates {{the origin of the}} script requesting the connection. To ensure cross-site security, the <b>WebSocket</b> server must compare the header data against a whitelist of origins permitted to receive a reply.|$|E
50|$|Secondly, the request-response {{nature of}} HTTP {{is often cited}} {{as one of the}} {{limitations}} for IoT use-cases as it does not match the event-driven nature of applications that are common in the Wireless Sensor Networks. To overcome this shortcoming while keeping a focus on fostering integration with the Web, several authors have suggested the use of HTML5 <b>Websockets</b> either natively or through the use of translation brokers (e.g., translating from MQTT or CoAP to <b>Websockets).</b> This complements the REST API of things with a publish subscribe mechanism that is largely integrated with the Web eco-system.|$|R
30|$|The DeliveryCapabilities {{component}} {{describes the}} methods {{supported by the}} PubSub-enabled OWS for delivering messages, e.g. SOAP, WS-N, ATOM, Server-Sent Events (SSE), <b>WebSockets,</b> Open Archives Initiative Protocol for Metadata Harvesting (OAI-PMH).|$|R
50|$|It {{features}} also accessibility {{support and}} support for cross document messaging, databases, datagrid, dom storage, filtera, geolocation, icon database, offline web application, server-sent events, sharedWorker video/audio, <b>WebSockets,</b> Worker and 3D support.|$|R
50|$|The <b>WebSocket</b> {{protocol}} {{is implemented}} in different web browsers, web servers, and run-time environments and libraries acting as clients or servers. The {{following is a}} table of different features of notable <b>WebSocket</b> implementations.|$|E
5000|$|It is {{important}} (from a security perspective) {{to validate the}} [...] "Origin" [...] header during the connection establishment process on the serverside (against the expected origins) to avoid Cross-Site <b>WebSocket</b> Hijacking attacks, which might be possible when the connection is authenticated with Cookies or HTTP authentication. It is better to use tokens or similar protection mechanisms to authenticate the <b>WebSocket</b> connection when sensitive (private) data is being transferred over the <b>WebSocket.</b>|$|E
50|$|A {{perhaps more}} {{efficient}} transport for real-time messaging is <b>WebSocket,</b> a web technology providing for bi-directional, full-duplex communications channels over a single TCP connection. XMPP over <b>WebSocket</b> binding {{is defined in}} the IETF proposed standard RFC 7395.|$|E
40|$|Written as an {{easy and}} {{practical}} guide, {{this book is}} a crash course on using JAX-RS 2. 0, JSON, and <b>WebSockets</b> to develop RESTful services. Getting Started with Developing RESTful Web Services using JAX-RS 2. 0, JSON, and <b>WebSockets</b> is a perfect reading source for application developers {{who are familiar with}} Java EE and are keen to understand the new HTML 5 -related functionality introduced in Java EE 7 to improve productivity. To take full advantage of this book, you need to be familiar with Java EE and have some basic understanding of using the GlassFish application server...|$|R
5000|$|The first {{industrial}} cloud robotics platform, Tend, {{was founded}} by Mark Silliman, James Gentes and Robert Kieffer in February 2017. Tend allows robots to be remotely controlled and monitored via <b>websockets</b> and NodeJs.|$|R
5000|$|Mongrel2 is an {{open-source}} [...] "language agnostic" [...] {{web server}} written by Zed Shaw, {{and is the}} successor to Shaw's Mongrel server. The server supports HTTP, Flash XMLSockets, <b>WebSockets</b> and long polling connections.|$|R
50|$|Socket.IO {{is not a}} <b>WebSocket</b> {{library with}} {{fallback}} options to other realtime protocols. It is a custom realtime transport protocol implementation on top of other realtime protocols. Its protocol negotiation parts cause a client supporting standard <b>WebSocket</b> to {{not be able to}} contact a Socket.IO server. And a Socket.IO implementing client cannot talk to a non-Socket.IO based <b>WebSocket</b> or Long Polling Comet server.Therefore, Socket.IO requires using the Socket.IO libraries on both client and server side.|$|E
50|$|<b>WebSocket</b> {{was first}} {{referenced}} as TCPConnection in the HTML5 specification, as a placeholder for a TCP-based socket API. In June 2008, {{a series of}} discussions were led by Michael Carter {{that resulted in the}} first version of the protocol known as <b>WebSocket.</b>|$|E
5000|$|JsSIP {{uses the}} SIP over <b>WebSocket</b> {{transport}} for sending and receiving SIP requests and responses, and thus, {{it requires a}} SIP proxy/server with <b>WebSocket</b> support. Currently the following SIP servers have been tested and are using JsSIP {{as the basis for}} their WebRTC Gateway functionality: ...|$|E
50|$|Solaborate {{is built}} in Microsoft Windows Azure Cloud Computing, using HTML5, <b>WebSockets</b> and WebRTC {{protocol}} for real time communication. Solaborate runs on SAP HANA platform, to provide users with real-time {{information on their}} network.|$|R
50|$|Besides {{support of}} the framing of <b>WebSockets,</b> changes from SPDY include the following: taking mobile phones and other {{low-power}} devices into account {{and the removal of}} SPDY’s obligatory use of CPU-intensive features encryption, compression, and server-side push.|$|R
50|$|Both Firefox 38 and Firefox 38 ESR were {{released}} on May 12, 2015, with new tab-based preferences, Ruby annotation support {{and availability of}} <b>WebSockets</b> in web workers, along {{with the implementation of}} the BroadcastChannel API and other features and security fixes.|$|R
