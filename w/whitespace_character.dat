9|72|Public
5000|$|<b>Whitespace</b> <b>character</b> for {{additional}} space characters of varying widths ...|$|E
5000|$|White {{space is}} used to {{separate}} elements of a definition; for space {{to be recognized as}} a delimiter, it must be explicitly included. The explicit reference for a single <b>whitespace</b> <b>character</b> is [...] (linear white space), and [...] is for zero or more whitespace characters with newlines permitted. The [...] definition in RFC5234 is controversial because at least one <b>whitespace</b> <b>character</b> is needed to form a delimiter between two fields.|$|E
5000|$|In Italian, Catalan, Portuguese, Spanish, Ukrainian, Russian, Polish, Bulgarian, Georgian, Romanian, Lithuanian and Hungarian the {{reporting}} {{clause in the}} middle of a quotation is separated with two additional dashes (also note that the initial quotation dash is followed by a single <b>whitespace</b> <b>character</b> as well as the fact that the additional quotation dashes for the middle main clause after the initial quotation dash are all with a single <b>whitespace</b> <b>character</b> on both of their sides): ...|$|E
5000|$|... whitespace: Any <b>whitespace</b> <b>characters</b> {{trigger a}} scan for zero or more <b>whitespace</b> <b>characters.</b> The number {{and type of}} <b>whitespace</b> <b>characters</b> {{do not need to}} match in either direction.|$|R
5000|$|Unicode {{provides}} {{a list of}} <b>characters</b> it deems <b>whitespace</b> <b>characters</b> for interoperability support. Software Implementations and other standards may use the term to denote a slightly different set of characters. For example, Java does not consider [...] or [...] to be whitespace, even though Unicode does. <b>Whitespace</b> <b>characters</b> are characters typically designated for programming environments. Often they have no syntactic meaning in such programming environments and are ignored by the machine interpreters. Unicode designates the legacy control characters U+0009 through U+000D and U+0085 as <b>whitespace</b> <b>characters,</b> {{as well as all}} characters whose General Category property value is Separator. There are 25 total <b>whitespace</b> <b>characters</b> as of Unicode 10.0.|$|R
50|$|There {{are rarely}} {{constants}} (i.e. characters {{that are not}} formatting placeholders) in a format string, mainly because a program is usually not designed to read known data. The exception is one or more <b>whitespace</b> <b>characters,</b> which discards all <b>whitespace</b> <b>characters</b> in the input.|$|R
5000|$|The {{following}} {{is an example of}} justified text in a monospaced font, one in which each character, including the <b>whitespace</b> <b>character,</b> occupies the same amount of horizontal space: ...|$|E
50|$|In Common Lisp symbols may use any characters, {{including}} whitespace, such as {{spaces and}} newlines. If a symbol contains a <b>whitespace</b> <b>character</b> {{it needs to}} be written as |this is a symbol|. Symbols can be used as identifiers for any kind of named programming constructs: variables, functions, macros, classes, types, goto tags and more.Symbols can be interned in a package. Keyword symbols are self-evaluating and interned in the package named KEYWORD.|$|E
50|$|This {{character}} is sometimes {{used to create}} visual spacing within a sequence of characters, where a <b>whitespace</b> <b>character</b> is not permitted (e.g., in computer filenames, email addresses, and in Internet URLs). Some computer applications will automatically underline text surrounded by underscores: _underlined_ will render underlined. It is often used in plain text-only media (IRC, instant messaging, classical Email) for this purpose. When the underscore is used for emphasis in this fashion, it is usually interpreted as indicating that the enclosed text is underlined (as opposed to being italicized or bold, which is indicated by /slashes/ or *asterisks*, respectively).|$|E
50|$|Whitespace {{uses only}} <b>whitespace</b> <b>characters</b> (space, tab, and return), {{ignoring}} all other characters. This is {{the reverse of}} many traditional languages, which do not distinguish between different <b>whitespace</b> <b>characters,</b> treating tab and space the same. It also allows Whitespace programs to be hidden in the source code of programs in languages like C.|$|R
5000|$|Whitespace - An esoteric {{language}} {{based on}} <b>whitespace</b> <b>characters</b> (spaces, tabs, and line breaks).|$|R
50|$|Whitespace is an esoteric {{programming}} language developed by Edwin Brady and Chris Morris at the University of Durham (also developers of the Kaya and Idris {{programming language}}s). It {{was released on}} 1 April 2003 (April Fool's Day). Its name is a reference to <b>whitespace</b> <b>characters.</b> Unlike most programming languages, which ignore or assign little meaning to most <b>whitespace</b> <b>characters,</b> the <b>Whitespace</b> interpreter ignores any non-whitespace characters. Only spaces, tabs and linefeeds have meaning. An interesting consequence of this property is that a Whitespace program can easily be contained within the <b>whitespace</b> <b>characters</b> of a program written in another language, except possibly in languages which depend on spaces for syntax validity such as Python, making the text a polyglot.|$|R
5000|$|Each {{command line}} {{must begin with}} a tab {{character}} {{to be recognized as}} a command. The tab is a <b>whitespace</b> <b>character,</b> but the space character does not have the same special meaning. This is problematic, since there may be no visual difference between a tab and a series of space characters. This aspect of the syntax of makefiles is often subject to criticism; it has been described by Eric S. Raymond as [...] "one of the worst design botches in the history of Unix" [...] and The Unix-Haters Handbook said [...] "using tabs as part of the syntax is like one of those pungee stick traps in The Green Berets". Feldman explains the choice as caused by a workaround for an early implementation difficulty preserved by a desire for backward compatibility with the very first users: ...|$|E
5000|$|With many {{keyboard}} layouts, {{a horizontal}} <b>whitespace</b> <b>character</b> may be entered {{through the use}} of a [...] Horizontal white space may also be entered on many keyboards {{through the use of}} the [...] key, although the length of the space may vary. Vertical white space is a bit more varied as to how it is encoded, but the most obvious in typing is the [...] result which creates a 'newline' code sequence in applications programs. Older keyboards might instead say , abbreviating the typewriter keyboard meaning 'Carriage-Return' which generated an electromechanical return to the left stop (CR code in ASCII-hex &0D;) and a line feed or move to the next line (LF code in ASCII-hex &0A;); in some applications these were independently used to draw text cell based displays on monitors or for printing on tractor-guided printers - which might also contain reverse motions/positioning code sequences allowing yesterdays text base fancier displays. Many early computer games used such codes to draw a screen (e.g. Kingdom of Kroz).|$|E
40|$|Fixed {{major issue}} causing corrupt SAM output when using many threads (-p/ [...] threads) on certain systems Fixed major issue with {{incorrect}} alignment offsets being reported in [...] large-index mode Fixed major issue with reads files being skipped when multiple inputs were specified together with -p/ [...] threads The official LICENSE of Bowtie {{was changed to}} Artistic License 2. 0. This fixes an issue with the previous LICENSE, which mistakenly combined elements of different open-source licenses. Fixed issue where bowtie would still run {{for a long time}} even when -u was set to a small number. Fixed spurious "Reads file contained a pattern with more than 1024 quality values" error for some colorspace inputs. Fixed issue with [...] strata sometimes failing to suppress alignments at lower strata. Fixed issue with ends of paired-end reads sometimes appearing in non-adjacent lines of the SAM output with -p/ [...] threads > 1 Fixed issue whereby the read name of end # 2 was not always truncated at the first <b>whitespace</b> <b>character</b> Code simplification...|$|E
50|$|Neutral {{characters}} have directionality indeterminable without context. Examples include paragraph separators, tabs, {{and most other}} <b>whitespace</b> <b>characters.</b>|$|R
5000|$|Tokens are {{separated}} by <b>whitespace</b> <b>characters,</b> such as a space or line break, or by punctuation characters.|$|R
50|$|The idea {{of using}} <b>whitespace</b> <b>characters</b> as {{operators}} for the C++ language was facetiously suggested five years earlier by Bjarne Stroustrup.|$|R
50|$|Each message {{consists}} {{of one or}} more atoms, separated by one or more <b>whitespace</b> <b>characters,</b> and it's terminated by a semicolon character.|$|R
5000|$|Level 4 {{concerns}} punctuation and <b>whitespace</b> <b>characters.</b> This level {{makes the}} distinction between [...] "MacDonald" [...] and [...] "Mac Donald", [...] "its" [...] and [...] "it's".|$|R
50|$|In {{programming}} language syntax, spaces are frequently used to explicitly separate tokens. Runs of <b>whitespace</b> <b>characters</b> (beyond the first) occurring within source code written in computer {{programming language}}s (outside of strings and other quoted regions) are ignored by most languages; such languages are called free-form. In a few languages, including Haskell, occam, ABC, and Python, white space and indentation {{are used for}} syntactical purposes. In the satirical language called <b>Whitespace,</b> <b>whitespace</b> <b>characters</b> are the only valid characters for programming, while any other characters are ignored.|$|R
50|$|Both {{the break}} {{inhibiting}} and break enabling characters participate with other punctuation and <b>whitespace</b> <b>characters</b> to enable text imaging systems to determine line breaks within the Unicode Line Breaking Algorithm.|$|R
50|$|In this example, the delimiters between {{command line}} {{elements}} are <b>whitespace</b> <b>characters</b> and the end-of-line delimiter is the newline delimiter. This {{is a widely}} used (but not universal) convention for command-line interfaces.|$|R
50|$|The {{most common}} <b>whitespace</b> <b>characters</b> may be typed via the space bar or the tab key. Depending on context, a line-break {{generated}} by the return or enter key may be considered white space as well.|$|R
5000|$|Spaces are {{important}} in eqn; tokens are delimited by <b>whitespace</b> <b>characters,</b> tildes ~, braces {} and double-quotes [...] "" [...] only. Thus [...] results in [...] whereas [...] is needed to give the intended [...]|$|R
50|$|PEM {{requires}} that all encoded lines consist of exactly 64 printable characters, {{with the exception}} of the last line, which may contain fewer printable characters. Lines are delimited by <b>whitespace</b> <b>characters</b> according to local (platform-specific) conventions.|$|R
5000|$|... :all leading and {{trailing}} whitespace {{is removed}} and any sequences of <b>whitespace</b> <b>characters</b> {{are replaced by}} a single space. This is very useful when the original XML may have been prettyprint formatted, which could make further string processing unreliable.|$|R
50|$|Computer {{representation}} of text eliminates all mechanical and physical limitations. Spaces of various widths, styles, or language characteristics (different space characters) are indicated with unique code points. <b>Whitespace</b> <b>characters</b> include spaces of various width, including all those that professional typesetters employ.|$|R
50|$|Most free-form {{languages}} {{descend from}} ALGOL, including C, Pascal, and Perl. Lisp languages are free-form, {{although they do}} not descend from ALGOL. Rexx is mostly free-form, though in some cases <b>whitespace</b> <b>characters</b> are concatenation operators. SQL, though not a full programming language, is also free-form.|$|R
5000|$|Lists of bits can be {{converted}} to integer using the [...] verb. Integers can {{be converted}} to lists of bits using the [...] verb. (When parsing J, [...] (period) and [...] (colon) are word-forming characters. They are never tokens alone, unless preceded by <b>whitespace</b> <b>characters.)</b> ...|$|R
5000|$|Separated columns: In {{the above}} example, {{individual}} columns are separated using <b>whitespace</b> <b>characters.</b> This is also called indentation or [...] "fixed-width" [...] data formatting. Another common convention is to separate columns using {{one or more}} delimiter characters. More complex solutions are markup and programming languages.|$|R
5000|$|Slugs are {{generally}} entirely lowercase, with accented characters replaced by {{letters from the}} English alphabet and <b>whitespace</b> <b>characters</b> replaced by a dash or an underscore to avoid being encoded. Punctuation marks {{are generally}} removed, and some also remove short, common words such as conjunctions. For example: ...|$|R
50|$|EBNF is a {{code that}} expresses the grammar {{of a formal}} language. An EBNF {{consists}} of terminal symbols and non-terminal production rules which are the restrictions governing how terminal symbols can be combined into a legal sequence. Examples of terminal symbols include alphanumeric characters, punctuation marks, and <b>whitespace</b> <b>characters.</b>|$|R
50|$|The {{characters}} {{which are}} considered whitespace varies between programming languages and implementations. For example, C traditionally only counts space, tab, line feed, and carriage return characters, while languages which support Unicode typically include all Unicode space characters. Some implementations also include ASCII control codes (non-printing <b>characters)</b> along with <b>whitespace</b> <b>characters.</b>|$|R
5000|$|Formally, {{words are}} either written as-is; with double-quotes around them (allowing <b>whitespace</b> <b>{{characters}}</b> to be embedded); or with curly-brace characters around them, which suppresses all substitutions inside (except for backslash-newline elimination). In bare and double-quoted words, {{three types of}} substitution occur (once, in a single left-to-right scan through the word): ...|$|R
5000|$|Whitespace is a {{commonly}} used concept for a typographic effect. Basically it covers invisible characters {{that have a}} spacing effect in rendered text. It includes spaces, tabs, and new line formatting controls. In Unicode, such a character has the property set [...] "WSpace=yes". In version 10.0, there are 25 <b>whitespace</b> <b>characters.</b>|$|R
