169|566|Public
2500|$|Advocates of APL {{claim that}} the {{examples}} of so-called [...] "write-only code" [...] (badly written and almost incomprehensible code) are almost invariably examples of poor programming practice or novice mistakes, which can occur in any language. Advocates of APL also {{claim that the}}y are far more productive with APL than with more conventional computer languages, and that <b>working</b> <b>software</b> can be implemented in far less time and with far fewer programmers than using other technology.|$|E
50|$|<b>Working</b> <b>software</b> is {{the primary}} measure of progress.|$|E
5000|$|<b>Working</b> <b>software</b> is {{delivered}} frequently (weeks rather than months) ...|$|E
50|$|Fowler started <b>working</b> with <b>software</b> in {{the early}} 1980s. Out of {{university}} in 1986 he started <b>working</b> in <b>software</b> development for Coopers & Lybrand until 1991. In 2000 he joined ThoughtWorks, a systems integration and consulting company, where he serves as Chief Scientist.|$|R
50|$|The {{activities}} {{related to}} <b>working</b> with <b>software</b> requirements can broadly {{be broken down into}} elicitation, analysis, specification, and management.|$|R
5000|$|Software construction: The {{detailed}} {{creation of}} <b>working,</b> meaningful <b>software</b> {{through a combination}} of coding, verification, unit testing, integration testing, and debugging.|$|R
50|$|<b>Working</b> <b>software</b> is {{more useful}} and welcome than just {{presenting}} documents to clients in meetings.|$|E
5000|$|... 3. Deliver <b>working</b> <b>software</b> frequently, from {{a couple}} of weeks to a couple of months, with a {{preference}} to the shorter timescale.|$|E
5000|$|Using Agile methodology, {{the product}} is {{delivered}} in shorter development cycles with multiple iterations. [...] Each iteration is a <b>working</b> <b>software</b> and can be deployed to production.|$|E
50|$|Nowadays {{he prefers}} <b>working</b> with <b>software</b> synthesizers. Onstage {{he is using}} two Yamaha Motifs to drive his Apple Mainstage based virtual synth rig.|$|R
25|$|BDD is a second-generation, outside-in, pull-based, multiple-stakeholder, multiple-scale, high-automation, agile methodology. It {{describes}} {{a cycle of}} interactions with well-defined outputs, resulting {{in the delivery of}} <b>working,</b> tested <b>software</b> that matters.|$|R
50|$|As of 2011, Cooper is <b>working</b> with <b>{{software}}</b> company Liine on music-production {{software that}} {{is influenced by}} science. In December 2012, he wrote a blog for British music magazine NME.|$|R
50|$|Clients may {{not know}} exactly what their {{requirements}} are before they see <b>working</b> <b>software</b> and so change their requirements, leading to redesign, redevelopment, and retesting, and increased costs.|$|E
50|$|Because {{the area}} is close to Madhapur, with many <b>working</b> <b>software</b> professionals, it is a popular {{residential}} area, with {{a growing number of}} higher-valued flats. The area has also seen a large increase in real estate prices in recent years.|$|E
50|$|According to many {{software}} {{experts who}} have signed the Manifesto for Software Craftsmanship, writing well-crafted and self-explanatory software {{is almost as}} important as writing <b>working</b> <b>software.</b> Using interfaces to further describe {{the intent of the}} software is often a good idea.|$|E
5000|$|... #Subtitle level 3: Selected <b>working</b> {{papers and}} <b>software</b> package {{developments}} ...|$|R
50|$|She is {{currently}} <b>working</b> as a <b>software</b> developer in private industry.|$|R
50|$|Prior to <b>working</b> in the <b>software</b> business, Harris {{worked as}} a photographer.|$|R
50|$|Companies such as OCR Services Inc. and Descartes Systems Group have {{established}} <b>working</b> <b>software</b> solutions for screening against multiple lists. SAP, an ERP software, offers a solution since 2004. The software solution for SAP America is the Global Trade Services module (SAP-GTS) which falls under their Governance, Risk, and Compliance (GRC) directory of software solutions.|$|E
50|$|The OMG process {{requires}} {{participants to}} make commitments to implement standards as <b>working</b> <b>software,</b> {{ensuring that the}} technical specifications are used and available. During implementation of these technical specifications, errors and shortcomings of adopted Service Functional Models are captured, logged, and ultimately incorporated into subsequent versions of the Service Functional Models {{as part of a}} continuous process improvement approach.|$|E
50|$|Feature-driven {{development}} (FDD) is an iterative and incremental {{software development}} process. It {{is one of}} a number of lightweight or Agile methods for developing software. FDD blends a number of industry-recognized best practices into a cohesive whole. These practices are all driven from a client-valued functionality (feature) perspective. Its main purpose is to deliver tangible, <b>working</b> <b>software</b> repeatedly in a timely manner.|$|E
50|$|He {{graduated}} EWU with a BS in Computer Science in May 1983, {{and took}} a job as a software engineer at Intel, <b>working</b> on <b>software</b> for in-circuit emulators, and major systems programming for Unix and VMS applications.|$|R
50|$|LEd (formerly LaTeX Editor) is a TeX/LaTeX editing <b>software</b> <b>working</b> under Microsoft Windows. It is a {{freeware}} product.|$|R
5000|$|Maintains {{collaborative}} <b>working</b> {{relationships with}} <b>software</b> engineers, especially to obtain, plan for, and install new practices and technologies.|$|R
5000|$|Advocates of APL {{claim that}} the {{examples}} of so-called [...] "write-only code" [...] (badly written and almost incomprehensible code) are almost invariably examples of poor programming practice or novice mistakes, which can occur in any language. Advocates of APL also {{claim that the}}y are far more productive with APL than with more conventional computer languages, and that <b>working</b> <b>software</b> can be implemented in far less time and with far fewer programmers than using other technology.|$|E
5000|$|Primarily, Agile {{practices}} [...] such as eschewing documentation, rapid iteration, and prioritizing <b>working</b> <b>software</b> over process-plan deliverables [...] {{have been}} incorporated. Initial efforts to import charrette, without adequate demonstration and adoption of essential techniques {{have led to}} disappointing results akin to [...] "brainstorming with drawings" [...] (Hamlet 2012). Practices that are typically effective within the urban planning community have resulted in [...] "agonizing experiences" [...] (Shapiro 2013), indicating that retooling to reflect this community's unique perspective and tech-grown process {{continues to be the}} key to optimizing the benefits of the tool.|$|E
50|$|The {{important}} {{distinguishing feature}} between a shareware {{game and a}} game demo is that the shareware game is (at least in theory) a complete <b>working</b> <b>software</b> program albeit with reduced content compared to the full game, while a game demo omits significant functionality as well as content. Shareware games commonly offered both single player and multiplayer modes plus a significant fraction of the full game content such as {{the first of three}} episodes, while some even offered the entire product as shareware while unlocking additional content for registered users. By contrast a game demo may offer as little as one single-player level or consist solely of a multiplayer map, this makes them easier to prepare than a shareware game.|$|E
50|$|Software {{construction}} is a software engineering discipline. It {{is the detailed}} creation of <b>working</b> meaningful <b>software</b> {{through a combination of}} coding, verification, unit testing, integration testing, and debugging. It is linked to all the other software engineering disciplines, most strongly to software design and software testing.|$|R
40|$|Distributed group <b>working</b> of <b>Software</b> Engineering teams is {{increasingly}} {{evident in the}} `real world'. Tools to support such working are at present limited to general purpose groupware involving video, audio, chat, shared whiteboards and shared workspaces. Within software engineering education, group tasks have an established role in the curriculum. However, in general, groups are local to a particular university or institution and are composed of students who have a significant shared history (in terms of technical background and social interaction) and {{who are able to}} meet face-toface on a regular basis. This paper reports on work undertaken by three UK Universities to provide students with the opportunity to experience group working across multiple sites using low-cost tools to support distributed co-operative <b>working.</b> Keywords: <b>software</b> engineering education, distributed group working, CSCW 1...|$|R
2500|$|... enable {{models to}} be shared and {{published}} {{in a form that}} other researchers can use even when <b>working</b> with different <b>software</b> environments; ...|$|R
5000|$|Historically, {{operations}} {{was seen}} as a late phase of the Waterfall model development process. After engineering had built a software product, and QA had verified it as correct, it would be handed to a support staff to operate the <b>working</b> <b>software.</b> Such a view assumed that software was mostly immutable in production and that usage would be mostly stable. Increasingly, [...] "a web application involves many specialists, but it takes people in web ops to ensure that everything works together throughout an application's lifetime." [...] The role is gaining respect as a distinct specialty among developers and managers, and is {{considered by many to be}} a subset of the larger DevOps movement.|$|E
5000|$|Since I {{originally}} {{defined the}} Scrum of Scrums (Ken Schwaber was at IDX working with me), I can definitively say the Scrum of Scrums {{is not a}} [...] "meta Scrum". The Scrum of Scrums as I have used it is responsible for delivering the <b>working</b> <b>software</b> of all teams to the Definition of Done {{at the end of}} the sprint, or for releases during the sprint. PatientKeeper delivered to production four times per Sprint. Ancestry.com delivers to production 220 times per two-week Sprint. Hubspot delivers live software 100-300 times a day. The Scrum of Scrums Master is held accountable for making this work. So the Scrum of Scrums is an operational delivery mechanism.|$|E
50|$|A {{variant of}} the {{approach}} above is the keeping of required data content (for instance a video game's audio, graphic, and other art assets) of a software product proprietary while making the software's source code open-source. While this approach is completely legitimate and compatible with most open-source licenses, customers have to buy the content to have a complete and <b>working</b> <b>software</b> product. Restrictive licenses can then be applied on the content, which prevents the redistribution or re-selling of the complete software product. Examples for open-source developed software are Kot-in-Action Creative Artel video game Steel Storm, engine GPLv2 licensed while the artwork is CC-BY-NC-SA 3.0 licensed, and Frogatto & Friends with an own developed open-source engine and commercialization via the copyrighted game assets for iPhone, BlackBerry and MacOS.|$|E
5000|$|... he is {{employed}} by the Jet Propulsion Laboratory in Pasadena, California, <b>working</b> as a <b>software</b> engineer {{in the area of}} Mars exploration.|$|R
5000|$|... enable {{models to}} be shared and {{published}} {{in a form that}} other researchers can use even when <b>working</b> with different <b>software</b> environments; ...|$|R
5000|$|In 1985, the United States Department of Defense {{captured}} {{this approach}} in DOD-STD-2167A, their standards for <b>working</b> with <b>software</b> development contractors, which stated that [...] "the contractor shall implement a software development cycle {{that includes the}} following six phases: Preliminary Design, Detailed Design, Coding and Unit Testing, Integration, and Testing".|$|R
