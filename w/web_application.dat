8979|10000|Public
5|$|Results were {{transmitted}} {{for free}} with mobile <b>web</b> <b>application</b> named ZAP result. This mobile widget {{was developed by}} Norex.ca.|$|E
5|$|WebObjects {{failed to}} achieve wide {{popularity}} {{partly because of the}} initial high price of US$50,000, but it remains the first and most prominent early example of a <b>web</b> <b>application</b> server that enabled dynamic page generation based on user interactions as opposed to static content. WebObjects is now bundled with macOS Server and Xcode.|$|E
5|$|NeXT later {{released}} {{much of the}} NeXTSTEP {{system as}} a programming environment standard called OpenStep. NeXT withdrew from the hardware business in 1993 to concentrate on marketing OPENSTEP for Mach, its own OpenStep implementation, for several OEMs. NeXT also developed WebObjects, {{one of the first}} enterprise <b>Web</b> <b>application</b> frameworks. WebObjects never became very popular because of its initial high price of $50,000, but it remains a prominent early example of a Web server based on dynamic page generation rather than on static content.|$|E
40|$|Mobile <b>web</b> <b>applications</b> {{refer to}} <b>web</b> <b>applications</b> on mobile devices, aimed at personalizing, integrating, and {{discovering}} mobile contents in user contexts. This thesis presents a {{comprehensive study of}} mobile <b>web</b> <b>applications</b> by proposing a new taxonomy for mobile <b>web</b> <b>applications,</b> and conducting a business analysis {{in the field of}} mobile <b>web</b> <b>applications.</b> The thesis reviews the current surrounding environment for mobile <b>web</b> <b>applications,</b> namely, <b>web</b> 2. 0 and 3. 0, wireless communication technology, and Smartphone platform. The recent entry and success of Apple’s iPhone greatly enhanced the public awareness of the Smartphone technology. Google’s release of open-source Android platform and T-Mobile’s deployment of Android-powered “Dream ” Smartphone not only intensify the competition among suppliers, but also provide an open-source foundation for mobile <b>web</b> <b>applications.</b> This thesis introduces...|$|R
40|$|Abstract: In this study, {{we argue}} that the {{execution}} behavior of the current JavaScript bench-marks differs from the behavior of real-world <b>Web</b> <b>Applications.</b> We have compared the first 100 <b>Web</b> <b>Applications</b> in the Alexa top-sites list and 5 Facebook use cases, against three established JavaScript benchmark suites, i. e., Dromaeo, SunSpider, and V 8. Our measurements indicate that the JavaScript eval function is important in most <b>Web</b> <b>Applications,</b> the scripts associated with <b>Web</b> <b>Applications</b> may change between page visits to the same page, anonymous functions are used more extensively for in <b>Web</b> <b>Applications,</b> and the workload of <b>Web</b> <b>Applications</b> often differ significantly from the workload found {{in many of the}} benchmarks...|$|R
40|$|As <b>web</b> <b>applications</b> {{become more}} and more prevalent, the quality {{assurance}} of <b>web</b> <b>applications</b> has {{become more and}} more important. Due to the complexity of the underlying technologies of <b>web</b> <b>applications,</b> it is more challenging to test <b>web</b> <b>applications</b> than conventional software. It is critical to develop effective methodologies and tools for testing <b>web</b> <b>applications.</b> In this paper, we propose an approach for rigorous and automatic testing of <b>web</b> <b>applications</b> using formal specifications. Our formal specification based approach is powerful, extensible, and versatile. It intends to address testing of various aspects of <b>web</b> <b>applications,</b> including functionality, security, and performance. We have developed a prototype tool based on the proposed approach, which accepts formal specifications in XML syntax as input, automatically generates test cases, executes the test cases and validates the test results...|$|R
25|$|OLAP {{clients include}} many {{spreadsheet}} programs like Excel, <b>web</b> <b>application,</b> SQL,dashboard tools, etc.|$|E
25|$|ARINC {{partnered with}} FlightAware {{and uses the}} FlightAware <b>web</b> <b>application</b> for ARINC Direct {{business}} aircraft operators.|$|E
25|$|In April 2011, BMC {{acquired}} Coradiant, {{a software}} company specializing in end-user experience and <b>Web</b> <b>application</b> performance monitoring.|$|E
40|$|<b>Web</b> <b>applications</b> are {{evolving}} towards strong content-centered <b>Web</b> <b>applications.</b> The development {{processes and}} implementation of these applications are unlike the development {{and implementation of}} traditional information systems. In this paper we propose WebEngineering Method; a method for developing content management system (CMS) based <b>Web</b> <b>applications.</b> Critical to a successful development of CMS-based <b>Web</b> <b>applications,</b> is the adaptation to the dynamic business. We first define CMS-based <b>Web</b> <b>applications</b> and identify their specific characteristics. Combining these characteristics with situational factors in projects, we show that by taking parts of proven methods such as UML based Web-engineering (UWE) and the Unified Software Development Process (UP), a unique method can be assembled for situational development of CMS-based <b>Web</b> <b>applications.</b> We successfully validated the method at GX, a web-technology specialized in developing and implementing CMS-based <b>Web</b> <b>applications.</b> Future research focuses on optimizing the development method, and creating reference models and modeling tools for the development of CMS-based <b>Web</b> <b>applications...</b>|$|R
40|$|<b>Web</b> <b>applications</b> {{incorporate}} important {{business assets}} {{and offer a}} convenient way for businesses to promote their services through the internet. Many of these <b>web</b> <b>applications</b> have evolved from simple HTML pages to complex applications that have high maintenance cost. The high maintenance cost of <b>web</b> <b>applications</b> {{is due to the}} inherent characteristics of <b>web</b> <b>applications,</b> to the fast internet evolution and to the pressing market which imposes short development cycles and frequent modifications. In order to control the maintenance cost, quantitative metrics and models for predicting web applications' maintainability must be used. Since, <b>web</b> <b>applications</b> are different from traditional software systems, models and metrics for traditional systems can not be applied to <b>web</b> <b>applications.</b> The reason for that is that <b>web</b> <b>applications</b> have special features such as hypertext structure, dynamic code generation and heterogenousity that can not be captured by traditional and object-oriented metrics. In this paper, we will provide a comparative analysis of the different approaches for predicting <b>web</b> <b>applications...</b>|$|R
40|$|Abstract: <b>Web</b> <b>applications</b> are {{evolving}} towards strong content-centered <b>Web</b> <b>applications.</b> The development {{processes and}} implementation of these applications are unlike the development {{and implementation of}} traditional information systems. In this paper we propose WebEngineering Method; a method for developing content management system (CMS) based <b>Web</b> <b>applications.</b> Critical to a successful development of CMS-based <b>Web</b> <b>applications,</b> is the adaptation to the dynamic business. We first define CMS-based <b>Web</b> <b>applications</b> and identify their specific characteristics. Combining these characteristics with situational factors in projects, we show that by taking parts of proven methods such as UML based Web-engineering (UWE) and the Unified Software Development Process (UP), a unique method can be assembled for situational development of CMS-based <b>Web</b> <b>applications.</b> We successfully validated the method at GX, a web-technology specialized in developing and implementing CMS-based <b>Web</b> <b>applications.</b> Future research focuses on optimizing the development method, and creating reference models and modeling tools for the development of CMS-based <b>Web</b> <b>applications...</b>|$|R
25|$|Angular and AngularJS are <b>web</b> <b>application</b> {{frameworks}} to use {{for developing}} single-page applications and also cross-platform mobile apps.|$|E
25|$|A kind of {{application-level}} DoS {{attack is}} XDoS (or XML DoS) {{which can be}} controlled by modern <b>web</b> <b>application</b> firewalls (WAFs).|$|E
25|$|Selenium is {{composed}} of several components with each taking on a specific role in aiding the development of <b>web</b> <b>application</b> test automation.|$|E
40|$|AbstractWith the {{increasing}} complexity of <b>Web</b> <b>applications,</b> ensuring {{the reliability of}} <b>Web</b> <b>applications</b> becomes an enormous challenge. Statistical Web testing, proposed by researchers in recent years, is an appropriate approach to testing <b>Web</b> <b>applications</b> and to estimating their reliability. However, most of the researchers only focus on estimating the overall reliability of <b>Web</b> <b>applications.</b> They only discuss the failures which are recorded in error log files. In fact, the overall reliability cannot reflect the quality of <b>Web</b> <b>applications</b> under different usage patterns. In this paper, we propose an approach to estimating the particular reliability of <b>Web</b> <b>applications</b> under a particular usage pattern. Moreover, our approach can automatically identify the difference between output and expected pages...|$|R
40|$|An idea of {{automatic}} generation of <b>Web</b> <b>applications</b> from templates {{has been proposed}} [1, 2, 3, 4]. A software system called T-Web system has been implemented {{based on the idea}} to automatically generate typical <b>Web</b> <b>applications</b> made of various technologies such as CGI [5], Java Servlet [6], JSP [6, 7], and ASP [8], without manual programming. This paper presents an extension of the above mentioned idea in two different areas, generating Web services [9] in addition to <b>Web</b> <b>applications</b> and generating <b>Web</b> <b>applications</b> that behave as Web services requestors. We implement these approaches on T-Web system for JSP/Servlet <b>Web</b> <b>applications</b> [4]. As a result, the T-Web system provides features for Web developers to design and generate Web services in Java language, typical JSP/Servlet <b>Web</b> <b>applications,</b> and JSP/Servlet <b>Web</b> <b>applications</b> behaving as <b>Web</b> services requestors. An airline company’s Web services and a ticket agency Website that interacts with the airline company’s Web services are successfully generated using the T-Web system and illustrated in this paper as examples of Web services and <b>Web</b> <b>applications</b> behaving as <b>Web</b> services requestors, respectively. ...|$|R
40|$|<b>Web</b> <b>applications</b> make {{increasingly}} use {{of services}} that are provided by external information systems to deliver advanced functionalities to end users. However, many issues regarding how these services are integrated into <b>web</b> <b>applications</b> and how service oriented <b>web</b> <b>applications</b> evolve, are reengineered and refactored are still addressed in an ad hoc manner. In this paper, we present how design patterns can lessen the efforts required to integrate hypermedia services into <b>web</b> <b>applications.</b> In particular we present how evolution and maintenance issues are addressed within Callimachus, a CB-OHS that <b>web</b> <b>applications</b> need to integrate {{in order to provide}} hypertext functionality to end users...|$|R
25|$|David Heinemeier Hansson {{extracted}} Ruby on Rails {{from his}} work on the project management tool Basecamp at the <b>web</b> <b>application</b> company also called Basecamp.|$|E
25|$|Pages built using Server Side Includes or Common Gateway Interface (CGI) {{instead of}} a <b>web</b> <b>application</b> written in a dynamic {{programming}} language such as Perl, PHP, Python or Ruby.|$|E
25|$|By default {{to be an}} Internet forum, the <b>web</b> <b>application</b> {{needs an}} ability to submit threads and replies. Typically, threads are in newer to older view, and replies in older to newer view.|$|E
40|$|The World Wide Web is {{amidst a}} {{transition}} from interactive websites to <b>web</b> <b>applications.</b> An increasing number of users perform their daily computing tasks entirely within the web browser — turning the Web into an important platform for <b>application</b> development. The <b>Web</b> as a platform, however, lacks the computational performance of native applications. This problem has motivated the inception of Microsoft Xax and Google Native Client (NaCl), two independent projects that fa-cilitate the development of native <b>web</b> <b>applications.</b> Native <b>web</b> <b>applications</b> allow the extension of conventional <b>web</b> <b>applications</b> with compiled native code, while maintaining operating system portability. This dissertation determines the bene-fits and drawbacks of native <b>web</b> <b>applications.</b> It also addresses the question how the performance of JavaScript <b>web</b> <b>applications</b> compares to that of native appli-cations and native <b>web</b> <b>applications.</b> Four application benchmarks are introduced that focus on different performance aspects: number crunching (serial and parallel), 3 D graphics performance, and data processing. A performance analysis is under...|$|R
40|$|The Internet {{is quietly}} {{becoming}} {{the body of}} the business world, with <b>web</b> <b>applications</b> as the brains. This means that software faults in <b>web</b> <b>applications</b> have potentially disastrous consequences. Most work on <b>web</b> <b>applications</b> has been on making them more powerful, but relatively little has been done to ensure their quality. Important quality attributes for <b>web</b> <b>applications</b> include reliability, availability, interoperability and security. <b>Web</b> <b>applications</b> share some characteristics of client-server, distributed, and traditional programs, however {{there are a number of}} novel aspects of <b>web</b> <b>applications.</b> These include the fact that <b>web</b> <b>applications</b> are "dynamic", due to factors such as the frequent changes of the application requirement as well as dramatic changes of the web technologies, the fact that the roles of the clients and servers change dynamically, the heterogeneity of the hardware and software components, the extremely loose coupling and dynamic integration, and the ability of the user to directly affect the control of execution...|$|R
40|$|Today’s <b>Web</b> <b>applications</b> {{can contain}} {{dangerous}} security flaws. The global distribution of these applications makes them prone to attacks that uncover and maliciously exploit {{a variety of}} security vulnerabilities. Research reports indicate that more than 80 percent of the <b>web</b> <b>applications</b> are vulnerable to security threats. User friendly <b>web</b> <b>applications</b> are developed to increase the customer base and hackers utilize the features provided by the <b>web</b> <b>applications</b> to inject their malicious code. <b>Web</b> <b>applications</b> might contain security vulnerabilities that are not seen to {{the owner of the}} application. This paper presents multiple solutions to prevent <b>web</b> <b>applications</b> from the major security attacks such as SQL Injection and Cross Site Scripting. Each of the solutions have their own strengths and weaknesses, and the developers must choose the solutions according to their software development requirements...|$|R
25|$|ASP.NET is an {{open-source}} server-side <b>web</b> <b>application</b> framework {{designed for}} web development to produce dynamic web pages. It {{was developed by}} Microsoft to allow programmers to build dynamic web sites, web applications and web services.|$|E
25|$|Apart from {{standard}} <b>web</b> <b>application</b> security recommendations website owners can reduce {{their exposure to}} opportunistic hacking by only allowing search engines to index the public parts of their websites (with robots.txt) and explicitly blocking them from indexing transactional parts (login pages, private pages, etc.).|$|E
25|$|ArcGIS Online is a <b>web</b> <b>application</b> {{allowing}} {{sharing and}} search of geographic information, {{as well as}} content published by Esri, ArcGIS users, and other authoritative data providers. It allows users to create and join groups, and control access to items shared publicly or within groups.|$|E
40|$|The {{development}} and sustenance of <b>Web</b> <b>Applications</b> is viewed from an engineering perspective. The {{evolution of the}} developmental environment of <b>Web</b> <b>Applications</b> has been multi-directional. This paper provides a conceptual characterization of these directions, relationships between these directions, and their implications towards academia and industry. The consequences of a commitment to these directions, along {{with the role of}} international standards, are considered. The challenges faced by Semantic <b>Web</b> <b>Applications</b> and Social <b>Web</b> <b>Applications</b> are briefly outlined...|$|R
40|$|Abstract — The Web is a {{vast and}} {{powerful}} attack surface on which the attackers employ their malicious code to exploit the vulnerabilities in <b>web</b> <b>applications.</b> The research reports indicate that more than 80 percent of the <b>web</b> <b>applications</b> are vulnerable to security threats. These security vulnerabilities may not {{be seen by the}} owner of the <b>web</b> <b>applications.</b> In this paper we present some countermeasures to deal with the two top most security attacks in ASP. NET <b>web</b> <b>applications</b> such as SQL Injection and Cross Site Scripting. These countermeasures will help web developers to fix the security leaks and improve the overall security of <b>web</b> <b>applications...</b>|$|R
40|$|Abstract. Current <b>Web</b> <b>applications</b> {{provide their}} {{information}} and functionalities to human users only. To make <b>Web</b> <b>applications</b> also accessible for machines, the Semantic Web proposes {{an extension of}} the current Web, that describes the semantics of the content and the services explicitly with machine-processable meta-data. In this paper we introduce an architecture of a Semantic Portal that provides a unique front-end to the information and functionalities of individual Semantic <b>Web</b> <b>applications.</b> To realize the portal we use WEESA to semantically annotate <b>Web</b> <b>applications</b> and provide the annotations in a knowledge base (KB) for download and querying. Based on that, the Semantic Harvester collects the KBs from individual Semantic <b>Web</b> <b>applications</b> to build the global KB of the Semantic Portal. Finally, we use Semantic Web services to make the portal a unique interface to the services of the <b>Web</b> <b>applications.</b> ...|$|R
25|$|Within JavaScript, {{access to}} a {{debugger}} becomes invaluable when developing large, non-trivial programs. Because there can be implementation differences between the various browsers (particularly within the DOM), {{it is useful to}} have {{access to a}} debugger for each of the browsers that a <b>Web</b> <b>application</b> targets.|$|E
25|$|The {{methods of}} {{injection}} can vary a great deal; in some cases, the attacker {{may not even}} need to directly interact with the web functionality itself to exploit such a hole. Any data received by the <b>web</b> <b>application</b> (via email, system logs, IM etc.) that can be controlled by an attacker could become an injection vector.|$|E
25|$|Perl is a high-level, general-purpose, interpreted, dynamic {{programming}} language. It was originally invented by Larry Wall, a linguist {{working as a}} systems administrator for NASA, in 1987, as a general purpose Unix scripting language to make report processing easier. Perl is also used for text processing, system administration, <b>web</b> <b>application</b> development, bioinformatics, network programming, applications that require database access, graphics programming etc.|$|E
40|$|The web is {{more and}} more used as a {{platform}} for fullfledged, increasingly complex applications, where a huge amount of change-intensive data is managed by underlying database systems. From a software engineering point of view, the development of <b>web</b> <b>applications</b> requires proper modeling methods in order to ensure architectural soundness and maintainability. Existing modeling methods for <b>web</b> <b>applications,</b> however, fall short on considering a major requirement posed on today's <b>web</b> <b>applications,</b> namely customization. <b>Web</b> <b>applications</b> should be customizable with respect to various context factors comprising different user preferences, device capabilities and locations in mobile scenarios, to mention just a few. The goal of this paper is twofold. First, a framework of requirements, covering the design space of customizable <b>web</b> <b>applications</b> is suggested. Second, {{on the basis of this}} framework, existing approaches for developing customizable <b>web</b> <b>applications</b> are surveyed and general shortcomi [...] ...|$|R
40|$|The {{thesis is}} based on web security. It shows how <b>web</b> <b>applications</b> are {{susceptible}} to threats and how {{to protect against the}} threats. <b>Web</b> Design <b>Application</b> Security is a very broad topic to talk about and put into practical demonstration, and this is mainly because every single day there arises a new way to attack <b>web</b> <b>applications</b> and therefore there are many new ways arising to secure <b>web</b> <b>applications.</b> BSc/BAComputer Scienc...|$|R
40|$|Web-based {{applications}} (or more concisely, <b>Web</b> <b>applications)</b> are a kind {{of information}} system with a particular architecture. They have progressively evolved from Internet browser-based, read-only information repositories to Web-based distributed systems. Today, increasing numbers of businesses rely on their <b>Web</b> <b>applications.</b> At the same time, <b>Web</b> <b>applications</b> are facing many security challenges and, as a result, are exposing businesses to many risks. This thesis proposes a novel approach to building secure <b>Web</b> <b>applications</b> using agile software development methods. EThOS - Electronic Theses Online ServiceGBUnited Kingdo...|$|R
