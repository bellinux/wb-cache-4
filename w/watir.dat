20|0|Public
25|$|In practice, {{this means}} that the Selenium 2.0 API has {{significantly}} fewer calls than does the Selenium 1.0 API. Where Selenium 1.0 attempted to provide a rich interface for many different browser operations, Selenium 2.0 aims to provide a basic set of building blocks from which developers can create their own Domain Specific Language. One such DSL already exists: the <b>Watir</b> project in the Ruby language has a rich history of good design. Watir-webdriver implements the <b>Watir</b> API as a wrapper for Selenium-Webdriver in Ruby. Watir-webdriver is created entirely automatically, based on the WebDriver specification and the HTML specification.|$|E
50|$|WET {{started off}} as an Extension Toolkit to <b>Watir,</b> a {{framework}} for Web testing, released as an opensource product and called it as WET (<b>Watir</b> Extension Toolkit).|$|E
5000|$|WET sits {{on top of}} <b>Watir,</b> an {{automated}} test tool which uses the Ruby scripting language. WET retains all the features that <b>Watir</b> has and adds many usability related functionality like Data table support, Object depot (aka object repository) and inbuilt Html reporting ...|$|E
5000|$|<b>Watir</b> (Web Application Testing in Ruby, {{pronounced}} water), is an open-source {{family of}} Ruby libraries for automating web browsers. [...] It drives Internet Explorer, Firefox, Chrome, Opera and Safari, {{and is available}} as a RubyGems gem. [...] <b>Watir</b> was primarily developed by Bret Pettichord and Paul Rogers.|$|E
50|$|Wadi <b>Watir</b> is {{a narrow}} wadi and gorge in the Sinai.|$|E
50|$|Watirspec is {{executable}} {{specification of}} the <b>Watir</b> API, like RubySpec is for Ruby.|$|E
50|$|<b>Watir</b> project {{consists}} of several smaller projects. The most important ones are watir-classic, watir-webdriver and watirspec.|$|E
5000|$|<b>Watir</b> Quta (Aymara watiri darner, {{someone who}} darns holes in clothes, quta lake, [...] "darner lake", also spelled Bater Kkota) is a {{lake in the}} Andes of Bolivia. It is {{situated}} in the La Paz Department, Inquisivi Province, Quime Municipality. The river Chaka Jawira which connects <b>Watir</b> Quta with the lakes south-east of it flows through the lake. Its waters run to the La Paz River.|$|E
50|$|Watir-webdriver is {{a modern}} version of the <b>Watir</b> API based on Selenium. Selenium 2.0 (selenium-webdriver) aims to be the {{reference}} implementation of the WebDriver specification. In Ruby, Jari Bakken has implemented the <b>Watir</b> API as a wrapper around the Selenium 2.0 API. Not only is Watir-webdriver derived from Selenium 2.0, it is also built from the HTML specification, so Watir-webdriver should always be compatible with existing W3C specifications.|$|E
50|$|In practice, {{this means}} that the Selenium 2.0 API has {{significantly}} fewer calls than does the Selenium 1.0 API. Where Selenium 1.0 attempted to provide a rich interface for many different browser operations, Selenium 2.0 aims to provide a basic set of building blocks from which developers can create their own Domain Specific Language. One such DSL already exists: the <b>Watir</b> project in the Ruby language has a rich history of good design. Watir-webdriver implements the <b>Watir</b> API as a wrapper for Selenium-Webdriver in Ruby. Watir-webdriver is created entirely automatically, based on the WebDriver specification and the HTML specification.|$|E
50|$|Many {{types of}} tests are automatable. At the {{component}} level, {{one of the}} xUnit packages can be a helpful tool. Or an organization can create its own unit testing framework. At the GUI level, <b>Watir</b> or iMacros are useful.|$|E
30|$|Egyptian localities: Lower Nile Valley and Delta: El-Marg. Sinai: Wadi Taibe, Wadi <b>Watir.</b>|$|E
40|$|Abstract Benefits {{of testing}} {{automation}} according to current literature are reusability, repeatability and effort saved in test execution, {{while some of}} the current difficulties lie in maintainability, initial investment and test case creation. This thesis presents a brief literature review on the state of testing automation and a larger literature review on the use of Selenium and <b>Watir</b> in web context. Literature review on the use of Selenium and <b>Watir</b> contains an introduction to the history and use of the tools, as well as a look on the academic literature and blogosphere on the subject. The aim of this research is to identify differences on performance of configurations used by open source testing tools Selenium and <b>Watir</b> in web context. This thesis presents a quantitative controlled experiment measuring and comparing execution times, memory use and lines of code used by different testing configurations used by Selenium and <b>Watir.</b> Tools used are <b>Watir</b> and C#, Java, Python and Ruby bindings for Selenium. These tools are paired with browsers Google Chrome, Internet Explorer, Mozilla Firefox and Opera for a total of 20 benchmarked configurations. Results of this study show that by selecting efficient pieces to the configuration in the form of tools, language bindings and web browsers, increased performance can be achieved as shorter execution times, less used memory and more concise code. Even for the purposes of cross-browser testing, the selection of tool affects the performance of testing configuration...|$|E
40|$|This paper {{presents}} the automation framework of Browser based testing tool <b>Watir</b> (web application testing in `Ruby). The main {{advantage of a}} framework is the low cost for maintenance. If there is change to any test case then only the test case file needs to be updated and the Driver Script and Start-up script will remain the same. So, {{there is no need}} to update the scripts in case of changes to the application. Choosing the right framework helps in maintaining lower costs. There are several frameworks available suited for the particular application. Specifically, this paper discusses Keyword-driven framework for <b>Watir</b> and its various aspects in detail that can guide web application testing actively...|$|E
40|$|Abstract. With the {{development}} of the Internet, the online shopping was increasingly into people's life. In order to provide convenient search and price comparison service for shopping online, this article designs and implements automatic search and comparison system based on Deep web. To overcome the difficulties of data capture from the current dynamic webpage, the background’s data capture of this system implements by <b>watir.</b> The search module for end-users implements by JavaEE. The practical application shows that this system can fully satisfy people’s needs in search and comparison. 1...|$|E
40|$|With the {{extensive}} application of WDB, the {{full use of}} their data becomes a hot issue of current research. WDB query interface is an important way to obtain the WDB data, the full representation and extraction of WDB query interface is prerequisite to gain the WDB data. This paper presents an ontology-based representation of the WDB query interface, this method can not only represent the general attribute of the query interface, but also can express the context information of the query interface {{and the relationship between}} the interface properties, which lays the foundation for the accurate classification and integration to WDB. Meanwhile, this paper also gives a method about interface extraction which is based on DOM and <b>Watir.</b> Practice show that the method can very well complete the expression and extraction of WDB’s Query Interface’s Context information, property information and relationship information...|$|E
40|$|Recently, {{web browser}} based {{applications}} {{have become very}} popular in many domains. As an important method {{to ensure the quality}} of Web applications, Web testing attracts more and more attentions in the academic community and industrial world. Testing Web applications raises new problems and faces very high challenges. Recently web applications have grown rapidly and have become more and more complex. As web applications become more complex, there is a growing concern about their quality. Web application testing is a challenging work owing to its dynamic behaviors and complex dependencies. As in case what if the end user uses different types of browsers to access the application. So, to deal with Browser compatibility issue this work proposes Browser based testing tools named as <b>Watir</b> (Web Application Testing in Ruby) and WET for the scenario of web-based applications. Starting with the preliminary architectural design, this paper includes the testing scenario for both the tools alongwith the comparative analysis based on well defined parameters...|$|E
40|$|Corresponding author) Abstract-Recently, {{web browser}} based {{applications}} {{have become very}} popular in many domains. As an important method {{to ensure the quality}} of Web applications, Web testing attracts more and more attentions in the academic community and industrial world. Testing Web applications raises new problems and faces very high challenges. Recently web applications have grown rapidly and have become more and more complex. As web applications become more complex, there is a growing concern about their quality. Web application testing is a challenging work owing to its dynamic behaviors and complex dependencies. As in case what if the end user uses different types of browsers to access the application. So, to deal with Browser compatibility issue this work proposes Browser based testing tools named as <b>Watir</b> (Web Application Testing in Ruby) and WET for the scenario of web-based applications. Starting with the preliminary architectural design, this paper includes the testing scenario for both the tools along with the comparative analysis based on well defined parameters. Keywords-Browser compatibility;Watir;Ruby;WET; I...|$|E
40|$|Context: Selenium {{is claimed}} to be the most popular {{software}} test automation tool. Past academic works have mainly neglected testing tools in favor of more methodological topics. Objective: We investigated the performance of web-testing tools, to provide empirical evidence supporting choices in software test tool selection and configuration. Method: We used 4 * 5 factorial design to study 20 different configurations for testing a web-store. We studied 5 programming language bindings (C#, Java, Python, and Ruby for Selenium, while <b>Watir</b> supports Ruby only) and 4 browsers (Google Chrome, Internet Explorer, Mozilla Firefox and Opera). Performance was measured with execution time, memory usage, length of the test scripts and stability of the tests. Results: Considering all measures the best configuration was Selenium with Python language binding for Chrome. Selenium with Python bindings was the best option for all browsers. The effect size of the difference between the slowest and fastest configuration was very high (Cohens d= 41. 5, 91 % increase in execution time). Overall Internet Explorer was the fastest browser while having the worst results in the stability. Conclusions: We recommend benchmarking tools before adopting them. Weighting of factors, e. g. how much test stability is one willing to sacrifice for faster performance, affects the decision. Comment: 40 pages, 3 figures, 26 table...|$|E
40|$|Problem statement: Sinai is {{increasingly}} suffering from an overwhelming water crisis. Runoff Water Harvesting (RWH) {{could be a}} solution for this problem. The determined promising drainage basins for RWH {{could be used by}} the decision makers to propose appropriate controlling systems to overcome the problem of water scarcity and for implementing runoff farming and rain-fed agriculture. Approach: Remote sensing, geographic information systems, watershed modeling system were integrated to extract a multi-criteria-decision support system of nine thematic layers, namely; volume of annual flood, lineaments frequency density, drainage frequency density, maximum flow distance, basin area, basin slope, basin length, average overland flow distance and soil infiltration. These criteria were used for conducting a Weighted Spatial Probability Modeling (WSPM) to determine the potential areas for the RWH. The potential runoff available for harvesting was estimated by applying Finkel-SCS rainfall-runoff methods. Results: The WSPM classified Sinai into four classes that graded from high (3, 201 - 6, 695 km 2), moderate (35, 923 - 35, 896 km 2), low (13, 185 - 16, 652 km 2), very low (1. 38 - 5. 57 km 2) for RWH. Promising watersheds like those of Abu Taryfya, Hamma El Hassana, Gerafi, <b>Watir,</b> Geraia, Heridien, Sidri, Feiran and Alaawag, are categorized as high-moderate RWH potential basins. Conclusion: These basins could be investigated in detail with larger scale to determine the appropriate locations for implementing the RWH structures and techniques. Implementing systems and techniques of RWH in the potential watersheds could open new opportunities for sustainable development in the area...|$|E

