251|6116|Public
5|$|Unlike Unix, Plan 9 was {{designed}} with graphics in mind. After booting, a Plan 9 terminal {{will run the}} rio <b>windowing</b> <b>system,</b> in which the user can create new windows displaying rc. Graphical programs invoked from this shell replace it in its window.|$|E
5|$|Plan 9 {{demonstrated}} that an integral concept of Unix—that every system interface could be {{represented as a}} set of files—could be successfully implemented in a modern distributed system. Some features from Plan 9, like the UTF-8 character encoding of Unicode, have been implemented in other operating systems. Unix-like operating systems such as Linux have implemented 9P, Plan 9's file system, and have adopted features of rfork, Plan 9's process creation mechanism. Additionally, in Plan 9 from User Space, several of Plan 9's applications and tools, including the sam and acme editors, have been ported to Unix and Linux systems and have achieved some level of popularity. Several projects seek to replace the GNU operating system programs surrounding the Linux kernel with the Plan 9 operating system programs. The 9wm window manager was inspired by 8½, the older <b>windowing</b> <b>system</b> of Plan 9; wmii is also heavily influenced by Plan 9.|$|E
25|$|The WIMP {{style of}} {{interaction}} uses a virtual input device {{to represent the}} position of a pointing device, most often a mouse, and presents information organized in windows and represented with icons. Available commands are compiled together in menus, and actions are performed making gestures with the pointing device. A window manager facilitates the interactions between windows, applications, and the <b>windowing</b> <b>system.</b> The <b>windowing</b> <b>system</b> handles hardware devices such as pointing devices, graphics hardware, and positioning of the pointer.|$|E
40|$|The X <b>Window</b> <b>System</b> is a portable, network-transparent and {{flexible}} <b>window</b> <b>system.</b> It {{was developed by}} MIT’s Project Athena in 1984, and subsequently released as open-source software, greatly accelerating its adoption in the unix world. It is now the standard <b>window</b> <b>system</b> for most unix-like platforms, such as Solaris, the BSDs, Linux, and Minix. A notable exception is Apple’s Mac OS, a BSD-derived system, which uses a proprietary <b>window</b> <b>system.</b> Another competing <b>window</b> <b>system</b> is integrated in Microsoft Windows, the leading desktop and server operating system. Although X is not native to those platforms, it has been ported to them, making X the only <b>window</b> <b>system</b> implemented on all modern platforms, and therefore {{the best choice for}} an application which needs to be ported to all major modern platforms. In this paper, {{the advantages and disadvantages of}} the X <b>Window</b> <b>System</b> relative to other modern <b>window</b> <b>systems</b> will be discussed. c© 2008 David R. Hoski...|$|R
50|$|RunScanner is a {{freeware}} Microsoft <b>Windows</b> <b>system</b> utility which scans a <b>windows</b> <b>system</b> for all configured running {{programs and}} autostart locations.|$|R
50|$|The PostScript-based NeWS (Network {{extensible}} <b>Window</b> <b>System)</b> {{was developed}} by Sun Microsystems in the mid-1980s. For several years SunOS included a <b>window</b> <b>system</b> combining NeWS and the X <b>Window</b> <b>System.</b> Although NeWS was considered technically elegant by some commentators, Sun eventually dropped the product. Unlike X, NeWS was always proprietary software.|$|R
25|$|The X Window System (X11, or {{shortened}} {{to simply}} X) is a <b>windowing</b> <b>system</b> for bitmap displays, common on UNIX-like computer operating systems.|$|E
25|$|Graphics {{the plot}} {{subsystem}} provided facilities for producing simple vector plots in a device-independent format, with device-specific interpreters to display such files. Modern Unix systems also generally include X11 {{as a standard}} <b>windowing</b> <b>system</b> and GUI, and many support OpenGL.|$|E
25|$|OpenGL 3.0 {{introduced}} a deprecation mechanism to simplify future {{revisions of the}} API. Certain features, marked as deprecated, could be completely disabled by requesting a forward-compatible context from the <b>windowing</b> <b>system.</b> OpenGL 3.0 features could still be accessed alongside these deprecated features, however, by requesting a full context.|$|E
40|$|Abstract: Shared <b>window</b> <b>systems</b> {{have become}} a popular vehicle for {{supporting}} distributed, synchronous collaboration. At present they are difficult to build and they support limited paradigms of multi-user interaction with shared applications. We believe this difficulty {{is largely due to}} the inverted nature of the client/server architecture of most distributed <b>window</b> <b>systems.</b> The architecture is inverted {{in the sense that the}} user is nearer the server than the client; this hampers attempts to share windows. By comparing the traditional client/server architecture of distributed file systems with the inverted architecture of distributed <b>window</b> <b>systems</b> we argue that it is possible to develop <b>window</b> <b>systems</b> where the user is nearer <b>window</b> <b>system</b> clients than servers, and that this architecture greatly facilitates the sharing of windows among users...|$|R
5000|$|It emulates the Windows runtime {{environment}} by translating <b>Windows</b> <b>system</b> calls into POSIX-compliant system calls, recreating the directory structure of <b>Windows</b> <b>systems,</b> and providing alternative implementations of <b>Windows</b> <b>system</b> libraries, system services through [...] {{and various other}} components (such as Internet Explorer, the Windows Registry Editor, and msiexec). Wine is predominantly written using black-box testing reverse-engineering, to avoid copyright issues.|$|R
40|$|This paper {{describes}} the salient problems that face the designers of X-based shared <b>window</b> <b>systems</b> and provides solutions and implementation principles {{for addressing the}} problems. The enumeration of issues and solutions is based on our experiences with XTV [...] - an X-based shared <b>window</b> <b>system</b> we have developed. KEY WORDS X protocol, Computer Conferencing, Computer Supported Collaborative Work, Internet Protocols, UNIX Network Programming, Client/Server Model, Distributed <b>Systems.</b> SHARED <b>WINDOW</b> SYSTEMS Growing interest in concurrent engineering and computer-supported cooperative work {{has led to the}} development of a number of computer conferencing systems that allow geographically distributed groups of individuals to (simultaneously) view and manipulate shared images, documents, or programs, while they communicate via audio and possibly video links [1 - 6]. There are two basic approaches to supporting such conferences. The first involves the development of so-called collaboration-aware applications [...] - specialpurpose applications, that directly support multiple, simultaneously active users. Alternatively, one can leverage the large base of existing single-user applications by augmenting a <b>window</b> <b>system</b> to support the sharing of application interfaces (e. g., windows) across multiple, distributed users. The resulting <b>window</b> <b>system</b> is typically called a shared <b>window</b> <b>system.</b> The X <b>Window</b> <b>System</b> has been a particularly popular vehicle for experimentation with, and development of, shared <b>window</b> <b>systems</b> [1, 4, 5]. Indeed, we have developed, and placed in the public domain, a shared <b>window</b> <b>system,</b> called XTV (X Teleconferencing and Viewing [1, 2]), based on the X <b>Window</b> <b>System.</b> XTV allows a conference to be created around one or more arbitrary X applications. Conferees have the same [...] ...|$|R
25|$|Scheifler, Gettys and Ron Newman set to {{work and}} X progressed rapidly. They {{released}} Version 6 in January 1985. DEC, then preparing to release its first Ultrix workstation, judged X the only <b>windowing</b> <b>system</b> likely to become available in time. DEC engineers ported X6 to DEC's QVSS display on MicroVAX.|$|E
25|$|In {{addition}} to being language-independent, OpenGL is also cross-platform. The specification says nothing {{on the subject of}} obtaining, and managing an OpenGL context, leaving this as a detail of the underlying <b>windowing</b> <b>system.</b> For the same reason, OpenGL is purely concerned with rendering, providing no APIs related to input, audio, or windowing.|$|E
25|$|When an {{operating}} {{system with a}} native <b>windowing</b> <b>system</b> hosts X in addition, the X system can either use its own normal desktop in a separate host window or it can run rootless, meaning the X desktop is hidden and the host windowing environment manages the geometry and appearance of the hosted X windows within the host screen.|$|E
2500|$|Linda Mui and Eric Pearce, X <b>Window</b> <b>System</b> Volume 8: X <b>Window</b> <b>System</b> Administrator's Guide for X11 Release 4 and Release 5, 3rd edition (O'Reilly and Associates, July 1993; softcover [...] ) ...|$|R
5000|$|Non-silent <b>Windows</b> <b>system</b> {{software}} installations, including driver installations, OS {{patches and}} <b>Windows</b> <b>system</b> tools, cannot {{be converted into}} MSI packages. This technological limitation is common {{for all types of}} installation repackaging solutions.|$|R
5000|$|GLX (initialism for [...] "OpenGL Extension to the X Window System") is an {{extension}} to the X <b>Window</b> <b>System</b> core protocol providing an interface between OpenGL and the X <b>Window</b> <b>System</b> as well as extensions to OpenGL itself. It enables programs wishing to use OpenGL to do so within a window provided by the X <b>Window</b> <b>System.</b> GLX distinguishes two [...] "states": indirect state and direct state.|$|R
25|$|Typically, Linux is {{packaged}} {{in a form}} known as a Linux distribution (or distro for short) for both desktop and server use. Some {{of the most popular}} and mainstream Linux distributions are Arch Linux, CentOS, Debian, Fedora, Gentoo Linux, Linux Mint, Mageia, openSUSE and Ubuntu, together with commercial distributions such as Red Hat Enterprise Linux and SUSE Linux Enterprise Server. Distributions include the Linux kernel, supporting utilities and libraries, many of which are provided by the GNU Project, and usually a large amount of application software to fulfil the distribution's intended use. Desktop Linux distributions include a <b>windowing</b> <b>system,</b> such as X11, Mir or a Wayland implementation, and an accompanying desktop environment such as GNOME or KDE Plasma 5; some distributions may also include a less resource-intensive desktop, such as LXDE or Xfce. Distributions intended to run on servers may omit all graphical environments from the standard install, and instead include other software to set up and operate a solution stack such as LAMP. Because Linux is freely redistributable, anyone may create a distribution for any intended use.|$|E
500|$|The initial {{version of}} PerForm was {{designed}} for the Graphics Environment Manager (better known as [...] "GEM"), a DOS-based <b>windowing</b> <b>system.</b> Later versions of this program, known as PerForm PRO, were designed to work under Windows 3.1 and subsequent Windows operating systems. PerForm PRO 3.0 included integration with Delrina's own WinFax software, and included a range of automation tools.|$|E
2500|$|Linux {{distributions}} compiled for the ARM architecture {{have been}} successfully run via chroot. Also, the X11 <b>windowing</b> <b>system</b> common to many Linux systems has been ported to run within webOS. [...] This allows most graphical applications made for Linux to run in webOS.|$|E
5000|$|... and [...] {{refer to}} the same program, though [...] invokes the text-based version, while [...] will invoke an X <b>Window</b> <b>System</b> based {{interface}} if possible; however, if [...] determines that X <b>Window</b> <b>System</b> capabilities are not present, it will present the text-based version instead of failing. Determination of X <b>Window</b> <b>System</b> capabilities is typically performed by checking {{for the existence of}} the [...] variable.|$|R
5000|$|In January 1997, the {{responsibility}} for the X <b>Window</b> <b>System</b> was transferred to The Open Group from the defunct X Consortium. In 1999, X.Org was formed to manage the X <b>Window</b> <b>System,</b> with management services provided by The Open Group. The X.Org members made a number of releases up to and including X11R6.8 while The Open Group provided management services. In 2004, X.Org and The Open Group worked together to establish the newly formed X.Org Foundation who then took control of the x.org domain name, and the stewardship of the X <b>Window</b> <b>System.</b> (See the history of the X <b>Window</b> <b>System.)</b> ...|$|R
50|$|CLIM {{has been}} {{designed}} to be portable across different Common Lisp implementations and different <b>window</b> <b>systems.</b> It uses a reflective architecture for its <b>window</b> <b>system</b> interface. CLIM supports, like Dynamic Windows, so-called Presentations.|$|R
2500|$|The first {{independent}} {{version of}} Microsoft Windows, version 1.0, released on November 20, 1985, achieved little popularity. The project was briefly codenamed [...] "Interface Manager" [...] before the <b>windowing</b> <b>system</b> was developed - {{contrary to popular}} belief that it was the original name for Windows and Rowland Hanson, the head of marketing at Microsoft, convinced the company that the name Windows would be more appealing to customers.|$|E
2500|$|The project solved this by {{creating}} a protocol that could both run local applications and call on remote resources. In mid-1983 an initial port of W to Unix ran at one-fifth of its [...] speed under V; in May 1984, Scheifler replaced the synchronous protocol of W with an [...] protocol and the display lists with immediate mode graphics to make X version 1. X became the first <b>windowing</b> <b>system</b> environment to offer true hardware independence and vendor independence.|$|E
2500|$|In June 2012, the now {{discontinued}} [...] "Windows 8 mode" [...] {{was introduced}} to developer channel, which enables Windows 8 and 8.1 users to run Chrome with a full-screen, tablet-optimized interface, with access to snapping, sharing, and search functionalities. In October 2013, Windows 8 mode on developer channel changed to use a desktop environment mimicking the interface of Chrome OS with a dedicated <b>windowing</b> <b>system</b> and taskbar for web apps. This was discontinued as of version 49 and users that have upgraded to Windows 10 will lose this feature.|$|E
5000|$|... xbiff {{is a small}} utility for the X <b>Window</b> <b>System</b> {{that shows}} a mailbox with its flag raised {{whenever}} the user has new e-mail. It is included in almost every X <b>Window</b> <b>System.</b>|$|R
50|$|XEmbed {{allows the}} nesting of one {{application}} inside another application's <b>window</b> on <b>systems</b> using X <b>Window</b> <b>System.</b>|$|R
50|$|Mike McMahon {{designed}} and implemented the New <b>Window</b> <b>System</b> for the MIT Lisp Machine in 1980 together with Howard Cannon. The <b>window</b> <b>system</b> was implemented using the Flavors object-oriented extension to Lisp Machine Lisp.|$|R
2500|$|Desktop Window Manager {{is the new}} <b>windowing</b> <b>system</b> which {{handles the}} drawing of all content to the screen. Instead of windows drawing {{directly}} to the video card's memory buffers, contents are instead rendered to back-buffers (technically Direct3D surfaces), which are then arranged in the appropriate Z-order, then displayed to the user. This drawing method uses significantly more video memory than the traditional window-drawing method used in previous versions of Windows, which only required enough memory to contain the composite of all currently visible windows at any given time. With the entire contents of windows being stored in video memory, a user can move windows around the screen smoothly, without having [...] "tearing" [...] artifacts be visible while the operating system asks applications to redraw the newly visible parts of their windows. Other features new to Windows Vista such as live thumbnail window previews and Flip 3D are implemented through the DWM.|$|E
2500|$|Due to {{an earlier}} {{antitrust}} case forbidding it from entering the computer business, AT was required to license the operating system's source code to anyone who asked. As a result, Unix grew quickly and became widely adopted by academic institutions and businesses. In 1984, AT divested itself of Bell Labs; freed of the legal obligation requiring free licensing, Bell Labs began selling Unix as a proprietary product, where users weren't legally allowed to modify Unix. The GNU Project, started in 1983 by Richard Stallman, had the goal of creating a [...] "complete Unix-compatible software system" [...] composed entirely of free software. Work began in 1984. Later, in 1985, Stallman started the Free Software Foundation and wrote the GNU General Public License (GNU GPL) in 1989. By the early 1990s, many of the programs required in an operating system (such as libraries, compilers, text editors, a Unix shell, and a <b>windowing</b> <b>system)</b> were completed, although low-level elements such as device drivers, daemons, and the kernel, called GNU/Hurd, were stalled and incomplete.|$|E
2500|$|Dieter Bohn of The Verge {{liked the}} new Control Center setup, {{including}} customizable toggles and 3D Touch-expandable options, writing that [...] "there {{are a few}} panels that I'm really impressed with", specifically highlighting the Apple TV remote as a possible replacement of the normal remote. He did, however, note the lack of third-party access to Control Center, with a hope for support in the future, {{and a lack of}} Wi-Fi network selection ability. He praised the screen-recording functionality, calling it [...] "super neat". Bohn severely criticized the notifications view, writing that he has a [...] "very serious disagreement" [...] with Apple on how to manage it, elaborating that he prefers to use that screen as much as possible while stating that [...] "Apple's philosophy is that I'm trying way too hard" [...] to control speedy notifications. Bohn liked the new Files app, new drag-and-drop functionality on the home screen enabling users to drag multiple apps at once, and significantly praised multitasking on iPad. Writing that [...] "Multitasking on the iPad is a near-revelatory experience", he enjoyed the application dock and the ability to place up to three apps on the screen at once with more freedom on placement. Bohn conceded that [...] "It's not as intuitive nor as simple [...] as easy to manipulate as a traditional <b>windowing</b> <b>system</b> like you'll get on a Mac, PC, or Chromebook", but still praised it for being [...] "radically more powerful than what has ever been available on an iPad before". Finally, Bohn praised Siri for improvements to the voice, highlighted augmented reality allowing for [...] "incredible games", and reiterated an earlier sentiment that iOS 11 is [...] "the most ambitious software update from Apple in a very, very long time".|$|E
50|$|Traditionally, the X <b>Window</b> <b>System</b> has {{lagged behind}} other <b>windowing</b> <b>systems</b> in adding purely eye candy or {{aesthetic}} features, such as window translucency. This has encouraged developers to develop kludges {{to overcome this}} limitation.|$|R
40|$|Multimedia and {{advanced}} real-time systems integrate {{a variety of}} applications and media types in one environment, {{many of which have}} timing properties which are not supported by current <b>window</b> <b>systems</b> running in multitasking environments. This paper discusses several key aspects to designing <b>window</b> <b>systems</b> which support continuous media and other real-time applications. These design considerations were used to construct ARTIFACT, a <b>window</b> <b>system</b> designed to investigate issues in building real-time <b>window</b> <b>systems.</b> Several of the behaviors of a prototype implementation of ARTIFACT are described, along with preliminary scheduling models and avenues for further research. Keywords: real-time systems, operating <b>system</b> support, <b>window</b> <b>systems,</b> multimedia support, scheduling theory 1. Introduction Multimedia systems integrate a variety of media types into a unified display environment. Some media types, such as text and static graphics, have been in use for quite some time. Other types, su [...] ...|$|R
50|$|In {{computer}} <b>windowing</b> <b>systems,</b> {{the painting}} of information to the screen is driven by expose events which drive the display code at the last possible moment. By doing this, <b>windowing</b> <b>systems</b> avoid computing unnecessary display content updates.|$|R
