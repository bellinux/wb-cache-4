463|203|Public
25|$|A {{workflow}} is {{a series}} of processing steps connected together so that the output of one step is used as the input of another. Processing steps implement data analysis tasks such as data importing, statistical tests and report generation. In Anduril, processing steps are implemented using components, which are reusable executable code that can be written in any programming language. Components are wired together into a workflow, or a component network, that is executed by the Anduril <b>workflow</b> <b>engine.</b> Workflow configuration is done using a simple yet powerful scripting language, AndurilScript. Workflow configuration and execution can be done from Eclipse, a popular multipurpose GUI, or from the command line.|$|E
50|$|A <b>workflow</b> <b>engine</b> is a core {{technique}} for task allocation software, such as business process management, {{in which the}} <b>workflow</b> <b>engine</b> allocates tasks to different executors while communicating data among participants. A <b>workflow</b> <b>engine</b> can execute any arbitrary sequence of steps, for example, a healthcare data analysis.|$|E
50|$|When {{it comes}} to project {{workforce}} management, {{it is all about}} managing all the logistic aspects of a project or an organisation through a software application. Usually, this software has a <b>workflow</b> <b>engine</b> defined. Therefore, all the logistic processes take place in the <b>workflow</b> <b>engine.</b>|$|E
40|$|To {{benefit from}} grids, {{scientists}} require grid <b>workflow</b> <b>engines</b> that automatically manage {{the execution of}} interrelated jobs on the grid infrastructure. So far, the workflows community has focused on scheduling algorithms and on interface tools. Thus, while several grid <b>workflow</b> <b>engines</b> have been deployed, {{little is known about}} their performance-related characteristics, and there are no commonly-used testing practices. This situation limits the adoption of the grid <b>workflow</b> <b>engines,</b> and hampers their tuning and their further development. In this work we propose a testing methodology for grid <b>workflow</b> <b>engines</b> that focuses on five characteristics: overhead, raw performance, stability, scalability, and reliability. Using this methodology, we evaluate in a real test environment several middleware stacks that include grid <b>workflow</b> <b>engines,</b> including two based on DAGMan/Condor and on Karajan/Globus. ...|$|R
5000|$|Interchange formats and {{protocols}} {{to support}} interoperability between different <b>workflow</b> <b>engines</b> ...|$|R
30|$|Workflow schema layer: Definitions of {{workflow}} schemata to {{be executed}} by <b>workflow</b> <b>engines,</b> defined in a DSL.|$|R
5000|$|Automating {{business}} processes with the embedded Activiti <b>workflow</b> <b>engine</b> ...|$|E
5000|$|ADAMS Workflow: <b>Workflow</b> <b>engine</b> for MOA and Weka (machine learning) ...|$|E
5000|$|Ciboodle Flow is the <b>Workflow</b> <b>engine</b> for {{business}} process automation.|$|E
30|$|Infrastructure layer: Generic (application independent) {{software}} components such as database systems, <b>workflow</b> <b>engines,</b> middleware, web servers, operating system.|$|R
40|$|In e-Science, {{meaningful}} experiment {{processes and}} <b>workflow</b> <b>engines</b> emerge as important scientific resources. A complex experiment often involves services and processes developed in different scientific domains. Aggregating different workflows into one meta workflow avoids unnecessary rewriting of experiment processes and thus improves the reuse efficiency. Remote <b>workflow</b> <b>engines</b> explore the computing power of distributed environment. However, {{the diversity of}} workflow description and execution models makes the integration between engines difficult. An agent framework uses ontology based communication language and makes the integration to semantic information of resources seamless, it is thus suitable for coupling distributed engines. In this paper, we present our work {{in the context of}} Dutch Virtual Laboratory for e-Science (VL-e) project. A semantic registry for describing <b>workflow</b> <b>engines</b> is implemented, and mobile agents are used to manage distributed workflow coordination...|$|R
40|$|Business Process Outsourcing (BPO) {{enables the}} {{delegation}} of entire business processes to third party providers. Such scenarios involve communication between federated and heterogeneous <b>workflow</b> <b>engines.</b> However, state-of-the-art <b>workflow</b> <b>engines</b> {{fall short of}} a distributed authorisation mechanism for this heterogeneous, federated BPO setting. In a cross-organisational context, the security requirements involve (i) delegation and verification of privileges in a confidential manner, (ii) secure asynchronous operations during the long-term workflows even when the users are logged-off, and (iii) controlling access to interfaces of the different <b>workflow</b> <b>engines</b> involved. To address these challenges, we present a voucher-based authorisation architecture and middleware. We extended the WF-Interop middleware with a security module to support this authorisation architecture. We further validated our contributions by prototyping a billing workflow case study {{on top of the}} extended WF-Interop middleware and evaluated the performance overhead of the security extensions to the middleware. status: publishe...|$|R
50|$|All {{project and}} {{workforce}} processes are designed, controlled and audited using a built-in graphical <b>workflow</b> <b>engine.</b> Users can design, {{control and audit}} the different processes involved in the project. The graphical workflow is quite attractive for the users {{of the system and}} allows the users to have a clear idea of the <b>workflow</b> <b>engine.</b>|$|E
5000|$|Executing {{condition}} script: After {{passing the}} previous two steps, the <b>workflow</b> <b>engine</b> begins to evaluate the condition script {{in which the two}} processes are carried out, if the condition is true, <b>workflow</b> <b>engine</b> execute the task, and if the execution successfully completes, it returns the success, if not, it reports the error to trigger and roll back the change.|$|E
5000|$|... #Subtitle level 2: Use {{of third}} party <b>workflow</b> <b>engine</b> as a {{guideline}} execution engine ...|$|E
50|$|Workflow can be {{implemented}} as workflow solutions with which users interact, or as <b>workflow</b> <b>engines,</b> which act as a background service controlling the information and data flow.|$|R
5000|$|Tavaxy [...] is a {{cloud-based}} workflow system that implements a pattern-based approach for enabling interoperability between Galaxy and Taverna, two <b>workflow</b> <b>engines</b> {{popular in the}} bioinformatics domain ...|$|R
5000|$|The use of SRMs for the CPES fusion {{project for}} {{large-scale}} robust data movement will {{be incorporated into}} <b>workflow</b> <b>engines</b> {{as part of the}} SDM center activities.|$|R
50|$|Frameworx {{proposes that}} the process is managed {{as part of the}} {{centralised}} infrastructure, using a <b>workflow</b> <b>engine</b> that is responsible for controlling the flow of the business process between the applications. Therefore, the <b>workflow</b> <b>engine</b> would initiate a process on application A, which would then return control to <b>workflow</b> <b>engine,</b> which would then call application B, and so on. In this way it's always possible to find out where an individual process flow is, since it is controlled by the central <b>workflow</b> <b>engine,</b> and process modifications can be made using the engine’s process definition tools. Clearly some lower level process flows will be embedded in the individual applications, but this should be below the level of business-significant processing (i.e. below the level at which business policy and rules are implemented). The Frameworx certification methodologies help us deal with the scope of preferences that are not linearly distributed as an opening to improve the customer accepted undeniably appropriate method.|$|E
5000|$|A <b>workflow</b> <b>engine,</b> used {{primarily}} to invite users {{to review and}} either approve or reject changes.|$|E
50|$|The {{distributed}} <b>workflow</b> <b>engine</b> supports {{process planning}} & process history {{as well as}} participant management and process template creation with import/export.The <b>workflow</b> <b>engine</b> embeds a functional fusion of 1) group-based instant messaging 2) with a shared work list editor 3) with version control.The software implementation of dDPM is α-Flow which is available as open source.dDPM and α-Flow provide a content-oriented approach to schema-less workflows.|$|E
40|$|Abstract In this paper, we {{leverage}} the previous {{work on the}} SHIWA bundling format and expand on this specification {{in order to facilitate}} work-flow execution within a multi-workflow environment. We introduce a scalable and robust execution pool environment that supports workflows consisting of sub-workflows built upon a multitude of different <b>workflow</b> <b>engines</b> and environments, and also provide a common workflow representation for seam-less connectivity through serialization to workflow bundles. We also present a meta-workflow scenario based upon this system. Workflow bundles employ the lightweight Open Archives Initiative Object Reuse and Exchange (ORE) Web-based standard, to provide a common format for representing and sharing workflows and the associated metadata required for their execution. This generalized bundling approach is already available within five <b>workflow</b> <b>engines</b> and has proven a useful environment for inter-workflow experimentation. The execution pool facilitates federated access to multiple distributed com-puting infrastructures supported by the underlying <b>workflow</b> <b>engines</b> sub-scribed to the pool. Workflow bundles are exposed using the eXtensible Mes-saging and Presence Protocol (XMPP), which provides the necessary commu...|$|R
40|$|Numerous Grid <b>workflow</b> <b>engines</b> exist, each {{generally}} specialized for {{a single}} application domain such as protein folding. Although the underlying purpose and functionality of the Grid <b>workflow</b> <b>engines</b> are similar, and they make use of {{a common set of}} Grid protocols, the implementations vary vastly, making interoperation among them nearly impossible. On the other hand, the concept of workflows of Web services is very popular in the enterprise domain and many engines exist for business workflows. These mostly revolve around the Business Process Execution Language (BPEL), an emerging standard for Web services workflow description. We study three different business workflow engines- Microsoft's BizTalk Server...|$|R
30|$|Alternatives. Using {{learning}} flow or <b>workflow</b> <b>engines,</b> it is able {{to identify}} either automatically or through human review alternative courses of action in response to the learning patterns. Once a decision is made, it will trigger the learning action.|$|R
50|$|OpenWFE was a Java {{open source}} <b>workflow</b> <b>engine.</b> Later it was rewritten in Ruby and renamed ruote.|$|E
5000|$|... iDempiere has a <b>Workflow</b> <b>Engine</b> {{based on}} WfMC standard, to manage {{document}} workflow process and BPM requirements.|$|E
50|$|Flowable is an {{open-source}} <b>workflow</b> <b>engine</b> {{written in}} Java that can execute business processes described in BPMN 2.0.|$|E
50|$|To {{implement}} {{all kinds}} of authors and illustrators work including all supporting processes like validation and production of IETD the CSDB used by AIRBUS Defence and Space supports <b>workflow</b> <b>engines</b> and offers standardized interfaces to import and export data.|$|R
30|$|Observational {{case studies}} help {{analyzing}} mechanisms that produce phenomena in certain cases, e.g., technological artefacts trigger a certain consumer behavior. Studies {{of this type}} concern either social systems, such as development organizations, or technical systems, such as <b>workflow</b> <b>engines,</b> or socio-technical systems, such as recommender systems.|$|R
50|$|In contrast, {{the mental}} model a {{software}} engine is a mechanical engine, {{which one can}} start and stop, and which may run idle for periods of time. Examples of software engines include relational database <b>engines,</b> <b>workflow</b> <b>engines,</b> inference engines and search engines. A common characteristic of software engines is metadata that provides models of the real data that the engine processes. Software modules pass data to the engine, and the engine uses its metadata models to transform the data into a different state.|$|R
5000|$|A {{range of}} API calls to support {{functions}} between a <b>workflow</b> <b>engine</b> and applications or other system components ...|$|E
5000|$|The {{regular and}} most common types of tasks handled by project {{workforce}} management software {{or a similar}} <b>workflow</b> <b>engine</b> are: ...|$|E
5000|$|Formats for the {{exchange}} of information such as process definitions and audit data between a <b>workflow</b> <b>engine</b> and other external repositories.|$|E
40|$|Workflow {{management}} systems (WFMSs) that are geared for the orchestration of enterprise-wide or even "virtual-enterprise"-style business processes across multiple organizations are complex distributed systems. They consist of multiple <b>workflow</b> <b>engines,</b> application servers, and ORB-style communication servers. Thus, deriving a suitable configuration {{of an entire}} distributed WFMS for a given application workload is a difficult task. This paper presents a mathematically based method for configuring a distributed WFMS such that the application's demands regarding performance and availability can be met while aiming to minimize the total system costs. The major degree of freedom that the configuration method considers is the replication of the underlying software components, <b>workflow</b> <b>engines</b> and application servers of different types {{as well as the}} communication server, on multiple computers for load partitioning and enhanced availability. The mathematical core of the method consists of Ma [...] ...|$|R
40|$|This paper {{presents}} a generic approach for developing and using Grid-based workflow technology for enabling cross-organizational engineering applications. Using industrial product design {{examples from the}} automotive and aerospace industries we highlight the main requirements and challenges addressed by our approach and describe {{how it can be}} used for enabling interoperability between heterogeneous <b>workflow</b> <b>engines.</b> 1...|$|R
40|$|Many {{simulation}} {{systems are}} standalone, running {{only on a}} desktop and having limited capabilities to integrate with other technologies such as company databases, <b>workflow</b> <b>engines,</b> and other desktop solutions. At the same time, leading corporations have discovered the value of simulation technology. Many companies require simulation {{to be used as}} standard procedure in support of process improvements...|$|R
