0|10000|Public
6000|$|In {{this work}} Fred assisted, while the miner stood guard with his {{revolver}} {{to prevent any}} interference, and <b>when</b> <b>the</b> <b>task</b> was <b>finished</b> <b>the</b> former whispered to his partner: ...|$|R
60|$|Deftly {{he removed}} the great pelt, for he had practiced often on smaller animals. <b>When</b> <b>the</b> <b>task</b> was <b>finished</b> he carried his trophy to the fork of a high tree, and there, curling himself {{securely}} in a crotch, he fell into deep and dreamless slumber.|$|R
6000|$|In {{order to}} {{complete}} this work before sunset it was essential that {{each member of the}} party should do his best regardless of fatigue, and <b>when</b> <b>the</b> <b>task</b> was <b>finished,</b> just as the sun began to descend beyond the horizon, the boys were so nearly exhausted that Bob said: ...|$|R
6000|$|... "Well, I sha'n't {{make any}} change at present," [...] said Mr. Letts, <b>when</b> <b>the</b> <b>task</b> was <b>finished.</b> [...] "There's {{plenty of room}} here for us all, and, {{so long as you}} and me agree, things can go on as they are. To-morrow morning I shall go out and look for a job." ...|$|R
6000|$|Well, in short, we {{gathered}} all the weapons, ammunition and accouterments {{that could be}} come at handily, depositing our burdens beneath the puncheon planks where were <b>the</b> muskets, and <b>when</b> <b>the</b> <b>task</b> was <b>finished</b> I turned upon little Frenchie, feeling almost angry because of having been engaged in such gruesome work, as I said: ...|$|R
5000|$|The problem {{starts with}} an empty vase and an {{infinite}} supply of balls. An infinite number of steps are then performed, such that at each step 10 balls {{are added to the}} vase and 1 ball removed from it. The question is then posed: How many balls are in <b>the</b> vase <b>when</b> <b>the</b> <b>task</b> is <b>finished?</b> ...|$|R
50|$|A related {{model is}} the split-merge model, for which {{analytical}} results exist. Exact results for the split-merge queue are given by Fiorini and Lipsky.Here on arrival a job is split into N sub-tasks which are serviced in parallel. Only <b>when</b> all <b>the</b> <b>tasks</b> <b>ﬁnish</b> servicing and have rejoined can the next job start. This leads to a slower response time on average.|$|R
40|$|Abstract—This paper {{challenges}} the mobile computing community by questioning {{the roles of}} devices, applications, and a user's environment. A vision of pervasive computing is described, along with attributes of a new application model that supports this vision to reality. Pervasive computing is more art than science. It will remain this way {{as long as people}} continue to view mobile computing devices as mini-desktops, applications as pro-grams that run on these devices, and the environment as a virtual space that a user enters to perform a <b>task</b> and leaves <b>when</b> <b>the</b> <b>task</b> is <b>finished.</b> This paper {{challenges the}} mobile computing community to adopt a new view of devices and its applications. Today, pervasive computing is more art than science. It will remain this way as long as people continue to view mobile computing devices as mini-desktops, applications as programs that run on these devices, and the environment as a virtual space that a user enters to perform a <b>task</b> and leaves <b>when</b> <b>the</b> <b>task</b> is <b>finished.</b> This paper challenges the mobile computing community to adopt a new view of devices, applications and environment...|$|R
40|$|For {{user-friendliness}} purposes, {{many modern}} software systems provide progress indicators for longrunning tasks. These progress indicators continuously estimate {{the percentage of}} <b>the</b> <b>task</b> that has been completed and <b>when</b> <b>the</b> <b>task</b> will <b>finish.</b> However, none of the existing program compilation tools provide a non-trivial progress indicator, although it often takes minutes or hours to build a large program. In this paper, we investigate the problem of supporting such progress indicators. We first discuss the goals and challenges inherent in this problem. Then we present a set of techniques that are sufficient fo...|$|R
40|$|We {{discuss a}} {{computational}} system following {{the paradigm of}} distributed computing, which {{will allow us to}} simulate the epidemic propagation in random networks with large number of nodes up to one million. This paradigm consists of a server that delivers tasks to be carried out by client computers. <b>When</b> <b>the</b> <b>task</b> is <b>finished,</b> <b>the</b> client sends the obtained results to the server to be stored until all <b>tasks</b> are <b>finished</b> and then ready to be analysed. Finally, we show that this technique allows us to disclose the emergence of seasonal patterns in the respiratory syncytial virus transmission dynamics which do not appear neither in smaller systems nor in continuous systems...|$|R
40|$|Many modern {{software}} systems provide progress {{indicators for}} long-running tasks. These progress indicators make systems more user-friendly by helping the user quickly estimate {{how much of}} <b>the</b> <b>task</b> has been completed and <b>when</b> <b>the</b> <b>task</b> will <b>finish.</b> However, none of the existing commercial RDBMSs provides a non-trivial progress indicator for long-running queries. In this paper, we consider the problem of supporting such progress indicators. After discussing the goals and challenges inherent in this problem, we present a set of techniques sufficient for implementing a simple yet useful progress indicator for a large subset of RDBMS queries. We report an initial implementation of these techniques in PostgreSQL. 1...|$|R
30|$|In case A, {{the product}} backlog {{was located in}} Excel and it {{was derived from the}} {{schedule}} in MS Project. The iteration backlog was a physical whiteboard, where <b>the</b> <b>tasks</b> were printed from Excel. In the beginning, the whiteboard was similar to a Kanban board consisting of to-do, doing, and done, and each project had their own boards. During the pilot project, the board was changed to represent every day of the iteration and <b>the</b> <b>tasks</b> were allocated on a daily basis for each developer, in order to better visualize the amount of work spent in each project during <b>the</b> iteration. <b>When</b> <b>the</b> <b>task</b> was <b>finished,</b> <b>the</b> <b>task</b> was turned upside-down for visualization of the progress.|$|R
40|$|Good {{scheduling}} {{policies for}} distributed embedded applications {{are required for}} meeting hard real time constraints and for optimizing the use of computational resources. We study the quasi-static scheduling problem in which (uncontrollable) control flow branchings can influence scheduling decisions at run time. Our abstracted distributed task model consists {{of a network of}} sequential processes that communicate via point-to-point buffers. In each round, <b>the</b> <b>task</b> gets activated by a request from <b>the</b> environment. <b>When</b> <b>the</b> <b>task</b> has <b>finished</b> computing <b>the</b> required responses, it reaches a pre-determined configuration and is ready to receive a new request from the environment. For such systems, we prove that determining the existence of a scheduling policy that guarantees...|$|R
25|$|<b>When</b> <b>the</b> <b>task</b> was <b>finished</b> Uthman {{kept one}} copy in Medina and sent others to Kufa, Baṣra, Damascus, and, {{according}} to some accounts, Mecca, and ordered that all other variant copies of the Quran to be destroyed. This was done everywhere except in Kufa, where some scholars argue that, Ibn Masʿūd and his followers refused. It is also important that the compilation of the Quran {{during the time of}} Caliph Abu Bakr which was inherited by Caliph Umar's daughter Hafsa (and a wife of Muhammad) was not destroyed but was passed back to her. This would imply that the first compilation, during the time of Abu Bakr, was not at variation with the Uthmanic compilation.|$|R
5000|$|Lin {{then set}} about {{destroying}} the seized opium. After encircling the site with a bamboo fence to prevent theft, three stone pits, lined with wood, were dug into which was poured the seized opium along with lime and salt. A minor interruption occurred when {{one man was}} caught trying to remove {{a quantity of the}} drughe was beheaded on the spot. Once the pits had been filled with sea water, labourers tramped the mixture to ensure the drug's destruction. The residue was then flushed through a channel into the South China Sea while Lin said a prayer apologising for the pollution. The work commenced on 3June 1839 and took a total of 23 days [...] <b>When</b> <b>the</b> <b>task</b> was <b>finished,</b> <b>the</b> American missionary, Elijah Coleman Bridgman, who witnessed events, commented: [...] "The degree of care and fidelity, with which the whole work was conducted, far exceeded our expectations ..." ...|$|R
5000|$|Altogether France {{has enough}} to occupy her in Central Africa {{for some time}} to come: and even <b>when</b> <b>the</b> long <b>task</b> is <b>finished,</b> <b>the</b> conquered regions {{are not likely to be}} of great value. They include the desert of the Great Sahara and wide expanses of equally profitless scrub or marsh. Only one {{important}} river, the Shari, flows through them, and never reaches the sea: and even Lake Chad, into which the Shari flows, appears to be leaking through some subterranean exit, and is rapidly changing from a lake into an immense swamp.|$|R
40|$|International audienceGood {{scheduling}} {{policies for}} distributed embedded applications {{are required for}} meeting hard real time constraints and for optimizing the use of computational resources. We study the quasi-static scheduling problem in which (uncontrollable) control flow branchings can influence scheduling decisions at run time. Our abstracted distributed task model consists {{of a network of}} sequential processes that communicate via point-to-point buffers. In each round, <b>the</b> <b>task</b> gets activated by a request from <b>the</b> environment. <b>When</b> <b>the</b> <b>task</b> has <b>finished</b> computing <b>the</b> required responses, it reaches a pre-determined configuration and is ready to receive a new request from the environment. For such systems, we prove that determining the existence of a scheduling policy that guarantees upper bounds on buffer capacities is undecidable. However, we show that the problem is decidable for the important subclass of "data-branching" systems in which control flow branchings are exclusively due to data-dependent internal choices made by the sequential components. This decidability result exploits ideas derived from the Karp and Miller coverability tree for Petri nets as well as the existential boundedness notion of languages of message sequence charts...|$|R
40|$|MapReduce is {{the most}} popular big-data {{computation}} framework, motivating many research topics. A MapReduce job consists of two successive phases, i. e. map phase and reduce phase. Each phase can be divided into multiple tasks. A reduce task can only start <b>when</b> all <b>the</b> map <b>tasks</b> <b>finish</b> processing. A job is successfully completed when all its map and reduce <b>tasks</b> are complete. <b>The</b> <b>task</b> of optimally scheduling <b>the</b> different <b>tasks</b> on different servers to minimize the weighted completion time is an open problem, and is the focus of this paper. In this paper, we give an approximation ratio with a competitive ratio 2 (1 +(m- 1) /D) + 1, where m is the number of servers and D> 1 is the task-skewness product. We implement the proposed algorithm on Hadoop framework, and compare with three baseline schedulers. Results show that our DMRS algorithm can outperform baseline schedulers by up to 82 %...|$|R
3000|$|... (3) Static {{and dynamic}} {{parallel}} computing: The static parallel computing determines scheduling of subtasks by {{the rank of}} processors and corresponding <b>task</b> indices. <b>The</b> distribution of <b>tasks</b> is fixed. It is easily implemented, and task assignments are deterministic. However, although the program is massively parallelized, the actual processing time for each task is hardly predictable and {{is determined by the}} input data. Because of such variances in the execution time among slaves, static parallel computing results in a considerable penalty stemming from workload imbalance. On the other hand, dynamic scheduling maintains a work queue, and tasks that are initially assigned by one to each slave and master are instead assigned to a slave by one task at a time while also acknowledging <b>when</b> <b>the</b> previous <b>task</b> is <b>finished.</b> Dynamic <b>task</b> scheduling helps to alleviate such problems but does so at the cost of needing to support synchronized communication, such that <b>the</b> <b>tasks</b> are assigned according to the latest processing states of the slaves instead of according to the rank of processors.|$|R
60|$|It {{is perhaps}} early {{to attempt to}} {{pronounce}} with which of the contracting Powers the advantage lies. France has acquired at a single stroke, without any serious military operations, the recognition of rights which may enable her ultimately to annex a vast African territory. At present what she has gained may {{be described as a}} recognised 'sphere of aspiration.' The future may convert this into a sphere of influence, and the distant future may witness the entire subjugation of the whole region. There are many difficulties to be overcome. The powerful influence of the Senussi has yet to be overthrown. The independent kingdom of Wadai must be conquered. Many smaller potentates will resist desperately. Altogether France has enough to occupy her in Central Africa for some time to come: and even <b>when</b> <b>the</b> long <b>task</b> is <b>finished,</b> <b>the</b> conquered regions {{are not likely to be}} of great value. They include the desert of the Great Sahara and wide expanses of equally profitless scrub or marsh. Only one important river, the Shari, flows through them, and never reaches the sea: and even Lake Chad, into which the Shari flows, appears to be leaking through some subterranean exit, and is rapidly changing from a lake into an immense swamp.|$|R
40|$|Abstract—This work {{presents}} a simple method to estimate IEEE 802. 11 Distributed Coordination Function (DCF) service time. This {{is the total}} amount of time needed to transmit a given frame, which is defined as the duration from the instant a node starts the transmission, until <b>the</b> instant <b>when</b> <b>the</b> transmission <b>task</b> effectively <b>finishes.</b> We are motivated by the fact that IEEE 802. 11 DCF does not provide time-bounded transmissions. Thus, {{it is important to have}} an estimate of the service time because most of the times a physical connection between two nodes exists, but it is misinterpreted by the upper layers due to the long waiting time to obtain a response from a node. In this case, the estimate of the service time can be used by the upper layer protocols to solve some problems caused by IEEE 802. 11, such as routing failures due to timeouts or even TCP connection failures. The congestion time in IEEE 802. 11 before each (re) transmission, which is due to the random access mechanism employed in the CSMA/CA, makes it more difficult for service time to be estimated. Our approach needs only local information available at each node and considers a realistic scenario where the traffic sources may have different data generation rates (heterogeneous traffic). The applied methodology is described and we present simulation results to assess its accuracy. I...|$|R
6000|$|... [Mr. Dickens's last Reading in the United States {{was given}} at the Steinway Hall on the above date. <b>The</b> <b>task</b> <b>finished</b> {{he was about to}} retire, but a {{tremendous}} burst of applause stopped him. He came forward and spoke thus:-] ...|$|R
60|$|The Doña Maria was in ecstasies {{when her}} {{daughter}} brought <b>the</b> <b>task</b> <b>finished,</b> two days before Christmas; {{at the same time}} begging permission to ride to Pasadena that she might receive for her labor the great sum of thirty dollars.|$|R
50|$|When one task {{is using}} a resource, it is {{generally}} not possible, or desirable, for another task to access it. The techniques of mutual exclusion are used to prevent this concurrent use. <b>When</b> <b>the</b> other <b>task</b> is blocked, it is unable to execute until <b>the</b> first <b>task</b> has <b>finished</b> using <b>the</b> shared resource.|$|R
5000|$|... #Caption: Douglas Trumbull {{was given}} <b>the</b> <b>task</b> of <b>finishing</b> <b>The</b> Motion Pictures opticals {{in time for}} a December 1979 release date.|$|R
30|$|The {{time for}} each {{repetition}} {{was limited to}} 600  s. <b>The</b> <b>task</b> was <b>finished</b> either <b>when</b> <b>the</b> participant considered he/she completed <b>the</b> knot or <b>when</b> <b>the</b> time limit had expired. <b>When</b> <b>the</b> <b>task</b> was finalized, <b>the</b> tutor performed quality control. The knot was considered correctly tied when a needle holder introduced between the knot and the underlying pad did not reveal any free space {{and when it was}} not possible to untie it with upwards force exerted by the needle holder. If the knot was successfully executed within the time limit, the final score was calculated dividing the time actually used by 1. If a correct knot was not achieved within the time limit, the final score assigned was 1, 200, which was obtained by dividing the maximum time (i.e., 600  s) by 0.5.|$|R
6000|$|Foy obeyed, {{returning}} presently {{with an old}} Testament of a very scarce edition. With {{the help}} of this book and an added vocabulary by slow degrees they deciphered the long epistle, Foy writing it down sentence by sentence as they learned their significance. <b>When</b> at length <b>the</b> <b>task</b> was <b>finished,</b> which was not till well after midnight, Dirk read the translation aloud to Lysbeth and his son. It ran thus: ...|$|R
50|$|Nakula and Sahadeva pray to Krishna, before {{starting}} <b>the</b> <b>task</b> and easily <b>finish</b> it off.|$|R
30|$|The {{time for}} each {{repetition}} {{was limited to}} 600  s. <b>The</b> <b>task</b> <b>finished</b> either <b>when</b> <b>the</b> last object was transported to its target or <b>when</b> <b>the</b> time limit expired. Because the active part of <b>the</b> <b>task</b> demands <b>the</b> use of only one hand, it was executed and scored separately for the DH and NDH, respectively. The time required to successfully finalize <b>the</b> <b>task,</b> referred to as time to correctly performed exercise (TCPE), ranged from 0 to 600 and was used to score the exercise. Since some participants may not successfully execute <b>the</b> <b>task</b> within this time limit, the final score was calculated as follows: If <b>the</b> <b>task</b> was successfully executed, the time actually used was divided by 1. If <b>the</b> <b>task</b> was not successfully executed, the maximum time used (i.e., 600  s) was divided by 0.5, giving a final score of 1, 200. This was done to clearly differentiate the failed repetitions from repetitions successfully executed in the maximum time.|$|R
50|$|Individuals {{will use}} <b>the</b> {{exchange}} <b>task</b> to understand <b>the</b> source (partners, groups, or networks) of their emotions. Individuals {{are more likely}} to attribute their emotions to their exchange partners or groups <b>when</b> <b>the</b> <b>task</b> can only be completed with one or more partners, <b>when</b> <b>the</b> <b>task</b> requires interdependent (nonseparable) contributions, and when there is a shared sense of responsibility for {{the success or failure of}} the exchange.|$|R
5000|$|Member of <b>the</b> McMillan <b>Task</b> and <b>Finish</b> Group on Technology Transfer, Higher Education Funding Council for England (HEFCE) ...|$|R
40|$|This paper {{focuses on}} the {{fragmentation}} problem produced in 2 D run-time reconfigurable FPGAs when hardware multitasking management is considered. Though allocation heuristics can take fragmentation into account when a new <b>task</b> arrives, <b>the</b> free area becomes inevitably fragmented as <b>the</b> <b>tasks</b> <b>finish</b> and exit <b>the</b> FPGA. The main contributions of our work are a fragmentation metric able to estimate <b>when</b> <b>the</b> FPGA fragmentation status has become critical, and several heuristics to decide when to perform defragmentation and how to perform it. This defragmentation heuristics can be of a preventive kind, driven by alarms that fire when isolated islands appear or a high fragmentation status is reached. It can be also an on-demand process produce...|$|R
5000|$|<b>When</b> <b>the</b> <b>task</b> list is {{initially}} activated by pressing , {{the list is}} populated in this order: ...|$|R
50|$|In general, microkernels succeed <b>when</b> <b>the</b> <b>task</b> {{switching}} and intertask {{communication is}} fast and fail {{when they are}} slow.|$|R
5000|$|The Fugl-Meyer Assessment {{scale is}} an ordinal scale that has 3 points for each item. A zero score is {{given for the}} item if the subject cannot do <b>the</b> <b>task.</b> A score of 1 is given <b>when</b> <b>the</b> <b>task</b> is {{performed}} partially and a score of 2 is given <b>when</b> <b>the</b> <b>task</b> is performed fully. However, reflex activity is measured using 2 points only, with a score of 0 or 2 for absence and presence of reflex respectively. The five domains assessed by Fugl-Meyer scale are: ...|$|R
3000|$|... • Workers – {{computational}} instances {{responsible for}} picking <b>tasks</b> from <b>the</b> queue, executing them and notifying <b>the</b> queue <b>when</b> <b>the</b> <b>task</b> is accomplished.|$|R
