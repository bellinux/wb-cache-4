392|975|Public
25|$|A {{group of}} Technion {{graduates}} created PHP (versions 3 through 5), a <b>web</b> <b>programming</b> language installed {{on more than}} 80% of web servers worldwide.|$|E
25|$|In {{addition}} {{with the}} network, G4 {{has maintained a}} website, which includes video game trailers and reviews, select video clips of its original shows, and formerly, original <b>web</b> <b>programming.</b>|$|E
25|$|The {{minor in}} {{computer}} science is designed primarily for mathematics and science majors whose work will require basic programming skills. The minor in <b>web</b> <b>programming</b> and applications is designed for {{humanities and social sciences}} students who plan to use computer application software such as spreadsheets, desktop publishing, multimedia, and Internet software extensively in their careers.|$|E
5000|$|Graphic Design & <b>Web</b> <b>Program</b> Founded in 1999, the Graphic Design & <b>Web</b> <b>Program</b> is a sixteen-month Associate in Specialized Business Degree Program.|$|R
5000|$|A <b>web</b> <b>program</b> that models ant behavior: Ant Economics Demo (requires Silverlight plugin) ...|$|R
40|$|Web {{content is}} {{migrating}} away from simple hyperlinked documents towards a diverse set {{of programs that}} execute within the web browser. Unfortunately, modern browsers do not provide a safe environment for running these <b>web</b> <b>programs.</b> In this paper, we show how current web security threats are symptoms of four key problems in supporting <b>web</b> programs: vague <b>program</b> boundaries, unwanted code, poor isolation, and inconsistent security policies. In response, we introduce abstractions for <b>web</b> <b>programs</b> and program instances, and we present a set of architectural principles to address these fundamental problems. ...|$|R
25|$|Although it was {{developed}} under the name Mocha, the language was officially called LiveScript when it first shipped in beta releases of Netscape Navigator 2.0 in September 1995, but it was renamed JavaScript when it was deployed in the Netscape Navigator 2.0 beta 3 in December. The final choice of name caused confusion, giving {{the impression that the}} language was a spin-off of the Java programming language, and the choice has been characterized as a marketing ploy by Netscape to give JavaScript the cachet of what was then the hot new <b>Web</b> <b>programming</b> language.|$|E
25|$|It {{was this}} {{combination}} of features that also made HyperCard a powerful hypermedia system. Users could build backgrounds to suit the needs of some system, say a rolodex, and use simple HyperTalk commands to provide buttons to move {{from place to place}} within the stack, or provide the same navigation system within the data elements of the UI, like text fields. Using these features, it is easy to build linked systems similar to hypertext links on the Web. Unlike the <b>Web,</b> <b>programming,</b> placement and browsing were all the same tool – similar systems have been created for HTML but traditional Web services are considerably more heavyweight.|$|E
25|$|The {{undergraduate}} {{division of}} the Department of Computer Science offers a Bachelor of Arts (BA) degree, two minors (one in computer science, and one in <b>web</b> <b>programming</b> and applications) and a joint minor in computer science/mathematics. The BA degree can also be pursued with honors. Students may combine the degree with other majors within the College of Arts and Science to create a personalized joint major. Two specific combined degrees are the joint major in computer science/economics and the joint major in computer science/mathematics. The Department of Computer Science also offers a BS/BE Dual Degree in computer science and engineering and an accelerated master's program available to qualifying undergraduates in conjunction with NYU-Poly.|$|E
40|$|<b>Web</b> <b>programs</b> are important, {{increasingly}} {{representing the}} primary public interfaces of commercial organizations. Unfortunately, <b>Web</b> <b>programs</b> also exhibit numerous flaws. In {{addition to the}} usual correctness problems faced by software, <b>Web</b> <b>programs</b> must contend with numerous subtle user operations such as clicking the Back button or cloning and submitting a page multiple times. Many existing Web verification tools fail to even consider, much less effectively handle, these operations. This paper describes a model checker designed to identify errors in Web software. We present a technique for automatically generating novel models of <b>Web</b> <b>programs</b> from their source code; these models include the additional control flow enabled by these user operations. In this technique, we exploit a constraint-based approach to avoid overapproximating this control flow; this approach allows us to evade exploding {{the size of the}} model. Further, we present a powerful base property language that permits specification of useful Web properties, along with several property idioms that simplify specification of the most common Web properties. Finally, we discuss the implementation of this model checker and a study of its effectiveness. ...|$|R
40|$|Continuation-based Web servers provide {{distinct}} {{advantages over}} traditional Web application development: expressive power and modularity. This power leads to fewer errors and more interesting applications. Furthermore, these Web servers {{are more than}} prototypes; they are used in some real commercial applications. Unfortunately, they pay a heavy price for the additional power {{in the form of}} lack of scalability. We fix this key problem with a modular program transformation that produces scalable, continuation-based <b>Web</b> <b>programs</b> based on the REST architecture. Our programs use the same features as non-scalable, continuation-based <b>Web</b> <b>programs,</b> so we do not sacrifice expressive power for performance. In particular, we allow continuation marks in <b>Web</b> <b>programs.</b> Our system uses 10 percent (or less) of the memory required by previous approaches...|$|R
50|$|Mendeley is {{a desktop}} and <b>web</b> <b>program</b> for {{managing}} and sharing research papers, discovering research data and collaborating online.|$|R
2500|$|PHP is {{one very}} common {{language}} used for server-side [...] "programming" [...] {{and is one}} of the few languages created specifically for <b>web</b> <b>programming.</b>|$|E
2500|$|Some Prolog implementations, notably SWI-Prolog and Ciao, support {{server-side}} <b>web</b> <b>programming</b> {{with support}} for web protocols, HTML and XML. [...] There are also extensions to support semantic web formats such as RDF and OWL. [...] Prolog {{has also been}} suggested as a client-side language.|$|E
50|$|The main objects {{available}} to ActiveVFP for <b>web</b> <b>programming</b> are: oRequest, oResponse, and oSession (and {{all of the}} objects that have been available in Classic Active Server Pages (ASP)). These objects are used entirely within Visual FoxPro to accomplish <b>web</b> <b>programming</b> with FoxPro.|$|E
40|$|Abstract. A novel {{approach}} {{based on}} constructing coarse-grained system dependence is proposed to compute <b>web</b> <b>program</b> slicing. The method perfects <b>web</b> <b>program</b> semantics {{and reduces the}} computation complexity through expanding the signification of coarse-grained and analyzing the dependence among semantic units. Program semantic units are described in detail. The expression of dependence includes data dependence, control dependence and transfer dependence. At length, two algorithms for constructing system dependence graph and computing coarse-grained program slicing are designed...|$|R
5000|$|... #Caption: Since being {{released}} under Microsoft's Core fonts for the <b>Web</b> <b>program,</b> Arial, Georgia, and Verdana have become three de facto fonts of the Web.|$|R
50|$|In April 2013, Elsevier, a RELX Group company, {{acquired}} Mendeley, a London-based desktop and <b>web</b> <b>program</b> {{for managing}} and sharing research papers, discovering research data and collaborating online.|$|R
5000|$|Advanced Certificate in <b>Web</b> <b>Programming</b> with [...]Net Framework (ACWP) ...|$|E
5000|$|Run BASIC (a free-to-use <b>web</b> <b>programming</b> site {{based on}} Liberty BASIC) ...|$|E
50|$|Norris-Whitney Communications {{also offers}} web design, <b>web</b> <b>programming,</b> graphic design and {{printing}} services.|$|E
50|$|The Technical Services {{component}} provides technology {{services to}} the other DMA components, hosts hundreds of DoD web sites through the DoD Public <b>Web</b> <b>program</b> and the Television-Audio Support Activity (T-ASA).|$|R
5000|$|... ele {{began his}} career {{when he went to}} Rio de Janeiro, had a {{painting}} on the <b>web</b> <b>program</b> of the actress Nívea Stelmann, and through him he knew the world of artists.|$|R
40|$|Summary. Programmers {{confront a}} {{minefield}} when they design interactive <b>Web</b> <b>programs.</b> <b>Web</b> interactions take place via Web browsers. Browsers permit consumers to whimsically navigate {{among the various}} stages of a dialog, leading to unexpected outcomes. Furthermore, the growing diversity of browsers means the number of interactive operations users can perform continues to grow. To investigate this programming problem, we develop a foundational model of Web interactions that reduces the panoply of browser-supported user interactions to three fundamental ones. We use the model to formally describe two classes of errors in <b>Web</b> <b>programs.</b> The descriptions suggest techniques for detecting both classes of errors. For one class we present an incrementally-checked record type system, which effectively eliminates these errors. For the other class, we introduce a dynamic safety check that employs program annotations to detect errors. ...|$|R
5000|$|Library & Information Science: Text Processing, <b>Web</b> <b>Programming,</b> Information Communication Technology, Database Design ...|$|E
5000|$|Other {{certifications}} {{and short}} courses such as CCNA, Java and <b>Web</b> <b>programming,</b> etc.|$|E
5000|$|<b>Web</b> <b>programming</b> with web2py; Python Magazine; Marco Tabini & Associates, Inc.; June 2008 ...|$|E
5000|$|In 2013 John McCutchan {{announced}} that he had created a performant interface to SIMD instruction sets for the Dart programming language, bringing the benefits of SIMD to <b>web</b> <b>programs</b> for the first time. The interface consists of two types: ...|$|R
40|$|Programmers {{confront a}} {{minefield}} when they design interactive <b>Web</b> <b>programs.</b> <b>Web</b> interactions take place via Web browsers. With browsers, consumers can whimsically navigate {{among the various}} stages of a dialog and can thus confuse the most sophisticated corporate Web sites. In turn, Web services can fault in frustrating and inexplicable ways. The quickening transition from Web scripts to Web services lends these problems immediacy...|$|R
40|$|Abstract. As {{interactive}} <b>Web</b> <b>programs</b> become ubiquitous, developers face {{a serious}} design constraint. When a script interacts with a user, it must produce a single Web page and terminate. When the user submits a response, then the script is rerun from scratch. Worse, a user can switch {{back and forth}} between pages, clone windows, and submit responses repeatedly or simultaneously. To cope with this inversion of control, the Web developer must structure its programs in a most unnatural manner. We overcome this problem by automatically transforming direct style <b>programs</b> into <b>Web</b> <b>programs,</b> by using well-known program transformation techniques from the functional world. Developers can keep using the languages and tools they know...|$|R
50|$|One {{area that}} has seen {{practical}} use of continuations is in <b>Web</b> <b>programming.</b> The use of continuations shields the programmer from the stateless nature of the HTTP protocol. In the traditional model of <b>web</b> <b>programming,</b> the lack of state {{is reflected in the}} program's structure, leading to code constructed around a model that lends itself very poorly to expressing computational problems. Thus continuations enable code that has the useful properties associated with inversion of control, while avoiding its problems. Inverting back the inversion of control or, Continuations versus page-centric programming is a paper that provides a good introduction to continuations applied to <b>web</b> <b>programming.</b>|$|E
50|$|In fall 2009, ProjectExplorers third series, Jordan, {{received}} a GOLD level Parents Choice Award {{for excellence in}} <b>web</b> <b>programming.</b>|$|E
5000|$|JS/SQL {{querying}} language, than combines well-known {{familiarity of}} SQL language with ubiquitous JavaScript code and the <b>Web</b> <b>programming</b> skills ...|$|E
50|$|The Cherrytree Sessions is an {{extended}} play (EP) by Swedish recording artist Robyn, released on 3 February 2009 by Cherrytree Records. The live-in-studio tracks were originally recorded for the <b>web</b> <b>program</b> Live at the Cherrytree House. The CD was available exclusively at Borders.|$|R
40|$|Summary: Query Chem (www. QueryChem. com) is a <b>Web</b> <b>program</b> that {{integrates}} {{chemical structure}} and text-based searching using publicly available chemical databases and Google’s <b>Web</b> Application <b>Program</b> Interface (API). Query Chem {{makes it possible}} to search the Web for information about chemical structures without knowing their common names or identifiers. Furthermore, a structure can be com-bined with textual query terms to further restrict searches. Query Chem’s search results can retrieve many interesting structure– property relationships of biomolecules on the Web. Contact...|$|R
50|$|Siren collaborates with {{pharmaceutical}} companies who manufacturer rare disorder therapies on: <b>web</b> <b>program</b> planning, audience research insights, search engine marketing, medical content development, interactive web and email design and development, social media and CRM strategy, online/offline marketing integration, database management and online metrics analysis.|$|R
