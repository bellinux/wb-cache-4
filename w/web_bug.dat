12|53|Public
25|$|A <b>web</b> <b>bug</b> is {{an object}} {{embedded}} into a web page or email {{and is usually}} invisible to the user of the website or reader of the email. It allows {{checking to see if}} a person has looked at a particular website or read a specific email message.|$|E
5000|$|<b>Web</b> <b>bug</b> (which are {{frequently}} used in spamming {{as a way}} of determining which spam recipients open (and presumably read) before deleting it) ...|$|E
50|$|Other {{publishers}} {{may seek}} specifically {{to have their}} materials transcluded into other web sites, as {{in the form of}} web advertising, or as widgets like a hit counter or <b>web</b> <b>bug.</b>|$|E
40|$|Part 8 : Social Networks and PrivacyInternational audienceWeb bugs are Web-based digital {{tracking}} objects enabling third parties to monitor {{access to the}} content, {{in which they are}} embedded. <b>Web</b> <b>bugs</b> are commonly used by advertisers to monitor web users. The negative impact of <b>web</b> <b>bugs</b> on the privacy of users is known for over a decade. In recent years, Web 2. 0 technologies have introduced social aspects into the online media, enhancing the ability of ordinary users to act as the content providers. However, this has also allowed end-users to place <b>web</b> <b>bugs</b> online. This has not only increased the number of potential initiators of monitoring of web surfing behaviour, but also potentially introduced new privacy threats. This paper presents a study on end-user induced <b>web</b> <b>bugs.</b> Our experimental results indicate that, in the light of Web 2. 0 technologies, the well-known concept of <b>web</b> <b>bugs</b> leads to new privacy-related problems...|$|R
50|$|The {{tracking}} mechanisms employed {{are typically}} first-party cookies and <b>web</b> <b>bugs.</b>|$|R
50|$|The simple {{countermeasure}} of disabling remote images (<b>web</b> <b>bugs)</b> in emails eliminates this problem.|$|R
5000|$|Facebook Beacon {{worked through}} the use of a 1x1 GIF <b>web</b> <b>bug</b> on the {{third-party}} site and Facebook cookies. [...] Clearing Facebook cookies from the browser after explicitly logging off from Facebook prevented the third-party site from knowing a user's Facebook identity.|$|E
5000|$|A <b>web</b> <b>bug</b> is {{an object}} {{embedded}} into a web page or email {{and is usually}} invisible to the user of the website or reader of the email. It allows {{checking to see if}} a person has looked at a particular website or read a specific email message.|$|E
50|$|Most web browsers will blindly {{follow the}} URL for inline links, {{even though it}} is a {{frequent}} security complaint. Embedded images may be used as a <b>web</b> <b>bug</b> to track users or to relay information to a third party. Many ad filtering browser tools will restrict this behavior to varying degrees.|$|E
5000|$|In {{the absence}} of {{standard}} methods, a range of system based around the use of <b>web</b> <b>bugs</b> have been developed. However, these are often seen as underhand or raising privacy concerns, and only work with email clients that support rendering of HTML. Many mail clients now default to not showing [...] "web content". Webmail providers can also disrupt <b>web</b> <b>bugs</b> by pre-caching images.|$|R
50|$|<b>Web</b> <b>bugs</b> are {{typically}} used by third parties {{to monitor the}} activity of customers at a site.|$|R
40|$|This {{paper is}} from the SANS Institute Reading Room site. Reposting is not {{permitted}} without express written permission. Big Brother is Watching: An Update on <b>Web</b> <b>Bugs</b> The majority of <b>web</b> <b>bugs</b> are not persistent {{in the sense that}} once a user has visited a bugged site they are then tracked at every site they visit. A network of <b>web</b> <b>bugs</b> on many different sites act as trip wires to report back to the hidden web site what websites have been visited. A company interested in tracking user's web site habits plants a network of bugs on various sites. All of the bugs will phone home to the same location when tripped by the user. Each of these bugs can read cookies on the user's computer (if [...] . Copyright SANS Institut...|$|R
50|$|Spammers {{sometimes}} use various {{means to}} confirm addresses as deliverable. For instance, including a hidden <b>Web</b> <b>bug</b> in a spam message written in HTML may cause the recipient's mail client to transmit the recipient's address, {{or any other}} unique key, to the spammer's Web site. Users can defend against such abuses by turning off their mail program's option to display images, or by reading email as plain-text rather than formatted.|$|E
50|$|The passive {{method of}} adding random words {{to a small}} spam was {{ineffective}} {{as a method of}} attack: only 0.04% of the modified spam messages were delivered. The active attack involved adding random words to a small spam and using a <b>web</b> <b>bug</b> to determine whether the spam was received. If it was, another Bayesian system was trained using the same poison words. After sending 10,000 spams to a single user he determined a small set of words {{that could be used to}} get a spam through.|$|E
5000|$|As {{with other}} {{embedded}} web widgets, such as like buttons, the Disqus widget {{acts as a}} <b>web</b> <b>bug</b> which tracks a user's activities, {{even when they are}} not logged in, across different sites that use the Disqus commenting system. Information tracked by Disqus, which may be disclosed to third parties, includes pseudonymous analytics data, such as a user's IP address, their web browser version and installed add-ons, and their referring pages and exit links. Although these data are referred to by Disqus as [...] "Non-Personally Identifiable Information", such data, when aggregated, {{has been shown to be}} usable for de-anonymizing users.|$|E
50|$|Users {{wishing to}} avoid these issues may opt to install a privacy-enhancing web browser extension, such as Ghostery, NoScript, or DoNotTrackMe, which {{identify}} widgets such as Disqus as <b>web</b> <b>bugs,</b> {{and allow them to}} be blocked; this renders Disqus-powered commenting sections unviewable.|$|R
40|$|This paper {{presents}} {{a summary of}} research findings for a new reacitve phishing investigative technique using <b>web</b> <b>bugs</b> and honeytokens. Phishing has become a rampant problem in today’s society and has cost financial institutions millions of dollars per year. Today’s reactive techniques against phishing usually involve methods that simply minimize the damage rather than attempting to actually track down a phisher. Our research objective is to track down a phisher to the IP address of the phisher’s workstation rather than innocent machines used as intermediaries. By using <b>web</b> <b>bugs</b> and honeytokens on the fake web site forms the phisher presents, one can log accesses to the honeytokens by the phisher when the attacker views {{the results of the}} forms. Research results to date are presented in this paper. 1...|$|R
50|$|IceCat {{includes}} {{additional security}} features, {{such as the}} option to block third party zero-length image files resulting in third party cookies, also known as <b>web</b> <b>bugs</b> (This feature is available in Firefox 1.0, 1.5, and 3.0, but the UI option was absent on 2.0). GNU IceCat also provides warnings for URL redirection.|$|R
5000|$|Web beacon is a {{term used}} for various {{techniques}} used on web pages or email, to unobtrusively (usually invisibly) allows checking that a user has accessed the content. Common uses are email tracking and page tagging for web analytics. Alternative names are <b>web</b> <b>bug,</b> tracking bug, tag, or page tag. Common names for web beacons implemented through an embedded image include tracking pixel, pixel tag, 1×1 gif, and clear gif. [...] When implemented using JavaScript, they may be called JavaScript tags. There {{is a work in}} progress to standardize an interface that web developers can use to asynchronously transfer small HTTP data from the User Agent to a web server that call it simply beacons (in the context of web development) which can be used to send data to a web server prior to the loading of the document without delaying the load and affecting the perception of page load performance for the next navigation.|$|E
40|$|This paper {{describes}} the design, implementation, {{and evaluation of}} a <b>web</b> <b>bug</b> detector called “FoxBeacon. ” This detector is originally designed to be an extension of Mozilla Firefox. After being installed, FoxBeacon embeds itself into the Firefox browser and acts as a proxy. It reads every incoming web page {{and trying to find}} hidden web bugs. FoxBeacon treats each image as a <b>web</b> <b>bug</b> according to the pre-defined rules. In addition, FoxBeacon also includes the compact policy, one component of Platform of Privacy Policy (P 3 P), to incorporate and provide more information to its users. This paper also covers the evaluation of FoxBeacon functionalities and its results. The ultimate goal of this project is to optimize between least disruption to the browser’s users and the most effective way {{in order to make the}} users aware of the hidden web bugs. In addition, reducing the number of false negatives and false positive is also another important goal...|$|E
40|$|Spear {{phishing}} is {{a widespread}} concern in the modern network security landscape, but there are few metrics that measure {{the extent to which}} reconnaissance is performed on phishing targets. Spear phishing emails closely match the expectations of the recipient, based on details of their experiences and interests, making them a popular propagation vector for harmful malware. In this work we use Natural Language Processing techniques to investigate a specific real-world phishing campaign and quantify attributes that indicate a targeted spear phishing attack. Our phishing campaign data sample comprises 596 emails - all containing a <b>web</b> <b>bug</b> and a Curriculum Vitae (CV) PDF attachment - sent to our institution by a foreign IP space. The campaign was found to exclusively target specific demographics within our institution. Performing a semantic similarity analysis between the senders' CV attachments and the recipients' LinkedIn profiles, we conclude with high statistical certainty (p $< 10 ^{- 4 }$) that the attachments contain targeted rather than randomly selected material. Latent Semantic Analysis further demonstrates that individuals who were a primary focus of the campaign received CVs that are highly topically clustered. These findings differentiate this campaign from one that leverages random spam. Comment: This paper has been accepted for publication by the IEEE Conference on Communications and Network Security in September 2015 at Florence, Italy. Copyright may be transferred without notice, after which this version may no longer be accessibl...|$|E
50|$|Advertising {{companies}} use third-party {{cookies to}} track a user across multiple sites. In particular, an advertising company can track a user across all pages {{where it has}} placed advertising images or <b>web</b> <b>bugs.</b> Knowledge of the pages visited by a user allows the advertising company to target advertisements to the user's presumed preferences.|$|R
50|$|Because Lynx {{does not}} support graphics, <b>web</b> <b>bugs</b> that track user {{information}} are not fetched; therefore, web pages can be read without the privacy concerns of graphic web browsers. However, Lynx does support HTTP cookies, which {{can also be used}} to track user information. Lynx therefore supports cookie whitelisting and blacklisting, or alternatively cookie support can be disabled permanently.|$|R
40|$|This {{article is}} {{a case study in}} the design, implementation, and {{deployment}} of the Bugnosis privacy enhancing tool. Downloaded and installed by over 100, 000 users to date, Bugnosis contributes to network privacy indirectly [...] without any technical protection measures such as filtering or anonymization [...] by raising awareness about <b>Web</b> <b>bugs</b> and arming users with specific information about current Web site practices...|$|R
50|$|Due to the {{widespread}} use of <b>web</b> <b>bugs</b> in email, simply opening an email can potentially alert the sender that the address to which the email is sent is a valid address. This can also happen when the mail is 'reported' as spam, in some cases: if the email is forwarded for inspection, and opened, the sender will be notified {{in the same way as}} if the addressee opened it.|$|R
50|$|Avoiding or {{disabling}} {{this feature}} {{does not help}} avoid spam. It may, however, be useful to avoid some problems if a user opens a spam message: offensive images, being tracked by <b>web</b> <b>bugs,</b> being targeted by JavaScript or attacks upon security vulnerabilities in the HTML renderer. Mail clients which do not automatically download and display HTML, images or attachments have fewer risks, as do clients who have been configured to not display these by default.|$|R
50|$|If {{an email}} {{contains}} <b>web</b> <b>bugs</b> (inline content from an external server, {{such as a}} picture), the server can alert a third party that the email has been opened. This is a potential privacy risk, revealing that an email address is real (so {{that it can be}} targeted in the future) and revealing when the message was read. For this reason, some email clients do not load external images until requested to by the user.|$|R
50|$|They {{demonstrated}} that adding hammy words - {{words that are}} more likely to appear in ham (non-spam email content) than spam - was effective against a naïve Bayesian filter, and enabled spam to slip through. They went on to detail two active attacks (attacks that require feedback to the spammer) that were very effective against the spam filters. Of course, preventing any feedback to spammers (such as non-delivery reports, SMTP level errors or <b>web</b> <b>bugs)</b> defeats an active attack trivially.|$|R
5000|$|Cost per mille, often {{abbreviated}} to CPM, means that advertisers pay for every thousand displays of their message to potential customers (mille is the Latin word for thousand). In the online context, ad displays are usually called [...] "impressions." [...] Definitions of an [...] "impression" [...] vary among publishers, and some impressions {{may not be}} charged because they don't represent a new exposure to an actual customer. Advertisers can use technologies such as <b>web</b> <b>bugs</b> to verify if an impression is actually delivered.|$|R
5000|$|... a <b>web</b> browser <b>bug</b> which {{under some}} {{conditions}} allows content (scripts) in one zone {{to be executed}} with the permissions of a higher privileged zone.|$|R
50|$|Breaches of {{web browser}} {{security}} are usually {{for the purpose}} of bypassing protections to display pop-up advertising collecting personally identifiable information (PII) for either Internet marketing or identity theft, website tracking or web analytics about a user against their will using tools such as <b>web</b> <b>bugs,</b> Clickjacking, Likejacking (where Facebook's like button is targeted), HTTP cookies, zombie cookies or Flash cookies (Local Shared Objects or LSOs); installing adware, viruses, spyware such as Trojan horses (to gain access to users' personal computers via cracking) or other malware including online banking theft using man-in-the-browser attacks.|$|R
50|$|The {{number is}} usually displayed, with image or text, {{as an old}} inline digital image, a plain text or an old {{mechanical}} counter. Image renderization of digits may {{use a variety of}} fonts and styles; the classic example is the wheels of an odometer. The counter is often accompanied by the date it was set up or last reset, otherwise it becomes impossible to estimate within what time the number of page loads counted occurred. Some web counters were simply <b>web</b> <b>bugs</b> used by webmasters to track hits and included no visible on-page elements.|$|R
40|$|So far, few {{attempts}} {{were carried out}} in literature to understand the specific nature of <b>Web</b> <b>bugs</b> and their distribution among the tiers of applications' architecture. In this paper we present an experimental investigation conducted with five pairs of homologous applications (Web and traditional) and 780 real bugs taken from SourceForge aimed at studying the distributions of <b>bugs</b> in <b>Web</b> and traditional applications. The investigation follows a rigorous experimental procedure and it was conducted {{in the context of}} three bachelor theses. The study results, although preliminarily, provide a clear-cut empirical evidence that the presentation layer in Web applications is more defect-prone when compared to analogous traditional application...|$|R
50|$|Most modern graphic email clients {{allow the}} use of either plain text or HTML for the message body {{at the option of}} the user. HTML email {{messages}} often include an automatically generated plain text copy as well, for compatibility reasons. Advantages of HTML include the ability to include in-line links and images, set apart previous messages in block quotes, wrap naturally on any display, use emphasis such as underlines and italics, and change font styles. Disadvantages include the increased size of the email, privacy concerns about <b>web</b> <b>bugs,</b> abuse of HTML email as a vector for phishing attacks and the spread of malicious software.|$|R
5000|$|Many modern mail {{programs}} incorporate Web browser functionality, such as {{the display}} of HTML, URLs, and images. This can easily expose the user to offensive images in spam. In addition, spam written in HTML can contain <b>web</b> <b>bugs</b> which allows spammers {{to see that the}} e-mail address is valid and that the message has not been caught in spam filters. JavaScript programs can be used to direct the user's Web browser to an advertised page, or to make the spam message difficult to close or delete. Spam messages have contained attacks upon security vulnerabilities in the HTML renderer, using these holes to install spyware. (Some computer viruses are borne by the same mechanisms.) ...|$|R
50|$|Many {{consumers}} have reservations about online behavioral targeting. By tracking users' online activities, advertisers {{are able to}} understand consumers quite well. Advertisers often use technology, such as <b>web</b> <b>bugs</b> and respawning cookies, to maximizing their abilities to track consumers. According to a 2011 survey conducted by Harris Interactive, over half of Internet users had a negative impression of online behavioral advertising, and forty percent feared that their personally-identifiable information had been shared with advertisers without their consent. Consumers can be especially troubled by advertisers targeting them based on sensitive information, such as financial or health status. Furthermore, some advertisers attach the MAC address of users' devices to their 'demographic profiles' {{so they can be}} retargeted (regardless of the accuracy of the profile) even if the user clears their cookies and browsing history.|$|R
