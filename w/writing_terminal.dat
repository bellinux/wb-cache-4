1|26|Public
5000|$|Notably, however, ASIC did {{feature a}} {{rudimentary}} {{integrated development environment}} and an RS-232 communications library for <b>writing</b> <b>terminal</b> and BBS software, as well not requiring line numbers. [...] The last release of ASIC, version 5.00, was more compatible with GW-BASIC and offered a utility to convert GW-BASIC programs to ASIC syntax.|$|E
50|$|Bukatman <b>wrote</b> <b>Terminal</b> Identity: The Virtual Subject in Postmodern Science Fiction (Duke University Press) and a {{monograph}} on {{the seminal}} science fiction film Blade Runner for the British Film Institute. His articles {{have been published}} in Artforum International, Architecture New York, October and Camera Obscura. He has served as a consulting editor for Science Fiction Studies and is on the editorial boards of Art/Text and Animation: An Interdisciplinary Journal.|$|R
50|$|His {{grandson}} is screenwriter {{and film}} director Sacha Gervasi, who <b>wrote</b> The <b>Terminal</b> for Steven Spielberg and Tom Hanks {{and directed the}} documentary Anvil! The Story of Anvil.|$|R
5000|$|... mesg is a Unix {{command that}} sets or reports the {{permission}} other users have to <b>write</b> to your <b>terminal</b> using the [...] and [...] commands. It is invoked as: ...|$|R
40|$|Abstract — This paper {{approaches}} {{energy consumption}} characterization in mobile computing platforms by assessing energy consumption of ”basic ” application-level tasks, such as as processing, input/output (disk, display, etc.), communication (transmission and reception over the network), and combinations thereof. Besides providing {{information on the}} energy consumption behavior of typical tasks performed by mobile computers, task-level energy characterization enables power management decisions, such as whether, in a distributed computation, {{the task at hand}} can be executed locally or should be assigned to a different machine (given the machine’s current energy budget, the energy cost of executing the task locally, and the cost of sending the required information over the network to a peer). We employ a task-level energy consumption characterization benchmark that accounts for basic tasks such as processing, disk access (including reads and <b>writes),</b> <b>terminal</b> usage, and communication (transmission and reception). Using the benchmark, we perform an energy characterization case study using the Dell Latitude C 600 running two versions of the Linux operating system. I...|$|R
50|$|Ellie Lawson {{released}} the song For You with Stoneface and <b>Terminal</b> <b>written</b> about her son, born in 2013. She has since released 10 songs all reaching the Beatport Trance Charts.|$|R
40|$|Command-oriented {{functional}} {{programs are}} currently structured {{in an ad}} hoc way that makes the development of multiple userinterfaces difficult and error prone, and {{makes it difficult to}} abstractly understand a program’s command-oriented behavior. To rectify this, we propose a software architecture for such programs that we call functional model-view-controller (MVC), by a rough analogy with object-oriented MVC. In functional MVC, a program user) and controller (command loops). In contrast to objectoriented MVC, a controller is active, consisting of a number of recursive functions. It calls its view to get user input and to display results to the user; it calls its model to do domain-specific work. To increase adaptability, a controller should be parameterized by its model and view, using a function or an ML-style functor. With this approach, one can <b>write</b> <b>terminal</b> and graphical views; one can also write views that do abstract scripting. One can understand and reason about a program’s command-oriented aspects at a high-level of abstraction by focusing on the controller. Of particular note is the way we are able to allow computations of the model to be monitored and aborted by view. We illustrate our approach with a case study of a complete application, written in Standard ML, and using Concurrent ML and the eXene X window system toolkit...|$|R
50|$|Some {{versions}} of biff, {{such as the}} one found in FreeBSD as of 4.7 have a third mode of operation. In addition to y and n it could be set to b which would reduce the alert to just a pair of beeps, without any text <b>written</b> to the <b>terminal.</b> This makes biff less disruptive.|$|R
50|$|A {{terminal}} mode {{is one of}} a set of possible states of a terminal or pseudo terminal character device in Unix-like systems and determines how characters <b>written</b> to the <b>terminal</b> are interpreted. In cooked mode data is preprocessed before being given to a program, while raw mode passes the data as-is to the program without interpreting any of the special characters.|$|R
40|$|QUICK {{computer}} program provides user with facilities of sophisticated desk calculator performing scalar, vector, and matrix arithmetic; propagate conic-section orbits; determines planetary and satellite coordinates; and performs other related astrodynamic calculations within FORTRAN-like software environment. QUICK is interpreter, and {{no need to}} use compiler or linker to run QUICK code. Outputs plotted in variety of formats on variety of <b>terminals.</b> <b>Written</b> in RATFOR...|$|R
50|$|Creative Writing {{programs}} are typically available to writers {{from the high}} school level all the way through graduate school/university and adult education. Traditionally these {{programs are}} associated with the English departments in the respective schools, but this notion has been challenged in recent time as more creative writing programs have spun off into their own department. Most Creative Writing degrees for undergraduates in college are Bachelor of Fine Arts degrees (BFA). Some continue to pursue a Master of Fine Arts in Creative <b>Writing,</b> the <b>terminal</b> degree in the field. At one time rare, PhD. programs are becoming more prevalent in the field, as more writers attempt {{to bridge the gap between}} academic study and artistic pursuit.|$|R
40|$|This {{paper offers}} {{a method for}} {{multiple}} soft fault diagnosis of nonlinear circuits containing bipolar and MOS transistors. The method enables us to locate faulty elements and evaluate their parameters, using a nonlinear algebraic type test equation which may possess several solutions. To find the solutions the homotopy concept is applied and a homotopy differential equation <b>written.</b> Next the <b>terminal</b> value problem is formulated and solved using the restart approach. A numerical example illustrates the proposed approach...|$|R
2500|$|By 1893, a {{reporter}} <b>wrote</b> that the <b>terminal</b> had [...] "crushed the region utterly, {{so far as}} its fitness to be an abiding place of polite society was concerned." [...] She reported that the local population was largely [...] "longshoreman, laborers and teamsters" [...] of Italian and German descent, living in mansions turned into tenements, some of which had as many as 800 residents. [...] The redevelopment of the area, predicted by the Times in 1867, had not occurred, possibly due to the economic depression {{of the city in}} the 1870s.|$|R
5000|$|When using Unix or Unix-like {{operating}} systems via a terminal (or terminal emulator), a user will initially {{only have a}} single process running, their login shell. Most tasks (directory listing, editing files, etc.) can easily be accomplished by letting the program {{take control of the}} terminal and returning control to the shell when the program exits - formally, by attaching to standard input and standard output to the shell, which reads or <b>writes</b> from the <b>terminal,</b> and catching signals sent from the keyboard, like the termination signal resulting from pressing [...]|$|R
5000|$|Assisted suicide {{has been}} legal since 1941 if {{performed}} by a non-physician without {{a vested interest in}} that individual's death. The law prohibits doctors, spouses, children, or other such related parties from directly participating in one's death. Many citizens from other countries cross over into Switzerland to end their lives. In 2011, a proposed ban of this practice of [...] "suicide tourism" [...] was rejected by popular vote in the canton of Zürich with a 78% majority. The laws regulating assisted suicide do not limit the practice to the terminally ill, it is only necessary that the person seeking assisted suicide does so while in full possession of their decision-making capacity (and indeed the statistics on assisted suicide show a minority of cases citing depression as relevant illness).The Swiss government in 2011 nevertheless announced its intention to seek a change in laws [...] "to make sure it was used {{only as a last resort}} by the terminally ill". Dignitas, a Swiss group that facilitates suicide, requires that patients provide specific doctor's proof and prognosis in <b>writing</b> specifying <b>terminal</b> illness.|$|R
500|$|Many storylines {{were based}} on life {{experiences}} of the production team; Bullen and his wife Lisa had their first child in late 1997, which made Bullen identify with the Pete character, whose son is born in the first episode. Bullen incorporated his experiences of {{the first few months}} of parenthood into the Pete and Jenny storyline. Adam's testicular cancer storyline in Series 2, Episode 5 was influenced by a similar condition that afflicted Harries, and was supplemented by the newspaper columns <b>written</b> by <b>terminal</b> cancer sufferer John Diamond. If a storyline was not drawn from real life experiences, it was researched by communicating with experts; Bullen consulted the relationship support charity Relate for the scenes of Karen and David's marriage guidance session in Series 1, Episode 5, and consulted Dr Sammy Lee for information about Rachel's intracytoplasmic sperm injection in Series 3. When it was decided to have Rachel's abortion lead to her developing Asherman's syndrome in Series 3, the British Pregnancy Advisory Service (BPAS) were contacted. BPAS strongly recommended that the plot be developed in a different direction, on the basis that infertility from what would appear to have been a routine abortion would be an [...] "improbable link", though the producers proceeded with their original story anyway.|$|R
5000|$|The {{distribution}} of signals to process groups {{forms the basis}} of job control employed by shell programs. The tty device driver incorporates a notion of a foreground process group, to which it sends signals generated by keyboard interrupts, notably SIGINT ("interrupt", [...] ), SIGTSTP ("terminal stop", [...] ), and SIGQUIT ("quit", [...] ). It also sends the SIGTTIN and SIGTTOU signals to any processes that attempt to read from or <b>write</b> to the <b>terminal</b> and {{that are not in}} the foreground process group. The shell, in turn, partitions the command pipelines that it creates into process groups, and controls what process group is the foreground process group of its controlling terminal, thus determining what processes (and thus what command pipelines) may perform I/O to and from the terminal at any given time.|$|R
40|$|A recent upgrade of the TSRV {{research}} flight {{system at}} NASA Langley Research Center retained the original monochrome display system. However, the display memory loading equipment was replaced requiring design {{and development of}} new methods of performing this task. This paper describes the new techniques developed to load memory in the display system. An outdated paper tape method for loading the BOOTSTRAP control program was replaced by EPROM storage of the characters contained on the tape. Rather than move a tape past an optical reader, a counter was implemented which steps sequentially through EPROM addresses and presents the same data to the loader circuitry. A cumbersome cassette tape method for loading the applications software was replaced with a floppy disk method using a microprocessor terminal installed {{as part of the}} upgrade. The cassette memory image was transferred to disk and a specific software loader was <b>written</b> for the <b>terminal</b> which duplicates the function of the cassette loader...|$|R
40|$|Under {{specific}} conditions, {{writing students}} effectively use teacher commentary when revising current essays and composing subsequent assignments. Writing instructors who {{are aware of}} these conditions can more efficiently help students improve their writing as well as minimize the time they spend evaluating student essays. The findings of this case study are based upon exploration of six first-year university writers 2 ̆ 7 argument and rhetorical analysis papers. Future research might focus on other genres, contextual effects, and the revision decisions of composition students who speak English as a second language. Students appear to read and apply end comments that offer praise and feedback when such comments appear on an intermediate draft of a work in progress. Students rely on marginal comments, not terminal comments, to revise targeted expression problems.;Therefore, instructors might save time by withholding terminal comments on expression and providing detailed marginal comments on expression. Further, students effectively apply comments that target content when revision can be made without disturbing the existing text. Students appear to ignore comments that target content problems if implementing the suggestions therein requires extensive revision of a work in progress. Also, students {{are more inclined to}} ignore terminal comments on organization than they are to implement them as they revise works in progress. On the other hand, those comments, if <b>written</b> as <b>terminal</b> comments on final drafts and stated as goals for future writing projects, effect improvement in the students 2 ̆ 7 subsequent essays within the boundaries of the same genre...|$|R
40|$|Now, {{that you}} have started with Haskell, have you written a program doing IO yet, like reading a file or <b>writing</b> on the <b>terminal?</b> Then you have used the IO monad — but do you {{understand}} how it works? The standard explanation is, that the IO monad hides the non-functional IO actions —which do have side effects — from the functional world of Haskell. It prevents pollution of the functional programming style with side effects. However, since most beginning Haskell programmers (i. e., everyone I know and including me) lack knowledge about category theory, they have no clue about what a monad really is. Nor how this “hiding ” works, apart from having IO actions disappearing {{beyond the borders of}} our knowledge. This report scratches the surface of category theory, an abstract branch of algebra, just deep enough to find the monad structure. On the way we discuss the relations to the purely func-tional programming language Haskell. Finally it should become clear how the IO monad keeps Haskell pure. We do not explain how to use the IO monad, nor discuss all the functions available to the pro...|$|R
40|$|This {{research}} project fetches event-data from githubarchives. org, filters {{the data to}} extract the information of interest, generates basic statistics and plots regarding to these statistics. The experiment is deployed to gain general knowledge on basic github-usage. Therefore, the following questions were followed: 1) How are GitHub-events distributed? - This can be derived by quantitative analysis {{of the distribution of}} different Event-Types. 2) What is the common ratio of commits per push, what are extremes? - again quantitative analysis of push-events is used. To visualize the results of this analysis, two plots are created. Each plot addresses one of the research-questions described above. Additionally, textual output is <b>written</b> to the <b>terminal</b> containing the precise numbers of the analysis and can be captured via native terminal functions. The data-files created by downloading and unzipping are just used as input for analysis and do not depict "final output". The given results were collected/created for the default time-period: 01. 01. 2015 00 : 00 to 01 : 00. The python 3 -Scripts need python version 3 and were executed on Linux! Additional libraries are required: matplotlib for python...|$|R
40|$|The robust {{pricing and}} hedging {{approach}} in Mathematical Finance, pioneered by Hobson (1998), makes statements about non-traded derivative contracts by imposing very little {{assumptions about the}} underlying financial model but directly using information contained in traded options, typically call or put option prices. These prices are informative about marginal distributions of the asset. Mathematically, the theory of Skorokhod embeddings provides one possibility to approach robust problems. In this thesis we consider mostly robust pricing and hedging problems of Lookback options (options <b>written</b> on the <b>terminal</b> maximum of an asset) and Convex Vanilla Options (options <b>written</b> on the <b>terminal</b> value of an asset) and extend the analysis which is predominately {{found in the literature}} on robust problems by two features: Firstly, options with multiple maturities are available for trading (mathematically this corresponds to multiple marginal constraints) and secondly, restrictions on the total realized variance of asset trajectories are imposed. Probabilistically, in both cases, we develop new optimal solutions to the Skorokhod embedding problem. More precisely, in Part I we start by constructing an iterated Azema-Yor type embedding (a solution to the n -marginal Skorokhod embedding problem, see Chapter 2. Subsequently, its implications are presented in Chapter 3. From a Mathematical Finance perspective we obtain explicitly the optimal superhedging strategy for Barrier/Lookback options. From a probability theory perspective, we find the maximum maximum of a martingale which is constrained by finitely many intermediate marginal laws. Further, as a by-product, we discover a new class of martingale inequalities for the terminal maximum of a cadlag submartingale, see Chapter 4. These inequalities enable us to re-derive the sharp versions of Doob's inequalities. In Chapter 5 a different problem is solved. Motivated by the fact that in some markets both Vanilla and Barrier options with multiple maturities are traded, we characterize the set of market models in this case. In Part II we incorporate the restriction that the total realized variance of every asset trajectory is bounded by a constant. This has been previously suggested by Mykland (2000). We further assume that finitely many put options with one fixed maturity are traded. After introducing the general framework in Chapter 6, we analyse the associated robust pricing and hedging problem for convex Vanilla and Lookback options in Chapters 7 and 8. Robust pricing is achieved through construction of appropriate Root solutions to the Skorokhod embedding problem. Robust hedging and pathwise duality are obtained by a careful development of dynamic pathwise superhedging strategies. Further, we characterize existence of market models with a suitable notion of arbitrage. This thesis is not currently available in OR...|$|R
40|$|It is an {{important}} technological challenge to ensure a LEO satellite ground terminal autonomy {{as well as to}} make it small, lightweight and power efficient along with the ability to predict the satellite visibility passes. Another important feature is to make it able to compensate for Doppler on the satellite link with an economical method. In this paper, an orbit and Doppler calculation methodology has been developed for a general orbital model. The algorithm that manages the ground terminal automatic operation ensures many advantages and is adapted to a microcontroller programming. Inputs to the algorithm are time, position and keplerian elements from NORAD. The NORAD elements are injected in the terminal memory via its serial port once before it is deployed on the operation field. Time is provided by a real time clock read and <b>written</b> by the <b>terminal</b> microcontroller. Terminal geographic position is provided by an internal integrated miniature GPS which makes the terminal free to move anywhere on the terrestrial globe and still be able to contact the satellite without any reprogramming. The orbit calculation methodology used expresses the satellite coordinates in the terminal relative topocentric (horizontal) coordinate system which easily yield the values of elevation and azimuth angles along with the slant range. This is achieved by means of satellite vector transformations through different coordinate systems. Doppler shift is obtained by deriving the slant range in time. A simple methodology for Doppler correction is also proposed in this paper and is adapted for low cost transceivers...|$|R
40|$|This study {{seeks to}} {{investigate}} the establishment of efficient and effective written communication in secondary schools and the role that information technology may play in this. In order {{to do this in}} such a wide field the study has focussed on three main types of written communication: the staff noticeboard, the staff handbook and the staff bulletin. As a piece of small-scale research the method chosen for the investigation was that of a double case study using observation and interviews. The results of the investigation point to a tendency for secondary schools to be drawing closer in their communication systems. Whilst the results tend to confirm those of previous studies the research points to correct presentation of the information being crucial to the effectiveness of the communication. Information technology now plays a vital role in the production of written communication but it's potential in being able to instantly transmit <b>written</b> messages to <b>terminals</b> elsewhere and handle data lies untouched. Views established through research into the take-up of information technology in school classrooms and office administration {{do not seem to be}} wholly applicable in schools' written communication. Teachers appear willing to use and adapt to the new technology. The research found that reluctant 'users' circumvented the problem by delegating the productioü of material to others and this explains to an extent the reason for the lack of further development of information technology in this area. The research also clearly pointed to the availability of hardware and expertise to advise in its use as being ultimately more important in information technology than the in-service courses externally provided...|$|R
40|$|Added jats as {{an input}} format. Add Text. Pandoc. Readers. JATS, {{exporting}} readJATS (API change) (Hamish Mackenzie). Improved citation handling in JATS reader. JATS citations are now converted to pandoc citations, and JATS ref-lists are {{converted into a}} references field in metadata, suitable for use with pandoc-citeproc. Thus a JATS article with embedded bibliographic information can be processed with pandoc and pandoc-citeproc to produce a formatted bibliography. Allow [...] list-extensions to take an optional FORMAT argument. This lists the extensions set by default for the selected FORMAT. The extensions are now alphabetized, and the + or - indicating the default setting comes before, rather than after, the extension. Markdown reader: Preserve original whitespace between blocks. Recognize as context. Be pickier about table captions. A caption starts with a : which can't be followed by punctuation. Otherwise we can falsely interpret {{the start of a}} fenced div, or even a table header line like : [...] :|: [...] :, as a caption. Always use four space rule for example lists. It would be awkward to indent example list contents to the first non-space character after the label, since example list labels are often long. Thanks to Bernhard Fisseni for the suggestion. Improve raw tex parsing. Note that the Markdown reader is also affected by the latex_macros extension changes described below under the LaTeX reader. LaTeX reader: latex_macros extension changes (# 4179). Don't pass through macro definitions themselves when latex_macros is set. The macros have already been applied. If latex_macros is enabled, then rawLaTeXBlock in Text. Pandoc. Readers. LaTeX will succeed in parsing a macro definition, and will update pandoc's internal macro map accordingly, but the empty string will be returned. Export tokenize, untokenize (API change). Use applyMacros in rawLaTeXBlock, rawLaTeXInline. Refactored inlineCommand. Fix bug in tokenizer. Material following ^^ was dropped if it wasn't a character escape. This only affected invalid LaTeX, so we didn't see it in the wild, but it appeared in a QuickCheck test failure. Fix regression in LateX tokenization (# 4159). This mainly affects the Markdown reader when parsing raw LaTeX with escaped spaces. Add tests of LaTeX tokenizer. Support from babel. Be more tolerant of & character (# 4208). This allows us to parse unknown tabular environments as raw LaTeX. Muse reader (Alexander Krotov) : Parse anchors immediately after headings as IDs. Require that note references does not start with 0. Parse empty comments correctly. Org reader (Albert Krewinkel) : Fix asterisks-related parsing error (# 4180). Support minlevel option for includes (# 4154). The level of headers in included files can be shifted to a higher level by specifying a minimum header level via the :minlevel parameter. E. g. #+include: "tour. org" :minlevel 1 will shift the headers in tour. org such that the topmost headers become level 1 headers. Break-up org reader test file into multiple modules. OPML reader: Enable raw HTML and other extensions by default for notes (# 4164). This fixes a regression in 2. 0. Note that extensions can now be individually disabled, e. g. -f opml-smart-raw_html. RST reader: Allow empty list items (# 4193). More accurate parsing of references (# 4156). Previously we erroneously included the enclosing backticks in a reference ID (# 4156). This change also disables interpretation of syntax inside references, as in docutils. So, there is no emphasis in `my *link*`_. Docx reader: Continue lists after interruption (# 4025, Jesse Rosenthal). Docx expects that lists will continue where they left off after an interruption and introduces a new id if a list is starting again. So we keep track of the state of lists and use them to define a "start" attribute, if necessary. Add tests for structured document tags unwrapping (Jesse Rosenthal). Preprocess Document body to unwrap w:sdt elements (Jesse Rosenthal, # 4190). Plain writer: Don't linkify table of contents. RST writer: Fix anchors for headers (# 4188). We were missing an _. PowerPoint writer (Jesse Rosenthal) : Treat lists inside BlockQuotes as lists. We don't yet produce incremental lists in PowerPoint, but we should at least treat lists inside BlockQuotes as lists, for compatibility with other slide formats. Add ability to force size. This replaces the more specific blockQuote runProp, which only affected the size of blockquotes. We can use this for notes, etc. Implement notes. This currently prints all notes on a final slide. Note that at the moment, there is a danger of text overflowing the note slide, since there is no logic for adding further slides. Implement basic definition list functionality to PowerPoint writer. Don't look for default template file for Powerpoint (# 4181). Add pptx to isTextFormat list. This is used to check standalone and not <b>writing</b> to the <b>terminal.</b> Obey slide level option (Jesse Rosenthal). Introduce tests. Docx writer: Ensure that distArchive is the one that comes with pandoc (# 4182). Previously a reference. docx in /. pandoc (or the user data dir) would be used instead, and this could cause problems because a user-modified docx sometimes lacks vital sections that we count on the distArchive to supply. Org writer: Do not wrap "-" to avoid accidental bullet lists (Alexander Krotov). Don't allow fn refs to wrap to beginning of line (# 4171, with help from Alexander Krotov). Otherwise they can be interpreted as footnote definitions. Muse writer (Alexander Krotov) : Don't wrap note references to the next line (# 4172). HTML writer: Use br elements in line blocks instead of relying on CSS (# 4162). HTML-based templates have had the custom CSS for div. line-block removed. Those maintaining custom templates will want to remove this too. We still enclose line blocks in a div with class line-block. LaTeX writer: Use r with babel (# 4161). This avoids a clash with a deprecated command defined in Babel. Allow fragile=singleslide attribute in beamer slides (# 4169). Use after in headerless tables (# 4207). FB 2 writer: Add cover image specified by cover-image meta (Alexander Krotov, # 4195). JATS writer (Hamish Mackenzie) : Support writing and elements with and inside them by using Divs with class set to one of fig, table-wrap or caption (Hamish Mackenzie). The title is included as a Heading so the constraint on where Heading can occur is also relaxed. Leave out empty alt attributes on links. Deduplicate image mime type code. Make optional in and (# 4178). Self closing tags for empty xref (# 4187). Improve support for code language. Custom writer: Use init file to setup Lua interpreter (Albert Krewinkel). The same init file (data/init) that is used to setup the Lua interpreter for Lua filters is also used to setup the interpreter of custom writers. lua. Define instances for newtype wrapper (Albert Krewinkel). The custom writer used its own ToLuaStack instance definitions, which made it difficult to share code with Lua filters, as this could result in conflicting instances. A Stringify wrapper is introduced to avoid this problem. Added tests for custom writer. Fixed definition lists and tables in data/sample. lua. Fixed regression: when target is PDF, writer extensions were being ignored. So, for example, pandoc -t latex-smart -o file. pdf did not work properly. Lua modules (Albert Krewinkel) : Add pandoc. utils module, to hold utility functions. Create a Haskell module Text. Pandoc. Lua. Module. Pandoc to define the pandoc lua module. Make a Haskell module for each Lua module. Move definitions for the pandoc. mediabag modules to a separate Haskell module. Move sha 1 from the main pandoc module to pandoc. utils. Add function pandoc. utils. hierarchicalize (convert list of Pandoc blocks into (hierarchical) list of Elements). Add function pandoc. utils. normalize_date (parses a date and converts it (if possible) to "YYYY-MM-DD" format). Add function pandoc. utils. to_roman_numeral (allows conversion of numbers below 4000 into roman numerals). Add function pandoc. utils. stringify (converts any AST element to a string with formatting removed). data/init. lua: load pandoc. utils by default Turn pipe, read into full Haskell functions. The pipe and read utility functions are converted from hybrid lua/haskell functions into full Haskell functions. This avoids the need for intermediate _pipe/_read helper functions, which have dropped. pandoc. lua: re-add missing MetaMap function. This was a bug introduced in version 2. 0. 4. Text. Pandoc. Class: Add insertInFileTree [API change]. This gives a pure way to insert an ersatz file into a FileTree. In addition, we normalize paths both on insertion and on lookup. Text. Pandoc. Shared: export blocksToInlines' (API change, Maura Bieg). Text. Pandoc. MIME: Add opus to MIME type table as audio/ogg (# 4198). Text. Pandoc. Extensions: Alphabetical order constructors for Extension. This makes them appear in order in [...] list-extensions. Allow lenient decoding of latex error logs, which are not always properly UTF 8 -encoded (# 4200). Update latex template to work with recent versions of beamer. The old template produced numbered sections with some recent versions of beamer. Thanks to Thomas Hodgson. Updated reference. docx (# 4175). Instead of just "Hello, world", the document now contains exemplars of most of the styles that have an effect on pandoc documents. This makes it easier to see the effect of style changes. Removed default. theme data file (# 4096). It is no longer needed now that we have [...] print-highlight-style. Added stack. lts 9. yaml for building with lts 9 and ghc 8. 0. 2. We still need this for the alpine static linux build, since we don't have ghc 8. 2. 2 for that yet. Removed stack. pkg. yaml. We only really need stack. yaml; we can put flag settings for pandoc-citeproc there. Makefile: Add 'trypandoc' and 'pandoc-templates' targets to make releases easier. MANUAL. txt: Add note on what formats have +smart by default. Use native syntax for custom-style (# 4174, Mauro Bieg). Introduce dedicated Extensions section, since some extensions affect formats other than markdown (Mauro Bieg, # 4204). Clarify default html output for [...] section-divs (Richard Edwards). filters. md: say that Text. Pandoc. JSON comes form pandoc-types. Closes jgm/pandoc-website# 16. epub. md: Delete removed -S option from command (# 4151, Georger Araújo) ...|$|R

