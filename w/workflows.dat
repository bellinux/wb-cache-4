10000|10000|Public
25|$|PowerWF - Provides {{a visual}} {{representation}} of VMware VIX scripts, converting them into <b>workflows,</b> or converting <b>workflows</b> into Powershell cmdlets and modules. VIX is VMware's addition to Microsoft's Powershell for automation of the VMware Player.|$|E
25|$|<b>Workflows</b> {{comprise}} 'activities'. Developers {{can write}} their own domain-specific activities and then use them in <b>workflows.</b> Windows Workflow Foundation also provides a set of general-purpose 'activities' that cover several control flow constructs. It also includes a visual workflow designer. The workflow designer can be used within Visual Studio 2005, including integration with the Visual Studio project system and debugger.|$|E
25|$|<b>Workflows</b> are {{constructed}} by assigning outputs of component instances to inputs of following components.|$|E
40|$|Tato diplomová práce je věnována nástroji pro automatizaci <b>workflow</b> procesů. Obecně popisuje co to je <b>workflow.</b> Dále stručně popisuje dostupné nástroje jako MS BizTalk Server, SAP NetWeaver, IBM WebSphere, ORACLE BPEL. Největší pozornosti je věnováno nástroji Windows <b>Workflow</b> Foundation. Tomuto nástroji jsou detailně popsány jeho části <b>workflow</b> runtime, {{instance}} <b>workflow</b> a <b>workflow</b> aktivity. Součásti práce je vytvoření vzorové aplikace, která využívá možnosti Windows <b>Workflow</b> Foundation. The {{the thesis}} deals with tools for <b>workflow</b> processes automation. It describes in general what <b>workflow</b> is. It also briefly describes {{tools such as}} MS BizTalk Server, SAP NetWeaver, IBM WebSphere, ORACLE BPEL. The main part deals with Windows <b>Workflow</b> Foundation. This tool is decribed in detail together with its parts <b>workflow</b> runtime, <b>workflow</b> instances and <b>workflow</b> activities. One part of the thesis is a application, which uses all the possibilities of Windows <b>Workflow</b> Foundation. ...|$|R
40|$|Abstract Graphical <b>workflow</b> {{modeling}} tools, such as UML and DAG, {{can facilitate}} users to express <b>workflow</b> process logic, but lack of abilities {{to carry out}} simula-tion and correctness checking. In this paper, based on Petri net, we propose a service composition oriented Grid <b>workflow</b> model and its related six elementary <b>workflow</b> patterns: sequence, condition, iteration, concurrency, synchronization, and trigger-ing. In addition, we present our Grid <b>workflow</b> analysis approaches on three aspects: <b>workflow</b> reachability verification, <b>workflow</b> deadlock verification, and <b>workflow</b> op-timization. The experimental results show that our <b>workflow</b> verification and opti-mization mechanisms are feasible and efficient...|$|R
40|$|This paper {{highlights}} {{the need for}} adaptive <b>workflow</b> management, classifies various types of <b>workflow</b> adaptation, and discusses potential mechanisms for achieving adaptive <b>workflow</b> management. Our current efforts on adaptive <b>workflow</b> research are presented with emphasis laid on human involvement. The developments are based on dynamic composition of <b>workflow</b> resources, including <b>workflow</b> models, {{as well as a}} strong association between exception handling and adaptive <b>workflow</b> management...|$|R
25|$|Enhanced debugging: The {{debugger}} now supports debugging <b>workflows,</b> remote script {{execution and}} preserving debugging sessions across PowerShell session reconnections.|$|E
25|$|The {{proposed}} improvement {{could be}} in human-to-human, human-to-system or system-to-system <b>workflows,</b> and might target regulatory, market, or competitive challenges faced by the businesses.|$|E
25|$|Cognitive {{automation}} is {{an emerging}} genus of automation enabled by cognitive computing. Its primary {{concern is the}} automation of clerical tasks and <b>workflows</b> that consist of structuring unstructured data.|$|E
40|$|<b>Workflow</b> {{management}} systems should efficiently manage <b>workflow</b> constraints such as time, resource, and cost during <b>workflow</b> executions. Especially, <b>workflow</b> time management {{is important in}} timely scheduling of <b>workflow</b> process execution, avoiding deadline violations, and improving the <b>workflow</b> throughput. Though {{there have been some}} studies on the dynamic deadline management in a <b>workflow,</b> the importance of the static deadline management has not been much addressed in the past. We first describe our <b>workflow</b> model considered in this paper. Then, we propose a static deadline allocation method that can facilitate an efficient <b>workflow</b> processing. The proposed method can achieve high <b>workflow</b> throughput by analyzing the interrelated <b>workflow</b> components. We also present various experimental results that show the usefulness and efficiency of the method...|$|R
30|$|<b>Workflow</b> {{improvement}} {{and dealing with}} <b>workflow</b> complexity relate to different streams of research. Related work can be grouped under three major topics: <b>workflow</b> common feature extraction, <b>workflow</b> similarity assessment, and <b>workflow</b> improvement. This section first reviews the works about extraction of common features. Then, since our approach to <b>workflow</b> improvement is highly related to similarity assessment it reviews this topic. Finally a review about <b>workflow</b> improvement is done.|$|R
40|$|The {{the thesis}} deals with tools for <b>workflow</b> {{processes}} automation. It describes in general what <b>workflow</b> is. It also briefly describes {{tools such as}} MS BizTalk Server, SAP NetWeaver, IBM WebSphere, ORACLE BPEL. The main part deals with Windows <b>Workflow</b> Foundation. This tool is decribed in detail together with its parts <b>workflow</b> runtime, <b>workflow</b> instances and <b>workflow</b> activities. One part of the thesis is a application, which uses all the possibilities of Windows <b>Workflow</b> Foundation...|$|R
25|$|Pathak, J., Caragea, D., and Honavar, V. Ontology-Extended Component-Based Workflows: A Framework for Constructing Complex <b>Workflows</b> from Semantically Heterogeneous Software Components. VLDB-04 Workshop on Semantic Web and Databases. Springer-Verlag Lecture Notes in Computer Science., Toronto, Springer-Verlag. Vol. 3372. pp.41–56, 2004.|$|E
25|$|Business Process Re-engineering (launched by Michael Hammer in 1993): a {{business}} management strategy {{focusing on the}} analysis and design of <b>workflows</b> and business processes within an organization. BPR seeks to help companies radically restructure their organizations {{by focusing on the}} ground-up design of their business processes.|$|E
25|$|The {{sustainment}} model implements life-cycle activities including logistics delays {{based on}} real or proposed replacement part reliabilities, quantities, and locations, along with <b>workflows</b> and processes {{to support a}} performance-based sustainment (PBS) solution for Electronic Warfare Systems. Using SysML and DoDAF, the interactions between Crane employees, automated tools, the Electronic Warfare systems, and data to accomplish PBS are simulated.|$|E
40|$|<b>Workflow</b> {{systems have}} long been of {{interest}} to computer science researchers due to their practical relevance. Supporting delegation mechanisms in <b>workflow</b> systems is receiving increasing research interest. In this paper, we conduct a comprehensive study of user delegation operations in computerized <b>workflow</b> systems. In a <b>workflow</b> system, the semantics of a delegation operation are largely based on three factors: the underlying <b>workflow</b> execution model, task type and delegation type. We describe three different <b>workflow</b> execution models and {{examine the effect of}} various delegation operations in each <b>workflow</b> execution model. We then extend our <b>workflow</b> execution models to examine the effect of various delegation operations in different role-based <b>workflow</b> execution models...|$|R
40|$|Abstract. As <b>workflow</b> {{technology}} {{evolves into}} the grid domain, <b>workflow</b> process {{becomes more and}} more complex, raising a great challenge both to <b>workflow</b> modeling and <b>workflow</b> execution. In response to the challenge, this paper puts forward a goal-driven <b>workflow</b> framework. The framework first proposes process pattern as an effective way for procedural knowledge representation and then deploys a pattern-based planning algorithm to (semi-) automatically generate <b>workflow</b> on the fly according to the goal specified by users and the running context. Such a goal-driven <b>workflow</b> management paradigm could not only enhance the flexibility and adaptability of <b>workflow</b> system but also ease the heavy burden of <b>workflow</b> definition...|$|R
40|$|<b>Workflow</b> Synchronizer was {{developed}} {{in order to support}} <b>Workflow</b> Management in openXdata which is an open source solution for surveys and studies. The <b>Workflow</b> Synchronizer takes an event log and matches it with the planned activities and sequences in a predefined <b>workflow.</b> It provides the user with what the next tasks are as well as possible errors in the event log. The <b>Workflow</b> Synchronizer is a custom-made <b>workflow</b> engine for YAWL <b>workflow</b> documents. The mechanism itself is generic enough to be used in any <b>Workflow</b> Management Systems. The <b>Workflow</b> Synchronizer makes it possible to automate the synchronization processes and better control the execution of activities. The <b>Workflow</b> Synchronizer was tested using a set of best practice <b>workflow</b> patterns. Black-box testing was used, and the results for each test run were checked to make sure the results were correct. The results showed the <b>Workflow</b> Synchronizer is capable of finding undone tasks and identifying errors in the event log...|$|R
25|$|SQL Server Integration Services (SSIS) {{provides}} ETL capabilities for SQL Server {{for data}} import, data integration and data warehousing needs. Integration Services includes GUI tools to build <b>workflows</b> such as extracting data from various sources, querying data, transforming data—including aggregation, de-duplication, de-/normalization and merging of data—and then exporting the transformed data into destination databases or files.|$|E
25|$|PDF was {{developed}} in the early 1990s as a way to share computer documents, including text formatting and inline images. It was among a number of competing formats such as DjVu, Envoy, Common Ground Digital Paper, Farallon Replica and even Adobe's own PostScript format. In those early years before the rise of the World Wide Web and HTML documents, PDF was popular mainly in desktop publishing <b>workflows.</b>|$|E
25|$|Microsoft Office Project Portfolio Server 2007 allows {{creation}} of a project portfolio, including <b>workflows,</b> hosted centrally, so that the information is available throughout the enterprise, even from a browser. It also aids in centralized data aggregation regarding the project planning and execution, and in visualizing and analyzing the data to optimize the project plan. It can also support multiple portfolios per project, to track different aspects of it. It also includes reporting tools to create consolidated reports out of the project data.|$|E
40|$|Contemporary <b>workflow</b> {{management}} systems {{are driven by}} explicit process models, i. e., a completely specified <b>workflow</b> design is {{required in order to}} enact a given <b>workflow</b> process. Creating a <b>workflow</b> design is a complicated time-consuming process and typically there are discrepancies between the actual <b>workflow</b> processes and the processes as perceived by the management. TherefS 3 A we have developed techniques fi discovering <b>workflow</b> models. Starting pointfS such techniques is a so-called "workflow log" containinginfg 3 SfiHfl" about the <b>workflow</b> process as it is actually being executed. We present a new algorithm to extract a process modelf 3 q such a log and represent it in terms of a Petri net. However, we will also demonstrate that {{it is not possible to}} discover arbitrary <b>workflow</b> processes. In this paper we explore a classof <b>workflow</b> processes that can be discovered. We show that the #-algorithm can successfqFS mine any <b>workflow</b> represented by a so-called SWF-net. Key words: <b>Workflow</b> mining, <b>Workflow</b> management, Data mining, Petri nets. ...|$|R
40|$|This paper 1 {{proposes a}} <b>workflow</b> {{intelligence}} and qual-ity improvement framework maximizing the <b>workflow</b> trace-ability and rediscoverability {{by analyzing the}} total se-quences of the control-path perspective of a <b>workflow</b> model and by rediscovering their runtime enactment history from the <b>workflow</b> log information. The framework needs two kinds of algorithms- One is for generating the total se-quences of the control-paths from a <b>workflow</b> model, {{and the other is}} for rediscovering the runtime enactment his-tory of each control-path out of the total sequences from the corresponding <b>workflow’s</b> execution logs. Eventually, these rediscovered knowledge and history of a <b>workflow</b> model make up a control-path oriented intelligence of the <b>workflow</b> model, which ought to be an essential ingredi-ent for improving the quality of the <b>workflow</b> model. Based upon the <b>workflow</b> intelligence, it is possible for the work-flow model to be gradually refined and finally maximize its quality by repeatedly redesigning, reengineering and/or refining during its whole life-long time period. And, this paper describes not only propose of control-path oriented mining algorithm but also implementation of control-path oriented <b>workflow</b> intelligence analysis and mining sys-tem. Keyword. <b>Workflow</b> intelligence and quality, <b>Workflow</b> Control-Path Analysis, <b>Workflow</b> Miminig System 1...|$|R
40|$|<b>Workflow</b> graphs {{represent}} the main control-flow constructs of industrial process modeling languages such as BPMN, EPC and UML Activity diagrams, whereas free-choice <b>workflow</b> nets {{is a well}} understood class of Petri nets that possesses many efficient analysis techniques. In this paper, we provide new results on the translation between <b>workflow</b> graphs and free-choice <b>workflow</b> nets. We distinguish <b>workflow</b> graphs with and without inclusive Or-logic. For <b>workflow</b> graphs without inclusive logic, we show that <b>workflow</b> graphs and free-choice <b>workflow</b> nets are essentially the same thing. More precisely, each <b>workflow</b> graph and each free-choice <b>workflow</b> net can be brought into an equivalent normal form such that the normal forms are, in some sense, isomorphic. This result {{gives rise to a}} translation from arbitrary free-choice <b>workflow</b> nets to <b>workflow</b> graphs. For <b>workflow</b> graphs with inclusive logic, we provide various techniques to replace inclusive Or-joins by subgraphs without inclusive logic, thus giving rise to translations from <b>workflow</b> graphs to free-choice nets. Additionally, we characterize the applicability of these replacements. Finally, we also display a simple <b>workflow</b> graph with an inclusive Or-join, which, in some sense, cannot be replaced. This shows a limitation of translating inclusive logic into free-choice nets and illustrates also a difficulty of translating inclusive logic into general Petri nets. Keywords: <b>Workflow</b> graphs; Petri nets; Free choice; Inclusive OR-joi...|$|R
25|$|For a long time, Haskell and its {{derivatives}} {{have been}} the only major users of monads in programming. There also exist formulations in Scheme, Perl, Python, Racket, Clojure and Scala, and monads have been an option in the design of a new ML standard. Recently F# has included a feature called computation expressions or <b>workflows,</b> which are an attempt to introduce monadic constructs within a syntax more palatable to those programmers whose only prior experience has been with imperative languages.|$|E
25|$|CPOE {{systems can}} take years to install and configure. Despite ample {{evidence}} of the potential to reduce medication errors, adoption of this technology by doctors and hospitals in the United States has been slowed by resistance to changes in physician's practice patterns, costs and training time involved, and concern with interoperability and compliance with future national standards. According {{to a study by}} RAND Health, the US healthcare system could save more than 81 billion dollars annually, reduce adverse medical events and improve the quality of care if it were to widely adopt CPOE and other health information technology. As more hospitals become aware of the financial benefits of CPOE, and more physicians with a familiarity with computers enter practice, increased use of CPOE is predicted. Several high-profile failures of CPOE implementation have occurred, so a major effort must be focused on change management, including restructuring <b>workflows,</b> dealing with physicians' resistance to change, and creating a collaborative environment.|$|E
25|$|The {{middle ground}} between the craft {{production}} of skilled workers and full automation is occupied by systems of extensive mechanization and partial automation operated by semiskilled and unskilled workers. Such systems depend on algorithmic <b>workflows</b> and knowledge transfer, which require substantial engineering to succeed. Although Taylor's intention for scientific management was simply to optimize work methods, the process engineering that he pioneered also tends to build the skill into the equipment and processes, removing most need for skill in the workers. Such engineering has governed most industrial engineering since then. It is also the essence of successful offshoring. The common theme in all these cases is that businesses engineer {{their way out of}} their need for large concentrations of skilled workers, and the high-wage environments that sustain them. This creates competitive advantage on the local level of individual firms, although the pressure it exerts systemically on employment and employability is an externality.|$|E
40|$|Component-based {{development}} is a promising way to promote the productivity of large <b>workflow</b> systems development. This paper proposes a component-based <b>workflow</b> systems development approach by investigating the following notions, mechanisms, and methods: <b>workflow</b> component, <b>workflow</b> component composition, reuse [...] association relationship between <b>workflow</b> components, and <b>workflow</b> component repository. The proposed approach {{is supported by a}} set of development strategies and a development platform. Through application and comparison, we show the advantages of the component-based <b>workflow</b> systems and the effectiveness of the proposed approach...|$|R
40|$|Despite {{the large}} number of {{commercial}} <b>workflow</b> systems, object-oriented developers implement their business processes with home-made <b>workflow</b> solutions. Current <b>workflow</b> architectures are based on requirements and assumptions that don't hold in the context of object-oriented software development. Microworkflow, a new <b>workflow</b> architecture, bridges the gap between the type of functionality provided by existing <b>workflow</b> systems and the type of <b>workflow</b> functionality required by developers. Micro-workflow provides a better solution when the focus is on customizing the <b>workflow</b> features and integrating with other systems...|$|R
40|$|The {{importance}} of data in business processes has increased progressively {{in recent years}} motivated by the need for executable <b>workflow</b> models according to the process control rules. In this paper we describe an approach for datadriven <b>workflow</b> process modeling. Based on structured tokens Petri Net, the resulting <b>workflow</b> model can represent both control flow and shared data in the <b>workflow</b> process. Besides, to prove our modeling approach, we implement the Opus <b>workflow</b> management system. It provides a graphical editor to model a customize <b>workflow</b> process, and a <b>workflow</b> engine to automatically execute the modeled <b>workflow</b> process...|$|R
2500|$|Support for {{creating}} <b>workflows</b> and data reports, from external data sources ...|$|E
2500|$|Windows Workflow Foundation is a Microsoft {{technology}} for defining, executing and managing <b>workflows.</b> This technology {{is part of}} [...]NET Framework 3.0 and therefore targeted primarily for the Windows Vista operating system. The Windows Workflow Foundation runtime components provide common facilities for running and managing the <b>workflows</b> and can be hosted in any CLR application domain.|$|E
2500|$|C-terminomics {{has always}} been {{complicated}} due to the chemical nature of its targets. Carboxyl groups are less reactive than primary amines, making C-terminomic techniques more complex than established N-terminomic approaches. However, adapted TAILS and COFRADIC <b>workflows</b> have been developed specifically to study the C-termini of proteins. Recently, the Overall Lab tackled another difficulty of C-terminomics, using endopeptidase LysargiNase™ [...] to generate C-termini carrying N-terminal lysine or arginine residues. Previously, C-termini lacked basic residues after endopeptidase digestion and could be missed in LC-MS/MS <b>workflows.</b>|$|E
40|$|URL] audienceCollaborative {{information}} systems {{are becoming more}} and more complex, involving numerous interacting business objects within considerable processes. Analysing the interaction structure of those complex systems will enable them to be well understood and controlled. The work described in this paper is a contribution to these problems for <b>workflow</b> based process applications. In fact, we discover <b>workflow</b> patterns from traces of <b>workflow</b> events based on a <b>workflow</b> mining technique. <b>Workflow</b> mining proposes techniques to acquire a <b>workflow</b> model from a <b>workflow</b> log. Mining of <b>workflow</b> patterns is done by a statistical analysis of log-based event. Our approach is characterised by a “local” <b>workflow</b> patterns discovery that allows to cover partial results and a dynamic technique dealing with concurrency...|$|R
30|$|<b>Workflow</b> schema layer: Definitions of <b>workflow</b> schemata to be {{executed}} by <b>workflow</b> engines, defined in a DSL.|$|R
50|$|Joget <b>Workflow</b> is an {{open source}} web-based <b>workflow</b> {{software}} to develop <b>workflow</b> and business process management applications.|$|R
