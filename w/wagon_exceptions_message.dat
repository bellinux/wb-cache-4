0|39|Public
40|$|Abstract- Beginning programmers {{often have}} {{difficulty}} interpreting exceptions {{and using the}} associated messages to pinpoint the cause of incorrect program behavior. When an interactive development environment (IDE) presents a novice developer with a runtime time exception, it generally provides with a stack trace and a limited, cryptic <b>exception</b> <b>message</b> that is hard for a beginner to interpret. This paper describes ExceptionDoctor, a Java utility that solves this problem. ExceptionDoctor intercepts exceptions thrown by student code and improves the embedded <b>exception</b> <b>messages</b> to provide levelappropriate descriptions. ExceptionDoctor also examines the source code that produced the exception (if available) in order to describe the immediate cause of the exception in student-level terms...|$|R
5000|$|Generally speaking, it is {{preferable}} to throw intelligible <b>exception</b> <b>messages</b> that enforce part of your API contract and guide the client programmer instead of returning values that a client programmer {{is likely to be}} unprepared for and hence minimize their complaints and increase robustness and security of your software.|$|R
40|$|This paper {{analyses}} atomic notions in UML {{which are}} fundamental for {{the understanding of}} dynamic aspects. The notions considered are: Action, Event, <b>Exception,</b> <b>Message,</b> Method, Signal, Stimulus, Operation, and Reception. We surf through the UML metamodel by combining the different metamodel class diagrams, where these notions are defined, into a single class diagram. Thereby we point out the intent, {{similarities and differences between}} these notions. Thus before doing a formalization, we try to make the concepts a bit clearer than they appear in the UML Semantics [OMG 99]. 1 Motivation !!UML?? 2000 Workshop Dynamic Behaviour in UML Models, Technical Report, Technical University of Munich, G. Reggio, A. Knapp, B. Rumpe, B. Selic, R. Wieringa (Eds.), 2000. The class diagram in Fig. 1 combines aspects of six different UML metamodel class diagrams and concentrates on the following notions: Action, Event, <b>Exception,</b> <b>Message,</b> Method, Signal, Stimulus, Operation, and Reception. I [...] ...|$|R
5000|$|For example, {{a method}} to play a movie file might handle {{exceptions}} in reading the file by re-throwing them inside an exception of movie playing. The user interface doesn't need {{to know whether the}} error occurred during reading chunk of bytes or calling eof (...) [...] It needs only the <b>exception</b> <b>message</b> extracted from cause. The user interface layer will have its own set of exceptions. The one interested in cause can see its stack trace during debugging or in proper log.|$|R
40|$|This paper {{proposes a}} global escape {{mechanism}} which can handle unexpected or unwanted conditions changing the default execution of distributed communicational flows, preserving compatibility of the multiparty conversations. Our escape is realised by {{a collection of}} asynchronous local exceptions which can be thrown at any stage of the communication and to any subsets of participants in a multiparty session. This flexibility enables to model complex exceptions such as criss-crossing global interactions and fault tolerance for distributed cooperating threads. Guided by multiparty session types, our semantics automatically provides an efficient termination algorithm for global escapes with low complexity of <b>exception</b> <b>messages.</b> Digital Object Identifier 10. 4230 /LIPIcs. FSTTCS. 2010. 338...|$|R
25|$|Some houses had {{outbuildings}} {{which are}} also included as contributing properties. Most are stables or carriage houses later converted to garages. These were usually utilitarian gabled sheds with a bay for a single horse and <b>wagon</b> (the <b>exception</b> being those that served the upscale homes of Franklin Square). A few later ones were built for automobiles. Their main impact on the district {{was the creation of}} the alleys in mid-block, later expanded into streets in their own right.|$|R
40|$|Version 0. 4. 1 (2016 - 05 - 01) New Features New TensorFlow {{estimator}} for Linear Regression (tf_regressor. TfLinearRegression) New k-means clustering estimator (cluster. Kmeans) New TensorFlow k-means clustering estimator (tf_cluster. Kmeans) Changes Due to refactoring of the estimator classes, the init_weights parameter of the fit methods was globally renamed to init_params Overall performance improvements of estimators due to code clean-up and refactoring Added several {{additional checks}} for correct array types and more meaningful <b>exception</b> <b>messages</b> Added optional dropout to the tf_classifier. TfMultiLayerPerceptron classifier for regularization Added an optional decay parameter to the tf_classifier. TfMultiLayerPerceptron classifier for adaptive learning via an exponential decay {{of the learning}} rate eta Replaced old NeuralNetMLP by more streamlined MultiLayerPerceptron (classifier. MultiLayerPerceptron); now also with softmax in the output layer and categorical cross-entropy loss. Unified init_params parameter for fit functions to continue training where the algorithm left off (if supported...|$|R
40|$|Fine Grained Access Control (FGAC) {{provides}} a row-level security mechanism that's built-in to the Oracle database engine. FGAC allows to granularly specifying the exact information elements that each user may access. Several proposals {{have been made}} for fine grained access control which has resulted in information leakage and redundancy of a query. So we have proposed a query evaluation algorithm which supports fine grained access control. There are several models for fine grained access control but major of them follow a view replacement model in which these two problems occur. First is the redundancy of data as data is masked from one level to other second is leakage of information through the error and <b>exception</b> <b>message.</b> In our paper we have proposed our own algorithm for the disclosure policy of data residing in the database that avoids the leakage of information and controls the redundancy of data...|$|R
50|$|With {{only a few}} exceptions, neither I²C nor SMBus define message {{semantics}}, such as {{the meaning}} of data bytes in messages. Message semantics are otherwise product-specific. Those <b>exceptions</b> include <b>messages</b> addressed to the I²C general call address (0x00) or to the SMBus Alert Response Address; and messages involved in the SMBus Address Resolution Protocol (ARP) for dynamic address allocation and management.|$|R
50|$|In 1974, the LAS {{commissioned}} a computer-aided despatch system that remained unused for 13 years because union members refused to operate it. A replacement system failed acceptance tests in 1990 and a further replacement system {{was designed and}} ordered. On 26 October 1992 the LAS started {{to use the new}} computer-assisted dispatch (CAD) system, known as LASCAD. Poorly designed and implemented, its introduction led to significant delays in the assigning of ambulances, with anecdotal reports of 11-hour waits. A subsequent enquiry found no evidence to support union claims that up to 30 people may have {{died as a result of}} the crash. The crash coincided with hundreds of control room <b>exceptions</b> <b>messages</b> related to alerts that crews responding to emergencies had not reported mobile, and the ambulance had not moved 50 metres within 3 minutes of despatch. The then-chief executive, John Wilby, resigned shortly afterwards. This failure is often cited in case studies of poor engineering management.|$|R
5000|$|In many {{dynamically}} typed languages such as Smalltalk, any {{class that}} sends a particular method to this, but doesn't implement that method, {{can be considered}} abstract. (However, in many such languages, like Objective-C, the error is not detected until the class is used, and the message returns results in an <b>exception</b> error <b>message</b> such as [...] "Does not recognize selector: xxx" [...] as [...] is invoked upon detection of an unimplemented method).|$|R
50|$|Enterprise {{designer}}: Enterprise designer is an Integrated {{development environment}} to browse the repository, create business processes, collaborations, connectivity maps and deployment profiles. Business processes are defined with BPEL. BPEL is not tied specifically to web services, rather it defines {{the execution of}} activities, inputs/outputs and possible <b>exceptions</b> in the <b>message</b> flow.|$|R
50|$|Utilization of SRTP or SRTCP is {{optional}} to {{the utilization of}} RTP or RTCP; but even if SRTP/SRTCP are used, all provided features (such as encryption and authentication) are optional and can be separately enabled or disabled. The only <b>exception</b> is the <b>message</b> authentication feature which is indispensably required when using SRTCP.|$|R
40|$|International audienceExamining {{interactions}} between Web services is {{of paramount importance}} to the success of service composition. We have previously proposed a 2 -layer framework for modeling, analyzing, and managing these interactions. Interactions are assigned to two layers: business logic and support. The business-logic layer comprises control and transactional flows, whereas the support layer comprises <b>exception</b> and <b>message</b> flows. This paper continues this research effort by focusing on the synchronization of the four flows at run-time. In particular, we discuss the synchronization mechanisms integrated into the 2 -layer framework and report our preliminary experiments on the implementation...|$|R
30|$|Fault Containment. With the <b>exception</b> of late <b>message</b> {{failures}} the router contains detected faults in {{the value}} domain {{as well as in}} the temporal domain. A violation of the maximum interarrival time can only be detected and reported. Thus the late messages will be delivered, while all other messages violating their specified properties are discarded at their source CIS.|$|R
40|$|Poems reprinted {{from various}} periodicals. "'The pilgrims of hope' {{appeared}} in the Commonweal between March 1885 and July 1886 [...] . 'Chants for socialists' [...] . published by the Socialist league in 1885, is here printed entire (with the <b>exception</b> of 'The <b>message</b> of the March wind,' pp. 3 - 6) " [...] Foreword. Mode of access: Internet...|$|R
50|$|It was {{originally}} only available {{with the smallest}} 1.7-litre inline-four. All Mark II engines are of an overhead camshaft design, with the sporting GSS even featuring a twin-cam design. The X10 through 13 are sedans, 16- and 17-series numbers were reserved for vans, 20 through 23 for coupés, and 26 through 29 for <b>wagons.</b> The only <b>exception</b> to this scheme is the 18R-U-engined RX15, introduced in June 1976, which received the same chassis code whether fitted in the hardtop or the sedan.|$|R
40|$|Copyright 2007 IEEE – All Rights ReservedThis paper {{discusses}} {{the use of}} a framework for analyzing the interactions that arise between Web services engaged in composition. For the sake of achieving better coordination and avoiding conflicts, this framework assigns interactions to two layers known as business logic and support. The business-logic layer comprises control and transactional flows, whereas the support layer comprises <b>exception</b> and <b>message</b> flows. Additional features of this framework include the use of context to oversee interaction progress between Web services and a set of policies to constrain the behavior of these Web services. Maamar, Z., Benslimane, D. and Sheng, Q. Z...|$|R
40|$|Examining {{interactions}} between Web services is {{of paramount importance}} to the success of service composition. We have previously proposed a 2 -layer framework for modeling, analyzing, and managing these interactions. Interactions are assigned to two layers: business logic and support. The business-logic layer comprises control and transactional flows, whereas the support layer comprises <b>exception</b> and <b>message</b> flows. This paper continues this research effort by focusing on the synchronization of the four flows at run-time. In particular, we discuss the synchronization mechanisms integrated into the 2 -layer framework and report our preliminary experiments on the implementation. Zakaria Maamar, Quan Z. Sheng, Hamdi Yahyaoui, Khouloud Boukadi, Xitong L...|$|R
40|$|The {{procedural}} behavior, {{the only}} one usually available in object oriented languages, is necessary {{in the construction of}} programs. However, other well-known behavioral semantics in the conventional programming world have no counterparts in object orientation. In this paper we propose the inclusion, in classes, of operations to handle asynchronous <b>messages,</b> <b>exceptions,</b> and the production of sequences of values for loop control objects, offering examples of their uses...|$|R
40|$|Regression test {{selection}} {{techniques for}} embedded programs have scarcely {{been reported in}} the literature. In this paper, we propose a model-based regression test selection technique for embedded programs. Our proposed model, in addition to capturing the data and control dependence aspects, also represents several additional program features that are important for regression test case selection of embedded programs. These features include control flow, <b>exception</b> handling, <b>message</b> paths, task priorities, state information and object relations. We select a regression test suite based on slicing our proposed graph model. We also propose a genetic algorithmbased technique to select an optimal subset of test cases from the set of regression test cases selected after slicing our proposed model...|$|R
40|$|This paper {{discusses}} how {{interactions between}} Web services engaged in composition scenarios are analyzed, modeled, and finally managed. Interactions are primarily {{considered as a}} means for conveying messages of different natures between separate components, for instance, Web services. To achieve better coordination and hence, avoid conflicts between Web services, in this paper interactions are handled by two layers known as business logic and support. The business-logic layer is the host of two flows known as control and transactional, whereas the support layer is the host of two additional flows namely <b>exception</b> and <b>message.</b> On top of the proposed layers and flows, context and policies are used to oversee the progress of interactions between Web services and to constrain the behavior of these Web services, respectively. Zakaria Maamar, Quan Z. Sheng, Djamal Benslimane, Hamdi Yahyaou...|$|R
40|$|Class and Triangular Concrete Class {{abstract}} class distribution f protected static Random randomSequencer = new Random(); public double rangeLenght; // min a max {{of the distribution}} on the range [0, 1] public abstract double nextItem(); public int toInt(double d) f // distributes {{the number on the}} range [- 499, 500] return (int) (d/rangeLenght) 499; g; g class triangular extends distribution f triangular() frangeLenght=. 0015;g; public double nextItem() f return 1. 5 *Math. sqrt(randomSequencer. nextDouble()); g; g Listing 5 Experiment Abstract Class and Classic Hold Concrete Class class classicHoldExperiment extends experiment f classicHoldExperiment(distribution d, int sTS, int hM, int dim) throws Exception f super(d, sTS, hM, dim); g; public long workExperiment() throws <b>Exception</b> f <b>message</b> m; long start = System. currentTimeMillis(); for(int i=startTS;i<startTS+howMany;i++) f m = new message(i+distr. toInt(distr. nextItem())); lq = lq. enqueue(m); lq. top(); g; lq = nu [...] ...|$|R
5000|$|The Cutlass {{and other}} GM {{intermediates}} were completely restyled for 1968 with wheelbases shortened to 112 in for 2-door coupe models and lengthened one inch to 116 in for four-door sedans and station <b>wagons</b> (with the <b>exception</b> of the glass-roof Vista Cruiser station wagon, which rode {{on an even}} longer 121 in wheelbase). The Cutlass Supreme, now the top-line Olds intermediate series, was pared down to two- and four-door hardtop models with the pillared sedans and coupes dropped and the convertible moved to the lower-priced Cutlass [...] "S" [...] line, upon which the 4-4-2 muscle car was now based. Also the standard Rocket V8 was enlarged from 330 to 350 cubic inches with [...]|$|R
30|$|With {{respect to}} the first {{research}} question, regarding what communication strategies are used by Chinese graduate students majoring in EE and ED, we first conducted a Wilcoxon Signed-Ranks Test to determine any statistical difference between the OCSI completed by the participants when recruited and upon completing the study. The results indicated {{that none of the}} seven strategy categories reached statistical significance (Z[*]=[*]−. 052 to −. 979, n.s.). We then used the means of the two OCSI scores for the participants’ self-reported communication strategy use, which resulted in the following scores: social-affective (M[*]=[*] 3.95, SD[*]=[*]. 42); fluency-oriented (M[*]=[*] 3.91, SD[*]=[*]. 42); negotiation of meaning (M[*]=[*] 3.88, SD[*]=[*]. 36); accuracy-oriented (M[*]=[*] 3.82, SD[*]=[*]. 37); message reduction and alteration (M[*]=[*] 3.97, SD[*]=[*]. 31); nonverbal (M[*]=[*] 4.00, SD[*]=[*]. 44); message abandonment (M[*]=[*] 2.89, SD[*]=[*]. 63). The OCSI results suggest that all participants were high users of all strategies (mean value of 4 on the 5 -point scale, i.e., usually used), with the <b>exception</b> of <b>message</b> abandonment.|$|R
40|$|Human {{language}} is qualitatively different from animal communication systems {{in at least}} two separate ways. Human languages contain tens of thousands of arbitrary learned symbols (mainly words). No other animal communication system involves learning the component symbolic elements afresh in each individual s lifetime, and certainly not in such vast numbers. Human language also has complex compositional syntax. The meanings of our sentences are composed from the meanings of the constituent parts (e. g. the words). This is obvious to us, but no other animal communication system (with honeybees as an odd but distracting <b>exception)</b> puts <b>messages</b> together in this way. A recent theoretical claim that the sole distinguishing feature of human {{language is}} recursion is discussed, and related to these features of learned symbols and compositional syntax. It is argued that recursive thought could have existed in prelinguistic hominids, and that the key step to language was the innovative disposition to learn massive numbers of arbitrary symbols...|$|R
40|$|The readout of the Aleph time {{projection}} chamber (TPC) {{relies on}} a set of 72 time projection processors (TPPs), which are based on a Motorola 68020 microprocessor running a real-time operating system. The advanced processing capabilities of the TPPs allow them to perform in parallel a number of tasks, both during and outside of data acquisition, which are outlined. The management and control of such a large number of intelligent devices is presented. The discussion covers the hardware configuration of the TPPs; the software running the TPPs; their management, status, and control; <b>exception</b> handling and <b>message</b> logging; and the TPP monitoring task...|$|R
40|$|Refactoring in {{object-oriented}} languages {{has been}} well studied, but functional languages have received much less attention. This paper presents our ideas about refactoring in Erlang, a functional programming language developed by Ericsson for building telecommunications systems. The highlights of our work {{is dealing with the}} strong dynamic nature of Erlang and doing program manipulations using a relational database. 1 The Erlang programming language Erlang/OTP [1] is a functional programming language and environment developed by Ericsson, designed for building concurrent and distributed fault-tolerant systems with soft real-time characteristics (like telecommunication systems). The core Erlang language consists of simple functional constructs extended with message passing to handle concurrency, and OTP is a set of design principles and libraries that supports building fault-tolerant systems. Erlang is a functional language which means that a program is run by successively applying functions. Branches of execution are selected based on pattern matching of data and conditional expressions, and loops are constructed using recursive functions. Variables are bound a value only once in their life, they cannot be modified. Most constructs are side effect free, <b>exceptions</b> are <b>message</b> passing and built-in functions (BIFs) ...|$|R
5000|$|Objective-C, like Smalltalk, can use dynamic typing: {{an object}} {{can be sent}} a message that is not {{specified}} in its interface. This can allow for increased flexibility, as it allows an object to [...] "capture" [...] a message and send the message to a different object that can respond to the message appropriately, or likewise send the message on to another object. This behavior is known as message forwarding or delegation (see below). Alternatively, an error handler {{can be used in}} case the message cannot be forwarded. If an object does not forward a message, respond to it, or handle an error, then the system will generate a runtime <b>exception.</b> [...] If <b>messages</b> are sent to nil (the null object pointer), they will be silently ignored or raise a generic exception, depending on compiler options.|$|R
5000|$|The Scythians {{worked in}} a wide variety of {{materials}} such as gold, wood, leather, bone, bronze, iron, silver and electrum. Clothes and horse-trappings were sewn with small plaques in metal and other materials, and larger ones, including some of the most famous, probably decorated shields or wagons. Wool felt was used for highly decorated clothes, tents and horse-trappings, and an important nomad mounted on his horse in his best outfit must have presented a very colourful and exotic sight. As nomads, the Scythians produced entirely portable objects, to decorate their horses, clothes, tents and <b>wagons,</b> with the <b>exception</b> in some areas of kurgan stelae, stone stelae carved somewhat crudely to depict a human figure, which were probably intended as memorials. Bronze-casting of very high quality is the main metal technique used across the Eurasian steppe, but the Scythians are distinguished by their frequent use of gold at many sites, though large hoards of gold objects have also been found further east, as in the hoard of over 20,000 pieces of [...] "Bactrian Gold" [...] in partly nomadic styles from Tillya Tepe in Afghanistan.|$|R
40|$|The current SQL {{standard}} for access control is coarse grained, {{in that it}} grants access to all rows of a table or none. Fine-grained access control, which allows control of access at the granularity of individual rows, and to specific columns within those rows, is required in practically all database applications. There are several models for fine grained access control, {{but the majority of}} them follow a view replacement strategy. There are two significant problems with most implementations of the view replacement model, namely (a) the unnecessary overhead of the access control predicates when they are redundant and (b) the potential of infor-mation leakage through channels such as user-defined functions, and operations that cause <b>exceptions</b> and error <b>messages.</b> We first propose techniques for redundancy removal. We then define when a query plan is safe with respect to UDFs and other unsafe functions, and propose techniques to generate safe query plans. We have prototyped redundancy removal and safe UDF pushdown on the Microsoft SQL Server query optimizer, and present a pre-liminary performance study. 1...|$|R
40|$|This study {{investigated}} the self-reported awareness {{of the presence of}} product warning messages and signs among random samples of Hispanics in San Francisco surveyed in 1990 and in 1991. The messages that were tested related to cigarettes, alcoholic beverages, and other consumer products. A random sample of 1, 204 Hispanics (43. 5 percent males) were interviewed by telephone in 1990. The corresponding figure for the second survey in 1991 was 1, 569 Hispanics (41. 1 percent males). In general, respondents reported low levels of awareness of the presence of product warning messages and signs. The <b>exception</b> was warning <b>messages</b> on cigarette packets which approximately 70 percent of the respondents reported having seen within the 12 months before the survey. There was an increase from 1990 to 1991 in the reported awareness of warning messages for wine, beer, and cigarettes. Smokers and drinkers of alcoholic beverages reported the highest levels of awareness of the relevant warning messages and signs. Length of exposure to warning messages and multiplicity of sources (for example, advertisements and products) seem to produce greater levels of awareness of the presence of product warning messages. Less acculturated, Spanish-speaking Hispanics are less likely to report being aware of the warnings, particularly those that appear only in English (for example, alcoholic beverages) ...|$|R
2500|$|Another {{intended}} {{agent was}} the highly decorated former RAF Squadron-Leader Frederick Joseph Rutland who helped the Japanese navy develop aircraft carriers in the 1920s, {{and in the}} 1930s was deployed as a secret agent in the US. But for problems with establishing his cover in Hawaii as a whisky importer, Rutland {{might have been the}} key Japanese naval intelligence spy supporting the attack on Pearl Harbor in December 1941. Furthermore, the Japanese did not need Abwehr assistance, having a consulate in Hawaii which had on its staff an undercover IJN intelligence officer, Takeo Yoshikawa. The consulate had reported to IJN Intelligence for years, and Yoshikawa increased the rate of reports after his arrival. (Sometimes called a [...] "master spy", he was in fact quite young, and his reports not infrequently contained errors.) Pearl Harbor base security was so lax Yoshikawa had no difficulty obtaining access, even taking the Navy's own harbor tourboat. (Even had he not, hills overlooking the Harbor were perfect for observation or photography, and were freely accessible.) Gossip with taxi drivers is supposed to have been one of his sources as well. Some of his information, and presumably other material from the Consulate, was hand-delivered to IJN intelligence officers aboard Japanese commercial vessels calling at Hawaii prior to the War; at least one is known to have been deliberately routed to Hawaii for this purpose during the summer. Most, however, seem to have been transmitted to Tokyo, almost certainly via cable (the usual communication method with Tokyo). Many of those messages were intercepted and decrypted by the U.S.; most were evaluated as routine intelligence gathering all nations do about potential opponents, rather than evidence of an active attack plan. None of those currently known, including those decrypted after the attack when there was finally time to return to those remaining undecrypted, explicitly stated anything about an attack on Pearl Harbor. The only <b>exception</b> was a <b>message</b> sent from the Hawaiian Consulate on 6 December, which was not decrypted until after the 7th, thus making it moot with respect to U.S. foreknowledge. No cable traffic was intercepted in Hawaii until after David Sarnoff of RCA agreed to assist during a visit to Hawaii immediately before the 7th. Such interception was illegal under U.S. law, though it had been going on sub rosa in New York for some time. Farago's postscript offers a viewpoint from RCA personnel. In the final analysis, illegal co-operation of American cable companies changed little or nothing, since radio intercept stations were picking up some of the consular traffic anyway, and American intelligence failed to make optimum use of the information in any case.|$|R
40|$|Robot assistants are {{expected}} to be clever helpers for humans characterized by their advanced level of interaction and their ability to cope with both natural environments at homes and at shop floors. The ability to adapt their behavior to changing situations is given by their internal control architecture, which is characterized by modularization, e. g. the identification of functional roles, and by the structured interaction between these modules. Common ground of all service fields for robot assistants is their need to be mobile, to do something physical at changing locations, to gather information from its environment and to communicate and interact with humans. The robot assistant must act in a goal-oriented and reliable way in human environments. As a representative service, the fetch-and-carry duty has been analyzed, and requirements for the design of a modular control architecture and its subsystems have been identified within the scope of this doctoral thesis: the control architecture has to support a robot control as an interface to the sensors and actuators, it needs an explicit representation of the world, it needs a decision making device for the goal-oriented behavior and it needs an execution module to control the functional interaction between these subsystems that adapt the behavior of the robot assistant to changing situations. A multi-layer architecture forms the main structure of the control architecture. Multi-layer architectures are able to connect fast closed-loop algorithms of robot controls with slow cognitive processes of planning systems by an execution module. Additional modules are a symbolic planning system, a knowledge base, a man-machine-interface and a robot control. The abilities of the robot assistant are provided by the robot control and handed to the execution module as so called actions. These are closed-loop controllers for specific functions with interfaces to the hardware of the robot assistant. Furthermore, the actions contain open-loop controllers e. g. an interpreter of trajectories for the manipulator. The execution module activates the actions, monitors their execution, detects exceptional situations and takes care of error recovery. The robot control returns state information and error messages for monitoring. Additionally, it returns preprocessed sensory data for decision making of the execution module. Within the scope of this doctoral thesis, a new execution module was built using a scripting language. The new execution module supports easy, intuitive definition of actions, execution of discrete or continuous actions as well as execution of sequential or concurrent actions and their synchronization. Actions can create and call other actions hierarchically and any number of arguments can be transferred. Every action observes its effect. If an exception occurs, another action is started to recover. If the running action cannot recover the <b>exception,</b> a <b>message</b> is hierarchically sent to the upper action, until one can recover the exception. At last, the message is given to the control panel of the human to help the robot assistant. In order to act goal-directed, the execution module of the robot assistant sends a request to a symbolic planning system to generate a list of actions for reaching the goal of a given task. This list is executed step by step. The request contains the symbolic description of the task and of the domain. The domain description is dynamically computed with facts of a knowledge base. The symbolic description is based on a newly developed ontology for fetch-and-carry duties. Every action enters its effect to the knowledge base to keep it up to date. The developed control architecture has been implemented and evaluated with Care-O-bot II, a robot assistant for home care. Care-O-bot II is equipped with a sensor head, manipulator, active walking aid, and a hand-held control panel. The manipulation of different household objects has been implemented successfully. This includes grasping or placing objects from/to fixed locations as well as the direct passing of objects to/from the human. The experiments with Care-O-bot® II have proven that the modular control architecture fulfills the identified requirements. The robot assistant's behavior is goal-directed and reliable. Some of the modules of the control architecture, especially the execution module, were transferred to other service-robots for an exhibition. This attests their universal character. The current control architecture requires the manual programming of the knowledge base. Ongoing research concentrates on algorithms for improved scene analysis to automatically generate and maintain the facts by autonomous exploration by the robot assistant. The abilities of the robot assistant will be improved and new capabilities added to the repertoire of actions...|$|R
40|$|The kanga is a {{piece of}} cotton fabric worn around the waist {{shoulders}} and head. It has been around for about 200 years. Originally, the kanga used to be worn only by women, along the East African coast in Kenya and Tanzania. However, Madagascar has a similar fabric, known as the lamba hoany or lamba wani. My research shows that as time has changed, men are now beginning to wear the kanga too. The origin of the name kanga is disputed. On the one hand, it is thought that the fabric is named after the spotted guinea fowl, symbolized by spots on the fabric. On the other hand, it is thought that it is just by coincidence that the fabric has to have spots and that it bears the same name as the guinea fowl in Swahili. The author observes that in 1980 s in Mwembe Tayari market in Mombasa Kenya there was a stall specializing in selling only second-hand kanga fabrics that its owner referred to as leso. This is particularly interesting because the only difference seemed to be that the leso was a kanga that had already been used. When the owner was asked the reason for this, she replied that the leso for her meant second-hand. More intriguingly for the author, these older items cost three times more than the brand new ones found in Mombasa sigh street shops. Besides, while such shops commonly sold unused kanga fabrics only in uncut fabric pairs, the second-hand stall that sold leso sold them in cut single pieces. The kanga’s main cultural significance, apart from being an item of clothing, is to spread messages. Originally, the written messages used to be in Swahili but in Arabic scrip, but my research shows that the fashion has recently included not only Swahili as the main language, but European languages, too. Without <b>exception,</b> these <b>messages</b> depict (day-to-day) life situations: polite or impolite; real or imagined; happy or sad; religious or political; celebratory or general; celebratory or general; romantic or spiteful and clever or witty. Additionally, a kanga may portray a message within the overall visual design. For example, the main visual design might be the map of Africa and the written message might be something like “Africa is a beautiful continent”. The kanga is rectangular in shape, with an area of about sixty by forty inches. It often has multiple borders framing an interior rectangle bearing simple or intricate designs within the overall design. These will usually be supported by a written message. However, there is a type of kanga whose aesthetic message is sufficient enough to make the point. This kanga is known as kanga bubu or “speechless kanga”. In spite of the fact that, originally, only women used it, current usage of the kanga is diverse. For example, tailoring for general family wear, tapestry, furniture covering, wall hanging, making hand-bags, wrapping by the Maasai men, and specialized tailoring for the Barotse men of Zambia, who prefer the softness of the kanga for making the liziba suits usually won during the Kwomboka ceremony. In both cases above, the Maasai and Barotse do not necessarily pay attention to the written messages on the kanga fabric. Their interest is mainly in the color design and the feel of the fabric. The kanga is softer and easier to manage for the requirements of the Barotse. The author’s attempt to classify the kanga’s written messages according to relevant topics can be viewed in this link: [URL] Nevertheless, {{it is virtually impossible to}} give just one meaning to each saying on a kanga; it is also difficult to place sayings under strict topics. This is because kanga messages are not direct and straightforward. For example, a kanga with a message that says “Leo ni leo” or literally “Today is today” could be a warning for an impending political conflict, like an election. Contrary to this, it could be announcing an exciting event, for example a wedding. Professor Zawawi notes: Although a woman is primarily trying to project a message to those with whom she is most in contact…when she goes…to buy a pair of kanga…she is attracted first by color and design. The message only comes later to enforce her choice…[but italics mine] [...] . if the message does not please her, she casts aside the kanga [...] . she does not want to buy unpopular messages. (2005 : 25). Zawawi, S M, 2005, Kanga: The Cloth That Speaks, Azaniya Hill Press, New York The kanga is a fabric that was created and used sorely by women of the East African coast around Kenya and Tanzania. However, its uses have now expanded beyond this original domain in terms of geographical area and usage. Yet, the kanga still mainly depicts Swahili culture and gives its social critiques through designed and written messages. In fact, deciphering such messages ought not to be restricted to one meaning and more importantly, should be understood within the Swahili people’s social context. ...|$|R
40|$|Omeka 2. 3 was {{released}} on March 19, 2015. Enhancements Accessibility improvements (added ARIA roles and landmarks, improved labels, navigation skip links) New file derivative strategy using PHP's GD extension Built-in support for setting default sort orders for browse pages Element dropdowns on item advanced search respect the admin-configured element sorting order (# 643) The admin-configured page limits for browse pages are used for more controllers, including plugins The listing of items on collection pages now follows the admin page limits (# 601) Support for the new access control directives used by Apache 2. 4 (# 631) URLs within the default citation output now include a span wrapper to allow specific styling New interface for resetting customized navigation to default settings Improved error output for <b>exceptions</b> Detailed error <b>messages</b> are now always shown for exceptions during upgrade Support for newer versions (4. 2 +) of PHPUnit The API now accepts sort_field and sort_dir GET parameters for sorting results Omeka will hide the "Path to ImageMagick" setting when an alternative derivative strategy is in use The System Information panel now uses internal "folder" names for both themes and plugins Improved translation coverage (# 655, # 659) Bugs Fixed Tags were incorrectly treated as case-sensitive in some places Assigning tags to records caused an SQL error for some newer MySQL servers The item advanced search "does not contain" worked incorrectly with elements having multiple texts API authentication did not work properly on installations with no database prefix browse_sort_links for "bare" links handled attributes incorrectly (# 648) Setting a custom homepage including a query string would silently set that query on all pages Upgrades could fail on some "strict mode" MySQL configurations Upgrades directly from old 1. x versions could fail when migrating collections Theme overrides of plugin views did not apply when on a different plugin's page (# 635) The display of item search filters did not always recognize when users filtered by tag Automatic alt attributes for file display were over-escaped Admin-side page titles on hover were over-escaped Long titles for records indexed for the sitewide search could be silently truncated or cause an error The sitewide search form did not respect the documented submit_value option Errors on individual items could cause the "Index Records" job to fail Item Types did not properly clean up after themselves after they were deleted Localization The Norwegian (no) translation has been moved to Norwegian Bokmål (nb). New translations for Bulgarian (bg_BG), Korean (ko_KR). Updates to many existing translations External Libraries Omeka 2. 3 updates to the following versions of its external dependencies: Zend Framework 1. 12. 11 jQuery 1. 11. 2 jQuery UI 1. 11. 2 TinyMCE 3. 5. 11 Bundled Add-ons Plugins Exhibit Builder 3. 2 Simple Pages 3. 0. 5 Themes Thanks, Roy 2. 3 Seasons 2. 3 Berlin 2. 3 For Developers For change information geared toward developers, see What's New in Omeka 2. 3 on Omeka's Read the Docs site. Acknowledgements The following members of the Omeka community contributed code, fixes, and improvements to Omeka 2. 3 : Erin Bell (PR # 636) Daniel Berthereau (PR # 640, PR # 647, PR # 650, PR # 652, PR # 653) Adam Doan (PR # 629) Wayne Graham (PR # 630) Anna Michelle (PR # 651) Michał Seweryniak (PR # 655...|$|R
