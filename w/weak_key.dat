96|285|Public
2500|$|Unlike {{a modern}} stream cipher (such {{as those in}} eSTREAM), RC4 does not take a {{separate}} nonce alongside the key. [...] This means that if a single long-term key {{is to be used}} to securely encrypt multiple streams, the protocol must specify how to combine the nonce and the long-term key to generate the stream key for RC4. [...] One approach to addressing this is to generate a [...] "fresh" [...] RC4 key by hashing a long-term key with a nonce. However, many applications that use RC4 simply concatenate key and nonce; RC4's <b>weak</b> <b>key</b> schedule then gives rise to related key attacks, like the Fluhrer, Mantin and Shamir attack (which is famous for breaking the WEP standard).|$|E
5000|$|Key {{stretching}} - A {{method to}} create a stronger key from a <b>weak</b> <b>key</b> or a weak shared secret.|$|E
5000|$|DES {{also has}} four {{so-called}} weak keys. Encryption (E) and decryption (D) under a <b>weak</b> <b>key</b> {{have the same}} effect (see involution): ...|$|E
5000|$|Checking {{generated}} keys {{against a}} list of known <b>weak</b> <b>keys,</b> or building rejection of <b>weak</b> <b>keys</b> into the key scheduling.|$|R
50|$|Virtually all rotor based cipher {{machines}} (from 1925 onwards) have implementation flaws {{that lead}} to {{a substantial number of}} <b>weak</b> <b>keys</b> being created. Some machines have more problems with <b>weak</b> <b>keys</b> than others, as modern block and stream ciphers do.|$|R
5000|$|Blowfish. Blowfish's <b>weak</b> <b>keys</b> produce bad S-boxes, since Blowfish's S-boxes are key-dependent. There is {{a chosen}} {{plaintext}} attack against a reduced-round variant of Blowfish {{that is made}} easier {{by the use of}} <b>weak</b> <b>keys.</b> This is not a concern for full 16-round Blowfish.|$|R
50|$|The first {{stream cipher}} {{machines}}, that were also rotor machines {{had some of}} the same problems of weak keys as the more traditional rotor machines. The T52 was one such stream cipher machine that had <b>weak</b> <b>key</b> problems.|$|E
5000|$|They {{must also}} be {{verified}} by Bob to prevent an active attacker from inserting weak parameters (and thus a <b>weak</b> <b>key</b> K). [...] recommend against special checks to prevent this and instead suggest including the group parameters in Alice's certificate.|$|E
50|$|HKDF is an HMAC based key {{derivation}} {{function that}} transforms any <b>weak</b> <b>key</b> material into cryptographically strong key material. It can be used, for example, to convert Diffie Hellman exchanged shared secrets into key material suitable for use in encryption, integrity checking or authentication.|$|E
40|$|Abstract. This paper {{presents}} a large collection of new weak-key {{classes for the}} IDEA cipher 1. The classes {{presented in this paper}} contain 2 53 − 2 64 <b>weak</b> <b>keys</b> (as compared with 2 51 differential <b>weak</b> <b>keys</b> presented by Daemen at CRYPTO’ 93 and 2 63 differential-linear weak-keys presented by Hawkes at EUROCRYPT’ 98). The novelty of our approach is in the use of boomerang distinguishers for the weak-key class membership test. We also show large weak-key classes for reduced-round versions of IDEA. Key words: IDEA cipher, <b>weak</b> <b>keys,</b> boomerang attack, NESSIE. ...|$|R
50|$|Larger {{classes of}} <b>weak</b> <b>keys</b> {{were found in}} 2002.|$|R
5000|$|The goal {{of having}} a 'flat' {{keyspace}} (i.e., all keys equally strong) is always a cipher design goal. As {{in the case of}} DES, sometimes a small number of <b>weak</b> <b>keys</b> is acceptable, provided that they are all identified or identifiable. An algorithm that has unknown <b>weak</b> <b>keys</b> does not inspire much trust [...]|$|R
50|$|Borisov, et al., using a multiplicative form of {{differential}} cryptanalysis, found acomplementation property for any variant of xmx, {{like the first}} three above, such thatn=2k-1, where k is the block size. They also found large <b>weak</b> <b>key</b> classesfor the Challenge variant, and for many other moduli.|$|E
50|$|In cryptography, key {{stretching}} {{techniques are}} {{used to make a}} possibly <b>weak</b> <b>key,</b> typically a password or passphrase, more secure against a brute force attack by increasing {{the time it takes to}} test each possible key. Passwords or passphrases created by humans are often short or predictable enough to allow password cracking. Key stretching makes such attacks more difficult.|$|E
50|$|It was {{submitted}} in 1998 by TecApro, a Costa Rican software company, to the AES competition {{as a candidate}} to become the Advanced Encryption Standard. Wagner et al. (1999) found a number of <b>weak</b> <b>key</b> classes for FROG. Other problems included very slow key setup and relatively slow encryption. FROG was not selected as a finalist.|$|E
5000|$|Any {{possible}} key {{should produce}} a strong cipher. (Meaning no <b>weak</b> <b>keys,</b> which DES has.) ...|$|R
40|$|HENKOS[1] is a {{synchronous}} {{stream cipher}} posted by Marius Oliver Gheorghita to eprint. In this paper {{we are going}} to present some weaknesses in the cipher. We first present a chosen IV attack which is very straight forward attack on the cipher. Second we present a group of <b>weak</b> <b>keys.</b> Key words: synchronous stream ciphers, <b>weak</b> <b>keys</b> / related keys, chosen IV attack. 1. Introduction and Algorith...|$|R
40|$|This paper {{presents}} a large collection of new weak-key {{classes for the}} IDEA cipher. The classes {{presented in this paper}} contain 2 - 2 <b>weak</b> <b>keys</b> (as compared with 2 differential <b>weak</b> <b>keys</b> presented by Daemen at CRYPTO' 93 and 2 differential-linear weak-keys presented by Hawkes at EUROCRYPT' 98). The novelty of our approach is in the use of boomerang distinguishers for the weak-key class membership test. We als...|$|R
50|$|In 2009, Lu {{presented}} a related-key rectangle attack on 36 rounds of XTEA, breaking more rounds than any previously published cryptanalytic results for XTEA. The paper presents two attacks, one without {{and with a}} <b>weak</b> <b>key</b> assumption, which corresponds to 264.98 bytes of data and 2126.44 operations, and 263.83 bytes of data and 2104.33 operations respectively.|$|E
50|$|In cryptography, a <b>weak</b> <b>key</b> is a key, which, {{used with}} a {{specific}} cipher, makes the cipher behave in some undesirable way. Weak keys usually represent a very {{small fraction of the}} overall keyspace, which usually means that, if one generates a random key to encrypt a message, weak keys are very unlikely to give rise to a security problem. Nevertheless, it is considered desirable for a cipher to have no weak keys. A cipher with no weak keys is said to have a flat, or linear, key space.|$|E
50|$|In May 2008, {{security}} researcher Luciano Bello {{revealed his}} discovery that changes made in 2006 to the {{random number generator}} in the version of the OpenSSL package distributed with Debian GNU/Linux and other Debian-based distributions, such as Ubuntu, dramatically reduced the entropy of generated values and made a variety of security keys vulnerable to attack. The security weakness was caused by changes made to the openssl code by a Debian developer in response to compiler warnings of apparently redundant code. This caused a massive worldwide regeneration of keys, and despite all attention the issue got, it could be assumed many of these old keys are still in use. Key types affected include SSH keys, OpenVPN keys, DNSSEC keys, key material for use in X.509 certificates and session keys used in SSL/TLS connections. Keys generated with GnuPG or GNUTLS are not affected as these programs used different methods to generate random numbers. Keys generated by non-Debian-based Linux distributions are also unaffected. The weak-key-generation vulnerability was promptly patched after it was reported, but any services still using keys that were generated by the old code remain vulnerable. A number of software packages now contain checks against a <b>weak</b> <b>key</b> blacklist to attempt to prevent use {{of any of these}} remaining weak keys, but researchers continue to find <b>weak</b> <b>key</b> implementations.|$|E
50|$|The {{bar mitzvah}} attack {{is an attack}} on the SSL/TLS {{protocols}} that exploits the use of the RC4 cipher with <b>weak</b> <b>keys</b> for that cipher. While this affects only the first hundred or so bytes of only the very small fraction of connections that happen to use <b>weak</b> <b>keys,</b> it allows significant compromise of user security, for example by allowing the interception of password information which could then be used for long-term exploitation.|$|R
5000|$|There {{are also}} 48 {{possibly}} <b>weak</b> <b>keys</b> that produce only four distinct subkeys (instead of 16). They {{can be found}} in ...|$|R
50|$|Typing speed {{generally}} improves with practice. While practicing, it {{is important}} to ensure that there are no <b>weak</b> <b>keys.</b> Typing speed is typically determined by how slow these <b>weak</b> <b>keys</b> are typed rather than how fast the remaining keys are typed. If a stage is reached where irrespective of the amount of practice, typing speed is not increasing, it is advisable to let some time pass and continue serious practice thereafter as typing speeds typically tend to increase with time even when no serious practice is done.|$|R
5000|$|Unlike {{a modern}} stream cipher (such {{as those in}} eSTREAM), RC4 does not take a {{separate}} nonce alongside the key. This means that if a single long-term key {{is to be used}} to securely encrypt multiple streams, the protocol must specify how to combine the nonce and the long-term key to generate the stream key for RC4. One approach to addressing this is to generate a [...] "fresh" [...] RC4 key by hashing a long-term key with a nonce. However, many applications that use RC4 simply concatenate key and nonce; RC4's <b>weak</b> <b>key</b> schedule then gives rise to related key attacks, like the Fluhrer, Mantin and Shamir attack (which is famous for breaking the WEP standard).|$|E
40|$|Abstract. ABC v 2 is a software-efficient {{stream cipher}} with 128 -bit key. In this paper, we apply a fast {{correlation}} attack to break ABC v 2 with weak keys. There are about 2 96 weak keys in ABC v 2. The complexity {{to identify a}} <b>weak</b> <b>key</b> and to recover the internal state of a <b>weak</b> <b>key</b> is low. Identifying a <b>weak</b> <b>key</b> from 2 32 random keys requires 6460 keystream bytes and 2 13. 5 operations for each key. Recovering the internal state of a <b>weak</b> <b>key</b> requires about 2 19. 5 keystream bytes and 2 32. 84 operations. A similar attack {{can be applied to}} break ABC v 1 with much lower complexity than the previous attack on ABC v 1. Keywords. Fast correlation attack, key-dependent S-box, stream cipher, ABC v 2. ...|$|E
40|$|Abstract. We {{evaluate}} {{the security of}} the recently proposed authenticated encryption scheme POET with regard to weak keys when its universal hash functions are instantiated with finite field multiplications. We give explicit constructions for <b>weak</b> <b>key</b> classes not covered by POET’s <b>weak</b> <b>key</b> testing strategy, and demonstrate how to leverage them to obtain universal forgeries. ...|$|E
50|$|DigiCert Inc. {{is of no}} {{relation}} to Digicert Sdn. Bhd, a Malaysian-based certification authority that issues certificates with <b>weak</b> <b>keys</b> and had its trust revoked by web browsers.|$|R
50|$|After the {{successful}} cryptanalysis of Akelarre, its designers responded with an updated variant called Ake98. This cipher {{differs from the}} original Akelarre in the new AR-box (Addition-Rotation box), the swapping of words {{at the end of}} a round, and the addition of subkeys at the beginning of each round. In 2004, Jorge Nakahara, Jr. and Daniel Santana de Freitas found large classes of <b>weak</b> <b>keys</b> for Ake98. These <b>weak</b> <b>keys</b> allow a cryptanalysis faster than exhaustive search using only 71 known plaintexts, for up to 11.5 rounds of Ake98.|$|R
50|$|Embedded Systems {{have real}} issues {{gathering}} enough entropy {{as they are}} often very simple devices with short boot times and keys are often {{one of the first}} things a system may do. A simple study demonstrated the widespread use of <b>weak</b> <b>keys</b> by finding many embedded systems such as routers using the same keys. It was thought that the number of <b>weak</b> <b>keys</b> found would have been far higher if simple and often attacker determinable one-time unique identifiers had not been incorporated into the entropy of some of these systems.|$|R
40|$|ABC v 2 is {{a stream}} cipher with 128 -bit key. In this paper, {{we show that}} there are about 2 96 weak keys. The {{complexity}} to identify each <b>weak</b> <b>key</b> and to recover the internal state is low. To identify a <b>weak</b> <b>key</b> from about 2 random keys, we need 2 keystream bytes from each key, and 2 operations are required for each keystream. Recovering the internal state of a <b>weak</b> <b>key</b> requires about 2 29. 5 operations. The similar attack can be apply to break ABC v 1 and its complexity is {{much lower than the}} previous attack on ABC v 1. ...|$|E
40|$|XTEA is a 64 -round {{block cipher}} with a 64 -bit block size and a 128 -bit user key, which was {{designed}} as a short C program that would run safely on most computers. In this paper, we present a related-key rectangle attack on a series of inner 36 rounds of XTEA without making a <b>weak</b> <b>key</b> assumption, and a related-key rectangle attack on the first 36 rounds of XTEA under certain <b>weak</b> <b>key</b> assumptions. These are better than any previously published cryptanalytic results on XTEA in terms of the numbers of attacked rounds...|$|E
40|$|During summer 1985, we {{performed}} eight cycling experiments on the Data Encryption Standard (DES) {{to see if}} DES has certain algebraic weaknesses. Using special-purpose hardware, we applied the cycling ciosure test described in our Eurocrypt 85 paper to determine whether DES is a pure cipher. We also carried out a stronger version of this test,. (A cipher is pure if, fgr any keys i,j,k, there exists some key 1 such that T,T’-’Tk = z, where T, denotes encryption under key w.) In addition, we followed the orbit of a randomly chosen DES transformation for 236 steps, {{as well as the}} orbit of the composition of two of the “weak key ’ transformations. Except for the <b>weak</b> <b>key</b> experiment, our results are consistent with the hypothesis that DES acts like a set of randomly chosen permutations. In particular, our results show with overwhelming confidence that DES is not pure. The <b>weak</b> <b>key</b> experiment produced a short cycle of about 233 steps, the consequence of hitting a fixed point for each <b>weak</b> <b>key...</b>|$|E
50|$|Using <b>weak</b> <b>keys,</b> {{the outcome}} of the Permuted Choice 1 (PC1) in the DES key {{schedule}} leads to round keys being either all zeros, all ones or alternating zero-one patterns.|$|R
40|$|This paper {{presents}} {{an analysis of}} the PES cipher in a similar setting as done by Daemen et al. at Crypto' 93 for IDEA. The following results were obtained for 8. 5 -round PES: a linear weak-key class of size 248, two differential weak-key classes of size 241, and two differential-linear weak-key classes of size 2 (62). For 17 -round PES (double PES) : a linear weak-key class of size 27, and a differential weak-key class of size 27 were found. These attacks demonstrate that doubling the number of rounds in PES is not enough to avoid <b>weak</b> <b>keys.</b> These findings were possible because the cipher structure from PES to IDEA was changed but the key schedule algorithm remained the same. Daemen suggested a modified key schedule for IDEA in order to avoid <b>weak</b> <b>keys.</b> We found a differential weak-key class of size 2 (83) for 2. 5 -round IDEA under his redesigned key schedule, and a differential-linear weak-key class of size 2 (68) for 3. 5 -round IDEA. The presence of <b>weak</b> <b>keys</b> has some consequences. Recall that without weak-key assumptions there are no known attacks on more than 4. 5 rounds of IDEA. Furthermore, the existence of <b>weak</b> <b>keys</b> may imply that the block cipher becomes unsuitable in stream cipher and hash function constructions. status: publishe...|$|R
5000|$|The {{block cipher}} has no special {{properties}} that {{distinguish it from}} ideal ciphers, such as for example <b>weak</b> <b>keys</b> or keys that lead to identical or related encryptions (fixed points or key-collisions).|$|R
