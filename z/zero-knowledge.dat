1453|0|Public
25|$|Some {{widely known}} cryptosystems include RSA encryption, Schnorr signature, El-Gamal encryption, PGP, etc. More complex cryptosystems include {{electronic}} cash systems, signcryption systems, etc. Some more 'theoretical' cryptosystems include interactive proof systems, (like <b>zero-knowledge</b> proofs), systems for secret sharing, etc.|$|E
5000|$|Results on <b>Zero-Knowledge</b> Proofs. Sahai co-authored several {{important}} results on <b>zero-knowledge</b> proofs, in particular introducing {{the concept of}} concurrent <b>zero-knowledge</b> proofs. Sahai also co-authored the paper that introduced the MPC-in-the-head technique for using secure multi-party computation (MPC) protocols for efficient <b>zero-knowledge</b> proofs.|$|E
50|$|Another {{variant of}} <b>zero-knowledge</b> proofs are non-interactive <b>zero-knowledge</b> proofs. Blum, Feldman, and Micali {{showed that a}} common random string shared between the prover and the {{verifier}} is enough to achieve computational <b>zero-knowledge</b> without requiring interaction.|$|E
50|$|The model {{influences}} the properties {{that can be}} obtained from a <b>zero-knowledge</b> protocol. Pass showed that in the common reference string model non-interactive <b>zero-knowledge</b> protocols do not preserve all of the properties of interactive <b>zero-knowledge</b> protocols; e.g., they do not preserve deniability.|$|E
5000|$|Research in <b>zero-knowledge</b> proofs {{has been}} {{motivated}} by authentication systems where one party wants to prove its identity {{to a second}} party via some secret information (such as a password) but doesn't want the second party to learn anything about this secret. This is called a [...] "zero-knowledge proof of knowledge". However, a password is typically too small or insufficiently random {{to be used in}} many schemes for <b>zero-knowledge</b> proofs of knowledge. A <b>zero-knowledge</b> password proof is a special kind of <b>zero-knowledge</b> proof of knowledge that addresses the limited size of passwords.|$|E
5000|$|There is a {{well-known}} story presenting the fundamental ideas of <b>zero-knowledge</b> proofs, first published by Jean-Jacques Quisquater and others in their paper [...] "How to Explain <b>Zero-Knowledge</b> Protocols to Your Children". It is common practice (see Alice and Bob) to label the two parties in a <b>zero-knowledge</b> proof as Peggy (the prover of the statement) and Victor (the verifier of the statement).|$|E
5000|$|The {{definition}} given is that {{of perfect}} <b>zero-knowledge.</b> Computational <b>zero-knowledge</b> is obtained by requiring that {{the views of the}} verifier [...] and the simulator are only computationally indistinguishable, given the auxiliary string.|$|E
5000|$|In practice, it is {{more likely}} to {{implement}} J-PAKE in three flows since one party shall normally take the initiative. This can be done trivially without loss of security. Suppose Alice initiates the communication by sending to Bob: [...] and <b>Zero-knowledge</b> proofs. Then Bob replies with: [...] and <b>Zero-knowledge</b> proofs. Finally, Alice sends to Bob: [...] and a <b>Zero-knowledge</b> proof. Both parties can now derive the same session key.|$|E
5000|$|Non-interactive <b>zero-knowledge</b> proofs are {{a variant}} of <b>zero-knowledge</b> proofs in which no {{interaction}} is necessary between prover and verifier. Blum, Feldman, and Micali [...] showed that a common reference string shared between the prover and the verifier is enough to achieve computational <b>zero-knowledge</b> without requiring interaction. Goldreich and Oren gave impossibility results for one shot <b>zero-knowledge</b> protocols in the standard model. In 2003, Goldwasser and Kalai published an instance of an identification scheme for which any hash function will yield an insecure digital signature scheme. These results are not contradictory, as the impossibility result of Goldreich and Oren does not hold in the common reference string model or the random oracle model. Non-interactive <b>zero-knowledge</b> proofs however show a separation between the cryptographic tasks {{that can be achieved}} in the standard model and those that can be achieved in 'more powerful' extended models.|$|E
50|$|Non-interactive <b>zero-knowledge</b> proofs {{can also}} be {{obtained}} in the random oracle model using the Fiat-Shamir heuristic. The article introduced the acronym zk-SNARK for <b>zero-knowledge</b> Succinct Non-interactive ARgument of Knowledge that are {{the backbone of the}} Zcash protocol.|$|E
50|$|His work in {{this area}} is to use complexity-theoretic methods to {{understand}} the power and limitations of <b>zero-knowledge</b> proofs. In a series of papers with Oded Goldreich and Amit Sahai, they gained thorough understanding of the class SZK of problems possessing statistical <b>zero-knowledge</b> proofs, characterized the class SZK and proved that SZK is closed under various operations. Recently his work was trying to work on the <b>zero-knowledge</b> proof beyond the confines of SZK class.|$|E
50|$|It {{turns out}} that in an Internet-like setting, where {{multiple}} protocols may be executed concurrently, building <b>zero-knowledge</b> proofs is more challenging. The line of research investigating concurrent <b>zero-knowledge</b> proofs was initiated {{by the work of}} Dwork, Naor, and Sahai. One particular development along these lines has been the development of witness-indistinguishable proof protocols. The property of witness-indistinguishability is related to that of <b>zero-knowledge,</b> yet witness-indistinguishable protocols do not suffer from the same problems of concurrent execution.|$|E
5000|$|Round 1: Alice selects , [...] {{and sends}} out , [...] {{together}} with the <b>Zero-knowledge</b> proofs (using for example Schnorr signature) for the proof of the exponents [...] and [...] Similarly, Bob selects , [...] and sends out , [...] {{together with the}} <b>Zero-knowledge</b> proofs for the proof of the exponents [...] and [...] The above communication can be completed in one round as neither party depends on the other. When it finishes, Alice and Bob verify the received <b>Zero-knowledge</b> proofs and also check [...]|$|E
50|$|In cryptography, a <b>zero-knowledge</b> proof or <b>zero-knowledge</b> {{protocol}} is {{a method}} by which one party (the prover) can prove to another party (the verifier) that a given statement is true, without conveying any information apart {{from the fact that}} the statement is indeed true.|$|E
5000|$|One {{particular}} motivating {{example is}} the use of commitment schemes in <b>zero-knowledge</b> proofs.Commitments are used in <b>zero-knowledge</b> proofs for two main purposes: first, to allow the prover to participate in [...] "cut and choose" [...] proofs where the verifier will be presented with a choice of what to learn, and the prover will reveal only what corresponds to the verifier's choice. Commitment schemes allow the prover to specify all the information in advance, and only reveal what should be revealed later in the proof. [...] Commitments are also used in <b>zero-knowledge</b> proofs by the verifier, who will often specify their choices ahead of time in a commitment. This allows <b>zero-knowledge</b> proofs to be composed in parallel without revealing additional information to the prover.|$|E
5000|$|Round 2: Alice {{sends out}} [...] and a <b>Zero-knowledge</b> proof for {{the proof of}} the {{exponent}} [...] (Note Alice actually derives a new public key using [...] as the generator). Similarly, Bob sends out [...] and a <b>Zero-knowledge</b> proof for the proof of the exponent [...]|$|E
5000|$|A non-interactive <b>zero-knowledge</b> proof [...] is {{a method}} by which one party (the prover) can prove to another party (the verifier) that a given {{statement}} is true, without conveying any information apart {{from the fact that}} the statement is indeed true. The non-interactive <b>zero-knowledge</b> proof used is ring signature.|$|E
5000|$|... 1993 Proved (with A. Wigderson) {{equivalence}} of one-way {{functions and}} <b>zero-knowledge</b> http://www.cs.ucla.edu/~rafail/PUBLIC/14.html.|$|E
5000|$|A formal {{definition}} of <b>zero-knowledge</b> has {{to use some}} computational model, the most common one being that of a Turing machine. Let ,, and [...] be Turing machines. An interactive proof system with [...] for a language [...] is <b>zero-knowledge</b> if for any probabilistic polynomial time (PPT) verifier [...] there exists an expected PPT simulator [...] such that ...|$|E
5000|$|Alice selects [...] {{and sends}} out [...] {{together}} with a <b>zero-knowledge</b> proof (using for example Schnorr signature) for the proof of the exponent [...] Similarly, Bob selects [...] and sends out [...] {{together with a}} <b>zero-knowledge</b> proof for the proof of the exponent [...] Here, the notation [...] denotes an element selected randomly with uniform probability.|$|E
5000|$|A {{protocol}} for proving {{knowledge of a}} digital signature in a <b>zero-knowledge</b> protocol.|$|E
50|$|A witness-indistinguishable proof (WIP) is {{a variant}} of a <b>zero-knowledge</b> proof for {{languages}} in NP. In a typical <b>zero-knowledge</b> proof of a statement, the prover will use a witness for the statement as input to the protocol, and the verifier will learn nothing other than {{the truth of the}} statement. In a WIP, this <b>zero-knowledge</b> condition is weakened, and the only guarantee is that the verifier {{will not be able to}} distinguish between provers that use different witnesses. In particular, the protocol may leak information about the set of all witnesses, or even leak the witness that was used when there is only one possible witness.|$|E
5000|$|We {{speak of}} {{computational}} <b>zero-knowledge</b> if no efficient algorithm can distinguish the two distributions.|$|E
5000|$|Technically speaking, a ZKPP is {{different}} from a <b>zero-knowledge</b> proof. This is because a ZKPP is defined more narrowly than the more general <b>zero-knowledge</b> proof. ZKPP is defined in IEEE 1363.2 as [...] "An interactive zero knowledge proof of knowledge of password-derived data shared between a prover and the corresponding verifier." [...] Notice, that the definition is concerned further with password-derived data.|$|E
5000|$|<b>Zero-knowledge</b> proofs are not proofs in the {{mathematical}} {{sense of the}} term because there is some small probability, the soundness error, that a cheating prover will be able to convince the verifier of a false statement. In other words, <b>zero-knowledge</b> proofs are probabilistic [...] "proofs" [...] rather than deterministic proofs. However, there are techniques to decrease the soundness error to negligibly small values.|$|E
50|$|The CRS {{model has}} {{applications}} {{in the study of}} non-interactive <b>zero-knowledge</b> proofs and universal composability.|$|E
50|$|SmartCash (SMART) is a Keccak SHA-3 algorithm, mineable coin {{that uses}} <b>Zero-knowledge</b> proofs from the zerocoin extension.|$|E
50|$|Prof. Crépeau is {{best known}} for his {{fundamental}} work in <b>zero-knowledge</b> proof, multi-party computing, quantum cryptography, and quantum teleportation.|$|E
50|$|Signatures with {{efficient}} protocols - are signature {{schemes that}} facilitate efficient cryptographic protocols such as <b>zero-knowledge</b> proofs or secure computation.|$|E
50|$|The {{first two}} of these are {{properties}} of more general interactive proof systems. The third {{is what makes the}} proof <b>zero-knowledge.</b>|$|E
5000|$|A non-interactive proof system [...] is multi-theorem <b>zero-knowledge,</b> {{if there}} exists a simulator, , such that for all {{non-uniform}} polynomial time adversaries, , ...|$|E
5000|$|... {{where the}} {{asterisk}} denotes complex-conjugation. No a-priori knowledge on the transmitted symbols is required with this basic scheme (blind or <b>zero-knowledge).</b>|$|E
50|$|With {{the help}} of the <b>zero-knowledge</b> proof and the {{commitment}} scheme it is possible to prevent the usage of the subliminal channel.|$|E
50|$|In cryptography, the Feige-Fiat-Shamir {{identification}} {{scheme is}} a type of parallel <b>zero-knowledge</b> proof developed by Uriel Feige, Amos Fiat, and Adi Shamir in 1988. Like all <b>zero-knowledge</b> proofs, it allows one party, Peggy, to prove to another party, Victor, that she possesses secret information without revealing to Victor what that secret information is. The Feige-Fiat-Shamir identification scheme, however, uses modular arithmetic and a parallel verification process that limits the number of communications between Peggy and Victor.|$|E
50|$|This {{protocol}} is {{an interactive}} proof {{of knowledge of}} the angle XA (the identity of Alice) witherror 2−t. The protocol is also <b>zero-knowledge.</b>|$|E
50|$|Witness-indistinguishable proof {{systems were}} first {{introduced}} by Feige and Shamir. Unlike <b>zero-knowledge</b> proofs, they remain secure when multiple proofs are being performed concurrently.|$|E
