1|97|Public
50|$|At this level, {{there are}} two basic {{approaches}} to sampler organization. In a bank approach, each instrument is assigned to a different MIDI channel and multiple banks can be stored to reconfigure the sampler. A different and more powerful approach is to associate each instrument with a patch number or ID so that each MIDI channel can be configured separately by <b>sending</b> <b>controller</b> information on the individual channel.|$|E
5000|$|There are a {{large number}} of timing {{constraints}} giving minimum times that must elapse between various commands (see [...] ); the DRAM <b>controller</b> <b>sending</b> them must ensure they are all met.|$|R
5000|$|RT to Controller Transfer. The Bus <b>Controller</b> <b>sends</b> one {{transmit}} command word to a Remote Terminal. The Remote Terminal then sends {{a single}} Status word, immediately followed by 1 to 32 words.|$|R
5000|$|Controller to RT Transfer. The Bus <b>Controller</b> <b>sends</b> one 16-bit receive command word, {{immediately}} {{followed by}} 1 to 32 16-bit data words. The selected Remote Terminal then sends a single 16-bit Status word.|$|R
5000|$|Mode Command Without Data Word. The Bus <b>Controller</b> <b>sends</b> one command {{word with}} a Sub-address of 0 or 31 {{signifying}} a Mode Code type command. The Remote Terminal responds with a Status word.|$|R
5000|$|Mode Command With Data Word (Receive). The Bus <b>Controller</b> <b>sends</b> one command {{word with}} a Sub-address of 0 or 31 {{signifying}} a Mode Code type command immediately {{followed by a}} single data word. The Remote Terminal responds with a Status word.|$|R
3000|$|..., the <b>controller</b> <b>sends</b> {{the entire}} {{optimizing}} sequence, u̅_t, to the actuator node. Depending upon future packet dropout scenarios, a subsequence of u̅_t {{will be applied}} at the plant input, or not. Following the receding horizon paradigm, at the next time instant, x [...]...|$|R
5000|$|Mode Command Without Data Word (Broadcast). The Bus <b>Controller</b> <b>sends</b> one command {{word with}} a Terminal address of 31 {{signifying}} a broadcast type command and a sub-address of 0 or 31 signifying a Mode Code type command. No Remote Terminals will respond.|$|R
5000|$|... if Pj is locally {{dependent}} on itself then declare deadlock else for all Pj,Pk [...] such that (i) Pi is locally {{dependent on}} Pj, (ii) Pj {{is waiting for}} Pk and (iii) Pj, Pk are on different <b>controllers.</b> <b>send</b> probe(i, j, k).|$|R
5000|$|RT to RT Transfers. The Bus <b>Controller</b> <b>sends</b> out one receive command word {{immediately}} {{followed by}} one transmit command word. The transmitting Remote Terminal sends a Status word immediately followed by 1 to 32 data words. The receiving Terminal then sends its Status word.|$|R
5000|$|Controller to RT(s) Transfer. The Bus <b>Controller</b> <b>sends</b> one receive command {{word with}} a Terminal address of 31 {{signifying}} a broadcast type command, immediately followed by 0 to 32 data words. All Remote Terminals that implement broadcasts {{will accept the}} data but no Remote Terminals will respond.|$|R
5000|$|Mode Command With Data Word (Broadcast). The Bus <b>Controller</b> <b>sends</b> one command {{word with}} a Terminal address of 31 {{signifying}} a broadcast type command and a sub-address of 0 or 31 signifying a Mode Code type command, immediately followed by one Data word. No Remote Terminals will respond.|$|R
30|$|Finally, the <b>controller</b> <b>sends</b> the {{optimized}} parameters {{values to}} the corresponding devices. After receiving the update parameters request, each device applies the new parameters and continues its normal operation. According to the circumstances and the predefined policies, the controller {{is able to}} send a new collection command whenever it needs.|$|R
5000|$|Connection {{establishment}} {{starts with}} the IO <b>Controller</b> <b>sending</b> a connect request to the IO Device. The connect request establishes an Application Relationship (AR) containing a number of Communication Relationships (CRs) between the IO Controller and IO Device. [...] The connect request defines some CRs within the AR. The following CRs are supported: ...|$|R
40|$|This paper {{describes}} {{the development of}} AirStick, an interface for musical expression. AirStick is played "in the air", in a Theremin style. It is composed of an array of infrared proximity sensors, which allow the mapping {{of the position of}} any interfering obstacle inside a bi-dimensional zone. This <b>controller</b> <b>sends</b> both x and y control data to various real-time synthesis algorithms...|$|R
5000|$|RT to RT(s) Transfers. The Bus <b>Controller</b> <b>sends</b> out one receive command {{word with}} a Terminal address of 31 {{signifying}} a broadcast type command, immediately followed by one transmit command. The transmitting Remote Terminal sends a Status word immediately followed by 1 to 32 data words. All Remote Terminals that implement broadcasts {{will accept the}} data but no Remote Terminals will respond.|$|R
30|$|At a {{predefined}} moment, the <b>controller</b> <b>sends</b> {{a collection}} start command {{to all the}} registered devices. The collection procedure is described in details in the next section. After collecting all the datasets, the controller performs an online training for the previously created neural network. Then, the trained neural network is used to adapt {{the parameters of the}} devices. The optimization procedure is described later in this paper.|$|R
50|$|Although manual {{systems are}} still used, most lawn {{sprinkler}} systems may be operated automatically using an irrigation controller, sometimes called a clock or timer. Most automatic systems employ electric solenoid valves. Each zone has {{one or more}} of these valves that are wired to the controller. When the <b>controller</b> <b>sends</b> power to the valve, the valve opens, allowing water to flow to the sprinklers in that zone.|$|R
5000|$|... if (i)Pk is idle, (ii) {{dependent}}k(i) = false, and (iii)requests {{responded by}} Pk to Pj then begin [...] "dependents""k"(i) = true; if k == i then declare that Pi [...] is deadlocked else for all Pa,Pb [...] such that (i) Pk is locally dependent on Pa, (ii) Pa {{is waiting for}} Pb and (iii) Pa, Pb are on different <b>controllers.</b> <b>send</b> probe(i, a, b). end ...|$|R
50|$|Radio-controlled {{aircraft}} have a transmitter {{operated by}} the <b>controller,</b> <b>sending</b> signals to a receiver in the model which in turn actuates servos which manipulate the model's flight controls {{in a similar manner}} to a full sized aircraft. In traditional aircraft, the radio has directly controlled the servos. However, modern aircraft often use flight controlling computers to stabilize an aircraft or even to fly the aircraft autonomously. This is particularly the case with quadcopters.|$|R
40|$|Abstract: Direct {{memory access}} (DMA) is {{a feature of}} modern {{computers}} that allows certain hardware subsystems within the computer to access system memory independently of the central processing unit (CPU). Without DMA, when the CPU is using programmed input/output, it is typically fully occupied for the entire duration of the read or write operation, and is thus unavailable to perform other work. With DMA, the CPU initiates the transfer, does other operations while the transfer is in progress, and receives an interrupt from the DMA controller when the operation is done. This feature is useful any time the CPU cannot {{keep up with the}} rate of data transfer, or where the CPU needs to perform useful work while waiting for a relatively slow I/O data transfer. A Universal Asynchronous Receiver/Transmitter is a type of "asynchronous receiver/transmitter", a piece of computer hardware that translates data between parallel and serial forms. The universal designation indicates that the data format and transmission speeds are configurable and that the actual electric signaling levels and typically are handled by a special driver circuit external to the UART. A UART is usually an individual (or part of an) integrated circuit used for serial communications over a computer or peripheral device serial port. UARTs are now commonly included in microcontrollers. UART IP soft core based on DMA mode is proposed and well elaborated using the characteristic of DMA. The entire UART IP soft core in DMA mode mainly includes the following 5 sub-modules: UART <b>send</b> <b>controller,</b> UART Receive controller, Register file with the Interface of Avalon-MM Slave, Master Read type DMA controller with the interface of Avalon-MM Master and Master Write type DMA controller with the interface of Avalon-MM Master. The design of UART IP Soft Core based on DMA Mode is simulated using Modelsim tool, and synthesized using Xilinx tool. 1...|$|R
40|$|A {{tracking}} system with RFID {{technology has been}} developed to measure the activity and behaviour of species in laboratory. It consists of different controllers which handle different RFID antennas. The <b>controllers</b> <b>send</b> the data received from its antennas to a host computer that computes the tracking of the different individuals. The system has a tracking resolution of centimetres and was specifically designed to respond in hostile environments and to allow an easy configuration and expansion. Peer ReviewedPostprint (published version...|$|R
50|$|Typically used in {{theatrical}} dimming, the <b>controller</b> <b>sends</b> volts to the device. The controlled lighting should scale its output {{so that at}} 10 V, {{the controlled}} light should be at 100% of its potential output, and at 0 V it should at 0% output (i.e., off). Dimming devices may be designed to respond in various patterns to the intermediate voltages, giving output curves that are linear for: voltage output, actual light output, power output, or perceived light output.|$|R
30|$|The {{equipments}} {{of coordination}} control layer mainly refers to microgrid operation controller, mainly {{in charge of}} sending corresponding control commands to the device layer and delivering execution information of the microgrid to the station layer. The interoperability and interchangeability of the devices will be obtained on bay level for easy interoperability. Microgrid operation <b>controller</b> <b>sends</b> GOOSE messages to intelligent switches. GOOSE messages can at once be sent when the switching value shifts or be sent occasionally when the switching value does not shift.|$|R
50|$|A typical {{floppy disk}} <b>controller</b> <b>sends</b> an MFM / FM / GCR encoded {{signal to the}} drive to write data, and expects a similar signal {{returned}} when reading the drive. On a write, a hardware PLL or a software-based filter component undoes the encoding, and stores the sector data as logically written by the host. An inverse mechanism translates the stored data back into an encoded signal when the data is read. Noisy raw data signals are filtered and cleaned up before conversion.|$|R
50|$|To {{make the}} boat usable and maneuverable, a simple-to-operate forward/stop/backwards speed {{controller}} is needed. This must be efficient—i.e. {{it must not}} get hot and waste energy at any speed—and it {{must be able to}} stand the full current that could conceivably flow under any full-load condition. One of the most common types of speed controllers uses pulse-width modulation (PWM). PWM <b>controllers</b> <b>send</b> high frequency pulses of power to the motor(s). As more power is needed the pulses become longer in duration.|$|R
40|$|As {{high-quality}} signal processors {{become more}} sophisticated and programmable, composers are increasingly interested in using them to transform the sounds of acoustic instruments during a live performance. This paper describes a real-time interactive program, created with MAX, that allows a performer to generate and control sound from a MIDI-controllable signal processor according to musical cues and performance gestures. The program analyzes incoming performance data and responds by <b>sending</b> continuous <b>controller</b> messages to various parameters, giving the performer immediate feedback {{and the ability to}} alter the processed sound. MIDI signal processors have proliferated in the last few years, offering sophisticated algorithms that transform a sound in real-time. When used as integral parts of music compositions, they provide a common sound world for synthesized sounds and acoustic instruments to blend, while expanding the coloristic and expressive range of the instruments. Although these [...] ...|$|R
50|$|Bill Chapman was {{chair of}} the ASHRAE Technical Committee in the late 1970s and early 1980s. After seeing the {{potential}} for digital controls to improve both the comfort and energy management provided by building climate-control systems, Chapman sketched out a vision for future Distributed control system solutions in a 1980 ASHRAE Journal article (July, 1980). The article highlights a system with distributed microprocessor-based <b>controllers</b> <b>sending</b> and receiving data to and from a central computer, and the building engineer remotely monitoring and controlling {{any part of the}} system.|$|R
50|$|The Sector Controller, who is {{responsible}} for overseeing Earth, among other worlds, receives a message that tells him that a mysterious machine called the Bannus has been activated (against orders) at Hexwood Farm Estate near London by the man who was responsible for maintaining the facility. Somehow, the Bannus has trapped both that man and an entire maintenance team inside the Estate. Following instructions in case of such an accident, the Sector <b>Controller</b> <b>sends</b> a message to the Reigners, the five people who rule the galaxy.|$|R
50|$|In essence, a trunked {{radio system}} is a packet {{switching}} computer network. Users' radios send data packets to a computer, operating on a dedicated frequency — called a control channel — to request communication on a specific talk-group. The <b>controller</b> <b>sends</b> a digital signal to all radios monitoring that talkgroup, instructing the radios to automatically switch to the frequency indicated by the system to monitor the transmission. After the user is done speaking, the users' radios return to monitoring the control channel for additional transmissions.|$|R
5000|$|Connectors: a {{connector}} represents where the display <b>controller</b> <b>sends</b> the video signal from a scanout operation to be displayed. Usually, the KMS concept of {{a connector}} corresponds to a physical connector (VGA, DVI, FPD-Link, HDMI, DisplayPort, S-Video ...) in the hardware where an output device (monitor, laptop panel, ...) is permanently or can temporarily be attached. Information related to the current physically attached output device [...] - such as connection status, EDID data, DPMS status or supported video modes - [...] is also stored within the connector.|$|R
40|$|This work {{analyzes}} {{an active}} fuzzy logic control {{system in a}} Rijke type pulse combustor. During the system development, {{a study of the}} existing types of control for pulse combustion was carried out and a simulation model was implemented to be used with the package Matlab and Simulink. Blocks which were not available in the simulator library were developed. A fuzzy controller was developed and its membership functions and inference rules were established. The obtained simulation showed that fuzzy logic is viable in the control of combustion instabilities. The obtained results indicated that the control system responded to pulses in an efficient and desirable way. It was verified that the system needed approximately 0. 2 s to increase the tube internal pressure from 30 to 90 mbar, with an assumed total delay of 2 ms. The effects of delay variation were studied. Convergence was always obtained and general performance was not affected by the delay. The <b>controller</b> <b>sends</b> a pressure signal in phase with the Rijke tube internal pressure signal, through the speakers, when an increase the oscillations pressure amplitude is desired. On the other hand, when a decrease of the tube internal pressure amplitude is desired, the <b>controller</b> <b>sends</b> a signal 180 ° out of phase...|$|R
30|$|If {{the timer}} for deactivating Spine {{switches}} is on and Tdd is exceeded, the Spine Switch Controller calculates the number (min_num) of Spine switches {{that should be}} deactivated (as shown in lines 5 – 7 in Algorithm 5) and determines which Spine switches should be deactivated. The Spine Switch <b>Controller</b> <b>sends</b> the Spine switches’ ID to the Power Control Module to inform that the Spine switches should be deactivated, and sends the Spine switch’s ID to the Routing Module to inform that traffic {{is not to be}} distributed on those Spine switches.|$|R
30|$|FlexRAN [60] is a {{flexible}} and programmable software-defined RAN platform, which separates control {{from the data}} plane through a custom application programming interface (API). The main components are the FlexRAN master controller and the FlexRAN agent. Each agent corresponds to a BS and {{is connected to the}} master controller. The FlexRAN API enables a two-way interaction between agents and the master controller. Agents act as local <b>controllers</b> and <b>send</b> network state information to the master controller. Also, the master <b>controller</b> <b>sends</b> control commands to the agents based on its knowledge of the entire network state.|$|R
50|$|A MIDI {{controller}} is any hardware or {{software that}} generates and transmits Musical Instrument Digital Interface (MIDI) data to electronic or digital MIDI-enabled devices, typically to trigger sounds and control parameters of an electronic music performance. The {{most commonly used}} MIDI controller is the electronic musical keyboard MIDI controller, which has keys that can be pressed. When the keys are pressed, the MIDI <b>controller</b> <b>sends</b> MIDI data about the pitch of the note, the velocity and duration, {{which can be used}} to trigger sounds from a MIDI-compatible sound module or synthesizer.|$|R
40|$|We study a {{networked}} control architecture where wireless sensors {{are used}} to measure and transmit plant outputs to a remote controller. Packet loss probabilities depend upon the time-varying communication channel gains and the transmission powers of the sensors. Within this context, we develop a centralized stochastic nonlinear model predictive controller. It determines the sensor power levels by trading energy expenditure for expected plant state variance. To further preserve sensor energies, the power <b>controller</b> <b>sends</b> coarsely quantized power increment commands only when necessary. Simulations on measured channel data illustrate the performance achieved by the proposed controller...|$|R
