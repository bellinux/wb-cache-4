0|4500|Public
50|$|This {{process is}} the basis of <b>synchronous</b> <b>logic,</b> and the <b>system</b> is also used in digital signal processing.|$|R
40|$|Both {{asynchronous}} and reconfigurable {{techniques are}} likely to become increasingly important in the future due to greater device unreliability and variability at nano-scale dimensions. One promising asynchronous technique, Null Convention Logic (NCL) is a symbolically complete quasi-delay insensitive <b>logic</b> <b>system</b> that is inherently self-determined, locally autonomous and self-synchronizing. As current FPGA devices are set up for clocked <b>synchronous</b> <b>logic</b> they are not well suited to reconfigurable asynchronous systems. A reconfigurable block supporting NCL that is intended to form one component of a FPGA organization is proposed and analyzed. Both single-rail and dual-rail LUTs are described. The block design and layout is described and analyzed using an advanced 45 nm bulk CMOS fabrication process...|$|R
50|$|The {{design of}} {{asynchronous}} logic uses different mathematical models and techniques from <b>synchronous</b> <b>logic,</b> {{and is an}} active area of research.|$|R
40|$|A <b>synchronous</b> <b>logic</b> control based {{three-phase}} boost unity {{power factor}} rectifier unit that {{works as an}} interface to ensure high energy efficiency by reducing reactive power consumption, {{as well as to}} maintain a constant DC-bus voltage. This paper discusses the determination of performance characteristics of Vienna rectifier topology with the <b>synchronous</b> <b>logic</b> based control. Furthermore this enabled the design and development of a three-phase active converter system that was built and tested with the inputs and output. This paper also describes the Vienna Rectifier’s power stage and <b>synchronous</b> <b>logic</b> control technique, with particular emphasis on finding differences between real prototype results and the simulation results. The design and experimental performance of a three-phase PWM rectifier with a power output of 3 kW is presented. The real prototype results confirm with the simulation results...|$|R
5000|$|... #Caption: A 4-bit {{ring counter}} using D-type flip flops {{is an example}} of <b>synchronous</b> <b>logic.</b> Each device is {{connected}} to the clock signal, and update together.|$|R
5000|$|<b>Synchronous</b> <b>logic</b> {{elements}} such as flip-flops have static timing criteria that must be satisfied {{in order for them}} to work correctly. In a system-synchronous clock topology where a skew-aligned clock is fed to all devices, the criteria is ...|$|R
50|$|Nevertherless, most systems need {{circuits}} {{that allow}} external unsynchronized signals to enter <b>synchronous</b> <b>logic</b> circuits. These are inherently asynchronous in their design {{and must be}} analyzed as such. Examples of widely used asynchronous circuits include synchronizer flip-flops, switch debouncers and arbiters.|$|R
5000|$|Synchronous {{designs are}} {{inherently}} easier to test and debug than asynchronous designs. However, {{this position is}} disputed by Fant, who claims that the apparent simplicity of <b>synchronous</b> <b>logic</b> is an artifact of the mathematical models used by the common design approaches.|$|R
5000|$|Digital logic {{designers}} use Gray codes extensively {{for passing}} multi-bit count information between <b>synchronous</b> <b>logic</b> that operates at different clock frequencies. The logic is considered operating in different [...] "clock domains". It {{is fundamental to}} the design of large chips that operate with many different clocking frequencies.|$|R
40|$|Deduction theorem and its weak {{forms in}} {{classical}} mathematical <b>logic</b> <b>system,</b> Łukasiewicz <b>logic</b> <b>system,</b> Gödel <b>logic</b> <b>system,</b> product <b>logic</b> <b>system,</b> and the fuzzy <b>logic</b> <b>system</b> ℒ* are discussed and compared. It is {{pointed out that}} the weak form of deduction theorem in ℒ* has a clear structure and can be employed to define the concept of consistency degrees of finite theories. Moreover, it is clarified that the negation operator of Gödel type is too strong and is therefore unsuitable for establishing fuzzy <b>logic</b> <b>systems.</b> Deduction theorem, fuzzy <b>logic</b> <b>system,</b> consistency degree, almost tautology, almost contradiction...|$|R
40|$|This paper {{provides}} {{research and}} development carried out to apply fuzzy <b>logic</b> <b>system</b> (type 1 and type 2) of image fusion. It covers fuzzy logic operator/operations in context of image fusion. Color and infrared images obtained from Enhanced Vision System prototype are utilized for the study. The fused image is evaluated for various design cases for fuzzy <b>logic</b> <b>system</b> type 1 and Interval type 2 fuzzy <b>logic</b> <b>systems.</b> Based on qualitative and analytical analysis, it is concluded that Interval type 2 fuzzy <b>logic</b> <b>system</b> performs better than fuzzy <b>logic</b> <b>system</b> type 1 and in general Sugeno based fuzzy <b>logic</b> <b>systems</b> are better than Mamdani based fuzzy <b>logic</b> <b>system...</b>|$|R
40|$|This thesis {{reports the}} work of using {{simulated}} annealing to design more efficient fuzzy <b>logic</b> <b>systems</b> to model problems with associated uncertainties. Simulated annealing is used within this work as a method for learning the best configurations of type- 1 and type- 2 fuzzy <b>logic</b> <b>systems</b> to maximise their modelling ability. Therefore, it presents the combination of simulated annealing with three models, type- 1 fuzzy <b>logic</b> <b>systems,</b> interval type- 2 fuzzy <b>logic</b> <b>systems</b> and general type- 2 fuzzy <b>logic</b> <b>systems</b> to model four bench-mark problems including real-world problems. These problems are: noise-free Mackey-Glass time series forecasting, noisy Mackey-Glass time series forecasting and two real world problems which are: the estimation of the low voltage electrical line length in rural towns and the estimation of the medium voltage electrical line maintenance cost. The type- 1 and type- 2 fuzzy <b>logic</b> <b>systems</b> models are compared in their abilities to model uncertainties associated with these problems. Also, issues related to this combination between simulated annealing and fuzzy <b>logic</b> <b>systems</b> including type- 2 fuzzy <b>logic</b> <b>systems</b> are discussed. The thesis contributes to knowledge by presenting novel contributions. The first is a novel approach to design interval type- 2 fuzzy <b>logic</b> <b>systems</b> using the simulated annealing algorithm. Another novelty {{is related to the}} first automatic design of general type- 2 fuzzy <b>logic</b> <b>system</b> using the vertical slice representation and a novel method to overcome some parametrisation difficulties when learning general type- 2 fuzzy <b>logic</b> <b>systems.</b> The work shows that interval type- 2 fuzzy <b>logic</b> <b>systems</b> added more abilities to modelling information and handling uncertainties than type- 1 fuzzy <b>logic</b> <b>systems</b> but with a cost of more computations and time. For general type- 2 fuzzy <b>logic</b> <b>systems,</b> the clear conclusion that learning the third dimension can add more abilities to modelling is an important advance in type- 2 fuzzy <b>logic</b> <b>systems</b> research and should open the doors for more promising research and practical works on using general type- 2 fuzzy <b>logic</b> <b>systems</b> to modelling applications despite the more computations associated with it...|$|R
40|$|Asychronous designs {{have been}} touted as having {{potential}} advantages in average performance, power consumption, modularity, and tolerance of metastability {{as compared to}} traditional <b>synchronous</b> <b>logic.</b> While delayinsensitive (DI) asynchronous circuits are theoretically the most desirable type of asynchronous logic because they make the weakest timing assumptions, the complexity of implementing DI circuits in CMOS or similar technologies may make them impractical to use...|$|R
40|$|Abstract—- This paper {{presents}} {{a method of}} design the counter using sequential system based on synchronous techniques. For the design the counter, first of all, we derive switching algebras and their operations. Also, we obtain the next-state functions, flip-flop excitations and their input functions from the flip-flop. Then, we propose the algorithm which is a method of implementation of the <b>synchronous</b> sequential digital <b>logic</b> circuits. Finally, we apply proposed the sequential <b>logic</b> based on <b>synchronous</b> techniques to counter. Index Terms — sequential <b>logic</b> <b>systems,</b> <b>synchronous</b> techniques, switching algebra, next-state function, flip-flop excitation, counter design...|$|R
40|$|This paper {{proposes a}} way to compile a silicon layout {{directly}} from <b>synchronous</b> <b>logic</b> specification. The motivation for introducing compilation into the silicon world comes from its extreme success in the software world. As we see silicon area increasing and circuit complexity increasing, we might feel {{much in common with}} the early day programmers who faced increasing memory availability along with increasing program complexity...|$|R
50|$|Asynchronous {{sequential}} logic is not synchronized by a clock signal; the outputs of the circuit change directly {{in response to}} changes in inputs. The advantage of asynchronous logic {{is that it can}} be faster than <b>synchronous</b> <b>logic,</b> because the circuit doesn't have to wait for a clock signal to process inputs. The speed of the device is potentially limited only by the propagation delays of the logic gates used.|$|R
50|$|Digital logic {{circuits}} {{can be divided}} into combinational logic, in which the output signals depend only on the current input signals, and sequential logic, in which the output depends both on current input and on past inputs. In other words, sequential logic is combinational logic with memory. Virtually all practical digital devices require sequential logic. Sequential logic {{can be divided into}} two types, <b>synchronous</b> <b>logic</b> and asynchronous logic.|$|R
50|$|<b>Logic</b> <b>systems</b> {{are quite}} easy to design, and can handle very complex operations. Some aspects of <b>logic</b> <b>system</b> design {{make use of}} Boolean logic.|$|R
40|$|In {{this paper}} {{the design and}} {{development}} of a hierarchical fuzzy <b>logic</b> <b>Systems</b> are investigated. A new method using genetic algorithms for design of hierarchical fuzzy <b>logic</b> <b>systems</b> are proposed. This research study is unique in the way proposed method is applied to design and development of hierarchical fuzzy <b>logic</b> <b>systems.</b> The proposed method is then applied to financial modelling and prediction. A hierarchical fuzzy <b>logic</b> <b>system</b> is developed to predict quarterly interest rates in Australia. The new method proposed determines the number of layer in a hierarchical fuzzy <b>logic</b> <b>system.</b> The {{advantages and disadvantages of}} using hierarchical fuzzy <b>logic</b> <b>systems</b> for financial modelling is also considered. Good prediction of quarterly interest rate in Australia is obtained using the above method. The number of fuzzy rule used are reduced dramatically and prediction of interest rate is improved. 1...|$|R
40|$|This paper {{reports the}} use of {{simulated}} annealing to design more efficient fuzzy <b>logic</b> <b>systems</b> to model problems with associated uncertainties. Simulated annealing is used within this work as a method for learning the best configurations of interval and gen- eral type- 2 fuzzy <b>logic</b> <b>systems</b> to maximize their modeling ability. The combination of simulated annealing with these models {{is presented in the}} modeling of four bench- mark problems including real-world problems. The type- 2 fuzzy <b>logic</b> <b>system</b> models are compared in their ability to model uncertainties associated with these problems. Issues related to this combination between simulated annealing and fuzzy logic sys- tems, including type- 2 fuzzy <b>logic</b> <b>systems,</b> are discussed. The results demonstrate that learning the third dimension in type- 2 fuzzy sets with a deterministic defuzzifier can add more capability to modeling than interval type- 2 fuzzy <b>logic</b> <b>systems.</b> This finding can be seen as an important advance in type- 2 fuzzy <b>logic</b> <b>systems</b> research and should increase the level of interest in the modeling applications of general type- 2 fuzzy <b>logic</b> <b>systems,</b> despite their greater computational load...|$|R
40|$|Abstract- In {{this paper}} a novel method for {{designing}} hierarchical fuzzy <b>logic</b> <b>Systems</b> are investigated. A new method using genetic algorithms for design of hierarchical fuzzy <b>logic</b> <b>systems</b> are proposed. The proposed method is then applied to financial modelling and prediction. A hierarchical fuzzy <b>logic</b> <b>system</b> is developed to predict quarterly {{interest rates in}} Australia. The new method proposed determines the number of layer in a hierarchical fuzzy <b>logic</b> <b>system.</b> The {{advantages and disadvantages of}} using hierarchical fuzzy <b>logic</b> <b>systems</b> for financial modelling is also considered. Good prediction of quarterly interest rate in Australia is obtained using the above method. The number of fuzzy rule used are reduced dramatically and prediction of interest rate is improved...|$|R
40|$|This paper {{describes}} a prototype which extends a <b>logic</b> <b>system</b> into a useful design tool {{to aid in}} designing pedestrian walkways. A highly interactive program, I-Walkways demonstrates how a <b>logic</b> <b>system</b> can meaningfully aid with design. This technique will allow the designer and the <b>logic</b> <b>system</b> to work harmoniously together to reach a good design solution...|$|R
40|$|AbstractSome {{properties}} of the roots of theories, {{and the relationship between}} the sets D(Γ) of all conclusions of two different theories in the classical propositional <b>logic</b> <b>system,</b> Łukasiewicz propositional <b>logic</b> <b>system,</b> and the R 0 -propositional <b>logic</b> <b>system</b> are studied. It is proved that D(Γ) is completely determined by its root whenever Γ has a root, and the construction of the roots is given...|$|R
40|$|A <b>logic</b> <b>system</b> S {{describing}} a world W contains certain semantic information about W. The quantity of the information, {{and the information}} value of a formula ff relative to S are introduced in this paper. A close relationship is revealed between the information of S and the cardinality of the set of its models. Then the evidence of a formula ff given by S is introduced {{as a basis for}} reasoning about evidences. If S is a propositional <b>logic</b> <b>system</b> with finite models, the relationship has been discussed completely by Lozinskii. But if S is a predicate <b>logic</b> <b>system,</b> then the cardinal number of the set of its models is normally infinite. In this paper we introduce a method of selecting a finite subset of all the models of the predicate <b>logic</b> <b>system</b> for estimating evidence and generalizing Lozinskii's approach from propositional <b>logic</b> <b>systems</b> to predicate <b>logic</b> <b>systems</b> using a finite Herbrand universe. This paper has also proved that the limite of evidence is convergent when the siz [...] ...|$|R
40|$|In this paper, {{the formal}} triple I {{inference}} method based on <b>logic</b> <b>system</b> W* UL is investigated. Firstly, a new complete formal system W* UL, {{which is the}} schematic extension of uninorm <b>logic</b> <b>system</b> UL, is given. A complete many-sorted first-order formal system W * UL ms for fuzzy predicate logic is structured. Secondly, triple I solutions (including FMP-solutions, FMT-solutions) based on <b>logic</b> <b>system</b> W * UL are given. Lastly, triple I algorithms are formalized in <b>logic</b> <b>system</b> * ∀ W UL ms, and the strict logic proof of triple I algorithms are given. Moreover, the reductivities of the triple I algorithms are proved...|$|R
40|$|Abstract. Combining {{both kinds}} of fuzzy logic forms {{including}} fuzzy T-S model and adaptive fuzzy <b>logic</b> <b>systems,</b> this paper presents an adaptive control scheme for a class of nonlinear systems. Firstly, the fuzzy T-S model is used to approximate the nonlinear systems, and the fuzzy control law of the fuzzy model is derived by the linear matrix inequality. Secondly, the adaptive fuzzy <b>logic</b> <b>systems</b> are constructed, and the modeling errors are eliminated by a compensator based on the adaptive fuzzy <b>logic</b> <b>systems</b> with three adjustable parameters: weights, centers and widths. It is proved that the closed loop system satisfies the anticipant performance. The simulation results demonstrate that the control scheme is effective. Keywords: fuzzy T-S model, adaptive fuzzy <b>logic</b> <b>systems,</b> nonlinear systems...|$|R
40|$|In this study, a {{simplified}} fuzzy <b>logic</b> <b>system</b> with uniform partitions in the input space is proposed for forecasting the daily streamflow of four river systems in Malaysia. The proposed simplified fuzzy <b>logic</b> <b>system</b> was calibrated (trained) using back-propagation (BP) and recursive prediction error (RPE) algorithms. For each catchment, the calibration data set {{consisted of three}} consecutive years of daily rainfall and streamflow records. Verifications of the calibrated models were done using the data set of the following year. The performances of the simplified fuzzy <b>logic</b> <b>system</b> and the normal fuzzy <b>logic</b> <b>system</b> are compared, with each model having {{the same number of}} adjustable parameters. The results are also compared with the auto-regressive with exogenous input model. This study has shown that the proposed RPE algorithm performed better than the more popular BP algorithm. The results show that all the simplified fuzzy <b>logic</b> <b>system</b> models registered better performance measures for the calibration data sets. However, variable results were obtained for the predictions of the verification data sets...|$|R
40|$|CSP {{channels}} are proposed {{as a means}} of developing high-level, asynchronous pipeline architectures over and above existing <b>synchronous</b> <b>logic.</b> Channel-based design allows hardware systems to be designed and constructed using top-down software engineering methods, which have not previously been available within hardware-software co-design. The intention is to enhance support for future large-scale co-designs. The design methodology and its performance implications are demonstrated through an exemplar, pipelined design of the Karhunen-Love Transform (KLT) algorithm, implemented using the Handel-C silicon compiler applied to dense FPGAs. 2...|$|R
40|$|Prototypes are {{invaluable}} {{for studying}} special purpose parallel architectures and custom computing. This paper de-scribes a new FPGA, called Plasma — {{the heart of}} a configur-able custom computing engine (Teramac) that can execute <b>synchronous</b> <b>logic</b> designs up to one million gates at rates up to one megahertz. Plasma FPGA’s using 0. 8 micron CMOS are packaged in large multichip modules (MCMs). A large custom circuit may be mapped onto the hardware in approximately two hours, without user intervention. Plasma introduces some inno-vative architecture concepts including hardware support for large multiported register files...|$|R
40|$|As {{a result}} of the {{increasing}} limitations and growing complexity of semi-custom synchronous design, asynchronous circuits are gaining interest. Asynchronous Systems when combined with the local <b>synchronous</b> <b>logic</b> have provoked renewed interest over recent years, as they have the potential to combine the benefits of asynchronous and synchronous design paradigms, in this paper a new technique using FIFO in order to overcome the limitation on timing imposed by slow routing is proposed. FIFOs are often used to safely pass data from one clock domain to another asynchronous clock domain...|$|R
40|$|In {{this paper}} {{we present a}} {{formulation}} for the problem of optimizing <b>synchronous</b> <b>logic</b> across register boundaries. We describe the degrees of freedom (i. e. the don't care conditions) of an embedded subnetwork by means of sets of execution traces, described implicitly by Synchronous Recurrence Equations. The optimization problem reduces to that of finding minimum-cost solutions to such equations. An exact solution algorithm for this problem is presented, along with approximations that improve its computational efficiency. Eventually, we demonstrate the feasibility and effectiveness of the approach on synchronous benchmark circuits...|$|R
40|$|A new fuzzy {{inference}} technique {{is presented to}} replace the conventional {{fuzzy inference}} process of type- 2 fuzzy <b>logic</b> <b>systems.</b> Because conventional type- 2 fuzzy <b>logic</b> <b>systems</b> demand {{a large amount of}} memory, they cannot be used by most embedded systems, which do not have enough memory space. To overcome this problem, a new fuzzy inference technique for singleton type- 2 fuzzy <b>logic</b> <b>systems</b> is presented in this paper which designs mapping functions from input variables to firing sets and brings out the firing sets directly without using as much memory...|$|R
40|$|Fuzzy {{logic is}} {{shown to be a}} very {{promising}} mathematical approach for modelling traffic and transportation processes characterized by subjectivity, ambiguity, uncertainty and imprecision. The basic premises of fuzzy <b>logic</b> <b>systems</b> are presented as well as a detailed analysis of fuzzy <b>logic</b> <b>systems</b> developed to solve various traffic and transportation planning problems. Emphasis is put on the importance of fuzzy <b>logic</b> <b>systems</b> as universal approximators in solving traffic and transportation problems. This paper presents an analysis of the results achieved using fuzzy logic to model complex traffic and transportation processes...|$|R
40|$|Abstract: Safety is an {{important}} issue among the properties of high-assurance software and the verification methods for software to meet safety policies are one of the hot research. In terms of our sketch of design and verification of safety programs, we design a pointer <b>logic</b> <b>system</b> for a subset of C-like language. This <b>logic</b> <b>system</b> is an extension of Hoare <b>logic</b> <b>system</b> and inference rules are designed to express the modification of pointer information for every kind of statements. It can be used for accurate pointer analysis of pointer programs. The information from the analysis can be used to verify if pointer programs satisfy the side conditions of typing rules and then support safety verification for programs. The <b>logic</b> <b>system</b> {{can also be used to}} verify other properties of pointer programs...|$|R
40|$|In this thesis, an {{intelligent}} fuzzy <b>logic</b> <b>system</b> using genetic algorithms for the prediction and modelling {{of interest rates}} is developed. The proposed system uses a Hierarchical Fuzzy <b>Logic</b> <b>system</b> in which a genetic algorithm {{is used as a}} training method for learning the fuzzy rules knowledge bases. A fuzzy <b>logic</b> <b>system</b> is developed to model and predict three month quarterly interest rate fluctuations. The system is further trained to model and predict interest rates for six month and one year periods. The proposed system is developed with first two, three, then four and finally five hierarchical knowledge bases to model and predict interest rates. A Feed Forward Fuzzy <b>Logic</b> <b>system</b> using fuzzy <b>logic</b> and genetic algorithms is developed to predict interest rates for three months periods. A back-propagation Hierarchical Neural Network system is further developed to predict interest rates for three months, six months and one year periods. These two systems are then compared with the Hierarchical Fuzzy <b>Logic</b> <b>system</b> results and conclusions on their accuracy of prediction are compared...|$|R
40|$|Binary {{logic and}} devices {{have been in}} used since {{inception}} with advancement and technology and millennium gate design era. The development in binary logic has become tedious and cumbersome. Multivalued logic enables significant more information to be packed within a single digit. The design and development of logic circuit becomes very compact and easier. Attempts are being made to fabricate multivalued logic based devices. Since present devices can be implemented only in binary system,it is necessary to evolve a system that can built the circuit in multivalued <b>logic</b> <b>system</b> and convert in binary <b>logic</b> <b>system.</b> In multivalued <b>logic</b> <b>system</b> <b>logic</b> gates differ in different <b>logic</b> <b>system,</b> a quaternary has become mature in terms of logic algebra and gates. Hence logic design based on above system can be done using standard procedure. In this dissertation a logic circuit design entry based on multivalued <b>logic</b> <b>system</b> has been taken up that can provide the ease of circuit design in multivalued system and output as binary valued circuit. The named "MVL-DEV" offers editing, storage and conversion into binary facility. Comment: 72 pages,Dissertation Repor...|$|R
