10000|10000|Public
5|$|After this, a pizza eating {{contest between}} WWE Tag Team Champions Matt Hardy and Montel Vontavious Porter (MVP) {{occurred}} in the ring. Tazz was the host and Maria and Melina were the judges. In order to win the competition, one competitor had to eat more <b>slices</b> of pizza than the opponent in two minutes. Hardy finished two <b>slices</b> in the time limit and then proceeded to vomit on MVP, who didn't finish any, which won Hardy the competition.|$|E
5|$|An {{operculum}} (lid) {{over the}} end of the cnida. The lid may be a single hinged flap or three flaps arranged like <b>slices</b> of pie.|$|E
5|$|Go's sort {{standard}} library package {{contains the}} functions Search, SearchInts, SearchFloat64s, and SearchStrings, which implement general binary search, {{as well as}} specific implementations for searching <b>slices</b> of integers, floating-point numbers, and strings, respectively.|$|E
40|$|Abstract: Y 172 fiber <b>slicer</b> (also says Hartz <b>slicer)</b> {{is often}} used in <b>slicing</b> fiber in fabric inspection. However, there are some {{problems}} {{for this kind of}} <b>slicer,</b> such as low success, low efficiency, poor safety and so on. A new fiber automatic <b>slicing</b> instrument is proposed in this paper. Some creative designs are done, in aspects of <b>slicing</b> thickness adjustment, automatic fiber cutting, blade constant clamping and gravity pressure. This fiber <b>slicing</b> instrument changed traditional <b>slicing</b> method, and effectively resolved the problems of Y 172 fiber <b>slicer.</b> A reliable and efficient instrument is provided for fast and accurate <b>slicing</b> fiber...|$|R
50|$|A meat <b>slicer,</b> {{also called}} a <b>slicing</b> machine, deli <b>slicer</b> {{or simply a}} <b>slicer,</b> is a tool used in butcher shops and delicatessens to <b>slice</b> meats, sausages, cheeses and other deli products. Older models of meat <b>slicer</b> may be {{operated}} by crank, while newer ones generally use an electric motor. While the <b>slicer</b> is traditionally a commercial apparatus, domestic use versions are also marketed.|$|R
30|$|Time-equivalent {{stratigraphy}} is {{the foundation}} for sedimentary analysis. Among the several <b>slicing</b> techniques commonly used at present, stratal <b>slicing</b> is closer to time-equivalent interfaces than time <b>slicing</b> and horizon <b>slicing.</b> However, even stratal <b>slicing</b> is prone to diachroneity.|$|R
5|$|A {{significant}} proportion of food waste is produced by the domestic household, which, in 2007, created 6,700,000 tonnes of food waste. Potatoes, bread <b>slices</b> and apples are respectively the most wasted foods by quantity, while salads are thrown away in the greatest proportion. A majority of wasted food is avoidable, with the rest being divided almost equally by foods which are unavoidable (e.g. tea bags) and unavoidable due to preference (e.g. bread crusts) or cooking type (e.g. potato skins).|$|E
5|$|Although the {{ingredients}} of the BLT have existed for many years, {{there is little evidence}} of BLT sandwich recipes prior to 1900. In the 1903 Good Housekeeping Everyday Cook Book, a recipe for a club sandwich included bacon, lettuce, tomato, mayonnaise and a slice of turkey sandwiched between two <b>slices</b> of bread. Whilst the 1929 book Seven Hundred Sandwiches does include a section on bacon sandwiches, the recipes often include pickles and none contain tomato.|$|E
5|$|In 1989, {{the unit}} {{closest to the}} {{mountain}} housed Ristorante. It became International Street Pizza Pizza in 1998, and as of 2013 is known as Ristorante Pizza Pizza. The location sells more individual pizza <b>slices</b> than any other Pizza Pizza location in Ontario, despite only being open 130 days a year. Splash Works and Planet Snoopy also feature locations of the chain.|$|E
40|$|When we try {{to debug}} a large program eectively, it is very {{important}} to separate a suspicious program portion from the overall source program. Pro-gram <b>slicing</b> is a promising technique to extract a program portion; however, it remains diÆcult issues. Static <b>slicing</b> sometimes produces a large portion of the source program, especially for a program with arrays and pointers. Dynamic <b>slicing</b> requires unacceptably huge run-time overhead. In this pa-per, we discuss intermediate semi-dynamic methods between static and dy-namic <b>slicing.</b> We propose two <b>slicing</b> methods named call-mark <b>slicing</b> and dependence-cache <b>slicing.</b> These algorithms have been implemented in our experimental <b>slicing</b> system, and execution data for several sample programs have been collected. The result shows that call-mark <b>slicing</b> reduces the <b>slice</b> size by about 10 { 20 % from the static <b>slice</b> size, with very little overhead increase. Also, dependence-cache <b>slice</b> reduces by about 30 { 90 %, even for programs using arrays, with aordable run-time overhead increase. These <b>slicing</b> methods will be important features for eective debugging environ-ments...|$|R
40|$|Program <b>Slicing</b> is {{the process}} of {{deleting}} statements in a program that do not affect a given set of variables at a chosen point in the program. In this paper the first parallel <b>slicing</b> algorithm for static program <b>slicing</b> is introduced. It is shown how the control flow graph of the program to be <b>sliced</b> is converted into a network of concurrent processes, thereby producing a parallel version of Weiser's original static <b>slicing</b> algorithm. The parallel <b>slicing</b> algorithm is formally defined as the least solution (containing the <b>slicing</b> criterion) of a set of recursion equations, derived from the program's control flow graph and is proved correct with respect to Weiser's algorithm. The parallel <b>slicing</b> algorithm has a number of other interesting and potentially useful properties. For example, in addition to constructing a <b>slice,</b> it produces a set of equivalent <b>slicing</b> criteria for the <b>slice</b> it constructs. 1 Introduction A <b>slice</b> of a program p is constructed with respect to a <b>slicing</b> crite [...] ...|$|R
50|$|In {{addition}} to the <b>slice</b> length and the macroblock address of the 1st macroblock (MB) of the <b>slice,</b> the <b>slice</b> parser (Figure 4) need to extract the <b>Slice</b> Group (SG) of each <b>slice.</b> These informations, together with the <b>slice</b> itself, are stored in DRAM. As in the ASO case, the list of pointers (Figure 4) should be generated.|$|R
5|$|Python has array {{index and}} array slicing {{expressions}} on lists, denoted as a, a or a. Indexes are zero-based, and negative indexes are {{relative to the}} end. <b>Slices</b> take elements from the start index up to, but not including, the stop index. The third slice parameter, called step or stride, allows elements to be skipped and reversed. Slice indexes may be omitted, for example a returns {{a copy of the}} entire list. Each element of a slice is a shallow copy.|$|E
5|$|Shakshouka, {{originally}} a workman’s breakfast popularized by North African Jews in Israel, is made simply of fried eggs in spicy tomato sauce, with other vegetable ingredients or sausage optional. Shakshouka is typically {{served in the}} same frying pan {{in which it is}} cooked, with thick <b>slices</b> of white bread to mop up the sauce, and a side of salad. Modern variations include a milder version made with spinach and feta without tomato sauce, and hot chili shakshouka, a version that includes both sweet and hot peppers and coriander.|$|E
5|$|Croneman {{claims to}} be the mightiest barbarian of the {{northern}} tribes and honorary chief of the savage bezerkers of Nid. Known also as Amoron, the Wombat, he is a slayer, a reaver, a corsair, a usurper, and a conqueror. Depicted as resembling Schwarzenegger, he is also a bodybuilder with a very silly accent. On first meeting Croneman, Thrud <b>slices</b> him in half with a sword. When Croneman returns to join a group of mercenaries fighting The Black Currant in Thrud the Destroyer, he is depicted with a line of sutures running down the middle of his face and chest.|$|E
40|$|AbstractThis paper {{presents}} {{a theory of}} dynamic <b>slicing,</b> which reveals {{that the relationship between}} static and dynamic <b>slicing</b> is more subtle than previously thought. The definitions of dynamic <b>slicing</b> are formulated in terms of the projection theory of <b>slicing.</b> This shows that existing forms of dynamic <b>slicing</b> contain three orthogonal dimensions in their <b>slicing</b> criteria and allows for a lattice-theoretic study of the subsumption relationship between these dimensions and their relationship to static <b>slicing</b> formulations...|$|R
40|$|The {{economics}} and sensitivities of <b>slicing</b> large diameter silicon ingots for photovoltaic applications were examined. Current {{economics and}} <b>slicing</b> add on cost sensitivities are calculated using variable parameters for blade life, <b>slicing</b> yield, and <b>slice</b> cutting speed. It is indicated that cutting speed has {{the biggest impact}} on <b>slicing</b> add on cost, followed by <b>slicing</b> yield, and by blade life as the blade life increases...|$|R
40|$|Program <b>slice</b> {{is a set}} of {{statements}} that affect the value of variable v in a statement s. In order to calculate a program <b>slice,</b> we must know the dependence relations between statements in the program. Program <b>slicing</b> techniques are roughly divided into two categories, static <b>slicing</b> and dynamic <b>slicing,</b> and we have proposed DC <b>slicing</b> technique which uses both static and dynamic information...|$|R
5|$|Fresh fish {{is readily}} available, caught off Israel's coastal {{areas of the}} Mediterranean and the Red Sea, or in the Sea of Galilee, or raised in ponds {{in the wake of}} {{advances}} in fish farming in Israel. Fresh fish is served whole, in the Mediterranean style, grilled, or fried, dressed only with freshly squeezed lemon juice. Trout (called forel), gilthead seabream (called denisse), St. Peter's fish (known as 'musht') and other fresh fish are prepared this way. Fish are also eaten baked, with or without vegetables, or fried whole or in <b>slices,</b> or grilled over coals, and served with different sauces.|$|E
5|$|Mizrahi cuisine, {{the cuisine}} of Jews from North Africa, {{features}} grilled meats, sweet and savory puff pastries, rice dishes, stuffed vegetables, pita breads and salads, and shares many similarities with Arab cuisine. Other North African dishes popular in Israel include couscous, shakshouka, matbucha, carrot salad and chraime (<b>slices</b> of fish cooked in a spicy tomato sauce). Sephardic dishes, with Balkan and Turkish influences incorporated in Israeli cuisine include burekas, yogurt and taramosalata. Yemenite Jewish foods include jachnun, malawach, skhug and kubane. Iraqi dishes popular in Israel include amba, {{various types of}} kubba, stuffed vegetables (mhasha), kebab, sambusac, sabich and pickled vegetables (hamutzim).|$|E
5|$|The cake can be {{prepared}} with clementines and/or clementine zest mixed in the batter, with them atop the cake, such as in <b>slices,</b> and in both ways. The seeds and membrane of the clementine can be removed {{as part of the}} preparation process, or seedless clementines can be used. Whole, sliced clementines including the peel, or peeled clementines can be used, and the clementines can be cooked before being used in the cake batter. The fruit can be chopped or blended using a food processor. Candied clementines can be used atop the cake or as a garnish. The almonds used can be toasted or blanched.|$|E
40|$|Stop list <b>slicing</b> modifies {{traditional}} program <b>slicing</b> by augmenting the <b>slicing</b> criterion {{to include}} variables {{that are not}} of interest (in addition to those that are of interest). The dependence analysis of <b>slicing</b> is terminated when it encounters an assignment to a variable in the stop list. Stop list <b>slicing</b> focuses on the computation of interest, while ignoring computation that {{is known to be}} uninteresting. This has the potential to reduce <b>slice</b> size when compared to traditional forms of <b>slicing...</b>|$|R
40|$|This paper {{presents}} a simple interprocedural algorithm for amorphous <b>slicing</b> and illustrates {{the way in}} which interprocedural amorphous <b>slicing</b> improves upon interprocedural syntax{preserving <b>slicing.</b> The paper also presents results from an empirical study of an implementation of this algorithm for Ward's Wide Spectrum Language, WSL. The implementation uses the FermaT transformation workbench. It combines FermaT transformations with the results produced by a syntax-preserving <b>slicer</b> for WSL. Finally, it is shown that the combination of amorphous <b>slicing</b> and conditioned <b>slicing</b> can be particularly attractive, by combining results from the amorphous <b>slicer</b> with results from a prototype conditioned <b>slicer</b> for WSL...|$|R
30|$|The {{resources}} layer contains {{both physical}} and logical resources. The network <b>slice</b> instance can consist of sub-network instances, which can be shared with multiple network <b>slice</b> instances. The network <b>slice</b> instance is defined by a Network <b>Slice</b> Blueprint. For creating every network <b>slice</b> instance are required dedicated polices and configurations.|$|R
5|$|The {{single largest}} {{producer}} of food {{waste in the}} United Kingdom is the domestic household. In 2007, households created 6,700,000 tonnes of food waste – accounting for 19 per cent of all municipal solid waste. Potatoes account for the largest quantity of avoidable food disposed of; 359,000 tonnes per year are thrown away, 49 per cent (177,400 tonnes) of which are untouched. Bread <b>slices</b> account for the second food type most disposed of (328,000 tonnes per year), and apples the third (190,000 tonnes per year). Salad is disposed of in the greatest proportion - 45 per cent of all salad purchased by weight will be thrown away uneaten.|$|E
5|$|The {{two people}} fencing {{take off their}} masks, which reveal them to be Madonna and her doppelgänger {{surprised}} to see each other; they resume their violent fighting. The black Madonna <b>slices</b> across the white Madonna's stomach, which is mirrored in the imprisoned Madonna's stomach in the chamber. She rides on a hanging chain from the ceiling and smashes a mirror across the wall. The black Madonna breaks open a dark room by throwing the white Madonna against the wall. Different artifacts from the Bond films {{are present in the}} room and the two Madonna's fight through them. Meanwhile, the Madonna in the torture chamber wears phylacteries around her arm while hiding behind an electric chair.|$|E
25|$|Web <b>Slices</b> are {{snippets of}} the entire page to which a user can subscribe. Web <b>Slices</b> will be kept updated by the browser automatically, and can be viewed {{directly}} from the Favorites bar, complete with graphics and visuals. Developers can mark parts of the pages as Web <b>Slices,</b> using the hAtom and hSlice microformat. Web <b>Slices</b> have been compared to Active Desktop, introduced in Internet Explorer 4 in 1997.|$|E
40|$|Program {{understanding}} {{is an important}} aspect in Software Maintenance and Reengineering. Understanding the program is related to execution behaviour and relationship of variable involved in the program. The task of finding all statements in a program that directly or indirectly influence the value for an occurrence of a variable gives the set of statements that can affect {{the value of a}} variable at some point in a program is called a program <b>slice.</b> Program <b>slicing</b> is a technique for extracting parts of computer programs by tracing the programs' control and data flow related to some data item. This technique is applicable in various areas such as debugging, program comprehension and understanding, program integration, cohesion measurement, re-engineering, maintenance, testing where it is useful to be able to focus on relevant parts of large programs. This paper focuses on the various <b>slicing</b> techniques (not limited to) like static <b>slicing,</b> quasi static <b>slicing,</b> dynamic <b>slicing</b> and conditional <b>slicing.</b> This paper also includes various methods in performing the <b>slicing</b> like forward <b>slicing,</b> backward <b>slicing,</b> syntactic <b>slicing</b> and semantic <b>slicing.</b> The <b>slicing</b> of a program is carried out using Java which is a object oriented programming language...|$|R
40|$|Conditioned <b>slicing</b> is {{a source}} code {{extraction}} technique. The extraction is performed {{with respect to a}} <b>slicing</b> criterion which contains a set of variables and conditions of interest. Conditioned <b>slicing</b> removes the parts of the original program which cannot affect the variables at the point of interest, when the conditions are satisfied. This produces a conditioned <b>slice,</b> which preserves the behaviour of the original with respect to the <b>slicing</b> criterion. Conditioned <b>slicing</b> has applications in source code comprehension, reuse, restructuring and testing. Unfortunately, implementation is not straightforward because the full exploitation of conditions requires the combination of symbolic execution, theorem proving and traditional static <b>slicing.</b> Hitherto, this difficultly has hindered development of fully automated conditioning <b>slicing</b> tools. This paper describes the first fully automated conditioned <b>slicing</b> system, ConSIT, detailing the theory that underlies it, its architecture and the way it combines symbolic execution, theorem proving and <b>slicing</b> technologies. The use of ConSIT is illustrated with respect to the applications of testing and comprehension. key words: Conditioned <b>Slicing,</b> program conditioning, <b>slicing,</b> symbolic execution, path analysi...|$|R
40|$|Current <b>slicing</b> {{techniques}} cannot handle systems {{written in}} multiple programming languages. Observation-Based <b>Slicing</b> (ORBS) is a language-independent <b>slicing</b> technique capable of <b>slicing</b> multi-language systems, including systems which contain (third party) binary components. A potential <b>slice</b> obtained through repeated statement deletion is validated by observing the behaviour of the program: if the <b>slice</b> and original program behave the same under the <b>slicing</b> criterion, the deletion is accepted. The resulting <b>slice</b> {{is similar to}} a dynamic <b>slice.</b> We evaluate five variants of ORBS on ten programs of different sizes and languages showing that it is less expensive than similar existing techniques. We also evaluate it on bash and four other systems to demonstrate feasible large-scale operation in which a parallelised ORBS needs up to 82 % less time when using four threads. The results show that an ORBS <b>slicer</b> is simple to construct, effective at <b>slicing,</b> and able to handle systems written in multiple languages without specialist analysis tools...|$|R
25|$|In mid-February 2012, McDonald's has {{introduced}} the Happy Meals/Mighty Kids Meals {{so that they}} now come with either a Hamburger, Cheeseburger, 4 piece Chicken McNuggets, McDouble or the 6-piece Chicken McNuggets with a smaller version of the small fry for the Happy Meal or a small fry for a Mighty Kids Meal. All kids meals now come with fries, apple <b>slices</b> and a toy. The apple <b>slices</b> have been reduced from 8 <b>slices</b> to only 4 and no longer come with caramel dipping sauce.|$|E
25|$|In 1968, Sonic {{introduced}} the Pickle-O's, fried pickle <b>slices.</b>|$|E
25|$|The {{first step}} in {{preprocessing}} is conventionally slice timing correction. The MR scanner acquires different <b>slices</b> within a single brain volume at different times, and hence the <b>slices</b> represent brain activity at different timepoints. Since this complicates later analysis, a timing correction is applied to bring all <b>slices</b> to the same timepoint reference. This is done by assuming the timecourse of a voxel is smooth when plotted as a dotted line. Hence the voxel's intensity value at other times not in the sampled frames can be calculated by filling in the dots to create a continuous curve.|$|E
40|$|This paper uses a {{projection}} theory of <b>slicing</b> to formalize {{the definition of}} executable dynamic and forward program <b>slicing.</b> Previous definitions, when given, have been operational, and previous descriptions have been algorithmic. The projection framework is used to provide a declarative formulation {{in terms of the}} different equivalences preserved by the different forms of <b>slicing.</b> The analysis of dynamic <b>slicing</b> reveals that the <b>slicing</b> criterion introduced by Korel and Laski contains three inter-woven criteria. It is shown how these three conceptually distinct criteria can be disentangled to reveal two new criteria. The analysis of dynamic <b>slicing</b> also reveals that the subsumes relationship between static and dynamic <b>slicing</b> is more intricate that previous authors have claimed. Finally, the paper uses the projection theory to investigate theoretical properties of forward <b>slicing.</b> This is achieved by first re-formulating forward <b>slicing</b> to provide an executable forward <b>slice.</b> This definition allows for formal investigation of the relationship between forward and backward <b>slicing.</b> 1...|$|R
40|$|Program <b>slicing</b> is {{a program}} {{analysis}} and transformation technique that has been successfully applied {{in a wide range}} of applications including program comprehension, debugging, maintenance, testing, and verification. However, there are only a few full-featured implementations of program <b>slicing</b> that are available for industrial applications or academic research. In particular, very little tool support exists for <b>slicing</b> programs written in modern object-oriented languages such as Java, C#, or C++. In this paper, we present Indus – a robust framework for analysis and <b>slicing</b> of concurrent Java programs, and Kaveri – a feature-rich Eclipse-based GUI for Indus <b>slicing.</b> For Indus, we describe the underlying tool architecture, analysis components, and program dependence capabilities required for <b>slicing.</b> In addition, we present a collection of advanced features useful for effective <b>slicing</b> of Java programs including calling-context sensitive <b>slicing,</b> scoped <b>slicing,</b> control <b>slicing,</b> and chopping. For Kaveri, we discuss the design goals and basic capabilities of a graphical presentation of <b>slicing</b> information that is integrated into a Java development environment...|$|R
40|$|Abstract Program <b>slicing</b> can be {{effectively}} used to debug, test, analyze, understand and maintain object-oriented software. In this paper, a new <b>slicing</b> model is proposed to <b>slice</b> Java programs {{based on their}} inherent hierarchical feature. The main idea of hierarchical <b>slicing</b> is to <b>slice</b> programs in stepwise way, from package level, to class level, method level, and finally up to statement level. Stepwise <b>slicing</b> algorithm and the related graph reachable algorithms are presented, {{the architecture of the}} Java program analyzing Tool (JATO) based on hierarchical <b>slicing</b> model is provided, and a case study is also given. Key words: program <b>slicing,</b> object-oriented programming, program dependence graph...|$|R
