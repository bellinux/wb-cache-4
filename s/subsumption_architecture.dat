188|27|Public
25|$|Agent {{architectures}} {{and cognitive}} architectures: Researchers have designed systems to build intelligent systems out of interacting intelligent agents in a multi-agent system. A system with both symbolic and sub-symbolic components is a hybrid intelligent system, {{and the study}} of such systems is artificial intelligence systems integration. A hierarchical control system provides a bridge between sub-symbolic AI at its lowest, reactive levels and traditional symbolic AI at its highest levels, where relaxed time constraints permit planning and world modelling. Rodney Brooks' <b>subsumption</b> <b>architecture</b> was an early proposal for such a hierarchical system.|$|E
2500|$|<b>Subsumption</b> <b>{{architecture}}</b> [...] robot {{architecture that}} uses a modular, bottom-up design beginning with the least complex behavioral tasks.|$|E
2500|$|At {{its lowest}} levels, the RMA can be {{implemented}} as a <b>subsumption</b> <b>architecture,</b> in which the world model is mapped directly to the controlled process or real world, avoiding {{the need for a}} mathematical abstraction, and in which time-constrained reactive planning {{can be implemented}} as a finite state machine. [...] Higher levels of the RMA however, may have sophisticated mathematical world models and behavior implemented by automated planning and scheduling. [...] Planning is required when certain behaviors cannot be triggered by current sensations, but rather by predicted or anticipated sensations, especially those that come about as result of the node's actions.|$|E
5000|$|<b>Subsumption</b> <b>architectures,</b> {{developed}} e.g. by Rodney Brooks (though {{it could}} be argued whether they are cognitive).|$|R
50|$|Copycat differs {{considerably}} {{in many respects}} from other cognitive architectures such as ACT-R, Soar, DUAL, Psi, or <b>subsumption</b> <b>architectures.</b>|$|R
40|$|Abstract â€” Reactive {{agents are}} an {{important}} part of video games and numerous tools have emerged to facilitate the rapid construction of such agents. While the ability of the commonly used reactive techniques to express agent specifications is roughly equivalent, the authorial burden of constructing these specifications varies. In practice, this means that identical agent behavior may be more difficult to create in some architectures than others. In this paper we introduce the notion of representational complexity that relates to the authorial burden of constructing such agents and theoretically compare the representational complexity of finite state machines, behavior trees, and <b>subsumption</b> <b>architectures.</b> Our key finding is that hierarchical <b>subsumption</b> <b>architectures</b> have significantly lower representational complexity as compared to hierarchical finite state machines and behavior trees, which makes subsumption the best choice when developing authoring tools for non-expert users. I...|$|R
2500|$|<b>Subsumption</b> <b>architecture</b> is a {{methodology}} for developing artificial intelligence that is heavily associated with behavior based robotics. [...] This architecture {{is a way}} of decomposing complicated intelligent behavior into many [...] "simple" [...] behavior modules, which are in turn organized into layers. Each layer implements a particular goal of the software agent (i.e. system as a whole), and higher layers are increasingly more abstract. Each layer's goal subsumes that of the underlying layers, e.g. the decision to move forward by the eat-food layer takes into account the decision of the lowest obstacle-avoidance layer. Behavior need not be planned by a superior layer, rather behaviors may be triggered by sensory inputs and so are only active under circumstances where they might be appropriate.|$|E
50|$|<b>Subsumption</b> <b>{{architecture}}</b> is {{a control}} architecture that was proposed {{in opposition to}} traditional AI, or GOFAI. Instead of guiding behavior by symbolic mental representations of the world, <b>subsumption</b> <b>architecture</b> couples sensory information to action selection in an intimate and bottom-up fashion.|$|E
50|$|Allen was a robot {{introduced}} by Rodney Brooks {{and his team}} in the late 1980s, and was their first robot based on <b>subsumption</b> <b>architecture.</b> It had sonar distance and odometry on board, and used an offboard lisp machine to simulate <b>subsumption</b> <b>architecture.</b> It resembled a footstool on wheels.|$|E
40|$|This paper {{describes}} {{ongoing investigations}} into the subsumption control of robots. <b>Subsumption</b> <b>architectures</b> are a relatively new and simple approach to the control of robot systems. The technique {{has been applied to}} the control of experimental mobile robots. Some of the potential benefits of subsumption control over classical robot control techniques may prove useful in the context of industrial robotics...|$|R
50|$|Stiquito was {{developed}} by Jonathan W. Mills of Indiana University as an inexpensive vehicle for his research. He soon found its applications extended to educational uses. It {{has been used to}} introduce students to the concepts of analogue electronics, digital electronics, computer control, and robotics. It has also been used for advanced topics such as <b>subsumption</b> <b>architectures,</b> artificial intelligence, and advanced computer architecture.|$|R
40|$|This paper {{presents}} {{the design and}} implementation of a biologically inspired four legged walking robot, with {{a certain level of}} comparable complexities and similarities to its biological counterpart. A four-phase walking strategy inspired from four legged animals has been proposed and implemented in the robot. Four parallel <b>Subsumption</b> <b>Architectures</b> and a simple Central Pattern Generator are used in the robot for physical implementation. Experimental results demonstrate that the robot employs the proposed walking strategy and can successfully carry out its walking behaviours under various experimental terrain conditions, such as flat ground, incline, decline and uneven ground...|$|R
50|$|The {{following}} is a small list of robots that utilize the <b>subsumption</b> <b>architecture.</b>|$|E
50|$|When <b>subsumption</b> <b>architecture</b> was developed, {{the novel}} setup and {{approach}} of <b>subsumption</b> <b>architecture</b> {{allowed it to}} be successful in many important domains where traditional AI had failed, namely real-time interaction with a dynamic environment. The lack of large memory storage, symbolic representations, and central control, however, places it at a disadvantage at learning complex actions, in-depth mapping, and understanding language.|$|E
5000|$|... #Caption: Figure 1: Abstract {{representation}} of <b>subsumption</b> <b>architecture,</b> {{with the higher}} level layers subsuming the roles of lower level layers when the sensory information determines it.|$|E
40|$|The {{recently}} developed Life-Space-Foam approach to goal-directed human action deals with individual actor dynamics. This paper applies {{the model to}} characterize the dynamics of co-action by two or more actors. This dynamics is modelled by (i) a two-term joint action (including cognitive/motivatonal potential and kinetic energy), and (ii) its associated adaptive path integral, representing an infinite-dimensional neural network. Its feedback adaptation loop has been derived from Bernstein's concepts of sensory corrections loop in human motor control and Brooks' <b>subsumption</b> <b>architectures</b> in robotics. Potential applications of the proposed model in human-robot interaction research are discussed. Vladimir G. Ivancevic, Eugene V. Aidman and Leong Ye...|$|R
50|$|The {{situated}} AI {{community has}} presented several solutions to modeling decision-making processes, {{also known as}} action selection mechanisms. The first attempt {{to solve this problem}} goes back to <b>subsumption</b> <b>architectures,</b> which were in fact more an implementation technique than an algorithm. However, this attempt paved the way to several others, in particular the free-flow hierarchies and activation networks. A comparison of the structure and performances of these two mechanisms demonstrated the advantage of using free-flow hierarchies in solving the action selection problem. However, motor schemas and process description languages are two other approaches that have been used with success for autonomous robots.|$|R
40|$|Action {{selection}} is typically a "built-in" feature of agent architectures and hence {{not subject to}} change in instantiated architectures. While often (especially in simple agents) this lack of flexibility does not matter, there are circumstances where dynamic adjustments of an action selection strategy are desirable. In this paper, we present an architecture framework, called APOC, that provides architectural mechanisms for dynamic adjustments of action selection schemes. We show how common action selection schemes (such as "winner-takes-it-all" or hierarchical schemes as used in <b>subsumption</b> <b>architectures)</b> can be implemented in APOC and, furthermore, {{how they can be}} modified dynamically. Finally, preliminary results from multi-agent simulation studies of such architectures are presented to demonstrate the utility of dynamically modifiable action selection schemes...|$|R
50|$|DAI {{can apply}} a {{bottom-up}} approach to AI, {{similar to the}} <b>subsumption</b> <b>architecture</b> {{as well as the}} traditional top-downapproach of AI. In addition, DAI can also be a vehicle for emergence.|$|E
5000|$|In {{the late}} 1980s, Brooks {{and his team}} {{introduced}} Allen, a robot using <b>subsumption</b> <b>architecture.</b> [...] Brooks' work focuses on engineering intelligent robots to operate in unstructured environments, and understanding human intelligence through building humanoid robots.|$|E
5000|$|The LIDA {{architecture}} employs several modules {{that are}} designed using computational mechanisms drawn from the [...] "new AI". These include variants of the Copycat Architecture, sparse distributed memory, the schema mechanism, the Behavior Net, and the <b>subsumption</b> <b>architecture.</b>|$|E
40|$|The AnimNL project (Anim ation from N atural L anguage) has as {{its goal}} the {{automatic}} creation of animated task simulations from natural-language instructions. The question addressed in this paper is how agents can perform tasks in environments about which they have only partial relevant knowledge. The solution we describe involves enabling such agents to * develop expectations through instruction understanding and plan inference, and use those expectations in deciding how to act; * exploit generalized abilities {{in order to deal}} with novel geometric situations. The AnimNL project builds on an animation system, Jackâ„¢, that has been developed at the Computer Graphics Research Lab at the University of Pennsylvania, and draws upon a range of recent work in Natural Language semantics, planning and plan inference, philosophical studies of intention, reasoning about knowledge and action, and <b>subsumption</b> <b>architectures</b> for autonomous agents...|$|R
40|$|Introduction We are {{interested}} in the development of hybrid autonomous agents through the integration of behaviour-based <b>subsumption</b> <b>architectures</b> with the symbolic planning and reasoning capabilities of classical AI. The subsumption approach appears to offer a promising solution to the problems of interfacing high level planning algorithms with real world environments. We agree with the behaviour-based school that many low level behaviours which deal robustly with uncertainty and change can be implemented without symbolic representation, and propose to adopt a bottom up design method. However, we believe there are problems with the use of hardwired behaviours and wish to investigate neuronal group selection models as the sensorimotor basis for adaptive agent architectures. At the same time, we view the symbolic level as a powerful and necessary extension for agents intended to move beyond microdomains into complex planning and problem solving. Symbolic representation allows...|$|R
40|$|EP/P 503795 / 1 In {{this thesis}} an <b>architecture,</b> similar to <b>subsumption</b> <b>architectures,</b> is {{presented}} which uses low level behaviour modules, based on combinations of machine learning techniques, to create teams of autonomous agents cooperating via shared plans for interaction. The {{purpose of this}} is to perform effective single plan execution within multiple scenarios, using a modern team based first person shooter video game as the domain and visualiser. The main focus is showing that through basic machine learning mechanisms, applied in a multi-agent setting on sparse data, plans can be executed on game levels of varying size and shape without sacrificing team goals. It is also shown how different team members can perform locally sub-optimal operations which contribute to a globally better strategy by adding exploration data to the machine learning mechanisms. This contributes to the reinforcement learning problem of exploration versus exploitation, from a multi-agent perspective...|$|R
5000|$|<b>Subsumption</b> <b>architecture</b> is a {{reactive}} robotic architecture heavily {{associated with}} behavior-based robotics {{which was very}} popular in the 1980s and 90s. The term was introduced by Rodney Brooks and colleagues in 1986. [...] Subsumption has been widely influential in autonomous robotics and elsewhere in real-time AI.|$|E
50|$|A {{hierarchy}} of these building blocks {{was used to}} implement a {{hierarchy of}} behaviors such as observed by Tinbergen and others. RCS-1 is similar in many respects to Brooks' <b>subsumption</b> <b>architecture,</b> except that RCS selects behaviors before the fact through goals expressed in commands, rather than after the fact through subsumption.|$|E
5000|$|Behavior based AI, was a {{response}} to the slow speed of robots using symbolic action selection techniques. In this form, separate modules respond to different stimuli and generate their own responses. In the original form, the <b>subsumption</b> <b>architecture,</b> these consisted of different layers which could monitor and suppress each other's inputs and outputs.|$|E
40|$|This paper {{describes}} {{ongoing investigations}} into the subsumption control of a simple mobile robot. <b>Subsumption</b> <b>architectures</b> are a relatively new and simple approach to the control of robot systems. With this approach the robot is not controlled by a powerful reasoning system, but rather {{by a set of}} simple processes. Each of these processes is designed to provide the robot with a simple competence, for example, the ability to move away from an obstacle, to move around an area in a random fashion, or to explore the robot's environment. The processes compete for control of the robot at any given time, according to a varying priority scheme which is mediated, inter alia, by external sensor input. The subsumption approach to robot control represents an interesting alternative to classical artificial intelligence techniques, but remains unproven at this time. We propose to investigate the feasibility of subsumption control for robots...|$|R
40|$|International audienceIn this abstract, we combine {{work from}} [Lagarde et al., 2010] and [Calinon et al., 2009] for {{learning}} and reproduction of, respectively, navigation tasks on a mobile robot and gestures with a robot arm. Both approaches build a sensory motor map under human guidance to learn the desired behavior. With several actions possible at the same time, the selection of action becomes a real issue. Several solutions exist to this problem : hierarchical architecture, parallel modules including <b>subsumption</b> <b>architectures</b> or even a mix of both [Bryson, 2000]. In navigation, a temporal sequence learner or a state-action association learner [Lagarde et al., 2010] enables to learn a sequence of directions in order to follow a trajectory. These solutions can be extended to action sequence learning. In this {{paper we propose a}} simple architecture based on perception-action that is able to produce complex behaviors from the incremental learning of simple tasks. Then we discuss advantages and limitations of this architecture, that raises many questions...|$|R
40|$|New web-based {{technologies}} for 3 D graphics such as Java 3 D provide tools for creating autonomous virtual reality agents for educational, entertainment, and simulation software. Such agents {{need to be}} responsive and reactive to their environment {{in order to maintain}} a steady appearance of behaviors. An extension of a <b>subsumption</b> control <b>architecture,</b> from robotic agent control literature, can provide the basis for these requirements. This paper discusses issues in the design of a virtual reality robot implemented in Java 3 D using a modified <b>subsumption</b> control <b>architecture</b> and the problems that may be encountered with 3 D platforms that provide virtual reality development environments. The virtual robot we describe is able to successfully perform a set of behaviors within its environment. Virtual sensors and actuators are implemented within Java 3 D, allowing the virtual robot to sense and interact with its environment. Overall performance of the system is taken into consideration. Introduc [...] ...|$|R
50|$|MIBE {{architecture}} (Motivated Independent BEhavior) is a behavior-based robot architecture {{developed at}} Artificial Intelligence and Robotics Lab of Politecnico di Milano by Fabio La Daga and Andrea Bonarini in 1998. MIBE architecture {{is based on}} the idea of animat and derived from <b>subsumption</b> <b>architecture,</b> formerly developed by Rodney Brooks and colleagues at MIT in 1986.|$|E
50|$|It {{is an open}} {{question}} whether human intelligence is inherently scruffy or neat. Some claim that the question itself is unimportant: the famous neat John McCarthy has said publicly he has no interest in how human intelligence works, while famous scruffy Rodney Brooks is openly obsessed with creating humanoid intelligence. (See <b>Subsumption</b> <b>architecture,</b> Cog project (Brooks 2001)).|$|E
50|$|MIBE {{architecture}} mainly {{departs from}} <b>subsumption</b> <b>architecture</b> {{due to the}} introduction of a top level motivational structure which determines behavior priorities at run time. That is, there are not layers and static hierarchical dependencies between behavioral modules, but each behavior constantly competes with others for taking control of the agent through the top level motivational state from which specific drives originate (via predetermined or reinforcement-learned functions).|$|E
40|$|Animals and robots perceiving {{and acting}} in a world require an {{ontology}} that accommodates entities, processes, states of a#airs, etc., in their environment. If the perceived environment includes information-processing systems, the ontology should reflect that. Scientists studying such systems need an ontology that includes the first-order ontology characterising physical phenomena, the second-order ontology characterising perceivers of physical phenomena, and a (recursive) third order ontology characterising perceivers of perceivers, including introspectors. We argue that second- and third-order ontologies refer to contents of virtual machines and examine requirements for scientific investigation of combined virtual and physical machines, such as animals and robots. We show how the CogA# architecture schema, combining reactive, deliberative, and meta-management categories, provides a first draft schematic third-order ontology for describing {{a wide range of}} natural and artificial agents. Many previously proposed architectures use only a subset of CogA#, including <b>subsumption</b> <b>architectures,</b> contention-scheduling systems, architectures with `executive functions' and a variety of types of `Omega' architectures...|$|R
40|$|This paper {{discusses}} {{the design and}} evaluation of an artificial agent for collaborative musical free improvisation. The agent provides a means to investigate the underpinnings of improvisational interaction. In connection with this general goal, the system is also used here to explore {{the implementation of a}} collaborative musical agent using a specific robotics <b>architecture,</b> <b>Subsumption.</b> The <b>architecture</b> of the system is explained, and its evaluation in an empirical study with expert improvisors is discussed. A follow-up study using a second iteration of the system is also presented. The system design and connected studies bring together Subsumption robotics, ecological psychology, and musical improvisation, and contribute to an empirical grounding of an ecological theory of improvisation. Designers of human-computer interactive systems for musical improvisation have taken diverse approaches to system development. Some of these systems implement an abstract model of the human mind (e. g., Rowe 1992), while others implement a model of the sonic and emotional organizational principles of improvisation, and emergen...|$|R
40|$|An {{advancing}} front grid {{generation system}} for structured Overset grids is presented which automatically modifies Overset structured surface grids and control lines until user-specified grid qualities are achieved. The system is demonstrated on two examples: the first refines {{a space shuttle}} fuselage control line until global truncation error is achieved; the second advances, from control lines, the space shuttle orbiter fuselage top and fuselage side surface grids until proper overlap is achieved. Surface grids are generated in minutes for complex geometries. The system is implemented as a heuristic feedback control (HFC) expert system which iteratively modifies the input specifications for Overset control line and surface grids. It is developed {{as an extension of}} modern control theory, production rules systems and <b>subsumption</b> <b>architectures.</b> The methodology provides benefits over the full knowledge lifecycle of an expert system for knowledge acquisition, knowledge representation, and knowledge execution. The vector/matrix framework of modern control theory systematically acquires and represents expert system knowledge. Missing matrix elements imply missing expert knowledge. The execution of the expert system knowledge is performed through symbolic execution of the matrix algebra equations of modern control theory. The dot product operation of matrix algebra is generalized for heuristic symbolic terms. Constant time execution is guaranteed...|$|R
