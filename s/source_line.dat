75|2358|Public
25|$|Buffer amplifiers, {{which may}} include emitter followers, provide a high {{impedance}} input for a device (perhaps another amplifier, or perhaps an energy-hungry load such as lights) {{that would otherwise}} draw too much current from the <b>source.</b> <b>Line</b> drivers are a type of buffer that feeds long or interference-prone interconnect cables, possibly with differential outputs through twisted pair cables.|$|E
5000|$|Multiple {{registers}} can {{be pushed}} or popped {{on the same}} <b>source</b> <b>line.</b> [...] generates one instruction {{for each of the}} three operands.|$|E
50|$|The Microsoft parser is fragile. Formatting {{information}} {{can be added to}} the closed caption information, but adding format information to the <b>source</b> <b>line</b> can have unpredictable results. Defining more than one ID can have unpredictable results.|$|E
5000|$|Line In with {{selectable}} <b>sources</b> (<b>line</b> in,mic) for sampling, re-sampling ...|$|R
5000|$|... {{comparing}} {{the number of}} commits or changed <b>source</b> <b>lines</b> for open <b>source</b> projects on Open Hub ...|$|R
5000|$|... {{maintainability}} - tables often {{reduce the}} number of <b>source</b> <b>lines</b> needed to be maintained v. multiple compares ...|$|R
50|$|Buffer amplifiers, {{which may}} include emitter followers, provide a high {{impedance}} input for a device (perhaps another amplifier, or perhaps an energy-hungry load such as lights) {{that would otherwise}} draw too much current from the <b>source.</b> <b>Line</b> drivers are a type of buffer that feeds long or interference-prone interconnect cables, possibly with differential outputs through twisted pair cables.|$|E
5000|$|In Emacs, various {{commands}} {{are available}} to automatically fix indenting problems, including hitting [...] on a given line (in the default configuration). [...] {{can be used to}} properly indent large sections of code. Depending on the mode, Emacs can also replace leading indent spaces with the proper number of tabs followed by spaces, which results in the minimal number of characters for indenting each <b>source</b> <b>line.</b>|$|E
5000|$|DBX is a source-level {{debugger}} found {{primarily on}} Solaris, AIX, IRIX, Tru64 UNIX, Linux and BSD operating systems. It provides symbolic debugging for programs written in C, C++, Pascal, FORTRAN and Java. Useful features include stepping through programs one <b>source</b> <b>line</b> or machine instruction at a time. In addition to simply viewing {{operation of the}} program, variables can be manipulated and {{a wide range of}} expressions can be evaluated and displayed.|$|E
5000|$|<b>Line</b> splicing: Physical <b>source</b> <b>lines</b> {{that are}} {{continued}} with escaped newline sequences are spliced to form logical lines.|$|R
5000|$|The {{average number}} of bugs done by the {{developer}} per unit of time or <b>source</b> <b>lines</b> of code ...|$|R
3000|$|... (direct {{correspondence}} at <b>source</b> code <b>line</b> level): {{the analysis}} is performed at a lower level considering each <b>source</b> code <b>line</b> individually, i.e., is there any correspondence between static location of warnings and program elements with mutations’ concentration at the <b>source</b> code <b>line</b> level? [...]...|$|R
50|$|One final, {{important}} feature of Phaze is the Oracle. Although the actual Oracle is hidden from sight for reasons explained later in the series, it is accessible through a speaking tube. The Oracle will answer any querent a single question. But like the original Oracle at Delphi, the pronouncements of Phaze's Oracle are usually cryptic and self-fulfilling. The Oracle is actually a computer with its <b>source</b> <b>line</b> running through the west pole so it can have power in Phaze.|$|E
50|$|The tcov utility gives {{information}} on how often a program executes segments of code. It produces {{a copy of the}} source file, annotated with execution frequencies. The code can be annotated at the basic block level or the <b>source</b> <b>line</b> level. As the statements in a basic block are executed the same number of times, a count of basic block executions equals number of times each statement in the block is executed. The tcov utility does not produce any time-based data.|$|E
50|$|Note:The {{character}} in the data type column is the character that is encoded on the Definition Specification in the column designated for data type. To compare, in a language like C where definitions of variables are free-format and would use a keyword such as int to declare an integer variable, in RPG, a variable is defined with a fixed-format Definition Specification. In the Definition Specification, denoted by a letter D in column 6 of a <b>source</b> <b>line,</b> the data type character would be encoded in column 40. Also, if the data type character is omitted, that is, left blank, the default will be A if no decimal positions are specified. Otherwise, the default will be P.|$|E
5000|$|Automated code review: calculates {{software}} metrics and <b>source</b> <b>lines</b> of code [...] Finds unused objects and methods. Identifies duplicate objects. Controls naming conventions.|$|R
40|$|Interferometry by multidimensional {{deconvolution}} {{applied to}} Controlled-Source Electromagnetic data replaces the medium above the receivers by a homogeneous halfspace, suppresses the direct field and redatums the source positions to the receiver locations. In that sense, the airwave {{and any other}} interactions of the signal with the air-water interface and the water layer are suppressed and the source uncertainty is reduced. Interferometry requires grid data and {{cannot be applied to}} line data unless the source is infinitely long in the crossline direction. To create such a source, a set of <b>source</b> <b>lines</b> is required. We use an iterative algorithm to determine the optimal locations of these <b>source</b> <b>lines</b> and show that more <b>source</b> <b>lines</b> are required if the source is towed closer to the sea bottom and closer to the receivers. Geoscience & EngineeringCivil Engineering and Geoscience...|$|R
5000|$|Size is {{the product}} size (whatever size {{estimate}} is used by your organization is appropriate). Putnam uses ESLOC (Effective <b>Source</b> <b>Lines</b> of Code) throughout his books.|$|R
5000|$|MBASIC is an interpreter. Program {{source text}} was stored in memory in {{tokenized}} form, with BASIC keywords replaced by one-byte tokens which saved memory space and speeded execution. Any line prefixed {{with a line}} number was stored as program text; BASIC statements not prefixed with a line number were executed immediately as commands. Programs could be listed on the screen for editing, or saved to disk in either a compressed binary format or as plain ASCII text. Every <b>source</b> <b>line</b> was identified with a number, {{which could be used}} as the target of a GOTO or GOSUB transfer. Only line editing commands were provided. It was often beneficial to save a program as plain text and edit it with a full featured editor.|$|E
5000|$|With the syntax {{analysis}} {{adrift in}} a fog of superposed states, should an error be encountered (that is, a token is found that cannot be fitted into any valid syntactic frame) {{the production of a}} helpful message can be difficult. The B6700 Algol compiler for example was notorious for error messages such as [...] "semicolon expected" [...] along with a listing of the <b>source</b> <b>line</b> plus a marker showing the location of trouble - often marking a semicolon. In the absence of a semicolon, if one were indeed placed as indicated, on recompilation there could well arise a message [...] "unexpected semicolon" [...] for it. Often, only the first error message from a compiler will be worth attending to, because subsequent messages went awry. Cancelling the current interpretation then resuming the scan {{at the start of the}} next statement is difficult when the source file is in error, and so subsequent messages are unhelpful. Further code production is of course abandoned.|$|E
5000|$|Egbert Jannink {{set up his}} factory {{on another}} site in 1810. It {{expanded}} and moved to this site in the Roombek neighbourhood, next to the stream in 1900. The fireproof mill was designed and built by Sidney Stott. There were 70 fireproof textile mills were constructed in Twente between 1880 and 1914. Sidney the Oldham architect, not to be confursed with his cousins Stott and Sons was a millwright who cooperated with most advanced textile machine manufacturers: the mill was handed over complete with power <b>source,</b> <b>line</b> shafting and all the spinning machines needed to spin cotton. The building was modelled on similar double-mills in Lancashire. A central tower housed the engine and the water tank for the sprinkers, either side were the three storey mills with the large uninterrupted floors needed for mule spinning. The height of the chimney was determined by up-draught needed by the boilers. The factory operated until 1967. It is a Rijksmonument (listed building) The building was refurbished from 1975. [...] The Jannink museum moved into the ground floor in 1980, other floors were converted into housing.|$|E
25|$|The patron {{is looking}} for, size {{estimates}} of logical <b>source</b> <b>lines</b> of code ratios for different languages. He {{has looked at}} Capers Jones but needs more information.|$|R
50|$|Basic COCOMO compute {{software}} development effort (and cost) {{as a function}} of program size. Program size is expressed in estimated thousands of <b>source</b> <b>lines</b> of code (SLOC, KLOC).|$|R
50|$|Barry Boehm's 1981 book Software Engineering Economics {{documents}} his Constructive Cost Model (COCOMO). It relates {{software development}} effort for a program, in Person-Months (PM), to Thousand <b>Source</b> <b>Lines</b> of Code (KSLOC).|$|R
50|$|In {{order to}} attack these problems, modern LCDs use an active matrix design. Instead of {{powering}} both electrodes, one set, typically the front, {{is attached to}} a common ground. On the rear, each shutter is paired with a thin-film transistor that switches on in response to widely separated voltage levels, say 0 and +5 volts. A new addressing line, the gate line, is added as a separate switch for the transistors. The rows and columns are addressed as before, but the transistors ensure that only the single shutter at the crossing point is addressed; any leaked field is too small to switch the surrounding transistors. When switched on, a constant and relatively high amount of charge flows from the <b>source</b> <b>line</b> through the transistor and into an associated capacitor. The capacitor is charged up until it holds the correct control voltage, slowly leaking this through the crystal to the common ground. The current is very fast and not suitable for fine control of the resulting store charge, so pulse code modulation is used to accurately control the overall flow. Not only does this allow for very accurate control over the shutters, since the capacitor can be filled or drained quickly, but the response time of the shutter is dramatically improved as well.|$|E
3000|$|... {{denotes the}} {{statement}} at <b>source</b> <b>line</b> 1. If {{there are multiple}} statements at the <b>source</b> <b>line,</b> we identify them by an additional index letter, for example, [...]...|$|E
40|$|The {{invention}} {{relates to}} an {{image processing device}} (1) for finding corresponding first and second regions in two image data sets of an object. In a first image data set a <b>source</b> <b>line</b> and in a second image data set a corresponding target line are determined depending on reference regions detectable in both image data sets. A first region in the first image data set is projected onto the <b>source</b> <b>line,</b> thereby dividing the <b>source</b> <b>line</b> into two source sub-lines and defining a source ratio as the ratio of the length of one of the source sub-lines to the length of the entire <b>source</b> <b>line.</b> A second region in the second image data set is then determined such that a projection of the second region onto the target line leads to a corresponding target ratio which is similar to the source ratio...|$|E
5000|$|In C and C++, the {{language}} supports a simple macro preprocessor. <b>Source</b> <b>lines</b> {{that should be}} handled by the preprocessor, such as [...] and [...] {{are referred to as}} preprocessor directives.|$|R
50|$|Borland Turbo Debugger was a {{stand-alone}} product introduced in 1989 that provided full-screen program animation for PC's. Later versions added support for combining the animation with actual <b>source</b> <b>lines</b> extracted at compilation time.|$|R
5000|$|This is not valid in C, since {{a string}} literal may not span {{multiple}} logical <b>source</b> <b>lines.</b> This {{can be worked}} around by printing the newline character using its numerical value (0x0a in ASCII), ...|$|R
3000|$|... (same point, same direction), but a whole {{collection}} of rays {{corresponding to the}} horizontal segment that connects the <b>source</b> <b>line</b> [...]...|$|E
40|$|Abstract. The {{construction}} process of subgrade construction {{was divided into}} several operating units: oil material loading and unloading, vehicle transportation and wind erosion dust. For each operational unit during each stage of subgrade construction, different Gaussian diffusion models were chosen respectively according to the transmission and diffusion of raised dust from different source (point <b>source,</b> <b>line</b> source and area source). Finally, based on one contract section on a freeway in the Yellow River flood area, the concentration distribution was calculated using atmospheric estimation software in different pattern of point <b>source,</b> <b>line</b> source and area source. It was shown that with the increasing of distance, point source and area source emission increased to the maximum value and then decreased to the stable value, while line source emission presented a distribution pattern which changed decreasingly...|$|E
40|$|Code reuse is good, e. g., “modules reused without {{revision}} had {{the fewest}} faults, fewest faults per <b>source</b> <b>line,</b> and lowest fault correction effort ” [2] Codebase defines {{the organization and}} the market for some legacy systems Open source code ✧ A vehicle for innovation through reuse ✧ A common platform for multiple participant...|$|E
50|$|No {{attempt is}} made to {{optimize}} the lookup in coding for this first example, and it uses instead a simple linear search technique - purely to illustrate the concept and demonstrate fewer <b>source</b> <b>lines.</b> To handle all 256 different input values, approximately 265 <b>lines</b> of <b>source</b> code would be required (mainly single line table entries) whereas multiple 'compare and branch' would have normally required around 512 <b>source</b> <b>lines</b> (the size of the binary is also approximately halved, each table entry requiring only 4 bytes instead of approximately 8 bytes {{for a series of}} 'compare immediate'/branch instructions (For larger input variables, the saving is even greater).|$|R
5000|$|Coat of Arms: Red shield, three <b>sources</b> <b>lined</b> up in a band, under {{a silver}} knife and a golden palm, {{on top of}} a golden wicker hamper. Silver mural crown with three towers. White listel with caption in black: [...] "VALE DAS FONTES".|$|R
40|$|The {{effect of}} wind on sound {{propagation}} {{in the atmosphere}} has been studied extensively before with an emphasize on downwind sound propagation, typically representing worst-case scenarios. However, the influence of oblique and crosswind on propagation from various types of sources raises some questions in acoustic literature. In this work, {{the effect of a}} logarithmic wind speed profile at different wind directions has been studied for sound emitted by a point <b>source,</b> a coherent <b>line</b> <b>source</b> and an incoherent <b>line</b> <b>source.</b> For this purpose, a full three-dimensional wave-based method was used. For the incoherent <b>line</b> <b>source</b> simulation, the Harmonoise engineering approach based on a summation of source segments was considered as well and shows to be in satisfying agreement with the latter. While for a point <b>source</b> and coherent <b>line</b> <b>source</b> crosswind shows to have an insignificant effect, it is important in case of an incoherent <b>line</b> <b>source.</b> Also, the stretch of the incoherent <b>line</b> <b>source</b> contributing to the noise level at a receiver close to this line differs strongly depending on the wind direction...|$|R
