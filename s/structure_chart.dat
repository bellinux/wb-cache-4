41|198|Public
25|$|The {{overall design}} {{of the system is}} {{documented}} using HIPO charts or structure charts. The <b>structure</b> <b>chart</b> is similar in appearance to an organizational chart, but has been modified to show additional detail. Structure charts can be usedto display several types of information, but are used most commonly to diagram either data structures or code structures.|$|E
5000|$|... #Caption: Peter The Great 28955 <b>structure</b> <b>chart</b> {{notation}} pedigree ...|$|E
50|$|A <b>structure</b> <b>chart</b> is {{also used}} to diagram {{associated}} elements that comprise a run stream or thread. It is often developed as a hierarchical diagram, but other representations are allowable. The representation must describe the breakdown of the configuration system into subsystems and the lowest manageable level. An accurate and complete <b>structure</b> <b>chart</b> {{is the key to the}} determination of the configuration items (CI), and a visual representation of the configuration system and the internal interfaces among its CIs(define CI clearly). During the configuration control process, the <b>structure</b> <b>chart</b> is used to identify CIs and their associated artifacts that a proposed change may impact.|$|E
40|$|We {{apply the}} {{techniques}} of logic programming to evaluate <b>structure</b> <b>charts.</b> We find that <b>structure</b> <b>charts</b> can be represented naturally in Prolog, and useful information can be derived in a straightforward manner. Standard techniques {{in the evaluation of}} <b>structure</b> <b>charts</b> can be formalized, and a few previous problems can be solved easily...|$|R
40|$|We {{summarize}} {{our experience}} {{in the use of}} Prolog to model and evaluate <b>structure</b> <b>charts</b> according to standard guidelines in structured design. We discuss how to construct first-cut <b>structure</b> <b>charts</b> automatically from data flow diagrams using transform and transaction analyses, evaluate them using recommended criteria such as coupling, cohesion, morphology and tramp, and improve on the resulting <b>structure</b> <b>charts</b> by means of automatic backtracking...|$|R
40|$|In this paper, we {{summarize}} {{our experience}} {{in the use of}} Prolog to model and evaluate <b>structure</b> <b>charts</b> according to standard guidelines in structured design. We discuss how to construct first-cut <b>structure</b> <b>charts</b> automatically from dataflow diagrams using transform and transaction analyses, evaluate them using recommended criteria such as coupling, cohesion, morphology and tramp, and improve on the resulting <b>structure</b> <b>charts</b> by means of automatic backtracking. © 1994. postprin...|$|R
5000|$|... #Caption: A {{process flow}} diagram {{describing}} {{the construction of a}} <b>structure</b> <b>chart</b> by a so-called Subject Matter Experts (SME).|$|E
5000|$|The <b>structure</b> <b>chart</b> aims to show [...] "the module {{hierarchy}} or {{calling sequence}} relationship of modules. There is a module specification for each module {{shown on the}} <b>structure</b> <b>chart.</b> The module specifications can be composed of pseudo-code or a program design language. The data dictionary is like that of structured analysis. At this stage in the software development lifecycle, after analysis and design have been performed, {{it is possible to}} automatically generate data type declarations", and procedure or subroutine templates.|$|E
50|$|The output {{section of}} the NFDRS <b>structure</b> <b>chart</b> is the {{components}} or simply the outputs that are based in fire behavior description.but expressed in the broader context of fire danger rating.|$|E
5000|$|National Center for State Courts, {{including}} State Court <b>Structure</b> <b>Charts</b> ...|$|R
5000|$|... #Subtitle level 3: Submanifolds: organs, {{subcortical}} <b>structures,</b> <b>charts,</b> and immersions ...|$|R
40|$|We {{summarize}} {{our experience}} {{in the use of}} Prolog to model and evaluate <b>structure</b> <b>charts</b> according to standard guidelines in structured design. We discuss how to construct first-cut <b>structure</b> <b>charts</b> automatically from data flow diagrams using transform and transaction analyses, evaluate them using recommended criteria such as coupling, cohesion, morphology and tramp, and improve on the resulting <b>structure</b> <b>charts</b> by means of automatic backtracking. Logic programming, Prolog, <b>structure</b> <b>charts,</b> <b>structured</b> design ∗ Copyright 1994 Information and Software Technology. This material is presented to ensure timely dissemination of scholarly and technical work. Personal use of this material is permitted. Copyright and all rights therein are retained by authors or by other copyright holders. All persons copying this information are expected to adhere to the terms and constraints invoked by each author¡¯s copyright. In most cases, these works may not be reposted without the explicit permission of the copyright holder. Permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted componen...|$|R
5000|$|According to Wolber (2009), [...] "a <b>structure</b> <b>chart</b> can be {{developed}} starting with the creating of a structure, which places the root of an upside-down tree which forms the <b>structure</b> <b>chart.</b> The {{next step is to}} conceptualize the main sub-tasks that must be performed by the program to solve the problem. Next, the programmer focuses on each sub-task individually, and conceptualizes how each can be broken down into even smaller tasks. Eventually, the program is broken down to a point where the leaves of the tree represent simple methods that can be coded with just a few program statements".|$|E
50|$|Constantine was {{the primary}} force behind the {{discipline}} of Structured Design, in his book of the same name. The key features of Structured Design, such as <b>Structure</b> <b>Chart,</b> the Data flow diagram are all commonly used and taught worldwide.|$|E
50|$|In practice, see figure, {{first it}} is checked if a <b>Structure</b> <b>Chart</b> has been {{developed}} already. If so an expert needs to review it to ensure it represents the current structure and if not, updates the chart where needed..|$|E
40|$|We {{investigate}} {{into the}} feasibility of applying logic programming to structured design. We propose to use Prolog as a common machinery for the representation of various structured tools. We illustrate through examples how to produce <b>structure</b> <b>charts</b> from data flow diagrams, and evaluate them according to commonly recommended design guidelines. If the <b>structure</b> <b>charts</b> produced are not satisfactory, the inherent backtracking mechanism in Prolog will help to produce other versions for further evaluation...|$|R
50|$|SA and SD are {{displayed}} with <b>structure</b> <b>charts,</b> data flow diagrams and data model diagrams, {{of which there}} were many variations, including those developed by Tom DeMarco, Ken Orr, Larry Constantine, Vaughn Frick, Ed Yourdon, Steven Ward, Peter Chen, and others.|$|R
40|$|Proposes {{a design}} method for the {{development}} of software in Visual BASIC whose programming environment is multi-paradigm. Extensions to <b>structure</b> <b>charts</b> and pseudocode to incorporate the three paradigms have been developed {{based on the premise that}} procedural models, event-driven forms and objects are mutually exclusive in operation...|$|R
50|$|A <b>structure</b> <b>chart</b> is a {{top-down}} {{modular design}} tool, constructed of squares representing the different modules in the system, and lines that connect them. The lines represent the connection and or ownership between activities and subactivities {{as they are}} used in organization charts.|$|E
50|$|The non-architectural {{approach}} respectively picks a {{model for}} each view. For example, Structured Systems Analysis and Design Method (SSADM), picking the <b>Structure</b> <b>Chart</b> (SC) for structure description and the Data Flow Diagram (DFD) for behavior description, is categorized into the non-architectural approach.|$|E
50|$|A <b>structure</b> <b>chart</b> (SC) is a {{chart that}} shows the {{breakdown}} of the configuration system to the lowest manageable levels. This chart is used in structured programming to arrange the program modules in a tree structure. Each module is represented by a box which contains the name of the modules. The tree structure visualizes the relationships between the modules.|$|E
50|$|The <b>structured</b> <b>chart</b> {{subject to}} these {{constraints}} may however use additional {{variables in the}} form of bits (stored in an extra integer variable in the original proof) in order to keep track of information that the original program represents by the program location. The construction was based on Böhm's programming language P′′.|$|R
40|$|The {{article is}} devoted to a ?readiness? {{research}} and {{can be characterized as}} a descriptive one. It is noted that understanding ambivalence of the ?readiness? phenomenon represents a detailed and diversified picture of the definition research. The author emphasizes three integrated approaches to the problem, researches types of ?readiness? and offers <b>structure</b> <b>charts</b> to the presented material. ?????? ?????? ????????? ???????????? ??????? ???????????? ? ????? ???????? ????????. ????? ????????, ??? ???????????? ??????????????? ????????? ???????????? ???????????? ????? ???????????????? ? ??????????????????? ??????? ???????????? ????????? ? ??????????? ???????? ?? ???? ?????????? ???????? ? ???????? ????????, ?????????? ?????????? - ?????????? ????? ? ??????????? ?????????...|$|R
40|$|OBJECTIVE: To {{describe}} the Psychiatric Emergency Research Collaboration (PERC), {{the methods used}} to create a <b>structured</b> <b>chart</b> review tool and the results of our multicenter study. METHOD: Members of the PERC Steering Committee created a <b>structured</b> <b>chart</b> review tool designed to provide a comprehensive picture of the assessment and management of psychiatric emergency patients. Ten primary indicators were chosen based on the Steering Committee 2 ̆ 7 s professional experience, the published literature and existing consensus panel guidelines. Eight emergency departments completed data abstraction of 50 randomly selected emergency psychiatric patients, with seven providing data from two independent raters. Inter-rater reliability (Kappas) and descriptive statistics were computed. RESULTS: Four hundred patient charts were abstracted. Initial concordance between raters was variable, with some sites achieving high agreement and others not. Reconciliation of discordant ratings through re-review of the original source documentation was necessary for four of the sites. Two hundred eighty-five (71...|$|R
50|$|A <b>Structure</b> <b>Chart</b> (SC) in {{software}} engineering and organizational theory is a chart {{which shows the}} breakdown of a system to its lowest manageable levels. They are used in structured programming to arrange program modules into a tree. Each module is represented by a box, which contains the module's name. The tree structure visualizes the relationships between modules.|$|E
50|$|The {{overall design}} {{of the system is}} {{documented}} using HIPO charts or structure charts. The <b>structure</b> <b>chart</b> is similar in appearance to an organizational chart, but has been modified to show additional detail. Structure charts can be used to display several types of information, but are used most commonly to diagram either data structures or code structures.|$|E
5000|$|As shown {{from the}} 1881 Occupation <b>Structure</b> <b>chart</b> of Runwell, Agriculture {{was the main}} {{employment}} in Runwell back then. This was mainly due to the high volume of farmland surrounding the area and also the lack of opportunity and education available at that time. However, according to the 2011 census, this has now changed, {{as most of the}} 1,521 residents in employment now work in professional occupations or as managers, directors and senior officials. [...] This is possibly {{due to the fact that}} education and advancements in transportation has meant people can find better more high paying jobs than they could in 1881.|$|E
40|$|Abstract: 2 ̆ 2 Formal {{methods can}} be neatly woven in with less formal, but more widely-used, industrial-strength methods. We show how to {{integrate}} the Larch two-tiered specification method [GHW 85 a] with two used in the waterfall model of software development: Structured Analysis [Ros 77] and <b>Structure</b> <b>Charts</b> [YC 79]. We use Larch traits to define data elements in a data dictionary and the functionality of basic activities in Structured Analysis data-flow diagrams; Larch interfaces and traits to define the behavior of modules in <b>Structure</b> <b>Charts.</b> We also show how to integrate loosely formal specification in a prototyping model by discussing ways of refining Larch specifications as code evolves. To provide some realism to our ideas, we draw our examples from a non-trivial Larch specification of the graphical editor for the Miro╠ü visual languages [HMT 90]. The companion technical report, CMU-CS- 91 - 111, contains the entire specification. 2 ̆...|$|R
40|$|Formal {{methods can}} be neatly woven in with less formal, but more widely-used, industrial-strength methods. We show how to {{integrate}} the Larch two-tiered specification method [GHW 85 a] with two used in the waterfall model of software development: Structured Analysis [Ros 77] and <b>Structure</b> <b>Charts</b> [YC 79]. We use Larch traits to define data elements in a data dictionary and the functionality of basic activities in Structured Analysis data-flow diagrams; Larch interfaces and traits to define the behavior of modules in <b>Structure</b> <b>Charts.</b> We also show how to integrate loosely formal specification in a prototyping model by discussing ways of refining Larch specifications as code evolves. To provide some realism to our ideas, we draw our examples from a non-trivial Larch specification of the graphical editor for the Miro visual languages [HMT + 90]. The companion technical report, CMU-CS- 91 - 111, contains the entire specification. This research {{was sponsored by the}} Avionics Lab, Wright Research a [...] ...|$|R
40|$|This paper {{proposes a}} system design {{methodology}} which centres on the user interface. Compared to traditional structured methodologies the role of Data Flow Diagrams is reduced and Program <b>Structure</b> <b>Charts</b> are to some extent replaced by Panel Flow Diagrams (a type of state-transition diagram). This methodology is particularly suited to interactive and transaction processing systems. It {{can be used with}} both linear life cycle and evolutionary approaches...|$|R
50|$|Structure charts {{are used}} in {{structured}} analysis to specify the high-level design, or architecture, of a computer program. As a design tool, they aid the programmer in dividing and conquering a large software problem, that is, recursively breaking a problem down into parts that are small enough to be understood by a human brain. The process is called top-down design, or functional decomposition. Programmers use a <b>structure</b> <b>chart</b> to build a program {{in a manner similar}} to how an architect uses a blueprint to build a house. In the design stage, the chart is drawn and used as a way for the client and the various software designers to communicate. During the actual building of the program (implementation), the chart is continually referred to as the master-plan.|$|E
5000|$|In {{structured}} analysis structure charts, according to Wolber (2009), [...] "are used {{to specify the}} high-level design, or architecture, of a computer program. As a design tool, they aid the programmer in dividing and conquering a large software problem, that is, recursively breaking a problem down into parts that are small enough to be understood by a human brain. The process is called top-down design, or functional decomposition. Programmers use a <b>structure</b> <b>chart</b> to build a program {{in a manner similar}} to how an architect uses a blueprint to build a house. In the design stage, the chart is drawn and used as a way for the client and the various software designers to communicate. During the actual building of the program (implementation), the chart is continually referred to as [...] "the master-plan".|$|E
40|$|The {{functional}} {{design of a}} preprocessor, and subsystems is described. A <b>structure</b> <b>chart</b> and a data flow diagram are included for each subsystem. Also a group of intermodule interface definitions (one definition per module) is included immediately following the <b>structure</b> <b>chart</b> and data flow for a particular subsystem. Each of these intermodule interface definitions consists of {{the identification of the}} module, the function the module is to perform, the identification and definition of parameter interfaces to the module, and any design notes associated with the module. Also described are compilers and computer libraries...|$|E
40|$|The {{software}} life cycle. Requirements analysis. Specification of requirements. Software design and selection. Initial design, modularity, <b>structure</b> <b>charts</b> and partitioning. Detailed design and notations. Data structure design. Design documentation and software maintenance. Prerequisite by Topic: Algorithm design and representation. Developing and running computer programs. It is preferable {{that the student}} has taken the EEE 212 (or EE 413) Data Structures and/or the EE 415 Structured Programming an...|$|R
40|$|A {{tool for}} making rapid {{estimates}} of the response of space structures to thermal environments encountered in earth orbits is provided for the designer of these <b>structures.</b> <b>Charts</b> giving heating rates and temperatures for certain typical large spacecraft structural elements are provided. Background information for spacecraft thermal design considerations is presented. Environments, requirements, thermal control techniques, design guidelines, and approaches available for more detailed thermal response analysis are discussed...|$|R
50|$|The main {{difference}} between object-oriented analysis {{and other forms}} of analysis is that by the object-oriented approach we organize requirements around objects, which integrate both behaviors (processes) and states (data) modeled after real world objects that the system interacts with. In other or traditional analysis methodologies, the two aspects: processes and data are considered separately. For example, data may be modeled by ER diagrams, and behaviors by flow <b>charts</b> or <b>structure</b> <b>charts.</b>|$|R
