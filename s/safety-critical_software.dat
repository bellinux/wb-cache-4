242|76|Public
5000|$|Technologies and {{services}} in optronics, avionics, electronics and <b>safety-critical</b> <b>software</b> ...|$|E
5000|$|OpenSynergy, Sysgo {{cooperate}} on a <b>safety-critical</b> <b>software</b> platform, EE Times ...|$|E
50|$|Agile {{methods for}} open source <b>safety-critical</b> <b>software</b> by Gary K., Enquobahrie A., Ibanez L., Cheng P., Yaniv Z., Cleary K., Kokoori S., Muffih B., Heidenreich J.|$|E
5000|$|<b>Safety-Critical</b> Ethernet/AFDX, a <b>software</b> {{implementation}} of ARINC-664 Part 7 ...|$|R
40|$|This paper {{describes}} {{a major part}} of an architecting methodology developed for <b>safety-critical</b> fault-tolerant <b>software</b> systems. The methodology coverage centers on specificationdriven prototyping. This approach to prototyping is seen to be superior to the customary approaches of throwaway and evolutionary prototyping. A still developmental form of representation, higher-level statecharts, provides a suitably expressive prototype specification language...|$|R
40|$|This thesis {{deals with}} the problem of obtaining {{meaningful}} and comparable dependability measures of software through the method of fault-injection. The thesis is specifically dedicated to <b>safety-critical</b> embedded <b>software</b> and its dependability property `fault-tolerance' with respect to random faults affecting the machine instruction execution. For enabling comparability of the fault-tolerance of different software on different hardware, a fault-injection method is derived and presented. The metho...|$|R
50|$|Esterel Technologies is a {{supplier}} of model-based design, validation, and code generation tools for <b>safety-critical</b> <b>software</b> and hardware applications. Esterel’s tools create formal specifications that produce control designs code in software and/or hardware.|$|E
50|$|DO-178B, Software Considerations in Airborne Systems and Equipment Certification is a {{guideline}} {{dealing with the}} safety of <b>safety-critical</b> <b>software</b> used in certain airborne systems. Although technically {{a guideline}}, it is (or was) a de facto standard for developing avionics software systems.|$|E
50|$|ISVV {{stands for}} Independent Software Verification and Validation. ISVV is {{targeted}} at <b>safety-critical</b> <b>software</b> systems and aims {{to increase the}} quality of software products, thereby reducing risks and costs through the operational life of the software. ISVV provides assurance that software performs to the specified level of confidence and within its designed parameters and defined requirements.|$|E
40|$|<b>Safety-critical</b> {{embedded}} <b>software</b> has {{to satisfy}} stringent quality requirements. Testing and validation consumes a large – and growing – fraction of development cost. The last {{years have seen}} the emergence of semantics-based static analysis tools in various application areas, from runtime error analysis to worst-case execution time prediction. Their appeal {{is that they have}} the potential to reduce testing effort while providing 100 % coverage, thus enhancing safety. Static runtime error analysis is applicable to large industryscale projects and produces a list of definite runtime errors and of potential runtime errors which might be true errors or false alarms. In the past, often only the definite errors were fixed because manually inspecting each alarm was too time-consuming due to a large number of false alarms. Therefore no proof of the absence of runtime errors could be given. In this article the parameterizable static analyzer Astrée is presented. By specialization and parameterization Astrée can be adapted to the software under analysis. This enables Astrée to efficiently compute precise results. Astrée has successfully been used to analyze large-scale <b>safety-critical</b> avionics <b>software</b> with zero false alarms. ...|$|R
40|$|This work {{presents}} {{an evaluation of}} the CompCert formally-proved compiler for level A critical flight control software. First, the motivation for choosing CompCert is presented, as well as the requirements and constraints of <b>safety-critical</b> avionics <b>software.</b> The evaluation of its performance (measured in WCET) is presented and the results are compared to those obtained with the currently used compiler. Finally, the paper discusses verification and certification issues that are raised when one seeks to use CompCert to compile such critical software...|$|R
40|$|Abstract. At present, model-driven {{development}} {{method has}} been gradually applied in <b>safety-critical</b> avionics <b>software</b> to improve reliability and productivity. Existing ARINC 653 annex of the Architecture Analysis & Design Language (AADL) {{is used to}} model avionic software based on ARINC 653 -compatible OS, such as VxWorks 653 commercial platform. In this paper, a refined C code generation algorithm is proposed to enable automatically generate VxWorks 653 -runnable code from the AADL ARINC 653 models. Finally, a simplified autopilot system example is {{as a case study}} to show the validity of our approch...|$|R
50|$|A program {{specification}} {{is the definition}} of what a computer program is expected to do. It can be informal, in which case it can be considered as a user manual from a developer point of view, or formal, in which case it has a definite meaning defined in mathematical or programmatic terms. In practice, many successful specifications are written to understand and fine-tune applications that were already well-developed, although <b>safety-critical</b> <b>software</b> systems are often carefully specified prior to application development. Specifications are most important for external interfaces that must remain stable.|$|E
5000|$|Software system safety, {{an element}} of the total safety and {{software}} development program, cannot be allowed to function independently of the total effort. Both simple and highly integrated multiple systems are experiencing an extraordinary growth in the use of computers and software to monitor and/or control safety-critical subsystems or functions. A software specification error, design flaw, or the lack of generic safety-critical requirements can contribute to or cause a system failure or erroneous human decision. To achieve an acceptable level of safety for software used in critical applications, software system safety engineering must be given primary emphasis early in the requirements definition and system conceptual design process. <b>Safety-critical</b> <b>software</b> must then receive continuous management emphasis and engineering analysis throughout the development and operational lifecycles of the system.Software system safety {{is directly related to the}} more critical design aspects and safety attributes in software and system functionality, whereas software quality attributes are inherently different and require standard scrutiny and development rigor. Level of Rigor (LOR) is a graded approach to software quality and software design assurance as a pre-requisite that a suitable software process is followed for confidence. LOR concepts and standards such as DO-178C are NOT a substitute for software safety. Software safety per IEEE STD-1228 and MIL-STD-882E focuses on ensuring explicit safety requirements are met and verified using functional approaches from a safety requirements analysis and test perspective. Software safety hazard analysis required for more complex systems where software is controlling critical functions generally are in the following sequential categories and are conducted in phases as part of the system safety or safety engineering process: software safety requirements analysis; software safety design analyses (top level, detailed design and code level); software safety test analysis, and software safety change analysis. Once these [...] "functional" [...] software safety analyses are completed the software engineering team will know where to place safety emphasis and what functional threads, functional paths, domains and boundaries to focus on when designing in software safety attributes to ensure correct functionality and to detect malfunctions, failures, faults and to implement a host of mitigation strategies to control hazards. Software security and various software protection technologies are similar to software safety attributes in the design to mitigate various types of threats vulnerability and risks. Deterministic software is sought in the design by verifying correct and predictable behavior at the system level.|$|E
40|$|Abstract. <b>Safety-critical</b> <b>software</b> often {{includes}} some rarely executed critical operations {{that are often}} inadequately tested in statistical testing based reliability estimation. However, {{it is necessary to}} assess the reliability of <b>safety-critical</b> <b>software</b> to a high degree of confidence before it is deployed in the field. This paper discusses how to reduce <b>safety-critical</b> <b>software</b> statistical testing cost based on importance sampling technique. When both the critical operations and the entire software are adequately tested, the method can still compute the unbiased software reliability from the test results with much less test cases. Thus, the statistical testing cost of <b>safety-critical</b> <b>software</b> can be reduced effectively The simulated annealing algorithm for calculating optimum transition probabilities of the Markov chain usage model for reducing software statistical testing cost is also presented...|$|E
40|$|Due to {{the growing}} {{importance}} of the role that software plays in critical systems, software verification process is required to be rigorous and reliable. It is well-known that test activities cannot detect all the defects in <b>safety-critical</b> real time <b>software</b> systems. One way of complementing the test activities is through formal verification. Two useful formal verification techniques are deductive verification and model checking, which allow programs to be statically checked for defects. This paper explores both techniques, by employing the CBMC and Jessie/Frama-C tools {{in the context of}} a <b>safety-critical</b> real time <b>software</b> system. This work is funded by ERDF - European Regional Development Fund through the COMPETE Programme (operational programme for competitiveness) and by National Funds through the FCT - Fundação para a Ciência e a Tecnologia (Portuguese Foundation for Science and Technology) within project FCOMP- 01 - 0124 -FEDER- 020486...|$|R
40|$|A {{graphics}} {{processing capability}} {{will be required}} for deep space missions and must include a range of applications, from safety-critical vehicle health status to telemedicine for crew health. However, preliminary radiation testing of commercial graphics processing cards suggest they cannot operate in the deep space radiation environment. Investigation into an Software Graphics Processing Unit (sGPU) comprised of commercial-equivalent radiation hardened/tolerant single board computers, field programmable gate arrays, and <b>safety-critical</b> display <b>software</b> shows promising results. Preliminary performance of approximately 30 frames per second (FPS) has been achieved. Use of multi-core processors may provide {{a significant increase in}} performance...|$|R
40|$|AbstractDassault Aviation is a French {{aircraft}} manufacturer building civil business jets (the Falcon family) and military jet fighters (the Mirage and Rafale families). It has {{been concerned with}} formal methods inside the development process of avionic software since 1989. In this paper, we give a comprehensive account of three industrial-size studies carried out at Dassault Aviation using the reactive synchronous language ESTEREL and its toolset, {{in collaboration with the}} public research team that develops ESTEREL at Ecole des Mines de Paris and INRIA Sophia-Antipolis. We deal with software engineering issues related to compilation, optimization and verification of <b>safety-critical</b> embedded <b>software.</b> The goal is to ensure production of efficient and reliable code...|$|R
40|$|Abstract—The {{benefits}} {{ascribed to}} Agile methods are attractive to software engineers {{working in the}} <b>safety-critical</b> <b>software</b> domain. There is limited industrial experience and evidence of successful applications of Agile methods in this domain; however, academic research has identified {{some of the key}} challenges of their adoption and application, and has started to present feasibility studies. In this paper, we propose an iterative approach for developing <b>safety-critical</b> <b>software,</b> making two novel contributions. Firstly, we address the notion of up-front design in <b>safety-critical</b> <b>software</b> development, and describe the characteristics of an up-front design that is minimal from the perspective of achieving safety objectives. Secondly, we identify a key difficulty of using iterative development for building <b>safety-critical</b> <b>software,</b> and present a way to develop both a software system and a safety argument iteratively. We also give details of a proof-of-concept example illustrating the use of the approach. Keywords-Safety-critical system, Agile method, Iterative devel-opment, Safety argument...|$|E
40|$|Constructing a B {{model of}} an {{existing}} <b>safety-critical</b> <b>software</b> may be worthwhile {{if it is to}} be reused for the development a new product. Provided the software fulfils some conditions it is possible to construct a B model which defines explicitly the functions and the safety properties of the software and which matches its code so closely that a direct comparison suffices to guarantee the equivalence of their behaviours. A complete B model of the <b>safety-critical</b> <b>software</b> of an automatic train protection system, a user's guide and some improvements of the B language and of the B tools resulted from this work. 1. Introduction Ten years ago the french branch of the railway signalling group of GEC ALSTHOM Transport adopted the B Method[1] for the development of the <b>safety-critical</b> <b>software</b> of its automatic train protection (ATP) systems. Since then, the B Method has been used for the development of the <b>safety-critical</b> <b>software</b> of several systems which are already, or will be soon, operati [...] ...|$|E
40|$|When {{developing}} software it {{is important}} to consider process, methods, and tools. For <b>safety-critical</b> <b>software,</b> standards such as IEC 61508 are often used to impose additional constraints on the development process and require the production of verification evidence and other artifacts. These constraints and artifacts are needed whether or not the design and code were produced manually or via tool automation. This paper discusses the usage of Production Code Generation for <b>safety-critical</b> <b>software</b> development...|$|E
40|$|The {{correctness}} of <b>safety-critical</b> embedded <b>software</b> is crucial, whereas non-functional properties like deadlock-freedom and real-time constraints {{are particularly}} important. The real-time calculus Timed Communicating Sequential Processes (CSP) {{is capable of}} expressing such properties and can therefore be used to verify embedded software. In this paper, we present our formalization of Timed CSP in the Isabelle/HOL theorem prover, which we have formulated as an operational coalgebraic semantics together with bisimulation equivalences and coalgebraic invariants. Furthermore, we apply these techniques in an abstract specification with real-time constraints, which {{is the basis for}} current work in which we verify the components of a simple real-time operating system deployed on a satellite...|$|R
50|$|CompCert is a {{formally}} verified optimizing C compiler. Its {{intended use}} is the compilation of <b>safety-critical</b> and mission-critical <b>software</b> written in C and meeting {{high levels of}} assurance. It produces machine code for the PowerPC (32-bit), ARM, and IA32 (x86 32-bit) architectures. Since 2015 AbsInt offers commercial licenses, provides industrial-strength support and maintenance, and contributes {{to the advancement of}} the tool.|$|R
50|$|In {{software}} development, formal {{methods are}} mathematical approaches to solving software (and hardware) {{problems at the}} requirements, specification, and design levels. Formal methods {{are most likely to}} be applied to <b>safety-critical</b> or security-critical <b>software</b> and systems, such as avionics software. Software safety assurance standards, such as DO-178B, DO-178C, and Common Criteria demand formal methods at the highest levels of categorization.|$|R
40|$|International audienceDevelopment of <b>safety-critical</b> <b>software</b> is {{constrained}} by the requirements of numerous standards and recommendations. In consequence, the development costs and time are considerably higher. In order to deliver high quality products faster and at lower cost <b>safety-critical</b> <b>software</b> developers may look for more efficient approaches {{and in particular the}} agile development practices are considered as a promising alternative. In this text we describe our research towards introducing agile practices into critical software development processe...|$|E
40|$|Accidents and {{incidents}} involving <b>safety-critical</b> <b>software</b> systems {{often provide}} lessons to the systems' users and designers, to industry, {{and to the}} software engineering community at large. Proper identification and documentation of these lessons is critical {{in order to prevent}} the recurrence of an untoward event. In this paper we examine two commercial aviation incidents involving failures of <b>safety-critical</b> <b>software</b> systems. Based on our analysis of the incidents and the official investigations that followed, we conclude that the aviation community is missing important lessons regarding <b>safety-critical</b> <b>software</b> systems, especially concerning the broad role these systems play in preserving the safety of commercial air travel. This is primarily because incidents involving such systems are not being investigated and documented with sufficient rigor to identify these lessons and disseminate them throughout the aviation community effectively...|$|E
40|$|A {{proposal}} {{is made for}} the development of a feature-oriented reuse capability for <b>safety-critical</b> <b>software</b> construction using rigorous methods. We pr´ecis the Event-B language - the evolution of the B-Method of J. -R. Abrial [1] - a leading formal method for <b>safety-critical</b> <b>software</b> development. Current and new infrastructure for scalable development with Event-B is outlined, and contrasted with support required for feature-oriented development. The {{proposal is}} illustrated by a small example of feature-oriented construction and refinement with Event-B...|$|E
40|$|Abstract: <b>Software</b> for <b>safety-critical</b> {{systems has}} to deal with the hazards {{identified}} by safety analysis {{in order to make the}} system safe, risk-free and fail-safe. Software safety is a composite of many factors. Problem statement: Existing software quality models like McCall’s and Boehm’s and ISO 9126 were inadequate in addressing the software safety issues of real time safety-critical embedded systems. At present there does not exist any standard framework that comprehensively addresses the Factors, Criteria and Metrics (FCM) approach of the quality models in respect of software safety. Approach: We proposed a new model for software safety based on the McCall’s software quality model that specifically identifies the criteria corresponding to software safety in safety critical applications. The criteria in the proposed software safety model pertains to system hazard analysis, completeness of requirements, identification of software-related safety-critical requirements, safetyconstraints based design, run-time issues management and <b>software</b> <b>safety-critical</b> testing. Results: This model was applied to a prototype safety-critical software-based Railroad Crossing Control System (RCCS). The results showed that all critical operations were safe and risk-free, capable of handling contingency situations. Conclusion: Development of a safety-critical system based on our proposed software safety model significantly enhanced the safe operation of the overall system. Key words: <b>Software</b> safety, <b>safety-critical</b> system, <b>software</b> qualit...|$|R
40|$|International audienceMost of <b>safety-critical</b> {{embedded}} <b>software,</b> such as y-by-wire control programs, {{performs a}} lot of oating-point computations. High level specications are expressed in a formal model edited manually in SCADE through a graphical interface. It generally handles numerical variables and constants {{as if they were}} ideal real numbers. This work, for the purpose of numerical accuracy analysis, presents a new version of an Automatic Code Generator (ACG). This tool transforms high-level models into C codes and performs static computations by using multiple-precision arithmetic. This article describes a successful way of controlling computation accuracy of numerical constants in an Automatic Code Generator. An accuracy analysis on numerical constant values is presented in a case study...|$|R
40|$|International audienceDassault Aviation is a French {{aircraft}} manufacturer building civil business jets (the Falcon family) and military jet fighters (the Mirage and Rafale families). It has {{been concerned with}} formal methods inside the development process of avionic software since 1989. In this paper, we give a comprehensive account of three industrial-size studies carried out at Dassault Aviation using the reactive synchronous language ESTEREL and its toolset, {{in collaboration with the}} public research team that develops ESTEREL at Ecole des Mines de Paris and INRIA Sophia-Antipolis. We deal with software engineering issues related to compilation, optimization and verification of <b>safety-critical</b> embedded <b>software.</b> The goal is to ensure production of efficient and reliable code...|$|R
40|$|Abstract: Systematic {{verification}} {{and validation}} measures are of essential importance in particular for <b>safety-critical</b> <b>software.</b> After a short introduction into the test environment and error categories, the paper {{presents the results}} of a unit test performed on a C++ software package for the European Space Agency in the ARC Seibersdorf research test lab. The authors analyse the error distribution and relations between software metrics and software faults and recommend guidelines for a less error-prone design of <b>safety-critical</b> <b>software.</b> ...|$|E
40|$|Developing <b>safety-critical</b> <b>software</b> {{is often}} an {{extremely}} complicated process, and if managed incorrectly could have the tendency to cause more harm than good. In {{order to deal with}} the challenge of writing <b>safety-critical</b> <b>software,</b> certain considerations must be followed. Different case studies will be used in this article to illustrate points about the ethics standards, hazard identification challenges, and aftermath management techniques needed to effectively manage the development and deployment of <b>safety-critical</b> <b>software.</b> Safety-critical systems are important in everyday life and are used to manage difficult tasks that may otherwise be impossible to do. Many industries use systems that pose potential hazards to the general public, such as systems designed for the aviation and social engineering industries. When systems are developed for use in hazardous situations, development strategies and ethics standards must change to fit the needs of the project in order {{to ensure the safety of}} employees and the general public. As the demand for these systems continues to grow, standards and strategies developed to keep <b>safety-critical</b> <b>software</b> safe will continue to evolve. Case Studies To illustrate certain points, incidents involving failures in Union Carbide plants...|$|E
40|$|This {{document}} {{is a quick}} reference guide with {{an overview of the}} processes required to certify safety-critical and mission-critical flight software at selected NASA centers and the FAA. Researchers and software developers can use this guide to jumpstart their understanding of how to get new or enhanced software onboard an aircraft or spacecraft. The introduction contains aerospace industry definitions of safety and <b>safety-critical</b> <b>software,</b> as well as, the current rationale for certification of <b>safety-critical</b> <b>software.</b> The Standards for Safety-Critical Aerospace Software section lists and describes current standards including NASA standards and RTCA DO- 178 B. The Mission-Critical versus <b>Safety-Critical</b> <b>software</b> section explains the difference between two important classes of software: <b>safety-critical</b> <b>software</b> involving the potential for loss of life due to software failure and mission-critical software involving the potential for aborting a mission due to software failure. The DO- 178 B Safety-critical Certification Requirements section describes special processes and methods required to obtain a safety-critical certification for aerospace software flying on vehicles under auspices of the FAA. The final two sections give an overview of the certification process used at Dryden Flight Research Center and the approval process at the Jet Propulsion Lab (JPL) ...|$|E
40|$|Timinganalysis of {{assembler}} code {{is essential}} to achieve the strongest possible guarantee of correctness for <b>safety-critical,</b> real-time <b>software.</b> Previous work has shown how timingconstrain ts on controlflow paths through high-level language programs can be formalised using the semantics of the statements comprisingthe path. We extend these results to assembler-level code where it becomes possible to not only determine timingconstrain ts, but also to verify them against the known execution times for each instruction. A minimal formal model is developed with both a weakest liberal precondition and a strongest postcondition semantics. However, despite the formalism’s simplicity, it is shown that complex timingb ehaviour associated with instruction pipeliningand iterative code can be modelled accurately...|$|R
40|$|The {{prevailing}} abstractions {{for software}} are {{better suited to}} the traditional problem of computation, namely transformation of data, than {{to the problems of}} embedded software. These abstractions have weak notions of concurrency and the passage of time, which are key elements of embedded software. Innovations such as nesC/TinyOS (developed for programming very small programmable sensor nodes called 'motes'), Click (created to support the design of software-based network routers), Simulink with Real-Time Workshop (created for embedded control software) and Lustre/SCADE (created for <b>safety-critical</b> embedded <b>software)</b> offer abstractions that address some of these issues and differ significantly from the prevailing abstractions in software engineering. The paper surveys some of the abstractions that have been explored...|$|R
40|$|Verification and Validation (V&V) {{is used to}} {{increase}} the level of assurance of critical software, particularly that of <b>safety-critical</b> and mission-critical <b>software.</b> V&V is a systems engineering discipline that evaluates the software in a systems context, and is currently applied during {{the development of a}} specific application system. In order to bring the effectiveness of V&V to bear within reuse-based software engineering, V&V must be incorporated within the domain engineering process...|$|R
