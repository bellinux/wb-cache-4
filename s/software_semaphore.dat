1|2|Public
40|$|A counter {{operating}} system creates {{a hierarchy of}} levels of abstraction, so that at a given level all details concerning lower levels can be ignored. This hierarchical structure separates functions according to their complexity, characteristic time scale, and level of abstraction. The lowest levels include the system's hardware; concepts associated explicitly with the coordination of multiple tasks appear at intermediate levels, which conduct 'primitive processes'. <b>Software</b> <b>semaphore</b> is the mechanism controlling primitive processes that must be synchronized. At higher levels lie, in rising order, the access to the secondary storage devices of a particular machine, a 'virtual memory' scheme for managing the main and secondary memories, communication between processes {{by way of a}} mechanism called a 'pipe', access to external input and output devices, and a hierarchy of directories cataloguing the hardware and software objects to which access must be controlled...|$|E
5000|$|... 1982, Snipes by SuperSet <b>Software.</b> This used <b>semaphores</b> in {{a shared}} file which resided {{on a network}} drive. It was written as a {{demonstration}} program for SuperSet's local area network system, which became Novell NetWare.|$|R
50|$|Atomicity {{is often}} {{enforced}} by mutual exclusion, whether at the hardware level {{building on a}} cache coherency protocol, or the <b>software</b> level using <b>semaphores</b> or locks. Thus, an atomic operation does not necessarily actually occur instantaneously. The benefit comes from the appearance: the system behaves as if each operation occurred instantly, separated by pauses. This makes the system consistent. Because of this, implementation details may be ignored by the user, except insofar as they affect performance. If an operation is not atomic, the user will also need to understand and cope with sporadic extraneous behaviour caused by interactions between concurrent operations, which by their nature {{are likely to be}} hard to reproduce and debug.|$|R

