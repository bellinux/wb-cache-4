68|343|Public
50|$|Requirements {{engineering}} and software architecture {{can be seen}} as complementary approaches: while software architecture targets the 'solution space' or the 'how', requirements engineering addresses the 'problem space' or the 'what'. Requirements engineering entails the elicitation, negotiation, <b>specification,</b> <b>validation,</b> documentation and management of requirements. Both requirements {{engineering and}} software architecture revolve around stakeholder concerns, needs and wishes.|$|E
40|$|This paper {{described}} the first {{end to end}} application of a novel light weight formal <b>specification,</b> <b>validation,</b> and verification technique. The technique is novel is two aspects. First, it uses an intuitive, familiar, and diagrammatic notation for formal specification, a notation that being Turing equivalent and supports the capture of real-life requirements. Second, the technique includes a computer aided approach for validating the correctness of requirements early in the development process, allowing sufficient time for the correction of ambiguous and underspecified requirements. In the verification phase the technique is based on off-line verification using log-files. This approach scales well and is applicable to almost every mission critical system, including real-time systems. The paper describes the application of this technique towards the <b>specification,</b> <b>validation,</b> and verification of the Pad Abort subsystem of NASA's Orion mission...|$|E
40|$|What is an algorithm? The {{interest}} in this foundational problem is not only theoretical; applications include <b>specification,</b> <b>validation</b> and verification of software and hardware systems. We describe the quest to understand and define the notion of algorithm. We start with the Church-Turing thesis and contrast Church's and Turing's approaches, and we finish with some recent investigations...|$|E
5000|$|Software {{requirements}} (or Requirements engineering): The elicitation, analysis, <b>specification,</b> and <b>validation</b> of {{requirements for}} software.|$|R
40|$|Abstract—The experiments, {{carried on}} AIRBUS systems, show that {{testability}} analysis can ease system formal detailed <b>specifications</b> <b>validation</b> activities. Indeed, testability information can highlight testing efforts, guide functional tests definition, facilitate detailed specification coverage analysis against system requirements, and support tests coverage analysis against formal detailed specification. This paper highlights the assessment result of testability concepts on AIRBUS systems. Keywords- requirement; data-flow design; testability flows; testability measures; testing strategy; test; coverage analysis I...|$|R
40|$|Errors such as {{deadlock}} {{and race}} condition are very common yet {{extremely difficult to}} debug in the communications design of client/server models based on remote procedure call and multi-threading. This paper presents an effective approach to detect these errors. It shows how to apply the <b>specification</b> and <b>validation</b> techniques in Protocol Engineering to discover those errors in the early stage of a client/server software development. The work {{is based on the}} protocol <b>specification</b> and <b>validation</b> tool PROMELA/SPIN. PROMELA is extended to a new language called PROMELA-C/S for additional expressive power of specifying client/server communications. A PROMELA-C/S translator then is built to convert PROMELA-C/S to PROMELA for running validation using SPIN. The paper also reports the results of some <b>specification</b> and <b>validation</b> trials using PROMELA-C/S, its translator, and SPIN...|$|R
40|$|When formal {{modelling}} is done we must validate {{both the}} model and the assumptions. Formal techniques tend {{to concentrate on the}} former. We examine how fault injection (specification mutation) and model checking can help address the latter, in particular, the effects of failure. We find that, in contrast with software testing, "equivalent mutants" are valuable for <b>specification</b> <b>validation...</b>|$|E
40|$|Abstract—This paper {{addresses}} {{the design of}} reactive real-time embedded systems. Such systems are often heterogeneous in implementation technologies and design styles, for example by combining hardware ASICs with embedded software. The concurrent design process for such embedded systems involves solving the <b>specification,</b> <b>validation,</b> and synthesis problems. We review the variety of approaches to these problems that have been taken. I...|$|E
40|$|This report {{presents}} {{the process and}} results of a formal computer-aided <b>Specification,</b> <b>Validation</b> and Verification (SV&V) of two mission and safety critical projects: the Brazilian Satellite Launcher flight software, and the Department of Defense's Multifunctional Information Distribution System (MIDS) controller. The <b>Specification,</b> <b>Validation,</b> and Verification (SV&V) process begins with a system requirement analysis and Natural Language (NL) specification. UML statechart-formal specification assertions are then created using the StateRover SV&V specification environment; these assertions formally capture the NL requirements. The assertions are validated against the NL and cognitive requirements using JUnit-based testing within the StateRover SV&V environment. Finally, Runtime Verification (RV) is performed on the target system under test (SUT). The RV phase is based on log files created by automatically instrumenting source code files, building and executing them on the VxWorks-based target thereby creating log files, importing resulting log files into the StateRover SV&V environment and executing them as JUnit tests against the assertions. Graduate School of Operational and Information Science...|$|E
40|$|This paper {{considers}} {{quality of}} service <b>specification</b> and <b>validation</b> for distributed multimedia systems. We present {{a new perspective on}} the LOTOS/QTL approach to such <b>specification</b> and <b>validation.</b> This approach has been previously presented {{in the context of a}} standard interleaving model of concurrency. In this paper we motivate the use of an alternative, truly concurrent, semantic model based on bundle event structures and integrate these semantics into the LOTOS/QTL approach. The applicability of the approach is illustrated with a specification of a multimedia stream...|$|R
5000|$|Formal <b>specification,</b> formal design, <b>validation,</b> verification, testing ...|$|R
40|$|This paper {{attempts}} to revolutionise control system design by unifying all linear time invariant (LTI) approaches in both time and frequency domains under performance satisfaction. The design is automated by efficient evolution from plant step response data, bypassing the system identification stage. The underlying aim {{is for a}} control engineers to obtain an "off-the-computer" controller by feeding the developed CACSD (computer-aided control system design) system with plant I/O data and customer <b>specifications.</b> <b>Validations</b> against linear and nonlinear plants are convincing, where a better performance of the controller evolved from I/O data of an internally nonlinear plant than that designed from an identified model is observed...|$|R
40|$|Arguably {{the most}} {{important}} task in creation of software is user requirement specification. Accurate requirement specification allows avoidance of errors in late stages of software development. This is extremely important in critical systems, where even vague error can cause great financial losses or even human victims. One of {{the methods used for}} precise user requirement specification is use of formal specifications. Formal specification is a mathematical method for describing of software or hardware, which might be suitable for system realization. Nevertheless, the construction of formal specifications does not guarantee the correctness of specification. For this reason formal <b>specification</b> <b>validation</b> is necessary. In this paper methods of formal <b>specification</b> <b>validation</b> are discussed. Two most popular methods of formal <b>specification</b> <b>validation</b> are reachable state graph analysis and invariant checking. Reachable state graph analysis consists of graph generation and graph analysis. Graphs can be analyzed for dead-ends, closed loops, state reach ability checking, coordinate restriction checking or invariant checking. Traditional reachable graph generation algorithm uses unanalyzed states queue to produce reachable state graph. Each step single state is analyzed and depending on results new vertex or edge is added to state graph. An improvement to the algorithm to consider is usage of parallel programming to process multiple states simultaneously. This allows increasing the speed of algorithm execution, since multiple states will be processed in time just one state was processed. Experiments with single channel processing systems showed, that usage of parallel reachable state generation algorithm for solution of this problem increased analysis performance by up to 35 %, depending on number of states...|$|E
40|$|Abstract- This {{paper is}} {{concerned}} with the correct specification and validation of temporal behaviors in a Service-Oriented Architecture based system-of-systems. It presents a new formalism, called Message Sequence Chart Assertions (MSC-Assertions), for the specification of global system behaviors, and describes a <b>specification</b> <b>validation</b> technique using scenario simulation based on the JUnit Test Framework. We also describe the armorplating of system-of-systems using runtime execution monitoring of MSC-Assertions...|$|E
40|$|The main phases during {{requirements}} engineering include the elicitation, <b>specification,</b> <b>validation,</b> {{and management of}} requirements {{in order to understand}} what the system must do. In the age of distributed and collaborative work, suitable tools and concepts are needed to support requirements activities in this context. Based on requirements derived from basic practices of the ReqMan framework, we will introduce first solution concepts for a wiki-based requirements management tool. ...|$|E
50|$|The key {{stages in}} the CRRSP {{requirements}} methodology are Research and Elicitation, Analysis, Elaboration and <b>Specification,</b> and <b>Validation.</b> It is characterized by detailed validation steps, tools and techniques as well as unique analysis deliverables and traceability products.|$|R
40|$|Currently, {{there is}} no {{solution}} providing automatic validation of objects in the problem of solving Object-to-XML Impedance Mismatch. The author chose Java SE specification JAXB for Object-to-XML mapping and Java EE <b>specification</b> Bean <b>Validation</b> for validation of JavaBean objects. This thesis focuses on the interconnection of the two specifications and {{creation of a new}} <b>specification</b> Bean <b>Validation</b> in JAXB providing automatic validation at the object level during the process of marshalling and unmarshalling. This specification also provides means for mapping XML Restrictions and Facets to Bean Validation constraints. In this thesis author presents the design of Bean Validation in JAXB facility specification, its reference implementation, written by author, and users and programmers guide...|$|R
40|$|ISBN : 978 - 1 - 4020 - 6151 - 6 Global {{modelling}} {{and validation}} {{is required to}} master the design of systems made of heterogeneous components. These systems are now omnipresent in our life, {{and they may be}} found in several domains such as communications (ex. mobile terminals, optical switches), health (e. g. cardiac stimulators, cochlear implants), transportation (ex. automotive and aeronautical), etc. The main difficulties for their design are modelling and validation of the interactions between different components (hardware, software, analogue, RF, optical and micro-mechanical). Global <b>Specification</b> and <b>Validation</b> of Embedded Systems offers a deep understanding of concepts and practices behind the composition of heterogeneous components. After the analysis of existing computation and execution models used for the <b>specification</b> and <b>validation</b> of different sub-systems, the book introduces a systematic approach to build an execution model for systems composed of heterogeneous components. Mixed continuous/discrete and hardware/software systems will be used to illustrate these concepts. The benefit of reading this book is to give a clear vision on the theory and practice of <b>specification</b> and <b>validation</b> of complex modern systems. The examples give to the designers solutions applicable in their daily practice...|$|R
40|$|ISBN: 978 - 1 - 60558 - 231 - 3 International audienceWe {{describe}} an enhanced generic model for Networks-on-Chip (NoCs), {{implemented in the}} executable logic of the ACL 2 theorem prover. The model is meant for serving as a formal reference for the <b>specification,</b> <b>validation,</b> and simulation at the initial design phase. Instantiated on a specific NoC, the model {{may be used for}} formal proofs and for simulation. The methodology is illustrated on HERMES...|$|E
40|$|Using {{the mobile}} phone in two-factor {{authentication}} {{the date of}} receipt and acceptance should be inserted later Abstract In this paper we present a commercial protocol, developed by a norwegian start-up copmany, for using a mobile terminal as a password calculator that could potentially be used towards any service provider on the internet. We report our experiences by <b>specification,</b> <b>validation,</b> {{and analysis of the}} protocol, in particular the threat of phishing attacks is investigated. ...|$|E
40|$|We {{report on}} an {{experience}} in applying a formal method to the specification {{and design of}} a system for monitoring and controlling surface vehicle traffic in a densely populated urban area. We illustrate {{the goals of the}} experience and describe the <b>specification,</b> <b>validation,</b> and verification activities. We also discuss t'e problems deriving from the particular, but, under several aspects, typical history of the application development, and from applying formal methods in an industrial setting. Finally, we assess the encouraging results obtained in the project...|$|E
40|$|This paper {{describes}} the main {{opportunities and challenges}} that we see for introducing more rigorous software engineering practices, particularly those centered on <b>specification</b> and <b>validation,</b> in industrial practice. Our perspective derives from our ongoing work on formal specification and verification of Java programs...|$|R
40|$|The paper {{presents}} the EU funded MADES FP 7 project, {{that aims to}} develop an effective model driven methodology to evolve current practices {{for the development of}} real time embedded systems for avionics and surveillance industries. In MADES, we propose an effective SysML/MARTE language subset and have developed new tools and technologies that support high level design <b>specifications,</b> <b>validation,</b> simulation and automatic code generation, while integrating aspects such as component re-use. The paper first illustrates the MADES methodology by means of a car collision avoidance system case study, followed by the underlying MADES language design phases and tool set which enable verification and automatic code generation aspects, hence enabling implementation in execution platforms such as state of the art FPGAs...|$|R
40|$|Strontium- 82 is {{produced}} by proton activation of a rubidium chloride target in an accelerator or cyclotron and purified by ion exchange chromatography. The Strontrium- 82 is used in Cardigen generators to produce Rubidium- 82 for cardiac imaging. Quality control testing of the purified Strontium- 82 is performed with Inductively Coupled Plasma-Optical Emission spectroscopy (ICP-OES) and gamma spectroscopy. To meet Department of Energy specifications for HCl molarity the purified Strontium- 82 solution needs to be tested {{to determine if the}} isotope is in the 0. 05 – 0. 5 M HCl range. This manuscript reports a simple HCl molarity test to determine if the purified Strontium- 82 solution meets <b>specifications.</b> <b>Validation</b> of the assay was performed by evaluating all solutions associate with Strontium- 82 processing...|$|R
40|$|The Autonomic System Specification Language (ASSL) is {{a formal}} method {{dedicated}} to autonomic computing, and as such, assists developers with formal <b>specification,</b> <b>validation</b> and code generation of autonomic systems. Due to the synthesis approach of automatic code generation, ASSL guarantees consistency between a specification {{and the corresponding}} implementation. Moreover, {{one of the major}} objectives of the framework is to assure the correctness of autonomic systems via the inclusion of tools targeting model checking. In this paper, we report our experience in developing model-checking mechanisms for ASSL...|$|E
40|$|We {{report on}} the formal {{modelling}} of the PRSTV count rules as used in Ireland, and detailed in previous work 2 An algebraic approach was used following an object-based modelling style. This specification model was then used to compare and contrast formal requirements modelling notation and (informal) natural language. We chose to use a minimum number of semantic constructs in the specification language (CafeOBJ[9]) {{for the sake of}} simplicity and accessibility. To conclude, we give an overview of the development process (tools and techniques) used in the <b>specification,</b> <b>validation</b> and verification of the requirement...|$|E
40|$|International audienceThe {{concept of}} a goal {{has been used in}} {{multiple}} domains such as management sciences and strategic planning, artificial intelligence and human computer interaction. Recently goal driven approaches have been developed and tried out to support requirements engineering activities such as requirements elicitation, <b>specification,</b> <b>validation,</b> modification, structuring and negotiation. The paper reviews various research efforts undertaken in this line of research. It uses L'Ecritoire, an approach which supports requirements elicitation, structuring and documenting as a basis to introduce issues in using goals to engineer requirements and to present the state-of-the art...|$|E
40|$|This Viewpoint {{describes}} {{some lessons}} about requirements engineering I learned while being a customer {{in a house}} remodeling. The main lesson {{is the importance of}} the customer insisting on following a full requirements engineering process, including goal identification, requirements elicitation, analysis, and <b>specification,</b> and <b>validation</b> of the <b>specification...</b>|$|R
40|$|Methodologies, approaches, and {{techniques}} associated with software requirements analysis and definition; process for defining {{requirements of a}} system including feasibility study, requirements elicitation, formal <b>specification,</b> modeling, <b>validation,</b> verification, and documentation; other topics include cooperative teamwork and project management; first semester of a two-semester capstone project in which students work with a customer...|$|R
40|$|This {{case study}} {{concerns}} the <b>specification</b> and <b>validation</b> of a Security Policy Model (SPM) for an electronic network. The network {{is intended to}} provide processing and transmission services for electronic messages, including sensitive and classified material, over distributed sites and supporting multiple levels of security classification. The SPM is formally specified in VDM-SL and validated by showing that the model is mathematically consistent and satisfies certain security properties. Rigorous proofs are provided. In addition, the case study illustrates some new techniques concerning proof obligations for exception conditions in VDM-SL. 1 Introduction 1. 1 Background and Context This chapter describes the <b>specification</b> and <b>validation</b> of a formal Security Policy Model (SPM) for an electronic-message processing and transmission service. The SPM is a distillation of the important security requirements of the software system that provides the service. The SPM described here is [...] ...|$|R
40|$|International audienceThis paper {{deals with}} {{experience}} with specification languages at AEROSPATIALE Aircraft, Systems and Avionics Division. We describe first the current avionics development environment. Then, we present our results and viewpoints {{on the use}} of the three specification languages: LOTOS, ESTEREL, and B. The evaluation studies we performed, showed that each of these languages does not cover in a complete way our needs in <b>specification,</b> <b>validation,</b> and development of avionics. Afterwards, we propose and illustrate an investigation approach that allows to structure and compose different formal specification languages in the same environment...|$|E
40|$|Colloque avec actes et comité de lecture. internationale. International audienceRecent {{advances}} in using Formal Description Techniques within {{the design and}} development process of OSI-based management systems are very encouraging and practical results are emerging. Based on the work done so far, the paper presents the results obtained from a field trail whose goal was {{to evaluate the use}} of Labelled transition System based Formal Description Techniques and associated tools for the <b>specification,</b> <b>validation</b> and animation of a complete Information Model. The paper also discusses some open issues in the domain...|$|E
40|$|The {{evolution}} of electronic systems requires {{the use of}} new specification languages, joining together the necessary concepts for <b>specification,</b> <b>validation</b> and refinement for the design of circuits and integrated systems. Consequently, as a result of studies achieved in this domain several languages are now proposed. Unfortunately, any of these languages supports all the requirements for the conception of electronic systems. This paper presents fundamental concepts used throughout the design flow, in order to analyze {{the strengths and weaknesses of}} existing languages. After we analyze the solutions proposed currently for electronic system specification, we propose a specification model for synthesis and electronic systems design...|$|E
40|$|International audienceThis paper {{proposes a}} model {{describing}} resynchronization {{services in the}} data transfer phase of the Network layer. The model described the required properties in a very reduced form. It is functionally equivalent to a protocol model describing the protocol internal mechanisms. Assertions relative to the Network layer model can be conserved in the Transport layer model. These assertions can therefore {{be used for the}} validation of the Transport layer properties. This functional validation approach can be generalized to the characterization of any other hierarchical system. The joint development of <b>specification</b> and <b>validation</b> models will make it possible in the near future to make tools available for <b>specification,</b> modeling and <b>validation</b> in a rigorous and easy way...|$|R
30|$|Requirement {{engineering}} is a four step process, which includes feasibility study, requirement gathering, requirement <b>specification,</b> and requirement <b>validation.</b> Each stage has its specific tasks and outputs.|$|R
40|$|A {{methodology}} for feature design, <b>specification,</b> and <b>validation</b> is presented. The methodology {{is based on}} Use Case Maps for the description of features and on LOTOS with its tools for animation of the features, for feature validation, and for feature interaction detection. It has been developed as a collaborative project between the University of Ottawa and Mitel Corporation, and is being used experimentally to design, specify and validate the features of Mitel's new PBX. 1 Introduction A {{methodology for}} feature design, <b>specification,</b> and <b>validation,</b> is being developed in a joint project between Mitel Corporation and the University of Ottawa. This methodology uses Use Case Maps (UCMs) [5][7] for the design and documentation of features, and LOTOS [12] for the formal specification of features and for their formal verification, including the detection of undesirable interactions. The UCM notation allows designers to describe scenarios visually. System-wide scenario paths connec [...] ...|$|R
