0|3950|Public
5000|$|Simple Hierarchical Indexed <b>Sequential</b> <b>Access</b> <b>Method</b> (SHISAM).|$|R
50|$|BPAM {{provides}} an {{application program interface}} (API) to allow programmers to access libraries directly. The BPAM API is similar to basic <b>sequential</b> <b>access</b> <b>method</b> (BSAM), but it adds functionality to process directories. Individual members of a PDS can also be processed using <b>sequential</b> <b>access</b> <b>methods</b> by specifying the member name on the job control DD statement.|$|R
50|$|IBM Informix C-ISAM (also C-ISAM or cisam) is an X/Open {{standards-compliant}} API to an Indexed <b>Sequential</b> <b>Access</b> <b>Method</b> or ISAM.|$|R
50|$|The {{concept of}} RRDS {{is similar to}} <b>sequential</b> <b>access</b> <b>method,</b> but it can access with data in random access and dynamic access.|$|R
50|$|In IBM {{mainframe}} operating systems, Basic <b>sequential</b> <b>access</b> <b>method</b> (BSAM) is an <b>access</b> <b>method</b> to {{read and}} write datasets sequentially. BSAM is available on OS/360, OS/VS2, MVS, z/OS, and related operating systems.|$|R
40|$|Real time {{fingerprint}} {{identification is}} usually equipped with specific computation machine architecture to optimize speed factor. Focusing on achieving better speed performance of fingerprint identification on common computation machine, a disquisition {{was conducted on}} <b>sequential</b> <b>access</b> <b>method</b> for fingerprint identification, with its underlying data structure designed to work without and with parallel processing. Hypothetically, parallel processing based on multi cores processor technology, can give faster result without reducing accuracy. Experiment confirms that speed performance of fingerprint identification using <b>sequential</b> <b>access</b> <b>method</b> with parallel processing outperforms the one without parallel processing. For both strategy, even though using parallel processing confirms faster result, experiment shows that searching time O(n) still linearly depends on number of fingerprints in database. Avoiding such searching time trend, hypothetically, need strategy of direct <b>access</b> <b>method</b> utilization. </em...|$|R
40|$|This {{thesis is}} {{basically}} {{concerned with the}} retrieving and organizing of data files, and providing the methodology to access the data files or fields of data. Virtual array <b>access</b> <b>method</b> and <b>sequential</b> <b>access</b> <b>method</b> are used to access records in a file. The primary objective is to per form the payroll and calculate taxes for the employees...|$|R
5000|$|ISAM (an {{acronym for}} indexed <b>sequential</b> <b>access</b> <b>method)</b> {{is a method}} for creating, maintaining, and {{manipulating}} indexes of key-fields extracted from random data file records to achieve fast retrieval of required file records. IBM developed ISAM for mainframe computers. Today the term is used for several related concepts: ...|$|R
50|$|ESE is an Indexed <b>Sequential</b> <b>Access</b> <b>Method</b> (ISAM) {{data storage}} {{technology}} from Microsoft. ESE is notably {{a core of}} Microsoft Exchange Server and Active Directory. Its purpose is to allow applications to store and retrieve data via indexed and <b>sequential</b> <b>access.</b> Windows Mail and Desktop Search in the Windows Vista operating system also make use of ESE to store indexes and property information respectively.|$|R
50|$|Extensible Storage Engine (ESE), {{also known}} as JET Blue, is an ISAM (indexed <b>sequential</b> <b>access</b> <b>method)</b> data storage {{technology}} from Microsoft. ESE {{is the core of}} Microsoft Exchange Server, Active Directory, Branch Cache, and Windows Search. It's also used by a number of Windows components including Windows Update client and Help and Support Center. Its purpose is to allow applications to store and retrieve data via indexed and <b>sequential</b> <b>access.</b>|$|R
50|$|The IOBSPSVC flag (logically, the IOBs SAM and PAM SVC flag) is available, {{and which}} causes <b>Sequential</b> <b>Access</b> <b>Methods</b> {{appendages}} to be bypassed. This enhancement, which was first implemented with SVS, {{but was not}} retrofitted to previous versions of the OS, significantly facilitated processing a dataset already OPENed for BSAM or BPAM, while using XDAP.|$|R
50|$|Btrieve is a {{database}} developed by Pervasive Software. The architecture of Btrieve {{has been designed}} with record management in mind. This means that Btrieve only deals with the underlying record creation, data retrieval, record updating and data deletion primitives. Together with the MicroKernel Database Engine it uses ISAM, Indexed <b>Sequential</b> <b>Access</b> <b>Method,</b> as its underlying storage mechanism.|$|R
5000|$|At its core, c-treeACE uses a record-oriented, Indexed <b>Sequential</b> <b>Access</b> <b>Method</b> (ISAM) {{structure}} offering {{high speed}} indexing mechanisms over those files. Developers can use these direct <b>access</b> <b>methods</b> {{to design the}} data and index structures that closely parallel {{the needs of their}} application. This paradigm is sometimes referred to as an application-specific database [...] or an embedded database because of the tightly coupled nature of the application and database.|$|R
5000|$|<b>Access</b> <b>methods</b> for DASDs include sequential, indexed, and direct. Direct access {{contrasts}} with the <b>sequential</b> <b>access</b> <b>method</b> used in tape drives. A record on a DASD can be accessed without having to read through intervening records from the current location, whereas reading {{anything other than the}} [...] "next" [...] record on tape requires skipping over intervening records, and requires a proportionally long time to access a distant point in a medium.|$|R
25|$|Btrieve is a {{transactional}} database (navigational database) software product. It {{is based}} on Indexed <b>Sequential</b> <b>Access</b> <b>Method</b> (ISAM), which {{is a way of}} storing data for fast retrieval. There have been several versions of the product for MS-DOS, Linux, older versions of Microsoft Windows, Windows 98, Windows NT, Windows 2000, Windows XP, Windows Server 2003, 32-bit IBM OS/2 and for Novell NetWare.|$|R
40|$|The {{challenges}} {{confronting the}} Run II data management and access system include stor- ing, managing and {{providing access to}} the hundreds of terabytes of data. A system employing a <b>Sequential</b> <b>Access</b> <b>Method</b> of delivering # 12;les has been designed and a prototype is being built. The design and function of this system is discussed and a status report of the project is provided...|$|R
50|$|QSAM is—as {{its name}} says—queued, in this {{specific}} context meaning buffered with deblocking of reads and blocking of writes. It allows programs {{to read and}} write logical records within physical blocks of data, as opposed to the less advanced basic <b>sequential</b> <b>access</b> <b>method</b> (BSAM) which allows programs to access physical blocks of data, but provides no support for accessing logical records within blocks.|$|R
40|$|A very {{promising}} idea for fast searching in traditional and multimedia databases is to map objects into points in k-d space, using k feature-extraction functions, {{provided by a}} domain expert [Jag 91]. Thus, we can subsequently use highly fine-tuned spatial <b>access</b> <b>methods</b> (<b>SAMs),</b> to answer several types of queries, including the `Query By Example' type (which translates to a range query...|$|R
50|$|DMSII {{provided}} an ISAM (indexed <b>sequential</b> <b>access</b> <b>method)</b> model for data access, transaction isolation and database-recovery capabilities. The database schema {{was written in}} the proprietary Data and Structure Definition Language (DASDL). The DASDL source code was compiled with a system utility into a file containing the metadata for the database (known as the description file). A database-utility program would use the database description file to create the remaining components of the database.|$|R
50|$|The KSDS {{organization}} {{was designed to}} replace ISAM, the Indexed <b>Sequential</b> <b>Access</b> <b>Method.</b> Changes in disk technology had meant that searching for data in ISAM data sets had become very inefficient. It was also difficult to move ISAM data sets as there were embedded pointers to physical disk locations which became invalid if the data set was moved. IBM also provided a compatibility interface to allow programs coded to use ISAM to use a KSDS instead.|$|R
50|$|An {{important}} {{challenge for}} harnessing {{the power of}} a midrange computer is interacting with an online user and providing ease of use. So what if your customer file has a million records... can your computer operator find the right one quickly? Concepts such as ISAM (Indexed <b>Sequential</b> <b>Access</b> <b>Method)</b> have been around {{since the early days of}} computing. Using a display format, with colors, blinking fields, command keys, and scrolling functions, an operator can quickly adjust to advanced programs and become more effective.|$|R
50|$|BSAM allows {{programs}} {{to read and}} write physical blocks of data, as opposed to the more powerful but less flexible Queued <b>Sequential</b> <b>Access</b> <b>Method</b> (QSAM) which allows {{programs to}} access logical records within physical blocks of data.The BSAM user must be aware of the possibility of encountering short (truncated) blocks (blocks within a dataset which are shorter than the BLKSIZE of the dataset), particularly {{at the end of a}} dataset, but also in many cases within a dataset. QSAM has none of these limitations.|$|R
25|$|There {{are three}} modules to Jet: One is the Native Jet ISAM Driver, a {{dynamic link library}} (DLL) that can {{directly}} manipulate Microsoft Access database files (MDB) using Indexed <b>Sequential</b> <b>Access</b> <b>Method</b> (ISAM). Another one of the modules contains the ISAM Drivers, DLLs that allow access {{to a variety of}} ISAM databases, among them xBase, Paradox, Btrieve and FoxPro, depending on the version of Jet. The final module is the Data Access Objects (DAO) DLL. DAO provides an API that allows programmers to access JET databases using any programming language.|$|R
25|$|There {{were three}} modules to Jet. One was the Native Jet ISAM Driver, a Jet {{dynamic link library}} (DLL) that could {{directly}} manipulate Microsoft Access database files (MDB), which was a modified form of an Indexed <b>Sequential</b> <b>Access</b> <b>Method</b> (ISAM) database. Another one of the modules were the ISAM Drivers, DLLs that allowed access to ISAM databases, among them being Xbase, Paradox, Btrieve and FoxPro files. The final module was the Data Access Objects (DAO) DLL, DAO allowed programmers access to the Jet engine. It was basically an object-oriented data language used by Access Basic and Visual Basic application developers to access Jet.|$|R
40|$|INTRODUCTION In recent years, {{due to the}} {{increasing}} volumes of multimedia data in the World Wide Web, digital library, biomedicine and other applications, efficient content based similarity search in large image databases is gaining considerable research attentions. As a result, various indexing methods known as Spatial <b>Access</b> <b>Methods</b> (<b>SAMs)</b> and metric trees have been proposed to support this kind of retrieval. The former includes SS-tree, R + -tree and grid files;the latter includes the vp-tree, mvp-tree, GNAT and M-tree [3]. However, the optimised distance-based <b>access</b> <b>methods</b> currently available for multidimensional indexing in multimedia databases are developed based on two major assumptions: a suitable distance function is known a priori and the dimensionality of the image features is low. Unfortunately, these assumptions do not make the problem substantially easier to solve. For example, {{it is extremely difficult}} to define a distance function that accurately mimics human v...|$|R
50|$|The {{first part}} of an ETL process {{involves}} extracting {{the data from the}} source system(s). In many cases, this represents {{the most important aspect of}} ETL, since extracting data correctly sets the stage for the success of subsequent processes. Most data-warehousing projects combine data from different source systems. Each separate system may also use a different data organization and/or format. Common data-source formats include relational databases, XML and flat files, but may also include non-relational database structures such as Information Management System (IMS) or other data structures such as Virtual Storage <b>Access</b> <b>Method</b> (VSAM) or Indexed <b>Sequential</b> <b>Access</b> <b>Method</b> (ISAM), or even formats fetched from outside sources by means such as web spidering or screen-scraping. The streaming of the extracted data source and loading on-the-fly to the destination database is another way of performing ETL when no intermediate data storage is required. In general, the extraction phase aims to convert the data into a single format appropriate for transformation processing.|$|R
40|$|Abstract — One of {{the most}} {{frequent}} operation performed on database is searching. To perform this operation we have different kinds of searching algorithms, {{some of which are}} Binary Search, Index <b>Sequential</b> <b>Access</b> <b>Method</b> (ISAM), but these and all other searching algorithms work only on data, which are previously sorted. An efficient algorithm is required {{in order to make the}} searching algorithm fast and efficient. This research paper presents a new sorting algorithm named as “Optimized Selection Sort Algorithm, OSSA”. OSSA is designed to perform sorting quickly and more effectively as compared to the existing version of selection sort. The introduction of OSSA version of selection sort algorithm for sorting the data stored in database instead of existing selection sort algorithm will provide an opportunity to the users to save almost 50 % of their operation time with almost 100 % accuracy...|$|R
40|$|The use of Spatial <b>Access</b> <b>Methods</b> (<b>SAMs)</b> in spatial {{database}} systems, such as Geographic Information Systems, {{is necessary}} to achieve efficient retrieval of data items according to their spatial properties. Existing SAMs organizing minimum bounding rectangles (MBRs) can be classified into four groups. Each group {{is characterized by the}} special technique adopted for managing MBRs: a) Ordering, b) Clipping, c) Overlapping, and d) Transformation. This paper introduces a fifth technique, termed Abstraction. The basic idea of the abstraction technique is to represent all spatial objects by their MBRs and further reduce them into points of the same dimensionality, so that any multidimensional Point <b>Access</b> <b>Method</b> (PAM) may be used to support access. Preliminary experimental results show that SAMs using the abstraction technique outperform popular SAMs, such as the R- and R * -trees for data sets consisting of equal sized MBRs. As for data sets of varying MBR sizes a competitive [...] ...|$|R
40|$|Similarity {{indexing}} using Spatial <b>Access</b> <b>Methods</b> (<b>SAMs)</b> like e. g., R-trees, {{assumes that}} each data entity (or query) {{is represented by}} exactly one multidimensional point. However, for several applications, including indexing and retrieval of multimedia data like onedimensional signals and images, it is required that each data entity is represented by multiple points in a multidimensional space. This work extends the existing framework of indexing using SAMs to handle such data entities and has many desirable properties: For example, it provides index support for the two most common types of similarity queries, namely range and nearest neighbor (NN) queries, it returns exactly the same answers with the sequential scan method (only much faster) and, it works with any SAM and any data type. The effectiveness of the proposed approach is demonstrated using images with multiple regions. ...|$|R
40|$|To {{achieve a}} man-machine interface(MMI) for a laparoscopic {{manipulator}} system consider-ing medical requirements such as safety and usability, we developed several MMIs and per-formed a quantitative experiment and in-vivo experiment. We developed {{two kinds of}} MMI, which were a voice recognition system and a head motion control system called “Head-mouse”. Furthermore, two kinds of control method were proposed; (1) Random <b>access</b> <b>method</b> (RA) : a surgeon directly commands the three degrees of freedom of {{the direction of the}} laparoscope. (2) <b>Sequential</b> <b>access</b> <b>method</b> (SA) : a surgeon indicates the direction using the time difference of the ON/OFF command. A quantitative evaluation experiment and in-vivo experiment were per-formed with these system. In the experiments, we confirmed that the command time was less in the Head-mouse than that in the voice recognition system, and that the SA was more suitable to the man-machine interface for the laparoscopic manipulator system. We achieved safe and simple command system by the combination of head motion command system and the SA method. Laparoscopic surgery is becoming increasingly popular as a form of minimally invasive sur-gery. A major problem in it is the smooth manipulation of the laparoscope. A surgeon is usuall...|$|R
40|$|A very {{promising}} idea for fast searching in traditional and multimedia databases is to map objects into points in k-d space, using k feature-extraction functions, {{provided by a}} domain expert [25]. Thus, we can subsequently use highly fine-tuned spatial <b>access</b> <b>methods</b> (<b>SAMs),</b> to answer several types of queries, including the `Query By Example' type (which translates to a range query); the `all pairs' query (which translates to a spatial join [8]); the nearest-neighbor or best-match query, etc. However, designing feature extraction functions can be hard. It is relatively easier for a domain expert to assess the similarity/distance of two objects. Given only the distance information though, it is not obvious how to map objects into points. This is exactly the topic of this paper. We describe a fast algorithm to map objects into points in some k-dimensional space (k is user-defined), such that the dis-similarities are preserved. There are two benefits from this mapping: (a) efficient ret [...] ...|$|R
40|$|Abstract—Modern spatial {{database}} management systems require a unique Spatial <b>Access</b> <b>Method</b> (<b>SAM)</b> in order solve complex spatial quires efficiently. In {{this case the}} spatial data structure takes a prominent place in the SAM. Inadequate data structure leads forming poor algorithmic choices and forging deficient understandings of algorithm behavior on the spatial database. A key step in developing a better semantic spatial object data structure is to quantify the performance effects of semantic and outlier detections that are not reflected in the previous tree structures (R-Tree and its variants). This paper explores a novel SSR O-Tree on SAM to the Topo-Semantic approach. The paper shows how to identify and handle the semantic spatial objects with outlier objects during page overflow/underflow, using gain/loss metrics. We introduce a new SSR O-Tree algorithm which facilitates the achievement of better performance in practice over algorithms that are superior in the R *-Tree and R O-Tree by considering selection queries. Keywords—Outlier, semantic spatial object, spatial objects, SSR O-Tree, topo-semantic. I...|$|R
40|$|We {{examine the}} problem of finding similar tumor shapes. The main {{contribution}} of this work is the proposal of a natural (dis-) similarity function for shape matching called the `morphological distance'. This function has two desirable properties: (a) it matches human perception of similarity, as we illustrate with precision/recall experiments; (b) it can be lower-bounded {{by a set of}} features, leading to fast indexing for range queries and nearest neighbor queries. We use state-of-the-art methods from morphology both in defining our distance function and for feature extraction. In particular, we use the `size-distribution', related to the `pattern spectrum', to extract features from shapes. Following Jagadish and Faloutsos et al., we organize the n-d feature points in a spatial <b>access</b> <b>method</b> (<b>SAM).</b> We show that any L p norm in the n-d space lower-bounds the morphological distance. This guarantees no false dismissals for range queries. In addition, we present a nearest neig [...] ...|$|R
40|$|The {{state-of-the-art}} {{approach for}} speeding-up the time responses in databases is using Spatial <b>Access</b> <b>Methods</b> (<b>SAMs)</b> like e. g., R-trees. However, these methods do not treat image content directly (e. g., objects are approximated by their minimum bounding rectangles), nor can they handle images with multiple regions. The proposed approach extends the existing framework of indexing using SAMs to treat image content {{in conjunction with}} two well known image matching methods, namely the editing distance on Attributed Relational Graphs (ARGs) and the Hungarian method for graph matching. It provides index support for the two most common types of similarity queries, referred to as range and nearest neighbor queries and has many desirable properties. For instance, it handles even complex queries specifying multiple objects (such as queries by image example), it returns exactly the same answers with the sequential scan methods (without indexing) and works with any SAM (e. g., R-tress) and with any image distance function provided that it satisfies the so called Lower Bounding Principle...|$|R
40|$|Spatial <b>access</b> <b>methods</b> (<b>SAMs)</b> {{are used}} for {{information}} retrieval in large spatial databases. Many of the SAMs use sequential tree structures to search the result set of the spatial data which arecontained in the given query region. In order to improve performance for the SAM, this paper proposes a parallel method using GPU. Since the searching process needs intensive computation but is independentlyexamined {{on a lot of}} the MBRs of the spatial data, the spatial search function can be efficiently computed on GPU in a massive parallel way. The proposed method achieves high speed by efficiently utilizing the parallelism of the GPU throughout the whole process and by reducing the transfer latency between CPU and GPU with the memory structure which resides in GPU memory at all times and with the usage of bitwise operation for the result set. In order to measure the speedup achieved by the proposed parallel method, the execution time is compared with the sequential R*-tree that is loaded in the main memory and executed on CPU...|$|R
40|$|Databases, {{collections}} of related data, are {{as old as}} the written word. A database can be anything from a homemaker's metal recipe file to a sophisticated data warehouse. Yet today, when we think of a database we invariably think of computerized data and their DBMSs (database management systems). How did we go from organizing our data in a simple metal filing box or cabinet to storing our data in a sophisticated computerized database? How did the computerized database evolve? This paper defines what we mean by a database. It traces the evolution of the database, from its start as a non-computerized set of related data, to the, now standard, computerized RDBMS (relational database management system). Early computerized storage methods are reviewed including both the ISAM (Indexed <b>Sequential</b> <b>Access</b> <b>Method)</b> and VSAM (Virtual Storage <b>Access</b> <b>Method)</b> storage methods. Early database models are explored including the network and hierarchical database models. Eventually, the relational, object-relational and object-oriented databases models are discussed. An appendix of diagrams, including hierarchical occurrence tree, network schema, ER (entity relationship) and UML (unified modeling language) diagrams, is included to support the text. This paper concludes with an exploration of current and future trends in DBMS development. It discusses the factors affecting these trends. It delves into the relationship between DBMSs and the increasingly popular object-oriented development methodologies. Finally, it speculates {{on the future of the}} DBMS. Comment: 13 pages, including figures and bibliograph...|$|R
