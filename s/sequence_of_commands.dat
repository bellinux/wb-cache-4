117|10000|Public
2500|$|Joe Hill was {{executed}} by firing squad on November 19, 1915. When Deputy Shettler, {{who led the}} firing squad, called out the <b>sequence</b> <b>of</b> <b>commands</b> preparatory to firing ("Ready, aim,") Hill shouted, [...] "Fire — go on and fire!" ...|$|E
5000|$|... {{proposed}} HTTP {{status code}} indicating a gateway time-out, SMTP status code meaning bad <b>sequence</b> <b>of</b> <b>commands</b> ...|$|E
5000|$|Executing {{the same}} command or a short <b>sequence</b> <b>of</b> <b>commands</b> over and over. An example {{might be a}} {{developer}} frequently compiling and running a program.|$|E
30|$|Pajek {{contains}} several {{operations that}} enable transitions among objects. In this way analysis of large networks {{can be performed}} fluently. <b>Sequences</b> <b>of</b> <b>commands</b> {{can be defined as}} a macro.|$|R
40|$|Automated {{sequence}} generation" (autogen) signifies both {{a process}} and software used to automatically generate <b>sequences</b> <b>of</b> <b>commands</b> to operate various spacecraft. The autogen software comprises the autogen script plus the Activity Plan Generator (APGEN) program. APGEN {{can be used}} for planning missions and command sequences...|$|R
40|$|In this work, {{we propose}} an Intrusion Detection model for {{computer}} newtorks based on Hidden Markov Models. While stateful techniques {{are widely used}} to detect intrusion at the operating system level, by tracing the <b>sequences</b> <b>of</b> system calls, this issue has been rarely researched {{for the analysis of}} network traffic. The proposed model aims at detecting intrusions by analysing the <b>sequences</b> <b>of</b> <b>commands</b> that flow between hosts in a network for a particular service (e. g., an ftp session). First the system must be trained in order to learn the typical <b>sequences</b> <b>of</b> <b>commands</b> related to innocuous connections. Then, intrusion detection is performed by indentifying anomalous sequences. To harden the proposed system, we propose some techniques to combine HMM. Reported results attained on the traffic acquired from a European ISP shows the effectiveness of the proposed approach...|$|R
50|$|The MAC {{address of}} the iBeacon along with its iBeacon payload is clearly identifiable. The <b>sequence</b> <b>of</b> <b>commands</b> in {{technical}} details can then be used to reproduce the iBeacon frame.|$|E
5000|$|As an example, the {{following}} <b>sequence</b> <b>of</b> <b>commands</b> runs the virtual framebuffer as display , runs {{a program on}} it, and captures the virtual screen in the file [...] using the import command of ImageMagick: ...|$|E
5000|$|Locking a file is {{in effect}} locking {{the name of that}} file. For example, the {{following}} <b>sequence</b> <b>of</b> <b>commands</b> can be executed while leaving FILE1 locked even though a file with the name FILE1 does not always exist: ...|$|E
50|$|A {{feature of}} many {{command-line}} shells {{is the ability}} to save <b>sequences</b> <b>of</b> <b>commands</b> for re-use. A data file can contain <b>sequences</b> <b>of</b> <b>commands</b> which the CLI can be made to follow as if typed in by a user. Special features in the CLI may apply when it is carrying out these stored instructions. Such batch files (script files) can be used repeatedly to automate routine operations such as initializing a set of programs when a system is restarted. Batch mode use of shells usually involves structures, conditionals, variables, and other elements of programming languages; some have the bare essentials needed for such a purpose, others are very sophisticated programming languages in and of themselves. Conversely, some programming languages can be used interactively from an operating system shell or in a purpose-built program.|$|R
5000|$|Macro Editor:The Macro Editor is {{actually}} a subcomponent of the Personality Editor, but it warrants its own description. The user can create their own macros which are <b>sequences</b> <b>of</b> <b>commands</b> that the RS Media can execute. Macros can also include conditional routines {{that are based on}} environmental or user feedback.|$|R
40|$|We {{show that}} {{masquerade}} detection, based on <b>sequences</b> <b>of</b> <b>commands</b> {{executed by the}} users, can be effectively and efficiently done by {{the construction of a}} customized grammar representing the normal behavior of a user. More specifically, we use the Sequitur algorithm to generate a context-free grammar which efficiently extracts repetitive <b>sequences</b> <b>of</b> <b>commands</b> executed by one user – which is mainly used to generate a profile of the user. This technique identifies also the common scripts implicitly or explicitly shared between users – a useful set of data for reducing false positives. During the detection phase, a block <b>of</b> <b>commands</b> is classified as either normal or a masquerade based on its decomposition in substrings using the grammar of the alleged user. Based on experimental results using the Schonlau datasets, this approach shows a good detection rates across all false positive rates – they are the highest among all published results known to the author. ...|$|R
5000|$|Joe Hill was {{executed}} by firing squad on November 19, 1915. When Deputy Shettler, {{who led the}} firing squad, called out the <b>sequence</b> <b>of</b> <b>commands</b> preparatory to firing ("Ready, aim,") Hill shouted, [...] "Fire — go on and fire!" ...|$|E
5000|$|SM (also {{known as}} [...] "Supermongo") is an {{interactive}} plotting program written by Robert Lupton and Patricia Monger. SM {{has its own}} command language. It is possible to write macros. The plot is executed as a <b>sequence</b> <b>of</b> <b>commands.</b>|$|E
5000|$|An option then {{exists to}} leave the {{application}} at that level; set a <b>sequence</b> <b>of</b> <b>commands</b> into one or more [...] "RUN" [...] procedures (as in a [...] "macro"); add {{a new type of}} related data; or abandon the experiment and proceed on to different work.|$|E
40|$|The Cassini Spacecraft {{will soon}} journey to Saturn {{to perform a}} {{close-up}} study of the Saturnian system; its rings, moons, magneto-sphere, andf the planet itelf. <b>Sequences</b> <b>of</b> <b>commands</b> {{will be sent to}} the spacecraft by ground personnel to control every aspect of the mission. To validate and verify these command sequences, a bit-level, high-speed simulator (HSS) has been developed...|$|R
50|$|A {{procedural}} programming language without type checking, Forth features both interactive execution <b>of</b> <b>commands</b> (making it suitable as a shell for systems that lack {{a more formal}} operating system) {{and the ability to}} compile <b>sequences</b> <b>of</b> <b>commands</b> for later execution. Some Forth implementations (usually early versions or those written to be extremely portable) compile threaded code, but many implementations today generate optimized machine code like other language compilers.|$|R
40|$|Version 2. 0 of the autogen {{software}} {{has been}} released. "Autogen" (automated sequence generation) signifies both a process and software used {{to implement the}} process of automated generation <b>of</b> <b>sequences</b> <b>of</b> <b>commands</b> in a standard format for uplink to spacecraft. Autogen requires fewer workers than are needed for older manual sequence-generation processes and reduces sequence-generation times from weeks to minutes...|$|R
5000|$|As a shell, COMMAND.COM has two {{distinct}} modes of work. First is the interactive mode, {{in which the}} user types commands which are then executed immediately. The second is the batch mode, which executes a predefined <b>sequence</b> <b>of</b> <b>commands</b> stored as a text file with the extension [...]BAT.|$|E
5000|$|Harrison, Ruzzo and Ullman {{discussed}} {{whether there}} is an algorithm that takes an arbitrary initial configuration and answers the following question: is there an arbitrary <b>sequence</b> <b>of</b> <b>commands</b> that adds a generic right into a cell of the access matrix where it has not been in the initial configuration? ...|$|E
5000|$|The {{arithmetic}} precision {{is changed}} with the command 'k', which sets the number of fractional digits (the number of digits following the point) {{to be used for}} arithmetic operations. Since the default precision is zero, this <b>sequence</b> <b>of</b> <b>commands</b> produces '0' as a result: [...] 2 3 / p ...|$|E
5000|$|The {{commands}} {{can be used}} {{to ignore}} the success or failure <b>of</b> a <b>sequence</b> <b>of</b> other <b>commands,</b> as in the example: ...|$|R
50|$|A macro is {{a series}} <b>of</b> <b>commands</b> and actions that helps {{automating}} some tasks - usually a quite short and simple program. However they are created, {{they need to be}} executed by some system which interprets the stored commands. Some macro systems are self-contained programs, but others are built into complex applications (for example word processors) to allow users to repeat <b>sequences</b> <b>of</b> <b>commands</b> easily, or to allow developers to tailor the application to local needs.|$|R
5000|$|... : Commands {{separated}} by & are executed in <b>sequence</b> (=chaining <b>of</b> <b>commands).</b> In other words: first command1 is executed until termination, then command2.|$|R
5000|$|Progress bars : Suppose {{a program}} has a <b>sequence</b> <b>of</b> <b>commands</b> that it executes in order. If each command object has a getEstimatedDuration (...) method, {{the program can}} easily {{estimate}} the total duration. It can show a progress bar that meaningfully reflects how close the program is to completing all the tasks.|$|E
5000|$|Xvfb is {{also used}} for remote control. VNC over SSH is {{slightly}} faster than X11 over SSH. In this case, Xvfb is often combined with a lightweight window manager such as Fluxbox and a VNC server such as X11vnc. A possible <b>sequence</b> <b>of</b> <b>commands</b> to start this on the server is: ...|$|E
50|$|LINQ {{provides}} a capability over typical List Comprehension implementations. When the root {{object of the}} comprehension implements the IQueryable interface, rather than just executing the chained methods of the comprehension, the entire <b>sequence</b> <b>of</b> <b>commands</b> are converted into an Abstract Syntax Tree (AST) object, which is passed to the IQueryable object to interpret and execute.|$|E
50|$|Using Wise-FTP files can be {{encrypted}} and compressed for the transfer.The {{program is}} able to upload and download multiple files simultaneously - e.g. to different FTP servers. A direct transfer from one FTP server to another is also possible.A macro recorder allows to record frequently used <b>sequences</b> <b>of</b> <b>commands</b> and run them subsequently {{as often as you}} wish. In addition, Wise-FTP has a Task Planner which allows to schedule file transfers.|$|R
50|$|The message <b>sequence</b> <b>of</b> <b>command</b> (or request) and its {{response}} {{is known as}} a transaction, which is identified by the numerical Transaction Identifier exchanged in each transaction. The protocol specification defines nine standard commands that are distinguished by a four-letter command verb: AUEP, AUCX, CRCX, DLCX, EPCF, MDCX, NTFY, RQNT, and RSIP. Responses begin with a three-digit numerical response code that identifies the outcome or result of the transaction.|$|R
40|$|A method <b>of</b> <b>command</b> line {{completion}} {{based on}} probabilistic models is described. The method supplements the existing deterministic ones. The probabilistic models are developed {{within the context}} of imprecise probabilities. An imprecise Dirichlet model is used to represent the assessments about all possible completions and to allow for learning by observing the commands typed previously. Due to the use of imprecise probabilities a partial (instead of a linear) ordering of the possible completion actions will be constructed during decision making. Markov models can additionally be incorporated to take recurring <b>sequences</b> <b>of</b> <b>commands</b> into account...|$|R
50|$|As a result, text-based {{software}} can offer more powerful features than graphic-based software, such as combining the command using a pipeline that allows {{output of the}} first command {{to be used as}} the input of the next command. Using this, a complex operation can be accomplished in a single command line using a <b>sequence</b> <b>of</b> <b>commands</b> connected together in a pipeline.|$|E
5000|$|Finally, ReGIS allowed {{commands}} {{to be stored}} into a macrograph and then recalled using the [...] operator. Up to 10,000 characters of code could be stored in the macros, each named with a single letter. The advantage was that the series of operations in the macro could be invoked by sending only two characters over the serial port, {{as opposed to the}} entire <b>sequence</b> <b>of</b> <b>commands.</b>|$|E
50|$|FCL is an {{imperative}} {{programming language}} {{close to the}} way a Von Neumann computer executes a program. A program is executed sequentially by following a <b>sequence</b> <b>of</b> <b>commands,</b> while maintaining an implicit state, i.e. the global memory. FCL has no concept of procedures, but does provide conditional and unconditional jumps. FCL {{lives up to its}} name as the abstract call-graph of an FCL program is a straightforward flow chart.|$|E
25|$|In {{structured}} programming, the ordered <b>sequencing</b> <b>of</b> successive <b>commands</b> {{is considered}} one of the basic control structures, which is used as a building block for programs alongside iteration, recursion and choice.|$|R
40|$|Automated {{sequence}} generation (autogen) signifies both {{a process}} and software used to automatically generate <b>sequences</b> <b>of</b> <b>commands</b> to operate various spacecraft. Autogen requires fewer workers than {{are needed for}} older manual sequence-generation processes and reduces sequence-generation times from weeks to minutes. The autogen software comprises the autogen script plus the Activity Plan Generator (APGEN) program. APGEN {{can be used for}} planning missions and command sequences. APGEN includes a graphical user interface that facilitates scheduling of activities on a time line and affords a capability to automatically expand, decompose, and schedule activities...|$|R
50|$|Given these {{specifications}} Termite {{will generate}} the driver implementation that translates any valid <b>sequence</b> <b>of</b> OS request into a <b>sequence</b> <b>of</b> device <b>commands.</b> Due to formal specification of the interfaces, Termite can generate the driver code which holds {{the safety and}} liveness properties.|$|R
