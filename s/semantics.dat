10000|0|Public
5|$|The {{fact that}} systematicity and {{productivity}} {{depend on the}} compositional structure of language means that language has a combinatorial <b>semantics.</b> If thought also has such a combinatorial <b>semantics,</b> then {{there must be a}} language of thought.|$|E
5|$|C# has {{explicit}} {{support for}} covariance and contravariance in generic types, unlike C++ which has {{some degree of}} support for contravariance simply through the <b>semantics</b> of return types on virtual methods.|$|E
25|$|CSP {{has been}} imbued with several {{different}} formal <b>semantics,</b> which define {{the meaning of}} syntactically correct CSP expressions. The theory of CSP includes mutually consistent denotational <b>semantics,</b> algebraic <b>semantics,</b> and operational <b>semantics.</b>|$|E
25|$|The <b>semantics</b> of second-order logic {{establish}} {{the meaning of}} each sentence. Unlike first-order logic, which has only one standard <b>semantics,</b> {{there are two different}} <b>semantics</b> that are commonly used for second-order logic: standard <b>semantics</b> and Henkin <b>semantics.</b> In each of these <b>semantics,</b> the interpretations of the first-order quantifiers and the logical connectives are the same as in first-order logic. Only the ranges of quantifiers over second-order variables differ in the two types of <b>semantics</b> (Väänänen 2001).|$|E
25|$|Unlike first-order logic, {{for which}} only one <b>semantics</b> is studied, {{there are several}} {{possible}} <b>semantics</b> for second-order logic. The most commonly employed <b>semantics</b> for second-order and higher-order logic is known as full <b>semantics.</b> The combination of additional quantifiers and the full <b>semantics</b> for these quantifiers makes higher-order logic stronger than first-order logic. In particular, the (semantic) logical consequence relation for second-order and higher-order logic is not semidecidable; there is no effective deduction system for second-order logic that is sound and complete under full <b>semantics.</b>|$|E
25|$|In Henkin <b>semantics,</b> each sort of second-order {{variable}} has {{a particular}} domain of its own to range over, which may be a proper subset of all sets or functions of that sort. Leon Henkin (1950) defined these <b>semantics</b> and proved that Gödel's completeness theorem and compactness theorem, which hold for first-order logic, carry over to second-order logic with Henkin <b>semantics.</b> This is because Henkin <b>semantics</b> are almost identical to many-sorted first-order <b>semantics,</b> where additional sorts of variables are added to simulate the new variables of second-order logic. Second-order logic with Henkin <b>semantics</b> is not more expressive than first-order logic. Henkin <b>semantics</b> are commonly {{used in the study}} of second-order arithmetic.|$|E
25|$|This {{should follow}} without {{controversy}} {{from the first}} three: Programs don't have <b>semantics.</b> Programs have only syntax, and syntax is insufficient for <b>semantics.</b> Every mind has <b>semantics.</b> Therefore no programs are minds.|$|E
25|$|The team <b>semantics</b> for {{dependence}} {{logic is}} {{a variant of}} Wilfrid Hodges' compositional <b>semantics</b> for IF logic. There exist equivalent game-theoretic <b>semantics</b> for dependence logic, {{both in terms of}} imperfect information games and in terms of perfect information games.|$|E
25|$|Senseval-1 & Senseval-2 {{focused on}} {{evaluation}} WSD systems on major languages {{that were available}} corpus and computerized dictionary. Senseval-3 looked beyond the lexemes and started to evaluate systems that looked into wider areas of <b>semantics,</b> such as Semantic Roles (technically known as Theta roles in formal <b>semantics),</b> Logic Form Transformation (commonly <b>semantics</b> of phrases, clauses or sentences were represented in first-order logic forms) and Senseval-3 explored performances of <b>semantics</b> analysis on Machine translation.|$|E
25|$|In {{standard}} <b>semantics,</b> {{also called}} full <b>semantics,</b> the quantifiers range over all sets or {{functions of the}} appropriate sort. Thus once {{the domain of the}} first-order variables is established, the meaning of the remaining quantifiers is fixed. It is these <b>semantics</b> that give second-order logic its expressive power, and they will be assumed for the remainder of this article.|$|E
25|$|Originally, {{software}} {{exception handling}} included both resumable exceptions (resumption <b>semantics),</b> like most hardware exceptions, and non-resumable exceptions (termination <b>semantics).</b> However, resumption <b>semantics</b> were considered ineffective in {{practice in the}} 1970s and 1980s (see C++ standardization discussion, quoted below) and {{are no longer in}} common use, though provided by programming languages like Common Lisp and Dylan.|$|E
25|$|Lexical <b>semantics</b> (also {{known as}} lexicosemantics), is a {{subfield}} of linguistic <b>semantics.</b> The {{units of analysis}} in lexical <b>semantics</b> are lexical units which include not only words but also sub-words or sub-units such as affixes and even compound words and phrases. Lexical units make up the catalogue of words in a language, the lexicon. Lexical <b>semantics</b> looks at how {{the meaning of the}} lexical units correlates with the structure of the language or syntax. This is referred to as syntax-semantic interface.|$|E
25|$|<b>Semantics</b> {{deals with}} the meaning of words and sentences. Where syntax is {{concerned}} with the formal structure of sentences, <b>semantics</b> {{deals with the}} actual meaning of sentences.|$|E
25|$|Esperanto's vocabulary, syntax, and <b>semantics</b> derive {{predominantly}} from Indo-European national languages. Roots {{are typically}} Romance or Germanic in origin. The <b>semantics</b> shows a significant Slavic influence.|$|E
25|$|Computable {{functions}} are a fundamental concept within computer science and mathematics. The λ-calculus provides a simple <b>semantics</b> for computation, enabling properties of computation {{to be studied}} formally. The λ-calculus incorporates two simplifications that make this <b>semantics</b> simple.|$|E
25|$|This {{approach}} {{succeeds in}} assigning a <b>semantics</b> to forcing over V {{without resorting to}} fictional generic objects. The disadvantages are that the <b>semantics</b> is not 2-valued, and that the combinatorics of B are often more complicated {{than those of the}} underlying poset P.|$|E
25|$|The {{deductive}} systems {{considered by}} Shapiro (1991) and Henkin (1950) {{add to the}} augmented first-order deductive scheme both comprehension axioms and choice axioms. These axioms are sound for standard second-order <b>semantics.</b> They are sound for Henkin <b>semantics</b> if only Henkin models that satisfy the comprehension and choice axioms are considered.|$|E
25|$|As {{mentioned}} above, Henkin {{proved that}} the standard deductive system for first-order logic is sound, complete, and effective for second-order logic with Henkin <b>semantics,</b> and the deductive system with comprehension and choice principles is sound, complete, and effective for Henkin <b>semantics</b> using only models that satisfy these principles.|$|E
25|$|Frawley, William. 1992. Linguistic <b>Semantics.</b> Lawrence Erlbaum.|$|E
25|$|Bunt, Harry, 1985. Mass {{terms and}} model-theoretic <b>semantics.</b> Cambridge Univ. Press.|$|E
25|$|<b>Semantics</b> {{consists}} of vocabulary and how concepts are expressed through words.|$|E
25|$|Cattell, R. 1984. Composite predicates in English. Syntax and <b>Semantics</b> 17. Sydney: Academic Press.|$|E
25|$|Comrie, Bernard. (2000). Evidentials: <b>Semantics</b> and history. In L. Johanson & B. Utas (Eds.).|$|E
25|$|Dalrymple, M. 2001. Lexical {{functional}} grammar. Syntax and <b>semantics</b> 34. San Diego: Academic Press.|$|E
25|$|The vocabulary, orthography, phonology, and <b>semantics,</b> are all {{thoroughly}} European. The vocabulary, for example, draws {{about two-thirds}} from Romance and one-third from Germanic languages; the syntax is Romance; and the phonology and <b>semantics</b> are Slavic. The grammar is arguably more European than not, but Claude Piron among others {{argues that the}} derivation system is not particularly European, though the inflection is.|$|E
25|$|There {{are many}} {{variations}} of first-order logic. Some {{of these are}} inessential {{in the sense that}} they merely change notation without affecting the <b>semantics.</b> Others change the expressive power more significantly, by extending the <b>semantics</b> through additional quantifiers or other new logical symbols. For example, infinitary logics permit formulas of infinite size, and modal logics add symbols for possibility and necessity.|$|E
25|$|This is {{what the}} Chinese room thought {{experiment}} is intended to prove: the Chinese room has syntax (because there is a man in there moving symbols around). The Chinese room has no <b>semantics</b> (because, according to Searle, {{there is no one}} or nothing in the room that understands what the symbols mean). Therefore, having syntax is not enough to generate <b>semantics.</b>|$|E
25|$|This {{work also}} {{formed the basis}} for the denotational <b>semantics</b> of {{programming}} languages.|$|E
25|$|Hopper, Paul J., ed. (1982) Tense–Aspect: Between <b>Semantics</b> and Pragmatics. Amsterdam: Benjamins.|$|E
25|$|Lepore, Ernest and Kirk Ludwig. Donald Davidson's Truth-Theoretic <b>Semantics.</b> Oxford: Oxford University Press. 2007.|$|E
25|$|<b>Semantics</b> is {{the branch}} of {{linguistics}} that examines the meaning of natural language, the notion of reference and denotation, {{and the concept of}} possible worlds. One concept used in the study of <b>semantics</b> is predicate logic, which is a system that uses symbols and alphabet letters to represent the overall meaning of a sentence. Quantifiers in <b>semantics</b> – such as the quantifier in the antecedent of a bound variable pronoun – can be expressed in two ways. There is an existential quantifier, ∃, meaning some. There is also a universal quantifier, ∀, meaning every, each, or all. Ambiguity arises when there are multiple quantifiers in one sentence.|$|E
25|$|Ernst von Glasersfeld 1987. The {{construction}} of knowledge, Contributions to conceptual <b>semantics.</b>|$|E
25|$|A {{deductive}} {{system for}} a logic {{is a set of}} inference rules and logical axioms that determine which sequences of formulas constitute valid proofs. Several deductive systems can be used for second-order logic, although none can be complete for the standard <b>semantics</b> (see below). Each of these systems is sound, which means any sentence they can be used to prove is logically valid in the appropriate <b>semantics.</b>|$|E
25|$|The <b>semantics</b> of {{propositional logic}} rely on truth assignments. The {{essential}} {{idea of a}} truth assignment is that the propositional variables are mapped to elements of a fixed Boolean algebra, and then the truth value of a propositional formula using these letters is the element of the Boolean algebra that is obtained by computing {{the value of the}} Boolean term corresponding to the formula. In classical <b>semantics,</b> only the two-element Boolean algebra is used, while in Boolean-valued <b>semantics</b> arbitrary Boolean algebras are considered. A tautology is a propositional formula that is assigned truth value 1 by every truth assignment of its propositional variables to an arbitrary Boolean algebra (or, equivalently, every truth assignment to the two element Boolean algebra).|$|E
25|$|How {{language}} shapes thought. More specifically, Frank Herbert {{was influenced}} by Alfred Korzybski's General <b>Semantics.</b>|$|E
25|$|<b>Semantics</b> of Natural Languages, Davidson, Donald and Gilbert Harman (eds.), 2nd ed. New York: Springer. 1973.|$|E
