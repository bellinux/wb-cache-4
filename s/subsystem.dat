10000|10000|Public
5|$|Much of the system's core, {{including}} the LWKT <b>subsystem,</b> the IPI messaging <b>subsystem</b> {{and the new}} kernel memory allocator, are lockless, meaning that they work without using mutexes, with each process operating on a single CPU. Critical sections are used to protect against local interrupts, individually for each CPU, guaranteeing that a thread currently being executed will not be preempted.|$|E
5|$|Spacecraft {{communications}} {{included a}} command <b>subsystem</b> operating at 154.2 and 2106.4MHz and a PCM narrow-band telemetry <b>subsystem,</b> operating at 2287.5 and 137.86MHz, for spacecraft housekeeping, attitude, and sensor performance data. Video {{data from the}} three-camera RBV system was transmitted in both real-time and tape recorder modes at 2265.5MHz, while information from the MSS was constrained to a 20MHz radio-frequency bandwidth at 2229.5MHz.|$|E
5|$|DragonFly's kernel is a hybrid, {{containing}} {{features of}} both monolithic and microkernels, {{such as the}} message passing capability of microkernels enabling larger portions of the OS to benefit from protected memory, as well as retaining the speed of monolithic kernels for certain critical tasks. The messaging <b>subsystem</b> being developed is {{similar to those found}} in microkernels such as Mach, though it is less complex by design. DragonFly's messaging <b>subsystem</b> has the ability to act in either a synchronous or asynchronous fashion, and attempts to use this capability to achieve the best performance possible in any given situation.|$|E
40|$|Abstract. Relatively {{independent}} joinings of W*-dynamical {{systems are}} constructed. This is intimately related to <b>subsystems</b> of W*-dynamical systems, {{and therefore we}} also study general properties of <b>subsystems,</b> in particular fixed point <b>subsystems</b> and compact <b>subsystems.</b> This allows us to obtain characterizations of weak mixing and relative ergodicity, {{as well as of}} certain compact <b>subsystems,</b> in terms of joinings. 1...|$|R
50|$|A 35T {{performs}} or supervises unit, direct, or depot {{support and}} provides maintenance of Electronic Warfare (EW) <b>subsystems,</b> receiver <b>subsystems,</b> and processing/storage <b>subsystems</b> at fixed stations or remote sites.|$|R
40|$|A general {{mathematical}} {{description of}} the terminal behavior of <b>subsystems</b> is discussed. It allows to combine different modeling methods, e. g. network models, block models, and bondgraphs together. The resulting equations can be solved with a general network analysis program. This approach is effectively applied in modeling electrical as well as non-electrical <b>subsystems.</b> Extensions to digital and time-discrete <b>subsystems</b> are possible. Therefore, modeling the terminal behavior of <b>subsystems</b> {{is the basis for}} simulation of heterogeneous systems. Extensions to digital and time-discrete <b>subsystems</b> are possible. Therefore, modeling the terminal behavior of <b>subsystems</b> is the basis for simulation of complex microsystems...|$|R
5|$|Separately, the {{experimental}} Arwinss branch was created {{as an alternative}} means to improve USER32 and GDI32 support through an alternative implementation of the Win32 API. Whereas ReactOS's original Win32 <b>subsystem</b> was closely modeled after its equivalent in Windows, Arwinss combines the architecture of that <b>subsystem</b> with the corresponding implementation in Wine. To this end, Arwinss uses Wine's GDI32 and USER32 libraries with few changes to take fuller advantage of Wine's existing software compatibility. Arwinss also allows the user to optionally use a remote X server instead of a local display.|$|E
5|$|The {{computer}} command <b>subsystem</b> (CCS) {{controls the}} cameras. The CCS contains fixed computer {{programs such as}} command decoding, fault detection and correction routines, antenna pointing routines, and spacecraft sequencing routines. This computer is an improved version of {{the one that was}} used in the 1970s Viking orbiters. The hardware in both custom-built CCS subsystems in the Voyagers is identical. There is only a minor software modification for one of them that has a scientific <b>subsystem</b> that the other lacks.|$|E
5|$|The Attitude and Articulation Control <b>Subsystem</b> (AACS) {{controls}} the spacecraft orientation (its attitude). It keeps the high-gain antenna pointing towards the Earth, controls attitude changes, and points the scan platform. The custom-built AACS systems on both Voyagers are the same.|$|E
30|$|<b>Subsystems</b> L, N, and O are {{considered}} as <b>subsystems</b> that never failed.|$|R
30|$|A global {{positioning}} and tracking {{system based on}} miniature mobile robots was discussed. The system mainly includes three major subsystems: image acquisition and preprocessing <b>subsystems,</b> robot tag identification and positioning <b>subsystems,</b> and position estimation-based tracking <b>subsystems.</b>|$|R
40|$|Many {{products}} are built from {{more or less}} independently developed sub-systems. For instance, a car consists of <b>subsystems</b> for transmission, braking, suspension, etc. These <b>subsystems</b> are frequently controlled by an embedded computer system. In the automotive industry, {{as well as in}} other application domains, there is currently a trend from an approach where <b>subsystems</b> have dedicated computer hardware and other resources (a federated approach) to an approach where <b>subsystems</b> share hardware and other resources (an integrated approach). This is motivated by a strong pressure to reduce product cost, {{at the same time as}} an increasing number of <b>subsystems</b> are being introduced. When integrating <b>subsystems,</b> it is desirable that guarantees valid before integration are also valid after integration, since this would eliminate the need for costly reverifications. The computer network is a resource that is typi-cally shared among all <b>subsystems.</b> Hence, a central issue when integrating <b>subsystems</b> is to provide an efficient scheduling of message transmissions o...|$|R
5|$|The LWKT <b>subsystem</b> {{is being}} {{employed}} to partition work among multiple kernel threads (for {{example in the}} networking code there is one thread per protocol per processor), reducing competition by removing the need to share certain resources among various kernel tasks.|$|E
5|$|The breaker (Channel 1 Aerosurfaces, ASA 1) {{is part of}} the shuttle's Flight Control Systems (FCS), a <b>subsystem</b> of the guidance, navigation, {{and control}} (GNC) systems. The failure would have no impact to the mission, due to {{redundant}} systems.|$|E
5|$|Unlike {{the other}} onboard instruments, the {{operation}} of the cameras for visible light is not autonomous, but rather it is controlled by an imaging parameter table contained in one of the on-board digital computers, the Flight Data <b>Subsystem</b> (FDS). Since the 1990s, space probes usually have completely autonomous cameras.|$|E
40|$|AbstractDynkin {{has shown}} how <b>subsystems</b> of real root systems may be constructed. As {{the concept of}} <b>subsystems</b> of complex root systems is not as well {{developed}} as in the real case, {{in this paper we}} give an algorithm to classify the proper <b>subsystems</b> of complex proper root systems. Furthermore, as an application of this algorithm, we determine the proper <b>subsystems</b> of imprimitive complex proper root systems. These proper <b>subsystems</b> are useful in giving combinatorial constructions of irreducible representations of properly generated finite complex reflection groups...|$|R
25|$|Provides inter-process {{communication}} ports with connection semantics. LPC ports {{are used}} by user-mode <b>subsystems</b> to communicate with their clients, by Executive <b>subsystems</b> to communicate with user-mode <b>subsystems,</b> and {{as the basis for}} the local transport for Microsoft RPC.|$|R
50|$|In spacecraft, RHUs are {{necessary}} to heat critical components and <b>subsystems.</b> RHUs also reduce spacecraft complexity by making heater <b>subsystems</b> unnecessary. By having as few heating <b>subsystems</b> as possible, the overall complexity of the spacecraft can be reduced.|$|R
5|$|Europa Orbiter â€” Its {{objective}} {{would be}} to characterize {{the extent of the}} ocean and its relation to the deeper interior. Instrument payload could include a radio <b>subsystem,</b> laser altimeter, magnetometer, Langmuir probe, and a mapping camera. The Europa Orbiter received a go-ahead in 1999 but was canceled in 2002. This orbiter featured a special ice-penetrating radar that would allow it to scan below the surface.|$|E
5|$|The Itanium 2 {{processor}} {{was released}} in 2002, and was marketed for enterprise servers rather than for the whole gamut of high-end computing. The first Itanium2, code-named McKinley, was jointly developed by HP and Intel. It relieved many of the performance problems of the original Itanium processor, which were mostly caused by an inefficient memory <b>subsystem.</b> McKinley contains 221 million transistors (of which 25 million are for logic), measured 19.5mm by 21.6mm (421mm2) and was fabricated in a 180nm, bulk CMOS process with six layers of aluminium metallization.|$|E
5|$|Voyager 1 was {{constructed}} by the Jet Propulsion Laboratory. It has 16 hydrazine thrusters, three-axis stabilization gyroscopes, and referencing instruments to keep the probe's radio antenna pointed toward Earth. Collectively, these instruments {{are part of the}} Attitude and Articulation Control <b>Subsystem</b> (AACS), along with redundant units of most instruments and 8 backup thrusters. The spacecraft also included 11 scientific instruments to study celestial objects such as planets as it travels through space.|$|E
50|$|Provides inter-process {{communication}} ports with connection semantics. LPC ports {{are used}} by user-mode <b>subsystems</b> to communicate with their clients, by Executive <b>subsystems</b> to communicate with user-mode <b>subsystems,</b> and {{as the basis for}} the local transport for Microsoft RPC.|$|R
40|$|We use Beckâ€™s quasi-additivity of Tsallis entropies for n {{independent}} <b>subsystems</b> to {{show that}} like the case of n = 2, the entropic index q approaches 1 by increasing system size. Then, we will generalize that concept to correlated <b>subsystems</b> to find {{that in the case}} of correlated <b>subsystems,</b> when system size increases, q also approaches a value corresponding to the additive case. Keywords: correlated <b>subsystems.</b> ...|$|R
50|$|The {{last three}} <b>subsystems</b> exist within the compatible, {{continuous}} networks of the 'Green' and 'Grey' infrastructure <b>subsystems.</b>|$|R
5|$|Voyager 1s Imaging Science <b>Subsystem</b> (ISS), now disabled, {{consisted}} of two cameras: a 200mm focal length, low-resolution wide-angle camera (WA), used for spatially extended imaging, and a 1500mm high-resolution narrow-angle camera (NA) â€“ the one that took Pale Blue Dot â€“ intended for detailed imaging of specific targets. Both cameras were of the slow-scan vidicon tube type and were fitted with eight colored filters, mounted on a filter wheel {{placed in front of}} the tube.|$|E
5|$|In DragonFly, each CPU {{has its own}} thread scheduler. Upon creation, threads are {{assigned}} to processors and are never preemptively switched from one processor to another; they are only migrated by the passing of an inter-processor interrupt (IPI) message between the CPUs involved. Inter-processor thread scheduling is also accomplished by sending asynchronous IPI messages. One advantage to this clean compartmentalization of the threading <b>subsystem</b> is that the processors' on-board caches in Symmetric Multiprocessor Systems do not contain duplicated data, allowing for higher performance by giving each processor in the system {{the ability to use}} its own cache to store different things to work on.|$|E
25|$|There {{are four}} main {{environment}} subsystems: the Win32 <b>subsystem,</b> an OS/2 <b>subsystem,</b> the Windows <b>Subsystem</b> for Linux and a POSIX <b>subsystem.</b>|$|E
50|$|There {{has been}} a major {{redistribution}} of work, into different <b>subsystems</b> since FCR. The current <b>subsystems</b> are listed below.|$|R
5000|$|The FDA has {{identified}} in the QS regulation the 7 essential <b>subsystems</b> of a quality system. These <b>subsystems</b> include: ...|$|R
40|$|In {{distributed}} {{knowledge representation}} and reasoning systems, knowledge {{is represented by}} a set of heterogeneous <b>subsystems,</b> each of which autonomously represents and reasons about a certain subset of the whole knowledge. These <b>subsystems</b> are not completely independent on one another as the same piece of knowledge might be represented (from different points of view) in different <b>subsystems.</b> In this paper we provide a formalization of the relation between the knowledge contained in different <b>subsystems.</b> We define a formal logic, called Distributed First Order Logic (DFOL), which models relations between objects and relations between formulae of different <b>subsystems...</b>|$|R
25|$|The user-mode {{parts of}} Windows 9x consist of three subsystems: the Win16 <b>subsystem,</b> the Win32 <b>subsystem</b> and MS-DOS.|$|E
25|$|The POSIX {{environment}} <b>subsystem</b> supports {{applications that}} are strictly written {{to either the}} POSIX.1 standard or the related ISO/IEC standards. This <b>subsystem</b> {{has been replaced by}} Interix, which is a part of Windows Services for UNIX. This was in turn replaced by the Windows <b>Subsystem</b> for Linux.|$|E
25|$|A system {{connected}} to its surroundings only through contact {{by a single}} permeable wall, but otherwise isolated, is an open system. If it is initially {{in a state of}} contact equilibrium with a surrounding <b>subsystem,</b> a thermodynamic process of transfer of matter can be made to occur between them if the surrounding <b>subsystem</b> is subjected to some thermodynamic operation, for example, removal of a partition between it and some further surrounding <b>subsystem.</b> The removal of the partition in the surroundings initiates a process of exchange between the system and its contiguous surrounding <b>subsystem.</b>|$|E
5000|$|... â€¢ Reconfigurable - Components and <b>subsystems</b> can {{be moved}} between {{locations}} and / or <b>subsystems</b> to perform a similar or identical function.|$|R
3000|$|... {{will be an}} outlier. We {{should also}} note that in {{situations}} where two <b>subsystems</b> with identical coefficients are located in two different regions (first and third <b>subsystems</b> in Example (1)), using the information of parameter vectors may not be sufficient for clustering them into s classes. In these conditions, the parameter vectors of these <b>subsystems</b> will fall {{next to each other}} and within one cluster. Resolving between these <b>subsystems</b> is accomplished by adding vectors m [...]...|$|R
40|$|Up-to-date {{preservation}} of project knowledge like developer communication and de-sign documents {{is essential for}} the successful evolution of software systems. Ideally, all knowledge should be preserved, but since projects only have limited resources, and software systems continuously grow in scope and complexity, one needs to prioritize the <b>subsystems</b> and development periods for which knowledge preservation is more urgent. For example, core <b>subsystems</b> on which the majority of other <b>subsystems</b> build are obviously prime candidates for preservation, yet if these <b>subsystems</b> change contin-uously, picking a development period to start knowledge preservation and to maintain knowledge for over time become very hard. This paper exploits the time dependence between code changes to automatically determine for which <b>subsystems</b> and develop-ment periods of a software project knowledge preservation would be most valuable. A case study on two large open source projects (PostgreSQL and FreeBSD) shows that the most valuable <b>subsystems</b> to preserve knowledge for are large core <b>subsystems.</b> However, the majority of these <b>subsystems</b> (1) are continuously foundational, i. e., ide-ally for each development period knowledge should be preserved, and (2) experience substantial changes, i. e., preserving knowledge requires substantial effort...|$|R
