12|496|Public
2500|$|In October 1942 Blount {{received}} a selective <b>service</b> <b>notification</b> {{that he had}} been drafted into the Military of the United States. He quickly declared himself a conscientious objector, citing religious objections to war and killing, his financial support of his great-aunt Ida, and his chronic hernia. The local draft board rejected his claim. In an appeal to the national draft board, Blount wrote that the lack of black men on the draft appeal board [...] "smacks of Hitlerism." [...] Sonny's refusal to join the military deeply embarrassed his family, and many relatives ostracized him. He was eventually approved for alternate service at Civilian Public Service camp in Pennsylvania—but he did not appear at the camp as required on December 8, 1942. Shortly after, he was arrested in Alabama.|$|E
40|$|IntroductionOn average, {{less than}} 8 % {{of people who}} {{experience}} an out-of-hospital cardiac arrest survive. However, death from sudden cardiac arrest is preventable if a bystander quickly retrieves and applies an automated external defibrillator (AED). Public access defibrillation (PAD) policies have been enacted to create programs that increase the public availability of these devices. The objective {{of this study was}} to describe each state's legal requirements for recommended PAD program elements. MethodsWe reviewed state laws and described the extent to which 13 PAD program elements are mandated in each state. ResultsNo jurisdiction requires all 13 PAD program elements, 18 % require at least 10 elements, and 31 % require 3 or fewer elements. All jurisdictions provide some level of immunity to AED users, 60 % require PAD maintenance, 59 % require emergency medical <b>service</b> <b>notification,</b> 55 % impose training requirements, and 41 % require medical oversight. Few jurisdictions require a quality improvement process. ConclusionPAD programs in many states are at risk of failure because critical elements such as maintenance, medical oversight, emergency medical <b>service</b> <b>notification,</b> and continuous quality improvement are not required. Policy makers should consider strengthening PAD policies by enacting laws that can reduce the time from collapse to shock, such as requiring the strategic placement of AEDs in high-risk locations or mandatory PAD registries that are coordinated with local EMS and dispatch centers. Further research is needed to identify the most effective PAD policies for increasing AED use by lay persons and improving survival rates...|$|E
40|$|With an ever {{increasing}} number of mobile services, mean-ingful audio notifications could effectively inform users of the incoming services while minimising undesired and in-trusive interruptions. Therefore, careful design of mobile <b>service</b> <b>notification</b> is needed. In this paper we evaluate two types of audio (auditory icons and earcons) as mobile service notifications, by comparing them on 4 measures: intuitiveness, learnability, memorability and user prefer-ence. A 4 -stage longitudinal evaluation involving two lab experiments, a field study and a web-based experiment in-dicated that auditory icons performed significantly better in all measures. Implications for mobile audio notification design are presented. Author Keywords Mobile audio notifications, mobile services, earcons, audi...|$|E
5000|$|When <b>notification</b> <b>services</b> {{are used}} for {{emergency}} notification, they are often called Emergency Mass <b>Notification</b> <b>Services</b> (EMNS). <b>Notification</b> <b>services</b> and emergency <b>notification</b> <b>services</b> can provide {{a wide range of}} options, including: ...|$|R
40|$|Abstract: Individualized <b>notification</b> <b>service</b> is a hotspot of {{research}} on Service-oriented digital library, {{and one of the}} key problems of the realization of digital library. Based on the investigation and analysis of the research of <b>notification</b> <b>service,</b> We have concluded four modules of <b>notification</b> <b>service</b> in the service-oriented digital library: the basic <b>notification</b> <b>service</b> module, the <b>notification</b> <b>service</b> module with event channel, the <b>notification</b> <b>service</b> module with event agent and the <b>notification</b> <b>service</b> module with multi-agent. According to the reality of current practices in service, we have researched the architectures, main technique points and methods of these four <b>notification</b> <b>service</b> modules under the framework of web service and information grid. In this paper, the <b>notification</b> <b>services</b> in th...|$|R
40|$|It {{is hoped}} that {{context-aware}} systems will present users with {{an increasing number of}} relevant services in an increasingly wide range of contexts. With this expansion, numerous <b>service</b> <b>notifications</b> could overwhelm users. Therefore, careful design of the notification mechanism is needed. In this paper, we investigate how semantic richness of different types of audio stimuli can be utilised to shape the intuitiveness of mobile <b>service</b> <b>notifications.</b> In order to do so, we first develop a categorisation of mobile services so that clustered services can share the same notifications. Not surprisingly, it was found that overall speech performed better than non-speech sounds, and auditory icons performed overall better than earcons. However, exceptions were observed when richer semantics were utilised in the seemingly poorer medium. We argue that success and subjective preference of auditory mobile <b>service</b> <b>notifications</b> heavily depends on the success and level of directness of the metaphors used...|$|R
40|$|Abstract. This paper {{proposes a}} model for {{integrating}} a higher level Semantic Grid Middleware with Web Service Resource Framework (WSRF) that extends the prototype presented in [1] informed by issues that were identified in our early experiments with the prototype. WSRF defines generic and open framework for modeling and accessing stateful resources using Web Services and Web <b>Service</b> <b>Notification</b> standardizing publish/subscribe notification for Web Services. In particular we focus on using WSRF to support data integration, workflow enactment and notification management in the leading EPSRC e-Science pilot project. We report on our experience from the implementation of our proposed model and argue that our model converges with peer-to-peer technology in a promising way forward towards enabling Semantic Grid Middleware in mobile ad-hoc networks environments. ...|$|E
40|$|Existing Web <b>service</b> <b>notification</b> and {{eventing}} {{standards are}} useful in many applications, but they have serious limitations that make them ill-suited for large-scale deployments, or as a middleware or a component-integration technology in today’s data centers. For example, {{it is not possible}} to use IP multicast, or for recipients to forward messages to others, scalable notification trees must be setup manually, and no end-to-end security, reliability, or QoS guarantees can be provided. We propose an architecture that is free of such limitations and that may serve as a basis for extending or complementing the existing standards. The approach emerges from our work on QuickSilver, a new, extremely modular and extensible platform for high-performance, scalable, reliable eventing. Keywords: architecture; eventing; extensible; multicast; notification; publish-subscribe; reliable; scalabl...|$|E
40|$|Project Specification The {{goal of this}} openlab summer student {{project was}} to {{standardize}} the <b>service</b> <b>notification</b> and alarming system in the IT Database group. For this we need to integrate the IT General Notification Infrastructure (GNI) into some of our database services, like for instance, RACMon, Enterprise Manager, Syscontrol, RMAN, Database on Demand, and Storage Administrators' tools. The objective {{was to make the}} GNI service our only mechanism to generate notifications and alarms (SMS, email, SNOW tickets) and as unique interface to visualize notifications. Abstract The IT Database group has independent monitoring tools/data and is immersed in a process of consolidating its monitoring infrastructure. The aim of this document is to provide insight into the way we achieved integration of GNI into our database services...|$|E
5000|$|... several {{messaging}} technologies, specifically <b>Service</b> Broker and <b>Notification</b> <b>Services</b> ...|$|R
50|$|The PCH carries <b>service</b> <b>notifications</b> (pages) to {{specific}} mobiles {{sent by the}} network. A mobile station that is camped to a BTS monitors the PCH for these notifications sent by the network.|$|R
40|$|Abstract. Integrating {{context-aware}} <b>notification</b> <b>services</b> to {{ubiquitous computing}} systems aims at {{the provision of}} the right information to the right users, at the right time, in the right place, and on the right device, and constitutes a significant step towards {{the realization of the}} Ambient Intelligence vision. In this paper, we present FlexConf, a semantics-based system that supports location-based, personalized <b>notification</b> <b>services</b> for the assistance of conference attendees. Its special features include an ontology-based representation model, rule-based context-aware reasoning, and a novel positioning system for indoor environments. Key words: context awareness, location-based <b>services,</b> <b>notification</b> <b>services,</b> context ontology, rule-based reasoning...|$|R
40|$|In {{this paper}} we extend current typical Web service {{architectures}} {{by providing a}} Web <b>Service</b> <b>Notification</b> Framework (WSNF). Besides the three standard roles found in current frameworks (i. e., the service provider, the service requestor, and the service registry), our approach introduces an additional role that we call the service notifier. The framework is designed in four layers: the Proxy Layer, the Web Server Layer, the Application Notification Server Layer, and the Application Worker Layer. Since the WSNF itself is a service provider, this framework is reflective {{in the sense that}} it checks and notifies itself about changes. The framework is documented using design patterns. The set of patterns applied in the framework design includes the following patterns: the singleton, the delegation, the factory method, the observer, the mediator, the notifier, which is a combination of the mediator and the observer, the item description, and the proxy. The notifier pattern is in fact a publisher-subscribe pattern with push semantics. The framework uses a requestor profile to support notifications related to a category of events related to changes, failures, and version control problems of Web services...|$|E
40|$|The Session Initiation Protocol (SIP) is a {{signaling}} protocol used for establishing and maintaining communication sessions involving {{two or more}} participants. SIP was initially designed for voice over IP and multimedia conferencing, and then was extended to support other services such as instant messaging and presence management. Today, SIP is also adopted {{to be used with}} 3 G wireless networks, thus it becomes an integral protocol for ubiquitous environment. SIP has various methods that support a variety of applications such as subscribing to a <b>service,</b> <b>notification</b> of an event, status update, and location and presence services. However, when it comes to security, the use of wireless and mobile communication technologies and the pervasive nature of this environment introduce higher risks to security than that of the old simple environment. In this paper, we introduce new architecture that implements a new type of access control called usage access control (UCON) to control the access to the SIP-based communication at preconnection, during connection, and postconnection. This will enable prescribers of SIP services to control who can identify their locations to approve or disapprove their subsequent connections, and to also set some parameters to determine whether a certain communication can continue or should terminate...|$|E
40|$|In {{order to}} {{effectively}} search, retrieve, and analyze data oftentimes it is curated and tagged with ontology terms. However, {{the amount of}} effort to curate the existing set of data resources is {{beyond the limits of}} purely manual curation. We present three ontology-based tools developed by the National Center for Biomedical Ontology to enhance the curation workflow: Ontology Widgets, Notes, and the Annotator. The Ontology Widgets provide a mechanism to use ontologies in Web-based forms without the need to locally parse and store the ontology. The widgets provide a variety of functionality including term autocompletion and ontology visualization. The Ontology Widgets are implemented for all BioPortal ontologies, including those from the OBO Foundry and Unified Medical Language System. The Notes feature of BioPortal allows structured term proposals to be submitted in order to request the addition or modification of a term in an ontology. The term proposals can be added directly via the BioPortal Web interface or programmatically via the Notes Web <b>service.</b> <b>Notification</b> of new Notes and replies are both RSS- and Email-enabled. Once the term curation process is complete, the OWL class or OBO stanza can be generated via the Notes Web service. Finally, the Annotator can be used to automatically process textual metadata to identify ontology terms found within the text. The Annotator can be accessed programmatically via the Annotator Web service and can be used with all BioPortal ontologies. In summary, the Ontology Widgets, Notes, and Annotator provide mechanisms to enhance curation by helping collect annotated data upon data submission, by facilitating ontology term curation, and by tagging unstructured textual data with ontology terms...|$|E
50|$|To design, {{code and}} test {{all of the}} {{components}} {{that make up a}} robust <b>Notification</b> <b>Services</b> Application-such as <b>notification</b> scheduling, failure detection, retry logic, time zone management, notification grouping, and queue management, adding <b>Notification</b> <b>Services</b> to software applications can be a daunting task.|$|R
5000|$|Windows Push <b>Notification</b> <b>Service</b> (commonly {{referred}} to as Windows <b>Notification</b> <b>Service</b> or WNS) is a <b>notification</b> <b>service</b> developed by Microsoft for all devices running Microsoft Windows platforms. It allows for developers to send push data ("toast" [...] and [...] "tile" [...] updates) to Windows and Universal Windows Platform applications which implement the feature. Designed as a successor to the Microsoft Push <b>Notification</b> <b>Service,</b> it was first supported on Windows 8 and subsequently on Windows Phone 8.1 upon its release.|$|R
40|$|In {{this article}} we present a survey of four {{messaging}} technologies {{in order to gain}} a better understanding and a clear vision of myGrid <b>notification</b> <b>service.</b> In particular, we compare the features and functionalities of JMS and OMG CORBA <b>notification</b> <b>service</b> at specification level and discuss their suitability for MyGrid <b>notification</b> <b>service</b> designs...|$|R
40|$|Placed {{within the}} realms of Human Computer Interaction, this thesis {{contributes}} towards the goals of Ubiquitous Computing, where mobile devices can provide anywhere, anytime support to people’s everyday activities. With interconnected computing devices distributed in our habitat, services relevant to any situation may be always available to address our needs. However, despite the enhanced capabilities of mobile phones, users had been reluctant to adopt any services other than calls and messaging. This has been changing more recently, especially since {{the launch of the}} iPhone, with users getting access to hundreds of services. The original question motivating the research presented in this thesis “How can we improve mobile service usage?” {{is in the interest of}} enthusiasts of mobile services as well as slow adopters. We propose the concept of ‘mobile service awareness’ and operationalise it through the more focused research question: “How can we design for non-intrusive yet informative auditory mobile service notifications?” We design and conduct a series of surveys, laboratory experiments and longitudinal field studies to address this question. Our results, also informed by literature on context-aware computing, awareness, notification systems and auditory interface design, produce two distinct major contributions. First, we provide a set of conclusions on the relative efficiency of auditory icons and earcons as auditory notifications. Second, we produce a set of design guidelines for the two types of notifications, based on the critical evaluation of the methodologies we develop and adapt from the literature. Although these contributions were made with mobile <b>service</b> <b>notification</b> in mind, they are arguably useful for designers of any auditory interfaces conveying complex concepts (such as mobile services) and are used in attention demanding contexts. EThOS - Electronic Theses Online ServiceGBUnited Kingdo...|$|E
40|$|Mobile alerts, {{notifications}} and location-based {{emergency systems}} are now an established part of mobile government strategies in {{an increasing number}} of countries worldwide. In Australia the national emergency warning system was instituted after the tragic Victorian Bushfires of February 2009 to enable the provision of public information from the government to the citizen at the time of an emergency. But, moving on from the traditional short message <b>service</b> <b>notification</b> to a more advanced location-based service, this study is an investigation of the major issues faced by government, business and society at large, towards the realisation of a fully fledged national location-enabled emergency system for personal mobile devices in Australia. The investigation is carried out with the main stakeholders of location-based services in Australia through a self-administered mail survey with the general public, in conjunction with a series of in-depth semi-structured interviews with key informants. The quantitative data is analysed mainly using the partial least squares method. The qualitative data is analysed using content analysis techniques. The findings show social acceptance of a national location-based mobile phone emergency service in Australia, in spite of general concerns about infringements in privacy. People acceptance of the service is largely driven by the trust placed in the government as the controller of the service, and in the service as an admissible useful means for managing emergencies. A number of barriers to the nationwide utilisation of the location-based mobile phone emergency service are identified and discussed, and a discourse of recommendations presented for the purpose of setting realistic objectives and expectations for the service in Australia. This study significantly contributes to the body of practical knowledge towards the development of more informed deployment and diffusion strategies for location-based emergency services in Australia. It also contributes to the scholarly literature offering new insights on the issues pertaining to the public offerings of location-based services in the domain of emergency management where comparable studies have been rather limited. In addition, the study contributes meaningfully to the current theories of acceptance by providing empirical evidence to retain the role of the attitude construct in the attitude-behaviour relationship, especially when studying the social acceptance of new electronic government applications and initiatives. Limitations of this research work and prospective directions for investigation are also presented...|$|E
500|$|Windows Push <b>Notification</b> <b>Service</b> (commonly {{referred}} to as Windows <b>Notification</b> <b>Service</b> or WNS) is a <b>notification</b> <b>service</b> developed by Microsoft for all devices running Microsoft Windows platforms. It allows for developers to send push data ("toast" [...] and [...] "tile" [...] updates) to Windows and Universal Windows Platform [...] applications which implement the feature. Designed as a successor to the Microsoft Push <b>Notification</b> <b>Service,</b> it was first supported on Windows 8 and subsequently on Windows Phone 8.1 upon its release.|$|R
5000|$|... editing adapter <b>service</b> and <b>notifications</b> (used {{to connect}} with {{external}} systems) ...|$|R
40|$|With {{the growing}} {{popularity}} of CORBA as a distributed computing infrastructure standard, the need for a reliable CORBA messaging solution is being increasingly felt. The Event Service, which is the first such solution, provides inadequate event delivery guarantees and lacks many important features such as configurable quality of service and filtering. A <b>Notification</b> <b>Service</b> has since been specified to address these shortcomings and to extend the Event Service functionality. This paper briefly looks at the features of the <b>Notification</b> <b>Service</b> and explains in detail the <b>Notification</b> <b>Service</b> support for reliable messaging. The highest event delivery guarantee possible with the CORBA <b>Notification</b> <b>Service</b> is deduced and the delivery semantics provided is examined. A framework for architecting reliable messaging systems using the CORBA <b>Notification</b> <b>Service</b> is proposed. The performance of the <b>Notification</b> <b>Service</b> is analyzed to determine the performance penalty for increased reliability, and the effect of event size, number of clients and filtering on throughput...|$|R
50|$|Finally, <b>Notification</b> <b>Services</b> can {{communicate}} {{with a wide variety}} of Microsoft, third-party, and custom-built event providers and delivery protocols, enabling <b>Notification</b> <b>Services</b> to communicate with existing systems in heterogeneous environments.|$|R
50|$|Amazon Simple <b>Notification</b> <b>Service</b> (SNS) is a <b>notification</b> <b>service</b> {{provided}} {{as part of}} Amazon Web Services. It provides a low-cost infrastructure for the mass delivery of messages, predominantly to mobile users.|$|R
40|$|The <b>Notification</b> <b>Service</b> alpha 1. 0 User's Guide {{provides}} information {{about using the}} <b>notification</b> <b>service.</b> This includes {{an overview of the}} <b>notification</b> <b>service,</b> the functionalities that the current release provides and the development of client applications in different ways depending on your needs. The User's Guide may be used in conjunction with the Quick Start and the WSDL Interface Explanation document which are now available from [URL]...|$|R
25|$|Originally {{introduced}} as a post-release add-on for SQL Server 2000, <b>Notification</b> <b>Services</b> was bundled {{as part of}} the Microsoft SQL Server platform for the first and only time with SQL Server 2005. SQL Server <b>Notification</b> <b>Services</b> is a mechanism for generating data-driven notifications, which are sent to <b>Notification</b> <b>Services</b> subscribers. A subscriber registers for a specific event or transaction (which is registered on the database server as a trigger); when the event occurs, <b>Notification</b> <b>Services</b> can use one of three methods {{to send a message to}} the subscriber informing about the occurrence of the event. These methods include SMTP, SOAP, or by writing to a file in the filesystem. <b>Notification</b> <b>Services</b> was discontinued by Microsoft with the release of SQL Server 2008 in August 2008, and is no longer an officially supported component of the SQL Server database platform.|$|R
40|$|Many {{distributed}} applications require a scalable event-driven communication model that decouples suppliers from consumers and simultaneously supports advanced {{quality of service}} (QoS) properties and event filtering mechanisms. The CORBA <b>Notification</b> <b>Service</b> provides a publish/subscribe mechanism {{that is designed to}} support scalable event-driven communication by routing events efficiently between many suppliers and consumers, enforcing various QoS properties (such as reliability, priority, ordering, and timeliness), and filtering events at multiple points in a distributed system. This paper provides several contributions to research on scalable <b>notification</b> <b>services.</b> First, we present the CORBA <b>Notification</b> <b>Service</b> architecture and illustrate how it addresses limitations with the earlier CORBA Event Service. Second, we explain how we addressed key design challenges faced when implementing the <b>Notification</b> <b>Service</b> in TAO, which is our high-performance, real-time ORB. Finally, we discuss the optimizations used to improve the scalability of TAO's <b>Notification</b> <b>Service.</b> ...|$|R
50|$|Originally {{introduced}} as a post-release add-on for SQL Server 2000, <b>Notification</b> <b>Services</b> was bundled {{as part of}} the Microsoft SQL Server platform for the first and only time with SQL Server 2005. SQL Server <b>Notification</b> <b>Services</b> is a mechanism for generating data-driven notifications, which are sent to <b>Notification</b> <b>Services</b> subscribers. A subscriber registers for a specific event or transaction (which is registered on the database server as a trigger); when the event occurs, <b>Notification</b> <b>Services</b> can use one of three methods {{to send a message to}} the subscriber informing about the occurrence of the event. These methods include SMTP, SOAP, or by writing to a file in the filesystem. <b>Notification</b> <b>Services</b> was discontinued by Microsoft with the release of SQL Server 2008 in August 2008, and is no longer an officially supported component of the SQL Server database platform.|$|R
30|$|Service {{component}} is a general-purpose entry point and supports variety of (background or foreground) {{services such as}} audio and visual notifications, component authentication, or application execution monitoring. Services may run {{in the background and}} perform long-running operations without necessarily providing any user interface. Alternatively, services may interact with users and notify them through <b>service</b> <b>notifications.</b> For example, an anti-spam application can continuously execute in the background and can update the user only when a potential spam is detected.|$|R
40|$|Abstract — Mobile <b>notification</b> <b>services</b> {{typically}} do not {{adapt to a}} user’s physical context {{in terms of the}} mode of communication used for output. Implementations of these services are also not generally extensible and support only the service for which they were designed. This paper discusses {{the development and implementation of}} a model for adaptive mobile <b>notification</b> <b>services</b> which includes multimodality and context awareness and is extensible. Index Terms — Context awareness, Mobile <b>notification</b> <b>services,</b> Adaptive model...|$|R
40|$|Web-based <b>notification</b> <b>services</b> {{are used}} by a large range of {{businesses}} to selectively distribute live updates to customers, following the publish/subscribe (pub/sub) model. Typical deployments can involve millions of subscribers expecting ordering and delivery guarantees together with low latencies. <b>Notification</b> <b>services</b> must be vertically and horizontally scalable, and adopt replication to provide a reliable service. We report our experience building and operating MigratoryData, a highly-scalable <b>notification</b> <b>service.</b> We discuss the typical requirements of MigratoryData customers, and describe the architecture and design of the service, focusing on scalability and fault tolerance. Our evaluation demonstrates the ability of MigratoryData to handle millions of concurrent connections and support a reliable <b>notification</b> <b>service</b> despite server failures and network disconnections...|$|R
40|$|Distributed <b>notification</b> <b>services</b> allow {{consumers}} and publishers of notifications {{to interact with}} different <b>notification</b> <b>services.</b> However, such a distributed infrastructure {{makes it difficult to}} share notifications between consumers when consumers are allowed to specify Quality of Service levels. In this paper, we present a chained negotiation engine, enabling distributed <b>notification</b> <b>services</b> to support negotiation and to reuse existing subscriptions. We demonstrate the benefit to the system as a whole by reducing load on service providers and enabling content to be shared. ...|$|R
40|$|Event <b>Notification</b> <b>service</b> {{system is}} a data {{dissemination}} technology which asynchronously notifies consumers whose interests match with the events published by producers. Fault-tolerance is important for a large-scale event <b>notification</b> <b>service</b> system as link or node failures usually occur in a wide-area network. In this paper, we first describe architecture of event <b>notification</b> <b>service</b> system for large scale network to minimize the size of routing entities and to reduce latency of notification delivery to consumers. We then present a replication algorithm based on primary-back replication so that event <b>notification</b> <b>service</b> system is resilient to failures of event servers and links between them and maintains dissemination of events. The replication technique used in proposed architecture can minimize {{the portion of the}} system affected by these failures. 1...|$|R
40|$|Existing web <b>services</b> <b>notification</b> and {{eventing}} {{standards are}} useful in many applications, but embody serious limitations precluding large-scale deployments. Within the standards, {{it is impossible to}} use IP multicast, or for recipients to forward messages to others. Scalable notification trees must be configured manually. We propose a design free of such limitations that could serve as a basis for complementing or extending these standards. The approach emerges from our prior work on Quicksilver, a new web services eventing platform that can scale to extremely large environments...|$|R
50|$|In {{a typical}} Telecommunications Management Network, a network {{management}} system will {{make use of}} the management operation services to monitor network elements. Management agents found on network elements will {{make use of the}} management <b>notification</b> <b>services</b> to send <b>notifications</b> or alarms to the network management system.|$|R
