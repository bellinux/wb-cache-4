350|735|Public
5|$|The log-on message {{sent from}} the {{aircraft}} at 08:19:29 {{was not immediately}} well understood. The 02:25 handshake was also initiated by the aircraft. Only a few reasons that the SDU would transmit a log-on message exist, such as a power interruption, <b>software</b> <b>failure,</b> loss of critical systems providing input to the SDU, or a loss of the link due to aircraft attitude. Investigators consider the most likely reason to be that they were sent during power-up after an electrical outage. At 08:19, the aircraft had been airborne for 7h 38min; the typical Kuala Lumpur-Beijing flight is 5hours and fuel exhaustion was likely. In the event of fuel exhaustion and engine flame-out, the aircraft's ram air turbine would deploy, providing power to various instruments and flight controls, including the SDU. Approximately 90seconds after the 02:25 handshake, communications from the aircraft's inflight entertainment system were recorded in the ground station log. Similar messages would be expected following the 08:19 handshake but none were received, supporting the fuel starvation scenario.|$|E
25|$|According to the ABS, {{throughout}} 9 August the Census website received four denial-of-service attacks. At 7:30 pm, {{when the}} site was being heavily used, a <b>software</b> <b>failure</b> meant that the ABS was unable to keep blocking the denial-of-service attacks, leading {{to the failure of}} a router. As a result, the ABS decided to close down the system as a precaution. The ABS reported that no census data were compromised. The Australian Signals Directorate was assisting the ABS to bring the infrastructure back online more than 24 hours after the closure.|$|E
500|$|Since the {{aircraft}} {{did not respond}} to a ping at 09:15, it can be concluded that at some point between 08:19 and 09:15, {{the aircraft}} lost the ability to communicate with the ground station. The log-on message sent from the aircraft at 08:19:29 was [...] "log-on request". There are only a few reasons the SDU would transmit a log-on request, such as a power interruption, <b>software</b> <b>failure,</b> loss of critical systems providing input to the SDU, or a loss of the link due to the aircraft's [...] Investigators consider the most likely reason to be that it was sent during power-up after an electrical outage. At 08:19, the aircraft had been airborne for 7h 38min; the typical Kuala Lumpur-Beijing flight is 5hours, so fuel exhaustion was likely. In the event of fuel exhaustion and engine flame-out, which would eliminate power to the SDU, the aircraft's ram air turbine (RAT) would deploy, providing power to some instruments and flight controls, including the SDU. Approximately 90seconds after the 02:25 handshake—also a log-on request—communications from the aircraft's inflight entertainment system were recorded in the ground station log. Similar messages would be expected following the 08:19 handshake, but none were received, supporting the fuel-exhaustion scenario.|$|E
5000|$|Business Disruption and Systems Failures - utility disruptions, <b>software</b> <b>failures,</b> {{hardware}} failures ...|$|R
40|$|Digital {{forensics}} {{has been}} proposed as a methodology for doing root-cause analysis of major <b>software</b> <b>failures</b> for quite a while. Despite this, similar <b>software</b> <b>failures</b> still occur repeatedly. A {{reason for this is}} the difficulty of obtaining detailed evidence of <b>software</b> <b>failures.</b> Acquiring such evidence can be challenging, as the relevant data may be lost or corrupt following a software system‘s crash. This paper proposes the use of near-miss analysis to improve on the collection of evidence for <b>software</b> <b>failures.</b> Near-miss analysis is an incident investigation technique that detects and subsequently analyses indicators of failures. The results of a near-miss analysis investigation are then used to detect an upcoming failure before the failure unfolds. The detection of these indicators – known as near misses – therefore provides an opportunity to proactively collect relevant data that can be used as digital evidence, pertaining to <b>software</b> <b>failures.</b> A Near Miss Management System (NMS) architecture for the forensic investigation of <b>software</b> <b>failures</b> is proposed. The viability of the proposed architecture is demonstrated through a prototype. [URL] Scienc...|$|R
40|$|Many {{applications}} demand availability. Unfortunately, <b>software</b> <b>failures</b> {{greatly reduce}} system availability. Previous approaches for surviving <b>software</b> <b>failures</b> suffer from several limitations, including requiring application restructuring, failing to address deterministic software bugs, unsafely speculating on program execution, and re-quiring a long recovery time. This pape...|$|R
2500|$|Stephenson {{explained}} {{the title of}} the novel in his 1999 essay [...] "In the Beginning... Was the Command Line" [...] as his term for a particular <b>software</b> <b>failure</b> mode on the early Apple Macintosh computer. Stephenson wrote about the Macintosh that [...] "When the computer crashed and wrote gibberish into the bitmap, the result was something that looked vaguely like static on a broken television set—a 'snow crash' ". Stephenson has also mentioned that Julian Jaynes' book The Origin of Consciousness in the Breakdown of the Bicameral Mind {{was one of the main}} influences on Snow Crash.|$|E
2500|$|Risk Management: <b>Software</b> <b>failure</b> {{has caused}} more than inconvenience. Software errors have caused human fatalities. The causes {{have ranged from}} poorly {{designed}} user interfaces to direct programming errors. An example of a programming error that led to multiple deaths is discussed in Dr. Leveson's paper. This resulted in requirements {{for the development of}} some types of software, particularly and historically for software embedded in medical and other devices that regulate critical infrastructures: [...] " [...] see Java programs stalling for one third of a second to perform garbage collection and update the user interface, and they envision airplanes falling out of the sky.". In the United States, within the Federal Aviation Administration (FAA), the FAA Aircraft Certification Service provides software programs, policy, guidance and training, focus on software and Complex Electronic Hardware that has an effect on the airborne product (a [...] "product" [...] is an aircraft, an engine, or a propeller).|$|E
50|$|Hardware and <b>software</b> <b>failure</b> are the {{two main}} causes for data loss. Background radiation, head crashes, and aging or wear of the storage device fall into the former category, while <b>software</b> <b>failure</b> {{typically}} occurs due to bugs in the code.Cosmic rays cause most soft errors in DRAM.|$|E
30|$|Expected {{number of}} <b>software</b> <b>failures</b> {{detected}} by time t.|$|R
5000|$|Perrow, Charles (2008). <b>Software</b> <b>Failures,</b> Security, and Cyberattacks. Paper.|$|R
40|$|<b>Software</b> <b>failures</b> {{represent}} {{a large portion}} of outages in Internet service clusters, but are unfortunately not tackled by classical Internet service clustering solutions, leaving the service unavailable. In this paper, we present JSeR, an AOSD-based solution for Internet service availability which specifically handles transient <b>software</b> <b>failures.</b> JSeR was used with an e-commerce application. A first result of the experimental evaluation shows that the proposed approach allows masking up to 100 % of transient <b>software</b> <b>failures,</b> with a negligible application performance overhead. Another result of our experiments is that code maintenance of the AOSD-based availability system is greatly improved. Categories and Subject Descriptor...|$|R
5000|$|Critical {{system states}} like (unrecoverable) {{hardware}} or <b>software</b> <b>failure</b> ...|$|E
50|$|The launch was aborted {{due to a}} {{combination}} of two failures, an antenna hardware failure and an onboard guidance system <b>software</b> <b>failure.</b>|$|E
50|$|IBM's System 370 was {{a version}} of the 360 tweaked to run virtual {{computing}} environments. The virtual computer was developed to reduce the chances of an unrecoverable <b>software</b> <b>failure.</b>|$|E
5000|$|... dynamic fault {{tolerance}} against <b>software</b> <b>failures</b> (through rapid bootstrapping or rebooting) ...|$|R
30|$|Hisenbugs and bhorbus are {{types of}} <b>software</b> <b>failures</b> {{that lead to}} {{intermittent}} failures. Heisenbugs cause a class of <b>software</b> <b>failures</b> that typically surface in situations where there are boundaries between various software components {{and are likely to}} appear in grids. Heisenbugs result in intermittent failures that are extremely difficult to identify through testing (Vaidyanathan and Trivedi 2001).|$|R
40|$|The paper {{deals with}} {{providing}} software reliability control {{for up to}} date on-board fault-tolerable computer-assisted management systems, created {{on the base of}} integral modular aircraft electronics technology, during operational period. The authors describe the method of <b>software</b> <b>failures</b> probability evaluation and serial calculating algorithm, based determining the margins of <b>software</b> <b>failures</b> number, according to operational control dat...|$|R
5000|$|To {{address this}} issue, data {{scrubbing}} provides routine checks of all inconsistencies in data and, in general, prevention of hardware or <b>software</b> <b>failure.</b> This [...] "scrubbing" [...] feature occurs commonly in memory, disk arrays, file systems, or FPGAs {{as a mechanism}} of error detection and correction.|$|E
50|$|IaaS service {{components}} Cloud Controller, Cluster Controller, Walrus, Storage Controller, and VMware Broker are configurable as redundant {{systems that are}} resilient to multiple types of failures. Management state of the cloud machine is preserved and reverted to normal operating conditions {{in the event of}} a hardware or <b>software</b> <b>failure.</b>|$|E
50|$|The aim {{of visual}} testing {{is to provide}} {{developers}} {{with the ability to}} examine what was happening at the point of <b>software</b> <b>failure</b> by presenting the data {{in such a way that}} the developer can easily ﬁnd the information she or he requires, and the information is expressed clearly.|$|E
40|$|Passive Optical Networks (PONs) {{are one of}} the {{preferred}} technologies to deploy broadband access networks. As time passes, end users presuppose network connectivity to be always available, and expect PONs to be highly dependable. Yet operators, from an economic view, are interested in the costs related to failures. Thus, PONs dependability and associated costs have been extensively studied, but only focusing on hardware failures. Contrarily, this paper performs a thorough analysis of the impact of <b>software</b> <b>failures</b> in failure-related costs. Based on real empirical data, <b>software</b> <b>failures</b> are thoroughly characterized and classified in four different categories according to their severity. Also, the effect of <b>software</b> <b>failures</b> on the behavior of PON’s fiber protection and recovery mechanisms is detailed. <b>Software</b> <b>failures</b> are included into a Markov cost model, implementing a comprehensive cost framework. This way, the dependability-related costs of PONs are analyzed, accounting for hardware and <b>software</b> <b>failures,</b> {{as well as for the}} consequences of <b>software</b> <b>failures</b> on well-known PON protection mechanisms. Moreover, how the testing phase duration and user profile (residential or business) impact these costs is pinpointed. (c) 2015 IEEE. Personal use of this material is permitted. Permission from IEEE must be obtained for all other users, including reprinting/ republishing this material for advertising or promotional purposes, creating new collective works for resale or redistribution to servers or lists, or reuse of any copyrighted components of this work in other works...|$|R
50|$|Photo loss or {{deletion}} failures {{may be due}} to both hardware or <b>software</b> <b>failures.</b>|$|R
40|$|International audienceA mobile {{operator}} {{offers many}} mobile data communication services to its users, such as e-mail, Web browsing, company proprietary services. Although quick detection {{of communication and}} <b>software</b> <b>failures</b> are important to improve users’ satisfaction, such a quick detection is difficult because the services are served by many servers, network nodes and mobile terminals. Thus we developed the anomaly detection technique for the mobile operator’s network to detect anomalies caused by communication failures such as server and network halts. Our technique {{is based on the}} observation that users reconnect to servers many times when a communication failure occurs. It is useful not only to detect such communication failures, but also those which would be caused by <b>software</b> <b>failures</b> of mobile terminals and servers. This means that a mobile operator would be able to detect <b>software</b> <b>failures</b> missed at the testing period. In this paper, we empirically study how our technique is used to detect <b>software</b> <b>failures</b> of mobile terminals...|$|R
50|$|Organizations adopt Continuous Testing {{because they}} {{recognize}} that these problems are preventing them from delivering quality software at the desired speed. They recognize the growing importance of software {{as well as the}} rising cost of <b>software</b> <b>failure,</b> and they are no longer willing to make a tradeoff between time, scope, and quality.|$|E
50|$|Threats {{identified}} to Ireland's {{critical infrastructure}} and government networks include: lone individuals, activist groups, criminal groups, terrorist groups, and nation states seeking to gather intelligence or to damage or degrade infrastructure. Incidents arising through extreme weather, human error and hardware or <b>software</b> <b>failure</b> also pose significant risks to individuals, businesses and public administration.|$|E
50|$|When {{connecting}} to a broker via a client API, users can specify, in the connection URL, {{a list of}} alternative hosts where brokers are listening for incoming requests. In case of a hardware, network, operating system or <b>software</b> <b>failure</b> {{on one of the}} hosts, the underlying client API automatically fails over to the next host that a user has provided.|$|E
5000|$|It is fault resilient. It {{can protect}} itself from {{traditional}} hardware and <b>software</b> <b>failures,</b> {{as well as}} malicious attacks.|$|R
30|$|SN {{software}} failures: SNs {{are prone}} to random permanent <b>software</b> <b>failures</b> which can render them inactive, i.e., unable to sense or communicate.|$|R
3000|$|Fault-tolerance: The {{state of}} each {{server-side}} component, including agents themselves, is copied to other nodes making {{the whole system}} resilient to hardware and <b>software</b> <b>failures.</b>|$|R
50|$|A cluster-aware {{application}} is a software application designed to call cluster APIs {{in order to}} determine its running state, in case a manual failover is triggered between cluster nodes for planned technical maintenance, or an automatic failover is required, if a computing cluster node encounters hardware or <b>software</b> <b>failure,</b> to maintain business continuity. A cluster-aware application may be capable of failing over LAN or WAN.|$|E
5000|$|The ADN also ensures {{application}} {{availability and}} reliability through {{its ability to}} seamlessly [...] "failover" [...] to a secondary device {{in the event of}} a hardware or <b>software</b> <b>failure.</b> This ensures that traffic continues to flow {{in the event of a}} failure in one device, thereby providing fault tolerance for the applications. Fault tolerance is implemented in ADNs through either a network or serial based connection.|$|E
50|$|In {{software}} testing, {{error guessing}} {{is a test}} method in which test cases used to find bugs in programs are established based on experience in prior testing. The scope of test cases usually rely on the software tester involved, who uses past experience and intuition to determine what situations commonly cause <b>software</b> <b>failure,</b> or may cause errors to appear. Typical errors include divide by zero, null pointers, or invalid parameters.|$|E
30|$|The {{problems}} related to hardware and/or <b>software</b> <b>failures</b> increased (see Fig.  6) the climatology execution time considerably. We have identified different factors that caused those problems.|$|R
40|$|Many {{engineering}} fields {{have recognized}} the need to analyze past mistakes and failures in the hope of learning from them. In computer science this realization has resulted in the development of software testing techniques that attempt to detect known problems from software systems and in improved compilers and development tools. However, there exists a series of <b>software</b> <b>failures</b> where detailed analysis is rarely published, mainly for fear that the information could be used against active systems. These <b>software</b> <b>failures,</b> commonly referred to as computer vulnerabilities, have special properties that set them apart from traditional <b>software</b> <b>failures.</b> Detailed analysis of the factors that contribute to the existence of these vulnerabilities is mostly limited to cryptic articles posted to hacker newsgroups or web sites. There are a few notable exceptions, and this report attempts to add to these with a detailed analysis of four common computer vulnerabilities. The analysis of each vulnera [...] ...|$|R
5000|$|ALIS <b>software</b> <b>failures</b> {{continue}} to impede operation, mission planning, {{and maintenance of}} the F-35, forcing the Services to be overly reliant on contractors and [...] "unacceptable workarounds"; ...|$|R
