59|471|Public
5|$|XIV {{was first}} hinted at the 2005 Electronic Entertainment Expo (E3) when Square Enix {{announced}} that they were developing a new MMORPG, showing it off using a tech demo. The demo included aesthetic elements similar to XI, such as races from Vana'diel. In 2006, rumors emerged that Square Enix was developing a direct sequel to Final Fantasy XI, but further details remained unknown. During the next few years, contradictory reports were issued as to what platforms the game was being developed for: the platforms listed varied from the game being an Xbox 360 exclusive, to being for PlayStation platforms, to being for Xbox 360, PlayStation 3 (PS3) and Windows platforms. XIV was officially announced at E3 2009 for PS3, then for Windows. After its official announcement for those platforms, it was stated that a port to Microsoft hardware was under consideration. Despite negotiation with Microsoft concerning an Xbox 360 version of the game, the two companies were unable to agree upon the use of Xbox Live, as Square Enix wanted a <b>shared</b> <b>server</b> across all platforms and Microsoft would not give them the full access necessary to implement this. Because of this disagreement and the consequent extra manpower needed to develop a version separate from the other two platforms, development on the Xbox 360 version was stopped.|$|E
50|$|Screenster ships as a {{commercial}} solution that runs on a <b>shared</b> <b>server</b> on premise or on the cloud. Other functionality of the platform includes automatic management of timeouts and locators.|$|E
50|$|In 2008, {{the company}} {{introduced}} the best account isolation protocol which protect {{each and every}} single account on a <b>shared</b> <b>server.</b> Before that, it was impossible and now the same system to isolate shared hosting account is commonly used by many web hosts.|$|E
40|$|The goal of {{the thesis}} is to analyse and coherently {{describe}} a branch that haven't been sufficiently described in professional literature yet. To reach this goal thesis uses author's experience with specific <b>share</b> <b>server</b> development and operation and puts it as an example on which it explains all the important attributes and dependencies. Diploma thesis is aimed to an issue of internet file sharing. In it's first part it describes file sharing in general including history of internet file sharing. Two case studies {{of the most popular}} but different <b>share</b> <b>servers</b> follow. The thesis aims on business, technical, social and legal aspects of file <b>sharing</b> using <b>share</b> <b>servers.</b> In it's practical part the thesis aims on the specific <b>share</b> <b>server</b> project and especially cares of process, business, technical and user aspects. Within the process part running processes and their meaning for the whole <b>share</b> <b>server</b> project are analysed. The business part describes the dependencies of profit and costs components on individual variable attributes of <b>share</b> <b>server</b> system a it's environment. The technical part focuses on hardware, software and network devices from which <b>share</b> <b>server</b> is composed. In the part which focuses on the user interface and usability author critically evaluates the actual state of <b>share</b> <b>server's</b> website and describes possible improvements especially in the area of usability. In {{the last part of the}} thesis author evaluates the current state of <b>share</b> <b>servers</b> branch and estimates it's future development...|$|R
5000|$|... iPage also {{provides}} Wordpress hosting solutions which are basically <b>shared</b> <b>servers</b> which are pre-configured to run Wordpress.|$|R
50|$|ObjectiveFS {{software}} {{runs on the}} server and talks to the object store using S3 API. The software itself handles the metadata. When there are multiple <b>servers</b> <b>sharing</b> the same files, it handles the negotiation with other <b>sharing</b> <b>servers</b> (also running ObjectiveFS).|$|R
50|$|XenApp is {{application}} virtualization software {{produced by}} Citrix Systems that allows Windows applications to be accessed via individual devices from a <b>shared</b> <b>server</b> or cloud system. XenApp was first released in 2008, but {{earlier versions of}} the product were called WinFrame, MetaFrame, and Presentation Server.|$|E
50|$|DAViCal is {{a server}} for {{calendar}} sharing. It is an {{implementation of the}} CalDAV protocol which is designed for storing calendaring resources on a remote <b>shared</b> <b>server.</b> Although the events are stored in a SQL database the information between client and server is transferred in the iCalendar format.|$|E
5000|$|... {{collection}} uses downloadable {{software to}} scan users' hard drives, glean random files, and store the collected {{information on a}} <b>shared</b> <b>server.</b> The combined data is then displayed, creating what {{has been described as}} a virtual networked collective unconscious. It has been featured in Sydney, Barcelona, and in the 2002 Whitney Biennial.|$|E
2500|$|CAPTCHAs {{residing}} on <b>shared</b> <b>servers</b> also present a problem; a security issue on another virtual host may leave the CAPTCHA issuer's site vulnerable ...|$|R
30|$|The client encrypts each {{share with}} a secret key <b>shared</b> with each <b>server</b> (one <b>share</b> per <b>server).</b>|$|R
5000|$|The user {{connecting}} is not {{the administrator}} of the machine. This is only likely for hosts providing Unix shell access, <b>shared</b> <b>servers</b> using a suEXEC-like construction and the like.|$|R
50|$|During development, {{both the}} {{companies}} would continuously share {{their most recent}} data on a <b>shared</b> <b>server,</b> and discuss details of the game direction using an instant messaging program; additionally, they would hold weekly meetings during which they made various arrangements for the game, and every month during development, Spike Chunsoft would send their latest playable build to Atlus, who would check the direction the game was going in.|$|E
5000|$|Traditional {{revision}} control systems use a centralized model {{where all the}} {{revision control}} functions take place on a <b>shared</b> <b>server.</b> If two developers {{try to change the}} same file at the same time, without some method of managing access the developers may end up overwriting each other's work. Centralized revision control systems solve this problem in one of two different [...] "source management models": file locking and version merging.|$|E
50|$|Radio UserLand is an {{offspring}} of UserLand's Manila, which {{is built on}} the Frontier platform. It uses a desktop client to store the full content of a user's weblog on the user's computer, and provides a mechanism for uploading it to a <b>shared</b> <b>server.</b> Server space at UserLand's radio.weblogs.com site {{was included in the}} annual registration fee from the start, and continued after UserLand's founder sold most of weblogs.com to VeriSign in 2005. Radio users also have the option of uploading their weblog content to a server at another Web hosting service.|$|E
50|$|Personal File Sharing. Along {{with various}} UI {{improvements}} for AppleTalk setup, System 7 {{also included a}} basic file <b>sharing</b> <b>server</b> allowing any machine to publish folders to the AppleTalk network.|$|R
50|$|Computer {{clustering}} {{relies on}} a centralized management approach which makes the nodes available as orchestrated <b>shared</b> <b>servers.</b> It is distinct from other approaches such as peer to peer or grid computing which also use many nodes, but with a far more distributed nature.|$|R
50|$|Virtual {{web hosting}} {{is often used}} on large scale in {{companies}} whose business model is to provide low cost website hosting for customers. The vast majority of web hosting service customer websites worldwide are hosted on <b>shared</b> <b>servers,</b> using virtual hosting technology.|$|R
5000|$|Cross-platform development: When writing {{software}} {{that runs on}} multiple processor architectures and operating systems, it can be infeasible for each developer {{to have their own}} machine for each architecture — for example, one platform might have an expensive or obscure type of CPU. In this scenario, a compile farm is useful as a tool for developers to build and test their software on a <b>shared</b> <b>server</b> running the target OS and CPU. Compile farms may be preferable to cross-compilation as cross compilers are often complicated to configure, and in some cases compilation is only possible on the target, making cross-compilation impossible.|$|E
50|$|XIV {{was first}} hinted at the 2005 Electronic Entertainment Expo (E3) when Square Enix {{announced}} that they were developing a new MMORPG, showing it off using a tech demo. The demo included aesthetic elements similar to XI, such as races from Vana'diel. In 2006, rumors emerged that Square Enix was developing a direct sequel to Final Fantasy XI, but further details remained unknown. During the next few years, contradictory reports were issued as to what platforms the game was being developed for: the platforms listed varied from the game being an Xbox 360 exclusive, to being for PlayStation platforms, to being for Xbox 360, PlayStation 3 (PS3) and Windows platforms. XIV was officially announced at E3 2009 for PS3, then for Windows. After its official announcement for those platforms, it was stated that a port to Microsoft hardware was under consideration. Despite negotiation with Microsoft concerning an Xbox 360 version of the game, the two companies were unable to agree upon the use of Xbox Live, as Square Enix wanted a <b>shared</b> <b>server</b> across all platforms and Microsoft would not give them the full access necessary to implement this. Because of this disagreement and the consequent extra manpower needed to develop a version separate from the other two platforms, development on the Xbox 360 version was stopped.|$|E
40|$|Abstract. Currently, most {{domestic}} colleges & {{universities have}} {{the problems of}} overlapping IT resource investment, low device utilization rate and poor operation & maintenance etc. For this purpose, {{this article is to}} analyze the core idea, value and product of the cloud computing, explain the architecture of the cloud computing, and provide IaaS-based <b>shared</b> <b>server</b> farm solution and its application at colleges & universities...|$|E
40|$|Server Virtualisation (hosting {{multiple}} “software ” or “virtual ” <b>servers</b> on <b>shared</b> physical <b>servers)</b> {{is driven}} by the goal of reducing the total number of physical servers in an organisation by consolidating multiple applications on <b>shared</b> <b>servers.</b> Expected benefits include more efficient server utilisation, and a decrease in green house gas emissions. However, Service Oriented Architectures combined with Server Virtualization significantly increases the risk of saturation and Service Level Agreement (SLA) violations. This seminar addresses the management of performance risk associated with Service Oriented Architectures and Server Virtualization by SOA performance modelling...|$|R
5000|$|Functionality {{supported}} by the Video <b>Share</b> Application <b>Server</b> includes: ...|$|R
40|$|The Bandwidth <b>Sharing</b> <b>Server</b> (BSS) is a schedul-ing {{strategy}} for multi-task real-time applications {{that provides the}} dual properties of performance guarantees and inter-application isolation. We describe here the BSS-I algorithm, an evolution of the BSS, aimed at (i) improving the run-time performance and (ii) general-izing the kinds of performance guarantees that can be oered. ...|$|R
40|$|In a <b>shared</b> <b>server</b> infrastructure, a {{scheduler}} controls how {{quantities of}} resources are shared {{over time in}} a fair manner across multiple, competing consumers. It should support wide (parallel) requests for variable-sized pool of resources, provide assurance of minimum resource allotment on demand, and give predictable assignments to plan their resource usage (e. g., advance reservations). Our approach integrates a fair queuing algorithm with a calendar scheduler. We present Winks, a proportional share allocation policy that addresses the needs of <b>shared</b> <b>server</b> environments. It extends start-time fair queuing to supports wide requests with backfill, advance reservations, dynamic cluster sizing, dynamic request sizing, and intraflow request prioritization. We show that it preserves fairness properties across queue transformations and calendar operations needed to implement these extensions. The analysis and experimental results show that Winks enforces shares effectively, even when wide requests would otherwise prevent a flow from making progress. While the algorithm {{is presented in the}} context of a virtual computing system, it is also applicable as a full-featured job scheduler. 1...|$|E
40|$|Abstract. Due to the {{imperative}} {{need to reduce}} the costs of management, power and cooling in large data centers, operators multiplex several concurrent applications on each physical server of a server farm connected to a shared network attached storage. Determining and enforcing per-application resource quotas on the fly in this context poses a complex resource allocation and control problem spanning many levels including the CPU, memory and storage resources within each physical server and/or across the server farm. This problem is further complicated {{by the need to}} provide end-to-end Quality of Service (QoS) guarantees to hosted applications. In this paper, we introduce a novel approach towards controlling application interference for resources in <b>shared</b> <b>server</b> farms. Specifically, we design and implement a minimally intrusive method for passing applicationlevel QoS requirements through the software stack. We leverage highlevel per-application requirements for controlling I/O interference between multiple database applications, by QoS-aware dynamic resource partitioning at the storage server. Our experimental evaluation, using the MySQL database engine and OLTP benchmarks, shows the effectiveness of our technique in enforcing high-level application Service Level Objectives (SLOs) in <b>shared</b> <b>server</b> farms. ...|$|E
40|$|We {{present the}} cgmOLAP server, the first fully {{functional}} parallel OLAP system {{able to build}} data cubes {{at a rate of}} more than 1 Terabyte per hour. cgmOLAP incorporates a variety of novel approaches for the parallel computation of full cubes, partial cubes, and iceberg cubes as well as new parallel cube indexing schemes. The cgmOLAP system consists of an application interface, a parallel query engine, a parallel cube materialization engine, meta data and cost model repositories, and <b>shared</b> <b>server</b> components that provide uniform management of I/O, memory, communications, and disk resources. No Full Tex...|$|E
40|$|Increasingly, {{substantial}} {{data path}} processing {{is happening on}} devices within the network. At or near {{the edges of the}} network, data rates are low enough that commodity workstations may be used to process packet flows. However, the operating systems such machines use are not suited to the needs of data-driven processing. This dissertation shows why this is a problem, how current work fails to address it, and proposes a new approach. The principal problem is that crosstalk occurs in the processing of different data flows when they contend for a shared resource and their accesses to this resource are not scheduled appropriately; typically the shared resource is located in a server process. Previous work on vertically structured operating systems reduces the need for such <b>shared</b> <b>servers</b> by making applications responsible for performing as much of their own processing as possible, protecting and multiplexing devices at the lowest level consistent with allowing untrusted user access. However, <b>shared</b> <b>servers</b> remain on the data path in two circumstances: firstly, dumb network adaptors need non-trivial processing to allow safe access by untrusted user applications. Secondly, <b>shared</b> <b>servers</b> are needed wherever trusted code must be executed for security reasons. This dissertation presents the design and implementation of Expert, an operating system which avoids crosstalk by removing the need for such servers. This dissertation describes how Expert handles dumb network adaptors to enable applications to access them via a low-level interface which is cheap to implement in the kernel, and retains application responsibility for the work involved in running a network stack. Expert further reduces the need for application-level <b>shared</b> <b>servers</b> by introducing paths which can trap into protected modules of code to perform actions which would otherwise have to be implemented within a server. Expert allows traditional compute-bound tasks to be freely mixed with these I/O-driven paths in a single system, and schedules them in a unified manner. This allows the processing performed in a network element to be resource controlled, both for background processing tasks such as statistics gathering, and for data path processing such as encryption...|$|R
50|$|TOPS' {{attractiveness}} {{was seriously}} eroded {{with the introduction}} of System 7 in 1991. TOPS had initially competed against the dedicated-server AppleShare, but System 7 included a file <b>sharing</b> <b>server</b> built-in, one that proved to be much faster than then-current versions of TOPS. TOPS sales dwindled and Sun spun off the division as Sitka, before closing it entirely in 1993.|$|R
5000|$|... #Subtitle level 3: Exploit {{utilizing}} a <b>shared</b> PHP <b>server</b> (e.g. <b>shared</b> web hosting) ...|$|R
40|$|Abstract. We {{present the}} long term vision and current stage of the ORCAS project which goal is to develop an easily {{extensible}} framework of reusable fine-grained automated reasoning components. It innovates in software engineering by putting forward the first integration of model-driven, component-based, aspect-oriented and formal development techniques. It innovates in automated reasoning by proposing to build the most varied AI applications and inference engines (e. g., for deduction, abduction, inheritance, belief revision, constraint solving, optimization and induction) by assembling components, each one encapsulating a CHR v knowledge base and reusing a CHR v inference engine as a universally <b>shared</b> <b>server</b> component. ...|$|E
40|$|Referring to {{the concept}} of archival bond, we define stories as formed by docu-ments that relate to a target {{activity}} and developed a method called paragraph alignment to find these documents. The method computes archival bond by measuring the cosine similarity between document paragraphs. We tested the method in a chaotic case study collection created in a <b>shared</b> <b>server</b> by different authors. Results demonstrate that this method is more efficient to find stories than calculating the cosine similarity between entire documents. This research helps archivists make sense of collections that are considered inaccessible and whose stories may otherwise be lost. ...|$|E
40|$|This paper proposes the {{modeling}} {{and the performance}} analysis of a high-level control protocol [...] COCOP, which enables cooperative groups of clients to control a <b>shared</b> <b>server</b> delivering time-dependant data services. Several synchronous multimedia systems such as media on-demand, web casting, and networks of real/virtual sensors, can beneficially exploit COCOP to furnish cooperative control sessions. The protocol can be mapped onto a multicast transport support based either on IP-multicast or on an application level multicast infrastructure. An event-driven simulation framework is purposely customized and exploited to analyze the protocol performance and thus the dynamics of a cooperative control session over simple, yet representative topologies...|$|E
50|$|Currently {{the company}} is working on Crytek's {{middleware}} CryEngine 2-based game Blue Mars. Avatar Reality's {{goal is to create}} a next-generation platform for high definition interactive 3D content. Similar to other 3D worlds like EVE Online, the Blue Mars platform will be able to support thousands of simultaneous users per region by using <b>shared</b> <b>servers,</b> capable of handling 10,000 users each.|$|R
5000|$|I Love Music <b>shares</b> <b>server</b> {{space with}} its sister board, I Love Everything, which was {{introduced}} in June 2001. [...] Several other boards contained on the site {{have sprung up in}} the years since including All Noise Dude Summertime Fun Board and Pickle Bar, Cape of Good Hope, I Love Books, I Love Games, I Love NFL and De Subjectivisten.|$|R
40|$|The Bachelor's Thesis is {{concerned}} with Web 2. 0 phenomenon. It defines meaning of this phenomenon and submits its features and characteristics : change in comunication system, freedom of content editing, content created mostly by its users, reputation systems, conversions of desktop applications to web services. It concentrates on technology background of web services, particularly AJAX, Adobe Flex, Silverlight. It focuses on designs, that were starting point for Web 2. 0 and uses them to show principles of the whole concept. Selected designs examples were : community servers MySpace and Facebook, search engine Google with its additional services, video <b>sharing</b> <b>server</b> Youtube, bookmark server del. icio. us, content <b>sharing</b> <b>server</b> digg. com, the free encyclopedia Wikipedia, personalised internet radio and music encyclopedia last. fm. The work continues by describing current situation in the Czech Republic. In the end the paper summarizes and answers the basic questions asked in the introduction and mentions major obstacles of current development together with their possible solutions...|$|R
