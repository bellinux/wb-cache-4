0|10000|Public
3000|$|The value <b>of</b> <b>timer</b> {{affects the}} {{performance}} of CONCOR. If the value <b>of</b> <b>timer</b> is very small, then the entry in the DPVT will become invalid very frequently. As a result, a node (say Node [...]...|$|R
40|$|International audienceProgrammable logic {{controllers}} (PLCs) {{are widely}} used in embedded systems. Timers play {{a pivotal role in}} PLC real-time applications. The formalization <b>of</b> <b>timers</b> is <b>of</b> great importance. The study presents a formalization <b>of</b> PLC <b>timers</b> in the theorem proving system Coq, in which the behaviors <b>of</b> <b>timers</b> are characterized by a set of axioms at an abstract level. The authors discuss how to model timers at a proper and sound abstract level. PLC programs with timers are modeled. As a case study, a quiz machine problem with a timer is investigated. This work demonstrates the complexity <b>of</b> formal <b>timer</b> modelin...|$|R
5000|$|... {{the model}} number <b>of</b> the 555 <b>timer</b> IC, a classic {{integrated}} circuit (chip) implementing a variety <b>of</b> <b>timer</b> and multivibrator applications, and historically {{widely used in}} electronics.|$|R
3000|$|... [...]) {{capable of}} {{delivering}} a message {{is in its}} neighbour. On the other hand, if the value <b>of</b> <b>timer</b> is large, DPVT will continue to hold a valid DPV for a node which is not in range. As a result, the execution efficiency of routing approach will decrease. The effect <b>of</b> <b>timer</b> was studied through simulation also. The results of the same are detailed in Section 6.6.|$|R
40|$|AbstractIn this paper, {{we study}} the {{concurrent}} behaviors <b>of</b> <b>timers</b> with arbitrary delays. Timers are modeled as synchronized products of automata, and we investigate formal languages satisfying {{constraints on the}} delays <b>of</b> each <b>timer.</b> Under very general assumptions, we prove that the concurrent behavior <b>of</b> two <b>timers</b> is rational. We give explicit automata to recognize these languages, {{which can be used}} as models in the specification and verification of timed processes...|$|R
5000|$|This lack <b>of</b> <b>Timer</b> [...] "drive mode" [...] can be {{compensated}} for with a Pentax IR Remote and Remote [...] "drive mode" [...] selection.|$|R
50|$|The conceit <b>of</b> <b>TiMER</b> {{is that a}} wrist implant is {{available}} that counts down {{to the day when}} the user will meet his or her soulmate.|$|R
50|$|To keep roadways, tunnels, {{and bridges}} safe for {{pedestrians}} and drivers, New York City has made efficient use <b>of</b> <b>timers</b> to regulate traffic lighting and help conserve energy.|$|R
5000|$|... a {{parallel}} port for Centronics-type printers or general purpose I/O. This {{was provided by}} a Rockwell 6522 Versatile Interface Adaptor, which was also the source <b>of</b> <b>timer</b> interrupts.|$|R
30|$|Finally, we must define how the {{admission}} control mechanism on each node will behave {{in the event}} <b>of</b> <b>timer</b> expiration {{depending on the type}} <b>of</b> <b>timer.</b> Since per flow timer expiration occurs when {{the admission}} control mechanism cannot confirm the minimum bandwidth required for transmission, all reservations made on behalf of this flow are removed and all per request timers are canceled. On the other hand, the per sub-request timer expiration event occurs when the flow is partially confirmed and the portion of bandwidth required, which has not been confirmed, is released.|$|R
3000|$|... of 10 and 15 ms {{are almost}} similar. Moreover, the impact <b>of</b> <b>timer</b> expiry {{completely}} vanishes when input traffic load is increased beyond 1000, see Figs. 9 and 10.|$|R
50|$|In {{addition}} to the converters, many embedded microprocessors include a variety <b>of</b> <b>timers</b> as well. One {{of the most common}} types <b>of</b> <b>timers</b> is the Programmable Interval Timer (PIT). A PIT may either count down from some value to zero, or up to the capacity of the count register, overflowing to zero. Once it reaches zero, it sends an interrupt to the processor indicating that it has finished counting. This is useful for devices such as thermostats, which periodically test the temperature around them to see if they need to turn the air conditioner on, the heater on, etc.|$|R
3000|$|... {{indicates}} {{the total number}} <b>of</b> <b>timer</b> expiration times for an event record since it has been updated last time. Notice that for an event record the ERS resets the value of corresponding [...]...|$|R
30|$|Timer Triggering: Since D-ForenRIA {{knows the}} {{signature}} <b>of</b> <b>timers,</b> when it detects {{that the next}} expected HTTP request matches the signature of some timeout based function, it asks an SR-Browser to trigger that function.|$|R
50|$|These types <b>of</b> <b>timers</b> are not devices nor {{parts of}} devices; they exist only in lines of code. They {{rely on the}} {{accuracy}} of a clock oscillator usually built into a hardware device that runs the software.|$|R
40|$|Brown, Gouda, and Miller [1] {{claim that}} they have {{redesigned}} the window protocol such that it tolerates both message loss and message disorder, while using only bounded sequence numbers. They suggest to implement the timeout condition of the protocol by means <b>of</b> <b>timers.</b> We analyze the consequences of an implementation with timers and show {{that it is not}} possible to implement the protocol as specified by means <b>of</b> <b>timers.</b> This is due to the fact that in the original protocol it is not observable for the sender whether the timeout condition holds or not. We slightly modify the protocol such that an implementation with timers is possible, and prove that it is correct...|$|R
40|$|Temporal event {{correlation}} {{is essential}} to realizing self-managing distributed systems. Autonomic controllers often require that events be correlated across multiple components using rule patterns with timer-based transitions, e. g., to detect denial of service attacks and to warn of staging problems with business critical applications. This short paper discusses automatic adjustment <b>of</b> <b>timer</b> values for event correlation rules, in particular compensating for the variability of event propagation delays due to factors such as contention for network and server resources. We describe a corresponding Management Station architecture and present experimental studies on a testbed system that suggest that this approach can produce results at least as good as an optimal fixed setting <b>of</b> <b>timer</b> values. 1...|$|R
50|$|Simple {{activation}} of the watchdog and regular resets <b>of</b> the <b>timer</b> do not make optimal use of a watchdog. For best results, the refresh cycle <b>of</b> the <b>timer</b> must be set as short as possible and called from the main function, so a reset can be performed before damage is caused or an error occurred. If a microcontroller {{does not have an}} internal watchdog, a similar functionality can be implemented by the use <b>of</b> a <b>timer</b> interrupt or an external device.|$|R
40|$|International audienceIn {{a typical}} slotted bus-based optical {{metropolitan}} network, {{the position of}} access node on the networkpsilas bus have a large impact on the network performance. We refer to this problem in data transmission as the unfairness property. In fact, the first nodes on the bus have priority over downstream nodes. Another factor which has {{a significant impact on}} the network performance is the choice <b>of</b> <b>Timer</b> value, which is used to create the fixed-size optical packet. An unsuitable choice <b>of</b> <b>Timer</b> values may lead to wasted network bandwidth. Indeed, small Timer values generate optical packets with very low filling ratios; while a very big Timer value leads to excessive packet creation delays (and therefore high access delays) when the arrival rate of electronic client packets becomes low. In this paper, we investigate the impact <b>of</b> <b>Timer</b> values on the network performance by simulating the slotted bus-based network that supports multi-service. In this context, we are interested in two study cases: with and without quality of service (QoS) Upgrade mechanism. Additionally, we will show that the slotted bus-based network with QoS Upgrade can improve the network performance, in terms of mean access delay and loss ratio of electronics packets clients, compared with unslotted bus-based network that supports variable-size optical packet...|$|R
50|$|The {{traditional}} fuze is {{the same}} as a classic armor-piercing bomb: a combination <b>of</b> <b>timer</b> and a sturdy dynamic propeller on the rear of the bomb. The fuze is armed when the bomb is released, and detonates when the propeller stops turning and the timer has expired.|$|R
40|$|R. epeated {{observation}} <b>of</b> TCP retransmission <b>timer</b> problems stimulated {{investigation into}} the roles and limitations <b>of</b> <b>timers.</b> Timers are indispensable tools in building up reliable distributed systems. However, as the experience with the TCP retransmission timer has shown, timers have intrinsic limitations in offering optimal performance. Any timeout based action is a guess based on incomplete information, and as such {{is bound to be}} non-optimal. We conclude that, if we aim at high performance, we should use external events as a first line of defense against failures, and depend on timers only in cases where external notification has failed. 1. Overview In computer commui~icatioi ~ networks a tiinzey is a failure detection mechanism, normally used to decid...|$|R
50|$|The 555 timer IC is an {{integrated}} circuit (chip) {{used in a}} variety <b>of</b> <b>timer,</b> pulse generation, and oscillator applications. The 555 {{can be used to}} provide time delays, as an oscillator, and as a flip-flop element. Derivatives provide two (556) or four (558) timing circuits in one package.|$|R
50|$|An {{electromechanical}} cam timer uses a small synchronous AC motor {{turning a}} cam against a comb of switch contacts. The AC motor is turned at an accurate rate by the alternating current, which power companies carefully regulate. Gears drive a shaft at the desired rate, {{and turn the}} cam. The most common application <b>of</b> this <b>timer</b> now is in washers, driers and dishwashers. This type <b>of</b> <b>timer</b> often has a friction clutch between the gear train and the cam, so that the cam can be turned to reset the time.|$|R
40|$|A recent {{model for}} testing systems with {{multiple}} timers is extended to compute proper input delays and timeout settings, and {{is applied to}} several types <b>of</b> <b>timers</b> required in a testing procedure. In the model, any transition in the specification can be made conditional on a set <b>of</b> running <b>timers.</b> Depending on the path taken to reach an edge, the values <b>of</b> the <b>timer</b> variables may render the traversal of the edge infeasible. The presented modeling technique, combined with the INconsistencies DEtection and ELimination (INDEEL) algorithms, allows the generation of feasible test sequences. The model also o#ers the flexibility to define timer lengths as variables, and have the INDEEL find the appropriate timer ranges. An approach to apply this new methodology to SDL timed extensions (guarding and delaying timers) is presented...|$|R
50|$|Phil of the Futures working {{title was}} The Out <b>of</b> <b>Timers.</b> The title theme song for Phil of the Future {{was written by}} John Adair and Steve Hampton. It was sung by Loren Ellis and The Drew Davis Band, who also sang the theme song of The Suite Life of Zack & Cody.|$|R
30|$|In this section, we {{investigate}} the impact <b>of</b> <b>timer</b> expiry, T_ on mean PRB utilization and E 2 E delay by varying input traffic. However, we only consider low loaded scenarios {{due to the}} fact that the timer expiry has almost no affect on PRB utilization and mean E 2 E delay in high loaded scenarios in the multiplexing process, as discussed earlier in Figs.  10 and 11. In general, the mean value of used PRBs decreases and E 2 E delay increases for larger values <b>of</b> the <b>timer</b> expiry. Additionally, this trade-off is heavily dependent on the arrival rate, as discussed earlier.|$|R
5000|$|Tensou Sentai Goseiger: Matroid Bakutofuji-ER <b>of</b> the <b>Timer</b> (ep. 39 - 40) ...|$|R
30|$|Events include {{hardware}} interrupts such as channel up signals, {{indication of}} reception of a valid preamble or {{end of a}} valid frame, expiration <b>of</b> <b>timers,</b> and signals conveyed from the higher layers such as the enqueuing of a new packet. As {{in the case of}} actions, the list of supported events is a-priori provided by the hardware design.|$|R
50|$|Subsequent police {{investigations}} {{revealed that}} one <b>of</b> the <b>timers</b> <b>of</b> the cooker bomb was timed {{to go off}} exactly at 11:37 am, approximately {{the time when the}} Batla House encounter was reported to have taken place two years before on the same day.|$|R
40|$|Industrial-size specifications/models (whose {{state space}} is often infinite) {{can not be}} model checked in a direct way— a {{verification}} model of a system is model checked instead. Program transformation {{is a way to}} build a finite-state verification model that can be submitted to a model checker. Abstraction is another technique {{that can be used for}} the same purpose. This paper presents a transformation <b>of</b> SDL <b>timers</b> aimed at the reduction of the infinite domain <b>of</b> <b>timer</b> values to a finite one with preserving the behaviour of a system. A timer abstraction is proposed to further reduce the state space. We discuss the ideas behind these transformations and argue their correctness...|$|R
40|$|International audienceProgrammable logic {{controllers}} (PLCs) {{are widely}} used in embedded systems. A timer plays {{a pivotal role in}} PLC real-time applications. The paper presents a formalization of TON-timers of PLC programs in the theorem proving system Coq. The behavior <b>of</b> a <b>timer</b> is characterized by a set of axioms at an abstract level. PLC programs with timers are modeled in Coq. As a case study, the quiz machine problem with timer is investigated. Relevant timing properties of practical interests are proposed and proven in Coq. This work unveils the hardness <b>of</b> <b>timer</b> modeling in embedded systems. It is an attempt of formally proving the correctness of PLC programs with timer control...|$|R
2500|$|The AAMC {{prohibits the}} use <b>of</b> calculators, <b>timers,</b> or other {{electronic}} devices during the ...|$|R
30|$|The Scheduler is {{responsible}} for responding to the stimuli internal and external to the node (overflow <b>of</b> <b>timers</b> and received messages, respectively), and for blocking the process {{in the case of}} the prolonged absence of these stimuli. By identifying the received stimulus, state 4 causes the execution flow to deviate to any of the other states and, therefore, is called the Scheduler.|$|R
50|$|Forensic {{analysis}} {{determined that}} Titane 30 {{had been used}} during both attacks. A piece of spring found in the remains found at the Quévert site was found to originate from the same type <b>of</b> kitchen <b>timer</b> used to offset the defused explosive in Rennes. The use <b>of</b> kitchen <b>timers</b> also confirmed the ARB’s involvement given their systematic use in previous bombings.|$|R
50|$|Throughout {{the latter}} part of the 20th century, a number of inventors {{patented}} various coffeemaker designs using an automated form of the drip brew method. Subsequent designs have featured changes in heating elements, spray head, and brew-basket design, as well as the addition <b>of</b> <b>timers</b> and clocks for automatic-start, water filtration, filter and carafe design, and even built-in coffee grinding mechanisms.|$|R
40|$|Event {{correlation}} {{is essential}} to realizing self-managing distributed systems. For example, distributed systems often require that events be correlated from multiple systems using temporal patterns to detect denial of service attacks and to warn of problems with business critical applications that run on multiple servers. This paper addresses how to specify timer values for temporal patterns so as to manage the trade-off between false alarms and undetected alarms. A central concern is addressing the variability of event propagation delays due to factors such as contention for network and server resources. To this end, we develop an architecture and an adaptive control algorithm that dynamically compensate for variations in propagation delays. Our approach makes Management Stations more autonomic by avoiding the need for manual adjustments <b>of</b> <b>timer</b> values in temporal rules. Further, studies we conducted of a testbed system suggest that our approach produces results that {{are at least as}} good as an optimal fixed setting <b>of</b> <b>timer</b> values. 1...|$|R
