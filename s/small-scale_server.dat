1|4|Public
40|$|Infrastructure as a Service cloud {{providers}} are increasingly relying on scalable and efficient Virtual Machines (VMs) placement {{as the main}} solution for reducing unnecessary costs and wastes of physical resources. However, the continuous growth {{of the size of}} cloud data centers poses scalability challenges to find optimal placement solutions. The use of heuristics and simplified server consolidation models that partially discard information about the VMs behavior represents the typical approach to guarantee scalability, but at the expense of suboptimal placement solutions. A recently proposed alternative approach, namely Class-Based Placement (CBP), divides VMs in classes with similar behavior in terms of resource usage, and addresses scalability by considering a <b>small-scale</b> <b>server</b> consolidation problem that is replicated as a building block for the whole data center. However, the server consolidation model exploited by the CBP technique suffers from two main limitations. First, it considers only one VM resource (CPU) for the consolidation problem. Second, it does not analyze the impact of the number (and size) of building blocks to consider. Many small building blocks may reduce the overall VMs placement solution quality due to fragmentation of the physical server resources over blocks. On the other hand, few large building blocks may become computationally expensive to handle and may be unsolvable due to the problem complexity. This paper extends the CBP server consolidation model to take into account multiple resources. Furthermore, we analyze the impact of block size on the performance of the proposed consolidation model, and we present and compare multiple strategies to estimate the best number of blocks. Our proposal is validated through experimental results based on a real cloud computing data center...|$|E
5000|$|Windows NT 4.0 Server, {{released}} in 1996, {{was designed for}} <b>small-scale</b> business <b>server</b> systems.|$|R
50|$|Dell Precision Workstations are {{computers}} {{intended as}} workstations for CAD / Architecture / CG professionals, or as <b>small-scale</b> business <b>servers.</b>|$|R
50|$|One {{technique}} {{of how this}} parallelism is achieved is through multiprocessing systems, computer systems with multiple CPUs. Once reserved for high-end mainframes and supercomputers, <b>small-scale</b> (2-8) multiprocessors <b>servers</b> have become commonplace for the small business market. For large corporations, large scale (16-256) multiprocessors are common. Even personal computers with multiple CPUs have appeared since the 1990s.|$|R
40|$|Service {{providers}} {{have begun}} to offer multimedia-on-demand services to residential estates by installing isolated, <b>small-scale</b> multimedia <b>servers</b> at individual estates. Such an arrangement allows the service providers to operate without relying on a highspeed, large-capacity metropolitan area network, which is still not available in many countries. Unfortunately, installing isolated servers can incur very high server costs, as each server requires spare bandwidth to cope with fluctuations in user demand. The authors explore the feasibility of linking up several small multimedia servers to a (limited-capacity) network, and allowing servers with idle retrieval bandwidth to help out servers that are temporarily overloaded; {{the goal is to}} minimize the waiting time for service to begin. We identify four characteristics of load sharing in a distributed multimedia system that differentiate it from load balancing in a conventional distributed system. We then introduce a GWQ load sharing algorithm that fits and exploits these characteristics; it puts all servers 2 Ì† 7 pending requests in a global queue, from which a server with idle capacity obtains additional jobs. The performance of the algorithm is captured by an analytical model, which we validate through simulations. Both the analytical and simulation models show that the algorithm vastly reduces wait times at the servers. The analytical model also provides guidelines for capacity planning. Finally, we propose an enhanced GWQ+L algorithm that allows a server to reclaim active local requests that are being serviced remotely. Simulation experiments indicate that the scheduling decisions of GWQ+L are optimal, i. e., it enables the distributed servers to approximate the performance of a large centralized serve...|$|R

