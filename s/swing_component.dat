14|16|Public
5000|$|Embed workbooks in a Java Swing {{application}} {{as ordinary}} <b>Swing</b> <b>component</b> ...|$|E
5000|$|However, at its core, every <b>Swing</b> <b>component</b> {{relies on}} an AWT container, since (Swing's) [...] extends (AWT's) Container. This allows Swing to plug into the host OS's GUI {{management}} framework, including the crucial device/screen mappings and user interactions, such as key presses or mouse movements. Swing simply [...] "transposes" [...] its own (OS-agnostic) semantics over the underlying (OS-specific) components. So, for example, every <b>Swing</b> <b>component</b> paints its rendition on the graphic device {{in response to}} a call to component.paint (...) , which is defined in (AWT) Container. But unlike AWT components, which delegated the painting to their OS-native [...] "heavyweight" [...] widget, Swing components are responsible for their own rendering.|$|E
5000|$|Swing's {{high level}} of {{flexibility}} is reflected in its inherent ability to override the native host operating system (OS)'s GUI controls for displaying itself. Swing [...] "paints" [...] its controls using the Java 2D APIs, rather than calling a native user interface toolkit. Thus, a <b>Swing</b> <b>component</b> {{does not have a}} corresponding native OS GUI component, and is free to render itself in any way that is possible with the underlying graphics GUIs.|$|E
2500|$|Norfolk Southern Railway Bridge {{crossing}} the Ocmulgee River in Lumber City, Georgia ( [...] long; built 1916) (electrical <b>swing</b> <b>components</b> removed) ...|$|R
50|$|But the {{inability}} to more accurately observe these split-second, highly complex correlations and co-ordination; therefore, more often than not, encourages the teaching of specific and isolated <b>swing</b> <b>components</b> only, which tends to disrupt ‘natural’ swing mechanics and timing rather than enhancing these.|$|R
50|$|Whereas swing {{timing is}} {{pertinent}} to the sequence of vital <b>swing</b> <b>components</b> coming into effect for optimum ball contact, Swing rhythm is the tempo of the complete swing, which traditionally includes the backswing, and a vital pause between backswing and final swing towards ball impact.|$|R
50|$|Mathematical {{models can}} easily {{demonstrated}} {{the effect on}} racket or clubhead velocity, for each <b>swing</b> <b>component</b> which is subject to exponential acceleration caused by {{the cumulative effect of}} all prior components in the total acceleration chain. In simple terminology and concept, this complex action and its effect is comparable to cracking a whip. It is therefore self-evident that if any one component is out of ideal swing synchronization, the resultant detrimental impact will be a similarly exponential increase in loss of power and direction at ball impact.|$|E
5000|$|... i-net Clear Reports (formerly {{known as}} i-net Crystal-Clear) is a Java-based {{cross-platform}} reporting application providing a report designer and a server component to create reports in numerous output formats like PDF, HTML, PS, RTF, XLS, TXT, CSV, SVG, XML, {{as well as}} being viewable in a Java applet or <b>Swing</b> <b>component.</b> Application programmers can integrate i-net Clear Reports using the public API which spans over 200 classes. Starting with release 11.0 i-net Clear Reports also supports the [...]NET programming language and offers a public API for further integration in other products.|$|E
5000|$|Typically, <b>Swing</b> <b>component</b> model {{objects are}} {{responsible}} for providing a concise interface defining events fired, and accessible properties for the (conceptual) data model {{for use by the}} associated JComponent. Given that the overall MVC pattern is a loosely coupled collaborative object relationship pattern, the model provides the programmatic means for attaching event listeners to the data model object. Typically, these events are model centric (ex: a [...] "row inserted" [...] event in a table model) and are mapped by the JComponent specialization into a meaningful event for the GUI component.|$|E
40|$|We report X-band VLBI {{observations}} of several 3 CR lobe-dominated quasar nuclei from 1981 to 2010, mostly obtained with the NRAO VLBA. The {{goal is to}} follow flux density outbursts and to fully determine the jet morphology and kinematics on 1 - 100 pc scales. In 3 C 207, the core region has flux outbursts at mean intervals of ~ 7 yr; {{one of these is}} actually a double outburst from a stationary true core and a <b>swinging</b> <b>component</b> ~ 0. 5 mas apart. The position angle (PA) of the <b>swinging</b> <b>component</b> varies by ~ 40 °, while the PA values of the jet components span ~ 25 °. The jet extends to ~ 25 mas. Average superluminal speeds are ~ 10 c. One component shows apparent acceleration from 7 c to 14 c at 2 - 3 mas from the true core, in a jet recollimation zone that redirects the flow toward PA ~ 90 °. Individual jet components expand until reaching the recollimation zone. In 3 C 263 and other objects, some of the same phenomena are seen, including ejection of jet components over a range in PA, superluminal motion, and apparent acceleration, but to a lesser degree. Possible physical interpretations involving beaming, orientation, projection, precession, and magnetic effects are discussed...|$|R
5|$|Early in his career, Peart's {{performance}} {{style was}} {{deeply rooted in}} hard rock. He drew most of his inspiration from drummers such as Keith Moon and John Bonham, players {{who were at the}} forefront of the British hard rock scene. As time passed, he began to emulate jazz and big band musicians Gene Krupa and Buddy Rich. In 1994, Peart became a friend and pupil of jazz instructor Freddie Gruber. It was during this time that Peart decided to revamp his playing style by incorporating jazz and <b>swing</b> <b>components.</b> Gruber was also responsible for introducing him to the products of Drum Workshop, the company whose products Peart currently endorses.|$|R
40|$|Widget {{is kind of}} {{application}} that provides a single service such as a map, news feed, simple clock, and battery-life indicators. It is developed to facilitate user interface (UI) design. A user interface function may be implemented using different widgets developed on different UI platforms. This article presents a comprehensive review on Java Swing as a platform to develop widgets. It is a platform that is generally used in various applications, such as in desktop, web browser, and mobile phone. Furthermore, we also describe UI elements of Java <b>Swing’s</b> <b>components</b> used to establish widgets. At the end, this article discusses comparison between Java Swing and several commonly used UI platforms...|$|R
50|$|A {{software}} application normally consists of multiple threads {{and a single}} GUI data structure. This means GUI is a shared data structure and some synchronization is needed to ensure that only one thread accesses it at a time. Though AWT and Swing expose the (thread unsafe) methods to create and access the GUI components and these methods are visible to all application threads, likewise in other GUI frameworks, only a single, Event Dispatching thread {{has the right to}} execute these methods.Since programmers often miss this requirement, third-party Look and Feels, like Substance go as far as to refuse to instantiate any <b>Swing</b> <b>component</b> when not running within the Event Dispatch Thread, to prevent such a coding mistake. Access to the GUI is serialized and other threads may submit some code to be executed in the EDT through a EDT message queue.|$|E
5000|$|Java: Java {{provides}} automatic serialization {{which requires}} that the object be marked by implementing the [...] interface. Implementing the interface marks the class as [...] "okay to serialize", and Java then handles serialization internally. There are no serialization methods defined on the [...] interface, but a serializable class can optionally define methods with certain special names and signatures that if defined, will be called {{as part of the}} serialization/deserialization process. The language also allows the developer to override the serialization process more thoroughly by implementing another interface, the [...] interface, which includes two special methods that are used to save and restore the object's state. There are three primary reasons why objects are not serializable by default and must implement the [...] interface to access Java's serialization mechanism. Firstly, not all objects capture useful semantics in a serialized state. For example, a [...] object is tied to the state of the current JVM. There is no context in which a deserialized [...] object would maintain useful semantics. Secondly, the serialized state of an object forms part of its classes' compatibility contract. Maintaining compatibility between versions of serializable classes requires additional effort and consideration. Therefore, making a class serializable needs to be a deliberate design decision and not a default condition. Lastly, serialization allows access to non-transient private members of a class that are not otherwise accessible. Classes containing sensitive information (for example, a password) should not be serializable nor externalizable. The standard encoding method uses a recursive graph-based translation of the object's class descriptor and serializable fields into a byte stream. Primitives as well as non-transient, non-static referenced objects are encoded into the stream. Each object that is referenced by the serialized object via a field that is not marked as [...] must also be serialized; and if any object in the complete graph of non-transient object references is not serializable, then serialization will fail. The developer can influence this behavior by marking objects as transient, or by redefining the serialization for an object so that some portion of the reference graph is truncated and not serialized. Java does not use constructor to serialize objects. It is possible to serialize Java objects through JDBC and store them into a database. While Swing components do implement the Serializable interface, they are not guaranteed to be portable between different versions of the Java Virtual Machine. As such, a <b>Swing</b> <b>component,</b> or any component which inherits it, may be serialized to a byte stream, but it is not guaranteed that this will be re-constitutable on another machine.|$|E
40|$|This bachelor's {{thesis is}} focused on {{creating}} Java <b>Swing</b> <b>component,</b> that can display content of HTML document based on cascade style sheets (CSS). Purpose for creating this component is enabling developers to create graphic user interface with help of CSS in Java without knowledge of Java Swing. For parsing HTML document and CSS is used rendering   engine CSSBox. This engine enables obtaining all the right informations about HTML document and  its styles for displaying this document. Java Swing API was used for implementing this component, for example HTML element is implementented   based on JPanel and all editable elements of form are implemented by fitting <b>Swing</b> <b>component.</b> With component Java Swing driven by CSS is possible to change her size, access to form's editable elements, set up links and their look, etc...|$|E
50|$|Early in his career, Peart's {{performance}} {{style was}} {{deeply rooted in}} hard rock. He drew most of his inspiration from drummers such as Keith Moon and John Bonham, players {{who were at the}} forefront of the British hard rock scene. As time passed, he began to emulate jazz and big band musicians Gene Krupa and Buddy Rich. In 1994, Peart became a friend and pupil of jazz instructor Freddie Gruber. It was during this time that Peart decided to revamp his playing style by incorporating jazz and <b>swing</b> <b>components.</b> Gruber was also responsible for introducing him to the products of Drum Workshop, the company whose products Peart currently endorses.|$|R
5000|$|... "Faded Love" [...] is a Western swing song {{written by}} Bob Wills, his father John Wills, and his brother, Billy Jack Wills. The tune is {{considered}} to be an exemplar of the Western <b>swing</b> fiddle <b>component</b> of American fiddle.The melody came from an 1856 ballad, Darling Nelly Gray, which John Wills knew as a fiddle tune. [...] "Faded Love" [...] is a sentimental song about lost love. The name comes from the refrain that follows each verse: ...|$|R
40|$|In {{the last}} three decades, gross {{national}} saving in the UK has fluctuated widely. <b>Swings</b> in <b>components</b> of national savings have of course been even more marked, since there are sound economic reasons to expect changes in one component (e. g., private saving) {{to be at least}} partially offset by changes in another (e. g., public saving). Moreover, {{since the start of the}} 1980 s, national savings behaviour is characterised not merely by fluctuations but by trend decline, the recent upturn notwithstanding. In this paper we explore changes in UK saving and its components, examine theoretical and empirical explanations, discuss implications for policy design, and draw lessons for Latin America. ...|$|R
40|$|This paper {{describes}} how MathEX addresses {{a number of}} well-known issues with direct-manipulation structural user interfaces for mathematics. The solutions described here allow MathEX to support a diverse collection of XML vocabularies for mathematics, including Content and Presentation MathML, XHTML+MathML compound documents, and OpenMath semantic markup. This paper illustrates how MathEX allows an application author to tailor the user experience within a specific XML vocabulary, within a specific document, or within a specific collection of elements within a document, {{without the need for}} a modal interface. MathEX allows an author to customize the notational presentation, keyboard editing, structural palettes, and other properties of each operator in a document, whether or not the operator is known to the editor in advance. MathEX is implemented in Java, and may be used as a stand-alone application, as a web page applet, or as a <b>Swing</b> <b>component</b> within another application. ...|$|E
40|$|Window Toolkit (AWT) is the {{standard}} Application Program Interface (API) for providing Graphical User Interfaces (GUIs) for Java applications. The Delegation Event Model [SM 97] was introduced in AWT by Java Development Kit (JDK) 1. 1. to catch and process GUI events. It replaces the event processing model in version 1. 0 of the AWT {{that is based on}} inheritance. The delegation event model provides a more robust framework to support more complex Java applications than the inheritance-based event model and supports filtering of events. A number of other Java components also make use of the delegation event model. It has been adopted by the JavaBeans component architecture for general event processing and has been extended by the <b>Swing</b> <b>component</b> set, a new GUI toolkit. Furthermore, it is supported by the EmbeddedJava and PersonalJava application environments. The former is used for building embedded applications with dedicated functionality and strictly limited memory. The latter is used for [...] ...|$|E
40|$|The {{development}} of computerized technology is growing {{by leaps and}} bounds. Almost all of the fields can be applied in a technology system. Computer-based information system puts the speed, ease, and accuracy of information so All of the school want to implement computer-based information system to improve quality and service. Data processing information systems of student at SMAN 1 Cibarusah still conventional by manual recording. It makes the data run in less rapid, precise and inaccurate, error function, and {{take a long time}} in student researching. With the data processing student information system (SIPDS) application, the data management system SMAN 1 Cibarusah will be computerized student. The data in SMA N 1 Cibarusah can be obtained quickly, precisely and accurately. The clerk can process hundreds of student data that students in a quick way. The purpose of this research is to build the software applications using NetBeans IDE as a Graphical User Interface (GUI) with a <b>swing</b> <b>component</b> for interactive user interface, SQL Server 2008 for database management and with I-Report for making the report...|$|E
40|$|Abstract. We {{establish}} {{several new}} stylised facts concerning the intra-day seasonalities of stock dynamics. Beyond the well known U-shaped {{pattern of the}} volatility, {{we find that the}} average correlation between stocks increases throughout the day, leading to a smaller relative dispersion between stocks. Somewhat paradoxically, the kurtosis (a measure of volatility surprises) reaches a minimum at the open of the market, when the volatility is at its peak. We confirm that the dispersion kurtosis is a markedly decreasing function of the index return. This means that during large market <b>swings,</b> the idiosyncratic <b>component</b> of the stock dynamics becomes sub-dominant. In a nutshell, early hours of trading are dominated by idiosyncratic or sector specific effects with little surprises, whereas the influence of the market factor increases throughout the day, and surprises become more frequent. 1...|$|R
40|$|For {{a mission}} to the Moon which lasts {{more than a few}} days, thermal control is a {{challenging}} problem because of the Moon's wide temperature swings and long day and night periods. During the lunar day it is difficult to reject heat temperatures low enough to be comfortable for either humans or electronic components, while excessive heat loss can damage unprotected equipment at night. Fluid systems can readily be designed to operate at either the hot or cold temperature extreme but it is more difficult to accomodate both extermes within the same system. Special consideration should be given to sensitive systems, such as optics and humans, and systems that generate large amounts of waste heat, such as lunar bases or manufacturing facilities. Passive thermal control systems such as covers, shades and optical coatings can be used to mitigate the temperature <b>swings</b> experienced by <b>components.</b> For more precise thermal control active systems such as heaters or heat pumps are required although they require more power than passive systems...|$|R
40|$|A {{performance}} monitoring study {{of an electric}} rope shovel operating in an open pit coal mine was conducted. As the mining industry moves toward higher productivity, profitability and predictability, {{the need for more}} reliable, productive and efficient mining shovels increases. Consequently, it is critical to study the productivity of these machines and to understand the effect of different operational parameters on that. In this paper a clustering analysis is performed to classify shovel digging effort and behaviour based on digging energy, dig time and payload per pass. Then the influence of the operator on the digging efficiency and productivity of the machine is analyzed with a focus on operator technique during digging. A statistical analysis is conducted on different cycle time <b>components</b> (dig time, <b>swing</b> time, return time) for different operators. In addition to time <b>components,</b> <b>swing</b> and return angles as well as loading rate and mucking rate are observed and analyzed. The results of this study help to understand the effect of different operators on the digging productivity of the shovel and then to set the best operator practice...|$|R
40|$|Modern GUI {{programs}} {{offer the}} possibility to easily access status informations and functionalities by means of various menus, toolbars and information panels. However, as a program becomes more complex, {{or in the case}} where users have {{the possibility to}} configure and extend these components, they often tend to get overfilled. This leads to scrambled or even truncated components. This article introduces a new container component called ScrollableBar, which {{can be used as a}} wrapper for any <b>Swing</b> <b>component.</b> As long as there is enough place to layout the contained component, ScrollableBar is completely transparent. As soon as the available space gets too small however, ScrollableBar will fade in two small arrow buttons on the left and the right side (or on the top and the bottom side if in vertical mode), which can be used to scroll the underlying component, thus avoiding the above mentioned problems. ScrollableBar is a lightweight container derived from JComponent which uses the standard Swing classes JView-port and JButton to achieve its functionality. It fills a gap in the set of the standard Swing components and offers the possibility to create more robust and intuitive user interfaces. ...|$|E
40|$|This toolkit {{provides}} a common interface for displaying {{graphical user interface}} (GUI) components in stereo using either specialized stereo display hardware (e. g., liquid crystal shutter or polarized glasses) or anaglyph display (red/blue glasses) on standard workstation displays. An application using this toolkit will work without modification in either environment, allowing stereo software to reach a wider audience without sacrificing high-quality display on dedicated hardware. The toolkit is written in Java for use with the Swing GUI Toolkit and has cross-platform compatibility. It hooks into the graphics system, allowing any standard <b>Swing</b> <b>component</b> to be displayed in stereo. It uses the OpenGL graphics library to control the stereo hardware and to perform the rendering. It also supports anaglyph and special stereo hardware using the same API (application-program interface), and {{has the ability to}} simulate color stereo in anaglyph mode by combining the red band of the left image with the green/blue bands of the right image. This is a low-level toolkit that accomplishes simply the display of components (including the JadeDisplay image display component). It does not include higher-level functions such as disparity adjustment, 3 D cursor, or overlays all of which can be built using this toolkit...|$|E
40|$|This paper {{presents}} {{an analysis of}} a golf swing to detect improper motion in the early phase of the swing. Led {{by the desire to}} achieve a consistent shot outcome, a particular golfer would (in multiple trials) prefer to perform completely identical golf swings. In reality, some deviations from the desired motion are always present due to the comprehensive nature of the swing motion. Swing motion deviations that are not detrimental to performance are acceptable. This analysis is conducted using a golfer’s leading arm kinematic data, which are obtained from a golfer wearing a motion sensor that is comprised of gyroscopes and accelerometers. Applying the principal component analysis (PCA) to the reference observations of properly performed <b>swings,</b> the PCA <b>components</b> of acceptable <b>swing</b> motion deviations are established. Using these components, the motion deviations in the observations of other swings are examined. Any unacceptable deviations that are detected indicate an improper swing motion. Arbitrarily long observations of an individual player’s swing sequences can be included in the analysis. The results obtained for the considered example show an improper swing motion in early phase of the swing, i. e., {{the first part of the}} backswing. An early detection method for improper swing motions that is conducted on an individual basis provides assistance for performance improvement...|$|R
40|$|A Doctoral Thesis. Submitted in partial {{fulfilment}} of {{the requirements}} for the award of Doctor of Philosophy at Loughborough University. Granular materials utilised {{in the construction of}} highway foundation layers are currently specified on the basis of index tests. As a consequence, the material acceptability criteria, although developed from many years' experience, do not directly measure a fundamental performance parameter. Once the granular materials are placed and compacted they are rarely checked and as such no assurance can be given to their likely engineering performance in situ. An important performance parameter, the stiffness modulus, describes the ability of the constructed layer(s) to spread the construction (and in-service) vehicle contact pressures and reduce the stresses, and hence strains, transmitted to the lower weaker layers. A significant improvement upon current practice would be to include the specification of 'end product' testing and to include the direct measurement in situ of stiffness modulus to assure performance. A prerequisite of this is suitable site equipment to measure such a parameter, and a sound basis upon which to interpret and utilise such data. Tests do exist that measure stiffness modulus in situ, although in general they measure a 'composite' stiffness, i. e. a single transducer infers the surface strain, under controlled loading, for the construction as a whole and the region affecting the measurement is not precisely known. Currently then, no routine portable device exists for the direct stiffness modulus assessment of the near surface or last layer applied. This would not only provide for consistency of construction, but avoid burying poor or weaker layers. This thesis describes the evaluation of a portable impact test device and research into the behaviour of granular soils subject to rapid transient loads. The requirements for the assessment of pavement granular foundation layers are reviewed, followed by a critical appraisal of current devices that measure the stiffness modulus of material in situ. The prototype impact device, known as ODIN, comprising an accelerometer instrumented swinging hammer, is described. A selection of field data, demonstrating the primary soil influencing factors and correlations with other devices, is presented. Controlled laboratory testing is also described, comprising impact testing with free-falling masses in addition to the ODIN device and for tests on foundations instrumented with pressure cells, that further explains the dynamic behaviour of the material under test. Problems with both hardware and software, associated with high-frequency impact testing are highlighted. In particular, the restraint of the impact mass by the <b>swinging</b> arm mechanical <b>component</b> is observed to lead to a proportion of the impact energy being channelled back into the apparatus during a test. The channelled energy is shown to produce resonance of the apparatus, which in turn leads to problems in interpretation of the accelerometer signal. Numerical methods are then explored and it is demonstrated that the predictions approximated well to the free-falling weights experimental data. Discussion of the research findings concludes with a model for soil behaviour under impact testing, requirements for an improved impact device and the further research work required to realise the potential of such equipment...|$|R

