325|99|Public
25|$|Latches and {{flip-flops}} {{are used}} as data storage elements. Such data storage {{can be used for}} storage of state, and such a circuit is described as <b>sequential</b> <b>logic.</b> When used in a finite-state machine, the output and next state depend not only on its current input, but also on its current state (and hence, previous inputs). It can also be used for counting of pulses, and for synchronizing variably-timed input signals to some reference timing signal.|$|E
25|$|A latch or a {{flip-flop}} is {{a circuit}} that has two stable states {{and can be}} used to store state information. They typically constructed using feedback that crosses over between two arms of the circuit, to provide the circuit with a state. The circuit can be made to change state by signals applied to one or more control inputs and will have one or two outputs. It is the basic storage element in <b>sequential</b> <b>logic.</b> Latches and flip-flops are fundamental building blocks of digital electronics systems used in computers, communications, and many other types of systems.|$|E
50|$|Digital logic {{circuits}} {{can be divided}} into combinational logic, in which the output signals depend only on the current input signals, and <b>sequential</b> <b>logic,</b> in which the output depends both on current input and on past inputs. In other words, <b>sequential</b> <b>logic</b> is combinational logic with memory. Virtually all practical digital devices require <b>sequential</b> <b>logic.</b> <b>Sequential</b> <b>logic</b> {{can be divided into}} two types, synchronous logic and asynchronous logic.|$|E
40|$|Stop Clock Design-for-Testability (DFT) and Scan Dump DFT are {{integrated}} and implemented to trap the digital logic inside combinational and <b>sequential</b> <b>logics</b> for fault isolation (FI) purpose. Both DFTs enable functional test result {{to be dumped}} out structurally during functional test at manufacturing. Validation is performed on RTL simulation using test pattern and it is shown that the real silicon data matched the simulation results. Hence a new FI method has been established on the fly, capable in manufacturing...|$|R
40|$|We {{propose a}} {{combination}} of Bochvar’s strict three-valued <b>logic,</b> McCarthy’s <b>sequential</b> three-valued <b>logic,</b> and process algebra via the conditional guard construct. This combination entails {{the introduction of a}} new constant meaningless in process algebra. We present an operational semantics in SOS-style, and a completeness result for ACP with conditional guard construct and the proposed logic...|$|R
40|$|Abstract — Although many {{researchers}} are investigating techniques to synthesize reversible combinational logic, {{there is little}} work {{in the area of}} <b>sequential</b> reversible <b>logic.</b> We present an analysis of a basic memory element, the RS-latch, and a number of possible implementations. We then go on to introduce four reversible flip-flop designs based on the reversible RS-latch implementation. I...|$|R
50|$|<b>Sequential</b> <b>logic</b> {{is used to}} {{construct}} finite state machines, a basic building block in all digital circuitry. Virtually all circuits in practical digital devices are a mixture of combinational and <b>sequential</b> <b>logic.</b>|$|E
5000|$|In {{digital circuit}} theory, <b>sequential</b> <b>logic</b> {{is a type}} of logic circuit whose output depends not only on the present value of its input signals but on the {{sequence}} of past inputs, the input history. [...] This is in contrast to combinational logic, whose output is a function of only the present input. That is, <b>sequential</b> <b>logic</b> has state (memory) while combinational logic does not.|$|E
50|$|In {{digital circuit}} theory, combinational logic (sometimes also {{referred}} to as time-independent logic) is a type of digital logic which is implemented by Boolean circuits, where the output is a pure function of the present input only. This is in contrast to <b>sequential</b> <b>logic,</b> in which the output depends not only on the present input but also {{on the history of the}} input. In other words, <b>sequential</b> <b>logic</b> has memory while combinational logic does not.|$|E
50|$|A {{microprocessor}} is {{a computer}} processor which incorporates the functions of a computer's central processing unit (CPU) on a single integrated circuit (IC), or at most a few integrated circuits. The microprocessor is a multipurpose, clock driven, register based, digital-integrated circuit which accepts binary data as input, processes it according to instructions stored in its memory, and provides results as output. Microprocessors contain both combinational <b>logic</b> and <b>sequential</b> digital <b>logic.</b> Microprocessors operate on numbers and symbols represented in the binary numeral system.|$|R
40|$|This paper {{presents}} a labelled tableau approach for deciding interrogative-epistemic logics (IEL). Tableau calculi for these logics have been derived using a recently introduced tableau synthesis method. We also consider {{an extension of}} the framework for a setting with questioning modalities over sequences of formulae called <b>sequential</b> questioning <b>logic</b> (SQL). We have implemented the calculi using two approaches. The first implementation has been obtained with the tableau prover generation software MetTeL 2, while the other implementation is a prover implemented in Haskell. ...|$|R
50|$|Function Block Diagram {{is one of}} five {{languages}} for logic {{or control}} configuration supported by standard IEC 61131-3 for a control system such as a Programmable Logic Controller (PLC) or a Distributed Control System (DCS). The other supported languages are ladder <b>logic,</b> <b>sequential</b> function chart, structured text, and instruction list.|$|R
50|$|Kernel Language 0 (KL0) is a <b>sequential</b> <b>logic</b> {{programming}} language based on Prolog, {{used in the}} ICOT Fifth generation computer project.|$|E
50|$|An {{international}} patent {{was granted}} for an automated <b>sequential</b> <b>logic</b> mechanism in 2004, which would {{form the basis}} of the Moodagent playlisting technology developed in the following years.|$|E
5000|$|Digital logic {{circuits}} {{can be divided}} into two types: combinational logic, whose output signals are dependent only on its present input signals, and <b>sequential</b> <b>logic,</b> whose outputs are a function of both the current inputs and the past history of inputs. [...] In <b>sequential</b> <b>logic,</b> information from past inputs is stored in electronic memory elements, such as flip-flops and latches. The stored contents of these memory elements, at a given point in time, is collectively referred to as the circuits state and contains all the information about the past to which the circuit has access.|$|E
40|$|Inversion {{recombination}} elements present unique {{opportunities for}} computing and information encoding in biological systems. They provide distinct binary {{states that are}} encoded into the DNA sequence itself, allowing us to overcome limitations posed by other biological memory or logic gate systems. Further, it is in theory possible to create complex <b>sequential</b> <b>logics</b> by careful positioning of recombinase recognition sites in the sequence. In this work, we describe the design and synthesis of an inversion switch using the fim and hin inversion recombination systems to create a heritable sequential memory switch. We have integrated the two inversion systems in an overlapping manner, creating a switch that can have multiple states. The switch is capable of transitioning {{from state to state}} in a manner analogous to a finite state machine, while encoding the state information into DNA. This switch does not require protein expression to maintain its state, and "remembers" its state even upon cell death. We were able to demonstrate transition into three out of the five possible states showing the feasibility of such a switch. We demonstrate that a heritable memory system that encodes its state into DNA is possible, and that inversion recombination system could be a starting point for more complex memory circuits. Although the circuit did not fully behave as expected, we showed that a multi-state, temporal memory is achievable...|$|R
40|$|Background: Inversion {{recombination}} elements present unique {{opportunities for}} computing and information encoding in biological systems. They provide distinct binary {{states that are}} encoded into the DNA sequence itself, allowing us to overcome limitations posed by other biological memory or logic gate systems. Further, it is in theory possible to create complex <b>sequential</b> <b>logics</b> by careful positioning of recombinase recognition sites in the sequence. Methodology/Principal Findings: In this work, we describe the design and synthesis of an inversion switch using the fim and hin inversion recombination systems to create a heritable sequential memory switch. We have integrated the two inversion systems in an overlapping manner, creating a switch that can have multiple states. The switch is capable of transitioning {{from state to state}} in a manner analogous to a finite state machine, while encoding the state information into DNA. This switch does not require protein expression to maintain its state, and "remembers'' its state even upon cell death. We were able to demonstrate transition into three out of the five possible states showing the feasibility of such a switch. Conclusions/Significance: We demonstrate that a heritable memory system that encodes its state into DNA is possible, and that inversion recombination system could be a starting point for more complex memory circuits. Although the circuit did not fully behave as expected, we showed that a multi-state, temporal memory is achievable. open 545...|$|R
40|$|Photochromes are chromophores {{that are}} {{reversibly}} isomerized between two metastable forms using light, or light and heat. When photochromes are covalently linked to other chromophores, they {{can act as}} molecular photonic analogues of electronic transistors. As bistable switches, they {{can be incorporated into}} the design of molecules capable of binary arithmetic and both combinatorial and <b>sequential</b> digital <b>logic</b> operations. Small ensembles of such molecules can perform analogue signal modulation similar to that carried out by transistor amplifiers. Examples of molecules that perform multiple logic functions, act as control elements for fluorescent reporters, and mimic natural photoregulatory functions are presented...|$|R
5000|$|A <b>Sequential</b> <b>Logic</b> for Information Structuring in [...] "Mathematics of a Hierarchy of Brouwerian Operations" [...] with A. F. Parker-Rhodes (Fort Belvoir Defense Technical Information Center 01 MAY 1965).|$|E
5000|$|Bachelor of Science in Computer Engineering (BS CoE) — five-year program {{leading to}} the {{understanding}} of computer engineering, including digital designs, operating systems, <b>sequential</b> <b>logic</b> synthesis, CPU design, computer networks and computer systems engineering.|$|E
50|$|Whilst the DCS was {{tailored}} {{to meet the}} needs of large industrial continuous processes, in industries where combinatoric and <b>sequential</b> <b>logic</b> was the primary requirement, the PLC (programmable logic controller) evolved out of a need to replace racks of relays and timers used for event-driven control. The old controls were difficult to re-configure and fault-find, and PLC control enabled networking of signals to a central control area with electronic displays. PLC were first developed for the automotive industry on vehicle production lines, where <b>sequential</b> <b>logic</b> was becoming very complex. It was soon adopted in a large number of other event-driven applications as varied as printing presses and water treatment plants.|$|E
40|$|ABSTRACT: Reversible logic {{has come}} to the {{forefront}} of theoretical and applied research today. Although many researchers are investigating techniques to synthesize reversible combinational logic, there is little work in the area of <b>sequential</b> reversible <b>logic.</b> Latches and flip-flops are the most significant memory elements for the forthcoming sequential memory elements. In this paper, we proposed two new reversible logic gates MG- 1 and MG- 2. We then proposed new design techniques for latches and flip-flops {{with the help of the}} new proposed gates. The proposed designs are better than the existing ones in terms of number of gates, garbage outputs and delay...|$|R
5000|$|The {{motivation}} for representing <b>sequential</b> control <b>logic</b> in a ladder diagram was to allow factory engineers and technicians to develop software without additional training {{to learn a}} language such as FORTRAN or other general purpose computer language. Development, and maintenance, was simplified because of the resemblance to familiar relay hardware systems. [...] Implementations of ladder logic have characteristics, such as sequential execution and support for control flow features, that make the analogy to hardware somewhat inaccurate. This argument has become less relevant given that most ladder logic programmers have a software background in more conventional programming languages.|$|R
40|$|Abstract. Memory {{virtualization}} {{by means}} of demand paging is a crucial com-ponent of every modern operating system. The formal verification is challenging since reasoning about the page fault handler has to cover two concurrent com-putational sources: the processor and the hard disk. We accurately model the in-terleaved executions of devices and the page fault handler, which is written in a high-level programming language with inline assembler portions. We describe how to combine results from <b>sequential</b> Hoare <b>logic</b> style reasoning about the page fault handler on the low-level concurrent machine model. To {{the best of our}} knowledge this is the first example of pervasive formal verification of software communicating with devices. ...|$|R
50|$|Digital <b>sequential</b> <b>logic</b> {{circuits}} {{are divided}} into synchronous and asynchronous types. In synchronous sequential circuits, {{the state of the}} device changes only at discrete times in response to a clock signal. In asynchronous circuits the state of the device can change at any time in response to changing inputs.|$|E
50|$|Dynamic {{logic is}} {{distinguished}} from so-called static logic in that dynamic logic uses a clock signal in its implementation of combinational logic circuits. The usual {{use of a}} clock signal is to synchronize transitions in <b>sequential</b> <b>logic</b> circuits. For most implementations of combinational logic, a clock signal is not even needed.|$|E
50|$|In general, {{external}} circuitry controls an ALU {{by applying}} signals to its inputs. Typically, the external circuitry employs <b>sequential</b> <b>logic</b> {{to control the}} ALU operation, which is paced by a clock signal of a sufficiently low frequency to ensure enough time for the ALU outputs to settle under worst-case conditions.|$|E
40|$|By {{using the}} memristor’s memory to both store {{a bit and}} perform an {{operation}} with a second input bit, simple Boolean logic gates have been built with a single memristor. The operation makes use of the interaction of current spikes (occasionally called current transients) found in both memristors and other devices. The <b>sequential</b> time-based <b>logic</b> method-ology allows two logical input bits to be used on a one-port by sending the bits separated in time. The resulting logic gate is faster than one relying on memristor’s state switching, low power and requires only one memristor. We experimentally demonstrate working OR and XOR gates made with a single flexible Titanium dioxide sol-gel memristor. ...|$|R
40|$|The Java {{programming}} language has a low-level concurrency model which {{is hard to}} use and does not blend well with inheritance. JAC {{is an extension of}} Java that introduces a higher level of concurrency, hiding threads and separating thread synchronization from application logic in a declarative fashion. The emphasis is on limiting the differences between sequential and concurrent code, thus furthering code reuse, and on avoiding inheritance anomalies. This is achieved by taking a middle road between concurrent code {{on the one hand and}} complete separation of <b>sequential</b> application <b>logic</b> from concurrency mechanisms on the other. An extensive comparison with related approaches is given for motivating our design decisions...|$|R
40|$|Needed {{narrowing}} {{is currently}} the best complete strategy for executing inductively <b>sequential</b> functional <b>logic</b> programs. Its optimality properties {{and the fact that}} inductively sequential programs are a subclass of strongly sequential programs support the claim that needed narrowing must be considered the functional logic couterpart of Huet and Lévy's strongly needed reduction. In this paper, we show how a pre-eminent property of reduction in (a distinguished subclass of) strongly sequential programs, namely the incrementality of the evaluation, can be inherited by needed narrowing. We give an incremental definition of needed narrowing and show that the original optimality properties are kept. Moreover, we experimentally demonstrate that the incremental refinement can lead to substantial improvements in the overall evaluation process...|$|R
50|$|In {{the context}} of logic design, the term dynamic logic is more {{commonly}} used as compared to clocked logic, as it makes clear the distinction between this type of design and static logic. To additionally confuse the matter, clocked logic is sometimes used as a synonym for <b>sequential</b> <b>logic.</b> This usage is nonstandard and should be avoided.|$|E
50|$|In {{addition}} to combinational logic, AIGs {{have also been}} applied to <b>sequential</b> <b>logic</b> and sequential transformations. Specifically, the method of structural hashing was extended to work for AIGs with memory elements (such as D-type flip-flops with an initial state,which, in general, can be unknown) resulting in a data structure that is specifically tailored for applications related to retiming.|$|E
5000|$|A {{familiar}} {{example of}} a device with <b>sequential</b> <b>logic</b> is a television set with [...] "channel up" [...] and [...] "channel down" [...] buttons. [...] Pressing the [...] "up" [...] button gives the television an input telling it to switch to the next channel above the one it is currently receiving. If the television is on channel 5, pressing [...] "up" [...] switches it to receive channel 6. However, if the television is on channel 8, pressing [...] "up" [...] switches it to channel [...] "9". In order for the channel selection to operate correctly, the television {{must be aware of}} which channel it is currently receiving, which was determined by past channel selections. [...] The television stores the current channel as part of its state. When a [...] "channel up" [...] or [...] "channel down" [...] input is given to it, the <b>sequential</b> <b>logic</b> of the channel selection circuitry calculates the new channel from the input and the current channel.|$|E
40|$|In {{the past}} few years {{it has been shown that}} {{universal}} quantum computation can be obtained by projective measurements alone, with no need for unitary gates. This suggests that the underlying logic of quantum computing may be an algebra of sequences of quantum measurements rather than an algebra of products of unitary operators. Such a <b>Sequential</b> Quantum <b>Logic</b> (SQL) was developed in the late 70 's and has more recently been applied to the consistent histories framework of quantum mechanics as a possible route to the theory of quantum gravity. In this letter, I give a method for deciding the truth of a proposition in SQL with nonzero probability of success on a quantum computer. Comment: 4 page...|$|R
40|$|Reversible logic {{has come}} to the {{forefront}} of theoretical and applied research today. Although many researchers are investigating techniques to synthesize reversible combinational logic, there is little work in the area of <b>sequential</b> reversible <b>logic.</b> Latches and flip-flops are the most significant memory elements for the forthcoming sequential memory elements. In this paper, we proposed two new reversible logic gates MG- 1 and MG- 2. We then proposed new design techniques for latches and flip-flops {{with the help of the}} new proposed gates. The proposed designs are better than the existing ones in terms of number of gates, garbage outputs and delay. Comment: IOSR Journal of Computer Engineering (IOSR-JCE) 5. 6 (2012...|$|R
40|$|Separation {{logic is}} an {{extension}} of Hoare’s logic which supports a local way of reasoning about programs that mutate memory. We present a study of the semantic structures lying behind the logic. The core idea is of a local action, a state transformer that mutates the state in a local way. We formulate local actions for a class of models called separation algebras, abstracting from the RAM and other specific concrete models used in work on separation logic. Local actions provide a semantics for a generalized form of (<b>sequential)</b> separation <b>logic.</b> We also show that our conditions on local actions allow a general soundness proof for a separation logic for concurrency, interpreted over arbitrary separation algebras. ...|$|R
