10|47|Public
50|$|Platypux {{has been}} {{developed}} using the source code from the Linux From <b>Scratch</b> <b>project,</b> but also counts on source code for BLFS (Beyond Linux From Scratch) and ALFS (Automated Linux From Scratch) Linux distros. The Linux kernel alongside the several preinstalled packages comprehend the Linux distribution.|$|E
5000|$|Dirty Ru: Dirty Ru has written, produced, recorded, and {{scratched}} on a solo project with a release date unknown. He {{has also been}} working on an all <b>scratch</b> <b>project</b> for years and years, but according to Ru [...] "I'm a perfectionist and at this rate it may never be finished".|$|E
50|$|Despite Platypux being a Slackware derivative, it {{was built}} using the source code {{provided}} by the Linux From <b>Scratch</b> <b>project</b> (LFS) that enables the developers to learn the internal workings of a Linux-based system, {{in order to build}} a custom Linux distro, so it can naturally fit on its intended audience and purposes.|$|E
50|$|Launched in 2007, Scratch {{is a free}} online, block-based {{programming}} language and community developed for children 8-16, though is used by people of all ages. Millions of people are creating <b>Scratch</b> <b>projects</b> {{in a wide variety}} of settings, including homes, schools, museums, libraries, and community centers.|$|R
40|$|Scratch is a {{programming}} environment and an online community where {{young people can}} create, share, learn, and communicate. In collaboration with the Scratch Team at MIT, we created a longitudinal dataset of public activity in the Scratch online community during its first five years (2007 - 2012). The dataset comprises 32 tables with information on more than 1 million Scratch users, nearly 2 million <b>Scratch</b> <b>projects,</b> more than 10 million comments, more than 30 million visits to <b>Scratch</b> <b>projects,</b> and more. To help researchers understand this dataset, and to establish {{the validity of the}} data, we also include the source code of every version of the software that operated the website, as well as the software used to generate this dataset. We believe this is the largest and most comprehensive downloadable dataset of youth programming artifacts and communication...|$|R
50|$|Gerard Beekmans is the {{initiator}} and {{organizer of}} the Linux From <b>Scratch</b> (LFS) <b>project.</b>|$|R
30|$|The {{ill-defined}} problem {{proposed to}} the students {{is rooted in the}} narrative frame of a children’ book introducing basic concepts of programming and robotics, Vibot the robot (Romero & Loufane, 2016). The story introduces a robot, which has to be programmed for play. The Scratch Cat is the mascot of the visual programming tool Scratch and the default sprite appearing in each new project. Vibot is a fictional robot character, which waits for instructions to act in its environment. Based on these two characters, the story 2 code are short text-based stories, which engage learners in analyzing, modeling, and creating a <b>Scratch</b> <b>project</b> representing the story. In our study, participants were given a story 2 code and were asked to represent it in Scratch. The situation invited participants to create a <b>Scratch</b> <b>project</b> featuring a dialog between two characters: Scratch and Vibot. The students were given a text-based script for creating the dialog including 9 quotations in which Scratch and Vibot the robot introduce themselves. After the dialog between the two characters, Scratch asks Vibot to draw a blue line. The scenario of this story 2 code could be solved with a certain degree of diversity in the Scratch visual programming software. Participants were asked to remix a <b>Scratch</b> <b>project</b> containing the two characters’ sprites. Remixing is a feature of Scratch that allows users to duplicate existing projects and edit them. Participants were required to share their projects in order to develop a double assessment: the code-analyzer Dr. Scratch and the # 5 c 21 assessment by an external evaluator.|$|E
30|$|Computational {{thinking}} was assessed from a <b>Scratch</b> <b>project</b> developed by each undergraduate student using two different tools: Dr. Scratch and the # 5 c 21 CT competency model. Firstly, all the Scratch projects were {{passed through the}} Dr. Scratch analytical tool. Then, they were evaluated by an evaluator following the # 5 c 21 CT competency model. Dr. Scratch is an automated tool and has been selected in order to highlight the need of a competency-based approach {{in the assessment of}} CT.|$|E
30|$|Even {{considering}} {{the simplicity of}} the task demanded when solving the story 2 code, each <b>Scratch</b> <b>project</b> submitted by the students was different. Each of the 120 projects created by the undergraduate students was original. Despite {{the simplicity of the}} task demanded (to create a <b>Scratch</b> <b>project</b> featuring a dialog between two characters), none of the projects was identical to another. For instance, the project differences might come from the choice of blocks, the order in which they are placed, the duration of timers, the type of events’ handlers and their operationalization, or the use of optional features such as backdrops switches. However, results from an automated analytical tool like Dr. Scratch do not reflect that wide creative diversity. The model we proposed is based on both computer science and problem-solving as defined by PISA 2015. It is an attempt to define criteria that may be suitable to evaluate ill-defined tasks involving CT. Results from Dr. Scratch and from the # 5 c 21 CT competency model are not to be compared on any basis as they do not evaluate the same components. Dr. Scratch evaluates the algorithmic complexity of a <b>Scratch</b> <b>project</b> based on a unique model of CT assessment which is generic and does not consider the program in relation to the situation problem. In that, it is not intended for use when the aim is to evaluate CT as a creative problem-solving competency. However, the use of Dr. Scratch is a useful tool for allowing the learners to reflect on the algorithmic implementation and could provide useful tips for improving the quality of the program. Dr. Scratch is able to identify missing names of instances, repetitions, and some coding practices that could be improved. Also, the automatic analysis allows a generalized use without requiring a human activity of evaluation. The # 5 C 21 CT model is based on humans with a certain knowledge of CT to carry on an assessment which is focused not only on the algorithmic properties of the program, but considers also the creative process by which the learner has developed a valuable, original and parsimonious solution to a specific situation.|$|E
5000|$|... 03. Woo-Hah!! Got You All In Check (The DJ <b>Scratch</b> Albany <b>Projects</b> Remix) (featuring Rampage) ...|$|R
40|$|AbstractThis study {{presents}} {{a set of}} categories of learning activities which could be performed by the students using {{the tools of the}} wellknown educational software Scratch (www. scratch. mit. edu) that is dedicated for the learning of programming by novices. Specifically, eleven categories of learning activities that could be performed within Scratch were formed, namely: (a) Free creative activities, (b) Solving a specific problem, © Multiple solution tasks, (d) Experimentation within working <b>Scratch</b> <b>projects,</b> (e) Modification of working <b>Scratch</b> <b>projects,</b> (f) Working on a complete Scratch output and a correct but incomplete part of its code, (g) Working on a complete Scratch output and a mixed form of its code, (h) Working with a complete Scratch output and an incorrect part of its code, (i) Working with the complete code of a Scratch program and predicting its output, (j) Black-box activities, and (k) Collaborative learning activities. Computing teachers can use these categories of activities in their attempts to design appropriate every day classroom settings for the learning of programming by novices within Scratch...|$|R
50|$|Of {{the seven}} {{remaining}} artists covered on Scratch My Back, four (Radiohead, David Bowie, Neil Young, Ray Davies) ultimately declined {{to participate in}} the I'll <b>Scratch</b> Yours <b>project.</b>|$|R
40|$|This thesis explores how we {{can design}} online {{learning}} communities to better support connections {{to the people and}} resources beginners need when learning to program. I describe and analyze the design and implementation of the Scripts Workshop, a learning environment that supports members of the Scratch online community who are stuck on a programming problem in a <b>Scratch</b> <b>project.</b> The Scripts Workshop considers the People, Activities and Spaces needed to support these users in getting un-stuck. I conclude by describing a set of design principles for building learning webs within online communities, derived from the Scripts Workshop experiment. by Champika Fernando. Thesis: S. M., Massachusetts Institute of Technology, School of Architecture and Planning, Program in Media Arts and Sciences, 2014. Cataloged from PDF version of thesis. Includes bibliographical references (pages 71 - 72) ...|$|E
40|$|This thesis {{introduces}} NetScratch, a {{programming environment}} that enables children to make dynamic digital creations that interact across networks. The work is developed {{as an extension}} to Scratch, a multi-media programming environment designed for children to create interactive animations, art, games, and other dynamic creations. Particularly, NetScratch adds websensors, a tool to bring information from the web into a <b>Scratch</b> <b>project,</b> and shareable, a way to share information among projects. These features provide children with the tools {{to create their own}} web mashups, experiment with real-time changing data, and connect projects to each other. Using NetScratch, children can create personally meaningful networked projects, while learning important computational and design concepts. And, in designing these creations, children can think about how they want to interact across networks and how their creations affect their friends and communities. by Tamara I. Stern. Thesis (M. Eng.) [...] Massachusetts Institute of Technology, Dept. of Electrical Engineering and Computer Science, 2007. Includes bibliographical references (leaves 63 - 64) ...|$|E
40|$|Schools, homes, and Computer Clubhouses {{have become}} places in which {{children}} express themselves using crafts and computers. This chapter explores how Clubhouse members bring craft materials and computers together in new ways—by designing physical computer interfaces called Hook-ups. For example, a Clubhouse member constructed a physical flying saucer capable of controlling an interactive <b>Scratch</b> <b>project</b> displayed on a computer screen. This chapter begins with {{a brief description of}} the flying saucer example to, help explain how Hook-ups work. The motivation for the Hook-ups research project was to promote engagement and learning through digital actions with physical objects that can provide a natural foray into scientific concepts, design, and invention. Case studies highlight the Hook-up creations of three Clubhouse members and show how they each followed their own interests through the design of digital and physical realms. The chapter ends with a discussion of the ways in which Hook-ups unlock paths for learning across boundaries in Clubhouses and beyond...|$|E
50|$|Nucleosys's first <b>project</b> <b>Scratches</b> was {{released}} in North America on March 8, 2006.|$|R
40|$|Abstract: The present work focuses the {{interest}} of study in a naturally emerged and intense online community, this of ScratchR “programmers by choice ” community, that actually practice collaborative learning in an authentic way. Our interest is not to support collaborative learning process, but to foster collaboration opportunities. We propose a personalized recommendation system based on a “collaborative filtering ” technique aiming at inciting collaboration and increasing the frequency of <b>Scratch</b> <b>projects</b> remixing, in order to foster collaborative learning. In this paper the proposed collaboration fostering mechanism is outlined {{with the assistance of}} a test data set. The significance of the proposal is discussed while the future work is described...|$|R
40|$|This paper {{describes}} Scratch, a visual, block-based {{programming language}} designed to facilitate media manipulation for novice programmers. We {{report on the}} Scratch programming experiences of urban youth ages 8 - 18 at a Computer Clubhouse—an after school center—over an 18 -month period. Our analyses of 536 <b>Scratch</b> <b>projects</b> collected during this time documents the learning of key programming concepts {{even in the absence}} of instructional interventions or experienced mentors. We discuss the motivations of urban youth who choose to program in Scratch rather than using one of the many other software packages available to them and the implications for introducing programming at after school settings in underserved communities...|$|R
40|$|In {{this work}} {{proposed}} here is {{framed in the}} project of research V 3 (Video, Videoconference, and Visualization) of the Foundation i 2 CAT, that has for final goal to design and development of a platform of video, videoconference and independent visualization of resolution in high and super though inside new generation IP networks. i 2 CAT Foundation uses free software for achieving its goals. UltraGrid for the transmission of HD video is used and SAGE is used for distributed visualization among multiple monitors. The equipment used for management (capturing, sending, visualization, etc) of the high definition stream of work environment {{it has to be}} optimized so that all the disposable resources can be used, in order to improve the quality and stability of the platform. We are speaking about the treatment of datum flows of more of 1 Gbps with raw formats, so that the optimization of the use of the disposable resources of a system is given back a need. In this project it is evaluated the requirements for the high definition streams without compressing and a study of the current platform is carried out, in order to extract the functional requirements that an optimum system has to have to work in the best conditions. From this extracted information, a series of systems tests are carried out in order to improve the performance, from level of network until level of application. Different distributions of the Linux operating system have been proved in order to evaluate their performance. These are Debian 4 and openSUSE 10. 3. The creation of a system from sources of software has also been proved in order to optimize its code in the compilation. It has been carried out with the help of Linux From <b>Scratch</b> <b>project.</b> It has also been tried to use systems Real Time (RT) with the distributions used. It offers more stability in the stream frame rate. Once operating systems has been test, it has proved different compilers in order to evaluate their efficiency. The GCC and the Intel C++ Compilers have proved, this second with more satisfactory results. Finally a Live CD has been carried out in order to include all the possible improvements in a system of easy distribution...|$|E
5000|$|<b>Scratch</b> <b>projects</b> are {{not seen}} as [...] "black boxes", but as objects for {{remixing}} to make new projects. Projects can be uploaded directly from the development environment to the Scratch website and {{any member of the}} community can download their full source code to study or to remix into new projects. Members can also create project studios, comment, tag, favorite and [...] "love" [...] others' projects, follow other members to see their projects and activity, and share ideas. Projects range from games to animations to practical tools. Chat rooms are not allowed. All projects on the website are shared under a Creative Commons attribution and share-alike license and can be played in a web browser using the Flash Player.|$|R
50|$|In 2008, the <b>Scratch</b> Input <b>project</b> {{demonstrated}} a mobile device input system utilizing scratch input, simultaneously popularizing the term. This system captured audio transmitted through a surface {{on which a}} mobile phone was placed, enabling the entire surface {{to be used as}} an input device.|$|R
40|$|Abstract: In this paper, we use {{evidence}} from a remixing community to evaluate {{two pieces of}} common wisdom about collaboration. First, we test the theory that jointly produced works tend to be of higher quality than individually authored products. Second, we test the theory that collaboration improves the quality of functional works like code, but that it works less well for artistic works like images and sounds. We use data from Scratch, a large online community where {{hundreds of thousands of}} young users share and remix millions of animations and inter-active games. Using peer-ratings as a measure of quality, we estimate a series of fitted regression models and find that collaborative <b>Scratch</b> <b>projects</b> tend to receive ratings that are lower than individually authored works. We also find that code-intensive collaborations are rated higher than media-intensive efforts. We conclude by discussing the limitations and implications of these findings...|$|R
40|$|Scratch is a networked, media-rich {{programming}} environment {{designed to enhance}} the development of technological fluency at after-school centers in economically-disadvantaged communities. Just as the LEGO MindStorms robotics kit added programmability to an activity deeply rooted in youth culture (building with LEGO bricks), Scratch adds programmability to the media-rich and network-based activities that are most popular among youth at afterschool computer centers. Taking advantage of the extraordinary processing power of current computers, Scratch supports new programming paradigms and activities that were previously infeasible, making it better positioned to succeed than previous attempts to introduce programming to youth. Our working hypothesis is that, as kids work on personally meaningful <b>Scratch</b> <b>projects</b> such as animated stories, games, and interactive art, they will develop technological fluency, mathematical and problem solving skills, and a justifiable selfconfidence that will serve them well in the wider spheres of their lives. 1...|$|R
50|$|J Dilla {{produced}} two remixes in 1996. Rashad Smith produced the World Wide Remix, Origin Unknown a remix in 1996 and DJ <b>Scratch</b> the Albany <b>Projects</b> Remix in 1997.|$|R
30|$|Creative and {{problem-solving}} competencies {{are part of}} the so-called twenty-first century skills. The creative use of digital technologies to solve problems is also related to computational thinking as a set of cognitive and metacognitive strategies in which the learner is engaged in an active design and creation process and mobilized computational concepts and methods. At different educational levels, computational thinking can be developed and assessed through solving ill-defined problems. This paper introduces computational thinking in the context of Higher Education creative programming activities. In this study, we engage undergraduate students in a creative programming activity using Scratch. Then, we analyze the computational thinking scores of an automatic analysis tool and the human assessment of the creative programming projects. Results suggested the need for a human assessment of creative programming while pointing the limits of an automated analytical tool, which does not reflect the creative diversity of the <b>Scratch</b> <b>projects</b> and overrates algorithmic complexity.|$|R
40|$|In this paper, we use {{evidence}} from a remixing community to evaluate {{two pieces of}} common wisdom about collaboration. First, we test the theory that jointly produced works tend to be of higher quality than individually authored products. Second, we test the theory that collaboration improves the quality of functional works like code, but that it works less well for artistic works like images and sounds. We use data from Scratch, a large online community where {{hundreds of thousands of}} young users share and remix millions of animations and interactive games. Using peer-ratings as a measure of quality, we estimate a series of fitted regression models and find that collaborative <b>Scratch</b> <b>projects</b> tend to receive ratings that are lower than individually authored works. We also find that code-intensive collaborations are rated higher than media-intensive efforts. We conclude by discussing the limitations and implications of these findings. Comment: Best paper award at CSCW, In Proceedings of the 2013 conference on Computer supported cooperative work (CSCW 2013). AC...|$|R
50|$|By using modernized, tried-and-tested {{equipment}} {{rather than}} developing technology from <b>scratch,</b> the <b>project</b> is reportedly saving around $2 billion in development costs. The Russian Proton rocket, launched from the Baikonur Cosmodrome in Kazakhstan, {{is intended to}} be used to launch one of the spacecraft into space, where it will remain. Astronauts will use the Excalibur Almaz RRVs to get to and from the spacecraft.|$|R
50|$|He was {{responsible}} for pioneering from <b>scratch</b> two <b>projects</b> which were to become national government policy. The first was to introduce Professional Fostering for delinquent and troubled teenagers. Hitherto pre-puberty children in care were mainly fostered while teenagers were placed in institutions. Stacey was convinced that {{putting a lot of}} unloved, insecure, often delinquent and troubled teenagers together exacerbated their problems while the institutionsto which they were sent became springboards for borstal and prison.|$|R
50|$|In 2008, The Dark Knight Coaster {{opened in}} Six Flags Great Adventure and Six Flags Great America. Based on The Dark Knight film, they are Wild Mouse roller coasters, indoors, heavily themed, and give riders {{a feeling that}} they are being stalked by the Joker. Six Flags New England was {{originally}} going to receive this roller coaster; however, due to problems with building permits, the park <b>scratched</b> the <b>project</b> and then sent the coaster to Six Flags México.|$|R
5000|$|Open Blocks is {{distributed}} by the Massachusetts Institute of Technology's Scheller Teacher Education Program (STEP) and is derived from master's thesis research by Ricarose Roque. Professor Eric Klopfer and Daniel Wendel of the Scheller Program supported the distribution of Open Blocks under an MIT License. Open Blocks visual programming {{is closely related to}} StarLogo TNG, a project of STEP, and <b>Scratch,</b> a <b>project</b> of the MIT Media Lab's Lifelong Kindergarten Group. App Inventor 2 replaced Open Blocks with Blockly, a blocks editor that runs within the browser.|$|R
40|$|Abstract: We {{report on}} the {{programming}} learning experiences of urban youth ages 8 - 18 at a Computer Clubhouse located in South Central Los Angeles. Our analyses of the 536 <b>Scratch</b> <b>projects,</b> collected during a two-year period, documents the learning of key programming concepts {{in the absence of}} instructional interventions or experienced mentors. We discuss the motivations of urban youth who choose to program in Scratch and the implications for introducing programming at after school settings in underserved communities. Numerous approaches to broadening participation in computing have been discussed in K- 12 and college education, such as mentoring, revised curricula, tool development outreach programs, and programming courses for non-majors (Margolis & Fisher, 2003). A surprisingly neglected area of research is the learning of programming in community technology centers. In these venues, the learning of programming is more casual and takes place at the discretion of the learner rather than part of a formal curriculum. Such out-of-school activities also present opportunities for youth to succeed who may not flourish in traditional school environments. As a case in point, we focus on the use of Scratch (see Figure 1 or www. scratch. mit. edu), a block-based programming language designed to facilitate media manipulation for novice programmers (Resnick, Kafai, & Maeda, 2003), at a Computer Clubhouse—an urban community technology center (Resnick, Rusk, & Cooke, 1998). Scratch is not the firs...|$|R
50|$|Eumeria {{began as}} a solo project by Bobby Williamson (Outworld and Thought Chamber), who had planned to hire various singers and musicians to create an album. After Williamson heard the initial demo tracks laid down by Jonny Tatum (Timefall) and Reece Fullwood however, he {{realized}} that something more important {{was about to be}} born. Williamson, along with Tatum and Fullwood, agreed to <b>scratch</b> the <b>project</b> idea and move forward as a fully operational band with dedicated members. Shawn Kascak, former Outworld bandmate of Williamson's, was selected to play bass guitar, while Adam Sagan, formerly of Into Eternity, was picked to be the drummer.|$|R
40|$|Teaching {{computational}} thinking {{has been a}} focus of recent efforts to broaden the reach of computer science (CS) education for today’s students {{who live and work}} {{in a world that is}} heavily influenced by computing principles. Computational thinking (CT) essentially means thinking like a computer scientist by using principles and concepts learned in CS as part of our daily lives. Not only is CT essential for the development of computer applications, but it can also be used to support problem solving across all disciplines. Computational thinking involves solving problems by drawing from skills fundamental to CS such as decomposition, pattern recognition, abstraction, and algorithm design. The present study examined how Dr. Scratch, a CT assessment tool, functions as an assessment for {{computational thinking}}. This study compared strengths and weaknesses of the CT skills of 360 seventh- and eighth-grade students who were engaged in a Scratch programming environment through the use of Dr. Scratch. The data were collected from a publicly available dataset available on the Scratch website. The Mann-Whitney U analysis revealed that there were specific similarities and differences between the seventh- and eighth-grade CT skills. The findings also highlight affordances and constraints of Dr. Scratch as a CT tool and address the challenges of analyzing <b>Scratch</b> <b>projects</b> from young <b>Scratch</b> learners. Recommendations are offered to researchers and educators about how they might use Scratch data to help improve students’ CT skills...|$|R
50|$|Sound {{designer}} Danijel Djuric {{spent the}} early part of the work trying to find the right sounds. Some, such as animal sounds like cows' and whales', were bought. All sound effects were created and designed from <b>scratch</b> for the <b>project,</b> instead of borrowing from a sound library. Signature sounds were used, such as the sound of a lightsaber, R2-D2 devices and lasers.|$|R
5000|$|In modern filmmaking, {{the entire}} {{cast and crew}} for each film is {{assembled}} from <b>scratch</b> for each <b>project,</b> {{and each of them}} is laid off and sent home as soon as they complete their assigned tasks. [...] Almost all participants in the industry are freelancers, who move easily from one project to the next and don't have much loyalty to any particular studio, as long as they get paid.|$|R
5000|$|In a nine-month {{project as}} part of his MA course, Thwaites {{attempted}} to build a toaster from <b>scratch.</b> The <b>project</b> was inspired by a quote from Douglas Adams' 1992 novel Mostly Harmless: [...] "Left to his own devices he couldn't build a toaster. he could just about make a sandwich, and that was it." [...] A toaster has about 400 components: he simplified the materials list to copper, steel, plastic, mica and nickel and attempted to mine, refine, and otherwise process all the raw materials needed. He published The Toaster Project: Or a Heroic Attempt to Build a Simple Electric Appliance from Scratch (Princeton Architectural Press, 2011: [...] ), and gave a TED talk [...] "How I Built a Toaster - From Scratch".|$|R
