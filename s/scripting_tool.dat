39|246|Public
50|$|Automator — A <b>scripting</b> <b>tool</b> to link {{applications}} {{together to}} form complex automated workflows (written in AppleScript, Cocoa, or both). Automator comes with a complete library of actions for several applications {{that can be used}} together to make a Workflow.|$|E
50|$|Stencyl also {{supports}} user-created extensions to add functions to the software. For example, an extension could add new blocks for Design Mode use, {{such as a}} third-party API. Another example is an extensive dialog <b>scripting</b> <b>tool</b> to easily add dialog and tweak its settings for a game.|$|E
50|$|The {{language}} platform {{provides a}} self-hosted IDE named DrRacket, a continuation-based web server, a graphical user interface, and other tools. Racket {{is also a}} viable <b>scripting</b> <b>tool</b> {{and can be used}} for scripting the Unix shell. It can parse command line arguments, execute external tools and includes libraries like all common scripting languages.|$|E
50|$|Early in {{the history}} of the AppleScript {{scripting}} language, Mark Alldritt produced a freeware Scripting Addition called <b>Script</b> <b>Tools.</b> This was later repackaged as a commercial product, LNS Scripting Additions. Owing to changes in the Macintosh operating system, <b>Script</b> <b>Tools</b> has been discontinued and is no longer available.|$|R
5000|$|Cross-platform <b>scripting</b> <b>tools</b> {{including}} Perl, Python, Ruby, Rexx, Node.js and PHP {{are available}} for Windows.|$|R
50|$|The <b>script</b> <b>tool</b> mixes up {{algorithmics}} and geometry. Such <b>scripting</b> <b>tools</b> exist also in DrGeo, Kig and Cinderella (software). To run a script, one clicks {{over the}} icon representing a traffic light. A script can {{be attached to}} one or several points, so that any movement {{of one of these}} points runs the script. This allows some kind of inverse kinematics much like with GeoLicia.|$|R
50|$|Windows 98 also {{integrates}} shell enhancements, {{themes and}} other features from Microsoft Plus! for Windows 95 such as DriveSpace 3, Compression Agent, Dial-Up Networking Server, Dial-Up <b>Scripting</b> <b>Tool</b> and Task Scheduler. 3D Pinball is included on the CD-ROM but not installed by default. Windows 98 had its own separately purchasable Plus! pack called Plus! 98.|$|E
50|$|Marionette is an {{open source}} {{graphical}} <b>scripting</b> <b>tool</b> (or visual programming environment) for the architecture, engineering, construction, landscape, and entertainment design industries that {{is built into the}} Mac and Windows versions of Vectorworks software. The tool was first made available in the Vectorworks 2016 line of software products. Marionette enables designers to create custom application algorithms that build interactive parametric objects and streamline complex workflows, as well as build automated 2D drawing, 3D modeling, and BIM workflows within Vectorworks software.|$|E
50|$|This was {{the first}} version of Plus! and had an initial cost of US$ 49.99. It {{included}} Space Cadet Pinball, the Internet Jumpstart Kit (which was the introduction of Internet Explorer 1.0), DriveSpace 3 and Compression Agent disk compression utilities, the initial release of theme support along with a set of 12 themes, dial-up networking server, dial-up <b>scripting</b> <b>tool,</b> and the graphical improvements such as anti-aliased screen fonts, full-window drag, the ability to stretch or shrink the wallpaper to fit the screen and highcolor icons.|$|E
5|$|A perl {{executable}} {{is included}} in several Windows Resource kits in the directory with other <b>scripting</b> <b>tools.</b>|$|R
50|$|Gooden’s {{research}} {{formulated in}} his design studio teaching {{and through the}} Global Africa Lab (GAL) at Columbia University, focuses {{on the development of}} <b>scripting</b> <b>tools</b> and parametric software. Developed along with Adjunct Assistant Professor Carson Smuts, the parametric software enables users to data mine and source data from social media, census, and demographic Application Programming Interface (APIs): Google Maps, Twitter, Flickr, Statistics South Africa, The Brazilian Institute of Geography and Statistics, and NYC Open Data. The <b>scripting</b> <b>tools</b> allow users to create their own data sets using smart phone GPS and data gathering apps and to spatialize the data using Rhino® and Grasshopper®.|$|R
50|$|One of {{the most}} {{distinctive}} features of trueSpace is its interface, using mainly 3D widgets for most common editing operations. trueSpace can also be scripted, using Python for creating custom <b>scripts,</b> <b>tools</b> and plugins. trueSpace7 introduces the use of VBScript and JScript as <b>scripting</b> <b>tools</b> for developing plugins and interactive scenes. trueSpace is also known for its icon heavy interface which was drastically overhauled for version 7 onwards. While staff at Caligari had originally made them 'inhouse' during the creation process of earlier releases, trueSpace 7 had {{a new set of}} icons made by Paul Woodward, a freelance designer and illustrator.|$|R
5000|$|The {{rapid growth}} of the Internet in the mid-1990s created {{opportunities}} for new languages. Perl, originally a Unix <b>scripting</b> <b>tool</b> first released in 1987, became common in dynamic websites. Java came {{to be used for}} server-side programming, and bytecode virtual machines became popular again in commercial settings with their promise of [...] "Write once, run anywhere" [...] (UCSD Pascal had been popular for a time in the early 1980s). These developments were not fundamentally novel, rather they were refinements of many existing languages and paradigms (although their syntax was often based on the C family of programming languages).|$|E
5000|$|From 2007 first sketch IE receive {{inspiration}} from gamecreators Dark Basic programming la.gauge and {{was born of}} the idea of creating a game map by gizmed tool, among [...] "catching" [...] positions of 3d models only by text editing with compiling scenes without properly game editor. Next in 2008 to 2009 was developed game editor and engine written on C#, that contains basic toolset for creating scenes, model viewers, animation builder, material editor and even primitive visual <b>scripting</b> <b>tool</b> (Law Maker), that goes IE from 1 to 1.6 versions, that receive {{inspiration from}} Axis 3d Engine community. One of the first IE projects was a historical atlas with 3d previews and excursions. This gave a basis for naming engine in name Roman Imperia as [...] "Imperial Engine". In last time «kohedlo studio» (old name of «wow-bomb game studios)» run first low costs licensing: non commercial, and some commercial licenses. Many new IE versions (1-1.6) was rewritted from null. From 2010 was started developing version 2 IE, written on pure c++, with cross-platform targeting. In latter (about 2011) IE 2 code was saled to Ukrainian gamedevelopers, and next IE architecture travel to the Bitsquid game engine, and after buying last by the Authodesk that make Stingray Game Engine(August 2015), Imperial 2 architecture(like [...] "flow" [...] visual scripting) was as basic for Authodesk. This version of IE was inspired by epical Unreal 3.0.|$|E
40|$|This {{document}} describes all of {{the commands}} {{that are available to}} use with the WebLogic <b>Scripting</b> <b>Tool</b> (WLST). This document includes WLST commands for WebLogic Server, as well as custom WLST commands {{that can be used to}} manage installed Oracle Fusion Middleware components. Oracle Fusion Middleware WebLogic <b>Scripting</b> <b>Tool</b> Command Reference, 11 g Release 1 (10. 3. 4...|$|E
5000|$|Family Historian {{users can}} also {{optionally}} install free plugins (access to the Family Historian plugin store is {{integrated into the}} program). <b>Scripting</b> <b>tools</b> are included for automation of repetitive tasks, and much more.|$|R
50|$|The Bengali Wikipedia (বাংলা উইকিপিডিয়া, Bānglā u'ikipiḍiẏā) is the Bengali {{language}} version of Wikipedia, {{run by the}} Wikimedia Foundation. It also has a phonetic Latin alphabet to Bengali <b>script</b> <b>tool</b> so Latin alphabet keyboards {{can be used to}} type Bengali without downloading any software.|$|R
50|$|<b>Scripting</b> <b>tools</b> {{are often}} created or {{maintained}} by sound programmers {{for use by}} sound designers. These tools allow designers to associate sounds with characters, actions, objects and events while also assigning music or atmospheric sounds for game environments (levels or areas) and setting environmental variables such as reverberation.|$|R
40|$|Scripting is a {{programming}} {{technique in}} which applications are constructed by composing specially designed, pre-packaged software components using a restricted set of scripting operators. Scripting simplifies programming by cutting {{down the number}} of the syntactic and semantic features found in a complete programming language, yet is inherently open-ended in that software components can be provided by a separate target language. We explore scripting models in which the basic components are written in an object-oriented target language. We introduce a visual <b>scripting</b> <b>tool</b> as a script development environment. Visual scripts present components and links graphically, and a visual <b>scripting</b> <b>tool</b> supports the construction of scripts through the interactive editing of scripts ' graphical counterparts. 1 Introduction: Wha...|$|E
40|$|In this paper, {{we discuss}} {{scripting}} tools that aim at facilitating {{the design of}} web-based interactions with animated characters capable of affective communication. Specifically, two systems are developed. The SCREAM system is a <b>scripting</b> <b>tool</b> that enables authors to create emotionally and socially appropriate responses of animated characters...|$|E
40|$|We {{argue that}} {{object-oriented}} programming {{is only half}} of the story. Flexible, configurable applications can be viewed as collections of reusable objects conforming to standard interfaces together with scripts that bind these objects together to perform certain tasks. Scripting encourages a component-oriented approach to application development in which frameworks of reusable components (objects and scripts) are carefully engineered in an evolutionary software life-cycle, with the ultimate goal of supporting application construction largely from these interchangeable, prefabricated components. The activity of constructing the running application is supported by a visual <b>scripting</b> <b>tool</b> that replaces the textual paradigm of programming with a visual paradigm of direct manipulation and editing of both application and user interface components. We present scripting by means of some simple examples, and we describe a prototype of a visual <b>scripting</b> <b>tool,</b> called Vista. We conclude with some [...] ...|$|E
5000|$|RIAs and Scripting - Rich Internet Applications, <b>scripting</b> and <b>tools</b> ...|$|R
50|$|Trading systems {{evolved to}} allow for live {{streaming}} prices and near instant execution of orders as well as using the internet as the underlying network meaning that location became much less relevant. Some electronic trading platforms have built in <b>scripting</b> <b>tools</b> and even APIs allowing traders to develop automatic or algorithmic trading systems and robots.|$|R
50|$|Based on the RCS Reference Model Architecture the NIST has {{developed}} a Real-time Control System Software Library. This is an archive of free C++, Java and Ada code, <b>scripts,</b> <b>tools,</b> makefiles, and documentation developed to aid programmers of software {{to be used in}} real-time control systems, especially those using the Reference Model Architecture for Intelligent Systems Design.|$|R
40|$|Testing today’s {{increasingly}} complex network protocol implementations {{can be a}} painstaking process. To helpmeetthischallenge,wedevelopedpacketdrill,a portable, open-source <b>scripting</b> <b>tool</b> that enables testing the correctness and performance of entire TCP/UDP/IP network stack implementations, from the system call layer to the hardware network interface, for both IPv 4 and IPv 6. We describe the design {{and implementation of the}} tool, and our experiences using it to execute 657 testcases. Thetoolwasinstrumentalinourdevelopment ofthreenewfeaturesforLinuxTCP—EarlyRetransmit, Fast Open,andLossProbes—andallowedustofindand fix 10 bugsinLinux. Ourteamusespacketdrillinall phasesofthedevelopmentprocessforthekernelusedin oneoftheworld’slargestLinuxinstallations. ...|$|E
40|$|Scripting is an {{approach}} for constructing open applications from pre-packaged software components. A scripting model characterizes and standardizes the interconnection interfaces of software components appropriate t o an application domain. We present a scripting {{model for the}} domain of pub-lic administration applications, and we provide a scenario of scripting applications in this domain. This scripting model is being incorporated into a pro-totype visual <b>scripting</b> <b>tool</b> which provides a graphical editing facility fo r interactively scripting applications...|$|E
40|$|This {{document}} {{describes the}} WebLogic <b>Scripting</b> <b>Tool</b> (WLST). It explains how {{you use the}} WLST command-line scripting interface to configure, manage, and persist changes to WebLogic Server instances and WebLogic domains, and monitor and manage server run-time events. Oracle Fusion Middleware Oracle WebLogic <b>Scripting</b> <b>Tool,</b> 11 g Release 1 (10. 3. 4) E 13715 - 03 Copyright © 2007, 2011, Oracle and/or its affiliates. All rights reserved. This software and related documentation are provided under a license agreement containing restrictions on use and disclosure and are protected by intellectual property laws. Except as expressly permitted in your license agreement or allowed by law, you may not use, copy, reproduce, translate, broadcast, modify, license, transmit, distribute, exhibit, perform, publish, or display any part, in any form, or by any means. Reverse engineering, disassembly, or decompilation of this software, unless required by law for interoperability, is prohibited. The information contained herein is subject to change without notice and is not warranted to be error-free. If you find any errors, please report them to us in writing. If this software or related documentation is delivered to the U. S. Government or anyone licensing it {{on behalf of the}} U. S. Government, the following notice is applicable...|$|E
5000|$|Players may add {{interactivity}} to dreams chiefly {{through a}} custom scripting language known as DragonSpeak, or [...] "DS". DragonSpeak commands may {{be triggered by}} in-game actions or by custom buttons displayed over the game interface. Other custom <b>scripting</b> <b>tools</b> include PhoenixSpeak, {{which is used to}} store information to a permanent database, and an animation scripting language called KitterSpeak.|$|R
40|$|Acoustic {{performance}} is an inevitable part of architectural design. Our sonic experience is modified by the geometry and material choices of the designer. Acoustic performance {{must be understood}} both {{on the level of}} material performance and also {{at the level of the}} entire composition. With new parametric and <b>scripting</b> <b>tools</b> performance driven design is possible. Parametric design and <b>scripting</b> <b>tools</b> can be used to explore not only singular objectives, but gradient conditions. Acoustic {{performance is}} often thought of in terms of singular performance criteria. This research suggested acoustic design can be understood in terms of gradients and multiple performance parameters. Simulation and modelling techniques for computational acoustic prediction now allow architects to more fully engage with the phenomenon of sound and digital models can be studied to produce data, visualizations, animations, and auralizations of acoustic performance. SmartGeometry has promoted design methods and educational potentials of a performance-driven approach to architectural design through parametric modelling and scripting. The SmartGeometry workshops have provided links between engineering and architecture, analysis and design, they have provided parametric and <b>scripting</b> <b>tools</b> that can provide both a common platform, links between platforms, but importantly an intellectual platform where these ideas can mix. These workshops and conferences have inspired two projects that both used acoustic performance as a design driver. The Smithsonian Institution Courtyard Enclosure and the Manufacturing Parametric Acoustic Surfaces (MPAS) installation at SmartGeometry 2010 are presented as examples of projects that used sound simulation parametric modelling to create acoustically performance driven architecture...|$|R
50|$|The program, {{written by}} Dan Ritchie, {{runs on the}} Windows {{platform}} and has both freeware and commercial versions. The commercial version, PD Pro Digital Painter, is updated frequently while the most recent freeware version is Project Dogwaffle 1.2, released in 2004. The free version is fully functional, lacking only the advanced layer and <b>scripting</b> <b>tools</b> in version 2 of the commercial product.|$|R
40|$|Abstract: Scripting {{languages}} {{are becoming more}} and more important as a tool for software development, as they provide great flexibility for rapid prototyping and for configuring componentware applications. In this paper we present LuaJava, a <b>scripting</b> <b>tool</b> for Java. LuaJava adopts Lua, an dynamically typed interpreted language, as its script language. Great emphasis is given to the transparency of the integration between the two languages, so that objects from one language can be used inside the other like native objects. The final result of this integration is a tool that allows the construction of configurable Java applications, using off-the-shelf components, in a high abstraction level...|$|E
40|$|This {{demonstration}} describes ScriptEase II, a {{tool that}} allows game story authors to generate scripts that control objects in video games by manipulating high level story patterns and game objects. ScriptEase II can generate scripting code for any game engine for which a translator is written. Currently there are translators for Neverwinter Nights and real Pinball games. Story Creation With ScriptEase II ScriptEase (Cutumisu et al. 2007) allows authors to generate scripting code for the Neverwinter Nights (NWN) video game. However, designing a <b>scripting</b> <b>tool</b> on a per-game-engine basis is costly. ScriptEase II can generate code for any game engine, using interchangeable “translators”. Two game engines {{at opposite ends of}} th...|$|E
40|$|SCREAM is a <b>scripting</b> <b>tool</b> {{that enables}} authors to {{generate}} emotionally and socially appropriate responses of animated agents. System users may design the mental make-up of an agent by declaring {{a variety of}} parameters and behaviors relevant to affective communication and obtain quantified affective reactions that can be input to an animation engine. While the default operations of an agent's `mind' are based on psychological and sociological research, authors may easily modify and extend its rule set. In order to facilitate high-level scripting and connectivity with other web-based animated agent systems, our tool is written in a lightweight Java based Prolog system and Java...|$|E
5000|$|Python <b>scripting</b> for <b>tool</b> {{creation}} and prototyping, game logic, importing/exporting from other formats, task automation and custom tools.|$|R
40|$|Organizations may {{periodically}} perform benchmarks {{as a way}} {{to measure}} their performance. This study attemptsto find a method to provide a way of working to effectively go from raw data to data sets ready to be analyzed in the context of contract benchmarking. Furthermore, <b>scripting</b> <b>tools</b> are developed to automate some of the required steps and guidelines are provided to efficiently and effectively use the method provided by this research...|$|R
50|$|The Real-time Control System (RCS) is a {{software}} system developed by NIST {{based on the}} Real-time Control System Reference Model Architecture, that implements a generic Hierarchical control system. The RCS Software Library is an archive of free C++, Java and Ada code, <b>scripts,</b> <b>tools,</b> makefiles, and documentation developed to aid programmers of software {{to be used in}} real-time control systems (especially those using the Reference Model Architecture for Intelligent Systems Design).|$|R
