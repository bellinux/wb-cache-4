129|0|Public
50|$|System-level {{simulation}} {{is used to}} test controllers {{connected to}} the simulated system instead of the real one.If the controller is a hardware controller like an ECU, the method is called hardware-in-the-loop. If the controller is run as a computer program on an ordinary PC, the method is called <b>software-in-the-loop.</b> <b>Software-in-the-loop</b> is faster to deploy and releases the constraint of real time imposed {{by the use of}} a hardware controller.|$|E
5000|$|<b>Software-in-the-loop</b> (SIL): the {{simulation}} {{is based on}} the execution of generated code, which runs on a PC system. The variables are typically plain or fixed point numbers.|$|E
50|$|As the {{closed-loop}} systems-driven {{product development}} approach requires concurrent {{development of the}} mechanical system and controls, strong links must exist between 1D simulation, 3D simulation and control algorithm development. Software suppliers achieve this through offering co-simulation capabilities for :de:Model in the Loop (MiL), <b>Software-in-the-Loop</b> (SiL) and Hardware-in-the-Loop (HiL) processes.|$|E
50|$|The Vortex C++ SDK {{has several}} modules that {{simulate}} physics-based particles, sensors, floating bodies, cable systems, earthmoving operations, grasping, and vehicles (wheeled or tracked). Vortex has a modular architecture: developers can integrate their projects into 3D visualization frameworks such as OpenSceneGraph (OSG) and Vega Prime, and deploy them in environments that contain <b>software-in-the-loop</b> (SIL), MATLAB, hardware-in-the-loop (HIL), and motion platform components.|$|E
50|$|TPT {{test cases}} are made {{independent}} of its execution. The test cases can be executed {{in almost any}} environment due to the so-called virtual machine (VM) concept also in real time environments. Examples are MATLAB/Simulink, TargetLink, ASCET, C-code, CAN, LIN, AUTOSAR, SystemDesk, DaVinci CT, LABCAR, INCA, <b>Software-in-the-Loop</b> (SiL) and HiL. Thus TPT is an integrated tool {{to be used in}} all testing phases of the development like unit testing, integration testing, system testing and regression testing.|$|E
50|$|In a {{development}} process based on mathematical models, the models {{are designed with}} graphical software, and then automatic production code generators are used to translate the models directly into code for ECUs/controllers. When a model's behavior has been validated, the code generator has to reliably transfer it to the target processor, whose resources are usually designed for the greatest possible cost-efficiency. In other words, the final production ECU generally has less memory and processing power than the RCP system on which the algorithm was developed and tested. As a result, the C code (production code) generated for the target processor has to meet stringent requirements regarding execution time and efficiency. Since 1999, dSPACE markets its production code generator TargetLink, which is integrated into Simulink, the environment for model-based development. In addition to performing the actual autocoding, including code generation for AUTOSAR software components, TargetLink also {{makes it possible for}} developers to compare the behavior of the generated code with that of the original Simulink model (by means of <b>software-in-the-loop</b> (SIL) and processor-in-the-loop (PIL) simulation).|$|E
40|$|The {{development}} of autonomous navigation algorithms for planetary rovers often hinges on access to rover hardware. Yet this access is usually very limited. In {{order to facilitate}} the continued {{development of}} these algorithms even when the hardware is temporarily unavailable, simulations are used. To minimize any additional work, these simulations must tightly integrate with the rover’s software infrastructure. They are then called <b>Software-in-the-Loop</b> simulators. In preparation for the 2015 DLR SpaceBot Camp, a simulation of the DLR LRU rover became necessary to ensure a timely progress of the navigation algorithms development. This paper presents the <b>Software-in-the-loop</b> simulator of the LRU, including details on the implementation and application...|$|E
40|$|This paper {{proposes a}} method for {{in-flight}} parameter estimation for Multirotor Aerial Vehicles (MAV). This task {{is important because it}} provides parameters with better accuracy for the actual vehicle operation. In order to simulate a flight it is adopted a simulation environment <b>Software-In-the-Loop</b> (SIL) ...|$|E
40|$|Modeling and {{simulation}} {{is growing}} ever {{more important in}} the development of new products. This thesis describes the use of Hopsan for hydraulic modeling and its use in conjunction with Simulink with the intent of using the model in a hardware-in-the-loop setup. A sensor layer has been created in Simulink to emulate all the internal sensors in a modern forklift. The details of using legacy C-code instead of a hardware MCU for a fully simulated environment, <b>software-in-the-loop</b> has been outlined. There are two major routes one can follow implementing <b>software-in-the-loop,</b> exporting the C-functions to CAPL via a export layer or creating an s-function in Simulink. Of the two the export layer method is the most promising since it is easier handling different execution times in CAPL than in Simulink...|$|E
40|$|This paper {{deals with}} the <b>software-in-the-loop</b> test {{approach}} being developed by the consortium project SiLEST (DLR, TU-Berlin, IAV, FhG FIRST, Webdynamix). We present a layer structure of the control loop that allows components of the environment simulation {{to be used for}} hardware-in-the-loop and <b>software-in-the-loop</b> testing of embedded systems software. The approach is specifically designed to test software behaviour in disturbed operating conditions, such as in a harsh environment, for example. In space applications, intensive radiation can corrupt computations and stored data. In addition, electronic devices such as sensors age much faster than on earth so that changed sensor deviations must be expected. Much {{the same is true of}} numerous other embedded systems, e. g. in automotive applications. Here, too, the electronic components are exposed to extreme conditions (temperature) and are subject to ageing processes...|$|E
40|$|The paper {{presents}} a low-level control system {{of a new}} biped robot "ROTTO". The <b>Software-in-the-Loop</b> and Rapid Control Prototyping frameworks, which {{have been used for}} robot development, are presented. An industrial Ethernet-based real-time communication protocol is introduced and the communication ability between the robotside hardware and PC-side control system is investigated...|$|E
40|$|The {{development}} process of CLAWAR {{is a complex}} task. The Hardware- and <b>Software-in-the-Loop</b> frameworks, which are used by development of new 22 DoF six-legged robot SLAIR 2 are presented. A novel universal real-time communication bridge system is introduced and test results are presented. The ability to real-time communication and service tasks related control of the robot is discussed...|$|E
40|$|AMG has {{recently}} completed {{the development of}} the AMG SPEEDSHIFT DCT. For development and test of the control software AMG used a novel test method based on a test case generator, and a <b>software-in-the-loop</b> (SiL) setup used to run the DCT control software in closed loop on a Windows PC. In this paper, we motivate and describe the corresponding test process and tool chain in detail, and discuss costs and benefit of this approach. ...|$|E
40|$|Design and {{evaluation}} of dynamic model of multi-input/multi-output power converter consisting of six converters con-nected by dc-link will be presented in the paper. The model was created in Matlab/Simulink based on the existing sys-tem, {{with the goal of}} evaluating various power management strategies, where only transient behavior in case of changed operating regime is of interest. In future the model will be used as a <b>Software-In-the-Loop</b> development tool for the design of supervisory control algorithms...|$|E
40|$|This paper {{presents}} a proof-of-concept for a modular SystemC SIL (<b>Software-in-the-Loop)</b> simulation environment, using a blackboard-like architecture. The proposed SIL framework integrates embedded control software with simulators developed in SystemC/SystemC-AMS or external tools, like MATLAB. The environment has been validated by a heating {{application for a}} professional printer, as example of an MDVP (Multi-Domain Virtual Prototyping) application. Our goal is {{to evaluate the use}} of SystemC/SystemC-AMS and to address the challenges in developing multiple-domain prototypes and blackboard-like SIL frameworks using this technology...|$|E
40|$|AbstractSolar thermal systems without {{appropriate}} control {{strategies are}} often working inefficiently despite high quality components and suitable hydraulic concepts. In this paper different control strategies for solar cooling systems are compared and evaluated {{according to their}} exergetic efficiency. Therefore, a <b>Software-In-The-Loop</b> test bench is used. The original controller of a solar thermal system is connected to a building simulation model. The simulation model is created with the modeling language Modelica using the simulation environment Dymola. This enables testing and monitoring of various control strategies. These controlling strategies are evaluated according to the energetic as well as exergetic output. Models for {{different parts of the}} hydraulic system are set up and validated. These different components are combined to a virtual solar test bench. The virtual test bench is connected to the system controller using Ethernet connection and an adapting program which has been created in C- Code (<b>Software-In-The-Loop).</b> Thus it is possible to use the advantages of a simulation environment, like performing repeatable tests with specified weather conditions, without implementing the control algorithms of the devices into Dymola. In a test scenario, two different control strategies for a solar cooling system have been implemented. First, a strategy to maximize the energetic output of the solar collectors is applied (Maximum Yield Strategy). Thereby the flow temperature of the solar system is kept as low as possible in order to increase the collectors’ efficiency. Second, the flow temperature is adapted to the required temperature of the absorption chiller, which leads to a lower energetic output of the collector and to a higher temperature level of storage (High Temperature Strategy). This paper shows that <b>Software-In-The-Loop</b> tests can be used for the optimization of control strategies. In the test scenario, the High Temperature Strategy leads to lower energy yields due to lower solar collector efficiency, whilst the exergy output and the output of cooling energy of the absorption chiller can be significantly increased...|$|E
40|$|The goal of {{this project}} {{is to make a}} system able of {{executing}} drop and recovery of sensor nodes at sea by the use of UAVs. The sensor node will be a lightweight packet that can contain different sensors depending on the mission. These sensor nodes will be dropped into the sea where they will float on the surface. Examples of use for the sensor nodes can be to log temperature, currents, salinity or water quality. Hence they can be very useful in for instance climate research or for detectingoil spills. This project is a continuation of a project executed by the author [Voldsund, 2013] where a drop and recovery mechanism to be mounted on a multicopter UAV was developed. The mechanism has been further developed in this project and integrated to an UAV. A control structure for the UAV has been developed and tested using simulator, <b>software-in-the-loop</b> tests and tests in the lab. Simulations and <b>software-in-the-loop</b> tests showed that the control structure was able to execute drop and recovery. But the needed accuracy for recovery of sensor nodes using the mentioned mechanism was not achieved in the lab tests. Measures that could be taken to enhance accuracy to make the system able to conduct dropand recovery of sensor nodes are discussed in this thesi...|$|E
40|$|The {{goal of this}} {{research}} is to develop an operational supervisory controller for Wayne State University Hybrid Warriors 2 ̆ 7 hybrid electric vehicle architecture that can be transitioned easily to a hardware-in-the-loop testing environment for the 2011 - 2014 EcoCAR 2 competition. It serves to demonstrate how model-based design, specifically <b>software-in-the-loop</b> testing, is effective for the initial steps in design, verification, and validation of a supervisory control strategy. Overall, the supervisory controller aims to meet all safety and functional requirements while reducing fuel consumption. The thesis starts by presenting a plug-in parallel-through-the-road architecture and its powertrain hardware components. Next, characteristics and capabilities of all significant powertrain components are explained along with the implementation of the vehicle plant model. Initial stages and preparations for the development of supervisory controller begin with applying the 2 ̆ 2 Design Failure Mode and Effects Analysis 2 ̆ 2 and identifying the functional vehicle requirements. Control strategies implemented within the supervisory controller are discussed in detail. Finally, results from the <b>software-in-the-loop</b> testing as well as safety critical fault mitigation are shown, to demonstrate the end product of a supervisory controller that has reached a high level of functionality and safety and therefore is ready for hardware-in-the-loop testing. Outlines are provided for extending the current work into next phases of hardware-in-the-loop testing, optimization using vehicle-in-the-loop results, and special applications such as cold-start...|$|E
40|$|Abstract: This paper {{focuses on}} the {{possibilities}} of a Petri net based rapid control prototyping (RCP) tool chain. P/T nets extended by interfaces and connected to an extended state model allow the description of typical programmable logic controller tasks. After a general introduction to RCP, the method {{is applied to the}} area of sequential control, and code generation for the chosen model is depicted. The paper closes with an example for a tool chain, demonstrated by system simulation and <b>Software-in-the-Loop</b> for a subsystem of a flexible manufacturing system in an industrial fieldbus environment. Copyright c© 2005 IFA...|$|E
40|$|Developing {{transmission}} {{software for}} mass production requires high quality standards for software functions and implementing them in source code. To achieve these standards, comprehensive verification and validation is needed. While {{it is essential}} for a dedicated test team to test the resultant software, the developers also need to conduct function tests. Beside HiL-systems developers use <b>Software-in-the-Loop</b> (SiL). The tool Silver runs tests of this kind on the developer’s PC without additional hardware and permits source-code debugging if access to the source code is available. IAV describes, how to build a virtual ECU required for such SiL simulations quickly and economically. 48 autHOR...|$|E
40|$|We {{discuss the}} {{implementation}} of Spectral Multiscale Coverage (SMC) based multi-vehicle control and coordination for coverage and search missions by autonomous UAVs. The SMC algorithm gives rise to multi-scale vehicle trajectories leading to efficient coverage of a given area and thereby making it useful for search algorithms that are robust to sensor errors and terrain uncertainties. We provide a functional summary of the SMC framework and address its practical implementation. The practical feasibility of the SMC approach is demonstrated via several coverage problems using high fidelity <b>software-in-the-loop</b> (SIL) simulations and experimental flight tests conducted using an electric helicopter. I...|$|E
40|$|This paper {{addresses}} a predictive control strategy for Unmanned Air Vehicles {{in the presence}} of bounded disturbances. The goal is to guarantee tracking capabilities with respect to a reference trajectory which is pre-specified using the differential flatness formalism. Furthermore, an off-line linearization strategy of the nonlinear model of the vehicle along the flat trajectory is proposed. Since the reference trajectory is available beforehand, an optimization problem which minimizes the tracking error for the vehicle is formulated in a predictive control framework. The proposed method exhibits effective performance validated through <b>software-in-the-loop</b> simulations for the control of Unmanned Aerial Vehicles (UAVs) ...|$|E
40|$|The Icelandic power {{network has}} {{transmission}} constraintsthat {{often lead to}} inter-area oscillations. Although conventionalstabilization methods have been applied successfully inthe past, there is potential to exploit large industrial loads toenhance system stability during stringent operation conditions. This paper analyzes the performance of two damping controllers. The controllers can use both synchrophasor signals and localmeasurements as their inputs. Damping is achieved by loadmodulation generated by a phasor-based oscillation signal. Real-Time <b>Software-in-the-Loop</b> testing is performed using Opal-RT’s eMEGAsim Real-Time Simulator to derive hardware andcomputational requirements of a hardware prototype that willbe implemented in the future. QC 20150713 </p...|$|E
40|$|A simulator, {{which has}} process, controllers, and man-machine {{interface}} (MMI), can be configured as a hardware-in-the-loop system or a <b>software-in-the-loop</b> system. In this paper, these general simulator configurations are reviewed {{and applied to}} the liquefied natural gas carrier (LNGC). The characteristics of the LNGC process, control, and its simulator configurations are presented. The simulator process/control/MMI models, hardware, software configurations, and onboard tests, which have been carried on the LNGC, are also presented. Using this simulator, the control engineers on board effectively debug and validate the control system of the LNGC, and the future operators of the LNGC can test various operating conditions, including abnormal and very severe operations. clos...|$|E
40|$|International audienceThis paper {{addresses}} {{the implementation of}} a predictive control strategy for Unmanned Air Vehicles in the presence of bounded disturbances. The goal is to prove the feasibility of such a real-time optimization-based control design and to demonstrate its tracking capabilities for the nonlinear dynamics with respect to a reference trajectory which is pre-specified via differential flatness. In order to benefit from the computational advantages of the linear predictive control formulations, an off-line linearization strategy of the nonlinear model of the vehicle along the flat trajectory is employed. The proposed method exhibits effective performance validated through <b>software-in-the-loop</b> simulations and real flight tests on different Unmanned Aerial Vehicles (UAVs) ...|$|E
40|$|Abstract:- This paper {{presents}} a rapid software prototyping environment, based on Matlab/Simulink, for realtime simulation {{and control of}} a mini-helicopter robot. The application of the environment is illustrated with a <b>software-in-the-loop</b> simulation example. The environment is integrated by own modules (mini-helicopter simulation model, navigation filter, multirate control, filters) and modules based on Matlab toolboxes (ground control station, linearization, parameter identification, heuristic identification). The environment is being tested over a real system, where {{it is intended to}} reduce developing time and cost, giving to developer more time to focus on mathematical and algorithmic methods. Key-Words:- Aerospace simulation, aircraft navigation, helicopter control, software-in-the loop, rapid prototypin...|$|E
40|$|The paper {{presents}} {{the development and}} implementation of a <b>Software-in-the-loop</b> (SIL) platform allowing the real-time simulation of the hybrid model of five-axis CNC machine tool which is implemented in SIMULINK. The interfacing between dSPACE software and the feed drives models in SIMULINK is explined. The values for the simulated positioning errors between the position demand and simulated position of orthogonal trimming head for the gantry axis are in the order of microns so proposed SIL model is validated. The accurate SIL platform could be used to build and optimise the machining process models including CNC machine tools under cutting conditions and improve machines’ dynamic performance...|$|E
40|$|International audienceThe paper proposes the {{implementation}} of a robust cruise control system which is able to ensure the fuel-efficient travel of the vehicle with a look-ahead control algorithm. The H∞ -based feedforward-feedback control method guarantees robustness against varying vehicle mass, longitudinal disturbances and the consideration of actuator dynamics. The advantage of the method is the application of a small number of vehicle parameters. Therefore, a method for various passenger cars without significant modifications is needed. The proposed cruise control and the look-ahead method are implemented in a <b>software-in-the-loop</b> (SIL) environment using DSpace Autobox, which cooperates with the high fidelity CarSim software through CAN communication...|$|E
40|$|Over {{the past}} decade, micro aerial {{vehicles}} (MAV) {{have experienced a}} vigorous success in both research and business. With the continuous miniaturization of MAV, many research institutes are focusing {{on the study of}} MAV swarm control algorithms, communication topology, task allocation and other new issues. Moreover, the MAV swarm has a great military value for the army. Compared with the research of a single MAV, the study of an MAV swarm is more complicated and dangerous. Because multiple MAVs are likely to collide and interfere with each other, their swarm behavior is harder to predict. This paper presents a <b>Software-in-the-Loop</b> (SIL) simulation system for MAV swarming research. This system is able to test the MAV swarm in a software simulated environment. he SIL simulation system is based on the robot operating system (ROS) and the three-dimensional robot simulator Gazebo. The model for the multicopter propeller wash and its aerodynamic interference with the surrounding MAVs is derived. Moreover, the software offers a simplified model of the multiple MAV communication topology. Besides, the software integrates the embedded flight controller with a finite state machine (FSM) to facilitate MAV deployment and task management. The FSM also supports the use of Simulink model for importing Matlab scripts into the controller. A simulation control program with a graphical interface is designed for Matlab, which enables Matlab to control the <b>Software-in-the-loop</b> simulation. The proposed system can be applied in the research of MAV flocking consensus algorithm or multi-MAV cooperation, in order to accelerate the development and test, save the experimental costs, and reduce the risks...|$|E
40|$|Typical {{residential}} HVAC systems employ mechanical or hard-coded deadband control {{behaviors that}} are unresponsive to changing energy costs and weather conditions. In this paper, we investigate the potential of electric baseboard heaters to maintain a comfortable temperature while optimizing electricity consumption given weather forecasts and price data. We first propose a distributed system architecture that utilizes mobile application platforms. We then develop, assemble, and deploy a sensor network and Internet server to collect real-time temperature data from an apartment. With these sensor streams, we identify a thermal model of the apartment. Finally, we propose a model predictive control algorithm and perform a <b>software-in-the-loop</b> simulation of the cloud-based system to demonstrate the economic advantage...|$|E
40|$|<b>Software-in-the-loop</b> and Hardware-in-the-loop {{testing of}} failure prognostics and {{decision}} making tools for aircraft systems will facilitate more comprehensive and cost-effective testing than what is practical to conduct with flight tests. A framework is described for the offline recreation of dynamic loads on simulated or physical aircraft powertrain components based on a real-time simulation of airframe dynamics running on a flight simulator, an inner-loop flight control policy executed by either an autopilot routine or a human pilot, and a supervisory fault management control policy. The creation of an offline framework for verifying and validating supervisory failure prognostics {{and decision making}} routines is described for the example of battery charge depletion failure scenarios onboard a prototype electric unmanned aerial vehicle...|$|E
40|$|Hardware-in-The-Loop (HIL) {{simulations}} play a {{major role}} in the field of testing of Autonomous Underwater Vehicle (AUV) well before the actual vehicle is developed and deployed in the water. This paper discusses the real-Time verification of a 3 D obstacle avoidance algorithm of an underactuated flat-fish type AUV using hardware-in-The-loop simulation tool. <b>Software-In-The-Loop</b> (SIL) models are developed in MATLAB/Simulink environment and the HIL simulation is performed using dSPACE environment. The development of HIL test bench and the simulation results are presented in this paper. The results show that the HIL simulation is an effective tool for the verification of control algorithms and the developed obstacle avoidance algorithm can be used in real-Time for the flat-fish type AU...|$|E
40|$|Daimler uses a model-based test {{process for}} the {{development}} of software modules for automatic transmissions. The validation of the module functions is carried out with a test generator developed by QTronic. This test generator is able to automatically generate, simulate and analyze thousands of test scenarios. The individual components of the development environment, such as, powertrain and vehicle models, software modules and test generator, are coupled by a <b>Software-in-the-Loop</b> (SiL) tool and can be executed on standard laptops. The software modules are operating as in a real vehicle and can be thoroughly tested. 24 The complexity of vehicle engine and transmission systems is steadily increasing. One of the reasons is the increasing market expectation with respect to th...|$|E
40|$|This paper {{provides}} comprehensive design {{method of}} compensator for grid-connected PWM inverters with LCL-filter to supply high quality electric power from distributed generations. The proposed compensator ensures: i) high speed tracking with low distortion and zero steady-state errors for sinusoidal current reference; ii) robust responses against frequency and voltage changes of grid power supply. The proposed design methodology {{is based on}} the utmost compensator that covers all realizable linear control systems. Various multi-objective control requirements can be considered in the design framework directly, and then, trial-and-error process is reduced. The <b>software-in-the-loop</b> simulations are presented to support the advantages of the design and to demonstrate the system performance compared to traditional Linear Quadratic Regulator with Internal Model controller. 本文データは計測自動制御学会の許諾に基づきJ-STAGEから複製したものである. [URL]...|$|E
40|$|This work {{presents}} a novel Model-Based Design (MBD) ap-proach and associated tool-chain for the IEC 61131 - 3 spe-cific Programmable Logical Controllers (PLC) [3]. Our tool-chain automatically synthesizes software for manufacturing Time-Triggered Real-time Embedded (TTRE) systems. A <b>Software-In-the-Loop</b> Simulation (SILS) framework integrated into our tool-chain helps {{to reduce the}} design iterations. Using a manufacturing robot-arm use-case, we validate our tool-chain and demonstrate a 39 × improvement in the Quality-of-Control (QoC) {{when compared to the}} state-of-the-art ap-proach [2]. Our auto-generated scheduler meets all the hard real-time constraints (zero deadline misses) for a given TTRE system when compared to the scheduler (e. g., 145 deadline misses for a CPU utilization of 95 %) presented in [14]. 1...|$|E
40|$|The {{design of}} a {{mechatronic}} real-time multibody model of a locomotive’s three axle bogie is {{presented in this paper}} based on the application of a <b>software-in-the-loop</b> approach. This approach requires development of different subsystems of the bogie test rig as real-time models. In this paper, the investigation of such a real-time application of the full model of the locomotive’s bogie test rig has been undertaken, where a mechanical subsystem has been created in Gensys multibody software and an electrical subsystem in the Matlab/Simulink environment transferred to an IPG Xpack 4 computerised system. The verification of the developed mechatronic model has been made by means of a real-time simulation process where two subsystems have been connected through the UDP interface...|$|E
