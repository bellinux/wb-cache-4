0|3602|Public
50|$|In 1995, the Department {{established}} {{its first}} Digital Imaging room equipped with modern <b>scanners,</b> <b>computers</b> and printers.|$|R
50|$|Commercially, {{stepper motors}} {{are used in}} floppy disk drives, flatbed <b>scanners,</b> <b>computer</b> printers, plotters, slot machines, image scanners, compact disc drives, {{intelligent}} lighting, camera lenses, CNC machines and, more recently, in 3D printers.|$|R
25|$|The CIA sent {{operatives}} {{to train}} the Palestinians in interrogation techniques and to organize their files. The Palestinians were showered with advanced radio communications and X-ray equipment, bomb detection <b>scanners,</b> <b>computers,</b> vehicles and other equipment.|$|R
50|$|The term <b>computer</b> <b>language</b> is {{sometimes}} used interchangeably with programming language. However, {{the usage of}} both terms varies among authors, including the exact scope of each. One usage describes programming languages as a subset of <b>computer</b> <b>languages.</b> In this vein, languages used in computing that have a different goal than expressing computer programs are generically designated <b>computer</b> <b>languages.</b> For instance, markup languages are {{sometimes referred to as}} <b>computer</b> <b>languages</b> to emphasize that they are not meant to be used for programming.|$|R
40|$|This project report {{attempts}} {{to evaluate the}} educational properties of the Python <b>computer</b> <b>language,</b> in practice. This is done by examining <b>computer</b> <b>language</b> evolution history, related scientific background work, the existing educational research on <b>computer</b> <b>languages</b> and Python's experimental application in higher secondary education in Greece, during first half of year 2002. This Thesis Report was delivered in advance of a thesis defense for a Masters/Doctorandus (MSc/Drs) title with the Amstel Institute/Universiteit van Amsterdam, during the same year. Comment: 135 pages, 20 tables, 10 figures (incl. evolution of <b>computer</b> <b>languages...</b>|$|R
40|$|Neural network Abstract. With the popularization of internet, cyber {{language}} is used {{more and more}} frequently. The network language has formed a unique system of <b>computer</b> <b>language</b> library. So studying of <b>computer</b> <b>language</b> has great significance {{to the development of}} the network language. Language library capacity can’t be unlimited expansion. To enhance the <b>computer</b> <b>language</b> network function we must use correlation algorithm to simplify the <b>computer</b> <b>language.</b> In this paper, an improved method based on the network language new is proposed. We apply the neural network speech recognition model with multi hierarchy recognition technology to <b>computer</b> <b>language,</b> and put forward TEI model of <b>computer</b> network <b>language</b> identification. We use the VB program to call on the MATLAB software, successfully simplify the complex recognition process of the network language. At the same time, <b>computer</b> network <b>language</b> also has certain reference value for English language learning. It can help learners to avoid the negative effects of network language on the English language...|$|R
50|$|When {{a string}} grammar {{is used to}} define a <b>computer</b> <b>language,</b> some string-grammar parsing tools and {{compiler}}-generator tools {{can be used to}} more easily create a compiler software system for that particular <b>computer</b> <b>language.</b> Because other grammars can be more difficult to use for parsing text written in a specific <b>computer</b> <b>language,</b> using a string grammar is a means to seek simplicity in language processing.|$|R
50|$|John Wainwright is a {{computer}} scientist, born in Australia, who has pioneered the development of pure object-based <b>computer</b> <b>languages.</b> He is the principal architect of two <b>computer</b> <b>languages,</b> ScriptX (1992-1996) and MaxScript (1996).|$|R
50|$|The <b>Computer</b> <b>Language</b> Benchmarks Game (formerly called The Great <b>Computer</b> <b>Language</b> Shootout) {{is a free}} {{software}} project for comparing how a given subset of simple algorithms can be implemented in various popular programming languages.|$|R
25|$|Positron {{emission}} tomography (PET) {{is used in}} viewing a functional processes of the brain (or other body parts). A Positron-emitting radionuclide is injected into the blood stream and emits gamma rays which are detected by an imaging <b>scanner.</b> <b>Computer</b> analysis then allows for a 3-dimensional reconstruction of the brain region or body part of interest.|$|R
40|$|The {{generation}} and format are discussed of the ERTS system corrected multispectral <b>scanner</b> <b>computer</b> compatible tapes. The discussion includes spacecraft sensors, scene characteristics, data transmission, and conversion {{of data to}} computer compatible tapes at the NASA Data Processing Facility. Geometeric and radiometric corrections, tape formats, and the physical characteristics of the tapes are also included...|$|R
50|$|Positron {{emission}} tomography (PET) {{is used in}} viewing a functional processes of the brain (or other body parts). A Positron-emitting radionuclide is injected into the blood stream and emits gamma rays which are detected by an imaging <b>scanner.</b> <b>Computer</b> analysis then allows for a 3-dimensional reconstruction of the brain region or body part of interest.|$|R
40|$|This essay weighs {{the notion}} that Web-based tag {{libraries}} represent the fifth generation of <b>computer</b> <b>languages.</b> A brief survey {{of the history of}} <b>computer</b> <b>languages</b> is provided as is an indication of why it is useful to conventionally categorize <b>computer</b> <b>languages</b> into “generations”. The essay argues that the current conventional ascription of generations is incorrect and that it should be replaced with one based on what the author terms “the principle of abstraction”. ...|$|R
50|$|Document {{cameras are}} {{compatible}} with <b>scanners,</b> projectors, <b>computers</b> and many other technologies.|$|R
5000|$|In colloquial usage, {{the terms}} [...] "Turing complete" [...] or [...] "Turing equivalent" [...] {{are used to}} mean that any {{real-world}} general-purpose <b>computer</b> or <b>computer</b> <b>language</b> can approximately simulate the computational aspects of any other real-world general-purpose <b>computer</b> or <b>computer</b> <b>language.</b>|$|R
40|$|The {{thesis of}} this {{dissertation}} is that formal {{definitions of the}} syntax and semantics of <b>computer</b> <b>languages</b> are needed. This dissertation investigates two candidates for formally defining computer languages: (1) the formalism of canonical systems for defining the syntax of a <b>computer</b> <b>language</b> and its translation into a target language, and (2) the formalisms of the l-calculus and extended Markov algorithms as a combined formalism {{used as the basis}} of a target language for defining the semantics of a <b>computer</b> <b>language...</b>|$|R
50|$|Document imaging is an {{information}} technology category for systems capable of replicating documents commonly used in business. Document imaging systems can take many forms including microfilm, on demand printers, facsimile machines, copiers, multifunction printers, document <b>scanners,</b> <b>computer</b> output microfilm (COM) and archive writers. Document Imaging means the conversion of paper files (of any size or description) or microfilm / fiche to digital images.|$|R
40|$|The {{generation}} and {{format of the}} LANDSAT 1, 2, and 3 system corrected multispectral <b>scanner</b> <b>computer</b> compatible tapes are discussed. Included in the discussion are the spacecraft sensors, scene characteristics, the transmission of data, and {{the conversion of the}} data to computer compatible tapes. Also included in the discussion are geometric and radiometric corrections, tape formats, and the physical characteristics of the tape...|$|R
5000|$|Dictionary for <b>Computer</b> <b>Languages,</b> Academic Press, London 1966 ...|$|R
5000|$|Second-generation {{programming}} language, {{a form of}} <b>computer</b> <b>language</b> ...|$|R
5000|$|<b>Computer</b> <b>language</b> syntax is {{generally}} distinguished into three levels: ...|$|R
5000|$|Most {{general-purpose}} <b>computer</b> <b>languages</b> actually incorporate several specialized languages.|$|R
5000|$|Inform - A <b>computer</b> <b>language</b> {{that can}} produce Z-machine {{programs}} ...|$|R
5000|$|... #Subtitle level 3: Translating human-written {{source code}} into <b>computer</b> <b>language</b> ...|$|R
5000|$|Thomas Eugene Kurtz 1950 — {{co-inventor}} of BASIC <b>computer</b> <b>language.</b>|$|R
50|$|Although data {{structure}} alignment {{is a fundamental}} issue for all modern <b>computers,</b> many <b>computer</b> <b>languages</b> and <b>computer</b> <b>language</b> implementations handle data alignment automatically. Ada, PL/I, certain C and C++ implementations, D, Rust, and assembly language allow at least partial control of {{data structure}} padding, which {{may be useful in}} certain special circumstances.|$|R
40|$|Most {{universities}} teach <b>computer</b> <b>language</b> handling by mainly focussing on compiler theory, although MDA (model-driven architecture) and meta-modelling {{are increasingly}} {{important in the}} software industry {{as well as in}} computer science. In this article, we investigate how traditional compiler theory compares to meta-modelling with regard to formally defining the different aspects of a language, and how we can expand the focus in <b>computer</b> <b>language</b> handling courses to also include meta-model-based approaches. We give an outline of a <b>computer</b> <b>language</b> handling course that covers both paradigms, and share some experiences from running a course based on this outline at the University of Agder...|$|R
40|$|Abstract—The paper {{presents}} innovative parser construction {{method and}} parser generator prototype which generates a <b>computer</b> <b>language</b> parser from {{a set of}} annotated classes in contrast to classic parser generators which specify concrete syntax of a <b>computer</b> <b>language</b> using BNF notation. In the presented approach a language with textual concrete syntax is defined upon the abstract syntax definition extended with source code annotations. The process of parser implementation is presented on selected concrete <b>computer</b> <b>language</b> – the Simple Arithmetic Language. The paper summarizes results of the studies of implemented parser generator and describes {{its role in the}} university courses. ...|$|R
5000|$|... #Subtitle level 2: Realizations of the {{function}} in common <b>computer</b> <b>languages</b> ...|$|R
5000|$|Specialized <b>computer</b> <b>languages</b> {{that are}} often used to {{describe}} communication protocols.|$|R
40|$|Abstract: Many {{universities}} teach <b>computer</b> <b>language</b> handling by mainly focussing on compiler theory, although MDD (model-driven development) and meta-modelling {{are increasingly}} {{important in the}} software industry {{as well as in}} computer science. In this article, we share some experiences from teaching a course in <b>computer</b> <b>language</b> handling where the focus is on MDD principles...|$|R
50|$|Consists of {{projects}} that test computer programs, algorithms, <b>computer</b> <b>languages,</b> and hardware.|$|R
50|$|His artworks {{and poetry}} are {{typically}} programed using the <b>computer</b> <b>language</b> Perl.|$|R
50|$|The {{project was}} known as The Great <b>Computer</b> <b>Language</b> Shootout until 2007.|$|R
50|$|Some <b>computer</b> <b>languages</b> provide {{built-in}} or library {{support for}} merging sorted collections.|$|R
5000|$|John W. Backus (1950), Developer of Fortran, {{the first}} true <b>computer</b> <b>language.</b>|$|R
