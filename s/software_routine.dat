73|356|Public
5000|$|An {{application}} then registers a <b>software</b> <b>routine</b> that [...] "listens" [...] for messages placed {{onto the}} queue.|$|E
50|$|The queue-manager {{software}} stores {{the messages}} until a receiving application connects and then calls the registered <b>software</b> <b>routine.</b> The receiving application then processes {{the message in}} an appropriate manner.|$|E
5000|$|When {{these files}} have been received, the bot will first {{initialize}} a <b>software</b> <b>routine</b> which {{allows it to}} remove files critical for revealing spam and rootkit applications. [...] After this procedure is done, the trojan will then start sending out the spam message it has received from the control server.|$|E
50|$|A {{power-on}} self-test (POST) {{is a process}} performed by firmware or <b>software</b> <b>routines</b> immediately after a computer or other digital electronic device is powered on.|$|R
5000|$|TI-99/4A and Compatibles Discussion Group - a more {{technically}} oriented mailing list, {{where people}} will often post technical questions or <b>software</b> <b>routines</b> to try out.|$|R
40|$|This paper {{addresses}} the potential speedup achieved by using decimal floating-point hardware, instead of <b>software</b> <b>routines,</b> on a high-performance superscalar architecture. <b>Software</b> <b>routines</b> were written to per-form decimal addition, subtraction, multiplication, and diuision. Cycle counts were then measured for each instruction using the Simplescalar simulator. Af-ter this, new hardware algorithms were deueloped, ex-isting hardware algorithms were analyzed, and cycle counts were estimated {{for the same}} set of instructions using specialized decimal floating-point hardware. This data was then used to show the potential speedup ob-tained for programs with different instruction mixes and a recently developed benchmark. ...|$|R
50|$|Even {{the game}} port was unusually {{powerful}} {{and could be}} used for digital and analog input and output. The early manuals included instructions for how to build a circuit with only four commonly available components (one transistor and three resistors) and a <b>software</b> <b>routine</b> to drive a common Teletype Model 33 machine. One hacker (Don Lancaster) used the game I/O to drive a LaserWriter printer.|$|E
50|$|Interrupts {{are used}} to allow {{emulation}} of instructions which are unimplemented on certain models in a computer line. For example floating point instructions may be implemented in hardware on some systems and emulated on lower-cost systems. Execution of an unimplemented instruction will cause an interrupt. The operating system interrupt handler will recognize the occurrence on an unimplemented instruction, interpret the instruction in a <b>software</b> <b>routine,</b> {{and then return to}} the interrupting program as if the instruction had been executed. This provides application software portability across the entire line.|$|E
5000|$|Optimization {{problems}} must {{be presented}} to Knitro in mathematical form, and should provide a way of computing function derivatives using sparse matrices. Problems may be written in C, C++, C#, Fortran, Java, or Python, in which case Knitro is called as a <b>software</b> <b>routine</b> to solve the problem. An often easier approach is to develop the optimization problem in an algebraic modeling language (AML) like AIMMS, AMPL, GAMS, Mathematica, MATLAB, R, Mosel (through the Xpress-NonLinear module), etc. The modeling environment computes function derivatives, and Knitro is called as a [...] "solver" [...] from within the environment.|$|E
30|$|At present, most {{researchers}} who construct these scores rely on canned <b>software</b> <b>routines</b> such as PRSice for convenience {{and do not}} directly discuss the statistical and behavioral restrictions embedded.|$|R
50|$|The Mensch Computer {{includes}} a ROM monitor (a type of firmware), and numerous <b>software</b> <b>routines</b> {{are available to}} programmers by calling subroutines in the ROM. Typically, the Mensch Computer runs Mensch Works, a software suite also named after Bill Mensch.|$|R
40|$|A set of MapleV R. 4 / 5 <b>software</b> <b>routines</b> for {{calculating the}} {{numerical}} evolution of dynamical systems and flexibly plotting the results is presented. The package {{consists of an}} initial condition generator (on which the user can impose quite general constraints), a numerical solving manager, plotting commands that allow the user to locate and focus in on regions of possible interest and, finally, a set of routines that calculate the fractal dimension of the boundaries of those regions. A special feature of the <b>software</b> <b>routines</b> presented here is an optional interface in C, permitting fast numerical integration using standard Runge-Kutta methods, or variations, for high precision numerical integration. (Submitted to Computer Physics Communications...|$|R
5000|$|After {{being forced}} to [...] "wipe out" [...] his brain to prevent Norman Osborn from gaining his information, Tony Stark is forced {{to have a new}} arc reactor, of Rand design {{installed}} in his chest. The process greatly improves his strength, stamina and intellect. The procedure left him with virtually no autonomic functions: as his brain was stripped of every biological function, Tony is forced to rely on a digital backup of his memories (leaving him with severe gaps and lapses in his long-term memory) and on <b>software</b> <b>routine</b> in the arc reactor for basic stimuli reaction, such as blinking and breathing. The Bleeding Edge package of armor and physical enhancement is now equal in power, if not a more advanced, version of the old Extremis tech.|$|E
40|$|The {{purpose of}} this {{calculation}} is to document that the <b>software</b> <b>routine</b> ModStandardNomal Version 1. 0 which is a Visual Fortran 5. 0 module, provides correct results for a normal distribution up to five significant figures (three significant figures at the function tails) for a specified range of input parameters. The <b>software</b> <b>routine</b> {{may be used for}} quality affecting work. Two types of output are generated in ModStandardNomal: a deviate, x, given a cumulative probability, p, between 0 and 1; and a cumulative probability, p, given a deviate, x, between - 8 and 8. This calculation supports Performance Assessment, under Technical Product Development Plan, TDP-EBS-MD- 000006 (Attachment I, DIRS 3) and is written in accordance with the AP- 3. 12 Q Calculations procedure (Attachment I, DIRS 4) ...|$|E
40|$|This paper {{presents}} an approach, improving instrumental performance, {{with regard to}} the limitation on γ (maximum detectable slope). This is based on the use of an optical 3 D profiler, a closed-loop single axis tilt stage and <b>software</b> <b>routine,</b> coded on purpose, within commercially available image processing software...|$|E
50|$|The {{problem was}} {{somewhat}} exacerbated by Commodore's initial decision to release documentation relating {{not only to}} the OS's underlying <b>software</b> <b>routines,</b> but also to the hardware itself, enabling intrepid programmers who had developed their skills on the Commodore 64 to POKE the hardware directly, as was done on the older platform. While the decision to release the documentation was a popular one and allowed the creation of fast, sophisticated sound and graphics routines in games and demos, it also contributed to system instability as some programmers lacked the expertise to program at this level. For this reason, when the new AGA chipset was released, Commodore declined to release low-level documentation in an attempt to force developers into using the approved <b>software</b> <b>routines.</b>|$|R
50|$|DesignWare ARC xCAM is a 100% cycle-accurate {{simulator}} that {{is primarily}} used for hardware verification, {{but it can}} also be used to do final optimizations of critical <b>software</b> <b>routines.</b> The xCAM model is automatically generated from the processor configuration and can be used to evaluate different hardware scenarios.|$|R
40|$|Mathematical and algorithmical {{techniques}} for solution {{of problems in}} satellite dynamics were developed, along with solutions to satellite orbit motion. Dynamical analysis of shuttle on-orbit operations were conducted. Computer <b>software</b> <b>routines</b> for use in shuttle mission planning were developed and analyzed, while mathematical models of atmospheric density were formulated...|$|R
40|$|This paper {{presents}} the design flow for an integrated power amplifier. The flow {{is presented as}} a <b>software</b> <b>routine.</b> For a given set of amplifier specifications and CMOS process parameters, the routine computes the passive component values for a Class-E or Class-F based power amplifier. The routine includes the matching network for standard impedance loads. The routine also provides its user with a spiral inductor search algorithm, which can be used to generate layouts of inductors with Q-factors optimised at a desired frequency. For a typical power amplifier design case where several amplifiers are designed for application over different channels, the routine presented in this paper contributes by streamlining the design flow. The operation of the <b>software</b> <b>routine</b> was demonstrated by simulations in Austriamicrosystems 0. 35 µm single-supply process for a 14 dBm, 2. 4 GHz power amplifier design...|$|E
30|$|The wetting {{properties}} of the surfaces were determined by the static contact angle method. The contact angles were measured by increasing and then decreasing the volume of a drop of liquid (distilled water) deposited on the sample surface. Recorded images were digitized and analyzed with a <b>software</b> <b>routine</b> that evaluated the tangent {{at the point of}} contact between the drop and the surface (i.e., the contact angle).|$|E
3000|$|We {{compare the}} time-predictable JOP design with picoJava [63, 64], a Java {{processor}} designed for average-case performance. Simple bytecodes are directly {{supported by the}} processor. Most of them execute in a single cycle. More complex bytecodes trap to a <b>software</b> <b>routine.</b> However, the invocation time of the trap depends on the cache state and is between 6 cycles in the best case and 426 cycles in the worst case—a factor {{in the order of}} two magnitudes. Some of the trapped instructions (e.g., [...]...|$|E
50|$|Without a coprocessor, the 386 {{normally}} performs floating-point arithmetic through (slow) <b>software</b> <b>routines,</b> implemented at runtime {{through a}} software exception-handler. When a math coprocessor is paired with the 386, the coprocessor performs the {{floating point arithmetic}} in hardware, returning results much faster than an (emulating) software library call.|$|R
40|$|Probability & Statistics with Integrated <b>Software</b> <b>Routines</b> is a calculus-based {{treatment}} of probability concurrent with and integrated with statistics through interactive, tailored software applications {{designed to enhance}} the phenomena of probability and statistics. The software programs make the book unique. The book comes with a CD containing the interactive software leading to the Statistical Genie. The student can issue commands repeatedly while making parameter changes to observe the effects. Computer programming is an excellent skill for problem solvers, involving design, prototyping, data gathering, testing, redesign, validating, etc, all {{wrapped up in the}} scientific method. See also: CD to accompany Probability and Stats with Integrated <b>Software</b> <b>Routines</b> (0123694698) * Incorporates more than 1, 000 engaging problems with answers* Includes more than 300 solved examples* Uses varied problem solving method...|$|R
50|$|The DesignWare ARC nSIM Pro Simulator is {{primarily}} used for software development and debugging. It {{can operate as}} a very fast ISS and {{it also has a}} mode that provides near cycle-accurate simulation. This mode, available for certain cores, can be used to optimize important <b>software</b> <b>routines</b> to improve efficiency.|$|R
40|$|A <b>software</b> <b>routine</b> to {{reconstruct}} individual spike trains from multi-neuron, single-channel extracellular recordings was designed. Using a neural network algorithm that automatically clusters and sorts the spikes, the only user input needed is the threshold level for spike detection {{and the number}} of unit types present in the recording. Adaptive features are included in the algorithm to allow for tracking of spike trains during periods of amplitude variation and also to identify noise spikes. The routine will operate on-line during extracellular studies of the cochlear nucleus in cats...|$|E
40|$|We {{explore the}} use of the pair {{distribution}} function to study the self-organization process of Ge quantum dots on both nanopatterned and nonpatterned oxidized Si(001) surfaces. Dots formation and ordering upon annealing of a Ge thin film are analyzed. The method we use is not limited to this case study. We show how it can be applied to determine short and long range self-ordering of nanostructures. We support our results by applying a <b>software</b> <b>routine</b> to simulate patterns of dots to finally spot the relevant physical aspects of Ge islands self-assembly...|$|E
40|$|Approved {{for public}} release; {{distribution}} in unlimited. A time domain measurements, electromagnetic {{has been developed}} to provide a means of exper the transient, scattered electromagnetic field objects for impulse response determination or The evolution of the physical laboratory is de {{the development of the}} transmitting and receiv interface of the data processing hardware, the scheme, the <b>software</b> <b>routine</b> functions, and th scattering laboratory imentally measuring s from symmetric target classification scribed in terms of ing antennas, the signal processing e fabrication of scattering range targets. The smoothed impulse is experimentally determined, measurements is made to a response[URL] U. S. Marine Corp...|$|E
25|$|Since {{the late}} twentieth century, most {{algorithms}} are implemented {{in a variety of}} programming languages. The Netlib repository contains various collections of <b>software</b> <b>routines</b> for numerical problems, mostly in Fortran and C. Commercial products implementing many different numerical algorithms include the IMSL and NAG libraries; a free-software alternative is the GNU Scientific Library.|$|R
40|$|Embedded {{designers}} {{now have}} the capability of offloading <b>software</b> <b>routines</b> into custom applicationspecific hardware blocks. This paper evaluates a domain-specific design system for configurable computing platforms that combine processors and configurable fabrics. Although the proposed work uses floating-point and communication primitives as the specific domain tasks evaluated, the reconfigurable computing platform and the design challenges addressed will become increasingly common {{in a number of}} embedded system environments. This paper explores the added cost of hardware resources, area, and power of moving <b>software</b> library <b>routines</b> into hardware blocks in a configurable embedded system based on the MicroBlaze soft processor. 1...|$|R
40|$|International Telemetering Conference Proceedings / November 14 - 16, 1978 / Hyatt House Hotel, Los Angeles, CaliforniaThe NAVSTAR/Global Positioning System Satellite is briefly {{outlined}} as is {{the technique}} for navigation using signals from such satellites. A description of the GPS navigation subsystem with emphasis on its microprocessor and its interfaces and <b>software</b> <b>routines</b> is given...|$|R
40|$|In {{this paper}} a novel {{approach}} for determining device noise parameters over frequency is presented. Such methodology is made of two parts: the first one allows to straightforwardly extract single-frequency noise parameters from source-pull data; the second one extends this capability to multi-frequency, source-pull data to obtain a full description of device noise behavior over frequency by means of at most ten constant parameters (depending on the required accuracy). The whole process is automated via a <b>software</b> <b>routine</b> and does not need a previous knowledge of the active device equivalent circuit. © 2012 European Microwave Assoc...|$|E
40|$|Abstract—Twist drills are {{geometrical}} complex {{tools and}} thus various researchers have adopted different mathematical and experimental approaches for their simulation. The present paper acknowledges the {{increasing use of}} modern CAD systems and using the API (Application Programming Interface) of a CAD system, drilling simulations are carried out. The developed DRILL 3 D <b>software</b> <b>routine,</b> creates parametrically controlled tool geometries and using different cutting conditions, achieves the generation of solid models for all the relevant data involved (drilling tool, cut workpiece, undeformed chip). The final data derived, consist a platform for further direct simulations regarding the determination of cutting forces, tool wear, drilling optimizations etc. Keywords—Drilling, CAD based simulation, 3 D-modelling. ...|$|E
30|$|In August 2012, the Knight Capital Group {{implemented}} a new liquidity testing <b>software</b> <b>routine</b> into its trading system, which was running {{live on the}} NYSE. The system started making bizarre trading decisions, quadrupling {{the price of one}} company, Wizzard Software, as well as bidding-up the price of much larger entities, such as General Electric. Within 45  minutes, the company lost USD 440 million (Perez 2013). After this event and the weakening of Knight Capital’s capital base, it agreed to merge with another algorithmic trading firm, Getco, which is the biggest HFT firm in the U.S. today (Popper 2012 a). This example emphasizes the importance of implementing precautions to ensure their algorithms are not mistakenly used.|$|E
40|$|The Finite Element Machine is an {{experimental}} array processor designed to support research in parallel algorithms and architectures. This report presents {{a case study}} of communications using the SENDa and RECV system <b>software</b> <b>routines</b> on the Finite Element Machine, followed by a discussion of the effect of I/O performance on the efficiency of parallel algorithms...|$|R
40|$|A set of Maplev R. 3 <b>software</b> <b>routines,</b> for {{plotting}} 2 D/ 3 D {{projections of}} Poincaré surfaces-of-section of Hamiltonian dynamical systems, is presented. The package {{consists of a}} plotting-command plus a set of facility-commands for a quick setup of the Hamilton equations of motion, initial conditions for numerical experiments, and for the zooming of plots...|$|R
40|$|Discusses the {{interface}} between a GIS and spatial data analysis and further focuses on three aspects of spatial econometric analysis: (1) spatial weights matrix (2) spatial dependence in regression models (3) the estimation of spatial regression models. Includes <b>software</b> <b>routines</b> for extracting spatial weights matrices from common GIS packages (Arc/Info, packages GAUSS, LIMDEP, RATS, SHAZAM, and SPLUS...|$|R
