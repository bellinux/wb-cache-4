1|189|Public
40|$|A Doctoral Thesis. Submitted in partial {{fulfilment}} of {{the requirements}} for the award of Doctor of Philosophy of Loughborough University. Offshore wind power generation is projected to be the United Kingdom’s largest contributor to the European Union’s 2020 renewable energy target, {{with large numbers of}} wind turbines clustered into wind farms with capacities comparable to fossil fuelled power stations. The degree of power loss caused by the wake affected region behind each turbine is known to vary under different atmospheric stability conditions. Accurately predicting these losses for a variety of likely scenarios before new farms are built can significantly reduce the financial risk of private investment. The aim of this work was to investigate the structure of the offshore atmosphere and incorporate the findings relating to atmospheric stability into Computational Fluid Dynamics (CFD) simulations of large offshore wind farms to reduce financial investment risk in non-neutral stability conditions. This work incorporates three meteorologically established methods of calculating stability conditions into CFD simulations of large offshore wind farms using the Monin-Obukhov Similarity Theory (MOST). As MOST ideally requires meteorological parameters measured on-site using a mast for extended periods of time to obtain even a small collection of validation data, alternative methods of describing atmospheric conditions and corresponding wake behaviour are investigated which only require data obtainable by LiDAR. This has the potential to reduce the length of data collection campaigns, whilst also using more flexible instruments and thus increasing cost efficiency. The <b>software</b> <b>front-end</b> <b>tool</b> Windmodeller, which drives the ANSYS CFX software, is used to benchmark four separate two-equation turbulence models, each assuming neutral atmospheric stability conditions. Production data from four European offshore wind farms are used for validation purposes. Of these models, the Shear Stress Transport (SST) model consistently performed the worst, whilst modifying the RANS turbulence constant, 1 ̆d 4361 ̆d 707, only alters the location within a line of turbines where the standard 1 ̆d 458 - 1 ̆d 700 model was most accurate. The unsteady RANS model variation, which incorporates both the Coriolis effect and a stably stratified capping layer, was found III to have the smallest root-mean-squared error values for the largest wind farm and so was chosen to form the basis of the simulations incorporating atmospheric stability. The Obukhov Length required for MOST is incorporated into the CFD simulations using surface fluxes, water temperatures and atmospheric thermal gradients. There are only small variations in simulation accuracy between methods when simulating Neutral conditions, with the thermal gradient method performing best. Under stable conditions the sea surface temperature approach is most accurate, although it is also the least accurate under unstable conditions and was unable to generate the more extreme Unstable conditions. Although the flux method was less accurate than the gradient method in absolute terms, the variance of its errors at individual turbine locations was consistently smaller. The validation process for using MOST techniques was complicated by a lack of sufficient field data after the rigorous filtering required by the theory’s assumptions. The preliminary work using alternative methods of describing atmospheric conditions within CFD simulations did not suffer from a lack of validation data, but was unsuccessful at maintaining the required wind shear profiles across the whole domain. Recommendations are made to improve control over these parameters with models such as unsteady RANS, and to find a suitable successor to the actuator disc theory now wind shear values across a turbine are becoming significant...|$|E
5000|$|Creating single-page {{application}} {{with use}} of <b>front-end</b> <b>tools</b> such as EmberJS, ReactJS or AngularJS ...|$|R
5000|$|A {{number of}} {{different}} package management systems (known as back-ends) support different abstract methods and signals used by the <b>front-end</b> <b>tools.</b> Back-ends supported include: ...|$|R
5000|$|Back-end tools pick {{up where}} the <b>front-end</b> <b>tools</b> leave off, and provide a set of {{reusable}} services that are centrally managed and controlled and provide the following abilities: ...|$|R
5000|$|Data Display Debugger (DDD), a Motif (<b>software)</b> {{debugger}} <b>front-end</b> ...|$|R
50|$|ICC {{provides}} the proprietary Windows BlitzIn software, currently at version 3.11, and the Dasher program, currently at version 1.5.8. There are other <b>software</b> <b>front-ends</b> which {{work with the}} ICC system including those for the Macintosh and iPad. Along with other major chess sites, ICC has sophisticated methods to detect computer cheating.|$|R
5000|$|Because the {{database}} hides this implementation from <b>front-end</b> <b>tools</b> (i.e., {{a report that}} attempts to retrieve data from non-existent cells merely sees [...] "null" [...] values), the full hypercube can be navigated naturally, {{and it is possible}} to load values into any cell interactively.|$|R
50|$|This {{approach}} {{has a major}} drawback in that the cube cannot be treated for calculation purposes as a single large hypercube, because aggregate values cannot be directly controlled, so write-back from <b>front-end</b> <b>tools</b> is limited, and complex calculations that cannot be expressed as MDX expressions are not possible.|$|R
5000|$|Open source <b>front-ends</b> and <b>tools</b> for {{administering}} PostgreSQL include: ...|$|R
40|$|AbstractThis note briefly {{discusses}} {{how some}} of the ideas developed in the theory of coalgebras are used in a <b>front-end</b> <b>tool</b> called LOOP, developed jointly in Dresden and Nijmegen, for reasoning (with a back-end theorem prover) about classes in object-oriented languages. It will describe reasoning both about object-oriented specifications and about JAVA implementations, via examples...|$|R
50|$|In {{the design}} {{synthesis}} role (transformation of a hardware-design description into a gate-netlist), SystemVerilog adoption has been slow. Many design teams use design flows which involve multiple tools from different vendors. Most design teams cannot migrate to SystemVerilog RTL-design until their entire <b>front-end</b> <b>tool</b> suite (linters, formal verification and automated test structure generators) support {{a common language}} subset.|$|R
40|$|A formal {{language}} ccsl is introduced for describing specifications of classes in object-oriented languages. We show how class specifications in ccsl {{can be translated}} into higher order logic. This allows us to reason about these specifications. In particular, it allows us (1) to describe (various) implementations of a particular class specification, (2) to develop the logical theory of a specific class specification, and (3) to establish refinements between two class specifications. We use the (dependently typed) higher order logic of the proof-assistant pvs, {{so that we have}} extensive tool support for reasoning about class specifications. Moreover, we describe our own <b>front-end</b> <b>tool</b> to pvs, which generates from ccsl class specifications appropriate pvs theories and proofs of some elementary results. Keywords: object-orientation, specification, higher order logic, proof assistant, <b>front-end</b> <b>tool,</b> coalgebra. Classification: 68 Q 60, 68 Q 65, 68 T 15, 03 B 70 (AMS' 91); F. 3. 1, D. 1. 5, D. 2. 2 ( [...] ...|$|R
40|$|Actor-based {{modeling}} {{is known}} to be an appropriate approach for representing concurrent and distributed systems. Rebeca is an actor-based language with a formal foundation, based on an operational interpretation of the actor model. We develop a <b>front-end</b> <b>tool</b> for translating a subset of Rebeca to SMV in order to model check Rebeca models. Automated modular verification and abstraction techniques are supported by the tool...|$|R
5000|$|... /Files/ - Files hold {{structured}} {{data that are}} used by programs but that {{are not part of}} the programs themselves. Those files are usually stand-alone entities like fonts, codecs, and plugins (and as such, supposedly do not require package management). Additionally, each program may define subdirectories of its own to store site-specific data; for instance, Compile (the GoboLinux package compilation <b>front-end</b> <b>tool)</b> does this.|$|R
30|$|We {{obtained}} site-specific climate data {{using the}} software package ClimateEU (Hamann et al. 2013; Wang et al. 2012; available for download at [URL] This <b>software</b> <b>front-end</b> for interpolated climate databases, generated with the Parameter-elevation Regressions on Independent Slopes Model (PRISM) (Daly et al. 2008), allows to query 84 historical monthly, seasonal and annual climate variables {{for the years}} 1901 - 2009. An overview of all queried variables is provided as supplementary material (Additional file 1 : Table S 1).|$|R
5000|$|<b>Front-end</b> {{development}} <b>tools</b> {{are focused}} on the user interface and user experience (UI-UX) and provide the following abilities: ...|$|R
40|$|Custom {{computing}} involves customising computations {{for one or}} more {{applications in}} a given implementation technology. We describe a framework for customising designs using appropriate libraries, compilers, validation facilities, application programming interfaces and <b>front-end</b> <b>tools.</b> The development of custom architectures, data formats and operations is presented. We show how circuits can be customised at run time to adapt {{to changes in the}} operating conditions. Graphics examples are used throughout the paper to illustrate our approach. ...|$|R
40|$|Presented at the 16 th International Conference on Auditory Display (ICAD 2010) on June 9 - 15, 2010 in Washington, DC. Versum is an advanced, {{interactive}} 3 D audiovisual composition environment {{which is}} augmented with a hardware and <b>software</b> <b>front-end</b> system that maps data {{into the environment}} {{for the purposes of}} exploratory scientific analysis. Originally intended as an audiovisual sequencer for real-time or automatable music and video performance, Versum also provides a unique environment for systematically investigating new data mappings for optimized human cognition of complex datasets...|$|R
40|$|HW/SW {{co-design}} from executable C-language specification is {{an accepted}} approach by many co-design research teams and commercial EDA tool-kit vendors. In this paper an alternative methodology for <b>software</b> <b>front-end</b> analysis for HW/SW co-design system is proposed. Our hierarchical analysis approach is basedonbranch and bound methodology, where analysis and selection steps are alternated until extracting exact bottlenecks in the software. Analysis {{of the source}} code is done dynamically using profiling as well as statically. The results of applying our methodology to analysis of gzip and JPEG-encoder/decoder engine packages are provided...|$|R
5000|$|Mental Ray was {{designed}} to be integrated into a third-party application using an API or be used as a standalone program using the [...]mi scene file format for batch-mode rendering. Currently there are many programs integrating it such as Autodesk Maya, 3D Studio Max, AutoCAD, Cinema 4D and Revit, Softimage&#124;XSI, Side Effects Software's Houdini, SolidWorks and Dassault Systèmes' CATIA. Most of these <b>software</b> <b>front-ends</b> provide their own library of custom shaders (described below). However assuming these shaders are available to mental ray, any mi file can be rendered, regardless of the software that generated it.|$|R
40|$|We {{present the}} first {{results of a}} project called LOOP, on formal methods for the {{object-oriented}} language Java. It aims at verification of program properties, with support of modern tools. We use our own <b>front-end</b> <b>tool</b> (which is still partly under construction) for translating Java classes into higher order logic, and a back-end theorem prover (namely PVS, developed at SRI) for reasoning. In several examples we demonstrate how non-trivial properties of Java programs and classes can be proven following this two-step approach...|$|R
50|$|Akula is a {{fully open}} mobile {{application}} platform that enables IT departments to secure, manage and control mobile applications. It is a Mobile App Server {{that can be}} deployed on-premises or in the cloud, and its open and extensible design allows users to easily and rapidly develop, deploy and manage multiple mobile applications. Akula integrates with enterprise infrastructure, extending SOA to mobile devices. This structure enables development teams to create a user experience using the <b>front-end</b> <b>tools</b> and frameworks of their choice.|$|R
40|$|Open Mathematical Engine Interface (OMEI) aims to {{establish}} a uniform application programming interface specification (API) for heterogeneous mathematical computation systems. OMEI can play {{an essential role in}} making mathematical engines easily accessible by <b>front-ends,</b> <b>tools,</b> and servers. The interface enables the development of individual applications that can serve di#erent engines. The motivation, application framework, specification, usage scenarios, and Java implementation for OMEI are presented. An application of OMEI to connect Starfish with MAXIMA is described. Keywords: API, OMEI, Mathematical Compute Engine, Internet, IAMC...|$|R
40|$|Abstract: Formal {{verification}} {{techniques are}} used to obtain correct and reliable systems. In this paper we use the actor-based language, Rebeca, for modeling the CSMA/CD Protocol. In Rebeca, each component in the system is modeled as a reactive object. Reactive objects are encapsulated, with no shared variables, communicating via asynchronous message passing. Rebeca Verifier is a <b>front-end</b> <b>tool,</b> used for translating Rebeca code to the languages of existing model checkers. Different versions of CSMA/CD protocol are model checked {{and the results are}} summarized...|$|R
40|$|MODE-FE (MODE Front-End) {{is part of}} the MODE (Managed Object Development Environment) {{prototype}} {{which is}} developed for integrating the use of Formal Description Techniques in an environment for building Management applications. MODE-FE provides a GRM (General Relationship Model) and GDMO (Guidelines for the Definition of Managed Objects) parser. The package offers specification checking and an Application Programming interface for manipulating loaded GDMO and GRM specifications. This document is the reference manual for release 1. 0 of the MODE-FE (MODE <b>Front-End)</b> <b>tool</b> and its API...|$|R
50|$|Today, dselect {{is largely}} {{superseded}} by Advanced Packaging <b>Tool</b> <b>front-ends.</b>|$|R
40|$|Web {{services}} {{are in the}} midst of making the transition from being a promising technology to being widely used in the industry. However, most efforts to use Web services have been manual, thus slowing down the ever changing and dynamic businesses of today. In this paper, we contend that more expressive descriptions of Web services will lead to greater automation and thus provide more agility to businesses. We present the METEOR-S <b>front-end</b> <b>tools</b> for source code annotation and semantic Web service description generation. We also present WSDL-S, a language created for incorporating semantic descriptions in the industry wide accepted WSDL, by extending WSD...|$|R
40|$|We are {{developing}} software {{to explore the}} fault tolerance of quantum dot cellular automata gate architectures {{in the presence of}} manufacturing variations and device defects. The Topology Optimization Methodology using Applied Statistics (TOMAS) framework extends the capabilities of the A Quantum Interconnected Network Array Simulator (AQUINAS) by adding <b>front-end</b> and back-end <b>software</b> and creating an environment that integrates all of these components. The <b>front-end</b> <b>tools</b> establish all simulation parameters, configure the simulation system, automate the Monte Carlo generation of simulation files, and execute the simulation of these files. The back-end tools perform automated data parsing, statistical analysis and report generation...|$|R
40|$|In {{a modern}} {{printing}} plant software systems are ubiquitous and indispensable. Systems for order management, production planning, and other administrative systems are implemented in software. Most, if not all, equipment {{on the plant}} floor has a <b>software</b> <b>front-end</b> that either controls the physical equipment directly or displays instructions for a human operator to interpret and execute. These software systems are not isolated islands. During production they need to communicate and exchange information. For example, a prepress workflow system may send configuration parameters to production equipment and production equipment may send status updates to production monitoring systems. This type of communication is typically implemented by sending messages, discrete units of data, between the systems...|$|R
40|$|Abstract: Actor-based modeling, with {{encapsulated}} active objects which communicate asynchronously, {{is generally}} recognized to be well-suited for representing concurrent and distributed systems. In this {{paper we discuss}} the actor-based language Rebeca {{which is based on}} a formal operational interpretation of the actor model. Its Java-like syntax and object-based style of modeling makes it easy to use for software engineers, and its independent objects as units of concurrency leads to natural abstraction techniques necessary for model checking. We present a <b>front-end</b> <b>tool</b> for translating Rebeca to the languages of existing model checkers in order to model check Rebeca models. Automated modular verification and abstraction techniques are supported by the tool...|$|R
40|$|This paper mainly {{describes}} {{the architecture of}} a very small size high speed fuzzy chip with two inputs and one output. In particular, an input data set rate of 80 ns is obtained by means of 4 clock pipeline cycles synchronized with a 50 MHz signal. In addition the chip architecture processes only the actives rules by a parallel-pipeline structure. The design has been done using VHDL language as <b>front-end</b> <b>tool</b> and CAD layout utilities as back-end ones. Moreover, by means of cell-based digital 0. 7 μ m CMOS ES 2 technology library, the VHDL synthesis and layout design has produced a chip area of about 10 square mm...|$|R
5000|$|Operational {{historians are}} like {{enterprise}} historians but differ {{in that they}} are used by engineers on the plant floor rather than by business processes. They are typically cheaper, lighter in weight, and easier to use and reconfigure than enterprise historians. Having an operational historian enables [...] "at the source" [...] analysis of the historical data that is not typically possible with enterprise historians.Typically, these applications offer two layers of data access: through a dedicated SDK(Software Development Kit)(sometimes in two different flavours: full administration API(Application Programming Interface) and high-speed read/write API), as well as user <b>front-end</b> <b>tools</b> (for instance, administration panels, engineering consoles or portal-like web clients).|$|R
5000|$|... {{some parts}} of the FastMail web {{software}} have been released as free, open-source <b>software.</b> The <b>front-end</b> JavaScript library is released as Overture JS and the rich-text editor as Squire. The data model and various client code was donated to Roundcube for its JMAP implementation.|$|R
5000|$|AMIX {{struggled}} {{to create the}} infrastructure required to establish an online exchange in an era before the web and the ready availability of online tools, higher bandwidth and graphic interfaces. It {{has an opportunity to}} connect to the young Internet in 1991-92, but opted to continue its modem-based system using a proprietary IBM PC <b>software</b> <b>front-end</b> instead, feeling that most of its potential users would not be on the Internet yet. AMIX folded in 1993 after Salin died and it was unable to raise additional venture capital. In 1999 Doc Searls told Salon about the challenges Salin faced, [...] "Phil had to create his own Internet. In hindsight, it couldn't be done ... The time really is now. It wasn't then, much as we wanted it to be." ...|$|R
40|$|In Data Mining we tend {{to focus}} on the sexy <b>front-end</b> <b>tools,</b> the built in procedures, and canned routines. These have {{certainly}} been optimized for us, and in any case, we will need {{to do whatever it takes}} to produce final results. Unfortunately the less visible part of the job- data preparation- can take up to 75 % of the effort. Further, we sometimes have to create our own procedures. Because of this, writing efficient programs should be important to all of us. We will suggest here how to do that without losing sight of our main analysis. ______________________ Introduction – So Much Data, So Little Time Data miners are busy people. When not interactin...|$|R
40|$|The system ICGS (I-card {{generating}} system) {{is based}} on computerization of Student identity card generation system. To develop this project <b>front-end</b> <b>tool</b> as VISUAL STUDIO 2005 & back-end tool as relational database 1 has been used. Using this software user can easily print student identity information along with a unique barcode in a uniform format. Even a user can reprint an identity card instantly if needed from previously stored records. The system enables a good user-interface for the user to maintain the records. It will also provide a permanent database and this will help to store the student identity information in an error free and non redundant way along with better option for maintaining the records. Keywords...|$|R
