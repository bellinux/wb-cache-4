11|52|Public
5000|$|The {{symbolic}} constants, whose {{values were}} fixed and defined, and data structure {{definitions of the}} programmatic interface were defined in the [...] <b>system</b> <b>header.</b>|$|E
50|$|In C files do {{not exist}} as a {{built-in}} type (they are defined in a <b>system</b> <b>header)</b> and all I/O takes place via library calls. Pascal has file handling built into the language.|$|E
5000|$|...r (--relative-only): Only output {{information}} about source files with a relative pathname (after source prefix elision). Absolute paths are usually <b>system</b> <b>header</b> files and coverage of any inline functions therein is normally uninteresting.|$|E
50|$|The {{implementation}} of Windows <b>system</b> <b>headers</b> and static import libraries are released under a permissive license, while the GNU ports are provided under the GNU General Public License. Binary downloads {{of both the}} complete MSYS package and individual MinGW GNU utilities {{are available from the}} MinGW site.|$|R
5000|$|... #Caption: Aftermarket exhaust <b>system</b> {{including}} <b>headers</b> {{and a white}} plasma-sprayed {{ceramic coating}} ...|$|R
2500|$|... man manual {{pages for}} each command, library component, <b>system</b> call, <b>header</b> file, etc.|$|R
50|$|The {{declaration}} of ports must have global scope and each port must specify {{whether it is}} inputting or outputting, and is assigned a fixed value to specify which pins it corresponds to. These values are defined as macros in a <b>system</b> <b>header</b> file (xs1.h).|$|E
5000|$|... is {{specified}} in POSIX.1-2001 and the Single Unix Specification, version 2, {{but not all}} Unix-like operating systems provide them. Citing portability concerns, POSIX.1-2004 obsoleted these functions, and in POSIX.1-2008 they were removed, and POSIX Threads recommended. The functions and associated types are defined in the [...] <b>system</b> <b>header</b> file. This includes the [...] type, with which all four functions operate: ...|$|E
5000|$|Oil mist {{lubrication}} oils {{are applied to}} rolling element (antifriction) bearings as an oil mist. Neither oil rings nor constant level lubricators are used in pumps and drivers connected to plant-wide oil mist systems. Oil mist is an atomized amount of oil carried or suspended in a volume of pressurized dry air. The oil mist, actually a ratio of one volume of oil suspended or carried in 200,000 volumes of clean, dry air, moves in a piping <b>system</b> (<b>header).</b> The point of origin is usually a mixing valve (the oil mist generator), connected to this header. Branch lines often feed oil mist to hundreds of rolling elements in the many pumps and drivers connected to a plant-wide system.|$|E
40|$|A {{system for}} {{capturing}} complete cell level header and timing information for bi-directional ATM- 25 links is described. The system {{is able to}} measure and synchronise multiple links simultaneously. Off the shelf ATM- 25 NIC equipment and standard PCs are used giving a very low cost <b>system.</b> <b>Headers</b> for all cells are captured to disk and timing is accurate to sub-microsecond times. Measurements of video, file transfer traffic and artificially generated traffic are reported. Future extensions of the system to higher bit rates and optical links are briefly discussed...|$|R
40|$|Figure 1896. 1 : Number {{of times}} the same header was #included during the {{translation}} of a single translation unit. The crosses denote all headers (i. e., all <b>systems</b> <b>headers</b> are counted), triangles denote all headers delimited by quotes (i. e., likely to be user defined headers) and bullets denote all quote delimited headers #include nested at least three levels deep. Based on the translated form of this book’s benchmark programs. 6. 10. 2 Source file inclusion Constraints source file inclusion footnote 153 #include 1909 mapping to host file source file representatio...|$|R
5000|$|Base Definitions (XBD) - {{a list of}} {{definitions}} and conventions used in the specifications {{and a list of}} C header files which must be provided by compliant <b>systems.</b> 84 <b>header</b> files in total are provided.|$|R
50|$|Stewart and Amon {{qualified}} {{their cars}} in {{first and second}} place on the grid, respectively. Andretti had damaged the rear of his car during a private test session {{the day before the}} first official session and the process of repairing it and sourcing a spare engine meant that he missed the first two timed practices. He started from 11th. Just ahead of him on the grid was Siffert in ninth position, while Servoz-Gavin was two rows behind the American, starting from 17th position. In the early portion of the race Stewart's car lead for many laps, but this was largely owing to his opposition being impeded and put out of position due to a first corner spin by Jochen Rindt. Once Jack Brabham's Brabham and Denny Hulme in a McLaren had cleared the confusion they began to whittle down Stewart's lead. Brabham passed Stewart on the 20th lap of the race, as did Hulme on lap 38, and the reigning World Champion eventually finished in third place. Amon and Andretti both suffered from severe overheating following failures of their cars' cooling <b>system</b> <b>header</b> tanks, and they retired after two and 11 laps, respectively. Siffert was running in the top ten in the early portion of the race, but while dicing with Jacky Ickx and Jean-Pierre Beltoise for fifth position he spun and crushed his car's right exhaust pipe. The time he lost in the pits having the damage repaired pushed him well down the field and he eventually finished five laps down on the leaders, in tenth place. Servoz-Gavin's engine failed on lap 57, also following the loss of his coolant fluid, and he retired.|$|E
30|$|All of the {{literature}} on IEEE 802.16 j amendment[5] reviewed thus far concentrated on in-band relaying. As discussed in[6], the WiMAX subframes are further subdivided to provide the bandwidth for communications between the relay nodes and the subscriber nodes served by them. However, this is still subdividing a scarce resource (the WiMAX bandwidth). Furthermore, as the RSs are using the same frequencies with one another, interference starts becoming a problem (particularly if the RSs are moving and close to each other). In addition, particularly if non-transparent relaying is used, the RSs produce an additional set of <b>system</b> <b>header</b> messages. The WiMAX link can be identified as the scarcest bandwidth link in the system, and the one that must be optimized as much as possible.|$|E
40|$|Suplemento de Investigación Pesquera. [...] 12 páginas, 3 cuadrosDuring {{the cruise}} Atlor V (Apri-May 1975, {{in the west}} coast of Spanish Sahara) 21 fishing hauls were carried out. Ninenteen of them were bottom trawls (using two {{commercial}} standard nets, with 40 and 48 mm size at code-end, mesured by ICNAF method, added with a cover of 10 mm mesh size), and two were IKMT sets. In the present report the methodology employed is described. Catches were subsampled under prestabilished conditions: a) species composition (number, weigts and relatives abundances for all species); b) length frecuencies distribution; and c) biological data from selected species (length, weight, sex maturity, age, stomachal contents, etc). Data from c) is not reported by the moment. Special deck annotaton sheets were used when picking up data. These sheets-at {{the end of the study}} of each haul-were directly punched in cards and entered to the DBP <b>system.</b> <b>Header</b> cards of DBP system included non biological data, as data, timing, situation, depth, weather, etc. A general table of species presences for the bottom trwals is reported. A total of 159 different species were identified. Peer reviewe...|$|E
5000|$|The mail <b>system</b> should retain <b>headers</b> of {{incoming}} email while performing {{any type of}} auto-forwarding operation.|$|R
50|$|The <b>System</b> Partition <b>header</b> is at track 26, sectors 5, 8, 9, 10, and 11. Sector 5 is the Device Information Block, {{which is}} $FF filled {{except in a}} few {{specific}} places. Sectors 8 to 11 contain the System Partition Directory.|$|R
5000|$|MinGW was {{originally}} called mingw32 (Minimalist GNU for W32), following the GNU convention whereby Windows is shortened as [...] "W32". The numbers were dropped {{in order to}} avoid the implication that it would be limited to producing 32-bit binaries. Colin Peters authored the initial release in 1998, consisting only of a Cygwin port of GCC. Jan-Jaap van der Heijden created a Windows-native port of GCC and added binutils and make. Mumit Khan later took over development, adding more Windows-specific features to the package, including the Windows <b>system</b> <b>headers</b> by Anders Norlander. In 2000, the project was moved to SourceForge.net in order to solicit more assistance from the community and centralize its development.|$|R
40|$|The {{purpose of}} this paper is to discuss interprocess {{communication}} in the context of Berkeley UNIX. Special emphasis will be given to those system calls concerned with the creation, management, and use of sockets. There will also be a discussion of signals and selected other system calls that will be useful to those working on the network project assigned for this course. More information on all the system calls mentioned below can be found in the UNIX Programmer’s Manual. Periodic mention will be made of other manual page entries that might be consulted. <b>System</b> <b>header</b> files are designated by enclosing angle brackets; they reside in /usr/include and its subdirectories. 1. Socket Creation The most general mechanism for interprocess communication offered by Berkeley UNIX is the socket. A socket is an endpoint for communication. Two processes can communicate by creating sockets and sending messages between them. There are a variety of different types of sockets, differing in the way the address space of the sockets is defined and the kind of communication that is allowed between sockets. A socket type is uniquely determined by a triple. In order for a remote socket to be reached, it must be possible to assign a name to it. The form that this name assumes is determined by the communication domain or address family to which the socket belongs. There is also an abstract type or style of communication associated with each socket. This dictates the semantics of communication for that socket. Finally, there is a specific protocol that is used wit...|$|E
40|$|This {{quarterly}} report documents significant achievements in the Enhanced Practical Photosynthetic CO{sub 2 } Mitigation project {{during the period}} from 4 / 2 / 2001 through 7 / 01 / 2002. Most of the achievements are milestones in our efforts to complete the tasks and subtasks that constitute the project objectives, and we are currently on schedule to complete Phase I activities by 10 / 2002, the milestone date from the original project timeline. As indicated in the list of accomplishments below, our efforts are focused on improving the design of the bioreactor test system, evaluating candidate organisms and growth surfaces, and scaling-up the test facilities from bench scale to pilot scale. Specific results and accomplishments for the second quarter of 2002 include: Organisms and Growth Surfaces: (1) Our collection of cyanobacteria, isolated in YNP was increased to 15 unialgal cultures. (2) Illumination rate about 50 {micro}E/m{sup 2 }/sec is not saturated for the growth of 1. 2 s. c. (2) isolate. The decrease of illumination rate led to the decrease of doubling time of this isolate. (3) The positive effect of Ca{sup 2 +} on the growth of isolate 1. 2 s. c. (2) without Omnisil was revealed, though Ca{sup 2 +} addition was indifferent for the growth of this isolate at the presence of Omnisil. (4) Calcium addition had a positive effect on the generation of cyanobacterial biofilm on Omnisil surface. (5) The survivability problems with the Tr 9. 4 organism on Omnisil screens in the CRF 2 model-scale bioreactor have been solved. The problems were related to the method used to populate the growth surfaces. When pre-populated screens were placed in the bioreactor the microalgae died within 72 hours, but when the microalgae were cultured while in place in the bioreactor using a continuous-population method they grew well inside of the CRF 2 test system and survived for the full 7 -day test duration. CRF 2 tests will continue as soon as the new combined drip system/harvesting <b>system</b> <b>header</b> pipe design is refined. Bioreactor support systems and test facilities: (1) A solar collector, fiber optic light cables, and 8 light distribution panels have been installed at the pilot-scale bioreactor site. The ''natural'' lighting system is ready for the pilot-scale bioreactor system-level debugging tests scheduled for early to mid July. (2) CO{sub 2 } scrubbing tests were carried out to understand the CO{sub 2 } scrubbing capability of translating slug flow under various conditions. Within experimental error, for liquid velocities of 0. 6 m/s and 1 m/s it was shown that different gas velocities (including 4. 8, 6. 6 and 9 m/s) cause no significant change in CO{sub 2 } concentration. (3) The harvesting tests were put on hold while an alternative loading method was developed and to concentrate our resources on the design of the new combined drip system/harvesting <b>system</b> <b>header</b> pipe. A new header pipe design has been completed and proof-of-concept tests have shown good performance in the drip loading mode. Tests have also shown that we can create preferable conditions for harvesting with this design, and actual harvesting tests will be run as soon as screens are available that have achieved a sufficiently ''thick'' growth state such that harvesting is desired...|$|E
25|$|The reactor is {{equipped}} with an emergency core cooling system (ECCS), consisting of dedicated water reserve tank, hydraulic accumulators, and pumps. ECCS piping is integrated with the normal reactor cooling system. In case of total loss of power, the ECCS pumps {{are supposed to be}} powered by the rotational momentum of the turbogenerator rotor for the time before the diesel generators come online. The Chernobyl disaster occurred during a botched test of this system. The ECCS has three systems, connected to the coolant <b>system</b> <b>headers.</b> In case of damage, the first ECCS subsystem provides cooling for up to 100 seconds to the damaged half of the coolant circuit (the other half is cooled by the main circulation pumps), and the other two subsystems then handle long-term cooling of the reactor.|$|R
5000|$|On Mac OS X, the Xcode build <b>system</b> generates prefix <b>headers</b> {{automatically}} for new projects. A new Cocoa project, for instance, gets a prefix header {{that looks}} like this: ...|$|R
50|$|For most cars, air {{induction}} {{to the point}} where the air meets either the carburetor or mass air flow sensor is unrestricted by the rules, so cars may be prepared with improved air intakes. Exhaust systems are also unrestricted, so exhaust <b>systems</b> including <b>headers</b> may be modified. Cars may have to remain under a maximum noise level, so mufflers might still be needed.|$|R
40|$|A {{system for}} {{capturing}} complete cell level header and timing information for bi-directional ATM- 25 links is described. The system {{is able to}} measure and synchronise multiple links simultaneously. Off the shelf ATM- 25 NIC equipment and standard PCs are used giving a very low cost <b>system.</b> <b>Headers</b> for all cells are captured to disk and timing is accurate to sub-microsecond times. Measurements of video, file transfer traffic and artificially generated traffic are reported. Future extensions of the system to higher bit rates and optical links are briefly discussed. Appendix A: Measurements of ATM- 25 Traffic 2 1. Introduction ATM is a new cell based network standard [ATM, 1993] that is gaining wide commercial acceptance. ATM {{has been designed to}} provide acceptable performance over a wide range of different applications including voice, video and data traffic. From a commercial point of view ATM has the advantage that it is capable of supporting many different physical layers operating at [...] ...|$|R
50|$|The Cheetah's chassis was {{constructed}} of Drawn Over Mandrel (DOM) cro-moly tubing that was heliarc welded (more {{commonly referred to}} as TIG or tungsten inert gas welding) using a P&H Mining DAR-200 welder. The design of the car was unusual in that it was front engined, but with the engine sitting so far back in the chassis that the output yoke of the transmission connected directly to the input yoke on the differential, basically making the driveshaft only a universal joint linking the transmission with the differential. With the engine positioned in this manner, the driver's legs were beside the engine. The exhaust <b>system</b> <b>headers</b> passed {{over the top of the}} driver's and passenger's legs. The tops of the footboxes were curved to make room for Edmunds' handmade headers. This design takes the attributes of what is known as an FRM layout to an extreme. Consequently, this design gave a front/rear weight distribution roughly approximating a mid-engined vehicle without the cost of an expensive transaxle arrangement. This design style resulted in a hot driver's compartment - an issue that would impact the Cheetah's performance on the track.|$|R
50|$|The {{alternative}} method of working the coal was the longwall <b>system.</b> Two <b>headers</b> were driven {{forward to the}} far end of the district and an interconnecting passageway excavated. The passageway was supported by props and the long wall on the shaft side of the passage excavated. As this wall retreated the roof was propped and the furthermost props removed, allowing the overburden to collapse into the goaf. With longwall the same fracturing and gas release that stooping could cause was always present.|$|R
40|$|To improve {{security}} awareness of end-user, we designed and implemented the visualization <b>system</b> of packet <b>header</b> {{that represent the}} condition of network communication. We implemented our systems using Microsoft Visual Studio 2005 with Winpcap library and the development traffic, protocol and the time it captured a packet...|$|R
50|$|The {{released}} {{gases and}} liquids are routed through large piping <b>systems</b> called flare <b>headers</b> to a vertical elevated flare. The released gases are burned as they exit the flare stacks. The size and {{brightness of the}} resulting flame depends upon the flammable material's flow rate in joules per hour (or btu per hour).|$|R
40|$|Studying the <b>system</b> of pipe <b>header</b> telemechanics on {{the basis}} of {{communication}} network of GSM standard has been covered, the results of experiments for two services of GSM have been given. The way of increasing system response speed is suggested and GSM is compared with other services applied at the present in pipe <b>header</b> telemechanics <b>system...</b>|$|R
30|$|In a single-input single-output (SISO) WLAN <b>system,</b> the <b>header</b> of each {{transmitted}} frame can be ideally decoded by any node {{which is}} in the communication range of the transmitter. Accordingly nodes within a WLAN learn about an ongoing transmission by decoding the headers which include the duration field. However, the situation changes in a CB-CSMA/CA system, where several frames might be transmitted in parallel. The system is structured {{in such a way that}} each destination is able to decode its intended packet's header as well as its payload. However, other nodes in the network may not be able to do so. In order to solve this problem, a cluster common preamble should be sent prior to the data transmission.|$|R
40|$|Context: Mutation {{testing has}} been mainly {{analyzed}} regarding traditional mutation operators involving structured programming constructs common in mainstream languages, but mutations at the class level {{have not been}} assessed to the same extent. This fact is noteworthy {{in the case of}} C++, despite being one of the most relevant languages including object-oriented features. Objective: This paper provides a complete evaluation of class operators for the C++ programming language. MuCPP, a new system devoted to the application of mutation testing to this language, was developed to this end. This mutation system implements class mutation operators in a robust way, dealing with the inherent complexity of the language. Method: MuCPP generates the mutants by traversing the abstract syntax tree of each translation unit with the Clang API, and stores mutants as branches in the Git version control system. The tool is able to detect duplicate mutants, avoid <b>system</b> <b>headers,</b> and drive the compilation process. Then, MuCPP is used to conduct experiments with several open-source C++ programs. Results: The improvement rules listed in this paper to reduce unproductive class mutants have a significant impact in the computational cost of the technique. We also calculate the quantity and distribution of mutants generated with class operators, which generate far fewer mutants than their traditional counterparts. Conclusions: We show that the tests accompanying these programs cannot detect faults related to particular object-oriented features of C++. In order to increase the mutation score, we create new test scenarios to kill the surviving class mutants for all the applications. The results confirm that, while traditional mutation operators are still needed, class operators can complement them and help testers further improve the test suite...|$|R
50|$|Extraction wells {{are placed}} within the {{electrode}} array {{in order to}} maximize the recovery of the volatilizing hydrocarbons and are designed to control the groundwater to minimize the potential for offsite migration of the mobilized contaminant. Extraction wells are connected to an extraction header pipe, which is connected to the extraction system. Depending on the contaminant of concern either steel or an approved thermoplastic can be used in the <b>header</b> <b>system.</b>|$|R
40|$|This paper {{presents}} {{the architecture of}} PIER, an Internetscale query engine we have been building {{over the last three}} years. PIER is the first general-purpose relational query processor targeted at a peer-to-peer (p 2 p) architecture of thousands or millions of participating nodes on the Internet. It supports massively distributed, database-style dataflows for snapshot and continuous queries. It is intended to serve as a building block for a diverse set of Internet-scale informationcentric applications, particularly those that tap into the standardized data readily available on networked machines, including packet <b>headers,</b> <b>system</b> logs, and file name...|$|R
2500|$|The {{engine oil}} tanks {{were in the}} engine nacelles. Each nacelle {{contained}} a [...] oil tank, including a [...] air space. The oil tanks themselves had no separate coolant controlling <b>systems.</b> The coolant <b>header</b> tank was in the forward nacelle, behind the propeller. The remaining coolant systems were controlled by the coolant radiators shutters in the forward inner wing compartment, between the nacelle and the fuselage and behind the main engine cooling radiators, which were fitted in the leading edge. Electric-pneumatic operated radiator shutters directed and controlled airflow through the ducts and into the coolant valves, to predetermined temperatures.|$|R
40|$|We {{examine the}} effects of {{artificial}} light interference on optical <b>systems</b> employing dual <b>header</b> pulse interval modulation (DH-PIM). This interference can be reduced using high pass filtering (HPF). However, the HPF generates an interference called baseline wander. We study the effects of changing the HPF cut-on frequency in the absence and presence of multipath propagation. Results show that depending on the value of the HPF cut-on frequency, the severity of baseline wander will vary and thus there is a trade off between the extent of artificial light interference rejection and the severity of baseline wander. 1...|$|R
50|$|The {{engine oil}} tanks {{were in the}} engine nacelles. Each nacelle {{contained}} a 15 imp gal oil tank, including a 2.5 imp gal air space. The oil tanks themselves had no separate coolant controlling <b>systems.</b> The coolant <b>header</b> tank was in the forward nacelle, behind the propeller. The remaining coolant systems were controlled by the coolant radiators shutters in the forward inner wing compartment, between the nacelle and the fuselage and behind the main engine cooling radiators, which were fitted in the leading edge. Electric-pneumatic operated radiator shutters directed and controlled airflow through the ducts and into the coolant valves, to predetermined temperatures.|$|R
