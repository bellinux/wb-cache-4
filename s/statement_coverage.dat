82|53|Public
5000|$|Testing {{criterion}} (e.g.: path coverage, <b>statement</b> <b>coverage</b> etc.) ...|$|E
5000|$|Definitions of <b>Statement</b> <b>Coverage,</b> Decision Coverage, and Modified Condition/Decision Coverage (MC/DC) ...|$|E
5000|$|<b>Statement</b> <b>coverage,</b> which {{reports on}} the number of lines {{executed}} to complete the test ...|$|E
5000|$|... #Subtitle level 3: Works, artist's <b>statements</b> {{and press}} <b>coverage</b> ...|$|R
50|$|The Auditor General is not {{required}} to audit each of these organizations individually, but must develop a Financial <b>Statement</b> Audit <b>Coverage</b> Plan detailing the Office's level of involvement in the audit.|$|R
30|$|Differently from {{results for}} small applications, tests {{executed}} on Question Database resulted in higher <b>statement</b> and branch <b>coverage</b> in all OO implementations (see Table 15 and Figs. 8 and 9). For example, for the Time {{concern in the}} OO implementation, <b>statement</b> and branch <b>coverages</b> were 72.2 and 44.6 %, respectively, while the same measures for the AO version were 25.8 and 3.8 %. On average, <b>statement</b> and branch <b>coverage</b> in group A were 59.2 and 33.9 % for OO implementation and 24.1 and 4.3 % for the AO implementation, respectively. Similar results (in terms of higher coverage for OO implementation) are observed for group B.|$|R
5000|$|The {{techniques}} used in white box testing are condition coverage, decision coverage, <b>statement</b> <b>coverage,</b> cyclomatic complexity.|$|E
5000|$|<b>Statement</b> <b>coverage</b> {{for this}} {{function}} will be satisfied {{if it was}} called e.g. as , as in this case, every line in the function is executed including [...]|$|E
50|$|Some of the {{coverage}} criteria above are connected. For instance, path coverage implies decision, statement and entry/exit coverage. Decision coverage implies <b>statement</b> <b>coverage,</b> because every statement {{is part of a}} branch.|$|E
3000|$|<b>Statement</b> and branch <b>coverage</b> metrics are {{considered}} baseline coverage criteria. These metrics were calculated, using GCOV [...]...|$|R
50|$|Connections {{have been}} made between the FDR and Bayesian {{approaches}} (including empirical Bayes methods), thresholding wavelets coefficients and model selection, and generalizing the confidence interval into the False <b>coverage</b> <b>statement</b> rate (FCR).|$|R
40|$|Abstract—It {{is common}} belief that {{dataflow}} testing criteria {{are harder to}} satisfy than <b>statement</b> and branch <b>coverage.</b> As motivations, several researchers indicate the difficulty of finding test suites that exercise many dataflow relations and the increased impact of infeasible program paths on the maximum coverage rates that can be indeed obtained. Yet, although some examples are given in research papers, we lack data on the validity of these hypotheses. This paper presents an experiment with a large sample of object oriented classes and provides solid empirical evidence that dataflow coverage rates are steadily lower than <b>statement</b> and branch <b>coverage</b> rates, and that the uncovered dataflow elements do not generally depend on the feasibility of single statements. I...|$|R
5000|$|... 100% <b>statement</b> <b>coverage</b> {{ensures that}} all code paths or {{branches}} (in terms of control flow) are executed at least once. This is helpful in ensuring correct functionality, but not sufficient since the same code may process different inputs correctly or incorrectly.|$|E
50|$|Different {{coverage}} metrics {{are defined}} to assess that the design has been adequately exercised. These include functional coverage (has every functionality {{of the design}} been exercised?), <b>statement</b> <b>coverage</b> (has each line of HDL been exercised?), and branch coverage (has each direction of every branch been exercised?).|$|E
50|$|C/C++test {{includes}} {{options for}} line coverage, meaning has the line been executed, block coverage, <b>statement</b> <b>coverage,</b> path coverage, decision coverage, branch coverage, and simple condition coverage. It also supports modified condition/decision coverage or MCDC because projects that require safe reliable software such as aircraft and cars, tend to required {{this form of}} coverage as it's {{believed to be a}} better measure of whether or the code has been thoroughly exercised.|$|E
40|$|Functionally {{generated}} {{acceptance tests}} are examined using structural coverage metrics. A method of comparing acceptance tests and operational usage was generated. Acceptance tests are prepresentative of operational usage {{except for the}} mix of <b>statement</b> types. Structural <b>coverage</b> metrics may provide insight into software faults...|$|R
50|$|In {{hardware}} systems, dominators {{are used}} for computing signal probabilities for test generation, estimating switching activities for power and noise analysis, and selecting cut points in equivalence checking.In software systems, they {{are used for}} reducing {{the size of the}} test set in structural testing techniques such as <b>statement</b> and branch <b>coverage.</b>|$|R
40|$|Abstract — Prioritization of {{test cases}} is {{generally}} done {{to reduce the}} cost of regression testing. We prioritize our test cases so that those which are more important, by some measure, are made to run earlier in the testing phase. There exists a large variety of prioritization techniques in the literature, we have basically used coverage-based prioritization techniques (i. e., prioritization {{in terms of the number}} of <b>statements,</b> path <b>coverage,</b> branch coverage and fault coverage) controlling the field. A prioritized test suite which covers more than one coverage criteria is considered to be a stronger than those which cover only single coverage. The proposed method was empirically studied for bank application and the results show that the proposed work is more effective than the existing method...|$|R
50|$|Test {{engineers}} {{can look at}} code coverage test results to help them devise test cases and input or configuration sets that will increase the code coverage over vital functions. Two common forms of code coverage used by testers are statement (or line) coverage and branch (or edge) coverage. Line coverage reports on the execution footprint of testing in terms of which lines of code were executed to complete the test. Edge coverage reports which branches or code decision points were executed to complete the test. They both report a coverage metric, measured as a percentage. The meaning of this depends on what form(s) of code coverage have been used, as 67% branch coverage is more comprehensive than 67% <b>statement</b> <b>coverage.</b>|$|E
50|$|White-box {{testing is}} a method of testing the {{application}} {{at the level of}} the source code. These test cases are derived through the use of the design techniques mentioned above: control flow testing, data flow testing, branch testing, path testing, <b>statement</b> <b>coverage</b> and decision coverage as well as modified condition/decision coverage. White-box testing is the use of these techniques as guidelines to create an error free environment by examining any fragile code. These White-box testing techniques are the building blocks of white-box testing, whose essence is the careful testing of the application at the source code level to prevent any hidden errors later on. These different techniques exercise every visible path of the source code to minimize errors and create an error-free environment. The whole point of white-box testing is the ability to know which line of the code is being executed and being able to identify what the correct output should be.|$|E
40|$|Evaluation of <b>statement</b> <b>coverage</b> is {{the problem}} of {{identifying}} the statements of a program that execute in one or more runs of a program. The traditional approach for <b>statement</b> <b>coverage</b> tools is to use static code instrumentation. In this paper we present a new approach to dynamically insert and remove instrumentation code to reduce the runtime overhead of <b>statement</b> <b>coverage</b> measurement. We also explore the use of dominator tree information {{to reduce the number of}} instrumentation points needed. Our experiments show that our approach reduces runtime overhead by 38 - 90 % compared with purecov, a commercial <b>statement</b> <b>coverage</b> tool. Our tool is fully automated and available for download from the Internet. 1...|$|E
5000|$|Gcovr {{provides}} a utility {{for managing the}} use of gcov and generating summarized code coverage results. This command is inspired by the Python coverage.py package, which {{provides a}} similar utility in Python. Gcovr produces either compact human-readable summary reports, machine readable XML reports or a graphical HTML summary. The XML reports generated by gcovr {{can be used by}} Jenkins to provide graphical code coverage summaries. Gcovr supports <b>statement</b> and branch <b>coverage</b> measurement ...|$|R
50|$|Unfortunately, as {{with any}} testing, it is {{generally}} not possible to create a characterization test for every possible input and output. As such, many people opt for either <b>statement</b> or branch <b>coverage.</b> However, even this can be difficult. Test writers must use their judgment to decide how much testing is appropriate. It is often sufficient to write characterization tests that only cover the specific inputs and outputs that are known to occur, paying special attention to edge cases.|$|R
5000|$|Gupta {{owned media}} outlets, ANN7 and The New Age, ran stories alleging an anti-Zuma plot by a faction within the ANC was one {{possible}} source of allegations against the Gupta family. [...] Following the ANC's national executive council meeting in March 2016 the ANC's secretary general issued a <b>statement</b> criticising the <b>coverage</b> {{of the event}} by Gupta family owned media. [...] In response ANN7 and The New Age agreed to publish an official apology to the ANC.|$|R
3000|$|Equation (15) of Theorem 4.1 {{provides}} a coverage preservation criterion for <b>statement</b> <b>coverage.</b> Equation (15) essentially {{says that for}} each basic block [...]...|$|E
40|$|The {{visualization}} of <b>statement</b> <b>coverage</b> (C 0) and branch coverage (C 1) measurement output {{can be used}} in several ways to improve the verification and validation process. The result displays are percentage of a successful tested code and visual information with highlighted in bright green as information of executed lines, bright yellow for <b>statement</b> <b>coverage</b> and dark green The web-based testing tool significantly reduces the time for testing the code and help user to understand the behavior of the tested code...|$|E
3000|$|... {{is reached}} with an {{evaluation}} to True). The problem also arises for <b>statement</b> <b>coverage</b> (SC) because inlining reduces the reachability valuation of (In 2 [*][*]&&[*][*]In 3).|$|E
5000|$|... in 1893 the Physical Review was {{established}} at Cornell University. It {{was taken over}} by the American Physical Society (formed in 1899) in 1913. In 1970, Physical Review was subdivided into Physical Review A, B, C, and D. At that time section A was subtitled Physical Review A: General Physics. In 1990 a process was started to split this journal into two, resulting in the creation of Physical Review E in 1993. Hence, in 1993, Physical Review A changed its statement of scope to Atomic, Molecular and Optical Physics. In January 2007, the section of Physical Review E that published papers on classical optics was merged into Physical Review A, unifying the classical and quantum parts of optics into a single journal. In 2016, Physical Review A broadened its formal <b>statement</b> of <b>coverage</b> to explicitly include quantum information, which has been a section within the journal since 1998.|$|R
40|$|Structural testing techniques, such as <b>statement</b> and branch <b>coverage,</b> play an {{important}} role in improving de-pendability of software systems. However, finding a set of tests which guarantees high coverage is a time-consuming task. In this paper we present a technique for structural testing based on kernel computation. A kernel satisfies the property that any set of tests which executes all vertices (edges) of the kernel executes all vertices (edges) of the program’s flowgraph. We present a linear-time algorithm for computing minimum kernels based on pre- and post-dominator relations of a flowgraph. ...|$|R
40|$|Master of Arts - International RelationsThis study {{examines}} {{the convergence of}} events, internationally and domestically, {{in the last decade}} that led to Benin, Burkina Faso and Mali challenging U. S. cotton subsidies. It outlines the political and economic context in which West African and American cotton farmers compete. It explores how the West Africans have confronted U. S. policy, why their cause has generated sympathy and interest, whether {{they are likely to be}} successful, and the implications of their campaign. The paper draws from analyses of the financial impact of U. S. cotton subsidies, documents filed with the World Trade Organization (WTO), public <b>statements,</b> media <b>coverage,</b> materials from nongovernmental organizations, and interviews with involved parties. It identifies four actors driving this initiative: the cotton farmers, the producers’ unions, the states and the international financial institutions, and their tactics: using the WTO, having many spokespeople with common messages, having powerful allies and using the media...|$|R
40|$|Telecom base {{stations}} are {{a critical part}} of society's information infrastructure. To ensure high quality base station software, automated testing {{is an important part of}} development. Ericsson measures the quality of automated tests with <b>statement</b> <b>coverage,</b> counting the number of statements executed by a test suite. Alone, however, <b>statement</b> <b>coverage</b> does not guarantee test quality. Mutation testing is a technique to improve test quality by injecting faults and verifying that test suites detect them. This thesis investigates whether mutation testing is a viable way to increase the reliability of test suites for base station software at Ericsson. Using the open-source mutation testing tool MiLu, we describe a practical method of using mutation testing that is viable for daily development. We also describe how mutation testing reveals a numbers of potential errors in the production code that current test suites miss even though they have very good <b>statement</b> <b>coverage...</b>|$|E
40|$|Abstract: This paper {{address the}} {{research}} in the field of test case ordering in regression testing. The idea is to improve APSC by applying our proposed approach adaptive genetic algorithm hybrid approach for test case ordering in regression testing. In this research basically we focused on test-case ordering and <b>statement</b> <b>coverage</b> by Applying adaptive genetic algorithm hybrid approach and measure APSC (Average Percentage <b>Statement</b> <b>Coverage)</b> and GA (Genetic Algorithm). In this research we take hundred test-case of apache server and evaluate hundred test-cases. We used java eclipse environment for coding and run the test cases. First we apply APSC (Average Percentage of <b>statement</b> <b>coverage)</b> technique for ordering test-cases as well measure the APSC. We got good results but this technique not sufficient to cover maximum statement. So, we hybrid the adaptive and Genetic Algorithm approach to measure the APSC and run all test-cases until all statement not covered [...] Our approach gives us better results than single APSC adaptive technique...|$|E
30|$|A vital {{source of}} threats is the {{difficulty}} of setting up the libraries used in the experiments. To add a new library to Optimizer, we first needed to measure its test suite <b>statement</b> <b>coverage.</b> Measuring coverage of test suites designed for JavaScript programs is not a standardized procedure, that is, we lack a well-known “recipe” to follow. Once the test suite <b>statement</b> <b>coverage</b> is identified (>[*] 90 %), {{it is necessary to}} locally setup the library environment and its dependencies to allow the Optimizer to make changes in the source code and execute the test suites.|$|E
40|$|Submitted {{on behalf}} of EDAA ([URL] audienceStructural testing techniques, such as <b>statement</b> and branch <b>coverage,</b> play an {{important}} role in improving dependability of software systems. However, finding a set of tests which guarantees high coverage is a time-consuming task. In this paper we present a technique for structural testing based on kernel computation. A kernel satisfies the property that any set of tests which executes all vertices (edges) of the kernel executes all vertices (edges) of the program's flowgraph. We present a linear-time algorithm for computing minimum kernels based on pre- and post-dominator relations of a flowgraph...|$|R
5000|$|It is {{reported}} that B. B. Lal and S. P. Gupta, who were organisers of the World Archaeological Congress held in Delhi in December 1994, ensured that no discussion {{took place over}} the archaeology of Ayodhya. This resulted in a chaotic barrage of back-and-forth <b>statements</b> and press <b>coverage</b> without an open debate.At the subsequent congress in 1998, a resolution was adopted condemning the demolition of the Babri Masjid and denouncing the infusion of [...] "racial, religious or national chauvinist claims" [...] into the profession or archaeology. Lal and Gupta tried unsuccessfully to block the resolution and walked out when the vote was taken.|$|R
5000|$|... {{for black}} students, [...] "In {{organizing}} the Black Student Sit-In of May, 1968, students occupying the university Bursar's office wanted {{the university to}} improve race relations on campus by persuading the administration to concede to their formal demands. Included in these demands were increased admissions and financial aid for black students, creation of an all-black dorm and student center, addition of a Black Studies curriculum, and desegregation of the university's real estate holdings in Evanston. These records combine official statements from the university administration, the student protestors, the negotiations between the two, policy <b>statements</b> and press <b>coverage</b> of the sit-in." ...|$|R
