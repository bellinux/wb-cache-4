0|13|Public
30|$|Spiky tasks: <b>spawn</b> {{a virtual}} <b>machine,</b> intensively {{use it for}} a short term period (e.g. a quick debug on an application), then {{suddenly}} release it to the IaaS environment.|$|R
30|$|Steady tasks: <b>spawn</b> {{a virtual}} <b>machine,</b> {{and keep it}} running for a medium-long period of time, with a {{basically}} constant level of resource usage (e.g. CPU, memory, storage device); typical cases were complex software application development tasks.|$|R
30|$|Rippling tasks: <b>spawn</b> {{a virtual}} <b>machine,</b> {{and keep it}} running for a medium-long period of time, with a fairly variant pattern of {{resource}} usage; this typology can be associated, for instance, to data management/reporting activities, or to some particular tasks ran in collaboration.|$|R
30|$|Development {{of cloud}} APIs is {{discussed}} in [18]. The author mentions three goals of a good cloud API: Consistency, Performance, and Dependencies. Consistency implies the guarantees that the cloud API can provide. Performance is relatively considered in forms of decreasing latency while performing actions. Cloud dependencies are other processes that must be handled, other than <b>spawning</b> virtual <b>machines</b> and querying cloud resource and user states. These three issues are considered in the development process of our own IaaS cloud architecture.|$|R
40|$|Distributed Poly/ML is a {{variation}} on Standard ML that includes prim-itives for creating threads and for inter-thread communication. Threads may be <b>spawned</b> on remote <b>machines.</b> Values are sent from one thread to another over dynamically-created channels. A channel is considered local i all its uses {{take place on the}} processor on which it was created. We present a constraint-based static analysis that detects local channels. Using a tree re-placement technique, we show that constraint solutions may be maintained as invariants at each transition step in a concurrent operational semantics. Relying on such invariants, we prove the soundness of the analysis with respect to the operational semantics. ...|$|R
2500|$|One {{approach}} to implementing cloud antivirus involves scanning suspicious files using multiple antivirus engines. This approach was proposed by an early {{implementation of the}} cloud antivirus concept called CloudAV. CloudAV was designed to send programs or documents to a network cloud where multiple antivirus and behavioral detection programs are used simultaneously {{in order to improve}} detection rates. Parallel scanning of files using potentially incompatible antivirus scanners is achieved by <b>spawning</b> a virtual <b>machine</b> per detection engine and therefore eliminating any possible issues. CloudAV can also perform [...] "retrospective detection," [...] whereby the cloud detection engine rescans all files in its file access history when a new threat is identified thus improving new threat detection speed. Finally, CloudAV is a solution for effective virus scanning on devices that lack the computing power to perform the scans themselves.|$|R
40|$|A PVM {{executive}} {{program has been}} developed for use with the RELAP 5 - 3 D computer program. The PVM executive allows RELAP 5 - 3 D to be coupled with {{any number of other}} computer programs to perform integrated analyses of nuclear power reactor systems and related experimental facilities. The {{executive program}} manages all phases of a coupled computation. It starts up and configures a virtual <b>machine,</b> <b>spawns</b> all of the coupled processes, coordinates the time step size between the coupled codes, manages the production of printed and plotable output, and shuts the virtual machine {{down at the end of}} the computation. The executive program also monitors that status of the coupled computation, repeating time steps as needed and terminating a coupled computation gracefully if one of the coupled processes is terminated by the computational node on which it is executing...|$|R
5000|$|One {{approach}} to implementing cloud antivirus involves scanning suspicious files using multiple antivirus engines. This approach was proposed by an early {{implementation of the}} cloud antivirus concept called CloudAV. CloudAV was designed to send programs or documents to a network cloud where multiple antivirus and behavioral detection programs are used simultaneously {{in order to improve}} detection rates. Parallel scanning of files using potentially incompatible antivirus scanners is achieved by <b>spawning</b> a virtual <b>machine</b> per detection engine and therefore eliminating any possible issues. CloudAV can also perform [...] "retrospective detection," [...] whereby the cloud detection engine rescans all files in its file access history when a new threat is identified thus improving new threat detection speed. Finally, CloudAV is a solution for effective virus scanning on devices that lack the computing power to perform the scans themselves.|$|R
40|$|Virtualization {{has become}} a crucial {{ingredient}} in efficiently utilizing and sharing networks. New concepts as Networks Functions Virtualization envision the placement of computational resources, known as universal nodes, throughout ISP networks, such that services can be de-ployed flexibly on top of these nodes. In data centers such computational ressources are readily available at middleboxes or can be <b>spawned</b> as Virtual <b>Machines.</b> This thesis considers how the communication services of multicast and aggregation can be optimally deployed in virtualized environments. As both these communication schemes rely heavily on in-network processing to e. g. filter, aggregate or duplicate data, the question arises where to place in-network processing functionality and how to route data. As installing pro-cessing functionality either comes at monetary costs (e. g. in ISP networks) or at opportunistic costs due to limited computational resources (e. g. in data centers), we consider the problem of jointly minimizing the number of processing locations and the bandwidth. Interestingly, the corresponding combinatorial optimization problem has not been studied before and is introduced in this thesis as the Constrained Virtual Steiner Arborescence Proble...|$|R
40|$|An {{executive}} {{program has been}} developed that coordinates the coupling of {{any number of other}} computer programs to perform integrated analyses of nuclear power reactor systems and related experimental facilities. The ability to couple programs allows the analyst to apply different analytical models to specific domains in the problem to achieve accurate results. The coupling is accomplished using the PVM message passing software and the {{executive program}} manages all phases of a coupled computation. It starts up and configures a PVM virtual <b>machine,</b> <b>spawns</b> all of the coupled processes on the PVM virtual machine, coordinates the time step size between the coupled codes, manages the production of printed and plottable output as well as restart files, and shuts the PVM virtual machine {{down at the end of}} the computation. The executive program also monitors the status of the coupled computation, repeating time steps as needed to obtain an accurate solution and terminating a coupled computation gracefully if one of the coupled processes is terminated by the computational node on which it is executing. This paper discusses the application of the executive to RELAP 5 - 3 D...|$|R
40|$|In {{this paper}} {{we present a}} {{processor}} microarchitecture that can simultaneously execute multiple threads and has a clustered design for scalability purposes. A main feature of the proposed microarchitecture is its capability to spawn speculative threads from a single-thread application at run-time. These speculative threaak use otherwise idle resources of the <b>machine.</b> <b>Spawning</b> a speculative thread involves predicting its control flow {{as well as its}} dependences with other threads and the values that flow through them. In this way, threads fhat are not independent can be executed in parallel. Control-Jlow, data value and data dependence predictors particularly designedfor this type of microarchitecture are presented. Results show the potential of the microarchitecture to exploit speculative parallelism in programs that are hard to parallelize at compile-time, such as the SpecInt 9. 5. For a 4 -thread unit configuration, some programs such as ijpeg and Ii can exploit an average degree of parallelism of more than 2 threads per cycle. The average degree ofparallelism for the whole SpecInt 95 suite is 1. 6 threads per cycle. This speculative parallelism results in significant speedups for all the Speclnt 95 programs when compared with a single-thread execution...|$|R
40|$|In late 2005, {{the booming}} U. S. housing market {{seemed to be}} slowing. The Federal Reserve had begun raising {{interest}} rates. Subprime mortgage company shares were falling. Investors began to balk at buying complex mortgage securities. The housing bubble, which had propelled a historic growth in home prices, seemed poised to deflate. And if it had, the great financial crisis of 2008, which produced the Great Recession of 2008 - 09, might have come sooner and been less severe. At just that moment, a few savvy financial engineers at a suburban Chicago hedge fund helped revive the Wall Street money <b>machine,</b> <b>spawning</b> {{billions of dollars of}} securities ultimately backed by home mortgages. When the crash came, nearly all of these securities became worthless, a loss of an estimated $ 40 billion paid by investors, the investment banks who helped bring them into the world, and, eventually, American taxpayers. Yet the hedge fund, named Magnetar for the super-magnetic field created by the last moments of a dying star, earned outsized returns in the year the financial crisis began. How Magnetar pulled this off is one of the untold stories of the meltdown. Only a small group of Wall Street insiders was privy to {{what became known as the}} Magnetar Trade. Nearly all of those approached by ProPublica declined to talk on the record, fearing their careers would be hurt if they spoke publicly. But interviews with participants, e-mails, thousands of pages of documents and details about the securities that until now have not been publicly disclosed shed light on an arcane, secretive corner of Wall Street. Technology and Industry...|$|R
40|$|Abstract In {{this paper}} {{we present a}} {{processor}} microarchitecture that cansimultaneously execute multiple threads and has a clustered design for scalability purposes. A main feature of the proposedmicroarchitecture is its capability to spawn speculative threads from a single-thread application at run-time. These speculativethreads use otherwise idle resources of the <b>machine.</b> <b>Spawning</b> a speculative thread involves predicting its controlflow {{as well as its}} dependences with other threads and the values that flow through them. In this way, threads that are notindependent can be executed in parallel. Control-flow, data value and data dependence predictors particularly designed for this typeof microarchitecture are presented. Results show the potential of the microarchitecture to exploitspeculative parallelism in programs that are hard to parallelize at compile-time, such as the SpecInt 95. For a 4 -thread unitconfiguration, some programs such as ijpeg and li can exploit an average degree of parallelism of more than 2 threads per cycle. The average degree of parallelism for the whole SpecInt 95 suite is 1. 6 threads per cycle. This speculative parallelism results insignificant speedups for all the SpecInt 95 programs when compared with a single-thread execution. Keywords: Data value speculation, data dependence specula-tion, control-flow speculation, clustered processors, dynamically scheduled processors, simultaneous multithreaded processors. 1. Introduction Technology evolution projections anticipate that in about 15 yearsaround 1 billion transistors will be available in a single chip microprocessor. Computer architects have to cope with thechallenge of making an effective use of such huge amount of logic. Scaling up current superscalar organizations may provide somebenefits but will soon reach a point of diminishing returns, especially for non-numeric applications. Data dependences 1,instruction window size and wire delays are probably the most important hurdles that limit the performance of superscalarprocessors...|$|R

