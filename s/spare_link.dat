10|36|Public
60|$|Perseverance, however, is a virtue. If {{the trucks}} only jammed the tighter for the forward pushing {{they might be}} {{loosened}} by pulling backwards. Now, however, a new difficulty arose. The coupling chains of the engine would not reach by five or six inches those of the overturned truck. Search was made for a <b>spare</b> <b>link.</b> By a solitary gleam of good luck one was found. The engine hauled at the wreckage, and before the chains parted pulled it about a yard backwards. Now, certainly, the line was clear at last. But again {{the corner of the}} footplate jammed with the corner of the truck, and again we came to a jarring halt.|$|E
50|$|The Data Link Processor (DLP) is {{connected}} to, or is part of, the Tactical Data System (TDS) of the NILE unit. The DLP processes the received tactical messages and generates tactical messages for transmission {{in accordance with}} the unitâ€™s national requirements.If Link 22 is to be added to an existing operator interface or TDS, {{it may be possible to}} incorporate the Link 22 TDS/DLP functions within the existing system; otherwise, a new processor will be required to run the functions. However, if the existing system has <b>spare</b> <b>link</b> interfaces, it may be possible to connect Link 22 to the existing system using a <b>spare</b> <b>link</b> interface. In this case, a gateway system that converts from the existing link format to Link 22 would need to be purchased.|$|E
5000|$|This {{method is}} a based on rules and {{concepts}} adopted from the Selfhealing Network protocol. The {{idea behind the}} (DCPC) is as follows: each <b>spare</b> <b>link</b> has a state associated with it called a statelet {{with a number of}} states. The node sees each logical link with an incoming state and an outgoing state. The incoming state from the link to the node originates from an adjacent node that is connected by that link. Also each outbound state from a link has an incoming state which forms its precursor. Based on this idea, a number of statelets is sent throughout the network (broadcast) and forms a tree of states. [...] "Each node in the tree, is rooted at the precursor port from which the outgoing statelets are propagated." [...] This is called a state route. There are two node options in the algorithm namely Cycler and the Tandem, each having it specific role. The Cycler is a sender/chooser role, in this mode the Cycler sends and receives parts of a state it initiated. All of the nodes adopt this behavior and this is accomplished in a round-robin scheme. The other role is the Tandem, which works by mediating the state broadcasts competition with new rules and criteria not found in Selfhealing networks. Simply put, each node is allowed to explore the network and discover possible p-cycles. The Tandem role also dictates allowed discovery of p-cycles by the Cycler node type. Based on the DCPC, the p-cycles are self-organized in the spare capacity of the network and are found in a distributed way. The algorithm can be re-run each time a network change occurs to create an optimum use of spare capacity. For more information the reader is encouraged to read 9.|$|E
40|$|The {{use of a}} {{fault-tolerant}} VLSI {{system for}} storing and solving linear-programming problems is presented. The system can bear multiple faults in processing elements and/or links and still function with an acceptable performance degradation. It {{is based on an}} interconnection pattern consisting of a complete binary tree in which <b>spare</b> <b>links</b> between cousin nodes are added so as to reconfigure it as a ternary tree. At any given time of a computation, faulty processing elements and/or links are circumvented by using such <b>spare</b> <b>links.</b> It is shown that the total silicon area required by this structure is only a constant factor higher than that of a complete binary tree. The result is used to give an efficient implementation of the simplex algorithm in which the time required to perform a single pivot step matches a previously established lower bound for tree machines in spite of faults...|$|R
40|$|Abstract. We {{propose a}} new method to provide network {{survivability}} using the Restricted P-Cycle by Hamiltonian cycle (RPC), {{which is the}} improved version of p-cycle. Because p-cycle has some problem files, it is not applied to dynamic traffic or varying QoS in real time circumstance. However, RPC can significantly reduce complexity in finding proper patterns restricted by Hamiltonian cycle, which has minimal <b>spare</b> <b>links</b> to provide protection. Moreover, it can guarantee the almost same restoration performance as that of p-cycle. 1...|$|R
6000|$|... "Since you ask me," [...] {{said the}} man-at-arms, [...] "I {{would take it}} kindly if you could <b>spare</b> a <b>link</b> {{or two of the}} chain which hangs round your neck." ...|$|R
40|$|In {{order to}} improve the overall {{availability}} of SDH-based ATM transport networks in a cost-effective way, a survivability strategy co-ordinating the recovery schemes at both ATM and SDH layers has to be devised. This paper proposes a new survivability concept, common pool survivability, for multi-layer ATM over SDH transport networks. The basic idea is to share a common pool of spare resources amongst the ATM and SDH recovery schemes. This {{can be accomplished by}} supporting the ATM <b>spare</b> <b>link</b> capacity through unprotected preemptible connections in the SDH network. It is shown on a set of sample networks that common pool survivability yields considerable cost savings when compared to traditional multilayer survivability designs...|$|E
40|$|Home {{networks}} are seeing increased deployment of Wireless LAN (WiFi) links between conventional, gigabit/second wired Ethernet segments. This means {{an increasing number}} of internal bottlenecks, even as home {{networks are}} also expected to support latency-sensitive applications, regular TCP flows and an emerging class of low-priority, time-insensitive 'background' TCP flows. This paper explores the novel use of CDG v 0. 1 (a delay-gradient TCP) for such background TCP connections in home networks. We show a CDG flow induces latencies of only tens of milliseconds regardless of the bottleneck's internal buffer size (useful when coexisting with latency-sensitive traffic) while achieving a significant fraction of <b>spare</b> <b>link</b> capacity. We also show CDG does not gratuitously steal capacity from commonly deployed 'foreground' TCPs such as CUBIC and NewReno...|$|E
40|$|Todays {{broadband}} ATM {{networks are}} much more sensitive to failures of network elements since even during a short disconnection {{a large amount of}} data can be lost. Different restoration mechanisms have been proposed for preserving network performance by routing the affected traffic streams over still intact network parts. However, the appropriate application of these mechanisms requires the provision of additional capacity on the network links. In this paper a classification of restoration mechanisms for VP-based ATM networks is given and a subset of these mechanisms [...] the so called protection switching methods [...] is considered in detail. Our objective is to determine the optimal set of restoration paths and the minimum amount of <b>spare</b> <b>link</b> bandwidths so that no traffic is lost in case of arbitrary single failures. Mathematical optimization models and solution procedures for five different ATM protection switching methods are presented. The procedures have been applied suces [...] ...|$|E
40|$|Several {{families}} of reconfigurable tree-like architectures, suitable for VLSI implementation, are presented. Such architectures {{are based on}} interconnection patterns consisting of complete binary trees with <b>spare</b> <b>links</b> added (between a node and its grandfather and/or cousin) according to various criteria. The aim is to dynamically reconfigure them as (nonbinary) trees. The total silicon area required by these architectures is only a constant factor {{higher than that of}} a complete binary tree. They can bear multiple faults in processing elements and/or links and still function with an acceptable performance degradation. An analytical method for evaluating the average performance degradation in the presence of faults is presented. Some basic procedure paradigms that can be easily performed on all the proposed architectures are given. Such paradigms can be effectively used in several applications, including linear programming, dictionary machines, and relational database processing...|$|R
40|$|Cycle-oriented preconfiguration {{of spare}} {{capacity}} {{is a new}} idea for the design and operation of mesh-restorable networks. It offers a sought-after goal: to retain the capacityefficiency of a mesh-restorable network, while approaching the speed of line-switched self-healing rings. We show that through a strategy of pre-failure cross-connection between the <b>spare</b> <b>links</b> of a mesh network, {{it is possible to}} achieve 100 % restoration with little, if any, additional spare capacity than in a mesh network. In addition, we find that this strategy requires the operation of only two cross-connections per restoration path. Although spares are connected into cycles, the method is different than self-healing rings because each preconfigured cycle contributes to the restoration of more failure scenarios than can a ring. Additionally, two restoration paths may be obtained from each pre-formed cycle, whereas a ring only yields one restoration path for each failure it addresses. We give an optimal desig [...] ...|$|R
40|$|Abstract. We {{present a}} {{real-time}} fault-tolerant design for an l-level k-ary tree multiprocessor and examine its reconfigurability. The k-ary tree is augmented by spare nodes and <b>spare</b> <b>links.</b> By utilizing {{the capabilities of}} wave-switching communication modules of the spare nodes, faulty nodes and faulty links can be tolerated. We consider two modes of operations. In the strict mode, the multiprocessor is under heavy computation or hard deadline and therefore we use a fast and local reconfiguration scheme to tolerate the faulty nodes. In the relaxed mode, where light computation or soft deadline is encountered, a global reconfiguration scheme is used to maximize the utilization of spare nodes, both in this mode {{as well as in}} the next strict mode. Both theoretical and simulation results are examined. Our simulation results, in the relaxed mode of operation, reveal that our approach can tolerate significantly more faulty nodes than other approaches, with a low overhead and no performance degradation...|$|R
40|$|AbstractWe {{present a}} {{comprehensive}} design methodology for constructing low-cost multiprocessors that use local spares {{to tolerate the}} failure of either processor clusters or individual processors. We first formalize the concepts of global- and local-sparing in terms of graph automorphisms. We then present a method for partitioning a multiprocessor graph by its automorphisms and for incorporating local-sparing to tolerate faults. We emphasize local-sparing designs, since they offer higher reliability-to-cost ratios and can reconfigure faster and in a localized manner. When the spare clusters in each local subsystem are certain sizes, our designs are optimal {{in the number of}} spare intersubsystem links. They are all efficient (optimal in some cases) {{in terms of the number}} of spare intrasubsystem links. We present switch-based implementations that significantly reduces the <b>spare</b> <b>link</b> complexities of the designs. These implementations are equally efficient for any spare cluster size, so they yield efficient local-sparing designs that can tolerate individual processor faults (cluster size of one). Algorithms for fast, localized, and incremental reconfiguration of our FT designs are also developed. Finally, we demonstrate that our local-sparing designs have higher reliability-to-cost ratios than previous designs...|$|E
40|$|The ATM Available Bit Rate (ABR) service {{category}} was initially designed to support non-real-time applications. However {{it is possible}} for ABR to support real-time applications, such as multimedia applications, by taking advantage of the inherent traffic control capability of ABR and the adaptation ability of real-time applications. Using a proper switch traffic control algorithm, ABR queues in the switches can be kept within acceptable bounds and therefore a loose end-to-end delay bound can be guaranteed. FASTRAC is a simple, scalable, provably stable, explicit rate computation scheme for flow control in computer networks. The main objective of the present thesis is to study how to transmit real-time video over ABR service using FASTRAC rate control algorithm. Using OPNET simulation tool, we study the effect of Resource Management (RM) cell interval, control delay and stability factor. With the simulation experiments, we study the performance of the rate control algorithm when it supports real-time video applications using fixed weight allocation scheme. To overcome the problems with the fixed weight allocation scheme, we introduce a dynamic weight allocation scheme, allowing us to improve the rate allocation among all ABR connections. Our simulation results also show that the <b>spare</b> <b>link</b> capacity can be further utilized by transmitting non-real-time applications without affecting the QoS of the real-time video applications...|$|E
40|$|Various {{existing}} reconfiguration algorithms for {{array processors}} {{cannot be used}} efficiently for on-line reconfiguration of the array because they require a central processor to initiate and control the reconfiguration. In addition, most of the existing algorithms assume that the switching network is operationally fault-free. [...] This report presents an on-line reconfiguration scheme for array processors. The proposed algorithm can tolerate both processing element failure and switching network failure. The processing elements and switches are of a self-testing type and link failures are detected by the processing elements (by using parity bit checks). [...] The array is provided with a bottom row of spare cells and when a processing element detects either a self fault or a link failure, it invokes the reconfiguration. A downward global shift (for the particular column) is performed to accomplish the reconfiguration. A number of reconfiguration requests are generated by the processing elements and switch modules to facilitate the reconfiguration. The network is modified and links for propagation of reconfiguration request are added. This scheme makes full use of non-faulty partial results and it blocks the faulty partial results. [...] The reconfiguration {{in the case of}} a processing element failure is completed in two stages while the reconfiguration {{in the case of a}} link failure is completed in a single stage. The links are duplicated to achieve redundancy and in the case of a link failure the <b>spare</b> <b>link</b> is used...|$|E
40|$|In this paper, {{we present}} a {{strongly}} fault-tolerant design for the k-ary n-cube multiprocessor and examine its reconfigurability. Our design augments the k-ary n-cube with # k j # n spare nodes; each set of j n regular nodes is connected to a spare node and the spare nodes are interconnected as a # k j #-ary n-cube. Our approach utilizes the circuit-switched capabilities of the communication modules of the spare nodes to tolerate {{a large number of}} faulty nodes and faulty links without any performance degradation. Both theoretical and simulation results are presented. 1 Introduction As the size of the k-ary n-cube multicomputer grows, due to its complexity, the probability of node and/or link failures become high. Therefore, it is crucial that such systems be able to withstand a large number of faults. To sustain the same level of performance, some researchers have investigated hardware schemes for the k-ary n-cube where spare nodes and/or <b>spare</b> <b>links</b> are used to replace the [...] ...|$|R
50|$|The Spanning Tree Protocol (STP) is {{a network}} {{protocol}} that builds a logical loop-free topology for Ethernet networks. The basic function of STP {{is to prevent}} bridge loops and the broadcast radiation that results from them. Spanning tree also allows a network design to include <b>spare</b> (redundant) <b>links</b> to provide automatic backup paths if an active link fails. This is done without the danger of bridge loops, or the need for manual enabling or disabling of these backup links.|$|R
40|$|This paper {{describes}} different {{schemes for}} tolerating faults in augmented hypercube multiprocessors. The architectures considered have a spare {{assigned to each}} subset of nodes (cluster). The approaches make use of hardware redundancy {{in the form of}} <b>spare</b> nodes and/or <b>links</b> and usually requires modifications in the communication as well as computation algorithms...|$|R
40|$|Structural fault {{tolerance}} (SFT) {{is the ability}} of a multiprocessor to reconfigure around faulty processors or links in order to preserve its original processor interconnection structure. In this paper, we focus on the design of SFT multiprocessors that have low switch and link overheads, but can tolerate {{a very large number of}} processor faults on the average. Most previous work has concentrated on deterministic k-fault-tolerant (k-FT) designs in which exactly k spare processors and some spare switches and links are added to construct multiprocessors that can tolerate any k processor faults. However, after k faults are reconfigured around, much of the extra links and switches can remain unutilized. It is possible within the basic node-covering framework, which was introduced by Dutt and Hayes as an efficient k-FT design method, to design FT multiprocessors that have the same amount of switches and links as, say, a two-FT deterministic design, but have s spare processors, where s @ 2, so that, on the average, k = Q(s) (k Â£ s) processor failures can be reconfigured around. Such designs utilize the <b>spare</b> <b>link</b> and switch capacity very efficiently, and are called probabilistic FT designs. An elegant and powerful method to construct covering graphs or CGâ€™s, which are key to obtaining the probabilistic FT designs, is to use linear error-correcting codes (ECCs). We show how to construct probabilistic designs with very high average {{fault tolerance}} but low wiring and switch overhead using ECCs like the 2 D-parity, full-two, 3 D-parity, and full-three codes. This design methodology is applicable to any multiprocessor interconnection topology and the resulting FT designs have the same node degree as the non-FT target topology. We also analyze the deterministic fault tolerance for these designs and develop efficient layout strategies for them. Finally, we compare the proposed probabilistic designs to some of the bes...|$|E
500|$|During its {{production}} run from March 1942 to June 1943, the Panzer IV Ausf.G went through further modifications, including another armor upgrade {{which consisted of}} a [...] face-hardened appliquÃ© steel plate welded (later bolted) to the glacisâ€”in total, frontal armor was now [...] thick. This decision to increase frontal armor was favorably received according to troop reports on 8 November 1942, despite technical problems of the driving system due to added weight. At this point, {{it was decided that}} 50% of Panzer IV production would be fitted with [...] thick additional armor plates. On 5 January 1943, Hitler decided that all Panzer IV should have [...] frontal armor. To simplify production, the vision ports {{on either side of the}} turret and the loader's forward vision port in the turret front were removed, while a rack for two spare road wheels was installed on the track guard on the left side of the hull. Complementing this, brackets for seven <b>spare</b> track <b>links</b> were added to the glacis plate.|$|R
40|$|An {{approach}} {{to the design of}} reconfigurable tree architecture is presented in which spare processors are allocated at the leaves. The approach is unique in that spares are associated with subtrees and sharing of spares between these subtrees can occur. The Subtree Oriented Fault Tolerance (SOFT) approach is more reliable than previous approaches capable of tolerating link and switch failures for both single chip and multichip tree implementations while reducing redundancy in terms of both <b>spare</b> processors and <b>links.</b> VLSI layout is 0 (n) for binary trees and is directly extensible to N-ary trees and fault tolerance through performance degradation...|$|R
50|$|During its {{production}} run from March 1942 to June 1943, the Panzer IV Ausf. G went through further modifications, including another armor upgrade {{which consisted of}} a 30 mm face-hardened appliquÃ© steel plate welded (later bolted) to the glacisâ€”in total, frontal armor was now 80 mm thick. This decision to increase frontal armor was favorably received according to troop reports on 8 November 1942, despite technical problems of the driving system due to added weight. At this point, {{it was decided that}} 50% of Panzer IV production would be fitted with 30 mm thick additional armor plates. On 5 January 1943, Hitler decided that all Panzer IV should have 80 mm frontal armor. To simplify production, the vision ports {{on either side of the}} turret and the loader's forward vision port in the turret front were removed, while a rack for two spare road wheels was installed on the track guard on the left side of the hull. Complementing this, brackets for seven <b>spare</b> track <b>links</b> were added to the glacis plate.|$|R
5000|$|The {{legend of}} how the sound came about says that Kizart's {{amplifier}} was damaged on Highway 61 when the band was driving from Mississippi to Memphis, Tennessee. An {{attempt was made to}} hold the cone in place by stuffing the amplifier with wadded newspapers, which unintentionally created a distorted sound; Phillips liked the sound and used it. Robert Palmer has written that the amplifier [...] "had fallen {{from the top of the}} car", and attributes this information to Sam Phillips. [...] However, in a recorded interview at the Experience Music Project in Seattle, Washington, Ike Turner stated that the amplifier was in the trunk of the car and that rain may have caused the damage; he is certain that it did not fall from the roof of the car. Peter Guralnick, in his biography of Sam Phillips has the amplifier being dropped from the car's trunk when the band got a flat tire and was digging out the <b>spare.</b> [...] <b>Link</b> Wray explains the development of his fuzz tone with a similar story.|$|R
40|$|Network measurements, Statistics, Available Bandwidth. Available {{bandwidth}} (AB) {{defined as}} a minimum <b>spare</b> capacity of <b>links</b> constituting a network path is an important QoS characteristic of the path. We propose to improve {{a whole range of}} "probe-rate" AB measurement tools that send sequences of measurement packets (called "trains") across the network path. If transmission times of packets in the train, called One Way Delays (OWD), show an increasing trend as packet sequence number in the train increases, then AB is believed to be lower than {{the rate at which the}} train was sent. In contrast, an absence of a trend indicates that AB is higher than the rate of the train...|$|R
40|$|This paper {{presents}} two redundancy indices {{for road}} traffic network junctions and also an aggregated network redundancy index. The proposed redundancy indices could be implemented to identify optimal design alternatives during the planning {{stage of the}} network junctions whereas the aggregated network redundancy index could assess the best control and management policies under disruptive events. Furthermore, effective measures of network redundancy are important to policy makers in understanding the current resilience and future planning to mitigate the impacts of greenhouse gases. The proposed junction indices cover the static aspect of redundancy, i. e. alternative paths, and the dynamic feature of redundancy reflected by the availability of spare capacity under different network loading and service level. The proposed redundancy indices {{are based on the}} entropy concept, due to its ability to measure the system configuration in addition to being able to model the inherent uncertainty in road transport network conditions. Various system parameters based on different combinations of link flow, relative <b>link</b> <b>spare</b> capacity and relative link speed were examined. However, the two redundancy indices developed from the combined relative link speed and relative <b>link</b> <b>spare</b> capacity showed strong correlation with junction delay and volume capacity ratio of a synthetic road transport network of Delft city. Furthermore, the developed redundancy indices responded well to demand variation under the same network conditions and supply variations. Another case study on Junction 3 A in M 42 motorway near Birmingham demonstrated that the developed redundancy index is able to reflect the impact of the Active Traffic Management scheme introduced in 2006...|$|R
40|$|Available {{bandwidth}} (AB) {{defined as}} a minimum <b>spare</b> capacity of <b>links</b> constituting a network path is an important QoS characteristic of the path. We propose to improve {{a whole range of}} "probe-rate" AB measurement tools that send sequences of measurement packets (called "trains") across the network path. If transmission times of packets in the train, called One Way Delays (OWD), show an increasing trend as packet sequence number in the train increases, then AB is believed to be lower than {{the rate at which the}} train was sent. In contrast, an absence of a trend indicates that AB is higher than the rate of the train. We propose an algorithm for efficient OWD trend detection and compare it to widely used OWD trend detection tests. Â© 2005 IEEE. Link_to_subscribed_fulltex...|$|R
40|$|The {{main points}} {{of this paper}} are the following. â€¢ I present a simple and elegant proof of how {{feedback}} control pro-tocols like the eXplicit Control Protocol (XCP) [10], which was set {{to solve the problems}} of TCP, and other control protocols I propose in this paper can converge to a unique fixed (stable) point. â€¢ I propose a fast congestion control (transport) protocol (FCP) which (based on preliminary analysis) is better than XCP. FCP is a fair, efficient transport protocol and gives QoS solutions and can enhance network security. â€¢ I present an efficient online cross layer traffic engineering (OCLTE) technique. OCLTE as an online routing algorithm can use <b>link</b> <b>spare</b> bandwidth and Interface IP Address (see RFC 3630) to find an optimal end-to-end path. OCLTE as a transport pro...|$|R
40|$|Some {{distributed}} {{and dynamic}} channel reconfiguration strategies are proposed for multi-slot traffic in circuit switched networks. The parameters involved in assigning and handling spare channel capacity are modified dynamically {{depending upon the}} performance observed at the individual network nodes. A simulation approach is used to compare strategies. 1. Introduction New technologies such as digital cross connects provide opportunities for dynamically changing the capacities of channels on the routes of communication networks. Such reconfiguration gives scope for increasing the total load that the system can carry under normal and overload conditions, thereby improving both revenue and customer satisfaction. Effective methods have been proposed by Herzberg and Bye [1, 2] for economically preassigning <b>spare</b> capacity to <b>links</b> of a network in order that the network may cope with various failure scenarios. These failure scenarios may include multi-link and node failures. The spare capac [...] ...|$|R
40|$|Abstract â€” The {{widespread}} {{deployment of}} the IEEE 802. 11 protocol has made it the de facto standard for wireless network access and allows Internet users to move freely (at least within a hotspot coverage). The convenience {{brought about by the}} IEEE 802. 11 protocol is also accompanied by new technical challenges such as poor performance of the widely used transport protocol TCP due to the limited and varying bandwidth resources of the wireless medium. In this work, we seek to enhance efficiency of bandwidth usage for TCP over wireless links and improve TCP goodput. Our insight is that TCP acknowledgments can be <b>spared</b> on wireless <b>links</b> to save precious bandwidth resource of these links. We propose a simple technique that leverages the layer coordination between TCP and MAC to suppress TCP acknowledgments. Our technique is transparent to both TCP and MAC and does not require their modification or replacement. I...|$|R
40|$|Abstract: This paper {{describes}} different {{schemes for}} tolerating faults in hypercube multiprocessors. A study of hypercube algorithms reveals {{that in many}} cases, the computations that require local communication are mapped onto topologies such as meshes or rings and the hypercube topology is used for global data communication. Therefore, a faulty hypercube needs to be reconfigured to perform both local and global communication {{as required by the}} algorithm, effectively and with minimal performance degradation. Two general approaches can be identified. The first approach looks into ways of utilizing the healthy processors and links of a hypercube with faulty nodes/links, for embedding topologies such as lower dimensional hypercubes, rings, meshes and trees for performing communication. The second approach makes use of hardware redundancy in the form of <b>spare</b> nodes and/or <b>links</b> and usually requires modifications in the communication hardware. Augmented hypercubes and spare allocation schemes are described...|$|R
40|$|The {{widespread}} {{deployment of}} the IEEE 802. 11 protocol has made it the de facto standard for wireless network access and allows Internet users to move freely (at least within a hotspot coverage). The convenience {{brought about by the}} IEEE 802. 11 protocol is also accompanied by new technical challenges such as poor performance of the widely used transport protocol TCP due to the limited and varying bandwidth resources of the wireless medium. In this work, we seek to enhance efficiency of bandwidth usage for TCP over wireless links and improve TCP goodput. Our insight is that TCP acknowledgments can be <b>spared</b> on wireless <b>links</b> to save precious bandwidth resource of these links. We propose a simple technique that leverages the layer coordination between TCP and MAC to suppress TCP acknowledgments. Our technique is transparent to both TCP and MAC and does not require their modification or replacement. UpprÃ¤ttat; 2007; 20080922 (elkotob...|$|R
50|$|Upgrades {{included}} the rectangular armor patches protecting ammunition stowage mentioned above, and smaller armor patches {{in front of}} each of the protruding hatchway structures in the glacis in an attempt to mitigate their ballistic weakness. Field improvisations included placing sandbags, <b>spare</b> track <b>links,</b> concrete, wire mesh, or even wood for increased protection against shaped-charge rounds. While mounting sandbags around a tank had little effect against high-velocity anti-tank gunfire it was thought to provide standoff protection against HEAT weapons, primarily the German Panzerfaust anti-tank grenade launcher and the bazooka-derived Panzerschreck 88 mm calibre anti-tank rocket launcher. In the only study known to have been done to test the use of sandbags, on March 9, 1945, officers of the 1st Armored Group tested standard Panzerfaust 60s against sandbagged M4s; shots against the side blew away the sandbags and still penetrated the side armor, whereas shots fired at an angle against the front plate blew away some of the sandbags but failed to penetrate the armor. Earlier, in the summer of 1944, General Patton, informed by his ordnance officers that sandbags were useless and that the machines' chassis suffered from the extra weight, had forbidden the use of sandbags. Following the clamor for better armor and firepower after the losses of the Battle of the Bulge, Patton ordered extra armor plates salvaged from knocked-out American and German tanks welded to the turrets and hulls of tanks of his command. Approximately 36 of these up-armored M4s were supplied to each of the three armored divisions of the Third Army in the spring of 1945.|$|R
6000|$|... "Alas!" [...] replied Le Balafre, [...] "that is hard. Now, though I am never a hoarder of my pay, {{because it}} doth ill {{to bear a}} charge about one in these perilous times, yet I always have (and I would advise you to follow my example) some odd gold chain, or bracelet, or carcanet, that serves for the {{ornament}} of my person, and can at need <b>spare</b> a superfluous <b>link</b> or two, {{or it may be}} a superfluous stone for sale, that can answer any immediate purpose. But you may ask, fair kinsman, how you are to come by such toys as this." [...] (He shook his chain with complacent triumph.) [...] "They hang not on every bush--they grow not in the fields like the daffodils, with whose stalks children make knights' collars. What then?--you may get such where I got this, {{in the service of the}} good King of France, where there is always wealth to be found, if a man has but the heart to seek it at the risk of a little life or so." ...|$|R
40|$|Abstract. This chapter {{describes}} the P 2 P-MPI project, a software framework {{aimed at the}} development of message-passing programs in large scale distributed networks of computers. Our goal {{is to provide a}} light-weight, self-contained software package that requires minimum effort to use and maintain. P 2 P-MPI relies on three features to reach this goal: i) its installation and use does not require administrator privileges, ii) available resources are discovered and selected for a computation without intervention from the user, iii) program executions can be fault-tolerant on user demand, in a completely transparent fashion (no checkpoint server to configure). P 2 P-MPI is typically suited for organizations having <b>spare</b> individual computers <b>linked</b> by a high speed network, possibly running heterogeneous operating systems, and having Java applications. From a technical point of view, the framework has three layers: an infrastructure management layer at the bottom, a middleware layer containing the services, and the communication layer implementing an MPJ (Message Passing for Java) communication library at the top. We explain the design and the implementation of these layers, and we discuss the allocation strateg...|$|R
40|$|Estimating the {{reliability}} of an end-to-end network path is critically important for applications that support remote real-time task execution. Available bandwidth defined as a minimum <b>spare</b> capacity of <b>links</b> constituting a network path is an important QoS characteristic of the path. In this work we demonstrate {{a new approach to}} modeling available bandwidth behavior from a time-series analysis prospective. In particular, we introduce a notion of crossing probability - the probability that the available bandwidth drops below the QoS critical threshold for the period of time required for the real-time task execution. We estimate the "crossing probability" by an application of the ARCH 2 (AutoRegressive Conditional Heteroscedasticity) model to the available bandwidth behavior. We characterize the network path by model coefficients Î² 0 and Î² 1, which may be evaluated and updated dynamically. We use these coefficients to quickly output the "crossing probability" for arbitrary values of the threshold and length of the real-time task. The model was evaluated on real bandwidth measurements across multiple network paths. Â© 2008 Elsevier B. V. All rights reserved. Link_to_subscribed_fulltex...|$|R
40|$|We {{address the}} problem of modifying a {{hypercube}} computer by the addition of <b>spare</b> nodes and <b>links</b> to improve its fault tolerance, while maintaining a specified level of performance. The hypercube is modeled by a graph in which nodes represent processors and edges represent communication links. A new graph-based measure of performance degradation is introduced. This characterizes a fault-tolerant hypercube as k-fault-tolerant (k-FT) g-step-degradable (g-SD) if the removal of any k nodes reduces the dimension of the largest fault-free subcube by at most g. We show how to construct k-FT g-SD hypercubes for values of k up to 16 and g = 0, 1, or 2. Many of these designs are shown to be link- or degree-optimal. We also propose a construction method that uses small k-FT g-SD designs as seeds to construct k-FT g-SD designs of larger sizes. This results in fault-tolerant hypercubes in which reconfiguration can be first done locally and then easily extended to the entire system. The small number of added links and nodes is shown to be useful not only in increasing the fault tolerance of the underlying hypercube, but also in reducing the average internode distance...|$|R
