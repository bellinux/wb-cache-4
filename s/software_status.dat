19|64|Public
50|$|Previously, it was {{necessary}} to get a special 'djbdns-installer' package that downloaded the djbdns source from the author's site and apply a patch, but the free <b>software</b> <b>status</b> means this is no longer necessary, and Debian can directly carry the source and patches, producing a redistributable binary deb package.|$|E
50|$|In 1997, Sun Microsystems {{approached}} the ISO/IEC JTC 1 standards body {{and later the}} Ecma International to formalize Java, but it soon withdrew from the process. Java remains a de facto standard, controlled through the Java Community Process. At one time, Sun made most of its Java implementations available without charge, despite their proprietary <b>software</b> <b>status.</b> Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System.|$|E
30|$|The MGF HK {{telemetry}} packet {{contains all}} of the hardware HK status from the magnetometer circuit board, <b>software</b> <b>status,</b> and decimated magnetic field data. Although the HK telemetry packet is produced every second, this information is often made available only at a lower rate (nominally, once every 5  s) on the ground. Selected items in the HK data are compiled in spacecraft system HK packets and made available every second to ground control.|$|E
5000|$|... #Caption: The client <b>software's</b> <b>status</b> window, {{displaying}} {{information about}} the work currently being done in the background. This particular computer is 60.3% complete with its current workunit. When it reaches 100%, it will start on a new workunit {{and the results of}} the previous workunit will be transmitted back to WCG.|$|R
50|$|In 1998 Cognitive Technologies {{became the}} first company in Eastern Europe to get the Oracle Complementary <b>Software</b> Provider <b>status.</b>|$|R
5000|$|StatusNet's name [...] "simply {{reflects}} {{what our}} <b>software</b> does: send <b>status</b> updates into your social network." ...|$|R
40|$|Network {{diagnosis}} in Wireless Sensor Networks (WSNs) is {{a difficult}} task due to their improvisational nature, invisibility of internal running status, and particularly since the network structure can frequently change due to link failure. To solve this problem, we propose a Mobile Sink (MS) based distributed fault diagnosis algorithm for WSNs. An MS, or mobile fault detector is usually a mobile robot or vehicle equipped with a wireless transceiver that performs the task of a mobile base station while also diagnosing the hardware and <b>software</b> <b>status</b> of deployed network sensors. Our MS mobile fault detector moves through the network area polling each static sensor node to diagnose the hardware and <b>software</b> <b>status</b> of nearby sensor nodes using only single hop communication. Therefore, the fault detection accuracy and functionality of the network is significantly increased. In order to maintain an excellent Quality of Service (QoS), we employ an optimal fault diagnosis tour planning algorithm. In addition to saving energy and time, the tour planning algorithm excludes faulty sensor nodes from the next diagnosis tour. We demonstrate {{the effectiveness of the}} proposed algorithms through simulation and real life experimental results...|$|E
30|$|This module is able {{to detect}} dynamic, {{unstructured}} and unpredictable changes of the robots themselves, tasks and environments. Self-sensing of robot <b>software</b> <b>status</b> is based on program and resource analysis, and the target is the entire ecosystem that the software system of collective robots resides in, including libraries, middleware, services, protocols, models, drivers. Self-sensing of hardware status is achieved by adding extra introspection sensors and corresponding drivers and {{is able to}} detect changes in hardware components such as sensors, actuators and processors, as well as unexpected hardware failures.|$|E
40|$|Encrypted {{communication}} on the Internet often uses Transport Layer Security (TLS), which {{depends on}} third parties to certify the keys used. This document improves on that situation by enabling the administrators of domain names {{to specify the}} keys used in that domain’s TLS servers. This requires matching improvements in TLS client software, but no change in TLS server <b>software.</b> <b>Status</b> of This Memo This is an Internet Standards Track document. This document {{is a product of}} the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by th...|$|E
5000|$|C V Ramamoorthy and Farokh B Bastani. <b>Software</b> Reliability - <b>Status</b> and Perspectives. IEEE Trans. Software Eng. (...) , 8(4):354-371, 1982.|$|R
5000|$|Control function: Controls {{and manages}} the various units of BTS, {{including}} any <b>software.</b> On-the-spot configurations, <b>status</b> changes, <b>software</b> upgrades, etc. are done through the control function.|$|R
50|$|GameSpy Arcade was free. However the <b>software</b> {{maintained}} shareware <b>status</b> {{as there}} were three different subscription levels. These levels provided benefits, each according to their price.|$|R
40|$|We {{present a}} {{technique}} based on Trusted Computing's remote attestation {{to enable the}} user of a public terminal to determine whether its configuration can be considered trustworthy or not. In particular, we show how the user can verify the <b>software</b> <b>status</b> of an untrusted terminal and be securely informed about {{the outcome of the}} verification. We present two flavors of this technique. In the first, the user makes use of a personal digital device with limited computing capabilities and a remote trusted server that performs the actual verification. In the second, the personal device is assumed to have enough computing power (as in the case of smart-phones and PDAs) to autonomously perform the verification procedure...|$|E
40|$|This {{document}} provides several {{certificate policy}} identifiers for testing certificate handling <b>software.</b> <b>Status</b> of This Memo This document {{is not an}} Internet Standards Track specification; it is published for informational purposes. This document {{is a product of}} the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741. Information about the current status of this document, any errata, and how to provide feedback on it may be obtained a...|$|E
40|$|QCDOC is a massively {{parallel}} supercomputer whose processing nodes {{are based on}} an application-specific integrated circuit (ASIC). This ASIC was custom-designed so that crucial lattice QCD kernels achieve an overall sustained performance of 50 % on machines with several 10, 000 nodes. This strong scalability, together with low power consumption and a price/performance ratio of $ 1 per sustained MFlops, enable QCDOC to attack the most demanding lattice QCD problems. The first ASICs became available in June of 2003, and the testing performed so far has shown all systems functioning according to specification. We review the hardware and <b>software</b> <b>status</b> of QCDOC and present performance figures obtained in real hardware {{as well as in}} simulation. Comment: Lattice 2003 (machine), 6 pages, 5 figure...|$|E
40|$|Abstract: Performance-based testing (PBT) {{is usually}} {{used to assess}} the examinee’s {{procedural}} knowledge, the knowledge of knowing how, by performing some real world tasks. Many software skill certification exams have integrated PBT as a part of their exam to certify the examinee’s software operating skill, where the examinee needs to perform a sequence of actions on specific software to achieve the required results. Traditionally, the evaluation of the examinee’s software operating skills which only can be manually done by the teacher is time-consuming and costly. With our observation, using software to perform a sequence of actions to complete the task seems like a navigation process from the starting point of the software run-time state to get the required results, which can be modeled as a Finite State Machine (FSM), where the current state of FSM represents the <b>software</b> run-time <b>status,</b> and the transitions of FSM represent the actions the examinee can perform. Once the examinee performs an action in a certain state, the corresponding state transition will be triggered to move from the current state to the next state and then the PBT tester will visualize the next <b>software</b> runt-time <b>status.</b> Based on this concept, a set of regular grammar, called the Functional Spec Language (FSL), is defined to describe the <b>software</b> run-time <b>status</b> and transitions of the PBT tester according to the functionality of specific software. Thus, a parser generator can be applied to generate the corresponding PBT tester based on the given FSL and the related action routines. To evaluate the proposed scheme, several experiments have been done to show the correctness, reusability, and expressive power of the scheme...|$|R
50|$|When {{he first}} saw {{implementations}} of instant messaging, Dorsey wondered whether the <b>software's</b> user <b>status</b> output could be shared among friends easily. He approached Odeo, {{which at the time}} happened to be interested in text messaging. Dorsey and Biz Stone decided that SMS text suited the status message idea, and built a prototype of Twitter in about two weeks. The idea attracted many users at Odeo and investment from Evan Williams who had left Google after selling Pyra Labs and Blogger.|$|R
40|$|This paper {{presents}} {{an overview of}} the knowledge area of software configuration management for the Software Engineering Body of Knowledge (SWEBOK) project. A breakdown of topics is presented for the knowledge area along with a succinct description of each topic. References are given to materials that provide more in-depth coverage of the key areas of software configuration management. Important knowledge areas of related disciplines are also identified. Keywords Software configuration management, software configuration identification, software configuration control, <b>software</b> configuration <b>status</b> accounting, <b>software</b> configuration auditing, software release management...|$|R
40|$|Staff of Brookhaven National Laboratory, Columbia University, IBM and the RIKEN BNL Research Center {{organized}} a one-day workshop held on February 28, 2003 at Brookhaven {{to promote the}} following goals: (1) To explore areas other than QCD applications where the QCDOC and BlueGene/L machines {{can be applied to}} good advantage, (2) To identify areas where collaboration among the sponsoring institutions can be fruitful, and (3) To expose scientists to the emerging software architecture. This workshop grew out of an informal visit last fall by BNL staff to the IBM Thomas J. Watson Research Center that resulted in a continuing dialog among participants on issues common to these two related supercomputers. The workshop was divided into three sessions, addressing the hardware and <b>software</b> <b>status</b> of each system, prospective applications, and future directions...|$|E
40|$|Introduction On 17 - 20 th September 2003, Aalborg University {{hosted a}} {{workshop}} bringing together people from many communities working with graphical models. The common interest is {{development of a}} package for R, supporting the use of graphical models for data analysis. The workshop followed up on the initiative described in Lauritzen (2002). Applications The workshop provided a kaleidoscope of applications as well as insight in experiences dealing with practical graphical models. The presented applications were from areas within epidemiology, geostatistics, genetics, bioinformatics and machine learning. The wide range of applications and methodology showed that a unifying software package for graphical models must be widely extensible and flexible utilizing a variety of data formats, model specifications and estimation algorithms. The package should also provide an attractive user interface that aids in working with complex models in an interactive way. <b>Software</b> <b>status</b> Development...|$|E
40|$|We present R 2 U 2, a novel {{framework}} for runtime monitoring of security properties and diagnosing of security threats on-board Unmanned Aerial Systems (UAS). R 2 U 2, implemented in FPGA hardware, is a real-time, REALIZABLE, RESPONSIVE, UNOBTRUSIVE Unit for security threat detection. R 2 U 2 {{is designed to}} continuously monitor inputs from the GPS and the ground control station, sensor readings, actuator outputs, and flight <b>software</b> <b>status.</b> By simultaneously monitoring and performing statistical reasoning, attack patterns and post-attack discrepancies in the UAS behavior can be detected. R 2 U 2 uses runtime observer pairs for linear and metric temporal logics for property monitoring and Bayesian networks for diagnosis of security threats. We discuss the design and implementation that now enables R 2 U 2 to handle security threats and present simulation results of several attack scenarios on the NASA DragonEye UAS...|$|E
40|$|Reports from academic, commercial, and {{government}} organizations have documented software-intensive system cost and schedule overruns for decades. These reports have identified lack of management {{insight into the}} software development process as one of many contributing factors. Multiple management mechanisms exist. However, these mechanisms {{do not support the}} assessment, and subsequent reporting, of <b>software</b> completion <b>status.</b> Additionally, the conceptual framework, based on industry standards, is limited in its relevance to this study due to an emphasis on what is needed while deferring implementation details. The purpose of this phenomenological study was to explore U. S. government contractors 2 ̆ 7 lived experiences of assessing and reporting <b>software</b> completion <b>status</b> with current measurement mechanisms. Twenty program or project managers responded to interview questions targeting positive and challenging experiences with current measurement mechanisms. Qualitative analysis of the experiential data was based on open and axial coding conducted on interview transcripts. Analysis indicated that costly resources are applied to metrics that do not provide the required level of management insight into completion status. These findings have positive social change implications for program managers, project managers, and researchers by documenting the need to develop relevant and cost-efficient status metrics to provide the critical insight required by management to reduce overruns...|$|R
50|$|Although Maemo {{is based}} on GNU/Linux and other open source software, some parts of Maemo remain closed source. These include some user-space <b>software,</b> like certain <b>status</b> bar and taskbar applets (including the display {{brightness}} applet) and applications, and some system daemons related to connectivity and power management.|$|R
50|$|This version added {{automatic}} periodic {{scans of}} the computer which has eliminated the option for Quick Sweeps or Full Sweeps as seen in previous versions. By default, the 7.0 version has eliminated the option to run off virus-scanning. There is now access to a web portal accessible from any computer with web access that includes account information such as your <b>software</b> license <b>status</b> and keycode as well as access to certain tasks, such as upgrading your software and installing it on other computers. The 7.0 version of this product {{does not require a}} reboot after installation as with previous versions.|$|R
40|$|The NuMesh system {{defines a}} {{high-speed}} communication substrate optimized for off-line routing. By determining possible communication paths at compile time, highly efficient {{hardware and software}} constructs can be exploited to yield superior network performance. Limited gate delays between NuMesh registers, as well as single cycle message transfers, allow for a high clock frequency and low network latency. A highly pipelined architecture for this communication is presented and a mechanism for efficient flow control communication is discussed. A unique communication protocol is presented and shown to provide single cycle transfers between nodes. Virtual pipes are discussed as a communication protocol for nodes to communicate when running applications on the NuMesh system. Preliminary results and {{a description of the}} current hardware and <b>software</b> <b>status</b> are listed. NuMesh: A Communication Architecture for Static Routing 1. 0 Background The NuMesh system acts as a scalable, high-speed c [...] ...|$|E
30|$|A {{platform}} {{configuration register}} (PCR) is a 160 -bit storage location for discrete integrity measurements. There are {{a minimum of}} 16 PCR registers. All PCR registers are shielded locations within the TPM chip. The decision of whether a PCR contains a standard measurement or if the PCR is available for general use is deferred to the platform specific specification. An Attestation Identity Key (AIK) is an alias for the EK. The EK cannot perform signatures for security reasons and due to privacy concerns. TPMs contain secure non-volatile storage space that is intended to contain measurements of system hardware and <b>software</b> <b>status.</b> Measurement consists primarily of submitting all system software and hardware to a hash algorithm in a predetermined sequence. If this measurement is performed when the system is in a known trusted state, then the resulting hash {{can be stored in}} the TPM and compared to the result of a subsequent measurement. Any changes will be detected by the comparison, and appropriate actions can be taken to prevent execution of modified software or hardware. This measurement capability can be used to provide detection of any remote system modifications resulting from malicious viruses or worms.|$|E
40|$|This work {{presents}} a breath sampler prototype automatically collecting end-tidal (single and multiple breaths) or dead space air fractions (multiple breaths). This result {{is achieved by}} real time measurements of the CO 2 partial pressure and airflow during the expiratory and inspiratory phases. Suitable algorithms, used to control a solenoid valve, guarantee that a Nalophan® bag {{is filled with the}} selected breath fraction even if the subject under test hyperventilates. The breath sampler has low pressure drop (< 0. 5 kPa) and uses inert or disposable components to avoid bacteriological risk for the patients and contamination of the breath samples. A fully customisable software interface allows a real time control of the hardware and <b>software</b> <b>status.</b> The performances of the breath sampler were evaluated by comparing a) the CO 2 partial pressure calculated during the sampling with the CO 2 pressure measured off-line within the Nalophan® bag; b) the concentrations of four selected volatile organic compounds in dead space, end-tidal and mixed breath fractions. Results showed negligible deviations between calculated and off-line CO 2 pressure values and the distributions of the selected compounds into dead space, end-tidal and mixed breath fractions were in agreement with their chemical-physical properties...|$|E
50|$|Technical {{targeting}} {{is associated}} with the user's own <b>software</b> or hardware <b>status.</b> The advertisement is altered depending on the user's available network bandwidth, for example if a user is on their mobile phone that has limited connection, the ad delivery system will display a version of the ad that is smaller for a faster data transfer rate.|$|R
30|$|Qt is a {{framework}} for building software applications for desktop, mobile, and embedded devices in domains such as industrial automation, medical devices, and in-vehicle entertainment systems. The project was started in 1991 by independent developers, who incorporated it in 1993 and released its software source code in 1995. After several re-definitions, the Qt software was licensed under GPL 2 in 2000, which ensured the <b>software’s</b> <b>status</b> as a common good. Following the commercial acquisitions by Nokia and Digia, the Qt project became hosted by the Qt Company, which today bases its primary business on a single vendor position by using a dual-licensing model. While the non-commercial version is Open Source, the commercial license allows making applications proprietary and to access complementary software components and personalized customer support. The Qt software is used widely in Linux-based environments, such as the KDE desktop environment and Sailfish OS, which is included in our study and described later in this section. For the KDE software’s dependence on Qt, the KDE Foundation maintains the “Free Qt Foundation” to ensure that an open source version of the software will remain available. In addition to independent and commercial Qt application developers, the community’s stakeholder ecosystem consists of consultancy companies and individual consultants who help their customers to build Qt applications, hardware manufacturers and different Open Source projects that build Qt related technologies. A major version of the Qt framework is released every 6 months, and several service releases are typically made between them.|$|R
40|$|This {{document}} {{provides the}} procedures and guidelines necessary for computer software configuration management activities during {{the operation and}} maintenance phases of the Saltwell Leak Detector Stations as required by HNF-PRO- 309, Rev. 1, Computer Software Quality Assurance, Section 2. 4, Software Configuration Management. The software configuration management plan (SCMP) integrates technical and administrative controls {{to establish and maintain}} technical consistency among requirements, physical configuration, and documentation for the Saltwell Leak Detector Station Programmable Logic Controller (PLC) software during the Hanford application, operations and maintenance. This SCMP establishes the Saltwell Leak Detector Station PLC <b>Software</b> Baseline, <b>status</b> changes to that baseline, and ensures that software meets design and operational requirements and is tested in accordance with their design basis...|$|R
40|$|Quantum Chromodynamics (QCD) is an {{application}} area that requires access to large supercomputing resources and generates {{large amounts of}} raw data. The UK's national lattice QCD collaboration UKQCD currently stores and requires access to around five Tbytes of data, a figure that is growing dramatically as the collaboration's purpose built supercomputing system, QCDOC [P. A. Boyle, D. Chen, N. H. Christ, M. Clark, S. D. Cohen, C. Cristian, Z. Dong, A. Gara, B. Joo, C. Jung, C. Kim, L. Levkova, X. Liao, G. Liu, R. D. Mawhinney, S. Ohta, K. Petrov, T. Wettig and A. Yamaguchi, “Hardware and <b>software</b> <b>status</b> of QCDOC, arXiv: hep-lat/ 0309096 ”, Nuclear Physics. B, Proceedings Supplement, Vol. 838, pp. 129 – 130, 2004. See: [URL] P. A. Boyle, D. Chen, N. H. Christ, M. A. Clark, S. D. Cohen, C. Cristian, Z. Dong, A. Gara, B. Joo, C. Jung, C. Kim, L. A. Levkova, X. Liao, R. D. Mawhinney, S. Ohta, K. Petrov, T. Wettig and A. Yamaguchi, “Overview of the QCDSP and QCDOC computers”, IBM Journal of Research and Development, Vol. 49, No. 2 / 3, p. 351, 2005] came into full production service {{towards the end of}} 2004. This data is stored on QCDgrid, a data Grid currently composed of seven storage elements at five separate UK sites...|$|E
40|$|This {{memorandum}} is {{the first}} deliverable. Its objectives are to define the concept of maintainability, to describe the factors influencing it and to define criteria by which maintainability can be quantitatively evaluated. 2. - Maintainability Maintenance is the activity of modifying a software product after initial delivery. Maintainability is {{the ease with which}} a software product can be modified. Maintainability is a requirement of the CEI and SWCI specifications. Its importance {{stems from the fact that}} MDSF will have to evolve and adapt to a changing environment over the next 30 years. Using sound software engineering principles, the cost of maintenance can be minimized. Following [LS 80], we divide maintenance in three categories: - corrective maintenance: the correction of faults when the system does not behave according to its specification; - adaptive maintenance: the adaptation of the system to changes in the operational environment while keeping the same functionality; - perfective maintenance: the extension of a system's functionality and improvement in the services provided. 3. - Factors Maintainability is a component of a more general concept, software quality, which is described in terms of a hierachy (see figure 1 [EM 87]) of factors, criteria and metrics. A factor is a top-level expression of <b>software</b> <b>status</b> for management reporting. Each factor is described by a set of criteria. Each criterion is measured by a set of metrics. A criterion may describe more than one factor and some criteria may be measured by the same metric. Canadian Space Agency Technical Memorandum 1 Software Metrics Study Canadian Space Agency 1994...|$|E
40|$|YP is an agile {{programming}} methodology {{that has}} evolved over the past 15 years. Many of its features are common to other agile methodologies; its novel features in-clude using a highly visible, physical <b>software</b> <b>status</b> indica-tor (a real traffic light), and a well-defined nested set of de-velopment cycles. It is also an exceptionally open process, with {{the current status of}} the development process visible to the customers, as well as the code and documentation. We are using YP in developing the software for UrbanSim, a so-phisticated simulation system for modeling urban land use, transportation, and environmental impacts over periods of 20 or more years under alternate possible scenarios. Our purpose in developing UrbanSim is to support public delib-eration and debate on such issues as building a new light rail system or freeway, or changing zoning or economic in-centives, as well as on broader issues such as sustainable, livable cities, economic vitality, social equity, and environ-mental preservation. The domain of use is thus politically charged, with different stakeholders bringing strongly held values to the table. Our goal is to not favor particular stake-holder values in the simulation or its output, but rather to let different stakeholders evaluate the results in light of what is important to them. There are several implications of this for the development process. First, having credible, reliable code is important — and further, both the code itself and the development process that produced it should be open and inspectable, not a black box. Second, to allow us to respond quickly to different stakeholder values and concerns, a flex-ible agile development process is required...|$|E
40|$|This report {{describes}} the software {{development for the}} plutonium attribute verification system [...] AVNG. A brief synopsis of the technical solution for the measurement system is presented. The main tasks for the software development that is underway are formulated. The development tasks are shown in software structural flowcharts, measurement system state diagram and {{a description of the}} <b>software.</b> The current <b>status</b> of the AVNG software development is elucidated...|$|R
40|$|Progress at the NASA Langley Research Center in {{the area}} of control {{experiments}} for flexible structures is described. First the author presents the experimental results for a linear model which represents slewing maneuvers of a generic space station solar panel carried out to evaluate experimentally some control technologies. Then the status of the rotational/translational maneuvering experiment of a flexible steel panel carried by a translation cart is presented. Finally, experimental results of the NASA minimast testbed using velocity command stepper motors as reaction mass reactors are shown. All the test configurations are briefly described, including actuator and sensor, test setup, and test <b>software.</b> The <b>status</b> of some research activities oriented primarily to the experimental methods for control of flexible structures is presented...|$|R
40|$|Preliminary results {{pertaining}} to burst location using BATSE Large Area Detector measurements of solar flares are presented. These solar flare measurements {{are currently being}} used to fine tune the calibration of our data analysis <b>software.</b> The current <b>status</b> of techniques for identifying and eliminating systematic errors from the data analysis tools is discussed. Data revealing {{the effects of the}} atmospheric scattering algorithm that will be implemented in the data analysis software are presented...|$|R
