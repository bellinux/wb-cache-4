6|67|Public
40|$|Internet-scale {{distributed}} applications (such as wide-area service and device discovery and location, user preference management, Domain Name Service) impose interesting requirements on information storage, management, and retrieval. They maintain structured soft-state and pose numerous complex queries against that state. These application are typically implemented using traditional databases, which can hamper flexibility and extensibility (both {{of which are}} critical requirements of Internet-scale applications). This paper proposes a different approach, based upon {{the use of the}} eXtensible Markup Language (XML) [3] as a data <b>storage</b> <b>language,</b> along with a memory-based database and search engine. Using XML allows applications to use dynamic, simple, flexible data schemes and to perform simpler, but faster queries. The approach yields a single, common data management platform, XSet. XSet is an easy to use, in-memory, hierarchically structured, fully indexed database with relaxed ACID proper [...] ...|$|E
40|$|Abstract — In {{the past}} several years, various {{optimization}} algo-rithms had been implemented on the project total cost minimiza-tion problem. Lately, it was developed an application {{that serves as a}} central platform that integrates all those previous implemen-tations. Currently, such platform allows the access and execu-tion of each one of the other utilities as modules/plugins. Each of which can be configured to execute optimizations over differ-ent projects. Although the platform already saves the optimization results, it lacks a suitable processing mechanism that would ease the cross analysis over all the utilities. Therefore, we want to in-clude capture and analysis of results into the platform in order to properly aggregate them in a results database. Such database could then be queried for numerous purposes being the perfor-mance evaluation, across the optimization utilities, one of the first. In this project we analyze a total of five heterogeneous optimiza-tion utilities, all coded in JAVA, using algorithms based on dynamic programming and global optimization. The heterogeneity poses a challenge which we overcame by establishing a common results <b>storage</b> <b>language,</b> by means of XML files...|$|E
40|$|In {{the past}} several years, various {{optimization}} algorithms had been implemented on the project total cost minimization problem. Lately, it was developed an application {{that serves as a}} central platform that integrates all those previous implementations. Currently, such platform allows the access and execution of each one of the other utilities as modules/plugins. Each of which can be configured to execute optimizations over different projects. Although the platform already saves the optimization results, it lacks a suitable processing mechanism that would ease the cross analysis over all the utilities. Therefore, we want to include capture and analysis of results into the platform in order to properly aggregate them in a results database. Such database could then be queried for numerous purposes being the performance evaluation, across the optimization utilities, one of the first. In this project we analyze a total of five heterogeneous optimization utilities, all coded in JAVA, using algorithms based on dynamic programming and global optimization. The heterogeneity poses a challenge which we overcame by establishing a common results <b>storage</b> <b>language,</b> by means of XML files. Fundação para a Ciência e a Tecnologia (FCT...|$|E
5000|$|... #Caption: [...] Passive {{electrical}} {{equivalent of}} Energy Systems <b>Language</b> <b>storage</b> icon ...|$|R
5000|$|... #Subtitle level 3: Data <b>storage</b> and query <b>languages</b> for Geographic Data ...|$|R
5000|$|Sun Microsystems with {{proximity}} {{communication and}} research projects of Silicon Photonics, Object-Based <b>Storage,</b> Fortress programming <b>language,</b> interval computing ...|$|R
40|$|Internet-scale {{distributed}} applications (such as wide-area service and device discovery and location, user preference management, Domain Name Service) impose interesting requirements on information storage, management, and retrieval. They maintain structured soft-state and pose numerous queries against that state. These applications typically require the implementa-tion of a customized proprietary query engine, often not optimized for performance, and costly in resources. Alternatives include using traditional databases, which can hamper exibility and extensibility (both {{of which are}} critical requirements of Internet-scale applications), or LDAP (Lightweight Directory Access Protocol), which poses composability problems and imposes rigid structure on queries. This paper proposes a dierent approach, based upon {{the use of the}} eXten-sible Markup Language (XML) [8] as a data <b>storage</b> <b>language,</b> along with a main memory-based database and search engine. Using XML allows applications to use dynamic, simple, exible data schemes and to perform simpler, but faster queries. The approach yields a single, common data management platform, XSet. XSet is an easy to use, main memory, hierarchically struc-tured database with incomplete ACID properties. Preliminary measurements show that XSet performance is excellent: insertion time is a small constant value, and query time grows logarith-mically with the dataset size. A portable Java-based version of XSet is available for download, both as a standalone application and as a component of the Ninja service infrastructure. ...|$|E
40|$|This {{project has}} {{produced}} a system {{that can be used}} to create and display slide-shows, like the sort produced by the other presentation software, using XML (Extensible Markup Language) as the <b>storage</b> <b>language</b> for the slide-show and SVG (Scalable Vector Graphics) as the display language. XML is a meta-data ??? a language to create other language ??? developed by W 3 C (World Wide Web Consortium) for use across the Word Wide Web. It is a simple, very flexible text format derived from SGML (ISO 8879). Originally designed to meet the challenges of large-scale electronic publishing, XML is also playing an increasingly important role in the exchange of a wide variety of data on the Web and elsewhere. SVG is a language for describing two-dimensional graphics and graphical applications in XML. The visual appearance of SVG graphics is stored as a text-based description and its display is recalculated when it is rendered. SVG is used for storage and distribution of images on the Web, and is increasingly well-supported by both commercial and free software. In contrast with raster image formats such as GIF, JPEG, and PNG, which store a matrix of individual pixels that compose an image, an SVG image is a graphic-based text. It contains instructions for resolution independent rendering: the same SVG file will be shown in more detail when viewed at a higher resolution...|$|E
40|$|There {{are many}} {{different}} techniques and notations for extracting architecturally interesting information from the source code of existing software systems. This process is known as reverse engineering. One current problem with reverse engineering techniques is that models of software systems cannot easily be transferred from one notation and storage format to another. We refer to this as the problem of bridging technical spaces. In this work, we approach the issue of bridging between the SWAG technical space and the UML technical space. The SWAG technical space, named after the Software Architecture Group at the University of Waterloo, consists of fact extractors, fact manipulators, schemas, and a fact <b>storage</b> <b>language</b> - the Tuple-Attribute language (TA). The UML technical space consists of the UML metamodel, the XML Metadata Interchange (XMI) format for encoding UML models, and various UML modeling tools. We have designed and implemented a plugin for MagicDraw UML, which will import, export, and merge between XMI-encoded UML models and TA-encoded Function-Level Schema models. We document evidence of what {{is referred to as}} a Bridge Domain - a technical space which exists between two encodable spaces. The metamodels of the two notation languages that we have focused on are very rich and flexible, but neither technical space is capable of fully expressing an accurate architectural model of any given software system; however, each technical space is capable of maintaining certain semantic information relevant to that technical space through multiple merge operations...|$|E
50|$|He and his {{partners}} have contributed to {{many areas of the}} social web. These include photo sharing, LAMP (software bundle), Asymmetric Follow, desktop applications using cloud <b>storage,</b> natural <b>language</b> processing, hover card social identity, remote css, activity feeds, webtop, friend recommendations, shared calendars, as well as profile and data sharing.|$|R
50|$|Some languages, such as Java, Smalltalk, Python, and Scheme, do {{not support}} {{internal}} <b>storage.</b> In these <b>languages,</b> all objects are uniformly accessed through references.|$|R
40|$|An importantproperty of logic, object-oriented, functional, {{and other}} {{high-level}} programming languages is their automatic management of dynamically allocated <b>storage.</b> These <b>languages</b> often take {{the burden of}} memory managementaway from the programmer. The language support system provides the programmer with a virtually unlimited amount of storage by running a garbage collector to reclaim storage no longer needed...|$|R
50|$|Both {{languages}} {{introduced a}} number of new or improved features over Applesoft II, some of the same features as each other, and some unique to each. Both languages replace Applesoft II's single-precision floating-point variables using 5-byte storage with the somewhat-reduced-pecision 4-byte variables, while also adding a larger numerical format. Apple III Microsoft BASIC provides double-precision floating-point variables, taking 8 bytes of storage, while Apple Business BASIC offers an extra-long integer type, also taking 8 bytes for <b>storage.</b> Both <b>languages</b> also retain 2-byte integers, and maximum 255-character strings.|$|R
40|$|AbstractWe {{describe}} {{new features}} in FCART software system, an integrated environment for knowledge and data engineers {{with a set}} of research tools based on Formal Concept Analysis. The system is intended for knowledge discovery from various data sources, including structured quantitative data and text collections. Final version of data transformation from external data source into concept lattice is considered. We introduce new version of local data <b>storage,</b> query <b>language</b> for conceptual scaling of data snapshots as multi-valued contexts, and new tools for working with formal concepts...|$|R
5000|$|High-level debuggers need {{information}} about variables, types, constants, subroutines and so on, {{so they can}} translate between machine-level <b>storage</b> and source <b>language</b> constructs. Such information {{can also be used}} by other software tools. The information must be generated by the compiler and stored in the executable file or dynamic library by the linker.|$|R
40|$|A common {{format for}} lexicons {{produced}} in field linguistics projects uses a markup code before each field. The {{end of each}} field is implicit, being represented by the markup code for the next field. This markup format, commonly called "Standard Format Code(s) " (SFM), is used {{in one of the}} most common lexicography tools used by field linguists, Shoebox. While this plain text format satisfies many of the desiderata for archival <b>storage</b> of <b>language</b> materials (as outlined in Bird and Simons 2003), there are usually problems with such lexicons as they are produced in practice which detract from their value...|$|R
50|$|Hassanabad (حسن آباد) is {{a village}} in Chorbat, Ghangche District of Gilgit-Baltistan, Pakistan, lying 340 km east of Skardu, near the border of India.The ancient name of Hassanabad was Kusting, which means a large <b>storage</b> of water.The <b>language</b> spoken is Balti. The entire {{population}} is Muslim of the Sofia Noorbakhshia In the past it was the trade route to Ladakh and Kargil.|$|R
50|$|As {{early as}} the 1980s, {{researchers}} started viewing DNA or genomes as the dynamic <b>storage</b> of a <b>language</b> system with precise computable finite states represented as a finite state machine. Recent complex systems research has also suggested some far-reaching commonality {{in the organization of}} information in problems from biology, computer science, and physics, such as the Bose-Einstein condensate (a special state of matter).|$|R
5000|$|Another {{method of}} {{effective}} <b>language</b> <b>storage</b> in the Lexicon includes {{the use of}} metaphor as a storage principle. ("Storage" [...] and [...] "files" [...] are good examples of how human memory and computer memory {{have been linked to}} the same vocabulary; this was not always the case). George Lakoff's work is usually cited as the cornerstone to studies of metaphor in the language. One example is quite common: [...] "time is money". We can save, spend and waste both time and money. Another interesting example comes from business and sex: businesses penetrate the market, attract customers, and discuss [...] "relationship management". Business is also war: launch an ad campaign, gain a foothold (already a climbing metaphor in military usage) in the market, suffer losses. Systems, on the other hand, are water: a flood of information, overflowing with people, flow of traffic. The NOA [...] theory of Lexicon acquisition argues that the metaphoric sorting filter helps to simplify <b>language</b> <b>storage</b> and avoid overload.|$|R
5000|$|... pureXML is {{the native}} XML storage {{feature in the}} IBM DB2 data server. pureXML {{provides}} query <b>languages,</b> <b>storage</b> technologies, indexing technologies, and other features to support XML data. The word pure in pureXML was chosen to indicate that DB2 natively stores and natively processes XML data in its inherent hierarchical structure, as opposed to treating XML data as plain text or converting it into a relational format.|$|R
40|$|Application or web {{services}} {{are increasingly being}} used across organisational boundaries. Moreover, new services are being introduced at the network and <b>storage</b> level. <b>Languages</b> to specify interfaces for such services have been researched and transferred into industrial practice. We investigate end-to-end quality of service (QoS) and highlight that QoS provision has multiple facets and requires complex agreements between network services, storage services and middleware services. We introduce SLAng, a language for defining Service Level Agreements (SLAs) that accommodates these needs. We illustrate how SLAng is used to specify QoS in a case study that uses a {{web services}} specification to support the processing of images across multiple domains and we evaluate our language based on it...|$|R
40|$|We survey basic garbage {{collection}} algorithms, and variations such as incremental and generational collection� we then discuss low-level implementation considerations and {{the relationships between}} <b>storage</b> management systems, <b>languages,</b> and compilers. Throughout, we attempt to present a uni ed view based on abstract traversal strategies, addressing issues of conservatism, opportunism, and immediacy of reclamation� we also point outavariety of implementation details {{that are likely to}} have a signi cant impact o...|$|R
40|$|The first pp {{presentation}} {{details the}} main {{parts of a}} computer system including INPUT, OUTPUT and <b>STORAGE</b> devices. The <b>language</b> is deliberately basic given the target student group. The second pp presentation is an assessment {{for the first part}} of outcome 1 (a) and use a DRAG and DROP assessment format. Access 2. Part of eMerge: a programme of E-learning staff development for Scotland's colleges, funded by the SFEFC. ...|$|R
40|$|An {{important}} {{property of}} logic, object-oriented, functional, and other high-level programming languages is their automatic management of dynamically allocated <b>storage.</b> These <b>languages</b> often take {{the burden of}} memory management away from the programmer. The language support system provides the programmer with a virtually unlimited amount of storage by running a garbage collector to reclaim storage no longer needed. The goal {{of this article is}} to present implementation and evaluation of a parallel garbage collection scheme used in a parallel concurrent constraint programming system called, Penny, running on a shared memory multiprocessors machine. Our parallel garbage collector employs multiple collectors working in parallel to make efficient use of the underlying architecture. Four strategies have been investigated, these strategies range from a sequential strategy to a full parallel one. ...|$|R
40|$|Abstract. Application or web {{services}} {{are increasingly being}} used across or-ganisational boundaries. Moreover, new services are being introduced at the net-work and <b>storage</b> level. <b>Languages</b> to specify interfaces for such services have been researched and transferred into industrial practice. We investigate end-to-end quality of service (QoS) and highlight that QoS provision has multiple facets and requires complex agreements between network services, storage services and middleware services. We introduce SLAng, a language for defining service level agreements that accommodates these needs. We illustrate how SLAng is used to specify QoS in a case study that uses a {{web services}} specification to support the processing of images across multiple domains in a quality of service aware manner. We evaluate SLAng based on the experience gained from this case study. ...|$|R
40|$|Data {{parallel}} languages such as Vienna Fortran and HPF can {{be successfully}} {{applied to a}} wide range of numerical applications. However, many advanced scienti�c and engineering applications are of a multidisciplinary and heterogeneous nature and thus do not �t well into the data parallel paradigm. In this paper we present new Fortran 90 language extensions to �ll this gap. Tasks can be spawned as asynchronous activities in a homogeneous or heterogeneous computing environment; they interact by sharing access to Shared Data Abstractions �SDAs�. SDAs are an extension of Fortran 90 modules, representing a pool of common data, together with a set of methods for controlled access to these data and a mechanism for providing persistent <b>storage.</b> Our <b>language</b> supports the integration of data and task parallelism as well as nested task parallelism and thus can be used to express multidisciplinary applications in a natural and e�cient way...|$|R
40|$|Previous work by Talbot and Osborne [2007 a] {{explored}} {{the use of}} randomized <b>storage</b> mechanisms in <b>language</b> modeling. These structures trade {{a small amount of}} error for significant space savings, enabling the use of larger language models on relatively modest hardware. Going beyond space efficient count storage, here we present the Talbot Osborne Morris Bloom (TOMB) Counter, an extended model for performing space efficient counting over streams of finite length. Theoretical and experimental results are given, showing the promise of approximate counting over large vocabularies in the context of limited space. ...|$|R
40|$|Language {{models are}} {{important}} components of speech recognition and machine translation systems. Trained on billions of words, and consisting {{of billions of}} parameters, language models often are the single largest components of these systems. There have been many proposed techniques to reduce the <b>storage</b> requirements for <b>language</b> models. A technique based upon pointer-free compact storage of ordinal trees shows compression competitive with the best proposed systems, while retaining the full finite state structure, and without using computationally expensive block compression schemes or lossy quantization techniques. Index Terms: n-gram language models, unary data structures 1...|$|R
40|$|Intelligence can {{be defined}} as a general mental ability for reasoning, problem solving, and learning. Because of its general nature, {{intelligence}} integrates cognitive functions such as perception, attention, memory, language, or planning. On the basis of this definition, intelligence can be reliably measured by standardized tests with obtained scores predicting several broad social outcomes such as educational achievement, job performance, health, and longevity. A detailed understanding of the brain mechanisms underlying this general mental ability could provide significant individual and societal benefits. Structural and functional neuroimaging studies have generally supported a frontoparietal network relevant for intelligence. This same network has also been found to underlie cognitive functions related to perception, short-term memory <b>storage,</b> and <b>language.</b> The distributed nature of this network and its involvement {{in a wide range of}} cognitive functions fits well with the integrative nature of intelligence. A new key phase of research is beginning to investigate how functional networks relate to structural networks, with emphasis on how distributed brain areas communicate with each other...|$|R
40|$|PASCAL/ 48 is a {{programming}} language for the Intel MCS- 48 series of microcomputers. In particular, {{it can be used}} with the Intel 8748. It is designed to allow the programmer to control most of the instructions being generated and the allocation of <b>storage.</b> The <b>language</b> can be used instead of ASSEMBLY language in most applications while allowing the user the necessary degree of control over hardware resources. Although it is called PASCAL/ 48, the language differs in many ways from PASCAL. The program structure and statements of the two languages are similar, but the expression mechanism and data types are different. The PASCAL/ 48 cross-compiler is written in PASCAL and runs on the CDC CYBER NOS system. It generates object code in Intel hexadecimal format {{that can be used to}} program the MCS- 48 series of microcomputers. This reference manual defines the language, describes the predeclared procedures, lists error messages, illustrates use, and includes language syntax diagrams...|$|R
40|$|Abstract. Recently XML {{is quickly}} {{becoming}} a crucial format for representing and exchanging information. However this tendency brings an essential demand for effective storage {{and management of}} XML documents. As XML technology has many database features (e. g. <b>storage</b> strategy, query <b>languages,</b> schemes, programming interfaces, etc.), one possible solution {{can be found in}} storing XML data in relational or object-relational database systems. At present there is a relatively large number of works and thesis concerning techniques, which somehow combine XML and (object-) relational features. This survey tries to sum these techniques up, to classify them, and to evaluate their advantages and disadvantages. ...|$|R
40|$|An {{example in}} a recent report on the {{programming}} language Russell has illustrated difficulties related to user defined storage management. Here is demonstrated how the dynamic approach to encapsulation earlier proposed by the author provides means to solve the particular storage management problem. The method used is, however, easily generalized to other similar cases. In addition to the example a number of notational conveniences are introduced. One that allows abbreviated references to components of record-like structures is called controlled coercion. Another allows a function-like use of classes. Keywords: Classes, abstract data types, <b>storage</b> management, programming <b>languages...</b>|$|R
40|$|The {{issue of}} the {{representation}} of signed languages is a capital one since it does not only regard possible means of registration and <b>storage</b> of sign <b>language</b> data and their retrieval, but it also focuses the attention on how different representational systems give the researcher the possibility to investigate diverse aspects of sign language 2 forms and their relation to contextual meaning, and to enquire on different questions such as {{the definition of the}} unit of analysis and segmentation issues, the internal variation and the flexibility of the sign system and the identification of relevant features in sign language discourse...|$|R
40|$|Graduation date: 1985 Display, {{which is}} the {{function}} for displaying the schema of the network at the conceptual level, is implemented to enhance the network database system ALLEGRO. To display the schema is one step towards modifiable schemas in the network model. The problem of updating a schema is examined at all three levels in a database architecture: the external, the conceptual, and the internal level. The display function produces two representations of the schema: the data description and data <b>storage</b> description <b>languages</b> (DDL and DSDL), and a graphical display of the schema graph together with interactive tools such as selecting records and zooming. The DDL and DSDL follow the standards set by the current implementation of their compiler. The graph of the schema is produced via a topological-sort-type algorithm which orders the nodes in the graph by their placement in the partial order. The layout of the directed graph is optimized by {{reducing the number of}} crossings. The graph of the network schema is displayed on a graphical display terminal...|$|R
40|$|This paper {{discusses}} {{the acquisition of}} plural forms of words that end in a back glide in Brazilian Portuguese and may take two plural forms: either –s (the regular suffix) or the suffix –is. Fourty children were presented to picture cards containing words ending in a back glide {{and were asked to}} identify what they saw. Children’s answers presented the suffix –is {{for the vast majority of}} words rather than the regular plural suffix –s. Our results indicate that children abstract schemas rather than acquire default rules. The –is suffix has a very high frequency rate for words that end in a back glide which yields to the establishment of robust schemas. We argue that the plural suffix –is is adopted by children due to frequency effects which foments a very robust schema and enhances productivity. Key-words: acquisition; plural, language use, frequency, schemas Morphological <b>storage</b> and <b>language</b> acquisition The study of the acquisition of regular and irregular inflection is an important issue in the debate as to how morphology is represented in th...|$|R
40|$|The Augmented Ordered Binary Decision Diagram (OBDD-A) {{has been}} shown to be {{extremely}} efficient for reliability calculations, especially when combined with the Boundary Set method of partition representation. The existing OBDD-A follows the Boundary Set method closely, requiring the calculation of partition numbers large enough to exceed the capacity of native <b>storage</b> types in <b>languages</b> such as C++. By omitting the use of partition numbers the execution speed of the algorithm is increased, while the low memory usage of an OBDD-A is maintained. We compare the new OBDD-A to the existing version on a number of networks, showing that processing time for large networks increases significantly...|$|R
