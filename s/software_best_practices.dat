9|10000|Public
50|$|Jones {{collects}} data {{on software}} quality, software risks, and <b>software</b> <b>best</b> <b>practices.</b> His many computer science publications {{have been widely}} used by many organizations and educators. He formed his own business in 1984, Software Productivity Research, after holding positions at IBM and ITT. After retiring from Software Productivity Research in 2000, he remains active as an independent management consultant. He has often worked as an expert witness in software breach of contract litigation and also in tax cases where software assets are part of the case.|$|E
5000|$|IaC grew as a {{response}} to the difficulty posed from two pieces of disruptive technology - utility computing and second-generation web frameworks. This brought about widespread scaling problems for many enterprises that were previously only witnessed by huge companies. [...] In 2006 specifically, new challenges were brought to the forefront that shook the technology industry; the launch of Amazon Web Services’ Elastic Compute Cloud and the 1.0 version of Ruby on Rails just months before. With new tools emerging to handle this ever growing field, the idea of Infrastructure as Code was born. The thought of modelling infrastructure with code, and then having the ability to design, implement, and deploy applications infrastructure with known <b>software</b> <b>best</b> <b>practices</b> appealed to software developers and IT infrastructure administrators. The ability to treat it like code and use the same tools as any other software project would allow developers to rapidly deploy applications.|$|E
40|$|This paper {{presents}} {{an overview of}} the Rational Unified Process The Rational Unified Process is a software engineering process, delivered through a web-enabled, searchable knowledge base. The process enhances team productivity and delivers <b>software</b> <b>best</b> <b>practices</b> via guidelines, templates and tool mentors for all critical software lifecycle activities. The knowledge base allows development teams to gain the full benefits of the industry-standard Unified Modeling Language (UML) ...|$|E
2500|$|Assessing {{maintainability}} requires {{checking the}} following <b>software</b> engineering <b>best</b> <b>practices</b> and technical attributes: ...|$|R
2500|$|Assessing {{security}} requires {{at least}} checking the following <b>software</b> engineering <b>best</b> <b>practices</b> and technical attributes: ...|$|R
5000|$|Assessing {{performance}} efficiency requires checking {{at least the}} following <b>software</b> engineering <b>best</b> <b>practices</b> and technical attributes: ...|$|R
40|$|Fun {{and work}} are {{becoming}} intertwined in employees’ experiences. Whether through serious games, social <b>software,</b> <b>best</b> <b>practices,</b> or corporate culture, fun at work is shaping how workers collaborate with each other. This workshop seeks {{to bring together}} a diverse community exploring research related to fun in a work context. Through position papers and interactive discussions, participants will discuss {{what does it mean}} to “have fun ” in a work context, why fun is important at work, how can fun be communicated through design, and how can fun be measured...|$|E
40|$|Coding {{rules are}} often used in {{industry}} for codifying <b>software</b> <b>best</b> <b>practices</b> and avoiding the many hazardous constructions present in languages such as C or C++. Predictable and customisable tools are needed to automatically measure adherence to these practices. Many of the properties about software needed for rule conformance analysis are calculated by modern compilers. We present {{an extension of the}} GNU Compiler Collection (GCC) that flags those code fragments that do not conform to a given set of rules. The user can define coding rules using a high-level declarative language based on logic programming...|$|E
40|$|Products and {{processes}} innovation is a key-topic for {{the competitiveness of}} small and medium enterprises operating in the Information Technology field. The ESPINODE network links 18 European projects with the common goals of diffusing Software Process Improvement concepts and supporting the enterprises already involved in improvement experiments. This paper describes the methodology developed by the TOPS project, the ESPINODE for Central Italy, to use rapid software process assessment {{as a way to}} promote innovation. Rapid assessments are offered as a free service to small and medium enterprises that join TOPS as target enterprises. The offer of an assessment is a powerful way to both diffuse <b>software</b> <b>best</b> <b>practices</b> and propose actual improvement paths to the enterprises. Assessment data are collected by TOPS for a survey about software process maturity in Italy: the paper reports the first results of this survey. 1...|$|E
50|$|Feature-driven {{development}} {{is built on}} a core set of <b>software</b> engineering <b>best</b> <b>practices,</b> all aimed at a client-valued feature perspective.|$|R
5000|$|Promotes open {{digital library}} standards, <b>software,</b> interfaces, and <b>best</b> <b>practices</b> ...|$|R
50|$|StopBadware also {{aggregates}} badware statistics, {{advocates for}} consumer protection in public policy, and publishes advisory documents (<b>software</b> guidelines, <b>best</b> <b>practices</b> for web hosting providers) compiled with {{input from the}} organization’s working groups.|$|R
40|$|In recent years, Software Process Improvement (SPI) has {{achieved}} a good level of penetration in medium-large enterprises. Several well-known methodologies exist and are applied as standard tools in the organisational processes devoted to continuous improvement. Unfortunately, {{this is not the}} case for many small and micro enterprises that often are simply unaware of the existence of such methodologies. The need for making such enterprises aware of SPI concepts as well as the potential benefits of their application was one of the driving motivations for the TOPS project, funded by the European Community as the ESPINODE for Central Italy within the ESSI programme. In order to overcome the typical inertia showed by enterprises toward usual dissemination initiatives, we adopted rapid-assessment meetings to allow enterprises to “taste” SPI. Such activity was part of the goals of TOPS toward the regional industry. Rapid assessments, based on the tailoring of SPICE model, have been offered as a free service to enterprises that joined TOPS. This paper describes rapid assessment as a powerful way for both diffusing <b>software</b> <b>best</b> <b>practices</b> and proposing actual improvement paths to enterprises. Data collected through the assessments are presented together with some findings about software proces...|$|E
40|$|Recently the Software Quality Improvement (SQI) Project {{has been}} formed at NASA’s Jet Propulsion Laboratory (JPL). SQI will enable and promote <b>software</b> <b>best</b> <b>practices,</b> and {{leverage}} JPL experience in software engineering {{in support of}} major software projects, throughout the entire software life-cycle. The goal of the SQI Project is to establish an operational software improvement program that results in the continuous measurable improvement at JPL. Its objectives include improving cost and schedule predictability, {{improving the quality of}} mission-critical software, reducing software defect rates during testing and operations, increasing software development productivity, promoting software reuse, and reducing project start-up time. In this paper we will document one of several approaches being introduced at JPL to improve its ability to improve cost estimation accuracy early in the project life-cycle. We were recently confronted with a problem where a cost estimate was required for a piece of mission critical software. The technical staff did not trust cost models, and they had numerous sources of potential risk and uncertainty associated with the next build. The task wanted to estimate the costs of its next delivery based on the cost of its current delivery. However, the task had virtually no retrievable historical data fiom their previous builds, for either effort or softwar...|$|E
40|$|Software {{development}} is a complex process for which numerous approaches have been suggested. However, no single approach to software development has been met with universal acceptance, which is not surprising, as {{there are many different}} software development concerns. In addition, there are a multitude of other contextual factors that influence the choice of software development process and process management decisions. The authors believe it is important to develop a robust mechanism for relating software process decisions and software development contexts. Such an approach supports industry practitioners in their efforts to implement the software development processes vital for a particular set of contextual factors. In this paper, the authors outline a new tool-based framework for relating the complexity of software settings with the various aspects of software processes. This framework can extract the key software process concepts from process repositories, for example, from CMMI-DEV or ISO/IEC 15504 - 5 (a. k. a. SPICE – Software Process Improvement and Capability dEtermination). A team of software development experts then collaborates in order to identify and validate the strength and nature {{of the relationship between the}} key process concepts and the contextual factors that are known to affect the software development process. The result of this collaboration is a prototype of a flexible model, which can be extended over time into a broader process consideration, for example, where agile processes or further specific situational factors could be added to the framework. The authors contend that a model such as the one proposed in this paper can serve as a valuable tool, assisting software developers in making decisions regarding the selection of <b>software</b> <b>best</b> <b>practices,</b> as well as providing general guidance for process improvement initiatives...|$|E
50|$|Software Procurement Services {{includes}} {{advice on}} end-to-end <b>software</b> procurement <b>best</b> <b>practices</b> {{throughout the entire}} software lifecycle. SoftwareONE can also outtask the management of software spend and licenses {{on behalf of the}} customer.|$|R
25|$|As the {{software}} domain evolves and software technology surges, developers face significant challenges {{in meeting the}} requirements of these large complex systems of systems. DACS currently is engaged in some initiatives to provide the developers greater insight about <b>software</b> <b>best</b> <b>practice</b> and about improving their development process. Concurrently DACS is participating, {{along with the other}} IACs, in supporting a DTIC initiative to make more scientific and technical information available to the warfighter in electronic form. These initiatives are described in greater detail in the following sub-sections.|$|R
40|$|The {{gap between}} the <b>best</b> <b>software</b> en-gineering <b>practice</b> and the average prac-tice is very wideperhaps wider {{than in any other}} {{engineering}} discipline. ” The past few years have seen a prolifer-ation of books on project manage-ment, requirements, architecture, design, testingnearly every area of software engineering. But within the companies I visit in my consulting business, I rarely see <b>software</b> engi-neering <b>best</b> <b>practices</b> being used. In-creasingly, I ask myself, “Why aren’t people using the numerous good software engineering practices tha...|$|R
50|$|Startup studios own an {{infrastructure}} made of pooled resources: technical tools, management processes, and a multi-disciplinary team. By building several projects {{a year with}} the same team, startups studios can re-use this infrastructure, <b>software</b> and <b>best</b> <b>practices</b> across products.|$|R
40|$|Abstract — Guidelines for {{refactoring}} {{are meant}} to improve software systems internal quality and are widely acknowledged as among <b>software’s</b> <b>best</b> <b>practices.</b> However, such guidelines remain mostly qualitative in nature. As a result, judgments on how to conduct refactoring processes remain mostly subjective and therefore non-automatable, prone to errors and unrepeatable. The detection of the Long Method code smell is an example. To address this problem, this paper proposes a technique to detect Long Method objectively and automatically, using a Binary Logistic Regression model calibrated by expert’s knowledge. The results of an experiment illustrating {{the use of this}} technique are reported...|$|R
50|$|Build {{automation}} {{is considered}} {{the first step in}} moving toward implementing a culture of Continuous Delivery and DevOps. Build automation combined with Continuous Integration, deployment, application release automation, and many other processes help move an organization forward in establishing <b>software</b> delivery <b>best</b> <b>practices.</b>|$|R
50|$|Inner {{source is}} the use of open source <b>software</b> {{development}} <b>best</b> <b>practices</b> and the establishment of an open source-like culture within organizations. The organization may still develop proprietary software, but internally opens up its development. The term was coined by Tim O'Reilly in 2000.|$|R
40|$|Shares the {{essential}} ingredients needed to begin cooking up video tutorials right away. Key topics include screen recording <b>software</b> options, <b>best</b> <b>practices</b> for video tutorial content and length, how to promote video tutorials, tracking tutorial effectiveness, and tips for liaising with stakeholders within your institution or organization...|$|R
5000|$|Support to {{regional}} and local administrations, namely, one stop shop services for regional administrations and technical assistance to municipal administrations (hardware, <b>software,</b> and eGovernment <b>best</b> <b>practices).</b>|$|R
50|$|The SEI Partner Network {{helps the}} SEI {{disseminate}} <b>software</b> engineering <b>best</b> <b>practices.</b> Organizations and {{individuals in the}} SEI Partner Network are selected, trained, and licensed by the SEI to deliver authentic SEI services, which include courses, consulting methods, and management processes. The network currently consists of nearly 250 partner organizations worldwide.|$|R
40|$|This paper {{describes}} {{a longitudinal study}} of an organisation {{over a period of}} eighteen months as it initiated and then implemented a manual of <b>software</b> <b>best</b> <b>practice.</b> The organisation consists of end-users, in the sense that, although developing software {{is an integral part of}} their job, they are not professional software developers,. Although the organisation itself was unaware of current trends in Software Process Improvement (SPI) or theories of organisational learning, our case-study affords us insights into some practical deficiencies of the accepted techno-centric model of a SPI programme. We argue that such a model imposes unnatural work practices on an organisation and fails to take account of how process improvements might occur spontaneously within a community of practice...|$|R
40|$|Trends {{that have}} contributed to the {{globalisation}} of the software engineering industry include virtual collaborative teams, off-shore outsourcing, and international migration of IT professionals. These three trends and the international spread of software engineering standards and methodologies are explored with specific examples from the Australian software engineering industry. Results from a Europe/Australia study about adoption of <b>software</b> <b>best</b> <b>practice</b> conducted in 16 countries are then summarised and analysed using Hofstede’s cultural dimensions. The discussion considers the efficacy of the concept ‘national culture’ in light of the analysis and concludes that software engineering researchers need to reconsider the concept and measurement of national culture. Implications of the globalisation of software engineering standards and methodologies on various stakeholders are discussed...|$|R
40|$|The {{mobile robot}} {{programming}} {{problem is a}} software engineering challenge that is not easily conquered using contemporary <b>software</b> engineering <b>best</b> <b>practices.</b> We propose robot observability {{as a measure of}} the diagnostic transparency of a situated robot program, then describe property mapping as a simple, language-independent approach to implementing reliable robot programs by maximizing robot observability. Examples from realworld, working robots are given in Lisp and Java. Introduction The recent availability of inexpensive, reliable robot chassis (e. g. ActivMedia Pioneer, IS-Robotics Magellan, Nomad Scout) has broadened the accessibility of mobile robotics research. Because these robots consist of fixed hardware out-of-the-box, this technology is shifting the emphasis of mobile robot research from a joint hardware and software design process toward hardware-unaware mobile robot programming. This is a software design problem, and yet <b>software</b> engineering <b>best</b> <b>practices</b> are [...] ...|$|R
40|$|This paper {{presents}} the aims and assumptions of DISC, the Esprit Long-Term Research Concerted Action No. 24823 “Spoken Language Dialogue Systems and Components. Best practice in development and evaluation ” which starts on 1 June 1997. DISC will investigate a broad selection of state-of-the-art spoken language dialogue systems to identify current development and evaluation practice and pinpoint its deficiencies; {{and it will}} develop, test and disseminate a first detailed reference model of <b>best</b> <b>practice</b> procedures and methods, and a toolbox of associated concepts and software tools. 1. The need for <b>best</b> <b>practice</b> in development and evaluation <b>Software</b> engineering <b>best</b> <b>practice</b> forms a backbone for the training of students in computer science and engineering who will later develop computer systems in industry and research. No current scheme specialises <b>software</b> engineering <b>best</b> <b>practice</b> to the particular purposes of dialogue engineering, that is, to the development and evaluation of spoken language dialogue systems (SLDSs). DISC aims to develop a first detailed and integrated set of development and evaluation methods and procedures (guidelines, checklists, heuristics) for dialogue engineering <b>best</b> <b>practic...</b>|$|R
50|$|LZX is an Extensible Markup Language (XML) and JavaScript {{description}} language similar in spirit to XUL, MXML, and Extensible Application Markup Language (XAML). LZX enables a declarative, text-based development process that supports rapid prototyping and <b>software</b> development <b>best</b> <b>practices.</b> It {{is designed to}} be familiar to traditional web application developers who are familiar with HTML and JavaScript.|$|R
30|$|Several {{decades of}} <b>software</b> {{development}} and <b>best</b> <b>practices</b> from development approaches and applications in industry {{ended up in}} the meeting in Utah, where the most suitable techniques were combined within the manifesto for agile software development.|$|R
40|$|<b>Software</b> {{engineering}} <b>best</b> <b>practices</b> allow significantly {{improving the}} software development. However, {{the implementation of}} <b>best</b> <b>practices</b> requires skilled professionals, financial investment and technical support to facilitate implementation and achieve the respective improvement. In this paper we proposes a protocol to design techniques to implement <b>best</b> <b>practices</b> of <b>software</b> engineering. The protocol includes the identification and selection of process to improve, the study of standards and models, identification of <b>best</b> <b>practices</b> associated with {{the process and the}} possible implementation techniques. In addition, technical design activities are defined in order to create or adapt the techniques of implementing <b>best</b> <b>practices</b> for <b>software</b> development...|$|R
40|$|The {{mobile robot}} {{programming}} {{problem is a}} software engineering challenge that is not easily conquered using contemporary <b>software</b> engineering <b>best</b> <b>practices.</b> We propose robot observability {{as a measure of}} the diagnostic transparency of a situated robot program, then describe property mapping as a simple, language-independent approach to implementing reliable robot programs by maximizing robot observability. Examples from realworld, working robots are given in Lisp and Java...|$|R
40|$|Scientific {{research}} {{relies on}} computer software, yet software {{is not always}} developed following practices that ensure its quality and sustainability. This manuscript does not aim to propose new <b>software</b> development <b>best</b> <b>practices,</b> but rather to provide simple recommendations that encourage the adoption of existing <b>best</b> <b>practices.</b> <b>Software</b> development <b>best</b> <b>practices</b> promote better quality software, and better quality software improves the reproducibility and reusability of research. These recommendations are designed around Open Source values, and provide practical suggestions that contribute to making research software and its source code more discoverable, reusable and transparent. This manuscript is aimed at developers, but also at organisations, projects, journals and funders that can increase the quality and sustainability of research software by encouraging the adoption of these recommendations. This work was partially supported by ELIXIR-EXCELERATE and CORBEL. ELIXIR-EXCELERATE and CORBEL are funded by the European Commission within the Research Infrastructures programme of Horizon 2020, grant agreement numbers 676559 and 654248. The European workshops were supported by ELIXIR and organised {{in collaboration with the}} Software Sustainability Institute and Netherlands eScience Center. The workshop in Australia was supported by EMBL-ABR via its main funders: The University of Melbourne and Bioplatforms Australia...|$|R
5000|$|Vulnerabilities {{have been}} found in every major {{operating}} system [...] including Windows, macOS, various forms of Unix and Linux, OpenVMS, and others. The only way to reduce the chance of a vulnerability being used against a system is through constant vigilance, including careful system maintenance (e.g. applying <b>software</b> patches), <b>best</b> <b>practices</b> in deployment (e.g. the use of firewalls and access controls) and auditing (both during development and throughout the deployment lifecycle).|$|R
40|$|Abstract This paper {{performs}} {{an unprecedented}} com-parative study of Metaheuristic optimization frameworks. As criteria for comparison {{a set of}} 271 features grouped in 30 characteristics and 6 areas has been selected. These features include the different metaheuristic techniques covered, mechanisms for solution encoding, constraint handling, neighborhood specification, hybridization, par-allel and distributed computation, <b>software</b> engineering <b>best</b> <b>practices,</b> documentation and user interface, etc. A metric has been defined for each feature so that the scores obtained by a framework are averaged within each group of features, leading to a final average score for each frame-work. Out of 33 frameworks ten have been selected from the literature using well-defined filtering criteria, {{and the results of}} the comparison are analyzed with the aim of identifying improvement areas and gaps in specific frameworks and the whole set. Generally speaking, a sig-nificant lack of support has been found for hyper-heuristics, and parallel and distributed computing capabilities. It is also desirable to have a wider implementation of some <b>Software</b> Engineering <b>best</b> <b>practices.</b> Finally, a wider sup-port for some metaheuristics and hybridization capabilities is needed. 1 Introduction an...|$|R
