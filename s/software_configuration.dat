761|685|Public
5|$|A {{group of}} seven {{companies}} began the development of USB in 1994: Compaq, DEC, IBM, Intel, Microsoft, NEC, and Nortel. The goal was to make it fundamentally easier to connect external devices to PCs by replacing the multitude of connectors {{at the back of}} PCs, addressing the usability issues of existing interfaces, and simplifying <b>software</b> <b>configuration</b> of all devices connected to USB, as well as permitting greater data rates for external devices. A team including Ajay Bhatt worked on the standard at Intel; the first integrated circuits supporting USB were produced by Intel in 1995.|$|E
25|$|The {{traditional}} <b>software</b> <b>configuration</b> management (SCM) {{process is}} looked upon by practitioners {{as the best}} solution to handling changes in software projects. It identifies the functional and physical attributes of software at various points in time, and performs systematic control of changes to the identified attributes {{for the purpose of}} maintaining software integrity and traceability throughout the software development life cycle.|$|E
25|$|Because file {{names have}} to be {{exchanged}} between software environments (think network file transfer, file system storage, backup and file synchronization <b>software,</b> <b>configuration</b> management, data compression and archiving, etc.), {{it is very important}} not to lose file name information between applications. This led to wide adoption of Unicode as a standard for encoding file names, although legacy software might be non-Unicode-aware.|$|E
5000|$|Expertise in {{multiple}} JDE system <b>software</b> <b>configurations</b> (multi-foundation), Tools Release Updates ...|$|R
5000|$|Scaling {{the test}} {{automatically}} for different hardware and <b>software</b> <b>configurations</b> of a system.|$|R
5000|$|... 200 {{systems of}} various {{hardware}} and <b>software</b> <b>configurations</b> for academic staff and research students ...|$|R
25|$|The <b>Software</b> <b>Configuration</b> Management system, is {{a system}} at the vendor’s site which keeps track of the {{configurations}} at the customer site. By storing this in a system the vendor {{will be able to}} give the customer particular service when it needs a new product. In the <b>software</b> <b>configuration</b> management system information about the products used by the customer, the version of these products, as well as which updates are already being done, is stored. In some cases {{it is possible that the}} vendor did some modifications to the product particularly for this customer. This will also have to be stored in the system. Also there needs to be configuration data, some generic information about the configuration the customer is using. For example what operating platform the customer uses for its software. What also should be stored in this system is information about the feedback that the vendor gets from the customer. This includes bug reports, product usage data, error reports and usage questions. More information about this feedback can be found in the CCU phase activation and usage.|$|E
25|$|This diagram {{has been}} {{incorporated}} within the VA-EA {{to provide a}} symbolic representation of the metamodel it used, to describe the One-VA Enterprise Architecture and to build an EA Repository {{without the use of}} Commercial EA Repository Software. It was developed using an object oriented database within the Caliber-RM Software Product. Caliber-RM is intended {{to be used as a}} <b>software</b> <b>configuration</b> management tool; not as an EA repository.|$|E
25|$|An {{example of}} a {{successful}} application of the CCU method {{can be found at}} Exact Software (ES). ES is a manufacturer of accounting and enterprise resource planning software based in the Netherlands. ES has combined Product Data Management (PDM), Customer Relationship Management (CRM) and <b>Software</b> <b>Configuration</b> Management (SCM) {{in order to maintain the}} configuration at the customer site in a better and less complex way. ES has a module in its CRM software that contains all contracts of each customer. This is linked to their PDM system. Every contract corresponds to files that can be downloaded for a new version or update of a previous version. In the delivery phase this means that the customers are able to obtain all the products through an online connection. So ES sells contracts (licenses) and stores them into their CRM system, the delivery of the actual products can be done by the customers themselves completely automated requiring little effort. The PDM system is on its turn linked to the SCM system which keeps track of the configurations the customers are using. In the delivery phase this means that ES is able to automatically determine the customer needs whenever a customer does a request.|$|E
40|$|International audienceModeling how {{contextual factors}} relate to a <b>software</b> system’s <b>configuration</b> space {{is usually a}} manual, {{error-prone}} task that depends highly on expert knowledge. Machine-learning techniques can automatically predict the acceptable <b>software</b> <b>configurations</b> for a given context. Such an approach executes and observes a sample of <b>software</b> <b>configurations</b> within a sample of contexts. It then learns what factors of each context will likely discard or activate some of the software’s features. This lets developers and product managers automatically extract the rules that specialize highly configurable systems for specific contexts...|$|R
40|$|Despite {{years of}} {{intensive}} {{research in the}} field of software vulnerabilities discovery, exploits are becoming ever more common. Consequently, it is more necessary than ever to choose <b>software</b> <b>configurations</b> that minimize systems' exposure surface to these threats. In order to support users in assessing the security risks induced by their <b>software</b> <b>configurations</b> and in making informed decisions, we introduce M-STAR, a Modular Software Trustworthiness ARchitecture and framework for probabilistically assessing the trustworthiness of software systems, based on evidence, such as their vulnerability history and source code properties. Integral to M-STAR is a software trustworthiness model, consistent with the concept of computational trust. Computational trust models are rooted in Bayesian probability and Dempster-Shafer Belief theory, offering mathematical soundness and expressiveness to our framework. To evaluate our framework, we instantiate M-STAR for Debian Linux packages, and investigate real-world deployment scenarios. In our experiments with real-world data, M-STAR could assess the relative trustworthiness of complete <b>software</b> <b>configurations</b> with an error of less than 10 %. Due to its modular design, our proposed framework is agile, as it can incorporate future advances in the field of code analysis and vulnerability prediction. Our results point out that M-STAR can be a valuable tool for system administrators, regular users and developers, helping them assess and manage risks associated with their <b>software</b> <b>configurations.</b> Comment: 18 pages, 13 figure...|$|R
40|$|Many factors {{contribute}} to overall application performance in today’s high-performance cluster computing environments. These factors include the memory sub-system, network hardware and software stack, compilers and libraries, and I/O sub-system. The large variability in hardware and <b>software</b> <b>configurations</b> present i...|$|R
50|$|PCA {{is one of}} the {{practices}} used in <b>Software</b> <b>Configuration</b> Management for <b>Software</b> <b>Configuration</b> Auditing.|$|E
50|$|Recently, {{knowledge}} based configuration {{has been extended}} to service and <b>software</b> <b>configuration.</b> Modeling <b>software</b> <b>configuration</b> {{has been based on}} two main approaches: feature modeling, and component-connectors. Kumbang domain ontology combines the previous approaches building on the tradition of {{knowledge based}} configuration.|$|E
5000|$|<b>Software</b> <b>configuration</b> {{management}} - Although release {{engineering is}} sometimes {{considered part of}} <b>Software</b> <b>Configuration</b> Management, the latter, being a tool or a process used by the Release Engineer, is actually more of {{a subset of the}} roles and responsibilities of the typical Release Engineer.|$|E
40|$|Large {{and complex}} {{software}} systems, like those common on personal computers, often contain many components {{that can be}} deployed separately—applications, libraries, drivers, etc. —but that must then be bound together into working <b>configurations.</b> Configuring <b>software</b> is difficult and error-prone in practice, {{and it is not}} well understood in theory. As a result, real software systems are often configured in ways that are fragile and undependable. To address these problems, we present a novel and precise model for reasoning about <b>software</b> <b>configurations,</b> and the processes by which they are constructed. We can compare our framework to existing software deployment tools, such as Windows Installer and the RPM Package Manager, and formalize desirable properties of <b>software</b> <b>configurations.</b> 1...|$|R
40|$|While {{assessing}} {{software performance}} {{quality in the}} cloud, we noticed some significant performance variation of several Java applications. At a first glance, they looked like mysteries. To isolate the variation due to cloud, system and <b>software</b> <b>configurations,</b> we designed a set of experiments and collected set of software performance data. We analyzed the data to identify the sources of Java performance variation. Our experience in measuring Java performance may help attendees in selecting the trade-offs in <b>software</b> <b>configurations</b> and load testing tool configurations to obtain the software quality measurements they need. The contributions of this paper are (1) Observing Java performance mysteries in the cloud, (2) Identifying the sources of performance mysteries, and (3) Obtaining optimal and reproducible performance data...|$|R
5000|$|A darknet (or dark net) is any {{overlay network}} {{that can be}} {{accessed}} only with specific <b>software,</b> <b>configurations,</b> or authorization, often using non-standard communications protocols and ports. Two typical darknet types are friend-to-friend networks (usually used for file sharing with a peer-to-peer connection) and privacy networks such as Tor.|$|R
5000|$|<b>Software</b> <b>configuration</b> management(ניהול בקרת תצורת תוכנה): Perforce ...|$|E
50|$|Vesta is a <b>software</b> <b>configuration</b> {{management}} system {{developed in the}} 1990s.|$|E
50|$|Stub {{records or}} {{original}} baselines are {{created in the}} <b>software</b> <b>configuration</b> management tool.|$|E
50|$|By {{implementing}} the reservation, the Internet Assigned Numbers Authority (IANA) made available domains {{to use in}} technical and software documentation, manuals and sample <b>software</b> <b>configurations.</b> Thus, documentation writers can be sure to select a domain name without creating naming conflicts if end-users try to use the sample configurations or examples verbatim.|$|R
40|$|Optical {{triangulation}} methods {{based on}} a laser light sheet and digital camera are used as a surface measurement technique {{in a wide range}} of applications. They allow a fast and accurate determination of surface profiles, while consisting of relatively simple hardware and <b>software</b> <b>configurations.</b> The definition and analysis of surface profiles on reflective materials plays an important rol...|$|R
40|$|This paper {{describes}} an analytical method for modeling the positioning error of a robotic vehicle and examines how the metric of this error {{can be used}} to compare the geometries of various steering configuration. Positioning error can be caused by many factors stemming from the robot’s hardware and <b>software</b> <b>configurations</b> and the interaction between the robot and its environment. ...|$|R
50|$|Development code {{revisions}} and package revisions {{are recorded}} in the <b>software</b> <b>configuration</b> management tool throughout development.|$|E
5000|$|Software Requirements Specification (SRS) - The {{requirements}} {{to be met}} by a Computer <b>Software</b> <b>Configuration</b> Item (CSCI) ...|$|E
5000|$|IBM <b>Software</b> <b>Configuration</b> and Library Manager (SCLM) is an IBM {{software}} {{product that is}} a component of ISPF.|$|E
40|$|We {{present an}} {{approach}} that addresses the problem of securing <b>software</b> <b>configurations</b> from the security-relevant actions of poorly built/faulty installation packages. Our approach {{is based on a}} policy-based control of the package manager’s actions and is customizable for site-specific policies. We discuss an implementation of this approach {{in the context of the}} Linux operating system for the Red Hat Package manager (RPM) ...|$|R
40|$|Despite {{advances}} in computer technology, power outages {{continue to be}} a major cause of PC and server downtime. Protecting computer systems with Uninterruptible Power Supply (UPS) hardware is part of a total solution, but power management software is also necessary to prevent data corruption after extended power outages. Various <b>software</b> <b>configurations</b> are discussed, and best practices aimed at ensuring uptime are presented...|$|R
30|$|The {{heterogeneity}} {{and dynamics}} {{in terms of}} hardware and <b>software</b> <b>configurations</b> are steadily increasing in wireless sensor networks (WSNs). Therefore, software management is {{becoming one of the}} most prominent challenges in this domain. This applies especially for on-demand updates for improved redundancy or adaptive task allocation. Methodologies for efficient software management in WSN need to be investigated for operating and maintaining large-scale sensor networks. We developed a profile-based software management scheme that consists of a dynamic profile-matching algorithm to identify current hardware and <b>software</b> <b>configurations,</b> an on-demand code generation module, and mechanisms for dynamic network-centric reprogramming of sensor nodes. We exploit the advantages of robot-based reconfiguration and reprogramming methods for efficient and secure software management. The mobile robot system is employed for decision processes and to store the source code repository. The developed methods are depicted in detail. Additionally, we demonstrate the applicability and advantages based on a scenario that we implemented in our lab.|$|R
50|$|System {{recovery}} - An OEM {{can provide}} media that can restore {{a computer to}} its original factory <b>software</b> <b>configuration.</b>|$|E
5000|$|Kiosk software: The {{interactive}} {{function of}} the kiosk hardware is largely determined by the software program and kiosk <b>software</b> <b>configuration.</b>|$|E
50|$|The {{history of}} <b>software</b> <b>configuration</b> {{management}} (SCM) in computing {{can be traced}} back as early as the 1950s, when CM (for Configuration Management), originally for hardware development and production control, was being applied to software development. The first <b>software</b> <b>configuration</b> management was most likely done manually. Eventually, software tools were written to manage software changes. History records tend to be based on tools and companies, and lend concepts to a secondary plane.|$|E
40|$|For vendors {{of product}} {{software}} {{it is becoming}} more and more difficult to manage and control the <b>software</b> <b>configurations</b> of all their users at the customer's site. It is labour intensive and error-prone to (semi) automatically register detailed lists of the software artefacts in use by each customer. To alleviate this problem the Deliver project proposes an Intelligent Software Knowledge Base that contains all facts about all artefacts together with their relevant attributes, relations and constraints. In this way, high-quality <b>software</b> <b>configurations</b> can be calculated automatically from a small set of key parameters. It also becomes possible to pose what-if questions about necessary or future upgrades of a customer's configuration. This document describes a case study performed at Exact Software into the processes of release and deployment. The results of the case study are presented, existing of process descriptions of the development, release and deployment processes at Exact Software, a comparison to the Intelligent Software Knowledge Base, and an analysis of the results...|$|R
40|$|The {{heterogeneity}} {{and dynamics}} {{in terms of}} hardware and <b>software</b> <b>configurations</b> are steadily increasing in wireless sensor networks (WSNs). Therefore, software management is {{becoming one of the}} most prominent challenges in this domain. This applies especially for on-demand updates for improved redundancy or adaptive task allocation. Methodologies for efficient software management in WSN need to be investigated for operating and maintaining large-scale sensor networks. We developed a profile-based software management scheme that consists of a dynamic profile-matching algorithm to identify current hardware and <b>software</b> <b>configurations,</b> an on-demand code generation module, and mechanisms for dynamic network-centric reprogramming of sensor nodes. We exploit the advantages of robot-based reconfiguration and reprogramming methods for efficient and secure software management. The mobile robot system is employed for decision processes and to store the source code repository. The developed methods are depicted in detail. Additionally, we demonstrate the applicability and advantages based on a scenario that we implemented in our lab. </p...|$|R
50|$|Ansible is an {{open-source}} {{automation engine}} that automates <b>software</b> provisioning, <b>configuration</b> management, and application deployment.|$|R
