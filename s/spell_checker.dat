227|65|Public
25|$|Among its features, Word {{includes}} a built-in <b>spell</b> <b>checker,</b> a thesaurus, a dictionary, and utilities for manipulating and editing text. The {{following are some}} aspects of its feature set.|$|E
25|$|Although SpeedScript did {{not include}} a {{built-in}} <b>spell</b> <b>checker,</b> additional utilities were soon published. In December 1985, SpeedCheck was published in Compute!'s Gazette. This external utility accepted SpeedScript files (as well as those from compatible word processors, such as PaperClip) and spell-checked them against a user-defined dictionary. An enhanced 80-column version for the C128, SpeedCheck 128, was published in September 1988.|$|E
25|$|A {{key feature}} of ObjC is {{its support for}} categories, methods that {{can be added to}} extend classes at runtime. Categories allow {{extending}} classes in-place to add new functions with no need to subclass or even have access to the original source code. An example might be to add <b>spell</b> <b>checker</b> support to the base NSString class, which means all instances of NSString in the application gain spell checking. The system is also widely used as an organizational technique, allowing related code to be gathered into library-like extensions. Swift continues to support this concept, although they are now termed extensions, and declared with the keyword extension. Unlike ObjC, Swift can also add new properties accessors, types and enums to extant instances.|$|E
5000|$|TeXstudio : This IWE targets LaTeX {{documents}} and provides interactive <b>spelling</b> <b>checker,</b> code folding, and syntax highlighting.|$|R
40|$|This paper {{shows how}} {{morphological}} analysis contributes {{to solving the}} challenges posed {{by the development of}} a <b>spelling</b> <b>checker</b> for an agglutinative language like isiZulu. It demonstrates how the incremental implementation of affix removal rules can be used to derive word forms and enhance the lexical and error recall of the system. In the case of the <b>spelling</b> <b>checker</b> the strategies used are mainly based on the use of regular expressions, and more specifically on a process of stemming...|$|R
40|$|This paper {{describes}} {{part of a}} {{three year}} collaboration between Carnegie Mellon University 2 ̆ 7 s Language Technologies Institute, the Programa de Educación Intercultural Bilingüe of the Chilean Ministry of Education, and Universidad de La Frontera (Temuco, Chile). We are currently constructing a <b>spelling</b> <b>checker</b> for Mapudungun, a polysynthetic language spoken by the Mapuche people in Chile and Argentina. The <b>spelling</b> <b>checker</b> will be built in MySpell, the spell checking system used by the open source office suite OpenOffice. This paper also describes the spoken language corpus that {{is used as a}} source of data for developing the spelling checke...|$|R
500|$|Although {{targeted}} {{mainly for}} 240 × 320 (QVGA) Pocket PC devices, Pocket PC 2002 {{was also used}} for Pocket PC phones, {{and for the first}} time, Smartphones. [...] These Pocket PC 2002 Smartphones were mainly GSM devices. [...] With future releases, the Pocket PC and Smartphone lines would increasingly collide as the licensing terms were relaxed allowing OEMs to take advantage of more innovative, individual design ideas. [...] Aesthetically, Pocket PC 2002 was meant to be similar in design to the then newly released Windows XP. Newly added or updated programs include Windows Media Player 8 with streaming capability; MSN Messenger, and Microsoft Reader 2, with Digital rights management support. Upgrades to the bundled version of Office Mobile include a <b>spell</b> <b>checker</b> and word count tool in Pocket Word and improved Pocket Outlook. Connectivity was improved with file beaming on non-Microsoft devices such as Palm OS, the inclusion of Terminal Services and Virtual private networking support, and the ability to synchronize folders. Other upgrades include an enhanced UI with theme support and savable downloads and WAP in Pocket Internet Explorer.|$|E
2500|$|New contextual <b>spell</b> <b>checker,</b> {{signified}} by a wavy blue underline [...] {{to the traditional}} wavy red underline for misspellings and wavy green underline for grammar errors, sometimes catches incorrect usage of correctly spelled words, such as in [...] "I think we will loose this battle".|$|E
2500|$|On Windows computers, {{letters with}} acute accents {{can be created}} by holding down the alt key and typing in a three-number code on the number pad {{to the right of}} the {{keyboard}} before releasing the Alt key. Before the appearance of Spanish keyboards, Spanish speakers had to learn these codes if they wanted to be able to write acute accents, though some preferred using the Microsoft Word <b>spell</b> <b>checker</b> to add the accent for them. Some young computer users got in the habit of not writing accented letters at all. The codes (which come from the IBM PC encoding) are: ...|$|E
50|$|Originally the company’s {{business}} model {{was a free}} 2-day trial followed by an option to purchase the user license after the trial expired. On 15 January 2012, the company changed its {{business model}} by releasing its freemium version. The freemium version consists of the contextual-based grammar and <b>spelling</b> <b>checker</b> which users could download and keep for free. The premium version was also available for purchase. Its features include Ginger Text Reader and Personal Trainer a progress report analysis tool, along with unlimited access to Grammar Checker, the grammar and <b>spelling</b> <b>checker,</b> and Sentence Rephraser the rephrasing tool.|$|R
40|$|In {{this article}} we give an {{overview}} of various aspects of a project developing a <b>spelling</b> <b>checker</b> for Afrikaans. We discuss two of the main aims of the project, viz. for researchers to obtain practical experience, and to enhance learning of both researchers and students. This article, therefore, consists of two relatively independent parts that each describes aspects related to these two aims. The first part describes the actual <b>spelling</b> <b>checker.</b> The existing <b>spelling</b> <b>checker</b> is evaluated and, based on the results, improvements are introduced and implemented. Remaining problems are discussed and possible solutions are proposed. We illustrate how practical experience was obtained during {{the evolution of the}} project. The second part discusses the underlying teaching and learning benefits of the project. This includes improving our knowledge of computational linguistics applied to Afrikaans, improving programming skills for linguists, and communication between experts in different fields. We also give an overview of how the project is used for problem-oriented and project-organised educational purposes, and how it solves certain problems related to a shortage of computational linguistic tools and resources for Afrikaans. 14 page(s...|$|R
40|$|This {{study is}} {{concerned}} with the process of designing and implementing an English text <b>spelling</b> <b>checker</b> which can detect and correct the misspelled words. The <b>spelling</b> <b>checker</b> is built using a modified version of Fixed Point Numbers Representations Technique (FPNRT), which is a compression method that is suitable to this kind of applications. The modified FPNRT will transform the dictionary words into numeric values and then stores them in a data base file of that form, which {{is considered to be a}} new way for storing a dictionary. This method gives comparatively good compression ratio and very quick in compression/decompression process. Therefore, this method is good for files which are frequently read and updated. This approach will minimize the memory space required to store the dictionary by achieving a compression ratio of 37 % on average and also enhance the performance of the <b>spelling</b> <b>checker</b> by maximizing its speed which takes O(lg n/ 5). This approach is also provide a new way for building a list of candidate words that may be used to correct the misspelled words...|$|R
2500|$|Word Mobile {{is a word}} {{processor}} that allows creating and editing documents. It supports basic formatting, such as bolding, changing font size, and changing colors (from red, yellow, or green). It can add comments, but can't edit documents with tracked changes. It can't open password protected documents, change the typeface, text alignment, or style (normal, heading 1); create bulleted lists; insert pictures; or undo. Word Mobile is neither able to display nor insert footnotes, endnotes, page headers, page footers, page breaks, certain indentation of lists, and certain fonts while working on a document, but retains them if the original document has them. In addition to {{the features of the}} 2013 version, the 2007 version on Windows Mobile also has the ability to save documents in the Rich Text Format and open legacy PSW (Pocket Word). Furthermore, it includes a <b>spell</b> <b>checker,</b> word count tool, and a [...] "Find and Replace" [...] command. In 2015, Word Mobile became available for Windows 10 and Windows 10 Mobile on Windows Store.|$|E
5000|$|<b>Spell</b> <b>checker</b> program: [...] Avro {{provided}} a <b>spell</b> <b>checker</b> as separate program. There is a <b>spell</b> <b>checker</b> plug-in for Microsoft Word.|$|E
5000|$|<b>Spell</b> <b>checker</b> (<b>Spell</b> <b>checker</b> doesn't {{distinguish}} between text and code) ...|$|E
25|$|The package author {{defines the}} product features. A word processor, for example, might place the program's core file into one feature, and the program's help files, {{optional}} <b>spelling</b> <b>checker</b> and stationery modules into additional features.|$|R
40|$|In {{this paper}} we {{describe}} {{the development of an}} improved <b>spelling</b> <b>checker</b> for Afrikaans. We compare two currently available spelling checkers and discuss their shortcomings. The existing applications are restricted in their suggestion capabilities, as well as their precision and recall, mainly because they cannot treat morphologically complex words correctly. Here, we will mainly focus on improvements in precision and recall. The general architecture of the existing <b>spelling</b> <b>checker</b> is discussed and several improvements are implemented. We describe an improved lookup phase and a newly added morphological analysis phase. The morphological analysis poses some problems which are also treated. Finally, some remaining problems are mentioned. ...|$|R
50|$|TeXstudio is a {{cross-platform}} {{open source}} LaTeX editor. Its features include an interactive <b>spelling</b> <b>checker,</b> code folding, and syntax highlighting. It {{does not provide}} LaTeX itself - the user must choose a distribution of LaTeX and install it first.|$|R
5000|$|SpellMaster - a ROM-based <b>spell</b> <b>checker.</b> Believed {{to be the}} world's first check-as-you-type <b>spell</b> <b>checker</b> ...|$|E
5000|$|... stavekontroll (spellchecker) or stave kontroll (<b>spell</b> <b>checker)</b> ...|$|E
50|$|For example: a user might first {{instruct}} {{the operating system}} to load a word processor program from one file, and then edit a document stored in another file with the word processor program. In this example, the document would be considered data. If the word processor also features a <b>spell</b> <b>checker,</b> then the dictionary (word list) for the <b>spell</b> <b>checker</b> would also be considered data. The algorithms used by the <b>spell</b> <b>checker</b> to suggest corrections would be either machine code data or text in some interpretable programming language.|$|E
40|$|Aspects of the Roumanian <b>spelling</b> <b>checker</b> ROMSP are presented: {{effective}} vocabulary representation, similar words detection algorithms, automatic word inflection, {{the user}} interface, supporting tools, further development. Problems of user interface engineering support by object oriented methods are of special interest...|$|R
40|$|We {{present a}} {{syllable}} bigram model for segmenting a Korean sentence into words and correcting word-spacing {{errors in the}} <b>spelling</b> <b>checker.</b> We evaluated the system's performance for automatic word segmentation, word-spacing error detection, and the word-splitting problem of the character recognition system {{at the end of}} a line...|$|R
50|$|MySpell {{was started}} by Kevin Hendricks {{in an attempt to}} {{integrate}} various open-source spelling checkers into the OpenOffice.org build. With a little prodding from Kevin Atkinson, the author of Pspell and Aspell, a new <b>spelling</b> <b>checker</b> (MySpell) was written in C++ that supported affix compression, based on Ispell.|$|R
5000|$|... #Caption: A {{screenshot}} of Enchant, the AbiWord <b>spell</b> <b>checker.</b>|$|E
50|$|Spell is the {{standard}} English language <b>spell</b> <b>checker</b> for Unix.|$|E
50|$|LocoScript version 1 had no <b>spell</b> <b>checker</b> or {{mail merge}} facilities.|$|E
40|$|We {{present a}} {{comprehensive}} Bangla <b>spelling</b> <b>checker</b> that improves {{the quality of}} suggestions for misspelled words. The complex rules for Bangla spelling presents a significant challenge in producing suggestions for a misspelled word when employing the traditional methods; one must take phonetic similarity into account for suggested alternatives to be reasonably accurate. In Bangla there are several algorithms available for spell checking, however, none of these considers the complex orthographic rules of Bangla. As a result, <b>spelling</b> <b>checker</b> application does not perform well. In this paper, we describe the process of checking the spelling of a Bangla document (i. e. detecting misspelled words, generating suggestions for misspelled word, and ranking the suggestions), compare the methodologies with existing solutions available in the literature, and then propose solutions for each step. Finally, we conclude by showing the performance and evaluation of our proposed solution. 1...|$|R
50|$|OpenTaal {{provides}} {{files for}} spelling check {{which are being}} used in software such as OpenOffice.org, Firefox, Thunderbird, Safari, Opera, TinyMCE and more. Some of this software receives custom files from OpenTaal while other software uses the generic <b>spelling</b> <b>checker</b> Hunspell. This is using its own custom file from OpenTaal. Even the Dutch Wiktionary uses this list of correctly spelled words.|$|R
40|$|Includes bibliographical {{references}} (page 7 - 8). We {{present a}} comprehensive Bangla <b>spelling</b> <b>checker</b> that improves {{the quality of}} suggestions for misspelled words. The complex rules for Bangla spelling presents a significant challenge in producing suggestions for a misspelled word when employing the traditional methods; one must take phonetic similarity into account for suggested alternatives to be reasonably accurate. In Bangla there are several algorithms available for spell checking, however, none of these considers the complex orthographic rules of Bangla. As a result, <b>spelling</b> <b>checker</b> application does not perform well. In this paper, we describe the process of checking the spelling of a Bangla document (i. e. detecting misspelled words, generating suggestions for misspelled word, and ranking the suggestions), compare the methodologies with existing solutions available in the literature, and then propose solutions for each step. Finally, we conclude by showing the performance and evaluation of our proposed solution. Naushad UzZamanMumit Kha...|$|R
50|$|AtariWriter Plus - disk only. Contained {{enhancements}} and a <b>spell</b> <b>checker.</b>|$|E
5000|$|A {{different}} <b>spell</b> <b>checker</b> {{than that}} used by OpenOffice.org, and thesaurus ...|$|E
5000|$|Informatic (since 2010) — {{development}} of ORFO <b>spell</b> <b>checker</b> and stylistics assistant; ...|$|E
40|$|A DPhil thesis {{proposal}} has been submitted which describes {{work on a}} <b>spelling</b> <b>checker</b> for dyslexic people. The thesis hopes {{to show that the}} algorithm presented previously can build a user model to support error recovery via a search in an adaptive computing environment. Over the last two years a software prototype has been built that tests the principles described in earlier reports {{in the form of a}} <b>spelling</b> <b>checker.</b> The software has only recently been completed to an extent that it can be tested properly. The results indicate that although the algorithm may work, the prerequisite of consistency in spelling is not present to the expected degree. Now, in the middle of the final year of funded research, it is important to decide where to take the project next. This document presents the work as it stands in a fairly raw form. It assumes some familiarity with earlier reports on the work. Revision : 1 : 1 Date : 1997 = 03 = 0311 : 53 : 07 2 Chapter 1 Introduction 1. 1 Experimental Hypoth [...] ...|$|R
50|$|Depending on the {{particular}} implementation, a search box may {{be accompanied by a}} drop-down list to present the users with past searches or search suggestions. Search boxes may have other features to help the user, such as autocomplete, search suggestions, a <b>spelling</b> <b>checker,</b> etc. Search boxes are often also accompanied by drop-down menus or other input controls to allow the user to restrict the search or choose what type of content to search for.|$|R
50|$|Ginger Page {{operates}} as an online service and supports MS-Word, MS-Outlook, MS-PowerPoint, Internet Explorer, Chrome and Firefox, and {{functions as a}} writing enhancement app for Android and iOS mobile devices. Its main feature is the grammar and <b>spelling</b> <b>checker</b> that runs seamlessly with the different user interfaces. It also has an advanced paraphrasing tool, contextual synonyms and definitions, multi-language translation and a text-to-speech function that enables users to hear sentences before and after correction.|$|R
