8|4083|Public
40|$|The random {{sequence}} generated by linear feedback shift register can’t {{meet the demand}} of unpredictability for secure paradigms. A combination logistic chaotic equation improves the linear property of LFSR and constructs a novel {{random sequence}} generator with longer period and complex architecture. We present the detailed result of the statistical testing on generated bit sequences, done by very strict tests of randomness: the NIST <b>suite</b> <b>tests,</b> to detect the specific characteristic expected of truly random sequences. The results of NIST’s statistical tests show that our proposed method for generating random numbers has more efficient performance...|$|E
40|$|Pseudo-Random Number Generators (PRNGs) are {{required}} for generating secret keys in cryptographic algorithms, generating sequences of packet in Network simulations (workload generators) and other applications in various fields. In this paper we will discuss a list of some requirements for generating a reliable random sequence and then will present some PRNG methods {{which are based on}} combinational chaotic logistic map. In the final section after a brief introduction to two statistical test packets, TestU 01 and NIST <b>suite</b> <b>tests,</b> the PRNG methods which are presented in the fourth section will be appraised under these test packets and the results will be reported...|$|E
40|$|The use of key-dependent shiftRows can be {{considered}} as one of the applied methods for altering the quality of a cryptographic algorithm. This article describes one approach for changing the ShiftRows transformation employed in the algorithm AES. The approach employs methods inspired from DNA processes and structure which depended on the key while the parameters of the created new ShiftRows have characteristics identical to those of the original algorithm AES in addition to increase its resistance against attacks. The proposed new ShiftRows were tested for coefficient correlation for dynamic and static independence between the input and output. The NIST Test <b>Suite</b> <b>tests</b> were used to test the randomness for the block cipher that used the new transformation...|$|E
5000|$|The Java Device Test <b>Suite's</b> <b>tests</b> can {{be divided}} into three main categories: ...|$|R
5000|$|Module of a <b>test</b> {{software}} <b>suite</b> (<b>test</b> bench) or {{an integrated}} development environment ...|$|R
40|$|As a <b>test</b> <b>suite</b> usually {{contains}} redundancy, {{a subset}} of the <b>test</b> <b>suite</b> (representative set) may still satisfy all the test objectives. As the redundancy increases the cost of executing the <b>test</b> <b>suite,</b> many <b>test</b> <b>suite</b> reduction techniques have been brought out in spite of the NP-completeness of the general problem of finding the optimal representative set of the <b>test</b> <b>suite.</b> In the literature, some experimental studies of <b>test</b> <b>suite</b> reduction techniques have already been reported, but there are still shortcomings of the studies of these techniques. This paper presents an experimental comparison of the four typical <b>test</b> <b>suite</b> reduction techniques: heuristic H, heuristic GRE, genetic algorithm-based approach and ILP-based approach. The aim of the study is to provide a guideline for choosing the appropriate <b>test</b> <b>suite</b> reduction techniques...|$|R
40|$|The {{components}} of telecommunication {{systems can be}} described by state machines that communicate by sending messages asynchronously. It is difficult to keep a component consistent with the other components it is connected to. Interface protcol descriptions {{can be used to}} specify the correct sequence of messages. This thesis provides a method to create the behavioural state machine of a component by using the protocol descriptions of its interfaces. The method takes a stepwise approach on the problem by limiting the design options for each transition. A prototype has been implemented and integrated into the Ramses tool <b>suite.</b> <b>Tests</b> so far show promising results increased development speed, better overview for the developer and consistency. </p...|$|E
40|$|Chaotic {{systems have}} many {{interesting}} {{features such as}} sensitivity on initial condition and system parameter, ergodicity and mixing properties. In this paper, we exploit these interesting properties of chaotic systems to design a random bit generator, called CCCBG, in which two chaotic systems are cross-coupled with each other. To evaluate the randomness of the bit streams generated by the CCCBG, the four basic tests: monobit test, serial test, auto-correlation, Poker test and the most stringent tests of randomness: the NIST <b>suite</b> <b>tests</b> have been performed. As a result no patterns have been observed in the bit streams generated by the proposed CCCBG. The proposed CCCBG {{can be used in}} many applications requiring random binary sequences and also in the design of secure cryptosystems...|$|E
40|$|In this paper, {{we discuss}} the {{properties}} of making a deterministic algorithm suitable to generate a pseudo random sequence of numbers: high value of Kolmogorov-Sinai entropy, high dimensionality of the parent dynamical system, and very large period of the generated sequence. We propose the chaotic coupled map lattices as a pseudo random number generator. We show what chaotic features of the coupled map lattices are useful for generating pseudo random numbers and investigate numerically which of them survive in the discrete state version of the map. To evaluate the randomness of the bit sequences generated by the RNGs, the NIST <b>suite</b> <b>tests</b> were performed. The proposed RNGs {{can be used in}} many applications requiring random bit sequences and also in the design of secure cryptosystems...|$|E
50|$|TestLink is {{a web-based}} test {{management}} system that facilitates software quality assurance. It is developed and maintained by Teamtest. The platform offers support for <b>test</b> cases, <b>test</b> <b>suites,</b> <b>test</b> plans, test projects and user management, {{as well as}} various reports and statistics.|$|R
50|$|TestNG has {{provided}} four additional setup/teardown pairs for the <b>suite,</b> <b>test</b> and groups, i.e. @BeforeSuite, @AfterSuite, @BeforeTest, @AfterTest, @BeforeGroup and @AfterGroup, @BeforeMethod and @AfterMethod.|$|R
40|$|A <b>test</b> <b>suite</b> for a key {{interface}} {{within a}} dimensional measuring system (coordinate measuring machine or CMM) is presented. The <b>test</b> <b>suite</b> consists of <b>test</b> procedures, test definitions, and various testing utilities. A real-time, distributed test utilizing the <b>test</b> <b>suite</b> has been performed and is described...|$|R
40|$|In {{this work}} a new {{encryption}} scheme, which is {{realized with a}} Chaotic Pseudo-Random Bit Generator (CPRBG) based on a Logistic map, is presented. The proposed system is used for encrypting text files {{for the purpose of}} creating secure data bases. The Logistic map is the most studied discrete nonlinear map because it has been used in many scientific fields. Also, the fact, that this discrete map has a known algebraic distribution, made the Logistic map a good candidate for use in the design of random bit generators. The proposed CPRBG, which is very easily implemented, uses the X-OR function, in the bit sequences, that are produced by two Logistic maps with different initial conditions and system’s parameters, to achieve better results concerning the “randomness” of the produced bits sequence. The detailed results of the statistical testing on generated bit sequences, done by the most well known tests of randomness: the FIPS- 140 - 2 <b>suite</b> <b>tests,</b> confirmed the specific characteristics expected of random bit sequences...|$|E
40|$|During {{last one}} and half decade an {{interesting}} relationship between chaos and cryptography has been developed, {{according to which}} many properties of chaotic systems such as: ergodicity, sensitivity to initial conditions/system parameters, mixing property, deterministic dynamics and structural complexity can be considered analogous to the confusion, diffusion with small change in plaintext/secret key, diffusion with a small change within one block of the plaintext, deterministic pseudo randomness and algorithmic complexity properties of traditional cryptosystems. As {{a result of this}} close relationship several chaos-based cryptosystems have been put forward since 1990. In one of the stages of the development of chaotic stream ciphers, the application of discrete chaotic dynamical systems in pseudo random bit generation has been widely studied recently. In this communication, we propose a novel pseudo random bit generator (PRBG) based on two chaotic logistic maps running side-by-side and starting from random independent initial conditions. The pseudo random bit sequence is generated by comparing the outputs of both the chaotic logistic maps. We discuss the suitability of the logistic map by highlighting some of its interesting statistical properties, which make it a perfect choice for such random bit generation. Finally, we present the detailed results of the statistical testing on generated bit sequences, done by the most stringent tests of randomness: the NIST <b>suite</b> <b>tests,</b> to detect the specific characteristics expected of truly random sequences. Povzetek: Predstavljen je psevdo naključni generator bitov na osnovi kaotičnega pristopa. ...|$|E
50|$|In {{software}} engineering, {{test design}} is {{the act of}} creating and writing <b>test</b> <b>suites</b> for <b>testing</b> software.|$|R
5000|$|... <b>test</b> <b>suite</b> {{parameterization}} and <b>test</b> case selection mechanisms ...|$|R
40|$|Abstract — This work {{considers}} {{conformance testing}} (functional testing). The main distinction {{from the other}} works is the availability of mapping from implementation states to specification ones. This information allows us to simplify test development and to reduce test execution time. We introduce a novel implementation relation called conff and composite <b>test</b> <b>suites.</b> The conff relation minimizes the size of generated <b>test</b> <b>suite.</b> Composite <b>test</b> <b>suite</b> is a compact representation of traditional <b>test</b> <b>suite.</b> Furthermore, it allows to reduce test execution time. I...|$|R
50|$|Soaplab2 {{supports}} {{defining and}} running <b>test</b> <b>suites</b> {{and includes a}} predefined <b>test</b> <b>suite</b> for <b>testing</b> EMBOSS Web Services. One important new feature in Soaplab2 was its new web-page front-end Spinet which allows running of underlying programs through usual HTML forms.|$|R
40|$|BenToWeb {{deliverable}} D 4. 1., [URL] document describes <b>test</b> <b>suites</b> {{and quality}} assurance methods for W 3 C recommendations. It briefly describes how <b>test</b> <b>suites</b> {{are defined by}} the W 3 C Quality Assurance activity. The next chapter analyses accessibility-related <b>test</b> <b>suites</b> (both drafts and finished versions) from which BenToWeb may use materials and/or gather ideas. The analysis addresses scope, coverage, size, automation aspects and copyright/licensing issues. The next chapter discusses the architecture of W 3 C <b>test</b> <b>suites.</b> The DOM <b>test</b> <b>suite</b> is used as an illustrative example of a suite {{with a high degree}} of automation. The final chapter discusses future work that is required to move from <b>test</b> <b>suites</b> to benchmarks. nrpages: 45 status: publishe...|$|R
40|$|Abstract—Effective testing {{can develop}} quality {{software}} with higher productivity {{at a lower}} cost. As the software is modified and new test cases {{are added to the}} <b>test</b> <b>suite,</b> the size of the <b>test</b> <b>suite</b> grows and the cost of testing is also increases. In order to reduce the cost of testing researcher have investigated the use of <b>test</b> <b>suite</b> reduction technique. Redundancy in <b>test</b> <b>suite</b> increases the execution cost. Weighted set covering Technique can be used to solve the <b>test</b> <b>suite</b> minimization. This paper adapts the cost and priority factor to reduce the <b>test</b> <b>suite.</b> We conduct a comparison between the different algorithm and design a formula for the <b>test</b> <b>suite</b> reduction...|$|R
40|$|In {{order to}} deliver high quality {{software}} projects, a developing team probably needs a well-developed <b>test</b> <b>suite.</b> There are several methods that aim to evaluate <b>test</b> <b>suites</b> in some way, such as Code coverage and Mutation testing. Code coverage describes {{the degree of}} source code that a program executes when running a <b>test</b> <b>suite.</b> Mutation <b>testing</b> measures the <b>test</b> <b>suite</b> effectiveness. More development teams use code coverage {{to a greater extent}} than mutation testing. With code coverage being monitored throughout a project, could the development team risk drop of the <b>test</b> <b>suite</b> effectiveness as the codebase getting bigger with each version? In this thesis, a mutation testing tool called PIT is used during progress of four well known open source projects. The reason for this is to show that mutation testing is an important technique to ensure continuously high <b>test</b> <b>suite</b> effectiveness, and does not only rely on code coverage measurements. In general, all projects perform well in both code coverage and <b>test</b> <b>suite</b> effectiveness, with the exception of one project inwhich the <b>test</b> <b>suite</b> effectiveness drops drastically. This drop shows that all projects are at risk of low <b>test</b> <b>suite</b> effectiveness, by not using mutation testing techniques...|$|R
40|$|Pairwise {{coverage}} of factors affecting software {{has been proposed}} to screen for potential errors. Techniques to generate <b>test</b> <b>suites</b> for pairwise coverage are evaluated according to many criteria. A small number of tests is a main criterion, as this dictates the time for test execution. Randomness has been exploited to search for small <b>test</b> <b>suites,</b> but variation occurs in the <b>test</b> <b>suite</b> produced. A worst-case guarantee on <b>test</b> <b>suite</b> size is desired; repeatable generation is often necessary. The time to construct the <b>test</b> <b>suite</b> is also important. Finally, testers {{must be able to}} include certain tests, and to exclude others. The main approaches to generating <b>test</b> <b>suites</b> for pairwise coverage are examined; these are exemplified by AETG, IPO, TCG, TConfig, simulated annealing, and combinatorial design techniques. A greedy variant of AETG and TCG is developed. It is deterministic, guaranteeing reproducibility. It generates only one candidate test at a time, providing faster <b>test</b> <b>suite</b> development. It is shown to provide a logarithmic worst-case guarantee on the <b>test</b> <b>suite</b> size. It permits users to “seed ” the <b>test</b> <b>suite</b> with specified <b>tests.</b> Finally, comparisons with other greedy approaches demonstrate that it often yields the smallest <b>test</b> <b>suite.</b> KEY WORDS software interaction testing, covering array, greedy algorithm, pairwise coverage...|$|R
40|$|Regression {{testing is}} an {{expensive}} testing process used to re-validate software as it evolves. Various methodologies for improving regression testing processes have been explored, but the cost-effectiveness of these methodologies {{has been shown to}} vary with characteristics of regression <b>test</b> <b>suites.</b> One such characteristic involves the way in which test inputs are composed into test cases within a <b>test</b> <b>suite.</b> This article reports the results of controlled experiments examining the effects of two factors in <b>test</b> <b>suite</b> composition — <b>test</b> <b>suite</b> granularity and <b>test</b> input grouping — on {{the costs and benefits of}} several regression-testing-related methodologies: retest-all, regression <b>test</b> selection, <b>test</b> <b>suite</b> reduction, and <b>test</b> case prioritization. These experiments consider the application of several specific techniques, from each of these methodologies, across ten releases each of two substantial software systems, using seven levels of <b>test</b> <b>suite</b> granularity and two types of test input grouping. The effects of granularity, technique, and grouping on the cost and fault-detection effectiveness of regression testing under the given methodologies are analyzed. This analysis shows that <b>test</b> <b>suite</b> granularity significantly affects several cost-benefit factors for the methodologies considered, while test input grouping has limited effects. Further, the results expose essential tradeoffs affecting the relationship between <b>test</b> <b>suite</b> design and regression testing cost-effectiveness, with several implications for practice. ...|$|R
40|$|The test {{generation}} method SaMsTaG (SDL and MSC based {{test case}} generation) has successfully {{been applied to}} the B-ISDN ATM Adaption Layer protocol SSCOP (Service Specific Connection Oriented Protocol). In parallel to our work the ATM Forum developed another <b>test</b> <b>suite</b> for SSCOP. Unlike the <b>test</b> <b>suite</b> generated automatically by the SaMsTaG tool, this one was specified manually. Both <b>test</b> <b>suites</b> have been compared, but the results were only of restricted value because the <b>test</b> <b>suites</b> base on different test architectures. In order to achieve more significant comparison results the SaMsTaG tool has been adapted to the test method chosen by the ATM Forum, i. e., the remote test method, and the <b>test</b> <b>suite</b> has been re-generated. In this paper we present a revised comparison of various aspect of the two <b>test</b> <b>suites.</b> Keywords SDL, MSC, TTCN, conformance testing, test case generation, abstract <b>test</b> <b>suite,</b> remote <b>test</b> method, B-ISDN SSCOP 1. Introduction SaMsTaG [3, 4, 12] is a method and a to [...] ...|$|R
40|$|When {{testing a}} program, testers need to {{generate}} a set of test cases that satisfies a testing objective. This set of test cases {{is referred to as}} a <b>test</b> <b>suite.</b> Usually, the generated <b>test</b> <b>suite</b> may contain redundancy, that is, some test cases may be removed from the <b>test</b> <b>suite</b> without rendering the satisfaction of the testing objective. A representative set is a subset of a <b>test</b> <b>suite</b> that satisfies the same testing objective, and <b>test</b> <b>suite</b> reduction is aimed at finding the representative sets. This paper studies the properties of representative sets related to the divide-and-conquer approach towards <b>test</b> <b>suite</b> reduction. The results provide us {{a better understanding of the}} structural properties of representative sets and how to apply the divide-and-conquer approach towards <b>test</b> <b>suite</b> reduction...|$|R
40|$|This {{research}} {{presents a}} new <b>test</b> <b>suite</b> consolidation technique, called CONTEST, for automated GUI testing. A new probabilistic {{model of the}} GUI is developed to allow direct application of CONTEST. Multiple existing <b>test</b> <b>suites</b> are used to populate the model and compute probabilities based on the observed event sequences. These probabilities are used to generate a new <b>test</b> <b>suite</b> that consolidates the original ones. A new <b>test</b> <b>suite</b> similarity metric, called CONTeSSi(n), is introduced which compares multiple event sequence-based <b>test</b> <b>suites</b> using relative event positions. Results of empirical studies showed that CONTEST yields a <b>test</b> <b>suite</b> that achieves better fault detection and code coverage than the original suites, and that the CONTeSSi(n) metric is a better indicator of the similarity between sequence-based <b>test</b> <b>suites</b> than existing metrics...|$|R
40|$|Test suite {{minimization}} techniques {{attempt to}} reduce the cost of saving and reusing tests during software maintenance, by eliminating redundant <b>tests</b> from <b>test</b> <b>suites.</b> A potential drawback of these techniques is that in minimizing a <b>test</b> <b>suite,</b> they might reduce the ability of that <b>test</b> <b>suite</b> to reveal faults in the software. A recent study showed that minimization can reduce <b>test</b> <b>suite</b> size without significantly reducing the fault detection capabilities of <b>test</b> <b>suites.</b> To further investigate this issue, we performed an experiment in which we compared {{the costs and benefits of}} minimizing <b>test</b> <b>suites</b> of various sizes for several programs. In contrast to the previous study, our results reveal that the faultdetection capabilities of <b>test</b> <b>suites</b> can be severely compromised by minimization. ...|$|R
40|$|Software {{testing is}} a {{critical}} part of software development. Test suite sizes may grow significantly with subsequent modifications to the software over time. Due to time and resource constraints for <b>testing,</b> <b>test</b> <b>suite</b> minimization techniques attempt to remove those test cases from the <b>test</b> <b>suite</b> that have become redundant over time since the requirements covered by them are also covered by other test cases in the <b>test</b> <b>suite.</b> Prior work has shown that <b>test</b> <b>suite</b> minimization techniques can severely compromise the fault detection effectiveness of <b>test</b> <b>suites.</b> In this paper, we present a novel approach to <b>test</b> <b>suite</b> reduction that attempts to selectively keep redundant tests in the reduced suites. We implemented our technique by modifying an existing heuristic for <b>test</b> <b>suite</b> minimization. Our experiments show that our approach can significantly improve the fault detection effectiveness of reduced suites without severely affecting the extent of <b>test</b> <b>suite</b> size reduction. ...|$|R
50|$|Engines can {{be tested}} by {{measuring}} their performance on specific positions. Typical {{is the use of}} <b>test</b> <b>suites</b> where for each given position there is one best move to find. These positions can be geared towards positional, tactical or endgame play. The Nolot <b>test</b> <b>suite,</b> for instance, focuses on deep sacrifices. The BT2450 and BT2630 <b>test</b> <b>suites</b> measure the tactical capability of a chess engine and have been used by REBEL. There is also a general <b>test</b> <b>suite</b> called Brilliancy which was compiled mostly from How to Reassess Your Chess Workbook. The Strategic Test <b>Suite</b> (STS) <b>tests</b> an engine's strategical strength. Another modern <b>test</b> <b>suite</b> is Nightmare II which contains 30 chess puzzles.|$|R
5000|$|Microsoft Outlook 2000-2007 (Outlook 2010 x64 doesn't {{work with}} PC Suite at the moment,but its {{possible}} to sync via Nokia <b>Suite</b> (<b>tested</b> with 3.1 and E71). Office 2010 x86 does, {{but is not}} officially supported. [...] ) ...|$|R
30|$|Regarding the metrics, cost {{refers to}} the size of the <b>test</b> <b>suites</b> while {{efficiency}} {{refers to the}} time to generate the <b>test</b> <b>suites.</b> Although the size of the <b>test</b> <b>suite</b> is used as an indicator of cost, it does not necessarily mean that test execution cost is always less for smaller <b>test</b> <b>suites.</b> However, we assume that this relationship (higher size of <b>test</b> <b>suite</b> means higher execution cost) is generally valid. We should also emphasize that the time we addressed is not the time to run the <b>test</b> <b>suites</b> derived from each algorithm but rather the time to generate them. We jointly analyzed cost and efficiency in a multi-objective way.|$|R
5000|$|A {{batch system}} {{is needed to}} manage <b>test</b> <b>suites</b> and <b>test</b> cases so that large number of test scripts can run {{automatically}} without user intervention.|$|R
40|$|Systems that locate {{mentions}} {{of concepts}} from ontologies in free text {{are known as}} ontology concept recognition systems. This paper describes an approach to {{the evaluation of the}} workings of ontology concept recognition systems through use of a structured <b>test</b> <b>suite</b> and presents a publicly available <b>test</b> <b>suite</b> for this purpose. It is built using the principles of descriptive linguistic field work and of software testing. More broadly, we also seek to investigate what general principles might inform the construction of such <b>test</b> <b>suites.</b> The <b>test</b> <b>suite</b> was found to be effective in identifying performance errors in an ontology concept recognition system. The system could not recognize 2. 1 % of all canonical forms and no non-canonical forms at all. Regarding the question of general principles of <b>test</b> <b>suite</b> construction, we compared this <b>test</b> <b>suite</b> to a named entity recognition <b>test</b> <b>suite</b> constructor. We found that they had twenty features in total and that seven were shared between the two models, suggesting that there is a core of feature types that may be applicable to <b>test</b> <b>suite</b> construction for any similar type of application. 1...|$|R
40|$|Test-suite {{reduction}} techniques {{attempt to}} reduce the cost of saving and reusing test cases during software maintenance by eliminating redundant test cases from <b>test</b> <b>suites.</b> A potential drawback of these techniques is that in reducing a <b>test</b> <b>suite</b> they might reduce the ability of that <b>test</b> <b>suite</b> to reveal faults in the software. Previous studies suggested that test-suite reduction techniques can reduce <b>test</b> <b>suite</b> size without significantly reducing the fault-detection capabilities of <b>test</b> <b>suites.</b> To further investigate this issue we performed experiments in which we examined {{the costs and benefits of}} reducing <b>test</b> <b>suites</b> of various sizes for several programs and investigated factors that iduence those costs and benefits. In contrast to the previous studies, our results reveal that the fault-detection capabilities of <b>test</b> <b>suites</b> can be severely compromised by test-suite reduction...|$|R
40|$|A QuickCheck {{property}} {{is a logical}} statement of aspects of the behaviour of a system. We report on how similar test cases in a <b>test</b> <b>suite</b> written in Erlang can be identified and then refactored into properties, giving a generalisation of the specification implicit in the <b>test</b> <b>suite.</b> Properties give more concise, easier to maintain <b>test</b> <b>suites</b> and better <b>test</b> coverage. A preliminary evaluation of the techniques in industry demonstrates feasibility as well as potential benefits. A QuickCheck {{property is}} a logical statement of aspects of the behaviour of a system. We report on how similar test cases in a <b>test</b> <b>suite</b> written in Erlang can be identified and then refactored into properties, giving a generalisation of the specification implicit in the <b>test</b> <b>suite.</b> Properties give more concise, easier to maintain <b>test</b> <b>suites</b> and better <b>test</b> coverage. A preliminary evaluation of the techniques in industry demonstrates feasibility as well as potential benefit...|$|R
40|$|Block ciphers {{and message}} {{authentication}} codes should act as random mappings. The randomness of a function’s mapping is typically evaluated with a statistical <b>test</b> <b>suite.</b> Existing <b>test</b> <b>suites</b> such as NIST, Diehard, and Dieharder are not optimized {{for evaluation of}} block ciphers and MACs, as the modes in which these functions are evaluated can introduce bias into the testing. Furthermore, these <b>test</b> <b>suites</b> employ frequentist methodologies which can yield contradictory or ambiguous results. This paper describes CryptoStat, a statistical <b>test</b> <b>suite</b> {{for the analysis of}} block ciphers and MACs which uses Bayesian model selection to evaluate the randomness of a function’s mapping. The tests CryptoStat comprises are described and the results of the <b>test</b> <b>suite</b> applied to a number of well-studied cryptographic functions are reported...|$|R
