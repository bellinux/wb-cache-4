69|87|Public
25|$|XML {{adoption}} {{was helped}} because every XML document {{can be written}} {{in such a way}} that it is also an <b>SGML</b> <b>document,</b> and existing SGML users and software could switch to XML fairly easily. However, XML eliminated many of the more complex and human-oriented features of SGML to simplify implementation environments such as documents and publications. However, it appeared to strike a happy medium between simplicity and flexibility, and was rapidly adopted for many other uses. XML is now widely used for communicating data between applications.|$|E
2500|$|Berners-Lee {{considered}} HTML an SGML application. The Internet Engineering Task Force (IETF) formally {{defined it}} as such with the mid-1993 publication of the first proposal for an HTML specification: [...] by Berners-Lee and Dan Connolly, which included an <b>SGML</b> <b>Document</b> Type Definition to define the grammar. Many of the HTML text elements {{are found in the}} 1988 ISO technical report TR 9537 Techniques for using SGML, which in turn covers the features of early text formatting languages such as that used by the RUNOFF command developed in the early 1960s for the CTSS (Compatible Time-Sharing System) operating system. These formatting commands were derived from those used by typesetters to manually format documents. Steven DeRose argues that HTML's use of descriptive markup (and influence of SGML in particular) was {{a major factor in the}} success of the Web, because of the flexibility and extensibility that it enabled. HTML became the main markup language for creating web pages and other information that can be displayed in a web browser, and is quite likely the most used markup language in the world today.|$|E
50|$|A {{conforming}} <b>SGML</b> <b>document</b> must {{be either}} a type-valid <b>SGML</b> <b>document,</b> a tag-valid <b>SGML</b> <b>document,</b> or both. Note: A user may wish to enforce additional constraints on a document, such as whether a document instance is integrally-stored or free of entity references.|$|E
50|$|Many SGML {{features}} {{relate to}} markup minimization. Other features relate to concurrent (parallel) markup (CONCUR), to linking processing attributes (LINK), and to embedding <b>SGML</b> <b>documents</b> within <b>SGML</b> <b>documents</b> (SUBDOC).|$|R
5000|$|Learning of {{structural}} descriptions from structured example documents, in particular Document Type Definitions (DTD) from <b>SGML</b> <b>documents</b> ...|$|R
50|$|The Document Style Semantics and Specification Language (DSSSL) is an {{international}} standard developed to provide a stylesheets for <b>SGML</b> <b>documents.</b>|$|R
50|$|When an {{external}} entity references a complete <b>SGML</b> <b>document,</b> {{it is known}} in the calling document as an <b>SGML</b> <b>document</b> entity. An <b>SGML</b> <b>document</b> is a text document with SGML markup defined in an SGML prologue (i.e., the DTD and subdocuments). A complete <b>SGML</b> <b>document</b> comprises not only the document instance itself, but also the prologue and, optionally, the SGML declaration (which defines the document's markup syntax and declares the character encoding).|$|E
5000|$|The {{class of}} {{documents}} that conform {{to a given}} <b>SGML</b> <b>document</b> grammar forms an LL(1) language. … The <b>SGML</b> <b>document</b> grammars by themselves are, however, not LL(1) grammars.|$|E
5000|$|An {{advanced}} guide {{focusing on}} XML and <b>SGML</b> <b>document</b> type definitions.|$|E
40|$|Sgrep is a Unix {{tool for}} searching the {{contents}} of text files. Sgrep implements an algebra of unrestricted text fragments called regions. The algebra allows the retrieval of document components, represented as regions, based on conditions on their relative containment and ordering. This simple yet powerful model is suitable for querying structured document formats like electronic mail, RTF, LaTeX, HTML, or <b>SGML</b> <b>documents.</b> We describe the sgrep query language and give examples of its use. Especially, we explain how sgrep {{can be used for}} querying and assembling <b>SGML</b> <b>documents.</b> Keywords: Text search tools, structured <b>documents,</b> <b>SGML.</b> 1 Introduction Every-day data processing creates large amounts of structured documents that have a more or less regular structure. Familiar examples of such structured documents include electronic mail, Usenet news, program source code, HTML pages, and <b>SGML</b> <b>documents.</b> Users seldom bother to index or to store such volatile texts in advanced information retr [...] ...|$|R
40|$|The Standard Generalized Markup Language (SGML), is an ISO Standard that {{specifies}} {{a language}} for document representation. This paper gives a short introduction to SGML and describes the Amsterdam SGML Parser {{and the problems}} we encountered in implementing the Standard. These problems include interpretation of the Standard in the places where it is ambiguous and the technical problems in parsing <b>SGML</b> <b>documents.</b> KEY WORDS <b>SGML</b> Structured <b>documents</b> Document preparation Parser generator...|$|R
50|$|DynaText is an SGML {{publishing}} tool. It {{was introduced}} in 1990, {{and was the first}} system to handle arbitrarily large <b>SGML</b> <b>documents,</b> and to render them according to multiple style-sheets that could be switched at will.|$|R
5000|$|An {{example of}} {{internal}} entity declarations (here in an internal DTD subset of an <b>SGML</b> <b>document)</b> is: ...|$|E
50|$|An <b>SGML</b> <b>{{document}}</b> in which, {{for each}} document instance, {{there is an}} associated document type declaration (DTD) to whose DTD that instance conforms.|$|E
50|$|In computing, AAP DTD is a Document Type Definition for a {{standard}} <b>SGML</b> <b>document</b> type for scientific documents, {{defined by the}} Association of American Publishers.|$|E
40|$|Abstract In {{traditional}} {{information retrieval}} (IR) systems, a document {{as a whole}} is the target for a query. With increasing interests in structured <b>documents</b> like <b>SGML</b> <b>documents,</b> there is a growing need to build an LR system that can retrieve parts of documents, which satisfy not only content-based but also structure-based requirements. In this paper, we describe an inference-net-based approach to this problem. The model is capable of retrieving elements at any level in a principled way, satisfying certain containment constraints in a quety. Moreover, lvhile the model is general enough to reproduce the ranking strategy adopted by conventional document retrieval systems by making use of document and collection level statistics such as TF and IDF, its flexibility allows for incorporation of a variety of pragmatic and semantic information associated with document structures. We implemented the model and ran a series of experiments to show that, in addition to the added functionality, the use of the structural information embedded in <b>SGML</b> <b>documents</b> can improve the effectiveness of document retrieval, compared to the case where no such information is used. We also show that giving a pragmatic preference to a certain element tape of the <b>SGML</b> <b>documents</b> can enhance retrieval effectiveness. ...|$|R
40|$|Using {{database}} {{technology for}} the administration of digital libraries offers many advantages in a multi-user and distributed environment. However, conventional DBMS are not particularly suited to manage semi-structured data with heterogeneous, irregular, evolving structures {{as in the case}} of <b>SGML</b> <b>documents</b> found in digital libraries. To overcome the difficulties imposed by the rigid schema of conventional systems, several schema-less approaches have been proposed. Using instead unconstrained, extensible schemata offered by object-oriented semantic network systems, we are able both to map document specific structures as database classes, and to model the associated constraint information as integrated schema annotations. In this paper we present the benefits of this approach to create, access and process heterogeneous <b>SGML</b> <b>documents,</b> and in particular to exploit the shared semantics of evolving SGML structures. A respective application is currently being implemented in t [...] ...|$|R
40|$|In this report, {{we present}} a {{language}} for producing virtual documents, where dynamic information objects can be retrieved from various sources, transformed, and included along with static information in <b>SGML</b> <b>documents.</b> The language uses a tree-like structure for the representation of information objects, and allows querying without a complete knowledge of the structure or the types of information...|$|R
5000|$|... i4i [...] (Infrastructures for Information) is an {{independent}} software company specializing {{in the delivery of}} XML / <b>SGML</b> <b>document</b> processing software in Toronto, Ontario, Canada, founded by Michel Vulpe in 1993.|$|E
50|$|HyTime (Hypermedia/Time-based Structuring Language) is a markup {{language}} that is an application of SGML. HyTime defines a set of hypertext-oriented element types that, in effect, supplement SGML and allow <b>SGML</b> <b>document</b> authors to build hypertext and multimedia presentations in a standardized way.|$|E
50|$|EAD 1.0 was an <b>SGML</b> <b>document</b> type {{definition}} (DTD). EAD 2002, {{the second}} incarnation of EAD, was finalized in December 2002 and made available as an XML DTD. The {{latest version of}} EAD, EAD3, is available as both an XML schema and a DTD.|$|E
40|$|We {{describe}} some of {{the principles}} behind {{the design of the}} Euromath system, concentrating on some aspects that are needed to explain how the system deals with alphabets and fonts and are not immediately apparent from a demonstration of the system. In particular we outline what an SGML DTD is and what <b>SGML</b> <b>documents</b> look like...|$|R
40|$|Abstract. Using {{database}} {{technology for}} the administration of digital libraries o ers many advantages in a multi-user and distributed environment. However, conventional DBMS are not particularly suited to manage semi-structured data with heterogeneous, irregular, evolving structures {{as in the case}} of <b>SGML</b> <b>documents</b> found in digital libraries. To overcome the di culties imposed by the rigid schema of conventional systems, several schema-less approaches have been proposed. Using instead unconstrained, extensible schemata o ered by object-oriented semantic network systems, we are able both to map document speci c structures as database classes, and to model the associated constraint information as integrated schema annotations. In this paper we present the bene ts of this approach to create, access and process heterogeneous <b>SGML</b> <b>documents,</b> and in particular to exploit the shared semantics of evolving SGML structures. A respective application is currently being implemented in the context of the AQUARELLE project. ...|$|R
40|$|Standard Generalized Markup Language (SGML) {{has been}} widely {{accepted}} as a standard for document representation. The strength of SGML {{lies in the fact}} that it embeds logical structural information in documents while preserving a human-readable form. This structural information in <b>SGML</b> <b>documents</b> allows processing of these documents using database techniques. SGML facilitates this goal by providing a conceptual modeling tool for collections of documents using a document type definition (DTD) and by allowing query processing beyond the classic keyword-based searches of traditional IR systems. We use these observations about SGML as the design principles for developing and implementing a structured document database system. The key difference of our approach from other similar approaches is that the design and implementation remain entirely within the context of the SGML framework. We achieve this by using SGML as the modeling tool of the database instances, by generating <b>SGML</b> <b>documents</b> as [...] ...|$|R
50|$|An <b>SGML</b> <b>{{document}},</b> all {{of whose}} document instances are fully tagged. There {{need not be}} a document type declaration associated with any of the instances. Note: If there is a document type declaration, the instance can be parsed with or without reference to it.|$|E
50|$|A DTD is {{associated}} with an XML or <b>SGML</b> <b>document</b> {{by means of a}} document type declaration (DOCTYPE). The DOCTYPE appears in the syntactic fragment doctypedecl near the start of an XML document. The declaration establishes that the document is an instance of the type defined by the referenced DTD.|$|E
50|$|An <b>SGML</b> <b>document</b> may be {{composed}} from many entities (discrete pieces of text). In SGML, the entities and element types {{used in the}} document may be specified with a DTD, the different character sets, features, delimiter sets, and keywords are specified in the SGML Declaration to create the concrete syntax of the document.|$|E
40|$|Have {{you ever}} been {{frustrated}} by how inadequate SGML databases are in terms of searching or querying your documents? With {{the current state of}} the art, you will easily be able to search for a word, phrase, or keywords in the whole document. Some systems let you perform approximate searches or regular expression searches. Even fewer systems let you search for keywords or phrases in certain SGML regions. However, there is much more information already in <b>SGML</b> <b>documents</b> that one can utilize cleverly to design a proper SGML database system. The current trend of modeling <b>SGML</b> <b>documents</b> with object-oriented and object-relational databases has certainly brought SGML closer to a complex object database model, but much research and development remains to be done in this area. This article introduces the popular relational database query language SQL (Structured Query Language) and its applicability in the SGML domain. The capability of this query language to express complex queries with a not-so [...] ...|$|R
40|$|The Defense Nuclear Agency (DNA) has {{acquired}} terabytes of valuable data which {{need to be}} archived and effectively distributed to the entire nuclear weapons effects community and others [...] . This paper describes the DARE (Data Archival and Retrieval Enhancement) metadata model and explains how it {{is used as a}} source for generating HyperText Markup Language (HTML) or Standard Generalized Markup Language (<b>SGML)</b> <b>documents</b> for access through web browsers such as Netscape...|$|R
5000|$|Finally, the {{document}} type definition may include no subset at all; in that case, it just specifies that {{the document}} {{has a single}} top-level element (this is an implicit requirement for all valid XML and HTML documents, but not for document fragments or for all <b>SGML</b> <b>documents,</b> whose top-level elements may {{be different from the}} implied root element), and it indicates the type name of the root element: ...|$|R
50|$|Tag {{omission}} is {{an optional}} feature to minimize an <b>SGML</b> <b>document.</b> Whenever a tag can be implicitly anticipated by the parser from {{the structure of}} the document, the tag can be omitted.The tag omission feature can be generally enabled or disabled in the SGML Declaration. The Document Type Definition is used to enable or disable the tag for a specific tag.|$|E
5000|$|The Sherlock 2 search plugin is an <b>SGML</b> <b>document,</b> and is {{typically}} given the [...] ".src" [...] file extension. The Sherlock plug-in {{is composed of}} three parts, identified by their element names: , , and [...] tags. These elements allow Sherlock to (respectively) identify a search's engine's web page and the parts {{that are relevant to}} searching, as well as returning the results of the search. There is also a facility for defining how a Sherlock plug-in can update itself.|$|E
50|$|The SGML {{standard}} {{does not}} define SGML with formal data structures, such as parse trees, however, an <b>SGML</b> <b>document</b> is constructed of a rooted {{directed acyclic graph}} (RDAG) of physical storage units known as “entities”, which is parsed into a RDAG of structural units known as “elements”. The physical graph is loosely characterized as an entity tree, but entities might appear multiple times. Moreover, the structure graph is also loosely characterized as an element tree, but the ID/IDREF markup allows arbitrary arcs.|$|E
40|$|This paper {{explores the}} issue of {{publishing}} information under the form of Virtual Documents that include data and fragments of documents from remote sources, especially from databases and <b>SGML</b> <b>Documents</b> databases. Because they are dynamically generated, Virtual Documents are automatically updated when the source information changes, and they allow for sharing, reusing and adapting information for various contexts. The paper focuses on implementation of virtual documents from the authoring and architecture perspective...|$|R
50|$|The FPI is {{undoubtedly}} the least well-understood {{part of the}} document type declaration, an integral component of valid HTML, XML and Standard Generalized Markup Language (<b>SGML)</b> <b>documents.</b> The Formal Public Identifier's effect upon its host document is unusual in that it can depend not only upon its own syntactical correctness and the behaviour of the program parsing it, but also upon the ISO-registration status of the organisation responsible for schema referenced by the FPI.|$|R
40|$|This memo defines an Experimental Protocol for the Internet community. This memo {{does not}} specify an Internet {{standard}} of any kind. Discussion {{and suggestions for}} improvement are requested. Distribution of this memo is unlimited. This document proposes new media sub-types of Text/SGML and Application/SGML. These media types {{can be used in}} the exchange of <b>SGML</b> <b>documents</b> and their entities. Specific details for the exchange or encapsulation of groups of related SGML entities using MIME are currently being considered by the mimesgml Working Grou...|$|R
