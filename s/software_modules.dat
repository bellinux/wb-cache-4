1886|1261|Public
5|$|The {{functionality}} of a USB {{device is}} defined by a class code sent to a USB host. This allows the host to load <b>software</b> <b>modules</b> for the device and to support new devices from different manufacturers.|$|E
25|$|The first desktop {{programmable}} calculators {{were produced}} in the mid-1960s by Mathatronics and Casio (AL-1000). These machines were very heavy and costly. The first programmable pocket calculator was the HP-65, in 1974; it had a capacity of 100 instructions, and could store and retrieve programs with a built-in magnetic card reader. Two years later the HP-25C introduced continuous memory, i.e., programs and data were retained in CMOS memory during power-off. In 1979, HP released the first alphanumeric, programmable, expandable calculator, the HP-41C. It could be expanded with random access memory (RAM, for memory) and read-only memory (ROM, for <b>software)</b> <b>modules,</b> and peripherals like bar code readers, microcassette and floppy disk drives, paper-roll thermal printers, and miscellaneous communication interfaces (RS-232, HP-IL, HP-IB).|$|E
500|$|The {{community}} of Python developers has also contributed over 86,000 <b>software</b> <b>modules</b> (...) to the Python Package Index (PyPI), the official repository of third-party libraries for Python.|$|E
40|$|The <b>software</b> <b>module</b> {{designed}} for this problem set calculated the disturbance torques on a satellite in a specified orbit, sized the required reaction wheels {{to counteract the}} disturbance torques, and sized the propulsion system required to dump angular momentum when the reaction wheels become saturated. Results The <b>software</b> <b>module</b> developed was tested with an orbit similar to the fictional FireSat satellite orbit from SMAD. The results from the <b>software</b> <b>module</b> {{were similar to those}} given in SMAD for the FireSat...|$|R
40|$|The {{fuzzy logic}} model for {{information}} processing is improved in the thesis. Fuzzy knowledge base {{representation in the}} form of a metagraph, the algorithms for metagraph construction, numbering metagraph vertices, finding necessary metagraph?s part and fuzzy inference based on metagraph are proposed. The requirements for structure of metagraph corresponding to non-redundant, linguistic non-contradicted and linguistic complete fuzzy knowledge base are defined. Fuzzy knowledge base properties static verification based on metagraph structure analysis is proposed. The thesis describes the method for metagraph and hierarchical metagraph visualization based on the principles of force-directed algorithms. The information technology for based on metagraph fuzzy knowledge base development and usage is described. This technology includes improved model, developed methods and algorithms. The proposed technology includes tools for fuzzy knowledge base development and usage for complex object evaluation. It includes <b>software</b> <b>module</b> to create and edit based on metagraph fuzzy knowledge base, <b>software</b> <b>module</b> to visualize metagraph, <b>software</b> <b>module</b> for fuzzy knowledge base static verification, <b>software</b> <b>module</b> for based on metagraph fuzzy inference, <b>software</b> <b>module</b> to work with databases|$|R
5000|$|... #Subtitle level 2: <b>Software</b> <b>module</b> file {{players and}} {{converters}} ...|$|R
500|$|Begun {{with a crew}} of five, {{the project}} grew to a staff of 17. The game's code was built from scratch. Most of the <b>software</b> <b>modules</b> were {{interlinked}} with each other, increasing the job's complexity and difficulty. The code incorporated small portions of Descents code for specific functions. Kulas, who had worked on several versions of Flight Simulator and Descent, brought his experience into the game's artificial intelligence (AI). The game's difficulty levels are based on advancing the enemy AI, rather than simply increasing damage and [...] "hit points" [...] of enemies. Some realism was incorporated into the game's physics, such that an impact on {{one part of a}} starfighter's body will send it spinning appropriately, unlike sphere-based collision detection, in which an impact would simply 'push' the starfighter in a particular direction. Due to time and budget constraints, many of the initially planned cutscenes and stories were cut from the final product. Examples of such cuts include a campaign path where the Terran-Vasudan alliance goes on a retreat, and scenes of racial tension within the alliance. Despite the promise of a deathmatch mode for multiplayer, it was cut from the final product. The expansion Silent Threat also suffered the same fate of cuts due to budgetary and time concerns.|$|E
5000|$|The base {{configuration}} of Storage Center includes a disk array controller, disk enclosure, disk drives, connectivity hardware, and <b>software</b> <b>modules.</b> The operating system, also called Storage Center, is regularly updated. <b>Software</b> <b>modules</b> include: ...|$|E
5000|$|... easy {{configuration}} of <b>software</b> <b>modules</b> via configuration files ...|$|E
5000|$|The ClipGrab {{installer}} for Windows uses OpenCandy, {{an advertising}} <b>software</b> <b>module.</b>|$|R
5000|$|When making {{calls to}} a supplier, a <b>software</b> <b>module</b> should {{not violate the}} supplier's preconditions.|$|R
50|$|Provide a {{framework}} in XML schema and a <b>software</b> <b>module</b> integrating {{description of the}} three first subtasks.|$|R
5000|$|... basic {{specification}}s, for the {{specification of}} single <b>software</b> <b>modules,</b> ...|$|E
5000|$|Circular dependency: Introducing {{unnecessary}} {{direct or}} indirect mutual dependencies between objects or <b>software</b> <b>modules</b> ...|$|E
50|$|Spark Modular - a {{collection}} of <b>software</b> <b>modules</b> for building your own modular synthesizer.|$|E
40|$|A {{system and}} method for locally caching remote query replies in an {{electronic}} network comprises a local registry that performs a local query {{for a local}} <b>software</b> <b>module</b> to locate a target software element for a network messaging process. If the local query is unsuccessful, the local registry responsively creates a remote query based on the unsuccessful local query, and then broadcasts the remote query to remote registries across the electronic network. The local registry then evaluates the remote query replies and stores a remote element registration into a local cache for each successful remote query reply. The local <b>software</b> <b>module</b> may then locally identify those remote target software elements with which the local <b>software</b> <b>module</b> frequently communicates, to facilitate efficient network messaging processes...|$|R
40|$|The article {{reviews the}} {{knowledge}} assessment <b>software</b> <b>module</b> of electronic teaching and testing in mining specialist training. To develop the <b>software</b> <b>module</b> integrated programming environment state-of-the-art is used. Its advantage consists in small computer resource consumption, simple editing, and {{protection against the}} users' {{trying to find out}} the correct answers to test tasks. The software makes it possible to learn the ongoing learning information systematically and consistently as well as to assess the current knowledge in mining. The developed module meets the following requirements: a <b>software</b> <b>module</b> user-friendly interface, the storage of passed test results to be used for subsequent viewing, analyses, and evaluation, fast troubleshooting in case of any troubles with a stable module operation, and further software function extension and upgrading...|$|R
50|$|A mobile {{computing}} <b>software</b> <b>module</b> providing automated seamless authentication to {{public or private}} WLAN using the IETF Extensible Authentication Protocol standards.|$|R
5000|$|... 1980 - Ongoing {{development}} of various custom <b>software</b> <b>modules</b> in a mini computer environment ...|$|E
5000|$|BioJava {{provides}} <b>software</b> <b>modules</b> {{for many}} of the typical tasks of bioinformatics programming. These include: ...|$|E
5000|$|When {{extending}} existing <b>software</b> <b>modules,</b> {{a recommendation}} for action {{could be to}} undertake code refactoring.|$|E
30|$|The {{following}} section lists the notation and definitions {{used for the}} remainder of this paper. The notation and definitions in this section match those from the survey paper by Pan [84], if present in both papers, to maintain consistency across both surveys. To provide illustrative examples of the definitions listed below, a machine learning application of <b>software</b> <b>module</b> defect classification is used where a learner is trained to predict whether a <b>software</b> <b>module</b> is defect prone or not.|$|R
50|$|SCOOP (Scalable Concurrent Operations in Python) is a Python <b>software</b> <b>module</b> for distributing {{concurrent}} tasks on various environments, from heterogeneous grids of workstations to supercomputers.|$|R
50|$|Switch Light vSwitch: A user space <b>software</b> <b>module</b> for KVM-based virtual {{switches}} {{that adds}} enhanced functionality and improved performance {{on top of}} the Open vSwitch kernel.|$|R
5000|$|... topics, {{representing}} any concept, from people, countries, {{and organizations}} to <b>software</b> <b>modules,</b> individual files, and events, ...|$|E
5000|$|... 1900.3 Working Group on Recommended Practice for Conformance Evaluation of Software Defined Radio (SDR) <b>Software</b> <b>Modules</b> ...|$|E
5000|$|MyScript FormProcessor is a Windows Server-based {{package of}} <b>software</b> <b>modules</b> {{designed}} to process forms using MyScript handwriting recognition technology.|$|E
5000|$|Imaris - a {{scientific}} <b>software</b> <b>module</b> that delivers {{all the necessary}} functionality for data management, visualization, analysis, segmentation and interpretation of 3D and 4D microscopy datasets ...|$|R
40|$|This paper {{deals with}} a fast Fourier {{transform}} (FFT) based measurement procedure, which has been implemented in a <b>software</b> <b>module</b> for wide-bandwidth digital scopes. The <b>software</b> <b>module</b> can be installed on the oscilloscope {{with the purpose of}} enhancing its performance in terms of frequency resolution and auto-configuration capability and allowing the auto-evaluation of the measurement uncertainty of the amplitudes and frequencies of the spectral components of the signal. The implemented measurement algorithms and the uncertainty auto-evaluation procedure are described in detail. Finally, experimental results are reported...|$|R
50|$|Software: The <b>software</b> <b>module</b> {{tests the}} test takers' Understanding of Software, Ability to Analyze & Design Software, Develop & Test Software, Manage Software, and Implement Integrated Technology.|$|R
5000|$|Another {{essential}} element of COQOS is the AUTOSAR environment. This allows the seamless integration of AUTOSAR software components and basic <b>software</b> <b>modules.</b>|$|E
50|$|These {{products}} {{represented a}} package of integrated <b>software</b> <b>modules</b> for quantum chemistry modelling, providing a user-friendly graphical interface interaction to complex computational methods.|$|E
50|$|Thunks {{have been}} widely used to provide {{interoperability}} between <b>software</b> <b>modules</b> whose routines cannot call each other directly, as in the following cases.|$|E
50|$|A Service Package Interpreter (SPI) is a <b>software</b> <b>module</b> {{that takes}} special tasks (Packages) from a generic HTTP daemon and handles {{them with the}} help of UI components.|$|R
50|$|The {{advantage}} for implementation {{is that if}} a <b>software</b> <b>module</b> has a single purpose, it will be simpler, and therefore easier and less expensive, to design and implement.|$|R
5000|$|Open iT SystemAnalyzer is a <b>{{software}}</b> <b>module</b> {{for those}} who require better control of their software and hardware resources. Some of this module’s primary functions include the following: ...|$|R
