6|10000|Public
5000|$|<b>Security</b> <b>by</b> <b>default,</b> in software, {{means that}} the default {{configuration}} settings are the most secure settings possible, which {{are not necessarily the}} most user friendly settings. In many cases, security and user friendliness are evaluated based on both risk analysis and usability tests. This leads to the discussion of what the most secure settings actually are. As a result, the precise meaning of [...] "secure by default" [...] remains undefined.|$|E
5000|$|A5 ({{security}} misconfiguration) : Good security requires {{having a}} secure configuration defined and deployed for the application, frameworks, application server, web server, database server, and platform. Secure settings should be defined, implemented, and maintained, as defaults are often insecure. Additionally, software {{should be kept}} up to date. Current application security architectures does not follow <b>security</b> <b>by</b> <b>default</b> approach, on the contrary, the programmers must apply security configuration to avoid the access to private or confidential resources. Thanks to the information flow control system implemented by HDIV all the resources (links and forms) exposed by the application are controlled by HDIV and doesn't allow to break the original contract offered by the server. In other words, even when the programmer doesn’t use access control systems or ACL (Java EE or Spring Security) HDIV is able to know which resource is accessible by each user.|$|E
5000|$|A7 (Missing {{function}} level access control) : Most web applications verify function level {{access rights}} before making that functionality {{visible in the}} UI. However, applications need to perform the same access control checks on the server when each function is accessed. If requests are not verified, attackers {{will be able to}} forge requests in order to access functionality without proper authorization. Current application security architectures doesn’t follow <b>security</b> <b>by</b> <b>default</b> approach, on the contrary, the programmers must apply security controls to avoid the access to private or confidential resources. Thanks to the information flow control system implemented by HDIV all the resources (links and forms) exposed by the application are controlled by HDIV and does not allow breaking the original contract offered by the server. In other words, even when the programmer doesn’t use access control systems or ACL (Java EE or Spring Security) HDIV is able to know which resource is accessible by each user.|$|E
50|$|In 2012, {{reporter}} Vincent Verweij of Dutch broadcaster Katholieke Radio Omroep {{revealed that}} the contents of at least 16,000 Iomega NAS devices were publicly available on the internet. This {{was due to the}} devices being sold with password <b>security</b> disabled <b>by</b> <b>default.</b> Among those affected were KLM, ING Group, and Ballast Nedam, who all had confidential material leaked in this manner. Iomega USA acknowledged the problem and said future models (starting February 2013) would come with password <b>security</b> enabled <b>by</b> <b>default.</b> The company said it would clearly instruct users about the risks of unsecured data.|$|R
5000|$|Various {{search engines}} provide {{encrypted}} Web search facilities. In May 2010 Google rolled out SSL-encrypted web search. The encrypted search {{can be accessed}} at [...] However, the web search is encrypted via Transport Layer <b>Security</b> (TLS) <b>by</b> <b>default</b> today, thus every search request should be automatically encrypted if TLS {{is supported by the}} web browser.|$|R
5000|$|Windows NT/2000/XP {{improves}} {{upon this}} with Windows Messenger service, a Windows service compatible to WinPopup. On systems where this service is running, the received messages [...] "pop up" [...] as simple message boxes. Any software compatible with WinPopup, like the console utility NET SEND, can send such messages. However, due to <b>security</b> concerns, <b>by</b> <b>default,</b> the messenger service is off in Windows XP SP2 and blocked by Windows XP's firewall.|$|R
40|$|Virtualization {{is not a}} new technology, but has {{recently}} experienced a resurgence of interest among industry and research. New products and technologies are emerging quickly, and are being deployed with little considerations to security concerns. It is vital to understand that virtualization does not improve <b>security</b> <b>by</b> <b>default.</b> Hence, any aspect of virtualization needs to undergo constant security analysis and audit. Virtualization is a changeable and very dynamic field with an uncertain outcome. In this paper we outline the security model of hypervisors and illustrate the significance of ongoing security analysis by describing different state of the art threat models. Finally, we provide recommendations and design considerations for a more secure virtual infrastructure. ...|$|E
40|$|Today's Internet {{utilizes}} {{a multitude}} of different protocols. While some of these protocols were first implemented and used and later documented, other were first specified and then implemented. Regardless of how protocols came to be, their definitions can contain traps that lead to insecure implementations or deployments. A classical example is insufficiently strict authentication requirements in a protocol specification. The resulting Misconfigurations, i. e., not enabling strong authentication, are common root causes for Internet security incidents. Indeed, Internet protocols have been commonly designed without security in mind which leads to {{a multitude of}} misconfiguration traps. While this is slowly changing, to strict security considerations can have a similarly bad effect. Due to complex implementations and insufficient documentation, security features may remain unused, leaving deployments vulnerable. In this paper we provide a systematization of the security traps found in common Internet protocols. By separating protocols in four classes we identify major factors that lead to common security traps. These insights together with observations about end-user centric usability and <b>security</b> <b>by</b> <b>default</b> are then used to derive recommendations for improving existing and designing new protocols [...] -without such security sensitive traps for operators, implementors and users...|$|E
40|$|In today’s age of Web {{applications}} connected via Web services, accountability {{has become}} both crucial {{and harder to}} achieve. The management of authentication, authorization, and accountability in these applications is therefore a very important and difficult problem to solve. In this article, we describe how audit logging can be built into the Web services infrastructure. Why Web Services? Web services aim to deliver virtualization, interoperability, and reusability via technology implementations such as SOAP, serviceoriented architecture (SOA), and Representational State Transfer (REST). Interoperability in particular is paramount for enterprises that must transact business across multiple. NET, Java, open source, and mainframe platforms. Add in messaging connections to customers and partners located in different countries or organizations, and the challenges of getting protocols and message formats to mesh together seem overwhelming. This is the problem that Web services attempt to address. Unfortunately, however, most Web services implementations offer their own challenges as well—namely, they don’t always enable <b>security</b> <b>by</b> <b>default,</b> and they often leave security decisions about authentication, authorization, and audit logging to the implementer, which can cause serious long-term problems down the road. 1 Web services security has two parts: interface and implementation security and message security. Interface and implementation security uses traditional Web application security controls such as Secure Sockets Layer (SSL) and access control lists (ACLs). For message security, XML mechanisms such as WS-Security, th...|$|E
5000|$|LiveJournal {{additionally}} has a [...] "private" [...] security option {{which allows}} users to make a post that only the poster can read, thus making their LiveJournal a private diary rather than a blog. It is also possible to choose a default security setting for one's journal, so that all entries are posted at that <b>security</b> level <b>by</b> <b>default</b> even if one forgets to alter the security setting {{at the time of}} posting.|$|R
40|$|The Author(s) 2010. This {{article is}} {{published}} with open access at Springerlink. com Abstract The article argues for {{a shift of}} perspective in identity management (IDM) research and development. Accessibility and usability issues affect identity management {{to such an extent}} that they demand a reframing and reformulation of basic designs and requirements of modern identity management systems. The rationale for the traditional design of identity management systems and mechanisms has been security concerns as defined in the field of <b>security</b> engineering. <b>By</b> <b>default</b> the highest <b>security</b> level has been recommended and implemented, often without taking end-user needs and accessibility issues into serious consideration. The article provides a conceptual framework for inclusive IDM, a brief overview of the regulatory status of inclusive IDM and a taxonomy of inclusive identity management methods. Several widespread IDM approaches, methods and techniques are analyzed and discussed from the perspective of inclusive design. Several important challenges are identified and some ideas for solutions addressing the challenges are proposed and discussed...|$|R
40|$|We {{analyze the}} {{connections}} between the credit spreads that the same credit risk commands in different currencies. We show that the empirically observed differences in these credit spreads are mostly driven by the dependency between the default risk of the obligor and the exchange rate. In our model {{there are two different}} channels to capture this dependence: First, the diffusions driving FX and default intensities may be correlated, and second, an additional jump in the exchange rate may occur at the time of default. The differences between the default intensities under the domestic and foreign pricing measures are analyzed and closed-form prices for a variety of <b>securities</b> affected <b>by</b> <b>default</b> risk and FX risk are given (including CDS). In the empirical part of the paper we find that a purely diffusion-based correlation between the exchange rate and the default intensity is not able to explain the observed differences between JPY and USD CDS rates for a set of large Japanese obligors. The data implies a significant additional jump in the FX rate at default...|$|R
50|$|It was {{initially}} funded by donors, then some small commercial bank loans, then low-cost loans from a subsidised wholesaler, and finally from client deposits and retained earnings. The core service {{has remained the}} low-value year-long weekly-repayment loan. ASA has not had to undergo large-scale internal reorganisation or training because the basic product and its delivery have remained largely unchanged. Also, savings from clients are used to provide <b>security</b> against <b>default</b> <b>by</b> protecting the small loan portfolio, instead of being used in more risky ventures like raising capital.|$|R
40|$|Electronic Mail {{is quite}} {{arguably the most}} {{important}} application for personal and business communication across the Internet. People depend on it for sending text, image and even sound files quickly to their destinations. This {{is a far cry}} from the Postal Service and even the Pony Express for delivering messages to their destinations in days or even weeks. E-Mail was designed to be both easy to use and quick for fast end to end message delivery. Because of these factors E-Mail does not have many built in <b>security</b> measures <b>by</b> <b>default.</b> Barebones E-Mail services do not provide non-repudiation between the sender and receiver. They also fail at providing encryption to protect the clear text nature of E-Mail as it traverses the Internet. The goal of this paper will be to provide secure methods of sending and receiving E-Mail over the Internet. This will include both server/provider technologies, as well as, end user client solutions to encompass E-Mail technology as a whole. E-Mail is a convenient technology that most people rely on for communication today, but it can come at a cost if poor security measures are taken...|$|R
5000|$|The surety's {{principal}} right {{against the}} creditor entitles him, after payment of the guaranteed debt, {{to the benefit}} of all securities which the creditor held against the principal debtor. If the creditor has lost these <b>securities</b> <b>by</b> <b>default</b> or laches or rendered them otherwise unavailable, the surety is discharged pro tanto. This right, which is not in abeyance till the surety is called on to pay extends to all securities, whether satisfied or not. [...] "Every person who being surety for the debt or duty of another, or being liable with another for any debt or duty, shall pay such debt or perform such duty, shall be entitled to have assigned to him, or to a trustee for him, every judgment, specialty, or other security, which shall be held by the creditor in respect of such debt or duty, whether such judgment, specialty, or other security shall or shall not be deemed at law to have been satisfied by the payment of the debt or performance of the duty, and such person shall be entitled to stand in the place of the creditor, and to use all the remedies, and, if need be, and upon a proper indemnity, to use the name of the creditor, in any action or other proceeding at law or in equity, in order to obtain from the principal debtor, or any co-surety, co-contractor, or co-debtor, as the case may be, indemnification for the advances made and loss sustained by the person who shall have so paid such debt or performed such duty; and such payment or performance so made by such surety shall not be pleadable in bar of any such action or other proceeding by him, provided always that no co-surety, co-contractor, or co-debtor shall be entitled to recover from any other co-surety, co-contractor, or co-debtor, by the means aforesaid, more than the just proportion to which, as between those parties themselves, such last-mentioned person shall be justly liable". The right of the surety to be subrogated on payment by him of the guaranteed debt, to all the rights of the creditor against the principal debtor is recognized in America and many other countries.|$|R
5000|$|In 2003, OpenBSD {{became the}} first {{mainstream}} operating system to support a strong form of ASLR and to activate it by default.OpenBSD completed its ASLR support in 2008 when it added support for PIE binaries. OpenBSD 4.4's malloc(3) was designed to improve <b>security</b> <b>by</b> taking advantage of ASLR and gap page features implemented as part of OpenBSD's [...] system call, and to detect use-after-free bugs. Released in 2013, OpenBSD 5.3 was the first mainstream operating system to enable Position-independent executables <b>by</b> <b>default</b> on multiple hardware platforms, and OpenBSD 5.7 activated position-independent static binaries (Static-PIE) <b>by</b> <b>default.</b>|$|R
40|$|In {{this paper}} we {{describe}} a security architecture, that allows emerging computation platforms such as PDA's, set-top boxes and mobile phones {{to host a}} variety of applications in a secure fashion. We will introduce a framework to distribute applications and associated security modules - so called security bodies - between the application developer, a trust center and the user's platform. We extend on currently known security frameworks and thereby introduce greater flexibility {{in the level of}} security and safety. Specifically, we define a security body associated with a signed application. This security body contains the public key for the application, as well as rules and software plug-ins governing the behaviour of the application at runtime. The active elements of the security body can take into account the current status at the end-user device, which may not be known in advance. We explore two procedures of interaction between a trust center and an application developer, the first one allowing a less restrictive certification procedure of applications. The second one gives the trust center direct control over signing each application release and also lets the trust center to validate applications in advance. A key feature is the fact, that application and security bodies, although they belong together, may be distributed separately. One application might even have several security bodies for different contexts. An important consequence for the end-user is that for each application he is provided with a trustworthy <b>security</b> configuration <b>by</b> <b>default...</b>|$|R
2500|$|Following Allo's {{introduction}} at Google I/O, Google {{was criticized}} <b>by</b> <b>security</b> experts and privacy advocates {{for having the}} end-to-end encryption turned off <b>by</b> <b>default,</b> which they argue leaves the app open to government surveillance. Edward Snowden, whistleblower and former NSA contractor, criticized the app on Twitter, saying that [...] "Google's decision to disable end-to-end encryption <b>by</b> <b>default</b> in its new #Allo chat app is dangerous, and makes it unsafe." ...|$|R
5000|$|... glEnable(GL_STENCIL_TEST); // <b>by</b> <b>default</b> not enabledglStencilMask(stencilMask); // allow {{writing to}} stencil buffer, <b>by</b> <b>default</b> (0xFF) no mask.glClearStencil(clearStencilValue); // clear stencil value, <b>by</b> <b>default</b> = 0glStencilFunc(func, ref, mask); // <b>by</b> <b>default</b> GL_ALWAYS, 0, 0xFF, always pass stencil testglStencilOp(fail,zfail,zpass); // <b>by</b> <b>default</b> GL_KEEP, GL_KEEP, GL_KEEP, {{do not change}} stencil bufferglClear(GL_STENCIL_BUFFER_BIT); // clear stencil buffer, fill with (clearStencilValue & stencilMask) ...|$|R
50|$|Creation of padding files {{has been}} enabled <b>by</b> <b>default</b> since version 0.85, {{and as of}} version 1.36 is still enabled <b>by</b> <b>default.</b>|$|R
25|$|Java Secure Socket Extension: a Java {{implementation}} {{included in}} the Java Runtime Environment supports TLS 1.1 and 1.2 from Java 7, although is disabled <b>by</b> <b>default</b> for client, and enabled <b>by</b> <b>default</b> for server. Java 8 supports TLS 1.1 and 1.2 enabled on both the client and server <b>by</b> <b>default.</b>|$|R
50|$|Ubuntu 15.04 used systemd {{instead of}} Upstart <b>by</b> <b>default.</b> This release also {{featured}} locally integrated menus <b>by</b> <b>default,</b> replacing the previous default global menus.|$|R
5000|$|CTCP {{is enabled}} <b>by</b> <b>default</b> in {{computers}} running beta versions of Windows Server 2008 and disabled <b>by</b> <b>default</b> in computers running Windows Vista and 7.|$|R
5000|$|Ad Blocker: Content filter {{that comes}} only with EasyList enabled <b>by</b> <b>default.</b> It is also subscribed <b>by</b> <b>default</b> to the Adblock Plus Acceptable Ads Program whitelist.|$|R
50|$|Forward secrecy {{is seen as}} an {{important}} <b>security</b> feature <b>by</b> several large Internet information providers. Since late 2011, Google provided forward secrecy with TLS <b>by</b> <b>default</b> to users of its Gmail service, Google Docs service, and encrypted search services.Since November 2013, Twitter provided forward secrecy with TLS to its users. Wikis hosted by the Wikimedia Foundation have all provided forward secrecy to users since July 2014.|$|R
5000|$|SDL {{support for}} Mir and Wayland is {{available}} from SDL 2.0.2 but it was disabled <b>by</b> <b>default.</b> Wayland and Mir support is enabled <b>by</b> <b>default</b> in SDL 2.0.4.|$|R
5000|$|HTTPS URLs {{begin with}} [...] "https://" [...] and use port 443 <b>by</b> <b>default,</b> or {{alternatively}} 8443, whereas HTTP URLs begin with [...] "http://" [...] and use port 80 <b>by</b> <b>default.</b>|$|R
5000|$|Day 1: Device {{can receive}} SMS, MMS, and e-mail but {{messages}} {{will not be}} read. Wifi (if on <b>by</b> <b>default),</b> Bluetooth (if on <b>by</b> <b>default),</b> and radio stack were also in-scope.|$|R
5000|$|WR= World Record (and <b>by</b> <b>default</b> {{also new}} European, Championships and National records for those involved); ER= European Record (and <b>by</b> <b>default</b> also new Championships and National records); CR= Championships Record ...|$|R
50|$|The {{controversy}} {{gathered around}} the system of keeping score for matches won <b>by</b> <b>default</b> as one wrestler does not appear for their scheduled fight (fusensho). At the time, {{only in the last}} two days of a tournament could a win <b>by</b> <b>default</b> be accepted, and there was no formal announcement (kachi-nanori) of the winner <b>by</b> <b>default,</b> so both wrestlers would be scored as not appearing for the match. In the following tournament in March 1928, the modern system was established where the winner <b>by</b> <b>default</b> was officially scored as a win and not a no-show, {{as it was in the}} past.|$|R
5000|$|Microsoft Windows {{operating}} systems through XP use the range 1025 - 5000 as ephemeral ports <b>by</b> <b>default.</b> [...] Windows Vista, Windows 7, and Server 2008 use the IANA range <b>by</b> <b>default.</b> Windows Server 2003 uses the range 1025 - 5000 <b>by</b> <b>default,</b> until Microsoft <b>security</b> update MS08-037 from 2008 is installed, after which {{it uses the}} IANA range <b>by</b> <b>default.</b> Windows Server 2008 with Exchange Server 2007 installed has a default port range of 1025 - 60000. In addition to the default range, all versions of Windows since Windows 2000 {{have the option of}} specifying a custom range anywhere within 1025 - 65535.|$|R
50|$|In the C++ language, a struct is {{identical}} to a C++ class but {{a difference in the}} default visibility exists: class members are <b>by</b> <b>default</b> private, whereas struct members are <b>by</b> <b>default</b> public.|$|R
25|$|Win by default: If for any reason, {{a wrestler}} {{is unable to}} {{continue}} competing during the match (e.g. because of injury, illness, etc.), his opponent is awarded victory <b>by</b> <b>default.</b> A wrestler can concede a win <b>by</b> <b>default</b> to his opponent by informing the referee himself of his inability to continue wrestling. The decision to concede the win <b>by</b> <b>default</b> can also {{be made by the}} wrestler's coach.|$|R
50|$|In Windows Vista, {{the content}} indexer was {{replaced}} with the Windows Search indexer which was enabled <b>by</b> <b>default.</b> Indexing Service is still included with Windows Server 2008 but is not installed or running <b>by</b> <b>default.</b>|$|R
30|$|<b>By</b> <b>default,</b> all offer good <b>security</b> <b>by</b> vastly {{blocking}} inbound traffic, preventing unsecured instances {{being exposed}} to the Internet unintentionally. Nevertheless, there are subtle differences in the inbound configuration as cloud instances have to be remotely accessed anyway: Amazon EC 2 and Microsoft Azure solely opens port 22 for SSH in case of Linux instances; alternatively, port 3389 for Remote Desktop Protocol (RDP) in case of Windows instances. Google Compute Engine opens both ports independently of the respective instances. In all cases, rules {{can be added to}} allow certain transport layer protocols, ports, and protocols. Although it varies whether single values or (IP/port) ranges are allowed.|$|R
50|$|Unlocked <b>by</b> <b>default.</b>|$|R
