5|2|Public
50|$|Several native {{features}} of iCloud use each user's iCloud <b>storage</b> <b>allowance,</b> specifically, Backup and restore, and email, Contacts, and Calendars. On Macs, users can also store most filetypes into iCloud folders of their choosing, rather than only storing them locally on the machine. While Photo Stream uses the iCloud servers, usage {{does not come}} out of the user's iCloud <b>storage</b> <b>allowance.</b> This is also true for iTunes Match music content, even for music that is not sold in the iTunes Store and which gets uploaded into iCloud storage, it does not count against the user's allowance. Other apps can optionally integrate app storage out of the user's iCloud <b>storage</b> <b>allowance.</b>|$|E
5000|$|... iTunes Match debuted on November 14, 2011. It was {{initially}} available to US users only. For an annual fee, customers can scan and match {{tracks in the}}ir iTunes music library, including tracks copied from CDs or other sources, with tracks in the iTunes Store, so customers {{do not have to}} repurchase said tracks. Customers may download up to 100,000 tracks in 256 kbit/s DRM-free AAC file format that match tracks in any supported audio file formats in customers' iTunes libraries, including ALAC and MP3. Customers also have the choice to keep their original copies stored on their computers or have them replaced by copies from the iTunes Store. Any music not available in the iTunes Store is uploaded for download onto customers' other supported devices and computers; doing this will not take storage from the customers' iCloud's <b>storage</b> <b>allowance.</b> Any such tracks stored in the higher quality lossless audio ALAC, or original uncompressed PCM formats, WAV and AIFF, are transcoded to 256 kbit/s DRM-free AAC format before uploading to the customers' iCloud storage account, leaving the original higher quality local files in their original format.|$|E
50|$|Not {{all of a}} user's content {{counts as}} part of their iCloud <b>storage</b> <b>allowance.</b> Apple is able to keep a {{permanent}} track of every purchase a user makes under their Apple ID account, and by associating each piece of content with the user, means only one copy of every Store item is needed to be kept on Apple's servers. For items bought from the iTunes Store (music, music videos, movies, TV shows), iBooks Store (books), or App Store (iOS apps), this uses a service Apple call iTunes in the Cloud, allowing the user to automatically, or manually if preferred, re-download any of their previous purchases on to a Mac, PC, or iOS device. Downloaded (or streamed, provided the user is connected to the Internet) iTunes Store content can be used across all these devices, however while iBooks Store and App Store content can be downloaded to Macs and PCs for syncing to iOS devices, only iOS and Mac devices — and their respective apps — can be used to read the books. Similarly, macOS apps purchased from the Mac App Store are also linked to the Apple ID they were purchased through, and are able to be downloaded to any Mac using the same Apple ID. Also, when a user registers any new device, all previously bought Store content can be downloaded from the Store servers, or non-Store content from the iCloud servers.|$|E
30|$|The {{duration}} of encountering between two vehicles varies {{from time to}} time. Therefore, during each contact duration, only limited data can be transferred. In many cases, it is even smaller than the <b>storage</b> capacity <b>allowance.</b> Like in [27], data chunks {{are assumed to be}} indivisible, only those data chunks can be transmitted within the contact duration will be forwarded. To make it simple, we use term forwarding communication capacity (FCC) as defined in Def. 5 to represent the capacity of the contact. Note that the channel is a bidirectional one so that FCC only stands for one way capacity. Because of the constraint of FCC, vehicles may not have enough time to finish exchanging data chunks. Therefore, we must then achieve the optimal forwarding exchange under the additional FCC constraint. The FCC can be calculated if the mobility model of vehicles is known [30]. However, each contact would be quite unique so that we propose to compute FCC during information exchange, by using the transmission rate and the time that the vehicle stay in the other’s communication range [27].|$|R
40|$|General {{formulas}} describing deuteron {{spin dynamics}} in <b>storage</b> rings with <b>allowance</b> for the tensor electric and magnetic polarizabilities are derived. It is {{found that an}} initially tensor-polarized deuteron beam can acquire a final horizontal vector polarization {{of the order of}} 1 %. This effect allows one to measure the tensor magnetic polarizability of the deuteron in storage ring experiments. We also confirm an existence of the effect found by Baryshevsky and Gurinovich, hep-ph/ 0506135 and Baryshevsky, hep-ph/ 0510158; hep-ph/ 0603191 that the tensor magnetic polarizability of the deuteron causes the spin rotation with two frequencies and experiences beating for polarized deuteron beams in storage rings. Comment: Corrected text, 8 page...|$|R
40|$|Abstract: PAMELA is a satellite-borne {{experiment}} {{designed to}} study the charged component of the cosmic radiation of galactic, solar and trapped nature. The main scientific objective {{is the study of}} the antimatter component of cosmic rays over a wide range of energies. PAMELA is mounted on the Resurs DK 1 satellite that was launched on June 15 th 2006 and is orbiting the Earth on a semipolar (70 ◦) elliptical (350 × 600 km 2) orbit. The experiment has a foreseen lifetime of at least 3 years. PAMELA is built around a permanent magnet silicon spectrometer, surrounded by a plastic scintillator anticoinci-dence shield. An electromagnetic calorimeter is used for particle identification and energy measurements. If PAMELA data exceed the <b>storage</b> <b>allowance</b> on the satellite or the daily downlink quota (now∼ 20 GB), a second level trigger may be activated by uplink from ground. Information from the anticoincidence sys-tem and from the calorimeter will be included in the second level trigger condition, providing a selective reduction of data. The data reduction and the systematic uncertainties in the proton and electron spectra are evaluated with in-orbit data and compared to simulations...|$|E
30|$|When {{two or more}} {{vehicles}} encounter, each of {{them may}} contain several large data chunks. A data chunk has a different possibility of being delivered to the destination in different vehicles which depends on the contact quality between the data carrying vehicle and the destination vehicle. We cannot simply allocate the data chunk to the vehicle where it has the best possibility since there are storage bound. Therefore, we consider a joint allocation of data chunks in the buffer of both vehicles to maximize the entire delivery possibility of all data without storage overflow. Therefore, it is like there are two knapsacks {{and we try to}} put items in them to achieve maximal value under the constraint of storage. Besides that, the duration of each encountering is limited so that not all desired data chunks can be exchanged but also we need consider the communication constraint. In this paper, we model data chunk assignment problem as a multiple knapsack problem [26] where we try to achieve the maximal delivery possibility of all data chunks. When two vehicles meet, {{the first step is to}} exchange necessary information. Then, the second step is that all the data chunks are re-arranged according to their delivery possibility in different vehicles as a multiple knapsack problem. When the re-arrangement is applied, the spare space may not be enough for the movement of these data chunks. Another limitation is the capacity of the channel, due to the bandwidth and the contact duration, there exists a bound of maximal amount of data that could be transmitted, which also applies in the dense case. In the multi-copy scenario, since the data copy with lower priority can be dropped, therefore, the <b>storage</b> <b>allowance</b> is not only the free space in the buffer but also data chunks to be dropped.|$|E

