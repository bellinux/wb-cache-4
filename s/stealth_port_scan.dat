0|307|Public
50|$|The {{program can}} also be used to detect probes or attacks, including, but not limited to, {{operating}} system fingerprinting attempts, semantic URL attacks, buffer overflows, server message block probes, and <b>stealth</b> <b>port</b> <b>scans.</b>|$|R
50|$|The threat level {{caused by}} a <b>port</b> <b>scan</b> can vary greatly {{according}} to the method used to scan, the kind of <b>port</b> <b>scanned,</b> its number, {{the value of the}} targeted host and the administrator who monitors the host. But a <b>port</b> <b>scan</b> is often viewed as a first step for an attack, and is therefore taken seriously because it can disclose much sensitive information about the host.Despite this, the probability of a <b>port</b> <b>scan</b> alone followed by a real attack is small. The probability of an attack is much higher when the <b>port</b> <b>scan</b> is associated with a vulnerability scan.|$|R
40|$|Most network attackers perform <b>port</b> <b>scanning</b> individually, without synchronization, to find victim hosts. Such <b>port</b> <b>scanning</b> schemes {{suffer from}} two problems: first, {{there are too}} many {{duplicate}} scannings and too much contention among different port scanners; second, a complete <b>port</b> <b>scanning</b> {{takes a long time to}} finish. In this paper, we present a fast DHT-based collaborative <b>port</b> <b>scanning</b> scheme that aims to eliminate duplicate scanning, minimize contention, and significantly increase the scanning speed. In collaborative attacks, attackers communicate and collaborate with each other to launch much more powerful attacks. In the DHT-based collaborative <b>port</b> <b>scanning</b> scheme, attackers collaborate to search the network for ports that could be exposed to attacks. We propose different collaborative scanning strategies and analyze their advantages and disadvantages. We discuss the static, dynamic, and hybrid target selection and allocation schemes. We present the algorithm details and discuss the stop and revisit policy for the collaborative port scanners. We conduct experiments to evaluate the performance and overhead of the collaborative <b>port</b> <b>scanning</b> strategies. Experimental results suggest that the proposed collaborative <b>port</b> <b>scanning</b> system significantly increases the efficiency of <b>port</b> <b>scanning</b> and provide insights into many design and implementation issues...|$|R
40|$|<b>Port</b> <b>scans</b> {{represent}} a sizable portion of today’s Internet traffic. However, {{there has been}} little research characterizing <b>port</b> <b>scan</b> activity. The goal of this project is to analyze sample network traces to discover and classify properties of <b>port</b> <b>scans.</b> We hope that this work will help to generate better network intrusion detection systems and increase general network security. ...|$|R
25|$|The threat level {{caused by}} a <b>port</b> <b>scan</b> can vary greatly {{according}} to the method used to scan, the kind of <b>port</b> <b>scanned,</b> its number, {{the value of the}} targeted host and the administrator who monitors the host. But a <b>port</b> <b>scan</b> is often viewed as a first step for an attack, and is therefore taken seriously because it can disclose much sensitive information about the host.|$|R
25|$|Despite this, the {{probability}} of a <b>port</b> <b>scan</b> alone followed by a real attack is small. The probability of an attack is much higher when the <b>port</b> <b>scan</b> is associated with a vulnerability scan.|$|R
40|$|Abstract—Wired and {{wireless}} networks are being attacked and hacked on continuous basis. One {{of the critical}} pieces of information the attacker needs to know is the open ports on the victim’s machine, thus the attacker does what is called <b>port</b> <b>scanning.</b> <b>Port</b> <b>scanning</b> {{is considered one of}} the dangerous attacks that intrusion detection tries to detect. Snort, a famous network intrusion detection system (NIDS), detects a <b>port</b> <b>scanning</b> attack by combining and analyzing various traffic parameters. Because these parameters cannot be easily combined using a mathematical formula, fuzzy logic can be used to combine them; fuzzy logic can also reduce the number of false alarms. This paper presents a novel approach, based on fuzzy logic, to detect <b>port</b> <b>scanning</b> attacks. A fuzzy logic controller is designed and integrated with Snort in order to enhance the functionality of <b>port</b> <b>scanning</b> detection. Experiments are carried out in both wired {{and wireless}} networks. The results show that applying fuzzy logic adds to the accuracy of determining bad traffic. Moreover, it gives a level of degree for each type of <b>port</b> <b>scanning</b> attack. Index Terms—Intrusion Detection System, Fuzzy Logic, <b>Port</b> <b>Scanning,</b> Snort. I. INTRODUCTION AND RELATED WORK Nowadays, using computers and computer networks in all communities all over the world has mad...|$|R
40|$|Abstract—Intrusion {{detection}} is {{a mechanism}} {{used to detect}} various attacks on a wired or wireless network. <b>Port</b> <b>scanning</b> {{is one of the}} dangerous attacks that intrusion detection tries to detect. Snort, a famous network intrusion detection system (NIDS), detects a <b>port</b> <b>scanning</b> attack by combining and analyzing various traffic parameters. Because these parameters cannot be easily combined using a mathematical formula, fuzzy logic can be used to combine them; fuzzy logic can also reduce the number of false alarms. This paper presents a novel approach, based on fuzzy logic, to detect <b>port</b> <b>scanning</b> attacks. A fuzzy logic controller is designed and integrated with Snort in order to enhance the functionality of <b>port</b> <b>scanning</b> detection. Experiments are carried out in both wired and wireless networks. The results show that applying fuzzy logic adds to the accuracy of determining bad traffic. Moreover, it gives a level of degree for each type of <b>port</b> <b>scanning</b> attack...|$|R
40|$|<b>Port</b> <b>scans</b> are {{continuously}} used by both {{worms and}} human attackers to probe for vulnerabilities in Internet facing systems. In this paper, {{we present a}} new method to efficiently detect TCP <b>port</b> <b>scans</b> in very high-speed links. The main idea behind our approach is to early discard those handshake packets that are not strictly needed to reliably detect <b>port</b> <b>scans.</b> We show that with {{just a couple of}} Bloom filters to track active servers and TCP handshakes we can easily discard about 85...|$|R
40|$|Currently, IP {{networks}} are constantly harmed by several attack {{techniques such as}} <b>port</b> <b>scans,</b> denial of service, brute force attacks, etc., which can collapse the continuity of business services. To address this problem, this paper focuses on an alternative solution for detection, block, and prevention of <b>port</b> <b>scanning</b> attacks. Particularly, this implementation is an alternative engine to automatically block specialized tool <b>scans,</b> namely PSAD (<b>Port</b> <b>Scan</b> Attack Detector), but it is conceptualized differently from the features that the program offers. To carry out this work, we have designed and implemented a virtual network environment {{that is to be}} configured as an experimenting platform with <b>port</b> <b>scan</b> attacks. To neutralize such attacks, we performed a security mechanism that takes the data reported by the PSAD and using parameterized variables (block time and level of category) automatic locks become viable, including custom records and notifications via e-mail. To validate our solution, several tests of <b>port</b> <b>scan</b> attacks have been run on public and private networks. Then we have compared the performance of our alternative engine with ClearOS (specialized security tool for Linux) and the PSAD. The results show that our alternative engine is faster and more reliable than the tools previously mentioned. Keywords: Network attacks, <b>port</b> <b>scan</b> attack, security, virtual network environments. 1...|$|R
40|$|The {{vulnerabilities}} {{existing in}} the Internet such as insecure network architectures are exploited to gain un-authorized {{access to a}} network. A launch of an attack usually begins with a deliberate process of analyzing potential victims. This attack is called scan attack. The most common scan attack type is called TCP <b>port</b> <b>scan</b> attack as TCP is a connection oriented protocol. A TCP <b>port</b> <b>scan</b> attack misuses the process of establishing connection between two hosts for communication (TCP three-way handshake) by a half open sacn type (not completing the connection). The existing TCP <b>port</b> <b>scan</b> attack detection approaches have many issues such as detection is not done in real-time, no automated mitigation approach is available and many <b>port</b> <b>scan</b> detection approaches are hardware dependent. In this thesis, based on drawbacks of the existing TCP <b>port</b> <b>scan</b> detection approaches, the requirements for a TCP <b>port</b> <b>scan</b> attack detection and mitigation algorithm are derived and the algorithm is proposed to be developed on an architecture called OrchSec SDN architecture (an orchestrator based SDN architecture). Software-Defined Networking (SDN) is a new paradigm in networking where the data plane (consisting of routers, switches) is separated from the control plane (makes decisions on traffic in the network). The architecture used is called the OrchSec SDN architecture and it separates the monitoring and control functions of the network and uses an orchestrator to coordinate the communication between them. The OrchSec SDN architecture utilizes the network monitoring and SDN control functions and hence is used to develop the TCP <b>port</b> <b>scan</b> attack detection and mitigation algorithm. Finally, {{the behavior of the}} proposed algorithm is tested and validated. The most important future work would be to extend the algorithm to detect and mitigate all the existing <b>port</b> <b>scan</b> attack types...|$|R
50|$|In some jurisdictions, {{unauthorized}} <b>port</b> <b>scanning</b> is illegal.|$|R
2500|$|The {{information}} gathered by a <b>port</b> <b>scan</b> has many legitimate uses including network inventory and the verification {{of the security}} of a network. <b>Port</b> <b>scanning</b> can, however, also be used to compromise security. Many exploits rely upon <b>port</b> <b>scans</b> to find open ports and send specific data patterns in an attempt to trigger a condition known as a buffer overflow. [...] Such behavior can compromise {{the security of a}} network and the computers therein, resulting in the loss or exposure of sensitive information and the ability to do work.|$|R
5000|$|... #Caption: Zenmap, showing {{results for}} a <b>port</b> <b>scan</b> against Wikipedia ...|$|R
50|$|The {{purpose of}} <b>port</b> <b>scanning</b> is finding the open ports on the {{computers}} {{that were found}} with a host <b>scan.</b> When a <b>port</b> <b>scan</b> is started on a network without making use {{of the results of}} a host scan, much time is wasted when many IP addresses in the address range are vacant.|$|R
30|$|In this paper, we {{designed}} a new algorithm that detects on-line <b>port</b> <b>scan</b> attacks. The proposed method is mainly {{based on the}} sliding HyperLogLog algorithm [10] that we adapted to the context of <b>port</b> <b>scan</b> detection in IP traffic. Sliding HyperLogLog is an efficient algorithm that estimates the number of distinct elements over a sliding window. It is {{able to deal with}} a massive data stream and provides an accurate estimate using a very small memory. We used sliding HyperLogLog to analyze traffic and perform an on-line counting that we completed with a decisional mechanism that identifies <b>port</b> <b>scan</b> attacks.|$|R
5000|$|The {{following}} propagation {{methods are}} sub-modules to the <b>port</b> <b>scanning</b> engine: ...|$|R
40|$|Along {{with the}} growth of the {{computer}} system and networks, the mysterious and malicious threats and attacks on the computer systems are also increasing exponentially. There is a need of continuous evaluation of the security of a network and enhancement of the network attack detection system, which will be able to detect different attacks along with the characteristics of the attacks. In previous work, the <b>port</b> <b>scan</b> attack is considered as precursors to an attack and the target was to provide the mitigation technique for the particular <b>port</b> <b>scan</b> attack. There have been relatively few empirical studies done for <b>port</b> <b>scan</b> related attacks and those that do exist may no longer reflect the impact of such attacks on the functionalities of the UTM/network device and on the network. To address this lack of knowledge, this experiment is carried out in fully controlled test bed environment wherein a set of varieties of attack can be simulated and impact of attack(s) is analyzed and appropriate mitigation technique is suggested to mitigate the <b>port</b> <b>scan</b> attack. The experiment result indicates that the <b>port</b> <b>scan</b> mitigation implementation on UTM helps reducing the load on the UTM device and reduces network congestion effectively...|$|R
5000|$|Hide the {{computer}} from <b>port</b> <b>scans</b> by not responding to unsolicited network traffic ...|$|R
25|$|A <b>port</b> <b>scan</b> or portscan is {{a process}} that sends client {{requests}} to a range of server port addresses on a host, with the goal of finding an active port; this is not a nefarious process in and of itself. The majority of uses of a <b>port</b> <b>scan</b> are not attacks, but rather simple probes to determine services available on a remote machine.|$|R
40|$|This paper {{describes}} an experimental approach {{to determine the}} correlation between <b>port</b> <b>scans</b> and attacks. Discussions in the security community often state that <b>port</b> <b>scans</b> {{should be considered as}} precursors to an attack. However, very few studies have been conducted to quantify the validity of this hypothesis. In this paper, attack data were collected using a test-bed dedicated to monitoring attackers. The data collected consist of <b>port</b> <b>scans,</b> ICMP scans, vulnerability scans, successful attacks and management traffic. Two experiments were performed to validate the hypothesis of linking <b>port</b> <b>scans</b> and vulnerability scans to the number of packets observed per connection. Customized scripts were then developed to filter the collected data and group them on the basis of scans and attacks between a source and destination IP address pair. The correlation of the filtered data groups was assessed. The analyzed data consists of forty-eight days of data collection for two target computers on a heavily utilized subnet. 1...|$|R
40|$|In today’s {{scenario}} due to {{advancement in}} computing power, technology, advance tools and coding techniques password cracking and finding vulnerability has become simpler. One {{of the most}} common techniques used by intruders is <b>port</b> <b>scanning,</b> by which attacker identifies running applications and makes entry in the system. In this paper the idea of random port selection is suggested to make the <b>port</b> <b>scanning</b> more difficult for intruder...|$|R
40|$|Abstract- <b>Port</b> <b>scanning</b> {{is one of}} {{the most}} popular {{reconnaissance}} techniques that many attackers use to profile running services on a potential target before launching an attack. Many <b>port</b> <b>scanning</b> detection mechanisms have been suggested in literature. However, very little work has been done on generating <b>port</b> <b>scanning</b> benchmarks that researchers can use to test their detection methods. In this paper, we suggest a simulation framework using OMNeT++ to generate benchmarks that resemble real-life traffic. We approach the problem by dividing it into three modules (topology creation, good traffic generation, bad traffic generation), each of which we make realistic, similar to deployed and usable networks. Hence the resultant benchmark is annotated and made public...|$|R
40|$|<b>Port</b> <b>scan</b> {{correlation}} aims {{to differentiate}} between benign and malicious scans. In this paper we will examine a new method of profiling <b>port</b> <b>scan</b> activity {{in an attempt to}} link different source IP addresses to being the same end user. A data mining approach DynamicWEB based upon the COBWEB conceptual clustering algorithm is shown along with some preliminary results of it functioning within the context of scan correlation...|$|R
50|$|Its list of {{features}} includes <b>port</b> <b>scanning,</b> transferring files, and port listening, {{and it can}} be used as a backdoor.|$|R
5000|$|These packets often contain {{unsolicited}} {{commercial or}} network control messages, or {{are the result}} of <b>port</b> <b>scans</b> and worm activities.|$|R
5|$|Norton stealthed all ports, {{according}} to PC Magazine. <b>Port</b> <b>scans</b> were unsuccessful. The firewall blocked all exploit attempts by Core Impact.|$|R
2500|$|Teo, Lawrence (December, 2000). Network Probes Explained: [...] Understanding <b>Port</b> <b>Scans</b> and Ping Sweeps. Linux Journal, Retrieved September 5, 2009, from ...|$|R
50|$|Norton stealthed all ports, {{according}} to PC Magazine. <b>Port</b> <b>scans</b> were unsuccessful. The firewall blocked all exploit attempts by Core Impact.|$|R
30|$|IP {{networks}} are constantly targeted by new techniques of {{denial of service}} attacks (SYN flooding, <b>port</b> <b>scan,</b> UDP flooding, etc), causing service disruption and considerable financial damage. The on-line detection of DoS attacks in the current high-bit rate IP traffic is a big challenge. We propose in this paper an on-line algorithm for <b>port</b> <b>scan</b> detection. It is composed of two complementary parts: First, a probabilistic counting part, where the number of distinct destination ports is estimated by adapting a method called ‘sliding HyperLogLog’ to the context of <b>port</b> <b>scan</b> in IP traffic. Second, a decisional mechanism is performed on the estimated number of destination ports in order to detect in real time any behavior that {{could be related to}} a malicious traffic. This latter part is mainly based on the exponentially weighted moving average algorithm (EWMA) that we adapted to the context of on-line analysis by adding a learning step (supposed without attacks) and improving its update mechanism. The obtained <b>port</b> <b>scan</b> detecting method is tested against real IP traffic containing some attacks. It detects all the <b>port</b> <b>scan</b> attacks within a very short time response (of about 30 s) and without any false positive. The algorithm uses a very small total memory of less than 22 kb and has a very good accuracy on the estimation of the number of destination ports (a relative error of about 3.25 %), which is in agreement with the theoretical bounds provided by the sliding HyperLogLog algorithm.|$|R
30|$|Denial {{of service}} (DoS) attacks {{are one of}} the most {{important}} issues in network security. They aim to make a server resource unavailable by either damaging data or software or flooding the network with a huge amount of traffic. Thus, the server becomes unreachable by legitimate users, causing a significant financial loss in some cases. <b>Port</b> <b>scan</b> is a particular DoS attack that aims to discover available services on the targeted system [1]. It essentially consists of sending an IP packet to each port and analyzing the response to the connection attempts. Definitions found in the literature are enable to provide an absolute quantitative definition of <b>port</b> <b>scan.</b> The attack is rather defined by a comparison to the standard behavior. The attacker can discover not only available ports (or sevices) but also more relevant information about the victim such as its operating system, services owners, and the authentication method. Once the system vulnerabilities are identified, a future attack can be launched, engendering important damages. Various <b>port</b> <b>scanning</b> techniques have been developed and are very simple to install in order to launch serious <b>port</b> <b>scan</b> attacks. Nmap [2] is the most known <b>port</b> <b>scan</b> method. It was proposed by Fyodor in 2009. Zmap [3] is a faster scanning method developed by Durumeric et al. in 2013. It can scan the IPv 4 address space in less than 45 min using a single machine.|$|R
40|$|Abstract — <b>Port</b> <b>scan</b> {{detection}} is {{very important}} to predict network intrusions and prevent viruses from spreading. Many networks deploy Network Intrusion Detection Systems (NIDS) to detect <b>port</b> <b>scans</b> in real-time. However, most NIDS are perflow based. They are not scalable on high speed links since it is infeasible to maintain the states of numerous flows. In this paper, we propose a scalable scheme for real-time <b>port</b> <b>scan</b> detection without keeping any per-flow state. We use a doublefilter structure to find out pairs which connect to more than N pairs in T time. The experimental results on real network traces show that our scheme can find out those over-threshold pairs with high accuracy. It is easy to scale our scheme to high speed environments due to its little memory consumption and fast processing pipeline. I...|$|R
40|$|<b>Port</b> <b>scans</b> are {{typically}} {{at the begin}} of {{a chain of events}} that will lead to the attack and exploitation of a host over a network. Since building an effective defense relies on information what kind of threat an organization is facing, threat intelligence outlining an actor’s modus operandi is a critical ingredient for network security. In this paper, we describe characteristic patterns in <b>port</b> <b>scan</b> packets {{that can be used to}} identify the tool chain used by an adversary. In an empirical analysis of scan traffic received by two / 16 networks, we find that common open source <b>port</b> <b>scan</b> tools are adopted differently by communities across the globe, and that groups specializing to use a particular tool have also specialized to exploit particular services. Accepted Author ManuscriptCyber Securit...|$|R
40|$|Large {{enterprises}} are nowadays complex interconnected software systems spanning {{over several}} domains. This new dimension makes difficult for enterprises {{the task of}} enabling efficient security defenses. This paper addresses the problem of detecting inter-domain stealthy <b>port</b> <b>scans</b> and proposes an architecture of an Intrusion Detection System which uses, for such purpose, an open source Complex Event Processing engine named Esper. Esper provides low cost of ownership and high flexibility. The architecture consists of software sensors deployed at different enterprise domains. Each sensor sends events to the Esper event processor for correlation. We implemented an algorithm {{for the detection of}} interdomain SYN <b>port</b> <b>scans</b> named Rank-based SYN (R-SYN) <b>port</b> <b>scan</b> detection algorithm. It combines and adapts three detection techniques in order to obtain a unique global statement about the malicious behavior of host activities. An evaluation of the accuracy of our approach has been carried out using several traces, some of which including original traffic dumps, some others altered by injecting packets that simulate <b>port</b> <b>scan</b> activities. Accuracy results show that our algorithm is able to produce a list of scanners characterized by high detection and low false positive rates. Copyright © 2011 ACM...|$|R
5000|$|Similar to war dialing is a <b>port</b> <b>scan</b> under TCP/IP, which [...] "dials" [...] every TCP port {{of every}} IP address {{to find out}} what {{services}} are available. Unlike wardialing, however, a <b>port</b> <b>scan</b> will generally not disturb a human being when it tries an IP address, regardless of whether there is a computer responding on that address or not. Related to wardriving is warchalking, the practice of drawing chalk symbols in public places to advertise the availability of wireless networks.|$|R
2500|$|Many Internet service {{providers}} restrict their customers' {{ability to perform}} <b>port</b> <b>scans</b> to destinations outside of their home networks. [...] This is usually covered {{in the terms of}} service or acceptable use policy to which the customer must agree. Some ISPs implement packet filters or transparent proxies that prevent outgoing service requests to certain ports. For example, if an ISP provides a transparent HTTP proxy on <b>port</b> 80, <b>port</b> <b>scans</b> of any address will appear to have port 80 open, regardless of the target host's actual configuration.|$|R
