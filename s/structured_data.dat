3588|10000|Public
5|$|Forensic Data Analysis is {{a branch}} of digital forensics. It {{examines}} <b>structured</b> <b>data</b> with the aim to discover and analyse patterns of fraudulent activities resulting from financial crime.|$|E
25|$|Some markup languages, such as {{the widely}} used HTML, have pre-defined {{presentation}} semantics—meaning that their specification prescribes how to present the <b>structured</b> <b>data.</b> Others, such as XML, do not have them and are general purpose.|$|E
25|$|XML and its {{extensions}} have regularly {{been criticized}} for verbosity and complexity. Mapping the basic tree model of XML to type systems of programming languages or databases can be difficult, especially when XML is used for exchanging highly <b>structured</b> <b>data</b> between applications, which was not its primary design goal. However, XML data binding systems allow applications to access XML data directly from objects representing a data structure of the data in the programming language used, which ensures type safety, rather than using the DOM or SAX to retrieve data from a direct representation of the XML itself. This is accomplished by automatically creating a mapping between elements of the XML schema XSD of the document and members of a class to be represented in memory. Other criticisms attempt to refute the claim that XML is a self-describing language (though the XML specification itself makes no such claim). JSON, YAML, and S-Expressions are frequently proposed as simpler alternatives (see Comparison of data serialization formats); that focus on representing highly <b>structured</b> <b>data</b> rather than documents, which may contain both highly structured and relatively unstructured content. However, W3C standardized XML schema specifications offer {{a broader range of}} structured XSD data types compared to simpler serialization formats and offer modularity and reuse through XML namespace.|$|E
5000|$|Funding <b>Structure</b> <b>Data</b> - Launched in June 2010, MIX Market’s Funding <b>Structure</b> <b>Data</b> {{provides}} information on debt financing sources for microfinance institutions. The Funding <b>Structure</b> <b>Data</b> cover over 15 billion USD of outstanding debt, ranging from local to foreign, public and private funding sources, and covering 86 countries and 890 MFIs, representing over 90% of all borrowers. The database allows users to aggregate data by country, funder type, and other variables.|$|R
30|$|To prepare {{content and}} <b>structure</b> <b>data,</b> the web pages must be {{downloaded}} and processed locally. <b>Structure</b> <b>data</b> are provided as hyperlinks connecting web pages. While textual content in static pages is typically easy to process, multimedia components {{as well as}} any type of content in dynamic web pages present a harder challenge. Later in this paper, we present an ETL tool for pre-processing usage, content, and <b>structure</b> <b>data</b> before loading them into the data warehouse.|$|R
40|$|This paper {{estimates}} a {{long run}} risk model with term <b>structure</b> <b>data.</b> Inflation and consumption growth both contain correlated long run risk components. The model is estimated by the likelihood-based Bayesian methods and estimates of the latent long run risk factors are extracted from both macro and term <b>structure</b> <b>data.</b> Empirical analysis using US data reveals that a small and persistent component in consumption growth interacting with expected inflation improves the model’s fit for the term <b>structure</b> <b>data...</b>|$|R
25|$|The {{client-side}} (Web browser) technologies used in Web 2.0 development include Ajax and JavaScript frameworks. Ajax programming uses JavaScript and the Document Object Model {{to update}} selected {{regions of the}} page area without undergoing a full page reload. To allow users to continue {{to interact with the}} page, communications such as data requests going to the server are separated from data coming back to the page (asynchronously). Otherwise, the user would have to routinely wait for the data to come back before they can do anything else on that page, just as a user has to wait for a page to complete the reload. This also increases overall performance of the site, as the sending of requests can complete quicker independent of blocking and queueing required to send data back to the client. The data fetched by an Ajax request is typically formatted in XML or JSON (JavaScript Object Notation) format, two widely used <b>structured</b> <b>data</b> formats. Since both of these formats are natively understood by JavaScript, a programmer can easily use them to transmit <b>structured</b> <b>data</b> in their Web application. When this data is received via Ajax, the JavaScript program then uses the Document Object Model (DOM) to dynamically update the Web page based on the new data, allowing for a rapid and interactive user experience. In short, using these techniques, Web designers can make their pages function like desktop applications. For example, Google Docs uses this technique to create a Web-based word processor.|$|E
25|$|XML {{has been}} used to {{describe}} <b>structured</b> <b>data</b> and to serialize objects. Various XML-based protocols exist to represent the same kind of data structures as JSON for the same kind of data interchange purposes. Data can be encoded in XML several ways. The most expansive form using tag pairs results in a much larger representation than JSON, but if data is stored in attributes and 'short tag' form where the closing tag is replaced with '/>', the representation is often about the same size as JSON or just a little larger. If the data is compressed using an algorithm like gzip, there is little difference because compression is good at saving space when a pattern is repeated.|$|E
25|$|PubMed Central (PMC) {{is a free}} digital {{repository}} that archives publicly accessible full-text scholarly {{articles that}} have been published within the biomedical and life sciences journal literature. As {{one of the major}} research databases within the suite of resources that have been developed by the National Center for Biotechnology Information (NCBI), PubMed Central is much more than just a document repository. Submissions into PMC undergo an indexing and formatting procedure which results in enhanced metadata, medical ontology, and unique identifiers which all enrich the XML <b>structured</b> <b>data</b> for each article on deposit. Content within PMC can easily be interlinked to many other NCBI databases and accessed via Entrez search and retrieval systems, further enhancing the public's ability to freely discover, read and build upon this portfolio of biomedical knowledge.|$|E
50|$|<b>Structure</b> <b>data</b> for {{homologous}} compounds.|$|R
50|$|Data can be {{organized}} {{in many different}} types of <b>data</b> <b>structures,</b> including arrays, graphs, and objects. <b>Data</b> <b>structures</b> can store <b>data</b> of many different types, including numbers, strings and even other <b>data</b> <b>structures.</b> <b>Data</b> pass in and out of computers via peripheral devices.|$|R
40|$|Information System (BFPMIS) was developed. At {{the process}} of {{developing}} the excavation monitoring system, the design of the system <b>data</b> <b>structures</b> and the <b>data</b> types are discussed. The excavation monitoring system contains main <b>data</b> <b>structure</b> and assistant <b>data</b> <b>structure.</b> The <b>data</b> <b>structure,</b> <b>data</b> element and data type of projects, bids, sections, monitoring point types, point property, alert values, bore information, pile information and beam information are analyzed emphatically. The application of the tree structure in the main <b>data</b> <b>structure</b> is introduced. And the monitoring points are classified according to the monitoring objects to describe and store the monitoring data. The system set orange alarm and red alarm to every monitoring point...|$|R
2500|$|I brought those tools {{available}} on Windows, {{and then they}} didn't help manage Windows because in Windows, everything's an API that returns <b>structured</b> <b>data.</b> So, that didn't help. [...] I {{came up with this}} idea of PowerShell, and I said, [...] "Hey, we can do this better." ...|$|E
2500|$|Files in most file systems {{used with}} DOS, Windows, Unix, or other {{operating}} systems {{have only one}} [...] "fork". By contrast, MFS and HFS give files two different [...] "forks". The data fork contains {{the same sort of}} information as a file in other file systems, such as the text of a document or the bitmaps of an image file. The resource fork contains other <b>structured</b> <b>data</b> such as menu definitions, graphics, sounds, or code segments that would be incorporated into a program's file format on other systems. An executable file might consist only of resources (including code segments) with an empty data fork, while a data file might have only a data fork with no resource fork. A word processor file could contain its text in the data fork and styling information in the resource fork, so that an application which doesn’t recognize the styling information can still read the raw text.|$|E
50|$|One {{could use}} the <b>Structured</b> <b>Data</b> Display app {{to see all the}} <b>structured</b> <b>data</b> with search results.|$|E
40|$|In {{this first}} lecture we cover results on {{persistent}} <b>data</b> <b>structures,</b> which are <b>data</b> <b>structures</b> where we keep all information about past states. Persistent <b>data</b> <b>structures</b> {{are part of}} the larger class of temporal <b>data</b> <b>structures.</b> The other kind of temporal <b>data</b> <b>structures,</b> retroactive <b>data</b> <b>structures,</b> are the topic of lecture 2. Usually we deal with <b>data</b> <b>structure</b> updates by mutating something in the existing data structure: either its data or the pointers that organize it. In the process we lose information previous <b>data</b> <b>structures</b> states. Persistent <b>data</b> <b>structures</b> do not lose any information. For several cases of <b>data</b> <b>structures</b> and definitions of persistence it is possible to transform a plain <b>data</b> <b>structure</b> into a persistent one with asymptotically minimal extra work or space overhead. A recurring theme in this area is that the model is crucial to the results. Partial and full persistence correspond to time travel with a branching universe model such as the one in Terminator, and Deja Vu parts 1 and 2 2 Model and definitions 2. 1 The pointer machine model of <b>data</b> <b>structures</b> In this model we think of <b>data</b> <b>structures</b> as collections of nodes of a bounded size with entries fo...|$|R
40|$|Summary. In {{this paper}} we survey {{some of the}} major <b>data</b> <b>structures</b> for {{encoding}} Level Of Detail (LOD) models. We classify LOD <b>data</b> <b>structures</b> according to the dimensionality of the basic structural element they represent into point-, triangle-, and tetrahedron-based <b>data</b> <b>structures.</b> Within each class we will review single-level <b>data</b> <b>structures,</b> general <b>data</b> <b>structures</b> for LOD models based on irregular meshes as well as more specialized <b>data</b> <b>structures</b> that assume a certain (semi-) regularity of the data. ...|$|R
5000|$|<b>Data</b> {{modeling}} for <b>structuring</b> <b>data</b> {{independent of}} the processes that use it ...|$|R
5000|$|XML is a markup {{language}} that enables creation of documents composed of <b>structured</b> <b>data.</b> Semantic web gives meaning (semantics) to <b>structured</b> <b>data.</b>|$|E
50|$|Patents contain <b>structured</b> <b>data</b> (like {{publication}} numbers) and unstructured text (like title, abstract, {{claims and}} visual info). <b>Structured</b> <b>data</b> are processed by data-mining and unstructured data are processed with text-mining.|$|E
50|$|SDXF (<b>Structured</b> <b>Data</b> eXchange Format) is a data {{serialization}} format {{defined by}} RFC 3072. It allows arbitrary <b>structured</b> <b>data</b> {{of different types}} to be assembled in one file for exchanging between arbitrary computers.|$|E
5000|$|Information <b>data</b> <b>structures</b> are <b>data</b> <b>structures</b> {{specifically}} {{intended to}} support information inside a computer program. Two common ones are as follows: ...|$|R
40|$|Background: Interaction of {{proteins}} with other molecules {{plays an important}} role in many biological activities. As many structures of protein-DNA complexes and protein-RNA complexes have been determined in the past years, several databases have been constructed to provide <b>structure</b> <b>data</b> of the complexes. However, the information on the binding sites between proteins and nucleic acids is not readily available from the <b>structure</b> <b>data</b> since the data consists mostly of the three-dimensional coordinates of the atoms in the complexes. Results: We analyzed the huge amount of <b>structure</b> <b>data</b> for the hydrogen bonding interactions between proteins and nucleic acids and developed a database called DBBP (DataBase of Binding Pairs in protein-nucleic acid interactions...|$|R
40|$|Namespace {{management}} is fundamental (in a practical sense) {{to the design}} of any programming language: how are naming environments built, and how are they used? Modern programming languages come equipped with a variety of mechanisms to create and manipulate naming environments. These mechanisms fall into two broad categories: program <b>structures</b> and <b>data</b> <b>structures.</b> Program <b>structures</b> and <b>data</b> <b>structures</b> are treated differently in modern programming languages. Program structures are not considered to be data structures: they cannot be examined, nor can they be used as components of other <b>data</b> <b>structures.</b> Nor are <b>data</b> <b>structures</b> considered to be programs: they do not specify a scope, nor can they contain expressions as primitive components. This thesis presents a new programming model called the symmetric model in which the representation of programs is identical to the representation of data: to specify a computation, one defines a <b>data</b> <b>structure.</b> This <b>data</b> <b>structure</b> possesses the seman [...] ...|$|R
50|$|Structure mining or <b>structured</b> <b>data</b> mining is {{the process}} of finding and extracting useful {{information}} from semi-structured data sets. Graph mining, sequential pattern mining and molecule mining are special cases of <b>structured</b> <b>data</b> mining.|$|E
5000|$|Privacy Analytics CORE for <b>Structured</b> <b>Data</b> CORE for <b>structured</b> <b>data</b> is a {{software}} tool {{based on the}} HIPAA Expert Determination Method that de-identifies data based on maximizing data granularity while still protecting subject privacy.|$|E
5000|$|Rich snippets are {{displayed}} by Google {{in the search}} results page when a website contains content in <b>structured</b> <b>data</b> markup. <b>Structured</b> <b>data</b> markup helps the Google algorithm to index and understand the content better.Google supports rich snippets for the following data types: ...|$|E
50|$|This page {{contains}} crystal <b>structure</b> <b>data</b> used in {{the article}} crystal structure of boron-rich metal borides.|$|R
5000|$|Speaker, [...] "International Entrepreneurship and Emerging Trends in Data," [...] Gigaom <b>Structure</b> <b>Data</b> 2014, New York.|$|R
40|$|<b>Data</b> <b>Structures,</b> Computer Graphics, and Pattern Recognition {{focuses on}} the {{computer}} graphics and pattern recognition applications of <b>data</b> <b>structures</b> methodology. This book presents design related principles and research aspects of the computer graphics, system design, data management, and pattern recognition tasks. The topics include the <b>data</b> <b>structure</b> design, concise <b>structuring</b> of geometric <b>data</b> for computer aided design, and <b>data</b> <b>structures</b> for pattern recognition algorithms. The survey of <b>data</b> <b>structures</b> for computer graphics systems, application of relational <b>data</b> <b>structures</b> in computer g...|$|R
5000|$|Structure: <b>Structured</b> <b>data</b> is a {{data that}} has been {{organized}} into a formatted repository - typically a database - so that its elements can be made addressable for more effective processing and analysis. The unstructured data, unlike <b>structured</b> <b>data,</b> is the least formatted data.|$|E
50|$|Forensic Data Analysis (FDA) is {{a branch}} of Digital forensics. It {{examines}} <b>structured</b> <b>data</b> with regard to incidents of financial crime. The aim is to discover and analyse patterns of fraudulent activities. Data from application systems or from their underlying databases {{is referred to as}} <b>structured</b> <b>data.</b>|$|E
5000|$|<b>Structured</b> <b>data,</b> {{categorized}} by industry/domain, products, companies, etc.|$|E
40|$|The {{topic of}} <b>data</b> <b>structures</b> has {{historically}} been taught with two major focuses: first, the basic definition and implementation of a small set of basic <b>data</b> <b>structures</b> (e. g. list, stack, queue, tree, graph), and second, the usage of these basic <b>data</b> <b>structures</b> as provided by a <b>data</b> <b>structures</b> framework in solving larger application problems. We see a further evolution of <b>data</b> <b>structures</b> to include new generations of hybrid and custom <b>data</b> <b>structures,</b> implying that our students must not only understand {{how to use these}} new <b>data</b> <b>structures</b> but that they continue to understand low-level implementation issues so that they can develop the next generation of <b>data</b> <b>structures</b> needed in the future. We suggest that the <b>data</b> <b>structures</b> course evolve to reflect these new generations of <b>data</b> <b>structures...</b>|$|R
50|$|<b>Data</b> <b>structures</b> {{consisted}} of numbers, strings, and arrays {{whereas in the}} Actor model <b>data</b> <b>structures</b> were Actors. Restricting <b>data</b> <b>structures</b> to numbers, strings, and arrays is problematical because it prohibits programmable <b>data</b> <b>structures.</b>|$|R
50|$|Crystallographic {{databases}} store X-ray crystal <b>structure</b> <b>data.</b> Common {{examples include}} Protein Data Bank and Cambridge Structural Database.|$|R
