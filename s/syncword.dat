12|2|Public
50|$|<b>Syncword</b> framing: Some systems use {{a special}} <b>syncword</b> at the {{beginning}} of every frame.|$|E
50|$|In {{computer}} networks, a <b>syncword,</b> sync character, sync sequence or preamble {{is used to}} synchronize a {{data transmission}} by indicating the end of header information {{and the start of}} data. The <b>syncword</b> is a known sequence of data used to identify the start of a frame, and is also called reference signal or midamble in wireless communications.|$|E
5000|$|In some {{communication}} systems, {{a receiver}} can achieve character synchronization from an undifferentiated bit stream, or start-of-header synchronization from a byte stream, without the overhead of an explicit <b>syncword.</b> For example, the FSK441 protocol achieves character synchronization by synchronizing on any [...] "space" [...] {{characters in the}} message in effect, every [...] "space" [...] character in the message does double duty as a <b>syncword.</b> For example, CRC-based framing achieves character and start-of-header synchronization.|$|E
50|$|Differential coding is not {{the only}} way to deal with a phase ambiguity. The other popular {{technique}} is to use <b>syncwords</b> for this purpose. That is, if a frame synchronizer detects repeated inverted sync-words, it inverts the whole stream. This method is used in DVB-S.|$|R
50|$|In telecommunication, frame {{synchronization}} or framing {{is the process}} by which, while receiving a stream of framed data, incoming frame alignment signals (i.e., a distinctive bit sequences or <b>syncwords)</b> are identified (that is, distinguished from data bits), permitting the data bits within the frame to be extracted for decoding or retransmission.|$|R
50|$|In {{an audio}} {{receiver}} receiving a bit stream of data, {{an example of}} a <b>syncword</b> is 0x0B77 for an AC-3 encoded stream.|$|E
50|$|When {{transmitted}} messages include {{at least}} one space, the FSK441 decoding algorithm uses that space character as a <b>syncword</b> for zero-overhead synchronization.|$|E
50|$|In a self-synchronizing code, every {{character}} is, in effect, a <b>syncword,</b> {{and can be}} used {{to achieve}} character synchronization in an undifferentiated bit stream.|$|E
5000|$|The sync token {{might be}} a single pulse (a [...] "start bit" [...] as noted above), {{or it may be}} a more {{complicated}} <b>syncword</b> or self-synchronizing code such as HDLC or 8B/10B encoding.|$|E
5000|$|In data packets sent by {{wireless}} communication, and in {{sectors of}} data stored on magnetic media, typically the header {{begins with a}} <b>syncword</b> to allow the receiver to adapt to analog amplitude and speed variations and for frame synchronization.|$|E
5000|$|The syncwords {{can be seen}} as a kind of delimiter. Various {{techniques}} are used to avoid delimiter collision, orin other wordsto [...] "disguise" [...] bytes of data at the data link layer that might otherwise be incorrectly recognized as the <b>syncword.</b> For example, HDLC uses bit stuffing or [...] "octet stuffing", while other systems use ASCII armor or Consistent Overhead Byte Stuffing (COBS).|$|E
50|$|Automatic {{baud rate}} {{detection}} on UART (ABR, autobaud) {{refers to the}} process by which a receiving device (such as a modem) determines the speed, code level, start bit, and stop bits of incoming data by examining the first character, usually a preselected sign-on character (<b>syncword).</b> ABR allows the receiving device to accept data from a variety of transmitting devices operating at different speeds without needing to establish data rates in advance.|$|E
5000|$|The Hayes {{command set}} {{facilitated}} automatic baud rate detection as [...] "A" [...] and [...] "T" [...] {{happen to have}} bit patterns that are very regular; [...] "A" [...] is [...] "100 0001" [...] and so has a 1 bit at the start and end and [...] "T" [...] is [...] "101 0100" [...] which has a pattern with (nearly) every other bit set. Since the RS-232 interface transmits least significant bit first, the according line pattern with 8-N-1 (eight data bits, no parity bit, one stop bit) is 11000001011001010101 (start and stop bits italicized) which is used as <b>syncword.</b>|$|E
5000|$|The {{data layout}} of AC-3 is {{described}} by simplified [...] "C-like" [...] language in official specifications. An AC-3 stream {{is a series of}} frames; The frame size code is used along with the sample rate code to determine the number of (2-byte)words before the next <b>syncword.</b> Channel blocks can be either long, in which case the entire block is processed as single modified discrete cosine transform or short, in which case two half length transforms are performed on the block. Below is a simplified AC-3 header. A detailed description is in the ATSC [...] "Digital Audio Compression (AC-3) (E-AC-3) Standard", section 5.4.|$|E

