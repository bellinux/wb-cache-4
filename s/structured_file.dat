47|1329|Public
25|$|NextForm is a data {{migration}} spin-off from CoSort functionality designed to convert between <b>structured</b> <b>file</b> formats such as CSV, ISAM, LDIF, and XML, plus data types such as ASCII, EBCDIC, Unicode, and Packed Decimal. Newer NextForm editions can structure data in unstructured sources, convert COBOL Vision files, and facilitate database migration.|$|E
5000|$|GNOME <b>Structured</b> <b>File</b> Library - Can read Microsoft {{structured}} storage files.|$|E
50|$|George 3 {{provided}} a tree <b>structured</b> <b>file</b> store, inspired {{in part by}} Multics.|$|E
50|$|CorVision {{keeps the}} data <b>structure</b> <b>files</b> {{separate}} {{if they are}} to be manipulated by BUILDER. BUILDER keeps a <b>structure</b> <b>file</b> and a key <b>structure</b> <b>file</b> for each dataset used by the application.|$|R
50|$|The Hospital Market <b>Structure</b> <b>Files</b> {{are updated}} {{every three years}} and {{available}} free-of-charge from the HCUP Central Distributor. The HCUP Hospital Market <b>Structure</b> <b>Files</b> are currently available for 1997, 2000, 2003, 2006, and 2009.|$|R
50|$|The {{significance}} of the <b>structure</b> factor <b>files,</b> mentioned above, is that, for CSD structures determined by X-ray diffraction that have a <b>structure</b> <b>file,</b> a crystallographer can verify {{the interpretation of the}} observed measurements.|$|R
50|$|When a user opens a <b>structured</b> <b>file</b> in {{unstructured}} FrameMaker, {{the structure}} is lost.|$|E
5000|$|Up to 40% {{improvement}} in performance for batch applications accessing VSAM files in <b>Structured</b> <b>File</b> Server (SFS).|$|E
50|$|A <b>structured</b> <b>file</b> {{is stored}} on disk {{in a special}} format which allows {{efficient}} loading and navigation of the blocks in the file. This allows each file to also store useful meta-information (such as statistics of action key usage, total edit time, etc.), but hasthe disadvantage that a flat file has to be 'built' from the <b>structured</b> <b>file</b> before (for example) it can be processed by a compiler or word-processing utility.|$|E
50|$|Similarly <b>structured</b> <b>files</b> in {{standard}} CSV format are also supported, {{as well as}} TBX files.|$|R
5000|$|Semiconductor Device and Lead <b>Structure,</b> <b>filed</b> July 1959, issued April 1961, {{assigned}} to Fairchild Semiconductor ...|$|R
5000|$|Method and {{apparatus}} for forming semiconductor <b>structures,</b> <b>filed</b> August 1954, issued February 1959, {{assigned to}} Philco Corporation ...|$|R
5000|$|Representational {{areas of}} a {{metadata}} registry define how {{the data is}} represented in a specific format, such as in a database or a <b>structured</b> <b>file</b> format (e.g., XML) ...|$|E
50|$|Visual Components files use a {{proprietary}} <b>structured</b> <b>file</b> format. This {{means that there}} are various files embedded within each VCM (component model & layout file) and VCP (layout package) file including preview bitmaps, geometry information and metadata sub-files.|$|E
50|$|NextForm is a data {{migration}} spin-off from CoSort functionality designed to convert between <b>structured</b> <b>file</b> formats such as CSV, ISAM, LDIF, and XML, plus data types such as ASCII, EBCDIC, Unicode, and Packed Decimal. Newer NextForm editions can structure data in unstructured sources, convert COBOL Vision files, and facilitate database migration.|$|E
5000|$|The {{significance}} of the <b>structure</b> factor <b>files,</b> mentioned above, is that, for PDB structures determined by X-ray diffraction that have a <b>structure</b> <b>file,</b> the electron density map may be viewed. The data of such structures is stored on the [...] "electron density server".|$|R
40|$|A good {{programming}} language {{alone is not}} sufficient for economic software production. The programming environment has a significant influence on the productivity of software engineers. Providing a programmer with information about an object-oriented software system requires extracting information from the source code, e. g., class, method, and variable names. We use separate <b>structure</b> <b>files</b> for holding this information {{and take advantage of}} proven tools like make and the C preprocessor for keeping the <b>structure</b> <b>files</b> up to date and for processing software systems that heavily use macros. In this paper we describe the concepts used for comfortable processing of C++ software systems, and discuss interesting design and implementation aspects, including <b>structure</b> <b>files,</b> the applied make mechanism, and the exploitation of the C preprocessor...|$|R
50|$|Unlike disk {{encryption}}, filesystem-level encryption {{does not}} typically encrypt filesystem metadata, {{such as the}} directory <b>structure,</b> <b>file</b> names, modification timestamps or sizes.|$|R
50|$|In non-relational systems, {{hierarchical}} databases, {{the distant}} counterpart {{of a table}} is a <b>structured</b> <b>file,</b> representing the rows of a table in each row of the file and each column in a row. This structure implies that a row can have repeating information, generally in the child data segments. Data are stored in sequence of physical records.|$|E
5000|$|The {{orchestra}} and score files may be unified {{into a single}} <b>structured</b> <b>file</b> using markup language tags (a CSD file with filename extension [...]csd). Here is a very simple example of a unified Csound data file which produces a wave file containing a one-second sine wave tone of 1 kHz at a sample rate of 96 kHz: ...|$|E
50|$|This {{has several}} drawbacks. Unless the memory images also have {{reserved}} spaces for future extensions, extending and improving {{this type of}} <b>structured</b> <b>file</b> is very difficult. It also creates files that might be specific to one platform or programming language (for example a structure containing a Pascal string is not recognized as such in C). On the other hand, developing tools for reading and writing these types of files is very simple.|$|E
5000|$|... 3D Protein Structure Visualization: {{integrates}} PDB protein <b>structure</b> <b>files</b> with ViPR Sequence Features {{when applicable}} and provides an interactive 3D protein structure viewer using Jmol ...|$|R
5000|$|The Northwestern University Multislice and Imaging System (NUMIS) is {{a package}} is written by Professor Laurence Marks of Northwestern University. It uses a command line {{interface}} (CLI) and is based in UNIX. A <b>structure</b> <b>file</b> must be provided as input in order to run use this code, which makes it ideal for advanced users. The NUMIS multislice programs use the conventional multislice algorithm by calculating the wavefunction of electrons {{at the bottom of}} a crystal and simulating the image taking into account various instrument-specific parameters including [...] and convergence. This program is good to use if one already has <b>structure</b> <b>files</b> for a material that have been used in other calculations (for example, Density Functional Theory). These <b>structure</b> <b>files</b> can be used to general X-Ray structure factors which are then used as input for the PTBV routine in NUMIS. Microscope parameters can be changed through the MICROVB routine.|$|R
5000|$|... 3D Protein Structure Visualization: {{integrates}} PDB protein <b>structure</b> <b>files</b> with sequence conservation {{score and}} IRD Sequence Features and provides an interactive 3D protein structure viewer using Jmol ...|$|R
5000|$|ObjectiveFS {{implements}} a log <b>structured</b> <b>file</b> {{system on}} top of object stores (such as Amazon S3, Google Cloud Storage and other object store devices). [...] It is a POSIX compliant file system and supports features such as dynamic file system size, soft and hard links, unix attributes, extended attributes, Unix timestamps, users and permissions, no limit on file size, atomic renames, atomic file creation, directory renames, read and write anywhere in a file, named pipes, sockets, etc.|$|E
50|$|The {{structured}} editing facilities of STET {{are based}} on the concept that each file is represented as a collection of named blocks of lines. A block is created from an (anonymous) marked group of lines by the command (for example) 'form commands'. This command creates the block with name 'COMMANDS' and replaces the group of lines with a single line with a reference to COMMANDS (identified by its first non-blank character being some special character, by default ')'). This feature makes it easy to create a <b>structured</b> <b>file</b> from a flat file.|$|E
50|$|The {{structured}} editing commands {{also allow}} {{the user to}} see {{a map of the}} tree structure of the file, list the blocks alphabetically, and navigate the structure of the file. Navigation upwards and downwards or to a named block is possible, along with 'go to next block at this level' (that is, go up a level, find the next block reference at that level, and then go down a level). Other commands allow blocks to be renamed, expanded, etc., and also allow a flat file to be built from {{all or part of the}} <b>structured</b> <b>file.</b>|$|E
30|$|We created {{combined}} distance matrices for {{all possible}} combinations of distance matrices. In {{the case of}} the four input attributes considered in this paper, that means, we produced 11 combined matrices (sentences and DOM tags, sentences and <b>file</b> <b>structures,</b> sentences and images, DOM tags and <b>file</b> <b>structures,</b> DOM tags and images, <b>file</b> <b>structure</b> and images, sentences and DOM tags and <b>file</b> <b>structure,</b> sentences and DOM tags and images, sentences and <b>file</b> <b>structures</b> and images, DOM tags and <b>file</b> <b>structures</b> and images, and sentences and DOM tags and <b>file</b> <b>structures</b> and images). In situations where many additional features are used, several specifically targeted feature combinations could also be identified for creating a limited number of combined distance matrices.|$|R
50|$|In Standalone mode, the 4D {{application}} (4D.exe on Windows or 4D.app on Mac) {{is used to}} {{open the}} <b>structure</b> <b>file</b> (4DB/4DC) file directly along with the associated data file (4DD).|$|R
30|$|<b>Structure</b> <b>files</b> {{obtained}} from various database contains heteroatoms {{and sometimes even}} multiple copies of polypeptide chains, hence before docking ligand and macromolecule file must be processed to eliminate false positives and to get precise docking results.|$|R
5000|$|NEMO was {{developed}} on Sun Workstations, but ports to most Unix like systems. At its core NEMO defines {{a series of}} objects (SnapShot, Orbit, Image) and associated header files and libraries to operate on them, and these mirror the data stored in a portable binary name and type tagged XML like format, dubbed <b>structured</b> <b>file.</b> The program tsf in NEMO will show the contents of such a file in a human readable way. Another feature OF NEMO is that all its data can be piped from one task into the next, thus creating whole simulations in a simple Unix pipe. For example, ...|$|E
30|$|The main novelty {{introduced}} by Hidost is its applicability to multiple file formats, implemented and experimentally confirmed on PDF and SWF. Its application to other hierarchically <b>structured</b> <b>file</b> formats, e.g., XML, HTML, ODF, OOXML, and SVG, requires the instrumentation {{of an existing}} parser or {{the development of a}} new one, one for each file format. Given the ability to parse a specific file format, incorporating it into Hidost amounts to developing a structure extraction module. It is this step that has to be specialized for every file format. In the following, we discuss file structure and content extraction for various hierarchically <b>structured</b> <b>file</b> formats.|$|E
40|$|We {{study the}} {{operation}} of the segment cleaner in a log <b>structured</b> <b>file</b> system. When the segment cleaner is active, response time for user read requests is adversely affected. Thus, it is desirable to run the segment cleaner when the read traffic is low. We propose a simple strategy for scheduling the segment cleaner that seems to perform an order of magnitude better than a random baseline policy. We predict that implementation of our policy on the existing LFS would improve the degree of user satisfaction with the file system. 1 Introduction. A recent innovation in file system technology was the notion of a log <b>structured</b> <b>file</b> system [RO 92]. It was argued that such file systems would capitalize more effectively on the improvement in hardware technologies both in the near and not-so-near future. The basis for such an argument was two-fold: first, that memory was getting both cheaper and more plentiful, and second, that the relative speed of the CPU was increasing with respect to [...] ...|$|E
5000|$|API {{descriptions}} {{are often}} verbose and repetitive, {{which can make}} them difficult to understand and use, and slow adoption of the APIs. RAML has introduced language features that support <b>structured</b> <b>files</b> and inheritance that address cross-cutting concerns ...|$|R
50|$|Using Bio.PDB, one can {{navigate}} through individual {{components of}} a macromolecular <b>structure</b> <b>file,</b> such as examining each atom in a protein. Common analyses can be carried out, such as measuring distances or angles, comparing residues and calculating residue depth.|$|R
50|$|Data types {{supported}} by Proteus are only three: integer numbers, {{floating point numbers}} and strings.Access to advanced data <b>structures</b> (<b>files,</b> arrays, queues, stacks, AVL trees, sets and so on) takes place byusing handles, i.e. integer numbers returned by item creation functions.|$|R
