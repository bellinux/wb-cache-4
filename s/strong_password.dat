98|150|Public
25|$|If {{one has a}} truly <b>strong</b> <b>password,</b> {{there is}} little point in {{changing}} it. Changing passwords which are already strong introduces risk that the new password may be less strong.|$|E
2500|$|The {{following}} measures {{may increase}} acceptance of <b>strong</b> <b>password</b> requirements, if carefully used: ...|$|E
2500|$|It {{prevents}} {{the use of}} a <b>strong</b> <b>password</b> hash (such as bcrypt) when storing passwords (since either the password, or the digested username, realm and password must be recoverable) ...|$|E
25|$|Using <b>strong</b> <b>passwords</b> lowers overall {{risk of a}} {{security}} breach, but <b>strong</b> <b>passwords</b> do not replace the need for other effective security controls. The effectiveness of a password of a given strength is strongly determined by the design {{and implementation of the}} factors (knowledge, ownership, inherence). The first factor is the main focus in this article.|$|R
5000|$|IT and {{information}} security experts {{have found a}} certain usefulness of [...] "jejetyping" [...] {{in the creation of}} <b>strong</b> <b>passwords</b> for user logins.|$|R
5000|$|... {{password}} modules {{are responsible}} for updating passwords, and are generally coupled to modules employed in the authentication step. They may {{also be used to}} enforce <b>strong</b> <b>passwords.</b>|$|R
2500|$|... {{allowing}} {{users to}} reset their passwords via an automatic system, which reduces help desk call volume. However, some systems are themselves insecure; for instance, easily guessed or researched answers to password reset questions bypass {{the advantages of}} a <b>strong</b> <b>password</b> system.|$|E
2500|$|... {{rewarding}} <b>strong</b> <b>password</b> users {{by reducing}} the rate, or eliminating altogether, the need for password changes (password expiration). The strength of user-chosen passwords can be estimated by automatic programs which inspect and evaluate proposed passwords, when setting or changing a password.|$|E
5000|$|The {{following}} measures {{may increase}} acceptance of <b>strong</b> <b>password</b> requirements, if carefully used: ...|$|E
50|$|It is {{necessary}} to weigh these factors: the likelihood of someone guessing a password because it is weak, versus the likelihood of someone managing to steal, or otherwise acquire without guessing, a <b>stronger</b> <b>password.</b>|$|R
40|$|This policy {{ensures the}} confidentiality, integrity, and {{availability}} of publicly available eRA applications by protecting user accounts with <b>strong</b> <b>passwords</b> that meet the criteria of NIST, HHS, and NIH. Applicability This policy applies to users who access publicly available eRA applications. Policy...|$|R
50|$|The fixed {{iteration}} count {{has caused}} this scheme {{to lose the}} computational expense that it once enjoyed and variable numbers of rounds are now favoured. In June 2012, Poul-Henning Kamp declared the algorithm insecure and encouraged users to migrate to <b>stronger</b> <b>password</b> scramblers.|$|R
5000|$|A <b>strong</b> <b>password</b> {{is often}} thought to require {{characters}} {{from at least}} 3 of the following 4 character sets. In fact, length of password is more important.|$|E
5000|$|It {{prevents}} {{the use of}} a <b>strong</b> <b>password</b> hash (such as bcrypt) when storing passwords (since either the password, or the digested username, realm and password must be recoverable) ...|$|E
50|$|Mungeing {{helps to}} create a <b>strong</b> <b>password</b> that the user can {{remember}} easily. The user may choose any word he or she likes, then modifies it to make it stronger.|$|E
5000|$|Use <b>strong</b> email <b>passwords</b> {{and enable}} two-factor {{authentication}} if available.|$|R
40|$|There {{are many}} things that are `well known' about passwords, such as that uers can't {{remember}} <b>strong</b> <b>passwords</b> and that the passwords they can remember are easy to guess. However, {{there seems to be a}} distinct lack of research on the subject that would pass muster by the standards of applied psychology. ...|$|R
40|$|Password meters tell users {{whether their}} {{passwords}} are “weak ” or “strong. ” We performed a laboratory experiment {{to examine whether}} these meters influenced users’ password selections when {{they were forced to}} change their real passwords, and when they were not told that their passwords were the subject of a study. We observed that the presence of meters yielded significantly <b>stronger</b> <b>passwords.</b> We performed a followup field experiment to test a different scenario: creating a password for an unimportant account. In this scenario, we found that the meters made no observable difference: participants simply reused weak passwords that they used to protect similar low-risk accounts. We conclude that meters result in <b>stronger</b> <b>passwords</b> when users are forced to change existing passwords on “important ” accounts and that individual meter design decisions likely have a marginal impact...|$|R
5000|$|If {{one has a}} truly <b>strong</b> <b>password,</b> {{there is}} little point in {{changing}} it. Changing passwords which are already strong introduces risk that the new password may be less strong.|$|E
5000|$|<b>Strong</b> <b>password</b> storage: When {{implemented}} in a right way, the server can store the passwords in a salted, iterated hash format, making offline attacks harder, and decreasing {{the impact of}} database breaches.|$|E
50|$|A <b>strong</b> <b>password</b> manager {{will include}} {{a limited number of}} false {{authentication}} entries allowed before the password manager is locked down and requires IT services to re-activate. This {{is the best way to}} protect against the brute-force attack.|$|E
50|$|Following {{disclosure}} of security vulnerabilities, CloudPets started enforcing <b>stronger</b> <b>password</b> requirements on {{users of the}} service—they had previously not enforced any password complexity requirements and their documentation had suggested short, weak passwords. Numerous journalists and security researchers including Hunt noted {{that the company was}} non-responsive to disclosures from security researchers and enquiries from journalists.|$|R
40|$|It is {{easy for}} humans to design {{passwords}} that are easily remembered. However, such passwords may have a predictable structure, making exhaustive search feasible. We have divided human-generated passwords into three categories: Non-word passwords, Mixture passwords, and Word passwords; depending on their overall structure. Within these categories, we have analyzed the search-space reduction of several common password sub-structures. From this analysis, we have derived guidelines that yield <b>strong</b> <b>passwords</b> within in each password category. Our results contribute towards the goal of achieving both <b>strong</b> and memorable <b>passwords...</b>|$|R
50|$|Both {{hardware}} and software tokens are available from various vendors, {{for some of them}} see references below. Hardware tokens implementing OATH HOTP tend to be significantly cheaper than their competitors based on proprietary algorithms. As of 2010, OATH HOTP hardware tokens can be purchased for a marginal price. Some products can be used for <b>strong</b> <b>passwords</b> as well as OATH HOTP.|$|R
50|$|His {{commitment}} to society which {{he lives in}} is also notable. He {{from time to time}} teaches children in local school about upsides and downsides of social networking, internet and staying protected with <b>strong</b> <b>password</b> and privacy settings.|$|E
5000|$|... {{rewarding}} <b>strong</b> <b>password</b> users {{by reducing}} the rate, or eliminating altogether, the need for password changes (password expiration). The strength of user-chosen passwords can be estimated by automatic programs which inspect and evaluate proposed passwords, when setting or changing a password.|$|E
5000|$|... {{allowing}} {{users to}} reset their passwords via an automatic system, which reduces help desk call volume. However, some systems are themselves insecure; for instance, easily guessed or researched answers to password reset questions bypass {{the advantages of}} a <b>strong</b> <b>password</b> system.|$|E
40|$|Encouraging {{users to}} create <b>stronger</b> <b>passwords</b> {{is one of}} the key issues in password-based authentication. It is {{particularly}} important as prior works have highlighted that most passwords are weak. Yet, passwords are still the most commonly used authentication method. This paper seeks to mitigate the issue of weak passwords by proposing a context-based password strength meter. We conduct a randomized experiment on Amazon MTurk and observe the change in users’ behavior. The results show that our proposed method is significantly effective. Users exposed to our password strength meter are more likely to change their passwords after seeing the warning message, and those new <b>passwords</b> are <b>stronger.</b> Furthermore, users are willing to invest their time to learn about creating a <b>stronger</b> <b>password,</b> even in a traditional password strength meter setting. Our findings suggest that simply incorporating contextual information to password strength meters could be an effective method in promoting more secure behaviors among end users...|$|R
40|$|We {{find that}} {{traditional}} password advice given to users is somewhat dated. <b>Strong</b> <b>passwords</b> {{do nothing to}} protect online users from password stealing attacks such as phishing and keylogging, and yet they place considerable burden on users. Passwords that are too weak of course invite brute-force attacks. However, we find that relatively weak passwords, about 20 bits or so, are sufficient to make brute-force attacks on a single account unrealistic so long as a “three strikes ” type rule is in place. Above that minimum it appears that increasing password strength does little to address any real threat. If a larger credential space is needed it appears better to increase {{the strength of the}} userID’s rather than the passwords. For large institutions this is just as effective in deterring bulk guessing attacks and is a great deal better for users. For small institutions there appears little reason to require <b>strong</b> <b>passwords</b> for online accounts. 1...|$|R
40|$|The thesis {{describes}} {{the role of}} passwords to protect unauthorized access to our acounts (and consequently also our data). Technology is constantly evolving, thereby there is also rapid developement of security mechanisms for protection of passwords, {{as well as new}} forms of vulnerability for passwords protection. The main purpose of this thesis is to raise awareness of choosing <b>strong</b> <b>passwords</b> and present the application, which can show strength of our password. We will study known password attacks in detail. Attacks will be divided into technical, where we will see the importance of choosing <b>strong</b> <b>passwords,</b> and non technical ones, such as social engineering (which is in appendix) this presents a collection of attacker's tricks, which presuade us to give up our password or at least a strong hint about it. We will describe some of the programs that exist on the Internet with which can we hack password. We will also briefly survey the deficiencies of Slovenian legislation in the case with personal data of the deceased. ...|$|R
50|$|A {{password}} {{manager is}} a software application that helps a user store and organize passwords. Password managers usually store passwords encrypted, requiring {{the user to}} create a master password; a single, ideally very <b>strong</b> <b>password</b> which grants the user access to their entire password database.|$|E
50|$|Requiring a very <b>strong</b> <b>password</b> and not {{requiring}} it {{be changed}} is often better. However, this approach {{does have a}} major drawback: if an unauthorized person acquires a password and uses it without being detected, that person may have access for an indefinite period.|$|E
50|$|Verifiers {{should offer}} {{guidance}} to the subscriber, {{such as a}} password-strength meter, to assist the user in choosing a <b>strong</b> <b>password.</b> This is particularly important following the rejection of a password on the above list as it discourages trivial modification of blacklisted (and likely very weak) passwords.|$|E
40|$|Web {{services}} heavily rely on passwords for user authentica-tion. To help users chose <b>stronger</b> <b>passwords,</b> password {{meter and}} password generator facilities {{are becoming increasingly}} popular. Password meters estimate the strength of passwords provided by users. Password generators help users with gen-erating <b>stronger</b> <b>passwords.</b> This paper turns the spotlight {{on the state of}} the art of password meters and generators on the web. Orthogonal to the large body of work on password metrics, we focus on get-ting password meters and generators right in the web setting. We report on the state of affairs via a large-scale empirical study of web password meters and generators. Our findings reveal pervasive trust to third-party code to have access to the passwords. We uncover three cases when this trust is abused to leak the passwords to third parties. Furthermore, we discover that often the passwords are sent out to the net-work, invisibly to users, and sometimes in clear. To improve the state of the art, we propose SandPass, a general web framework that allows secure and modular porting of pass-word meter and generation modules. We demonstrate the usefulness of the framework by a reference implementation and a case study with a password meter by the Swedish Pos...|$|R
40|$|Copyright © 2015 ACM. Web {{services}} heavily rely on passwords for user authentication. To help users chose <b>stronger</b> <b>passwords,</b> password {{meter and}} password generator facilities {{are becoming increasingly}} popular. Password meters estimate the strength of passwords provided by users. Password generators help users with generating <b>stronger</b> <b>passwords.</b> This paper turns the spotlight {{on the state of}} the art of password meters and generators on the web. Orthogonal to the large body of work on password metrics, we focus on getting password meters and generators right in the web setting. We report on the state of affairs via a large-scale empirical study of web password meters and generators. Our findings reveal pervasive trust to third-party code to have access to the passwords. We uncover three cases when this trust is abused to leak the passwords to third parties. Furthermore, we discover that often the passwords are sent out to the network, invisibly to users, and sometimes in clear. To improve the state of the art, we propose SandPass, a general web framework that allows secure and modular porting of password meter and generation modules. We demonstrate the usefulness of the framework by a reference implementation and a case study with a password meter by the Swedish Post and Telecommunication Agency...|$|R
5000|$|In {{computer}} security, {{a common}} problem for data security is how an intruder can access encrypted data on a computer. Modern encryption algorithms, correctly implemented and with <b>strong</b> <b>passwords,</b> are often unbreakable with current technology, so emphasis has moved to techniques that bypass this requirement, by exploiting aspects of data security where the encryption can be [...] "broken" [...] with much less effort, or else bypassed completely.|$|R
