55|1|Public
25|$|Between 2000 and 2002, Luxembourgish {{linguist}} Jérôme Lulling {{compiled a}} lexical database of 125,000 word forms {{as the basis}} for the very first Luxembourgish <b>spellchecker</b> (Projet C.ORT.IN.A).|$|E
50|$|Translate Toolkit uses Enchant as <b>spellchecker.</b>|$|E
5000|$|... stavekontroll (<b>spellchecker)</b> or stave kontroll (spell checker) ...|$|E
40|$|While {{preparing}} {{this issue}} of Press Start for publication, I finally conceded that the word "Gamergate" probably belonged in my <b>spellchecker's</b> dictionary. Certainly, one could view the proliferation of this term – and its legitimatisation, implicit in my decision to stop having my word processor complain about its use – as a grim indictment of contemporary gaming culture. However, that a student journal of game studies can begin to address the issues surrounding Gamergate – however indirectly, in this case – demonstrates a laudable maturity in our discipline's approach to the phenomenon. </p...|$|R
50|$|Lulling’s initial {{contributions}} to enhancing the language {{took place between}} 2000 and 2002, when he compiled the language’s first computer <b>spellchecker</b> {{as part of his}} Ph.D. dissertation at the Université Paul Valéry de Montpellier. The <b>spellchecker,</b> which consisted of 125,000 words, was known as Projet C.ORT.IN.A.|$|E
50|$|The {{company has}} also {{produced}} a genealogy program called Espólín and Púki, a <b>spellchecker</b> with additional features.|$|E
5000|$|Beese, L., & Harvard University. (2005). Structures and {{mechanisms}} of a DNA polymerase: Nature's copier and <b>spellchecker</b> in action.|$|E
50|$|Between 2000 and 2002, Luxembourgish {{linguist}} Jérôme Lulling {{compiled a}} lexical database of 125,000 word forms {{as the basis}} for the very first Luxembourgish <b>spellchecker</b> (Projet C.ORT.IN.A).|$|E
50|$|Released in 1980, Apple Writer 1.1 took {{advantage}} of DOS 3.3 and ran under the newer 16-sector format. It also featured a <b>spellchecker</b> known as Goodspell and some minor bug fixes.|$|E
50|$|The form viruses {{appears in}} the {{official}} Scrabble words list, but neither viri nor virii does. Similarly, the <b>spellchecker</b> built into the Mozilla Firefox browser accepts viruses but neither viri nor virii.|$|E
50|$|Its {{built-in}} tools {{include a}} dictionary, a thesaurus, and a translating tool. It {{comes with the}} complete Hebrew texts of the Bible and many other volumes of Jewish literature. Its <b>spellchecker</b> recognizes both English and Hebrew words.|$|E
50|$|There {{is also a}} free {{version of}} Atlantis Word Processor with fewer {{features}} called Atlantis Nova. It does not have some features the full version of Atlantis has; for example, the program does not include a built-in <b>spellchecker.</b>|$|E
50|$|BOL {{offers a}} free email service with a 6 GB capacity, <b>spellchecker,</b> {{customizable}} themes and interfaces for iPhone, iPad and Android. Since 2012, BOL uses the IMAP system for {{send and receive}} procedures {{to ensure that the}} original server’s content is not erased.|$|E
50|$|Cigital is a {{software}} security firm, based in Dulles, VA. Services include application security testing, penetration testing, and architecture analysis. Cigital also provides instructor-led security training and {{products such as}} SecureAssist, a static analysis tool that acts as an application security <b>spellchecker</b> for developers.|$|E
50|$|Locoscript version 1, {{which was}} bundled with the PCW 8256 and 8512, had no spell checker or mail merge facilities. Version 2, which was bundled with the PCW 9512, {{included}} a <b>spellchecker</b> and could provide mail merge by interfacing to other products from Locomotive Software, such as LocoMail and LocoFile. Locoscript 2 also expanded the character set to 400.|$|E
50|$|The PCW 9512, {{introduced}} in 1987 {{at a price}} of £499 plus VAT, had a white-on-black screen instead of green-on-black, and the bundled printer was a daisy-wheel model instead of a dot-matrix printer. These models also had a parallel port, allowing non-Amstrad printers to be attached. The 9512 was also supplied with version 2 of the Locoscript word processor program which included <b>spellchecker</b> and mail merge facilities. In all other respects the 9512's facilities {{were the same as}} the 8512's.|$|E
5000|$|The {{principal}} {{differences between}} StarOffice and OpenOffice.org were that StarOffice {{was supported by}} Sun, was available as either a single-user retail box kit or as per-user blocks of licensing for the enterprise, and included {{a wider range of}} fonts and document templates and a commercial quality <b>spellchecker.</b> [...] StarOffice also contained commercially licensed functions and add-ons; in OpenOffice.org these were either replaced by open-source or free variants, or are not present at all. Both packages had native support for the OpenDocument format.|$|E
50|$|XMetaL {{includes}} features {{common to}} word processors, {{such as a}} <b>spellchecker,</b> a thesaurus, {{and the ability to}} track changes made to documents. XMetaL provides different views of a document, known as “Normal”, “Tags On” and “Plain Text,” which reveal the underlying element tags and other XML markup to varying degrees, and uses standard CSS files to style documents for display within the editor. A “Resource Manager” pane can be used to locate and insert items such as image files and frequently reused text fragments.|$|E
50|$|The first printed {{sentences}} in Luxembourgish appeared in 1821 in a weekly journal the Luxemburger Wochenblatt. The first book in Luxembourgish {{was released in}} 1829 by Antoine Meyer: E' Schrek ob de' Lezeburger Parnassus. Until the 1980s, the language had been used mainly for poetry and drama but has since become increasingly popular for fiction which now represents {{a significant contribution to}} Luxembourg literature. Between 2000 and 2002, Luxembourgish linguist Jerome Lulling developed a lexical database of 185,000 word forms for the very first Luxembourgish <b>spellchecker,</b> thus launching the computerisation of the Luxembourgish language.|$|E
5000|$|Cherry {{also contributed}} to the Plan 9 {{operating}} system, cowrote [...] "Typing Documents on the UNIX System: Using the -ms and -mcs Macros with Troff" [...] with Mike Lesk for the Unix Tenth Edition Manual, and coded up the non-dictionary based <b>spellchecker,</b> typo, conceived by Bob Morris. Lorinda Cherry also worked with Lee McMahon along with Morris collecting substantial corpus of text and studied it statistically. [...] "Some of their tools, particularly uniq and com became staples. From that work came the typo which spots the typing errors statistical interference".|$|E
50|$|Perfect Writer was {{initially}} a rebranded {{version of the}} MINCE and Scribble software packages from Mark of the Unicorn, which are CP/M implementation sof Emacs and Scribe, ported from their original minicomputer-based versions using BDS C. Later, MBasic (a variant of Microsoft Basic) and The Word Plus <b>spellchecker</b> {{were added to the}} model II suite of software. Word Plus included a set of utilities that could help solve crossword puzzles or anagrams, insert soft hyphens, alphabetize word lists, and compute word frequencies. Another utility program called Uniform allowed the Kaypro to read disks formatted by Osborne, Xerox, or TRS-80 computers.|$|E
5000|$|Another kind of typo—informally {{called an}} [...] "atomic typo"—is a typo {{that happens to}} result in a {{correctly}} spelled word that is different from the intended one, and since it is spelled correctly, the <b>spellchecker</b> cannot find the mistake. Examples include [...] "unclear" [...] instead of [...] "nuclear", [...] "sedan" [...] instead of [...] "Sudan" [...] (leading to a diplomatic incident in 2005 between Sudan and the United States regarding a nuclear test code-named Sedan), [...] "Untied States" [...] instead of [...] "United States", and [...] "the" [...] instead of [...] "they". The term was coined in 2002 by The Palm Beach Post editor C. F. Hanif.|$|E
5000|$|Summoned objects range among animals, weapons, {{forces of}} nature, famous people (both fictional and real), vehicles, {{household}} objects, easter eggs {{of the development}} team, and even internet memes. However, the game does not include trademarked terms, nor potential profanity (summoning [...] "ass" [...] will spawn a donkey; summoning [...] "cock" [...] will spawn a rooster). The game includes a homonym system to offer the player possible choices between similar-sounding objects, such as distinguishing between a toy balloon and a hot-air balloon; {{there is also a}} <b>spellchecker</b> to provide close matches for misspelled words. The North American release includes support for other languages including Brazilian Portuguese, French, and Spanish, with French-Canadian and Latin American variants available for words in the French and Spanish language sets, respectively. The UK version also accounts for difference between American and British English, such as the differing meanings of the word [...] "football". [...] 5th Cell has stated that the limit to what objects may be summoned is up to the player's imagination. Players, using special software, claimed to have discovered that the full list of words is greater than 22,800 unique entries, but, in response, Slaczka said there were many more than this number.|$|E
40|$|Having {{located a}} misspelling, a <b>spellchecker</b> {{generally}} offers some suggestions for the intended word. Even without using context, a <b>spellchecker</b> can draw on {{various types of}} information in ordering its suggestions. A series of experiments is described, beginning with a basic corrector that implements a well-known algorithm for reversing single simple errors, and making successive enhancements {{to take account of}} substring matches, pronunciation, known error patterns, syllable structure and word frequency. The improvement in the ordering produced by each enhancement is measured on a large corpus of misspellings. The final version is tested on other corpora against a widely used commercial <b>spellchecker</b> and a research prototype...|$|E
40|$|The goal of Text-to-Speech (TTS) {{synthesis}} in {{a particular}} language is to convert arbitrary input text to intelligible and natural sounding speech. However, for a particular language like Hindi, which is a highly confusing language (due to very close spellings), {{it is not an}} easy task to identify errors/mistakes in input text and an incorrect text degrade the quality of output speech hence this paper is a contribution to the development of high quality speech synthesis with the involvement of <b>Spellchecker</b> which generates spell suggestions for misspelled words automatically. Involvement of <b>spellchecker</b> would increase the efficiency of speech synthesis by providing spell suggestions for incorrect input text. Furthermore, we have provided the comparative study for evaluating the resultant effect on to phonetic text by adding <b>spellchecker</b> on to input text. Comment: 4 pages, 5 figures. International Journal of Computer Applications, 201...|$|E
40|$|It {{has been}} {{pointed out that the}} {{spelling}} errors made by second-language writers writing in English have features that are to some extent characteristic of their first language, and the suggestion has been made that a <b>spellchecker</b> could be adapted to take account of these features. In the work reported here, a corpus of spelling errors made by Japanese writers writing in English was compared with a corpus of errors made by native speakers. While the great majority of errors were common to the two corpora, some distinctively Japanese error patterns were evident against this common background, notably a difficulty in deciding between the letters b and v, and the letters l and r, and a tendency to add syllables. A <b>spellchecker</b> that had been developed for native speakers of English was adapted to cope with these errors. A brief account is given of the spellchecker’s mode of operation to indicate how it lent itself to modifications of this kind. The native-speaker <b>spellchecker</b> and the Japanese-adapted version were run over the error corpora and the results show that these adaptations produced a modest but worthwhile improvement to the spellchecker’s performance in correcting Japanese-made errors...|$|E
40|$|Mismatch-repair (MMR) systems promote {{eukaryotic}} genome stability {{by removing}} errors introduced during DNA replication and by inhibiting recombination between nonidentical sequences (<b>spellchecker</b> and antirecombination activities, respectively). Following a common mismatch-recognition step effected by MutS-homologous Msh proteins, homologs of the bacterial MutL ATPase (predominantly the Mlh 1 p-Pms 1 p heterodimer in yeast) couple mismatch recognition {{to the appropriate}} downstream processing steps. To examine whether the processing steps in the <b>spellchecker</b> and antirecombination pathways might differ, we mutagenized the yeast PMS 1 gene and screened for mitotic separation-of-function alleles. Two alleles affecting only the antirecombination function of Pms 1 p were identified, one of which changed an amino acid within the highly conserved ATPase domain. To more specifically address the role of ATP binding/hydrolysis in MMR-related processes, we examined mutations known to compromise the ATPase activity of Pms 1 p or Mlh 1 p {{with respect to the}} mitotic <b>spellchecker</b> and antirecombination activities and with respect to the repair of mismatches present in meiotic recombination intermediates. The results of these analyses confirm a differential requirement for the Pms 1 p ATPase activity in replication vs. recombination processes, while demonstrating that the Mlh 1 p ATPase activity is important for all examined MMR-related functions...|$|E
40|$|Partially phonemic {{languages}} use writing systems {{which are}} in between strictly phonemic and non-phonemic orthography. Therefore, phonetic errors are very frequent in such languages. This paper introduces an approach for development of spellcheckers for partially phonemic languages that use grapheme-to-phoneme mapping for isolated-word error correction. Since, a complete and accurate grapheme-to-phoneme system is overkill for a <b>spellchecker,</b> the framework can deal with incomplete phonological information {{through the use of}} metaphonemes. The paper also discusses the implementation of a Bengali <b>spellchecker</b> based on this approach and some other issues specific to the Bengali spell-checking. The framework described here is generic in nature and can be used for any partially phonemic languages by incorporating the language specific parts like phonological rules, the keyboard layout and ranking strategies. This approach is very useful for Indian languages as most of them are partially phonemic in nature. ...|$|E
40|$|Abstract: Sanskrit (laLd`r), {{called the}} mother of all Indian languages, plays {{important}} role in Indian literature. All the Indian languages are expected to be derived from Sanskrit language. If we change the order of words in formation of the Sentences in Sanskrit, the meaning will remain same i. e., Sanskrit is free ordering language (or syntax free language) and there is no ambiguity {{in the form of the}} words even if the order changes. Morphological analysis is a core component of language processing for Indian languages. Complexities involved in spell checking of documents in Sanskrit can be analyzed. We have applied morphological analysis to a large number of words in different parts of speech. A <b>spellchecker</b> based on this analysis has been developed. This paper proposes the architecture of the <b>spellchecker</b> and the spell-checking algorithm based on morphological rules...|$|E
40|$|The aim of {{this thesis}} is to explore the {{possibilities}} of using n-gram language models for spellchecking Czech texts and to implement an extension to the <b>spellchecker</b> which {{would be able to}} find such misspelled words that are true Czech words. Furthermore, the aim was to implement a simple web application which would present the extended <b>spellchecker.</b> The influence of using lemmatization and morphology analysis of words regarding the hit rate of finding misspelled words was also looked into. The methods of language modelling used in the thesis are described first. What follow, then, is the description of the procedure of the spellchecking program using language models. The next part shows the way of getting the data for language model training. In the following part, the evaluation of the language models created is presented. The final part shows the results achieved for each option of spellchecking...|$|E
40|$|Korektor is a {{statistical}} spell-checker and (occasionally) grammar-checker. It is released under 2 -Clause BSD license [URL] Korektor started with Michal Richter's diploma thesis Advanced Czech <b>Spellchecker</b> [URL] {{but it is}} being developed further. There are two versions: a command line utility (tested on Linux, Windows and OS X) and a REST service with publicly available API [URL] and HTML front end [URL]...|$|E
40|$|This article {{presents}} a novel architecture using a hybrid model {{for developing a}} Sindhi <b>spellchecker</b> system which has yet not been developed prior to this work. The compound textual forms and glyphs of Sindhi language presents a substan-tial challenge for developing a Sindhi <b>spellchecker</b> system and generating a similar suggestion list for misspelled words. In order to implement such a system, phonetic-based Sindhi language rules and patterns {{must be taken into}} account for increasing the accuracy and efficiency. In this research work, a simple and efficient combinational hybrid system is proposed, using three different algo-rithms, the Edit Distance algorithm to find the measure of similarity between two Sindhi strings. The phonetic-based SoundEx and ShapeEx algorithms are developed for pattern or glyph matching, generating accurate and an efficient suggestion list for incorrect or misspelled Sindhi words. The proposed system is established with a blend between Phonetic-based SoundEx algorithm and ShapeEx algorithm for pattern or glyph matching, generating accurate and effi...|$|E
40|$|The {{first half}} of the book is about spelling, the second about computers. Chapter Two {{describes}} how English spelling came to be in the state that it’s in today. In Chapter Three I summarize the debate between those who propose radical change to the system and those who favour keeping it as it is, and I show how computerized correction can be seen as providing {{at least some of the}} benefits that have been claimed for spelling reform. Too much of the literature on computerized spellcheckers describes tests based on collections of artificially created errors; Chapter Four looks at the sorts of misspellings that people actually make, to see more clearly the problems that a <b>spellchecker</b> has to face. Chapter Five looks more closely at the errors that people make when they don’t know how to spell a word, and Chapter Six at the errors that people make when they know perfectly well how to spell a word but for some reason write or type something else. Chapter Seven begins the second part of the book with a description of the methods that have been devised over the last thirty years for getting computers to detect and correct spelling errors. Its conclusion is that spellcheckers have some way to go before they can do the job we would like them to do. Chapters Eight to Ten describe a <b>spellchecker</b> that I have designed which attempts to address some of the remaining problems, especially those presented by badly spelt text. In 1982, when I began this research, there were no spellcheckers that would do anything useful with a sentence such as, ‘You shud try to rember all ways to youz a lifejacket when yotting. ’ That my <b>spellchecker</b> corrects this perfectly (which it does) is less impressive now, I have to admit, than it would have been then, simply because there are now a few spellcheckers on the market which do make a reasonable attempt at errors of that kind. My <b>spellchecker</b> does, however, handle some classes of errors that other spellcheckers do not perform well on, and Chapter Eleven concludes the book with the results of some comparative tests, a few reflections on my spellchecker’s shortcomings and some speculations on possible developments...|$|E
40|$|Hunmorph: {{open source}} word {{analysis}} Common tasks involving orthographic words include spellchecking, stemming, morphological analysis, and morphological synthesis. To enable significant reuse of the language-specific resources across all such tasks, we have extended the functionality {{of the open}} source <b>spellchecker</b> MySpell, yielding a generic word analysis library, the runtime layer of the hunmorph toolkit. We added an offline resource management component, hunlex, which complements the efficiency of our runtime layer with a high-level description language and a configurable precompiler. ...|$|E
40|$|A global {{objective}} {{in the study}} of Drosophila histone genes is to decipher the mechanism by which they are regulated and evolve. Yet before regulatory mechanisms can be investigated, the identity of transcription factors involved in the regulation of these genes must be uncovered. Therefore an immediate goal is to identify transcription factor binding sites within the non-coding region of H 2 A and H 2 B genes as an initial step in deciphering the mechanism by which all Drosophila histone genes are regulated. ^ The approach undertaken to identify transcription factor binding sites within the H 2 A-H 2 B intergenic spacer was in silico analysis, experimentation that utilizes bioinformatics or the computer based analysis of biological data. The intergenic spacer for H 2 A and H 2 B genes was subjected to various bioinformatic search tools that are capable of sequence comparisons and identification of transcription factor consensus binding sites. Through resulting data an organizational model of transcription factor binding sites was generated for the H 2 A-H 2 B spacer. Empirical investigation of the model was carried out using both phylogenetic and biochemical analyses. The evolutionary conservation of the putative transcription factor binding sites within the organizational model for the H 2 A-H 2 B spacer was analyzed using organizational models that were created for fourteen additional, widely diverged Drosophila species. Common to all organizational models across long evolutionary distances was a centrally located putative binding site for the yeast transcription factor Repressor Activator Protein- 1 (Rap 1 p). ^ Investigation of the functionality of the putative binding site for Rap 1 p entailed a search for a Drosophila counterpart to the yeast transcription factor. A PCR based strategy was used in this search, which resulted in the identification of the Drosophila mismatch repair protein, <b>Spellchecker</b> 1. Further investigations are required to establish the precise association between <b>Spellchecker</b> 1 and histone genes and to determine whether <b>Spellchecker</b> 1 can be positively identified as the Drosophila counterpart to yeast Rap 1 p. ...|$|E
40|$|Abstract. The paper {{describes}} correction modules for AutoPat,- an {{authoring system}} for patent claims. The specificity of AutoPat {{is that it}} relies on human-computer content specification in controlled language. The quality of the textual input is a crucial point in getting a high quality AutoPat output. Our correction modules handle both the quality of human input and the final system output. The human input is passed through a <b>spellchecker,</b> a grammar checker and a content checker. An application-tuned grammar checker is run over the system final output of the generation module. ...|$|E
