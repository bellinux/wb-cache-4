247|9318|Public
25|$|Modern {{versions}} of crystallographic databases {{are based on}} the relational database model. Communication with the database usually happens via a dialect of the <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL).</b> Web-based databases typically process the search algorithm on the server interpreting supported scripting elements, while desktop-based databases run locally installed and usually precompiled search engines.|$|E
5000|$|Knowledge of <b>structured</b> <b>query</b> <b>language</b> (<b>SQL),</b> e.g. SQL/PSM or Transact-SQL ...|$|E
5000|$|Parsing the MDX {{language}} into <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL)</b> {{to retrieve}} answers to dimensional queries ...|$|E
50|$|SQR (Hyperion SQR Production Reporting, Part of OBIEE) is a {{programming}} language designed for generating reports from database management systems. The name is an acronym of <b>Structured</b> <b>Query</b> Reporter, which suggests its relationship to <b>SQL</b> (<b>Structured</b> <b>Query</b> <b>Language).</b> Any <b>SQL</b> statement can be embedded in an SQR program.|$|R
40|$|<b>Structure</b> <b>Query</b> <b>Language</b> (<b>SQL)</b> is {{the most}} widely used <b>query</b> <b>language</b> in the modem {{relational}} database management system (DBMS). Its use is straightforward for simple queries, but it gets complicated, hard to comprehend and express for the complex queries. In term of easy of use, Data Flow <b>Query</b> <b>Language</b> (DFQL) represents graphical user interface to the relational model based on a dataflow diagram, and retains all the power of SQL and is equipped with an easy to use facility for extending the language. With Java's flexibility and power, it is possible to build such system that allows the users to login any relational database through JDBC, graphically view the database structure, and implement the DFQL to query the data from the database. The design recommendations and implementation of a prototype are the primary research areas of this thesis. Defense Manpower Data Center author (civilian) ...|$|R
50|$|Many data {{description}} languages use a declarative syntax to define columns and data types. <b>Structured</b> <b>query</b> <b>language</b> (e.g., <b>SQL),</b> however, uses {{a collection of}} imperative verbs whose effect is to modify the schema of the database by adding, changing, or deleting definitions of tables or other elements. These statements can be freely mixed with other SQL statements, making the DDL not a separate language.|$|R
50|$|The {{relational}} database model introduced a programming-language independent <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL),</b> based on relational algebra.|$|E
50|$|The {{most common}} query {{language}} {{used with the}} relational model is the <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL).</b>|$|E
50|$|Presto is an {{open-source}} software {{project to}} develop a database query engine using the standard <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL).</b>|$|E
40|$|In {{this study}} the {{development}} and implementation of a geospatial database model for the management of multiscale datasets encompassing airborne imagery and associated metadata is presented. To develop the multi-source geospatial database we have used a Relational Database Management System (RDBMS) on a <b>Structure</b> <b>Query</b> <b>Language</b> (<b>SQL)</b> server which was then integrated into ArcGIS and implemented as a geodatabase. The acquired datasets were compiled, standardized, and integrated into the RDBMS, where logical associations between different types of information were linked (e. g. location, date, and instrument). Airborne data, at different processing levels (digital numbers through geocorrected reflectance), were implemented in the geospatial database where the datasets are linked spatially and temporally. An example dataset consisting of airborne hyperspectral imagery, collected for inter and intra-annual vegetation characterization and detection of potential hydrocarbon seepage events over pipeline areas, is presented. Our work provides a model for the management of airborne imagery, which is a challenging aspect of data management in remote sensing, especially when large volumes of data are collected. Peer reviewed: YesNRC publication: Ye...|$|R
40|$|<b>Structure</b> <b>Query</b> <b>Language</b> (<b>SQL)</b> and <b>Query</b> By Example (QBE) are {{the most}} widely used <b>query</b> <b>languages</b> for Relational Database Management Systems (RDBMS's). However, both of them have {{problems}} concerning ease-of-use issues, especially in expressing universal quantification, specifying complex nested queries, and flexibility and consistency in specifying queries with respect to data retrieval. To alleviate these problems, a new <b>query</b> <b>language</b> called 'DataFlow <b>Query</b> Language' (DFQL) was proposed. This thesis investigates the relative strengths and weaknesses of these three <b>languages.</b> We divide <b>queries</b> into four categories: single-value, set-value, statistical result, and set-count value. In each category, a representative set of <b>queries</b> from each <b>language</b> is specified and compared. Some of the queries specified are logical extensions of the other (already defined) queries, which are used to analyze the query languages' flexibility and consistency in formulating logically related queries. We perform a simple experiment of asking NPS CS students to write a small set of queries in all three languages. Based on the analysis, we conclude that DFQL eliminates the problems of SQL and QBE mentioned above. The relative strengths of DFQL comes mainly from its strict adherence to relational algebra and dataflow-based visuality. NANAIndonesian Navy author...|$|R
30|$|Multiparameter Intelligent Monitoring in Intensive Care II (MIMIC-II, version 2.6) is an {{open access}} {{publicly}} available ICU database. It consists of more than 30, 000 ICU patients (medical, surgical, coronary care and neonatal) admitted to Beth Israel Deaconess Medical Center (Boston, MA, USA) from 2001 to 2008. MIMIC-II is comprised of two major components: clinical data and physiological waveforms. In the present study we employed the clinical data, which included patient demographics, intravenous medication drip rates, and laboratory test results (Lee et al. 2011). The establishment of MIMIC-II clinical database {{was approved by the}} Institutional Review Boards of the Massachusetts Institute of Technology (Cambridge, MA, USA) and Beth Israel Deaconess Medical Center (Boston, MA, USA). Our access to the database was approved after completion of the NIH web-based training course named “Protecting Human Research Participants” by the author ZZ. (Certification Number: 1132877). Informed consent was waived due to observational nature of the study. The study was approved by the ethics committee of Jinhua municipal central hospital. Data extraction was performed by using <b>structure</b> <b>query</b> <b>language</b> (<b>SQL)</b> with pgADmin PostgreSQL tools (version 1.12. 3) (Scott et al. 2013). MIMIC-II was organized into a relational database that consisted of 38 tables. Data were extracted from the following tables: POE_MED, POE_ORDER, COMORBIDITY_SCORES, ICUSTAY_DETAIL, LABEVENTS.|$|R
5000|$|Tools {{to connect}} to dynamic-link library (DLL), <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL),</b> Java, [...]NET, C++, Fortran, CUDA, OpenCL, and Hypertext Transfer Protocol (HTTP) based systems ...|$|E
5000|$|In 2009, he {{was made}} a Fellow of the Computer History Museum [...] "for his {{fundamental}} work on <b>structured</b> <b>query</b> <b>language</b> (<b>SQL)</b> and database architectures." ...|$|E
50|$|SQream DB is a {{relational}} {{database management system}} (RDBMS) that uses graphics processing units (GPUs) from Nvidia.SQream DB is designed for big data analytics using the <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL).</b>|$|E
40|$|With the {{numerous}} unrestrained demands on network resources {{on any given}} work day, the network can become bogged down or even overwhelmed by the sheer amount of traffic sent over its precious finite bandwidth during peak times and yet, scarcely utilized during off-peak times. One solution to this dilemma is to schedule as many tasks as possible to times when the demands on the network are at their lowest to balance the levels of stress placed on the network. When it comes to emails many are required to be sent immediately, yet some, for instance bulk emails could wait to be transmitted during the off-peak time such as {{the middle of the}} night when network traffic is at its lowest. This project was meant to address that issue by creating a Graphical User Interface (GUI) program that integrates with a database and permits the users to utilize an existing email account that allows Simple Mail Transfer Protocol (SMTP) to email customers at any chosen scheduled time in the future. The program also has the capability to personalize the emails by merging database fields into the email. The program is meant to be simplistic so the users will not be required to have any knowledge of the <b>Structure</b> <b>Query</b> <b>Language</b> (<b>SQL)</b> in order to make use of this program...|$|R
40|$|We {{tested a}} new model of the HELP patient {{database}} that makes use of relational tables to store patient data and provides access to data using <b>SQL</b> (<b>Structured</b> <b>Query</b> <b>Language).</b> The <b>SQL</b> database required more storage space and had many more physical records than the HELP database, but it was faster and more efficient in storing data than the standard HELP utilities. The HELP utilities used disk space more efficiently and were faster than the SQL tools when retrieving data for typical clinical reports. However, the SQL model provides networking capabilities, general report writing tools, detailed user documentation, and an ability for creating secondary indexes that offset its poorer performance...|$|R
40|$|<b>Structured</b> <b>Query</b> <b>Language</b> (PROC <b>SQL)</b> is a {{database}} language {{found in the}} Base SAS ® software. It enables access to data stored in SAS data sets or tables using a powerful assortment of statements, clauses, options, functions, and other language features. This paper presents core concepts of this powerful language {{as well as its}} many applications and is intended for SAS users who desire an overview of the capabilities of this exciting procedure. Attendees will explore the construction of simple SQL queries, ordering and grouping data, the application of case logic for data reclassification, the creation and use of views, and the construction of simple inner and outer joins...|$|R
50|$|Communication with <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL)</b> {{databases}} {{is achieved}} through built-in support for Java Database Connectivity (JDBC). Mathematica can also install web services from a Web Services Description Language (WSDL) description. It can access HDFS data via Hadoop.|$|E
50|$|This third academy {{began as}} a pilot class in the 2006-07 school year with the {{inclusion}} of an Oracle programming class. Successful completion of the course may certify students {{in the field of}} <b>structured</b> <b>query</b> <b>language</b> (<b>SQL)</b> programming.|$|E
50|$|Gadfly is a {{relational}} {{database management system}} written in Python. Gadfly {{is a collection of}} Python modules that provides {{relational database}} functionality entirely implemented in Python. It supports a subset of the standard RDBMS <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL).</b>|$|E
40|$|Base SAS {{provided}} the PROC MEANS, {{which was very}} powerful/flexible procedure used to perform descriptive statistical analysis. This lead to a widespread use of MEANS procedure, as a result it became very popular amongst the older generation analysts. The proliferation of Relational Data base Management System (RDBMS) in information technology world lead {{to the introduction of}} PROC SQL in SAS v 6. 0. Being as English like <b>language,</b> <b>Structure</b> <b>Query</b> <b>Language</b> (<b>SQL)</b> become very popular amongst the newer generation analysts. Current SAS developer community has some analysts who use PROC MEANS to do all of the statistical work and some who use PROC SQL to do their part of the statistical work. But PROC SQL can perform or cater majority of the functionality that a PROC MEANS can deliver. Hence there is no real need for either community to learn the other’s PROCs. However analysts who do maintenance or enhancement projects need to be familiar or proficient with both PROCs. This presentation is intended to explain and emphasize the similarities and differences between SQL and MEANS procedures with examples. It will also act as a good reference document with ideas for MEANS users on how to code equivalent SQL and vice versa. PROC SQL is a widely used language for retrieving and updating data in tables/views. Mainly it is used to retrieve data from RDBMS, calculate the descriptive statistics or summarize the data. The MEANS procedure provides dat...|$|R
40|$|<b>Structured</b> <b>Query</b> <b>Language</b> or <b>SQL</b> is a <b>language</b> {{designed}} {{especially for}} accessing relational database systems. It {{is one of}} the most significant relational database languages in existence. IBM developed SQL in the late 1970 s and it is implemented by more than 20 vendors since then. More than 20 years into existence in the computer field, SQL has not been standardized. Standardization fails because of the demand of the customers which made vendors to follow different standards. Researchers are trying to find the reason behind the failure of SQL Standardization. In this paper, I have compared SQL Standardization with the Tree of Life and came out with my idea behind the failure of SQL Standardization. Keywords...|$|R
40|$|Object-Oriented {{database}} management {{systems have been}} proposed as the effective solution to providing the {{database management}} facilities for complex applications. This project involves in deriving {{a set of rules}} which specifies the translation of Object SQL statements into an Object Algebra expression. The language chosen for this project is Object <b>SQL</b> (Object <b>Structured</b> <b>Query</b> <b>Language).</b> Object <b>SQL</b> is a high-level user language whose standard does not exist yet. OA (_Qbject Algebra) is an intermediate level target language designed for a range of user languages. The algebra used in this project is defined by Dave Straube. This algebra is used as the target language for the translation of the Object SQL query statement into the equivalent Object Algebra expression. Object algebra is used for the procedural specification of queries which can then be used for the optimisation of queries...|$|R
50|$|Data Control Language (DCL).A {{data control}} {{language}} (DCL) is a syntax {{similar to a}} computer programming language used to control access to data stored in a database (Authorization). In particular, it is a component of <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL).</b>|$|E
50|$|A popular data {{manipulation}} language is that of <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL),</b> {{which is used to}} retrieve and manipulate data in a relational database. Other forms of DML are those used by IMS/DLI, CODASYL databases, such as IDMS and others.|$|E
50|$|In October 2012, RainStor {{held two}} patents and was {{pursuing}} five additional patents.The database uses a row/columnar hybrid repository. The archived data is accessed using <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL).</b> RainStor software uses partition filtering, which excludes certain records from processing.|$|E
40|$|A {{database}} can {{be defined}} as a collection of information organized {{in such a way that}} it can be retrieved and used. A database management system (DBMS) can further be defined as the tool that enables us to manage and interact with the database. The Oracle 8 Server is a state-of-the-art information management environment. It is a repository for very large amounts of data, and gives users rapid access to that data. The Oracle 8 Server allows for sharing of data between applications; the information is stored in one place and used by many systems. My research will focus primarily on <b>SQL</b> (<b>Structured</b> <b>Query</b> <b>Language)</b> programming. <b>SQL</b> is the way you define and manipulate data in Oracle's relational database. SQL is the industry standard adopted by all database vendors. When programming with SQL, you work on sets of data (i. e., information is not processed one record at a time) ...|$|R
40|$|The web is a {{no longer}} {{operation}} {{it is only}} provides a link for searching the web document based on the keyword. The query can be formed from keywords which are used to retrieve the document. It is difficult for the typical web users to exploit this web data by means of <b>structured</b> <b>queries</b> using <b>languages</b> like <b>SQL</b> or SPARQL. In database research, most of the approaches use only the single source solutions. The main issue here is computing the most relevant combinations of sources. To route keywords only to relevant sources, a novel method is proposed for computing top-k routing plans based on their keyword query. The keyword-element relationship summary is used t...|$|R
40|$|The {{traditional}} Web stores {{huge amount}} of data {{in the form of}} Relational Databases (RDB) as it is good atstoring objects and relationships between them. Relational Databases are dynamic in nature which allowsbringing tables together helping user to search for related material across multiple tables. RDB arescalable to expand as the data grows. The RDB uses a <b>Structured</b> <b>Query</b> <b>Language</b> called <b>SQL</b> to accessthe databases for several data retrieval purposes. As the world is moving today from the Syntactic form toSemantic form and the Web is also taking its new form of Semantic Web. The <b>Structured</b> <b>Query</b> of the RDBon web can be a Semantic Query on Semantic Web. The SPARQL is the <b>Query</b> <b>Language</b> recommended byW 3 C for the RDF(Resource Description Framework). RDF is a directed, labeled graph data format forrepresenting information in the Web and is a very important layer of the Semantic Web Architecture. In thispaper we consider the Library Management System (LMS) database, taking some tuples of the LMSRelational Schema. We discuss how the RDF code is scripted and validated using RDF Validator and howRDF Triples are generated. Later we give the graphical representation of the RDF triples and see theprocess of extracting ontology from the RDF Schema and application of the Semantic Query...|$|R
5000|$|A query language, such as <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL),</b> is used {{to prepare}} the queries. SQL is an American National Standards Institute (ANSI) {{standardized}} query language developed specifically to write database queries. Each DBMS may have its own language, but most relational [...]|$|E
50|$|<b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL)</b> {{allows the}} user to pull data from the {{database}} for analysis. Open Dental provides over 1,100 user queries that have been requested by users, and advanced users may write their own queries to get specialized information from the database.|$|E
50|$|MemSQL is a distributed, in-memory, SQL {{database}} management system.It is a relational {{database management}} system (RDBMS). It compiles <b>Structured</b> <b>Query</b> <b>Language</b> (<b>SQL)</b> into machine code, via termed code generation.On April 23, 2013, MemSQL launched its first generally available version of the database to the public.|$|E
40|$|Database {{applications}} {{features such}} as <b>Structured</b> <b>Query</b> <b>Language</b> or <b>SQL,</b> exception programming, integrity constraints, and table triggers pose difficulties for maintenance activities; especially for regression testing that follows modifications to database applications. In this work, we address these difficulties and propose a two-phase regression testing methodology. In phase 1, we explore control flow and data flow analysis issues of database applications. Then, we propose an impact analysis technique {{that is based on}} dependencies that exist among the components of database applications. This analysis leads to selecting test cases from the initial test suite for regression testing the modified application. In phase 2, further reduction in the regression test cases is performed by using reduction algorithms. We present two such algorithms. The Graph Walk algorithm walks through the control flow graph of database modules and selects a safe set of test cases to retest. The Call Graph Firewall algorithm uses a firewall for the inter-procedural level. Finally, a maintenance environment for database applications is described. Our experience with this regression testing methodology shows that the impact analysis technique is adequate for selecting regression tests and that phase 2 techniques can be used for further {{reduction in the number of}} theses tests. PublishedN/...|$|R
40|$|Abstract — Now a days {{most of the}} web attacks {{comes under}} the <b>structured</b> <b>query</b> <b>language</b> i. e. <b>SQL.</b> This SQL helps acts as the {{communicator}} between the user and the server. SQL is just a set of queries which helps the user to get {{the data from the}} prescribed server. This SQL just acts as the backend for all the web application project. Here attacker inserts SQL characters or keywords into a SQL statement via unrestricted user input parameters to change the intended query’s logic. By manipulating this data to modify the statements, an attacker can cause the application to issue arbitrary SQL commands and thereby compromise the database. To avoid this type of attacks in asp. net website we need to develop a Risk free website, calls for integrating defensive Coding practices with both vulnerability detection and runtime attack Prevention methods...|$|R
40|$|A query, {{expressed}} in a <b>structured</b> <b>query</b> <b>language</b> such as <b>SQL,</b> describes precisely the data that should comprise the answer and a non-empty answer is returned only if it satisfies all query criteria. However, the Boolean database query model has limitations. A user may run into empty answers when the query conditions are too restrictive or sift through too many results that match the query. User preferences naturally blend into queries allowing to explore alternatives or prioritize and filter available choices. In addition, {{they can be used}} to generate answers that are personalized to the user. In this paper, we explain the need towards personalized and preference-aware query answering in the context of databases and we discuss how it can be enabled. Our objective is to discuss {{the pros and cons of}} existing approaches and the challenges and opportunities towards a truly personalized preference-aware DBMS. ...|$|R
