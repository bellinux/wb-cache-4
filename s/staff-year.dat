2|3|Public
40|$|Abstract: This one-year {{follow-up}} study determined the incidence and {{risk factors of}} workplace violence against nursing staff in a psychiatric hospital. The cohort members had a website to report events whenever they came across violence. A total of 971 events were reported. The incidence rates of physical violence, verbal abuse, bullying/mobbing, sexual harassment, and racial harassment were 1. 7, 3. 7, 0. 2, 0. 3, and 0 per <b>staff-year,</b> respectively. Young age, female sex, lower education, shorter duration of employment, and high level of anxiety of staff {{seemed to be the}} determinants of violence. Pre-placement education should focus on these staff to reduce workplace violence...|$|E
5000|$|... (Sec. 110) Prohibits the use {{of funds}} to {{compensate}} more than 600 technical <b>staff-years</b> under the federally funded research and development center contract between the FAA and the Center for Advanced Aviation Systems Development during FY2015.|$|R
40|$|In the beginning, {{there was}} FORTRAN, {{and it was}} [...] . not so good. But it was universal, and all flight {{simulator}} equations of motion were coded with it. Then came ACSL, C, Ada, C++, C#, Java, FORTRAN- 90, Matlab/Simulink, {{and a number of}} other programming languages. Since the halcyon punch card days of 1968, models of aircraft flight dynamics have proliferated in training devices, desktop engineering and development computers, and control design textbooks. With the rise of industry teaming and increased reliance on simulation for procurement decisions, aircraft and missile simulation models are created, updated, and exchanged with increasing frequency. However, there is no real lingua franca to facilitate the exchange of models from one simulation user to another. The current state-of-the-art is such that several staff-months if not <b>staff-years</b> are required to 'rehost' each release of a flight dynamics model from one simulation environment to another one. If a standard data package or exchange format were to be universally adopted, the cost and time of sharing and updating aerodynamics, control laws, mass and inertia, and other flight dynamic components of the equations of motion of an aircraft or spacecraft simulation could be drastically reduced. A 2002 paper estimated over $ 6 million in savings could be realized for one military aircraft type alone. This paper describes the efforts of the American Institute of Aeronautics and Astronautics (AIAA) to develop a standard flight dynamic model exchange standard based on XML and HDF- 5 data formats...|$|R
40|$|The {{scope of}} the Apps WG covers three areas of interest: Physics and Engineering Models (PEM), multi-physics Integrated Codes (IC), and Verification and Validation (V&V). Each places {{different}} demands on the exascale environment. The exascale challenge will be to provide environments that optimize all three. PEM serve as a test bed for both model development and 'best practices' for IC code development, {{as well as their}} use as standalone codes to improve scientific understanding. Rapidly achieving reasonable performance for a small team is the key to maintaining PEM innovation. Thus, the environment must provide the ability to develop portable code at a higher level of abstraction, which can then be tuned, as needed. PEM concentrate their computational footprint in one or a few kernels that must perform efficiently. Their comparative simplicity permits extreme optimization, so the environment must provide the ability to exercise significant control over the lower software and hardware levels. IC serve as the underlying software tools employed for most ASC problems of interest. Often coupling dozens of physics models into very large, very complex applications, ICs are usually the product of hundreds of <b>staff-years</b> of development, with lifetimes measured in decades. Thus, emphasis is placed on portability, maintainability and overall performance, with optimization done on the whole rather than on individual parts. The exascale environment must provide a high-level standardized programming model with effective tools and mechanisms for fault detection and remediation. Finally, V&V addresses the infrastructure and methods to facilitate the assessment of code and model suitability for applications, and uncertainty quantification (UQ) methods for assessment and quantification of margins of uncertainty (QMU). V&V employs both PEM and IC, with somewhat differing goals, i. e., parameter studies and error assessments to determine both the quality of the calculation and to estimate expected deviations of simulations from experiments. The exascale environment must provide a performance envelope suitable both for capacity calculations (high through-put) and full system capability runs (high performance). Analysis of the results place shared demand on both the I/O as well as the visualization subsystems...|$|R

