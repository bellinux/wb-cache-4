344|2520|Public
25|$|A second Merganser {{was used}} as a static and <b>structural</b> <b>test</b> airframe.|$|E
25|$|First flew on 13 January 1973 and {{was used}} as a <b>structural</b> <b>test</b> {{aircraft}}, it was the first aircraft to have the smaller wingtips to clear a severe buffet problem found on earlier aircraft.|$|E
25|$|The light cruiser fitted out at Norfolk until 17 September {{when she}} began {{shakedown}} training in Chesapeake Bay. This included aircraft launch and recovery drills, <b>structural</b> <b>test</b> gun firing, day spotting practice and anti-aircraft drills. The crew also conducted an unplanned but successful man overboard drill when S2c Scott was knocked overboard by a training gun mount.|$|E
5000|$|IST - <b>Structural</b> <b>testing</b> http://www.instron.com/wa/product/Structural-Testing-Systems-IST.aspx ...|$|R
5000|$|IEC 61400-23:2014 Full-scale <b>structural</b> <b>testing</b> of {{rotor blades}} ...|$|R
40|$|<b>Structural</b> <b>testing</b> at the National Wind Technology Center (NWTC) {{offers many}} {{benefits}} to wind turbine companies. NWTC includes {{a new high}} bay large enough to test any blade expected during the next 5 years. (There are four test bays.) In 1995, NWTC developed a saphisticated data acquisition system, known as the Blade <b>Structural</b> <b>Testing</b> Real-time Acquisition Interface Network (BSTRAIN), to monitor <b>structural</b> <b>testing</b> through 24 -hour continuous video surveillance. NWTC recommends ultimate static-strength and fatigue testing, with nondestructive testing in some cases (vibrational testing is covered in a separate information sheet) ...|$|R
25|$|On 26 May 1967, {{an order}} for three Mirage F1 prototypes was placed, while the larger and more {{expensive}} Mirage F2 was formally abandoned. These three pre-service aircraft, along with a static <b>structural</b> <b>test</b> airframe, soon joined the test programme. By late 1971, {{the construction of an}} initial batch of 85 production standard Mirage F1 had been authorised.|$|E
25|$|At {{the time}} of cancellation, a single <b>structural</b> <b>test</b> {{airframe}} was partially complete. According to aviation author Barry Jones, photographs of the structural airframe, with the port wing fitted and the serial number XD696 painted on, have sometimes been mistakenly {{claimed to have been}} of the first prototype. The Avro 720 had reportedly cost £1 million by {{the time of}} cancellation, while its Screamer powerplant cost a further £0.65 million.|$|E
25|$|In 2006, NASA {{announced}} {{that the company was}} one of two selected to provide crew and cargo resupply demonstration contracts to the ISS under the COTS program. SpaceX demonstrated cargo resupply and eventually crew transportation services using the Dragon. The first flight of a Dragon <b>structural</b> <b>test</b> article took place in June 2010, from Launch Complex 40 at Cape Canaveral Air Force Station during the maiden flight of the Falcon 9 launch vehicle; the mock-up Dragon lacked avionics, heat shield, and other key elements normally required of a fully operational spacecraft but contained all the necessary characteristics to validate the flight performance of the launch vehicle. An operational Dragon spacecraft was launched in December 2010 aboard COTS Demo Flight 1, the Falcon 9's second flight, and safely returned to Earth after two orbits, completing all its mission objectives. In 2012, Dragon became the first commercial spacecraft to deliver cargo to the International Space Station, and has since been conducting regular resupply services to the ISS.|$|E
40|$|Abstract-h {{this paper}} we compare {{a number of}} <b>structural</b> <b>testing</b> {{strategies}} {{in terms of their}} relative coverage of the program’s structure and also {{in terms of the number}} of test cases needed to satisfy each strategy. We also discuss some of the deficiencies of such comparisons. Index Terms-Data flow, program <b>testing,</b> <b>structural</b> <b>testing.</b> I...|$|R
5000|$|NiD 450: Two built, {{plus one}} {{airframe}} for <b>structural</b> <b>testing.</b> Hispano-Suiza 18R, [...] engine.|$|R
40|$|Abstract—The {{well-known}} approach towards testing mixed-signal cores is {{functional testing}} and basically measuring key {{parameters of the}} core. However, especially if performance requirements increase, and embedded cores are considered, functional testing becomes technically and economically less attractive. A more cost-effective approach could be accomplished {{by a combination of}} reduced functional <b>tests</b> and added <b>structural</b> <b>tests.</b> In addition, it will also improve the debugging facilities of cores. Basic problem remains the large computational effort for analogue <b>structural</b> <b>testing.</b> In this paper, we introduce the concept of Testability Transfer Function for both analogue as well as digital parts in a mixed-signal core. This opens new possibilities for efficient <b>structural</b> <b>testing</b> of embedded mixed-signal cores, thereby adding to the quality of tests...|$|R
500|$|<b>Structural</b> <b>Test</b> model, {{to certify}} the {{structure}} for loads during launch at the anticipated temperatures, {{and to assess}} the stiffness of each stage ...|$|E
500|$|S-II-S, which North American Aviation's Space and Information Systems Division (S) at Seal Beach had {{completed}} by January 31, was re-designated as S-II-S/D {{to be used}} for dynamic testing. [...] S-II-S/D would not survive its final <b>structural</b> <b>test</b> on September 29, 1965, but the test was exercising considerable margin above the structural integrity required for flight.|$|E
2500|$|In 1957 the {{permanent}} Propulsion and <b>Structural</b> <b>Test</b> Facility was finally completed using the funds appropriated by Congress for the Redstone, but the ABMA decided to continue using the Interim Test Stand for the Redstone. [...] After {{four years of}} development, the interim facilities had proven adequate for testing the Redstone and Jupiter-C, and the Army felt that a move to the new facilities would be disruptive to its busy schedule.|$|E
40|$|Evolutionary <b>structural</b> <b>testing</b> is an {{approach}} to gener-ate test cases automatically that achieve high structural code coverage. This white box approach has been established for being used on the code level, but so far only little {{work has been done}} to apply it to system models, such as MAT-LAB/SIMULINK/STATEFLOW models. The position taken in the research summarized here is that <b>structural</b> <b>testing</b> of real-world SIMULINK models con-taining STATEFLOW charts is possible. Ideas for necessary problem solutions are proposed. 2 Proposed Solution Considering the task of <b>structural</b> <b>testing</b> of SIMULINK models containing STATEFLOW diagrams, a number of dif-ficulties arise that need to be addressed. One of the main problems is the size of the model under test and the re...|$|R
40|$|The {{well-known}} approach towards testing mixed-signal cores is {{functional testing}} and basically measuring key {{parameters of the}} core. However, especially if performance requirements increase, and embedded cores are considered, functional testing becomes technically and economically less attractive. A more cost-effective approach could be accomplished {{by a combination of}} reduced functional <b>tests</b> and added <b>structural</b> <b>tests.</b> In addition, it will also improve the debugging facilities of cores. Basic problem remains the large computational effort for analogue <b>structural</b> <b>testing.</b> In this paper, we introduce the concept of Testability Transfer Function for both analogue as well as digital parts in a mixed-signal core. This opens new possibilities for efficient <b>structural</b> <b>testing</b> of embedded mixed-signal cores, thereby adding to the quality of tests...|$|R
40|$|Abstract-This study applies an {{experimentation}} methodology {{to compare}} three state-of-the-practice software testing techniques: a) code reading by stepwise abstraction, b) functional testing using equivalence partitioning and boundary value analysis, and c) <b>structural</b> <b>testing</b> using 100 percent statement coverage criteria. The study compares the strategies in three aspects of software testing: fault detection effectiveness, fault detection cost, and classes of faults detected. Thirty-two professional programmers and 42 advanced students applied the three techniques to four unit-sized programs in a fractional factorial experimental design. The major {{results of this}} study are the following. 1) With the professional programmers, code reading detected more software faults and had a higher fault detection rate than did functional or <b>structural</b> <b>testing,</b> while functional testing detected more faults than did <b>structural</b> <b>testing,</b> but functional and <b>structural</b> <b>testing</b> were not different in fault detection rate. 2) In one advanced student subject group, code reading and functional testing were not different in faults found, but were both superior to <b>structural</b> <b>testing,</b> while in the other advanced student subject group there was no difference among the techniques. 3) With the advanced student subjects, the three techniques were not different in fault detection rate. 4) Number of faults observed, fault detection rate, and total effort in detection depended on the type ofsoftware tested. 5) Code reading detectedmore interface faults than did the other methods. 6) Functional testing detected more control faults than did the other methods. 7) When asked to estimate the percentage of faults detected, code readers gave the most accurate estimates while functional testers gave the least accurate estimates. Index Terms-Code reading, empirical study, functional testing, methodology evaluation, off-line software review, software measurement, software <b>testing,</b> <b>structural</b> <b>testing.</b> I...|$|R
2500|$|On 30 April 2014, the LCS Mission Modules (MM) program {{successfully}} completed the first <b>Structural</b> <b>Test</b> Firing (STF) of the 30mm gun mission module aboard USS Coronado. The test consisted of installing two 30mm guns, mission package software, and associated test equipment, loading live ammunition, and conducting three live fire scenarios: gun operations; worst case blast loading; and sustained fire. [...] Multiple tracking exercises using high speed maneuvering surface targets to simulate single and swarm boat attacks were also accomplished the following day. [...] Surface warfare tracking and live fire exercises are scheduled in summer 2014, culminating in initial operational test and evaluation in 2015. Coronado {{is the first}} Independence-class LCS to undergo firings of the 30mm cannons of the surface warfare mission package.|$|E
2500|$|At the {{conclusion}} of this testing, Enterprise {{was supposed to be}} taken back to Palmdale for retrofitting as a fully spaceflight capable vehicle. Under this arrangement, Enterprise would be launched on its maiden spaceflight in July 1981 to launch a communications satellite and retrieve the Long Duration Exposure Facility, then planned for a 1980 release on the first operational orbiter, Columbia. Afterwards, Enterprise would conduct two Spacelab missions. However, in the period between the rollout of Enterprise and the rollout of Columbia, a number of significant design changes had taken place, particularly with regard to the weight of the fuselage and wings, which meant retrofitting the prototype would have been a much more expensive process than previously realized, requiring the dismantling of the orbiter and the return of various sections to subcontractors across the country. As a consequence, NASA took the decision to convert an incomplete <b>Structural</b> <b>Test</b> Article, numbered STA-099, which had been built to undergo a variety of stress tests, into a fully flight-worthy orbiter, which became [...]|$|E
5000|$|STA-097 - Vibro Acoustic (Mid Fuselage) <b>Structural</b> <b>Test</b> Article ...|$|E
40|$|The {{most common}} {{techniques}} for detecting defects in software artifacts are inspection and testing. Since both techniques are effort consuming, {{they are often}} presented as being counterparts or even rivals rather than as being complementary. Hence, few controlled empirical studies investigate the effects of inspection and testing on software quality when applied in sequence. This paper contributes a controlled experiment {{to shed light on}} this issue. Twenty subjects performed sequentially code inspection and <b>structural</b> <b>testing</b> using different coverage values as test criteria on a C-code module. We adopted this sequence because it is recommended for use in industry. The results of this experiment show that inspection significantly outperforms <b>structural</b> <b>testing</b> with respect to (cost-) effectiveness for defect detection. Furthermore, the experimental results indicate little evidence to support the hypothesis that <b>structural</b> <b>testing</b> detects defects of a particular class that were missed b y inspection and vice versa. These findings lead us to the conclusion that inspection and <b>structural</b> <b>testing</b> do not complement each other well. In fact, prior inspection seems to hinder the (cost-) effectiveness of <b>structural</b> <b>testing.</b> Since inspection out-performs <b>structural</b> <b>testing</b> and since 39 percent (on average) of the defects were not detected at all, it might be more valuable to apply inspection together with other testing techniques, such as boundary value analysis, to achieve a better defect coverage. We are aware that a single experiment does not provide conclusive evidence. Hence, we consider it only one step in the determination of the optimal mix of defect detection techniques. Additional research as well as replication of this experiment are required to make further progress into this direction...|$|R
50|$|In August 2004 Bayern-Chemie {{delivered}} the first inert PSS, {{to be used}} for <b>structural</b> <b>testing,</b> amongst other things.|$|R
40|$|Mathematics {{has many}} useful {{properties}} for developing of complex software systems. One {{is that it}} can exactly describe a physical situation of the object or outcome of an action. Mathematics support abstraction and this is an excellent medium for modeling, since it is an exact medium there is a little possibility of ambiguity. This paper demonstrates that mathematics provides a high level of validation when it is used as a software medium. It also outlines distinguishing characteristics of <b>structural</b> <b>testing</b> which is based on the source code of the program <b>tested.</b> <b>Structural</b> <b>testing</b> methods are very amenable to rigorous definition, mathematical analysis and precise measurement. Finally, it also discusses functional and <b>structural</b> <b>testing</b> debate {{to have a sense of}} complete testing. Any program can be considered to be a function in the sense that program input forms its domain and program outputs form its range. In general discrete mathematics is more applicable to functional testing, while graph theory pertains more to <b>structural</b> <b>testing.</b> Comment: IEEE Publication format, ISSN 1947 5500, [URL]...|$|R
5000|$|... #Caption: Challenger {{while in}} service as <b>structural</b> <b>test</b> article STA-099 ...|$|E
50|$|Three {{prototype}} anti-submarine aircraft, one completed as a <b>structural</b> <b>test</b> rig.|$|E
5000|$|STA-096 - Environmental Control and Life Support System <b>Structural</b> <b>Test</b> Article ...|$|E
40|$|Chips {{that produce}} correct results under {{operating}} conditions (good chips) may fail <b>structural</b> <b>tests</b> applied via scan chains (also called overkill chip). In a System Level Test (SLT), a chip is inserted {{in an actual}} system and tested whether it produces correct outputs in a system. We applied various <b>structural</b> <b>tests</b> as well as SLT to test chips fabricated with 0. 14 μm and 0. 13 μm technology, and identified potential overkills. Based on the structural and system level test results, we classified the test chips into two categories: chips that fail <b>structural</b> <b>tests</b> but pass system level test (also called FP devices) and chips that fail both <b>structural</b> <b>tests</b> and system level test (also called FF devices). We observed that FP and FF devices fail at different scan cells and logic design blocks. We investigated if there are design problems that cause FP devices to fail at the same logic design blocks or the same scan cells. We have not found any experimental evidence of such design problems yet. i...|$|R
40|$|The {{well-known}} method towards testing mixed-signal cores is {{functional testing}} and essentially measuring key {{parameters of the}} core. However, especially if performance requirements increase, and embedded cores are considered, functional testing becomes technically and economically less attractive. A more cost-effective approach could be accomplished {{by a combination of}} reduced functional <b>tests</b> and added <b>structural</b> <b>tests.</b> In addition, it will also improve the debugging options for cores. Basic problem remains the large computational effort for analogue <b>structural</b> <b>testing.</b> In this paper, we introduce the concept of Testability Transfer Function for both analogue as well as digital parts in a mixed-signal core. This opens new possibilities for efficient <b>structural</b> <b>testing</b> of embedded mixed-signal cores, thereby adding to the quality of tests and/or enhanced diagnostic capabilities...|$|R
25|$|Both {{aircraft}} {{were sent}} to McCook Field, Dayton, Ohio for further testing in 1923, and were destroyed during static <b>structural</b> <b>testing.</b>|$|R
50|$|A second Merganser {{was used}} as a static and <b>structural</b> <b>test</b> airframe.|$|E
5000|$|... #Caption: <b>Structural</b> <b>test</b> {{article for}} the Service Module, {{delivered}} to NASA in November 2015 ...|$|E
5000|$|Node 1 <b>Structural</b> <b>Test</b> Article (STA) - {{to become}} Node 4/Docking Hub System (DHS).|$|E
40|$|This study {{compares the}} results of code reading, {{functional}} <b>testing,</b> and <b>structural</b> <b>testing</b> in three aspects of software testing: fault detection effectiveness, fault detection cost, and classes of faults detected. Thirty two professional programmers and 42 advanced students applied the three techniques to four unit-sized programs in a fractional experimental design. The major {{results of this study}} are the following: (1) With the professional programmers, code reading detected more software faults and had a higher detection rate than did functional or <b>structural</b> <b>testing,</b> while functional testing detected more faults than did <b>structural</b> <b>testing,</b> but functional and <b>structural</b> <b>testing</b> were not different in fault detection rate. (2) In one advanced student subject group, code reading and functional testing were not different in faults found, but were superior to <b>structural</b> <b>testing,</b> while in the other advanced student subject group there was no difference among the techniques. (3) With the advanced student subjects, the three techniques were not different in fault deteciton rate. (4) Number of faults observed, fault detection rate, and total effort in detection depended on the type of software tested. (5) Code reading detected more interface faults than did the other methods. (6) Functional testing detected more control faults than did the other methods. (7) When asked to estimate the percentage of faults detected, code readers gave the most accurate estimates while functional testers gave the least accurate estimates. Appendix B includes the source code for the word...|$|R
40|$|Abstract. This paper {{describes}} the main {{results of the}} V 3 F project (which stands for and verication of software handling oat-ing-point numbers") 1. The goal of this project was to provide tools to support the verication and validation process of programs with oating-point numbers. We did investigate two directions: <b>structural</b> <b>testing</b> of a program with oating-point numbers and verication of the confor-mity of a program handling oating-point numbers, with its specication. Practically, a constraint solver over the oats was developed for the gen-eration of <b>test</b> sets in <b>structural</b> <b>testing</b> framework. Dierent techniques {{have been developed to}} evaluate the distance between the semantics of a program over the real numbers and its semantics over the oating-point numbers. Key words: verication and validation of programs, constraint pro-gramming, oating-point numbers, <b>structural</b> <b>testing,</b> reactive systems. ...|$|R
5|$|The {{second of}} two prototypes ordered on 1 January 1944, it was used for <b>structural</b> <b>testing</b> before being {{disposed}} of in 1952.|$|R
