12|532|Public
25|$|Size: While not {{a quality}} {{attribute}} per se, the sizing of source code is a <b>software</b> <b>characteristic</b> that obviously impacts maintainability. Combined with the above quality characteristics, software size {{can be used}} to assess the amount of work produced and to be done by teams, as well as their productivity through correlation with time-sheet data, and other SDLC-related metrics.|$|E
40|$|International audienceTestability is a <b>software</b> <b>characteristic</b> {{that aims}} at {{producing}} systems easy to test. A testability antipattern {{is a factor}} that could affect negatively the testability of software. In this paper we compare the antipatterns at source code level and at different abstraction levels, {{in order to understand}} at which point they are introduced during the development...|$|E
40|$|Software {{testing is}} costly {{in terms of}} time and funds. Testability is a <b>software</b> <b>characteristic</b> that aims at {{producing}} systems easy to test. Several metrics have been proposed to identify the testability weaknesses. But it is sometimes difficult to be convinced that those metrics are really related with testability. This article is a critical survey of the source-code based metrics proposed in the literature for object-oriented software testability. It underlines the necessity to provide testability metrics that are proved to be intuitive and adequate for the testing cost prediction...|$|E
30|$|The overall {{performance}} indicators presented in Table  4 {{show that the}} average actual benefit of using cloud service applications is 7.520 compared with the expected level of 10, and the average gap 0.248 {{is comparable to the}} required level of 0. The <b>software</b> <b>characteristics</b> dimension (D 3) for which a maximum gap of 0.289 was found. Therefore, the <b>software</b> <b>characteristics</b> dimension should be the priority performance level for improvement. In addition, the results indicate that the quality of performance is a critical factor in the overall improvement of cloud service applications. According to these empirical research results, consumers’ main considerations when choosing cloud service applications are <b>software</b> <b>characteristics,</b> the <b>software’s</b> ease-of-use, the desire for high-speed computing capability, and the discussion of these services by peers.|$|R
40|$|Intensive and {{long-lasting}} computer work {{increases the}} risk of developing musculoskeletal disorders. Usually the solution for preventing these complaints is found in hardware ergonomics. Until now, little {{attention has been paid to}} the role of software design and ergonomic software quality. A cross-sectional questionnaire study was conducted to investigate whether unfavourable <b>software</b> <b>characteristics</b> contribute to the development of symptoms. The outcome measure was defined as work-related, long-lasting neck or upper limb symptoms that had led to treatment or sickness absence. To determine the strength of the associations between eleven <b>software</b> <b>characteristics</b> and symptoms, adjusted Odds Ratio’s (OR) were calculated. To investigate towards which factors prevention should be directed, Population Attributable Risks (PAR) were calculated. The presence of unfavourable <b>software</b> <b>characteristics</b> was associated with musculoskeletal symptoms for nine out of eleven <b>software</b> <b>characteristics</b> studied. The strongest associations were found for: high precision demands for mouse clicking, insufficient possibilities for the use of shortcut keys and having difficulty reading information on the screen due to a small font size. Longitudinal research is needed to confirm these findings. More attention should be paid to software ergonomics in (research on) the prevention of musculoskeletal symptoms...|$|R
30|$|The {{results of}} DEMATEL {{technology}} can provide unique management insights. DEMATEL analysis {{may be used}} to evaluate the performance of cloud services relative to other standards, and these comparisons may enable decision-makers to improve cloud service products. In this empirical investigation, an INRM (Fig.  1) was used to calculate and explain the scope and criteria of influencing factors. Factors’ degrees of influence are listed in Fig.  1. These values were used to designate improvement priority among the various dimensions. Improvement priority was determined from highest to lowest as follows: perceptual characteristics (D 1), added characteristics (D 2), and <b>software</b> <b>characteristics</b> (D 3). The priority level of <b>software</b> <b>characteristics</b> (D 3) is a critical indicator for decision-makers. According to the views of the experts, the perception characteristics dimension should be considered the highest priority, because improvements in this dimension will define a cloud service’s brand. This dimension contributes to users’ task-related benefits, thereby influencing the <b>software</b> <b>characteristics</b> aspect of cloud service applications. This finding verifies the general perceptual characteristics, added <b>characteristics,</b> and <b>software</b> <b>characteristics</b> and is consistent with the general results of previous studies [23]. The INRM introduced in this study enables in-depth analysis based on representation of influential relationships within a system (as shown in Fig.  1).|$|R
40|$|An {{important}} {{motivation for}} software testing {{is to increase}} confidence that the software no longer contains faults. In this paper we explain a technique for using fewer tests to gain an equivalent con dence in software. Our techniques complement random black box testing. To {{be able to use}} fewer tests and gain equivalent confidence, we must either (1) isolate and remove software characteristics that discourage software from revealing faults during testing, or (2) nd a method of selecting tests that have a greater ability to reveal the existence of any existing faults. The first of these two alternatives {{is the subject of this}} paper. We present a conjecture concerning "testability," a <b>software</b> <b>characteristic</b> that frequently increases the likelihood that faults are detected during random black-box testing. We propose design measures to increases testability...|$|E
40|$|Approved {{for public}} release; {{distribution}} is unlimited. A generalized automated {{data acquisition system}} was designed for the Naval Postgraduate School Aerolab Low Speed Wind Tunnel. A specific application of this system was to upgrade the current Cylinder Drag Experiment conducted during AA 2801 Aero Laboratories 1, an introductory aeronautical laboratory course taught at the Naval Postgraduate School. Two methods of drag determination were used: pressure distribution and wake analysis (momentum method). Data from these two methods were collected by a system based on a high speed analog/digital computer board, a standard 486 IBM-type PC and data acquisition <b>software.</b> <b>Characteristic</b> methods of reducing data from this experiment are discussed. The results obtained by analyzing the acquired data compared favorably to empirical data from previous circular cylinder coefficient of drag experiments. This automated data acquisition system will facilitate future research and instructional use of the wind tunnel. Lieutenant Commander, United States Nav...|$|E
40|$|The use of {{orthogonal}} {{features are}} widely illustrated {{in design and}} manufacturing publications, if not widely used. Features {{as a method of}} design and manufacturing integration is dependent upon the communication of information from one context to another. Free-form features are used to represent sculptured aesthetic surfaces, for instance, in the automotive and mould tool industries. The surface creation, manipulation and blending processes are highly labour intensive, with automation a highly desired <b>software</b> <b>characteristic.</b> An outcome of the BriteEuram IMPRESS (BREU 7049) project has been to identify that free-form features have an optional many-to-many mapping relationship between features in a design context and those in a manufacturing context. To identify with this approach, a logical process of mapping is presented. The concept has enabled the partners to investigate this mapping link and to identify the processes and strategies used within the automotive and injection moulding tool industry...|$|E
50|$|There {{are many}} other {{applications}} with social <b>software</b> <b>characteristics</b> that facilitate human connection and collaboration in specific contexts. Social Project Management and e-learning applications are among these.|$|R
30|$|The use {{of cloud}} service {{applications}} in the training systems of modern enterprises has become an important trend. The findings from the literature regarding perceptual <b>characteristics,</b> added <b>characteristics,</b> <b>software</b> <b>characteristics,</b> and external factors influence consumers’ choice to adopt cloud service applications.|$|R
50|$|Although {{there is}} no single, widely {{accepted}} list of enterprise <b>software</b> <b>characteristics,</b> they generally include performance, scalability, and robustness. Furthermore, enterprise software typically has interfaces to other enterprise software (for example LDAP to directory services) and is centrally managed (a single admin page, for example).|$|R
40|$|The {{study of}} {{problems}} and inconveniences appearing in the Object-oriented (OO) implementation of continuous simulation systems based in Differential-algebraic Equations (DAE) is presented. It {{was found that the}} numerical treatment of the equations is crucial to find a design compatible with OO programming practices which lead naturally to implicit schemes. The family of Backward Differential Formulas (BDF) was found particularly appropriate to achieve high levels of software flexibility and reusability. A series of numerical studies were carried out comparing numerical performances with software quality metrics. It was found that BDF implementations improve substantially the software quality, although the computer costs also increase significatively which ultimately calls for pondering the importance of each <b>software</b> <b>characteristic</b> (i. e., modifiability-extensibility vs. calculation time). The equilibrium of this balance is determined {{by the size of the}} problem to solve. A utility function is proposed which can be used to determine the optimum choice...|$|E
40|$|Many {{models have}} been {{proposed}} for software reliability prediction, {{but none of these}} models could capture a necessary amount of <b>software</b> <b>characteristic.</b> We have proposed a mixed approach using both analytical and data driven models for finding the accuracy in reliability prediction involving case study. This report includes qualitative research strategy. Data is collected from the case study conducted on three different companies. Based on the case study an analysis will be made on the approaches used by the companies and also by using some other data related to the organizations Software Quality Assurance (SQA) team. Out of the three organizations, the first two organizations used for the case study are working on reliability prediction and the third company is a growing company developing a product with less focus on quality. Data collection was by the means of interviewing an employee of the organization who leads a team and is in the managing position for at least last 2 years. svra 06 @student. bth. s...|$|E
40|$|Software {{quality metrics}} can be {{categorized}} into internal quality, external quality, and quality in use metrics. Although exist close relationship between internal and external software quality, there are not explicit evidences in literature that attributes and metrics of internal quality impact external quality. This is essential to know which metric to use according to the <b>software</b> <b>characteristic</b> {{that you want to}} improve. Hence, we carried out a systematic literature review for identifying this relationship. After analyzing 664 papers, 12 papers were studied in depth. As result, we found 65 metrics related to maintainability, usability, reliability, and quality characteristics as well as main attributes that impact external metrics (size, coupling, and cohesion). In follow, we filtered some metrics that have clear definitions, are appropriately related to the characteristic that purports to measure, and do not use subjective attributes in their computation. Therefore, these metrics are more robust and reliable to evaluate software characteristics. So, these metrics are better for use in practice by professionals working in the software market...|$|E
30|$|For example, the {{perceived}} performance dimension (D 1) shows {{the highest performance}} at 7.801 and the lowest gap value at 0.220. These measurements represent the most satisfying (and satisfactory) dimensions. Contrastingly, the results for <b>software</b> <b>characteristics</b> (D 3) indicate {{that it is the}} most unsatisfactory latitude. <b>Software</b> <b>characteristics</b> score the lowest performance and the largest gap value; thus, the highest priority should be given to its improvement. Thus, to achieve the desired software performance level, decision-makers should prioritize (D 3) improvements, followed by D 1 and finally D 2. The average benefit from using cloud services is 7.52. The average gap between actual performance and desired performance is 0.248, indicating that many challenges remain to be addressed in further development of cloud service applications.|$|R
40|$|This {{tutorial}} introduces typical {{hardware and}} <b>software</b> <b>characteristics</b> of extant and emerging supercomputing platforms, and presents issues and solutions in executing large-scale parallel discrete-event simulation scenarios on such high performance computing systems. Covered topics include synchronization, model organization, example applications, and observed performance from illustrative large-scale runs. ...|$|R
50|$|Software {{provenance}} {{encompasses the}} origin of software and its licensing terms. For example, when incorporating a free, open source or proprietary software component in an application, one may wish to understand its provenance to ensure that licensing requirements are fulfilled and that other <b>software</b> <b>characteristics</b> can be understood.|$|R
40|$|The EMI Quality Model {{has been}} created to define, and later review, the EMI (European Middleware Initiative) {{software}} product and process quality. A quality model {{is based on a}} set of software quality metrics and helps to set clear and measurable quality goals for software products and processes. The EMI Quality Model follows the ISO/IEC 9126 Software Engineering – Product Quality to identify a set of characteristics that need to be present in the EMI software. For each <b>software</b> <b>characteristic,</b> such as portability, maintainability, compliance, etc, a set of associated metrics and KPIs (Key Performance Indicators) are identified. This article presents how the EMI Quality Model and the EMI Metrics have been defined {{in the context of the}} software quality assurance activities carried out in EMI. It also describes the measurement plan and presents some of the metrics reports that have been produced for the EMI releases and updates. It also covers which tools and techniques can be used by any software project to extract “code metrics” on the status of the software products and “process metrics” related to the quality of the development and support process such as reaction time to critical bugs, requirements tracking and delays in product releases...|$|E
40|$|In {{this paper}} a new {{methodology}} {{for the evaluation}} of software structural complexity is described. It is based on the entropy evaluation of the random uniform response function associated with the so called <b>software</b> <b>characteristic</b> function SCF. The behavior of the SCF with the different software structures and their relationship with the number of inherent errors is investigated. It is also investigated how the entropy concept can be used to evaluate the complexity of a software structure considering the SCF as a canonical representation of the graph associated with the control flow diagram. The functions, parameters and algorithms that allow to carry out this evaluation are also introduced. After this analytic phase follows the experimental phase, verifying the consistency of the proposed metric and their boundary conditions. The conclusion is that the degree of software structural complexity can be measured as the entropy of the random uniform response function of the SCF. That entropy is in direct relationship with the number of inherent software errors and it implies a basic hazard failure rate for it, so that a minimum structure assures a certain stability and maturity of the program. This metric can be used, either to evaluate the product or the process of software development, as development tool or for monitoring the stability {{and the quality of the}} final product...|$|E
25|$|The dual structural/functional {{dimension}} of software quality {{is consistent with}} the model proposed in Steve McConnell's Code Complete which divides <b>software</b> <b>characteristics</b> into two pieces: internal and external quality characteristics. External quality characteristics are those parts of a product that face its users, where internal quality characteristics are those that do not.|$|R
40|$|Discusses gender {{differences}} in student attitudes toward computers and examines <b>software</b> <b>characteristics</b> that may affect gender equity. A study is described that was conducted to examine the computer 2 ̆ 7 s potential to teach basic geography concepts to fourth and fifth grade students, {{as well as to}} explore possible {{gender differences}}...|$|R
50|$|The dual structural/functional {{dimension}} of software quality {{is consistent with}} the model proposed in Steve McConnell's Code Complete which divides <b>software</b> <b>characteristics</b> into two pieces: internal and external quality characteristics. External quality characteristics are those parts of a product that face its users, where internal quality characteristics are those that do not.|$|R
5000|$|... #Caption: Relationship between <b>software</b> {{desirable}} <b>characteristics</b> (right) and measurable attributes (left).|$|R
40|$|Since {{customizing}} functional components cannot achieve real personalization in GIS software, {{an adaptive}} solution for GIS personalization is proposed The solution is mainly constituted by user model, database processing model, spatial database, map design, user interface, software evaluation and process control. <b>Software</b> <b>characteristics</b> and key {{issues to be}} solved of this personalized GIS solution are also concerned...|$|R
40|$|Abstract — Context: Software {{maintenance}} {{is important to}} keep existing software systems functional for organizations or users that depend on that software. Goal: We aim to identify the factors, i. e., <b>software</b> <b>characteristics</b> such as code complexity, leading to maintenance problems. Method: We present a Mapping Study (MS) on controlled experiments that investigated <b>software</b> <b>characteristics</b> related to defects during maintenance. Results: The search strategy identified 78 papers, of which 9 have been included in our study, dated from 1985 to 2013, after applying our inclusion and exclusion criteria. We extracted data from these papers to identify the research methods, and the independent, dependent, blocked, and measured variables. Conclusions: Our MS results point to a weak evidence on software factors causing defects during maintenance. Stronger evidence can be developed via more controlled experiments that address multiple independent variables and hold the software objects constant. Keywords—Software maintenance, mapping study, systematic literature review, controlled experiments, defects. I...|$|R
40|$|Includes bibliographical {{references}} (page 39) The {{objective of}} this project is to study and investigate various microprocessors (??P) and their unique hardware and <b>software</b> <b>characteristics.</b> A rapidly expanding technology on digital electronics field attracts interest to today's microprocessors. When used as replacements for hardwired logic, the microprocessors provide significant economies. The large-scale integration (LSI) chip performs the basic control processing unit (CPU) functions of a computer...|$|R
40|$|Repetitive and {{recognizable}} phases in <b>software</b> <b>characteristics</b> {{have been}} observed by designers and exploited by computer systems for decades. 1 Application phase behavior {{has been the focus}} of growing interest with two main goals. In the first category, researchers seek to identify program phases from simulation traces, 2 - 4 runtime power, or performance behavior 5 - 7 to select representative points within a run to study or simulate...|$|R
40|$|In this poster, we sketch our {{research}} plan about a "massive" empirical evaluation of model-driven techniques following {{the first two}} already conducted steps in that respect (an exploratory survey {{and a series of}} controlled experiments concerning maintainability). We intend to experiment UML-based model-driven techniques in several contexts (e. g., desktop and Web applications), focusing on several <b>software</b> <b>characteristics</b> (e. g., maintainability and productivity) and employing empirical methods such as controlled experiments, surveys, case studie...|$|R
40|$|Abstract. This paper {{presents}} {{the findings from}} the later phases of a study of the effects of introducing formal specification to the commercialscale development of a small security-critical system component. The objectives and form of the study are briefly reviewed. Observations have been made of the effort profile across the project, compliance of the developed system with customer requirements and <b>software</b> <b>characteristics.</b> The results of these observations are presented. Conclusions and areas of further work are discussed. ...|$|R
40|$|This {{viewgraph}} presentation profiles the US {{remote sensing}} industry based on {{responses to a}} survey by 1450 industry professionals. The presentation divides the industry into three sectors: academic, commercial, and government; the survey results from each are covered in a section of the presentation. The presentation also divides survey results on user needs into the following sectors: spatial resolution, geolocation accuracy; elevation accuracy, area coverage, imagery types, and timeliness. Data, information, and <b>software</b> <b>characteristics</b> are also covered in the presentation...|$|R
50|$|Solution Deployment Descriptor (SDD) is a {{standard}} XML-based schema defining {{a standard}}ized way to express <b>software</b> installation <b>characteristics</b> required for lifecycle management in a multi-platform environment.|$|R
30|$|Perceived {{usefulness}} {{and ease}} of use are sensitive <b>software</b> <b>characteristics</b> [11 – 13]. Precise speed of movement is required for numerous types of human motion tasks. Ordinarily, when the speed of a motion increases, the accuracy of the movement decreases. This phenomenon has long been a consideration in the development of technology intended to perform tasks with both high speed and high accuracy [14]. The web was used to establish user-friendly and rich content, efficient interactive technology, and experimental learning in an online laboratory [15].|$|R
30|$|Emphasis should {{shift from}} trying to build {{comprehensive}} models (containing all the possible <b>software</b> <b>characteristics)</b> to building models that include only essential quality characteristics. This study has shown that these essential quality characteristics include: maintainability, usability and maintenance capacity of software community. By narrowing down to these three essential quality characteristics, model developers would help to reduce the burden of OSS evaluation via existing quality assessment models, which {{has been referred to}} largely as being laborious and time consuming to conduct (Hauge et al. 2009; Ali Babar 2010).|$|R
30|$|State-based TDMA {{schedules}} [7, 8] demonstrate high-confidence real-time <b>software</b> <b>characteristics</b> such as deterministic behavior, meeting deadlines, verification, {{and separation}} of concerns {{in addition to}} making on-the-fly decisions at run time. A number of work on state-based schedules refer to build high confidence software for safety-critical systems such as networked medical devices [29]. However, state-based schedules assume {{to operate in the}} presence of high reliable communication channel which limits the applicability of the scheme in unreliable environments for operating correctly and timely because of the occurrence of state inconsistencies.|$|R
40|$|A {{software}} {{analysis was performed}} of known STS sortie payload elements and their associated experiments. This provided basic data for STS payload <b>software</b> <b>characteristics</b> and sizes. A set of technology drivers was identified based on a survey of future technology needs and an assessment of current software technology. The results {{will be used to}} evolve a planned approach to software technology development. The purpose of this plan is to ensure that software technology is advanced at a pace and a depth sufficient to fulfill the identified future needs...|$|R
