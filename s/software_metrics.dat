1042|425|Public
25|$|In {{addition}} to multitude of economic applications, the Theil index {{has been applied}} to assess performance of irrigation systems and distribution of <b>software</b> <b>metrics.</b>|$|E
25|$|The circuit rank can be {{explained}} in terms of algebraic graph theory as the dimension of the cycle space of a graph, in terms of matroid theory as the corank of a graphic matroid, and in terms of topology as one of the Betti numbers of a topological space derived from the graph. It counts the ears in an ear decomposition of the graph, forms the basis of parameterized complexity on almost-trees, and has been applied in <b>software</b> <b>metrics</b> as part of the definition of cyclomatic complexity of a piece of code. Under the name of cyclomatic number, the concept was introduced by Gustav Kirchhoff.|$|E
25|$|The {{rise of the}} {{structured}} programming movement led to many other structured approaches applied to software design. The techniques of structured analysis and structured design are outgrowths of {{structured programming}} concepts and techniques, and of the early ideas about modular design. Principles of modularity were strengthened by Larry Constantine's concepts of coupling (to be minimized between modules) and cohesion (to be maximized within modules), by David Parnas's techniques of information hiding, and by abstract data types. A number of tools and methods employing structured concepts were developed, such as Structured Design, Jackson's Structured Programming, Ross' Structured Analysis and Design Technique (SADT), Yourdon's Structured Method, Structured Systems Analysis and Design Method (SSADM), and James Martin's Information Engineering. The field of <b>software</b> <b>metrics</b> is often considered as a direct influence of the structured programming movement on software engineering in the 1970s.|$|E
40|$|<b>Software</b> quality <b>metrics</b> {{plays the}} {{vital role in}} the process of {{assessing}} software as in qualitative and quantitative terms. Basically, <b>software</b> quality <b>metrics</b> determines specific but some important properties, attributes or characteristics of software in terms of numbers, values or some symbols. This type of assessment should be occurred according the some well-defined measurement rules. <b>Software</b> quality <b>metrics</b> are not only the static measurement state of project but also it will help in assessing the behavior, size, quality and complexity etc, of software. Evaluation of <b>software</b> quality <b>metrics</b> is used to predict the fault-prone area and components of software in early stage of reengineering process of existing software as quality indicators. These <b>software</b> quality <b>metrics</b> helps to identify the problem from software in early stages of the reengineering of existing software. Therefore, this paper deals with automate <b>software</b> quality <b>metrics</b> tool namely <b>Software</b> Reverse Engineering Tool (SRET) which should be developed to determine the different <b>software</b> quality <b>metrics</b> and attributes of object oriented programming. Hence these metrics measures the complexity, effectiveness, efficiency of <b>software</b> and these <b>metrics</b> should be save time and cost of software analyzer, developer, tester etc., for reengineering the existing software with less effort...|$|R
40|$|Many large companies, {{from the}} {{traditionally}} proprietary software industry, are opening up and embracing the {{open source software}} (OSS) development process model {{as a part of}} their business strategy. Despite the recognized potential the OSS community offers, there are still many questions and unknowns about the transition process. We present an extensive analysis of static <b>software</b> quality <b>metrics</b> changes for Ingres, an open source enterprise database management system (DBMS), as the software was moved from the proprietary into open source software development environment. The <b>software</b> quality <b>metrics</b> of special interest for the research are cyclomatic complexity, effective lines of code, the degree of system modularity, and the amount of comments in the code. The conducted research shows an overall improvement in the <b>software</b> quality <b>metrics</b> and significant increase of the source code base. The overall improvement is comprised of a decrease in <b>software</b> quality <b>metrics</b> for source files that were changed between the proprietary and the OSS version and an increase in <b>software</b> quality <b>metrics</b> for the source files added through Ingres OSS community development process...|$|R
5000|$|... #Subtitle level 3: <b>Software</b> Assurance <b>Metrics</b> and Tool Evaluation (SAMATE) project ...|$|R
50|$|Grady wrote {{three books}} on <b>software</b> <b>metrics</b> and project management:Software Metrics: Establishing a Company-Wide Program (with Deborah L. Caswell), Practical <b>Software</b> <b>Metrics</b> for Project Management and Process Improvement, andSuccessful Software Process Improvement.|$|E
50|$|<b>Software</b> <b>metrics</b> {{and reverse}} {{engineering}} {{can be described}} as forms of static analysis. Deriving <b>software</b> <b>metrics</b> and static analysis are increasingly deployed together, especially in creation of embedded systems, by defining so-called software quality objectives.|$|E
50|$|Examples of {{software}} diagnosis tools include software maps and <b>software</b> <b>metrics.</b>|$|E
5000|$|Track all the <b>software</b> related <b>metrics</b> {{in terms}} of schedule,effort,defects etc.|$|R
40|$|International audienceThis paper {{presents}} an extensive analysis of static <b>software</b> quality <b>metrics</b> changes {{for an open}} source enterprise database management system (DBMS), as the software was moved from the proprietary into open source software development environment. The <b>software</b> quality <b>metrics</b> of special interest for the research are cyclomatic complexity, effective lines of code, the degree of system modularity, {{and the amount of}} comments in the code...|$|R
50|$|Focusing on <b>software</b> quality <b>metrics</b> {{is another}} {{good way to}} {{maintain}} track of how well a project is performing and whether the governance models fit the project. If the resulting outcome is not on par with expectations, which will be rapidly obvious when looking at <b>software</b> quality <b>metrics,</b> then executives know they must improve governance (whether through implementation of a new model or improving {{one aspect of the}} existing process).|$|R
50|$|<b>Software</b> <b>metrics</b> - {{quantitative}} {{measure of}} some property of a program.|$|E
5000|$|<b>Software</b> <b>Metrics</b> Metamodel is a metric {{specification}} that {{is based}} on the KDM ...|$|E
50|$|<b>Software</b> <b>metrics</b> {{are used}} to help assess and improve {{software}} quality. Some metrics {{are used to}} help determine where bug-prone code might be, while others help understand maintainability and proper construction. C/C++test provides a variety of <b>software</b> <b>metrics</b> including traditional counting metrics of lines, files, comments, methods, etc. as well as industry standards like fan out, cyclomatic complexity, cohesion, and various Halstead metrics.|$|E
40|$|Software defect {{prediction}} {{is the process}} of locating defective modules in software. Software quality may be a field of study and apply that describes the fascinating attributes of software package product. The performance should be excellent with none defects. <b>Software</b> quality <b>metrics</b> are a set of <b>software</b> package <b>metrics</b> that target the standard aspects of the product, process, and project. The software package {{defect prediction}} model helps in early detection of defects and contributes to their economical removal and manufacturing a top quality software package supported many metrics. The most objective of paper is to assist developers determine defects supported existing <b>software</b> package <b>metrics</b> victimization data mining techniques and thereby improve the software package quality. In this paper, role of various classification techniques in software defect prediction process are analyzed...|$|R
40|$|Since the mid 1990 s, CERT has {{researched}} and created valueadded processes, methods, practices, and tools for software survivability, software assurance, and building security into software throughout its development life cycle. In recent years, the research community has increasingly {{contributed to the}} body of knowledge about software assurance and <b>software</b> security <b>metrics.</b> formation security <b>metrics</b> and <b>software</b> security <b>metrics,</b> which in fact are quite distinct. Efforts to identify meaningful information and operational security metrics have been ongoing for some time. These efforts include various report...|$|R
50|$|Various <b>software</b> package <b>metrics</b> {{are used}} in modular programming. They have been {{mentioned}} by Robert Cecil Martin in his 2002 book Agile software development: principles, patterns, and practices.|$|R
50|$|Grady and Caswell's first book, <b>Software</b> <b>Metrics,</b> {{has been}} cited 661 times in other {{scholarly}} articles and publications.|$|E
50|$|The {{concept has}} been applied in {{computer}} science {{within the field of}} <b>software</b> <b>metrics</b> as a complexity measure.|$|E
5000|$|The {{height of}} a virtual {{building}} can be proportional {{to the complexity of}} the code unit (e.g., single or combined <b>software</b> <b>metrics).</b>|$|E
40|$|A {{study is}} {{presented}} in which we determined whether <b>software</b> product <b>metrics</b> gathered statically from designs or source code may be helpful in predicting the number of run-time faults that will be encountered during execution. Metrics examined include intermodule metrics such as fan [...] in and fan [...] out, as well as intermodule metrics such as cyclomatic complexity and size. Our study indicates {{that it may be}} possible, with certain classes of software products, to predict the run-time behavior using well-known static intermodule metrics. Keywords: design quality; intermodule metrics; intramodule metrics; software product metrics; run-time failures Introduction A great deal of research effort has been devoted to developing and validating <b>software</b> product <b>metrics</b> which are useful in predicting <b>software</b> errors. These <b>metrics</b> usually fall into one of two categories: intermodule metrics and intramodule metrics [Graham, 1996]. Intermodule metrics quantify the interactions between modules (e. g., [...] ...|$|R
40|$|The {{validation}} of <b>software</b> quality <b>metrics</b> lacks statistical significance. One {{reason for this}} is that the data collection requires quite some effort. To help solve this problem, we develop tools for metrics analysis of a large number of software projects (146 projects with ca. 70. 000 classes and interfaces and over 11 million lines of code). Moreover, {{validation of}} <b>software</b> quality <b>metrics</b> should focus on relevant metrics, i. e., correlated metrics need not to be validated independently. Based on our statistical basis, we identify correlation between several metrics from well-known objectoriented metrics suites. Besides, we present early results of typical metrics values and possible thresholds. 1...|$|R
5000|$|<b>Software</b> Process Improvement: <b>Metrics,</b> Measurement and Process Modeling by Michael Haug, Eric W. Olsen, Lars Bergman, Editors: ...|$|R
5000|$|Automated code review: calculates <b>software</b> <b>metrics</b> {{and source}} {{lines of code}} [...] Finds unused objects and methods. Identifies {{duplicate}} objects. Controls naming conventions.|$|E
5000|$|<b>Software</b> <b>metrics</b> (CppDepend {{currently}} supports 82 code metrics: Cyclomatic complexity; Afferent and Efferent Coupling; Relational Cohesion; Percentage of code {{covered by}} tests, etc.) ...|$|E
50|$|In {{addition}} to multitude of economic applications, the Theil index {{has been applied}} to assess performance of irrigation systems and distribution of <b>software</b> <b>metrics.</b>|$|E
40|$|<b>Software</b> {{complexity}} <b>metrics</b> {{are used}} to predict critical information about reliability and maintainability of software systems. Object oriented software development requires {{a different approach to}} <b>software</b> complexity <b>metrics.</b> In this paper, we propose a metric to compute the structural and cognitive complexity of class by associating a weight to the class, called as Weighted Class Complexity (WCC). On the contrary, of the other metrics used for object oriented systems, proposed metric calculates the complexity of a class due to methods and attributes in terms of cognitive weight. The proposed metric has been demonstrated with OO examples. The theoretical and practical evaluations based on the information theory have shown that the proposed metric is on ratio scale and satisfies most of the parameters required by the measurement theor...|$|R
40|$|The {{usage of}} Web {{services}} has recently increased. Therefore, {{it is important}} to select right type of Web services at the project design stage. The most common implementations are based on SOAP (Simple Object Access Protocol) and REST (Representational State Transfer Protocol) styles. Maintainability of REST and SOAP Web services has become an important issue as popularity of Web services is increasing. Choice of the right approach is not an easy decision since it is influenced by development requirements and maintenance considerations. In the present research, we present the comparison of SOAP and REST based Web services using <b>software</b> evaluation <b>metrics.</b> To achieve this aim, a systematic literature review will be made to compare REST and SOAP Web services in terms of the <b>software</b> evaluation <b>metrics...</b>|$|R
40|$|Abstract – <b>Software</b> Security <b>metrics</b> are {{quantitative}} measures {{related to}} a software system’s level of trustworthiness. They {{can be used to}} aid in resource allocation, program planning, risk assessment, and product and service selection. Recently researchers have proposed several <b>software</b> security <b>metrics.</b> Among these are attack surface and vulnerability density. The attack surface measure has been used by a few major software companies, such as Microsoft, Hewlett-Packard, and SAP. The vulnerability density measure has been applied by some researchers to Windows and Linux family of operating systems, in addition to some web servers and browsers. Despite their promise, establishing the validity of <b>software</b> security <b>metrics</b> remains a key challenge. A single security metric may be unable to measure all aspects of security and hence the use of multiple metrics may be needed in some situations. To assess the applicability of the metrics quantifying individual as well as multiple aspects of security, we explore the relationship between the attack surface and vulnerability density metrics. For this examination, the source code and vulnerabilities data of two releases of Apache HTTP Server have been examined. While the results show that the attack surface and vulnerability density are related, further investigations are needed to develop methods that combine them...|$|R
50|$|Tom Gilb (born 1940) is an American systems engineer, consultant, and author, {{known for}} the {{development}} of <b>software</b> <b>metrics,</b> software inspection, and evolutionary processes.|$|E
50|$|Boehm's {{research}} interests include software development process modeling, software requirements engineering, software architectures, <b>software</b> <b>metrics</b> and cost models, software engineering environments, and knowledge-based software engineering.|$|E
5000|$|S.Mertoguno, R.Paul, N.Bourbakis and CV Ramamoorthy, A Neuro-Expert {{system for}} <b>software</b> <b>metrics</b> prediction, IFAC-Int Journal Engineering Applications of AI, vol. 9, no. 2, pp. 153-161,1996 ...|$|E
40|$|In the {{software}} industry it is indisputably essential {{to control the}} quality of produced software systems in terms of capabilities for easy maintenance, reuse, portability and others {{in order to ensure}} reliability in {{the software}} development. But {{it is also clear that}} it is very difficult to achieve such a control through a ‘manual’ management of quality. There are a number of approaches for software quality assurance based typically on software quality models (e. g. ISO 9126, McCall’s, Boehm’s and Dormey’s models) and <b>software</b> quality <b>metrics</b> (e. g. LOC, McCabe's cyclomatic complexity, Halstead's metric, Object-oriented metrics) for assessment of various quality characteristics. Since the appearance of the software quality assurance as a field in the software engineering, researchers have been looking for ways to automatically assess and manage the quality of the software systems. This paper presents a conceptual design of a comprehensive solution, referring to the automation of the software quality assessment process. The designed software tool allows the definition of software quality models, based on standards, and enable the setting of matching between criteria of a software quality model and appropriate <b>software</b> quality <b>metrics.</b> The automatic definition and application of software quality models and <b>software</b> quality <b>metrics</b> is based on relevant supported by the software tool meta-models proposed in the paper...|$|R
40|$|<b>Software</b> quality <b>metrics</b> was {{extended}} to cover distributed computer systems. Emphasis is placed on studying embedded computer systems and on viewing them within a system life cycle. The hierarchy of quality factors, criteria, and metrics was maintained. New software quality factors were added, including survivability, expandability, and evolvability...|$|R
40|$|Two {{approaches}} to teaching Computer Science are compared, using {{two sets of}} assignments given to distinct CS 102 lecture sections during the same semester. The complexity and effort represented by the solutions is compared using <b>software</b> engineering <b>metrics,</b> giving {{a measure of the}} effectiveness of the two assignment sets...|$|R
