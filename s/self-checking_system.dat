11|23|Public
5000|$|The <b>self-checking</b> <b>system</b> Federal Agency for the Safety of the Food Chain (ACS) ...|$|E
30|$|The active {{suppression}} system tested had the following main components (du Plessis and Späth 2014), detecting sensors, electronic control and <b>self-checking</b> <b>system,</b> dust containers and flow nozzles. The electronic control and <b>self-checking</b> <b>system</b> {{are connected to}} the detecting sensor units and discharge assemblies, constantly monitoring the connections so that the system will always be functional when required. The sensor units are so placed as to monitor the entire tunnel area for any methane ignition or coal dust flame. These units are specially designed to react only to certain light wavelengths specific to burning methane and coal dust, thus reducing the risk of a false ignition. The discharge assemblies can be configured for the particular conditions found within a specific mine, the cross-sectional area of the tunnel, and the method of coal extraction being applied. They are also configured to ensure the correct powder distribution for successfully extinguishing an explosion is achieved.|$|E
40|$|In this paper, we {{analyze the}} {{reliability}} of self-checking circuits. A case study is presented in which a fault-tolerant system with duplicated self-checking modules is compared to the TMR version. It is shown that a duplicated <b>self-checking</b> <b>system</b> has a much higher reliability {{than that of the}} TMR counterpart. More importantly, {{the reliability of}} the selfchecking system does not drop as sharply as that of the TMR version. We also demonstrate the trade-offs between hardware complexity and error handling capability of self-checking circuits. Alternative self-checking designs where some hardware redundancies are removed with the lost of fault-secure and/or self-testing properties are also studied...|$|E
40|$|With the {{increasing}} power density in integrated systems resulting from scaling down, {{the occurrence of}} field failures due to overheating has considerably increased. Faulty operation can be prevented by on-line temperature monitoring. This paper deals with questions of on-line temperature monitoring in safety-critical systems. First the possible temperature sensors are reviewed and basic principles of <b>self-checking</b> <b>systems</b> including such sensors are detailed, then a new temperature sensor cell with extremely good parameters designed especially for DfTT applications is presented. The basic questions of integrating thermal sensors into <b>self-checking</b> <b>systems</b> are also discussed...|$|R
40|$|NUMBER OF PAGES: xxii+ 575 The authors generalize {{the concept}} of {{fail-safe}} systems and introduce {{the concept of}} strongly fail-safe systems. As an application, they present an interface that can be implemented in MOS technologies. It transforms the outputs of <b>self-checking</b> <b>systems</b> into signals adequate to drive electromechanical actuators and such that the whole <b>system</b> (<b>self-checking</b> circuit and interface) is strongly fail-safe...|$|R
40|$|ISBN: 081862275 XIn complex <b>self-checking</b> <b>systems</b> {{several blocks}} (i. e. {{functional}} blocks and checkers) are embedded. In order {{to check the}} self-checking properties of such blocks one needs to know the set of vectors they receive from the blocks feeding their inputs (i. e. the code word output spaces of the source blocks). In a complex system the computation of the output spaces by means of exhaustive simulation {{of the system is}} intractable. The paper presents a tool which performs this computation with low CPU time...|$|R
40|$|The {{design of}} {{self-checking}} systems {{is a viable}} approach for coping with critical applications, guaranteeing the on-line detection of a fault {{as soon as it}} causes an erroneous behavior. The aim of this paper is the dejnition of a design strategy for sequential circuits, starting from their description in terms of Finite State Machines. The attention is focused on a constant distance code and state encoding technique which provide, together with a traditional Berger encoding of the outputs, a <b>self-checking</b> <b>system.</b> Benchmark results and a comparison with other approaches are presented to evaluate the quality of the proposed methodology...|$|E
40|$|European food {{industries}} {{are responsible for}} the safety of the food products brought on the market. Therefore, a legal demanded food safety management system (FSMS) or <b>self-checking</b> <b>system</b> (SCS) is implemented in companies, often based on commercial quality assurance standards as ISO 22000, BRC or IFS. The Belgian government provides the possibility for food business operators to have their SCS approved by means of audits conducted by either the competent food safety authority, FASFC, or by a commercial certification body, recognised by the government. The audits are based on specifically developed guides for self-checking per sector, approved by the Belgian government. In view of evaluating the effect of the <b>self-checking</b> <b>system</b> certification on the performance of an implemented FSMS and the companies’ microbiological food safety output, this paper presents the results of an independent self-assessment conducted by eighty-two food business operators in Belgium. The study was conducted in spring/summer of 2010. The outcome of this study is discussed against national inspection results by the FASFC of the year 2009, 2010 and 2011 in Belgian food companies. The enforcement of a SCS by the Belgian government on the performance of a FSMS, their food safety output and their inspection results is less clear for food processing companies compared to the positive effect for the distribution sector. The majority of food processing companies were already certified for a voluntary system next to the legal demanded SCS. No significant difference could be identified between SCS certified and non-certified companies; large, medium or small scale companies and the sector in which they are working for food processing companies. Five clusters could be identified in the performance of a FSMS and microbiological food safety output. In overall Belgian processing companies are having a good performing FSMS and microbiological food safety output...|$|E
40|$|In {{this article}} we propose a high speed and highly {{testable}} parallel two-rail code checker, which features a compact structure and is Totally-Self-Checking or Strongly Code-Disjoint {{with respect to a}} wide set of realistic faults. The proposed checker is also particularly suitable to implement embedded two-rail code checkers, as it requires only two input codewords for fault detection. Our checker can be employed to check the correct operation of a connected functional block using the two-rail code, to implement the output two-rail code checker of "normal" checkers for un-ordered codes, or to join together the error messages produced by various checkers (possibly using different codes) present within the same <b>self-checking</b> <b>system.</b> The behavior of our checker has been verified by means of electrical level simulations (performed using HSPICE), considering both nominal values and statistical variations of electrical parameters...|$|E
40|$|Abstracr- This paper proposes the {{observer}} concept for de-signing <b>self-checking</b> distributed <b>systems,</b> i. e., systems that detect erroneous behaviors {{as soon as}} errors act at some observable output level. The approach provides a solution to build systems whose on-line behavior is checked against a formal model derived from a formal description. In other words, the actual implemen-tation is continuously checked against a reference, this reference being a formal and verified model of some adequately selected aspects of the system behavior. The corresponding methodology, the software concepts and some applications of {{the observer}} are presented. General definitions are given first that theoretically de-fine <b>self-checking</b> <b>systems</b> as systems that include and implement complete on-line validation. The basic concepts and the difficulties to implement self-checking validation are then given. In order to provide simple implementations, the previous definitions will be weakened to design quasi self-checking observers for LAN’s using a broadcast service. Three specific applications are given to illustrate the proposed approach: testing a virtual ring MAC protocol, checking the Link and Transport layers in an industrial LAN, and managing a complete OS 1 layering, from layer 2 to layer 6 in an open system architecture. Index Temsaistributed systems, run-time validation, testing, verification, Petri nets based models, performance measurements, layered distributed architectures, formal description techniques. I...|$|R
40|$|ISBN: 0080375359 Presents briefly {{the theory}} of {{generalized}} fail-safe systems which includes new, more general definitions, construction conditions and basic properties for fail-safe systems. Then, {{in order to take}} into account the problem of undetectable faults, we define strongly fail-safe circuits who achieve the totally fail-safe goal. As an application the authors propose a fail-safe integrated interface which transforms the outputs of <b>self-checking</b> <b>systems</b> into signal adequate to drive electromechanical actuators and such that the whole system, self checking processing part and interface, implemented in VLSI is strongly fail-safe. Therefore this system can be used for safe drive of complex critical processes...|$|R
40|$|Delay-insensitive or unordered codes {{may be used}} to {{construct}} both robust asynchronous circuits and <b>self-checking</b> <b>systems.</b> The redundant nature of the coding scheme also provides the possibility of a balanced implementation, where the power dissipated is independent of the input data. We demonstrate how these characteristics may be exploited {{to construct}} smart card functions that are resistant to both sidechannel and fault injection attacks. We also describe how the removal of the clock secures a potential point of attack and enables additional fine-grain timing countermeasures to be introduced. Preliminary results are presented for a smart card test chip containing multiple implementations of a 16 -bit micro-controller, a smart card UART and a Montgomery modular exponentiator...|$|R
40|$|Abstract-Self-checking {{circuits}} {{can detect}} {{the presence of}} both transient and permanent faults. A self-checking circuit consists of a functional circuit, which produces encoded output vectors, and a checker, which checks the output vectors. The checker {{has the ability to}} expose its own faults as well. The functional circuit can be either combinational or sequential. A <b>self-checking</b> <b>system</b> consists of an interconnection of self-checking circuits. The advantage of such a system is that errors can be caught as soon as they occur; thus, data contamination is prevented. Although much effort has been concentrated on the design of self-checking checkers by previous researchers, very few re-sults have been presented for the design of self-checking func-tional circuits. In this paper, we explore methods for the cost-effective design of combinational and sequential self-checking functional circuits and checkers. The area overhead for all pro-posed design alternatives is studied in detail. I...|$|E
40|$|The final checker of a <b>self-checking</b> <b>system</b> is an {{embedded}} double-rail checker (the partial checkers have {{in general}} two outputs). The self-testing or the strongly code disjoint property of this embedded checker can be lost {{if it is}} not exercised by an appropriate set of inputs. If some partial checkers are strongly code disjoint, then some undetectable faults can modify the input/output mapping of these checkers. This can compromise the exercising of the final double-rail checker especially if this modification leads to the reduction of the partial checker's output code space. In that case it will be required that the partial strongly code disjoint checkers must also be strongly fault secure. In this work we show that the (two-output) strongly code disjoint checkers do not allow such reduction of their output code space and on this basis we show that the strongly fault secure property is not necessary. We also give some techniques that ensure exercising the final checker...|$|E
40|$|In this paper, {{we propose}} a compact, high-speed, and highly {{testable}} parallel two-rail code checker, particularly suitable to implementing embedded checkers. In fact, it requires only two input codewords {{to satisfy the}} Totally-Self-Checking or Strongly Code-Disjoint property {{with respect to a}} wide set of realistic internal faults. Our checker can be employed to check the correct operation of a connected functional block using the two-rail code, to implement the output two-rail code checker of “normal” checkers for unordered codes, or to join together the error messages produced by various checkers (possibly using different codes) present within the same <b>self-checking</b> <b>system.</b> The behavior of our checker has been verified by means of electrical level simulations (performed using HSPICE), considering both nominal values and statistical variations of electrical parameters. We also propose a possible modification to our checker internal structure that makes it able to provide an output error indication remaining latched until the application of a proper reset signal. Depending on the considered application and recovery technique to be employed upon the generation of an error indication at the checker output, one proposed solution or the other may be preferable...|$|E
40|$|ISBN: 0818607033 The {{necessity}} to consider fault models representing real faults occurring in integrated circuits led recently to {{the definitions of}} low-level fault hypotheses such as transistors stuck-on, stuck-open, and cuts of metallization. It is then natural to base the design of <b>self-checking</b> <b>systems</b> on this type of fault hypotheses. General layout rules are derived {{for the design of}} strongly fault secure (SFS) NMOS circuits (i. e. for the largest class of circuits that achieve the totally self-checking goal). Those rules are derived in order to detect unidirectional errors, which have been recognized as a large category of errors appearing in integrated circuits. Examples of the application of these layout rules are given for the design of PLAs, ROMs, and ALUs...|$|R
40|$|Device {{representation}} and reasoning with affective relations occupies {{a middle ground}} between classical model-based diagnosis and heuristic expert systems. A device is modeled by specifying a set of diagnostically motivated affective relations among its components. Reasoning is then performed {{by a set of}} inference rules that reason with the model to propagate symptoms through the components. Representation and reasoning with affective relations extends several benefits of classical model-based diagnosis [...] -the model as a unifying framework for knowledge, methodical coverage of the domain, and diagnostic reasoning based on equipment design and causality [...] -to a class of problems where classical model-based diagnosis cannot be applied because the required models cannot be reasonably obtained or represented. Our work evolved from our redesign of a heuristic expert system for monitoring long-distance telephone switching systems, and is applicable to highly complex <b>self-checking</b> <b>systems.</b> 1 I [...] ...|$|R
40|$|In <b>self-checking</b> <b>systems,</b> {{checkers}} {{usually do}} not receive all code words during normal operation. Missing code words may prevent a checker from achieving the totally self-checking property. The paper presents a novel approach {{to the design of}} embedded parity and two-rail checkers that allows a checker to receive all code words irrespective of the set of code words that is provided by the functional circuit. A checker gets all code words by an LFSR {{while at the same time}} it monitors the output of the functional circuit. Additionally, the LFSR is able to capture the error patterns of noncode words. Captured error patterns will be modified since they will cycle through the LFSR. Thus, noncode words that are not detected due to undetected checker faults can be detected in later instances of time. The proposed method can be extended to the design of checkers for linear codes...|$|R
40|$|Both virtual and {{physical}} manipulatives are reported as effective learning tools when used with {{different groups of}} students {{in a variety of}} contexts to learn mathematical content. The use of multiple representations and the flexibility to translate among those representational forms facilitates students 2 ̆ 7 learning and has the potential to deepen their understanding. This classroom project involved two groups of third-grade students in a week-long unit focusing on algebraic relationships. The purpose of the unit was to engage students with different algebraic models and encourage students to use informal strategies to represent their relational thinking. The paper highlights examples of these student representations as evidence of the children 2 ̆ 7 s developing algebraic thinking. Result from the pre- and post-test measures showed that students in the physical and virtual manipulative environments gained significantly in achievement and showed flexibility in translating and representing their understanding in multiple representations: manipulative model, pictorial, numeric and word problems. The researchers recorded field notes, interviewed students, and videotaped class sessions in order to identify unique features of the learning environments. The virtual environment had unique features that promoted student thinking such as: a) explicit linking of visual and symbolic modes; b) guided step-by-step support in algorithmic processes; and c) immediate feedback and <b>self-checking</b> <b>system.</b> In the physical environment, some unique features were: a) tactile features; b) opportunities for invented strategies; and c) mental mathematics. These results show that although the different manipulative models had different features, both the physical and virtual environments were effective in supporting students 2 ̆ 7 learning and encouraging relational thinking and algebraic reasoning...|$|E
40|$|The Belgian {{food safety}} {{authority}} has provided incentives for food business operators to set-up a certified <b>self-checking</b> <b>system</b> (SCS), based upon good practices and HACCP principles. A selection of food processing companies in Belgium {{was invited to}} take part in a self-assessment study to evaluate the effect of SCS certification on the performance of an implemented food safety management system (FSMS) and on company’s microbiological food safety output according to their sector and company size and to compare the added value of SCS against voluntary standard certification. Results revealed that the majority of food processing companies (90 %) were already certified for a voluntary standard such as BRC or IFS prior to or next to the Belgian SCS certification (50 %). Although five clusters could be identified among the eighty-two participating companies in the performance profiles of their food safety management system and microbiological food safety output, overall no significant difference could be identified between SCS certified and non-certified SCS food processing companies. However, assurance activities (i. e. set-up of sampling plan, validation and verification of the FSMS) were elaborated at a more advanced, tailored level in SCS certified companies. No significant differences were found according to company size, but depending on the sector more robust FSMS could be identified (e. g. animal products processing sector). The benefits of the widespread presence of a third party certified food safety management system (whether voluntary standard or national SCS) as a basis for governing food safety are also reflected in the favourable inspection results obtained by Belgian food safety authority (76. 90 %e 78. 71 % compliance in years 2009 e 2011; 12 823 SCS certified companies being visited) at the processing level. Whereas higher non-compliance in inspection results is noted (47. 55 e 52. 45 % compliance in years 2009 e 2011; 4 415 SCS certified companies being visited) in the distribution sector, encompassing a large amount of small food service operations and retail outlets. The introduction of certified SCS is still exceptional in that sector (4. 11 % in 2011) and the introduction of voluntary standards is less common due to lack of incentives, capacity and resources. Thus, there are indications that a certification system based on audits is an appropriate approach in pro-actively governing food safety and supporting the implementation of control and assurance activities at advanced level, hence increasing the robustness of the food safety management systems as a basis for good microbiological food safety output...|$|E
40|$|During {{vibration}} test of space hardware safety measures are never enough. In {{addition to all}} the <b>self-check,</b> <b>system</b> identification and drive limiting measures, it is customary for engineers also to define a notching profile. With this strategy one or more control (or measurement) channels have individual frequency ranges where each response must not exceed a predetermined level. Unfortunately, when many channels are ???active??? it {{is often the case}} that, for excess of safety, the target is no inherent of the control loop for the response to overshoots and they are not able to accommodate specific aerospace applications in which there are highly restrictive specifications. This paper presents an approach to automate and optimize the definition of a notch profile. The method is developed in a Matlab/Simulink environment which replicates the LMS Sine Control software and is based on a model of the structure under test...|$|R
40|$|ISSN: 0018 - 9340 Strongly language-disjoint (SLD) {{checkers}} are to sequential systems what strongly code-disjoint checkers are to combinatorial systems. SLD checkers are {{the largest}} class of checkers with which a functional system can achieve the totally self-checking goal. <b>Self-checking</b> sequential <b>systems</b> are first addressed, and formal definitions of SLD checkers are given. The design of SLD checkers based on regular combinatorial self-checking components is then considered...|$|R
40|$|This paper {{proposes a}} {{distributed}} two-rail checker architecture which is specifically targeted to <b>self-checking</b> bus-based <b>systems.</b> The architecture {{makes use of}} a single bus line to provide error indication. With respect to conventional two-rail checkers additional diagnosing capabilities are provided. The checker is totally-self-checking with respect to stuck-at faults. It features also good self-testing properties with respect to parametric faults, such as bridgings and delay faults...|$|R
40|$|This paper defines {{strongly}} language disjoint (SLD) checkers. SLD checkers are to sequential systems what strongly code disjoint checkers are to combinational systems. SLD checkers are {{the largest}} class of checkers with which a functional system may achieve the TSC goal. <b>Self-checking</b> sequential <b>systems</b> are first addressed, then formal definitions of SLD checkers are given. The next point is the design of SLD checkers based on regular combinational self-checking components...|$|R
40|$|Special {{requirements}} {{are needed for}} highly flexible, multi station laser processing. Linkage of several lasers with various handling stations causes different kinds of tasks to be solved {{in the fields of}} optics, electro mechanics, laser technology and opto electronics. A new design for flexible high power Co 2 laser beam handling has been developed, including <b>self-checking</b> security <b>systems,</b> laser beam diagnostics, easily adjustable high power beam bending mirrors, high precision motorized mechanics and computer controlled user guidance...|$|R
40|$|When {{designing}} Totally <b>Self-Checking</b> (TSC) <b>systems</b> {{the user}} imposes a functional encoding methodology and a constrained synthesis for guaranteeing that each fault produces a detectable error {{with respect to}} the applied coding. Both aspects, functional methodology and synthesis constraints, are not always supported by automatic tools thus possibly leading to the presence of undetected faults. The paper presents a classification of redundant faults with respect to TSC circuits (TSC redundant faults), proposing a methodology for their removal to achieve a complete fault coverage...|$|R
40|$|We {{present an}} {{innovative}} solution to design of selfchecking systems implementing arithmetic algorithms. Rather than substituting <b>self-checking</b> units in <b>system</b> synthesized independently of self-checking requirements, we introduce self-checking in high-level synthesis as a requirement already for scheduling the DFG. Rules granting error detection allow optimum partitioning of the DFG; minimum-latency, resource-constrained scheduling is {{performed with the}} support of such partitioning so as to optimize the number of checkers {{as well as that of}} other resources...|$|R
40|$|Several {{researchers}} have recently implemented on-line testability {{in the form}} of duplication-based <b>self-checking</b> digital <b>system</b> design, early in the design process. We consider on-line testability within the optimization phase of iterative, cost function-driven high-level synthesis, such that self-checking resources are inserted automatically without any modification of the source behavioral HDL code. This is enabled by introducing a metric for on-line testability. A new variation of duplication (namely inversion testing) is also proposed and used, providing the system with an additional degree of freedom for minimizing hardware overheads associated with test resource insertion. Considering on-line testability within the synthesis process facilitates fast and painless design space exploration, resulting in a versatile high-level synthesis process, capable of producing alternative realizations according to the designer’s directions, for alternative target technologies. Finally, the fault escape probability of the overall scheme is discussed theoretically and evaluated experimentally...|$|R
5000|$|Some of the {{products}} or potential products of International Automated Systems include an automated retail self-service checkout system and management software for retail establishments. A demonstration project for this was a grocery store called U-Check that was built and run in Salem, Utah. Portions of International Automated Systems' technology have been licensed to Optimal Robotics for an undisclosed amount of money. However, Optimal Robotics Corporation previously had designed and implemented their own <b>self-check</b> out <b>system,</b> which they reported to have developed completely independently of International Automated Systems. A press release by Optimal Robotics on January 24, 2004 states: [...] "Optimal Robotics Corp. (NASDAQ: OPMR), today announced that it has entered into a settlement agreement with International Automated Systems, Inc. (IAS), which brings to a close the patent lawsuit between the parties. In accordance with the agreement, IAS will receive a sum that is {{not considered to be}} material to Optimal." ...|$|R
40|$|Mission-critical {{applications}} {{require that}} any failure {{that may lead}} to erroneous behavior and computation is detected and signaled as soon as possible in order not to jeopardize the entire <b>system.</b> Totally <b>self-checking</b> (TSC) <b>systems</b> are designed to be able to autonomously detect faults when they occur during normal circuit operation. Based on the adopted TSC design strategy and the goal pursued during circuit realization (e. g., area minimization), the circuit, although TSC, may not promptly detect the fault depending on the actual number of input configurations that serve as test vectors for each fault in the network. If such a number is limited, although TSC it may be improbable that the fault is detected once it occurs, causing detection and aliasing problems. The paper presents a design methodology, based on a circuit re-design approach and an evaluation function, for improving a TSC circuit promptness in detecting faults' occurrence, a property we will refer to as TSC quality...|$|R
40|$|This paper {{presents}} a complete methodology {{to design a}} totally <b>self-checking</b> (TSC) sequential <b>system</b> based on the generic architecture of finite-state machine and data path (FSMD), {{such as the one}} deriving from VHDL specifications. The control part of the system is designed to be self-checking by adopting a state assignment providing a constant Hamming distance between each pair of binary codes. The design of the data path is based on both classical methodologies (e. g., parity, Berger code) and ad hoc strategies (e. g., multiplexer cycle) suited for the specific circuit structure. Self-checking properties and costs are evaluated on a set of benchmark FSM's and on a number of VHDL circuits...|$|R
50|$|Testing {{found the}} {{significance}} and difficulty in measuring actual engine thrust, leading to further tests using improved intakes and instrumentation, Ultimately, the engines {{proved to be}} far less problematic {{that may have been}} expected considering the experimental nature of the aircraft and its powerplants; the triplex auto-stabiliser was also discovered to be easy to locate reported faults upon, in part due to the <b>system's</b> <b>self-checking</b> nature. According to a Ministry of Aviation report, the SC.1 was determined to have been an effective research vehicle when operated within the limits imposed by its small size and restricted capacity; it was found that a larger aircraft would be necessary for more extensive instrument flight and guidance equipment assessment flights however.|$|R
40|$|Abstract — Research {{reactors}} {{are important}} neutron sources {{for research and}} radioisotope production purposes. The common problem of these facilities is their obsolete instrumentation and control (I&C) systems. The spare parts are not still available as their production is discontinued; therefore, the maintenance is a difficult problem. A major attitude of aging management of research reactors is modernization of the old age I&C systems. In this work, a modern control rod driving system for TRR control rod mechanisms is designed and constructed using {{state of the art}} electronic technology. Unlike the original analog <b>system,</b> <b>self-check</b> capability and essential interlocks are implemented. The system is cost effective as FPGA technology is utilized. Future upgrades are possible as FPGA is a reprogrammable device. The proposed equipment is recommended to be installed in other nuclear research reactors, which suffer from aged I&C systems...|$|R
40|$|System {{requirements}} often express some of {{the behavior}} of a domain model in the form of policies, constraints, invariants, and rules. Although an object-oriented approach helps with the design of this model, the implementation is often cluttered with details necessary to enforce the model's policies and constraints. As a result, the code is more prone to error and is more difficult to maintain since it tends to obscure the model's fundamental structure. R++, a rule-based extension to C++, allows developers to express policies and constraints more clearly in the form of path-based rules. Since the rule evaluation mechanism is automatic, R++ rules enable developers to focus on what to do when a rule evaluates to TRUE, rather than on how and when these evaluations should be carried out. It is the absence of this mechanism in the source code, and the use of these rules in an object-oriented implementation that makes the code easier to maintain and makes for a clearer reflection of the underlying model. Category: Experience Report Contact: Anil Mishra, room 2 C- 053 AT&T Network & Computing Services 480 Red Hill Road Middletown, NJ 07748 email: anil@hrmaple. hr. att. com phone: (908) 615 - 4552 fax: (908) 615 - 5579 Note to Reviewers The lessons presented in this report were derived from our experience in applying R++ to a large telephone-switch monitoring application. The key points in this report are not about the application but rather about how path-based rules can help in object-oriented designs. Thus, to make the lessons more accessible to a general audience, we have generalized the ideas and eliminated domain-specific jargon. For those who wish to know more about this application, its basic activity is the analysis of alarms from a largely <b>self-checking</b> switching <b>system</b> [...] . ...|$|R

