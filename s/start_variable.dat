6|284|Public
2500|$|... is the <b>start</b> <b>variable</b> (or start symbol), used to {{represent}} the whole sentence (or program). It must be an element of [...]|$|E
5000|$|... is the <b>start</b> <b>variable</b> (or start symbol), used to {{represent}} the whole sentence (or program).|$|E
5000|$|... is the <b>start</b> <b>variable</b> (or start symbol), used to {{represent}} the whole sentence (or program). It must be an element of [...]|$|E
50|$|An {{initialization}} vector (IV) or <b>starting</b> <b>variable</b> (SV) is {{a block of}} bits {{that is used by}} several modes to randomize the encryption and hence to produce distinct ciphertexts even if the same plaintext is encrypted multiple times, without the need for a slower re-keying process.|$|R
40|$|This paper {{presents}} a comparative {{study on the}} starting performance of three phase wound-rotor induction motors under different methods of starting. These methods are on line direct <b>starting,</b> <b>variable</b> rotor resistance <b>starting</b> and double feed starting. In the double feed starting, the rotor winding {{is connected in parallel}} with the stator winding across the supply for a predetermined short period. By this connection, the motor produces an extremely high starting torque. For carrying out the investigations sought, a rigorous state space mathematical model has been developed and simulated. The effect of torsional dynamics has been taken into considerations. © 1998 IEEE. IEE...|$|R
50|$|In cryptography, an {{initialization}} vector (IV) or <b>starting</b> <b>variable</b> (SV) is a fixed-size input to a cryptographic primitive that is typically {{required to be}} random or pseudorandom. Randomization is crucial for encryption schemes to achieve semantic security, a property whereby repeated usage of the scheme under the same key does not allow an attacker to infer relationships between segments of the encrypted message. For block ciphers, {{the use of an}} IV is described by the modes of operation. Randomization is also required for other primitives, such as universal hash functions and message authentication codes based thereon.|$|R
50|$|Designing a {{sequence}} of DNA in GenoCAD is much like creating a derivation in a context free grammar. The user starts with the <b>start</b> <b>variable</b> and repeatedly selects a variable and a substitution for it until only terminals are left.|$|E
5000|$|A context free grammar can {{be defined}} by its terminals, variables, <b>start</b> <b>variable</b> and {{substitution}} rules. [...] In GenoCAD, the terminals of the grammar are sequences of DNA that perform a particular biological purpose (e.g. a promoter). The variables are less homogeneous: they can represent longer sequences that have multiple functions or can represent a section of DNA that can contain one of multiple different sequences of DNA but perform the same function (e.g. a variable represents the set of promoters). GenoCAD includes built in substitution rules {{to ensure that the}} DNA sequence is biologically viable. Users can also define their own sets of rules for other purposes.|$|E
40|$|Wind power varies over time, mainly {{under the}} {{influence}} of meteorological fluctuations. The variations occur on all time scales. Understanding these variations and their predictability is of key importance for the integration and optimal utilization of wind in the power system. There are two major attributes of variable generation that notably impact the participation on power exchanges: Variability (the output of variable generation changes and resulting in fluctuations in the plant output on all time scales) and Uncertainty (the magnitude and timing of variable generation output is less predictable, wind power output has low levels of predictability). Because of these variability and uncertainty wind plants cannot participate to electricity market, especially to power exchanges. For this purpose, the paper presents techno-economic analysis of work of wind plants together with combined cycle gas turbine (CCGT) plant as support for offering continues power to electricity market. A model of wind farms and CCGT plant was developed in program PLEXOS based on real hourly input data and all characteristics of CCGT with especial analysis of techno-economic characteristics of different types of starts and stops of the plant. The Model analyzes the followings: costs of different start-stop characteristics (hot, warm, cold start-ups and shutdowns) and part load performance of CCGT. Besides the costs, the technical restrictions were considered such as start-up time depending on outage duration, minimum operation time, and minimum load or peaking capability. For calculation purposes, the following parameters are necessary to know {{in order to be able}} to economically evaluate changes in the start-up process: ramp up and down rate, time of start time reduction, fuel mass flow during start, electricity production during <b>start,</b> <b>variable</b> cost of start-up process, cost and charges for life time consumption for each start and start type, remuneration during start up time regarding expected or unexpected starts, the cost and revenues for balancing energy (important when participating in electricity market), and the cost or revenues for CO 2 -certificates. Main motivation for this analysis is to investigate possibilities to participate on power exchanges by offering continues guarantied power from wind plants by backing-up them with CCGT power plant...|$|E
50|$|<b>Start</b> with a <b>variable</b> N, set to a {{value of}} 1.|$|R
40|$|Abstract An {{arbitrary}} <b>starting</b> <b>variable</b> dimension {{algorithm is}} developed for computing an integer {{point of a}} polytope, P = {x | Ax ≤ b}, which satisfies that each row of A has at most one positive entry. The algorithm is derived from an integer labelling rule and a triangulation of the space. It consists of two phases, one of which forms a variable dimension algorithm {{and the other a}} full-dimensional pivoting procedure. Starting at an arbitrary integer point, the algorithm interchanges from one phase to the other, if necessary, and follows a finite simplicial path that either leads to an integer point of the polytope or proves that no such point exists...|$|R
5000|$|Dykstra's {{algorithm}} is {{of a similar}} form, but uses additional auxiliary <b>variables.</b> <b>Start</b> with [...] and update by ...|$|R
5000|$|<b>Start</b> with a <b>variable</b> N, set it to a {{value of}} 1 and repeat count minus 1 times: ...|$|R
3000|$|... [20]). Another item to note is that {{throughout}} these studies only one feature selection technique was tested with minimal overlap; therefore, future work should look to test multiple feature selection techniques {{in order to}} find which one works the best with medical data. Classifiers that are employed for this line of research should be able to make decisions as a physician would do, that is, {{be able to look at}} a patient’s medical attributes and make subjective decisions. Thus, there are three main concerns for making these predictions (<b>starting</b> <b>variables,</b> feature selection, and learning algorithms) and future research should be to test as many combinations of these three to find the best one that can make the most accurate and efficient predictions.|$|R
3000|$|In the solving mode of PDSAT for X̃_best {{found during}} {{predictive}} function minimization all 2 ^| X̃_best| [...] assignments of variables from X̃_best are generated. PDSAT solves all corresponding SAT instances. To compare obtained time estimations with real solving time we used PDSAT to solve several cryptanalysis problems for Bivium and Grain with several known guessing bits. Below {{we use the}} notation BiviumK (GrainK) to denote the cryptanalysis of Bivium (Grain) with known K guessing bits. In the role of guessing bits in all cases we chose known values of K <b>starting</b> <b>variables</b> encoding the last K cells of the second shift register. We solved 3 instances {{for each of the}} following problems: Bivium 16, Bivium 14, Bivium 12, Grain 44, Grain 42 and Grain 40.|$|R
50|$|The secret <b>variable</b> <b>start</b> {{cell and}} first column ensure a unique {{transposition}} for each message, making multiple anagramming very difficult.|$|R
5000|$|... {{with the}} same set of {{terminal}} symbols, thesame <b>start</b> symbol, with <b>variables</b> some (not all) types,and with a production rule ...|$|R
3000|$|We now {{describe}} the typical {{interactions between the}} state <b>variables,</b> <b>starting</b> from {{a low level of}} Ca (i.e., close to [...]...|$|R
50|$|The {{algorithm}} {{is very similar}} to the Lucas-Lehmer test, but with a <b>variable</b> <b>starting</b> point depending on the value of k.|$|R
40|$|Determining {{whether there}} is an integer point in an n-dimensional simplex is an NPcomplete problem. In this paper, a new {{arbitrary}} <b>starting</b> <b>variable</b> dimension algorithm is developed for computing an integer point of an n-dimensional simplex. The algorithm is derived from an introduction of an integer labeling rule and an application of a triangulation of the space and is composed of two phases, one of which forms a variable dimension algorithm and the other a fulldimension pivoting procedure. Starting at an arbitrary integer point, the algorithm interchanges from one phase to the other if necessary and follows a finite simplicial path that either leads to an integer point of the simplex or proves that no such points exist. An advantage of the algorithm is that all the existing superior triangulations can be its underlying triangulations without any modification...|$|R
50|$|The age {{of onset}} is <b>variable</b> <b>starting</b> in {{children}} and adolescence but can also affect individuals of both sexes indistinctly at any age of their lives.|$|R
30|$|We {{perform a}} first {{standard}} spatial WENO {{reconstruction of the}} conserved <b>variables</b> <b>starting</b> from the cell averages Q̅_ijk^n. This allows to obtain a reconstructed polynomial w _h(x,y,z,t^n) in conserved variables valid within each cell.|$|R
40|$|We {{study in}} this thesis three well known global {{constraint}}s. The All-Different constraint restricts a set of variables to be assigned to distinct values. The global cardinality constraint (GCC) ensures that a value v is assigned to at least l v variables and to at most u v variables among a set of given variables where l v and u v are non-negative integers such that l v ≤ u v. The Inter-Distance constraint ensures that all variables, among a set of variables x 1,..., x n, are pairwise distant from p, i. e. | x i - x j | ≥ p for all i ≠ j. The All-Different constraint, the GCC, and the Inter-Distance constraint are largely used in scheduling problems. For instance, in scheduling problems where tasks with unit processing time compete for a single resource, we have an All-Different constraint on the <b>starting</b> time <b>variables.</b> When there are k resources, we have a GCC with l v = 0 and u v = k over all <b>starting</b> time <b>variables.</b> Finally, if tasks have processing time t and compete for a single resource, we have an Inter-Distance constraint with p = t over all <b>starting</b> time <b>variables.</b> We present new propagators for the All-Different constraint, the GCC, and the Inter-Distance constraint i. e., new filtering algorithms that reduce the search space according to these constraints. For a given consistency, our propagators outperform previous propagators both in practice and in theory. The gains in performance are achieved through judicious use of advanced data structures combined with novel results on the structural properties of the constraints...|$|R
30|$|During the {{cryptanalysis}} of Bivium and Grain in {{the role}} of X̃_start we used the set formed by the variables encoding the cells of registers of the generator considered {{at the end of the}} initialization phase. Further we refer to these <b>variables</b> as <b>starting</b> <b>variables.</b> Thus | X̃_start| = 177 in case of Bivium, and | X̃_start| = 160 in case of Grain. When computing predictive function values PDSAT used random samples of size N= 10 ^ 5. It was launched for 1 day using 5 computing nodes (160 CPU cores in total) within the computing cluster “Academician V.M.Matrosov”. So there was 1 leader process and 159 computing processes. Time estimations obtained are F_best= 3.769 × 10 ^ 10 for Bivium and F_best= 4.368 × 10 ^ 20 seconds for Grain. Corresponding decomposition set X̃_best for Bivium is marked with gray on Fig.  3 (50 variables) and the decomposition set for Grain is marked with gray on Fig.  4 (69 variables). Interesting fact is that X̃_best for Grain contains only variables corresponding to the LFSR cells.|$|R
50|$|The alpine {{environment}} is variable {{according to the}} availability of water. It <b>starts</b> at a <b>variable</b> altitude from 1100 m in dry areas to 1400 to 1800 m in wetter areas. Heaths and low-growing willows are common, along with forbs.|$|R
50|$|Segawa Syndrome (SS) {{also known}} as Dopamine-responsive {{dystonia}} (DRD), Segawa's disease, Segawa's dystonia and hereditary progressive dystonia with diurnal fluctuation, is a genetic movement disorder which usually manifests itself during early childhood at around ages 5-8 years (<b>variable</b> <b>start</b> age).|$|R
40|$|A {{stepwise}} canonical procedure, including tvo selection indices for variable deletion and a {{rule for}} stopping the iterative procedure, was derived {{as a method}} of selecting core 'variables from predictors and criteria. The procedure was applied to simulated data varying in the degree of built in structures in population correlation matrices, number of variables, and number of cases. A double cross-validation method was used to test the stability of the canonical correlations. The magnitudes and shrinkage of the largest and the mean significant canonical correlations were compared by means of MANOVA across the different decision rules, built in correlation structures. number of <b>starting</b> <b>variables,</b> and number of cases. (Author) Documents acquired by E'RIC include many informal unpublished Materials not available from other sources. ERIC makes every effort to obtain the best copy available. nevertheless, items of marginal * reproducibility are often encountered and this affects the quality * * of the microciche and hardcopy reproductions ERIC makes available * * via the ERI [...] . Document Reproduction Service (EDPS). FDRS is not * * responsible for the quality of the original document. Reproductions * * supplied by EDFS are the best that can be made from the original. ...|$|R
40|$|This thesis set out {{to build}} a program in MATLAB that is {{designed}} to find an optimal power flow system on that minimizes the cost of generation while satisfying prescribed voltage constraints. Current optimal power flow solutions generally have three main issues with optimal power flow and this is the direction of most research in the area. The first issue is that the systems are not able to robustly provide a solution to the given information and are unable to find a stable solution. The second issue is that the optimal power flow may only find a local minimum solution rather than a global minimum {{due to the nature of}} the optimization routines. The third and final issue is that the solve time needs to be kept to a minimum to ensure usability in real world systems. The system was built in MATLAB using the Optimization Toolbox, and specifically the fmincon function. The system accepted some basic input variables including a formatted numerical description of the power network, and then performed some calculations to prepare the system for solving. The system was then solved according to Economic Dispatch which determined that the sum of generation should equal the sum of the load. Losses were ignored and new <b>starting</b> <b>variables</b> for the generators where determined. These <b>starting</b> <b>variables</b> were passed into a Gauss-Seidel iterative method which solved the new bus voltages and reactive generation for each of the generators. The objective function for fmincon was set to minimise the cost of the generators, and the constraint function was set to the Gauss-Seidel iteration. Buses were given lower and upper constraints and generator constraints were set from the minimum and maximum given in initialization. Fmincon was then called and solved for minimum cost according to stable constraints. The system was able to solve this problem the optimal power flow and provide an appropriate solution. However it was not determined whether the solution was a global minimum, or simply a local one. Stability was determined by the generators and buses being within their limits and a voltage stability index was determined. Different starting positions determined that using the economic dispatch provided the cheapest solution and produced a stable outcome. This thesis provides strong starting point for further expansion into the field of optimal power flow. The program provides a solution and is set to certain stability constraints. Adding new constraints, or increasing the size of the system is easily possible by the user...|$|R
3000|$|The {{second step}} of the {{algorithm}} performs a Newton method on the H <b>variable.</b> <b>Starting</b> from the salary-hour combinations derived in Step 1, I solve for the salary-hour combinations that satisfy (i) the first-order conditions for local maxima in Equation (1): [...]...|$|R
50|$|Note {{that the}} locus of peak {{efficiency}} exhibits a slight kink in its upward trend. This {{is due to the}} choking-up of the compressor as speed increases, with the variable stators closed-off. The trend line resumes once the <b>variables</b> <b>start</b> to move open.|$|R
50|$|It has rich {{built-in}} functionality {{for easy}} scripting and {{provides access to}} ADSI, ADO, WMI, etc. The language {{can be used to}} display information, set environment <b>variables,</b> <b>start</b> programs, connect to network drives, read or edit the registry, change the current drive and directory, and much more.|$|R
2500|$|Also in May 2006, IBM {{introduced}} subcapacity {{settings to}} its high end model. For {{the first time}} mainframe processors now allow small, smooth steps through the entire processor range. This feature allows IBM's customers to control their software costs precisely and to pay for only exactly as much capacity as they need without harsh price discontinuities at certain capacity increments. (IBM <b>started</b> offering <b>variable</b> subcapacity software pricing in 2000, and some other software vendors now offer similar terms, so hardware subcapacity settings are of primary interest when running so-called full capacity software products.) ...|$|R
5000|$|Rules and {{regulations}} for races differ {{from one to}} another but the overall feel of the races are the same. The number of opponents can be as high 7 or even as low as 1 (Duel Modes), although the usual number of opponents is 7 for most races. Before starting an event or race one may choose if they would like any support items, such as the auto-rocket start, over-limit <b>start</b> and <b>variable</b> nitrous charges. Also, when choosing a car, the player can change its appearance and drift settings, these include: ...|$|R
40|$|AbstractIn {{this paper}} a fourth order <b>starting</b> {{algorithm}} for <b>variable</b> step implicit Runge–Kutta methods is developed using {{the approach of}} equistage approximation proposed in (IMA J. Numer. Anal. 22 (2002) 153). This starting algorithm is used {{in combination with the}} well known RADAU 5 code and numerical results are provided...|$|R
40|$|Batch {{tests of}} benzene {{degradation}} were performed {{in this work}} at relatively high biomass level (220 - 270 mgX/L) and <b>variable</b> <b>starting</b> benzene concentration (30 < S 0 < 200 mgS/L), and the experimental data were then {{used to calculate the}} volumetric and specific rates of biomass production and substrate consumption...|$|R
5000|$|... (The [...] {{declares}} [...] as {{a function}} that may call itself.) The function f, which adds sum's argument to {{the sum of the}} numbers less than the argument, is a local function. Within the definition of f, n is a free <b>variable.</b> <b>Start</b> by converting the free variable to an argument: ...|$|R
