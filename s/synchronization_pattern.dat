60|243|Public
25|$|Uncompressed digital {{component}} signals are transmitted. Data is encoded in NRZI format, and a linear feedback shift register {{is used to}} scramble the data to reduce the likelihood that long strings of zeroes or ones will be present on the interface. The interface is self-synchronizing and self-clocking. Framing is done by detection of a special <b>synchronization</b> <b>pattern,</b> which appears on the (unscrambled) serial digital signal to be a sequence of ten ones followed by twenty zeroes (twenty ones followed by forty zeroes in HD); this bit pattern is not legal anywhere else within the data payload.|$|E
5000|$|<b>Synchronization</b> <b>pattern</b> {{used when}} {{starting}} the SBA bus after an idle period.|$|E
50|$|A {{receiver}} {{that already}} knows {{the time to}} within a few seconds can synchronize to the fixed <b>synchronization</b> <b>pattern,</b> {{even when it is}} unable to distinguish individual time code bits.|$|E
40|$|In this study, {{synchronization}} phenomena observed {{from two}} inductively coupled simultaneous oscillators are reported. Since inductively coupled oscillators can exhibit both in-phase and anti-phase synchronizations, the circuit generate various <b>synchronization</b> <b>patterns.</b> Computer simulations con-firm that 9 different <b>synchronization</b> <b>patterns</b> {{appear in the}} circuits. 1...|$|R
5000|$|Dynamics of networks, <b>synchronization</b> <b>patterns</b> and Chimera-states ...|$|R
5000|$|... #Subtitle level 3: Advanced Branching and <b>Synchronization</b> <b>Patterns</b> ...|$|R
50|$|The <b>synchronization</b> <b>pattern</b> of {{the methods}} are defined by joins patterns, which {{describes}} {{what happens when a}} set of channels are invoked. For example, what happens when Send and Retrieve are called together can be different than Send and Queue.|$|E
5000|$|... ‡ If K.28.7 {{is allowed}} in the actual coding, a more complex {{definition}} of the <b>synchronization</b> <b>pattern</b> than suggested by † needs to be used, as a combination of K.28.7 with several other codes forms a false misaligned comma symbol overlapping the two codes. A sequence of multiple K.28.7 codes is not allowable in any case, as this would result in undetectable misaligned comma symbols.|$|E
50|$|The frame <b>synchronization</b> <b>pattern</b> is a known binary pattern which repeats at {{a regular}} {{interval}} within the PCM stream. The frame synchronizer recognizes this pattern and aligns the data into minor frames or sub-frames. Typically the frame sync pattern {{is followed by}} a counter (sub-frame ID) which dictates which minor or sub-frame in the series is being transmitted. This becomes increasingly important in the decommutation stage where all data is deciphered as to what attribute was sampled. Different commutations require a constant awareness of which section of the major frame is being decoded.|$|E
30|$|Must {{have several}} bots {{infected}} simultaneously to capture <b>synchronization</b> <b>patterns.</b>|$|R
40|$|We study {{experimentally}} the <b>synchronization</b> <b>patterns</b> in time-delayed directed Boolean {{networks of}} excitable systems. We observe a transition {{in the network}} dynamics when the refractory time of the individual systems is adjusted. When the refractory time is on the same order-of-magnitude as the mean link time delays or the heterogeneities of the link time delays, cluster <b>synchronization</b> <b>patterns</b> change, or are suppressed entirely, respectively. We also show that these transitions occur when we only change the properties of {{a small number of}} nodes identified by their larger in-degree, hence the <b>synchronization</b> <b>patterns</b> can be controlled locally by these nodes. Our findings have implications for synchronization in biological neural networks. Comment: Accepted in Phys. Rev. Let...|$|R
40|$|Synchronization {{phenomena}} in coupled oscillatory systems {{are very important}} models to describe various higher-dimensional nonlinear {{phenomena in}} the field of natural science. In this paper, phase synchronization in a ring of van der Pol oscillators coupled by time-varying resistors is studied. The coexistence of in-phase and anti/N-phase states and various interesting phase <b>synchronization</b> <b>patterns</b> are observed when the parameters are changed. Further, the influence of duty cycle of time-varying resistors for the observed phase <b>synchronization</b> <b>patterns</b> is investigated...|$|R
5000|$|Each sector (or [...] "timecode frame") {{consists}} of a sequence of channel frames. These frames, when read from the disc, are made of a 24-bit <b>synchronization</b> <b>pattern</b> with the constant sequence 1000-0000-0001-0000-0000-0010, not present anywhere else on the disc, separated by three merging bits, followed by 33 bytes in EFM encoding, each followed by 3 merge bits. This forms a 588 bits long structure (24+3+33*(14+3)) called channel frame. The 33 bytes in channel frame are composed of 24 bytes of user data, 8 bytes of parity, and 1 byte of subcode data.|$|E
50|$|The cabling {{used for}} the SMPTE 292 {{electrical}} interface is coaxial cable with a nominal impedance of 75 Ω. Data is encoded in NRZ format, and a linear feedback shift register is used to scramble the data to reduce the likelihood that long strings of zeroes or ones will be present on the interface. The interface is self-clocking. Framing is done by detection of a special <b>synchronization</b> <b>pattern,</b> which appears on the (unscrambled) serial digital signal to be a sequence of twenty ones followed by forty zeroes; this bit pattern is not legal anywhere else within the data payload.|$|E
5000|$|The initial {{character}} TS {{is always}} physically present, but is excluded of the Answer-to-Reset {{in the definition}} given by ISO/IEC 7816-3:2006: {{the value of the}} byte string (at most 32 bytes) encoded in the sequence of characters following the initial character TS. ISO/IEC 7816-4:2005 concurs, stating that TS is a character or <b>synchronization</b> <b>pattern,</b> not a byte. However practice (in PC/SC, EMV, ETSI, and Calypso at least) is still to consider that TS is part of the ATR, as it was in ISO/IEC 7816-3:1997 and former. In particular, the ATR returned by PC/SC card readers and software stacks includes TS as the first byte, with value [...] or [...]|$|E
40|$|We {{show that}} subsets of {{interacting}} oscillators may synchronize {{in different ways}} within a single network. This diversity of <b>synchronization</b> <b>patterns</b> is promoted by increasing the heterogeneous distribution of coupling weights and/or asymmetries in small networks. We also analyze consistency, defined as the persistence of coexistent <b>synchronization</b> <b>patterns</b> regardless of the initial conditions. Our results show that complex weighted networks display richer consistency than regular networks, suggesting why certain functional network topologies are often constructed when experimental data are analyzed. Comment: 9 pages, 6 figure...|$|R
40|$|We {{propose a}} method for {{controlling}} <b>synchronization</b> <b>patterns</b> of limit-cycle oscillators by common noisy inputs, i. e., by utilizing noise-induced <b>synchronization.</b> Various <b>synchronization</b> <b>patterns,</b> including fully synchronized and clustered states, can be realized by using linear filters that generate appropriate common noisy signals from given noise. The optimal linear filter can be determined from the linear phase response property of the oscillators and the power spectrum of the given noise. The validity of the proposed method is confirmed by numerical simulations. Comment: 6 pages, 4 figure...|$|R
40|$|Synchronization is an {{important}} and prevalent phenomenon in natural and engineered systems. In many dynamical networks, the coupling is balanced or adjusted in order to admit global synchronization, a condition called Laplacian coupling. Many networks exhibit incomplete synchronization, where two or more clusters of synchronization persist, and computational group theory has recently proved to be valuable in discovering these cluster states based upon the topology of the network. In the important case of Laplacian coupling, additional <b>synchronization</b> <b>patterns</b> can exist {{that would not be}} predicted from the group theory analysis alone. The understanding of how and when clusters form, merge, and persist is essential for understanding collective dynamics, synchronization, and failure mechanisms of complex networks such as electric power grids, distributed control networks, and autonomous swarming vehicles. We describe here a method to find and analyze all of the possible cluster <b>synchronization</b> <b>patterns</b> in a Laplacian-coupled network, by applying methods of computational group theory to dynamically-equivalent networks. We present a general technique to evaluate the stability of each of the dynamically valid cluster <b>synchronization</b> <b>patterns.</b> Our results are validated in an electro-optic experiment on a 5 node network that confirms the <b>synchronization</b> <b>patterns</b> predicted by the theory. Comment: 6 figure...|$|R
40|$|Apparatus {{and method}} for {{providing}} downlink frames to be transmitted from a spacecraft to a ground station. Each downlink frame includes a <b>synchronization</b> <b>pattern</b> and a transfer frame. The apparatus may comprise a monolithic Reed-Solomon downlink (RSDL) encoding chip coupled to data buffers for storing transfer frames. The RSKL chip includes a timing device, a bus interface, a timing and control unit, a <b>synchronization</b> <b>pattern</b> unit, and a Reed-Solomon encoding unit, and a bus arbiter...|$|E
3000|$|Suppose {{that the}} {{networks}} (2) will be controlled onto some desired inhomogeneous state as {y_ 1 (t),...,y_m_ 1 (t)}→ϕ_ 1 (t), {y_m_ 1 + 1 (t),...,y_m_ 2 (t)}→ϕ_ 2 (t), …[*], {y_m_s- 1 + 1 (t),...,y_m_s(t)}→ϕ_s(t), i.e., M={{ϕ_ 1 (t),...,ϕ_ 1 (t)},{ϕ_ 2 (t),...,ϕ_ 2 (t)}, [...]...,{ϕ_s(t),...,ϕ_s(t)}}∈R^n× N is desired cluster <b>synchronization</b> <b>pattern</b> under the pinning control.|$|E
40|$|Many {{parallel}} {{programs are}} written in SPMD style, i. e. by running the same sequential program on all processes. SPMD programs include synchronization, but {{it is easy to}} write incorrect synchronization patterns. We propose a system that verifies a program's <b>synchronization</b> <b>pattern.</b> We also propose language features to make the <b>synchronization</b> <b>pattern</b> more explicit and easily checked. We have implemented a prototype of our system for Split-C and successfully verified the synchronization structure of realistic programs. 1 Introduction Explicitly parallel programming [...] -where the programmer specifies the parallelism in a computation [...] -is arguably the most widely used parallel programming paradigm. In exchange for a programming model that gives direct control over performance, programmers must manage the coordination of parallel processes, a task that is facilitated or hindered by the programming language. Despite years of practical experience, there is little research exploring language an [...] ...|$|E
40|$|All article content, {{except where}} {{otherwise}} noted, is licensed under a Creative Commons Attribution (CC BY) license ([URL] within the dynamical nodes {{of a complex}} network is usually considered homogeneous through all the nodes. Here we show, in contrast, that subsets of interacting oscillators may synchronize in different ways within a single network. This diversity of <b>synchronization</b> <b>patterns</b> is promoted by increasing the heterogeneous distribution of coupling weights and/or asymmetries in small networks. We also analyze consistency, defined as the persistence of coexistent <b>synchronization</b> <b>patterns</b> regardless of the initial conditions. Our results show that complex weighted networks display richer consistency than regular networks, suggesting why certain functional network topologies are often constructed when experimental data are analyzed. Dynamical systems may synchronize in several ways, at the same time, when they are coupled in a single complex network. Examples of this diversity of <b>synchronization</b> <b>patterns</b> {{may be found in}} research fields as diverse as neuroscience, climate networks, or ecosystems. Here we report the conditions required to obtain coexisting synchronizations in arrangements of interacting chaotic oscillators, and relate these conditions to the distribution of coupling weights and asymmetries in complex networks. We also analyze the conditions required for a high statistical occurrence of the same <b>synchronization</b> <b>patterns,</b> regardless of the oscillators' initial conditions. Our results show that these persistent <b>synchronization</b> <b>patterns</b> are statistically more frequent in complex weighted networks than in regular ones, explaining why certain functional network topologies are often retrieved from experimental data. Besides, our results suggest that considering both the different coexisting synchronizations and also their statistics may result in a richer understanding of the relations between functional and structural networks of oscillators. Peer ReviewedPostprint (published version...|$|R
40|$|Populations of {{oscillators}} {{can display}} {{a variety of}} <b>synchronization</b> <b>patterns</b> depending on the oscillators' intrinsic coupling and the coupling between them. We consider two coupled, symmetric (sub) populations with unimodal frequency distributions and show that the resulting <b>synchronization</b> <b>patterns</b> may resemble those of a single population with bimodally distributed frequencies. Our proof of the equivalence of their stability, dynamics, and bifurcations, {{is based on an}} Ott-Antonsen ansatz. The generalization to networks consisting of multiple (sub) populations vis-à-vis networks with multimodal frequency distributions, however, appears impossible. Comment: 4 pages, 4 figures, 1 supplementary pdf fil...|$|R
40|$|Small {{networks}} of chaotic units which are coupled by their time-delayed variables, are investigated. In {{spite of the}} time delay, the units can synchronize isochronally, i. e. without time shift. Moreover, networks can not only synchronize completely, but can also split into different synchronized sublattices. These <b>synchronization</b> <b>patterns</b> are stable attractors of the network dynamics. Different networks with their associated behaviors and <b>synchronization</b> <b>patterns</b> are presented. In particular, we investigate sublattice synchronization, symmetry breaking, spreading chaotic motifs, synchronization by restoring symmetry and cooperative pairwise synchronization of a bipartite tree...|$|R
40|$|In {{this work}} we {{consider}} the problem of locating a known periodically embedded <b>synchronization</b> <b>pattern</b> in random data, which is subject to flat fading and additive white Gaussian noise. We derive the maximum likelihood rule and its high-SNR approximation for the case of noncoherent demodulation and show experimental results for the slow-fading Rayleigh channel. It is shown that the well-known correlation rule performs substantially worse than maximumlikelihood rule derived here. I. Introduction The problem of locating synchronization patterns is important {{in such areas as}} wireless communications, and has been studied in detail. An early work by Barker [1] considered the problem of finding a known <b>synchronization</b> <b>pattern</b> in random data and proposed a correlation-type pattern recognizer. In [2] Massey derived the maximumlikelihood (ML) rule for detecting periodically embedded synchronization patterns for the AWGN channel with coherent BPSK modulation. He has shown that when ML rule is [...] ...|$|E
40|$|Many {{parallel}} {{programs are}} written in SPMD style, i. e. by running the same sequential program on all processes. SPMD programs include synchronization, but {{it is easy to}} write incorrect synchronization patterns. We propose a sys-tem that veries a program's <b>synchronization</b> <b>pattern.</b> We also propose language features to make the synchroniza-tion pattern more explicit and easily checked. We have implemented a prototype of our system for Split-C and suc-cessfully veried the synchronization structure of realistic programs. ...|$|E
40|$|The paper {{investigates the}} {{synchronization}} of price {{changes in the}} context of retail tire dealers in São Paulo-Brazil and selected items in supermarkets for cleaning supplies and food in Rio de Janeiro-Brazil. Results indicate similar and non-negligible synchronization for different brands, although magnitudes are distant from a perfect <b>synchronization</b> <b>pattern.</b> We find interesting patterns in inter-firm competition, with similar magnitudes across different tire types. Intra-chain synchronization is substantial, indicating that a common price adjustment policy tends to be sustained for each chain across different products...|$|E
40|$|Folding a {{sequence}} S into a multidimensional box {{is a well-known}} method which {{is used as a}} multidimensional coding technique. The operation of folding is generalized {{in a way that the}} sequence S can be folded into various shapes and not just a box. The new definition of folding is based on a lattice tiling for the given shape and a direction in the D-dimensional integer grid. Necessary and sufficient conditions that a lattice tiling for combined with a direction define a folding of {{a sequence}} into are derived. The immediate and most impressive application is some new lower bounds on the number of dots in two-dimensional <b>synchronization</b> <b>patterns.</b> This can be also generalized for multidimensional <b>synchronization</b> <b>patterns.</b> The technique and its application for two-dimensional <b>synchronization</b> <b>patterns,</b> raise some interesting problems in discrete geometry. We will also discuss these problems. It is also shown how folding can be used to construct multidimensional error-correcting codes. Finally, by using the new definition of folding, multidimensional pseudo-random arrays with various shapes are generated. Comment: 21 page...|$|R
5000|$|... #Caption: Distinct <b>synchronization</b> <b>patterns</b> in a {{two-dimensional}} array of Kuramoto-like oscillators with differing phase interaction functions and spatial coupling topologies. (A) Pinwheels. (B) Waves. (C) Chimeras. (D) Chimeras and waves combined. Color scale indicates oscillator phase.|$|R
40|$|This paper {{presents}} a novel methodology for the exploratory analysis {{of power and}} <b>synchronization</b> <b>patterns</b> in EEG data from psychophysiological experiments. The methodology {{is based on the}} segmentation of the time-frequency plane in regions with relatively homogeneous <b>synchronization</b> <b>patterns,</b> which is performed by means of a seeded region-growing algorithm, and a Bayesian regularization procedure. We have implemented these methods in an interactive application for the study of cognitive experiments, although some of the techniques discussed in this work can also be applied to other multidimensional data sets. To demonstrate our methodology, results corresponding to a figure and word categorization EEG experiment are presented. 1...|$|R
40|$|The {{kinematics}} of {{dust particles}} {{during the early}} stage of mode-coupling induced melting of a two-dimensional plasma crystal is explored. It is found that {{the formation of the}} hybrid mode causes the particle vibrations to partially synchronize at the hybrid frequency. Phase- and frequency-locked hybrid particle motion in both vertical and horizontal directions (hybrid mode) is observed. The system self-organizes in a rhythmic pattern of alternating in-phase and antiphase oscillating chains of particles. The spatial orientation of the <b>synchronization</b> <b>pattern</b> correlates well with the directions of the maximal increment of the shear-free hybrid mode...|$|E
40|$|We derive {{a maximum}} {{likelihood}} (ML) rule for one-shot frame synchronization of a random data burst with non-coherent orthogonal M-FSK signaling {{in a flat}} fading or AWGN channel. It uses a known frame <b>synchronization</b> <b>pattern</b> and, optionally, channel state information at the receiver. High SNR approximations are developed that are well suited for a low-cost implementation. A burst synchronizer structure is proposed with an ML frame synchronizer as the last processing stage. Simulations reveal the performance gain of the ML rules over conventional correlation rules for a 2 -CPFSK modulated separate signaling channel in an OFDM FTDMA broadband cellular system...|$|E
40|$|Wake-mediated {{interactions}} {{result in}} the coupling between wave modes in 2 D complex plasma crystals, which can trigger the mode-coupling instability and cause melting. Spectra of phonons with out-of-plane polarization were studied experimentally in 2 D plasma crystals during dedicated experiments on the mode-coupling instability. The kinematics of dust particles during the early stage of mode-coupling induced melting is explored. It is found that {{the formation of the}} hybrid mode causes the particle vibrations to partially synchronize at the hybrid frequency. The spatial orientation of the <b>synchronization</b> <b>pattern</b> correlates well with the directions of the maximal increment of the shear-free hybrid mode...|$|E
5000|$|Joins {{can be used}} {{to express}} {{concurrency}} in an application using the joins pattern, usable both for multi-threaded applications as well as for event based distributed applications. The Joins API emulates declarative type-safe expression of <b>synchronization</b> <b>patterns.</b>|$|R
40|$|Synchronization {{within the}} {{dynamical}} nodes {{of a complex}} network is usually considered homogeneous through all the nodes. Here we show, in contrast, that subsets of interacting oscillators may synchronize in different ways within a single network. This diversity of <b>synchronization</b> <b>patterns</b> is promoted by increasing the heterogeneous distribution of coupling weights and/or asymmetries in small networks. We also analyze consistency, defined as the persistence of coexistent <b>synchronization</b> <b>patterns</b> regardless of the initial conditions. Our results show that complex weighted networks display richer consistency than regular networks, suggesting why certain functional network topologies are often constructed when experimental data are analyzed. Dynamical systems may synchronize in several ways, at the same time, when they are coupled in a single complex network. Examples of this diversity of <b>synchronization</b> <b>patterns</b> {{may be found in}} research fields as diverse as neuroscience, climate networks, or ecosystems. Here we report the conditions required to obtain coexisting synchronizations in arrangements of interacting chaotic oscillators, and relate these conditions to the distribution of coupling weights and asymmetries in complex networks. We also analyze the conditions required for a high statistical occurrence of the same <b>synchronization</b> <b>patterns,</b> regardless of the oscillators' initial conditions. Our results show that these persistent <b>synchronization</b> <b>patterns</b> are statistically more frequent in complex weighted networks than in regular ones, explaining why certain functional network topologies are often retrieved from experimental data. Besides, our results suggest that considering both the different coexisting synchronizations and also their statistics may result in a richer understanding of the relations between functional and structural networks of oscillators. This work was partially supported by the Spanish Ministry of Economy and Competitiveness and FEDER (Project No. FIS 2015 - 66503). AEPV acknowledges support from the Swiss National Science Foundation Project NEURECA (CR 13 I 1 138032). J. G. O. also acknowledges support from the the Generalitat de Catalunya (Project No. 2014 SGR 0947), the ICREA Academia Programme, and from the “María de Maeztu” Programme for Units of Excellence in R&D (Spanish Ministry of Economy and Competitiveness, MDM- 2014 - 0370) ...|$|R
40|$|In {{this report}} we give a {{detailed}} presentation of how monitors {{can be implemented}} on the HEP using a simple macro processor. We then develop the thesis that a small body of general-purpose monitors can be defined to handle most standard <b>synchronization</b> <b>patterns.</b> We include the macro packages required to implement {{some of the more}} common <b>synchronization</b> <b>patterns,</b> including the fairly complex logic discussed in a previous paper. Code produced using these macro packages is portable from one multiprocessing environment to another. Indeed, by recoding the set of basic macros (about 100 lines of code for the Denelcor HEP), most programs that we are new writing could be moved to any similar multiprocessing system...|$|R
