44|265|Public
25|$|The game's MIDI {{musical score}} {{includes}} pieces from John Williams' Star Wars score {{in addition to}} original compositions. X-Wing is the first non-adventure game to use the iMUSE Interactive MUsic <b>Streaming</b> <b>Engine,</b> although the system's level of interactivity is reduced from previous iterations. For X-Wing, iMUSE provides musical cues in response to in-game events, such as the arrival of friendly or hostile ships. Music designers Michael Land, Clint Bajakian, and Peter McConnell used familiar elements of Williams' music to create these cues. The musical cues were designed to blend seamlessly {{with the rest of}} the in-game music soundtrack.|$|E
5000|$|... {{streaming}} servers software, i.e. Adobe Flash Media Server and Wowza <b>Streaming</b> <b>Engine.</b>|$|E
5000|$|SPL - Data Flow {{description}} language of IBM InfoSphere Streams <b>streaming</b> <b>engine</b> ...|$|E
40|$|Low-latency {{streaming}} {{of high-quality}} audio has the poten-tial to dramatically transform {{the world of}} interactive musi-cal applications. We provide methods for accurately mea-suring the end-to-end latency and audio quality of a deli-vered audio stream and apply these methods to an empiri-cal evaluation of several <b>streaming</b> <b>engines.</b> In anticipation of future demands for emerging applications involving au-dio interaction, we also review key features of <b>streaming</b> <b>engines</b> and discuss potential challenges that remain to be overcome...|$|R
50|$|In Data science {{you could}} use data serving <b>engines</b> like <b>streaming</b> <b>engines</b> or data {{transformation}} engines which transform data which is a requirement of heavy duty applications.|$|R
40|$|As {{high-speed}} Internet {{connections and}} Internet streaming media become widespread, {{the demand for}} high-performance, cheap Internet streaming servers increases. In this paper, we look into the performance limitations of streaming server applications running on PC servers with Linux, and propose a new kernel optimization called "stream engine" that combines both copy elimination and context switch avoidance to double the streaming server throughput. Our experiments with <b>stream</b> <b>engine</b> show that for Internet streaming, eliminating context switches {{is just as important}} as eliminating data copying. Using profile data, we also project the benefits of TCP offloading hardware implementing part or all of the <b>stream</b> <b>engine</b> optimization...|$|R
50|$|There {{are some}} {{server-side}} video-streaming programs that support WebRTC functionality: Flussonic Media Server and Wowza <b>Streaming</b> <b>Engine.</b>|$|E
5000|$|Wowza <b>Streaming</b> <b>Engine</b> from Wowza Media Systems {{supports}} HLS and encrypted HLS {{for live}} (with DVR) and on-demand streaming.|$|E
5000|$|Red5 {{is a free}} {{software}} media streaming server implemented in Java, which provides services similar to those offered by the proprietary Adobe Flash Media Server and Wowza <b>Streaming</b> <b>Engine</b> including: ...|$|E
50|$|Storm {{is but one}} {{of dozens}} of <b>stream</b> {{processing}} <b>engines,</b> for a more complete list see Stream processing. Twitter announced Heron on June 2, 2015 which is API compatible with Storm. There are other comparable <b>streaming</b> data <b>engines</b> such as Spark Streaming and Flink.|$|R
40|$|Stream {{applications}} gained significant popularity {{over the}} last years that lead to the development of specialized <b>stream</b> <b>engines.</b> These systems are designed from scratch with a dif-ferent philosophy than nowadays database engines in order to cope with the stream applications requirements. How-ever, this means that they lack the power and sophisticated techniques of a full fledged database system that exploits techniques and algorithms accumulated over many years of database research. In this paper, we take the opposite route and design a <b>stream</b> <b>engine</b> directly on top of a database kernel. Incom-ing tuples are directly stored upon arrival in a new kind of system tables, called baskets. A continuous query can then be evaluated over its relevant baskets as a typical one-tim...|$|R
5000|$|GOS was {{designed}} to deal with long-distance, cross-domain and single-image file operations, which is typical in Grid environments. GOS behaves like a file server via the file-based GOS-FS protocol to any entity on the grid. Similar to GridFTP, GOS-FS integrates a parallel <b>stream</b> <b>engine</b> and Grid Security Infrastructure (GSI).|$|R
5000|$|Autodesk ReMake, www.remake.autodesk.com Create 3D {{models from}} reality {{captured}} with photos or scans.Remake can edit and prepare huge meshes, generated or Imported - its scalable mesh <b>streaming</b> <b>engine</b> can visualize and edit billion polygon mesh files. Reads and writes [...]STL files ...|$|E
5000|$|For on-demand streaming, Wowza <b>Streaming</b> <b>Engine</b> can ingest {{multiple}} {{types of}} {{audio and video}} files. Supported file types include MP4 (QuickTime container - [...]mp4, [...]f4v, [...]mov, [...]m4a, [...]m4v, [...]mp4a, [...]mp4v, [...]3gp, and [...]3g2), FLV (Flash Video - [...]flv), and MP3 content (.mp3).|$|E
5000|$|Quick Sync {{support by}} Intel Media SDK on Linux is available, and [...] it is {{supported}} by Wowza <b>Streaming</b> <b>Engine</b> (formerly known as Wowza Media Server) for transcoding of media streams using their transcoder add-on. Quick Sync is also supported by the VA API, for both encoding and decoding.|$|E
5000|$|SS Dover Castle {{was built}} by Barclay Curle & Company, Glasgow as yard number 443, in 1904 and {{launched}} on 4 February 1904. She was powered by quadruple expansion <b>stream</b> <b>engines.</b> She was built as a combined {{passenger and cargo vessel}} for the Union-Castle Mail Steamship Company, of London.|$|R
40|$|Abstract: Motion sensing devices likeMicrosoft’sKinect {{offer an}} {{alternative}} to traditional computer input devices like keyboards and mouses. Graph databases can naturally makeuse of gesture control as traversing graphs can easily be described by swiping or pointing gestures. In our demo we traverse the Internet Movie Database (IMDB) using aKinect interface with the control logic in our data <b>stream</b> <b>engine</b> AnduIN. The gesture detection is done based on AnduIN’scomplexevent processing functionality. ...|$|R
40|$|In this deliverable, {{we present}} version V 1. 0 of SRBench, the first {{benchmark}} for <b>Streaming</b> RDF <b>engines,</b> {{designed in the}} context of Task 1. 4 of PlanetData, completely based on real-world datasets. With the increasing problem of too much streaming data but not enough knowledge, researchers have set out for solutions in which Semantic Web technologies are adapted and extended for the publishing, sharing, analysing and understanding of such data. Various approaches are emerging. To help researchers and users to compare <b>streaming</b> RDF <b>engines</b> in a standardised application scenario, we propose SRBench, with which one can assess the abilities of a <b>streaming</b> RDF <b>engine</b> to cope with a broad range of use cases typically encountered in real-world scenarios. We offer a set of queries that cover the major aspects of <b>streaming</b> RDF <b>engines,</b> ranging from simple pattern matching queries to queries with complex reasoning tasks. To give a first baseline and illustrate the state of the art, we show results obtained from implementing SRBench using the SPARQLStream query-processing engine developed by UPM...|$|R
50|$|Wowza <b>Streaming</b> <b>Engine</b> can {{stream to}} {{multiple}} types of playback clients and devices simultaneously, including the Adobe Flash player, Microsoft Silverlight player, Apple QuickTime Player and iOS devices (iPad, iPhone, iPod Touch), 3GPP mobile phones, IPTV set-top boxes (Amino, Enseo, Roku, Streamit and others), and game consoles such as Wii, Xbox, and PS3.|$|E
50|$|Flink {{provides}} a high-throughput, low-latency <b>streaming</b> <b>engine</b> {{as well as}} support for event-time processing and state management. Flink applications are fault-tolerant {{in the event of}} machine failure and support exactly-once semantics. Programs can be written in Java, Scala, Python, and SQL and are automatically compiled and optimized into dataflow programs that are executed in a cluster or cloud environment.|$|E
50|$|Cameleon is a live video {{streaming}} software and iOS app that {{allows users to}} broadcast live video content to various social media platforms, including Facebook and YouTube. Users connect to the publicly available service using a digital camera and a computer over platforms including YouTube Live, Facebook Live, Tumblr, RTSP, RTMP, Wowza <b>Streaming</b> <b>Engine,</b> Adobe Flash Media Server and various media servers.|$|E
40|$|Abstract:Motion sensing devices like Microsoft’s Kinect {{offer an}} {{alternative}} to tradi-tional computer input devices like keyboards and mouses. Graph databases can natu-rally make use of gesture control as traversing graphs can easily be described by swip-ing or pointing gestures. In our demo we traverse the Internet Movie Database (IMDB) using a Kinect interface with the control logic in our data <b>stream</b> <b>engine</b> AnduIN. The gesture detection is done based on AnduIN’s complex event processing functionality. ...|$|R
5000|$|Below and to {{the east}} of the Fort was a [...] "seesaw' {{searchlight}}, set up in 1891 and powered by the <b>stream</b> <b>engine</b> in Fort Ballance. The searchlight consisted of an electric carbon lamp, capable of a strong beam for target illumination, because the bulb was vulnerable to enemy fire, it was protected in a recessed emplacement whilst a large mirror, attached {{to the end of the}} ‘see-saw’ girder reflected the light beam across the water.|$|R
40|$|I {{would like}} to thank my {{supervisor}} Ricardo Jiménez Peris, my thesis co-director Patrick Valduriez and Marta Patiño-Martínez for their help. Thanks also to all the lab colleagues (especially Mar, Damián, Paco and Claudio) and the people I had the opportunity to work with (especially Zhang, prof. Marina Papatriantafilou, Zoe and prof. Kostas Magoutis). Special thanks go to Rocío, my In recent years, applications in domains such as telecommunications, network security or large scale sensor networks showed the limits of the traditional store-then-process paradigm. In this context, <b>Stream</b> Processing <b>Engines</b> emerged as a candidate solution for all these applications demanding for high processing capacity with low processing latency guarantees. With <b>Stream</b> Processing <b>Engines,</b> data <b>streams</b> are not persisted but rather processed on the fly, producing results continuously. Current <b>Stream</b> Processing <b>Engines,</b> either centralized or distributed, do not scale with the input load due to single-node bottlenecks. Moreover, they are based on static configurations that lead to either under or over-provisioning. This Ph. D. thesis proposes StreamCloud, an elastic paralleldistributed <b>stream</b> processing <b>engine</b> that enables for processing of large data stream volumes. Stream-Cloud minimizes the distribution and parallelization overhead introducing novel techniques that spli...|$|R
50|$|Version 4.0 was {{released}} February 11, 2014. The product name {{was changed to}} Wowza <b>Streaming</b> <b>Engine.</b> This release includes a new web-based graphical interface which interacts with the server via a REST API and provides monitoring and configuration functions. This release also brings full support for MPEG-DASH and support for additional for captioning formats. Previously available separately, the MediaCache and Push Publishing add-on modules are now included in the server.|$|E
50|$|Wowza <b>Streaming</b> <b>Engine</b> (known as Wowza Media Server {{prior to}} version 4) is a unified {{streaming}} media server software developed by Wowza Media Systems. The server {{is used for}} streaming of live and on-demand video, audio, and rich Internet applications over IP networks to desktop, laptop, and tablet computers, mobile devices, IPTV set-top boxes, internet-connected TV sets, game consoles, and other network-connected devices. The server is a Java application deployable on most operating systems.|$|E
50|$|Wowza <b>Streaming</b> <b>Engine</b> is {{compatible}} with standard streaming protocols. On the playout side, these include RTMP (and the variants RTMPS, RTMPT, RTMPE, RTMPTE), HDS, HLS, MPEG DASH, RTSP, Smooth Streaming, and MPEG-TS (unicast and multicast), WebRTC. On the live ingest side the server can ingest video and audio via RTP, RTSP, RTMP, MPEG-TS (unicast and multicast) and ICY (SHOUTcast / Icecast) streams. It also supports incoming streams via the RTSP and WOWZ protocols from mobile Android and iOS devices running the Wowza GoCoder mobile encoding application.|$|E
5000|$|IBM Spade - Stream Processing Application Declarative Engine (B. Gedik, et al. SPADE: {{the system}} S {{declarative}} <b>stream</b> processing <b>engine.</b> ACM SIGMOD 2008.) ...|$|R
40|$|Stream {{programming}} {{is currently being}} pushed {{as a way to}} expose concurrency and separate communication from computation. Since there are many stream languages and potential <b>stream</b> execution <b>engines,</b> this paper proposes an abstract machine model that captures the essential characteristics of stream architectures, the Stream Virtual Machine (SVM). The goal of the SVM is to improve interoperability, allow developpment of common compilation tools and reason about stream program performance. The SVM contains control processors, slave kernel processors, and slave DMA units. Is is presented along with the compilation process that takes a stream program down to the SVM and finally down to machine binary. To extract the parameters for our SVM model, we use micro-kernels to characterize two graphics processors and a <b>stream</b> <b>engine,</b> Imagine. The results are encouraging; the model estimates the performance of the target machines with high accuracy. 1...|$|R
40|$|One {{of crucial}} points for further {{improving}} ubiqui-tous network is to enhance temporary security with-out relying on permanent network infrastructure. Since {{a practical solution}} to provide such ubiqui-tous security is a safety aware, high-performed sin-gle chip processor, a multimedia <b>stream</b> cipher <b>engine</b> has been exploited. In order to keep security, usabil-ity, speed, and power consciousness, the <b>stream</b> ci-pher <b>engine</b> takes a compact multicore architecture. Each core implements a double cipher scheme that covers RAC (random addressing cryptography) and data sealing. The double cipher is microarchitecture-based, software-transparent hardware cryptography that offers {{the protection of the}} whole data with neg-ligible hardware cost and moderate performance over-head. <b>Stream</b> cipher <b>engine</b> chips have been devel-oped by using 0. 18 -µm standard cell CMOS technolo-gies. Through the rough evaluation of those chips, it has emerged that streaming buffer size is crucial for prospective specifications. In order to achieve sophis-ticated design strategy, this paper evaluates in detail the buffer size dependency of power dissipation, clock speed, running time, and throughput, focusing on the latest version of the <b>stream</b> cipher <b>engine</b> chip. From the tradeoff between these specificative factors, the guideline of optimum buffer size is made clear in view of safety and performance for ubiquitous computing...|$|R
5000|$|... iMUSE (Interactive Music <b>Streaming</b> <b>Engine)</b> is an {{interactive}} music system {{used in a}} number of LucasArts video games. The idea behind iMUSE is to synchronize music with the visual action in a video game so that the audio continuously matches the on-screen events and transitions from one musical theme to another are done seamlessly. iMUSE was developed in the early 1990s by composers Michael Land and Peter McConnell while working at LucasArts. The iMUSE system is patented by LucasArts, and was added to the fifth version of the SCUMM game engine in 1991.|$|E
50|$|Proteus X LE, Proteus X, Proteus X2, Emulator X and Emulator X2 are all copy {{protected}} software. User {{must also}} have a qualifying E-MU hardware such as a E-MU digital audio interface, E-MU Xmidi 2x2 or E-MU Xboard keyboard controller connected, powered on and installed correctly as the E-MU hardware also acts as a software copy protection dongle for the protected software. Not having {{all of these things}} in order often results in the failed launch of the program or the <b>Streaming</b> <b>engine</b> error message. The E-MU Xmidi 1x1 and E-MU Tracker Pre do not function as a copy protection dongle.|$|E
50|$|The game's MIDI {{musical score}} {{includes}} pieces from John Williams' Star Wars score {{in addition to}} original compositions. X-Wing is the first non-adventure game to use the iMUSE Interactive MUsic <b>Streaming</b> <b>Engine,</b> although the system's level of interactivity is reduced from previous iterations. For X-Wing, iMUSE provides musical cues in response to in-game events, such as the arrival of friendly or hostile ships. Music designers Michael Land, Clint Bajakian, and Peter McConnell used familiar elements of Williams' music to create these cues. The musical cues were designed to blend seamlessly {{with the rest of}} the in-game music soundtrack.|$|E
40|$|Data stream {{management}} systems usually have to process many long-running queries that are active {{at the same}} time. Multiple queries can be evaluated more efficiently together than independently, because it is often possible to share state and computation. Motivated by this observation, various Multi-Query Optimization (MQO) techniques have been proposed. However, these approaches suffer from two limitations. First, they focus on very specialized workloads. Second, integrating MQO techniques for CQL-style <b>stream</b> <b>engines</b> and those for event pattern detection engines is even harder, as the processing models of {{these two types of}} <b>stream</b> <b>engines</b> are radically different. In this paper, we propose a rule-based MQO framework. This framework incorporates a set of new abstractions, extending their counterparts, physical operators, transformation rules, and streams, in a traditional RDBMS or stream processing system. Within this framework, we can integrate new and existing MQO techniques through the use of transformation rules. This allows us to build an expressive and scalable stream system. Just as relational optimizers are crucial for the success of RDBMSes, a powerful multi-query optimizer is needed for data stream processing. This work lays the foundation for such a multi-query optimizer, creating opportunities for future research. We experimentally demonstrate the efficacy of our approach. 1...|$|R
40|$|The {{basic data}} {{format of the}} Semantic Web is RDF. SPARQL, which has been {{developed}} by the W 3 C, is the upcoming standard for RDF query languages. Typical engines for processing SPARQL queries on RDF data first read all RDF data, may build indices of the complete read data and afterwards evaluate SPARQL queries. Such engines cannot operate on streaming RDF data. <b>Streaming</b> query <b>engines</b> operating on <b>streams</b> of data can (a) discard irrelevant input as early as possible, and thus save processing costs and space costs, (b) build indices only on {{those parts of the}} data, which are needed for the evaluation of the query, and (c) determine partial results of a query as early as possible, and thus evaluate queries more efficiently. We propose such a <b>streaming</b> SPARQL <b>engine,</b> which is the first <b>streaming</b> SPARQL <b>engine</b> {{to the best of our}} knowledge. 1...|$|R
30|$|SAMOA, a {{platform}} for machine learning from streaming data, was originally developed at Yahoo! Labs in Barcelona in 2013 and {{has been part of}} the Apache incubator since late 2014. Its name stands for Scalable Advanced Massive Online Analysis. It is a flexible framework that can be run locally or on one of a few <b>stream</b> processing <b>engines,</b> including Storm, S 4, and Samza. This is done through a minimal API designed for a general distributed <b>stream</b> processing <b>engine</b> which allows users to easily write bindings to port SAMOA to new stream processors [145].|$|R
