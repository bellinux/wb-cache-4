3|6|Public
50|$|Modern {{technology}} {{is capable of}} reading data {{as fast as it}} can be obtained from the spinning platters, so hard drives usually have a fixed <b>sector</b> <b>interleave</b> ratio of 1:1, which is effectively no interleaving being used.|$|E
50|$|Interleaving {{was used}} to arrange the sectors in the most {{efficient}} manner possible, so that after reading a sector, time would be permitted for processing, {{and then the next}} sector in sequence is ready to be read just as the computer is ready to do so. Matching the <b>sector</b> <b>interleave</b> to the processing speed therefore accelerates the data transfer, but an incorrect interleave can make the system perform markedly slower.|$|E
50|$|<b>Sector</b> <b>interleave</b> is {{a mostly}} {{obsolete}} device characteristic related to data rate, {{dating back to}} when computers were too slow {{to be able to}} read large continuous streams of data. Interleaving introduced gaps between data sectors to allow time for slow equipment to get ready to read the next block of data. Without interleaving, the next logical sector would arrive at the read/write head before the equipment was ready, requiring the system to wait for another complete disk revolution before reading could be performed.|$|E
50|$|A cluster {{need not}} be {{physically}} contiguous on the disk; it may span more than one track or, if <b>sector</b> <b>interleaving</b> is used, may even be discontiguous within a track. This {{should not be confused}} with fragmentation, as the sectors are still logically contiguous.|$|R
5000|$|... <b>interleaving</b> <b>sectors</b> (to boost {{throughput}} by {{organizing the}} sectors on the track), ...|$|R
2500|$|The DEC Rainbow 100 (all variations) {{supported}} one FAT12 format on 80-track, single-sided, quad-density 5.25" [...] drives. The {{first two}} tracks were {{reserved for the}} boot loader, but didn't contain an MBR nor a BPB (MS-DOS used a static in-memory BPB instead). The boot sector (track 0, side 0, sector 1) was Z80 code beginning with DI 0xF3. The 8088 bootstrap was loaded by the Z80. Track 1, side 0, sector 2 starts with the Media/FAT ID byte 0xFA. Unformatted disks use 0xE5 instead. The file system starts on track 2, side 0, sector 1. There are 2 copies of the FAT and 96 entries in the root directory. In addition, there is a physical to logical track mapping to effect a 2:1 <b>sector</b> <b>interleaving.</b> The disks were formatted with the physical sectors in order numbered 1 to 10 on each track after the reserved tracks, but the logical sectors from 1 to 10 were stored in physical sectors 1, 6, 2, 7, 3, 8, 4, 9, 5, 10.|$|R
5000|$|The DEC Rainbow 100 MS-DOS did support FAT {{formatted}} floppies. They were FAT12 format on 80-track, single-sided, quad-density 5.25" [...] drives. The {{first two}} tracks were {{reserved for the}} boot loader, but didn't contain an MBR nor a BPB (MS-DOS used a static in-memory BPB instead). The boot sector (track 0, side 0, sector 1) was Z80 code beginning with DI 0xF3. The 8088 bootstrap was loaded by the Z80. Track 1, side 0, sector 2 starts with the Media/FAT ID byte 0xFA. Unformatted disks use 0xE5 instead. The file system starts on track 2, side 0, sector 1. There are 2 copies of the FAT and 96 entries in the root directory. In addition, there is a physical to logical track mapping to effect a 2:1 <b>sector</b> <b>interleaving.</b> The disks were formatted with the physical sectors in order numbered 1 to 10 on each track after the reserved tracks, but the logical sectors from 1 to 10 were stored in physical sectors 1, 6, 2, 7, 3, 8, 4, 9, 5, 10. This makes is hard to create Rainbow disk images since all existing tools assumes {{there will be an}} MBR with a BPB, and required various hacks {{to make up for the}} lack of on-disk BPB.|$|R
40|$|Sectored caches {{have been}} used for many years {{in order to reduce the}} tag volume needed in a cache. In a sectored cache, a single address tag is {{associated}} with a sector consisting in several cache lines, while validity, dirty and coherency tags are associated with each of the inner cache lines. Using a sectored cache is a design trade-off between a low volume for cache tags allowed by a large line size and a low memory traffic induced by using a small line size. This technique has been used in many cache designs including small on-chip microprocessor caches and large external second level caches. Unfortunately on a sectored cache, a large part of the cache space may be wasted by invalid cache lines, then the miss ratio on a sectored cache is often significantly higher than the miss ratio on a non-sectored cache. Usually in a cache, a cache line location is statically linked to one and only one address tag word location. In the <b>interleaved</b> <b>sectored</b> cache we propose in this paper, th [...] ...|$|R

