670|66|Public
25|$|In June 2010, Kaminsky {{released}} Interpolique, a beta {{framework for}} addressing injection attacks such as <b>SQL</b> <b>Injection</b> and Cross Site Scripting {{in a manner}} comfortable to developers.|$|E
25|$|Lastly, <b>SQL</b> <b>injection</b> {{exploits}} a vulnerability in {{the database}} layer of an application. When user input is incorrectly filtered, any SQL statements can be executed by the application.|$|E
25|$|Most {{security}} vulnerabilities {{result from}} poor coding and architectural {{practices such as}} <b>SQL</b> <b>injection</b> or cross-site scripting. These are well documented in lists maintained by CWE, and the SEI/Computer Emergency Center (CERT) at Carnegie Mellon University.|$|E
5000|$|... aiProtect offers {{protection}} against DDoS attacks and <b>SQL</b> <b>injections</b> ...|$|R
2500|$|Ensure input {{validation}} to avoid cross-site scripting flaws or <b>SQL</b> <b>injections</b> flaws ...|$|R
5000|$|In June 2011, PBS was hacked, mostly likely {{through use of}} SQL injection; {{the full}} process used by hackers to execute <b>SQL</b> <b>injections</b> was {{described}} in this Imperva blog.|$|R
25|$|On October 15, 2014, a <b>sql</b> <b>injection</b> {{vulnerability}} {{was announced}} and update released. Two weeks later the Drupal security team released an advisory explaining {{that everyone should}} act {{under the assumption that}} any site not updated within 7 hours of the announcement are infected. Thus, it can be extremely important to apply these updates quickly and usage of a tool to make this process easier like drush is highly recommended.|$|E
500|$|Tflow, Sabu, Topiary, and Ryan Ackroyd (known as [...] "Kayla") collaborated in February 2011 on a {{cyber-attack}} against Aaron Barr, CEO of {{the computer}} security firm HBGary Federal, in retaliation for his research on Anonymous and his threat to expose members of the group. Using a <b>SQL</b> <b>injection</b> weakness, the four hacked the HBGary site, used Barr's captured password to vandalize his Twitter feed with racist messages, and released an enormous cache of HBGary's e-mails in a torrent file on Pirate Bay. The e-mails stated that Barr and HBGary had proposed to Bank of America a plan to discredit WikiLeaks in retaliation for a planned leak of Bank of America documents, and the leak caused substantial public relations harm to the firm as well as leading one U.S. congressman {{to call for a}} congressional investigation. Barr resigned as CEO {{before the end of the}} month.|$|E
2500|$|Security best {{practices}} (Input Validation, <b>SQL</b> <b>Injection,</b> Cross-Site Scripting, etc. [...] ) ...|$|E
25|$|The Asprox botnet (discovered around 2008), {{also known}} by its aliases Badsrc and Aseljo, is a botnet mostly {{involved}} in phishing scams and performing <b>SQL</b> <b>injections</b> into websites in order to spread malware.|$|R
50|$|Securing: Protect against {{application}} layer attacks such as; malware, botnet, <b>SQL</b> <b>injections,</b> cross-site scripting, etc. In conjunction with traditional network layer security solutions; application aware security is quickly becoming {{an important part}} of a comprehensive defense-in-depth strategy.|$|R
5000|$|In August 2014, Milwaukee-based {{computer}} security company Hold Security disclosed that it uncovered a theft of confidential information from nearly 420,000 websites through <b>SQL</b> <b>injections.</b> The New York Times confirmed this finding by hiring a security expert {{to check the}} claim.|$|R
2500|$|In mid-October 2014, Drupal {{issued a}} [...] "highly critical" [...] {{security}} advisory regarding an <b>SQL</b> <b>injection</b> bug in Drupal 7, {{also known as}} Drupalgeddon.|$|E
2500|$|In June 2011, {{members of}} the group claimed {{responsibility}} for an attack against Sony Pictures that took data that included [...] "names, passwords, e-mail addresses, home addresses and dates of birth for thousands of people." [...] The group claimed that it used a <b>SQL</b> <b>injection</b> attack, and was motivated by Sony's legal action against George Hotz for jailbreaking the PlayStation 3. [...] The group claimed it would launch an attack that would be the [...] "beginning of the end" [...] for Sony. [...] Some of the compromised user information was subsequently used in scams. The group claimed to have compromised over 1,000,000 accounts, though Sony claimed the real number was around 37,500.|$|E
2500|$|LulzSec drew {{its name}} from the {{neologism}} [...] "lulz", (from lol), [...] "laughing out loud", which represents laughter, and [...] "Sec", short for [...] "Security". The Wall Street Journal characterized its attacks as closer to Internet pranks than serious cyber-warfare, while the group itself claimed to possess the capability of stronger attacks. It gained attention in part due to its brazen claims of responsibility and lighthearted taunting of corporations that were hacked. It frequently referred to Internet memes when defacing websites. The group emerged in May 2011, and successfully attacked websites of several major corporations. It specialized in finding websites with poor security, stealing and posting information from them online. It used well-known straightforward methods, such as <b>SQL</b> <b>injection,</b> to attack its target websites. Several media sources have described their tactics as grey hat hacking. Members of the group may have been involved in a previous attack against the security firm HBGary.|$|E
40|$|Web {{security}} {{is an important}} area of research. This work has focused on web securing schemes. The primary concentration is to interpret the way to handle the <b>SQL</b> <b>Injections.</b> It {{is one of the}} many web attack methods used by hackers to steal data from industries. It is one of the most usual technique used in present era for application layer attack It is the category of attack that takes the benefit of. Improper coding of your web applications that allows hacker to inject SQL commands into say a login form to allow them to gain access to the data held within your database. So in this work we have reviewed different research on the <b>SQL</b> <b>injections...</b>|$|R
5000|$|Intruder - This tool {{can perform}} {{automated}} attacks on web applications. The tool offers a configurable algorithm that can generate malicious HTTP requests. The intruder tool can test and detect <b>SQL</b> <b>Injections,</b> Cross Site Scripting, parameter manipulation and vulnerabilities susceptible brute-force attacks.|$|R
3000|$|Our {{clustering}} algorithm can {{be easily}} adapted to different kinds of vulnerabilities. Besides <b>SQL</b> <b>injections,</b> {{the results of the}} experiments show that Wasapy also detects XPATH, OS Commanding and File Include vulnerabilities and that it is at least as efficient as the other vulnerability scanners.|$|R
5000|$|An xkcd cartoon {{involved}} a character [...] "Robert'); DROP TABLE students;--" [...] named {{to carry out}} a <b>SQL</b> <b>injection.</b> As a result of this cartoon, <b>SQL</b> <b>injection</b> is sometimes informally referred to as 'Bobby Tables'.|$|E
5000|$|Prepared {{statements}} are resilient against <b>SQL</b> <b>injection,</b> because parameter values, which are transmitted later {{using a different}} protocol, need not be correctly escaped. If the original statement template is not derived from external input, <b>SQL</b> <b>injection</b> cannot occur.|$|E
50|$|An <b>SQL</b> <b>injection</b> is a {{well known}} attack and easily {{prevented}} by simple measures. After an apparent <b>SQL</b> <b>injection</b> attack on Talktalk in 2015, the BBC reported that security experts were stunned that such a large company would be vulnerable to it.|$|E
50|$|A wargame usually {{involves}} a capture the flag logic, based on pentesting, semantic URL attacks, knowledge-based authentication, password cracking, reverse engineering of software (mostly JavaScript, Adobe Flash, and assembly language), code <b>injection,</b> <b>SQL</b> <b>injections,</b> cross-site scripting, exploits, IP address spoofing, and other hacking techniques.|$|R
25|$|The botnet propagates {{itself in}} a {{somewhat}} unusual way, as it actively searches and infects vulnerable websites running Active Server Pages. Once it finds a potential target the botnet performs a <b>SQL</b> <b>Injections</b> on the website, inserting an IFrame which redirects the user visiting the site to a site hosting Malware.|$|R
40|$|This report {{proposes a}} static {{analysis}} technique for detecting many recently discovered application vulnerabilities such as <b>SQL</b> <b>injections,</b> cross-site scripting, and HTTP splitting attacks. These vulnerabilities stem from unchecked input, which is {{widely recognized as}} the most common source of security vulnerabilities in Web applications. We propose a static analysis approach based on a scalable and precise points-to analysis...|$|R
5000|$|Countermeasures against XSS, CSRF, <b>SQL</b> <b>injection,</b> session-stealing, â€¦ ...|$|E
5000|$|Security, {{including}} Cross-site scripting (XSS) and <b>SQL</b> <b>injection</b> ...|$|E
5000|$|Detecting {{security}} vulnerabilities {{based on}} data-flow (<b>SQL</b> <b>injection,</b> XSS, etc.) ...|$|E
50|$|It can be {{used for}} both {{client-side}} and server-side scripting, where complete programs are written in Opa and subsequently compiled to Nodejs on the server and JavaScript on the client, with the compiler automating all communication between the two. Opa implements strong, static typing, which can be helpful in protecting against security issues such as <b>SQL</b> <b>injections</b> and cross-site scripting attacks.|$|R
30|$|Let us note Sr,Sii, and Svi the {{responses}} associated to Rr,Rii, and Rvi, respectively. The principle of our algorithm is then as follows: Rvi requests whose responses are not similar {{to any of}} {{the responses}} from Sii and Sr are considered valid <b>SQL</b> <b>injections.</b> To assess the similarity between the pages returned by different requests, we use a classification technique based on the distance presented in the next subsection.|$|R
5000|$|On March 27, 2011, mysql.com, the {{official}} homepage for MySQL, was compromised by a hacker using <b>SQL</b> blind <b>injection</b> ...|$|R
5000|$|Uses {{prepared}} statements throughout {{to protect}} against <b>SQL</b> <b>injection</b> attacks ...|$|E
50|$|Second order <b>SQL</b> <b>injection</b> {{occurs when}} {{submitted}} values contain malicious commands that are stored rather than executed immediately. In some cases, the application may correctly encode an SQL statement and store it as valid SQL. Then, {{another part of}} that application without controls to protect against <b>SQL</b> <b>injection</b> might execute that stored SQL statement. This attack requires more knowledge of how submitted values are later used. Automated web application security scanners would not easily detect this type of <b>SQL</b> <b>injection</b> and {{may need to be}} manually instructed where to check for evidence that it is being attempted.|$|E
5000|$|<b>SQL</b> <b>{{injection}}</b> [...] is a code injection technique, used {{to attack}} data-driven applications, in which nefarious SQL statements are inserted into an entry field for execution (e.g. {{to dump the}} database contents to the attacker). <b>SQL</b> <b>injection</b> must exploit a security vulnerability in an application's software, for example, when user input is either incorrectly filtered for string literal escape characters embedded in SQL statements or user input is not strongly typed and unexpectedly executed. <b>SQL</b> <b>injection</b> is mostly known as an attack vector for websites but {{can be used to}} attack any type of SQL database.|$|E
30|$|The s e a r c h _v u l n s {{function}} in Algorithm ?? takes a navigation as input parameter. The latest request of this navigation is analyzed to identify vulnerabilities, considering different vulnerability classes (<b>SQL</b> <b>injections,</b> XPATH injections, OS commanding, etc.). This function returns {{a list of}} navigations and, for each of them, one of the identified vulnerabilities. Each new navigation includes one more navigation state that results from the exploitation of one vulnerability. These new navigations are then analyzed by the crwl function.|$|R
40|$|Abstract. Delving into present {{trends and}} anticipating future malware trends, a hybrid, SQL on the server-side, JavaScript on the client-side, {{self-replicating}} worm based on two-stage quines {{was designed and}} implemented on an ad-hoc scenario instantiating a very common software pattern. The proof of concept code combines techniques seen in the wild, {{in the form of}} <b>SQL</b> <b>injections</b> leading to cross-site scripting JavaScript inclusion, and seen in the laboratory, in the form of SQL quines propagated via RFIDs, resulting in a hybrid code injection. General features of hybrid worms are also discussed. ...|$|R
40|$|This paper {{examines}} QR Codes and {{how they}} can be used to attack both human interaction and automated systems. As the encoded information is intended to be machine readable only, a human cannot distinguish between a valid and a maliciously manipulated QR code. While humans might fall for phishing attacks, automated readers are most likely vulnerable to <b>SQL</b> <b>injections</b> and command injections. Our contribution consists of an analysis of the QR Code as an attack vector, showing different attack strategies from the attackers point of view and exploring their possible consequences. 1...|$|R
