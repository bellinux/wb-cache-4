646|1328|Public
25|$|Modern {{versions}} of crystallographic databases {{are based on}} the relational database model. Communication with the database usually happens via a dialect of the <b>Structured</b> <b>Query</b> Language (SQL). Web-based databases typically process the search algorithm on the server interpreting supported scripting elements, while desktop-based databases run locally installed and usually precompiled search engines.|$|E
25|$|Given its {{proximity}} to {{the headquarters of the}} Oracle Corporation, a maker of database software, some have speculated that the airport code of SQL is a humorous reference to this large neighbor; in databases, SQL stands for <b>Structured</b> <b>Query</b> Language. In fact the airport was SQL years before June 16, 1977, the date of incorporation of Software Development Laboratories which became the Oracle corporation.|$|E
25|$|Btrieve was modularized {{starting}} with version 6.15 {{and became one}} of two database front-ends that plugged into a standard software interface called the Micro-Kernel Database Engine. The Btrieve front-end supported the Btrieve API and the other front-end was called Scalable SQL, a relational database product based upon the MKDE that used its own variety of <b>Structured</b> <b>Query</b> Language, otherwise known as SQL. After these versions were released (Btrieve 6.15 and ScalableSQL v4) the company was renamed to Pervasive Software prior to their IPO. Shortly thereafter the Btrieve and ScalableSQL products were combined into the products now known and sold as Pervasive.SQL or PSQL. Btrieve continued for a few years while ScalableSQL was quickly dropped. Customers were encouraged to upgrade to Pervasive.SQL which supported both SQL and Btrieve applications.|$|E
40|$| <b>Structured</b> <b>queries</b> {{were used}} in a drugstore|$|R
40|$|Structured or fielded {{metadata}} is {{the basis}} for many digital library services, including searching and browsing. Yet, {{little is known about the}} impact of using structure on the effectiveness of such services. In this paper, we investigate a key research question: do <b>structured</b> <b>queries</b> improve effectiveness in DL searching? To answer this question, we empirically compared the use of unstructured queries to the use of <b>structured</b> <b>queries.</b> We then tested the capability of a simple Bayesian network system, built on top of a DL retrieval engine, to infer the best <b>structured</b> <b>queries</b> from the keywords entered by the user. Experiments performed with 20 subjects working with a DL containing a large collection of computer science literature clearly indicate that <b>structured</b> <b>queries,</b> either manually constructed or automatically generated, perform better than their unstructured counterparts, in the majority of cases. Also, automatic <b>structuring</b> of <b>queries</b> appears to be an effective and viable alternative to manual structuring that may significantly reduce the burden on users...|$|R
40|$|In this paper, {{we present}} a {{document}} model which integrates the logical structure and hypertext link structure of hyperdocuments in order to manage struc-tured documents with hypertext links. Based on this model we define a new <b>structure</b> <b>query</b> language which expresses the <b>structure</b> <b>query</b> using path expressions. To process a <b>structure</b> <b>query</b> in a document man-agement system which represents structure informa-tion as database relations, costly join operations are used to find a relationship between elements in a doc-ument hierarchy. In order to overcome this problem, schemes based on the parse tree [6] and element lo-cator [2] have been used. In this paper, we propose a new <b>structure</b> <b>query</b> processing scheme that uses unique element identifiers (ND’s) to evaluate struc-ture queries. Our scheme has advantage over previous schemes since it can obtain the UID’s of the ances-tors and descendents directly from the UID of a node without disk access. We present relational database schemas for our scheme {{as well as others}} and com-pare the query processing costs. In order to support direct access to a document el-ement, keyword indices to it should be provided. We propose three kinds of inverted index structures for ef-ficient <b>structure</b> <b>query</b> processing. ...|$|R
500|$|Null (or NULL) is {{a special}} marker used in <b>Structured</b> <b>Query</b> Language to {{indicate}} that a data value {{does not exist in}} the database. [...] Introduced by the creator of the relational database model, E. F. Codd, SQL Null serves to fulfil the requirement that all true relational database management systems (RDBMS) support a representation of [...] "missing information and inapplicable information". [...] Codd also introduced the use of the lowercase Greek omega (ω) symbol to represent Null in database theory. [...] In SQL, NULL is a reserved word used to identify this marker.|$|E
50|$|SUPRA for SQL (<b>structured</b> <b>query</b> language) (1989).|$|E
50|$|SQR (Hyperion SQR Production Reporting, Part of OBIEE) is a {{programming}} language designed for generating reports from database management systems. The name is an acronym of <b>Structured</b> <b>Query</b> Reporter, which suggests its relationship to SQL (<b>Structured</b> <b>Query</b> Language). Any SQL statement can be embedded in an SQR program.|$|E
40|$|Supporting {{search and}} query in a {{hypermedia}} network {{is an important}} issue which should be addressed in the hypermedia systems. Structured hypermedia documents contain well-formed logical structures which can be exploited by <b>structure</b> <b>queries.</b> By using the powerful <b>structure</b> <b>query</b> facilities, users of the hypermedia systems can easily locate any interested portion of the hypermedia documents and obtain greater benefits than by just moving around the hypertext network following hyperlinks. In this paper, we provide approaches related to the storage and retrieval of structured hypermedia documents based on the database paradigm in order to support <b>structure</b> <b>queries.</b> We define a hypermedia document model to represent logical document structures. Based on the model, we present a <b>structure</b> <b>query</b> language which has a powerful addressing capability. We illustrate an efficient index structure for structured hypermedia documents using structure-bearing element identifiers. We also provide a vers [...] ...|$|R
5000|$|XML or JSON data <b>structure</b> <b>queries</b> (with full-text, {{exact match}} and binary match options) or Essential SQL queries for {{analytics}} ...|$|R
40|$|Abstract We {{studied the}} effects of query {{expansion}} and <b>query</b> <b>structure</b> on retrieval performance. Two sets of words frequent in relevant documents for Genomics Track’s training topics were collected, the first manually and the second automatically. The high frequency words collected {{and the names of}} organisms designated in the test topics, were used as expansion keys in gene name queries formed from the final test topics. The results indicated that Boolean <b>structured</b> <b>queries</b> expanded with automatically collected high frequency words and names of organisms performed considerably better than queries containing gene names only as keys. In the Boolean queries the expansion keys were categorized based on the aspects they represent in the documents discussing gene function. All the <b>structured</b> <b>queries</b> performed better than unstructured queries where each key contributed equally to document weights. In the <b>structured</b> <b>queries</b> gene names were assigned more weight than the expansion keys. 1...|$|R
5000|$|Knowledge of <b>structured</b> <b>query</b> {{language}} (SQL), e.g. SQL/PSM or Transact-SQL ...|$|E
5000|$|Parsing the MDX {{language}} into <b>Structured</b> <b>Query</b> Language (SQL) {{to retrieve}} answers to dimensional queries ...|$|E
50|$|The {{relational}} database model introduced a programming-language independent <b>Structured</b> <b>Query</b> Language (SQL), based on relational algebra.|$|E
40|$|Pirkola's <b>structured</b> <b>queries</b> {{have been}} shown to perform well for word-based cross-language {{information}} retrieval in European languages, but in monolingual Chinese retrieval experiments it is often found that character bigrams perform as well as, and sometimes better than, automatically segmented words. During the Mandarin-English Information (MEI) project at the Johns Hopkins Summer 2000 Workshop, Pirkola's <b>structured</b> <b>queries</b> were compared with an alternative technique known as balanced translation. The results suggested that balanced translation coupled with post-translation character bigram resegmentation could outperform Pirkola's word-based technique. The NTCIR- 2 English/Chinese Information Retrieval (ECIR) evaluation provided the opportunity to replicate this experiment on a far larger collection. The results show that on the ECIR collection, Pirkola's <b>structured</b> <b>queries</b> outperform balanced translation, even when post-translation character bigram resegmentation was used. This pape [...] ...|$|R
40|$|As the web evolves, {{increasing}} {{quantities of}} structured information {{is embedded in}} web pages in disparate formats. For example, a digital camera???s description may include its price and megapixels whereas a professor???s description may include her name, university, and research interests. Both types of pages may include additional ambiguous information. General search engines (GSEs) do not support queries over these types of data because they ignore the web document semantics. Conversely, describing requisite semantics through <b>structured</b> <b>queries</b> into databases populated by information extraction (IE) techniques are expensive and not easily adaptable to new domains. This paper describes a methodology for rapidly developing search engines capable of answering <b>structured</b> <b>queries</b> over unstructured corpora by utilizing machine learning to avoid explicit IE. We empirically show that with minimum additional human effort, our system outperforms a GSE with respect to <b>structured</b> <b>queries</b> with clear object semantics...|$|R
5000|$|Several {{applications}} {{were developed}} {{during this time}} {{to make use of}} Wikipedia's data in order to improve both <b>structured</b> <b>querying</b> and natural-language searching. These included: ...|$|R
50|$|The {{most common}} query {{language}} {{used with the}} relational model is the <b>Structured</b> <b>Query</b> Language (SQL).|$|E
5000|$|ISO/IEC 9075 standard: [...] "Information {{technology}} - Database languages - SQL", {{which describes}} <b>Structured</b> <b>Query</b> Language.|$|E
5000|$|UML to <b>structured</b> <b>query</b> {{language}} (SQL)-based logical {{data models}} as supported by IBM Rational Data Architect software.|$|E
5000|$|... elemental, {{a web-based}} {{structure}} drawing tool for drawing simple chemical structures or complex <b>structure</b> <b>queries</b> directly within a webpage. Also available as an iOS app.|$|R
40|$|Non-trivial search predicates {{beyond mere}} {{equality}} {{are at the}} current focus of P 2 P research. <b>Structured</b> <b>queries,</b> as an important type of non-trivial search, have been studied extensively mainly for unstructured P 2 P systems so far. As unstructured P 2 P systems do not use indexing, <b>structured</b> <b>queries</b> are very easy to implement since they can be treated equally to {{any other type of}} query. However, this comes at the expense of very high bandwidth consumption and limitations in terms of guarantees and expressiveness that can be provided. Structured P 2 P systems are an efficient alternative as they typically offer logarithmic search complexity in the number of peers. Though the use of a distributed index (typically a distributed hash table) makes the implementation of <b>structured</b> <b>queries</b> more efficient, it also introduces considerable complexity, and thus only a few approaches exist so far. In this paper we present a first solution for efficiently supporting <b>structured</b> <b>queries,</b> more specifically, XPath <b>queries,</b> in <b>structured</b> P 2 P systems. For the moment we focus on supporting queries with descendant axes ("//") and wildcards ("*") and do not address joins. The results presented in this paper provide foundational basic functionalities to be used by higher-level query engines for more efficient, complex query support...|$|R
40|$|Pirkola’s <b>structured</b> <b>queries</b> {{have been}} shown to perform well for word-based cross-language {{information}} retrieval in European languages, but in monolingual Chinese retrieval experiments it is often found that character bigrams perform as well as, and sometimes better than, automatically segmented words. During the Mandarin-English Information (MEI) project at the Johns Hopkins Summer 2000 Workshop, Pirkola’s <b>structured</b> <b>queries</b> were compared with an alternative technique known as balanced translation. The results suggested that balanced translation coupled with post-translation character bigram resegmentation could outperform Pirkola’s word-based technique. The NTCIR- 2 English/Chinese Information Retrieval (ECIR) evaluation provided the opportunity to replicate this experiment on a far larger collection. The results show that on the ECIR collection, Pirkola’s <b>structured</b> <b>queries</b> outperform balanced translation, even when post-translation character bigram resegmentation was used. This paper contrasts the MEI results with Maryland’s ECIR experiments and identifies some possible causes for the observed differences...|$|R
50|$|Interactive {{access to}} the Oracle Rdb can be by SQL (<b>Structured</b> <b>Query</b> Language), RDO (Relational Database Operator), or both.|$|E
50|$|Presto is an {{open-source}} software {{project to}} develop a database query engine using the standard <b>Structured</b> <b>Query</b> Language (SQL).|$|E
50|$|Consist of schema-agnostic queries using keyword queries. In {{this case}} the syntax and {{semantics}} of operators {{are different from the}} <b>structured</b> <b>query</b> syntax.|$|E
40|$|Pirkola's word-based <b>structured</b> <b>queries</b> {{have been}} shown to perform well for word-based cross-language {{information}} retrieval in European languages. Monolingual Chinese retrieval experiments, by contrast often find that character bigrams perform as well as (and sometimes better than) automatically segmented words. During the Mandarin-English Information (MEI) project at the Johns Hopkins Summer 2000 Workshop, Pirkola's <b>structured</b> <b>queries</b> were compared with an alternative technique known as balanced translation. The results suggested that balanced translation coupled with post-translation character bigram resegmentation might outperform Pirkola's word-based technique. The NTCIR- 2 English/Chinese Information Retrieval (ECIR) evaluation provided the opportunity to replicate this experiment on a far larger collection. The results showed that on the ECIR collection, (1) the best word-based and overlapping character bigram-based techniques we tried performed comparably; (2) with word-based retrieval, Pirkola's <b>structured</b> <b>queries</b> outperformed balanced translation; (3) with overlapping character bigrambased retrieval, a technique analogous to Pirkola's method performed comparably with balanced translation; and (4) using all known translation alternatives significantly outperformed using the three most frequent translation alternatives. ...|$|R
40|$|In {{this paper}} {{we present a}} {{systematic}} analysis of document retrieval using unstructured and <b>structured</b> <b>queries</b> within the score region algebra (SRA) structured retrieval framework. The behavior of di®erent retrieval models, namely Boolean, tf. idf, GPX, language models, and Okapi, is tested using the transparent SRA framework in our three-level structured retrieval system called TIJAH. The retrieval models are implemented along four elementary retrieval aspects: element and term selection, element score computation, score combination, and score propagation. The analysis is performed on a numerous experiments evaluated on TREC and CLEF collections, using manually generated unstructured and <b>structured</b> <b>queries.</b> Unstructured queries range from the short title queries to long title + description + narrative <b>queries.</b> For generating <b>structured</b> <b>queries</b> we exploit {{the knowledge of the}} document structure and the content used to semantically describe or classify documents. We show that such structured information can be utilized in retrieval engines to give more precise answers to user queries then when using unstructured queries...|$|R
40|$|Much {{research}} {{has been carried out}} in order to man-age structured documents such aa SGML documents and to provide powerful query facilities which exploit document structures as well as document contents. In order to perform <b>structure</b> <b>queries</b> efficiently in a structured document management system, an index struc-ture which supports fast document element access must be provided. However, there has been little research on the index structures for structured documents. In this paper, we propose various kinds of new inverted indexing schemes and signature file schemes for eficient <b>structure</b> <b>query</b> processing. We evaluate the storage re-quirements and disk access times of our schemes and present the analytical and experiment al results...|$|R
5000|$|SQL/DS (<b>Structured</b> <b>Query</b> Language/Data System), {{released}} in 1981, was IBM's first commercial relational database management system. It implemented the SQL database query language.|$|E
5000|$|Tools {{to connect}} to dynamic-link library (DLL), <b>Structured</b> <b>Query</b> Language (SQL), Java, [...]NET, C++, Fortran, CUDA, OpenCL, and Hypertext Transfer Protocol (HTTP) based systems ...|$|E
5000|$|In 2009, he {{was made}} a Fellow of the Computer History Museum [...] "for his {{fundamental}} work on <b>structured</b> <b>query</b> language (SQL) and database architectures." ...|$|E
40|$|This paper {{provides}} an overview of experiments carried out at the TREC 2004 Terabyte Track using the Indri search engine. Indri is an efficient, effective distributed search engine. Like INQUERY, {{it is based on the}} inference network framework and supports <b>structured</b> <b>queries,</b> but unlike INQUERY, it uses language modeling probabilities within the network which allows for added flexibility. We describe our approaches to the Terabyte Track, all of which involved automatically constructing <b>structured</b> <b>queries</b> from the title portions of the TREC topics. Our methods use term proximity information and HTML document structure. In addition, a number of optimization procedures for efficient query processing are explained...|$|R
40|$|There is {{a growing}} {{consensus}} that it is desirable to <b>query</b> over the <b>structure</b> implicit in unstructured documents, and that ideally this capability should be provided incrementally. However, {{there is no consensus}} about what kind of system should be used to support this kind of incremental capability. We explore using a relational system as the basis for a workbench for extracting and <b>querying</b> <b>structure</b> from unstructured data. As a proof of concept, we applied our relational approach to support <b>structured</b> <b>queries</b> over Wikipedia. We show that the data set is always available for some form of querying, and that as it is processed, users can pose a richer set of <b>structured</b> <b>queries.</b> We also provide examples of how we can incrementally evolve our understanding of the data {{in the context of the}} relational workbench. 1...|$|R
40|$|The {{effects of}} <b>query</b> <b>structures</b> and <b>query</b> {{expansion}} (QE) on retrieval performance were tested with a best match retrieval system (INQUERY). <b>Query</b> <b>structure</b> means {{the use of}} operators to express the relations between search keys. Eight different structures were tested, representing weak structures (averages and weighted averages of the weights of the keys) and strong <b>structures</b> (e. g., <b>queries</b> with more elaborated search key relations). QE was based on concepts, which were first selected from a conceptual model, and then expanded by semantic relationships given in the model. The expansion levels were (a) no expansion, (b) a synonym expansion, (c) a narrower concept expansion, (d) an associative concept expansion, and (e) a cumulative expansion of all other expansions. With weak structures and Boolean <b>structured</b> <b>queries,</b> QE was not very effective. The best performance was achieved {{with one of the}} strong structures at the largest expansion level...|$|R
