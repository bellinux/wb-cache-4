131|379|Public
2500|$|He opposes cuts to Medicare or Social Security {{benefits}} for current retirees. He supports privatizing (or [...] "personalizing") Social Security and Medicare for younger workers. He would remove {{the federal government}} as the social security provider and give states the option of providing their own social <b>security</b> <b>type</b> programs.|$|E
5000|$|... #Subtitle level 2: Information flow {{policy in}} <b>security</b> <b>type</b> systems ...|$|E
50|$|A <b>security</b> <b>type</b> {{system is}} a kind of type system that can be used by {{software}} developers in order to control the information flow in their code. A <b>security</b> <b>type</b> system consists of several rules that will be used to verify a given information flow policy in a computer program, usually at compile-time. This can reveal if there is any violation of confidentiality or integrity in the program.|$|E
50|$|Developers {{are free}} to add {{additional}} encoding and <b>security</b> <b>types</b> but they must book unique identification numbers for these with the maintainers of the protocol so that the numbers do not clash. Clashing type numbers would cause confusion when handshaking a connection and break cross-compatibility between implementations. The list of encoding and <b>security</b> <b>types</b> is maintained by RealVNC Ltd and is separate from the protocol specification so that new types can be added without requiring the specification to be reissued.|$|R
40|$|This paper {{addresses}} {{the problem of}} checking programs written in an object-oriented language {{to ensure that they}} satisfy the information flow policies, confidentiality and integrity. Policy is specified using <b>security</b> <b>types.</b> An algorithm that infers such <b>security</b> <b>types</b> in a modular manner is presented. The specification of the algorithm involves inference for libraries. Library classes and methods maybe parameterized by security levels. It is shown how modular inference is achieved in the presence of method inheritance and override. Soundness and completeness theorems for the inference algorithm are given...|$|R
5000|$|... 4. The <b>security</b> <b>types</b> and asset {{classes to}} be {{included}} in or excluded from the portfolio, and the basic allocation among asset categories and the variance (rebalancing) limits for this allocation.|$|R
50|$|Whether {{a program}} {{satisfies}} noninterference or not can be evaluated during compilation assuming {{the presence of}} <b>security</b> <b>type</b> systems.|$|E
50|$|The {{soundness}} of a <b>security</b> <b>type</b> {{system can be}} informally defined as: If program P is well typed, P satisfies non-interference.|$|E
50|$|A {{package unit}} {{is a type}} of {{financial}} instrument that is traded on the London Stock Exchange under <b>security</b> <b>type</b> code 'PU'.|$|E
40|$|In {{this paper}} we examine {{integration}} between emerging and U. S. debt and equity markets. We first investigate price changes around significant "events," {{in this case}} changes in short-term U. S. interest rates brought about by actions of the Federal Reserve. Second, we estimate the predictability of returns using both domestic and U. S. variables. Finally, we test whether a single latent variable can explain these returns. The {{evidence suggests that the}} degree of integration varies with <b>security</b> <b>types</b> and the country of origin. However, these differences between <b>security</b> <b>types</b> become less apparent over time. Financial markets; International finance...|$|R
5000|$|... where [...] is {{the number}} of sources of capital (<b>securities,</b> <b>types</b> of liabilities); [...] is the {{required}} rate of return for security and [...] is the market value of all outstanding securities [...]|$|R
40|$|We {{address the}} problem of {{checking}} programs written in a Java-like language, to ensure that they satisfy information flow policies like confidentiality and integrity in the presence of dynamic access control mechanisms like stack inspection. Security policy is specified using permission dependent <b>security</b> <b>types.</b> We present an inference algorithm that infers such <b>security</b> <b>types</b> in a modular manner. For an object-oriented language, this involves inference in the presence of libraries, i. e., classes parameterized by security levels. Moreover we show how modular inference is preserved in the presence of method inheritance and override. We discuss a prototype implementation and prove soundness of the algorithm...|$|R
50|$|In a {{programming}} language augmented with a <b>security</b> <b>type</b> system every expression carries both a type (such as boolean, or integer) and a security label.|$|E
5000|$|The {{weak and}} {{fragmented}} nature of many collective <b>security</b> <b>type</b> arrangements - {{such as the}} AU (African Union) - weak clones of the NATO concept ...|$|E
5000|$|Following is {{a simple}} <b>security</b> <b>type</b> system from [...] that enforces non-interference.The {{notation}} [...] means that the expression [...] has type [...] Similarly, [...] means that the command [...] is typable in the security context [...]|$|E
50|$|Swiss Re Capital Markets has {{developed}} new <b>security</b> <b>types</b> such as earthquake bonds. Swiss Re Capital Markets also developed the parametric index trigger, the ILS shelf program, the first ILS synthetic CDO, {{and the first}} extreme mortality bond (linked to life risk).|$|R
5000|$|Assetz Capital has {{a number}} of {{dedicated}} investment accounts. Target rates of interest vary based on the types of loans they invest in, <b>security</b> <b>types,</b> diversification of your investment, ease of access to funds in normal market conditions and any additional cover such as a provision fund.|$|R
40|$|IDSISM {{services}} are a central source of bulk U. S. and Canadian securities information for data processing operations, brokerage accounting, trust operations, and portfolio accounting at banks, brokerage firms, insurance companies, and other securities-related businesses. IDSI provides data {{for a range}} of <b>security</b> <b>types,</b> delivered via a variety of options, including...|$|R
50|$|In 2007, the Sheriff Division was {{the first}} agency {{in the state to}} be {{certified}} with a Department of Homeland <b>Security</b> <b>type</b> III SWAT Team. The team could respond to an incident on state property on any island if it were needed.|$|E
50|$|In simple terms, {{by using}} a <b>security</b> <b>type</b> system, you want to detect if there exists any kind of violiation of {{confidentiality}} or integrity in your program, i.e. you want to detect if the program {{is in line with}} the information flow policy or not.|$|E
50|$|A {{prominent}} way {{to enforce}} information flow policies {{in a program}} is through a <b>security</b> <b>type</b> system: that is, a type system that enforces security properties. In such a sound type system, if a program type-checks, it meets the flow policy and therefore contains no improper information flows.|$|E
40|$|We {{consider}} a sequential object-oriented language with pointers and mutable state, private fields and classbased visibility, dynamic binding and inheritance, recursive classes, casts and type tests, and recursive methods. Programs are annotated with security levels, constrained by <b>security</b> <b>typing</b> rules. A noninterference theorem {{shows how the}} rules ensure pointer confinement and secure information flow...|$|R
50|$|Security Management: manages user {{security}} {{quickly and}} effectively {{to protect the}} Dynamics GP system. Different <b>security</b> <b>types</b> can be assigned to fields through Dynamics GP using a single Explorer-style interface and security errors can be identified and fixed quickly using the interactive dialogs to help eliminate the need to change login user and minimize IT administration.|$|R
5000|$|The {{prison is}} used to house up to maximum <b>security</b> <b>types</b> of inmates. Unlike the Utah State Prison located in Draper, CUCF {{is located in a}} rural part of the state, and thus more {{isolated}} from the main population centers of Utah. [...] The prison is undergoing an expansion and is adding 192 beds to meet the growing needs of Utah's offender population.|$|R
5000|$|He opposes cuts to Medicare or Social Security {{benefits}} for current retirees. He supports privatizing (or [...] "personalizing") Social Security and Medicare for younger workers. He would remove {{the federal government}} as the social security provider and give states the option of providing their own social <b>security</b> <b>type</b> programs.|$|E
5000|$|The {{main part}} of the <b>security</b> <b>type</b> system is the rules. They say how we should {{decompose}} our program, and how type verification should be performed. Our toy program consists of a conditional test, and two possible variable assignments. Rules for these two events are defined as follows: ...|$|E
50|$|In {{computer}} science, a type {{system can}} be described as a syntactic framework which contains a set of rules that are used to assign a type property (int, boolean, char etc.) to various components of a computer program, such as variables or functions. A <b>security</b> <b>type</b> system works in a similar way, only with a main focus on the security of the computer program, through information flow control. Thus, the various components of the program are assigned security types, or labels. The aim of a such system is to ultimately be able to verify that a given program conforms to the type system rules and satisfies non-interference. <b>Security</b> <b>type</b> systems is one of many security techniques used in the field of language-based security, and is tightly connected to information flow and information flow policies.|$|E
40|$|Abstractâ€”This paper {{studies the}} {{foundations}} of informationflow security for interactive programs. Previous research assumes that the environment is total, that is, it must always be ready to feed new inputs into programs. However, programs secure under this assumption can leak the presence of input. Such leaks can be magnified to whole-secret leaks in the concurrent setting. We propose a framework that generalizes previous research along two dimensions: first, the framework breaks away from {{the totality of the}} environment and, second, the framework features fine-grained <b>security</b> <b>types</b> for communication channels, where we distinguish between the security level of message presence and message content. We show that the generalized framework features appealing compositionality properties: parallel composition of secure program results in a secure thread pool. We also show that modeling environments as strategies leads to strong compositionality: various types of composition (with and without scoping) follow from our general compositionality result. Further, we propose a type system that supports enforcement of security via fine-grained <b>security</b> <b>types...</b>|$|R
50|$|Some Identity Assertion Providers support several <b>security</b> token <b>types</b> - such as SAML, SPNEGO, and X.509.|$|R
40|$|We {{present a}} {{bottom-up}} type inference algorithm for <b>security</b> <b>types</b> in Mobile Ambients. The algorithm, given an untyped process $P$, calculates the minimal set of constraints on security levels such {{that all the}} actions during a run of $P$ can be performed without violating the security level priorities. Our algorithm appears as a preliminary step {{in order to use}} type systems to ensure security properties in the web scenario...|$|R
5000|$|... x11vnc has {{security}} features {{that allows the}} user to set an access password or to use Unix usernames and passwords. It also has options for connection via a secure SSL link. An SSL Java VNC viewer applet is provided that enables secure connections from a web browser. The VeNCrypt SSL/TLS VNC <b>security</b> <b>type</b> is also supported.|$|E
50|$|During his term, MejÃ­a {{attempted}} to spread government resources {{and services to}} thousands of smaller, rural communities scattered around the country instead of the traditional efforts to concentrate on big cities (where most voters live). He established the country's first social <b>security</b> <b>type</b> retirement system, and created a fixed advanced corporate tax of 1.5% to aid in government revenue collection.|$|E
5000|$|Note {{that the}} rule [...] is a {{subsumption}} rule, which means that any command that is of <b>security</b> <b>type</b> [...] can be also be [...] For example, [...] can be both [...] and [...] This is called [...] polymorphism in type theory. Similarly, the type of an expression [...] that satisfies [...] can be both [...] and [...] according to [...] and [...] respectively.|$|E
50|$|TBA CUSIPs incorporate, {{within the}} {{identifier}} itself, a <b>securityâ€™s</b> mortgage <b>type</b> (Ginnie Mae, Fannie Mae, Freddie Mac), coupon, maturity and settlement month.|$|R
40|$|As the Bush {{administration}} {{began its}} war on terror, it {{turned to the}} wrong people for policy advice. Uninformed pundits and shadowy <b>security</b> <b>types</b> were given a free hand, and they lumped all Islamists together. When academics criticized this approach, they were {{shut out of the}} corridors of power. But it turns out the Middle East specialists were right all along. The best way to win the fight against the jihadists is to expose them as a violent fringe...|$|R
40|$|We {{propose a}} method to analyze secure {{information}} flow in stack-based assembly languages, communicating with the external environment by means of input and output channels. The method computes for each instruction a security level for each memory variable and stack element. Instruction-level security analysis is flow-sensitive and hence is more precise than other analyses, such as standard <b>security</b> <b>typing.</b> Instruction-level <b>security</b> analysis is specified {{in the framework of}} abstract interpretation. We define concrete operational semantics which handles, in addition to execution aspects, the flow of information of the program. The basis of the approach is that each value is annotated by a security level and that the abstract domain is obtained from the concrete one by keeping the security levels and forgetting the actual values. Operand stack are abstracted as fixed-length stacks of security levels. An abstract state is a map from instructions to abstract machine. configurations, where values are substituted by security levels. The abstract semantics consists of a set of abstract rules manipulating abstract states. The instruction-level <b>security</b> <b>typing</b> can be performed by an efficient fixpoint iteration algorithm, similar to that used by bytecode verification. (c) 2007 Elsevier Inc. All rights reserved...|$|R
