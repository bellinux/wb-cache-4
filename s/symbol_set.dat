213|384|Public
2500|$|Let S be {{a set of}} 2n elements. A Howell design, H(s,2n) (on <b>symbol</b> <b>set</b> S) is an s × s array such that: ...|$|E
2500|$|SignWriting is {{the first}} writing system for sign {{languages}} {{to be included in}} the Unicode Standard. 672 characters were added in the Sutton SignWriting (Unicode block) of Unicode version 8.0 released in June 2015. [...] This set of characters is based on SignWriting's standardized <b>symbol</b> <b>set</b> and defined character encoding model.|$|E
2500|$|The {{sheer size}} of its <b>symbol</b> <b>set</b> and the fine details which can be written create a {{challenge}} in learning how to write. It also means that the written form is largely situational and inventive; different people may write the same sign different ways, and a single person may vary between transcriptions.|$|E
30|$|In addition, it is {{possible}} to perform offline optimization of <b>symbol</b> <b>sets</b> to resolve specific near-far scenarios. The resulting <b>symbol</b> <b>sets</b> would be kept at the transmitters' <b>symbol</b> <b>sets</b> tables and used when the receiver dims it appropriate. This possibility does not exist in a classical CDMA system.|$|R
40|$|Visual process {{models are}} helpful when {{analyzing}} and improving complex organizational processes. However, the <b>symbol</b> <b>sets</b> used in different modeling notations vary in perceptual discriminability, visual expressiveness, and semantic transparency; such factors {{are likely to}} influence a notation’s perception and cognitive effectiveness. In this paper, we investigate whether the basic <b>symbol</b> <b>sets</b> in visual process modeling languages influence comprehension and cognitive load of process models. For this purpose, we analyze four different <b>symbol</b> <b>sets</b> in an experiment with model comprehension tasks carried out by 136 participants. Our results indicate that notational deficiencies concerning perceptual discriminability and semiotic clarity have measurable effects on comprehension, cognitive load, and {{the time needed to}} understand the models...|$|R
3000|$|... (peak power {{constraint}} on transmitted power). Finding the best BB <b>symbol</b> <b>sets</b> is explicitly formulated as follows.|$|R
2500|$|Semantic Compaction uses short symbol {{sequences}} {{and provides}} a single overlay to diminish the need of switching screens to find additional vocabulary items. [...] The vocabulary icons provide multiple meanings which {{reduce the need for}} a large <b>symbol</b> <b>set.</b> [...] The chart below compares 3 common methods used to represent language on an AAC device: ...|$|E
2500|$|The Unicode Standard only {{covers the}} <b>symbol</b> <b>set.</b> [...] It {{does not address}} layout, the {{positioning}} of the symbols in two dimensions. [...] Historically, software has recorded position using Cartesian (X-Y) coordinates for each symbol. [...] Since Unicode focuses on symbols that make sense in a one-dimensional plain-text context, the number characters required for 2-dimensional placement {{were not included in}} the Unicode proposal.|$|E
2500|$|In mathematics, in {{the area}} of {{combinatorial}} designs, an orthogonal array is a [...] "table" [...] (array) whose entries come from a fixed finite set of symbols (typically, {1,2,...,n}), arranged {{in such a way that}} there is an integer t so that for every selection of t columns of the table, all ordered t-tuples of the symbols, formed by taking the entries in each row restricted to these columns, appear the same number of times. The number t is called the strength of the orthogonal array. Here is a simple example of an orthogonal array with <b>symbol</b> <b>set</b> {1,2} and strength 2: ...|$|E
40|$|A simple associationist {{neural network}} learns to factor {{abstract}} rules (i. e. representations which accommodate unseen <b>symbol</b> <b>sets</b> {{as well as}} unseen but similar grammars. The neural network is shown {{to have the ability}} to transfer grammatical knowledge to both new symbol vocabularies and new grammars. structures of the input, and is not simply memorizing the input strings. These representations are context sensitive, hierarchical and are based on the state variable of the finite state machines that the neural network has learned. Generalization to new <b>symbol</b> <b>sets</b> or grammars arises from the spatial nature of the internal representations used by the network, allowing new <b>symbol</b> <b>sets</b> to be encoded close to <b>symbol</b> <b>sets</b> that have already been learned in the hidden unit space of the network. The results are counter to the arguments that learning algorithms based on weight adaptation after each exemplar presentation (such as the long term potentiation found in the mammalian nervous system) cannot in principle extract symbolic knowledge from positive examples as prescribed by prevailing human linguistic theory and evolutionary psychology. 1...|$|R
3000|$|In this illustrative Rayleigh fading scenario, subcarriers are {{overloaded}} by 3 transmitters in a JCMA <b>setting.</b> The <b>symbol</b> <b>sets</b> [...]...|$|R
3000|$|The <b>symbol</b> <b>sets</b> are {{determined}} offline. For additive Gaussian noise, the minimum Euclidian distance {{in the joint}} constellation represented by [...]...|$|R
2500|$|Unity is a Minspeak {{software}} program that operates {{based on the}} idea that 400 core words make up the majority of spoken language and that additional words are part of a fringe vocabulary. Unity teaches preschool children language concepts using single picture symbols. [...] Initially, each picture in the system represents one word, but a more advanced communicator can combine short sequences of pictures to create words or phrase. [...] Unity has three levels which progress from beginning to advanced communicators, ranging from an initial icon set of 45 symbols and progressing up to an icon set of 144 symbols. These symbol systems use categorization and association to create symbol sequences. The most commonly used core words are found on the main screen of the Unity system, with additional screens featuring less common core and fringe vocabulary words. [...] Part of Speech Markers may also be used in this <b>symbol</b> <b>set,</b> such that the concept [...] "Hot" [...] is generated by a sequence containing a symbol and the Part of Speech Marker [...] "Adjective". Unity also gives the user the opportunity to add his or her own words to the system's fringe vocabulary. If the user wants to add a word such as [...] "magnificent" [...] that is not already included in the fringe vocabulary, the user can utilize the meanings of existing icons to derive the new word. For example, combining the icon [...] "elephant" [...] symbolizes something large and the icon [...] "sunrise" [...] symbolizes something bright or beautiful. Users are able to program these two icons in sequence to represent the word [...] "magnificent".|$|E
50|$|Hewlett-Packard uses {{a similar}} concept in its HP-UX {{operating}} {{system and its}} Printer Command Language (PCL) protocol for printers (either for HP printers or not). The terminology, however, is different: What others call a character set, HP calls a <b>symbol</b> <b>set,</b> and what IBM or Microsoft call a code page, HP calls a <b>symbol</b> <b>set</b> code. HP developed a series of symbol sets, each with an associated <b>symbol</b> <b>set</b> code, to encode both its own character sets and other vendors’ character sets.|$|E
50|$|<b>Symbol</b> <b>Set</b> 14J — Ventura U. S.|$|E
50|$|Various <b>symbol</b> <b>sets</b> {{are used}} to {{represent}} numbers in the Hindu-Arabic numeral system, most of which developed from the Brahmi numerals.|$|R
5000|$|Unicode 5.2 {{introduces}} the symbol ⛽ (U+26FD FUEL PUMP) to the Miscellaneous <b>Symbols</b> <b>set.</b> It is representable in HTML as [...] or [...]|$|R
3000|$|... {{defined in}} (3) being the {{optimizing}} criterion and (4) being the optimization constraint. The following <b>symbol</b> <b>sets</b> were found offline and assigned arbitrarily to the transmitters: [...]...|$|R
50|$|<b>Symbol</b> <b>Set</b> 0U — ISO 6: 7-bit U.S.|$|E
50|$|<b>Symbol</b> <b>Set</b> 1E — ISO 4: 7-bit U. K.|$|E
5000|$|<b>Symbol</b> <b>Set</b> 14P — ABICOMP International (Practically {{the same}} as ABICOMP) ...|$|E
2500|$|In PCL, UTF-8 {{is called}} Symbol-ID [...] "18N" [...] (PCL {{supports}} 183 character encodings, called <b>Symbol</b> <b>Sets,</b> which potentially {{could be reduced}} to one, 18N, that is UTF-8).|$|R
30|$|In addition, {{the figure}} shows the {{subtractor}} operator {{required to perform}} the subtraction operation of minimum pairs corresponding to <b>symbol</b> <b>sets</b> X_ 0 ^i and X_ 1 ^i.|$|R
5000|$|In PCL, UTF-8 {{is called}} Symbol-ID [...] "18N" [...] (PCL {{supports}} 183 character encodings, called <b>Symbol</b> <b>Sets,</b> which potentially {{could be reduced}} to one, 18N, that is UTF-8).|$|R
5000|$|<b>Symbol</b> <b>Set</b> 14R — PC Ukrainian (Practically {{the same}} as RUSCII) ...|$|E
5000|$|<b>Symbol</b> <b>Set</b> 27U — PC Latvian Russian (also {{known as}} 866-Latvian) ...|$|E
5000|$|<b>Symbol</b> <b>Set</b> 0R — ISO 8859-5 Latin/Cyrillic (1986 version — IR 111) ...|$|E
5000|$|A metavariable (or metalinguistic or metasyntactic variable) is a <b>symbol</b> or <b>set</b> of <b>symbols</b> in a {{metalanguage}} {{which stands}} for a <b>symbol</b> or <b>set</b> of <b>symbols</b> in some object language. For instance, in the sentence: ...|$|R
50|$|Interesting {{properties}} exist {{when the}} base is not fixed or positive and when the digit <b>symbol</b> <b>sets</b> denote negative values. There are many more variations. These systems are of practical and theoretic value to computer scientists.|$|R
3000|$|... <b>symbol</b> <b>sets,</b> the receiver's {{observation}} {{space is}} divided to decision regions with a constellation {{point at the}} center of each region. The ML decoding problem in Gaussian noise reduces to finding the decision region in which the received sample is located.|$|R
5000|$|<b>Symbol</b> <b>Set</b> 10J — PS Text (Practically {{the same}} as Adobe Standard) ...|$|E
5000|$|<b>Symbol</b> <b>Set</b> 10N — ISO 8859-5 Latin/Cyrillic (1988 version — IR 144) ...|$|E
5000|$|<b>Symbol</b> <b>Set</b> 10V — CP-864 (Practically {{the same}} as code page 864) ...|$|E
5000|$|These <b>symbol</b> <b>sets</b> can {{be divided}} into three main families: Arabic numerals used in the Greater Maghreb and in Europe, Eastern Arabic numerals (also called [...] "Indic numerals") used in the Middle East, and the Indian numerals used in the Indian subcontinent.|$|R
25|$|The Unicode Miscellaneous <b>Symbols</b> <b>set</b> {{includes}} all the symbols necessary for FAN. In order to display or print these symbols, {{one has to}} have one or more fonts with good Unicode support installed on the computer, that the Web page, or word processor document, etc., uses.|$|R
5000|$|Given a set [...] of {{variable}} <b>symbols,</b> a <b>set</b> [...] of constant <b>symbols</b> and <b>sets</b> [...] of -ary function symbols, also called operator symbols, for each natural number , {{the set of}} (unsorted first-order) terms [...] is recursively defined to be the smallest set with the following properties: ...|$|R
