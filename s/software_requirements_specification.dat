153|6657|Public
5000|$|Requirements {{analysis}} {{resulting in}} a <b>software</b> <b>requirements</b> <b>specification</b> ...|$|E
5000|$|<b>Software</b> <b>Requirements</b> <b>Specification</b> (SRS) - The {{requirements}} {{to be met}} by a Computer Software Configuration Item (CSCI) ...|$|E
5000|$|The <b>Software</b> <b>Requirements</b> <b>Specification</b> (SRS) is a {{communication}} tool between stakeholders and software designers. The specific {{goals of the}} SRS are: ...|$|E
40|$|Abstract. Assuring {{the quality}} of <b>software</b> <b>requirement</b> <b>specifications</b> is critical. Poor <b>requirement</b> <b>specifications</b> may make costly errors during the {{development}} process. Therefore methods and techniques for verification and validation of <b>software</b> <b>requirement</b> <b>specifications</b> are fundamentally important. This survey presents taxonomy of verification and validation of <b>requirements</b> and <b>specifications</b> that represents the “flow ” from <b>requirements</b> to <b>specifications...</b>|$|R
50|$|A <b>Software</b> <b>Requirement</b> <b>Specification</b> {{document}} (SRS) {{might be}} created using a software tool as general as {{a word processor}} or a electronic spreadsheet; but, there are several specialized tools {{to carry out this}} activity.|$|R
40|$|In {{this paper}} we propose an {{approach}} for the enhancement of <b>software</b> <b>requirements</b> <b>specifications</b> by combining human factors and requirements engineering concepts. The approach we propose uses cognitive engineering methods to increase understanding about how professionals perform complex work, {{taking into account the}} cognitive effort made by workers. We employed the suggested the approach {{in the context of a}} primary health care facility in Brazil to demonstrate that including human factors models improved the understanding of context, decision making and informal knowledge, enhancing <b>software</b> <b>requirements</b> <b>specifications.</b> Our results point out that a richer set of requirements was obtained, increasing the reliability of <b>requirements</b> <b>specifications,</b> enabling the design of better information technology to support work in the primary health care facility...|$|R
50|$|<b>Software</b> <b>requirements</b> <b>specification</b> {{establishes}} {{the basis for}} an agreement between customers and contractors or suppliers (in market-driven projects, these roles may be played by the marketing and development divisions) on what the software product is to {{do as well as}} what it is not expected to do. <b>Software</b> <b>requirements</b> <b>specification</b> permits a rigorous assessment of requirements before design can begin and reduces later redesign. It should also provide a realistic basis for estimating product costs, risks, and schedules. Used appropriately, software requirements specifications can help prevent software project failure.|$|E
50|$|A System Requirements Specification (abbreviated SyRS when {{need to be}} {{distinct}} from a <b>Software</b> <b>Requirements</b> <b>Specification</b> SRS) is a structured collection of information that embodies the requirements of a system.|$|E
50|$|A {{requirements}} {{traceability matrix}} {{may be used}} to check if the current project requirements are being met, and to help {{in the creation of a}} request for proposal, <b>software</b> <b>requirements</b> <b>specification,</b> various deliverable documents, and project plan tasks.|$|E
40|$|We {{describe}} {{foundations and}} design principles of {{a tool that}} supports authoring of informal and formal <b>software</b> <b>requirements</b> <b>specifications</b> simultaneously and from a single source. The tool {{is an attempt to}} bridge the gap between completely informal <b>requirements</b> <b>specifications</b> (as found in practice) and formal ones (as needed in formal methods). The user i...|$|R
40|$|Defining quality {{requirements}} {{is an important}} activity {{in the development of}} <b>software</b> because quality <b>requirements</b> describe how well the software can be implemented. In this study will propose an approach to make improvements the specification of quality characteristics software using a spectrum analysis by utilizing the TCM (Term-Characteristic Mapping) method, in this method also utilize algorithms RabinKarp used to perform mapping between the list of term with functional requirements written in the <b>software</b> <b>requirement</b> <b>specification</b> documents. for testing phase its used 167 term of quality and 22 subcategories quality characteristics and uses two <b>software</b> <b>requirement</b> <b>specification</b> documents that will appear the quality characteristics. Results from this study is a list of quality characteristics that appear along with the value of its appearance in the functional requirements are analyzed. Keywords—{{quality requirements}}, TCM, RabinKarp, quality characteristic...|$|R
40|$|Abstract-The {{software}} developer's task {{begins with}} the procurement of project charter. This is a legal document containing details regarding the <b>software</b> <b>requirement</b> <b>specification</b> (SRS), cost and the schedule etc., of the project. The SRS of the organization is a text document incorporating {{the requirements of the}} organization. The software development of any information system is based on the SRS of the client organization. This paper attempts to abstracts design components (Object class name, Object methods, and its attributes, Actors and interfaces of actors) from <b>software</b> <b>requirement</b> <b>specification.</b> The objective {{of this paper is to}} develop a single semi automated methodology for the abstraction of different useable components from SRS, so that they can be transformed as model elements. To provide a semiotic environment for the design of model elements to the transformation of useable components. I...|$|R
50|$|A <b>software</b> <b>requirements</b> <b>specification</b> (SRS) is a {{description}} of a software system to be developed. It lays out functional and non-functional requirements, and may include a set of use cases that describe user interactions that the software must provide.|$|E
50|$|Requirements {{specification}} - Requirements {{are documented}} {{in a formal}} artifact called Requirements Specification (RS). Nevertheless, it will become official only after validation. A RS can contain both written and graphical (models) information if necessary. Example: <b>Software</b> <b>requirements</b> <b>specification</b> (SRS).|$|E
50|$|The UCC {{open source}} {{distribution}} contains Release Notes, User’s Manual, and Code Counting Standards for the language counters. The source code contains file headers and in-line comments. The UCC Software Development Plan, <b>Software</b> <b>Requirements</b> <b>Specification,</b> and Software Test Plan are available upon request.|$|E
40|$|The UML is a {{diagrammatic}} notation {{widely used}} in the computing industry and often taught in universities {{as a way to}} represent <b>software</b> <b>requirements</b> <b>specifications</b> and design descriptions. In this paper we identify a number of problems associated with teaching UML and how we have minimised their impact by making use of the Executable UML) ...|$|R
40|$|<b>Requirement</b> <b>Specifications</b> {{are very}} {{difficult}} to define. Due to lack of information and differences in interpretation, software engineers are faced with the necessity to redesign and iterate. This imperfection in <b>software</b> <b>requirement</b> <b>specifications</b> is commonly addressed by incremental design. In this paper, we advocate an approach where the imperfect <b>requirements</b> in <b>requirement</b> <b>specifications</b> are modeled by fuzzy sets. By supporting this approach with a requirement tracing and an optimization approach, the necessity for design iteration can be reduced...|$|R
40|$|Introduction The area of {{requirements}} engineering {{is a very}} important and necessary area of software engineering. In any given software project, a <b>software</b> <b>requirement</b> <b>specification</b> is developed which describes the necessary aspects and characteristics of the system that has been requested by the customer. From the <b>software</b> <b>requirement</b> <b>specification</b> (SRS), the development team designs, implements, tests and delivers the system to the customer. There are three major tasks in the area of {{requirements engineering}}. The first task is to correctly capture the customer's needs and desires for the proposed system. This is a difficult task since the customer's system request is often very informal and incomplete. As well, it is common that the customers lack technical knowledge related to the proposed system and the system developers lack knowledge of the customer's working environment. Both participants need to overcome barriers to communication. Other facets of this initial task of c...|$|R
50|$|In a {{software}} development team, {{a software}} analyst {{is the person}} who studies the software application domain, prepares software requirements, and specification (<b>Software</b> <b>Requirements</b> <b>Specification)</b> documents. The software analyst is the seam between the software users and the software developers. They convey the demands of software users to the developers.|$|E
5000|$|The <b>software</b> <b>requirements</b> <b>specification</b> {{document}} enlists {{enough and}} necessary requirements {{that are required}} for the project development. [...] To derive the requirements, the developer needs to have clear and thorough understanding of the products to be developed or being developed. This is achieved and refined with detailed and continuous communications with the project team and customer till {{the completion of the}} software.|$|E
50|$|In {{the case}} of IEEE standards, the {{specified}} requirements, mentioned {{in the definition of}} validation, are the set of problems, needs and wants of the stakeholders that the software must solve and satisfy. Such requirements are documented in a <b>Software</b> <b>Requirements</b> <b>Specification</b> (SRS). And, the products mentioned in the definition of verification, are the output artifacts of every phase of the software development process. These products are, in fact, specifications such as Architectural Design Specification, Detailed Design Specification, etc. The SRS is also a specification, but it cannot be verified (at least not in the sense used here, more on this subject below).|$|E
40|$|Abstract. <b>Requirement</b> <b>Specifications</b> {{are very}} {{difficult}} to define concisely and unambiguously. Due to lack of information and differences in interpretation, software engineers are frequently faced with the necessity to redesign and iterate. The imperfection in <b>software</b> <b>requirement</b> <b>specifications</b> that causes these problems has lead to for example iterative approaches and incremental design. In this paper, we advocate an approach where the imperfect <b>requirements</b> in <b>requirement</b> <b>specifications</b> are modeled by fuzzy sets. By supporting this approach with a requirement tracing and optimization approach, the necessit...|$|R
40|$|Abstract—To fully {{embrace the}} {{challenge}} of securing software, security concerns must be considered at the earliest stages of software development. Studies have shown that this reduces the time, cost and effort required to integrate security features into software during development. In this paper we describe a loop-hole analysis technique for uncovering potential vulnerabilities in <b>software</b> <b>requirements</b> <b>specifications</b> and describe its use using an example. I...|$|R
50|$|Data under {{exploration}} and analysis by software analytics exists in software lifecycle, including source code, <b>software</b> <b>requirement</b> <b>specifications,</b> bug reports, test cases, execution traces/logs, and real-world user feedback, etc. Data plays {{a critical role}} in modern software development, because hidden in the data is the information and insight about the quality of software and services, the experience that software users receive, as well as the dynamics of software development.|$|R
50|$|Use cases {{constitute}} a powerful, user-centric {{tool for the}} <b>software</b> <b>requirements</b> <b>specification</b> process. Use case modeling typically starts from identifying key stakeholder roles (actors) interacting with the system, and their goals or objectives the system must fulfill (an outside perspective). These user goals then become the ideal candidates for the names or titles of the use cases which represent the desired functional features or services provided by the system. This user-centered approach ensure that what has the real business value and the user really want is developed, not those trivial functions speculated from a developer or system (inside) perspective.|$|E
50|$|An {{inspection}} {{is one of}} {{the most}} common sorts of review practices found in software projects. The goal of the inspection is to identify defects. Commonly inspected work products include software requirements specifications and test plans. In an inspection, a work product is selected for review and a team is gathered for an inspection meeting to review the work product. A moderator is chosen to moderate the meeting. Each inspector prepares for the meeting by reading the work product and noting each defect. In an inspection, a defect is any part of the work product that will keep an inspector from approving it. For example, if the team is inspecting a <b>software</b> <b>requirements</b> <b>specification,</b> each defect will be text in the document which an inspector disagrees with.|$|E
40|$|This <b>Software</b> <b>Requirements</b> <b>Specification</b> (SRS) {{describes}} the features {{to be provided}} by the software for the GIS-T/ISTEA Pooled Fund Study Phase C Linear Referencing Engine project. This document conforms to the recommendations of IEEE Standard 830 - 1984, IEEE Guide to <b>Software</b> <b>Requirements</b> <b>Specification</b> (Institute of Electrical and Electronics Engineers, Inc., 1984). The software specified in this SRS is a proof-of-concept implementation of the Linear Referencing Engine {{as described in the}} GIS-T/ISTEA pooled Fund Study Phase B Summary, specifically Sheet 13 of the Phase B object model. The software allows an operator to convert between two linear referencing methods and a datum network...|$|E
40|$|NASA <b>software</b> <b>requirement</b> <b>specifications</b> {{were used}} in the {{development}} of a system for validating and verifying computer programs. The software specification and evaluation system (SSES) provides for the effective and efficient specification, implementation, and testing of computer software programs. The system as implemented will produce structured FORTRAN or ANSI FORTRAN programs, but the principles upon which SSES is designed allow it to be easily adapted to other high order languages...|$|R
40|$|This {{handbook}} {{is about}} writing <b>software</b> <b>requirements</b> <b>specifications</b> and legal contracts, {{two kinds of}} documents with similar needs for completeness, consistency, and precision. Particularly when these are written, as they usually are, in natural language, ambiguity [...] -by any definition [...] -is {{a major cause of}} their not specifying what they should. Simple misuse of the language in which the document is written is one source of these ambiguities...|$|R
40|$|We {{present an}} outline of a process by which {{operational}} <b>software</b> <b>requirements</b> <b>specifications</b> can be written for Formal Concept Analysis (FCA). The Z notation is used to specify the FCA model and the formal operations on it. We posit a novel approach whereby key features of Z and FCA can be integrated and put to work in contemporary software development, thus promoting operational specification as a useful application of conceptual structures. </p...|$|R
40|$|This paper {{argues that}} a user's manual makes an excellent, if not the best, <b>software</b> <b>requirements</b> <b>specification.</b> It {{discusses}} several lessons learned from experiences writing user's manuals as requirements specifications. Keywords: ambiguity, requirements analysis, requirements elicitation, requirements validation, requirements, scenarios, specification, test cases; use cases, user's manual...|$|E
40|$|This plan {{describes}} how validation {{testing of the}} software will be implemented for the integrated control and data acquisition system of the Light Duty Utility Arm System (LDUA). The purpose of LDUA software validation testing is to demonstrate and document that the LDUA software meets its <b>software</b> <b>requirements</b> <b>specification...</b>|$|E
40|$|This {{document}} {{describes the}} software that performs the data acquisition for the SMMS instrument. This document was created with graphical programming language. The software described in this document was written {{to comply with the}} <b>Software</b> <b>Requirements</b> <b>Specification.</b> Hardware is described in Section 2. Software is described in Section 3...|$|E
50|$|All teams {{must have}} one faculty member and can have student members from juniors and seniors. The first phase {{consists}} {{of developing a}} quality <b>Software</b> <b>Requirement</b> <b>Specification</b> document. In part the other considerations include technology, use of xml, quality code and design tools are given scores based upon the usage. The second phase considers the support of regional languages and portability issues of the software developed in part with functionality, User Interface and output.|$|R
40|$|Several {{researchers}} have recently indicated {{an urgent need}} for re-evaluation and validation of the various software engineering abstraction techniques, and object orientation in particular. This paper presents three questionable practices and one promising direction with respect to achieving high quality analysis models. This work is based on five years of observation of more than 700 students working on <b>software</b> <b>requirements</b> <b>specifications</b> of a small telephone exchange and a related accounts management system...|$|R
40|$|Abstract. We {{present an}} outline of a process by which {{operational}} <b>software</b> <b>requirements</b> <b>specifications</b> can be written for Formal Concept Analysis (FCA). The Z notation is used to specify the FCA model and the formal operations on it. We posit a novel approach whereby key features of Z and FCA can be integrated and put to work in contemporary software development, thus promoting operational specification as a useful application of conceptual structures. ...|$|R
