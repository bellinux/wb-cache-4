1|54|Public
40|$|This paper {{introduces}} an extractive {{approach to}} building-up a product line based on existing systems. Thereby, {{we focus on}} the analysis of common functionalities across different systems. Our commonality analysis is performed on the functional level which offers the highest reuse potential. We use the <b>service</b> <b>diagram,</b> a formally founded specification technique, for the functional specification. This allows us to perform the commonality analysis based on a formal definition of the system behavior. Concepts for the comparison of service diagrams and a methodology for building-up a <b>service</b> <b>diagram</b> of a product line are described in the paper. Additionally, since legacy systems rarely have an accurate functional specification, we present a methodology for extracting such a specification out of a given logical architecture. ...|$|E
50|$|Commuter Rapid service {{operates}} weekday evening. The service's signature {{color on}} <b>service</b> <b>diagrams</b> is purple (■). It stops at Ogikubo and Kichijōji {{in addition to}} the stops of Chūō Special Rapid.|$|R
40|$|To provide {{efficient}} {{services to}} end-user {{it is essential}} to manage variability among services. Feature modeling is an important approach to manage variability and commonalities of a system in product line. Feature models are composed of feature <b>diagrams.</b> <b>Service</b> feature <b>diagrams</b> (an extended form of feature diagrams) introduced some new notations to classical feature <b>diagrams.</b> <b>Service</b> feature <b>diagrams</b> provide selection rights for variable features. In our previous work, we introduced cardinalities for the selection of features from a <b>service</b> feature <b>diagram</b> which we call cardinality-based <b>service</b> feature <b>diagrams</b> (CSFD). In this paper, we provide semantics to CSFDs. These semantics are backed by the formal calculus of Linear Logic. We provide rules to interpret CSFDs into linear logical formula. Our results show that the linear formulas of CSFDs give the same results as expected from the CSFDs. ...|$|R
40|$|CRESS (CHISEL Representation Employing Systematic Specification) is a {{notation}} and set {{of tools}} for graphical specification and analysis of services. It is applicable wherever a system consists of base functionality to which may be added selected services. The CRESS notation is introduced for root <b>diagrams,</b> <b>service</b> <b>diagrams,</b> and rules governing their behaviour. It is shown how CRESS can represent services in SIP (Session Initiation Protocol). For analysis, <b>service</b> <b>diagrams</b> can be automatically translated into LOTOS (Language Of Temporal Ordering Specification) or SDL (Specification and Description Language). For scripting, translation is into CPL (Call Processing Language) or CGI (Common Gateway Interface). The structure of the portable CRESS toolset is explained...|$|R
40|$|To provide {{efficient}} {{services to}} end-user {{it is essential}} to manage variability among services. Feature modelling is an important approach to manage variability and commonalities of a system in product line. Feature models are composed of feature <b>diagrams.</b> <b>Service</b> feature <b>diagrams</b> (an extended form of feature diagrams) changed the basic framework of feature diagrams by proposing new feature types and their relevance. <b>Service</b> feature <b>diagrams</b> provide selection rights for variable features. In this paper we argue that {{it is essential to}} put cardinalities on <b>service</b> feature <b>diagrams.</b> That is, the selection of features should be done under some constraints, to provide a lower and upper limit for the selection of features. The use of cardinalities on <b>service</b> feature <b>diagrams</b> reduces the types of features to half, while keeping the integrity of all features. ...|$|R
40|$|To provide {{efficient}} {{services to}} end-users, variability and commonality among {{the features of}} the product line is a challenge for industrialist and researchers. Feature modeling provides great services to deal with variability and commonality among the features of product line. Cardinality based <b>service</b> feature <b>diagrams</b> changed the basic framework of <b>service</b> feature <b>diagrams</b> by putting constraints to them, which make service specifications more flexible, but apart from their variation in selection third party services may have to be customizable. Although to control variability, cardinality based <b>service</b> feature <b>diagrams</b> provide high level visual notations. For specifying variability, the use of cardinality based <b>service</b> feature <b>diagrams</b> raises the problem of matching a required feature diagram against the set of provided diagrams...|$|R
50|$|Following {{the fitting}} {{of its new}} bogies the {{locomotive}} was used on express passenger trains. On a London King's Cross to Newcastle <b>service</b> <b>diagrammed</b> for British Rail Class 55 ('Deltic') operation the unit was 14mins faster than required even though the new traction motors meant reduced power at the rail.|$|R
40|$|Part 3 : DesignInternational audienceThis paper {{deals with}} Service-Oriented Analysis and Design (SOAD). SOAD {{comprises}} requirements elicitation, {{analysis of the}} requirements to identify services and business processes and finally implementation of the services and processes. It is a heterogeneous approach that combines a number of well-established practices. The key question in SOAD is how to integrate the practices to model a true service-oriented system with all its requirements. The approach {{presented in this paper}} helps to bridge the semantic gap between business requirements and IT architecture by using a method for transformation of business process <b>diagrams</b> into <b>service</b> <b>diagrams.</b> The <b>service</b> <b>diagrams</b> describe how the process is realized by using services. In details, the method transforms diagrams denoted in Business Process Modeling Notation into a set of UML diagrams. The principle of the method is demonstrated in an example...|$|R
40|$|Managing {{variability}} {{is essential}} for an efficient implementation of end-user services that can be customised to individual needs. Apart from variations in selection and orchestration, also third-party services {{may have to be}} customisable. Although feature diagrams provide a high-level visual notation for variability, their use for specifying variability of services raises the problem of matching a required feature diagram against a set of provided ones. In particular, the established interpretation of feature diagrams in Propositional Logic is not expressive enough for matching in the context of service variability. The problem becomes more visible when a certain requirement is going to be satisfied by a combination of multiple offers with overlapping features, which is a consequence of idempotence in Propositional Logic. To address this problem, we propose <b>service</b> feature <b>diagrams</b> with semantics in Linear Logic. Linear Logic only allows the use of idempotence on the propositions with modalities. The permissible selection of features of a <b>service</b> feature <b>diagram</b> is called an instance diagram. We provide rules to obtain instance <b>diagrams</b> from the <b>service</b> feature <b>diagram.</b> The semantics of instance diagrams are also supported by Linear Logic. This thesis not only introduces <b>service</b> feature <b>diagrams,</b> but also formalises their matching as linear deduction. We propose two categories of rules to verify diagrammatically if a collection of service descriptions satisfy the requirements. First, graphical matching rules are used to match <b>service</b> feature <b>diagrams</b> of requestor and provider. Second, graphical merging rules are used to merge multiple feature diagrams contributing to satisfy the requestor’s demands. We prove the correctness of these rules using the inference system of Linear Logic. We also provide the analysis of graphical rules and show that the application of the graphical rules is independent of the context in <b>service</b> feature <b>diagram,</b> i. e., graphical rule can be applied anywhere in a <b>service</b> feature <b>diagram.</b> EThOS - Electronic Theses Online ServiceGBUnited Kingdo...|$|R
50|$|Weekday morning {{services}} for Tokyo; two from Ōtsuki, two from Ōme {{and one from}} Takao. It stops at all stations until Takao, Hachiōji, Tachikawa, Kokubunji, and Shinjuku and continues as a rapid service from Shinjuku. Services from Ōme from the Ōme Line stops at all stations on the Ōme Line. The service's signature color on <b>service</b> <b>diagrams</b> is pink (■).|$|R
40|$|This article {{addresses}} {{issues of}} the Service-Oriented Architecture Modeling (SOAM). SOAM comprises gathering requirements, analyzing the requirements to identify services and business processes, and finally implementing the services and processes. It is a heterogeneous approach that combines a number of well-established practices. The key question in SOAM is how to integrate these practices to model a true service-oriented system with all its benefits and requirements. The approach {{presented in this paper}} is a way to the integration of Business Process Modeling and Service Modeling. It is achieved by using a transformation method that transforms business processes <b>diagrams</b> into <b>services</b> <b>diagrams.</b> The generated <b>service</b> <b>diagrams</b> describe how the process is realized using services. Particularly, the method transforms diagrams modeled by means of the Business Process Modeling Notation into a set of UML diagrams. Furthermore, the formal description of the transformation is presented in this proposal. The principle of the transformation method is demonstrated in a case study...|$|R
50|$|Some longer-distance City Line <b>services</b> are <b>diagrammed</b> for Class 150 or Class 156 Sprinter units.|$|R
5000|$|VPL {{also allows}} you to {{generate}} the code of new [...] "macro" [...] <b>services</b> from <b>diagrams</b> created by users.|$|R
50|$|Along with Microsoft Visio 2002 Professional, Microsoft {{introduced}} Visio Enterprise Network Tools and Visio Network Center. Visio Enterprise Network Tools was an {{add-on product}} that enabled automated network and directory <b>services</b> <b>diagramming.</b> Visio Network Center was a subscription-based website where users could locate the latest network documentation content and exact-replica network equipment shapes from 500 leading manufacturers. The former has been discontinued, while the latter's shape-finding features are now {{integrated into the}} program itself. Visio 2007 was released on November 30, 2006.|$|R
50|$|Four {{services}} {{per hour}} in off-peak hours make limited stops between Tokyo and , and stop at all stations west of Tachikawa. Chūō Special Rapid {{stays on the}} Chūō Main Line to Takao and Ōtsuki while Ōme Special Rapid spurs to the Ōme Line. The service's signature color on <b>service</b> <b>diagrams</b> is blue (■) for Chūō Special Rapid and green (■) for Ōme Special Rapid. This service stops at Mitaka and Kokubunji between Nakano and Tachikawa stations. It continues from Nakano as a rapid service.|$|R
40|$|This paper {{presents}} an approach {{for the design}} and development of service-driven applications. These applications rely on the collaboration of multiple services that businesses offer to the external community. To ensure that the collaboration of services takes place effectively, <b>service</b> chart <b>diagrams</b> are proposed as a specification technique. These diagrams leverage the traditional state chart diagrams of UML. Furthermore, in <b>service</b> chart <b>diagrams</b> it is advocated that services do not invoke each other. However, they engage conversations before committing themselves to a composition process of services...|$|R
40|$|We present {{our work}} on {{composing}} mobile Web services, denoted by M-services, in the wireless world. The wireless world {{has its own}} features that make it completely different from the wired world. For instance, new communication means need to be deployed, new user-friendly services need to be offered, and new types of specification techniques need to be provided. One of these techniques consists of using <b>service</b> chart <b>diagrams</b> in the specification of a composition process of M-services. A <b>service</b> chart <b>diagram</b> leverages the traditional state chart diagram of UML and specifies a service from five perspectives: state, flow, organization, information, and location...|$|R
3000|$|... “Disabling Services” In {{order to}} disable a {{particular}} service, we should first check the <b>service</b> dependencies <b>diagram.</b> An {{example of such}} a diagram is depicted in Figure 5. Disabling a service can take place in two ways.|$|R
30|$|US Salinity Laboratory’s diagram (Richards 1954) and Wilcox’s diagram (Wilcox 1955) {{plotting}} SAR and  % Na+ against EC {{were performed}} using AquaChem software version 2012.1. 123 developed by Schlumberger Water <b>Services.</b> These <b>diagrams</b> {{were used for}} the classification of river water for irrigation purposes.|$|R
40|$|Abstract: This paper {{deals with}} {{modeling}} of Service-Oriented Architecture (SOA). SOA is an architectural style for analysis, design, maintaining {{and integration of}} enterprise applications {{that are based on}} services. Services are autonomous platform-independent entities that enable access to one or more capabilities, which are accessible by provided interfaces. The goal of SOA is to align business and IT architectures. Hence, a new designed service has to meet business requirements that are traditionally specified by a business process diagram. The approach, presented in this paper, helps to bridge the semantic gap between business requirements and IT architecture by using a method for transformation of business processes <b>diagrams</b> into <b>services</b> <b>diagrams.</b> In particular, the method deals with process realisation based on services and it describes choreographing of services towards fulfilling business goals. ...|$|R
50|$|The 305/2s were {{initially}} replaced on the Lea Valley Line by British Rail Class 310 units {{during the late}} 1980s/early 1990s. Most of the 305/2s were overhauled at Doncaster, painted in Regional Railways livery and shortened to 3-car sets, {{before moving to the}} Manchester area, taking over <b>services</b> previously <b>diagrammed</b> by Class 304 units.|$|R
40|$|Protection {{of society}} against natural and {{man-made}} disasters is {{high on the}} societal and political agenda. Effective crisis management {{is more important than}} ever. Nowadays, crisis organisations depend crucially on reliable telecom services, and unexpected failure of telecommunication may have serious consequences. In order not to be caught unprepared, crisis organisations should therefore perform a risk assessment on telecom availability. Unfortunately, assessment of availability risks of modern, multi-operator telecom services is difficult; information sources are unreliable, and the relevant information is uncertain and difficult to obtain. This paper describes some of these difficulties, as well as the requirements of availability risk assessment methods for crisis telecommunication services. The paper outlines a new method that can be applied without requiring full knowledge of the physical layout of the telecom infrastructure. This new method relies on telecom <b>service</b> <b>diagrams</b> as a tool for risk analysis and to facilitate dialogue among the analysts. Keywords: Availability; Crisis management; Risk assessment; Telecommunication service...|$|R
5000|$|By the mid-1930s {{the growth}} in {{ownership}} of radio receivers in the United States spun off other business opportunities. One {{of them was the}} repair of radio and radio-phonograph sets and eventually, television. Hugo Gernsback was an early publisher of repair manuals. Soon others were publishing. John F. Rider in the early 1930s began to compile complete volumes of radio <b>servicing</b> <b>diagrams</b> of many radio manufacturers called the Perpetual Troubleshooter's Manual. [...] In time these servicing manuals became quite large and contained information on radios that were not common or were produced in small quantities. Although Rider's Perpetual Troubleshooter's Manual became a standard reference during the 1930s, the size and bulk of these yearly volumes could become a hindrance. Rider manuals contained information on common and rare models. Service businesses were paying extra for brands they rarely or never encounter. This [...] "opened the door" [...] for an alternative path and Morris Beitman was able to exploit this business opportunity.|$|R
40|$|This paper {{introduces}} {{an analysis}} framework made of different models proposing complementary views. First view - the strategic <b>services</b> <b>diagram</b> (SSD) - {{is the most}} aggregate knowledge level; it uses services for representing the system {{to be in a}} global manner. Second view offers a more detailed perspective of the agents involved into the services using traditional i* Strategic Dependency (SDD) and Strategic Rationale Diagrams (SRD). Finally, the third view - the Dynamic Services Hypergraph (DSH) - offers a dynamic approach of services realization paths at various Qualities of Service (QoS). Using those models at analysis level is interesting in a model driven software development approach. Indeed, the project stakeholders can share a common vision through a lookup at the services the system has to offer, at the depender and dependee agents for the services constituents and at the different realization paths and their QoS. The framework also offers the fundamental elements to develop a complete model driven software project management framework. It can be considered as a startup for a global broader software engineering method. status: publishe...|$|R
40|$|In {{the context}} of {{building}} software systems, Service-oriented Systems (SOS) have {{become one of the}} major research topics in the past few years. In SOS, services are basic functional units that can be created, invoked, composed, and if needed deleted on-the-fly. Since these software systems are composed of different services there is no easy way to assure the Quality of Service (QoS), therefore, formal specification of both functional and extra-functional system behaviour, compatibility, and interoperability between different services have become important issues. As a way to address this issues, resource-aware timing behavioural language REMES was chosen to be extended towards service-oriented paradigm with service specific information, such as type, capacity, time-to-serve, etc., as well as Boolean predicate constraints on control flow guarantees. In this thesis we present a design framework that provides a graphical user interface for behaviour modelling of services based on REMES language. NetBeans Visual Library API is used to display editable <b>service</b> <b>diagrams</b> with support for graph-oriented models. A textual dynamic service composition language was implemented, together with means to automatically verify service composition correctness. We ensure also an automated traceability between service specification interfaces, where both modelling levels are combined in an efficient tool for designing SOS...|$|R
40|$|The paper {{illustrates}} how event tree diagrams, used in safety engineering, {{can be applied}} to test the design of a healthcare <b>service.</b> Event tree <b>diagrams</b> can be employed to inform quantitative approaches to quality, by providing justification with respect to safety, of operational aspects to be monitored and measured. ...|$|R
5000|$|The Canonical Protocol pattern by Thomas Erl {{answers the}} question: [...] "How can {{services}} {{be designed to}} avoid protocol bridging?" [...] The problem is that services that support different communication technologies compromise interoperability, limit the quantity of potential consumers, and introduce the need for undesirable protocol bridging measures. The solution is for the architecture to establish a single communications technology as the sole or primary medium by which services can interact. Therefore, the communication protocols (including protocol versions) used within a service inventory boundary are standardized for all <b>services</b> (see <b>diagram).</b>|$|R
40|$|In {{the paper}} the {{proposal}} for modeling {{flexibility of the}} Web <b>Services</b> with feature <b>diagrams</b> is introduced. Feature diagrams allow presenting the commonality and above all variability of described concept. In the paper the classification of Web Services features from the users' {{point of view is}} given. The comparison of Web Services with the orthogonal component concept is also discussed...|$|R
5000|$|As {{depicted}} in <b>Diagram</b> A, the <b>services</b> belonging to two different departments, although {{belonging to the}} same organization, contain architectural [...] incompatibilities as well as redundancy. An inter-department service composition is not possible until and unless there {{is some sort of}} transformation logic introduced in between these <b>services.</b> However, in <b>Diagram</b> B, the application of Enterprise Inventory pattern creates a standardized service inventory that is inherently interoperable.|$|R
40|$|This paper {{presents}} an approach for tracking composite Web services {{based on the}} concept of view. Web services are subject to personalization when {{there is a need to}} accommodate user preferences. Preferences of users are of various types like when the execution of a Web service should be initiated and where the outcome of this execution should be delivered, too. To guarantee that user preferences are handled during the execution of Web services, a view offers the opportunity of zooming into the specification that composes these Web services. For the specification requirements, state chart and <b>service</b> chart <b>diagrams</b> are adopted. A deployed view over a progressing specification features the dynamic nature of tracking composite Web services...|$|R
40|$|This is a {{technical}} document detailing the ASSETS architecture and APIs for "scalable content-based indexing and ranking" components. It introduces {{technical aspects of}} all the software services that have been defined, analyzed, implemented and tested during ASSETS WP 2. 2. This document provides the following information:. The software requirements overview;. The technical documentation (UML <b>diagrams,</b> <b>services</b> description and API documentation, the software packaging and installation);. The user manual...|$|R
40|$|This paper {{presents}} an approach for the specification of a software agent-based and Web service-oriented environment. A software agent is an autonomous entity that acts on user#s behalf. Whereas a Web service is an accessible application that other applications and humans can discover and trigger. Users {{in collaboration with}} their agents compose Web services into high-level business processes denoted by composite services. The participation of Web services in a composite service is based on several selection criteria such as the execution cost of a Web service {{and the location of}} the resources on which a Web service will be performed. Prior to that selection, the specification approach puts forwards three levels: intrinsic, organizational/functional, and behavior. Besides the specification approach, the composition of Web services is illustrated in this paper with <b>service</b> chart <b>diagrams...</b>|$|R
25|$|Contrarily, James Heskett (1988), Earl Sasser (1995), William Davidow, Len Schlesinger, A. Paraurgman (1988), Len Berry, Jane Kingman-Brundage, Christopher Hart, and Christopher Lovelock (1994), {{felt that}} poor {{customer}} service was the problem. They gave us fishbone <b>diagramming,</b> <b>service</b> charting, Total Customer Service (TCS), the service profit chain, service gaps analysis, the service encounter, strategic service vision, service mapping, and service teams. Their underlying {{assumption was that}} there is no better source of competitive advantage than a continuous stream of delighted customers.|$|R
40|$|Analyzing {{interactions}} among peers that interact via messages {{is a crucial}} problem due to increasingly distributed nature of current software systems, especially the ones built using the service oriented computing paradigm. In service oriented computing, {{interactions among}} peers participating to a composite service involve message exchanges across organizational boundaries in a distributed computing environment. In order to build such systems in a reliable manner, {{it is necessary to}} develop techniques for analysis and verification of interactions among <b>services.</b> Collaboration <b>diagrams</b> provide a convenient visual model for modeling service interactions. In this paper, we present a tool that 1) checks the realizability of interactions specified by the given collaboration diagram, 2) verifies the LTL properties of the interactions specified by the given collaboration diagram by automatically converting it to a state machine model, and 3) synthesizes peer state machines that realize the set of interactions specified by the given collaboration diagram. ...|$|R
5000|$|In addition, a fully {{functional}} underground [...] "signal tower" [...] {{control room}} is on view, {{a facility that}} was used to monitor the IND Fulton Street Line and IND Crosstown Line when the subway station was in active revenue <b>service.</b> The track <b>diagram</b> indicator lights and control levers are fully operational, and are still needed when the subway cars on display are replaced or moved; however, since the controls are live, the control panel is secured and locked, but visitors can still view it through a window and read explanatory signs.|$|R
30|$|Zone Z 1 {{contains}} {{a set of}} surveillance camera which is assigned an IP address prefix of a::e/ 64, zone Z 2 {{contains a}} set of surveillance camera which is assigned an IP address prefix of b::e/ 64 and zone Z 3 contains a set of surveillance camera which is assigned an IP address prefix of c::e/ 64. Now different surveillance camera within any zone can generate their / 128 address out of their zone prefix and work as an independent entity. These cameras connect to the application server shown as operator <b>service</b> in the <b>diagram.</b>|$|R
