1467|19|Public
5|$|In {{the early}} 1990s, work began on adding object-orientation {{in the next}} full {{revision}} of COBOL. Object-oriented features were taken from C++ and <b>Smalltalk.</b>|$|E
5|$|Hejlsberg is C#'s {{principal}} {{designer and}} lead architect at Microsoft, and was previously {{involved with the}} design of Turbo Pascal, Embarcadero Delphi (formerly CodeGear Delphi, Inprise Delphi and Borland Delphi), and Visual J++. In interviews and technical papers he has stated that flaws in most major programming languages (e.g. C++, Java, Delphi, and <b>Smalltalk)</b> drove the fundamentals of the Common Language Runtime (CLR), which, in turn, drove {{the design of the}} C# language itself.|$|E
25|$|Squeak <b>Smalltalk</b> – a {{full scale}} open <b>Smalltalk.</b>|$|E
5000|$|<b>Smalltalk's</b> {{class library}} {{includes}} [...] and , using equality and identity for inclusion test respectively. Many dialects provide variations for compressed storage ( [...] , [...] ), for ordering ( [...] , , etc.) or for weak references (...) [...]|$|R
50|$|Although the PARTS Workbench allows {{very easy}} {{development}} of small systems (somewhat after {{the style of}} Visual Basic) {{it is argued that}} it encourages fragmentary development. The natural style of using this system tends to lead to lots of links and scripts - it is not based around the idea of 'model' (as used in 'Model-View-Controller' approaches common in many <b>Smalltalks</b> as well as in other languages). However, as an 'HCI' for programmers, the PARTS Workbench has many features that are not in modern <b>Smalltalks.</b> It has an immediacy that makes it very good for introductory teaching and for rapidly implementing programs with visual interfaces.|$|R
5000|$|AmbientTalk: Combines the {{properties}} of Self traits (object-based multiple inheritance) and <b>Smalltalk's</b> Squeak traits (requiring explicit composition of traits by the programmer). It builds on the research on stateful and freezable traits to enable state within traits, which was not allowed in the first definitions.|$|R
25|$|Fully formed {{object-oriented}} programming in the <b>Smalltalk</b> programming language and integrated development environment.|$|E
25|$|The Squeak {{programming}} {{language is a}} dialect of <b>Smalltalk.</b> It is object-oriented, class-based, and reflective.|$|E
25|$|<b>Smalltalk</b> uses ifTrue and ifFalse {{messages}} to implement conditionals, {{rather than any}} fundamental language construct.|$|E
50|$|Because a type {{can have}} a chain of base types, this look-up can be expensive. A naive {{implementation}} of <b>Smalltalk's</b> mechanism {{would seem to have}} a significantly higher overhead than that of C++ and this overhead would be incurred for each and every message that an object receives.|$|R
5000|$|As <b>Smalltalk's</b> {{compiler}} {{classes are}} part of the standard class library and usually present at run time, these can be used to evaluate a code string.Compiler evaluate:'1 + 2'Because class and method definitions are also implemented by message-sends (to class objects), even code changes are possible:Compiler evaluate:'Object subclass:#Foo' ...|$|R
40|$|This paper {{presents}} a method {{with which we}} can generate update messages for use with <b>Smalltalk's</b> dependency mechanism. The basic idea is that any messages which cause an object to change are forwarded to the object's dependants. The method is perfectly general and future proofs objects against changes in their dependants...|$|R
25|$|Dan Ingalls, an {{important}} {{contributor to the}} Squeak project, wrote the paper upon which Squeak is built and constructed the architecture for five generations of the <b>Smalltalk</b> language.|$|E
25|$|At HP, Sassenrath was {{involved}} with and influenced by a range of HP language projects including Ada, Pascal, <b>Smalltalk,</b> Lisp, Forth, SPL, {{and a variety of}} experimental languages.|$|E
25|$|Church Booleans are the Church {{encoding}} of the Boolean values true and false. Some programming languages {{use these}} as an implementation model for Boolean arithmetic; examples are <b>Smalltalk</b> and Pico.|$|E
50|$|VisualWorks has a {{very active}} {{third-party}} developers community, with a non-commercial version available free. The non-commercial version has all the power and functionality of the commercial version. In both versions, as in all <b>Smalltalks,</b> the user {{can see all the}} source code. This includes all the system classes, including the browser and GUI builder.|$|R
5000|$|Because {{closures}} delay evaluation—i.e., {{they do not}} [...] "do" [...] {{anything until}} they are called—they {{can be used to}} define control structures. For example, all of <b>Smalltalk's</b> standard control structures, including branches (if/then/else) and loops (while and for), are defined using objects whose methods accept closures. Users can easily define their own control structures also.|$|R
5000|$|In early <b>Smalltalks,</b> {{there was}} only one {{metaclass}} called [...] This implied that the methods all classes have were the same, in particular the method to create new objects, i.e., [...] To allow classes to have their own methods and their own instance variables (called class instance variables and {{should not be confused with}} class variables), Smalltalk-80 introduced for each class [...] their own metaclass [...] This means that each metaclass is effectively a singleton class.|$|R
25|$|According to its creator, Ruby was {{influenced}} by Perl, <b>Smalltalk,</b> Eiffel, Ada, and Lisp. It supports multiple programming paradigms, including functional, object-oriented, and imperative. It also has a dynamic type system and automatic memory management.|$|E
25|$|The <b>Smalltalk</b> {{teams at}} Xerox PARC {{eventually}} {{settled on a}} design philosophy that led to easy development and high code reuse. Named model-view-controller (MVC), the concept breaks an application into three sets of interacting object classes.|$|E
25|$|Contrary {{to other}} {{language}}s, in <b>Smalltalk</b> a for-loop {{is not a}} language construct but defined in the class Number as a method with two parameters, the end value and a closure, using self as start value.|$|E
5000|$|The {{change can}} be schematized as follows:Note in {{particular}} the correspondence between <b>Smalltalk's</b> implicit metaclasses and Ruby's eigenclasses of classes.The Ruby eigenclass model makes the concept of implicit metaclasses fully uniform: every object x has its own meta-object, called the eigenclass of x, which is one meta-level higher than x. The [...] "higher order" [...] eigenclasses usually exist purely conceptually - they do not contain any methods or store any (other) data in most Ruby programs.|$|R
40|$|Contents 1 Introduction 1 1. 1 The Thesis.............................. 2 1. 2 Organization of the Thesis...................... 3 2 Aspect-Oriented Programming 4 2. 1 Classi#cation............................. 4 2. 2 The Code Tangling Phenomenon.................. 5 2. 3 Aspects and Aspect Languages................... 10 2. 4 Weaving Aspects........................... 12 2. 5 Summary and Outlook........................ 14 3 The Process Synchronization Aspect 15 3. 1 Analysis................................ 15 3. 1. 1 <b>Smalltalk's</b> Process Model.................. 15 3. 1. 2 Processes in the Server.................... 16 3. 1. 3 Techniques for Synchronizing Processes.......... 17 3. 1. 4 Process Synchronization in the...|$|R
50|$|Goldberg {{began working}} at PARC in 1973 as a {{laboratory}} and research assistant, and eventually became {{manager of the}} System Concepts Laboratory where she, Alan Kay, and others developed Smalltalk-80, which both developed the object-oriented approach of Simula 67 and introduced a programming environment of overlapping windows on graphic display screens. Not only was <b>Smalltalks</b> innovative format simpler to use, it was also customizable and objects could be transferred among applications with minimal effort. Goldberg and Kay also {{were involved in the}} development of design templates, forerunners of the design patterns commonly used in software design.|$|R
25|$|Matsumoto {{describes}} {{the design of}} Ruby as being like a simple Lisp language at its core, with an object system like that of <b>Smalltalk,</b> blocks inspired by higher-order functions, and practical utility like that of Perl.|$|E
25|$|This book is {{just fun}} to read, {{alone or with}} your spouse or friends. And it {{broadens}} your horizon. Even if you don't plan on attending a trivia-gameshow anytime soon, your newly acquired knowledge will be beneficial when the need for <b>smalltalk</b> arises.|$|E
25|$|Scratch – a cross {{platform}} teaching IDE using visual blocks that stack like Lego™ originally developed by MIT's Life Long Kindergarten group. The Pi version is very heavily optimised for the limited compute resources available and is {{implemented in the}} Squeak <b>Smalltalk</b> system.|$|E
40|$|The object {{oriented}} (OO) paradigm {{has become the}} norm for software development. OO languages, such as C++ [58], JAVA [4], EIFFEL [43], and <b>SMALLTALK’s</b> [33], are used in almost every software project. The OO programming style, and the languages that enable it, have acquired an aura of respectability. OO programming promotes reusability, extendibility, reliability, and portability. But this come {{at a cost of}} runtime efficiency. This proposed research is to find efficient algorithms for (at least) four problems: subtyping tests, single dispatching, multiple dispatching, and object layout. It {{is important to note that}} although the problems take variations in different languages, these variations are minor. Our results will therefore be of general interest, and applicable to many different languages. ...|$|R
5000|$|C++'s [...] is an {{implementation}} of dynamic arrays, {{as are the}} [...] class supplied with the Java API and the [...]NET Framework. The generic [...] class supplied with version 2.0 of the [...]NET Framework is also implemented with dynamic arrays. <b>Smalltalk's</b> [...] is a dynamic array with dynamic start and end-index, making {{the removal of the}} first element also O(1). Python's [...] datatype implementation is a dynamic array. Delphi and D implement dynamic arrays at the language's core. Ada's [...] generic package provides dynamic array implementation for a given subtype. Many scripting languages such as Perl and Ruby offer dynamic arrays as a built-in primitive data type. Several cross-platform frameworks provide dynamic array implementations for C, including [...] and [...] in Core Foundation, and [...] and [...] in GLib.|$|R
40|$|We {{show that}} many {{different}} overriding operators present in programming languages can be expressed, adopting a mixin-based framework, {{in terms of}} three basic operators. In particular we propose two orthogonal classifications: strong (the overridden definition is canceled) or weak (the overridden definition still remains significant, as in <b>Smalltalk's</b> super feature), and preferential (priority {{to one of the}} two arguments) or general. We formalize the relation between all these versions. Our analysis and results are not bound to a particular language, since they are formulated within an algebraic framework for mixin modules which can be instantiated over different core languages. Keywords: Reasoning about Language Constructs, Modularity, Object Oriented Languages. Introduction The name mixin (mixin class, abstract class) has been introduced in the object oriented community to denote a class where some methods are not defined (de- ferred), which can be effectively used for instant [...] ...|$|R
25|$|Several {{programming}} languages (e.g., Ada, D, C++11, <b>Smalltalk,</b> PHP, Perl, Object Pascal, Java, C#, MATLAB, Mythryl, Visual Basic, Ruby, Python, JavaScript, Fortran 95 and later) {{have special}} constructs which allow implicit looping through {{all elements of}} an array, or all members of a set or collection.|$|E
25|$|During {{that period}} the C++ {{language}} {{had just been}} introduced, but Sassenrath, {{along with many other}} Apple researchers, preferred the more pure OO implementation of the <b>Smalltalk</b> language. Working at ATG with computing legends like Alan Kay, Larry Tessler, Dan Ingalls, Bill Atkinson and others provided Sassenrath with a wealth of resources and knowledge that helped shape his views of computing languages and systems.|$|E
25|$|Among PARC's {{distinguished}} {{researchers were}} three Turing Award winners: Butler W. Lampson (1992), Alan Kay (2003), and Charles P. Thacker (2009). The Association for Computing Machinery (ACM) Software System Award recognized the Alto system in 1984, <b>Smalltalk</b> in 1987, InterLisp in 1992, and the {{remote procedure call}} in 1994. Lampson, Kay, Bob Taylor, and Charles P. Thacker received the National Academy of Engineering's prestigious Charles Stark Draper Prize in 2004 for their work on the Alto.|$|E
40|$|Abstract. Model-driven {{engineering}} {{is a powerful}} approach to build large-scale applications. However, an application’s metamodel often remains static after the initial development phase and cannot be changed unless a new development effort occurs. Yet, end users often need to rapidly adapt their applications to new needs. In many cases, end users would {{know how to make}} the required adaptations, if only the application would let them do so. In this paper we present how we built a runtimedynamic meta-environment into <b>Smalltalk’s</b> reflective language model. Our solution offers the best of both worlds: developers can develop their applications using the same tools they are used to and gain the power of meta-programming. We show in particular that our approach is suitable to support end user customization without writing new code: the adaptive model of Magritte not only describes existing classes, but also lets end users build their own metamodels on the fly...|$|R
40|$|International audienceDependency Structure Matrix (DSM) {{has been}} {{successfully}} applied to identify software dependencies among packages and subsystems. A number of algorithms were proposed to compute the matrix so that it highlights patterns and problematic dependencies between subsystems. However, existing DSM implementations often miss important informa- tion to fully support reengineering effort. For example, they do not clearly qualify and quantify problematic relationships, information which is crucial to support remediation tasks. In this paper we present enriched DSM (eDSM) where cells are enriched with contextual information about (i) the type of dependencies (inheritance, class reference...), (ii) the proportion of referencing entities, (iii) the proportion of ref- erenced entities. We distinguish independent cycles and stress potentially simple fixes for cycles using coloring information. This work is language independent and has been implemented {{on top of the}} Moose reengineering environment. It has been applied to non-trivial case studies among which ArgoUML, and Morphic the UI framework available in two open-source <b>Smalltalks,</b> Squeak and Pharo. Solution to problems identified by eDSM have been performed and retrofitted in Pharo main distribution...|$|R
5000|$|The {{members of}} monochrom staged a fake (public theatre performance) about a deadly virus {{outbreak}} at 'Art Basel Miami Beach', {{one of the}} biggest art fairs in North America. monochrom dealt with the networking/business aspect of the art market, the post-September 11, 2001 attacks hysteria about biological warfare and the media coverage about Avian influenza (bird flu). Press release quote: [...] "In mid-November 2005, Günther Friesinger visited the Ulaangom Biennial in the Republic of Mongolia. ... He directly departed to Miami to attend some meetings at Art Basel Miami Beach. ... There is acute evidence that he is carrying a rare, but highly contaigent sub-form of the Arad-II Virus (Onoviridae family), of which Freiburg virus is also a member. ... Friesinger is walking around the different art fairs in Miami Beach and is spreading the pathogen. The situation is critical. A worldwide outbreak - due to the many visitors {{from all over the world}} - is imminent. ... We want to find all the people that Günther Friesinger <b>smalltalked</b> to and handshaked with. We want to retrieve and destroy the business cards he has spread. Additionally we must take him into custody and in the event of his death cremation is absolutely necessary." ...|$|R
