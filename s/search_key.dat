181|1817|Public
25|$|The Cr-48's {{hardware}} design broke convention by replacing certain keys with shortcut keys, {{such as the}} function keys, and replacing the caps lock key with a dedicated <b>search</b> <b>key,</b> which can be changed back to caps lock in the OS's keyboard settings. Google addressed complaints that the operating system offers little functionality when the host device is not connected to the Internet, demonstrated an offline version of Google Docs, and announced a 3G plan that would give users 100MB of free data each month, with additional paid plans available from Verizon.|$|E
50|$|In each step, the {{algorithm}} compares the <b>search</b> <b>key</b> value {{with the key}} value at the current search index. If the element at the current index is smaller than the <b>search</b> <b>key,</b> {{the algorithm}} repeats, skipping to the next search index by doubling it, calculating the next power of 2. If the element at the current index {{is larger than the}} <b>search</b> <b>key,</b> the algorithm now knows that the <b>search</b> <b>key,</b> if it is contained in the list at all, is located in the interval formed by the previous search index, 2, and the current search index, 2. The binary search is then performed with the result of either a failure, if the <b>search</b> <b>key</b> is not in the list, or the position of the <b>search</b> <b>key</b> in the list.|$|E
50|$|In {{computer}} science, an exponential search (also called doubling search or galloping search or Struzik search) is an algorithm, {{created by}} Jon Bentley and Andrew Chi-Chih Yao in 1976, for searching sorted, unbounded/infinite lists. There are numerous ways to implement {{this with the}} most common being to determine a range that the <b>search</b> <b>key</b> resides in and performing a binary search within that range. This takes O(log i) where i is {{the position of the}} <b>search</b> <b>key</b> in the list, if the <b>search</b> <b>key</b> is in the list, or the position where the <b>search</b> <b>key</b> should be, if the <b>search</b> <b>key</b> is not in the list.|$|E
30|$|In PKIS-II, {{the main}} {{difference}} from PKIS-I is that the <b>search</b> <b>keys</b> are not changed but fixed, irrespectively of membership changes. GM keeps the key matching information for groups, which consists {{of all of the}} group session <b>keys</b> and group <b>search</b> <b>keys</b> for each group. All users of group members do not know their group <b>search</b> <b>keys.</b> The only thing they know is a group session key. Instead, GM takes users' places for search processes.|$|R
40|$|Many {{libraries}} use the OCLC Online Union Catalog and Shared Cataloging Subsystem {{to perform}} various library functions, such as acquisitions and cataloging of library materials. As an initial {{part of the}} operations,users must search and retrieve a bibliographic record for the desired item from the large OC LC database. Various types of derived <b>search</b> <b>keys</b> are available for retrieval. This study of actual search keysentered by users of the OCLC online system was conducted to determine the types of <b>search</b> <b>keys</b> users prefer for performing various library operations {{and to find out}} whether the preferred <b>search</b> <b>keys</b> are effective...|$|R
5000|$|Allow the {{compiler}} to 'choose' {{to generate}} a branch table on the remaining <b>search</b> <b>keys</b> (1-50).|$|R
50|$|Where {{there is}} no obvious integer value {{available}} for a branch table it can nevertheless be created from a <b>search</b> <b>key</b> (or part of a <b>search</b> <b>key)</b> by some form of arithmetic transformation, or could simply be the row number of a database or the entry number in an array containing the <b>search</b> <b>key</b> found during earlier validation of the key.|$|E
50|$|Hash {{functions}} {{are used in}} hash tables, to quickly locate a data record (e.g., a dictionary definition) given its <b>search</b> <b>key</b> (the headword). Specifically, the hash function is used to map the <b>search</b> <b>key</b> to a list; the index gives the place in the hash table where the corresponding record should be stored. Hash tables, also, are used to implement associative arrays and dynamic sets.|$|E
5000|$|In {{computer}} science, a jump search or block search {{refers to}} a search algorithm for ordered lists. It works by first checking all items Lkm, where [...] and m is the block size, until an item is found that {{is larger than the}} <b>search</b> <b>key.</b> To find the exact position of the <b>search</b> <b>key</b> in the list a linear search is performed on the sublist Lkm.|$|E
30|$|In PKIS-I, group <b>search</b> <b>keys</b> ik and dk are {{reversely}} generated with hash key chains by GM, {{which are}} dynamic to session-changes. The group <b>search</b> <b>keys</b> for each session are encrypted {{with a group}} session key and then transferred to group members. Actual encryption keys for indexes and documents in database tables {{are made up of}} the group <b>search</b> <b>keys</b> and GM's secret key. This means that secret values are managed together by group members and GM. Especially, the more number of sessions have passed, the more trapdoors for one keyword query should be generated in PKIS-I, because group <b>search</b> <b>keys</b> ik and dk are updated dynamically to session-changes. Nevertheless, the searching time of PKIS-I is only within 53 ms (0.053 s) when a session is the 1000 th. In fact, the current session may be over 1000 in some environments such as mobile environments, and it would require more time and computational overheads. However, our applications are for organizations such as companies or municipal offices, so that our performance can manage these applications (group organizations) sufficient.|$|R
30|$|In PKIS-I, group <b>search</b> <b>keys</b> are {{reversely}} {{generated by}} the one-way hash key chain. Our scheme PKIS-I satisfies with Group Search Secrecy as follows.|$|R
40|$|Systems {{able to find}} a song {{based on}} a sung, hummed, or whistled melody are called Query-By-Humming (QBH) systems. Hummed or sung queries are not {{directly}} com-pared to original recordings. Instead, systems employ <b>search</b> <b>keys</b> that are more similar to a cappella singing than the original pieces. Successful, deployed systems use human computation to create search keys: hand-entered midi melodies or recordings of a cappella singing. There are a number of human computation-based approaches that may be used to build a database of QBH <b>search</b> <b>keys,</b> {{but it is not clear}} what the best choice is based on cost, com-putation time, and search performance. In this paper we compare <b>search</b> <b>keys</b> built through human computation us-ing two populations: paid local singers and Amazon Me-chanical Turk workers. We evaluate them on quality, cost, computation time, and search performance. 1...|$|R
5000|$|The {{first step}} is to sort the data entries {{according}} to a <b>search</b> <b>key</b> in ascending order.|$|E
50|$|The Xperia arc too {{features}} only 3 hardware keys, {{unlike the}} usual 4-key pattern seen in Android phones. The <b>search</b> <b>key</b> has been removed, and instead, the user can directly search by long-pressing the menu key.|$|E
5000|$|Exponential search {{allows for}} searching through a sorted, {{unbounded}} list for a specified input value (the search [...] "key"). The algorithm {{consists of two}} stages. The first stage determines a range in which the <b>search</b> <b>key</b> would reside if it were in the list. In the second stage, a binary search is performed on this range. In the first stage, assuming that the list is sorted in ascending order, the algorithm looks for the first exponent, j, where the value 2 {{is greater than the}} <b>search</b> <b>key.</b> This value, 2 becomes the upper bound for the binary search with the previous power of 2, 2, being the lower bound for the binary search.|$|E
3000|$|... {{reveal their}} group <b>search</b> <b>keys</b> to other groups' members when a session is {{changed from the}} second to the third, other users can know only [...]...|$|R
3000|$|Group search secrecy: Members {{of a group}} cannot {{know their}} group <b>search</b> <b>keys</b> ik and dk in PKIS-II and only GM knows them. Even if a leaving member or another {{malicious}} member reveals his group session key gk to DS, DS cannot know {{the contents of the}} documents or trapdoor because they are encrypted with the group <b>search</b> <b>keys</b> ik and dk that group members do not know. Therefore, the probability that a datacenter server DS can guess correctly the encrypted data of a group g [...]...|$|R
30|$|For a {{datacenter}} server DS, when DS generates trapdoors with {{a random}} selected keyword and <b>search</b> <b>keys,</b> {{the probability that}} a server succeeds in retrieving is negligible.|$|R
5000|$|Most often, {{the key is}} omitted, {{the record}} located {{sequentially}} or by direct cylinder-head-record addressing. If it is present, the key is typically {{a copy of the}} first [...] bytes of the data record (for [...] "unblocked" [...] records, or a copy of the highest key in the block, for [...] "blocked" [...] records), but can be any data which will be used to find the record, usually using the <b>Search</b> <b>Key</b> Equal or <b>Search</b> <b>Key</b> High or Equal CCW. The key (and hence the record) is locatable via hardware commands. Since the introduction of IBM's System/360 in 1964, nearly all IBM large and intermediate system DASDs have used the count key data record format.|$|E
5000|$|Bentley and Yao {{suggested}} several variations for exponential search. These variations {{consist of}} performing a binary search, {{as opposed to}} a unary search, when determining the upper bound for the binary search in the second stage of the algorithm. This splits the first stage of the algorithm into two parts, making the algorithm a three-stage algorithm overall. The new first stage determines a value '''', much like before, such that [...] is larger than the <b>search</b> <b>key</b> and [...] is lower than the <b>search</b> <b>key.</b> Previously, '''' was determined in a unary fashion by calculating the next power of 2 (i.e., adding 1 to j). In the variation, it is proposed that [...] is doubled instead (e.g., jumping from 2 to 2 as opposed to 2). The first '''' such that [...] is greater than the <b>search</b> <b>key</b> forms a much rougher upper bound than before. Once this '''' is found, the algorithm moves to its second stage and a binary search is performed on the interval formed by [...] and , giving the more accurate upper bound exponent j. From here, the third stage of the algorithm performs the binary search on the interval 2 and 2, as before. The performance of this variation is [...] = O(log i).|$|E
50|$|A sparse index in {{databases}} is a {{file with}} pairs of keys and pointers for every {{block in the}} data file. Every key in this file {{is associated with a}} particular pointer to the block in the sorted data file. In clustered indices with duplicate keys, the sparse index points to the lowest <b>search</b> <b>key</b> in each block.|$|E
40|$|In {{discussion}} about <b>search</b> <b>keys,</b> {{concern has been}} expressed {{as to how the}} nunber of items tetrieved by a single value relates to collection size. This paper creates a statistical model that attempts to give some insight into this behavior. It is concluded that, in general, the observed behavior can be explained as being intrinsically statistical in nature rather than being a property of specific <b>search</b> <b>keys.</b> An attempt is made to relate this model to other tesearch, and to indicate how this model may be made to yield more accurate predictions...|$|R
30|$|In PKIS-II, group <b>search</b> <b>keys</b> ik and dk are unchanging {{irrespectively}} of session-changes. GM keeps a key matching information for groups, where group <b>search</b> <b>keys</b> ik and dk are matched to the dynamic group's session keys. When group members query GM with some data, the data should be encrypted with the group's session key, whereby a group member can be authenticated as a valid group member. Once a member passes the authentication, most processes are implemented by GM {{instead of the}} member. Receiving some data from a group member or a server, GM decrypts and re-encrypts the received data, so that GM gets to know all {{of the contents of}} documents and trapdoors every query time. However, only one trapdoor is sufficient for one keyword due to unchanging group <b>search</b> <b>keys</b> independently of session-changes. The invariable searching time is required {{irrespectively of}} session-changes. If the current number of session is high, the performance of PKIS-II is more efficient than PKIS-I as described in Table 4.|$|R
3000|$|... [...]. Although one {{of group}} members reveals his/her group <b>search</b> <b>keys</b> to a {{datacenter}} server DS, DS cannot learn anything because DS {{does not know}} GM's secret key k [...]...|$|R
50|$|In {{computer}} science, a k-d tree (short for k-dimensional tree) is a space-partitioning {{data structure}} for organizing {{points in a}} k-dimensional space. k-d trees are a useful data structure for several applications, such as searches involving a multidimensional <b>search</b> <b>key</b> (e.g. range searches and nearest neighbor searches). k-d trees are a special case of binary space partitioning trees.|$|E
50|$|Below are two {{versions}} of a subroutine (implemented in the C programming language) for looking up a given <b>search</b> <b>key</b> in a singly linked list. The first one uses the sentinel value , and the second one a (pointer to the) sentinel node , as the end-of-list indicator. The declarations of the singly linked list data structure and the outcomes of both subroutines are the same.|$|E
50|$|Bing for mobile (formerly Live Search Mobile) is {{a search}} tool for {{handheld}} mobile devices from Microsoft {{as part of}} their Bing search engine. It is designed for mobile device displays. Bing Mobile is built into Windows Mobile and Windows Phone as proprietary software, accessed via the <b>Search</b> <b>key</b> on Windows Phone 7 and Windows Phone 8 devices. It is also available on Windows Phone 8.1 (and integrated with Microsoft Cortana where available), and can be downloaded for other platforms, including iOS and Android.|$|E
40|$|The {{quality of}} diverse {{compound}} selection mainly depends on cluster algorithms, descriptors, the combinations of the descriptors, and similarity metrics. The Jarvis-Patrick algorithm, MDL <b>search</b> <b>keys,</b> and Daylight fingerprints are a well accepted algorithm and structure descriptors for compound library diversity analysis. Based upon our 288 experiments on selecting compounds from various descriptor combinations, {{we have found}} (1) hybrid Daylight and MDL structural descriptors for diversity analyses can produce worse results; (2) selections based purely on 2, 048 -bit Daylight fingerprints yield better results than the ones based purely on MDL 166 -bit search keys; (3) when Daylight fingerprints and MDL <b>search</b> <b>keys</b> are combined, {{it is better to}} compute the similarities independently, then to take the smaller value for the outcome. This will yield better average separation of clusters; (4) regarding the consistency of different clustering approaches, the Daylight fingerprints based clustering is more consistent with the SCA approach than it does with the MDL <b>search</b> <b>keys</b> based approach; (5) The MDL <b>search</b> <b>keys</b> based selection approach tends to select a greater number of compounds from larger clusters. As the Daylight fingerprint is folded two and three times, respectively, information is lost, and this approach tends to select a greater number of compounds from larger clusters as well. These results have not been reported before to our knowledge...|$|R
30|$|The teacher {{inquires}} of {{the learners}} why collisions occur {{and how the}} searching process changes. Then, the teacher requests the learners to find the dataset and <b>search</b> <b>keys</b> that trigger collisions.|$|R
30|$|It must be {{computationally}} infeasible for DS to know or guess correctly {{the contents}} of the encrypted documents and trapdoors even if a leaving member or another member in a group reveals his group <b>search</b> <b>keys.</b>|$|R
50|$|In another approach, SIP over P2P, the SIP {{location}} {{service is}} replaced by conventional P2P overlay networking approach, such as the OverSim framework.In this model, the overlay network is used for service or node discovery and rendezvous. The <b>search</b> <b>key</b> in such a mechanism is the Uniform Resource Identifier (URI) of a user agent. This URI requires resolution to a particular device or Uniform Resource Locator (URL) that must be performed in real time.P2P-SIP systems may employ structured peer-to-peer approaches, as well as unstructured peer-to-peer architectures.|$|E
5000|$|Algorithm JumpSearch Input: An {{ordered list}} L, its length n and a <b>search</b> <b>key</b> s. Output: The {{position}} of s in L, or nothing if s {{is not in}} L. [...] a ← 0 b ← ⌊√n⌋ [...] while Lmin(b,n)-1 < s do a ← b b ← b + ⌊√n⌋ if a ≥ n then return nothing [...] while La < s do a ← a + 1 if a = min(b,n) return nothing [...] if La = s then return a else return nothing ...|$|E
5000|$|The {{first stage}} of the {{algorithm}} takes O(log i) time, where i is the index where the <b>search</b> <b>key</b> {{would be in the}} list. This is because, in determining the upper bound for the binary search, the while loop is executed exactly [...] times. Since the list is sorted, after doubling the search index [...] times, the algorithm will be at a search index that is {{greater than or equal to}} i as [...] As such, the {{first stage of}} the algorithm takes O(log i) time.|$|E
3000|$|... [...]. The two {{values are}} secret keys for PRF f. By Definition 2, if DS generates trapdoors with a random {{selected}} keyword and <b>search</b> <b>keys,</b> {{the probability that}} a server can succeed in retrieving is e 2, negligible.|$|R
3000|$|... [...]. However, the <b>search</b> <b>keys</b> of {{document}} {{encryption key}} dk 1 and index encryption key ik 1 are unchanged and remain still as dk 1 and ik 1. When needed, {{they can be}} encrypted with GM's secret key k [...]...|$|R
40|$|Abstract. XML query {{processing}} {{is one of}} {{the most}} active areas of database research. Although the main focus of past research has been the processing of structural XML queries, there are growing demands for a full-text search for XML documents. In this paper, we propose XICS (XML Indices for Content and Structural search), novel indices built on a B +-tree, for the fast processing of queries that involve structural and fulltext searches of XML documents. To represent the structural information of XML trees, each node in the XML tree is labeled with an identifier. The identifier contains an integer number representing the path information from the root node. XICS consist of two types of indices, the COB-tree (COntent B +-tree) and the STB-tree (STructure B +-tree). The <b>search</b> <b>keys</b> of the COB-tree are a pair of text fragments in the XML document and the identifiers of the leaf nodes that contain the text, whereas the <b>search</b> <b>keys</b> of the STB-tree are the node identifiers. By using a node identifier in the <b>search</b> <b>keys,</b> we can retrieve only the entries that match the path information in the query. Our experimental results show the efficiency of XICS in query processing. ...|$|R
