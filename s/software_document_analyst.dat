0|977|Public
40|$|Abstract. One of {{the central}} issues {{involved}} in developing a software development environment is the consistency support for <b>software</b> <b>documents</b> and their relationships. To provide such support, the environment hasto have {{the knowledge of the}} consistency requirements of the <b>software</b> <b>documents</b> concerned. In this paper, we introduce an approach to specifying the structural properties of <b>software</b> <b>documents</b> in a declarative style. Such a speci cation can be used to augment a generic tool to provide specialised structural consistency support for the <b>software</b> <b>documents</b> concerned. In particular, we showhowcomposed relationships can be used to specify structural properties...|$|R
40|$|The Software Concordance {{project is}} {{addressing}} the <b>software</b> <b>document</b> management problem {{by providing a}} fine-grained version control model for <b>software</b> <b>documents</b> and their relationships using hypermedia versioning. A set of tools needed to maintain, visualize and analyze <b>software</b> <b>documents</b> is being constructed. This short paper presents research issues, initial results and a scheme for using hypermedia versioning and time stamps to automate detection of possible semantic non-conformance among software artifacts...|$|R
40|$|One of {{the central}} issues {{involved}} in developing a software development environment is the consistency support for <b>software</b> <b>documents</b> and their relationships. To provide such support, the environment has to have {{the knowledge of the}} consistency requirements of the <b>software</b> <b>documents</b> concerned. In this paper, we introduce an approach to specifying the structural properties of <b>software</b> <b>documents</b> in a declarative style. Such a specification can be used to augment a generic tool to provide specialised structural consistency support for the <b>software</b> <b>documents</b> concerned. In particular, we show how composed relationships can be used to specify structural properties. Keywords. Inter- and intra-document relationships, software consistency, software development environments and tools, <b>software</b> <b>documents,</b> structural properties. 1 Introduction Software development environments are supposed to support the complete software development process and maintain all the documents produced in this pr [...] ...|$|R
40|$|To {{meet the}} aims of this proposal, the {{investigator}} will address the following research issues: ffl The design of document representations that support the complete interoperability of <b>software</b> <b>documents,</b> regardless of their medium, so that any <b>software</b> <b>document</b> (including source code) can include material in any medium or any relevant fragment of any other <b>software</b> <b>document.</b> ffl The design of representations for the logical relationships between <b>software</b> <b>documents</b> that help developers determine whether the contents of related documents are in conformance. ffl The design of analytic, visualization and user interface tools that help developers maintain and understand the relationships between their <b>software</b> <b>documents</b> {{and the extent to}} which these documents conform to each other. The success of the research will be evaluated through the implementation of these designs in a development environment for Java programs and all their associated documents. This environment will use World-Wide Web technology to connect the documents but will supplement the standard document and link structure with fine-grained revision control, specialize...|$|R
2500|$|In late 1971, Irving {{delivered}} the manuscript to McGraw-Hill. He included notes in Hughes' forged handwriting that an expert forensic <b>document</b> <b>analyst</b> declared genuine. Hughes [...] "experts" [...] at Time-Life were completely convinced and McGraw-Hill announced {{its intention to}} publish the book in March 1972.|$|R
5000|$|May 2008: Tower <b>Software,</b> <b>document</b> {{and records}} {{management}} software ...|$|R
40|$|Software {{development}} {{involves a}} variety of inter-related <b>software</b> <b>documents</b> produced in the different phases of the software development process. A CASE environment should maintain these documents and their relationships, and provide support for their consistency. Hypertext provides a general way to store and present inter-related information. It is natural to expect that hypertext can {{play a significant role}} in realising the support required by the inter-related <b>software</b> <b>documents</b> in CASE environments. In this paper, we present a critical analysis of hypertext capabilities in fulfilling the managerial and technical support requirements of <b>software</b> <b>documents.</b> We identify both the requirements which can be met by readily available hypertext capabilities and those which require enhanced hypertext features. Keywords. Hypertext support for CASE, <b>software</b> <b>documents,</b> inter- and intra-document relationships, structural properties, presentation views. A paper appeared in Journal of Comput [...] ...|$|R
5000|$|... (remote {{control and}} {{monitoring}} <b>software,</b> filetransfer <b>software,</b> <b>document</b> camera and presenter, free tools,...) ...|$|R
40|$|Abstract. The article {{describes}} the method of redocumentation of legacy software intended for using insoftware reengineering. Documents that are created in redocumentation should meet the requirements ofsoftware development technology {{to be used in}} forward engineering. <b>Software</b> <b>document</b> models located atdifferent abstract levels are proposed: model of <b>software</b> <b>document,</b> meta-model of the document of thedevelopment technology, model of the development technology document. The models created are used in themethod implementation based on the model-driven approach. According to this approach, redocumentationis considered to be the process of creating a set of legacy <b>software</b> <b>documents</b> by transformation models ofdocuments, the documents contents being formed on the basis of legacy software views set. Keywords: legacy software, model-driven approach, model of document, redocumentation...|$|R
50|$|In a {{software}} development team, {{a software}} analyst {{is the person}} who studies the software application domain, prepares software requirements, and specification (<b>Software</b> Requirements Specification) <b>documents.</b> The <b>software</b> <b>analyst</b> is the seam between the software users and the software developers. They convey the demands of software users to the developers.|$|R
40|$|The article {{considers}} development technology oriented {{method of}} legacy <b>software</b> redocumentation; <b>software</b> <b>document</b> model. It is proposed redocumentation document description language RDDL. ? ?????? ??????????????? ????? ?????????????????? ???????????? ???????????? ???????????, ??????????????? ?? ?????????? ??????????; ?????? ????????? ???????????? ???????????. ????????? ???? ???????? ?????????? ??? ?????????????????? RDDL...|$|R
40|$|<b>Software</b> <b>documents</b> {{are used}} to capture and {{communicate}} knowledge in software projects. It is important that this knowledge can be retrieved efficiently and effectively, to prevent wasted time and errors that negatively {{affect the quality of}} software. In this paper we investigate how software professionals search for knowledge in documentation. We studied the search behaviour of professionals in industry. Prior knowledge helps professionals to search <b>software</b> <b>documents</b> efficiently and effectively. However, it can also misguide professionals to an incomplete search...|$|R
40|$|Abstract: For long, {{fine-grained}} {{version control}} for <b>software</b> <b>documents</b> has been neglected severely. Typically, software configuration management systems support {{the management of}} text or binary files. Unfortunately, text-based tools for fine-grained version control are not adequate for <b>software</b> <b>documents</b> produced in earlier phases in the software life cycle. Frequently, these documents have a graphical syntax; therefore we will call them software diagrams. This paper discusses {{the current state of}} the art in fine-grained version control (differencing and merging) for software diagrams with an emphasis on UML diagrams. ...|$|R
40|$|During the {{evolution}} of a large-scale software project, developers produce a large variety of software artifacts such as requirement specifications, design documents, source code, documentation, bug reports, etc. These <b>software</b> <b>documents</b> are not isolated items â€” they are semantically related to each other. They evolve over time and the set of active semantic relationships among them is also dynamic. Their evolution makes the task of managing them and maintaining their semantic consistency a very challenging task for software developers. At times, {{the evolution}}ary changes may reduce the consistency of the software project and break semantic connections among its documents. We use the term conformance to denote the state where the network formed by <b>software</b> <b>documents</b> and their relationships is in semantic harmony. Conformance analysis is the process of determining whether <b>software</b> <b>documents</b> and their logical relationships are in agreement. In this paper, we present a representation for <b>software</b> <b>documents</b> and their logical relationships based on the hypertext model. We describe how conformance analysis can be supported by this representation and present a method to detect non-conformance using timestamps and versioned hypermedia. Then we describe a formalism, called the conformance model, {{that can be used to}} understand and combine approaches to the conformance analysis problem. ...|$|R
40|$|Merging {{revisions}} of <b>software</b> <b>documents</b> after develop-ment has branched into multiple lines {{is a difficult}} task. Previous approaches to merging are either based on text files or refer to specific languages. These approaches {{do not meet the}} requirements to a merge tool which is to be integrated into a multilingual structure-oriented environ-ment. In this paper, we present a structure-oriented merge tool that is applicable to <b>software</b> <b>documents</b> (re-quirements definitions, <b>software</b> architecture descrip-tions, module implementations, etc.) written in arbitrary languages, preserves their context-free correctness, and also takes binding of identifiers to their declarations into account. ...|$|R
40|$|Context <b>Software</b> <b>documents</b> are core {{artifacts}} {{produced and}} consumed in documentation {{activity in the}} software lifecycle. Meanwhile, knowledge-based approaches have been extensively used in software development for decades, however, the software engineering community lacks a comprehensive understanding on how knowledge-based approaches are used in software documentation, especially documentation of software architecture design. Objective The objective of this work is to explore how knowledge-based approaches are employed in software documentation, their influences {{to the quality of}} software documentation, and {{the costs and benefits of}} using these approaches. Method We use a systematic literature review method to identify the primary studies on knowledge-based approaches in software documentation, following a pre-defined review protocol. Results Sixty studies are finally selected, in which twelve quality attributes of <b>software</b> <b>documents,</b> four cost categories, and nine benefit categories of using knowledge-based approaches in software documentation are identified. Architecture understanding is the top benefit of using knowledge-based approaches in software documentation. The cost of retrieving information from documents is the major concern when using knowledge-based approaches in software documentation. Conclusions The findings of this review suggest several future research directions that are critical and promising but underexplored in current research and practice: (1) there is a need to use knowledge-based approaches to improve the quality attributes of <b>software</b> <b>documents</b> that receive less attention, especially credibility, conciseness, and unambiguity; (2) using knowledge-based approaches with the knowledge content in <b>software</b> <b>documents</b> which gets less attention in current applications of knowledge-based approaches in software documentation, to further improve the practice of software documentation activity; (3) putting more focus on the application of <b>software</b> <b>documents</b> using the knowledge-based approaches (knowledge reuse, retrieval, reasoning, and sharing) in order to make the most use of software documents; and (4) evaluating the costs and benefits of using knowledge-based approaches in software documentation qualitatively and quantitatively. Â© 2014 Elsevier B. V. All rights reserved...|$|R
40|$|The Netlib {{repository}} contains freely available <b>software,</b> <b>documents,</b> and databases {{of interest}} to the numerical, scientific computing, and other communities. The repository is maintained by AT&T Bell Laboratories, the University of Tennessee and Oak Ridge National Laboratory, and by colleagues world-wide...|$|R
50|$|Pandoc is a {{free and}} {{open-source}} <b>software</b> <b>document</b> converter, widely used as a writing tool (especially by scholars) and {{as a basis for}} publishing workflows. It was originally created by John MacFarlane, a philosophy professor at the University of California, Berkeley.|$|R
40|$|One of the {{functionalities}} {{of software}} development environments {{is to maintain}} all the documents produced in the software development process. To facilitate the much needed traceability support for the software process, {{the representation of the}} <b>software</b> <b>documents</b> should capture not only the individual documents, but also their relationships and structural properties. In this paper, we present an approach to the representation and description of <b>software</b> <b>documents.</b> Syntax trees, structural relations and structural constraints are introduced to capture the syntactic structures of documents, the interand intra-document relationships and the structural properties of these documents and relationships. With this three-tiered approach, we are able to obtain a complete, static representation and description of the documents' syntactic and structural features...|$|R
40|$|We {{identify}} and analyze basic principles which necessarily underlie software measures research. In the prevailing paradigm for the validation of software measures {{there is a}} fundamental assumption that the sets of measured documents are ordered, and that measures should report these orders. We describe mathematically the nature of such orders. Consideration of these orders suggests a hierarchy of <b>software</b> <b>document</b> measures, a methodology for developing new measures, and a general approach to the analytical evaluation of measures. We also point out the importance of units for any type of measurement and stress the perils of equating document structure complexity and psychological complexity. Keywords: software measures, abstractions of <b>software</b> <b>documents,</b> <b>software</b> structure, analytical evaluations of measures 1 Introduction This paper presents some underlying principles for software measures research. By "software measures" we mean measures which are obtainable directly from software d [...] ...|$|R
40|$|In this report, we {{describe}} {{the development of an}} automated system that aids human <b>document</b> <b>analysts</b> in the assignment of indexes to journal articles in the area of physical chemistry. AIMS (Assisted Indexing at Mississippi State) has two major components: a natural language processing (NLP) component and an index generation (IG) component. This report provides an overview of each component. The description of the NLP component focuses on the identification of units of the text and the attachment of appropriate tags to terms in the text. Primarily, there [...] ...|$|R
50|$|The {{following}} {{comparison of}} accounting <b>software</b> <b>documents</b> the various features {{and differences between}} different professional accounting software and personal finance packages. The comparison only focus considering financial and external accounting functions. No comparison is made for internal/management accounting, cost accounting, budgeting, or integrated MAS accounting.|$|R
40|$|Source code {{browsing}} is {{an important}} part of program comprehension. Browsers expose semantic and syntac-tic relationships (such as between object references and definitions) in GUI-accessible forms. These relation-ships are derived using tools which perform static anal-ysis on the original <b>software</b> <b>documents.</b> Implementing such browsers is tricky. Program comprehension strate-gies vary, and it is necessary to provide the right brows-ing support. Analysis tools to derive the relevant cross-reference relationships are often difficult to build. Tools to browse distributed documents require extensive cod-ing for the GUI, as well as for data communications. Therefore, there are powerful motivations for using ez-istang Statzc analysts tools in conjunction with WWW technology to implement browsers for distributed soft-ware projects. The CHIME framework provides a flex-ible, customizable platform for inserting HTML links into <b>software</b> <b>documents</b> using information generated by existing software analysis tools. Using the CHIME spec-ification language, and a simple, retargetable database interface, it is possible to quickly incorporate a range of different link insertion tools for <b>software</b> <b>documents,</b> into an existing, legacy software development environ-ment. This enables tool builders to offer customized browsing support with a well-known GUI. This paper describes the CHIME architecture, and describes our ex-perience with several re-targeting efforts of this system. ...|$|R
40|$|This paper {{describes}} how software visualisation can be supported in a generic environment for manipulation of <b>software</b> <b>documents,</b> using off-the-shelf graph-drawing tools. The {{effectiveness of the}} visualisation facilities achieved in a prototype implementation using the UQ* environment is illustrated {{by means of a}} call-graph visualisation case-study...|$|R
40|$|These <b>software</b> <b>documents</b> {{support the}} Xilinx Â® Integrated Software Environment (ISEÂ®) <b>software.</b> Click a <b>document</b> title {{on the left}} to view a document, or click a design step in the {{following}} figure to list the documents associated with that step. Note To get started with the software, see Getting Started. Manuals provide reference information. Help provides reference information and procedures for using the ISE software. Tutorials walk you step-by-step through the design process...|$|R
40|$|Several {{researchers}} have explored {{the use of}} hypermedia technology in software development environments (SDEs). However, existing hypermedia-based SDEs have only limited support for the evolutionary aspects of software projects. On the other hand, commercial software configuration management systems (SCMs) have had noticeable success in helping developers manage system evolution. While researchers in the hypermedia community acknowledged the need for strong version control support in their systems, they are still far from achieving this goal. The Software Concordance (SC) project is developing a SDE to experiment {{with the use of}} versioned hypermedia services for managing <b>software</b> <b>documents</b> and their logical relationships. This paper describes our versioned hypermedia framework in which hypermedia services are built on top of a SCM system and provides uniform version control supports for both <b>software</b> <b>documents</b> and their relationships...|$|R
40|$|There {{have been}} {{different}} approaches to software engineering environments, from product-centred to process-centred. In this paper, we introduce a document-based approach aimed at integrating the support for software products and software processes. The issues addressed include a conceptual environment architecture, a generic implementation strategy, and a document model which deals with representation, manipulation and presentation of <b>software</b> <b>documents</b> and their relationships. The major features of the approach are demonstrated by a small but typical example. keywords: <b>Software</b> <b>documents,</b> relationships, operations, views. A paper to appear in Proceedings of 5 th International CASE Symposium, Changsha, Hunan, China, October/Novermber 1995. A Document-Based Approach to Software Engineering Environments Jun Han Peninsula School of Computing and Information Technology Monash University, McMahons Road Frankston, Vic 3199, Australia E-mail: jhan@monash. edu. au KEYWORDS: software docum [...] ...|$|R
50|$|Document I {{provides}} a detailed {{introduction to the}} concepts behind open source software and its possible impact on Microsoft products and services. It outlines {{the strengths and weaknesses}} of open source <b>software.</b> <b>Document</b> II describes the basic architecture of the Linux system, and its relation to Unix and Windows NT.|$|R
40|$|In {{order for}} a large dataset of {{documents}} to be usable by <b>document</b> <b>analysts,</b> the dataset must be searchable on doc-ument features and {{on the results of}} prior analytic work. This paper describes a work-in-progress to develop such a document repository. We describe the types of data we plan to maintain regarding both the documents themselves and analyses performed on those documents. By storing the provenance of all metadata pertaining to documents, the repository will allow researchers to determine dependency relationships among document analyses. Our ultimate goal is to enable geographically separated teams of researchers to collaborate in large document analysis efforts...|$|R
40|$|Software {{development}} is a dynamic process where engineers constantly refine their systems. As a consequence, all software artifacts and their logical relationships evolve. At times, the evolutionary changes may reduce {{the consistency of the}} software project and break semantic connections among documents. We use the term conformance to denote the state where the network formed by <b>software</b> <b>documents</b> and their relationships is in semantic harmony. Conformance analysis is the process of determining whether <b>software</b> <b>documents</b> and their logical relationships are in agreement. In our previous research, we have developed a formalism {{that can be used to}} verify strategies to conformance analysis. In this paper, we describe modifications to that formalism, and its applications to build conformance analysis tools in an integrated development environment that is extensible to incorporate new conformance analysis strategies and to combine multiple strategies together. ...|$|R
40|$|Abstract {{visualisation}} of <b>software</b> <b>documents</b> is {{a powerful}} tool for software comprehension. A good software visualisation tool should provide the user with the flexibility to define new visualisations as they are required and powerful navigation facilities within visualisations that convey the structures and relationships inherent in the underlying <b>software</b> <b>documents.</b> We argue that software visualisation is inherently part of the creative process and therefore, where possible, it is desirable to allow the user to manipulate the underlying documents via visualisations. In this paper we describe how the UQ* software development environment and, in particular, the associated generic language-based editor provides for: the flexible definition of software visualisations; powerful navigation facilities that are common to both the software visualisations and the actual software documents; and the manipulation of appropriate content within such visualisations. We note some shortcomings of the [...] ...|$|R
40|$|As {{a uniform}} {{front-end}} user interface, a generic language-based editor {{should have the}} capability to incorporate both analytic and constructive back-end tools. In this paper, we analyse the requirements of, and propose a strategy for, integrating constructive tools into a generic language-based editor. The major issues addressed include definition of <b>software</b> <b>documents</b> containing tool contributions, real-time consistency checking of such documents, communication and synchronisation between the editor and constructive tools. We demonstrate the feasibility of this approach by integrating a theorem prover into the enhanced generic editor. To cater for the full range of representation and integration requirements of both analytic and constructive tools, we propose to define a generic model of <b>software</b> <b>documents</b> and to develop a corresponding front-end editor for such documents which is capable of real-time interaction with these tools. 1 Introduction Software development tools [...] ...|$|R
50|$|ECO Manager is CAD {{comparison}} <b>software</b> that <b>documents</b> changes between revisions.|$|R
40|$|Abstract. We use Bayesian {{neural network}} {{techniques}} {{to estimate the}} number of defects in a <b>software</b> <b>document</b> based {{on the outcome of}} an inspection of the document. Our neural networks clearly outperform standard methods from software engineering for estimating the defect content. We also show that selecting the right subset of features largely improvesthepredictiveperformanceofthenetworks. ...|$|R
40|$|Construction of {{software}} engineering tools is a challenging task. In the different {{phases of the}} software life cycle, {{a wide variety of}} <b>software</b> <b>documents</b> is created, including e. g. class diagrams, project plans, entity-relationship diagrams, etc. As a consequence, an equally large set of supporting tools has to be developed with affordable effort. Th...|$|R
50|$|Unlike a {{financial}} plan or a budget {{a financial}} forecast doesn't have {{to be used as}} a planning <b>document.</b> Outside <b>analysts</b> can use a financial forecast to estimate a company's success in the coming year.|$|R
