5|504|Public
50|$|For {{feedback}} an {{occupancy detector}} {{based on current}} consumption on track or a decoder detecting a closed contact can be connected to a SX bus. Because system decoders can <b>share</b> <b>bus</b> addresses thus allowing decoders to control each other directly through bus synchronization, it is, for instance, quite possible to use an occupancy detector to switch a signal to stop position automatically {{when there is a}} train in track block protected by the signal. Some Selectrix occupancy detectors are equipped with transponding capability. They report the ID of the locomotive decoder found in a monitored track block back to the system central unit via SX bus.|$|E
40|$|Abstract-The paper {{presents}} a scalable multiphase synchronous buck converter which meets the tight {{requirements of the}} next generation microprocessors. Flexibility in the number of phases (1 - 16 phases) accommodates requirements of various applications. The converter can be easily expanded or paralleled with other Voltage Regulator Modules (VRM) through an average current <b>share</b> <b>bus.</b> The distributed control IC architecture allows for local phase current signal processing, which minimizes induced noise and facilitates layout while reducing the gate driver to power stage impedance. The experimental results are given to show the advantages of the converter...|$|E
40|$|The article {{presents}} {{the problems and}} the importance of integration of public transport on the basis of Polish and EU documents relating to public transport, as well as gives examples of solutions that integrate urban public transport in Poland and worldwide. Public transport is a special kind of transport designed for fulfilling needs of city (communal) in range of urban and suburban transport of inhabitants. The main task of public transport is to enable the mobility of people with retaining the same conditions which are given by passengers. Issues concerning the public transport development (improvement in quality of public transport services in the all necessity and essence of its integration) are bringing up in many important Polish documents (e. g. State Transport Policy) and EU (e. g. White Paper, Green Paper). An example concern the solution of urban public transport integration in the country and world can be quoted of some solutions: implementation of the uniform tariff system, interchanges, share lanes for means of public transport, <b>share</b> <b>bus</b> and tram, share bus-tram routes implementation of the double system tram...|$|E
50|$|Next, routers {{began to}} have {{multiple}} forwarding elements, that communicated through a high-speed <b>shared</b> <b>bus</b> or through a shared memory. Cisco used <b>shared</b> <b>busses</b> until they saturated, while Juniper preferred shared memory.|$|R
40|$|Abstract — Network-on-Chip (NoC) designs {{attempt to}} solve the {{performance}} bottleneck of traditional <b>shared</b> <b>bus</b> designs. Current NoC solutions have drawbacks in area requirements or power consumption. A new architecture is presented to address these problems. Three models of the architecture are implemented in SystemC: a Globally Asynchronous Locally Synchronous (GALS) NoC model, a synchronous NoC model and a <b>shared</b> <b>bus</b> model. The performance of these three models are compared using Poisson distributed traffic with data-rates up to 4 Gbyte/s. Results show a strong case in favor of NoC design over the standard <b>shared</b> <b>bus</b> in large or high-bandwidth systems. For NoC systems, the performance break-even size (number of nodes) compared to a <b>shared</b> <b>bus</b> can be as low as 5 masters, while at a size of 15 nodes the NoC is already about 300 % faster than the <b>shared</b> <b>bus.</b> The GALS NoC shows a 24 - 27 % improvement in the delay time compared to the synchronous NoC. The additional design effort and the high bit-error sensitivity in the GALS case {{need to be addressed}} before the GALS NoC can be considered as candidate for future on-chip communication...|$|R
30|$|Higher {{compensation}} is achieved under the <b>Shared</b> <b>bus</b> scenario and lower is achieved under Tethering scenario.|$|R
40|$|This paper {{contributes}} to debates around improving the modelling of cycles, through an exploratory {{case study of}} bus–cycle interactions in London. This case study examines undocumented delays to buses caused by high volumes of cyclists in bus lanes. It has generally been assumed that cyclists do not noticeably delay buses in shared lanes. However, in many contexts where cyclists routinely <b>share</b> <b>bus</b> lanes, cyclist numbers have historically been low. In some such places, bus lanes are now seeing very high volumes of cyclists, far above those previously studied. This may have implications for bus – and cycle – journey times, but traditionally traffic modelling has not represented the effects of such interactions well. With some manipulation of parameters taken from models of other cities, the model described here demonstrates that cycles can cause significant delays to buses in shared lanes, at high cycling volumes. These delays {{are likely to become}} substantially larger if London's cycling demographic becomes more diverse, because cyclist speeds will decline. Hence bus journey time benefits may derive from separating cycles from buses, where cycle flows are high. The project also suggests that microsimulation modelling software, as typically used, remains problematic for representing cyclists...|$|E
40|$|In {{search of}} {{improved}} flowing conditions for buses, many cities introduced Bus lanes and later bus priority schemes in their traffic control systems. However, these two instruments are insufficient, since Bus lanes are not justified {{with a low}} number of buses per hour in a street section, and without such lanes buses frequently have to travel amidst congested conditions in extended parts of their routes in the city center. A new concept of "Time <b>Share</b> <b>Bus</b> Lanes", or "Intermittent Bus Lane (IBL) " for bus priority is introduced in this dissertation. The "Intermittent" here means that {{the status of a}} lane is not a constant one but changes according to some characteristics, such as the presence or not of a bus in its spatial domain. When a bus is approaching such a section, the status of that lane section is changed to be a bus only state, and after the bus moves out of the section, it then becomes a normal one again. The new measure will try to combine the advantages of two measures, or to fully use space and time to issue priority to bus movement as big as possible, while imposing minimum losses for the remaining traffic. The dissertation describes in detail the basic concept and structure of IBL system, the assignment of IBL signals along the road and their operations, the movements of buses and other vehicles on IBL, the influences of IBL signals the general traffic flow, the integration of IBL system with an UTC system both at hardware and software levels, the controls of the priority signals at a single intersection, the divisions of the bus lines within a network and the co ordination of the priority control parameters along every line. Available from Fundacao para a Ciencia e a Tecnologia, Servico de Informacao e Documentacao, Av. D. Carlos I, 126, 1249 - 074 Lisboa, Portugal / FCT - Fundação para o Ciência e a TecnologiaSIGLEPTPortuga...|$|E
5000|$|... 2008 {{demonstration}} of the COPACOBANA V4-SX35, a 128 Virtex-4 SX35 FPGA cluster (COPACOBANA <b>shared</b> <b>bus</b> architecture) ...|$|R
40|$|BUS AND CACHE MEMORY ORGANIZATIONS FOR MULTIPROCESSORS by Donald Charles Winsor Chairman: Trevor Mudge The single <b>shared</b> <b>bus</b> {{multiprocessor}} {{has been}} the most commercially successful multiprocessor system design up to this time, largely because it permits the implementation of efficient hardware mechanisms to enforce cache consistency. Electrical loading problems and restricted bandwidth of the <b>shared</b> <b>bus</b> have been the most limiting factors in these systems...|$|R
5000|$|Using {{point-to-point}} links {{instead of}} a <b>shared</b> <b>bus</b> greatly simplified troubleshooting and was less prone to failure.|$|R
40|$|In this paper, three {{parallel}} polygon {{scan conversion}} algorithms have been proposed, and their performance when executed on a <b>shared</b> <b>bus</b> architecture has been compared. It {{has been shown}} that the parallel algorithm that does not use edge coherence performs better than those that use edge coherence. Further, a multiprocessing architecture has been proposed to execute the parallel polygon scan conversion algorithms more efficiently than a single <b>shared</b> <b>bus</b> architecture...|$|R
40|$|System on Chip {{interconnections}} {{are gaining}} importance as many IP cores are being integrated {{on a single}} chip and interconnect is the bottleneck for design speed. In this paper an asynchronous design comprised of single master and multiple slaves connected via point-to-point topology is analysed. This design resulted in large multiplexer, poor timing closure and consumed large interconnect area in FPGA. The aim of the thesis is to evaluate the system on-chip interconnections and implement the system with the synchronous <b>shared</b> <b>bus</b> interconnection. Many system-on-chip interconnections are reviewed in the thesis, which includes study of major types of buses from different vendors. Synchronous <b>shared</b> <b>bus</b> system is proposed as solution for the interconnections between single master and multiple slaves. <b>Shared</b> <b>bus</b> for the single master and multiple slaves is implemented using WISHBONE architecture and protocols for <b>shared</b> <b>bus</b> system. A general model is designed and implemented which is flexible {{to be tested for}} single master and any number of slaves. Performance evaluation is done for the design in terms of resource utilization and timings performance...|$|R
50|$|Eventually, {{the shared}} {{resource}} became a bottleneck, with {{the limit of}} <b>shared</b> <b>bus</b> speed being roughly 2 million packets per second (Mpps). Crossbar fabrics broke through this bottleneck.|$|R
40|$|In this paper, {{the design}} and {{implementation}} of a single <b>shared</b> <b>bus,</b> <b>shared</b> memory multiprocessing system using Intel's single board computers is presented. The hardware configuration and the operating system developed to execute the parallel algorithms are discussed. The performance evaluation studies carried out on Image are outlined...|$|R
40|$|A <b>shared</b> <b>bus</b> is a {{suitable}} structure for minimizing the interconnections costs in system synthesis. It {{has also been}} shown that the word-length of Functional Units has a great impact on design costs. A combination of both methods is used in this paper {{in the form of a}} partitioned <b>shared</b> <b>bus</b> structure, in which every partition has a different width and all the functional units connected to a bus partition have the same input/output word-lengths. Having controlled the group binding and word-length of the FUs as well as the other synthesis parameters, a high-level synthesis tool is introduced to implement DSP algorithms in digital hardware. The tool uses a Multi-Objective Optimization Genetic Algorithm to minimize the circuit area, delay, power consumption and digital noise by selecting an optimal grouping and word-length for each FU in a <b>shared</b> <b>bus</b> system. Results demonstrate that savings can be made in the overall system costs by applying this method...|$|R
40|$|With the {{ever-increasing}} need {{to solve}} {{larger and more}} complex problems, multiprocessing is attracting more and more research efforts. One of the challenges facing the multiprocessor designers is to fulfill in an effective manner the communications among the processes running in parallel on multiple multiprocessors. The conventional electrical backplane bus provides narrow bandwidth as restricted by the physical limitations of electrical interconnects. In the electrical domain, in order to operate at high frequency, the backplane topology has been changed from the simple <b>shared</b> <b>bus</b> to the complicated switched medium. However, the switched medium is an indirect network. It cannot support multicast/broadcast as effectively as the <b>shared</b> <b>bus.</b> Besides the additional latency of going through the intermediate switching nodes, signal routing introduces substantial delay and considerable system complexity. Alternatively, optics has been well known for its interconnect capability. Therefore, it has become imperative to investigate how to improve multiprocessing performance by utilizing optical interconnects. From the implementation standpoint, the existing optical technologies still cannot fulfill the intelligent functions that a switch fabric should provide as effectively as their electronic counterparts. Thus, an innovative optical technology that can provide sufficient bandwidth capacity, {{while at the same}} time, retaining the essential merits of the <b>shared</b> <b>bus</b> topology, is highly desirable for the multiprocessing performance improvement. In this paper, the optical centralized <b>shared</b> <b>bus</b> i...|$|R
50|$|The {{speed of}} the classic bus is 32gb half duplex (since it is a <b>shared</b> <b>bus)</b> {{and is the only}} {{supported}} way of connecting a Supervisor 32 engine (or Supervisor 1) to a 6500.|$|R
50|$|The Multibus {{became a}} {{standard}} of the Institute of Electrical and Electronics Engineers as IEEE standard 796 in 1983. Sun Microsystems developed the SBus in 1989 to support smaller expansion cards.The easiest way to implement symmetric multiprocessing was to plug {{in more than one}} CPU into the <b>shared</b> system <b>bus,</b> which was used through the 1980s.However, the <b>shared</b> <b>bus</b> quickly became the bottleneck and more sophisticated connection techniques were explored.|$|R
40|$|With the {{increasing}} demand for solving more complex problems, high-performance multiprocessing systems are attracting more and more research efforts. One of the challenges is to effectively support the communications among the processes running in parallel on the multiprocessors. Due to the physical limitations of electrical interconnects, interconnection networks impose a potential bottleneck limiting the overall performance. On the other hand, optics has many advantages as an interconnect technology. In this paper, benefits of optics are evaluated along with a comparison of two mainstream system topologies, <b>shared</b> <b>bus</b> and switched media. This analysis leads to an innovative interconnect architecture, optical centralized <b>shared</b> <b>bus.</b> The crucial design aspects of this architecture, including system organization, working principle, and conversion between free-space propagation and substrate-guided mode propagation by using volume holographic gratings, are delineated. To ensure the feasibility of using this architecture as highperformance interconnection networks in real multiprocessing systems, a PCI implementation of the centralized shared memory multiprocessor system is proposed. In this prototype, the required connectivity is accomplished by using the optical centralized <b>shared</b> <b>bus</b> architecture. Some preliminary results are presented...|$|R
40|$|Abstract—We {{present an}} easy-to-use model that {{addresses}} the practical issues in designing bus-based shared-memory multiprocessor systems. The model relates the shared-bus width, bus cycle time, cache memory, the features of a program execution, {{and the number of}} processors on a <b>shared</b> <b>bus</b> to a metric called request utilization. The request utilization is treated as the scaling factor for the effective average waiting processors in computing the queuing delay cycles. Simulation study shows that the model performs very well in estimating the <b>shared</b> <b>bus</b> response time. Using the model, a system designer can quickly decide the number of the processors that a <b>shared</b> <b>bus</b> is able to support effectively, the size of the cache memory a system should use, and the bus cycle time that the main memory system should provide. With the model, we show that the design favors caching the requests for a contention-based medium instead of speeding up the transfers although the same performance can be respectively achieved by the two techniques in a contention-free situation. Index Terms—Bus-based shared-memory multiprocessor, memory system design, queuing delay model, system design. æ...|$|R
30|$|Figures 11 and 12 show a graph of processors' stall times. In both cases, 20 {{samples are}} {{taken during the}} entire {{simulation}} period and the data collected {{is used in the}} depicted graphs. During the execution of all the tasks, the maximum time for which the processors stalled was different for each kind of architecture. The maximum stall time for the DirectConnect architecture was 2.3 microseconds whereas for the <b>Shared</b> <b>Bus</b> architecture the maximum stall time was 2.9 microseconds. Due to the <b>shared</b> <b>bus</b> in the Xeon's architecture, delays were greater than the DirectConnect approach of the Opteron, and thus the difference in the stall time.|$|R
40|$|With {{the advent}} of {{multicore}} architectures, worst case execution time (WCET) analysis has become an increasingly difficult problem. In this article, we propose a unified WCET analysis framework for multicore processors featuring both shared cache and <b>shared</b> <b>bus.</b> Compared to other previous works, our work differs by modeling the interaction of shared cache and <b>shared</b> <b>bus</b> with other basic microarchitectural components (e. g., pipeline and branch predictor). In addition, our framework does not assume a timing anomaly free multicore architecture for computing the WCET. A detailed experiment methodology suggests that we can obtain reasonably tight WCET estimates {{in a wide range}} of benchmark programs...|$|R
40|$|This paper {{describes}} a scheme for using cache-based hardware to provide simple and efficient message passing support for message-based software systems on a tightly-coupled, shared-bus multiprocessor. This approach {{is based on}} the utilization of the existing interprocessor communications medium, the <b>shared</b> <b>bus,</b> to effect the exchange of single-word messages. Communication between processes is accomplished over logical channels using simple, blocking send and receive primitives. The physical processor/channel interface is designed so that the message transfer primitives can be implemented as single machine instructions, namely store and fetch. Special-purpose caches, called message caches, mediate channel operations and effect the exchange of messages over the <b>shared</b> <b>bus...</b>|$|R
40|$|Abstract—It is {{predicted}} that multicores {{will be increasingly}} used in future embedded real-time systems for high perfor-mance and low energy consumption. The major obstacle is that we may not predict and provide any guarantee on real-time properties of software on such platforms. The <b>shared</b> memory <b>bus</b> {{is among the most}} critical resources, which severely degrade the timing predictability of multicore software due to the access contention between cores. In this paper, we study a multicore architecture where each core has a local L 1 cache and all cores use a <b>shared</b> <b>bus</b> to access the off-chip memory. We use Abstract Interpretation (AI) to analyze the local cache behavior of a program running on a dedicated core. Based on the cache analysis, we construct a Timed Automaton (TA) to model the precise timing information of the program on when to access the memory bus (i. e. when a cache miss occurs). Then we model the <b>shared</b> <b>bus</b> also using timed automata. The TA models for the bus and programs running on separated cores will be explored using the UPPAAL model checker to find the WECTs for the respective programs. Based on the presented techniques, we have developed a tool for multicore timing analysis, which allows automatic generation of the TA models from binary code and WCET estimation for any given TA model of the <b>shared</b> <b>bus.</b> Extensive experiments have been conducted, showing that the combined approach can significantly tighten the estimations. As examples, we have studied the TDMA and FCFS buses. In both cases, the WCET bounds can be tightened by up to 240 % and 82 % respectively, compared with the worst-case bounds estimated based on cache misses and maximal delays for bus access. Keywords-abstract interpretation, model checking, WCET, multicore, <b>shared</b> <b>bus</b> I...|$|R
3000|$|... frames {{per second}} (FPS). Thus, an {{external}} event representing the camera triggered at 35 [*]Hz frequency. The HW platform consisted of three processors connected through a <b>shared</b> <b>bus.</b> The operating frequencies of the processors were set to [...]...|$|R
50|$|A <b>shared</b> <b>bus</b> lane is a {{bus lane}} that allows cyclists to use it. Depending on {{the width of}} the lane, the speeds and number of buses, and other local factors, the safety and {{popularity}} of this arrangement vary.|$|R
40|$|In <b>shared</b> System-on-chip(SoC) <b>bus</b> systems, arbiters are {{mandatory}} to {{deal with}} bus contentions while providing a hard real-time guarantee. In this paper, we propose a <b>shared</b> <b>bus</b> arbitration algorithm, called adaptive dynamic and real-time guaranteed arbitration algorithm. It allows high bus utilization and proper bandwidth allocation while guaranteeing hard real-time requirements. Comparisons are made between the proposed arbitration scheme and Static Priority, Round- Robin arbitration and Lottery on Virtex 5 from Xilinx. Experimental {{results show that the}} proposed arbitration algorithm outperforms several commonly-used algorithms...|$|R
25|$|<b>Shared</b> <b>bus</b> and cycle lanes {{are also}} a widely {{endorsed}} method for providing a more comfortable and safer space for cyclists. Depending on {{the width of the}} lane, the speeds and number of buses, and other local factors, the safety and popularity of this arrangement vary.|$|R
40|$|Ever {{increasing}} {{complexity and}} heterogeneity of SoC platforms require diversified on-chip communication schemes beyond the currently omnipresent <b>shared</b> <b>bus</b> architectures. To prevent time consuming design changes {{late in the}} design flow, we propose the early exploration of the on-chip communication architecture to meet performance and cost requirements. Based on SystemC 2. 0. 1 we have defined a modular exploration framework, which is able to capture the effect on performance for different on-chip networks like dedicated point-to-point, <b>shared</b> <b>bus,</b> and crossbar topologies. Monitoring of performance parameters like utilization, latency and throughput drives the mapping of the inter-module traffic to an efficient communication architecture. The effectiveness of our approach is demonstrated by the exemplary design of a high performance Network Processing Unit (NPU), which is compared against a commercial NPU device...|$|R
40|$|The current {{industry}} {{trend is}} towards using Commercially available Off-The-Shelf (COTS) based multicores for developing real time embedded systems, {{as opposed to}} the usage of custom-made hardware. In typical implementation of such COTS-based multicores, multiple cores access the main memory via a <b>shared</b> <b>bus.</b> This often leads to contention on this shared channel, which results in an increase of the response time of the tasks. Analyzing this increased response time, considering the contention on the <b>shared</b> <b>bus,</b> is challenging on COTS-based systems mainly because bus arbitration protocols are often undocumented and the exact instants at which the <b>shared</b> <b>bus</b> is accessed by tasks are not explicitly controlled by the operating system scheduler; they are instead a result of cache misses. This paper makes three contributions towards analyzing tasks scheduled on COTS-based multicores. Firstly, we describe a method to model the memory access patterns of a task. Secondly, we apply this model to analyze the worst case response time for a set of tasks. Although the required parameters to obtain the request profile can be obtained by static analysis, we provide an alternative method to experimentally obtain them by using performance monitoring counters (PMCs). We also compare our work against an existing approach and show that our approach outperforms it by providing tighter upper-bound on the number of bus requests generated by a task...|$|R
30|$|Regarding urban logistics, {{different}} policy scenarios {{focused on}} the type of vehicles, goods delivery methods, or alternative retail logistics concepts (like Urban Consolidation Centre, Tethering, and <b>shared</b> <b>bus)</b> were analysed with regards to a range of policy aspects. The results bring valuable implications for further development of retail business, and for policy makers.|$|R
40|$|Modern {{high-end}} machines feature multiple processor packages, each {{of which}} contains multiple independent cores and integrated memory controllers connected directly to dedicated physical RAM. These packages are connected via a <b>shared</b> <b>bus,</b> creating a system with a heterogeneous memory hierarchy. Since this <b>shared</b> <b>bus</b> has less bandwidth {{than the sum of}} the links to memory, aggregate memory bandwidth is higher when parallel threads all access memory local to their processor package than when they access memory attached to a remote package. But, the impact of this heterogeneous memory architecture is not easily understood from vendor benchmarks. Even where these measurements are available, they provide only best-case memory throughput. This work presents a series of modifications to the well-known STREAM benchmark to measure the effects of NUMA on both a 48 -core AMD Opteron machine and a 32 -core Intel Xeon machine...|$|R
5|$|Processor–processor and processor–memory {{communication}} can {{be implemented}} in hardware in several ways, including via shared (either multiported or multiplexed) memory, a crossbar switch, a <b>shared</b> <b>bus</b> or an interconnect network of a myriad of topologies including star, ring, tree, hypercube, fat hypercube (a hypercube {{with more than one}} processor at a node), or n-dimensional mesh.|$|R
50|$|Berliners {{have access}} to 620 km of bike paths {{including}} around 150 km mandatory bicycle paths, 190 km off-road bicycle routes, 60 km of bike lanes on the roads, 70 km of <b>shared</b> <b>bus</b> lanes open to cyclists, 100 km of combined pedestrian/bike paths and 50 km of marked bike lanes on the sidewalks.|$|R
50|$|Processor-processor and processor-memory {{communication}} can {{be implemented}} in hardware in several ways, including via shared (either multiported or multiplexed) memory, a crossbar switch, a <b>shared</b> <b>bus</b> or an interconnect network of a myriad of topologies including star, ring, tree, hypercube, fat hypercube (a hypercube {{with more than one}} processor at a node), or n-dimensional mesh.|$|R
