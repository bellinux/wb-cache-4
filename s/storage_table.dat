11|142|Public
5000|$|Ability {{to import}} from or export to any formats other than Personal <b>Storage</b> <b>Table</b> (PST) or comma-separated values (CSV) ...|$|E
50|$|There is a Win32 Thread Information Block {{for each}} thread. One of the entries in this block is the thread-local <b>storage</b> <b>table</b> for that thread.TlsAlloc returns an index to this table, unique per address space, for each call. Each thread {{has its own}} copy of the thread-local <b>storage</b> <b>table.</b> Hence, each thread can {{independently}} use TlsSetValue(index) and obtain the specified value via TlsGetValue(index), because these set and look up an entry in the thread's own table.|$|E
50|$|The {{file format}} {{may also be}} known as a Personal Folders (File) or Post Office File. When {{functioning}} in its capacity as a cache for Outlook's Cached Exchange Mode feature, it may be called an Off-line <b>Storage</b> <b>Table</b> (.ost) or an Off-line Folders (File).|$|E
5000|$|La Roda de Andalucía (Seville): olive milling, oil <b>storage</b> and <b>table</b> oil production. This {{facility}} {{also has}} a treatment of olive waste center.|$|R
40|$|AbstractStatic {{software}} analyser tools {{can help}} in program comprehension by detecting relations among program parts. Detecting relations among the concurrent program parts, e. g. relations between processes, is not straightforward. In case of dynamic languages only a (good) approximation of the real dependencies can be calculated. In this paper we present algorithms to build a process relation graph for Erlang programs. The graph contains direct relation through message passing and hidden relations represented by the ETS (Erlang Term <b>Storage)</b> <b>tables...</b>|$|R
50|$|Knoll, Inc is {{a design}} firm that {{produces}} office systems, seating, files and <b>storage,</b> <b>tables</b> and desks, textiles (KnollTextiles), and accessories for the office, home, {{and higher education}} settings. The company manufactures furniture for the home by Ludwig Mies van der Rohe, Harry Bertoia, Florence Knoll (Florence Schust), Frank Gehry, Maya Lin and Eero Saarinen under the company's KnollStudio division. Over 40 Knoll designs {{can be found in}} the permanent design collection of The Museum of Modern Art in New York City.|$|R
50|$|In computing, a Personal <b>Storage</b> <b>Table</b> (.pst) {{is an open}} {{proprietary}} {{file format}} used to store copies of messages, calendar events, and other items within Microsoft software such as Microsoft Exchange Client, Windows Messaging, and Microsoft Outlook. The open format is controlled by Microsoft who provide free specifications and free irrevocable technology licensing.|$|E
5000|$|The New-York Historical Society's exhibit [...] "A New Light on Tiffany" [...] (November 27, 2006) {{showcasing}} Driscoll's (and her [...] "girls'") {{work was}} the result of the investigative efforts of Eidelberg, Gray and Hofer. The New York Times on February 25, 2007, reported: [...] "As the exhibition was being installed, some of these little metal silhouettes used to make a gorgeous daffodil lamp shade were still jumbled in a box on a <b>storage</b> <b>table.</b> Meaningless on their own, when put in order they bring to life an exquisite object, just as the show itself, a puzzle now assembled, illuminates the talented women who had long stood in the shadow of a celebrated man." ...|$|E
30|$|Privacy leakage {{detected}} by the TaintChaser system has socket communication interface, Https encryption communication interface, Bluetooth, short message, etc. For {{each type of}} privacy leakage, because interface of data sent {{is not the only}} one we need to process all the function related, first, according to the length and its memory address of transmitted data, check in taint <b>storage</b> <b>table</b> whether the data is tainted data, if it is, it will be recorded including content and destination address of sent data, etc. other related information [21, 22].|$|E
3000|$|Supervisor {{matches the}} values {{received}} with the parameters tabulated in the <b>Storage</b> Handling <b>Table</b> (SHT). A synchronization message {{is sent to}} the corresponding server [...]...|$|R
50|$|Schrofer {{has also}} {{designed}} glassware, <b>tables,</b> <b>storage</b> cabinets and a chess set.|$|R
40|$|Abstract. Various {{data-centric}} web {{applications are}} becoming the developing trend of information society. Cloud computing currently adopt column-oriented <b>storage</b> wide <b>table</b> {{to represent the}} heterogeneous structured data of these applications. The wide table reduces the waste of storage space, but slows down query efficiency. The paper implements the hybrid partition on access frequent (HPAF) to horizontally and vertically partition a wide table. It uses a variant of consistent hashing to dynamically horizontally partition a wide <b>table</b> across multiple <b>storage</b> nodes on each node’s performance; It use entropy to represent the number of reducing access data block from the table with N columns than from N column-oriented <b>storage</b> <b>tables.</b> According to the second law of thermodynamics, the paper designs an entropy increasing clustering algorithm to classify the columns of a wide table. The algorithm finds a cluster with multiple classes which save maximum access time. The paper implements an algorithm for structured query across multiple materialized views too. Lastly the paper demonstrates the query performance and storage efficiency of our strategy compared to single column storage...|$|R
40|$|Errors in files {{detected}} and corrected during operation. Permanent File Validation (PFVAL) utility {{computer program}} provides CDC CYBER NOS sites with mechanism to verify integrity of permanent file base. Locates and identifies permanent file errors in Mass <b>Storage</b> <b>Table</b> (MST) and Track Reservation Table (TRT), in permanent file catalog entries (PFC's) in permit sectors, and in disk sector linkage. All detected errors written to listing file and system and job day files. Program operates by reading system tables, catalog track, permit sectors, and disk linkage bytes to vaidate expected and actual file linkages. Used extensively {{to identify and}} locate errors in permanent files and enable online correction, reducing computer-system downtime...|$|E
40|$|Abstract- The {{space and}} time cost of LR parser {{generation}} is high. Robust and effective LR(1) parser generators are rare to find. This work employed the Knuth canonical algorithm, Pager’s practical general method, lane-tracing algorithm, and other relevant algorithms, implemented an efficient, practical and open-source parser generator Hyacc in ANSI C, which supports full LR(0) /LALR(1) /LR(1) and partial LR(k), and is compatible with Yacc and Bison in input format and command line user interface. In this paper we introduce Hyacc, and give a brief overview on its architecture, parse engine, <b>storage</b> <b>table,</b> precedence and associativity handling, error handling, data structures, performance and usage. Keywords: Hyacc, LR(1), Parser Generator, Compiler, Software tool...|$|E
40|$|Why is silage density {{important}} when packing bunkers and piles? Attaining a high silage density {{is important for}} two primary reasons. Most importantly, density and dry matter content determine the porosity of the silage. Porosity, in turn, sets {{the rate at which}} air moves into the silo and subsequently the amount of spoilage which occurs during storage and feedout. Ruppel (1992) measured dry matter loss for alfalfa silage and developed an equation to relate the loss to density. Table 1 summarizes those results. The higher the density, the greater is the capacity of the silo. Thus, higher densities generally reduce the annual cost of storage per ton of crop by both increasing the amount of crop entering the silo and reducing crop losses during <b>storage.</b> <b>TABLE</b> 1. Dry matter loss as influenced by silag...|$|E
5000|$|Document with {{adapters}} {{for services}} such as Azure <b>Table</b> <b>Storage</b> and Amazon SimpleDB ...|$|R
50|$|Slazure has {{a uniform}} API that support MongoDB, Azure <b>Table</b> <b>Storage,</b> and Azure DocumentDB.|$|R
50|$|The Achaia Clauss winery {{has many}} storage areas {{with a total}} {{capacity}} of about 7500 tonnes. The main ones are the storage of old Mavrodaphne wine, the <b>storage</b> of <b>table</b> wines, the subterranean tanks, and the Danielis storage room.|$|R
40|$|Table 1. Typical {{nutrient}} {{contents of}} domestic animal manures, expressed on a fresh weight basis. Manure {{has been applied}} to soil for many centuries by gardeners and farmers to supply plant nutrients and organic matter to the soil and, of course, as a method of animal waste disposal. Organic matter in applied manure helps to build and maintain soil structure, which is important for drainage, root and water penetration, and water storage. Nutrients in manure can supply plants with part or all of their nutritional needs. Animal manures are excellent sources of nitrogen and phosphorus, and are used to replace manufactured fertilizers in organic agricultural production. The nutrient composition of animal manure is variable, depending on animal species, quality of feed, moisture content, and methods of handling and <b>storage</b> (<b>Table</b> 1) but is, in general, much lower than that of commercial fertilizers. Additiona...|$|E
40|$|The masjed-i jom’e of Isfahan {{is one of}} the {{earliest}} mosques of Iran. Since 1970, Italian researchers performed an extensive archaeological investigation uncovering huge amounts of finds. This study aims at investigating the technological features and provenance of the unglazed pottery finds by using a minero-petrographic approach. Twenty-three samples of <b>storage,</b> <b>table</b> and cooking wares were selected based on the recurrence of typologically identifiable fragments and fabrics. Two bricks, seven production indicators (spacers, kiln furniture, slags) and a local clay were analysed for comparison. The production indicators and most of the pottery show high-CaO concentration. Thick-walled wares contain coarse sedimentary/metamorphic inclusions. Samples with thinner walls contain similar but fine/well-sorted inclusions. The mineralogy and microstructure indicate firing temperatures mainly ranging from 850 to 1000 °C. Low-CaO samples contain coarse sedimentary inclusions; in one sample, volcanic lithics are present. Firing temperatures range from about 800 to 950 °C, and the low-CaO character can be related to their specific function for cooking foods. One sample, found in older stratigraphic levels, differs for its peculiar calcitic temper and lower firing temperature. Local production of most samples was constrained by the composition of the inclusions compatible with the sediments of the Isfahan area. High-CaO pottery shows compositional affinity with production indicators, local clay and tiles produced in Isfahan during the Safavid period. Cooking ware usually contains local temper, {{with the exception of a}} sample with volcanic inclusions, for which a non-local provenance is supposed. No appropriate information is, however, available regarding the low-CaO clays used in the area...|$|E
50|$|By {{the mid-19th}} century the demand for {{campaign}} furniture encouraged many makers to be inventive in their design thus creating many unusual and interesting pieces that offer a surprise in the ease in which they dismantle or the compactness of their <b>storage.</b> <b>Tables</b> were cleverly hinged to fold down into a box {{the size of a}} briefcase, chess board boxes would contain tripod legs and a telescopic column to convert into a table; chairs that would break down to a minimal size and could also be altered to become a sedan were all designed. The need to quickly be able to pack a piece of furniture to make it portable with minimal use of bolts etc. became the mother of invention.|$|R
5|$|COBOL Edition 1965 brought further {{clarifications}} to {{the specifications}} and introduced facilities for handling mass <b>storage</b> files and <b>tables.</b>|$|R
30|$|One {{of the key}} {{architecture}} {{patterns for}} cloud computing is to decouple a problem into independent discrete operations, and implement each with a worker. A worker consumes messages from a queue, completes the work stored in the message and then outputs a message to a different queue, as shown in Figure 2. Each message is a discrete piece of work which can result in data being created or consumed from <b>storage</b> (<b>tables,</b> SQL, blobs); the output message indicates work that has been completed and can easily become the input for another worker. This architecture is very flexible as workers can be reordered or substituted to achieve different objectives, or as a queue starts to get too long more workers of the same type can be created, speeding up the overall process. The key benefits of using a cloud-based architecture are described below [4].|$|R
40|$|The {{computer}} program, Streamtube Curvature Analysis, {{is described}} for the engineering user {{and for the}} programmer. The user oriented documentation includes {{a description of the}} mathematical governing equations, their use in the solution, and the method of solution. The general logical flow of the program is outlined and detailed instructions for program usage and operation are explained. General procedures for program use and the program capabilities and limitations are described. From the standpoint of the grammar, the overlay structure of the program is described. The various <b>storage</b> <b>tables</b> are defined and their uses explained. The input and output are discussed in detail. The program listing includes numerous comments so that the logical flow within the program is easily followed. A test case showing input data and output format is included as well as an error printout description...|$|R
50|$|The {{following}} are noted standardization organizations and bodies that work to create standards for solid-state drives (and other computer <b>storage</b> devices). The <b>table</b> below also includes organizations which promote {{the use of}} solid-state drives. This is not necessarily an exhaustive list.|$|R
40|$|A custom CMOS {{processor}} {{is introduced}} that implements the Data Compression Lempel-Ziv (DCLZ) standard, {{a variation of}} the LZ 2 Algorithm. This component presently achieves a sustained compression and decompression rate of 10 megabytes/second by employing an on-chip content-addressable memory for string <b>table</b> <b>storage...</b>|$|R
40|$|Phase Change Memory (PCM) is an {{emerging}} memory technology that can increase main memory capacity in a cost-effective and power-efficient manner. However, PCM cells can endure only {{a maximum of}} 10 7 - 10 8 writes, making a PCM based memory system have a lifetime {{of only a few}} years under ideal conditions. Furthermore, we show that non-uniformity in writes to different cells reduces the achievable lifetime of PCM system by 20 x. Writes to PCM cells can be made uniform with Wear-leveling. Unfortunately, existing wear-leveling techniques require large <b>storage</b> <b>tables</b> and indirection, resulting in significant area and latency overheads. We propose Start-Gap, a simple, novel and effective wear-leveling technique that uses only two registers. By combining Start-Gap with simple address-space randomization techniques we show that that the achievable lifetime of the baseline 16 GB PCM-based system is boosted from 5 % (with no wear-leveling) to 97 % of the theoretical maximum, while incurring a total storage overhead of less than 13 bytes and obviating the latency of accessing large tables. We also analyze the security vulnerabilities for memory systems that have limited write endurance, showing that under adversarial settings, such systems can fail in less than one minute. We provide a simple extension to Start-Gap that makes PCM-based systems robust to such malicious attacks...|$|R
5000|$|Castledare has {{extensive}} facilities, including over 5 kilometres of track, railway station, signal box, turn <b>table,</b> <b>storage</b> sheds and workshops. There are toilets, a kiosk, {{and limited}} picnic facilities. [...] "Run days" [...] are usually {{on the first}} and third Sundays of the month and during school holidays.|$|R
40|$|For {{the past}} 15 years, {{it has been}} shown that {{confidence}} estimation of branch prediction can be used for various usages such as fetch gating or throttling for power saving or for controlling resource allocation policies in a SMT processor. In many proposals, using extra hardware and particularly <b>storage</b> <b>tables</b> for branch confidence estimators has been considered as a worthwhile silicon investment. The TAGE predictor presented in 2006 is so far considered as the state-of-the-art conditional branch predictor. In this paper, we show that very accurate confidence estimations can be done for the branch predictions realized by the TAGE predictor by simply observing the outputs of the predictor tables. Many confidence estimators proposed in the literature only discriminate between high confidence predictions and low confidence estimations. It has been recently pointed out that a more selective confidence discrimination could useful. We show that the observation of the outputs of the predictor tables is sufficient to grade the confidence in the branch predictions with a very good granularity. Moreover a slight modification of the predictor automaton allows to discriminate the prediction in three classes, low-confidence (with a misprediction rate in the 30 % range), medium confidence (with a misprediction rate in 8 - 12 % range) and high confidence (with a misprediction rate lower than 1 %). Dans ce rapport nous présentons un estimateur de confiance pour le prédicteur de branchement TAGE...|$|R
40|$|Abstract- The {{original}} LR(k) parser generation algorithm of Knuth in 1965 is {{very expensive}} in time and space. Different approaches have been proposed to achieve LR(k) with better practical performance. This work designed a new LR(k) algorithm called the edge-pushing algorithm, {{which is based on}} recursively applying the lane-tracing process. The algorithm has been implemented into the parser generator Hyacc. Here we first present the background and related work on LR(k) parser generation, next we introduce the edge-pushing algorithm’s design and implementation, its LR(k) parse engine and corresponding <b>storage</b> parsing <b>table.</b> Relevant issues are discussed. Finally we give some applicable LR(k) grammar examples...|$|R
50|$|The Dakin Dining Hall is very large, and {{can hold}} up to 350 people at a time. The Dining Hall also has a large kitchen and food storage area. An {{addition}} to the Dining Hall is the Blankenship Medical Pavilion, which added three rooms for medicinal purposes, and a large <b>storage</b> room for <b>tables</b> and chairs.|$|R
50|$|Using a 256-entry {{table is}} usually most convenient, but other sizes can be used. In small microcontrollers, using a 16-entry table to process four bits {{at a time}} gives a useful speed {{improvement}} while keeping the table small. On computers with ample <b>storage,</b> a -entry <b>table</b> {{can be used to}} process 16 bits at a time.|$|R
40|$|This paper {{introduces}} {{methods for}} reducing the <b>table</b> <b>storage</b> required for encoding and decoding with unstructured vector quantization (UVQ) or tree-structured vector quantization (TSVQ). Specifically, a low-storage secondary quantizer is used to compress the codevectors (and testvectors) of the primary quantizer. The relative advantages of uniform and nonuniform secondary quantization are investigated. An LBG-like algorithm that optimizes the primary UVQ codebook for a given secondary codebook and another that jointly optimizes both primary and secondary codebooks are presented. In comparison to conventional methods, {{it is found that}} significant storage reduction is possible (typically a factor of 2 to 3) with little loss of signal-to-noise ratio (SNR). Moreover, when reducing dimension is considered as another method of reducing storage, it is found that the best strategy is a combination of both. The method of secondary quantization is also applied to TSVQ to reduce the <b>table</b> <b>storage</b> [...] ...|$|R
40|$|As {{part of our}} ongoing {{research}} programme into programmer-in-the-loop parallelisation, we are studying the problem of introducing alternative data structures to support parallelism. Automated support for data structure transformations {{makes it easier to}} produce the best parallelisation for some given program, or even to make parallelisation feasible. We use a refactoring approach to choose and introduce these transformations for specific algorithmic skeletons, structured forms of parallelism that capture common patterns of parallelism. Our approach integrates with the Wrangler refactoring tool for Erlang, and uses the advanced Skel [4] skeleton library for Erlang. This library has previously been shown to give good parallelisations for a number of applications, including a multi-agent system [1] where we have achieved speedups of up to 142. 44 on a 61 -core machine with 244 threads. We have investigated three widely-used Erlang data structures: lists, binary structures and ETS (Erlang Term <b>Storage)</b> <b>tables.</b> In general, we have found that ETS tables deliver the best parallel performance for the examples that we have considered. However, our results show that simple lists may deliver similar performance to the use of ETS tables, and better performance than using binary structures. This means that we cannot blindly choose to implement a single optimisation as part of the compilation process. Our approach also allows the use of new (possibly user-defined) data structures and other transformations in future, giving a high level of flexibility and generality. Postprin...|$|R
40|$|This {{document}} specifies BagIt, {{a hierarchical}} file packaging format for {{the exchange of}} generalized digital content. A "bag " has just enough structure to safely enclose descriptive "tags " and a "payload " but does not require any knowledge of the payload's internal semantics. This BagIt format should be suitable for disk-based or network-based <b>storage</b> and transfer. <b>Table</b> of Content...|$|R
3000|$|... is {{increased}} (or decreased), the {{variation of the}} Rzone {{is increased}} (or decreased), {{the accuracy of the}} adjustment is decreased (or increased), {{and the size of the}} three tables is decreased (or increased). The size of table depends on the search_step and the area of the house. Because the coverage of WSNHA is not big, the <b>storage</b> of those <b>tables</b> does not consume much memory.|$|R
