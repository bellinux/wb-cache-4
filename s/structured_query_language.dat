497|8671|Public
25|$|Modern {{versions}} of crystallographic databases {{are based on}} the relational database model. Communication with the database usually happens via a dialect of the <b>Structured</b> <b>Query</b> <b>Language</b> (SQL). Web-based databases typically process the search algorithm on the server interpreting supported scripting elements, while desktop-based databases run locally installed and usually precompiled search engines.|$|E
25|$|Given its {{proximity}} to {{the headquarters of the}} Oracle Corporation, a maker of database software, some have speculated that the airport code of SQL is a humorous reference to this large neighbor; in databases, SQL stands for <b>Structured</b> <b>Query</b> <b>Language.</b> In fact the airport was SQL years before June 16, 1977, the date of incorporation of Software Development Laboratories which became the Oracle corporation.|$|E
25|$|Btrieve was modularized {{starting}} with version 6.15 {{and became one}} of two database front-ends that plugged into a standard software interface called the Micro-Kernel Database Engine. The Btrieve front-end supported the Btrieve API and the other front-end was called Scalable SQL, a relational database product based upon the MKDE that used its own variety of <b>Structured</b> <b>Query</b> <b>Language,</b> otherwise known as SQL. After these versions were released (Btrieve 6.15 and ScalableSQL v4) the company was renamed to Pervasive Software prior to their IPO. Shortly thereafter the Btrieve and ScalableSQL products were combined into the products now known and sold as Pervasive.SQL or PSQL. Btrieve continued for a few years while ScalableSQL was quickly dropped. Customers were encouraged to upgrade to Pervasive.SQL which supported both SQL and Btrieve applications.|$|E
5000|$|... #Subtitle level 2: 7816-7: Interindustry {{commands}} for <b>Structured</b> Card <b>Query</b> <b>Language</b> (SCQL) ...|$|R
40|$|In this paper, we extend {{recent works}} on {{concrete}} and abstract semantics of <b>structured</b> <b>query</b> <b>languages</b> by considering recursive queries too. We show that combining abstraction {{of data and}} widening operators that guarantee the convergence of the computation may be useful not only for static analysis purposes, {{but also as a}} sound and eﬀective tool for <b>query</b> <b>language</b> transformations...|$|R
40|$|Automated {{extraction}} of structured data from Web sources {{often leads to}} large heterogeneous knowledge bases (KB), with data and schema items numbering {{in the hundreds of}} thousands or millions. Formulating information needs with conventional <b>structured</b> <b>query</b> <b>languages</b> is difficult due to the sheer size of schema information available to the user. We address this challenge by proposing a new <b>query</b> <b>language</b> that blends keyword search with <b>structured</b> <b>query</b> processing over large information graphs with rich semantics...|$|R
500|$|Null (or NULL) is {{a special}} marker used in <b>Structured</b> <b>Query</b> <b>Language</b> to {{indicate}} that a data value {{does not exist in}} the database. [...] Introduced by the creator of the relational database model, E. F. Codd, SQL Null serves to fulfil the requirement that all true relational database management systems (RDBMS) support a representation of [...] "missing information and inapplicable information". [...] Codd also introduced the use of the lowercase Greek omega (ω) symbol to represent Null in database theory. [...] In SQL, NULL is a reserved word used to identify this marker.|$|E
50|$|SUPRA for SQL (<b>structured</b> <b>query</b> <b>language)</b> (1989).|$|E
5000|$|Knowledge of <b>structured</b> <b>query</b> <b>language</b> (SQL), e.g. SQL/PSM or Transact-SQL ...|$|E
40|$|The {{purpose of}} this paper is to study the basic theoretic {{structure}} of intelligent data base by means of logic. There are three parts of this paper. The first part introduces the concept and relational algebra in relational data base. The second part focuses on the relationship between logic and the structure of intelligent data base and compares the intelligent database application. The last part, a SQL (<b>Structure</b> <b>Query</b> <b>Language)</b> <b>queries</b> simulation program using logic programming language Prolog, demonstrates how logic applies to <b>query</b> <b>languages.</b> Department of Computer ScienceThesis (M. S. ...|$|R
40|$|RDF {{data are}} {{traditionally}} accessed using <b>structured</b> <b>query</b> <b>languages,</b> such as SPARQL. However, this requires users {{to understand the}} language {{as well as the}} RDF schema. Keyword search on RDF data aims at relieving the user from these requirements; the user only inputs a set of keywords and the goal is to find small RDF subgraphs which contain all keywords. At the same time, popular RDF knowledge bases also include spatial semantics, which opens the road to location-based search operations. In this work, we propose and study a novel location-based keyword search query on RDF data. The objective of top-κ relevant semantic places (κSP) retrieval is to find RDF subgraphs which contain the query keywords and are rooted at spatial entities close to the query location. The novelty of κSP queries is that they are location-aware and that they do not rely on the use of <b>structured</b> <b>query</b> <b>languages.</b> We design a basic method for the processing of κSP queries. To further accelerate κSP retrieval, two pruning approaches and a data preprocessing technique are proposed. Extensive empirical studies on two real datasets demonstrate the superior and robust performance of our proposals compared to the basic method. © 2016 ACM. link_to_OA_fulltex...|$|R
40|$|As an {{increasing}} {{amount of the}} knowledge graph is published as Linked Open Data, semantic entity search is required to develop new applications. However, the use of <b>structured</b> <b>query</b> <b>languages</b> such as SPARQL is challenging for non-skilled users who need to master the <b>query</b> <b>language</b> as well as acquiring knowledge of the underlying ontology of Linked Data knowledge bases. In this article, we propose the Sematch framework for entity search in the knowledge graph that combines natural <b>language</b> <b>query</b> processing, entity linking, entity type linking and semantic similarity based query expansion. The system has been validated in a dataset and a prototype has been developed that translates natural <b>language</b> <b>queries</b> into SPARQL...|$|R
5000|$|Parsing the MDX {{language}} into <b>Structured</b> <b>Query</b> <b>Language</b> (SQL) {{to retrieve}} answers to dimensional queries ...|$|E
50|$|The {{relational}} database model introduced a programming-language independent <b>Structured</b> <b>Query</b> <b>Language</b> (SQL), based on relational algebra.|$|E
50|$|The {{most common}} query {{language}} {{used with the}} relational model is the <b>Structured</b> <b>Query</b> <b>Language</b> (SQL).|$|E
40|$|Abstract. Large {{databases}} {{of linguistic}} annotations {{are used for}} testing linguistic hypotheses and for training language processing models. These linguistic annotations are often syntactic or prosodic in nature, and have a hierarchical <b>structure.</b> <b>Query</b> <b>languages</b> are used to select particular structures of interest, or to project out large slices of a corpus for external analysis. Existing languages suffer {{from a variety of}} problems in the areas of expressiveness, efficiency, and naturalness for linguistic query. We describe the domain of linguistic trees and discuss the expressive requirements for a <b>query</b> <b>language.</b> Then we present a language that can express a wide range of queries over these trees, and show that the language is first-order complete over trees. 1...|$|R
40|$|<b>Structured</b> {{document}} <b>query</b> <b>languages</b> {{have been}} proposed for providing dynamic linking and composition behavior within hypermedia systems. HyTime (ISO 10744) defines a <b>structured</b> document <b>query</b> <b>language</b> called HyQ, but HyQ has received little attention by designers of hypermedia systems. We discuss and evaluate the use of HyQ for dynamic linking and virtual document structures. A series of HyQ examples are provided {{as part of the}} presentation. We also review qualitative performance considerations and implementation status. Keywords: Distributed hypermedia systems, structurebased <b>query</b> <b>languages,</b> HyTime, HyQ, information retrieval 1. Introduction The Hypermedia Time-Based Structuring Language (HyTime) [ISO 92] defines a <b>query</b> <b>language</b> (HyQ) for dynamically selecting components of a HyTime structured document based on both structural attributes and content. We have implemented a HyTime document database and engine called HyOctane^TM [Buford 94 a], and are currently extending this system to [...] ...|$|R
40|$|Abstract. With {{the growth}} of the Semantic Web, the {{requirements}} on storing and querying RDF has become more sophisticated. When a larger amount of data has to be managed, <b>queries</b> in <b>structured</b> <b>query</b> <b>languages,</b> such as SPARQL, are not always powerful enough. Use of additional keywords for querying can further reduce the result set towards the actual relevant answers, however, SPARQL only provides complete string matching or filtering based on regular expressions, which is a very slow operation. In contrast, state of the art Information Retrieval (IR) techniques provide sophisticated features such as keyword search, lemmatisation, stemming and ranking. In this paper we present a combination of <b>structured</b> RDF <b>queries</b> and full-text search. It is implemented as an extension of an established RDF store (Sesame) with IR capabilities using the text search library Lucene, without requiring modifications to existing RDF <b>query</b> <b>languages.</b> ...|$|R
5000|$|ISO/IEC 9075 standard: [...] "Information {{technology}} - Database languages - SQL", {{which describes}} <b>Structured</b> <b>Query</b> <b>Language.</b>|$|E
5000|$|UML to <b>structured</b> <b>query</b> <b>language</b> (SQL)-based logical {{data models}} as {{supported}} by IBM Rational Data Architect software.|$|E
50|$|Interactive {{access to}} the Oracle Rdb can be by SQL (<b>Structured</b> <b>Query</b> <b>Language),</b> RDO (Relational Database Operator), or both.|$|E
40|$|Supporting {{search and}} query in a {{hypermedia}} network {{is an important}} issue which should be addressed in the hypermedia systems. Structured hypermedia documents contain well-formed logical structures which can be exploited by <b>structure</b> <b>queries.</b> By using the powerful <b>structure</b> <b>query</b> facilities, users of the hypermedia systems can easily locate any interested portion of the hypermedia documents and obtain greater benefits than by just moving around the hypertext network following hyperlinks. In this paper, we provide approaches related to the storage and retrieval of structured hypermedia documents based on the database paradigm in order to support <b>structure</b> <b>queries.</b> We define a hypermedia document model to represent logical document structures. Based on the model, we present a <b>structure</b> <b>query</b> <b>language</b> which has a powerful addressing capability. We illustrate an efficient index structure for structured hypermedia documents using structure-bearing element identifiers. We also provide a vers [...] ...|$|R
40|$|Most {{existing}} XML {{stream processing}} systems adopt full <b>structured</b> <b>query</b> <b>languages,</b> such as XPath or XQuery, {{but they are}} difficult for ordinary users to learn and use. Keyword search is a user-friendly information discovery technique that has been extensively studied for text documents. This paper presents an XML stream filter system called XKFitler, {{which is the first}} system for supporting keyword search over XML stream. In XKFitler, the concepts of XLCA (eXclusive Lowest Common Ancestor) and XLCA Connecting Tree (XLCACT) are used to define the search semantic and results of keywords, and present an approach to filter XML stream according to keywords. The prototype XKFilter is implemented in the experiments...|$|R
40|$|The {{relationship}} of databases to information services, {{and the range}} of information services users and their needs for information is explored and discussed. It is argued that for database information to be valuable to a broad range of users, it is essential that access methods be provided that are relatively unstructured and natural to information services users who are interested in the information contained in databases, but who are not willing to learn and use traditional <b>structured</b> <b>query</b> <b>languages.</b> Unless this ease of use of databases is considered in the design and application process, the potential benefits from using database systems may not be realized...|$|R
50|$|Presto is an {{open-source}} software {{project to}} develop a database query engine using the standard <b>Structured</b> <b>Query</b> <b>Language</b> (SQL).|$|E
5000|$|Tools {{to connect}} to dynamic-link library (DLL), <b>Structured</b> <b>Query</b> <b>Language</b> (SQL), Java, [...]NET, C++, Fortran, CUDA, OpenCL, and Hypertext Transfer Protocol (HTTP) based systems ...|$|E
5000|$|In 2009, he {{was made}} a Fellow of the Computer History Museum [...] "for his {{fundamental}} work on <b>structured</b> <b>query</b> <b>language</b> (SQL) and database architectures." ...|$|E
5000|$|On May 29, 1992, Business Objects {{obtained}} U.S. Patent 5,555,403, which [...] "provides a {{new data}} representation and a query technique which allows information system end users to access (query) relational databases {{without knowing the}} relational structure or the <b>structure</b> <b>query</b> <b>language</b> (SQL)". Over time, some competitors like Cognos, paid licensing fees. However, in 2003, Microstrategysuccessfully defended a brought suit by Business Objects alleging patent infringement. By using common business terms, rather than data language, to access, manipulate, and organize information, a semantic layer simplifies the complexity of business data. Business terms are stored as objects in a semantic layer, which are accessed through business views.|$|R
40|$|<b>Structure</b> <b>Query</b> <b>Language</b> (SQL) is {{the most}} widely used <b>query</b> <b>language</b> in the modem {{relational}} database management system (DBMS). Its use is straightforward for simple queries, but it gets complicated, hard to comprehend and express for the complex queries. In term of easy of use, Data Flow <b>Query</b> <b>Language</b> (DFQL) represents graphical user interface to the relational model based on a dataflow diagram, and retains all the power of SQL and is equipped with an easy to use facility for extending the language. With Java's flexibility and power, it is possible to build such system that allows the users to login any relational database through JDBC, graphically view the database structure, and implement the DFQL to query the data from the database. The design recommendations and implementation of a prototype are the primary research areas of this thesis. Defense Manpower Data Center author (civilian) ...|$|R
40|$|The Linked Data {{initiative}} comprises structured databases in the Semantic-Web {{data model}} RDF. Exploring this heterogeneous data by <b>structured</b> <b>query</b> <b>languages</b> is tedious and error-prone even for skilled users. To ease the task, {{this paper presents}} a methodology for translating natural language questions into <b>structured</b> SPARQL <b>queries</b> over linked-data sources. Our method {{is based on an}} integer linear program to solve several disambiguation tasks jointly: the segmentation of questions into phrases; the mapping of phrases to semantic entities, classes, and relations; and the construction of SPARQL triple patterns. Our solution harnesses the rich type system provided by knowledge bases in the web of linked data, to constrain our semantic-coherence objective function. We present experiments on both the question translation and the resulting query answering...|$|R
50|$|The <b>Structured</b> <b>Query</b> <b>Language</b> Interface (SQLI) is the {{internal}} interface between an application and the INFORMIX Online Dynamic Server. Starting from v10.0 Informix Dynamic Server also supports DRDA.|$|E
50|$|SQream DB is a {{relational}} {{database management system}} (RDBMS) that uses graphics processing units (GPUs) from Nvidia.SQream DB is designed for big data analytics using the <b>Structured</b> <b>Query</b> <b>Language</b> (SQL).|$|E
50|$|Chess Query Language (CQL) is a <b>structured</b> <b>query</b> <b>language</b> {{which is}} {{designed}} to allow chess players and researchers to search for games, positions, problems, and studies in a quick and relatively easy manner.|$|E
50|$|Both UniVerse and UniData have a {{structured}} BASIC language (UniVerse Basic and UniBasic, respectively), similar to Pick/BASIC which naturally operates on {{the structures of}} the MultiValue database. They also have a <b>structured</b> database <b>query</b> <b>language</b> (RetrieVe and UniQuery) used to select records for further processing and for ad hoc queries and reports.|$|R
40|$|Modern applications/portals, e-commerce, digital libraries, etc.) require {{integrated}} access to various information sources (from traditional RDBMS to semistructured Web repositories), fast deployment and low maintenance cost {{in a rapidly}} evolving environment. Because of its flexibility, there is an increasing interest in using XML as a middleware model for such applications. XML enables fast wrapping and declarative integration. However, query processing in XML-based integration systems is still penalized {{by the lack of}} an algebra with adequate optimization properties and the difficulty to understand source query capabilities. In this paper, we propose an algebraic approach to support efficient query evaluation in XML integration systems. We define a general purpose algebra suitable for semistructured or XML <b>query</b> <b>languages.</b> We showhow this algebra can be used, with appropriate type information, to also wrap more <b>structured</b> <b>query</b> <b>languages</b> such as OQL or SQL. Finally,we develop new optimizat [...] ...|$|R
40|$|A user {{who wants}} to get {{knowledge}} from a relational database that needs to know about <b>structured</b> <b>query</b> <b>languages</b> and database schema. Mostly users are not know to those things, so searching knowledge from relational databases is difficult to them. Where a keyword query input is a simple search model that can be issued by writing a list of keywords values, keyword search that place provide a solution of the problem. Because a keyword input query can be interpreted variously, {{a large number of}} outputs are returned. And indexing helps to easily retrieved answers {{and with the help of}} indexing we measure the performance of the CPU, execution time and Disk memory consumed...|$|R
