67|10000|Public
2500|$|Beginning {{in early}} 2002 with Microsoft's {{announcement}} of their Trustworthy Computing initiative, {{a great deal}} of work has gone into making Windows Vista a more <b>secure</b> <b>operating</b> <b>system</b> than its predecessors. Internally, Microsoft adopted a [...] "Secure Development Lifecycle" [...] with the underlying ethos of, [...] "Secure by design, secure by default, secure in deployment". New code for Windows Vista was developed with the SDL methodology, and all existing code was reviewed and refactored to improve security.|$|E
5000|$|SCP-2: <b>Secure</b> <b>Operating</b> <b>System</b> (DOD A1/B3) Multilevel {{security}} ...|$|E
50|$|Before the RISKS mailing list, Neumann {{was best}} known for the Provably <b>Secure</b> <b>Operating</b> <b>System</b> (PSOS).|$|E
50|$|KeyKOS, EROS, Integrity (<b>operating</b> <b>system),</b> CapROS, Coyotos, seL4, OKL4 and Fiasco.OC are <b>secure</b> <b>operating</b> <b>systems</b> that {{implement}} the object-capability model.|$|R
5000|$|Covert {{channels}} can tunnel through <b>secure</b> <b>operating</b> <b>systems</b> {{and require}} special measures to control. Covert channel analysis {{is the only}} proven way to control covert channels. By contrast, <b>secure</b> <b>operating</b> <b>systems</b> can easily prevent misuse of legitimate channels. Distinguishing these is important. Analysis of legitimate channels for hidden objects is often misrepresented as the only successful countermeasure for legitimate channel misuse. Because this amounts to analysis of large amounts of software, it was shown as early as 1972 to be impractical. [...] Without being informed of this, some are misled to believe an analysis will [...] "manage the risk" [...] of these legitimate channels.|$|R
50|$|Uhuru Mobile is a <b>secure</b> Android-based <b>operating</b> <b>system.</b>|$|R
5000|$|Mobile T6 <b>secure</b> <b>operating</b> <b>system</b> simulates the TPM {{functionality}} {{in mobile}} devices using the ARM TrustZone technology.|$|E
50|$|Gemini Multiprocessing <b>Secure</b> <b>Operating</b> <b>System</b> http://www.aesec.com/ is a TCSEC A1 {{system that}} runs on x86 {{processor}} type COTS hardware.|$|E
5000|$|In mobile devices security, {{there are}} some {{alternatives}} to TPM; for example, TrustKernel's T6 <b>secure</b> <b>operating</b> <b>system</b> simulates the functionality of TPM in mobile devices using the ARM TrustZone technology.|$|E
50|$|A {{covert channel}} is so called {{because it is}} hidden from the access control {{mechanisms}} of ultra-high-assurance <b>secure</b> <b>operating</b> <b>systems</b> since it does not use the legitimate data transfer mechanisms of the computer system such as read and write, and therefore cannot be detected or controlled by the hardware based security mechanisms that underlie ultra-high-assurance <b>secure</b> <b>operating</b> <b>systems.</b> Covert channels are exceedingly hard to install in real systems, and can often be detected by monitoring system performance; in addition, they suffer from a low signal-to-noise ratio and low data rates (on {{the order of a}} few bits per second). They can also be removed manually {{with a high degree of}} assurance from secure systems by well established covert channel analysis strategies.|$|R
40|$|In this {{position}} paper, we explore the {{opportunities and challenges}} of running pocket hypervisors on commodity mobile devices through four proposed applications: <b>secure</b> <b>operating</b> <b>systems,</b> security services, mobile testbeds, and opportunistic sensor networks. We believe that pocket hypervisors can benefit mobile computing, but that mobility presents several important and unique challenges to virtualization. ...|$|R
2500|$|These special {{provisions}} that aim at preventing {{certain kinds of}} actions from being executed, in essence, constitute the trusted computing base. For this reason, the Orange Book (still a reference {{on the design of}} <b>secure</b> <b>operating</b> <b>systems</b> [...] ) characterizes the various security assurance levels that it defines mainly in terms of the structure and security features of the TCB.|$|R
50|$|In 1985, Multics {{was issued}} {{certification}} as a B2 level <b>secure</b> <b>operating</b> <b>system</b> using the Trusted Computer System Evaluation Criteria from the National Computer Security Center (NCSC) {{a division of}} the NSA, the first operating system evaluated to this level.|$|E
50|$|<b>Secure</b> <b>Operating</b> <b>System</b> (Secure OS): A secure kernel {{which will}} run in {{parallel}} with a fully featured Rich OS, on the same processor core. It will include drivers for the Rich OS ("normal world") {{to communicate with the}} secure kernel ("secure world"). The trusted infrastructure could include interfaces like the display or keypad to regions of PCI-E address space and memories.|$|E
50|$|SecureWare Inc., {{founded in}} 1986 {{developed}} software and encryption technology for securing Unix-based operating systems. Its <b>secure</b> <b>operating</b> <b>system</b> {{was used to}} help secure the world's first internet bank, Security First Network Bank (S1 Technologies). SecureWare also worked closely with HP's federal division to develop security products, such as the trusted operating system, used by the U.S. Department of Defense for certain military information.|$|E
50|$|The XTS-400 is a {{multi-level}} <b>secure</b> computer <b>operating</b> <b>system.</b> It is multi-user and multitasking. It {{works in}} networked environments and supports Gigabit Ethernet and both IPv4 and IPv6.|$|R
40|$|<b>Securing</b> an <b>operating</b> <b>system</b> is a challenge, {{but also}} a necessity. One {{obstacle}} to <b>securing</b> the <b>operating</b> <b>system</b> is ensuring {{that all of the}} servers are correctly configured for security. Of course, the start of securing the server is the build, but afterward there are other settings that must be put in place to properly secure any server. Active Directory group policies provide a mechanism to assist with just this task in a Windows 2000 environment. Using group polices provides central management, consistent security [...] . Copyright SANS Institut...|$|R
50|$|The FWSM {{is based}} on Cisco PIX {{technology}} and uses the same Cisco PIX <b>Operating</b> <b>System,</b> a <b>secure,</b> real-time <b>operating</b> <b>system.</b> The Cisco FWSM enables organizations to manage multiple firewalls from the same management platform.|$|R
50|$|OpenBSD {{claims to}} be the only {{operating}} system that is fully secure by default. This, however, does not mean it's inherently the most <b>secure</b> <b>operating</b> <b>system,</b> because that depends on the definition of an operating system. There are many operating systems that are not capable of networking with other systems. Thus, considering the amount of network-based security compromises today, one can argue such an operating system is more secure. OpenBSD is a network operating system.|$|E
5000|$|Beginning {{in early}} 2002 with Microsoft's {{announcement}} of its Trustworthy Computing initiative, {{a great deal}} of work has gone into making Windows Vista a more <b>secure</b> <b>operating</b> <b>system</b> than its predecessors. Internally, Microsoft adopted a [...] "Security Development Lifecycle" [...] with the underlying ethos of [...] "Secure by design, secure by default, secure in deployment". New code for Windows Vista was developed with the SDL methodology, and all existing code was reviewed and refactored to improve security.|$|E
50|$|The Flux Advanced Security Kernel (FLASK) is an {{operating}} system security architecture that provides flexible support for security policies. It {{is a joint}} venture between the National Security Agency, the University of Utah, and the Secure Computing Corporation project designed to provide a framework for a more <b>secure</b> <b>operating</b> <b>system.</b> Development and implementation started with the Mach microkernel, and has since shifted its focus to the Linux operating system. FLASK is a core framework in security-focused operating systems such as NSA's Security-Enhanced Linux (SELinux), OpenSolaris FMAC and TrustedBSD. This means that SELinux {{can be thought of as}} an implementation of FLASK.|$|E
5000|$|... #Caption: Users of free <b>operating</b> <b>systems</b> {{have access}} to a wide array of free {{security}} software, such as the packet analyzer Wireshark (shown here), which they can use to <b>secure</b> their <b>operating</b> <b>systems</b> and networks.|$|R
50|$|There is a {{computer}} industry security view that general public desktop operating systems(os) have greater risks as <b>operating</b> <b>systems</b> for cash dispensing machines than other types of <b>operating</b> <b>systems</b> like (<b>secure)</b> real-time <b>operating</b> <b>systems</b> (RTOS). RISKS Digest has many articles about ATM <b>operating</b> <b>system</b> vulnerabilities.|$|R
40|$|Abstract. HOL and SMV {{have two}} radically {{different}} formal specifica-tion languages. Each {{is good at}} describing different aspects of systems and have very different analysis tools. We want to integrate them to make full use of their respective capabilities. One step towards this in-tegration is automatically translating specifications written in HOL into SMV. We argue for the need of such an integration and translation for specification-based testing. We look at the differences between HOL and SMV and specify mechanical translation methods which are appropriate for modeling and testing <b>secure</b> <b>operating</b> <b>systems.</b> ...|$|R
50|$|Available as a {{software}} appliance, Profense {{can be installed}} on most physical servers or as a VMware appliance. Profense {{is based on a}} hardened OpenBSD platform, regarded by many as the most <b>secure</b> <b>operating</b> <b>system.</b> Profense operates as a reverse proxy and has integrated load balancing and acceleration. Profense also utilizes Nginx known for its consistent high performance and ability to handle extremely high numbers of concurrent requests. Profense 3.0 is now a 64-bit operating system making it more appealing to medium and enterprise level companies who have migrated to 64-bit server hardware.Profense can protect Web applications and websites written in any language, including double byte languages such as Japanese, Korean, and Chinese.|$|E
50|$|Joint Cross Domain eXchange (JCDX) {{is another}} example of an MLS {{capability}} currently on the UCDMO baseline. JCDX is the only Department of Defense (DoD), Defense Intelligence Agency (DIA) accredited Multilevel Security (MLS) Command, Control, Communication, Computers and Intelligence (C4I) system that provides near real-time intelligence and warning support to theater and forward deployed tactical commanders. The JCDX architecture is comprehensively integrated with a high assurance Protection Level Four (PL4) <b>secure</b> <b>operating</b> <b>system,</b> utilizing data labeling to disseminate near real-time data information on force activities and potential terrorist threats on and around the world's oceans. It is installed at locations in United States and Allied partner countries where it is capable of providing data from Top Secret/SCI down to Secret-Releasable levels, all on a single platform.|$|E
50|$|Although MINIX and Linux have diverged, MINIX {{continues}} to be developed, now as a production system {{as well as an}} educational one. The focus is on building a highly modular, reliable, and <b>secure,</b> <b>operating</b> <b>system.</b> The system is based on a microkernel, with only 5000 lines of code running in kernel mode. The rest of the operating system runs as a number of independent processes in user mode, including processes for the file system, process manager, and each device driver. The system continuously monitors each of these processes, and when a failure is detected is often capable of automatically replacing the failed process without a reboot, without disturbing running programs, and without the user even noticing. MINIX 3, as the current version is called, is available under the BSD license for free.|$|E
40|$|Recent {{trends in}} <b>secure</b> <b>operating</b> <b>systems</b> {{indicate}} that an object-capability {{system is the}} security model with preeminent characteristics and practicality. Unlike traditional <b>operating</b> <b>systems,</b> which use a single global name space, object-capability systems name objects per protection domain. This allows a fine-grained isolation of the domains and follows the principle of least authority. Programming {{in such an environment}} differs considerably from traditional programming models. The fine-grained access to functionality requires a programming environment that supports the programmer when using a capability system. In this paper, we present an object-oriented framework that uses the C++ programming language to offer a framework for building and using operating-system components and applications...|$|R
5000|$|One use of {{the term}} [...] "computer security" [...] refers to {{technology}} that is used to implement <b>secure</b> <b>operating</b> <b>systems.</b> In the 1980s the United States Department of Defense (DoD) used the [...] "Orange Book" [...] standards, but the current international standard ISO/IEC 15408, [...] "Common Criteria" [...] defines a number of progressively more stringent Evaluation Assurance Levels. Many common <b>operating</b> <b>systems</b> meet the EAL4 standard of being [...] "Methodically Designed, Tested and Reviewed", but the formal verification required for the highest levels means that they are uncommon. An example of an EAL6 ("Semiformally Verified Design and Tested") system is Integrity-178B, which is used in the Airbus A380and several military jets.|$|R
40|$|Protecting the {{kernel of}} an <b>operating</b> <b>system</b> against attacks, {{especially}} injection of malicious code, {{is an important}} factor for implementing <b>secure</b> <b>operating</b> <b>systems.</b> Several kernel integrity protection mechanism were proposed recently that all have a particular shortcoming: They cannot protect against attacks in which the attacker re-uses existing code within the kernel to perform malicious computations. In this paper, we present the design and implementation of a system that fully automates the process of constructing instruction sequences that can be used by an attacker for malicious computations. We evaluate the system on different commodity <b>operating</b> <b>systems</b> and show the portability and universality of our approach. Finally, we describe the implementation of a practical attack that can bypass existing kernel integrity protection mechanisms. ...|$|R
50|$|One {{issue to}} address in full disk {{encryption}} {{is that the}} blocks where the operating system is stored must be decrypted before the OS can boot, meaning that the key has to be available before there is a user interface {{to ask for a}} password. Most Full Disk Encryption solutions utilize Pre-Boot Authentication by loading a small, highly <b>secure</b> <b>operating</b> <b>system</b> which is strictly locked down and hashed versus system variables to check for the integrity of the Pre-Boot kernel. Some implementations such as BitLocker Drive Encryption can make use of hardware such as a Trusted Platform Module to ensure the integrity of the boot environment, and thereby frustrate attacks that target the boot loader by replacing it with a modified version. This ensures that authentication can take place in a controlled environment without the possibility of a bootkit being used to subvert the pre-boot decryption.|$|E
5000|$|... xB Machine {{has been}} a virtual {{operating}} system that was {{small enough to fit}} on a USB drive. The last version seems to have been 0.9.1.5 in mid of 2008. It brought a secure computing environment that anonymized all internet activity, and had portable encrypted file storage. It had been developed and offered by XeroBank and based on a modified Gentoo Linux distribution. It could be executed as a virtual machine through a QEMU hypervisor, VMWare, VirtualBox, and any other major virtualization system. It could also be booted from on USB or burned to CD for booting. Virtualization, along with the native implementation of a Tor onion routing for internet connectivity and other encryption and privacy tools, had been utilized to increase the security and anonymity of the user.The developers claimed that it is the most <b>secure</b> <b>operating</b> <b>system</b> in the worldand that the technology involved is highly resistant to hacking and spying, even in the most hostile environments. The details and transactions inside each xB Machine account were protected with 256-bit AES encryption. The software also had a self-destruct sequence for eliminating any traces that a user may have left behind on the drivespace after using xB Machine. Meanwhile, Xerobank offers a modular package with xB Browser, xB Mail, and xB VPN, parts of it running only for customers of the bank.|$|E
40|$|Prepared for: USAECOM CONTRACT AABO 3 - 73 -C- 1454 SRI Project 2581 This report {{summarizes}} work to date {{toward the}} development of a provably <b>secure</b> <b>operating</b> <b>system.</b> Discussed here are I) a methodology for the design, implementation, and proof of properties of large computing systems, i s the design of a <b>secure</b> <b>operating</b> <b>system</b> using this methodology, [...] . the security properties to be proven about this system, i considerations for implementing such a system, and v an approach to monitoring security and performance. i Y&apos...|$|E
25|$|At a December 2010 press conference, Google {{claimed that}} Chrome OS {{would be the}} most <b>secure</b> {{consumer}} <b>operating</b> <b>system</b> due in part to a verified boot ability, in which the initial boot code, stored in read-only memory, checks for system compromises.|$|R
40|$|Trusted {{subjects}} are inevitably parts of multi-level security systems or trusted networks. They can introduce security risk into system, as they don't comply with *-property in Bell LaPadula model. It's an important work {{to determine which}} {{subjects are}} trusted from hundreds and thousands of applications, and what their security requirements are during the developing and deploying <b>secure</b> <b>operating</b> <b>systems.</b> In this paper, an approach is proposed {{to address these issues}} based on information flow and risk analysis. Type enforcement specification is used as a base for information flow analysis and then finding out trusted subjects and their security requirements:security label range and security assurance level. © 2011 Springer-Verlag. Beijing University of Technology; ONETS Wireless and Internet Security Company; Singapore Management University; Adm. Comm. Zhongguangcun Haidian Sci. ParkTrusted subjects are inevitably parts of multi-level security systems or trusted networks. They can introduce security risk into system, as they don't comply with *-property in Bell LaPadula model. It's an important work to determine which subjects are trusted from hundreds and thousands of applications, and what their security requirements are during the developing and deploying <b>secure</b> <b>operating</b> <b>systems.</b> In this paper, an approach is proposed to address these issues based on information flow and risk analysis. Type enforcement specification is used as a base for information flow analysis and then finding out trusted subjects and their security requirements:security label range and security assurance level. © 2011 Springer-Verlag...|$|R
40|$|The {{protection}} mechanisms of current mainstream <b>operating</b> <b>systems</b> are inadequate to support confidentiality and integrity requirements for end systems. Mandatory access control (MAC) {{is needed to}} address such requirements, but the limitations of traditional MAC have inhibited its adoption into mainstream <b>operating</b> <b>systems.</b> The National Security Agency (NSA) worked with Secure Computing Corporation (SCC) to develop a flexible MAC architecture called Flask to overcome the limitations of traditional MAC. The NSA has implemented this architecture in the Linux <b>operating</b> <b>system,</b> producing a Security-Enhanced Linux (SELinux) prototype, to make the technology available to a wider community and to enable further research into <b>secure</b> <b>operating</b> <b>systems.</b> NAI Labs has developed an example security policy configuration to demonstrate {{the benefits of the}} architecture and to provide a foundation for others to use. This paper describes the security architecture, security mechanisms, application programming interface, security policy configuration, and performance of SELinux. ...|$|R
