232|10000|Public
5000|$|<b>Scheduling</b> <b>of</b> <b>tasks</b> across {{multiple}} CPU cores (may include core affinity) ...|$|E
5000|$|Scheduling of task {{groups with}} {{internal}} <b>scheduling</b> <b>of</b> <b>tasks</b> within that group ...|$|E
5000|$|Surgical {{scheduling}} software is computer software related to <b>scheduling</b> <b>of</b> <b>tasks</b> for {{a sequence of}} surgical cases in one surgery theatre and with one surgery staff using an operational model, a computer and a network. Another {{vital part of the}} surgery scheduling process is the communication between the Facility and the Vendor.|$|E
5000|$|... {{future events}} - the forms are the same, but the meaning {{refers to the}} future. Usually, these types of events are {{time-table}} or <b>schedule</b> <b>of</b> <b>tasks</b> that are planned.|$|R
40|$|This paper {{presents}} an algorithm {{for determining the}} minimum cost <b>schedule</b> <b>of</b> <b>tasks</b> in a critical path network in which task cost-time curves may be concave. A computer program for the case of cost-time curves that are piecewise linear in two segments is described, and a numerical example is presented. ...|$|R
40|$|In {{order to}} improve the {{efficiency}} <b>of</b> fault-tolerant <b>scheduling</b> <b>of</b> hybrid real-time <b>tasks</b> in circumstance <b>of</b> space application, a hybrid fault-tolerant scheduling algorithm for multiprocessor in space environment is proposed. In this algorithm, a grouping based Best-Fit assignment strategy in the periodic task scheduling is used to obtain more compact scheduling result by use of a little increasing computation time, so {{that the number of}} processors and the task execution time required by the algorithm are saved. In addition, a time slice based approach is used to finish the dynamic <b>scheduling</b> <b>of</b> aperiodic <b>tasks,</b> thus improving the efficiency <b>of</b> fault-tolerant <b>scheduling</b> <b>of</b> hybrid real-time <b>tasks</b> and making the algorithm more suitable for the task processing in complicated space environment. It is shown from the simulation that this algorithm has important effect on improving the performance <b>of</b> fault-tolerant <b>scheduling</b> <b>of</b> hybrid real-time <b>tasks.</b> In {{order to improve}} the efficiency <b>of</b> fault-tolerant <b>scheduling</b> <b>of</b> hybrid real-time <b>tasks</b> in circumstance <b>of</b> space application, a hybrid fault-tolerant scheduling algorithm for multiprocessor in space environment is proposed. In this algorithm, a grouping based Best-Fit assignment strategy in the periodic task scheduling is used to obtain more compact scheduling result by use of a little increasing computation time, so that the number of processors and the task execution time required by the algorithm are saved. In addition, a time slice based approach is used to finish the dynamic <b>scheduling</b> <b>of</b> aperiodic <b>tasks,</b> thus improving the efficiency <b>of</b> fault-tolerant <b>scheduling</b> <b>of</b> hybrid real-time <b>tasks</b> and making the algorithm more suitable for the task processing in complicated space environment. It is shown from the simulation that this algorithm has important effect on improving the performance <b>of</b> fault-tolerant <b>scheduling</b> <b>of</b> hybrid real-time <b>tasks...</b>|$|R
50|$|It {{features}} {{most basic}} project management functions like a Gantt chart for project <b>scheduling</b> <b>of</b> <b>tasks,</b> and doing resource management using resource load charts. It can only handle days not hours. It {{does not have}} features like cash flow, message and document control. It {{has a number of}} reporting options (MS Project, HTML, PDF, spreadsheets).|$|E
50|$|In {{software}} development, a Technical Director {{is typically}} {{responsible for the}} successful creation and delivery of the company's product to the marketplace by managing technical risks and opportunities; making key software design and implementation decisions with the development teams, <b>scheduling</b> <b>of</b> <b>tasks</b> including tracking dependencies, managing change requests, and guaranteeing quality of deliveries and educating the team on technical best practices.|$|E
30|$|As {{a second}} {{performance}} metric, {{we consider the}} response time of the algorithm to incoming tasks. The response time is essentially the time during which the request is actually considered. In other words, {{we can say that}} the response time is directly dependent on the availability of resources. The availability of resources is dependent up on the <b>scheduling</b> <b>of</b> <b>tasks.</b> If the <b>scheduling</b> <b>of</b> <b>tasks</b> is performed properly, then the resources will naturally be free early or in advance of deadlines, the response times will be less in such cases.|$|E
30|$|The {{last one}} is the DFG_Up. This allows {{updating}} the results matrix after each <b>scheduling</b> <b>of</b> a <b>task.</b>|$|R
40|$|In {{this paper}} we study the global <b>scheduling</b> <b>of</b> {{periodic}} <b>task</b> systems upon uniform multiprocessor platforms. We first show two very general properties which are well-known for uniprocessor platforms and which remain for multiprocessor one: (i) under few {{and not so}} restrictive assumptions, we show that any feasible <b>schedules</b> <b>of</b> peri-odic <b>task</b> system are periodic from some point and (ii) for the specific case <b>of</b> synchronous periodic <b>task</b> systems, we show that the schedule repeats from the origin. We then present our main result: any feasible <b>schedules</b> <b>of</b> asyn-chronous periodic <b>task</b> sets using a fixed-priority sched-uler are periodic from a specific point. Moreover, we char-acterize that point and we provide a feasibility interval for those systems. ...|$|R
40|$|In {{the article}} the {{properties}} of the problem are researched to build a feasible <b>schedule</b> <b>of</b> <b>tasks</b> execution with a common due date for parallel machines with two simultaneous criteria of optimality: total earliness minimization regarding the due date and the tasks' start time execution maximization. The sufficient conditions <b>of</b> <b>schedule's</b> optimality are developed. The PDC-algorithm for the solution of the problem is given. ? ?????? ??????????? ???????? ?????? ?????????? ??????????? ?????????? ?????????? ??????? ? ????? ??????????? ?????? ??? ???????????? ???????? ???????????? ?? ???? ????????? ?????????????: ??????????? ?????????? ?????????? ???????????? ???????????? ?????? ? ???????????? ??????? ??????? ??????? ?? ??????????. ??????????? ??????????? ???????? ????????????? ??????????. ???????? ???-???????? ??????? ???????????????? ??????...|$|R
40|$|Cloud {{computing}} shares {{data and}} oers services transparently among its users. With {{the increase in}} number of users of cloud the tasks to be scheduled increases. The performance of cloud depends on the task scheduling algorithms used in the scheduling components or brokering components. <b>Scheduling</b> <b>of</b> <b>tasks</b> on cloud computing systems {{is one of the}} research problem, Where the matching of machines and completion time of the tasks are considered. Tasks matching of machines problem is that, assume number of active hosts are Y, number of VMs in each host are Z. Maximum number of possible Virtual Machines(VMs) to schedule a single task is (y*z). If we need to schedule X tasks, number of possibilities are (y *z) ^x. So <b>scheduling</b> <b>of</b> <b>tasks</b> is NP Hard problem. NP Hard means this <b>scheduling</b> <b>of</b> <b>tasks</b> on VMs not having polynomial time complexity, but it may have algorithm for verifying solution. Fault-tolerance becomes an important key to establish dependability in cloud computing system. In task scheduling, if task not completed in it's deadline,then it is one type of fault in <b>scheduling</b> <b>of</b> <b>tasks.</b> In this thesis this type of faults are taken and try to overcome it. In this thesis we present a non-preemptive scheduling algorithm, By inserting the ideal time for postponing the task by ensuring the other task will completes its execution with in the deadline. In simulation the proposed algorithm maximizes the prot of 25 %, throughput of 25 % and minimizes the penalty of 20 % over EDF...|$|E
40|$|The need {{to operate}} in deep water and perform {{simultaneously}} several scientific tasks, leads AUV software control to be designed with modularity and evolutionarity aims. A software control architecture applied to the AUV TAIPAN is presented. It focuses on dynamic <b>scheduling</b> <b>of</b> <b>tasks</b> and instrumentation...|$|E
40|$|Grid Computing {{has emerged}} as an {{important}} new field focusing on resource sharing. One {{of the most challenging}} issues in Grid Computing is efficient <b>scheduling</b> <b>of</b> <b>tasks.</b> In this paper, we propose a Load balancing algorithm for fair scheduling, and we compare it to other scheduling schemes such as the Earlies...|$|E
40|$|Abstract. The {{computation}} <b>of</b> efficient <b>schedules</b> <b>of</b> <b>task</b> graphs for parallel machines is a {{major issue}} in parallel computing. Such algorithms are often hard to understand and hard to evaluate. We present a framework for the visualization <b>of</b> <b>scheduling</b> algorithms. Using the LogP cost model for parallel machines, we simulate the effects <b>of</b> <b>scheduling</b> algorithms for specific target machines and task graphs before performing time and resource consumptive measurements in the real world. ...|$|R
40|$|General purpose {{platforms}} {{are characterized}} by unpredictable timing behavior. Real-time <b>schedules</b> <b>of</b> <b>tasks</b> on general purpose platforms need to be robust against variations in task execution times. We define robustness {{in terms of the}} expected number <b>of</b> <b>tasks</b> that miss deadlines. We present an iterative robust scheduler that produces robust multiprocessor <b>schedules</b> <b>of</b> directed acyclic graphs with a low expected number <b>of</b> <b>tasks</b> that miss their deadlines. We experimentally show that this robust scheduler produces significantly more robust schedules in comparison to a scheduler using nominal execution times on both real world and synthetic test cases. cop. 2015 ACM...|$|R
40|$|Real-time <b>scheduling</b> <b>of</b> {{sporadic}} <b>task</b> systems {{when the}} number <b>of</b> distinct <b>task</b> types is small ∗ In some real-time application systems, {{there are only a}} few distinct kinds <b>of</b> <b>tasks,</b> each <b>of</b> which may be instantiated several times during runtime. The <b>scheduling</b> <b>of</b> such sporadic <b>task</b> systems is considered here upon both a single processor, and on multiprocessor platforms under the partitioned paradigm <b>of</b> multiprocessor <b>scheduling.</b> Algorithms that have run-time polynomial in the number <b>of</b> <b>tasks</b> in the system are presented and proved correct. ...|$|R
40|$|This paper {{describes}} a technique for performing mapping and <b>scheduling</b> <b>of</b> <b>tasks</b> belonging to an executable application into a NoC-based MPSoC, starting from its UML specification. A toolchain {{is used in}} order to transform the high-level UML specification into a middle-level representation, which {{takes the form of}} an annotated task graph. Such an input task graph is used by an optimization engine for the sake of carrying out the design space exploration. The optimization engine relies on a Population-based Incremental Learning (PBIL) algorithm for performing mapping and <b>scheduling</b> <b>of</b> <b>tasks</b> into the NoC. The PBIL algorithm is also proposed for dynamic mapping of tasks {{in order to deal with}} failure events at runtime. Simulation results are promising and exhibit a good performance of the proposed solution when problem size is increased. © 2013 Elsevier B. V. All rights reserved...|$|E
40|$|Algorithms for the <b>scheduling</b> <b>of</b> <b>tasks</b> {{within a}} {{parallel}} program onto available processors generally assume that communication only {{occurs at the}} start or end of each task, i. e., a task can only commence execution when all necessary data has been sent to it. This is termed "non-preemptive task scheduling". This paper examines {{the problem of the}} preemptive parallel program which is represented by a preemptive task model. A new preemptive scheduling algorithm, named PET, is proposed. Experiments are conducted to illustrate the performance achievable through preemptive task execution and scheduling. 1 Introduction The <b>scheduling</b> <b>of</b> <b>tasks</b> within a parallel program aims to optimize system performance via the efficient arrangement of the tasks onto the underlying available processors within the parallel system. The task scheduling problem can be decomposed into four major aspects: the scheduling objective is the performance measure to be optimized; the task model portrays constituent task [...] ...|$|E
40|$|The <b>scheduling</b> <b>of</b> <b>tasks</b> {{within a}} {{parallel}} program onto the underlying available processors {{has been studied}} for some time. To date, solutions to this problem generally assume that communication only occurs at the start or end of each parallel task, i. e., the child task can only start its execution when all its parent tasks complete and have sent data to it. This is termed "non-preemptive task scheduling". This paper examines {{the problem of the}} preemptive parallel program which is represented by a preemptive task model. A new preemptive scheduling algorithm, named PET, is also proposed. Experiments are conducted to illustrate the performance achievable through preemptive task execution and scheduling. Keywords: preemptive task scheduling, preemptive task execution, parallel programming. 1 Introduction The <b>scheduling</b> <b>of</b> <b>tasks</b> within a parallel program aims to optimize system performance via the efficient arrangement of the tasks onto the underlying available processors within the paral [...] ...|$|E
40|$|Limited-preemption <b>scheduling</b> <b>of</b> {{sporadic}} <b>task</b> systems upon a multiprocessor {{platform is}} considered, when inter-processor migration is permitted. A schedulability test is derived by extending a prior schedulability test for fully-preemptive <b>scheduling</b> <b>of</b> sporadic <b>task</b> systems to the above-mentioned platform. We describe how the derived schedulability test {{can be used}} as a schedulability test for multiprocessor, multi-GPU systems with busy-waiting. Experimental evaluations are used to show the efficacy of the derived schedulability test in the context of the multiprocessor, multi-GPU system model. 1...|$|R
40|$|This paper {{presents}} {{an investigation into}} the optimal <b>scheduling</b> <b>of</b> realtime <b>tasks</b> <b>of</b> a multiprocessor system using hybrid genetic algorithms (GAs). A comparative study of heuristic approaches such as `Earliest Deadline First (EDF) ¿ and `Shortest Computation Time First (SCTF) ¿ and genetic algorithm is explored and demonstrated. The results of the simulation study using MATLAB is presented and discussed. Finally, conclusions are drawn from the results obtained that genetic algorithm can be used for <b>scheduling</b> <b>of</b> real-time <b>tasks</b> to meet deadlines, in turn to obtain high processor utilization...|$|R
40|$|AbstractThe <b>scheduling</b> <b>of</b> <b>task</b> graphs on two {{identical}} processors is considered. It {{is assumed}} that tasks have unit-execution-time, and arcs are associated with unit-communication-time delays. The problem is to assign the tasks to the two processors and schedule their execution {{in order to minimize}} the makespan. A quadratic algorithm is proposed to compute an optimal schedule for a class of series-parallel graphs, called SP 1 graphs, which includes in particular in-forests and out-forests...|$|R
40|$|A {{series of}} studies is {{conducted}} to develop a systematic approach to optimizing, {{both in terms of}} the distribution and <b>scheduling</b> <b>of</b> <b>tasks,</b> scenarios in which astronauts and robots accomplish a group of activities on the Moon, given an objective function (OF) and specific resources and constraints. An automated planning tool is developed as a key element of this optimization system...|$|E
40|$|Whether {{you want}} to admit it or not, our whole life {{consists}} of the performance of various tasks and events. And just a draft application for easy <b>scheduling</b> <b>of</b> <b>tasks</b> and events is the aim of this thesis. Specifically, it will be a program that is suitable for both personal and work related planning occurred without any invasion of privacy...|$|E
40|$|The <b>scheduling</b> <b>of</b> <b>tasks</b> in {{distributed}} real-time {{systems has}} attracted many {{researchers in the}} recent past. The distributed real-time system considered here consists of uniprocessor or multiprocessor nodes connected through a multihop network. Scheduling in such a system involves scheduling of dynamically arriving tasks within a node (local scheduling) and migration of tasks across the network (global scheduling) {{if it is not}} possible to schedule them locally. Most of the existing schemes on distributed real-time task scheduling ignore the underlying message scheduling required for global <b>scheduling</b> <b>of</b> <b>tasks.</b> These schemes consider the load on the processors at a node as the basis to migrate tasks from a heavily loaded node (sender) to a lightly loaded node (receiver). We believe that the identification of a receiver node should be based not only on the load on its processors, but also on the availability of a lightly loaded path from the sender to that receiver. In this paper, we pres [...] ...|$|E
40|$|Introduction The <b>scheduling</b> <b>of</b> {{real-time}} <b>tasks</b> on a uniprocessor {{system has}} evolved from Rate Monotonic Scheduling, Earliest Deadline First <b>Scheduling</b> <b>of</b> unrelated <b>tasks</b> to tasks that share resources and communicate[4][1]. However, <b>scheduling</b> <b>of</b> the real-time <b>tasks</b> that share resources and {{communicate with each other}} in a distributed real-time environment is still an active research area in real-time computing. A distributed real-time system consists of computation nodes connected by a real-time network where the messages transfer time between the nodes is bounded. Each node may execute a distributed real-time kernel which provides the local and remote interprocess communication and syncronization as well as the usual process management functions and input/output management. The goal of our ongoing work is to investigate balancing of the static load over this distributed environment. Formally, if T = ft...|$|R
40|$|Colloque avec actes et comité de lecture. nationale. National audienceIn {{this paper}} {{we present a}} linear time {{algorithm}} to compute a <b>schedule</b> <b>of</b> <b>tasks</b> with real-time constraints that minimizes the total energy consumption on a dynamically variable voltage processor. This result, which is a significant improvement over the classical algorithm, comes as a by-product of a more general continuous optimization problem. We also provide an optimal algorithm when the processor can only take {{a limited number of}} clock frequencies...|$|R
5000|$|Common {{cropping}} required {{adherence to}} an agricultural calendar. There was a latest time for harvesting, and hence {{for the previous}} ploughing and sowing. In Russia, with its short growing season, latest times tended also to be earliest, necessitating a fairly tight yearly <b>schedule</b> <b>of</b> <b>tasks.</b> [...] Peasants carried out each field-work job simultaneously. This resulted in a pattern `of parallel columns of men, women and adolescents from the various households working the narrow strips at sowing and harvesttime'.|$|R
40|$|In this paper, {{we present}} a fully programmable, {{heterogeneous}} single chip SDR platform with multimedia support. Running at 175 MHz, a peak performance of 40 GOPS is delivered while dissipating 1. 5 W. The chip contains a hardware unit called CoreManager for run-time <b>scheduling</b> <b>of</b> <b>tasks.</b> The CoreManager solves the typical MPSoC programmability problem, improves energy efficiency and makes the platform scalable. Categories and Subject Descriptor...|$|E
40|$|Whether we {{are able}} to admit it or not, our whole life {{consists}} of the performance of various tasks and obligations. And just a draft application for easy <b>scheduling</b> <b>of</b> <b>tasks</b> and especially events is the aim of this thesis. It will be a program that is suitable for both personal and work related planning occurred without any invasion of privacy. Powered by TCPDF (www. tcpdf. org...|$|E
40|$|Grid Computing {{has emerged}} as an {{important}} new field focusing on resource sharing. One {{of the most challenging}} issues in Grid Computing is efficient <b>scheduling</b> <b>of</b> <b>tasks.</b> In this paper, we propose a new algorithm for fair scheduling, and we compare it to other scheduling schemes such as the First Come First Served and the Round Robin schemes for a computational grid. It aims at addressing the fairness issue by reducing the service time error [...] The algorithm assigns to each task enough computational power to complete it within its deadline. The resources that each user gets are proportional to the user’s weight or a share. The weight or share of a user may be defined as the user’s contribution to the infrastructure or the price he is willing to pay for services. <b>Scheduling</b> <b>of</b> <b>tasks</b> is based on an error called the Service time error which fairness among users. Fairness is defined as the proportional allocation of resources to tasks as per their demand. Simulated results and comparisons with the conventional scheduling schemes such as the FCFS and Round Robin are presented...|$|E
40|$|We study a two-period {{moral hazard}} problem with risk-neutral and wealth-constrained agents and three {{identical}} tasks. We {{show that the}} allocation <b>of</b> <b>tasks</b> over time is important {{if there is a}} capacity constraint on the number <b>of</b> <b>tasks</b> that can be performed in one period. We characterize the optimal <b>schedule</b> <b>of</b> <b>tasks</b> over time and the optimal assignment <b>of</b> <b>tasks</b> to agents conditional on the outcomes <b>of</b> previous <b>tasks.</b> In particular, we show that delaying tasks is optimal if and only if the effect of an agent's effort on the probability of success is relatively low. hidden actions; Job design; limited liability; task assignment...|$|R
40|$|Abstract—The <b>scheduling</b> <b>of</b> {{generalized}} pinwheel <b>task</b> {{systems is}} considered. It is shown that pinwheel scheduling {{is closely related}} to the fair <b>scheduling</b> <b>of</b> periodic <b>task</b> systems. This relationship is exploited to obtain new scheduling algorithms for generalized pinwheel task systems. When compared to traditional pinwheel scheduling algorithms, these new algorithms are both more efficient from a runtime complexity point of view, and have a higher density threshold, on a very large subclass <b>of</b> generalized pinwheel <b>task</b> systems. Index Terms—Generalized pinwheels, fairness, real-time scheduling, density threshold...|$|R
5000|$|Nomad, {{supporting}} <b>scheduling</b> and deployment <b>of</b> <b>tasks</b> across worker nodes in a cluster.|$|R
