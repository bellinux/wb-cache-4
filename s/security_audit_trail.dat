7|1541|Public
50|$|Another {{advantage}} of the functional model {{is that it is}} a database with features such as data independence, concurrent multiuser access, integrity, scalability, <b>security,</b> <b>audit</b> <b>trail,</b> backup/recovery, and data integration.Data independence is of particularly high value for analytics. Data need no longer reside in spreadsheets. Instead the functional database acts as a central information resource. The spreadsheet acts as a user interface to the database, so the same data can be shared by multiple spreadsheets and multiple users. Updates submitted by multiple users are available to all users subject to security rules. Accordingly, there is always a single consistent shared version of the data.|$|E
40|$|Security is a {{key issue}} {{in the design and}} {{implementation}} of complex information systems. Security mechanisms and policies have to be deployed and then continuously maintained, monitored and audited. Auditing information is of great usefulness, but difficult to manage. Thus, several tools for <b>security</b> <b>audit</b> <b>trail</b> analysis have been developed to assist audit trails analysts in their work. Great effort is currently being devoted to improve such tools with real-time intrusion detection capabilities. This paper presents Inspect, a system for automated audit trail analysis, which aims at real-time intrusion detection. Inspect tries to emulate, with its distributed architecture, the behavior of a team of <b>security</b> <b>audit</b> <b>trail</b> analysts, using the divide et impera approach. Inspect is based on InSpeL, a rule-based language, which aims at specifying break-ins and system abuse scenarios. Keywords: computer security, distributed systems, audit trails analysis, intrusion detection. 1 [...] ...|$|E
40|$|Abstract—The {{health record}} in the Electronic Health Record (EHR) system is more {{sensitive}} than demographic. It raises the important issue for the EHR requirement in privacy, <b>security,</b> <b>audit</b> <b>trail,</b> patient access, and archiving and data retention. The studies about the EHR system security are deficient. The {{aim of this study}} is to build a security environment for the EHR system by Integrating the Healthcare Enterprise (IHE) Audit Trail and Node Authentication Security (ATNA) profile. The CDAs can be access in a secure EHR environment. ...|$|E
50|$|Trying {{to manage}} {{the sheer volume of}} {{spreadsheets}} that may exist in an organization without proper <b>security,</b> <b>audit</b> <b>trails,</b> unintentional introduction of errors, and other items listed above can become overwhelming.|$|R
5000|$|Many {{of the low}} end {{products}} are characterized by being [...] "single-entry" [...] products, as opposed to double-entry systems seen in many businesses. Some products have considerable functionality but are not considered GAAP or IFRS/FASB compliant. Some low-end systems do not have adequate <b>security</b> nor <b>audit</b> <b>trails.</b>|$|R
50|$|Linoma Software also {{performs}} encryption of {{data at rest}} on the IBM i (iSeries) {{platform with}} its Crypto Complete product. This product also includes key management, <b>security</b> controls and <b>audit</b> <b>trails</b> for PCI compliance.|$|R
40|$|This article proposes an {{optimization}} {{of using}} Genetic Algorithms for the <b>Security</b> <b>Audit</b> <b>Trail</b> Analysis Problem, which was proposed by L. Me in 1995 and improved by Pedro A. Diaz-Gomez and Dean F. Hougen in 2005. This optimization consists in filtering the attacks. So, we classify attacks in 'Certainly not existing attacks class', 'Certainly existing attacks class' and 'Uncertainly existing attacks class'. The proposed {{idea is to}} divide the 3 rd class to independent sub-problems easier to solve. We use also the remote method invocation (RMI) to reduce resolution time. The results are very significant: 0 % false+, 0 %false-, detection rate equal to 100 %. We present also, a comparative study to confirm the given improvement...|$|E
40|$|Special {{care should}} be taken to verify the {{integrity}} and to ensure that sensitive data is adequately protected. One of the key activities for data loss prevention is anaudit. And {{in order to be able}} to audit a system, it is important to have reliable records of its activities. Systems that store critical data, whether financial or productive, must have features such as audit log, also called audit trail, which records all activities on critical data. This allows to identify harmful actions that can be internal or external, intentionally or unintentionally caused. Therefore, this paper presents major studies in <b>security</b> <b>audit</b> <b>trail</b> (audit log), especially records of logs, and it presents what is available in terms of commercial tools and what they offer...|$|E
40|$|An {{implemented}} {{system for}} on-line analysis of multiple distributed data streams is presented. The system is conceptually universal since {{it does not}} rely on any particular platform feature and uses format adaptors to translate data streams into its own standard format. The system is as powerful as possible (from a theoretical standpoint) but still efficient enough for on-line analysis thanks to its novel rule-based language (RUSSEL) which is specifically designed for efficient processing of sequential unstructured data streams. In this paper, the generic concepts are applied to <b>security</b> <b>audit</b> <b>trail</b> analysis. The resulting system provides powerful network security monitoring and sophisticated tools for intrusion/anomaly detection. The rulebased and command languages are described {{as well as the}} distributed architecture and the implementation. Performance measurements are reported, showing the effectiveness of the approach. 1 Introduction Auditing distributed environments is useful to [...] ...|$|E
50|$|In most cases, {{electronic}} notarizations {{does not}} mean that the notary can perform the electronic notarizations remotely as most states still require that the participants and the notary must all be physically present at the time of signing. There are also significant benefits to having the notarizations done electronically such as cost savings, superior <b>security,</b> authenticity, <b>audit</b> <b>trails,</b> and document integrity, which are things that are not available to paper based notarizations.|$|R
50|$|<b>Security</b> {{measures}} include <b>audit</b> <b>trails</b> so {{that patients}} can see who has accessed their medical records {{along with the}} time the records were accessed. It also includes the use of encryption, secure logins and passwords. Patient records are identified using an Individual Health Identifier (IHI), assigned by Medicare, the IHI service provider.|$|R
50|$|GoAnywhere MFT is a managed file {{transfer}} {{solution for the}} exchange of data between systems, employees, customers and trading partners. It provides a single point of control with <b>security</b> settings, detailed <b>audit</b> <b>trails</b> and reports. Data transfers are secured using protocols for FTP servers (FTPS, SFTP, and SCP) and Web servers (HTTPS and AS2). It supports popular encryption protocols and offers a NIST-certified FIPS 140-2 Validated Encryption module.|$|R
40|$|Introduction The {{objective}} of the experimentation described in this abstract is to assess the feasibility of a sophisticated distributed intrusion detection system (DIDS). Indeed, informal discussions with system engineers {{show that they are}} reluctant to set up a DIDS. As a matter of fact, designing and maintaining a DIDS on a real life scale is a non trivial exercise. Most people fear {{that it would not be}} worth the effort, because the DIDS would make the performances of the audited network collapse. We believe that it is essential to have rational data about the costs of a DIDS. ASAX (Advanced <b>Security</b> <b>audit</b> <b>trail</b> Analysis on uniX) is a research prototype which can detect intrusion signatures in audit trails. The detection mechanism is based on rules programmed in a C-like dedicated language [2]. With these rules, IDS systems can be built which can detect complicated and intertwined intrusion scenarios, in particular scenarios which require several actions. Informal prelimi...|$|E
40|$|In prior work we {{described}} {{techniques used}} to capture, store, and retrieve narrative data forms from a database using widely available {{off the shelf}} software. This concept makes use of the secu-rity and versioning features of database architecture together with those of image-supported electronic document information capture. We present herein the <b>security</b> and <b>audit</b> <b>trail</b> features of our construct. Unique usernames and passwords are used at the operating system level to en-force client validation and control access to the database system via an electronic signature using a Boolean logic algorithm. We used the database domain to capture original data and any changes to the data, developing an <b>audit</b> <b>trail</b> displaying identification information. Version controlled and change tracked electronic documents can be retrieved through the client side web interface to enable direct search operations, thus uncoupling the client from database query languages...|$|R
40|$|Apart from {{providing}} rich data <b>security</b> information, database <b>audit</b> <b>trails</b> {{are the good}} sources {{of information on the}} workload characteristics of database system. This is why the periodic patterns of database operations found in the <b>audit</b> <b>trails</b> can be used for both performance tuning and intrusion detection. This work defines a new concept of an irregular periodic pattern and it shows how such patterns can be detected in the <b>audit</b> <b>trails</b> of database operations. The paper presents the algorithms that implement a new way of finding the irregular periodic patterns in audit data. The quality and complexity of the algorithms together with the outcomes from the experiments are discussed in the paper...|$|R
40|$|Includes bibliographical {{references}} (pages 45 - 47) Modern organizations face {{an increasingly}} {{difficult task of}} protecting their information system networks from intruders. Network protection must also be balanced against accessibility and convenience for authorized users. Network monitoring tools are often employed to identify potential security problems. These tools generate considerable amounts of data relating to network traffic and security logs. Technologies such as Intrusion Detection Systems (IDS) or Intrusion Prevention Systems (IPS) are employed to assist information systems and network security personnel in identifying and stopping network intrusions. However, while utilities such as IDS and IPS are helpful in collecting and sorting through the volume of data that is generated from internal logging, human management of this information is important in effectively monitoring network traffic and detecting incidents. The process by which network <b>security</b> <b>audit</b> <b>trails</b> are managed varies considerably among organizations, and there does not exist currently a set of well- researched best practices for IS network security managers to follow. This thesis analyzed the current industry practices and management policies used in <b>audit</b> <b>trail</b> management, and provided an overview of management practices and policies believed to be effective for network protection. The research formulated several conjectures regarding factors {{that may lead to}} faster malware detection times, and described a research plan and a survey instrument to test these conjectures. The effectiveness of the <b>audit</b> <b>trail</b> was measured by elapsed time from an adverse event occurring to its discovery in the <b>audit</b> <b>trail,</b> with shorter elapsed times indicating greater effectiveness. Given the differing natures of adverse events that could be discovered, the scope of the research plan was limited to the discovery of malware on computing devices in a company's network. The pilot study uncovered certain issues that future researchers may encounter, such as difficulty in finding qualified respondents and unclear or ambiguous survey questions. Suggestions for improving the survey???s questions and response count are provided, based on the original issues the study encountered. Although the pilot study did not provide much new data to base recommendations on, this thesis used data from existing literature to provide general recommendations, which included ensuring analysts are familiar with the network environment via training programs and organizational knowledge sharing, and consulting with IDS/IPS vendors and specialists during the system installation...|$|R
40|$|Enterprise systems, {{real time}} {{recording}} and real time reporting pose new and significant {{challenges to the}} accounting and auditing professions. This includes developing methods and tools for continuous assurance and fraud detection. In this {{paper we propose a}} methodology for continuous fraud detection that exploits <b>security</b> <b>audit</b> logs, changes in master records and accounting <b>audit</b> <b>trails</b> in enterprise systems. The steps in this process are: (1) threat monitoring-surveillance of <b>security</b> <b>audit</b> logs for ‘red flags’, (2) automated extraction and analysis of data from <b>audit</b> <b>trails,</b> and (3) using forensic investigation techniques to determine whether a fraud has actually occurred. We demonstrate how mySAP, an enterprise system, can be used for <b>audit</b> <b>trail</b> analysis in detecting financial frauds, Afterwards we use a case study of a suspected fraud to illustrate how to implement the methodology...|$|R
40|$|Although a {{computer}} system's primary defense is its access controls, computer system access controls cannot {{be relied upon}} in most cases to safeguard against a penetration or insider attack. Even the most secure systems are vulnerable to abuse by insiders who misuse their privileges, and <b>audit</b> <b>trails</b> {{may be the only}} means of detecting authorized but abusive user activity. While many computer systems collect audit data, most do not have any capability for automated analysis of that data. Moreover, many systems collect large volumes of data that are not necessarily security relevant. To address the need for automated <b>security</b> analysis of <b>audit</b> <b>trails,</b> SRI is developing a real-time intrusion-detection expert system (NIDES). NIDES is an independent system that runs on its own workstation and processes audit data characterizing user activity received from a target system. NIDES provides a system-independent mechanism for real-time detection of security violations, whether they are initiated [...] ...|$|R
40|$|This {{research}} {{used the}} Queensland Police Service, Australia, {{as a major}} case study. Information on principles, techniques and processes used, {{and the reason for}} the recording, storing and release of audit information for evidentiary purposes is reported. It is shown that Law Enforcement Agencies have a two-fold interest in, and legal obligation pertaining to, <b>audit</b> <b>trails.</b> The first interest relates to the situation where <b>audit</b> <b>trails</b> are actually used by criminals in the commission of crime and the second to where <b>audit</b> <b>trails</b> are generated by the information systems used by the police themselves in support of the recording and investigation of crime. Eleven court cases involving Queensland Police Service <b>audit</b> <b>trails</b> used in evidence in Queensland courts were selected for further analysis. It is shown that, of the cases studied, none of the evidence presented was rejected or seriously challenged from a technical perspective. These results were further analysed and related to normal requirements for trusted maintenance of <b>audit</b> <b>trail</b> information in sensitive environments with discussion on the ability and/or willingness of courts to fully challenge, assess or value audit evidence presented. Managerial and technical frameworks for firstly what is considered as an environment where a computer system may be considered to be operating “properly” and, secondly, what aspects of education, training, qualifications, expertise and the like may be considered as appropriate for persons responsible within that environment, are both proposed. Analysis was undertaken to determine if audit and control of information in a high security environment, such as law enforcement, could be judged as having improved, or not, in the transition from manual to electronic processes. Information collection, control of processing and audit in manual processes used by the Queensland Police Service, Australia, in the period 1940 to 1980 was assessed against current electronic systems essentially introduced to policing in the decades of the 1980 s and 1990 s. Results show that electronic systems do provide for faster communications with centrally controlled and updated information readily available for use by large numbers of users who are connected across significant geographical locations. However, it is clearly evident that the price paid for this is a lack of ability and/or reluctance to provide improved audit and control processes. To compare the information systems audit and control arrangements of the Queensland Police Service with other government departments or agencies, an Australia wide survey was conducted. Results of the survey were contrasted with the particular results of a survey, conducted by the Australian Commonwealth Privacy Commission four years previous, to this survey which showed that security in relation to the recording of activity against access to information held on Australian government computer systems has been poor and a cause for concern. However, within this four year period there is evidence to suggest that government organisations are increasingly more inclined to generate <b>audit</b> <b>trails.</b> An attack on the overall <b>security</b> of <b>audit</b> <b>trails</b> in computer operating systems was initiated to further investigate findings reported in relation to the government systems survey. The survey showed that information systems <b>audit</b> <b>trails</b> in Microsoft Corporation's “Windows” operating system environments are relied on quite heavily. An <b>audit</b> of the <b>security</b> for <b>audit</b> <b>trails</b> generated, stored and managed in the Microsoft “Windows 2000 ” operating system environment was undertaken and compared and contrasted with similar such <b>audit</b> <b>trail</b> schemes in the “UNIX” and “Linux” operating systems. Strength of passwords and exploitation of any security problems in access control were targeted using software tools that are freely available in the public domain. Results showed that such security for the “Windows 2000 ” system is seriously flawed and the integrity of <b>audit</b> <b>trails</b> stored within these environments cannot be relied upon. An attempt to produce a framework and set of guidelines for use by expert witnesses in the information technology (IT) profession is proposed. This is achieved by examining the current rules and guidelines related to the provision of expert evidence in a court environment, by analysing the rationale for the separation of distinct disciplines and corresponding bodies of knowledge used by the Medical Profession and Forensic Science and then by analysing the bodies of knowledge within the discipline of IT itself. It is demonstrated that the accepted processes and procedures relevant to expert witnessing in a court environment are transferable to the IT sector. However, unlike some discipline areas, this analysis has clearly identified two distinct aspects of the matter which appear particularly relevant to IT. These two areas are; expertise gained through the application of IT to information needs in a particular public or private enterprise; and expertise gained through accepted and verifiable education, training and experience in fundamental IT products and system...|$|R
40|$|The {{primary focus}} of the UK e-Science Programme is the {{development}} of software architectures, middleware and applications to support the end-user scientific community in the undertaking of large-scale research. A significant subset of e-Science projects is concerned with the healthcare domain: as well as satisfying the needs of the end users, such projects have to consider the legal, ethical and security constraints {{associated with the use of}} sensitive patient data - these concerns are particularly relevant within the context of the U. K. 's National Health Service (NHS). In this paper we present a vision for Grid-enabled healthcare that is sensitive to the information security requirements both of the NHS and the projects themselves. Although our motivation is principally derived from U. K. -based e-Health projects, this paper should be of interest to the worldwide health Grid community. By restricting ourselves to information security, we do not consider, for example, physical <b>security</b> or <b>audit</b> <b>trail</b> capabilities, which are outside the scope of this paper. The vision we describe is grounded in terms of experience, and reflects the challenges faced by the e-DiaMoND project team. Copyright © 2005 John Wiley and Sons, Ltd...|$|R
40|$|No {{matter how}} robust the {{employed}} security mechanisms are malicious users or attackers will {{always find a}} way to bypass them. In addition, National Institute of Security and Technology mentions "In conjunction with appropriate tools and procedures, <b>audit</b> <b>trail</b> can assist in detecting security violation and flaws in applications". Until now, in Multimedia Communication Services (MCS), such as Voice over IP, <b>audit</b> <b>trails</b> are not utilized in <b>security</b> <b>audits</b> due to (a) the lack of the appropriate analysis tools and (b) privacy restrictions. In this paper we report on the analysis of MCS <b>audit</b> <b>trail</b> by employing a novel method for identifying "uncommon" traffic indicating non normal behaviour that does not violate users' privacy. We rely on entropy theory and the notion of "itself information" to quantify the randomness of specific message segments, and we also introduce the term "actual itself information" for the assessment of entire message randomness. To protect users' privacy we hash <b>audit</b> <b>trail's</b> data. For evaluating the applicability of our proposed method we utilize an <b>audit</b> <b>trail</b> of a real MCS provider published by honey pot project. Initial outcomes show the feasibility of employing such a method to recognize "uncommon" traffic, recorded in MCS <b>audit</b> <b>trail...</b>|$|R
5000|$|The Argus Project {{is focused}} on {{developing}} all aspects of large scale network situational awareness and network <b>audit</b> <b>trail</b> establishment in support of Network Operations (NetOps), Performance and Security Management. Motivated by the telco Call detail record (CDR), Argus attempts to generate network metadata {{that can be used}} to perform a large number of network management tasks. Argus is used by many universities, corporations and government entities including US DISA, DoD, DHS, FFRDCs, GLORIAD and is a Top 100 Internet Security Tool. [...] Argus is designed to be a real-time situational awareness system, and its data can be used to track, alarm and alert on wire-line network conditions. The data can also be used to establish a comprehensive audit of all network traffic, as described in the Red Book, US DoD NCSC-TG-005, supplementing traditional Intrusion detection system (IDS) based network <b>security.</b> [...] The <b>audit</b> <b>trail</b> is traditionally used as historical network traffic measurement data for network forensics and Network Behavior Anomaly Detection (NBAD). [...] Argus has been used extensively in cybersecurity, end-to-end performance analysis, and more recently, software-defined networking (SDN) research. [...] Argus has also been a topic in network management standards development. RMON (1995) [...] and IPFIX (2001).|$|R
40|$|Fraudulent {{transactions}} {{fuel the}} criminal misuse of identity details and pose {{a serious threat}} to national security. This issue is heightened by the growing sophistication of business transactions using payment cards, causing its policing to be increasingly difficult. Both public and private sector organizations are required by law to comply with industry standards for information technology security and these standards normally mandate the creation of <b>security</b> policies and <b>audit</b> <b>trails</b> for these enterprises, especially from key systems holding sensitive information. Enterprise architects have traditionally defined security policy and relied upon technical controls to secure enterprise systems against cyber threats and misuse. However, within ever-more complex transactional information systems it is difficult to achieve compliance and analyze security policy rules without the ability to capture and model the complexity of security at a business level. Using a simple financial trading case study as an illustration, we propose a semantic approach to security policy reasoning using conceptual graphs. This approach provides ontology that enables enterprise architects to capture the semantics of fraudulent transactions through security policy rules...|$|R
50|$|OpenBSM is an {{open source}} {{implementation}} of Sun's Basic <b>Security</b> Module (BSM) <b>Audit</b> API and file format. BSM, which is a system used for auditing, describes a set of system call and library interfaces for managing audit records {{as well as a}} token stream file format that permits extensible and generalized <b>audit</b> <b>trail</b> processing.|$|R
40|$|International audienceTraditional {{access control}} {{mechanisms}} prevent illegal access by controlling access right before executing an action; they belong to a class of a priori security solutions and, {{from this point of}} view, they have some limitations, like inflexibility in unanticipated circumstances. By contrast, a posteriori mechanisms enforce policies not by preventing unauthorized access, but rather by deterring it. Such access control needs evidence to prove violations. Evidence is derived from log records, which trace each user's actions. Efficiency of violation detection mostly depends on the compliance of log records with the access and usage control policy. In order to develop an efficient method for finding these violations, we propose restructuring log records according to a security policy model. We illustrate our methodology by applying it to the healthcare domain, taking care of the Integrating the Healthcare Enterprise (IHE) framework, particularly its basic <b>security</b> profile, ATNA (<b>Audit</b> <b>Trail</b> and Node Authentication). This profile defines log records established on the analysis of common health practice scenarios. We analyze and establish how ATNA log records can be refined in order to be integrated into an a posteriori access and usage control process, based on an expressive and contextual security policy like the OrBAC (Organization Based Access Control) policy...|$|R
50|$|In {{clinical}} research, server based systems call Clinical Trial Management Systems (CTMS) require <b>audit</b> <b>trails.</b> Anything regulatory or QA/QC related {{also requires}} <b>audit</b> <b>trails.</b>|$|R
40|$|Abstract- Business process {{performance}} evaluation {{is a key}} step towards assessing and improving e-business operations. In real-scale scenarios, such evaluation requires the collection, aggregation and processing of vast amounts of data, in particular <b>audit</b> <b>trails.</b> This paper aims at enabling such evaluation by integrating workflow technology with data warehousing. We first present a data model for capturing workflow <b>audit</b> <b>trail</b> data relevant to process {{performance evaluation}}. We then construct logical models that characterize the derivation of performance evaluation data from workflow <b>audit</b> <b>trails.</b> Based on these models, we apply dimensional modeling techniques to define schemas for storing workflow <b>audit</b> <b>trail</b> data in data warehouses. Using data warehouse technology, decision makers are able to query large volumes of <b>audit</b> <b>trail</b> data for business process performance evaluation. I...|$|R
40|$|This thesis {{provides}} a complete {{design and implementation}} of <b>audit</b> <b>trail</b> collection and storage for Aeolus, a distributed security platform based on information flow control. An information flow control system regulates all activities that concern information security. By recording all the operations monitored by Aeolus, our <b>audit</b> <b>trails</b> capture all actions that can affect system security. In our system, event records are collected on each system node and shipped to a centralized location, where they are stored and processed. To correlate <b>audit</b> <b>trail</b> events of different system nodes we store event dependencies directly in the event records. Each <b>audit</b> <b>trail</b> record keeps links to its immediate predecessors. Therefore, our <b>audit</b> <b>trails</b> form dependency graphs that capture the causal relationship among system events. These graphs can be used t...|$|R
30|$|An <b>audit</b> <b>trail</b> is a {{sequence}} of interleaved trails of user applications. For example, {{a sequence}} 〈 c_i:t_c_i, s_i_ 1 :t_i_ 1, c_j:t_c_j, s_j_ 1 :t_j_ 1, s_i_ 2 :t_i_ 2, d_i:t_d_id_j:t_d_j〉 is a sample <b>audit</b> <b>trail</b> from the processing of applications a_i, and a_j. In practice, SQL statements can be easily extracted from an <b>audit</b> <b>trail</b> and EXPLAIN PLAN statement {{can be used in}} the contexts of respective user schemas to transform the statements into the syntax trees of query execution plans over a set of operations of extended relational algebra. A complete information about syntax trees obtained from a database <b>audit</b> <b>trail</b> is kept in a syntax tree table.|$|R
30|$|<b>Audit</b> <b>trails</b> are {{the records}} about “who did what and when” {{in order to}} meet {{requirements}} on “system integrity, recoverability, auditing, and requirements”. Effective <b>audit</b> <b>trails</b> on EHR systems should keep all relevant system input and output not only for the purpose of system validation and problem diagnosis, but also to understand how EHR systems are operating. The <b>audit</b> <b>trails</b> can then serve as unbiased evidence of medical practice for potential litigation use [13].|$|R
5000|$|Information <b>security</b> <b>audit</b> {{information}} technology audit or {{information technology}} <b>security</b> <b>audit</b> ...|$|R
5000|$|Accountability uses such system {{components}} as <b>audit</b> <b>trails</b> (records) and logs, to associate a subject with its actions. The information recorded should {{be sufficient to}} map the subject to a controlling user. <b>Audit</b> <b>trails</b> and logs are important for ...|$|R
5000|$|<b>Audit</b> <b>trails</b> {{tracking}} system activity, {{so that when}} a security breach occurs, the mechanism and extent of the breach can be determined. Storing <b>audit</b> <b>trails</b> remotely, where they can only be appended to, can keep intruders from covering their tracks.|$|R
40|$|We present {{constructs}} that create, manage, and verify digital <b>audit</b> <b>trails</b> for versioning file systems. Based upon a {{small amount}} of data published to a third party, a file system commits to a version history. At a later date, an auditor uses the published data to verify the contents of the file system at any point in time. <b>Audit</b> <b>trails</b> create an analog of the paper audit process for file data, helping to meet the requirements of electronic record legislation, such as Sarbanes-Oxley. Our techniques address the I/O and computational efficiency of generating and verifying <b>audit</b> <b>trails,</b> the aggregation of audit information in directory hierarchies, and constructing verifiable <b>audit</b> <b>trails</b> in the presence of lost data. Copyright 2005 ACM...|$|R
40|$|One {{approach}} to secure systems {{is through the}} analysis of <b>audit</b> <b>trails.</b> An <b>audit</b> <b>trail</b> is a record of all events {{that take place in}} a system and across a network, i. e., it provides a trace of user/system actions so that security events can be related to the actions of a specific individual or system component. <b>Audit</b> <b>trails</b> can be inspected for {{the presence or absence of}} certain patterns. This paper advocates the use of process mining techniques to analyze <b>audit</b> <b>trails</b> for <b>security</b> violations. It is shown how a specific algorithm, called the α-algorithm, can be used to support security efforts at various levels ranging from low-level intrusion detection to high-level fraud prevention...|$|R
40|$|Best {{practices}} for databases include keeping detailed <b>audit</b> <b>trail</b> {{information about the}} data. These <b>audit</b> <b>trail</b> tables vary in complexity as well as size. Generally speaking, the larger the database in tables (as well as in observations), the larger the <b>audit</b> <b>trail.</b> We have discovered that leveraging <b>audit</b> <b>trail</b> information in our automated reporting {{has been a huge}} resource saver in terms of which observations need to be reprocessed for a report. Even with minimal audit information (such as created by and modified by dates at the data table level), automation processing time can be greatly reduced by taking advantage of a new way of thinking and a few handy SAS ® functions...|$|R
