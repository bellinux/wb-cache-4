0|10000|Public
50|$|<b>Web</b> <b>services</b> {{discovery}} provides {{access to}} software systems over the Internet using standard protocols. In the most basic scenario there is a <b>Web</b> <b>Service</b> Provider that publishes a <b>service</b> and a <b>Web</b> <b>Service</b> Consumer that uses this <b>service.</b> <b>Web</b> <b>Service</b> Discovery {{is the process of}} finding suitable <b>web</b> <b>services</b> for a given task.|$|R
50|$|ICWS {{features}} {{research papers}} {{with a wide}} range of topics, focusing on various aspects of IT services. Some of the topics include <b>Web</b> <b>services</b> specifications and enhancements, <b>Web</b> <b>services</b> discovery and integration, <b>Web</b> <b>services</b> security, <b>Web</b> <b>services</b> standards and formalizations, <b>Web</b> <b>services</b> modeling, <b>Web</b> services-oriented software engineering, Web services-oriented software testing, Web services-based applications and solutions, <b>Web</b> <b>services</b> realizations, semantics in <b>Web</b> <b>services,</b> and all aspects of Service-Oriented Architecture (SOA) infrastructure.|$|R
40|$|International audienceThe {{coordination}} between agent <b>service</b> and <b>Web</b> <b>service</b> {{is the key}} factor for intelligent <b>Web</b> <b>service</b> management in the multi-agent based <b>Web</b> <b>service</b> framework. In view of the drawbacks of existing coordination approaches for agent <b>service</b> and <b>Web</b> <b>service,</b> this paper proposed a multi-agent and workflow-based <b>Web</b> <b>service</b> management model. Through analyzing the interaction relations between agent <b>service</b> and <b>Web</b> <b>service</b> in the logical action-based task environment, a uniform task view for intelligent <b>Web</b> <b>service</b> is built. And based on such task view, a workflow towards special task is designed to realize intelligent <b>Web</b> <b>service</b> discovery and cooperation and composition. This model provides a more flexible <b>Web</b> <b>service</b> management...|$|R
40|$|The paper {{focuses on}} the <b>web</b> <b>service</b> {{composition}} and <b>web</b> <b>service</b> discovery based MapReduce algorithm, which is {{the one of the}} component of the big data problem resolver tool Hadoop. Many of the IT companies are currently in the journey to Service Oriented Architecture (SOA) with <b>web</b> <b>service</b> as the standard protocol for implementation. The overwhelming popularity of <b>web</b> <b>service</b> has made a huge impact on <b>web</b> <b>service</b> repository, because of which managing it using traditional UDDI platforms has become difficult. Integrating Hadoop ecosystem with <b>web</b> <b>services</b> can provide higher QoS to the user request for <b>web</b> <b>services.</b> <b>Web</b> <b>service</b> composition and <b>Web</b> <b>service</b> discovery plays {{a crucial role in the}} management of <b>web</b> <b>service.</b> <b>Web</b> <b>service</b> discovery involves locating or finding the exact individual <b>web</b> <b>services</b> from the service registry and retrieving previously published description for new <b>web</b> application. <b>Web</b> <b>service</b> composition is technique to combine simple <b>web</b> <b>service</b> to satisfy the user requirement. An efficient MapReduce algorithm can help in providing better management of <b>web</b> <b>service...</b>|$|R
40|$|The {{convergence}} of semantic web techniques with <b>web</b> <b>service</b> technologies has enabled {{the emergence of}} so-called semantic <b>web</b> <b>services.</b> This new kind of services enacts the automatic manipulation of services by software programs, to perform tasks such as automatic service location, composition, and invocation. In this paper, we propose methods and techniques that enable the semi-automatic generation, deployment, semantic annotation and classification of <b>web</b> <b>services.</b> semantic <b>web</b> services; <b>web</b> <b>service</b> generation; <b>web</b> <b>service</b> classification; <b>web</b> <b>service</b> ontologies; reasoning; WSDL; OWL 1...|$|R
40|$|Abstract:- Nowadays, <b>Web</b> <b>service</b> {{technology}} {{plays an}} increasing role in internet applications, in general, and e-commerce applications, in particular. In fact, service-oriented {{systems can be}} expected to grow larger in complexity. Such large systems demand for tools that allow for analyzing and monitoring of service-oriented systems in use. Our work attempts to draw the necessary architecture in order to analyze interactions between <b>Web</b> <b>service</b> consumer and provider. WSIM modelling architecture is built over three layers: <b>Web</b> <b>service</b> operations, interactions and workflows. The paper aim is to present WSIM modelling architecture and how it could be implemented to support existing <b>Web</b> <b>service</b> applications (e. g. e-commerce applications). Key-words: e-Commerce <b>Services,</b> <b>Web</b> <b>service</b> interactions, <b>Web</b> <b>service</b> logging, <b>Web</b> <b>service</b> mining...|$|R
40|$|Comprehensive {{contractual}} {{description of}} Web Ser-vices and <b>Web</b> <b>Service</b> compositions {{is needed for}} selection of appropriate <b>Web</b> <b>Services</b> and their service and quality of service (QoS) levels, for monitoring of operation of <b>Web</b> <b>Services,</b> and for management of <b>Web</b> <b>Services</b> and <b>Web</b> <b>Service</b> compositions. We sys-tematically examined what types of technical contracts are useful for <b>Web</b> <b>Services</b> and <b>Web</b> <b>Service</b> composi-tions and classified them into three broad categories (functional, quality, and infrastructure contracts), each containing several contract types. Our study of how prominent <b>Web</b> <b>Service</b> languages can or cannot be used for specification of these contract types shows that they enable specification of only particular types of contracts, sometimes even in incompatible ways. Consequently, we advocate a unified framework for comprehensive contractual description of <b>Web</b> <b>Services</b> and <b>Web</b> <b>Service</b> compositions. At the end, we outline one possible approach to comprehensive contractual description, based on extending existing <b>Web</b> <b>Service</b> technologies...|$|R
40|$|International audienceâ€”Web {{service is}} subject to {{frequent}} changes during its lifecycle. <b>Web</b> <b>service</b> evolution is a widely discussed topic. Many related problems have also been generated from <b>Web</b> <b>service</b> evolution such as <b>Web</b> <b>service</b> adaptation, <b>Web</b> <b>service</b> versioning and <b>Web</b> <b>service</b> change management. To treat with these issues efficiently, a complete evolution model for <b>Web</b> <b>service</b> should be built. In this paper, we introduce our change-centric model for <b>Web</b> <b>service</b> evolution and how we use it to design, execute, and adapt to the changes during <b>Web</b> <b>service</b> evolution...|$|R
5000|$|OGC Catalog <b>Service</b> <b>web</b> <b>service</b> primer and {{instructions}} for accessing NSF EarthCube Paleogeoscience RCN ...|$|R
40|$|<b>Web</b> <b>service</b> {{composition}} {{is an important}} problem in <b>web</b> <b>service</b> based systems. It is about {{how to build a}} new value-added <b>web</b> <b>service</b> using existing <b>web</b> <b>services.</b> A <b>web</b> <b>service</b> may have many implementations, all of which have the same functionality, but may have different QoS values. Thus, a significant research problem in <b>web</b> <b>service</b> {{composition is}} how to select a <b>web</b> <b>service</b> implementation for each of the <b>web</b> <b>services</b> such that the composite <b>web</b> <b>service</b> gives the best overall performance. This is so-called optimal <b>web</b> <b>service</b> selection problem. There may be mutual constraints between some <b>web</b> <b>service</b> implementations. Sometimes when an implementation is selected for one <b>web</b> <b>service,</b> a particular implementation for another <b>web</b> <b>service</b> must be selected. This is so called dependency constraint. Sometimes when an implementation for one <b>web</b> <b>service</b> is selected, a set of implementations for another <b>web</b> <b>service</b> must be excluded in the <b>web</b> <b>service</b> composition. This is so called conflict constraint. Thus, the optimal <b>web</b> <b>service</b> selection is a typical constrained ombinatorial optimization problem from the computational point of view. This paper proposes a new hybrid genetic algorithm for the optimal <b>web</b> <b>service</b> selection problem. The hybrid genetic algorithm has been implemented and evaluated. The evaluation results have shown that the hybrid genetic algorithm outperforms other two existing genetic algorithms when the number of <b>web</b> <b>services</b> and the number of constraints are large...|$|R
40|$|<b>Web</b> <b>service</b> {{registry}} {{systems and}} methods, and <b>web</b> <b>service</b> architectures are disclosed. A <b>web</b> <b>service</b> registry system can include a <b>web</b> <b>service</b> registry, {{a plurality of}} <b>web</b> <b>services,</b> a plurality of knowledgebase models, and a control system. The plurality of <b>web</b> <b>services</b> can be published to the <b>web</b> <b>service</b> registry for effective dynamic discovery and invocation of the <b>web</b> <b>services.</b> The plurality of knowledgebase models, which can be defined by domain knowledge experts, {{can be associated with}} the <b>web</b> <b>service</b> registry. Each of the knowledgebase models can include a semantic specification and a syntactic specification. The control system can periodically filter non-compliant <b>web</b> <b>services</b> from the <b>web</b> <b>service</b> registry, where a non-compliant <b>web</b> <b>service</b> fails to comply with a predetermined knowledgebase model associated with the <b>web</b> <b>service</b> registry. Other embodiments of the <b>web</b> <b>service</b> management systems, architectures, and methods are also disclosed. Georgia Tech Research Corporatio...|$|R
40|$|Semantic <b>Web</b> <b>Services</b> are {{considered}} to be {{the next step in the}} evolution of <b>Web</b> <b>Services.</b> In addition to <b>Web</b> <b>Services,</b> Semantic <b>Web</b> <b>Services</b> allows software agents to discover, select, call, compose, invoke, and execute automatically a <b>Web</b> <b>services</b> without the intervention of human beings. Specifically, there exists little support in terms of methodologies for designing a semantic <b>web</b> <b>services,</b> and the <b>Web</b> <b>service</b> ontology development is a very complex, creative process, and it is comparable with software engineering in complexity. In this paper, we propose a development-oriented process for building <b>web</b> <b>service</b> ontology using the OWL-S language. This process is explained by relating it to a medical <b>web</b> <b>services...</b>|$|R
5000|$|Open Geospatial Consortium Web Services: <b>Web</b> Feature <b>Service,</b> <b>Web</b> Map <b>Service,</b> Catalog <b>Service</b> for the <b>Web</b> ...|$|R
40|$|Abstract. WSOL (<b>Web</b> <b>Service</b> Offerings Language) is an XML (Extensible Markup Language) {{notation}} {{compatible with}} the WSDL (<b>Web</b> <b>Services</b> De-scription Language) standard. While WSDL is used for describing operations provided by <b>Web</b> <b>Services,</b> WSOL enables formal specification of multiple classes of <b>service</b> for one <b>Web</b> <b>Service.</b> A service offering is a formal represen-tation of one class of <b>service</b> for a <b>Web</b> <b>Service.</b> As classes of <b>service</b> for <b>Web</b> <b>Services</b> are determined by combinations of various constraints, WSOL enables formal specification of functional constraints, some QoS (a. k. a., non-functional) constraints, simple access rights (for differentiation of service), price, and rela-tionships with other service offerings of the same <b>Web</b> <b>Service.</b> Describing a <b>Web</b> <b>Service</b> in WSOL, in addition to WSDL, enables selection of a more ap-propriate <b>Web</b> <b>Service</b> and service offering for particular circumstances. Fur-ther, it supports dynamic adaptation and management of <b>Web</b> <b>Service</b> composi-tions using manipulation of service offerings. ...|$|R
40|$|Since {{there are}} lot of <b>Web</b> <b>services</b> to perform same functionality, {{we need to}} select a proper <b>Web</b> <b>Service</b> based on QoS requirements. In this paper, we will study {{different}} <b>Web</b> <b>Service</b> selection techniques which are available in market. We will compare these <b>web</b> <b>service</b> selection methodologies using different parameters. Then we can recommend a particular <b>web</b> <b>service</b> for <b>web</b> <b>service</b> composition...|$|R
50|$|Currently (February 2014) the Forest <b>Service</b> <b>web</b> page {{states that}} the summit lookout tower is closed. The area was {{severely}} impacted by the Miller fire in 2011 but {{the cause of the}} closure is not stated on the Forest <b>Service</b> <b>web</b> page.|$|R
40|$|Abstractâ€”The {{increasing}} use of the Web {{for everyday}} tasks is making <b>Web</b> <b>services</b> {{an essential part of}} the Internet customerâ€™s daily life. Users query the Internet for a required <b>Web</b> <b>service</b> and get back a set of <b>Web</b> <b>services</b> that may or may not satisfy their request. To get the most relevant <b>Web</b> <b>services</b> that fulfill the userâ€™s request, the user has to construct the request using the keywords that best describe the userâ€™s objective and match correctly with the <b>Web</b> <b>Service</b> name or location. Clustering <b>Web</b> <b>services</b> based on function similarities would greatly boost the ability of <b>Web</b> <b>services</b> search engines to retrieve the most relevant <b>Web</b> <b>services.</b> This paper proposes a novel technique to mine <b>Web</b> <b>Service</b> Description Language (WSDL) documents and cluster them into functionally similar <b>Web</b> <b>service</b> groups. The application of our approach to real <b>Web</b> <b>services</b> description files has shown good performance for clustering <b>Web</b> <b>services</b> based on function similarity, as a predecessor step to retrieving the relevant <b>Web</b> <b>services</b> for a user request by search engines. Index Termsâ€”clustering WSDL documents, <b>Web</b> <b>service,</b> fea-ture extraction, <b>Web</b> <b>service</b> clustering...|$|R
40|$|The Service-Oriented Architecture {{is gaining}} {{more and more}} {{attention}} and one way of realising it is the usage of <b>Web</b> <b>Services.</b> But which <b>Web</b> <b>Services</b> need to be invoked to reach a goal and which parameters are necessary at the beginning or are returned at the end? In this report we present an algebraic structure of <b>Web</b> <b>Services</b> in order to formally describe the <b>Web</b> <b>Services</b> and assist the users in <b>Web</b> <b>Service</b> composition. Hence, we apply relation algebra, tests, Kleene star and modal operators to characterise <b>Web</b> <b>Services</b> and <b>Web</b> <b>Service</b> Composition...|$|R
40|$|Abstract: The {{convergence}} of semantic web techniques with <b>web</b> <b>service</b> technologies has enabled {{the emergence of}} so-called semantic <b>web</b> <b>services.</b> This new kind of services enacts the automatic manipulation of services by software programs, to perform tasks such as automatic service location, composition, and invocation. In this paper, we propose methods and techniques that enable the semi-automatic generation, deployment, semantic annotation and classification of <b>web</b> <b>services.</b> Key words: semantic <b>web</b> services; <b>web</b> <b>service</b> generation; <b>web</b> <b>service</b> classification; <b>web</b> <b>service</b> ontologies; reasoning; WSDL; OWL 1...|$|R
50|$|Asynchronous <b>Web</b> <b>services</b> - Axis2 now {{supports}} asynchronous <b>Web</b> <b>services</b> and asynchronous <b>Web</b> <b>services</b> invocation using non-blocking {{clients and}} transports.|$|R
40|$|<b>Web</b> <b>Service</b> Composition creates new {{composite}} <b>Web</b> <b>Services</b> {{from existing}} <b>Web</b> <b>Services</b> which embodies the added values of <b>Web</b> <b>Service</b> technology {{and is a}} key technology to solve cross-organizational business process integrations. We do a survey on formal methods for <b>Web</b> <b>Service</b> Composition in the following way. Through analyses of <b>Web</b> <b>Service</b> Composition, we establish a reference model called RM-WSComposition to capture elements of <b>Web</b> <b>Service</b> Composition. Based on the RM-WSComposition, issues on formalization for <b>Web</b> <b>Service</b> Composition are pointed out and state-of-the-art on formal methods for <b>Web</b> <b>Service</b> Composition is introduced. Finally, we point out the trends on this topic. For convenience, we use an example called BuyingBooks to illustrate the concepts and mechanisms in <b>Web</b> <b>Service</b> Composition...|$|R
40|$|Abstract. <b>Web</b> <b>services</b> evolve {{over their}} life time and change their behavior. In our work, we analyze <b>Web</b> <b>service</b> related changes and {{investigate}} interdependencies of <b>Web</b> <b>service</b> related changes. We classify changes of <b>Web</b> <b>services</b> for an analysis regarding {{causes and effects}} of such changes and utilize a dedicated <b>Web</b> <b>service</b> information model to capture the changes of <b>Web</b> <b>services.</b> We show how to put changes of <b>Web</b> <b>services</b> into an evolutionary context {{that allows us to}} develop a holistic perspective on <b>Web</b> <b>services</b> and their stakeholders in a ecosystem of <b>Web</b> <b>services.</b> ...|$|R
40|$|Abstract â€” Nowadays, <b>Web</b> <b>services</b> are {{considered}} as new and attracting distributed approach of application/services integration over the Internet. As {{the number of}} <b>Web</b> <b>Services</b> is exponentially growing and expected {{to do so for}} the next decade, the need for categorizing and/or classifying <b>Web</b> <b>Services</b> is very crucial for their success and the success of the underlying SOA. Categorization aims at systematizing <b>Web</b> <b>Services</b> according to their functionalities and their Quality of Service attributes. Communities of <b>Web</b> <b>Services</b> have been used to gather <b>Web</b> <b>Services</b> based on their functionalities. In fact, <b>Web</b> <b>Services</b> in a community usually offer similar and/or complementary services. In this paper, we augment <b>Web</b> <b>Services</b> communitiesâ€™ classification by adding a new support layer for Quality of Service classification. This is done through Quality of Services specification, monitoring, and certification of different <b>Web</b> <b>Services.</b> A <b>Web</b> <b>Service</b> might be admitted to a community thanks to its high Quality of Service or might be ejected from a community due to its low Quality of Service. We propose a managerial community of <b>Web</b> <b>Services</b> that is able to monitor and certify Quality of <b>Web</b> <b>Services</b> in other communities. This managerial community offers services to other communities, <b>Web</b> <b>Services</b> providers, and <b>Web</b> <b>Services</b> clients by monitoring and certifying <b>Web</b> <b>Services.</b> The focus of this paper is the use of the managerial community to select <b>Web</b> <b>Services...</b>|$|R
50|$|Low {{birth weight}} rates by county are also {{available}} via MyEnvironment thanks to another Department of Health and Human <b>Services</b> <b>web</b> <b>service.</b>|$|R
40|$|Abstract. Despite all {{standardization}} {{efforts in}} the <b>Web</b> <b>service</b> area, several different incompatible <b>Web</b> <b>service</b> registry implementations exist. The initial focus of these implementations was geared towards working with a centralized Universal Business Registry (UBR). However, these centralized approaches tend to be bottlenecks regarding performance and fault tolerance. A proposed solution is the replication of registry information among multiple distributed <b>Web</b> <b>service</b> registries. In addition, the creation of specialized <b>Web</b> <b>service</b> registries leads to {{a large number of}} different <b>Web</b> <b>service</b> registries. This leads to a situation where the search for a particular <b>Web</b> <b>service</b> becomes a very complex task. Besides, <b>Web</b> <b>service</b> provisioning includes a considerable administrative overhead when dealing with transient <b>Web</b> <b>services.</b> Transient <b>Web</b> <b>services</b> exist only for a limited lifetime and in a certain context. In this paper, we propose the VISR (View based Integration of <b>Web</b> <b>Service</b> Registries) peer to peer architecture for the transparent integration of multiple <b>Web</b> <b>service</b> registries and transient <b>Web</b> <b>service</b> providers. This work focuse...|$|R
40|$|Serviceâ€“oriented {{architecture}} (SOA) is {{an architectural}} concept for building software applications that use services {{available in a}} network and promotes loose coupling between software components. <b>Web</b> <b>services</b> presents standardized and well described interface, which integrates SOAâ€™s requests. The paper deals with modern <b>Web</b> <b>service</b> technology and also its principles and advantages. It {{is obvious that the}} interoperability (one of the main advantage) of <b>Web</b> <b>services</b> allow creating the various kinds of client applications. One of them is also the MATLAB client that can consume the <b>Web</b> <b>service.</b> In the example the <b>Web</b> <b>Service</b> solves the boundary element method (BEM) using Laplace's equations for the rectangular bar problem. 1 <b>Web</b> <b>Services</b> A <b>Web</b> <b>service,</b> in general meaning of the term, is any service available via the Internet for the client applications (<b>Web</b> <b>service</b> consumers) or other <b>Web</b> <b>services</b> that uses a standardized XML (Extensible Markup Language) messaging system, and is not linked to any operating system or programming language. The <b>Web</b> <b>services</b> architecture as an interoperability architecture is based on three essential standards [1]: Simple Object Access Protocol (SOAP) - the XML-based communication protocol that provides a common message format for exchanging data between clients and <b>services.</b> <b>Web</b> <b>Services</b> Description Language (WSDL) - the <b>Web</b> <b>services</b> specifications that contain a description of the <b>Web</b> <b>service's</b> interface built on XML Universal Description, Discovery, and Integration (UDDI) - the publishing and discovery API for <b>Web</b> <b>services</b> In typical <b>Web</b> <b>services</b> scenario [2], a client application sends a request to a service at a give...|$|R
40|$|Abstract: With {{the rapid}} {{development}} of e-business, web applications {{based on the}} Web are developed from localization to globalization, from B 2 C(business-to-customer) to B 2 B(business-to-business), from centralized fashion to decentralized fashion. <b>Web</b> <b>service</b> is a new application model for decentralized computing, {{and it is also}} an effective mechanism for the data and service integration on the <b>web.</b> Thus, <b>web</b> <b>service</b> has become a solution to e-business. It is important and necessary to carry out the research on the new architecture of <b>web</b> <b>services,</b> on the combinations with other good techniques, and on the integration of services. In this paper, a survey presents on various aspects of the research of <b>web</b> <b>services</b> from the basic concepts to the principal research problems and the underlying techniques, including data integration in <b>web</b> <b>services,</b> <b>web</b> <b>service</b> composition, semantic <b>web</b> <b>service,</b> <b>web</b> <b>service</b> discovery, <b>web</b> <b>service</b> security, the solution to <b>web</b> <b>services</b> in the P 2 P (Peer-to-Peer) computing environment, and the grid service, etc. This paper also presents a summary of the current art of the state of thes...|$|R
40|$|Abstract Despite all {{standardization}} {{efforts in}} the <b>Web</b> <b>service</b> area, several different incompatible <b>Web</b> <b>service</b> registry implementations exist. The initial focus of these implementations was geared towards working with a centralized Universal Business Registry (UBR). However, these centralized approaches tend to be bottlenecks regarding performance and fault tolerance. A proposed solution is the replication of registry information among multiple distributed <b>Web</b> <b>service</b> registries. In addition, the creation of specialized <b>Web</b> <b>service</b> registries leads to {{a large number of}} different <b>Web</b> <b>service</b> registries. This leads to a situation where the search for a particular <b>Web</b> <b>service</b> becomes a very complex task. Besides, <b>Web</b> <b>service</b> provisioning includes a considerable administrative overhead when dealing with transient <b>Web</b> <b>services.</b> Transient <b>Web</b> <b>services</b> exist only for a limited lifetime and in a certain context. In this paper, we propose the VISR (View based Integration of <b>Web</b> <b>Service</b> Registries) peer to peer architecture for the transparent integration of multiple <b>Web</b> <b>service</b> registries and transient <b>Web</b> <b>service</b> providers. This work focuses on the integration concept of multiple <b>Web</b> <b>service</b> registries an...|$|R
40|$|Abstract â€” Nowadays <b>web</b> <b>services</b> play an {{important}} role in pervasive computing. <b>Web</b> <b>services</b> are loosely coupled, interoperable and standard based software entities. Semantic <b>web</b> <b>services</b> are keen in providing dynamism and automation to the existing <b>web</b> <b>services</b> environment. Discovering most suitable <b>web</b> <b>service</b> for a given domain is crucial and time boundary matters. Traditional <b>web</b> <b>service</b> discovery methods were keyword based where users needed to select desired <b>web</b> <b>service</b> manually. Semantic <b>web</b> <b>services</b> are automated services where sites exchange information dynamically based on demand and user does not have any role in selecting a particular <b>web</b> <b>service.</b> In this paper, we present an overview of different existing semantic <b>web</b> <b>service</b> discovery methods. We also summarize, in nutshell, their key features and limitations in a tabulated form...|$|R
40|$|Abstract. <b>Web</b> <b>Service</b> Composition creates new {{composite}} <b>Web</b> <b>Services</b> {{from existing}} <b>Web</b> <b>Services</b> which embodies the added values of <b>Web</b> <b>Service</b> technology {{and is a}} key technology to solve cross-organizational business process integrations. We do a survey on formal methods for <b>Web</b> <b>Service</b> Composition in the following way. Through analyses of <b>Web</b> <b>Service</b> Composition, we establish a reference model called RM-WSComposition to capture elements of <b>Web</b> <b>Service</b> Composition. Based on the RM-WSComposition, issues on formalization for <b>Web</b> <b>Service</b> Composition are pointed out and state-of-the-art on formal methods for <b>Web</b> <b>Service</b> Composition is introduced. Finally, we point out the trends on this topic. For convenience, we use an example called BuyingBooks to illustrate the concepts and mechanisms in <b>Web</b> <b>Service</b> Composition...|$|R
40|$|Abstractâ€”It {{has been}} {{recognized}} that due to the autonomy and heterogeneity, of <b>Web</b> <b>services</b> and the <b>Web</b> itself, new approaches should be developed to describe and advertise <b>Web</b> <b>services.</b> The most notable approaches rely on the description of <b>Web</b> <b>services</b> using semantics. This new breed of <b>Web</b> <b>services,</b> termed semantic <b>Web</b> <b>services,</b> will enable the automatic annotation, advertisement, discovery, selection, composition, and execution of interorganization business logic, making the Internet become a common global platform where organizations and individuals {{communicate with each other}} to carry out various commercial activities and to provide value-added services. This paper deals with two of the hottest R&D and technology areas currently associated with the <b>Web</b> â€” <b>Web</b> <b>services</b> and the semantic Web. It describes how semantic <b>Web</b> <b>services</b> extend <b>Web</b> <b>services</b> as the semantic Web improves the current Web, and presents three different conceptual approaches to deploying semantic <b>Web</b> <b>services,</b> namely, WSDL-S, OWL-S, an...|$|R
40|$|In <b>Web</b> <b>service</b> based systems, new {{value-added}} <b>Web</b> <b>services</b> can {{be constructed}} by integrating existing <b>Web</b> <b>services.</b> A <b>Web</b> <b>service</b> may have many implementations, which are functionally identical, but have different Quality of Service (QoS) attributes, such as response time, price, reputation, reliability, availability and so on. Thus, a significant research problem in <b>Web</b> <b>service</b> composition is how to select an implementation {{for each of the}} component <b>Web</b> <b>services</b> so that the overall QoS of the composite <b>Web</b> <b>service</b> is optimal. This is so called QoS-aware <b>Web</b> <b>service</b> composition problem. In some composite <b>Web</b> <b>services</b> there are some dependencies and conflicts between the <b>Web</b> <b>service</b> implementations. However, existing approaches cannot handle the constraints. This paper tackles the QoS-aware <b>Web</b> <b>service</b> composition problem with inter service dependencies and conflicts using a penalty-based genetic algorithm (GA). Experimental results demonstrate the effectiveness and the scalability of the penalty-based GA...|$|R
40|$|Abstract: This paper {{discusses}} the concepts and operations {{related to the}} specification and management of a community of <b>Web</b> <b>services,</b> respectively. <b>Web</b> <b>services</b> offering the same functionality are gathered into one community, independently of their origins. The community is led by a master component, which is responsible among others for attracting new <b>Web</b> <b>services</b> to the community, retaining existing <b>Web</b> <b>services</b> in the community, and identifying the <b>Web</b> <b>services</b> {{in the community that}} will participate in composite <b>Web</b> <b>services.</b> The identification of these <b>Web</b> <b>services</b> is based on the contract-net protocol. ...|$|R
40|$|A <b>Web</b> <b>service</b> is a {{collection}} of open protocols and standards for exchanging data between applications and system. <b>Web</b> <b>services</b> are platform independent and in todayâ€™s internet, <b>web</b> <b>services</b> play a vital role, single service is not sufficient to respond to userâ€™s goal. To achieve the specific goal of the user, we need to combine one or more <b>web</b> <b>services</b> through the <b>web</b> <b>service</b> composition technique. Now a dayâ€™s tools and environment that facilitates the composition of atomic <b>web</b> <b>services</b> into more complex web process is required. Here, to orchestrate the <b>web</b> <b>service,</b> first atomic <b>web</b> <b>service</b> among group of services is selected that must fulfil the userâ€™s requirement, transactional and Quality of Service (QoS) characteristics. Traditionally QoS based <b>web</b> <b>service</b> composition does not consider the transactional constraints during orchestration process. Therefore this paper deals with the issue of selecting and composing <b>web</b> <b>services</b> using user agent and <b>web</b> <b>services</b> agent not only according to their user requirement but also to their transactional and QoS (TQoS) properties...|$|R
40|$|<b>Web</b> <b>services</b> {{are now a}} key {{ingredient}} of software services offered by software enterprises. Many standardized <b>web</b> <b>services</b> are now available as commodity offerings from <b>web</b> <b>service</b> providers. An important problem for a <b>web</b> <b>service</b> requester is the <b>web</b> <b>service</b> composition problem which involves selecting {{the right mix of}} <b>web</b> <b>service</b> offerings to execute an end-to-end business process. <b>Web</b> <b>service</b> offerings are now available in bundled form as composite <b>web</b> <b>services</b> and more recently, volume discounts are also on offer, {{based on the number of}} executions of <b>web</b> <b>services</b> requested. In this paper, we develop efficient algorithms for the <b>web</b> <b>service</b> composition problem in the presence of composite <b>web</b> <b>service</b> offerings and volume discounts. We model this problem as a combinatorial auction with volume discounts. We first develop efficient polynomial time algorithms when the end-to-end service involves a linear workflow of <b>web</b> <b>services.</b> Next we develop efficient polynomial time algorithms when the end-to-end service involves a tree workflow of <b>web</b> <b>services...</b>|$|R
40|$|In {{recent years}} {{due to the}} rapid {{development}} of ebusiness, there is huge demand for application that based on <b>web</b> <b>services.</b> <b>Web</b> <b>services</b> are chosen {{not only on the}} basis of functionality but also based on non functional properties (NFP) called quality of service (QoS). Among the NFPâ€™s performance is key factor used to distinguish one <b>web</b> <b>service</b> from other having same functionality. Researches related to <b>web</b> <b>service</b> performance are very less compared to other research area in <b>web</b> <b>service</b> like ontology and <b>web</b> <b>service</b> composition. Researches related to <b>web</b> <b>service</b> performance are mainly focusing on comparing available <b>web</b> <b>service</b> implementation platforms. Since performance factors of <b>web</b> <b>service</b> are depending deployment environment, if a <b>web</b> <b>service</b> is deployed in an Infrastructure as a Service (IaaS) cloud which is offering a Distributed, dynamic and a flexible deployment platform, the performance of <b>web</b> <b>service</b> may increase. In this work we arecomparing the performance of <b>web</b> <b>service</b> deployed in an IaaS cloud and traditional deployment model...|$|R
