184|569|Public
5000|$|Develop the Functional Mock-up Interface <b>standardized</b> <b>interface</b> ...|$|E
5000|$|Providing a <b>standardized</b> <b>interface</b> to {{physical}} transmission media, including ...|$|E
50|$|For signals co-simulation can be {{performed}} with a <b>standardized</b> <b>interface</b> called Functional Mock-up Interface.|$|E
30|$|Products {{should have}} <b>standardized</b> <b>interfaces</b> {{capable of being}} {{accessed}} by specialized users.|$|R
5000|$|ESBs {{implement}} <b>standardized</b> <b>interfaces</b> for communication, connectivity, transformation, security, and portability. Supported standards include: ...|$|R
5000|$|Availability {{of tools}} that {{facilitate}} development {{and integration of}} applications at the <b>standardized</b> <b>interfaces</b> ...|$|R
50|$|The Functional Mock-up Interface (or FMI) {{defines a}} <b>standardized</b> <b>interface</b> {{to be used}} in {{computer}} simulations to develop complex cyber-physical systems.|$|E
50|$|A <b>standardized</b> <b>interface</b> for thread {{implementation}} is POSIX Threads (Pthreads), {{which is}} a set of C-function library calls. OS vendors are free to implement the interface as desired, but the application developer should {{be able to use the}} same interface across multiple platforms. Most Unix platforms including Linux support Pthreads. Microsoft Windows has its own set of thread functions in the process.h interface for multithreading, like beginthread. Java provides yet another <b>standardized</b> <b>interface</b> over the host operating system using the Java concurrency library java.util.concurrent.|$|E
50|$|Plug-and-fight system {{elements}} connect {{to an open}} wired or wireless communication network through a <b>standardized</b> <b>interface,</b> and {{have the ability to}} interact with other {{system elements}} on that network to accomplish specific combat objectives. To maximize product applicability, and to ensure the general acceptance of system developers, any plug-and-fight <b>standardized</b> <b>interface</b> should be based on protocols and standards that are widely recognized, well defined, strongly controlled, and non-proprietary. Modern examples include Ethernet, IP, TCP, CORBA, and any specific message structure that can be freely disseminated and used without licensing.|$|E
5000|$|Marshalling {{cabinets}} {{to adapt}} and <b>standardize</b> <b>interface</b> connections between the field instruments and the Triconex system cabinets.|$|R
50|$|A {{reconfigurable}} {{system that}} links {{a series of}} elemental hardware and software components with <b>standardized</b> <b>interfaces</b> to generate signals or make measurements using numeric processing techniques.|$|R
40|$|The {{synthesis}} of avionics software depends critically on components that import and export <b>standardized</b> <b>interfaces.</b> For reasons of practicality and performance, components {{must be allowed}} to export operations that only they understand. Thus, the concept of <b>standardized</b> <b>interfaces</b> seems to be at odds with the need for components to export nonstandard operations. In this paper, we show how this apparent conflict has been resolved in four implemented software system generators. We also present a model that explains how the general ideas embodied in these generators apply to ADAGE...|$|R
50|$|This {{style of}} system {{improves}} human-computer interaction (HCI) by emulating real-world interactions and providing better {{ease of use}} for non-technical people. Users can carry skill at a <b>standardized</b> <b>interface</b> from one application to another.|$|E
50|$|About {{two dozen}} F-16As of the Royal Netherlands Air Force (RNLAF) were {{supplied}} with indigenous Oude Delft Orpheus low-altitude tactical reconnaissance pods transferred from its retiring RF-104G. Designated F-16A(R), {{the first example}} flew on 27 January 1983, and they entered service with the RNLAF's 306 Squadron in October 1984. The aircraft were common with the regular F-16s. However they were equipped with an extra panel in the cockpit to control the center line mounted pod. Under the MLU program a more <b>standardized</b> <b>interface</b> was introduced so every aircraft {{could be used to}} operate the Orpheus pod or any other pod with the <b>standardized</b> <b>interface.</b>|$|E
5000|$|The [...] "System Card" [...] {{contains}} the BIOS program used to boot CD media and provides functions for software to access CD hardware through a <b>standardized</b> <b>interface.</b> Later System Cards had extra RAM and updates to the BIOS.|$|E
50|$|When many {{countries}} begin {{to research and}} develop speech translation, {{it will be necessary}} to <b>standardize</b> <b>interfaces</b> and data formats to ensure that the systems are mutually compatible. International joint research is being fostered by speech translation consortiums (e.g. the C-STAR international consortium for joint research of speech translation and A-STAR for the Asia-Pacific region). They were founded as “international joint-research organizations to design formats of bilingual corpora that are essential to advance the research and development of this technology (...) and to <b>standardize</b> <b>interfaces</b> and data formats to connect speech translation module internationally”.|$|R
50|$|Existing <b>standardized</b> <b>interfaces</b> {{for reading}} data are built into several mobile devices, e.g., to get {{position}} data from GPS equipment (NMEA) {{or to get}} deceleration information from airbag units.|$|R
30|$|In this context, we can {{identify}} three major aspects that involve database and Web technologies, and that are crucial for satisfying the new information access requirements of users: (i) {{a large number of}} heterogeneous data sources accessible via <b>standardized</b> <b>interfaces,</b> which we refer to as data services (e.g., Facebook, Twitter); (ii) computational resources supported by various platforms that are also publicly available through <b>standardized</b> <b>interfaces,</b> which we call computation services (e.g., hash Amazon E 3 C service); (iii) mobile devices that can both generate data and be used to process and display data on behalf of the user.|$|R
50|$|Reality Lab was a 3D {{computer}} graphics API created by RenderMorphics {{to provide a}} <b>standardized</b> <b>interface</b> for writing games. It {{was one of the}} main contenders in the realtime 3D middleware marketplace at the time, alongside Criterion Software's RenderWare and Argonaut Software's BRender.|$|E
50|$|Network UPS Tools (NUT) is a {{suite of}} {{software}} component designed to monitor power devices, such as uninterruptible power supplies, power distribution units, solar controllers and servers power supply units. Many brands and models are supported and exposed via a network protocol and <b>standardized</b> <b>interface.</b>|$|E
5000|$|Device {{drivers are}} also libraries, but they {{implement}} a <b>standardized</b> <b>interface.</b> Applications do not usually call devices directly as libraries, but use the exec.library I/O functions to indirectly access them. Like libraries, devices are either files on disk (with the [...] "" [...] extension), or {{stored in the}} Kickstart ROM.|$|E
40|$|Web {{services}} are increasingly gaining acceptance {{as a framework}} for facilitating application-to-application interactions within and across enterprises. They provide abstractions and technologies for exposing enterprise applications as services and make them accessible programmatically through <b>standardized</b> <b>interfaces...</b>|$|R
5000|$|Quality {{and level}} of detail - {{sufficient}} to permit {{the development of a}} variety of competing implementations of interoperable products or services. <b>Standardized</b> <b>interfaces</b> are not hidden, or controlled other than by the SDO promulgating the standard.|$|R
40|$|Prediction of {{train running}} and IT support of {{conflict}} resolution decision for an {{efficient use of}} the existing railway infrastructure is needed. To meet these requirements <b>standardized</b> <b>interfaces</b> between infrastructure managers and railway undertakings and infrastructure description are indispensable...|$|R
50|$|Femtocells - The GAN {{standard}} is currently {{used to provide}} a secure, managed, <b>standardized</b> <b>interface</b> from a femtocell to the mobile core network. Recently Kineto, NEC and Motorola issued a joint proposal to the 3GPP work group studying femtocells (also known as ‘Home Node B's or HNB) to propose GAN {{as the basis for}} that standard.|$|E
5000|$|Using a <b>standardized</b> <b>interface</b> and {{protocol}} allows systems-management software {{based on}} IPMI to manage multiple disparate servers. As a message-based, hardware-level interface specification, IPMI operates {{independently of the}} operating system (OS) to allow administrators to manage a system remotely {{in the absence of}} an operating system or of the system management software. Thus IPMI functions can work in any of three scenarios: ...|$|E
50|$|Not all mobile devices {{provide such}} a <b>{{standard}}ized</b> <b>interface</b> nor does there exist a standard interface for all mobile devices, but all manufacturers have one problem in common. The miniaturizing of device parts opens the question how to automatically test the functionality {{and quality of}} the soldered integrated components. For this problem an industry group, the Joint Test Action Group (JTAG), developed a test technology called boundary scan.|$|E
50|$|To {{implement}} {{all kinds}} of authors and illustrators work including all supporting processes like validation and production of IETD the CSDB used by AIRBUS Defence and Space supports workflow engines and offers <b>standardized</b> <b>interfaces</b> to import and export data.|$|R
50|$|In certain {{computer}} science domains, such as operating systems or embedded systems, the abstractions have slightly different appearances (for instance, OSes {{tend to have}} more <b>standardized</b> <b>interfaces),</b> but the concept of abstraction and encapsulation of complexity are common, and deep.|$|R
40|$|International audienceThe {{so-called}} Internet of Things (IoT) {{presents a}} tremendous opportunity for multitude of users {{to be connected}} to anything, whenever needed, wherever needed, by whoever needs it. Such opportunities, nonetheless, require more advanced and <b>standardized</b> communication <b>interfaces</b> to facilitate interactions between any types of "things" (smart devices, sensors, systems, networks, etc.). Recent standard proposals as the Quantum Lifecycle Management (QLM) messaging standards were developed and are proposed to provide such <b>standardized</b> <b>interfaces</b> for IoT data exchange. These standards make it possible to develop innovative and standardized techniques to address other issues in the IoT such as the management of replicas of a same data between distinct objects in a peer-to-peer, loosely coupled ways. This paper investigates new strategies-based agent models for peer-to-peer data synchronization in the IoT using the <b>standardized</b> <b>interfaces</b> provided by the QLM standards. This enables the development of models not designed domain-, vendor-or application-specific, as is often the case. Our synchronization models are implemented and assessed considering a real home automation platform...|$|R
50|$|UAA {{seeks to}} resolve {{problems}} by putting forth a <b>standardized</b> <b>interface</b> which audio devices can follow, ensuring that the device's capabilities will be recognized and used effectively by Windows, {{without the need for}} additional drivers or custom control panels. It also provides a reasonable assurance that an audio device will still be able to work many years down the road, without requiring vendor-supplied drivers for a newer version of Windows.|$|E
50|$|Systems {{based on}} {{removable}} smartcards do facilitate {{the implementation of}} renewable security, where compromised systems can be repaired by sending new and redesigned cards to legitimate subscribers, but they also make the task of replacing smartcards with tampered cards or inserting devices between card and receiver easier for pirates. In some European systems, the conditional-access module (CAM) {{which serves as a}} <b>standardized</b> <b>interface</b> between smartcard and DVB receiver has also been targeted for tampering or replaced by third-party hardware.|$|E
5000|$|... oneM2M {{standard}} {{employs a}} simple horizontal, platform architecture that fits within a three layer model comprising applications, services and networks. In {{the first of}} these layers, Application Entities (AEs) reside within individual device and sensor applications. They provide a <b>standardized</b> <b>interface</b> to manage and interact with applications. Common Services Entities (CSEs) play a similar role in the services layer which resides between the applications layer and the in the network layer. The network layer ensures that devices and sensors and applications are able to function in a network-agnostic manner.|$|E
50|$|The MEADS plug-and-fight {{capability}} enables {{command and}} control over other air and missile defense system elements through open, non-proprietary <b>standardized</b> <b>interfaces.</b> MEADS implements a unique ability to work with secondary missile systems if selected, and to evolve as other capabilities are developed.|$|R
50|$|SimulationX {{supports}} {{the creation and}} import of Functional Mock-up Units definded by the Functional Mock-up Interface standard (development started by the MODELISAR project). <b>Standardized</b> <b>interfaces</b> facilitate the platform-independent exchange of simulation models and increase the flexibility in the connection of external simulation tools and models.|$|R
40|$|With {{a variety}} of {{reliable}} monitoring data accessible through <b>standardized</b> <b>interfaces,</b> the possibility of automating actions under well defined conditions correlating multiple data sources has become feasible. In this contribution we discuss also about the automated exclusion of degraded resources and their automated recovery in various activities. ...|$|R
