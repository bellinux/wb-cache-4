71|40|Public
5|$|DisplayPort uses a <b>self-clocking,</b> micro-packet-based {{protocol}} {{that allows}} for a variable number of differential LVDS lanes as well as flexible allocation of bandwidth between audio and video, and allows encapsulating multi-channel compressed audio formats in the audio stream. DisplayPort 1.2 supports multiple audio/video streams, variable refresh rate (FreeSync), Display Stream Compression (DSC), and Dual-mode LVDS/TDMS transmitters compatible with HDMI 1.2 or 1.4. Revision 1.3 increases overall transmission bandwidth to 32.4Gbit/s with the new HBR3 mode featuring 8.1Gbit/s per lane; it requires Dual-mode with mandatory HDMI 2.0 compatibility and HDCP 2.2. Revision 1.4 adds support BT.2020 color space and HDR10 extensions from CTA-861.3, including static and dynamic metadata.|$|E
25|$|Early Ethernet {{standards}} used Manchester coding {{so that the}} signal was <b>self-clocking</b> and not adversely affected by high-pass filters.|$|E
25|$|Uncompressed digital {{component}} signals are transmitted. Data is encoded in NRZI format, and a linear feedback shift register {{is used to}} scramble the data to reduce the likelihood that long strings of zeroes or ones will be present on the interface. The interface is self-synchronizing and <b>self-clocking.</b> Framing is done by detection of a special synchronization pattern, which appears on the (unscrambled) serial digital signal to be a sequence of ten ones followed by twenty zeroes (twenty ones followed by forty zeroes in HD); this bit pattern is not legal anywhere else within the data payload.|$|E
5000|$|Fewer lanes with {{embedded}} <b>self-clock,</b> reduced EMI {{with data}} scrambling and spread spectrum mode ...|$|R
5000|$|The <b>self-clocked</b> scheme - {{each cell}} has an {{independent}} timer, initialised to a random period and phase. When the period has expired, the cell is updated and the timer reset. Updating is autonomous and proceeds {{at different rates}} for different cells.|$|R
40|$|This paper {{presents}} {{a set of}} simulation studies for comparing the performance of several flow-based scheduling algorithms, namely Weighted Fair Queuing, <b>Self-Clock</b> Fair Queuing, Start-Time Fair Queuing, Virtual Clock, Worst-case Fair Weighted Fair Queuing and Worstcase Fair Weighted Fair Queuing-plus. These algorithms are being considered for IP networks supporting Quality of Service (QoS). I...|$|R
50|$|Most line {{codes are}} {{designed}} to be <b>self-clocking.</b>|$|E
50|$|Early Ethernet {{standards}} used Manchester coding {{so that the}} signal was <b>self-clocking</b> and not adversely affected by high-pass filters.|$|E
50|$|An {{alternative}} to double or quad pumping {{is to make}} the link <b>self-clocking.</b> This tactic was chosen by InfiniBand and PCI Express.|$|E
40|$|We propose and {{successfully}} demonstrate a k-space linear and <b>self-clocked</b> wavelength scanning fiber laser source based on recirculating frequency shifting (RFS). The RFS is {{realized with a}} high speed electro-optic dual parallel Mach-Zehnder modulator operating {{at the state of}} carrier suppressed single sideband modulation. A gated short pulse is injected into an amplified RFS loop to generate the wavelength scanning pulse train. We find that the accumulation of in-band amplified spontaneous emission (ASE) noise over multiple scanning periods will saturate the erbium-doped fiber amplifier and impede the amplification to the pulse signal in the RFS loop. To overcome the degradation of temporal signal due to the accumulation of ASE noise over multiple scanning periods, we insert a modulated optical switch into the RFS loop to completely attenuate the in-band ASE noise {{at the end of each}} scanning period. The signal to noise ratio of the temporal pulsed signal is greatly enhanced. K-space linear and <b>self-clocked</b> wavelength scanning fiber laser sources in 6. 1 nm/ 7. 2 nm scanning range with 20 GHz/ 30 GHz frequency shifting are successfully demonstrated. Department of Electronic and Information Engineerin...|$|R
40|$|We {{simulate}} {{and demonstrate}} a single-beam intensity-thresholding all-optical switch by modifying a terahertz optical asymmetric demultiplexer (TOAD) with an uneven power splitting in the loop. An optimized {{set of parameters}} used in the demonstration is found from the simulations considering the saturation of the semiconductor optical amplifier. With 8. 7 -dB input clock-to-data ratio, the clock-to-data ratio can be suppressed down to - 7. 4 dB at the reflected (data) port. An amplified output with 3. 0 dB clock-to-data ratio improvement was achieved in the transmitted (clock) port at a low switching energy of 150 fJ. The device {{can be used for}} clock recovery in <b>self-clocked</b> optical networks...|$|R
40|$|Clock {{and data}} signals are {{separated}} from a 100 Gb/s <b>self-clocked</b> orthogonal time division multiplexing (OTDM) system using an ultrafast all-optical intensity-dependent switch. The recovered clock signal is 5 {{times larger than the}} input clock signal. This recovered clock signal has sufficient intensity to control a terahertz optical asymmetric demultiplexer (TOAD). The recovered clock can be used without additional amplification as the control signal, and the reflected signal as the data input to a TOAD. The processing is preformed at a relatively low energy of less than 200 fJ for both the clock extraction and demultiplexing. This all-optical scheme may be useful for emerging ultrafast OTDM networks...|$|R
50|$|Its {{drawbacks}} {{are that}} it is not <b>self-clocking</b> and it has a significant DC component, which can be halved by using return-to-zero, where the signal returns to zero {{in the middle of the}} bit period. With a 50% duty cycle each rectangular pulse is only at a positive voltage for half of the bit period. This is ideal if one symbol is sent much more often than the other and power considerations are necessary, and also makes the signal <b>self-clocking.</b>|$|E
5000|$|Amplitude {{modulation}} - modulating {{a signal}} [...] {{by changing the}} amplitude of a carrier wave, as in:is <b>self-clocking,</b> as the zero crossings serve as a clock pulse.|$|E
50|$|That said, {{systems can}} be {{synchronized}} (at an engineering approximation), using technologies like GPS. The GPS satellites must account {{for the effects of}} gravitation and other relativistic factors in their circuitry. See: <b>Self-clocking</b> signal.|$|E
40|$|We {{consider}} {{the problem of}} a packet multiplexor that receives packets from multiple input flows, then forwards them to a single output channel. The multiplexor ensures a predefined forwarding rate for each flow. This is achieved as follows. The multiplexor assigns a timestamp to each received packet. When the channel becomes idle, the multiplexor forwards the packet with the smallest timestamp. In this paper, we show that the multiplexor efficiency can be improved without sacrificing packet delay by maintaining one timestamp per flow rather than one timestamp per packet. We show that this approach improves the computational efficiency of two known multiplexing methods, namely, virtual clock and <b>self-clock.</b> 1...|$|R
50|$|The DisplayPort {{connector}} {{can have}} one, two, or four differential data pairs (lanes) in a Main Link, {{each with a}} raw bit rate of 1.62 (reduced bit rate), 2.7 (high bit rate), 5.4 (HBR2), or 8.1Gbit/s (HBR3) per lane (6.48, 10.8, 21.6, or 32.4Gbit/s for a full 4-lane link) with <b>self-clock</b> running at 162, 270, 540, or 810MHz. The effective data rates after decoding are 1.296, 2.16, 4.32, or 6.486Gbit/s per lane (5.184, 8.64, 17.28, or 25.92 Gbit/s for a full 4-lane link), or 80% of the total, since data is 8b/10b encoded so each eight bits of information are encoded with a ten-bit symbol.|$|R
30|$|In [36], it was {{proposed}} a distributed algorithm {{intended to provide}} fair scheduling in a WLAN, referred as DFS (Distributed Fair Scheduling). The DFS protocol behaves quite similarly to IEEE 802.11 DCF, except in what concerns the backoff interval initially calculated, which is chosen proportional to the finish tag of the packet to be transmitted. The finish tag is calculated similarly to the SCFQ (<b>Self-Clocked</b> Fair Queueing) algorithm [37]. In [38], the authors modify the distributed SCFQ algorithm combined with the prioritization schemes proposed in the EDCA mechanism and specify the RT-FCR (real-time fast collision resolution), where the priorities are implemented by assigning different backoff ranges based {{on the type of}} traffic.|$|R
50|$|Such <b>self-clocking</b> signals can be decoded {{correctly}} into {{a stream}} of bits without bit slip.To further decode that stream of bits and decide which bit is the first bit of a byte, often a self-synchronizing code is used.|$|E
50|$|ARINC 429 is a data {{transfer}} standard for aircraft avionics. It uses a <b>self-clocking,</b> self-synchronizing data bus protocol (Tx and Rx are on separate ports). The physical connection wires are twisted pairs carrying balanced differential signaling. Data words are 32 bits {{in length and}} most messages consist of a single data word. Messages are transmitted at either 12.5 or 100 kbit/s to other system elements that are monitoring the bus messages. The transmitter constantly transmits either 32-bit data words or the NULL state. A single wire pair is limited to one transmitter {{and no more than}} 20 receivers. The protocol allows for <b>self-clocking</b> at the receiver end, thus eliminating the need to transmit clocking data. ARINC 429 is an alternative to MIL-STD-1553.|$|E
50|$|One way to {{maintain}} timing between transmitting and receiving devices is to employ an asynchronous protocol such as start-stop. Alternatively, bit slip can be prevented by using a <b>self-clocking</b> signal (such as a signal modulated using OQPSK) or using a line coding such as Manchester encoding.|$|E
40|$|Abstract — IEEE 802. 11 WLAN {{has been}} widely {{accepted}} throughout the world. However, it has large overhead due to idle backoff slots and frequent collisions depending {{on the number of}} nodes. In this paper, we propose a novel medium access control scheme, Scheduling-based Coordination Function (SCF). SCF polls the next station to be serviced by piggybacking. The selection of the next station is based on <b>Self-Clocked</b> Fair Queueing (SCFQ) scheduling in a distributed manner. Due to polling, SCF does not suffer from collisions and is efficient owing to the SCFQ scheme. SCF improves the system throughput up to 63. 2 % compared to IEEE 802. 11 DCF. Comprehensive simulation is performed to compare SCF with DCF, PCF, and Fast Collision Resolution (FCR) ...|$|R
40|$|We {{present an}} {{interdomain}} routing protocol for heterogeneous networks employing different queuing service disciplines. Our routing protocol finds optimal interdomain paths with maximum reliability while satisfying the end-to-end jitter and bandwidth constraints in networks employing heterogeneous queuing service disciplines. The quality-of-service (QoS) metrics are represented as functions of link bandwidth, node buffers and the queuing service disciplines {{employed in the}} routers along the path. Our scheme allows smart tuning of buffer-space and bandwidth during the routing process to adjust the QoS of the interdomain path. We formulate and solve the bandwidth and buffer allocation problem for a path over heterogeneous networks consisting of different queuing services disciplines such as generalized processor sharing (GPS), packet by packet generalized processor sharing (PGPS) and <b>self-clocked</b> fair queuing (SCFQ) ...|$|R
30|$|The rest of {{this paper}} is {{organized}} as follows. In Section 2, we introduce the operation of fluid fair queueing (FFQ) and packet fair queueing (PFQ) in wireline networks and describe the problem that FFQ and PFQ have in wireless networks. Also, we describe some wireless fair queue as follows: idealized wireless fair queueing (IWFQ), wireless packet scheduling (WPS), channel condition-independent fair queueing (CIF-Q), server-based fairness approach (SBFA), wireless general processor sharing (WGPS), proportional fairness scheme (PFS), and modified largest weighted delay first (M-LWDF). In Section 3, we present our basic idea and channel condition <b>self-clocked</b> packet scheduling (CSCPS). In Section 4, the proposed scheme is compared with CIF-Q and SBFA through simulation to show the performance improvement. In Section 5, we conclude our contributions and point out future works.|$|R
50|$|However, long {{sequences}} of zeroes remain an issue. Long {{sequences of}} zero bits result in no transitions {{and a loss}} of synchronization. Where frequent transitions are a requirement, a <b>self-clocking</b> encoding such as return-to-zero or some other more complicated line code may be more appropriate, though they introduce significant overhead.|$|E
50|$|A {{connection}} has two channels, one per direction. Each channel {{consists of}} two wires carrying strobe and data. The strobe line changes state whenever the data line starts a new bit with the same value as the previous bit. This scheme makes the links <b>self-clocking,</b> able to adapt automatically to different speeds.|$|E
50|$|Anisochronous <b>self-clocking</b> signals do not combine clock {{cycles and}} data {{transfer}} into one continuous signal. Instead, {{the transmission of}} clock cycles and data transmission is modulated. Below is an example signal used in asynchronous serial communication, where it is {{made clear that the}} information about the clock speed is transmitted in a different timeframe than the actual data.|$|E
40|$|Abstract—We {{present an}} {{interdomain}} routing protocol for heterogeneous networks employing different queuing service disciplines. Our routing protocol finds optimal interdomain paths with maximum reliability while satisfying the end-to-end jitter and bandwidth constraints in networks employing heterogeneous queuing service disciplines. The quality-of-service (QoS) metrics are represented as functions of link bandwidth, node buffers and the queuing service disciplines {{employed in the}} routers along the path. Our scheme allows smart tuning of buffer-space and bandwidth during the routing process to adjust the QoS of the interdomain path. We formulate and solve the bandwidth and buffer allocation problem for a path over heterogeneous networks consisting of different queuing services disciplines such as generalized processor sharing (GPS), packet by packet generalized processor sharing (PGPS) and <b>self-clocked</b> fair queuing (SCFQ). Keywords—Quality-of-service (QoS), resource allocation, inter-domain routing, queuing service disciplines. I...|$|R
40|$|Deficit {{round-robin}} is {{a packet}} scheduling algorithm devised to provide fair queueing {{in the presence}} of variable length packets (see Shreedhar, M. and Varghese, G., IEEE Trans. on Networking, vol. 4, p. 375 - 85, 1996). DRR can be implemented at O(1) complexity provided that each flow is allowed to transmit at least one maximum size packet on each round; however, under this constraint, DRR may exhibit high latency and poor fairness. We first generalize previous results known for DRR, related to its latency and fairness. We then introduce a novel DRR implementation technique, called active lists queue method (Aliquem), which allows the above constraint to be relaxed while preserving O(1) complexity, thus achieving better latency and fairness that are comparable to those of more complex algorithms, such as <b>self-clocked</b> fair queueing...|$|R
40|$|This paper {{addresses}} {{the development of}} a micropower 176 x 144 CMOS active pixel image sensor that dissipates one-to-two orders of magnitude less power than current state of the art CMOS image sensors. The chip operates from a 1. 5 V voltage source and the power consumption measured for the chip running from an internal 25. 2 MHz clock yielding 30 frames per second is about 550 μW. This amount enables the sensor to be run from a watch battery. It is believed that this chip is the world’s lowest power image sensor and the first image sensor designed for a watch battery operation. The camera-on-a-chip operates as a <b>self-clocked</b> 3 -pin sensor (GND, VDD (1. 2 - 1. 7 V), and DATAOUT). The die occupies 4 mm 2 of silicon...|$|R
5000|$|In {{telecommunications}} and electronics, a <b>self-clocking</b> signal {{is one that}} can be decoded without the need for a separate clock signal or other source of synchronization. This is usually done by including embedded synchronization information within the signal, and adding constraints on the coding of the data payload such that false synchronization can easily be detected.|$|E
5000|$|If the {{embedded}} {{clock signal}} is isochronous, it gets sent simultaneously with the data. Below {{is an example}} signal, in this case using the Manchester code <b>self-clocking</b> signal. The data and clock cycles {{can be thought of}} as [...] "adding up" [...] to a combination, where both the clock cycle and the data can be retrieved from the transmitted signal.|$|E
5000|$|Return-to-zero (RZ or RTZ) {{describes}} a line code used in telecommunications signals {{in which the}} signal drops (returns) to zero between each pulse. This takes place even if a number of consecutive 0s or 1s occur in the signal. The signal is <b>self-clocking.</b> This means that a separate clock {{does not need to}} be sent alongside the signal, but suffers from using twice the bandwidth to achieve the same data-rate as compared to non-return-to-zero format.|$|E
40|$|A n ef ic ient fa i r {{queueing}} scheme {{which is}} feasi-ble f o r broadband implementation i s proposed and i ts performance i s analyzed. W e define fairness in a self-contained manner, {{eliminating the need}} f o r the hypo-thetical fluid-flow reference sys tem {{used in the present}} state of art and thereby removing the associated com-putational complexity. The scheme i s based on the adoption of an internally generated virtual time as the index of work progress, hence the name <b>self-clocked</b> fair queueing. W e prove that the scheme possesses the desired fairness property and i s nearly optimal, {{in the sense that the}} maximum permissible disparity among the normalized services offered to the backlogged ses-sions is newer more than two t imes the corresponding figure in any packet-based queueing system. ...|$|R
40|$|Web-sites, {{especially}} E-commerce ones, {{are often}} faced with incoming load of requests that exceeds their capacity, he, they {{are subjected to}} overload. Most existing servers show severe throughput degradation at high overload. Overload control mechanisms are required to prevent such occurrences. In this paper, we present a proxy-based overload control mechanism, which uses the drop in throughput relative to arrival rate {{as an indicator of}} overload. On overload detection, a <b>self-clocked</b> admission control is activated, which admits a new request only when a successful reply is observed to be leaving the server system. Thus, the mechanism is self-tuned, and requires no knowledge of the system. We validate our approach on an experimental testbed consisting of a two-tier Web application, and find that even at very high overload, the server operates at its maximum capacity while keeping response times within acceptable bounds...|$|R
40|$|ATM network {{performance}} hinges on user sessions, or virtual connections, {{adhering to the}} traffic contracts established by the admission control policy. This paper considers efficient mechanisms for enforcing these contracts by shaping the incoming cell streams. While shaping effectively accommodates variation in a connection's traffic flow, this smoothing function introduces implementation complexity, since the shaper must buffer violating cells and schedule them for later transmission. Conflicts arise when multiple cells, from different connections, become eligible for transmission at the same time. This paper presents a fair leaky-bucket (FLB) shaper that minimizes the traffic distortions caused by these cell collisions. A theorem shows that FLB shaping, based on weighted fair queueing, closely preserves connection leaky-bucket parameters and bounds cell shaping delay. The paper also presents an efficient implementation of <b>self-clocked</b> fair queueing, which reduces the complexity of [...] ...|$|R
