23|158|Public
2500|$|Game-Maker {{involves}} no scripting language; all design tools use a mouse-driven 320x200 VGA display, with a <b>shared</b> <b>logic</b> {{and visual}} theme. Users draw background tiles pixel by pixel in an enlarged window, and can pull tiles from the palette to arrange in a [...] "sandbox" [...] area. A further menu {{allows users to}} set physical properties—solidity, gravity, animation, various counter values—for each block. The user draws maps by pulling blocks from the palette and painting with them using simple paintbrush, line, shape, and fill tools.|$|E
2500|$|Authority {{and eternal}} truths play an {{important}} role in Hinduism. Religious traditions and truths are believed to be contained in its sacred texts, which are accessed and taught by sages, gurus, saints or avatars. But there is also a strong tradition of the questioning of authority, internal debate and challenging of religious texts in Hinduism. The Hindus believe that this deepens the understanding of the eternal truths and further develops the tradition. Authority [...] "was mediated through [...] an intellectual culture that tended to develop ideas collaboratively, and according to the <b>shared</b> <b>logic</b> of natural reason." [...] Narratives in the Upanishads present characters questioning persons of authority. The Kena Upanishad repeatedly asks kena, 'by what' power something is the case. The Katha Upanishad and Bhagavad Gita present narratives where the student criticizes the teacher's inferior answers. In the Shiva Purana, Shiva questions Vishnu and Brahma. Doubt plays a repeated role in the Mahabharata. Jayadeva's Gita Govinda presents criticism via the character of Radha.|$|E
5000|$|The Manchester carry {{chain is}} a {{variation}} of the carry-lookahead adder [...] that uses <b>shared</b> <b>logic</b> to lower the transistor count. As can be seen above in the implementation section, the logic for generating each carry contains all of the logic used to generate the previous carries. A Manchester carry chain generates the intermediate carries by tapping off nodes in the gate that calculates the most significant carry value. Not all logic families have these internal nodes however, CMOS being a major example. Dynamic logic can support <b>shared</b> <b>logic,</b> as can transmission gate logic. One of the major downsides of the Manchester carry chain is that the capacitive load of all of these outputs, together with the resistance of the transistors causes the propagation delay to increase much more quickly than a regular carry lookahead. A Manchester-carry-chain section generally won't exceed 4 bits.|$|E
50|$|The federal {{center and}} municipalities’ {{abilities}} {{to collaborate with}} each other have facilitated Brazil’s capability to build an effective welfare policy for the poor. The existence of a power <b>sharing</b> <b>logic</b> in Brazil enabled a widespread means tested social program that was able to achieve success nationwide.|$|R
5000|$|Needs {{a service}} layer when <b>sharing</b> domain <b>logic</b> across differing {{consumers}} {{of an object}} model.|$|R
5000|$|The 6200 <b>shares</b> the <b>logic</b> {{board with}} the Power Macintosh 5200. The {{internal}} bus structure {{consisted of three}} buses: ...|$|R
5000|$|Game-Maker {{involves}} no scripting language; all design tools use a mouse-driven 320x200 VGA display, with a <b>shared</b> <b>logic</b> {{and visual}} theme. Users draw background tiles pixel by pixel in an enlarged window, and can pull tiles from the palette to arrange in a [...] "sandbox" [...] area. A further menu {{allows users to}} set physical properties—solidity, gravity, animation, various counter values—for each block. The user draws maps by pulling blocks from the palette and painting with them using simple paintbrush, line, shape, and fill tools.|$|E
5000|$|Authority {{and eternal}} truths play an {{important}} role in Hinduism. Religious traditions and truths are believed to be contained in its sacred texts, which are accessed and taught by sages, gurus, saints or avatars. But there is also a strong tradition of the questioning of authority, internal debate and challenging of religious texts in Hinduism. The Hindus believe that this deepens the understanding of the eternal truths and further develops the tradition. Authority [...] "was mediated through ... an intellectual culture that tended to develop ideas collaboratively, and according to the <b>shared</b> <b>logic</b> of natural reason." [...] Narratives in the Upanishads present characters questioning persons of authority. The Kena Upanishad repeatedly asks kena, 'by what' power something is the case. The Katha Upanishad and Bhagavad Gita present narratives where the student criticizes the teacher's inferior answers. In the Shiva Purana, Shiva questions Vishnu and Brahma. Doubt plays a repeated role in the Mahabharata. Jayadeva's Gita Govinda presents criticism via the character of Radha.|$|E
40|$|There {{exists a}} demand for realizing logical inferences from {{multiple}} concurrent interacting processes under uncertainties. Our aim {{is to provide a}} framework for this challenging problem from the Logic-based Artificial Intelligence approach. We propose an agent architecture which combines Logic Programs with First-order Dynamic Bayesian Networks for establishing the logical inferences under uncertainties. The interactions of the concurrent processes are modeled by a new class of LP, <b>Shared</b> <b>Logic</b> Program, which realizes the process communications by overlapping their Herbrand Bases. Stochastic communications between <b>Shared</b> <b>Logic</b> Programs are also defined by First-order Dynamic Bayesian Networks. The proposed approach could provide a basic framework for defining logical inference...|$|E
40|$|By {{examining}} the existing credit management system and financial institutions credit behavior, using "Information choice " model {{to analyze the}} bank's credit information collection and <b>sharing</b> of <b>logic</b> reveals the inter-bank credit information sharing barriers, sharing the effect it brings, produce inter-bank credit information sharing model which constrained the full effect of incentive...|$|R
5000|$|The 6400 <b>shares</b> its <b>logic</b> {{board with}} the Power Macintosh 5400, only without an {{integrated}} monitor. Its new [...] "InstaTower“ case, however, features an integrated subwoofer. The Performa 6360 {{uses the same}} logic board in a Power Macintosh 6200-style desktop case. The 5400/6400 is generally believed to be superior to its 5200/6200 predecessors since it had a 64-bit data path to main memory.|$|R
40|$|Working {{time has}} always been {{considered}} in France to be an area {{of responsibility for the}} State. TheActs on the 35 -hour working week come therefore from a long tradition of State intervention toregulate employment and working conditions. This particular configuration is not found in otherEuropean countries. In this paper is presented the French specificity: a work <b>sharing</b> <b>logic</b> supported by the State. The aimat generating employment through a legal reduction of working time brought the government to drawup an extremely complex set of Acts. These one are not restricted to defining legal work duration;they also advocate reductions in social contributions and give a precise framework to negotiatecollective agreements. A synthesis of the consequences of the 35 -hour Act shows that the effects on employment are limited(creation of 300, 000 jobs), that social relations did not improve and that inequalities amongemployees were accentuatedréduction du temps de travail, intervention de l'État, négociation collective, créationd'emplois, conditions de vie et de travail, partage du travail, semaine de 35 heures...|$|R
40|$|Devise {{different}} DRAM architecture solutions using 3 D-Integration {{technology for}} improved bandwidth {{and evaluate the}} real-time performance in terms of memory efficiency and bandwidth. Proposed architecture We consider a Parallel-Access (PA) method in which each bank of the DRAM has its own command and data interface to the memory controller. This approach is about using the 3 D-Integration technology enabler to make banks into independent memories by removing <b>shared</b> <b>logic</b> meant {{to reduce the number}} of pins. This increases the provided bandwidth...|$|E
40|$|A sturdy Learning Architecture is {{necessary}} to {{lay the foundation for}} effective learning {{in the age of the}} Internet. Complementary technologies must be integrated into what is potentially so pervasive that it could be said to be a Learning Ecosystem. Not only is the technology of this infrastructure impacted by the decision to knit disparate parts into an integrated whole, but Instructional Design methodology is impacted as well. A Learning Ecosystem capitalizes on reusability, on underlying <b>shared</b> <b>logic</b> and taxonomy, and on convergence of learning and Knowledge Management to support a new model where learning and work are seamlessly and inextricably linked. I...|$|E
40|$|We {{employ a}} {{sensemaking}} lens to study economic transactions at the micro level, investigating how social distance affects {{the logic of}} exchange. In transcripts of 87 two-party negotiations, we find that most pairs quickly coordinate on a <b>shared</b> <b>logic</b> of exchange and improvise in accord with its implied rules throughout their interaction. Negotiators turn to three dynamic processes— trust-testing, process clarification, and emotional punctuation—when they have difficulty moving the interaction toward a coherent, mutually agreed upon improvisation. The improvisations {{take the form of}} openness, mutual gain, or haggling, and mediate the effects of social distance on economic outcomes...|$|E
25|$|Since {{the rise}} of {{reconfigurable}} programmable <b>logic</b> devices, <b>sharing</b> of <b>logic</b> designs has been a form of open-source hardware. Instead of the schematics, hardware description language (HDL) code is shared. HDL descriptions are commonly used to set up system-on-a-chip systems either in field-programmable gate arrays (FPGA) or directly in application-specific integrated circuit (ASIC) designs. HDL modules, when distributed, are called semiconductor intellectual property cores, or IP cores.|$|R
50|$|Applications <b>share</b> {{objects and}} <b>logic</b> from the {{repository}} and the repository {{is an active}} participant with the applications as both the custodian of the data and business rule definitions, and the rule enforcer.|$|R
40|$|In [31], I defended {{a minimalist}} account of meaning for logical {{constants}} {{as a way}} to ward off Quine's meaning variance charge against deviant logics. Its key idea was that some deviant propositional <b>logics</b> <b>share</b> with classical <b>logic</b> the operational meanings of all their connectives, as encoded in their sequent calculus operational rules, yet validate different sequents than classical logic - therefore, we can have genuine rivalry between logics without meaning variance. In his [19], Ole Hjortland levelled several objections at this view. The aim {{of this paper is to}} address these criticisms, highlighting at the same time the role played by logical consequence in this version of semantic minimalism...|$|R
40|$|Abstract. In {{this paper}} a compact FPGA {{architecture}} for the AES algorithm with 128 -bit key targeted for low-cost embedded applications is presented. Encryption, decryption and key schedule are all implemented using small resources of only 222 Slices and 3 Block RAMs. This implementation easily fits in a low-cost Xilinx Spartan II XC 2 S 30 FPGA. This implementation can encrypt and decrypt data streams of 150 Mbps, which satisfies {{the needs of}} most embedded applications, including wireless communication. Specific features of Spartan II FPGAs enabling compact logic implementation are explored, and {{a new way of}} implementing MixColumns and InvMixColumns transformations using <b>shared</b> <b>logic</b> resource...|$|E
40|$|SEED is {{an acronym}} for Software Environment to Support the Early Phases in Building Design. The overall {{architecture}} of SEED {{is based on a}} division of the preliminary design process into phases, each of which addresses a specific task. SEED intends to support each phase by an individual support module based on a <b>shared</b> <b>logic</b> and architecture. The modules envisioned for the first SEED prototype support the following phases: architectural programming, schematic layout design, and schematic configuration design. This document presents a requirements analysis of database related issues for the above and anticipated modules. SEED Database Requirements 7 / 19 / 94 Page ii Table of Contents 1 Introduction................................................................ 1 1. 1 Purpose............................................................. 1 1. 2 Scope..... [...] ...|$|E
40|$|At present, {{message passing}} {{is the most}} popular {{programming}} paradigm for asynchronous parallelism. Many "general-purpose" message-passing systems already exist, and many more are being developed. This paper argues that most existing systems are too unstructured to support large-scale applications development, describes some of the criteria a truly general message-passing system must satisfy, and outlines some alternative implementation strategies. 1 Introduction A bewildering variety of parallel programming paradigms have been developed or proposed during the past quarter century, from semaphores and mailboxes to futures, <b>shared</b> <b>logic</b> variables, and concurrent objects [BST 89, Bal 90]. Most of these have grown up in the operating systems and networking communities, and assume that accessing shared variables is inexpensive [Andr 91], or that a reliable, indivisible broadcast mechanism exists [BTK 90]. Neither of these assumptions holds on distributed-memory MIMD computers (multicompu [...] ...|$|E
5000|$|The service-orientation design {{paradigm}} emphasizes service reuse as {{dictated by}} the service reusability design principle. Under this paradigm of a heavily reused services, reliability becomes critical to ensure service longevity. In turn, service reliability depends on the service's operational control of service logic and underlying implementation resources to reduce dependence on external resources over which it {{has little or no}} control such as <b>shared</b> service <b>logic</b> or a <b>shared</b> database, which may not be available when required by the service.|$|R
40|$|This {{research}} work {{will help the}} customer for decision making in share market, based on fuzzy rule based system. Past performance data {{could be used to}} overcome uncertainty, vagueness and imprecision of share market. Six factors which are affecting the share prices are Market Growth, Monson Policy/Political Foreign Investment, Ratio Analysis and Agent Activity are very helpful to take market share price decision. Technical and fundamental approaches are used in parallel to estimate short-term and long-term return and risk. The customer will more secure to take risk at time of <b>share</b> trading, Fuzzy <b>Logic</b> framework is developed to carry out the required analysis for arriving at the governance rating of the firms. Keywords- Market growth, <b>share</b> price, fuzzy <b>logic.</b> I...|$|R
40|$|International audienceA {{significant}} number of cryptographic architectures rely on the efficient and resilient implementation of the Montgomery modular multiplier. One of the most used attacks on cryptographic implementations is based on Differential Power Analysis (DPA) or one of its variants. In this paper, a specially adjusted Latch-less Asynchronous Charge <b>Sharing</b> <b>Logic</b> (LACSL) is developed to inherently defend such architecture against DPA attacks. The proposed logic provides input data independent low-power/energy consumption which is attributed to interleaved charge sharing stages with non-static elements involved in the data path. A 32 -bit LACSL Montgomery Multiplier (case study) is extensively tested through HSPICE simulations and great consistency in power/energy consumption is achieved. The normalized energy deviation and normalized standard deviation are only 0. 048 and 0. 011, respectively. Compared with the original ACSL implementation, besides the impressive energy coherence, 42 % energy saving is demonstrated plus that the leakage power is 3. 5 times smaller. Furthermore, the scalability of the proposed multiplier is explored where 64 -bit, 128 -bit and 256 -bit designs are implemented. Again, great energy consistency is found with the highest deviation being 0. 5 %. The proposed techniques can be easily migrated to other low-power circuits for which accurate power/energy models can be built, independent of the input data profile. Keywords—asynchronous; modular arithmetic; charge sharing logic; side channel attack; input data independent energy circuit...|$|R
40|$|In this paper, {{we present}} a new {{coordination}} model and a small set of programming notations for distributed programming that can be integrated in very different programming languages (imperative, declarative or object oriented). Both together, allow the development of distributed programs in a compositional way, by assembling different independent pieces of (possibly preexisting and heterogeneous) code. This approach is {{in the spirit of}} many other similar proposals as Linda, PCN, CC++, etc., but it allows multiparadigm and multilingual integration and provides a powerful set of concurrent programming techniques, inherited from Concurrent Logic Languages (CLLs), that can be efficiently implemented in distributed systems. The coordination model is based on Logic Channels; these are an evolution of the concept of <b>shared</b> <b>logic</b> variable used in CLLs that, with the same expressive power, can be more efficiently implemented in distributed systems. 1...|$|E
40|$|This paper {{introduces}} the constructive logic specification language SILCS (Specification In Logic of Concurrent Systems). The operational semantics of SILCS encapsulates the computational rule {{required for the}} correct interpretation of `programs' derived from Horn clause characterisations of the behaviour of concurrent systems. SILCS is expressive enough to describe many of the behaviours associated with concurrent systems including concurrency, parallelism, suspension, deadlock and sequentiality. Its logical basis facilitates reasoning about the behaviour of SILCS programs and the language {{is intended to be}} a bridge between first order descriptions of the behaviours of systems and programs written in committed choice concurrent logic programming languages. We also report on the construction of a sequential interpreter for SILCS descriptions. Introduction We take the view that communication in concurrent systems occurs through bindings made by atomic unification to <b>shared</b> <b>logic</b> variab [...] ...|$|E
40|$|We {{describe}} the operational semantics {{of the language}} for modelling logical concurrent systems (LCS). Such systems are characterised by atomic synchronous unification. The model permits the description of both dependant and independent simultaneous actions or sets of atomic events. A semantics is given via labelled transition systems. The notion of equivalence over such systems is defined by strong bisimulation. Also, the notion of answer semantics is defined via LTS. Some toy-example of systems are described. 1 Introduction Elsewhere [2, 4] we have described a methodology based on logic for the description of concurrent systems, where communication in a concurrent systems is viewed as occurring through bindings made by atomic unification to <b>shared</b> <b>logic</b> variables. The behaviour is conceptualised as atomic observations. In [5] we presented a common framework, applicable to both sequential and concurrent systems, in which state transitions can be defined in definite clause logic and co [...] ...|$|E
5000|$|He also founded Visigenic, in 1993, {{the first}} {{application}} server {{with the notion}} of <b>sharing</b> business <b>logic.</b> It was the beginning of three tier architecture and helped pioneer distributed object computing and the concept of the application server based on CORBA. In 1997, Borland acquired Visigenic. After bringing Visigenic public in 1998, Sippl was awarded the Golden Hatrick award for successfully bringing three Silicon Valley companies public. [...] He founded Elastic Intelligence in 1996, to improve connection to SaaS based data. The company's main product is the Connection Cloud, an SQL based Platform as a Service for SaaS data.|$|R
5000|$|MonoCross is a C# [...]NET Model-view-controller (MVC) {{framework}} {{where the}} Model and Controller are shared across platforms and the View is implemented for every specific platform and/or target architecture. It allows {{the development of}} both native and HTML5 web apps that <b>share</b> business <b>logic</b> and data code. The pattern enables cross-platform portability of business logic and data access code, (Model + Controller), while supporting full, native and/or platform-specific presentation (Views). [...] This enables separation of the presentation layer, (View) from the application code (Model + Controller). This modification enables portability of application code across multiple platform targets.|$|R
30|$|The {{principal}} empirical {{challenge in}} estimating the key parameter of interest β 1 is, as already stated, {{the issue of}} possible reverse causation. We therefore use a 'previous settlement' type instrumental variable to predict the immigrant <b>share.</b> The <b>logic</b> of this arises from the notion that immigrants tend to settle in areas where {{there is already a}} high share of immigrants from their country of origin (what we call enclaves). The exogeneity of the instrument relies on the assumption that there are no persistent shocks that could drive the location of immigrant settlements over time and that are correlated with the outcome variables of interest (in this case, crime trends).|$|R
40|$|Abstract. In {{this paper}} we {{describe}} a distributed object oriented logic programming {{language in which}} an object {{is a collection of}} threads deductively accessing and updating a <b>shared</b> <b>logic</b> program. The key features of the language, such as static and dynamic object methods and multiple inheritance, are illustrated through a series of small examples. We show how we can implement object servers, allowing remote spawning of objects, which we can use as staging posts for mobile agents. We give as an example an information gathering mobile agent that can be queried about the information it has so far gathered whilst it is gathering new information. Finally we define a class of co-operative reasoning agents that can do resource bounded inference for full first order predicate logic, handling multiple queries and information updates concurrently. We believe that the combination of the concurrent OO and the LP programming paradigms produces a powerful tool for quickly implementing rational multi-agent applications on the internet. ...|$|E
40|$|This {{work has}} been carried out in the {{framework}} of the Spanish CICYT project TIC 94 - 0930 -C 02 - 01. In this paper, we present a new coordination model and a small set of programming notations for distributed programming that can be integrated in very different programming languages (imperative, declarative or object oriented). Both together, allow the development of distributed programs in a compositional way, by assembling different independent pieces of (possibly preexisting and heterogeneous) code. This approach is in the spirit of many other similar proposals as Linda, PCN, CC++, etc., but it allows multiparadigm and multilingual integration and provides a powerful set of concurrent programming techniques, inherited from Concurrent Logic Languages (CLLs), that can be efficiently implemented in distributed systems. The coordination model is based on Logic Channels; these are an evolution of the concept of <b>shared</b> <b>logic</b> variable used in CLLs that, with the same expressive power, can be more efficiently implemented in distributed systems...|$|E
40|$|There {{has been}} some recent concern in Britain and North America that the {{increasing}} institutionalization of hospice care may compromise the movement's founding ideals. The threats posed by the encroachment of mainstream medicine and the medical technological imperative to treat, are also a source of concern to hospice administrators and staff. This study uses Australian data {{based on interviews with}} nurses and participant observation in an in-patient hospice unit and a community based hospice service to investigate whether the Good Death ideal, as central to the hospice philosophy, is compatible with the institutionalization of hospice care. The issues that arise, although interrelated are conceptualized as the following five challenges to hospice care: (1) encroachment of mainstream medicine and the medical technical imperative; (2) competing motivations; (3) delimitation of intellectual structures; (4) organizational maintenance; and (5) routinization of the Good Death. This conceptual framework is based on the way in which nurses and other health care professionals have used <b>shared</b> <b>logic</b> and strategies to negotiate the daily demands of their work and illustrates the tension that arises between the maintenance of the ideal and the maintenance of the organization. hospice Good Death institutionalization mainstream medicine medical technical imperative...|$|E
5000|$|Scott Foy of DreadCentral rated it 3.5/5 {{and called}} it [...] "an above average effort from the Sci-Fi Channel that never insults your {{intelligence}} even though it does have its fair <b>share</b> of <b>logic</b> gaps." [...] Laura Burrows of IGN rated it 4/10 {{and called it}} [...] "an awful film" [...] with [...] "terrible CGI". [...] Patrick Bromley of DVD Verdict describes it as having [...] "terrible CGI effects" [...] and [...] "cheesy plotting and non-existent acting". [...] Justin Felix of DVD Talk called it a [...] "celluloid atrocity", though he stated {{that it has a}} [...] "certain Ed Wood B-movie charm to it.".|$|R
5000|$|IF <b>logic</b> <b>shares</b> {{a number}} of metalogical {{properties}} with first-order logic, {{but there are some}} differences, including lack of closure under (classical, contradictory) negation and higher complexity for deciding the validity of formulas. Extended IF logic addresses the closure problem, but its game-theoretical semantics is more complicated, and such logic corresponds to a larger fragment of second-order logic, a proper subset of [...] (...) [...]|$|R
40|$|Practical {{declarative}} multi-paradigm languages {{combine the}} main features of functional, logic and concurrent programming (e. g., laziness, <b>sharing,</b> higher-order, <b>logic</b> variables, non-determinism, search strategies). Usually, these languages also include interfaces to external functions {{as well as to}} constraint solvers. In this work, we introduce the first formal description of an operational semantics for realistic multi-paradigm languages covering all the aforementioned features in a precise and understandable manner. We also provide a deterministic version of the operational semantics which models search strategies explicitly. This deterministic semantics becomes essential to develop language-specific tools like program tracers, profilers, optimizers, etc. Finally, we extend the deterministic semantics in order to model concurrent computations. An implementation of the complete operational semantics has been undertaken...|$|R
