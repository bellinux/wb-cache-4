2255|1958|Public
5|$|Python {{has been}} used in {{artificial}} intelligence tasks. As a <b>scripting</b> <b>language</b> with modular architecture, simple syntax and rich text processing tools, Python is often used for natural language processing tasks.|$|E
5|$|Due to Python's {{extensive}} mathematics library, and the third-party library NumPy {{that further}} extends the native capabilities, it is frequently {{used as a}} scientific <b>scripting</b> <b>language</b> to aid in problems such as numerical data processing and manipulation.|$|E
5|$|Perl 5.004 was {{released}} on May 15, 1997, and included among other things the UNIVERSAL package, giving Perl a base object to which all classes were automatically derived {{and the ability to}} require versions of modules. Another significant development was the inclusion of the CGI.pm module, which contributed to Perl's popularity as a CGI <b>scripting</b> <b>language.</b>|$|E
50|$|<b>Scripting</b> <b>languages</b> vary widely, often being product {{specific}} languages resembling MS-DOS batch files, to {{systems that}} support fully-fledged <b>scripting</b> <b>languages</b> such as Lua or Python.|$|R
40|$|A <b>Script</b> <b>Language</b> in {{this paper}} is {{designed}} to transform the original data into the target data by the computing formula. The <b>Script</b> <b>Language</b> can be translated into the corresponding SQL Language, and the computation is finally implemented by the first type of dynamic SQL. The <b>Script</b> <b>Language</b> has the operations of insert, update, delete, union, intersect, and minus for {{the table in the}} database. The <b>Script</b> <b>Language</b> is edited by a text file and you can easily modify the computing formula in the text file to deal with the situations when the computing formula have been changed. So you only need modify the text of the <b>script</b> <b>language,</b> but needn't change the programs that have complied. Comment: 9 page...|$|R
40|$|Study {{of topics}} in {{computer}} science according {{to the interests of}} the instructor and students. Topic description: In recent years there has been increased interest in <b>scripting</b> <b>languages.</b> Traditional programming languages such as C, Pascal, and Ada were designed to allow the development of complex programs that involve data structures and algorithms from the ground up. <b>Scripting</b> <b>languages</b> are typically used to connect (glue) together components that have previously been developed. Normally <b>scripting</b> <b>languages</b> are typeless (or dynamically typed) and interpreted, whereas traditional programming languages are statically typed and compiled. This course considers several <b>scripting</b> <b>languages</b> and their ues...|$|R
5|$|The Perl {{languages}} borrow features {{from other}} programming languages including C, shell script (sh), AWK, and sed. They provide powerful text processing facilities without the arbitrary data-length limits of many contemporary Unix commandline tools, facilitating easy manipulation of text files. Perl 5 gained widespread {{popularity in the}} late 1990s as a CGI <b>scripting</b> <b>language,</b> {{in part due to}} its then unsurpassed regular expression and string parsing abilities.|$|E
5|$|Python {{can serve}} as a <b>scripting</b> <b>language</b> for web applications, e.g., via mod_wsgi for the Apache web server. With Web Server Gateway Interface, a {{standard}} API has evolved to facilitate these applications. Web frameworks like Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle and Zope support developers in the design and maintenance of complex applications. Pyjs and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as data mapper to a relational database. Twisted is a framework to program communications between computers, and is used (for example) by Dropbox.|$|E
5|$|The {{software}} {{can be purchased}} in any of five capability configurations: JMP, JMP Pro, JMP Clinical, JMP Genomics and the JMP Graph Builder App for the iPad. JMP can be automated with its proprietary <b>scripting</b> <b>language,</b> JSL. The software is focused on exploratory visual analytics, where users investigate and explore data. These explorations can also be verified by hypothesis testing, data mining, or other analytic methods. In addition, discoveries made through graphical exploration can inspire a designed experiment that can be both designed and analyzed with JMP.|$|E
40|$|<b>Scripting</b> <b>languages</b> such as Perl and Tcl {{represent}} {{a very different}} style of programming than system programming languages such as C or JavaTM. <b>Scripting</b> <b>languages</b> are designed for "gluing " applications; they use typeless approaches to achieve {{a higher level of}} programming and more rapid application development than system programming languages. Increases in computer speed and changes in the application mix are making <b>scripting</b> <b>languages</b> more and more important for applications of the future...|$|R
40|$|In recent years, {{so-called}} <b>scripting</b> <b>languages</b> {{have become}} increasingly popular as they provide means to build quickly flexible applications from a set of prefabricated components. These languages typically support a single, specific architectural style of composing components (e. g. the pipes and filters architectural style), and {{they are designed to}} address a spe-cific application domain. Although <b>scripting</b> <b>languages</b> and coordination languages have evolved from different roots and have been developed to solve different problems, we argue that both address similar separations of concerns. <b>Scripting</b> <b>languages</b> achieve a separation of components from the scripts that configure and compose them, whilst coordination languages separate computational entities from the coordination code that manages dependencies between them. In this chapter we will define coordination {{in the context of a}} conceptual framework for component-based software de-velopment. Furthermore, we will discuss main properties and abstractions of <b>scripting</b> <b>languages</b> and will compare selected <b>scripting</b> <b>languages</b> wit...|$|R
40|$|<b>Scripting</b> <b>languages</b> such as Perl and Tcl {{represent}} {{a very different}} style of programming than system programming languages such as C or Java. <b>Scripting</b> <b>languages</b> are designed for "gluing" applications; they use typeless approaches to achieve {{a higher level of}} programming and more rapid application development than system programming languages. Increases in computer speed and changes in the application mix are making <b>scripting</b> <b>languages</b> more and more important for applications of the future. 1 Introduction As we {{near the end of the}} 20 th century a fundamental change is occurring in the way people write computer programs. The change is a transition from system programming languages such as C or C++ to <b>scripting</b> <b>languages</b> such as Perl or Tcl. Although many people are participating in the change, few people realize that it is occurring and even fewer people know why it is happening. This paper is an opinion piece that calls attention to the change and explains why <b>scripting</b> <b>languages</b> will [...] ...|$|R
5|$|JMP is {{a desktop}} {{application}} with a wizard-based user interface, while SAS {{can be installed}} on servers. It runs in-memory, instead of on disk storage. According to a review in Pharmaceutical Statistics, JMP is often used as a graphical front-end for a SAS system, which performs the statistical analysis and tabulations. JMP Genomics, used for analyzing and visualizing genomics data, requires a SAS component to operate and can access SAS/Genetics and SAS/STAT procedures or invoke SAS macros. JMP Clinical, used for analyzing clinical trial data, can package SAS code within the JSL <b>scripting</b> <b>language</b> and convert SAS code to JMP.|$|E
5|$|The JMP <b>Scripting</b> <b>Language</b> (JSL) is an {{interpreted}} {{language for}} recreating analytic results and for automating or extending the functionality of JMP software. JSL {{was first introduced}} in JMP version 4 in 2000. JSL has a LISP-like syntax, structured {{as a series of}} expressions. All programming elements, including if-then statements and loops, are implemented as JSL functions. Data tables, display elements and analyses are represented by objects in JSL that are manipulated with named messages. Users may write JSL scripts to perform analyses and visualizations not available in the point-and-click interface or to automate a series of commands, such as weekly reports. SAS, R, and Matlab code can also be executed using JSL.|$|E
5|$|PHP is a {{general-purpose}} <b>scripting</b> <b>language</b> that {{is especially}} suited to server-side web development, {{in which case}} PHP generally runs on a web server. Any PHP code in a requested file is executed by the PHP runtime, usually to create dynamic web page content or dynamic images used on websites or elsewhere. It {{can also be used}} for command-line scripting and client-side graphical user interface (GUI) applications. PHP can be deployed on most web servers, many operating systems and platforms, and can be used with many relational database management systems (RDBMS). Most web hosting providers support PHP for use by their clients. It is available free of charge, and the PHP Group provides the complete source code for users to build, customize and extend for their own use.|$|E
50|$|More {{radical and}} {{innovative}} than the RAD languages were the new <b>scripting</b> <b>languages.</b> These {{did not directly}} descend from other languages and featured new syntaxes and more liberal incorporation of features. Many consider these <b>scripting</b> <b>languages</b> to be more productive than even the RAD languages, but often because of choices that make small programs simpler but large programs more difficult to write and maintain. Nevertheless, <b>scripting</b> <b>languages</b> came {{to be the most}} prominent ones used in connection with the Web.|$|R
40|$|<b>Scripting</b> <b>languages</b> such as JavaScript and VBScript {{are most}} widely used for {{developing}} web pages that are interactive in nature. JavaScript is a programming language that was developed by Netscape Communications Corporations. VBScript is {{a subset of the}} Visual Basic programming language by Microsoft that is supported by Microsoft Internet Explorer. These scripts require a Web browser or an interpreter in order to run. In this paper a brief comparison is made between the features of VBScript and JavaScript <b>scripting</b> <b>languages.</b> This paper will provide a acumen into different features of these languages and assist in making an prudent decision and also facilitate the researchers in the development of new and better <b>scripting</b> <b>languages</b> or extending the features of existing <b>scripting</b> <b>languages...</b>|$|R
40|$|While {{conducting}} a security analysis of JavaScript and VBScript, {{the most popular}} <b>scripting</b> <b>languages</b> on the Web, we found some serious #aws. Motivated by this outcome, we propose steps towards a sound de#nition and design of a security framework for <b>scripting</b> <b>languages</b> on the Web. We show that if such a security framework had been integrated into the respective <b>scripting</b> <b>languages</b> from the very beginning, the probability of preventing the multiple security #aws, that we and other research groups identi#ed, would have been greatly increased...|$|R
5|$|Python {{has been}} {{successfully}} embedded in many software products as a <b>scripting</b> <b>language,</b> including in finite element method software such as Abaqus, 3D parametric modeler like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP, Inkscape, Scribus and Paint Shop Pro, and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as {{the best choice for}} writing scripts in ArcGIS. It has also been used in several video games, and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go. Python is also used in algorithmic trading and quantitative finance. Python can also be implemented in APIs of online brokerages that run on other languages by using wrappers.|$|E
5|$|During the game's development, {{the team}} lacked artists. The art {{director}} at Epic Games, Shane Caudle, and the artists at Digital Extremes {{could not make}} enough new textures because {{of the amount of}} diversity in characters and maps. In order to supplement the skin and texture production, Epic turned to contract artist Steve Garofalo. The game's level and content management program, UnrealEd, was written in Visual Basic and considered buggy, but no one had time to fix it. The game engine had an object-oriented design, and the <b>scripting</b> <b>language,</b> UnrealScript, was considered to be more like Java. The modularity of the object-oriented design meant that programmers could make large changes without affecting other parts of the game. Other tools used during development included Microsoft Visual Studio and 3D Studio Max. All of the weapon sound effects were created by Sonic Mayhem. The soundtrack for the game, which employed the system of module files, was written by Alexander Brandon, Michiel van den Bos, Andrew Sega, Dan Gardopee and Peter Hajba.|$|E
25|$|RPG Maker MV uses JavaScript as its <b>scripting</b> <b>language.</b>|$|E
5000|$|VisAD data {{visualization}} integrated with <b>scripting</b> <b>languages.</b>|$|R
40|$|The next {{generation}} of <b>scripting</b> <b>languages</b> for creating value-added services in converged networks will be based upon XML. Industry fora like Parlay, JAIN and OSA have developed open standard Application Programming Interfaces (APIs) to enable service creation in converged Next Generation Networks (NGN). While services can be developed in traditional programming languages (e. g. Java or C++) using these APIs, XML-based <b>scripting</b> <b>languages</b> offer some advantages. While not as flexible or powerful as a programming <b>language,</b> <b>scripting</b> <b>languages</b> are typically easier to learn, and are language and platform independent...|$|R
40|$|With sensor {{networks}} {{starting to}} get mainstream acceptance, programmability is of increasing importance. Customers and field engineers will need to reprogram existing deployments and software developers will need to test and debug software in network testbeds. <b>Script</b> <b>languages,</b> which are a popular mechanism for reprogramming in general-purpose computing, have not been considered for wireless sensor networks because of the perceived overhead of interpreting a <b>script</b> <b>language</b> on tiny sensor nodes. In this paper we show that a structured <b>script</b> <b>language</b> is both feasible and efficient for programming tiny sensor nodes. We present a structured <b>script</b> <b>language,</b> <b>SCript,</b> and develop an interpreter for the language. To reduce program distribution energy the SCript interpreter stores a tokenized representation of the scripts which is distributed through the wireless network. The ROM and RAM footprint of the interpreter {{is similar to that}} of existing virtual machines for sensor networks. We show that the interpretation overhead of our language is on par with that of existing virtual machines. Thus <b>script</b> <b>languages,</b> previously considered as too expensive for tiny sensor nodes, are a viable alternative to virtual machines. ...|$|R
25|$|UnrealScript (often {{abbreviated}} to UScript) is Unreal Engine's native <b>scripting</b> <b>language</b> used for authoring game code and gameplay events before {{the release of}} Unreal Engine 4. The language was designed for simple, high-level game programming. The UnrealScript interpreter was programmed by Tim Sweeney, who also created an earlier game <b>scripting</b> <b>language,</b> ZZT-oop.|$|E
25|$|Octave uses an {{interpreter}} {{to execute the}} Octave <b>scripting</b> <b>language.</b>|$|E
25|$|Jaskell, a {{functional}} <b>scripting</b> <b>language</b> that runs in Java VM.|$|E
5000|$|Digital Glue - <b>scripting</b> <b>languages</b> to make {{software}} interoperable ...|$|R
5000|$|Conditional {{inclusion}} = <b>script</b> <b>language</b> {{power to}} conditional includes ...|$|R
5000|$|Various {{programming}} and <b>scripting</b> <b>languages</b> use the backquote character: ...|$|R
25|$|Microsoft's Active Scripting {{technology}} supports JScript as a <b>scripting</b> <b>language.</b>|$|E
25|$|The {{de facto}} {{client-side}} <b>scripting</b> <b>language</b> for web sites is JavaScript.|$|E
25|$|The {{text editor}} UltraEdit uses JavaScript 1.7 as {{internal}} <b>scripting</b> <b>language,</b> introduced with version 13 in 2007.|$|E
5000|$|Tracks: accessibility, Java, Linux kernel, <b>Scripting</b> <b>languages,</b> security, X&Co ...|$|R
50|$|Possible {{to create}} {{indicators}} with the CUS built-in <b>script</b> <b>language.</b>|$|R
5000|$|Amiga AMP: Apache, MySQL, Perl/PHP/Python (<b>scripting</b> <b>languages)</b> {{solution}} stack AAMP.|$|R
