5|6|Public
40|$|This paper {{discusses}} {{approaches to}} validating XML documents for compliance to constraints. Our particular {{focus is on}} structural and content constraints that go beyond what is readily expressible in XML Schema technologies. We provide examples and solutions drawn from our specific experience building an XML-native constraint validator based on a mathematical language called <b>Structural</b> <b>Notation</b> (SN). SN is used to express operational constraints as machine-processible Rules agains...|$|E
40|$|In this article, a {{formalisation}} of index expressions is presented. Index expressions {{are more}} expressive than keywords {{while maintaining a}} comprehensible complexity. Index expressions are well-known in Information Retrieval (IR), where they are used for characterising document contents, formulation of user interests, and matching mechanisms. In addition, index expressions have found both practical and theoretical applicability in 2 -level hypermedia systems for IR. In these applications, properties of (the structure of) index expressions are heavily relied upon. However, the presupposed mathematical formalisation of index expressions and their properties still lacks. Our formalism {{is based on the}} <b>structural</b> <b>notation</b> of index expressions. It is complete in the sense that several notions of subexpressions and defoliation of index expressions are also formalised. Defoliation, which {{plays an important role in}} defining properties of index expressions, is provided as a recursively defined oper [...] ...|$|E
40|$|AbstractWe compare two {{different}} styles of Higher-Order Unification (HOU) : the classical HOU algorithm of Huet for the simply typed λ-calculus and HOU based on the λσ-calculus of explicit substitutions. For doing so, first, the original Huet algorithm for the simply typed λ-calculus with names is adapted {{to the language of}} the λ-calculus in de Bruijn's notation, since this is the notation used by the λσ-calculus. Afterwards, we introduce a new <b>structural</b> <b>notation</b> called unification tree, which eases the presentation of the subgoals generated by Huet's algorithm and its behaviour. The unification tree notation will be important for the comparison between Huet's algorithm and unification in the λσ-calculus whose derivations are presented into a structure called derivation tree. We prove that there exists an important structural correspondence between Huet's HOU and the λσ-HOU method: for each (sub-) problem in the unification tree there exists a counterpart in the derivation tree. This allows us to conclude that the λσ-HOU is a generalization of Huet's algorithm and that solutions computed by the latter are always computed by the former method...|$|E
40|$|International audienceIn this {{contribution}} to the twentieth anniversary issue of Organised Sound, I first recall the reasons for dedicating a periodical to organised sound which I mentioned in my answer to inquiries from Cambridge University Press before the journal existed. The digital era {{is still in its}} infancy and it will permit a host of new ways to organise sound. I suggest in particular the development of an intimate relationship between acoustic and digital sounds; the extension of <b>structural</b> <b>notations</b> of sound and music and their exploitation for novel musical transformation; the amplification of the use of functions and combinations of functions. I evoke some issues discussed in Organised Sound, elaborating in more detail some problematic topics: analysis and reconstruction of computer music, live electronic music performance, perception of musical sound and sensory aesthetics...|$|R
30|$|To {{demonstrate}} some of {{the potential}} inaccuracies, log Kow predictions for different <b>structural</b> SMILES <b>notations</b> were run for each test compound (# 1 – 12). In addition, the average predicted log Kow values computed by different QSPRs were also calculated to compare with experimental measurements. In this case, only the ionised forms have been included for anionic, cationic, and amphoteric compounds since they are all fully ionised under test conditions. A prediction for neutral C 12 carboxylate was also made for comparison with the experimental value log Kow determined under conditions in which the compound was fully protonated. For non-ionic compounds, only the neutral forms were {{used to calculate the}} averages. Further details for the methods and how they have been applied to the test compounds in this study are provided in Additional file 3 : Section S 3.|$|R
30|$|Within {{this article}} we {{analyzed}} the problem of preserving structural code coverage when transforming the program model or program code. We introduced a <b>notation</b> for formalizing <b>structural</b> code-coverage. This <b>notations</b> is convenient to also express test-data independent criteria for preserving the code coverage. These criteria {{may be used to}} prove whether a given program transformation does always preserve the structural code coverage of interest. Further, the presented preservation criteria are naturally applied on source-to-source program transformations or on optimizing program compilation. And they may be also applied on model coverage, for which we identified some additional challenges.|$|R
40|$|Recently {{modeling}} {{techniques are}} introduced to support safety assessment. Goal <b>Structural</b> <b>Notation</b> {{is one of these}} modeling techniques, which can be used to facilitate the development of safety argumentation and create reusable safety argumentation models. Consequently, GSN-based safety cases are widely used to demonstrate the safety of systems in safety-critical domains. Due to the amount of manual work, constructing a safety case is usually time-consuming. Moreover, the re-usability of GSN-based safety cases is limited. To address this, safety case patterns {{are introduced to}} support safety case reuse. As more and more GSN-based safety cases and patterns are designed with different goals in different contexts, it becomes hard to identify a reusable safety case or pattern. In this paper, we carried out a study on the categorization of existing GSN-based safety cases and patterns. As a result, a number of high cited publications are selected and studied. Finally a categorizatio n of GSN-based safety cases is proposed. A clear categorization of GSN-based safety cases can be used to identify similar safety cases or patterns and facilitate safety case reuse...|$|E
40|$|Many {{documents}} have a definable structure. Some document formatting systems, {{like the}} LaTeX formatter, use a <b>structural</b> <b>notation.</b> In {{recent years the}} general mark-up language SGML has gained popularity. In this work we study the transformation of a structure to another. For example, technical journals have their structure definitions, and an article originally written for one journal must be restructured {{before it can be}} submitted to another journal. We assume that structure definitions are grammatical, and study what kind of transformations can be automatized or at least semiautomatized. We took a collection of computer science journals and compared their structure definitions. We classified differences as simple, local and global. As transformation techniques we studied syntax directed translation schemata and tree transducers. Our conclusion was that simple and local transformations can be automatized or semiautomatized, depending whether additional information is not needed, while global transformations are difficult to automatize. Transformations were tested in our prototype syntax-directed document processing system. The system has one module for editing a document under one structure definition, and another module for changing a document from one structure definition to another. KEY WORDS Structured document Tree transformation Context-free grammar Parse tre...|$|E
30|$|Embedded systems, {{especially}} {{when used in}} safety-critical applications require a thorough testing with good coverage of the code. However, due to compiler optimizations, the code coverage achieved at machine code level might not be given even though the test case cover the high-level program representation well. In this article Kirner addresses this problem, and discusses methods for preserving code coverage achieved at source-code level and introduce a <b>notation</b> for formalizing <b>structural</b> code-coverage. These <b>notations</b> also serve to express testdata independent criteria for preserving the code coverage. Thus, it can be proven if given program transformation does always preserve the structural code coverage of interest or not.|$|R
40|$|Understanding {{software}} {{structure and}} quality {{is a crucial}} concern during software development. Software structure is depicted with architecture and design diagrams. One diagram typically emphasizes on the particular aspects, functionalities, and collaborations of selected system parts. We call such parts areas of interest (AOIs). One diagram can contain many overlapping AOIs, and one AOI can occur in several diagrams. Hence, AOIs cannot be effectively shown using standard <b>structural</b> diagram <b>notations.</b> Software quality is typically captured using software metrics computed on diagram elements (functions, classes, packages, and groups thereof). Effective system understanding requires ways to correlate several metrics, defined on several elements, with the system structure and AOIs. In this thesis, we introduce new ways for effectively visualizing AOIs and their associated metrics. We {{use a combination of}} geometric annotations, shading, and texturing that attempts to mimic how humans draw AOIs on paper diagrams during design sessions. Secondly, we extend table visualization techniques to display multiple metrics defined on individual diagram elements. Overall, we combine structural and metric information defined at several levels of detail in a single visual representation, thereby addressing assessment tasks that require correlating multiple data sources. Although our interest is in software architecture diagrams, our methods can be used in other contexts, such as organization charts or spatial maps. Throughout this work, we conducted evaluation studies of the proposed visualization methods, both in academic and industrial contexts. We discuss how the results here of have been used to improve our visualization design and validate our design choices. ...|$|R
40|$|Subject: {{due to the}} {{existence}} of shabby and hazardous dwelling, the housing problem {{is one of the most}} relevant problems in the social sphere of the Astrakhan region. The Astrakhan regional construction cluster includes the significant number of the construction organizations, the servicing organizations, which are engaged in the training of personnel for construction, the banks and other credit institutions, which provide the population with mortgage loans, and also regional, municipal authorities and public organizations. The regional construction cluster is the developing social and economic system of heterarchical type. The heterarchy combines both elements of hierarchy and elements of the market relations. Therefore, the task of creation of a common information space of a regional construction cluster on the basis of mathematical, functional and information-logical models is relevant. Research objectives: use functional and mathematical modeling of heterarchical system of a regional construction cluster for development of its information portal. Materials and methods: for creation of structurally-functional model of a regional construction cluster, the methodology of <b>structural</b> analysis in <b>notations</b> of IDEF 0, IDEF 3, Swimlane was used. As a tool for structurally-functional simulation, we used CASE-tool - AllFusion Process Modeler r 7. The mathematical description of logic of regional construction cluster management is based on the theory of sets. Results: the complex of functional models with the set-theoretic description of the system was developed. The business-process model in a notation of IDEF 0 well reflects the process hierarchy that best describes the hierarchical communications prevailing in stable functioning of the regulated processes. For its creation the SADT technology was used. When the external disturbances affect the socio-economic system (SES), inertial hierarchical management ceases being effective and the advantage is given to horizontal managing directors of communication for description of which and for reflection of logic of processes it is more appropriate to use the model of the IDEF 3 notation. For explicit description of roles and responsibility of performers of specific processes, it is expedient to use the chart SwimLane, which is variety of the chart IDEF 3, in order to achieve the unified information environment of a regional construction cluster. The logic of process interaction reflected in the chart SwimLane was described mathematically by creation of a set-theoretic model. Conclusions: All developed models form a basis for further information-logical and physical design of the unified information environment of the Astrakhan regional construction cluster. Computer support of the functioning of such a complex system will allow us to considerably increase its efficiency...|$|R

