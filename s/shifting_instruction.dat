1|89|Public
40|$|The authors {{conducted}} an experimental comparison {{of two different}} teaching strategies, one based on behaviorist principles {{and the other on}} social constructivist principles, in teaching a linear psychomotor skill. Two randomly selected groups of gifted students were provided instruction on making an origami piece. The {{purpose of the study was}} to determine which teaching method produced better short-term retention of the selected task. The pieces were evaluated using a scoring rubric developed and field tested by the researchers. Analysis on the scores showed that there was no significant difference in the performance between the two groups. In addition, the University’s official teacher/course evaluation form was used to compare the students ’ evaluations of the different teaching styles. Analysis of the course evaluation scores showed a significant preference for the behaviorist-based instruction. This study does not support the current trend of <b>shifting</b> <b>instruction</b> from the behaviorist method to the constructivist method of teaching for linear psychomotor tasks. However, there was a definite student preference for the behaviorist method of teaching. Behaviorism formed the traditional basis for schooling in western societies for most of the past century, but in recent years there has been a visible shift to in educational practice toward social constructivism as the dominant learning theory (Doolittle and Camp, 1999). Using behaviorist principles, teachers often instruct their students using a linear step-by-step approach (Dobbins, 1999). Educators who base their pedagogies on social constructivism, believe that students learn in a less structured and more social environment in which they “construct ” their own knowledge (Dobbins, 1999) ...|$|E
50|$|The <b>shift</b> <b>instructions</b> here {{differ from}} those in SSE2 in that they can shift each unit with a {{different}} amount using a vector register interpreted as packed signed integers. The sign indicates the direction of shift or rotate, with positive values causing left shift and negative right shiftIntel has specified a different incompatible set of variable vector <b>shift</b> <b>instructions</b> in AVX2.|$|R
5000|$|A fixed-point {{overflow}} exceptionPoOps {{is recognized}} when significant bits are {{lost in a}} fixed point arithmetic or <b>shift</b> <b>instruction,</b> other than divide.|$|R
5000|$|The {{reserved}} opcode {{has been}} converted into a <b>shift</b> <b>instruction,</b> SHF, that supports arithmetic and logical shifts of arbitrary size in both directions.|$|R
25|$|The R {{instruction}} format's {{inability to}} specify the full shift distance for 64-bit shifts (its 5-bit shift amount field is too narrow {{to specify the}} shift distance for doublewords) required MIPS III to provide three 64-bit versions of each MIPS I <b>shift</b> <b>instruction.</b> The first version is a 64-bit version of the original <b>shift</b> <b>instructions,</b> used to specify constant shift distances of 0ndash&31 bits. The second version {{is similar to the}} first, but adds 3210 the shift amount field's value so that constant shift distances of 32ndash&64 bits can be specified. The third version obtains the shift distance from the six low-order bits of a GPR.|$|R
50|$|IJVM {{is mostly}} {{a subset of the}} JVM {{assembly}} language that is used in the Java platform. This instruction set is so simple that it's difficult to write complex programs in it (for example, no <b>shift</b> <b>instructions</b> are provided).|$|R
25|$|The logical {{instructions}} {{consist of}} those for performing bitwise logical operations and conditional moves on the integer registers. The bitwise logical instructions perform AND, NAND, NOR, OR, XNOR, and XOR between two registers or a register and literal. The conditional move instructions test a register as a signed quadword to zero and move if the specified condition is true. The specified conditions are equality, inequality, {{less than or}} equal to, less than, greater than or equal to, and greater than. The <b>shift</b> <b>instructions</b> perform arithmetic right shift, and logical left and right shifts. The shift amount is given by a register or literal. Logical and <b>shift</b> <b>instructions</b> use the integer operate instruction formats.|$|R
5000|$|Each 48-bit word {{contained}} two 24-bit instructions. The {{instruction format}} was 6-3-15: six bits {{for the operation}} code, three bits for a [...] "designator" [...] (index register for memory access instructions, condition for jump (branch) instructions) and fifteen bits for a memory address (or shift count, for <b>shift</b> <b>instructions).</b>|$|R
50|$|On {{currently}} available processors, a bit-wise <b>shift</b> <b>instruction</b> is {{faster than a}} multiply instruction {{and can be used}} to multiply (shift left) and divide (shift right) by powers of two. Multiplication by a constant and division by a constant can be implemented using a sequence of shifts and adds or subtracts. For example, {{there are several ways to}} multiply by 10 using only bit-shift and addition.|$|R
5000|$|A few new {{instructions}} were introduced with the 80186 (referred {{to as the}} 8086-2 instruction set in some datasheets): enter/leave (replacing several instructions when handling stack frames), pusha/popa (push/pop all general registers), bound (check array index against bounds), and ins/outs (input/output of string). A useful immediate mode was added for the push, imul, and multi-bit <b>shift</b> <b>instructions.</b> These {{instructions were}} {{also included in the}} contemporary 80286 and in successor chips. (The instruction set of the 80286 is exactly the instruction set of the 80186 with instructions added only for operations related to the 80286 Protected mode.) ...|$|R
50|$|The integer {{register}} file has 32 64-bit entries. As the SPARC ISA uses register windows, {{of which}} the UltraSPARC has eight, {{the actual number of}} registers is 144. The register file has seven read and three write ports. The integer register file provides registers to two arithmetic logic units and the load/store unit. The two ALUs can both execute arithmetic, logic and <b>shift</b> <b>instructions</b> but only one can execute multiply and divide instructions.|$|R
50|$|The flipped {{classroom}} intentionally <b>shifts</b> <b>instruction</b> to a learner-centered {{model in}} which class time explores topics in greater depth and creates meaningful learning opportunities, while educational technologies such as online videos are used to deliver content outside of the classroom. In a flipped classroom, content delivery may take a variety of forms. Often, video lessons prepared by the teacher or third parties are used to deliver content, although online collaborative discussions, digital research, and text readings may be used.|$|R
5000|$|Group 5 is multiply, {{divide and}} <b>shift</b> <b>instructions.</b> Some of these use the 38-bit Auxiliary Register (AR - {{contents}} denoted by ar), {{which can be}} thought of as an extension of the accumulator at the least significant end. Multiplications and divisions regard a/ar as a signed fraction between -1 and one least significant bit less than +1. Despite the 803 Handbook saying [...] "All odd functions in Group 5 clear the AR", function 57 does not clear it.|$|R
5000|$|A single rotate through carry can {{simulate}} a logical or arithmetic shift of one position {{by setting up}} the carry flag beforehand. For example, if the carry flag contains 0, then [...] is a logical right-shift, and if the carry flag contains {{a copy of the}} sign bit, then [...] is an arithmetic right-shift. For this reason, some microcontrollers such as low end PICs just have rotate and rotate through carry, and don't bother with arithmetic or logical <b>shift</b> <b>instructions.</b>|$|R
50|$|The {{speed of}} {{arithmetic}} operations {{was about the}} same as the Elliott 402 computer, which could add in 204 microseconds and multiply in 3366 microseconds. The Pegasus basic instruction cycle time for add/subtract/move and logical instructions was 128 microseconds. Multiply, divide, justify and <b>shift</b> <b>instructions</b> took a variable time to complete. Transfers to and from magnetic drum were synchronous and had to be optimised where possible. The layout of blocks on the magnetic drum was interleaved to allow some processing between transfers to/from consecutive blocks.|$|R
5000|$|... #Subtitle level 2: Integer vector <b>shift</b> {{and rotate}} <b>instructions</b> ...|$|R
5000|$|It is {{frequently}} stated that arithmetic right shifts are equivalent to division by a (positive, integral) {{power of the}} radix (e.g., a division by a power of 2 for binary numbers), and hence that division by a power of the radix can be optimized by implementing it as an arithmetic right shift. (A shifter is much simpler than a divider. On most processors, <b>shift</b> <b>instructions</b> will execute faster than division instructions.) Large number of 1960s and 1970s programming handbooks, manuals, and other specifications from companies and institutions such as DEC, IBM, Data General, and ANSI make such incorrect statements [...]|$|R
40|$|The {{main concern}} {{of this paper}} is to design and study about barrel shifter of 32 bit that is used in (ARM 7) RISC {{processor}} using VHDL. The instructions include a set of 16 - data processing instructions, two- 32 -bit multiply instructions, branch instructions and a store <b>instruction.</b> <b>Shifting</b> <b>instructions</b> will be done by a barrel shifter unit. First barrel shifter is designed in VHDL and simulated on Modelsim and after it to get a synthesizable net list, and to generate RTL schematic VHDL code is run on XILINX ISE 12. 1. Aftergetting RTL schematic we calculate power and no. of transistor and layout through Tanner EDA 14. 1 tool and MENTOR GRAPHICS(IC-Station) using 16 nm technology...|$|R
50|$|All {{currently}} relevant C standards (ISO/IEC 9899:1999 to 2011) leave {{a definition}} gap for {{cases where the}} number of shifts is equal to or bigger {{than the number of}} bits in the operands {{in a way that the}} result is undefined. This helps allow C compilers to emit efficient code for various platforms by allowing direct use of the native <b>shift</b> <b>instructions</b> which have differing behavior. For example, shift-left-word in PowerPC chooses the more-intuitive behavior where shifting by the bit width or above gives zero, whereas SHL in x86 chooses to mask the shift amount to the lower bits to reduce the maximum execution time of the instructions, and as such a shift by the bit width doesn't change the value.|$|R
50|$|The 68060 shares most {{architectural}} features {{with the}} P5 Pentium. Both {{have a very}} similar superscalar in-order dual instruction pipeline configuration, and an instruction decoder which breaks down complex instructions into simpler ones before execution. However, a significant {{difference is that the}} 68060 FPU is not pipelined and is therefore up to three times slower than the Pentium in floating point applications. In contrast to that, integer multiplications and bit <b>shifting</b> <b>instructions</b> are significantly faster on the 68060. An interesting feature of the 68060 is the ability to execute simple instructions in the address generation unit (AGU) and thereby supply the result two cycles before the ALU. Another point of interest is that large amounts of commercial compiled code were analyzed for clues as to which instructions would be the best candidates for performance optimization.|$|R
40|$|In {{this present}} study {{includes}} the Very Large Scale Integration (VLSI) system implementation of 200 MHz, 8 -bit, 90 nm Complementary Metal Oxide Semiconductor (CMOS) Arithmetic and Logic Unit (ALU) processor control with logic gate design style and 0. 12 µm six metal 90 nm CMOS fabrication technology. The system blocks and the behaviour are defined and the logical design is implemented in gate {{level in the}} design phase. Then, the logic circuits are simulated and the subunits are converted in to 90 nm CMOS layout. Finally, in order to construct the VLSI system these units are placed in the floor plan and simulated with analog and digital, logic and switch level simulators. The results of the simulations indicates that the VLSI system can control different instructions which can divided into sub groups: transfer instructions, arithmetic and logic <b>instructions,</b> rotate and <b>shift</b> <b>instructions,</b> branch instructions, input/output instructions, control instructions. The data bus {{of the system is}} 16 -bit. It runs at 200 MHz, and operating power is 1. 2 V. In this paper, the parametric analysis of the system, the design steps and obtained results are explained...|$|R
50|$|Pegasus {{had eight}} accumulators, seven {{of which could}} also be used as index registers. (It was the first {{computer}} to allow this dual use.) Accumulators 6 and 7 were known as p and q and were involved in multiply and divide and some double length <b>shift</b> <b>instructions.</b> It had 56 words of fast memory stored in nickel delay lines, which was supplemented by a magnetic drum holding 5120 words. A word was 40 bits, of which one bit was for parity checking. Two 19-bit instructions were packed into one word and the extra bit (not counting the parity bit) could be used to indicate a breakpoint (optional stop), to assist in debugging. It had a relatively generous instruction set for a computer of its time, but there was no explicit hardware provision for handling either characters or floating point numbers.|$|R
50|$|XOP: Integer vector multiply-accumulate instructions, integer vector {{horizontal}} addition, integer vector compare, <b>shift</b> {{and rotate}} <b>instructions,</b> byte permutation and conditional move instructions, floating point fraction extraction.|$|R
40|$|Abstract. Finitefieldarithmetichasreceivedaconsiderableattentioninthecurrentcryptographic applications. Many {{researchers}} {{have focused on}} finite field multiplication due to its importance in various cryptographic operations. Moreover, finite field multiplication {{can be considered as}} a cornerstone for elliptic curve cryptosystems. Fan and Hasan [1] introduced a new sub-quadratic computational complexity approach for finite field multiplication. It is based on Toeplitz matrix-vector products. In this paper we consider efficient implementation of this approach on general purpose processors usingType II Optimal Normal Basis (ONB II). To this end, a memory and time efficient implementation scheme is proposed for the Fan and Hasan approach. Also, in this paper we provide {{a modified version of the}} best quadratic complexity multiplication algorithm due to Reyhani-Masoleh [2]. The proposed modification reduces the number of OR and <b>SHIFT</b> <b>instructions</b> by 50 % and the number of AND instructions by about 25 %. We simulate the implementation on three different architectures and present the results. Furthermore, we present an idea to fully parallelize the implementation of the Fan and Hasan scheme...|$|R
50|$|Throughout Weinberg’s principalship, {{he focused}} on {{preparing}} students academically and socio-emotionally for success in college and their future careers. In service of this vision, Weinberg funneled the school's resources, particularly the limited resource of time, towards improving students’ access to quality instruction. A principal strategy of this goal was to support teachers in implementing the Common Core Learning Standards. The Common Core {{is a set of}} national standards which outline the core skills students must master at each point in their academic careers to be on track for success in college. Weinberg supported teachers in rising to the challenge of implementing the standards by creating a culture of collaboration. Teachers agreed to work in teams and devote an extended amount of professional learning time each week to analyzing and discussing student work. This time was instrumental in allowing teachers to better understand students’ needs, determine how to <b>shift</b> <b>instruction</b> to support their growth, and refine assessments to better measure their progress towards mastering the Common Core.|$|R
40|$|Objectives: To {{evaluate}} the students ability {{to implement the}} ONOPs for various instrument and component failures; perform a normal plant power reduction; and to execute the EOPs for a Steam Generator Tube Leak and Rupture combined with a Partial Loss of Power and failed equipment. Initial Conditions: Unit 2 is at 100 % power MOC Turnover: The plant is operating at 100 % power, MOC. The 2 A Main Feedwater Pump has developed a Oil System flange leak and management has {{made the decision to}} promptly reduce power to 40 % within one hour in order to facilitate repairs. 2 A Emergency Diesel Generator is out of service for relay replacement, expected back in four hours. 2 A Auxiliary Feedwater Pump is out of service for bearing replacement, not expected back this <b>shift.</b> <b>Instructions</b> to the <b>shift</b> are to reduce power to 40 % and remove the 2 A Main Feedwater Pump from service. D [...] nicti-n hnlfilnotinnc- FSFAS rpinvs fnr RIAS and Start-Up Dower supply breaker failures...|$|R
40|$|Abstract — In {{order to}} provide the best {{performance}} for memory accesses in the multimedia extensions that load or store consecutive subwords from/to memory, the memory access must be correctly aligned. That means that an n-byte transfer must be set on an n-byte boundary. In most SIMD architectures, unaligned memory accesses have a large performance penalty or are even disallowed. For example, our result shows that for addition of two arrays of size 1024 × 1024, whose addresses are either aligned or unaligned, aligned code is 1. 47 times faster than unaligned code using SSE instructions. Hence, in this paper we evaluate {{the advantages and disadvantages of}} different techniques to avoid misaligned memory accesses such as replication of data in memory, padding of data structures, loop peeling, and <b>shift</b> <b>instructions.</b> Our result shows that the MMX implementation of the FIR filter using replication of data is up to 2. 20 times faster than the MMX implementation with misaligned accesses. Furthermore, the MMX and SSE implementations using loop peeling technique are up to 1. 45 and 1. 66 faster than their implementation for addition of two arrays with different sizes, respectively. Keywords—Multimedia extensions, SIMD, Data alignment. I...|$|R
40|$|University professors {{collaborated with}} a fifth grade science teacher to {{implement}} a mixed method study that investigated {{the effectiveness of a}} collaboratively developed planning model on fifth grade student science knowledge gain and the impact of coaching on teacher instructional change. For one school year, from the fall through the spring semester, the teacher implemented the planning model and was coached twice monthly by the professors. The research questions were: (1) what is the effect of the science planning model on fifth grade student science content gain on students receiving the treatment and those not receiving the treatment?; (2) what is the effect of the science planning model on fifth grade at-risk student science content gain and other fifth grade student science content gain when both groups receive the treatment?; and (3) what kind of change occurs in instructional delivery when content experts collaborate with and coach a fifth grade classroom science teacher? Science instruction integrating reading and writing strategies enhanced science knowledge gains of at-risk students. Coaching a teacher through the implementation of a planning model <b>shifted</b> <b>instruction</b> from teacher-centered to student-centered and placed the construction of science knowledge onto the students...|$|R
40|$|The {{predictability}} of data {{values is}} studied at a fnn-damental level. Two basic predictor models are defined: Computational predictors pelform an operation on pre-vious values to yield predicted next values. Examples we study are stride value prediction (which adds a delta to a previous value) and last value prediction (which peforms the trivial identity operation {{on the previous}} value); Context Based predictors match recent value history (con-text) with previous value history and predict values based entirely on previously observed patterns. To understand the potential of value prediction we per-form simulations with unboundedprediction tables that are immediately updated using correct data values. Simula-tions of integerSPEC 95 benchmarks how that data values can be highly predictable. Best pe~onnance is obtained with context based predictors; overall prediction accura-cies are between 56 % and 91 o/o, The context based pre-dictor typically has an accuracy about 20 % better than the computational predictors (last value and stride). Compati-son of context based prediction and stride prediction shows that the higher accuracy of context based prediction is due to relatively few static instructions giving large improve-ments; this suggests the usefulness of hybrid predictors. Among different instruction types, predictability varies sig-nijicantly. In general, load and <b>shift</b> <b>instructions</b> are more dificult to predict correctly, whereas add instructions are more predictable. ...|$|R
50|$|Another unusual feature {{was that}} rather than execute mask, rotate, <b>shift</b> and merge <b>instructions</b> in the {{arithmetic}} logic unit (ALU), {{as is the case}} with most microprocessors, the 8X300 had separate mask, rotate, shift and merge units. Data could therefore be rotated, masked, modified, shifted and merged (in that order), all in one instruction cycle.|$|R
40|$|ElementaryAt {{a school}} site {{following}} implementation of 6 Trait writing, teachers felt that students benefitted by the implemention {{but that there}} was also a need for supplemental materials and approaches to balance writing instruction. The results were a pedagogical <b>shift</b> in writing <b>instruction</b> to include Lucy Calkins Units of Study (Writer’s Workshop). This plan helps support the integration of these programs...|$|R
50|$|In 1992 Cooper {{sold the}} American Pistol Institute. Under {{the new owner}} the <b>instruction</b> <b>shifted</b> away from modern {{technique}} as taught by Cooper, both in content and quality and the school was not well regarded. Cooper dissociated himself from the school. During this time Cooper held classes occasionally at the National Rifle Association Whittington Center in New Mexico and other locations.|$|R
25|$|Schools {{are well}} {{distributed}} throughout Ladakh but 75% of them provide only primary education. 65% of children attend school, but absenteeism of {{both students and}} teachers remains high. In both districts the failure rate at school-leaving level (class X) has for many years been around 50%. Before 1993, students were taught in Urdu until they were 14, after which the medium of <b>instruction</b> <b>shifted</b> to English.|$|R
50|$|Implementation of a HAMT {{involves}} the use of the population count function, which counts the number of ones in the binary representation of a number. This operation is available in many instruction set architectures, but it is available in only some high-level languages. Although population count can be implemented in software in O(1) time using a series of <b>shift</b> and add <b>instructions,</b> doing so may perform the operation an order of magnitude slower.|$|R
5000|$|These {{schools were}} {{previously}} under direct {{supervision of the}} Republic of China (Taiwan) Ministry of Education until 1976 when Presidential Decree 176 of 1973 (sometimes called the [...] "Filipinization" [...] decree) of former President Ferdinand Marcos placed all foreign schools {{under the authority of}} the Department of Education. The decree effectively halved the time allotted for Chinese subjects, while Tagalog became a required subject, and the medium of <b>instruction</b> <b>shifted</b> from Mandarin Chinese to English.|$|R
40|$|This {{paper will}} {{describe}} a synopsis {{of the development}} and application of a survey instrument to assess team skills and professional development outcomes of Team-Based Learning (TBL) in a human factors course. TBL is an advancing teaching pedagogy that <b>shifts</b> <b>instruction</b> from a traditional lecture-based teaching paradigm to a structured learning sequence that includes individual student preparation outside of class followed by active, in-class problem solving exercises completed by student learning teams. As an evolving teaching method, TBL appears to be producing new empirical learning outcomes in areas that have only preliminarily been explored. Traditionally, the effectiveness of TBL has been assessed through grades and numeric measures of performance; however, TBL was designed to both enhance learning as well as team collaboration and critical thinking skills. Thus there {{a need for a}} validated measurement instrument emerged to assess the development of team skills in TBL classes. The newly developed survey instrument is designed to assess three overarching factors within the TBL framework: 1) attitudes and beliefs about learning; 2) motivation to learn; and 3) professional development. A pilot survey was created and administered in the summer of 2013 to 25 undergraduate students at a large Mid-Western university and was tested for internal consistency. To further improve the quality of the survey, two focus groups were also conducted. In the fall of 2013 the revised survey was administered to 182 undergraduate students and in the spring of 2014 to 197 undergraduate students. Based on encouraging results, the survey was used to assess the learning outcome gains in a graduate level human factors course. Preliminary results for this sample showed modest gains in critical thinking and external motivation. The survey has the potential to provide instructors a mechanism to measure student learning gains in TBL educational settings...|$|R
