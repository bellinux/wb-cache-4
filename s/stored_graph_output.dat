0|587|Public
40|$|I have plotted {{an image}} by using {{mathematical}} {{functions in the}} Database " 4 th Dimension". I'm going to show an alternative method to: detect which sector has been clicked; highlight it and combine it with other sectors already highlighted; <b>store</b> the <b>graph</b> information in an efficient way; load and splat image layers to reconstruct the <b>stored</b> <b>graph.</b> Comment: 4 pages, 3 figure...|$|R
5000|$|Performance data {{collection}} exists in OpenNMS {{for a number}} of network protocols including SNMP, HTTP, JMX, WMI, XMP, XML, NSClient, and JDBC. Data can be collected, <b>stored,</b> <b>graphed</b> as well as checked against thresholds.|$|R
50|$|Gri {{can make}} x-y graphs, contour graphs, and image <b>graphs,</b> <b>outputting</b> {{the results in}} PostScript format. Control is {{provided}} over all aspects of drawing, e.g. line widths, colors, and fonts. A limited TeX-like syntax provides common mathematical symbols.|$|R
5000|$|A graph {{database}} {{is a kind}} of NoSQL {{database that}} uses graph structures with nodes, edges, and properties to represent and <b>store</b> information. General <b>graph</b> databases that can <b>store</b> any <b>graph</b> are distinct from specialized graph databases such as triplestores and network databases.|$|R
40|$|This paper {{describes}} a interchangable file format for <b>storing</b> <b>graphs</b> in a file, {{as it is}} used by the GraphEd system. This format combines an adjacency list with embedded graphical information. It is designed as an extendible format and provides facilities such that other programs can easily add their own information in their own format. 1 Introduction With the devopment of several graph editors and graph manipulation packages, such as GraphEd [2, 3], EDGE [7], VEGA, vcg [6], gem, dot, graphbase [5], or daVinci [1], several formats for <b>storing</b> <b>graphs</b> have been implemented. However, nearly each tool uses its own format, and almost all of them are pairwise incompatible. Exceptions are VCG which uses EDGE's format, and gem uses GraphEd's format. As a consequence, it is quite difficult to exchange graphs between different tools. Not only the syntax is different, there are also several semantic differences: ffl Some formats support only directed or only undirected graphs. ffl Some formats [...] ...|$|R
40|$|International audienceFor each non-negative integer k, {{we provide}} all outerplanar {{obstructions}} {{for the class}} of graphs whose cycle matroid has pathwidth at most k. Our proof combines a decomposition lemma for proving lower bounds on matroid pathwidth and a relation between matroid pathwidth and linear width. Our results imply {{the existence of a}} linear algorithm that, given an outerplanar <b>graph,</b> <b>outputs</b> its matroid pathwidth...|$|R
3000|$|... is satisfied. Thus, if {{we assume}} that we have {{sufficient}} memory for <b>storing</b> reduced <b>graphs,</b> the proposed approach is better than Dijkstra’s and A* algorithms; taking into account that if we reduce original graph as proposed before, always we can obtain a response in a lower runtime. The proposal is not useful when the available memory is low and does not permit to <b>store</b> reduced <b>graphs.</b>|$|R
50|$|A graph {{database}} {{has a more}} generalized structure than a triplestore, using graph structures with nodes, edges, and {{properties to}} represent and <b>store</b> data. <b>Graph</b> databases might provide index-free adjacency, meaning every element contains a direct pointer to its adjacent elements, and no index lookups are necessary. General graph databases that can <b>store</b> any <b>graph</b> are distinct from specialized graph databases such as triplestores and network databases.|$|R
40|$|Graphs are the {{ubiquitous}} models for constructing {{both natural and}} human-made structures. Many practical problems can be represented by graphs. They {{can be used to}} model many applications such as physical, biological and social systems. With the emergence of these applications, developments of graph databases are very useful to <b>store</b> <b>graph</b> data. Due to the existence of noise (e. g., duplicated graphs) in the graph database, we investigate the problem of <b>storing</b> the same <b>graphs</b> in the single graph database. Therefore, detecting and eliminating of automorphic graphs in a graph database become an important research area. In this paper, we propose a novel DAGC algorithm to identify and removal of automorphic <b>graph</b> <b>storing</b> into the <b>graph</b> database using AdE index structure. AdE index structure incorporates graph structural information of each graph in the database. The computational time complexity is significantly reduced compared to canonical labeling approach used in most graph matching algorithms and F-GAF algorithm. This paper demonstrates the effectiveness and efficiency of the proposed method through experiments on various types of graphs...|$|R
25|$|The {{differential}} analyser, {{a mechanical}} analog computer designed to solve differential equations by integration using wheel-and-disc mechanisms, was conceptualized in 1876 by James Thomson, {{the brother of}} the more famous Lord Kelvin. He explored the possible construction of such calculators, but was stymied by the limited output torque of the ball-and-disk integrators. In a differential analyzer, the output of one integrator drove the input of the next integrator, or a <b>graphing</b> <b>output.</b>|$|R
40|$|Nowadays, graph {{databases}} {{are employed}} when relationships between entities {{are in the}} scope of database queries to avoid performance-critical join operations of relational databases. Graph queries are used to query and modify <b>graphs</b> <b>stored</b> in <b>graph</b> databases. Graph queries employ graph pattern matching that is NP-complete for subgraph isomorphism. Graph database views can be employed that keep ready answers in terms of precalculated graph pattern matches for often stated and complex graph queries to increase query performance. However, such graph database views must be kept consistent with the <b>graphs</b> <b>stored</b> in the <b>graph</b> database. In this paper, we describe how to use incremental graph pattern matching as technique for maintaining graph database views. We present an incremental maintenance algorithm for graph database views, which works for imperatively and declaratively specified graph queries. The evaluation shows that our maintenance algorithm scales {{when the number of}} nodes and edges <b>stored</b> in the <b>graph</b> database increases. Furthermore, our evaluation shows that our approach can outperform existing approaches for the incremental maintenance of graph query results. Comment: In Proceedings GaM 2016, arXiv: 1612. 0105...|$|R
40|$|Summary: We {{introduce}} RNAshapes, a {{new software}} package that integrates three RNA analysis tools {{based on the}} abstract shapes approach: the analysis of shape representatives, the calculation of shape probabilities and the consensus shapes approach. This new package is completely reimplemented in C and outruns the original implementations significantly in runtime and memory requirements. Additionally, we added a number of useful features like suboptimal folding with correct dangling energies, structure <b>graph</b> <b>output,</b> shape matching and a sliding window approach. Availability: RNAshapes is freely available a...|$|R
5000|$|AG-relation (Association <b>Graph)</b> <b>stores</b> {{association}} relationships ...|$|R
5000|$|CG-relation (Characteristic <b>Graph)</b> <b>stores</b> {{characteristic}} relationships ...|$|R
25|$|There are {{different}} ways to <b>store</b> <b>graphs</b> in a computer system. The data structure used depends on both the graph structure and the algorithm used for manipulating the graph. Theoretically one can distinguish between list and matrix structures but in concrete applications the best structure is often a combination of both. List structures are often preferred for sparse graphs as they have smaller memory requirements. Matrix structures {{on the other hand}} provide faster access for some applications but can consume huge amounts of memory.|$|R
25|$|The {{differential}} analyser, {{a mechanical}} analog computer designed to solve differential equations by integration, used wheel-and-disc mechanisms {{to perform the}} integration. In 1876 James Thomson had already discussed the possible construction of such calculators, {{but he had been}} stymied by the limited output torque of the ball-and-disk integrators. In a differential analyzer, the output of one integrator drove the input of the next integrator, or a <b>graphing</b> <b>output.</b> The torque amplifier was the advance that allowed these machines to work. Starting in the 1920s, Vannevar Bush and others developed mechanical differential analyzers.|$|R
5000|$|Formspring uses Cassandra {{to count}} responses, {{as well as}} <b>store</b> Social <b>Graph</b> data (followers, following, blockers, blocking) for 26 Million {{accounts}} with 10 million responses a day ...|$|R
50|$|Maps are <b>stored</b> as <b>graphs,</b> or two {{dimensional}} arrays of objects with attributes of location and category, where some common categories include parks, roads, cities, and the like.|$|R
40|$|We {{study the}} ALT {{algorithm}} [19] for the point-to-point shortest path {{problem in the}} context of road networks. We suggest improvements to the algorithm itself and to its preprocessing stage. We also develop a memory-efficient implementation of the algorithm that runs on a Pocket PC. It <b>stores</b> <b>graph</b> data in a flash memory card and uses RAM to store information only for the part of the graph visited by the current shortest path computation. The implementation works even on very large graphs, including that of the North America road network, with almost 30 million vertices...|$|R
50|$|The ABC-machine has an {{uncommon}} memory model. It has a <b>graph</b> <b>store</b> {{to hold the}} Clean graph that is being rewritten. The A(rgument)-stack holds arguments that refer to nodes in the <b>graph</b> <b>store.</b> This way, a node's arguments can be rewritten, which is needed for pattern matching. The B(asic value)-stack holds basic values (integers, characters, reals, etc.). While not strictly necessary (all these elements could be nodes in the <b>graph</b> <b>store</b> as well), using a separate stack is much more efficient. The C(ontrol)-stack holds return addresses for flow control.|$|R
40|$|I have plotted {{an image}} (Figure 1) by using {{mathematical}} functions. I’m {{going to show}} an alternative method to: detect which sector has been clicked; highlight it and combine it with other sectors already highlighted; <b>store</b> the <b>graph</b> information in an efficient way; load and splat image layers to reconstruct the <b>stored</b> <b>graph.</b> 1 Detecting the clicked area Instead of using the button grid method or the generalized image maps [2], to discretize the space and approximate the curves with rectangles, I’m using an alternative system to detect the clicked image partition based on a mathematical continuous representation. Any window {{can be considered as}} a cartesian plane having the upper/left corner as center and having the y axes reversed. One can make a translation so that the center of the window coincides with the center of the cartesian plane as well. Let (x 0,y 0) be the new center; let (mx,my) be the clicked point; the following procedure shows how to evaluate the translated coordinates (x,y) ...|$|R
5000|$|... #Caption: Transitive closure {{constructs}} the <b>output</b> <b>graph</b> {{from the}} input graph.|$|R
40|$|In {{contemporary}} world, {{there is}} a lot of different social applications. This work aims to create user friendly genealogic application similar to MyHeritage. com. This application allows users to create and edit their own family tree, search for matches based on similarity with the possibility to merge family trees. Among other functionalities, the application provides users with possibilities to create photogallery, share information or display profiles of other persons. As a base for processing and <b>storing</b> <b>graph</b> data like family trees graph database Neo 4 j was used whose performance was later tested and compared with selected relational database...|$|R
40|$|This paper {{presents}} a heuristic for guiding A* search for finding the shortest distance path between two vertices in a connected, undirected, and explicitly <b>stored</b> <b>graph.</b> The heuristic requires {{a small amount}} of data to be stored at each vertex. The heuristic has application to quickly detecting relationships between two vertices in a large information or knowledge network. We compare the performance of this heuristic with breadth-first search on graphs with various topological properties. The results show that one or more orders of magnitude improvement in the number of vertices expanded is possible for large graphs, including Poisson random graphs...|$|R
40|$|In {{order to}} realize {{the vision of the}} Semantic Web, a {{semantic}} model for encoding content in the World Wide Web, efficient storage and retrieval of large RDF data sets is required. A common technique for <b>storing</b> RDF data (<b>graphs)</b> is to use a single relational database table, a triple <b>store,</b> for the <b>graph.</b> However...|$|R
30|$|The {{algorithm}} {{to detect}} a line sigraph and output its line root sigraph {{is an extension of}} a paper named “An Optimal Algorithm to Detect a Line <b>Graph</b> and <b>Output</b> its Root Graph” by Lehot (1974).|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedA digital computer program which will provide accurate and stable solutions of linear and nonlinear ordinary differential equation is described, as are subprograms which simulate {{many of the}} nonlinearities occurring in feedback control systems. The program employs fourth order Runge-Kutta numerical integration with automatic error checking and interval modification. Specialized coding sheets assist {{in the preparation of}} input data, and built-in print and <b>graph</b> <b>output</b> routines provide a permanent record of input equations, parameter values and output data for each solution. The program is flexible, yet it can be used by a person with only a rudimentary knowledge of FORTRAN programming. [URL] United States Nav...|$|R
40|$|The {{large volumes}} of {{information}} that arise from telecommunications and cyberspace systems can be represented by massive digraphs. The size of these graphs are so huge that {{they are unable to}} be processed by current technologies. The graphs require new and innovative methods of processing and visualizing. Graph surfaces of hierarchical graph slices have been suggested as a way of representing massive digraphs. In this chapter an approach is presented which involves encoding Lipschitz functions into monotone k-logic functions using symmetric chain decompositions (SeD). This approach proposes to address some of the issues concerning huge graphs by providing memory minimization techniques that can be applied to <b>storing</b> <b>graph</b> surfaces...|$|R
40|$|Abstract—In {{order to}} explore the {{feasibility}} of application of virtual technical platform, At the moment, mechanical & electrical equipment was used to rolling indicator. It is studied the control of graphic display on DSP graphics processing technology, combined with the sensor signal, virtual level indicating shall be putted into effect. Building the development platform as the core of DAM 6416 P, Research & analysis of line generating algorithm and match corresponding colors for graphics. On this basis, apply bresenham algorithm to digital signal that tilt sensor <b>output,</b> design centrosymmetric <b>graph,</b> <b>output</b> in real time to the dual plasma display, at the same time, In order to more visually intuitive, match different colors for output...|$|R
40|$|Abstract. This paper {{describes}} a simple method {{of communication between}} <b>graph</b> <b>store</b> and client over a web. We propose a mechanism based on the Hypertext Transfer Protocol standard. It {{can be used to}} express select and update operations across various Resource Description Framework (RDF) <b>graph</b> <b>stores.</b> We present a fast method that suffice clients to use only Linked Data and Representational State Transfer style...|$|R
40|$|Multilabel {{classification}} is {{an important}} topic in machine learning that arises naturally from many real world applications. For example, in document classification, a research article can be categorized as “science”, “drug discovery” and “genomics” at the same time. The goal of multilabel classification is to reliably predict multiple outputs for a given input. As multiple interdependent labels can be “on” and “off” simultaneously, the central problem in multilabel classification is how to best exploit the correlation between labels to make accurate predictions. Compared to the previous flat multilabel classification approaches which treat multiple labels as a flat vector, structured output learning relies on an <b>output</b> <b>graph</b> connecting multiple labels to model the correlation between labels in a comprehensive manner. The main question studied in this thesis is how to tackle multilabel classification through structured output learning. This thesis starts with an extensive review {{on the topic of}} classification learning including both single-label and multilabel classification. The first problem we address is how to solve the multilabel classification problem when the <b>output</b> <b>graph</b> is observed apriori. We discuss several well-established structured output learning algorithms and study the network response prediction problem within the context of social network analysis. As the current structured output learning algorithms rely on the <b>output</b> <b>graph</b> to exploit the dependency between labels, the second problem we address is how to use structured output learning when the <b>output</b> <b>graph</b> is not known. Specifically, we examine the potential of learning on a set of random <b>output</b> <b>graphs</b> when the “real” one is hidden. This problem is relevant as in most multilabel classification problems there does not exist any <b>output</b> <b>graph</b> that reveals the dependency between labels. The third problem we address is how to analyze the proposed learning algorithms in a theoretical manner. Specifically, we want to explain the intuition behind the proposed models and to study the generalization error. The main contributions of this thesis are several new learning algorithms that widen the applicability of structured output learning. For the problem with an observed <b>output</b> <b>graph,</b> the proposed algorithm “SPIN” is able to predict an optimal directed acyclic graph from an observed underlying network that best responses to an input. For general multilabel classification problems without any known <b>output</b> <b>graph,</b> we proposed several learning algorithms that combine a set of structured output learners built on random <b>output</b> <b>graphs.</b> In addition, we develop a joint learning and inference framework which is based on max-margin learning over a random sample of spanning trees. The theoretic analysis also guarantees the generalization error of the proposed methods...|$|R
40|$|International audienceThe growing use of Model Driven Engineering (MDE) {{techniques}} inindustry {{has emphasized}} scalability of existing model persistence solutions asa major issue. Specifically, {{there is a}} need to store, query, and transform verylarge models in an efficient way. Several persistence solutions based on relationaland NoSQL databases have been proposed to achieve scalability. However, existingsolutions often rely on a single data store, which suits a specific modelingactivity, but may not be optimized for other use cases. In this article we presentNEOEMF, a multi-database model persistence framework able to store very largemodels in key-value <b>stores,</b> <b>graph</b> databases, and wide column databases. We introduceNEOEMF core features, and present the different data stores and theirapplications. NEOEMF is open source and available online...|$|R
40|$|This paper {{presents}} a new framework for improved large vocabulary Mandarin speech recognition using prosodic features. The prosodic information is formulated in a probabilistic model well compatible {{to the conventional}} maximum a posteriori (MAP) framework for large vocabulary speech recognition. A set of prosodic features considering the special characteristics of Mandarin Chinese is developed, and both syllable-level and prosodic-word-level prosodic models are trained with the decision tree algorithm. A two-pass recognition process is used, in which each word arc in the word <b>graph</b> <b>output</b> by the first pass is rescored in the second pass using the two prosodic models. The experiments show the reasonable improvements in recognition accuracy. This approach does NOT require a prosodic labeled training corpus, and works for the large-scale speaker-independent task. 1...|$|R
40|$|The {{heart is}} one of vital organs in human body. Incidence of heart disease can be fatal for the patient. Myocardial ischemia, the disease that is often {{suffered}} by the human, is a disease due to clogged heart arteries blood vessels. One {{of the ways to}} detect this disease is by reading the <b>graph</b> <b>output</b> of electrocardiogram (ECG) signal. ECG signal represents the condition and activity of the heart. Specialized knowledge, accuration and expertise are required to read ECG graph. To help expert or doctor, expert system based on artificial intelligent, such as Fuzzy Logic approach, can be applied to improve diagnostic accuracy and thoroughness. Fuzzy logic can be applied because of it flexibility to understand the linguistic variables used in identifying myocardial ischemia disease...|$|R
5000|$|A {{seismogram}} is a <b>graph</b> <b>output</b> by a seismograph. It is {{a record}} of the ground motion at a measuring station as a function of time. Seismograms typically record motions in three cartesian axes (x, y, and z), with the z axis perpendicular to the Earth's surface and the x- and y- axes parallel to the surface. The energy measured in a seismogram may result from an earthquake or from some other source, such as an explosion. Seismograms can record lots of things, and record many little waves, called microseisms. These tiny microseisms can be caused by heavy traffic near the seismograph, waves hitting a beach, the wind, and any number of other ordinary things that cause some shaking of the seismograph.|$|R
30|$|Graph {{databases}} {{originated from}} graph theory and use graphs as their data model. A graph is a mathematical concept {{used to represent}} a set of objects, known as vertices or nodes, and the links (or edges) that interconnect these vertices. By using a completely different data model than key-value, column-family, and document <b>stores,</b> <b>graph</b> databases can efficiently store the relationships between different data nodes. In graph databases, the nodes and edges also have individual properties consisting of key-value pairs. Graph databases are specialized in handling highly interconnected data and therefore are very efficient in traversing relationships between different entities. They are suitable in scenarios such as social networking applications, pattern recognition, dependency analysis, recommendation systems and solving path finding problems raised in navigation systems [11, 44].|$|R
