1|6|Public
40|$|Abstract. Recently the Single-dimension Software Pipelining (SSP) {{technique}} was proposed to software pipeline loop nests at an arbitrary loop level [18 – 20]. However, SSP schedules require {{a high number}} of rotating registers, and may become infeasible if register needs exceed the number of available registers. It is therefore desirable to design a method to compute the register pressure quickly (without actually performing the register allocation) as an early measure of the feasibility of an <b>SSP</b> <b>schedule.</b> Such a method can also be instrumental to provide a valuable feedback to processor architects in their register files design decision, as far as the needs of loop nests are concerned. This paper presents a method that computes quickly the minimum number of rotating registers required by an <b>SSP</b> <b>schedule.</b> The results have demonstrated that the method is always accurate and is 3 to 4 orders of magnitude faster on average than the register allocator. Also, experiments suggest that 64 floatingpoint rotating registers are in general enough to accommodate the needs of the loop nests used in scientific computations. ...|$|E
40|$|Traditionally, {{software}} pipelining {{is applied}} {{either to the}} innermost loop of a given loop nest or from the innermost loop to outer loops. This paper proposes a 3 -step approach, called Single-dimension Software Pipelining (SSP), to software pipeline a loop nest at an arbitrary loop level that has a rectangular iteration space and contains no sibling inner loops in it. The first step identifies the most profitable loop level for software pipelining in terms of initiation rate, data reuse potential, or any other optimization criteria. The second step simplifies the multi-dimensional data-dependence graph (DDG) of the selected loop level into a 1 -dimensional DDG and constructs a 1 -dimensional schedule. Based on it, the third step derives a simple mapping function that specifies the schedule time for the operation instances in the multi-dimensional loop. The classical modulo scheduling is subsumed by SSP as a special case. SSP is also closely related to hyperplane scheduling, and, in fact, extends it to be resource-constrained. We prove that <b>SSP</b> <b>schedules</b> are correct, and at least as efficient as those schedules generated by traditional modulo scheduling methods. We extend <b>SSP</b> to <b>schedule</b> imperfect loop nests, which are most common at instruction-level. Multiple initiation intervals are naturally allowed to improve execution efficiency. Feasibility and correctness of our approach are verified by a prototype implementation in the ORC compiler for the IA- 64 architecture, tested with loop nests from Livermore and SPEC 2000 floating-point benchmarks. Preliminary experimental results reveal that, compared to modulo scheduling, software pipelining at an appropriate loop level results in significant performance improvement. Software pipelining is beneficial even with loop transformations beforehand...|$|R
40|$|A {{letter report}} {{issued by the}} Government Accountability Office with an {{abstract}} that begins "The Space Shuttle Program (<b>SSP)</b> is <b>scheduled</b> to retire in 2010, and the transition and retirement of its facilities and assets will be an immense undertaking involving approximately 654 facilities worth an estimated $ 5. 7 billion and equipment with an estimated value of more than $ 12 billion. NASA plans to retire the SSP in 2010 to make resources available for the Constellation program, which is producing {{the next generation of}} space vehicles by 2015. Many of the SSP's resources are expected to transition to Constellation while others will be dispositioned or preserved for their historic value. The Consolidated Appropriations Act, 2008 directed GAO to assess NASA's plans and progress in transitioning and retiring the SSP's facilities and equipment. More specifically, GAO examined 1) the challenges NASA faces in defining the scope and costs of transition and retirement activities, and 2) whether the cost of these efforts is transparent in NASA's budget requests. To address these objectives, GAO analyzed SSP plans, budget guidance, and other documents, and interviewed relevant government officials and contractors. ...|$|R
40|$|Abstract. We can {{reformulate}} {{a vehicle}} routing problem (VRP) as an open shop <b>scheduling</b> problem (<b>SSP)</b> by representing visits as activities, vehicles as resources on the factory floor, and travel as set up costs between activities. In this paper we present two reformulations: from VRP to open shop, and the inverse, from SSP to VRP. Not surprisingly, VRP technology performs poorly on reformulated <b>SSP’s,</b> as does <b>scheduling</b> technology on reformulated VRP’s. We present a pre-processing transformation that “compresses ” the VRP, transforming an element of travel into {{the duration of the}} visits. The compressed VRP’s are then reformulated as scheduling problem, to determine if it is primarily distance in the VRP that causes scheduling technology to degrade on the reformulated problem. This is a step towards understanding the features of a problem that make it more amenable to one technology rather than another. ...|$|R
40|$|Single-dimension Software Pipelining (SSP) {{has been}} {{proposed}} as an effective software pipelining technique for multidimensional loops [18]. However, the scheduling methods that actually produce the kernel code have not been published yet. Because of the multi-dimensional nature of <b>SSP</b> kernels, the <b>scheduling</b> problem is more complex and challenging than with modulo scheduling. The scheduler must handle multiple subkernels and initiation rates, scheduling constraints specific to SSP while producing a solution that minimizes the execution time of the final schedule. In this paper three approaches are proposed: the flat method, which schedules operations from different loop levels with the same priority, the level-by-level method, which schedules innermost operations first and does not let other operations interfere with the already scheduled levels, and the hybrid method, which uses the level-by-level mechanism for the innermost level and the flat solution for the other levels. We also break a scheduling constraint introduced in earlier publications and allow for a more compact kernel. The proposed approaches, combined with different sets of heuristics, have been implemented in the Open 64 /ORC compiler, compared on loop nests from the Livermore and NAS benchmarks...|$|R
40|$|Developing a {{software}} system for mission planners at NASA’s Johnson Space Center (JSC) {{to plan and}} schedule activities onboard the Space Shuttle or International Space Station (ISS) is a complex task. Due to {{the scope of the}} complete user requirements and budget restrictions, a full development of all capabilities was not practical. The planning system had to include not only capabilities for planning the daily activities onboard the spacecraft, but also had to include the capability to upload the plans to the onboard system and to merge plans and activities from planners at other remote planning centers, including Marshall Space Flight Center (MSFC) and International Partners. The Integrated Planning System (IPS) Consolidated Planning System (CPS) was developed in an incremental fashion to continually meet the most immediate needs for the users. CPS has been under development for over 8 years and has been operational at JSC for 5 years, supporting Space Shuttle Program (SSP) and ISS mission planning. The journey to this point of software capabilities has been slow, but steady. The current size of the software application is over 380 K SLOC. Initial development focused on capability for <b>scheduling</b> <b>SSP</b> missions, as this was the most immediate need. Next, the development focused on ISS capability, such as plan upload an...|$|R

