2736|1515|Public
5|$|The PlayStation Network is {{an online}} service with over 110 million users {{worldwide}} (as of July 2013). It comprises an online virtual market, the PlayStation Store, {{which allows the}} purchase and download of games and various forms of multimedia, a subscription-based online service known as PlayStation Plus and a social gaming networking service called PlayStation Home, which had over 41 million users worldwide {{at the time of}} its closure in March 2015. PlayStation Mobile (formerly PlayStation Suite) is a <b>software</b> <b>framework</b> that provides PlayStation content on mobile devices. Version 1.xx supports both PlayStation Vita, PlayStation TV and certain devices that run the Android operating system, whereas version 2.00 released in 2014 would only target PlayStation Vita and (optionally) PlayStation TV. Content set to be released under the framework consist of only original PlayStation games currently.|$|E
25|$|Apache Wave is a <b>software</b> <b>framework</b> for {{real-time}} collaborative editing online. Google {{originally developed}} it as Google Wave.|$|E
25|$|OpenNI is an {{open-source}} <b>software</b> <b>framework</b> that {{is able to}} read {{sensor data}} from Kinect, among other natural user interface sensors.|$|E
40|$|Abstract In {{light of}} recent {{advances}} in biomedical computing, big data science, and precision medicine, there is a mammoth demand for establishing algorithms in machine learning and systems genomics (MLSG), together with multi-omics data, to weigh probable phenotype-genotype relationships. <b>Software</b> <b>frameworks</b> in MLSG are extensively employed to analyze {{hundreds of thousands of}} multi-omics data by high-throughput technologies. In this study, we reviewed the MLSG <b>software</b> <b>frameworks</b> and future directions with respect to multi-omics data analysis and integration. Our review was targeted at researching recent approaches and technical solutions for the MLSG <b>software</b> <b>frameworks</b> using multi-omics platforms...|$|R
5000|$|... crop-soil {{systems in}} agriculture, via {{dedicated}} <b>software</b> <b>frameworks</b> (e.g. BioMA, OMS3, APSIM) ...|$|R
5000|$|There are now several <b>software</b> <b>frameworks</b> that {{implement}} the naked objects pattern: ...|$|R
25|$|Structural quality {{analysis}} and measurement is performed through {{the analysis of}} the source code, the architecture, <b>software</b> <b>framework,</b> database schema in relationship to principles and standards that together define the conceptual and logical architecture of a system. This is distinct from the basic, local, component-level code analysis typically performed by development tools which are mostly concerned with implementation considerations and are crucial during debugging and testing activities.|$|E
25|$|The U3 company {{works with}} drive makers (parent company SanDisk {{as well as}} others) to deliver custom {{versions}} of applications designed for Microsoft Windows from a special flash drive; U3-compatible devices are designed to autoload a menu when plugged into a computer running Windows. Applications must be modified for the U3 platform not to leave any data on the host machine. U3 also provides a <b>software</b> <b>framework</b> for independent software vendors interested in their platform.|$|E
25|$|This client {{media player}} was {{primarily}} programmed in C++, and {{made use of}} the Simple DirectMedia Layer (SDL) framework with an OpenGL renderer. Some of the third-party libraries that Plex Home Theater depended on was written in C, but are used with a C++ wrapper and loaded as shared libraries when used inside Plex. Since Plex Home Theater was based on XBMC Media Center it shared its flexible GUI toolkit and robust <b>software</b> <b>framework.</b> With themes based on a standard XML base, skinning and personal customization which was very accessible. Users could create their own skin (or simply modify an existing skin) and share it with others via third-party public websites for XBMC skin trading.|$|E
40|$|In {{recent years}} {{increased}} research activity in robotics {{has led to}} advancements in both hardware and software technologies. More complex hardware required increasingly sophisticated software infrastructures to operate it, {{and led to the}} development of several different robotics <b>software</b> <b>frameworks.</b> The driving forces behind the development of such frameworks is to cope with the heterogeneous and distributed nature of robotics software applications and to exploit more advanced software technologies in the robotics domain. So far, though, there has been not much effort to foster cooperation among these frameworks, neither on conceptual nor on implementation levels. Our research aims to analyse existing robotics <b>software</b> <b>frameworks</b> in order to identify possible levels of interoperability among them. The problem is tackled by determining a set of software concepts, in our case centering around component-based software development, which are used to determine a set of common architectural elements in an analysis of existing robotics <b>software</b> <b>frameworks.</b> The result is that these common elements can be used as interoperability points among <b>software</b> <b>frameworks.</b> Exploiting such interoperability gives developers new architectural design choices and fosters reuse of functionality already developed, albeit in another framework. It is also highly relevant for the development of new robotics <b>software</b> <b>frameworks,</b> as it opens smoother migration paths for developers to switch from one framework to another...|$|R
50|$|Free and {{open-source}} <b>software</b> <b>frameworks</b> {{exist as}} part of the Mozilla, LibreOffice, GNOME, KDE, NetBeans, and Eclipse projects.|$|R
50|$|The {{following}} table compares some of {{the most}} popular <b>software</b> <b>frameworks,</b> libraries and computer programs for deep learning.|$|R
500|$|The PlayStation Mobile (formerly PlayStation Suite) is a <b>software</b> <b>framework</b> {{that will}} be used to provide {{downloadable}} PlayStation content to devices running Android 2.3 and above as well as the PlayStation Vita. The framework will be cross-platform and cross-device, which is what Sony calls [...] "hardware-neutral". It was set to release before the end of calendar year 2011. In addition, Android devices that have been certified {{to be able to play}} back PlayStation Suite content smoothly will be certified with the PlayStation Certified certification.|$|E
500|$|Greatest Hits (North America), Platinum Range (PAL territories) and The Best (Japan and Asia) are {{video games}} for the Sony PlayStation, PlayStation 2, PlayStation 3, and PlayStation Portable {{consoles}} that have been officially re-released {{at a lower price}} by Sony. Each region has its own qualifications to enter the re-release program. Initially, during the PlayStation era, a game had to sell at least 150,000 copies (later 250,000) and be on the market {{for at least a year}} [...] to enter the Greatest Hits range. During the PlayStation 2 era, the requirements increased with the minimum number of copies sold increasing to 400,000 and the game had to be on the market for at least 9 months. For the PlayStation Portable, games had to be on the market for at least 9 months with 250,000 copies or more sold. Currently, a PlayStation 3 game must be on the market for 10 months and sell at least 500,000 copies to meet the Greatest Hits criteria. PS one Classics were games that were released originally on the PlayStation and have been re-released on the PlayStation Store for the PlayStation 3 and PlayStation Portable. Classics HD are compilations of PlayStation 2 games that have been remastered for the PlayStation 3 on a single disc with additional features such as upscaled graphics, PlayStation Move support, 3D support and PlayStation Network trophies. PlayStation Mobile (formerly PlayStation Suite) is a cross-platform, cross-device <b>software</b> <b>framework</b> aimed at providing PlayStation content, currently original PlayStation games, across several devices including PlayStation Certified Android devices as well as the PlayStation Vita.|$|E
2500|$|A new [...] "Core ML" [...] <b>software</b> <b>framework</b> will {{speed up}} app tasks {{involving}} artificial intelligence, such as image recognition.|$|E
5000|$|RESTful Web Services {{discusses}} many <b>software</b> <b>frameworks</b> {{which provide}} some or many {{features of the}} ROA. These include ...|$|R
5000|$|KDE Frameworks 5, a {{collection}} of libraries and <b>software</b> <b>frameworks</b> (5.0 released on July 7, 2014, and new major releases are made monthly) ...|$|R
30|$|Illustrate the {{scaling of}} various big data {{analytics}} platforms and demonstrate {{the advantages and}} drawbacks {{of each of these}} platforms including the <b>software</b> <b>frameworks.</b>|$|R
2500|$|Cocos2d is an {{open source}} <b>software</b> <b>framework.</b> It {{can be used to}} build games, apps and other cross {{platform}} GUI based interactive programs ...|$|E
2500|$|The {{resulting}} <b>software</b> <b>framework</b> {{received the}} name Cocoa {{for the sake}} of expediency, because the name had already been trademarked by Apple. For many years before this present use of the name, Apple's Cocoa trademark had originated as the name of a multimedia project design application for children. The application was originally developed at the Apple Advanced Technology Group under the name KidSim, and was then renamed and trademarked as [...] "Cocoa". The name, coined by Peter Jensen who was hired to develop Cocoa for Apple, was intended to evoke [...] "Java for kids", as it ran embedded in web pages. [...] The trademark, and thus the name [...] "Cocoa", was re-used to avoid the delay which would have occurred while registering a new trademark for this <b>software</b> <b>framework.</b> [...] The original [...] "Cocoa" [...] program was discontinued at Apple in one of the rationalizations that followed Steve Jobs's return to Apple. [...] It was then licensed to a third party and marketed as Stagecast Creator [...]|$|E
2500|$|On March 22, 2010, HipChat {{launched}} a web chat beta which allowed users to chat via the browser {{in addition to}} the existing Windows, Mac and Linux client. HipChat's web client came out of beta and SMS chat support was added on April 16, 2010. On May 12, 2010, HipChat unveiled its official API. HipChat is mainly written in PHP and Python using the Twisted <b>software</b> <b>framework,</b> but uses other [...] third-party services.|$|E
5000|$|The {{following}} APIs and <b>software</b> <b>frameworks</b> support JPEG XR {{and may be}} used {{in other}} software to provide JPEG XR support to end users: ...|$|R
5000|$|<b>Software</b> <b>frameworks</b> {{typically}} contain considerable housekeeping {{and utility}} code {{in order to}} help bootstrap user applications, but generally focus on specific problem domains, such as: ...|$|R
40|$|AbstractPresenting a {{personalized}} service and information {{is a key}} aspect of pervasive computing, but development of such context-aware systems is quite complicated. Context-aware applications {{should be able to}} acquire raw data from sensors, make high-level context information, recognize the user's situation, and adapt behavior of the system. Developers need an infrastructure layer to mitigate such complexities. Also, programmers have tended to use <b>software</b> <b>frameworks</b> for getting away from low-level communication challenges of the infrastructure layer. <b>Software</b> <b>frameworks</b> should develop an architecture and implement facilities to support programmers’ requirements. In this paper, we identify an existing obstacles that each programmer faced with in the application layer development. Following, we will introduce MVCC (Model-View-Controller-Context) as an architectural pattern solution for <b>software</b> <b>frameworks</b> to overcome the mentioned obstacles. This architectural pattern can be implemented in a variety of frameworks and will brings easy and rapid development, reusability of the code, and flexibility for developers...|$|R
2500|$|A {{platform}} (or [...] "computing platform") {{is defined}} as [...] "some sort of hardware architecture or <b>software</b> <b>framework</b> (including application frameworks), that allows software to run". As Rodney Brooks pointed out many years ago, {{it is not just}} the artificial intelligence software that defines the AI features of the platform, but rather the actual platform itself that affects the AI that results, i.e., there needs to be work in AI problems on real-world platforms rather than in isolation.|$|E
2500|$|...NET Framework (pronounced dot net) is a <b>software</b> <b>framework</b> {{developed}} by Microsoft that runs primarily on Microsoft Windows. It includes a large class library named Framework Class Library (FCL) and provides language interoperability (each language can use code written in other languages) across several programming languages. Programs written for [...]NET Framework execute in a software environment (in {{contrast to a}} hardware environment) named Common Language Runtime (CLR), an application virtual machine that provides services such as security, memory management, and exception handling. (As such, computer code written using [...]NET Framework is called [...] "managed code".) FCL and CLR together constitute [...]NET Framework.|$|E
2500|$|IBM {{has been}} a leading proponent of the Open Source Initiative, and began {{supporting}} Linux in 1998. The company invests {{billions of dollars in}} services and software based on Linux through the IBM Linux Technology Center, which includes over 300 Linux kernel developers. IBM has also released code under different open source licenses, such as the platform-independent <b>software</b> <b>framework</b> Eclipse (worth approximately US$40 million {{at the time of the}} donation), the three-sentence [...] (ICU) license, and the Java-based relational database management system (RDBMS) Apache Derby. IBM's open source involvement has not been trouble-free, however (see SCO v. IBM).|$|E
50|$|QP (Quantum Platform) is {{a family}} of lightweight, open source <b>software</b> <b>frameworks</b> for {{building}} responsive and modular real-time embedded applications as systems of cooperating, event-driven active objects (actors).|$|R
40|$|Applications of {{computer}} vision and signal processing are {{often based on}} a set of basic and commonly accepted ideas and algorithms. Thus, when developing new approaches, reuse plays a decisive role. Unfortunately, scientists are rarely familiar with the powerful concepts that the software engineering community provides in order to develop reusable software nor do they have the appropriate experience to apply these existing techniques right. For this reason, we present fundamental design and implementation aspects of component-based <b>software</b> <b>frameworks,</b> which should help to develop component-based <b>software</b> <b>frameworks</b> for a given application field...|$|R
50|$|Concurrent Collections (known as CnC) is a {{programming}} {{model for}} <b>software</b> <b>frameworks</b> to expose parallelism in applications. The Concurrent Collections conception originated from tagged stream processing development with HP TStreams.|$|R
2500|$|Boxee {{source code}} is {{otherwise}} in majority {{based on the}} XBMC (now Kodi) media center project's source code which Boxee uses as its <b>software</b> <b>framework,</b> and the Boxee developers contribute changes to that part back upstream to the XBMC project. So Boxee is partially open source and those parts are distributed under the GNU General Public License, however Boxee's social networking layer library, [...] "libboxee" [...] is closed source as it deals with proprietary methods of communication with Boxee's online back-end server which handles the user account information and social network communications between the users in the Boxee userbase, {{it is not clear}} if this way of using closed source libraries with a GPL licensed software passes the GPL linking exception or not.|$|E
2500|$|...NET Core is a {{free and}} {{open-source}} managed <b>software</b> <b>framework</b> for Windows, macOS and Linux. It consists of CoreCLR, a complete runtime implementation of CLR, the virtual machine that manages the execution of [...]NET programs. CoreCLR comes with an improved just-in-time compiler, called RyuJIT. [...] also includes CoreFX, which is a partial fork of FCL. While [...]NET Core shares a subset of [...]NET Framework APIs, it comes with its own API that {{is not part of}} [...]NET Framework. Further, [...]NET Core contains CoreRT, the [...]NET Native runtime optimized to be integrated into AOT compiled native binaries. A variant of the [...]NET Core library is used for UWP. 's command-line interface offers an execution entry point for operating systems and provides developer services like compilation and package management.|$|E
2500|$|Creating an Opportunistic Environment {{is another}} {{implementation}} of CPU-scavenging where special workload management system harvests the idle desktop computers for compute-intensive jobs, it also refers as Enterprise Desktop Grid (EDG). For instance, HTCondor [...] the open-source high-throughput computing <b>software</b> <b>framework</b> for coarse-grained distributed rationalization of computationally intensive tasks can be configured to only use desktop machines where the keyboard and mouse are idle to effectively harness wasted CPU power from otherwise idle desktop workstations. Like other full-featured batch systems, HTCondor provides a job queueing mechanism, scheduling policy, priority scheme, resource monitoring, and resource management. It {{can be used}} to manage workload on a dedicated cluster of computers as well or it can seamlessly integrate both dedicated resources (rack-mounted clusters) and non-dedicated desktop machines (cycle scavenging) into one computing environment.|$|E
40|$|In modern medical {{research}} and development, {{the variety of}} research tools has extended in the previous years. Exploiting the benefits of shared hardware platforms and <b>software</b> <b>frameworks</b> is crucial {{to keep up with}} the technological development rate. Sharing knowledge in terms of algorithms, applications and instruments allows researchers to help each other’s work effectively. Community workshops and publications provide a throughout overview of system design, capabilities, know-how sharing and limitations. This paper provides sneak peek into the emerging collaborative platforms, focusing on available open-source research kits, <b>software</b> <b>frameworks,</b> cloud applications, teleoperation training environments and shared domain ontologies...|$|R
50|$|KDE Frameworks is a {{collection}} of libraries and <b>software</b> <b>frameworks</b> by KDE that serve as technological foundation for KDE Plasma 5 and KDE Applications distributed under the GNU Lesser General Public License (LGPL).|$|R
40|$|<b>Software</b> <b>frameworks</b> are a reuse {{technology}} that makes architectural (as opposed to code) reuse possible. They {{have been successfully}} applied in the desktop and commercial arena but have so far been eschewed in the space sector. Alenia Spazio, {{as part of a}} drive to increase software reuse, have started a pilot project to develop the software for an Antenna Pointing Controller (APC) using framework technology. This work is done with P&P Software of Germany and takes as a starting point the AOCS Framework. The paper describes the experience acquired and the lesson learned applying the framework technology to the APC project. The first part gives an overview of object-oriented frameworks in general and of the AOCS Framework in particular. The second part describes the APC Framework, its close likeness to the AOCS Framework and the methodological and implementation issues that arose in the application of framework technology to an Antenna Pointing Controller. 1. Object-Oriented <b>Software</b> <b>Frameworks</b> <b>Software</b> <b>frameworks</b> [Pre 95, Fay 99] promote the reuse of entire architectures within...|$|R
