0|318|Public
50|$|Variables {{declared}} {{within a}} block by default have automatic storage, as do those explicitly declared with the auto or <b>register</b> <b>storage</b> class specifiers. The auto and register specifiers {{may only be}} used within functions and function argument declarations; as such, the auto specifier is always redundant. Objects declared outside of all blocks and those explicitly declared with the <b>static</b> <b>storage</b> class specifier have <b>static</b> <b>storage</b> duration. <b>Static</b> variables are initialized to zero by default by the compiler.|$|R
40|$|An on-chip bubble domain circuit organization. One or more <b>storage</b> <b>registers</b> are {{connected}} to a propagation path whereby data {{in the form of}} magnetic bubble domains (bubbles) may be transferred {{into and out of the}} <b>storage</b> <b>registers.</b> The propagation path includes a generator for producing the initial bubbles which are expanded into any desired number of new bubbles by a unique multiple output replicator. A unique input decoder is utilized to determine to which <b>storage</b> <b>register</b> the bubbles from the replicator will be directed along the propagation path. Those bubbles not selected may be annihilated. An output decoder utilizing essentially the same decoding scheme as the input decoder, selectively receives bubbles from the <b>storage</b> <b>register.</b> A transfer and replicate switch is utilized between the <b>storage</b> <b>register</b> and output decoder to selectively transfer bubbles to the output decoder. The output decoder may collapse all of the bubbles from certain <b>storage</b> <b>registers</b> so that only the information from the selected <b>storage</b> <b>register</b> reaches the detector. The detectors in turn produce the chip output signal. External control electronics are utilized to control the selective operation of the various devices utilized in the propagation path...|$|R
5000|$|Electronic Calculator with Dynamic Recirculating <b>Storage</b> <b>Register</b> ...|$|R
5000|$|Application Configuration - Access to {{application}} specific <b>static</b> <b>storage</b> for {{preference and}} other application settings.|$|R
5000|$|EN 15620 Steel <b>static</b> <b>storage</b> systems - Adjustable {{pallet racking}} - Tolerances, {{deformations}} and clearances ...|$|R
40|$|This paper {{defines a}} new type of <b>register,</b> called a <b>storage</b> <b>register,</b> to {{represent}} blocks of a replicated logical volume built from a distributed collection of disks. We give a formal specification of <b>storage</b> <b>registers</b> and, in doing so, we extend linearizability to a crash-recovery model. Existing algorithms that implement registers on top of message-passing primitives typically assume a crashstop failure model. Our work illustrates the difficulties in moving to a more general failure model and presents an efficient implementation of <b>storage</b> <b>registers</b> in a message-passing system with crash-recovery processes...|$|R
5000|$|EN 15512 Steel <b>static</b> <b>storage</b> systems - Adjustable {{pallet racking}} systems - Principles for {{structural}} design ...|$|R
50|$|In a <b>static</b> <b>storage</b> system such as {{standard}} shelving, stockers and pickers often {{do a lot}} of unnecessary travel.|$|R
5000|$|... 1 THROUGH 6 - Six <b>storage</b> <b>registers</b> {{for storing}} keys in KYK-13.|$|R
5000|$|... "Z" [...] ALL - Zeroizes all 6 <b>storage</b> <b>registers</b> when {{mode switch}} {{is set to}} [...] "Z".|$|R
25|$|As in C, C++ {{supports}} {{four types}} of memory management: <b>static</b> <b>storage</b> duration objects, thread storage duration objects, automatic storage duration objects, and dynamic storage duration objects.|$|R
5000|$|Registers {{related to}} {{fetching}} information from RAM, {{a collection of}} <b>storage</b> <b>registers</b> located on separate chips from the CPU: ...|$|R
50|$|Objects with {{automatic}} storage are local to the block {{in which they}} were declared and are discarded when the block is exited. Additionally, objects declared with the <b>register</b> <b>storage</b> class may be given higher priority by the compiler for access to registers; although they may not actually be stored in registers, objects with this storage class may not be used with the address-of (&) unary operator. Objects with <b>static</b> <b>storage</b> persist for the program's entire duration. In this way, the same object can be accessed by a function across multiple calls. Objects with allocated storage duration are created and destroyed explicitly with malloc, free, and related functions.|$|R
5000|$|... int n = 0;struct C { {{explicit}} C(int) {} C(const C&) { ++n; } // {{the copy}} constructor has a visible side effect}; // it modifies an object with <b>static</b> <b>storage</b> duration ...|$|R
5000|$|Chemical {{tanks are}} storage {{containers}} for chemicals. They {{come in a}} variety of sizes and shapes, and are used for <b>static</b> <b>storage,</b> processing, mixing, and transport of both raw materials and finished chemical products.|$|R
5000|$|... 'Latched' {{means the}} bits {{are put into}} a <b>storage</b> <b>register</b> (array of flip-flops) which holds its output {{constant}} even if the inputs change after being latched.|$|R
25|$|Variables of {{this type}} {{are very similar to}} <b>static</b> <b>storage</b> {{duration}} objects. The main difference is the creation time is just prior to thread creation and destruction is done after the thread has been joined.|$|R
50|$|DSZ (Decrement and Skip on Zero): Decrements <b>storage</b> <b>register</b> zero, and skips {{the next}} {{instruction}} if {{the result is}} zero. There was also an inverse form, Decrement and Skip if Not Zero.|$|R
50|$|Any object {{which could}} have <b>static</b> <b>storage</b> {{duration}} (i.e., lifetime spanning the entire execution of the program) may be given thread-local duration instead. The intent is that like any other static-duration variable, a thread-local object can be initialized using a constructor and destroyed using a destructor.|$|R
40|$|A {{system for}} {{analyzing}} asynchronous signals containing {{bits of information}} for ensuring the validity of said signals, by sampling each bit of information a plurality of times, and feeding the sampled pieces of bits of information into a sequence controlled is described. The sequence controller has a plurality of maps or programs through which the sampled pieces of bits are stepped so as to identify the particular bit of information and determine the validity and phase of the bit. The step in which the sequence controller is clocked is controlled by a <b>storage</b> <b>register.</b> A data decoder decodes the information fed out of the <b>storage</b> <b>register</b> and feeds such information to shift <b>registers</b> for <b>storage...</b>|$|R
5000|$|... "Kaphengst's {{approach}} is interesting {{in that it}} gives a direct proof of the universality of present-day digital computers, at least when idealized {{to the extent of}} admitting an infinity of <b>storage</b> <b>registers</b> each capable of storing arbitrarily long words" [...] (Shepherdson and Sturgis, p. 219) ...|$|R
5000|$|The 602 was {{available}} in four models: Model 1, Model 2, Model 50, and Model 51. The [...] "Series 50" [...] models were low cost versions that ran at a slower speed, with half as many program steps, and fewer <b>storage</b> <b>registers</b> and counters.|$|R
50|$|Control tables can {{reside in}} <b>static</b> <b>storage,</b> on {{auxiliary}} storage, {{such as a}} flat file or on a database or may alternatively be partially or entirely built dynamically at program initialization time from parameters (which themselves may reside in a table). For optimum efficiency, the table should be memory resident when the interpreter begins to use it.|$|R
5000|$|The C {{language}} has a {{need of a}} loophole because a certain situation exists. Variables with <b>static</b> <b>storage</b> duration are allowed to be defined with an initial value. However, the initializer can use only constants like string constants and other literals, and {{is not allowed to}} use non-constant elements like variable names, whether the initializer elements are declared [...] or not, or whether the static duration variable is being declared [...] or not. There is a non-portable way to initialize a [...] variable that has <b>static</b> <b>storage</b> duration. By carefully constructing a typecast on the left hand side of a later assignment, a [...] variable can be written to, effectively stripping away the [...] attribute and 'initializing' it with non-constant elements like other [...] variables and such. Writing into a [...] variable this way may work as intended, but it causes undefined behavior and seriously contradicts const-correctness: ...|$|R
30|$|The storage {{provider}} profile provides parameters {{relating to}} the costs of various interactions with the storage providers they describe. The use of these parameters permits the calculation {{of the costs of}} moving the data into and out of storage providers, on the on-going cost of the <b>static</b> <b>storage,</b> both of which are of importance to the cost optimiser in Kindura.|$|R
40|$|We {{describe}} favorable {{experience with}} automatic differentiation of mathematical programming problems expressed in AMPL, a modeling language for mathematical programming. Nonlinear expressions are translated to loop-free code, which makes analytically correct gradients and Jacobians particularly easy to compute [...] <b>static</b> <b>storage</b> allocation suffices. The nonlinear expressions may either be interpreted or, {{to gain some}} execution speed, converted to Fortran or C...|$|R
40|$|Copyright Â© 2012 Ferdinando A. Giannone et al. This is an {{open access}} article {{distributed}} under the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited. Purpose. Hypothermic machine perfusion systems seem {{more effective than the}} current <b>static</b> <b>storage</b> to prevent cold ischemic liver injury. Thus, we test an innovative hyperbaric hypothermic machine perfusion (HHMP), which combines hyperbaric oxygenation of the preservation solution and continuous perfusion of the graft. Methods. Rat livers were preserved with Celsior solution accord-ing to 4 different modalities: normobaric static preservation; hyperbaric static preservation at 2 atmosphere absolute (ATA); normo-baric dynamic preservation, with continuous perfusion; hyperbaric dynamic preservation, with continuous perfusion at 2 ATA. After 24 h cold preservation, we assessed different parameters. Results. Compared to baseline, livers preserved with the current <b>static</b> <b>storage</b> showed severe ultrastructural damage, glycogen depletion and an increased oxidative stress. Normobaric perfused liver...|$|R
40|$|Purpose. Hypothermic machine {{perfusion}} systems {{seem more}} effective than the current <b>static</b> <b>storage</b> to prevent cold ischemic liver injury. Thus, we test an innovative hyperbaric hypothermic machine perfusion (HHMP), which combines hyperbaric oxygenation of the preservation solution and continuous perfusion of the graft. Methods. Rat livers were preserved with Celsior solution according to 4 different modalities: normobaric static preservation; hyperbaric static preservation at 2 atmosphere absolute (ATA); normobaric dynamic preservation, with continuous perfusion; hyperbaric dynamic preservation, with continuous perfusion at 2 ATA. After 24 [*]h cold preservation, we assessed different parameters. Results. Compared to baseline, livers preserved with the current <b>static</b> <b>storage</b> showed severe ultrastructural damage, glycogen depletion and an increased oxidative stress. Normobaric perfused livers showed improved hepatocyte ultrastructure and ameliorated glycogen stores, but they still suffered a significant oxidative damage. The addition of hyperbaric oxygen produces an extra benefit by improving oxidative injury and by inducing endothelial NO synthase (eNOS) gene expression. Conclusions. Preservation by means of the present innovative HHMP reduced the liver injury occurring after the current <b>static</b> cold <b>storage</b> by lowering glycogen depletion and oxidative damage. Interestingly, only the use of hyperbaric oxygen was associated to a blunted oxidative stress and an increased eNOS gene expression...|$|R
30|$|When Î±Â â¤Â  70 Â %, the pseudo-plastic {{behavior}} of PCLS matched {{well with the}} requirements of industrial applications. The sedimentation of solid particles was effectively restrained because of high viscous force and friction under <b>static</b> <b>storage</b> of PCLSs. As a result, the stability of slurry fuel was enhanced. However, the viscosity of slurry declined a lot during the pumping and atomizing processes, which is beneficial for cost reduction.|$|R
40|$|A 256 144 -bit TCAM is {{designed}} in 0. 18 - m CMOS. The proposed TCAM cell uses 4 T <b>static</b> <b>storage</b> for increased density. The proposed match-line (ML) sense scheme reduces power consumption by minimizing switching activity of search-lines and limiting voltage swing of MLs. The scheme achieves a match-time of 3 ns and operates {{at a minimum}} supply voltage of 1. 2 V...|$|R
40|$|Abstract. We {{describe}} favorable {{experience with}} automatic differentiation of mathematical programming problems expressed in AMPL, a modeling language for mathematical programming. Nonlinear expressions are translated to loop-free code, which makes analytically correct gradients and Jacobians particularly easy to compute â <b>static</b> <b>storage</b> allocation suffices. The nonlinear expressions may either be interpreted or, {{to gain some}} execution speed, converted to Fortran or C. 1. Introduction. Modelin...|$|R
50|$|In 1965 Victor Comptometer Corporation {{produced}} the Victor 3900, a fully electronic calculator with multiple functions, three <b>storage</b> <b>registers,</b> {{and a small}} CRT display. The unit incorporated an early MOS integrated circuit for processing and storage. The unit was designed for desktop use, but was extremely large and heavy. Due to manufacturing difficulties, manufacturing was discontinued in 1967.|$|R
2500|$|<b>Static</b> <b>storage</b> {{duration}} {{objects are}} created before main (...) is entered (see exceptions below) and destroyed in reverse order of creation after main (...) exits. The exact order of creation is not {{specified by the}} standard (though there are some rules defined below) to allow implementations some freedom in how to organize their implementation. More formally, objects of this type have a lifespan that [...] "shall last {{for the duration of}} the program".|$|R
40|$|Objective Rewarming and reanimating {{the donor}} heart from cold <b>static</b> <b>storage</b> predisposes the organ to injury and graft dysfunction. Our main {{aim was to}} {{investigate}} the effects of 5 minutes of continuous rewarming with a normokalemic, oxygenated, polarizing adenosineâlidocaine arrest solution after 6 hours of cold <b>static</b> <b>storage</b> (4 Â°C) in adenosineâlidocaine or Celsior (Genzyme Corp, Cambridge, Mass) solutions. Methods Male SpragueâDawley rats (350 â 450 g, n = 40) were {{randomly assigned to one of}} 5 groups: (1) adenosineâlidocaine cold arrest with modified KrebsâHenseleit rewarming, (2) adenosineâlidocaine cold arrest with adenosineâlidocaine rewarming, (3) Celsior cold arrest with Celsior rewarming, (4) Celsior cold arrest with KrebsâHenseleit, and (5) Celsior cold arrest with adenosineâlidocaine arrest rewarming. Hearts were perfused in working mode, arrested (37 Â°C), removed and stored for 6 hours at 4 Â°C, reattached in Langendorff mode, and rewarmed for 5 minutes (37 Â°C). Hearts were switched to working mode, and function was compared with prestorage values. Myocardial oxygen consumption and effluent lactate and pH values were measured during rewarming and recovery. Results Cold adenosineâlidocaine hearts rewarmed with KrebsâHenseleit recovered 40...|$|R
5000|$|IBM 653 Storage Unit (magnetic tape, disk, core <b>storage,</b> index <b>registers,</b> {{floating}} point arithmetic) ...|$|R
5000|$|The HP-65 had a [...] "feature" [...] whereby <b>storage</b> <b>register</b> R9 was {{corrupted}} {{whenever the}} user (or program) executed trigonometric functions or performed comparison tests; {{this kind of}} issue was common in many early calculators, caused {{by a lack of}} memory due to cost, power, and/or size considerations. Since the limitation was documented in the manual, it is not strictly speaking a bug.|$|R
