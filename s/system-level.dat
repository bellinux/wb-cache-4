6649|5|Public
5|$|The Itanium bus {{interfaces}} to {{the rest}} of the system via a chipset. Enterprise server manufacturers differentiate their systems by designing and developing chipsets that interface the processor to memory, interconnections, and peripheral controllers. The chipset is the heart of the <b>system-level</b> architecture for each system design. Development of a chipset costs tens of millions of dollars and represents a major commitment to the use of the Itanium. IBM created a chipset in 2003, and Intel in 2002, but neither of them developed chipsets to support newer technologies such as DDR2 or PCI Express.|$|E
25|$|May 16, 2006, {{announced}} {{expanding its}} presence in electronic <b>system-level</b> (ESL) design by acquiring Virtio Corporation, creator of virtual platforms for embedded software development.|$|E
25|$|In {{preliminary}} design documents for the Chromium OS open source project, Google described a three-tier architecture: firmware, browser and window manager, and <b>system-level</b> software and userland services.|$|E
25|$|In {{a report}} by the Institute of Medicine called Unequal Treatment, three major source {{categories}} are put forth as potential explanations for disparities in health care: patient-level variables, healthcare <b>system-level</b> factors, and care process-level variables.|$|E
25|$|Electronic <b>system-level</b> design: This step {{creates the}} user {{functional}} specification. The user may {{use a variety}} of languages and tools to create this description. Examples include a C/C++ model, SystemC, SystemVerilog Transaction Level Models, Simulink and MATLAB.|$|E
25|$|<b>System-level</b> {{software}} {{includes the}} Linux kernel {{that has been}} patched to improve boot performance. Userland software has been trimmed to essentials, with management by Upstart, which can launch services in parallel, re-spawn crashed jobs, and defer services {{in the interest of}} faster booting.|$|E
25|$|The initial {{chip design}} process begins with <b>system-level</b> design and {{microarchitecture}} planning. Within IC design companies, management and often analytics will draft {{a proposal for}} a design team to start the design of a new chip to fit into an industry segment. Upper-level designers will meet at this stage to decide how the chip will operate functionally. This step is where an IC's functionality and design are decided. IC designers will map out the functional requirements, verification testbenches, and testing methodologies for the whole project, and will then turn the preliminary design into a <b>system-level</b> specification that can be simulated with simple models using languages like C++ and MATLAB and emulation tools. For pure and new designs, the system design stage is where an Instruction set and operation is planned out, and in most chips existing instruction sets are modified for newer functionality. Design at this stage is often statements such as encodes in the MP3 format or implements IEEE floating-point arithmetic. At later stages in the design process, each of these innocent looking statements expands to hundreds of pages of textual documentation.|$|E
25|$|One {{feature of}} the Cocoa {{environment}} is its facility for managing dynamically allocated memory. Cocoa's NSObject class, from which most classes, both vendor and user, are derived, implements a reference counting scheme for memory management. Objects that derive from the NSObject root class respond to a retain and a release message, and keep a retain count. A method titled retainCount exists, but contrary to its name, will usually not return the exact retain count of an object. It is mainly used for <b>system-level</b> purposes. Invoking it manually is not recommended by Apple.|$|E
25|$|The Technical Services Division (TSD) {{provided}} engineering, {{production and}} technical management expertise primarily for space-related science and defense programs. Typically, it supplies specialized personnel — engineers, scientists, technicians {{and other professionals}} — with specific knowledge in the areas that its customers are pursuing. The Orbital employees often work side-by-side with the customers' technical staff at their facilities. They perform {{a wide range of}} functions, from <b>system-level</b> efforts such as special payload equipment and training support for NASA's Hubble Space Telescope servicing missions to component-level tasks including development of high-energy microwave transmitters for the National Radio Astronomy Observatory.|$|E
25|$|In 1983, Richard Stallman, {{founder of}} the Free Software Foundation, set forth plans of a {{complete}} Unix-like operating system, called GNU, composed entirely of free software. In September of that year, Stallman published a manifesto in Dr. Dobb's Journal detailing his new project publicly, outlining his vision of free software. Software development work began in January 1984. By 1991, the GNU mid-level portions of the operating system were almost complete, and the upper level could be supplied by the X Window System, but the lower level (kernel, device drivers, <b>system-level</b> utilities and daemons) was still mostly lacking. The GNU kernel was called GNU Hurd. The Hurd followed an ambitious design which proved unexpectedly difficult to implement and has only been marginally usable.|$|E
25|$|The MIPS MT {{architecture}} {{also allows}} {{the allocation of}} processor cycles to threads, and sets the relative thread priorities with an optional Quality of Service (QoS) manager block. This enables two prioritization mechanisms that determine {{the flow of information}} across the bus. The first mechanism allows the user to prioritize one thread over another. The second mechanism is used to allocate a specified ratio of the cycles to specific threads over time. The combined use of both mechanisms allows effective allocation of bandwidth to the set of threads, and better control of latencies. In real-time systems, <b>system-level</b> determinism is very critical, and the QoS block facilitates improvement of the predictability of a system. Hardware designers of advanced systems may replace the standard QoS block provided by MIPS Technologies with one that is specifically tuned for their application.|$|E
25|$|The sale of Load Balancer {{left the}} company with staff and cash, but no product. Freedman had {{developed}} and marketed a 3-day UNIX security course in 1992, and had developed significant contacts within the banking, defense, and chip-making communities. These customers all had similar problems in managing large UNIX networks, specifically concerning the control and audit {{of the actions of}} the systems' administrators. The problem was that the root account used by systems administrators when reconfiguring parts of the system, was able to edit any of the audit trails created by the system. Freedman designed a new product, PowerBroker, that was similar in concept to today's sudo products, but which allowed centralized control and auditing of an entire network even down to the keystroke level, with the logs stored on a dedicated remote computer to which the system administrators typically did not have access. By vetting all access and logging through this remote machine, a secure log could be maintained. The system was ported to over 22 versions of UNIX to accommodate the newer, larger networks with hundreds or thousands of machines. Dean Huxley was responsible for most of the <b>system-level</b> programming on PowerBroker with Kevin Chmilar and Earle Lowe also contributing.|$|E
500|$|... bhyve, a new {{virtualization}} {{solution was}} introduced in FreeBSD 10.0. bhyve allows a user to run a number of guest operating systems (FreeBSD, OpenBSD, Linux, and Microsoft Windows) simultaneously. Other operating systems such as Illumos are planned. bhyve was written by Neel Natu and Peter Grehan and was announced in the 2011 BSDCan conference for the first time. The main difference between bhyve and FreeBSD jails is that jails are an operating <b>system-level</b> virtualization and therefore limited to only FreeBSD guests; but bhyve is a type 2 hypervisor and {{is not limited to}} only FreeBSD guests. For comparison, bhyve is a similar technology to KVM whereas jails are closer to LXC containers or Solaris Zones.|$|E
2500|$|Protein–protein {{interaction}} {{networks are}} an important ingredient for the <b>system-level</b> understanding of cellular processes.|$|E
2500|$|CoWare, {{now part}} of Synopsys, was a {{supplier}} of platform-driven electronic <b>system-level</b> (ESL) design software and services.|$|E
2500|$|In {{computer}} terms, {{supervisor mode}} is a hardware-mediated flag {{which can be}} changed by code running in <b>system-level</b> software. <b>System-level</b> tasks or threads will have this flag set while they are running, whereas userspace applications will not. This flag determines {{whether it would be}} possible to execute machine code operations such as modifying registers for various descriptor tables, or performing operations such as disabling interrupts. The idea of having two different modes to operate in comes from [...] "" [...] a program in supervisor mode is trusted never to fail, since a failure may cause the whole computer system to crash.|$|E
2500|$|UserLand's {{original}} flagship product, Frontier, was a <b>system-level</b> scripting {{environment for}} the Mac, [...] Winer's pioneering weblog, Scripting News, {{takes its name from}} this early interest. Frontier was an outliner-based scripting language, echoing Winer's longstanding interest in outliners and anticipating code-folding editors of the late 1990s.|$|E
2500|$|Health <b>system-level</b> {{factors include}} any aspects of health systems {{that can have}} {{different}} effects on patient outcomes. [...] Some of these factors include different access to services, access to insurance or other means to pay for services, access to adequate language and interpretation services, and geographic availability of different services. Many studies assert that these factors explain portions of the existing disparities in health of racial and ethnic minorities in the United States when compared to their white counterparts.|$|E
2500|$|Cost growth {{revealed}} in spring 2005 {{led to an}} August 2005 re-planning. [...] The primary technical outcomes of the re-planning were {{significant changes in the}} integration and test plans, a 22-month launch delay (from 2011 to 2013), and elimination of <b>system-level</b> testing for observatory modes at wavelength shorter than 1.7 micrometers. Other major features of the observatory were unchanged. [...] Following the re-planning, the program was independently reviewed in April 2006. The review concluded the program was technically sound, but that funding phasing at NASA needed to be changed. NASA re-phased its JWST budgets accordingly.|$|E
2500|$|In 2012, Google began {{decoupling}} {{certain aspects}} of its Android operating system (particularly its core applications) {{so they could be}} updated through the Google Play store independently of the OS. One of those components, Google Play Services, is a closed-source <b>system-level</b> process providing APIs for Google services, installed automatically on nearly all devices running Android 2.2 [...] "Froyo" [...] and higher. With these changes, Google can add new system functionality through Play Services and update apps without having to distribute an upgrade to the operating system itself. As a result, Android 4.2 and 4.3 [...] "Jelly Bean" [...] contained relatively fewer user-facing changes, focusing more on minor changes and platform improvements.|$|E
2500|$|A {{significant}} {{achievement of}} UCERF is development of <b>system-level</b> approach called the [...] "grand inversion". This uses a supercomputer {{to solve a}} system of linear equations that simultaneously satisfies multiple constraints such as known slip rates, etc. The result is a model (set of values) that best fits the available data. In balancing these various factors it also provides an estimate of how much seismicity is not accounted for in the fault model, possibly in faults not yet discovered. The amount of slip occurring on unidentified faults has been estimated at between 5 and about 20mm/yr depending on the location (generally higher in the LA area) and deformation model, with one model reaching 30mm/yr just north of LA.|$|E
2500|$|PDF was {{selected}} as the [...] "native" [...] metafile format for Mac OS X, replacing the PICT format of the earlier classic Mac OS. The imaging model of the Quartz graphics layer is based on the model common to Display PostScript and PDF, leading to the nickname Display PDF. The Preview application can display PDF files, as can version 2.0 and later of the Safari web browser. <b>System-level</b> support for PDF allows Mac OS X applications to create PDF documents automatically, provided they support the OS-standard printing architecture. The files are then exported in PDF 1.3 format according to the file header. When taking a screenshot under Mac OS X versions 10.0 through 10.3, the image was also captured as a PDF; later versions save screen captures as a PNG file, though this behaviour can be set back to PDF if desired.|$|E
2500|$|As {{competition}} in the wind market increases, companies are seeking ways to draw greater efficiency from their designs. One of the predominant ways wind turbines have gained performance is by increasing rotor diameters, and thus blade length. Retrofitting current turbines with larger blades mitigates the need and risks associated with a <b>system-level</b> redesign. By incorporating carbon fiber into parts of existing blade systems, manufacturers may increase {{the length of the}} blades without increasing their overall weight. For instance, the spar cap, a structural element of a turbine blade, commonly experiences high tensile loading, making it an ideal candidate to utilize the enhanced tensile properties of carbon fiber in comparison to glass fiber. Higher stiffness and lower density translates to thinner, lighter blades offering equivalent performance. [...] In a 10-MW turbine—which will become more common in offshore systems by 2021—blade lengths may reach over 100 m and weigh up to 50 metric tons when fabricated out of glass fiber. A switch to carbon fiber in the structural spar of the blade yields weight savings of 20 to 30 percent, or approximately 15 metric tons. [...] The compressive properties of carbon fiber do not differ significantly from those of glass fiber. [...] It is therefore economical to replace glass fiber components under compression with carbon fiber components. [...] Improving performance through weight reductions rather than increasing scale also has advantages in transportation. [...] The size of a wind turbine, its blades and tower, are all limited by the height and width clearances, and turning radius, of the route used to transport the components to the installation site. The scale of these pieces has in some cases forced the adoption of Schnabel trailers.|$|E
50|$|Another {{example of}} SLS use is to couple the <b>system-level</b> {{simulation}} to a CFD simulation.The <b>system-level</b> model provides the boundary {{conditions of the}} fluid domain in the CFD model.|$|E
50|$|SystemC {{is applied}} to <b>system-level</b> modeling, {{architectural}} exploration, performance modeling, software development, functional verification, and high-level synthesis. SystemC {{is often associated with}} electronic <b>system-level</b> (ESL) design, and with transaction-level modeling (TLM).|$|E
5000|$|Provide {{necessary}} {{input to}} <b>system-level</b> reliability models. <b>System-level</b> reliability models can subsequently {{be used to}} predict, for example, frequency of system outages in steady-state, frequency of system outages during early life, expected downtime per year, and system availability.|$|E
5000|$|... business-level {{compensation}} {{rather than}} <b>system-level</b> transactions, ...|$|E
5000|$|Workload Partitions (WPARs) {{operating}} <b>system-level</b> virtualization ...|$|E
5000|$|Design layers (<b>system-level,</b> application-level, and {{low-level}} design), ...|$|E
5000|$|Custom {{automated}} <b>system-level</b> processes {{through the}} use of third-party applications.|$|E
5000|$|Linux <b>system-level</b> and user-level tracing with kernel {{markers and}} LTTng ...|$|E
5000|$|JavaScript OSA - A <b>system-level</b> {{scripting}} language for the Apple Macintosh ...|$|E
50|$|For <b>system-level</b> {{simulation}} of computer hardware, please {{refer to the}} full system simulation.|$|E
5000|$|OpenVPX — Open {{architecture}} {{framework that}} drives VPX <b>system-level</b> interoperability and lowers costs ...|$|E
5000|$|Operating <b>system-level</b> virtualization, hosting of {{multiple}} virtualized environments {{within a single}} OS instance.|$|E
5000|$|PowerTalk, a <b>system-level</b> email {{handling}} {{service and the}} originator of the Keychain system.|$|E
