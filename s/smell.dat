10000|7042|Public
5|$|Tyrannosaurus {{had very}} large {{olfactory}} bulbs and olfactory nerves {{relative to their}} brain size, the organs responsible for {{a heightened sense of}} <b>smell.</b> This suggests that the sense of <b>smell</b> was highly developed, and implies that tyrannosaurs could detect carcasses by scent alone across great distances. The sense of <b>smell</b> in tyrannosaurs may have been comparable to modern vultures, which use scent to track carcasses for scavenging. Research on the olfactory bulbs has shown that Tyrannosaurus rex had the most highly developed sense of <b>smell</b> of 21 sampled non-avian dinosaur species.|$|E
5|$|Filmmaker Barry Levinson {{paid tribute}} to Sweet <b>Smell</b> of Success in his 1982 film Diner, with one {{character}} wandering around saying nothing but lines from the film. In an early scene from Levinson's 1988 movie, Rain Man, Sweet <b>Smell</b> of Success is seen playing on television.|$|E
5|$|Food {{is mostly}} {{selected}} by sight, even in conditions of dim light. Movement of the prey triggers a feeding response. Frogs {{have been caught}} on fish hooks baited with red flannel and green frogs (Rana clamitans) have been found with stomachs full of elm seeds that they had seen floating past. Toads, salamanders and caecilians also use <b>smell</b> to detect prey. This response is mostly secondary because salamanders have been observed to remain stationary near odoriferous prey but only feed if it moves. Cave-dwelling amphibians normally hunt by <b>smell.</b> Some salamanders seem to have learned to recognize immobile prey when it has no <b>smell,</b> even in complete darkness.|$|E
40|$|Code <b>smells</b> {{are poor}} {{implementation}} choices, thought to make object-oriented systems hard to maintain. In this study, we investigate if classes with code <b>smells</b> are more change-prone than classes without <b>smells.</b> Specifically, we test the general hypothesis: classes with code <b>smells</b> are not more change prone than other classes. We detect 29 code <b>smells</b> in 9 releases of Azureus and in 13 releases of Eclipse, {{and study the}} relation between classes with these code <b>smells</b> and class change-proneness. We show that, in almost all releases of Azureus and Eclipse, classes with code <b>smells</b> are more change-prone than others, and that specific <b>smells</b> are more correlated than others to change-proneness. These results justify a posteriori previous work on the specification and detection of code <b>smells</b> and could help focusing quality assurance and testing activities...|$|R
5000|$|The {{liner notes}} to <b>Smells</b> Like Bleach {{were written by}} Dave Thompson. In it, he {{describes}} <b>Smells</b> Like Bleach as Nirvana's [...] "first ever tribute album." [...] In actual fact, the tribute album <b>Smells</b> Like Nirvana: A Tribute to Nirvana was released before <b>Smells</b> Like Bleach (6 June 2000).|$|R
5000|$|... "The gods <b>smelled</b> the savor" [...] — Atrahasis III,v,34"The gods <b>smelled</b> {{the sweet}} savor" [...] — Gilgamesh XI, 160"And the Lord <b>smelled</b> the sweet savor..." [...] — Genesis 8:21 ...|$|R
5|$|Mephedrone {{is a white}} substance. It is sold most {{commonly}} as crystals or a powder, {{but also in the}} form of capsules or pills. It can have a distinctive odour, reported to range from a synthetic fishy <b>smell</b> to the <b>smell</b> of vanilla and bleach, stale urine, or electric circuit boards.|$|E
5|$|Olfactory lobes {{are absent}} in river dolphins, {{suggesting}} {{that they have no}} sense of <b>smell.</b>|$|E
5|$|The kakapo has a {{well-developed}} {{sense of}} <b>smell,</b> which complements its nocturnal lifestyle. It can distinguish between odours while foraging, a behaviour reported {{in only one}} other parrot species. One {{of the most striking}} characteristics of the kakapo is its distinct musty-sweet odour. Given their well-developed sense of <b>smell,</b> this odour may be a pheromone. The <b>smell</b> often alerts predators to the presence of kakapos.|$|E
50|$|How {{to better}} {{interact}} with <b>smells</b> and through <b>smells.</b>|$|R
5000|$|Odor: R-(-)-carvone <b>smells</b> like {{spearmint}} yet S-(+)-carvone, <b>smells</b> like caraway.|$|R
5000|$|... "Smelling coffee aroma between perfume samples, as {{compared}} to <b>smelling</b> unscented air, actually works. The perceived odor intensity of the perfume from sample to sample stayed the same after <b>smelling</b> coffee aroma while it decreased when <b>smelling</b> air between samples. The pleasantness of the perfume, however, was similar after <b>smelling</b> coffee or air." ...|$|R
5|$|The {{olfactory}} lobes {{are absent}} in porpoises, {{suggesting that they}} have no sense of <b>smell.</b>|$|E
5|$|The {{olfactory}} nerve (I) conveys {{the sense of}} <b>smell.</b>|$|E
5|$|The three-sensed {{beings have}} seven with the {{addition}} of the sense of <b>smell.</b>|$|E
30|$|Developers {{can rely}} on the {{analysis}} of code <b>smells</b> to identify design problems [17, 25, 26]. The use of code <b>smells</b> to identify design problems is possible because some instances of code <b>smells</b> manifest in the source due {{to the presence of}} a design problem. Consequently, code <b>smells</b> tend to co-occur in elements affected by design problems [5, 8, 10, 18], which make them indicators of design problems. Unfortunately, not all (instance of) code <b>smells</b> are related to a design problem [17].|$|R
40|$|The {{aim of this}} {{investigation}} into test <b>smells</b> was {{to find out how}} familiar developers are with test <b>smells,</b> the frequency of test <b>smells</b> and their severity in the industrial world. First of all, a taxonomy of different test <b>smells</b> was created and grouped according to programming principles as a basis for this study. Several interviews were then conducted to find out which test <b>smells</b> to include in the subsequent survey. 20 people with different industrial experience levels participated in this survey. It was hypothesised that test <b>smells</b> are not identified as such and that their names are unknown. The hypothesis was supported by the results of the survey. The results revealed that test <b>smells</b> are not quite well-known despite {{the fact that some of}} them occur rather frequently and pose severe problems...|$|R
30|$|Oizumi et al. {{study was}} not the only one to {{investigate}} inter-related code <b>smells.</b> Abbes et al. [6] brought up the notion of code <b>smells</b> that interact to each in the source code. They also investigated the effects of such interacting. They concluded that classes and methods identified as God Classes and God Methods in isolation did not affect maintenance effort; however, when these two <b>smells</b> appear together, they led to a statistically significant increase in maintenance effort. Yamashita and Moonen [7] also investigate the relationship between code <b>smells.</b> They observed that inter-smell relationships negatively affect the maintenance. Posteriorly, Yamashita et al. [8] studied collocated smells—code <b>smells</b> that interact in the same source code file—and coupled smells—code <b>smells</b> that interact across different source code files. Regarding software design, they observed that limiting the analysis to collocated <b>smells</b> would reduce their capability to reveal design problems, as coupled <b>smells</b> may reveal critical design problems.|$|R
5|$|Bears {{have small}} rounded ears {{so as to}} {{minimise}} heat loss, but neither their hearing or sight are particularly acute. Unlike many other carnivorans they have colour vision, perhaps to help them distinguish ripe nuts and fruits. They are unique among carnivorans in not having touch-sensitive whiskers on the muzzle; however, they have an excellent sense of <b>smell,</b> better {{than that of the}} dog, or possibly any other mammal. They use <b>smell</b> for signalling to each other (either to warn off rivals or detect mates) and for finding food. <b>Smell</b> is the principal sense used by bears to locate most of their food, and they have excellent memories which helps them to relocate places where they have found food before.|$|E
5|$|Chemical {{communications}} in animals {{rely on a}} variety of aspects including taste and <b>smell.</b> Chemoreception is the physiological response of a sense organ (i.e. taste or <b>smell)</b> to a chemical stimulus where the chemicals act as signals to regulate the state or activity of a cell. A semiochemical is a message-carrying chemical that is meant to attract, repel, and convey information. Types of semiochemicals include pheromones and kairomones. One example is the butterfly Phengaris arion which uses chemical signals as a form of mimicry to aid in predation.|$|E
5|$|Cocklebur oil, from {{species of}} genus Xanthium, with similar {{properties}} to poppyseed oil, similar in taste and <b>smell</b> to sunflower oil.|$|E
40|$|This study {{provides}} a {{critical analysis of}} refactoring by surveying the refactoring tools in IDEA and Eclipse. Ways are discussed to locate targets for refactorings, via detection of code <b>smells</b> from static code analysis in IDEA and during the compilation process in Eclipse. New code <b>smells</b> are defined {{as well as the}} refactorings needed to remove the code <b>smells.</b> The impacts the code <b>smells</b> have on design are well documented. Considerable effort is made to describe how these code <b>smells</b> and their refactorings can be used to improve design. Practical methods are provided to detect code <b>smells</b> in large projects such as Sun’s JDK. The methodology includes a classification scheme to categorise code <b>smells</b> by their value and complexity to handle large projects more efficiently. Additionally a detailed analysis is performed on the evolution of the JDK from a maintainability point of view. Code <b>smells</b> are used to measure maintainability in this instance. Dissertation (MSc (Computer Science)) [...] University of Pretoria, 2008. Computer Scienceunrestricte...|$|R
40|$|Abstract — This paper {{explores the}} various code <b>smells</b> or {{the so called}} bad code {{symptoms}} present in procedural C software. The code <b>smells</b> are analyzed {{in the light of}} aspect oriented programming. The intention is to handle the code <b>smells</b> with aspect oriented constructs as it offers more versatile decomposition techniques than the traditional modularization techniques, for software evolution and understandability. The code <b>smells</b> are described at the function and program level. The code <b>smells</b> are followed by the aspect oriented transformations that may be required in order to improve the code quality...|$|R
50|$|Design <b>smells</b> {{indicate}} the accumulated design debt (one of the prominent dimensions of technical debt). Bugs or unimplemented features are not accounted as design <b>smells.</b> Design <b>smells</b> {{arise from the}} poor design decisions that make the design fragile and difficult to maintain. It is a good practice to identify design <b>smells</b> in a software system and apply appropriate refactoring to eliminate it to avoid accumulation of technical debt.|$|R
5|$|Formulations {{containing}} {{high concentrations}} of aspirin often <b>smell</b> like vinegar because aspirin can decompose through hydrolysis in moist conditions, yielding salicylic and acetic acids.|$|E
5|$|Like other arthropods, spiders have sensors, often {{modified}} setae (bristles), for <b>smell,</b> taste, {{touch and}} vibration, protruding through their cuticle ("skin"). Unlike insects, spiders and other chelicerates {{do not have}} antennae.|$|E
5|$|Mycena leptocephala is {{classified}} in the section Fragilipedes of the genus Mycena, along with other similar-looking mushrooms, such as M.aetites, M.austera, M.parca, and M.aronsenii. Some of these have a nitrous <b>smell</b> similar to M.leptocephala.|$|E
40|$|Sweet" <b>smells</b> {{and tastes}} are {{perceptually}} similar, and physiological data indicate some commonality of central processing. However, sweet tastes and sweet <b>smells</b> {{do not provide}} interchangeable contexts in psychophysical experiments. The same sweet tastes are perceived as less intense when stronger sweet tastes are present, and they are perceived as more intense when weaker sweet tastes are present, as with sweet <b>smells.</b> However, complementary sets of sweet tastes and <b>smells</b> (e. g., weak sweet tastes, strong sweet <b>smells)</b> do not eliminate these differential context effects (DCEs). The present experiments examined, first, whether DCEs between sweet tastes and <b>smells</b> arise because of differences between odors and tastes {{in the way that}} sweetness scales with intensity as concentration rises, and, second, whether DCEs may be smaller for sweet tastes and <b>smells,</b> when contrasted with sweet tastes and nonsweet <b>smells.</b> The findings were clear: DCEs were consistently present, suggesting they are independent of perceptual similarity. These results imply that DCEs are probably not psychological in origin or centrally based; rather, they may have a subcortical locus. 10 page(s...|$|R
6000|$|The lamp hummed: [...] "Regard the moon, La lune ne garde aucune rancune, She winks {{a feeble}} eye, She smiles into corners. She smoothes {{the hair of}} the grass. The moon has lost her memory. A washed-out {{smallpox}} cracks her face, Her hand twists a paper rose, That <b>smells</b> of dust and old Cologne, She is alone With all the old nocturnal <b>smells</b> That cross and cross across her brain. The reminiscence comes Of sunless dry geraniums And dust in crevices, <b>Smells</b> of chestnuts in the streets, And female <b>smells</b> in shuttered rooms, And cigarettes in corridors And cocktail <b>smells</b> in bars." ...|$|R
40|$|Some {{previous}} work began studying {{the relationship between}} application domains and quality, in particular through the prevalence of code and design <b>smells</b> (e. g., anti-patterns). Indeed, it is generally believed {{that the presence of}} these <b>smells</b> degrades quality but also that their prevalence varies across domains. Though anecdotal experiences and empirical evidence gathered from developers and researchers support this belief, there is still a need to further deepen our understanding of the relationship between application domains and quality. Consequently, we present a large-scale study that investigated the systematic relationships between the presence of <b>smells</b> and quality-related metrics computed over the bytecode of 1, 343 Java Mobile Edition applications in 13 different application domains. Although, we did not find evidence of a correlation between <b>smells</b> and quality-related metrics, we found (1) that larger differences exist between metric values of classes exhibiting <b>smells</b> and classes without <b>smells</b> and (2) that some <b>smells</b> are commonly present in all the domains while others are most prevalent in certain domains...|$|R
5|$|Patton Oswalt as Remy, a rat with a {{heightened}} sense of <b>smell,</b> enabling a talent and desire for cooking. Director Brad Bird chose Oswalt after hearing his food-related comedy routine.|$|E
5|$|Privies {{should be}} washed daily and {{ventilated}} {{to ensure that}} the <b>smell</b> did not permeate to the work rooms.|$|E
5|$|Scheele {{observed}} {{several of}} the properties of chlorine: the bleaching effect on litmus, the deadly effect on insects, the yellow-green color, and the <b>smell</b> similar to aqua regia.|$|E
40|$|This tool demo paper {{presents}} SmellSheet Detective: a {{tool for}} automatically detecting bad <b>smells</b> in spreadsheets. We have defined a catalog of bad <b>smells</b> in spreadsheet data which was fully implemented in a reusable library for the manipulation of spreadsheets. This library is the building block of the SmellSheet Detective tool, {{that has been used}} to detect <b>smells</b> in large, real-world spreadsheet within the EUSES corpus, in order to validate and evolve our bad <b>smells</b> catalog...|$|R
5000|$|Beagles {{have the}} ability to {{categorize}} <b>smells.</b> Therefore, they can distinguish between <b>smells</b> emanating from [...] "restricted" [...] items (such as fruit, vegetables, and meat) and non-restricted items. When a member of the Beagle Brigade <b>smells</b> a restricted scent, it sits down next to the luggage to alert its handler, who then talks to the owner, and, if necessary, performs a search. Experienced beagles have a 90% success rate, and can recognize almost 50 distinct <b>smells.</b>|$|R
30|$|Related works propose {{techniques}} {{for supporting the}} detection and visualization of both single <b>smells</b> and inter-related <b>smells.</b> There are several studies that investigated detection and visualization of single code <b>smells</b> [13 – 16]. Van Emden and Moonen [13], for example, presented a tool that detects and visualizes code <b>smells</b> in source code. Their tool displays the code structures as a graph and maps code <b>smells</b> onto the graph attributes. Although this tool can represent the relation among elements, it fails on representing code <b>smells.</b> The tool is built upon the assumption that code <b>smells</b> concentrate in a particular location on the source and that software metrics will point developers to these locations. However, this assumption does not always hold since some code <b>smells</b> need the {{understanding of how the}} smelly elements interact to which other. For instance, let us consider the Dispersed Coupling, which happens when a code element is excessively tied to many other elements. In this case, a visualization should not only represent the element that contains the Dispersed Coupling, but also the elements to which it is coupled. These interactions cannot be represented by a simple mapping between code structures and colors.|$|R
