792|1948|Public
25|$|Btrieve was modularized {{starting}} with version 6.15 {{and became one}} of two database front-ends that plugged into a standard <b>software</b> <b>interface</b> called the Micro-Kernel Database Engine. The Btrieve front-end supported the Btrieve API and the other front-end was called Scalable SQL, a relational database product based upon the MKDE that used its own variety of Structured Query Language, otherwise known as SQL. After these versions were released (Btrieve 6.15 and ScalableSQL v4) the company was renamed to Pervasive Software prior to their IPO. Shortly thereafter the Btrieve and ScalableSQL products were combined into the products now known and sold as Pervasive.SQL or PSQL. Btrieve continued for a few years while ScalableSQL was quickly dropped. Customers were encouraged to upgrade to Pervasive.SQL which supported both SQL and Btrieve applications.|$|E
500|$|Most grid {{computing}} applications use middleware (software {{that sits}} between {{the operating system}} and the application to manage network resources and standardize the <b>software</b> <b>interface).</b> The most common distributed computing middleware is the Berkeley Open Infrastructure for Network Computing (BOINC). Often, distributed computing software makes use of [...] "spare cycles", performing computations at times when a computer is idling.|$|E
2500|$|Extensible Firmware Interface (EFI) is a {{specification}} {{that defines}} a <b>software</b> <b>interface</b> between an operating system and platform firmware. Since this method generally {{does not require}} copying or modification of , it {{is considered to be}} the legal way of installing [...] on non-Apple computers (despite being untested in courts).|$|E
40|$|Ad hoc <b>software</b> <b>interfacing</b> {{occurs when}} one must {{programmatically}} move data from software system A to software system B where A and B were {{never intended to}} interoperate. Ad hoc <b>software</b> <b>interfacing</b> is a common way to construct new, larger software systems from other software systems, by using them as large-grained components. Ad hoc <b>software</b> <b>interfacing,</b> also known as “glue coding”, “low level software interfacing”, etc., has historically been relegated to less skilled programmers who are incapable of developing elegant and maintainable solutions. Ad hoc <b>software</b> <b>interfacing</b> needs a precise framework in which to specify problems and generate solutions. This paper describes a framework based {{on the principles of}} domain-specific language techniques. We demonstrate how many of the features needed for ad hoc <b>software</b> <b>interfacing</b> are available in commercial enterprise application integration servers. 1...|$|R
5000|$|... #Subtitle level 3: <b>Software</b> <b>interfaces</b> in {{object-oriented}} languages ...|$|R
5000|$|Promotes open {{digital library}} standards, <b>software,</b> <b>interfaces,</b> and best {{practices}} ...|$|R
2500|$|An HTPC {{and other}} {{convergence}} devices integrate {{components of a}} home theater into a unit co-located with a home entertainment system. An HTPC system typically has a remote control and the <b>software</b> <b>interface</b> normally has a 10-foot (3m) user interface design {{so that it can}} be comfortably viewed at typical television viewing distances. [...] An HTPC can be purchased pre-configured with the required hardware and software needed to add video programming or music to the PC. Enthusiasts can also piece together a system out of discrete components as part of a software-based HTPC.|$|E
50|$|Not be {{confused}} with the FireMonkey <b>software</b> <b>interface.</b>|$|E
50|$|Its {{standardized}} part {{is defined as}} a <b>software</b> <b>interface</b> specification.|$|E
5000|$|ISO/IEC JTC 1/SC 22, Programming languages, {{their environments}} and system <b>software</b> <b>interfaces</b> ...|$|R
40|$|Abstract [...] The {{usability}} {{evaluation of}} the <b>software</b> <b>interfaces</b> {{is one of the}} prominent concepts in Human Computer Interaction (HCI). In order to increase the usability, the design of <b>software</b> <b>interfaces</b> becomes an important task for HCI experts. This paper describes a new HCI based software development approach called the Usability Evaluation based Model (UEM). The UEM consists of five processes that help Software Engineers work with HCI experts from the beginning until the deployment of the software. However, this model not only bridges the gap between the SE and HCI experts, but it also links the AI experts to make the development process more intelligent. One of the processes in the UEM is the Cognitive Analysis of the <b>Software</b> <b>Interfaces</b> (CASI). CASI is an expert system that helps designers and software developers to evaluate software prototypes in an intelligent way based on user perception and evaluation rules. This paper also presents a case study {{on the development of the}} university online classroom booking system. The system was built using the UEM. The results mentioned in this paper show that with the help of the UEM, more usability problems in the <b>software</b> <b>interfaces</b> can be detected. Hence, enhancing the usability of the <b>software</b> <b>interfaces</b> by an automated UEM is feasible...|$|R
40|$|In {{most of the}} situations, {{usability}} {{evaluations of}} <b>software</b> <b>interfaces</b> are done by usability experts. Using such professionals needs a certain dimension in business. So, {{in a lot of}} small and medium scaled company's, software developers are compelled to learn to manage usability factors. This is not much simpler than training usability engineers on how to create a software application. As a remedy, an expert system CASI for software developers has been designed. In this paper, the expert system of Cognitive Analysis of <b>Software</b> <b>Interfaces</b> (CASI) is outlined to integrate cognitive modelling concepts and is considered as a crucial process for the development of interactive <b>software</b> <b>interfaces.</b> The recommended expert system is entirely dependent on the complete analysis of the user actions and specifications that display the psychological strategy of particular users. Moreover, this system helps designers and software developers to evaluate software prototypes in an intelligent way based on user perception and evaluation views. The paper presents a case study on the development of a rehabilitation database for a person with physical limitations. The results mentioned in this paper show that {{with the help of the}} expert system CASI more usability problems in the <b>software</b> <b>interfaces</b> can be detected. Hence, enhancing the usability of <b>software</b> <b>interfaces</b> by an automated CASI system is feasible...|$|R
50|$|The <b>software</b> <b>interface</b> is {{available}} in more than 30 languages.|$|E
5000|$|Scheduling OSID {{defines a}} <b>software</b> <b>interface</b> {{abstraction}} for calendaring protocols ...|$|E
50|$|It also {{refers to}} the <b>software</b> <b>interface</b> needed to {{implement}} such plugins.|$|E
50|$|A {{modular design}} {{allowing}} applications and <b>software</b> <b>interfaces</b> {{to be created}} and maintained independently from each other.|$|R
30|$|A {{laboratory}} bench demonstration designed {{to test the}} required <b>software</b> <b>interfaces</b> and communications protocols, considering the requirements around data security and privacy.|$|R
40|$|This report {{presents}} the software architecture in the StormCast meteorological workbench. The {{focus is on}} the <b>software</b> <b>interfaces</b> in StormCast version 2. 1. For each layer in the architecture the functionality, the call structure, the interfaces, the event diagrams and test data are described. In addition, further works are discussed. The identication of <b>software</b> <b>interfaces</b> are based on the StormCast prototype implementations and evaluations. The motivation is to derive an application program interface (API) to StormCast...|$|R
5000|$|Pseudo {{terminal}} for the <b>software</b> <b>interface</b> {{that provides}} access to virtual terminals ...|$|E
50|$|Métier's <b>software</b> <b>interface</b> is search-based. Users can {{navigate}} {{the system by}} searching for work, tools, resources, reports, templates and documents.|$|E
5000|$|SecurePA — The <b>software</b> <b>interface</b> {{that extends}} the utility, security, and ease-of-use of Overhead Paging, Intercom, Mass Notification and PA systems.|$|E
50|$|The OpenMI {{standard}} {{is defined by}} a set of <b>software</b> <b>interfaces,</b> in C# and Java, that a compliant model or component must implement.|$|R
5000|$|Turn {{existing}} <b>software</b> <b>interfaces</b> into protocols. In {{some cases}} the transformation can be simple or even automated if the original APIs have the right architecture.|$|R
50|$|EFI defines {{protocols}} {{as a set}} of <b>software</b> <b>interfaces</b> {{used for}} communication between two binary modules. All EFI drivers must provide services to others via protocols.|$|R
50|$|Asterisk Gateway Interface (AGI) is a <b>software</b> <b>interface</b> and {{communications}} protocol for application level control of selected {{features of the}} Asterisk PBX.|$|E
50|$|The Optical Internetworking Forum {{defines a}} UNI <b>software</b> <b>interface</b> for user systems {{to request a}} network {{connection}} from an ASON/GMPLS control plane.|$|E
50|$|In the mid 2010s a {{hobbyist}} platform <b>software</b> <b>interface,</b> SoftMPU, {{was written}} that upgrades UART (non intelligent) MPU-401 interfaces to intelligent MPU-401 interface.|$|E
50|$|The test beds use {{automation}} {{technologies and}} will provide {{demonstration of the}} systems functionality, communication fidelity and reliability, testing of data, protocols, etc. These technologies are AMI-DR models, hardware and <b>software</b> <b>interfaces,</b> <b>software</b> architecture, access control policies, recommended security schemes and algorithms, and desired set of optimizations.|$|R
50|$|The Open Knowledge Initiative (O.K.I.) is an {{organization}} responsible for the specification of <b>software</b> <b>interfaces</b> comprising a Service Oriented Architecture (SOA) based on high level service definitions.|$|R
50|$|The {{document}} {{describing the}} reference specification for the interactivity channel is ABNT NBR 15607-1:2008 - Digital terrestrial television - Interactivity channel -Part 1: Protocols, physical and <b>software</b> <b>Interfaces.</b>|$|R
50|$|Wikiwand is a {{proprietary}} <b>software</b> <b>interface</b> developed for viewing Wikipedia articles available for several popular web browsers {{as a free}} browser extension or mobile app.|$|E
50|$|In computing, para{{virtualization}} is a virtualization {{technique that}} presents to virtual machines a <b>software</b> <b>interface,</b> {{which is similar}} yet not identical to the underlying hardware-software interface.|$|E
50|$|Their {{purpose for}} {{education}} is {{quite similar to}} John L. Hennessy's and David A. Patterson's DLX architecture, from Computer Organization and Design - The Hardware <b>Software</b> <b>Interface.</b>|$|E
5000|$|ISO/IEC JTC 1/SC 22 Programming languages, {{their environments}} and system <b>software</b> <b>interfaces</b> is a {{standardization}} {{subcommittee of the}} Joint Technical Committee ISO/IEC JTC 1 of the International Organization for Standardization (ISO) and the International Electrotechnical Commission (IEC), that develops and facilitates standards within the fields of programming languages, their environments and system <b>software</b> <b>interfaces.</b> ISO/IEC JTC 1/SC 22 is also {{sometimes referred to as}} the [...] "portability subcommittee". The international secretariat of ISO/IEC JTC 1/SC 22 is the American National Standards Institute (ANSI), located in the United States.|$|R
5000|$|ISO/IEC JTC 1/SC 22 {{currently}} has 98 published standards in programming languages, their environments and system <b>software</b> <b>interfaces.</b> Some standards published by ISO/IEC JTC 1/SC 22 within this field include: ...|$|R
50|$|The {{introduction}} of new microAnalytical devices to the process industries can be enabled by employing standard physical, electrical and <b>software</b> <b>interfaces.</b> Generation III will allow tighter integration of the sample conditioning and analytical measurement devices.|$|R
