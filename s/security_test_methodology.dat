0|6066|Public
50|$|In 2001, Herzog {{created the}} Open Source <b>Security</b> <b>Testing</b> <b>Methodology</b> Manual (OSSTMM) and {{provided}} {{it for free}} to the public. It was the first <b>security</b> <b>testing</b> <b>methodology</b> ever published.|$|R
40|$|Web {{application}} {{users and}} Web application vulnerabilities are increasing. This will inevitably expose more Web application users to malicious attacks. <b>Security</b> <b>testing</b> {{is one of}} the most important software security practices, which is used to mitigate vulnerabilities in software. <b>Security</b> <b>testing</b> of Web applications is becoming complicated, and there is still need for <b>security</b> <b>testing</b> <b>methodologies.</b> This indicates that <b>security</b> <b>testing</b> <b>methodologies</b> for Web applications needs attention. The student will contribute in this respect by doing the following: 1. Execute a thorough research among state-of-the-art <b>security</b> <b>testing</b> <b>methodologies</b> for Web applications. 2. Elicit a <b>security</b> <b>testing</b> <b>methodology</b> for Web applications based on certain defined criteria. The overall goal is to elicit a <b>security</b> <b>testing</b> <b>methodology</b> that: (a) Formalizes how to detect vulnerabilities in a Web application, and makes the detection process more efficient regarding time spent and the amount of vulnerabilities that are found. (b) Mitigates false-positives during the <b>security</b> <b>testing</b> process. 3. Integrate the elicited <b>security</b> <b>testing</b> <b>methodology</b> from point 2 into the SDLC that is being used by the AIS group at CERN. The integration is to be carried out at a proof of concept level. 4. Perform a <b>security</b> <b>test</b> on parts of CERN’s largest administrative Web application: Electronic Document Handler (EDH), which has approximately 11, 000 users at world basis. (a) A Web Vulnerability Scanner must be evaluated and selected to be used in the testing iterations when there is a need for a testing tool. (b) The <b>security</b> <b>testing</b> will be executed in four iterations; two iterations using the new methodology and two iterations using the old <b>methodology.</b> The <b>testing</b> iterations are executed to collect results based on the old and new <b>security</b> <b>testing</b> <b>methodology.</b> (c) Based on the results from the first and second iteration, an evaluation of the new <b>security</b> <b>testing</b> <b>methodology</b> is to be made...|$|R
40|$|Web {{applications}} {{are becoming more}} and more popular in means of modern information interaction, which leads to a growth of the demand of Web applications. At the same time, Web application vulnerabilities are drastically increasing. This will inevitably expose more Web application users to malicious attacks, causing them to lose valuable information or be harmed in other ways. One of the most important software security practices that is used to mitigate the increasing number of vulnerabilities is <b>security</b> <b>testing.</b> The most commonly applied <b>security</b> <b>testing</b> <b>methodologies</b> today are extensive and are sometimes too complicated with their many activities and phases. Because of this complexity, developers very often tend to neglect the <b>security</b> <b>testing</b> process. Today, there is only a few <b>security</b> <b>testing</b> <b>methodologies</b> developed especially for Web applications and their agile development environment. It is therefore necessary to give attention to <b>security</b> <b>testing</b> <b>methodologies</b> for Web applications. A survey of state-of-the-art <b>security</b> <b>testing</b> <b>methodologies</b> for Web applications is performed. Based on some predefined criterions, Agile <b>Security</b> <b>Testing</b> is selected as the most adequate <b>security</b> <b>testing</b> <b>methodology</b> for Web applications, and is further extended to support all the predefined criterions. Furthermore, the extended Agile <b>Security</b> <b>Testing</b> <b>methodology</b> (EAST) is integrated into the Software Development Life Cycle applied by the Administrative Information Services group at the Department of General Infrastructure Services at CERN−The European Organization for Nuclear Research. Finally, by using the EAST <b>methodology</b> and the <b>security</b> <b>testing</b> <b>methodology</b> applied by the AIS group (which is an ad hoc way of performing <b>security</b> <b>tests),</b> an evaluation of the EAST methodology compared to existing ad hoc ways of performing <b>security</b> <b>tests</b> is made. The <b>security</b> <b>testing</b> process is carried out two times using the EAST methodology and two times using the ad hoc approach. In total, 9 vulnerability classes are tested. The factors that are used to measure the efficiency is: (1) the amount of time spent on the <b>security</b> <b>testing</b> process, (2) the amount of vulnerabilities found during the <b>security</b> <b>testing</b> process and (3) the ability to mitigate false-positives during the <b>security</b> <b>testing</b> process. The results show that the EAST methodology is approximately 21 % more effective in average regarding time spent, approximately 95 % more effective regarding the amount of vulnerabilities found, and has the ability to mitigate false-positives, compared to existing ad hoc ways of performing <b>security</b> <b>tests.</b> These results show that structured <b>security</b> <b>testing</b> of Web applications is possible not being too complicated with many activities and phases. Furthermore, it mitigates three important factors that are used as basis to neglect the <b>security</b> <b>testing</b> process. These factors are: The complexity of the testing process, the too time-consuming attitude against <b>security</b> <b>testing</b> of Web applications and that it s considered to lack a significant payoff. </p...|$|R
40|$|There is a {{need for}} {{improved}} <b>security</b> <b>testing</b> <b>methodologies</b> specialized for Web applications and their agile development environment. The number of web application vulnerabilities is drastically increasing, while <b>security</b> <b>testing</b> tends to be given a low priority. In this paper, we analyze and compare Agile <b>Security</b> <b>Testing</b> with two other common methodologies for Web application <b>security</b> <b>testing,</b> and then present an extension of this methodology. We present a case study showing how our Extended Agile <b>Security</b> <b>Testing</b> (EAST) performs compared to a more ad hoc approach used within an organization. Our working hypothesis is that the detection of vulnerabilities in Web applications will be significantly more efficient when using a structured <b>security</b> <b>testing</b> <b>methodology</b> specialized for Web applications, compared to existing ad hoc ways of performing <b>security</b> <b>tests.</b> Our results show a clear indication that our hypothesis is on the right track...|$|R
40|$|This {{document}} {{constitutes the}} third and final deliverable of work package 4, documenting results of task T 4. 1 (security patterns) and tasks 4. 2 and task 4. 3 on risk - and model-based <b>security</b> <b>testing</b> <b>methodologies.</b> While the other work packages of the DIAMONDS project describe techniques/methods and tools, workpackage 4 describes processes/guidelines for applying these tool and techniques in practice...|$|R
50|$|Pete Herzog born October 5, 1970, is a {{security}} analyst and tactician, presenter and keynote speaker, article and book author, creator and researcher for the Open Source <b>Security</b> <b>Testing</b> <b>Methodology</b> Manual (OSSTMM), and the {{co-founder of the}} open, non-profit, security research organization, ISECOM. He has been recognized in 2007 by InfoWorld for the OSSTMM and in 2013 by OpenSource.com for Hacker Highschool. He taught Business Security in the ESADE MBA program and Information Security in the La Salle URL Masters program, both in Barcelona, Spain.|$|R
40|$|International audienceVarious {{technical}} {{bodies have}} devised methodologies to guide testers to the selection, design, {{and implementation of}} the most appropriate <b>security</b> <b>testing</b> procedures for various contexts. Their general applicability is obviously regarded as a necessary and positive feature, but its consequence is the need for a complex adaptation phase to the specific systems under test. In this work, we aim to devise a simplified, yet effective methodology tailored to suit the peculiar needs related to the <b>security</b> <b>testing</b> of e-voting systems. We pursue our goal by selecting, for each peculiar aspect of these systems, the best-fitting procedures found in the most widely adopted <b>security</b> <b>testing</b> <b>methodologies,</b> at the same time taking into account the specific constraints stemming from the e-voting context to prune the excess of generality that comes with them...|$|R
40|$|This {{document}} {{constitutes the}} second deliverable for task 4. 2 and task 4. 3 of work package 4 on risk- and model-based <b>security</b> <b>testing</b> <b>methodologies.</b> While the other work packages of the DIAMONDS project describe techniques/methods and tools, work package 4 describes processes/guidelines for applying these tool and techniques in practice. This deliverable has four sections. First, in Section 1, we describe {{a conceptual framework}} defining the main concepts related to model-based <b>security</b> <b>testing</b> risk-based testing and their relationships. The conceptual framework serves a basis for defining methodologies for risk- and model-based <b>security</b> <b>testing.</b> In Section 2, we present an initial process for test-driven security risk assessment which was used in a DIAMONDS case study. This process has b een evaluated, {{and the results of}} the evaluation are presented in Section 3. Finally, Section 4 presents a method to increase the efficiency of the risk analysis process in the setting of model-based risk assessment...|$|R
40|$|Firewalls are {{hardware}} and software systems that protect a corporate network from attacks coming from the outside Internet. Despite their critical role, firewall systems are tested without well-defined and effective methodologies. In particular, field testing is performed using simple checklists of vulnerabilities without {{taking into account the}} particular topology and configuration of the firewall's target operational environment. We propose a firewall <b>testing</b> <b>methodology</b> based on a formal model of networks that allows the test engineer to model the network environment of the firewall system, to prove formally that the topology of the network verifies the sufficient conditions for protection against attacks, and to build test cases to verify that protections are actually in place. KEYWORDS Network <b>security,</b> <b>testing</b> <b>methodologies,</b> firewalls, formal methods 1 INTRODUCTION The Internet has evolved from a research network to a world-wide communication infrastructure that connects subn [...] ...|$|R
40|$|We {{describe}} an <b>methodology</b> for <b>testing</b> a software system for possible security flaws. Based on {{the observation that}} most security flaws are caused by the program's inappropriate interactions with the environment, and triggered by user's malicious perturbation on the environment (which we call an environment fault), we view the <b>security</b> <b>testing</b> problem as the problem of testing for the fault-tolerance properties of a software system. We consider each environment perturbation as a fault and the resulting security compromise a failure in the toleration of such faults. Our approach {{is based on the}} well known technique of fault-injection. Environment faults are injected into the system under test and system behavior observed. The failure to tolerate faults is an indicator of a potential security flaw in the system. An Environment-Application Interac- tion (EAT) fault model is proposed which guides us to decide what faults to inject. Based on EAT, we have developed a <b>security</b> <b>testing</b> <b>methodology,</b> and apply it to several applications. We successfully identified a number of vulnerabilities including vulnerabilities in Windows NT operating system...|$|R
40|$|Developing {{a secure}} Web {{application}} {{is very difficult}} task. Therefore developers need a guideline to help them to develop a secure Web application. Guideline {{can be used as}} a checklist for developer to achieve minimum standard of secure Web application. This study evaluates how good is OWASP guideline in helping developer to build secure Web application. The developed system is then tested using code auditing and penetration testing to identify the achievement of the system security for the application. After applying the testing techniques from Open Source <b>Security</b> <b>Testing</b> <b>Methodology</b> (OSSTMM) on the Top Ten Critical vulnerabilities as defined by OWASP, a standard measure score are calculated. The score is used to decide on the level of security of the developed web application. A high percentage score would indicate that the guideline helps in building a secured web application. Hence, the result proved that OWASP guideline is effective in ensuring the trustworthiness of the system and can be used as referral by other web developer especially in developing applications for a university. </p...|$|R
40|$|Software <b>security</b> <b>testing</b> {{tools and}} <b>methodologies</b> are {{presently}} abundant, {{and the question}} no longer seems to be ``if to test'' for security, but rather ``where and when to test'' and ``then what?''. In this paper we present a review of <b>security</b> <b>testing</b> literature, and propose a software <b>security</b> <b>testing</b> scheme that exploits an intra-organisational repository of discovered vulnerabilities that closes the loop after the testing of one application is complete, providing useful input to the next application to be tested...|$|R
40|$|The {{field of}} "computer security" is often {{considered}} something in between Art and Science. This is {{partly due to}} the lack of widely agreed and standardized methodologies to evaluate the degree of the security of a system. This dissertation intends to contribute to this area by investigating the most common <b>security</b> <b>testing</b> strategies applied nowadays and by proposing an enhanced methodology that may be effectively applied to different threat scenarios with the same degree of effectiveness. <b>Security</b> <b>testing</b> <b>methodologies</b> are the first step towards standardized security evaluation processes and understanding of how the security threats evolve over time. This dissertation analyzes some of the most used identifying differences and commonalities, useful to compare them and assess their quality. The dissertation then proposes a new enhanced methodology built by keeping the best of every analyzed methodology. The designed <b>methodology</b> is <b>tested</b> over different systems with very effective results, which is the main evidence that it could really be applied in practical cases. Most of the dissertation discusses and proves how the presented <b>testing</b> <b>methodology</b> could be applied to such different systems and even to evade security measures by inverting goals and scopes. Real cases are often hard to find in methodology' documents, in contrary this dissertation wants to show real and practical cases offering technical details about how to apply it. Electronic voting systems are the first field test considered, and Pvote and Scantegrity are the two tested electronic voting systems. The usability and effectiveness of the designed methodology for electronic voting systems is proved thanks to this field cases analysis. Furthermore reputation and anti virus engines have also be analyzed with similar results. The dissertation concludes by presenting some general guidelines to build a coordination-based approach of electronic voting systems to improve the security without decreasing the system modularity. ...|$|R
40|$|This paper {{describes}} a prototype <b>security</b> <b>testing</b> tool {{that is currently}} under development at NIST. This prototype tool uses autonomous mobile agents to perform distributed, fault-tolerant, and adaptive network <b>security</b> <b>testing.</b> The <b>security</b> <b>testing</b> prototype is compared to existing methods, the design goals are outlined, its <b>testing</b> <b>methodology</b> is described, and {{the advantages and disadvantages}} of using mobile agents for <b>security</b> <b>testing</b> are discussed...|$|R
40|$|Background Fuzz testing {{can be used}} {{to detect}} {{software}} programming flaws present in an application by submitting malformed input to the application as it executes. Some programming flaws impact upon the security of an application by undermining the performance of controls, rendering the application vulnerable to attack. Hence, the discovery of programming flaws can lead to the discovery of <b>security</b> vulnerabilities. Fuzz <b>testing</b> (like almost all run-time testing) does not require access to the source code, which makes it attractive to those who wish to assess the security of an application, but are unable to obtain access to the source code, such as end-users, corporate clients, security researchers and cyber criminals. Motivation The author wanted to explore the value of fuzz testing {{from the point of view}} of a corporate client that intends to release software including a component developed by a third party, where the component source code is not available for review. Three case studies where conducted: two practical fuzz <b>testing</b> <b>methodologies</b> ('blind' data mutation and protocol analysis-based fuzzing) were employed to discover vulnerabilities in a commercial operating system, and a purposefully vulnerable web server, respectively. A third case study involved the exploitation of a vulnerability discovered using fuzz testing, including the production of 'Proof of Concept' code. Conclusions It was found that fuzzing is a valid method for identifying programming flaws in software applications, but additional analysis is required to determine whether discovered flaws represented a security vulnerability. In order to better understand the analysis and ranking of errors discovered using fuzz testing, exploit code was developed based on a flaw discovered using fuzz testing. It was found that the level of skill required to create such an exploit depends (largely) upon the nature of the specific programming flaw. In the worst case (where user-controlled input values are passed to the instruction pointer register), the level of skill required to develop an exploit that permitted arbitrary code execution was minimal. Due to the scale and range of input data accepted by all but the most simple of applications, fuzzing is not a practical method for detecting all flaws present in an application. However, fuzzing should not be discounted since no current software <b>security</b> <b>testing</b> <b>methodology</b> is capable of discovering all present flaws, and fuzzing can offer benefits such as automation, scalability, and a low ratio of false-positives...|$|R
40|$|The Grant Proposal Management System (GPMS) is {{a secure}} web-based {{workflow}} management system that uses ABAC (Attribute-Based Access Control). ABAC is a fine-grained access control {{model in which}} attributes, such as position type or title are used to restrict access for who can do what, how and when. In contrast to time-consuming and tedious manual testing, test automation tools such as Selenium allow verification of all possible workflow scenarios in a repeatable manner. Testing of the GPMS requires black box testing of software functional requirements as well as policy-based <b>security</b> implementation. Our <b>testing</b> <b>methodology</b> uses a combination of Selenium IDE, Selenium WebDriver, and JUnit. Selenium IDE is a Firefox browser plugin that records user actions on the visible aspects of an application. On the other hand, Selenium WebDriver is an Object-Oriented API allowing test cases for hidden web elements. The use of logic in each test case along with the overall flow of information allows for testing of a secure workflow application...|$|R
40|$|Interest in {{security}} assessment and penetration testing techniques has steadily increased. Likewise, security of industrial control systems (ICS) {{has become more}} and more important. Very few methodologies directly target ICS and none of them generalizes the concept of "critical infrastructures pentesting". Existing methodologies and tools cannot be applied directly to critical infrastructures (CIs) due to safety and availability requirements. Moreover, there is no clear understanding on the specific output that CI operators need from such an assessment. We propose a new methodology tailored to support <b>security</b> <b>testing</b> in ICS/CI environments. By analyzing security assessments and penetration <b>testing</b> <b>methodologies</b> proposed for other domains and interviewing stakeholders to identify existing best practices adopted in industry, deriving related issues and collecting proposals for possible solutions we propose a new security assessment and penetration <b>testing</b> <b>methodology</b> for critical infrastructure...|$|R
40|$|End-users {{and vendors}} of control systems used in Supervisory Control and Data Acquisition (SCADA) and Industrial Control System(s) (ICS) have {{expressed}} {{concerns that the}} deployment of antivirus software may interfere with the operation of time-critical control processes. This paper describes an effort to establish a set of guidelines and a <b>test</b> <b>methodology</b> for industry to help minimize performance degradation when deploying commercial off-the-shelf antivirus products with ICS. The effort is being performed for industry through a collaborative effort between the National Institute of Standards and Technology, and the Department of Energy’s National SCADA Test Bed at Sandia National Laboratories. A survey was conducted of end-users and vendors who are currently using or recommending the use of antivirus software with their ICS. Information gathered from industry includes system configurations, needs and priorities for performance, as well as current practices and problems using antivirus software on control system workstations and servers. Antivirus software vendors are also providing input to this study. Parallel to the survey, NIST is conducting a series of performance impact tests using commercially available antivirus software packages and control software within its Industrial Control <b>Security</b> <b>Testbed.</b> The results of the survey and testbed work are being compiled into a documented set of guidelines and a <b>test</b> <b>methodology</b> for industry. The <b>test</b> <b>methodology</b> will be presented as a general set of test procedures {{to be used by}} industry as a starting point when developing control system specific performance impact tests. A set of laboratory-based tests that demonstrate use of the <b>test</b> <b>methodology</b> and provide example performance data is also being developed in support of this effort...|$|R
40|$|Abstract—Software <b>security</b> <b>testing</b> is an {{important}} means to ensure software security and trustiness. This paper first mainly discusses the definition and classification of software <b>security</b> <b>testing,</b> and investigates methods and tools of software <b>security</b> <b>testing</b> widely. Then it analyzes and concludes {{the advantages and disadvantages}} of various methods and the scope of application, presents a taxonomy of <b>security</b> <b>testing</b> tools. Finally, the paper points out future focus and development directions of software <b>security</b> <b>testing</b> technology. Keywords—security <b>testing,</b> <b>security</b> functional <b>testing,</b> <b>security</b> vulnerability <b>testing,</b> testing method, testing tool I...|$|R
40|$|Identifying {{vulnerabilities}} {{and ensuring}} security functionality by <b>security</b> <b>testing</b> {{is a widely}} applied measure to evaluate and improve the security of software. Due to the openness of modern software-based systems, applying appropriate <b>security</b> <b>testing</b> techniques is of growing importance and essential to perform effective and efficient <b>security</b> <b>testing.</b> Therefore, an overview of actual <b>security</b> <b>testing</b> techniques is of high value both for researchers to evaluate and refine the techniques and for practitioners to apply and disseminate them. This chapter fulfills this need and {{provides an overview of}} recent <b>security</b> <b>testing</b> techniques. For this purpose, it first summarize the required background of <b>testing</b> and <b>security</b> engineering. Then, basics and recent developments of <b>security</b> <b>testing</b> techniques applied during the secure software development lifecycle, i. e., model-based <b>security</b> <b>testing,</b> code-based testing and static analysis, penetration testing and dynamic analysis, as well as <b>security</b> regression <b>testing</b> are discussed. Finally, the <b>security</b> <b>testing</b> techniques are illustrated by adopting them for an example three-tiered web-based business application...|$|R
40|$|Abstract. Aiming at the {{difficulty}} in writing network <b>security</b> <b>test</b> programs, this paper designs and realizes a visualized network <b>security</b> <b>test</b> platform. It first defines a template for <b>security</b> <b>test</b> program, which encapsulates the commonly used network packet operations. Then it provides a visualized design interface, and saves the design results into description files. Finally it resolves the description files to form the <b>security</b> <b>test</b> program. This platform can simplify the design procedure, thus improve the efficiency of writing a network <b>security</b> <b>test</b> program. ...|$|R
5000|$|To {{encourage}} {{the formation of}} commercial <b>security</b> <b>testing</b> laboratories {{and the development of}} a private sector <b>security</b> <b>testing</b> industry ...|$|R
5000|$|Software <b>security</b> <b>testing,</b> which {{includes}} penetration testing, confirms {{the results of}} design and code analysis, investigates software behaviour, and verifies that the software complies with security requirements. Special <b>security</b> <b>testing,</b> conducted in accordance with a <b>security</b> <b>test</b> plan and procedures, establishes the compliance of the software with the <b>security</b> requirements. <b>Security</b> <b>testing</b> focuses on locating software weaknesses and identifying extreme or unexpected situations that could cause the software to fail {{in ways that would}} cause a violation of <b>security</b> requirements. <b>Security</b> <b>testing</b> efforts are often limited to the software requirements that are classified as [...] "critical" [...] security items.|$|R
40|$|Abstract: <b>Security</b> <b>testing</b> and <b>security</b> risk {{analysis}} are key issues and central to strengthening {{the ability of}} companies to face the new security challenges posed by the future internet. We present a conceptual framework clarifying the notions of <b>security</b> <b>testing,</b> <b>security</b> {{risk analysis}}, and related concepts, as well as defining the relations among them. The conceptual framework is built upon established concepts from state-of-the-art standards. We focus on model-based approaches for <b>security</b> <b>testing</b> and <b>security</b> risk analysis and distinguish between model-based <b>security</b> <b>testing</b> (MST) and model-based security risk analysis (MSR). In particular, we present the two possible combinations of MST and MSR, which are risk-driven model-based <b>security</b> <b>testing</b> (RMST) and test-driven model-based security risk analysis (TMSR). The conceptual framework offers a basis for future research by providing a common understanding of the central notions within <b>security</b> <b>testing</b> and <b>security</b> risk analysis...|$|R
5000|$|Conformance <b>testing</b> <b>methodology</b> standards: specify {{methods and}} procedures, {{assertion}} language definitions, test assertions, testing and reporting requirements, {{and other aspects}} of conformance <b>testing</b> <b>methodologies.</b>|$|R
50|$|<b>Security</b> <b>testing</b> is {{a process}} {{intended}} to reveal flaws in the security mechanisms of an information system that protect data and maintain functionality as intended. Due to the logical limitations of <b>security</b> <b>testing,</b> passing <b>security</b> <b>testing</b> is not an indication that no flaws exist or that the system adequately satisfies the security requirements.|$|R
40|$|The European ITEA 2 project DIAMONDS (Development and Industrial Application of Multi-Domain <b>Security</b> <b>Testing</b> Technologies) {{develops}} {{under the}} direction of Fraunhofer FOKUS, Berlin efficient and automated <b>security</b> <b>test</b> methods for security-critical, networked systems in various industrial domains such as industrial automation, banking and telecommunications. DIAMONDS develops methods to design objective, transparent, repeatable, and automated <b>security</b> <b>tests</b> that focus on system specifications and related risks. The project goals include the development of a <b>security</b> <b>test</b> pattern catalogue and the development of model-based <b>security</b> <b>testing</b> techniques such as risk-based testing and model-based fuzz testing. The project results are made available through publications and contributions to the standardization at ETSI and other standardization bodies. The presentation focusses on model-based fuzz testing, reviews the state of the art, compare it to similar approaches such as mutation testing, and presents first results on behaviour fuzzing for <b>security</b> <b>testing...</b>|$|R
40|$|Software {{security}} {{issues have been}} a major concern in the cyberspace community, so a great deal of research on <b>security</b> <b>testing</b> has been performed, and various <b>security</b> <b>testing</b> techniques have been developed. Threat modeling provides a systematic way to identify threats that might compromise security, and it has been a well-accepted practice by the industry, but test case generation from threat models has not been addressed yet. Thus, in this paper, we propose a threat model-based <b>security</b> <b>testing</b> approach that automatically generates <b>security</b> <b>test</b> sequences from threat trees and transforms them into executable <b>tests.</b> The <b>security</b> <b>testing</b> approach we consider consists of three activities in large: building threat models with threat trees; generating <b>security</b> <b>test</b> sequences from threat trees; and creating executable test cases by considering valid and invalid inputs. To support our approach, we implemented <b>security</b> <b>test</b> generation techniques, and we also conducted an empirical study to assess the effectiveness of our approach. The results of our study show that our threat tree-based approach is effective in exposing vulnerabilities. Copyright © 2012 John Wiley & Sons, Ltd...|$|R
40|$|This work {{is aimed}} on documenting {{the use of}} tools for <b>security</b> <b>testing</b> of web applica-tions. First {{part of the work}} lists and {{describes}} most common vulnerabilities. Then tools to detect these vulnerabilities are tested. The most suitable tool, or a combination of tools, suitable for repeated and automated <b>security</b> <b>testing,</b> is selected. Another goal is the inte-gration of automated <b>security</b> <b>testing</b> into the development lifecycle of web application. The benefit would be facilitation of web application <b>security</b> <b>testing</b> for individuals or small teams...|$|R
40|$|<b>Security</b> <b>testing</b> aims at validating {{software}} system requirements related to security properties like confidentiality, integrity, authentication, authorization, availability, and non-repudiation. Although <b>security</b> <b>testing</b> techniques {{are available for}} many years, {{there has been little}} approaches that allow for specification of test cases at a higher level of abstraction, for enabling guidance on test identification and specification as well as for automated <b>test</b> generation. Model-based <b>security</b> <b>testing</b> (MBST) is a relatively new field and especially dedicated to the sys-tematic and efficient specification and documentation of <b>security</b> <b>test</b> objectives, <b>security</b> <b>test</b> cases and test suites, as well as to their automated or semi-automated generation. In particular, the com-bination of <b>security</b> modelling and <b>test</b> generation approaches is still a challenge in research and of high interest for industrial applications. MBST includes e. g. <b>security</b> functional <b>testing,</b> model-based fuzzing, risk- and threat-oriented testing, and the usage of <b>security</b> <b>test</b> patterns. This paper provides a survey on MBST techniques and the related models as well as samples of new methods and tools that are under development in the European ITEA 2 -project DIAMONDS. ...|$|R
40|$|The Internet of Things (IoT) is {{a global}} {{ecosystem}} of {{information and communication technologies}} aimed at connecting any type of object (thing), at any time and in any place, {{to each other and to}} the Internet. One of the major problems associated with the IoT is maintaining security; the heterogeneous nature of such deployments poses a challenge to many aspects of <b>security,</b> including <b>security</b> <b>testing</b> and analysis. In addition, there is no existing mechanism that performs <b>security</b> <b>testing</b> for IoT devices in different contexts. In this paper, we propose an innovative <b>security</b> <b>testbed</b> framework targeted at IoT devices. The <b>security</b> <b>testbed</b> supports both standard and context-based <b>security</b> <b>testing,</b> with a set of <b>security</b> <b>tests</b> conducted under the different environmental conditions in which IoT devices operate. The requirements and architectural design of the proposed testbed are discussed, and the testbed operation is demonstrated in several testing scenarios...|$|R
40|$|Recently, in the <b>Security</b> <b>testing</b> domain {{a lot of}} {{knowledge}} has been collected from {{a significant amount of}} research. The contribution provides an introduction to advanced <b>security</b> <b>testing</b> methods and techniques in the context of European research and standardization projects. This includes numerous guidelines and best practices that have been identified and are applied in the context of industrial case studies. In particular it addresses risk modeling, <b>security</b> <b>test</b> pattern, functional <b>security</b> <b>tests</b> as well as fuzz testing, as important contributions to systematic, automatized test approaches in research, industry and standardization...|$|R
5000|$|Web <b>security</b> <b>testing</b> {{tells us}} whether Web-based {{applications}} requirements are met {{when they are}} subjected to malicious input data.There is a web application <b>security</b> <b>testing</b> plug-in collection for FireFox ...|$|R
30|$|Risk {{analysis}} is the quantitative analysis of risk {{present in a}} system. Risk {{analysis is}} done based on the threat modeling results. Risk analysis is performed to find the vulnerable states {{that need to be}} <b>tested.</b> Risk Driven <b>Security</b> <b>Testing</b> (RST) and Test Driven Security Risk Analysis (TSR) are the two approaches of risk analysis. Security risk analysis is a specialized risk analysis approach in which information security risk associated with the potential threats will be evaluated. In RST, <b>security</b> <b>testing</b> is supported by security risk assessment in order to make <b>security</b> <b>testing</b> more effective. The aim is to focus the <b>security</b> <b>testing</b> process to carry out <b>security</b> <b>tests</b> on the most important parts of the System Under Test, and to execute only the selected test cases. In TSR security risk analysis is supported by <b>security</b> <b>testing</b> in order to develop and/or validate risk models. The objective of TSR is to strengthen the correctness of the security risk analysis models.|$|R
40|$|Abstract. <b>Security</b> <b>testing</b> {{involves}} two approaches; {{the question}} of who should do it has two answers. Standard testing organizations using a traditional approach can perform functional <b>security</b> <b>testing.</b> For example, ensuring that access control mechanisms work as advertised is a classic functional <b>testing</b> exercise. Systematic <b>security</b> <b>testing</b> approaches should be seamlessly incorporated into software engineering curricula and software development process. Traditional software engineering textbooks failed to provide adequate methods and techniques for students and software engineers to bring security engineering approaches to software development process generating secure software as well as correct software. This paper argues that a <b>security</b> <b>testing</b> phase should be added to software development process with systematic approach to generating and conducting destructive <b>security</b> <b>test</b> sets following a complete coverage principle. Software engineers must have formal training on writing secure code. The <b>security</b> <b>testing</b> tasks include penetrating and destructive tests that are different from functional testing tasks currently covered in software engineering textbooks Moreover, component-based development and formal methods could be useful to produce secure code, as well as automatic security checking tools. Some experience of applying <b>security</b> <b>testing</b> principles in our software engineering method teaching is reported...|$|R
30|$|The {{concepts}} of security are applicable to real-time systems and so {{models of the}} system are needed for better testing which indeed leads to Model-Based <b>Security</b> <b>Testing.</b> It relies on models of a System Under Test (SUT) and its environment. Model-Based <b>Security</b> <b>Testing</b> {{is a combination of}} four approaches namely <b>security</b> <b>testing,</b> risk-oriented testing, model-based testing and test automation. Risk-oriented testing uses risk analysis results in test case identification, selection and assessment to prioritize and optimize the testing process.|$|R
