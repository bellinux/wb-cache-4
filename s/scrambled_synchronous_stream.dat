0|165|Public
40|$|Abstract. In this paper, {{we discuss}} {{security}} properties for <b>synchronous</b> <b>stream</b> ciphers. Let the key size and claimed security level be k. Following an initial proposal by Hawkes and Rose [6], {{we argue that}} a <b>synchronous</b> <b>stream</b> cipher should encrypt at most 2 k/ 2 plaintext blocks before changing the key. We claim further that a <b>synchronous</b> <b>stream</b> cipher should ideally provide for IV sizes of both k/ 2 and k, with the second size being mandatory. In this context, recent results by Hong and Sarkar [3] are also briefly discussed...|$|R
40|$|Abstract. In {{this paper}} we {{show how the}} <b>synchronous</b> <b>stream</b> cipher Edon 80 - {{proposed}} as a candidate stream cipher in Profile 2 of the eSTREAM project, can be efficiently upgraded to <b>synchronous</b> <b>stream</b> cipher with authentication. We are achieving that by simple addition of two-bit registers into the e-transformers of Edon 80 core, an additional 160 -bit shift register and by putting additional communication logic between neighboring e-transformers of the Edon 80 pipeline core. This upgrade {{does not change the}} produced keystream from Edon 80 and we project that in total it will need not more then 1500 gates. Key words: hardware, <b>synchronous</b> <b>stream</b> cipher, MAC, Edon 80...|$|R
40|$|HENKOS[1] is a <b>synchronous</b> <b>stream</b> cipher {{posted by}} Marius Oliver Gheorghita to eprint. In this paper {{we are going}} to present some {{weaknesses}} in the cipher. We first present a chosen IV attack which is very straight forward attack on the cipher. Second we present a group of weak keys. Key words: <b>synchronous</b> <b>stream</b> ciphers, weak keys / related keys, chosen IV attack. 1. Introduction and Algorith...|$|R
40|$|This article {{presents}} a causality analysis for a <b>synchronous</b> <b>stream</b> language with higher-order functions. This analysis takes {{the shape of}} a type system with rows. Rows were originally designed to add extensible records to the ML type system (Didier Remy, Mitchell Wand). We also restate briey the coiterative semantics for <b>synchronous</b> <b>streams</b> (Paul Caspi, Marc Pouzet), and prove the correctness of our analysis with respect to this semantics...|$|R
40|$|In {{synchronous}} digital communications it {{is important}} to recover the receiver clock, but this is difficult when received data contains long consecutive-zero sequences. We suggest a zero suppression (ZS) algorithm, which suppresses consecutive-zero sequences of more than k zeros between successive ones in a ciphertext at the sender of a <b>synchronous</b> <b>stream</b> cipher system, and recovers the original message exactly at the receiver. The probability of k consecutive zeros in ciphertext at the sender is 22 k in a <b>synchronous</b> <b>stream</b> cipher without ZS, but 0 with the suggested algorithm. The ZS algor-ithm does not affect cryptographic security when com-pared with a <b>synchronous</b> <b>stream</b> cipher without ZS. It is useful for systems which limit consecutive zeros, such as a T 1 -carrier system (k = 15) ...|$|R
50|$|SNOW 1.0, SNOW 2.0, and SNOW 3G are word-based <b>synchronous</b> <b>stream</b> ciphers {{developed}} by Thomas Johansson and Patrik Ekdahl at Lund University.|$|R
50|$|Trivium is a <b>synchronous</b> <b>stream</b> cipher {{designed}} to provide a flexible trade-off between speed and gate count in hardware, and reasonably efficient software implementation.|$|R
5000|$|Ethernet frames {{which are}} to be sent on the SDH link are sent through an [...] "encapsulation" [...] block (typically Generic Framing Procedure or GFP) to create a <b>synchronous</b> <b>stream</b> of data from the {{asynchronous}} Ethernet packets. The <b>synchronous</b> <b>stream</b> of encapsulated data is then passed through a mapping block which typically uses virtual concatenation (VCAT) to route the stream of bits over one or more SDH paths. As this is byte interleaved, it provides a better level of security compared to other mechanisms for Ethernet transport.|$|R
40|$|International audienceThis paper {{presents}} {{an attempt to}} characterize <b>synchronous</b> <b>stream</b> functions {{within the framework of}} co-iteration and to use this characterization in building a compiler for (higher order and recursive) synchronous data-flow programs. First, length-preserving functions are considered and we show that streams equipped with such functions form a Cartesian-closed category. Then this point of view is extended toward non length-preserving ones and we stress the use of “empty” values in handling this case. Finally, the implementation we did of this material in a <b>synchronous</b> <b>stream</b> language built on top of an ML-like language is briefly described...|$|R
50|$|SOBER-128 is a <b>synchronous</b> <b>stream</b> cipher {{designed}} by Hawkes and Rose (2003) {{and is a}} member of the SOBER family of ciphers. SOBER-128 was also designed to provide MAC (Message authentication code) functionality.|$|R
50|$|LILI-128 is an LFSR based <b>synchronous</b> <b>stream</b> cipher with a 128-bit key. On 13 November 2000, LILI-128 was {{presented}} at the NESSIE workshop. It is designed to be simple to implement in both software and hardware.|$|R
40|$|Abstract—Edon 80 is a {{hardware}} binary additive <b>synchronous</b> <b>stream</b> cipher {{submitted to the}} last phase of the eSTREAM project. The period of keystream of Edon 80 is relatively short {{and there is a}} key recovery attach on it. In this paper, by modifying the IVSetup mode and the Keystream mode of Edon 80, and by introducing a new e-transformation based on Latin cubes, we design a binary additive <b>synchronous</b> <b>stream</b> cipher named CHAINS 80 with a much larger keystream period and it can resist the key recovery attack given by Johansson and Hell. Keywords—stream cipher; Edon 80; key recovery attack; quasigroup; Latin square I...|$|R
50|$|After {{traversing}} SDH paths, {{the traffic}} is processed in the reverse fashion: virtual concatenation path processing {{to recreate the}} original <b>synchronous</b> byte <b>stream,</b> followed by decapsulation to converting the <b>synchronous</b> data <b>stream</b> to an asynchronous stream of Ethernet frames.|$|R
40|$|Abstract. We {{introduce}} a new model- the Filter-Combiner model-for memoryless <b>synchronous</b> <b>stream</b> ciphers. The new model combines the best features of the classical models for memoryless <b>synchronous</b> <b>stream</b> ciphers- the Nonlinear-Combiner model and the Nonlinear-Filter model. In particular, we show that the Filter-Combiner model provides key length optimal resistance to correlation attacks and eliminates weaknesses of the NF model such as the the Anderson leakage and the Inversion Attacks. Further, practical length sequences extracted from the Filter-Combiner model cannot be distinguished from true random sequences based on linear complexity test. We show how to realise the Filter-Combiner model using Boolean functions and cellular automata. In the process we point out an important security advantage of sequences obtained from cellular automata over sequences obtained from LFSRs...|$|R
40|$|In some {{applications}} for <b>synchronous</b> <b>stream</b> ciphers frequent resynchronization or resynchronization upon request may be necessary. We describe a weakness {{in a class}} of combiners with one-bit memory which makes them vulnerable in such applications requesting resynchronization. A correlation attack based on chi-square criterion, which in some aspects complements the attack studied by Daemen et. al., is presented. Stream ciphers are an important class of encryption algorithms. They encrypt individual characters of a plaintext one at a time, using encryption transformation, which varies with time. We consider a weakness of <b>synchronous</b> <b>stream</b> ciphers with one-bit memory. Our investigations justify the designers intuitive understanding that in conservative design of such combiners should not be used linear memory functions, despite their easy implementation...|$|R
50|$|In {{cryptography}} key feedback mode (KFB) is a mode {{of operation}} for cryptographic block ciphers. It uses the block cipher output block to form the block cipher key of the next round, thereby creating a keystream generator {{that can be used}} as a <b>synchronous</b> <b>stream</b> cipher.|$|R
40|$|Abstract. We {{introduce}} a new model – the Filter-Combiner model – for memoryless <b>synchronous</b> <b>stream</b> ciphers. The new model combines the best features of the classical models for memoryless <b>synchronous</b> <b>stream</b> ciphers – the Nonlinear-Combiner model and the Nonlinear-Filter model. In particular, we show that the Filter-Combiner model provides key length optimal resistance to correlation attacks and eliminates weaknesses of the NF model such as the the Anderson leakage and the Inversion Attacks. Further, practical length sequences extracted from the Filter-Combiner model cannot be distinguished from true random sequences based on linear complexity test. We show how to realise the Filter-Combiner model using Boolean functions and cellular automata. In the process we point out an important security advantage of sequences obtained from cellular automata over sequences obtained from LFSRs...|$|R
40|$|This paper {{presents}} {{an attempt to}} characterize <b>synchronous</b> <b>stream</b> functions {{within the framework of}} co-iteration and to use this characterization in building a compiler for (higher order and recursive) synchronous data-flow programs. First length-preserving functions are considered and we show that streams equipped with such functions form a Cartesian-closed category. Then this point of view is extended toward non length-preserving ones and we stress the use of "empty" values in handling this case. Finally, the implementation we did of this material in a <b>synchronous</b> <b>stream</b> package built on top of an ML-like language is briefly described. 2 Caspi, Pouzet VERIMAG Research Report 97 [...] 07 3 Contents 1 Introduction 5 1. 1 Paper content.................................. 5 1. 2 Related issues.................................. 6 1. 2. 1 Synchrony and reactive systems.................... 6 1. 2. 2 Synchrony a [...] ...|$|R
50|$|A {{stream cipher}} generates {{successive}} {{elements of the}} keystream based on an internal state. This state is updated in essentially two ways: if the state changes independently of the plaintext or ciphertext messages, the cipher is classified as a <b>synchronous</b> <b>stream</b> cipher. By contrast, self-synchronising stream ciphers update their state based on previous ciphertext digits.|$|R
40|$|How can we {{integrate}} interaction into {{a purely}} declarative language? This tutorial describes {{a solution to}} this problem based on a monad. The solution has been implemented in the functional language Haskell and the declarative language Escher. Comparisons are given to other approaches to interaction based on <b>synchronous</b> <b>streams,</b> continuations, linear logic, and side effects...|$|R
40|$|In {{this paper}} we extend the {{conditional}} correlation attack ([LCPP 96]) against the nonlinear filter generator (NLFG) by introducing new conditions and generalisations and present two known-plaintext attacks, called hybrid correlation attack and concentration attack. The NLFG {{is a well}} known LFSR-based keystream generator {{which could be used}} as a basic building block in a <b>synchronous</b> <b>stream</b> cipher system...|$|R
40|$|This paper {{describes}} a participant’s experience of using <b>synchronous</b> <b>streaming</b> media broadcasts over the Internet {{in order to}} participate in interactive courses that are offered live via satellite. With adequate and well-managed resources, live streaming media webcasts can be a viable alternative for delivering effective instruction to students who might not otherwise have access to it...|$|R
50|$|Securely using {{a secure}} <b>synchronous</b> <b>stream</b> cipher {{requires}} that one never reuse the same keystream twice. That generally means a different nonce or key must be supplied to each invocation of the cipher. Application designers must {{also recognize that}} most stream ciphers provide not authenticity but privacy: encrypted messages may still have been modified in transit.|$|R
40|$|We present SFINKS, a {{low-cost}} <b>synchronous</b> <b>stream</b> cipher for hardware applications with an associated authentication mechanism. The stream cipher {{is based on}} a Simple Filter generator, using the INverse function in 16 to generate the Key Stream. The design is based on simple and well-studied concepts, and its security is analyzed with respect to the portfolio of known cryptanalytic attacks for filter generators...|$|R
40|$|Abstract. Sober-t 16 and Sober-t 32 are two <b>synchronous</b> <b>stream</b> ci-phers {{developed}} by G. Rose and P. Hawkes and {{submitted to the}} NESSIE competition. In this paper we show how a probabilistic factor in the de-sign can be exploited. A Guess and Determine attack is mounted against Sober-tw. For unstuttered Sober-t 32, this attack is more e±cient than exhaustive key search...|$|R
40|$|Articles include: Groundwater Pathways in the Industrial Duwamish Corridor, Seattle; Environmental Limitations to Vegetation Establishment and Growth in Vegetated Stormwater Biofilters; The Geologic Framework for the City of Seattle and the Seattle-Tacoma Urban Corridor; Urban Stream Rehabilitation [...] A Progress Report on the Center's 3 -Year Project; The Regional, <b>Synchronous</b> <b>Stream</b> Temperature Survey of 1998 : 600 Sites in 120 Minutes. ...|$|R
40|$|In some {{applications}} for <b>synchronous</b> <b>stream</b> ciphers frequent resynchronization or resynchronization upon request may be necessary. We describe a weakness in a clams of combiners with one-bit memory {{which makes them}} vulnerable in such applications requesting resynchronization. A correlation attack based on chi-square criterion, which in some aspects complements the attack studied by Daemen et. al., is presented. status: publishe...|$|R
40|$|This {{document}} specifies Trivium, {{a hardware}} oriented <b>synchronous</b> <b>stream</b> cipher {{which aims to}} provide a flexible trade-o# between speed and area. The description of the cipher is followed by some performance figures and {{a summary of the}} cryptographic properties of the algorithm. For a more theoretical discussion of the rationale behind the design, the reader is referred to the accompanying paper [1]...|$|R
50|$|In a <b>synchronous</b> <b>stream</b> cipher, {{the sender}} and {{receiver}} must be exactly in step for decryption to be successful. If digits are added or {{removed from the}} message during transmission, synchronisation is lost. To restore synchronisation, various offsets can be tried systematically to obtain the correct decryption. Another approach is to tag the ciphertext with markers at regular points in the output.|$|R
40|$|ABC ([1]) is a <b>synchronous</b> <b>stream</b> cipher {{submitted}} by Anashin, Bogdanov, Kizhvatov and Kumar to the ECRYPT call for Stream Cipher Primitives. In this paper, we present {{an attack against}} ABC which retrieves the complete internal state of the keystream generator after the key setup and before the IV setup (and thus provides an equivalent key). The attack requires computations and 2 32 -bit keystream words...|$|R
50|$|As the {{keystream}} {{is independent}} of plaintext and ciphertext, KFB mode turns a block cipher into a synchronous streamcipher. Just as with other <b>synchronous</b> <b>stream</b> ciphers, inverting {{a bit in the}} ciphertext produces an inverted bit in the plaintext at the same location, but does not affect further parts of the plaintext. This property allows many error correcting codes to function normally even when applied before encryption.|$|R
40|$|Abstract. We present SFINKS, a {{low-cost}} <b>synchronous</b> <b>stream</b> cipher for hardware applications with an associated authentication mechanism. The stream cipher {{is based on}} a Simple Filter generator, using the INverse function in F 216 to generate the Key Stream. The design is based on simple and well-studied concepts, and its security is analyzed with respect to the portfolio of known cryptanalytic attacks for filter generators. ...|$|R
40|$|Abstract: In this paper, we will {{propose a}} new type of cipher named DICING_CSB, which come from our {{previous}} a <b>synchronous</b> <b>stream</b> cipher DICING. It applies a stream of subkeys and a encryption form of block ciphers, so, it can be viewed a combinative of stream cipher and block cipher. Hence, the new type of cipher has fast speed like a stream cipher and no need MAC...|$|R
40|$|In this paper, we will {{propose a}} new <b>synchronous</b> <b>stream</b> cipher named DICING, {{which can be}} viewed as a clock-controlled one but with a new {{mechanism}} of altering steps. It has satisfactory performance and there have not been found weakness for the known attacks, the key sizes can be 128 bits and 256 bits respectively. Comment: there are found a few of typos in the former on...|$|R
50|$|In a <b>synchronous</b> <b>stream</b> cipher {{a stream}} of {{pseudo-random}} digits is generated independently of the plaintext and ciphertext messages, and then combined with the plaintext (to encrypt) or the ciphertext (to decrypt). In the most common form, binary digits are used (bits), and the keystream is combined with the plaintext using the exclusive or operation (XOR). This is termed a binary additive stream cipher.|$|R
40|$|Abstract: In this paper, we will {{propose a}} new <b>synchronous</b> <b>stream</b> cipher named DICING, {{which can be}} taken as a clock-controlled one but with a new {{mechanism}} of altering steps. With the simple construction, DICING has satisfactory performance, faster than AES about two times. For the security, there have not been found weakness for the known attacks, the key sizes can be 128 bits and 256 bits respectively...|$|R
