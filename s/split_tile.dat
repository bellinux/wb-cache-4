0|24|Public
50|$|Since the 2014 season, the College Football Playoff, {{culminating}} in the CFP National Championship Game, has provided a means {{for all of the}} top-4 teams in the nation to compete against each other, allowing one of the teams to come away with two wins over top-4 opponents in consecutive, season ending weeks. This system is designed to entirely eliminate <b>split</b> <b>tiles</b> and crown a single championship. The system worked immediately, giving the Ohio State Buckeyes a title in its very first year.|$|R
40|$|A general divide-and-conquer {{technique}} can {{be described}} in three steps: the input is recursively <b>split</b> into k <b>tiles</b> while the tile size exceeds a fixed size M, individual tiles are sorted independently and merged into the final sorted sequence. Most divide-and-conquer algorithms are based either on a k-way distribution or a k-way merge procedure. In the former case, the input is <b>split</b> into <b>tiles</b> tha...|$|R
40|$|We {{study the}} {{structural}} transformations induced, via the cut-and-project method, in quasicrystals and tilings by lattice transitions in higher dimensions, {{with a focus}} on transition paths preserving at least some symmetry in intermediate lattices. We discuss the effect of such transformations on planar aperiodic Penrose tilings, and on three-dimensional aperiodic Ammann tilings with icosahedral symmetry. We find that locally the transformations in the aperiodic structures occur through the mechanisms of <b>tile</b> <b>splitting,</b> <b>tile</b> flipping and tile merger, and we investigate the origin of these local transformation mechanisms within the projection framework...|$|R
5000|$|An {{extension}} to the corner-stitched geometry representation called the [...] "split tile" [...] method, added in version 7.1, allows true representation of non-Manhattan geometry. This method allows each tile {{in the database}} to specify two material types, {{in which case the}} tile is regarded as being bisected by a diagonal line from corner to corner, with one material type {{on one side of the}} diagonal and the other material type on the other side of the diagonal. An additional flag specifies whether the diagonal runs from the top left corner to the bottom right, or the top right corner to the bottom left. The split-tile method has the advantange that nearly all rules that apply to corner-stitched geometry apply, unaltered, to <b>split</b> <b>tiles.</b> A further advantage is that all non-Manhattan geometry must have corners lying on the database internal grid. This makes it impossible to generate geometry that is off-grid within a single plane, a rule error for most fabrication processes that is a common problem with object-based representations.|$|R
5000|$|GTOPO30 is {{a digital}} {{elevation}} model for the world, developed by USGS. It has a 30-arc second resolution (approximately 1 km), [...] and is <b>split</b> into 33 <b>tiles</b> stored in the USGS DEM file format.|$|R
5|$|Truchet tiles are square tiles {{decorated}} with patterns {{so they do}} not have rotational symmetry; in 1704, Sébastien Truchet used a square <b>tile</b> <b>split</b> into two triangles of contrasting colours. These can tile the plane either periodically or randomly.|$|R
50|$|The stone {{used for}} the {{building}} of the church would have been quarried from the White Carpathian Mountains and brought a distance of about 8 kilometres. The churches were rendered on the outside and plastered internally. There is evidence for wall painting, which appears to have been mainly geometric designs in the 4th and 6th churches. The lack of evidence for roofing materials, makes it likely that the roofs were covered with <b>split</b> wooden <b>tiles</b> or shingles.|$|R
50|$|In 2009, Wassenberg et al. {{developed}} an algorithm that computes multiple independent Minimum Spanning Forests and then stitches them together. This enables parallel processing without <b>splitting</b> objects on <b>tile</b> borders. Instead of a fixed weight threshold, an initial connected-component labeling {{is used to}} estimate a lower bound on the threshold, which can reduce both over- and undersegmentation. Measurements show that the implementation outperforms Felzenszwalb's sequential algorithm by an order of magnitude.|$|R
50|$|The station {{features}} a mural entitled City Diary, created by Philadelphia children in 1997. The mural consists of many 8 in2 (20.32 cm2) ceramic <b>tiles,</b> <b>split</b> into two pieces {{on opposite sides}} of the station, with lengths of 28 ft (8.53 m) and 19 ft (5.79 m), respectively. Over 170 children between the ages of 6 and 16 contributed to the project, which was dedicated to the station on June 11, 1997.|$|R
2500|$|In later {{versions}} of the software, games also can incorporate several outside formats including ASCII text data, CompuServe [...]GIF files, and Autodesk Animator [...]FLI animations into multimedia presentations during menus and between levels. Although Game-Maker includes no tools for developing these files, the formats are standardized enough to allow the user a choice of standalone utilities. In addition, image data produced with outside programs such as Deluxe Paint is easily imported and <b>split</b> into background <b>tiles</b> or sprites.|$|R
50|$|Inspired by decorations he {{had seen}} on the canals, Truchet studied {{decorative}} patterns on ceramic tiles. One particular pattern that he studied involved square <b>tiles</b> <b>split</b> by a diagonal line into two triangles, decorated in contrasting colors. By placing these tiles in different orientations with respect to each other, {{as part of a}} square tiling, Truchet observed that many different patterns could be formed. This model of pattern formation was later taken up by Fournier, and is now known to mathematicians and designers as Truchet tiling.|$|R
50|$|Maureen Hiron {{also held}} {{the world championships}} for another of her games; Hexago, or Hexago Continuo. Although being a tile game branded with the same name as Continuo, {{it is only the}} {{immediately}} touching tiles that effect the score as opposed to the chains in continuo. It is a game with hexagonal <b>tiles</b> <b>split</b> into 6 triangles each with a colour and a number. Each time a tile is placed touching so that it matches either the segments colour or number points are scored.|$|R
40|$|Reinforcement {{learning}} problems are commonly tackled by estimating the optimal value function. In many real-world problems, learning this value function requires a function approximator, which maps states to values via a parameterized function. In practice, {{the success of}} function approximators depends {{on the ability of}} the human designer to select an appropriate representation for the value function. This paper presents adaptive tile coding, a novel method that automates this design process for tile coding, a popular function approximator, by beginning with a simple representation with few tiles and refining it during learning by <b>splitting</b> existing <b>tiles</b> into smaller ones. In addition to automatically discovering effective representations, this approach provides a natural way to reduce the function approximator’s level of generalization over time. Empirical results in multiple domains compare two different criteria for deciding which <b>tiles</b> to <b>split</b> and verify that adaptive tile coding can automatically discover effective representations and that its speed of learning is competitive with the best fixed representations...|$|R
50|$|The Dreamcast has a 64-bit {{double-precision}} superscalar SuperH-4 RISC Central {{processing unit}} core with a 32-bit integer unit using 16-bit fixed-length instructions, a 64-bit data bus allowing a variable width of either 8, 16, 32 or 64-bits, and a 128-bit floating-point bus. The PowerVR 2DC CLX2 chipset uses a unique method of rendering a 3D scene called Tile Based Deferred Rendering (TBDR): while storing polygons in triangle strip format in memory, the display is <b>split</b> into <b>tiles</b> {{associated with a}} list of visibly overlapping triangles onto which, using a process similar to ray tracing, rays are cast and a pixel is rendered from the triangle closest to the camera. After calculating the depths associated with each polygon for one tile row in 1 cycle, the whole tile is flushed to video memory before passing on to render the next tile. Once all information has been collated for the current frame, the tiles are rendered in turn to produce the final image.|$|R
50|$|After color transformation, {{the image}} is <b>split</b> into {{so-called}} <b>tiles,</b> rectangular regions of the image that are transformed and encoded separately. Tiles can be any size, {{and it is also}} possible to consider the whole image as one single tile. Once the size is chosen, all the tiles will have the same size (except optionally those on the right and bottom borders). Dividing the image into tiles is advantageous in that the decoder will need less memory to decode the image and it can opt to decode only selected tiles to achieve a partial decoding of the image. The disadvantage of this approach is that the quality of the picture decreases due to a lower peak signal-to-noise ratio. Using many tiles can create a blocking effect similar to the older JPEG 1992 standard.|$|R
50|$|Construction {{began with}} about thirty workers under the {{direction}} of Warren Beckworth and was essentially completed in 1855. The building's foundation is roughly 40 by 80 feet, and it is two stories tall. Each floor is identically arranged for an assembly hall, with support columns down the center, and a stairway connecting the floors on the south side. Its foundation and walls are made of native limestone. A stone chimney is at each short side, with bricked exteriors. Its ceilings are exposed structural timbers. Doors are of wood with cut-stone thresholds, and window sills are also cut stone. Hanging lanterns for lighting were probably used. During its 1927 restoration, wood timbers were used that were chipped to make them look hand-cut. Two-inch planks were used for the floors and set with iron nails. Hand-forged hardware attached doors and windows. The roof was shingled with three-foot <b>tiles</b> <b>split</b> to resemble shakes.|$|R
50|$|To {{speed up}} {{segmentation}} of large images, the work could be divided among several CPUs. One means of accomplishing this involves <b>splitting</b> images into <b>tiles</b> that are processed independently. However, regions that straddle a tile border might be split up or lost if the fragments {{do not meet}} the segmentation algorithm's minimum size requirements. A trivial workaround involves overlapping tiles, i.e. allowing each processor to consider additional pixels around its tile's border. Unfortunately this increases the computational load, since the processors on both sides of a tile boundary are performing redundant work. Also, only objects smaller than the tile overlap are guaranteed to be preserved, which means that long objects such as rivers in aerial imagery are still likely to be split. In some cases, the independent tiles' results can be fused to approximate the true results.An alternative exists in the form of graph-based segmentation methods. The connectivity information inherent to graphs allows performing independent work on parts of the original image, and reconnecting them to yield an exact result as if processing had occurred globally.|$|R
40|$|Tiling {{is a key}} {{technique}} to enhance data reuse. For computations structured as one sequential outer “time” loop enclosing a set of parallel inner loops, tiling only the parallel inner loops may not enable enough data reuse in the cache. Tiling the inner loops along with the outer time loop enhances data locality but may require other transformations like loop skewing that inhibit inter-tile parallelism. One approach to tiling that enhances data locality without inhibiting inter-tile parallelism is <b>split</b> tiling, where <b>tiles</b> are subdivided into a sequence of trapezoidal computation steps. In this paper, we develop an approach to generate split tiled code for GPUs in the PPCG polyhedral code generator. We propose a generic algorithm to calculate index-set splitting that enables us to perform tiling for locality and synchronization avoidance, while simultaneously maintaining parallelism, {{without the need for}} skewing or redundant computations. Our algorithm performs split tiling for an arbitrary number of dimensions and without the need to construct any large integer linear program. The method and its implementation are evaluated on standard stencil kernels and compared with a state-of-the-art polyhedral compiler and with a domain-specific stencil compiler, both targeting CUDA GPUs...|$|R
40|$|International audienceTiling {{is a key}} {{technology}} to increase data reuse in computation kernels. For computations structured as one sequential outer "time" loop enclosing a set of parallel inner loops, the option of tiling only the parallel inner loops is generally not profitable {{because it does not}} enable enough data reuse. To combine parallelism and locality, several tiling algorithms propose to tile the time loop together with {{one or more of the}} parallel inner loops. However, all these algorithms have some limitations: they are either limited to special computation patterns, require the redundant execution of certain iterations (overlapped tiling), or require the use of wavefront parallelism which makes the parallel workload unbalanced. One approach to tiling that addresses most of these issues is <b>split</b> tiling, where <b>tiles</b> are subdivided into a sequence of trapezoidal computation steps. In this paper, we develop an approach to generate split tiled code for GPUs in the PPCG polyhedral code generator. We propose a generic algorithm to calculate an affine schedule and index-set splitting that enable us to perform tiling for locality and synchronization avoidance, while simultaneously maintaining parallelism, without the need for skewing or redundant computations. Our algorithm performs split tiling for an arbitrary number of dimensions and without the need to construct any large integer linear programming problem. The method and its implementation are evaluated on standard stencil kernels and compared with a state-of-the-art polyhedral compiler and with a domain-specific stencil compiler, both targeting CUDA GPUs...|$|R
40|$|Date of Acceptance: 20 / 01 / 2015 We analyse deep {{images from}} the VISTA survey of the Magellanic Clouds in the YJKs filters, {{covering}} 14 deg 2 (10 <b>tiles),</b> <b>split</b> into 120 subregions, and comprising the main body and Wing of the Small Magellanic Cloud (SMC). We apply a colour-magnitude diagram reconstruction method that returns their best-fitting star formation rate SFR(t), age-metallicity relation (AMR), distance and mean reddening, together with 68 per cent confidence intervals. The distance data can be approximated by a plane tilted in the East-West direction with a mean inclination of 39 ??, although deviations of up to ?? 3 kpc suggest a distorted and warped disc. After assigning to every observed star a probability of belonging to a given age-metallicity interval, we build high-resolution population maps. These dramatically reveal the flocculent nature of the young star-forming regions and the nearly smooth features traced by older stellar generations. They document {{the formation of the}} SMC Wing at ages < 0. 2 Gyr and the peak of star formation in the SMC Bar at ~ 40 Myr. We clearly detect periods of enhanced star formation at 1. 5 and 5 Gyr. The former is possibly related to a new feature found in the AMR, which suggests ingestion of metal-poor gas at ages slightly larger than 1 Gyr. The latter constitutes a major period of stellar mass formation. We confirm that the SFR(t) was moderately low at even older ages...|$|R
40|$|We analyse deep {{images from}} the VISTA survey of the Magellanic Clouds in the YJK(s) filters, {{covering}} 14 deg(2) (10 <b>tiles),</b> <b>split</b> into 120 subregions, and comprising the main body and Wing of the Small Magellanic Cloud (SMC). We apply a colour-magnitude diagram reconstruction method that returns their best-fitting star formation rate SFR(t), age-metallicity relation (AMR), distance and mean reddening, together with 68 per cent confidence intervals. The distance data can be approximated by a plane tilted in the East-West direction with a mean inclination of 39 degrees, although deviations of up to +/- 3 kpc suggest a distorted and warped disc. After assigning to every observed star a probability of belonging to a given age-metallicity interval, we build high-resolution population maps. These dramatically reveal the flocculent nature of the young star-forming regions and the nearly smooth features traced by older stellar generations. They document {{the formation of the}} SMC Wing at ages < 0. 2 Gyr and the peak of star formation in the SMC Bar at similar to 40 Myr. We clearly detect periods of enhanced star formation at 1. 5 and 5 Gyr. The former is possibly related to a new feature found in the AMR, which suggests ingestion of metal-poor gas at ages slightly larger than 1 Gyr. The latter constitutes a major period of stellar mass formation. We confirm that the SFR(t) was moderately low at even older ages...|$|R
40|$|As analog and mixed-signal (AMS) {{circuitry}} gains increasing portions {{in modern}} SoCs, automatic analog routing {{is becoming more}} and more important. However, routing for analog circuits has always been an extremely challenging task due to complicated electrical and geometrical constraints. Due to these constraints, current analog routers often fail to obtain a routing solution that the designer wants. To incorporate the designer's expertise during routing, a customized real-time interactive analog router is attracting increasing concerns in industry. This paper presents a fast customized real-time interactive analog router called SIAR. A key feature of SIAR is that it allows for real-time interactions between the router and the designer. The designer can try different guiding points by moving the cursor in the user window and SIAR will return and display the corresponding routing solution in real-time, such that the designer could choose the most satisfactory one. The guiding points are very important for the designer to obtain satisfactory routing solutions, even for routing solutions with analog matching constraints by setting symmetric guiding points. A new splitting graph based routing model is presented to efficiently search the routing path and record the number of turns/vias during searching by efficient <b>tile</b> <b>splitting</b> operations. SIAR supports different routing modes such as point-to-point, point-to-module and module-to-module. An efficient connecting point selection method is presented such that an optimal routing solution is preserved when connecting to a module. Different design rules such as variable wire and via width/spacing rules, along with the same-net spacing rules, are supported in SIAR. Moreover, a global routing stage is presented to speedup the routing process for large designs. Experimental results are promising. Department of Electronic and Information Engineerin...|$|R

