226|619|Public
25|$|Some tries {{can require}} more space than a hash table, as memory may be {{allocated}} for each {{character in the}} <b>search</b> <b>string,</b> rather than a single chunk of memory for the whole entry, as in most hash tables.|$|E
25|$|Looking up {{data in a}} trie {{is faster}} in the worst case, O(m) time (where m is {{the length of a}} <b>search</b> <b>string),</b> {{compared}} to an imperfect hash table. An imperfect hash table can have key collisions. A key collision is the hash function mapping of different keys to the same position in a hash table. The worst-case lookup speed in an imperfect hash table is O(N) time, but far more typically is O(1), with O(m) time spent evaluating the hash.|$|E
25|$|Because HTML {{documents}} have a flat, serial {{structure that}} mixes control statements, formatting, {{and the actual}} content, any non-validated user-supplied data included in the resulting page without proper HTML encoding, may lead to markup injection. A classic example of a potential vector is a site search engine: if one searches for a string, the <b>search</b> <b>string</b> will typically be redisplayed verbatim on the result page to indicate what was searched for. If this response does not properly escape or reject HTML control characters, a cross-site scripting flaw will ensue.|$|E
3000|$|Therefore, “Software game {{development}} lifecycle process”, “Computer game {{development design}} process” and “video game testing process” {{are some examples}} of the <b>search</b> <b>strings</b> and similar way different <b>search</b> <b>strings</b> were formed in order to capture all relevant studies.” [...]...|$|R
30|$|The {{research}} design has been primirily {{based on a}} systematic {{review of the literature}} about business model innovation in the cultural sector. Electronic search tools, keywords and <b>search</b> <b>strings</b> to identify relevant research constructs were used. The use of keywords is the most important building block of a systematic search. The underlying assumptions are that keywords capture the field under study and the electronic databases can identify the studies based on those keywords. <b>Search</b> <b>strings</b> are comprised of combinations of keywords. Thus, the success of the systematic literature review depends greatly on the choice of keywords and <b>search</b> <b>strings</b> used to conduct the search. The choice of the keywords and strings for the research constructs were defined {{on the basis of a}} consultation of a number of arts and cultural organsations as well as of a delphi group of experts in the field.|$|R
40|$|Many {{authors have}} {{reported}} {{on the use of}} the Unified Medical Language System (UMLS) to match concepts in free text. Unmatched <b>search</b> <b>strings</b> may be due to misspellings, concepts not in the UMLS, or searches for words not expected to be in the UMLS (e. g., names of people or places). We mapped <b>search</b> <b>strings</b> from a full-text, concept-based curriculum database to UMLS concepts and performed a failure analysis. The majority of unmatched text strings were medically related (71. 7 %). Unrecognized abbreviations (11. 6 %) and misspellings (38. 5 %) were the most common causes of unmatched medically related searches. Content searching must take these searches into account for completeness...|$|R
2500|$|However, {{the search}} can {{be forced to}} match signs by using the prefix [...] "signed:" [...] in the <b>search</b> <b>string.</b> This is {{especially}} useful for sequences like [...] that consist exclusively {{of positive and negative}} ones.|$|E
2500|$|In early 2005, the United States Department of Justice filed {{a motion}} in federal court to force Google {{to comply with a}} {{subpoena}} for [...] "the text of each <b>search</b> <b>string</b> entered onto Google's search engine over a two-month period (absent any information identifying the person who entered such query)." [...] Google fought the subpoena, due to concerns about users' privacy. In March 2006, the court ruled partially in Google's favor, recognizing the privacy implications of turning over search terms and refusing to grant access.|$|E
2500|$|Due to the {{copyright}} nature of project work, {{it is rare}} and impractical {{to be able to}} buy fully 3D modelled Revit project models. Indeed as most projects are site specific and bespoke, obtaining an existing model is in many instances unsuitable. However, there are cicumstances where new practices or students that are training to learn Revit, do have a need to refer to completed models. Sources for these are limited, however they can be purchased at websites like BIMGallery and downloaded from websites like GrabCad. Revit model files have also been located using google <b>search</b> <b>string</b> [...] "index of" [...] + rvt" [...] + [...] "central" [...] -html -htm -php [...]|$|E
5000|$|The Google Ngram Viewer, {{an online}} search engine that charts {{frequencies}} of sets of comma-delimited <b>search</b> <b>strings</b> using a yearly count of n-grams as found in the largest online body of human knowledge, the Google Books corpus.|$|R
40|$|AbstractObjectiveThe aim of {{this study}} was to {{construct}} PubMed <b>search</b> <b>strings</b> that could efficiently retrieve studies on manual therapy (MT), especially for time-constrained clinicians. MethodsOur experts chose 11 Medical Subject Heading terms describing MT along with 84 additional potential terms. For each term that was able to retrieve more than 100 abstracts, we systematically extracted a sample of abstracts from which we estimated the proportion of studies potentially relevant to MT. We then constructed 2 search strings: 1 narrow (threshold of pertinent articles ≥ 40 %) and 1 expanded (including all terms for which a proportion had been calculated). We tested these <b>search</b> <b>strings</b> against articles on 2 conditions relevant to MT (thoracic and temporomandibular pain). We calculated the number of abstracts needed to read (NNR) to identify 1 potentially pertinent article in the context of these conditions. Finally, we evaluated the efficiency of the proposed PubMed <b>search</b> <b>strings</b> to identify relevant articles included in a systematic review on spinal manipulative therapy for chronic low back pain. ResultsFifty-five search terms were able to extract more than 100 citations. The NNR to find 1 potentially pertinent article using the narrow string was 1. 2 for thoracic pain and 1. 3 for temporomandibular pain, and the NNR for the expanded string was 1. 9 and 1. 6, respectively. The narrow search strategy retrieved all the randomized controlled trials included in the systematic review selected for comparison. ConclusionThe proposed PubMed <b>search</b> <b>strings</b> may help health care professionals locate potentially pertinent articles and review a large number of MT studies efficiently to better implement evidence-based practice...|$|R
50|$|The Boyer-Moore <b>string</b> <b>search</b> {{algorithm}} {{has been}} the standard benchmark for the practical <b>string</b> <b>search</b> literature.|$|R
2500|$|The {{search engine}} uses {{indexing}} {{to allow for}} a quick display of results for a given search. Advanced options allow the user to choose the file type, how it should be indexed, the properties only, or the properties and the file contents. The Start menu search also doubles as the Run command from previous versions of Windows; simply typing any command will execute it. The indexed search platform is based on Microsoft's Windows Desktop Search 3.0 (Windows Search version 4.0 in Vista SP2), allowing third-party applications (e.g. Microsoft Outlook 2007) to use the indexing platform to store metadata and perform searches on Windows Vista or Windows XP (with the Windows Desktop Search redistributable installed). This is in contrast to the search engine of Windows XP, which takes some time to display results, and only after the user has finished typing the <b>search</b> <b>string.</b> The Windows Vista search allows users to add multiple filters to continually refine search results (Such as [...] "File contains the word 'example'"). It is also possible to search across RSS and Atom feeds, straight from Windows Explorer. Windows search uses IFilters that are used by Windows Desktop Search as well. The IFilter interface can be implemented by software makers so that files created by their applications can be better integrated with search and indexing programs.|$|E
5000|$|All {{segments}} matching a <b>search</b> <b>string</b> (includes case-sensitivity and Python regular expressions) ...|$|E
5000|$|Find bar - Works {{very similar}} to Firefox's search feature. Allows users to search the current web page for a word or phrase. A search pane is placed {{at the bottom of}} the Internet Explorer window. Pressing CTRL+F {{displays}} this search pane if it closed, usurping the shortcut keys for Internet Explorer's default search. The Find on this Page... option in Internet Explorer's Edit menu still launches the browser's default Find window. [...] "Find as you type" [...] functionality actively searches for words or portions of a word as you type in the search box. Match Case feature allows users to search for words or phrases in a case sensitive manner. Optional Highlight All feature locates every instance of your <b>search</b> <b>string</b> and highlights it in yellow. Buttons on the search pane lets users jump to the previous or next instance of your <b>search</b> <b>string</b> on the current web page. F3 or the Enter key also advances to the next occurrence of your <b>search</b> <b>string.</b> SHIFT+F3 or SHIFT+Enter also jumps to the previous occurrence of the <b>search</b> <b>string.</b>|$|E
25|$|Her singles {{record is}} 209–129. Her final playing years were marred by {{a string of}} injuries, {{especially}} back injuries, which caused her ranking to erode gradually. As a personality Kournikova {{was among the most}} common <b>search</b> <b>strings</b> for both articles and images in her prime.|$|R
50|$|The macro record {{facility}} {{allowed a}} series of keystrokes to be 'learnt' and assigned to a single key or stored as an 'exec' file. For programmers, a useful feature is the easy manipulation of characters outside the alphanumeric range, in <b>search</b> <b>strings</b> or macros.|$|R
30|$|The {{search in}} the {{databases}} using the <b>search</b> <b>strings</b> returned 607 articles, and 148 papers remained after the pre-selection phase. Finally, after applying the inclusion criteria, 45 papers {{were eligible for}} this study. The results from all the papers are available in an online database, which can be collaboratively updated 2.|$|R
5000|$|Devices {{connected}} to the Internet can be found. A <b>search</b> <b>string</b> such as [...] will find public web cameras.|$|E
5000|$|On {{receipt of}} a <b>search</b> <b>string</b> {{for the first}} time, each agent checks its local machine for {{matching}} documents.|$|E
5000|$|A user initiates {{a search}} by typing a 'search command' {{followed}} by a 'search string' within the channel window. Various search commands exist, including '@find', '@search', and '@seek', depending on what serving script is being used. [...] Wildcard characters such as * {{can also be used}} in the <b>search</b> <b>string</b> to simplify a search. The search command will then return a list of files to the user's query window if any servers have a file that matches the <b>search</b> <b>string.</b>|$|E
40|$|Searching for {{patterns}} {{in a string}} is an important challenge for biologists. Identifying and finding patterns helps to improve understanding of DNA {{and as a consequence}} enables advances in research of medical conditions. There are many different methods for searching for a single pattern in a string of DNA but the problem is finding a technique which is both efficient and realistic. Different <b>string</b> <b>searching</b> techniques of both exact <b>string</b> <b>searching</b> and approximate <b>string</b> <b>searching</b> were implemented and the efficiency and numbe...|$|R
40|$|Although several self-indexes {{for highly}} {{repetitive}} text collections exist, developing an index and search algorithm with editing operations remains a challenge. Edit distance with moves (EDM) is a string-to-string distance measure that includes substring moves {{in addition to}} ordinal editing operations to turn one string into another. Although the problem of computing EDM is intractable, it has {{a wide range of}} potential applications, especially in approximate string retrieval. Despite the importance of computing EDM, there has been no efficient method for indexing and searching large text collections based on the EDM measure. We propose the first algorithm, named string index for edit distance with moves (siEDM), for indexing and <b>searching</b> <b>strings</b> with EDM. The siEDM algorithm builds an index structure by leveraging the idea behind the edit sensitive parsing (ESP), an efficient algorithm enabling approximately computing EDM with guarantees of upper and lower bounds for the exact EDM. siEDM efficiently prunes the space for <b>searching</b> query <b>strings</b> by the proposed method, which enables fast query searches with the same guarantee as ESP. We experimentally tested the ability of siEDM to index and <b>search</b> <b>strings</b> on benchmark datasets, and we showed siEDM’s efficiency...|$|R
25|$|An {{information}} retrieval process begins when a user enters a query into the system. Queries are formal statements of information needs, for example <b>search</b> <b>strings</b> in web <b>search</b> engines. In {{information retrieval}} a query does not uniquely identify a single {{object in the}} collection. Instead, several objects may match the query, perhaps with different degrees of relevancy.|$|R
50|$|Racket also {{includes}} the functions {{you would need to}} write scrapers and robots. As an example, the following function would list the Google results for a <b>search</b> <b>string.</b>|$|E
5000|$|Google Chrome and Mozilla Firefox used [...] "I'm Feeling Lucky" [...] as {{the default}} <b>search</b> <b>string</b> when the user entered a query in the {{location}} bar; this functionality was deprecated in later versions.|$|E
5000|$|Some search methods, for {{instance}} trigram search, {{are intended to}} find a [...] "closeness" [...] score between the <b>search</b> <b>string</b> and the text rather than a [...] "match/non-match". These are sometimes called [...] "fuzzy" [...] searches.|$|E
2500|$|Anna Sergeyevna Kournikova ( [...] ; born 7 June 1981) is a Russian former {{professional}} tennis player. Her {{appearance and}} celebrity status made {{her one of}} the best known tennis stars worldwide. At the peak of her fame, fans looking for images of Kournikova made her name {{one of the most common}} <b>search</b> <b>strings</b> on Google <b>Search.</b>|$|R
40|$|We {{study the}} {{statistical}} properties of query <b>search</b> <b>strings</b> in the Gnutella peer-to-peer network {{and find that}} the distribution of query frequency (how often queries are made) closely follows a lognormal distribution. We find evidence for an upper bound on query cache performance and extend previous studies of Gnutella query caching to model e#ectiveness of such schemes...|$|R
50|$|Anna Sergeyevna Kournikova (А́нна Серге́евна Ку́рникова; born 7 June 1981) is a Russian former {{professional}} tennis player. Her {{appearance and}} celebrity status made {{her one of}} the best known tennis stars worldwide. At the peak of her fame, fans looking for images of Kournikova made her name {{one of the most common}} <b>search</b> <b>strings</b> on Google <b>Search.</b>|$|R
5000|$|Some tries {{can require}} more space than a hash table, as memory may be {{allocated}} for each {{character in the}} <b>search</b> <b>string,</b> rather than a single chunk of memory for the whole entry, as in most hash tables.|$|E
50|$|Opera {{provides}} {{quick access}} {{to a variety of}} search engines and commerce sites, via the use of search plugins. The user can type the <b>search</b> <b>string</b> in the address field and it will display search suggestions for supported websites.|$|E
5000|$|To {{start the}} search, a user {{would ask the}} local agent to begin to gossip about the <b>search</b> <b>string.</b> (We're {{assuming}} that agents either start with a known list of peers, or retrieve this information from {{some kind of a}} shared store.) ...|$|E
50|$|An {{information}} retrieval process begins when a user enters a query into the system. Queries are formal statements of information needs, for example <b>search</b> <b>strings</b> in web <b>search</b> engines. In {{information retrieval}} a query does not uniquely identify a single {{object in the}} collection. Instead, several objects may match the query, perhaps with different degrees of relevancy.|$|R
5000|$|...EBhello.c$$ Open {{file for}} read/write with backup*P$$ Read {{in the first}} page*SHello$0TT$$ Search for [...] "Hello" [...] and print the line (pointer placed after <b>searched</b> <b>string)</b> printf("Hello world!\n"); The line*-5DIGoodbye$0TT$$ Delete five {{characters}} before pointer (ie [...] "Hello"), insert [...] "Goodbye", and print the line printf("Goodbye world!\n"); The updated line*EX$$ Copy {{the remainder of the}} file and exit ...|$|R
5000|$|<b>String</b> <b>search</b> - A <b>string</b> <b>search</b> {{algorithm}} locates {{where several}} smaller strings are {{within a larger}} text. For example, if a user typed [...] "smart phone" [...] into a Google search, Google would be searching to find where that keyword is located within different scripts and codes to refer the user to {{the most relevant information}} possible.|$|R
