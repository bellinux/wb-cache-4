129|850|Public
25|$|The Tomorrowland Terrace is a {{stage in}} Tomorrowland. It is a two-story stage where the lower stage rises from below floor level. It was popular in the 1960s with music {{performers}} of the day. Over the years, it was eventually replaced with Club Buzz, a Buzz Lightyear-themed stage and show featuring the <b>space</b> <b>character</b> from the Toy Story films. In 2006, it was restored to the Tomorrowland Terrace with the same style and design as the original. It is now home to the Jedi Training Academy interactive stage show where children are chosen as Jedi padawan and taught {{how to use a}} lightsaber. Each child then has the opportunity to face Star Wars antagonists Darth Vader or Darth Maul. Also, local bands have returned to play in the evenings, just as Tomorrowland Terrace hosted in the 1960s.|$|E
500|$|Each COBOL {{program is}} made up of four basic lexical items: words, literals, picture character-strings (see [...] ) and separators. Words include {{reserved}} words and user-defined identifiers. They are up to 31 characters long and may include letters, digits, hyphens and underscores. Literals include numerals (e.g. [...] ) and strings (e.g. [...] ). Separators include the <b>space</b> <b>character</b> and commas and semi-colons followed by a space.|$|E
2500|$|The usual syntax is {{to define}} the first alias with a {{trailing}} <b>space</b> <b>character.</b> For instance, using the two aliases: ...|$|E
40|$|<b>Space</b> <b>characters</b> {{can have}} an {{important}} role in disambiguating text. However, few, if any, Chinese information extraction systems make full use of <b>space</b> <b>characters.</b> However, it seems that treatment of <b>space</b> <b>characters</b> is necessary, especially in cases of extracting information from semi-structured documents. This investigation aims to address the importance of <b>space</b> <b>characters</b> in Chinese information extraction by parsing some semi-structured documents with two similar grammars- one with treatment for <b>space</b> <b>characters,</b> the other ignoring it. This paper also introduces two post processing filters to further improve treatment of <b>space</b> <b>characters.</b> Results show that the grammar that takes account of spaces clearly out-performs the one that ignores them, and so concludes that <b>space</b> <b>characters</b> can play a useful role in information extraction. ...|$|R
50|$|Non-breaking <b>space</b> <b>characters</b> {{with other}} widths also exist.|$|R
50|$|Most graphic <b>characters</b> are <b>spacing</b> <b>characters,</b> {{which means}} that each {{instance}} of a <b>spacing</b> <b>character</b> has to occupy some area in a graphic representation. For a teletype or a typewriter this implies moving of the carriage after typing of a character. In the context of text mode display, each <b>spacing</b> <b>character</b> occupies one rectangular character box of equal sizes. Or maybe two adjacent ones, for non-alphabetic characters of East Asian languages. If a text is rendered using proportional fonts, widths of character boxes are not equal, but are positive.|$|R
2500|$|Tag names cannot contain {{any of the}} {{characters}} !"#$%&' (...) *+,/;<=>?@^`~, nor a <b>space</b> <b>character,</b> and cannot begin with [...] "-", [...] ".", or a numeric digit.|$|E
2500|$|The format {{starts with}} the same two-line header as the context format, except that the {{original}} file is preceded by [...] "---" [...] and the new file is preceded by [...] "+++". [...] Following this are one or more change hunks that contain the line differences in the file. [...] The unchanged, contextual lines are preceded by a <b>space</b> <b>character,</b> addition lines are preceded by a plus sign, and deletion lines are preceded by a minus sign.|$|E
2500|$|Although Zipfâ€™s Law {{holds for}} most {{languages}}, even for non-natural languages like Esperanto, {{the reason is}} still not well understood. However, it may be partially explained by the statistical analysis of randomly generated texts. Wentian Li has shown that in a document in which each character has been chosen randomly from a uniform distribution of all letters (plus a <b>space</b> <b>character),</b> the [...] "words" [...] follow the general trend of Zipf's law (appearing approximately linear on log-log plot). [...] Vitold Belevitch in a paper, On the Statistical Laws of Linguistic Distribution offered a mathematical derivation. [...] He took a large class of well-behaved statistical distributions (not only the normal distribution) and expressed {{them in terms of}} rank. He then expanded each expression into a Taylor series. In every case Belevitch obtained the remarkable result that a first-order truncation of the series resulted in Zipf's law. Further, a second-order truncation of the Taylor series resulted in Mandelbrot's law.|$|E
5000|$|Whitespace <b>character</b> for {{additional}} <b>space</b> <b>characters</b> of varying widths ...|$|R
5000|$|Unicode defines {{several other}} non-break <b>space</b> <b>characters.</b> See #Width variation. Encoding remarks: ...|$|R
5000|$|... #Caption: {{filename}} list, {{with long}} filenames, foreign letters, comma, dot and <b>space</b> <b>characters</b> {{as they appear}} in a software displaying filenames ...|$|R
2500|$|... n-gram {{models are}} widely used in {{statistical}} natural language processing. [...] In speech recognition, phonemes and sequences of phonemes are modeled using a n-gram distribution. [...] For parsing, words are modeled such that each n-gram is composed of n words. [...] For language identification, sequences of characters/graphemes (e.g., letters of the alphabet) are modeled for different languages. [...] For sequences of characters, the 3-grams (sometimes referred to as [...] "trigrams") that can be generated from [...] "good morning" [...] are [...] "goo", [...] "ood", [...] "od [...] ", [...] "d m", [...] " [...] mo", [...] "mor" [...] and so forth, counting the <b>space</b> <b>character</b> as a gram (sometimes {{the beginning and end}} of a text are modeled explicitly, adding [...] "__g", [...] "_go", [...] "ng_", and [...] "g__"). [...] For sequences of words, [...] the trigrams that can be generated from [...] "the dog smelled like a skunk" [...] are [...] "# the dog", [...] "the dog smelled", [...] "dog smelled like", [...] "smelled like a", [...] "like a skunk" [...] and [...] "a skunk #".|$|E
60|$|But {{even this}} monotony soon {{gave way to}} a change and another monotony as uniform and depressed. The western horizon, slowly {{contracting}} before a wall of vapor, by four o'clock had become a mere cold, steely strip of sea, into which gradually the northern trend of the coast faded and was lost. As the fog stole with soft step southward, all distance, <b>space,</b> <b>character,</b> and locality again vanished; the hills upon which the sun still shone bore the same monotonous outlines as those just wiped into space. Last of all, before the red sun sank like the descending Host, it gleamed upon the sails of a trading vessel close in shore. It was the last object visible. A damp breath breathed upon it, a soft hand passed over the slate, the sharp pencilling of the picture faded and became a confused gray cloud.|$|E
5000|$|The {{username}} and a <b>space</b> <b>character</b> are prepended to the hex digits.|$|E
5000|$|... unexpand is {{a command}} in the UNIX Operating System. It {{is used to}} convert groups of <b>space</b> <b>characters</b> into tab characters.|$|R
5000|$|Java's trim method {{considers}} ASCII {{spaces and}} control codes as whitespace, contrasting with the Java [...] method, which recognizes all Unicode <b>space</b> <b>characters.</b>|$|R
50|$|The byte {{sequence}} is usually restricted to ASCII printable <b>characters,</b> with <b>space</b> <b>characters</b> reserved for padding shorter sequences. Case sensitivity is preserved, unlike in file extensions.|$|R
5000|$|Non-breaking space (...) is a <b>space</b> <b>character</b> that {{prevents}} an automatic line break at its position.|$|E
50|$|In {{the table}} above, 0x20 is the regular <b>SPACE</b> <b>character,</b> and 0x9A is the NO-BREAK SPACE.|$|E
50|$|In {{the table}} above, 20 is the regular <b>SPACE</b> <b>character,</b> A0 is the NO-BREAK SPACE, and AD is SOFT HYPHEN.|$|E
50|$|Characters 00-3F and FF are controls, 40 is <b>space.</b> <b>Characters</b> {{are shown}} with their {{equivalent}} Unicode codes. Invariant alphanumeric, punctuation, and control characters {{are shown in}} color.|$|R
25|$|In {{the movie}} Office <b>Space,</b> <b>characters</b> Peter Gibbons and Joanna start a {{relationship}} when they both {{admit to being}} big fans of Kung Fu, and suggest watching it together.|$|R
5000|$|... expand is {{a program}} that {{converts}} tab characters into groups of <b>space</b> <b>characters,</b> while maintaining correct alignment. It is available in Unix operating systems and many Unix-like operating systems.|$|R
5000|$|A {{primitive}} line-breaking feature {{was used}} in 1955 in a [...] "page printer control unit" [...] developed by Western Union. This system used relays rather than programmable digital computers, and therefore needed a simple algorithm that could be implemented without data buffers. In the Western Union system, each line was broken at the first <b>space</b> <b>character</b> to appear after the 58th character, or at the 70th character if no <b>space</b> <b>character</b> was found.|$|E
50|$|All {{printing}} ASCII {{characters as}} well as the <b>space</b> <b>character</b> should be acceptable in passwords. Acceptance of Unicode characters is also permitted.|$|E
50|$|When {{transmitted}} messages include {{at least}} one space, the FSK441 decoding algorithm uses that <b>space</b> <b>character</b> as a syncword for zero-overhead synchronization.|$|E
5000|$|Missing {{values in}} the last two fields are {{interpreted}} as zeros. If necessary, <b>space</b> <b>characters</b> in the first, second, and fourth fields are indicated by the octal character code [...]|$|R
5000|$|On computers, the {{character}} used is [...] This is a <b>spacing</b> <b>character,</b> {{not to be}} confused with the alternative (below-letter) form of the ligature tie (a&#x035c;b [...] ), which is a combining character.|$|R
25|$|For {{historical}} reasons, {{there is}} a similar but larger character, , which is also included in ASCII but {{often referred to as}} caret instead. It is, however, unsuitable for use as a diacritic on modern computer systems, as it is a <b>spacing</b> <b>character.</b> Another <b>spacing</b> circumflex <b>character</b> in Unicode is the smaller , mainly used in phonetic notationsor as a sample of the diacritic in isolation.|$|R
5000|$|Characters {{are limited}} to ASCII 33-127 (decimal). Generally only the <b>space</b> <b>character,</b> a to z, A to Z, and 0 to 9 are used.|$|E
50|$|The actress June Lockhart {{commissioned}} Okamoto for {{the painted}} portrait {{of her as}} Lost in <b>Space</b> <b>character</b> Maureen Robinson, which she sells as autographed posters.|$|E
50|$|In {{the table}} above, 20 is the regular <b>SPACE</b> <b>character.</b> Code values 00-1F, 7F, 80-9F, A0, DB-DE and FC-FF are not {{assigned}} to characters by TIS-620.|$|E
50|$|In word {{processing}} and text editing the Tab key will often move the insertion {{point to the}} next tab stop in a table, or may insert the ASCII tab <b>character</b> or many <b>space</b> <b>characters.</b>|$|R
50|$|Some of {{the ways}} in which two code {{sequences}} can be duplicates of each other are, character-for-character identical, character-for-character identical with white <b>space</b> <b>characters</b> and comments being ignored, token-for-token identical, token-for-token identical with occasional variation or functionally identical.|$|R
50|$|Computer {{representation}} of text eliminates all mechanical and physical limitations. Spaces of various widths, styles, or language characteristics (different <b>space</b> <b>characters)</b> are indicated with unique code points. Whitespace <b>characters</b> include <b>spaces</b> of various width, including all those that professional typesetters employ.|$|R
