78|765|Public
5000|$|Triangular warning LEDs {{at the top}} {{and bottom}} of the shutter <b>speed</b> <b>scale,</b> to {{indicate}} over- or under-exposure.|$|E
50|$|The film <b>speed</b> <b>scale</b> {{recommended}} by the British Standards Institution (BSI) was almost identical to the DIN system except that the BS number was 10 degrees greater than the DIN number.|$|E
5000|$|A {{vertical}} shutter <b>speed</b> <b>scale</b> with LEDs {{to indicate}} both the user selected and camera suggested shutter speed (in 'M' mode) {{and the value}} selected ('P' and 'A' modes) by the camera's metering system.|$|E
40|$|<b>Speed</b> <b>scaling</b> {{has long}} {{been used as a}} power-saving {{mechanism}} at a chip level. However, in recent years, <b>speed</b> <b>scaling</b> has begun to be used as an approach for trading off energy usage and performance throughout all levels of computer systems. This wide-spread use of <b>speed</b> <b>scaling</b> has motivated significant research on the topic, but many fundamental questions about <b>speed</b> <b>scaling</b> are only beginning to be understood. In this chapter, we focus on a simple, but general, model of <b>speed</b> <b>scaling</b> and provide an algorithmic perspective on four fundamental questions: (i) What is the structure of the optimal <b>speed</b> <b>scaling</b> algorithm? (ii) How does <b>speed</b> <b>scaling</b> interact with scheduling? (iii) What is the impact of the sophistication of <b>speed</b> <b>scaling</b> algorithms? and (iv) Does <b>speed</b> <b>scaling</b> have any unintended consequences? For each question we provide a summary of insights from recent work on the topic in both worst-case and stochastic analysis as well as a discussion of interesting open questions that remain. ...|$|R
40|$|Abstract—In this paper, we {{introduce}} {{the notion of}} decoupled <b>speed</b> <b>scaling,</b> wherein the <b>speed</b> <b>scaling</b> function is completely decoupled from the scheduling policy used in a simple singleserver computer system. As an initial result, we first demonstrate that the Fair Sojourn Protocol (FSP) scheduling policy does not work properly with coupled (native) <b>speed</b> <b>scaling,</b> but that it can and does work well with decoupled <b>speed</b> <b>scaling.</b> We then compare the performance of PS, SRPT, and FSP scheduling policies under decoupled <b>speed</b> <b>scaling,</b> and demonstrate significant advantages for FSP. Our simulation results suggest {{that it might be}} possible to simultaneously achieve fairness, robustness, and near optimality with decoupled <b>speed</b> <b>scaling.</b> I...|$|R
40|$|This work {{examines}} fundamental tradeoffs {{incurred by}} a speed scaler seeking {{to minimize the}} sum of expected response time and energy use per job. We prove that a popular speed scaler is 2 -competitive for this objective and no “natural” speed scaler can do better. Additionally, we prove that energy-proportional <b>speed</b> <b>scaling</b> works well for both Shortest Remaining Processing Time (SRPT) and Processor Sharing (PS) and we show that under both SRPT and PS, gated-static <b>speed</b> <b>scaling</b> is nearly optimal when the mean workload is known, but that dynamic <b>speed</b> <b>scaling</b> provides robustness against uncertain workloads. Finally, we prove that <b>speed</b> <b>scaling</b> magnifies unfairness under SRPT but that PS remains fair under <b>speed</b> <b>scaling.</b> These results show that these speed scalers can achieve any two, but only two, of optimality, fairness, and robustness...|$|R
50|$|On an {{international}} level, the ASA system was superseded by the ISO film speed system between 1982 and 1987, however, the arithmetic ASA <b>speed</b> <b>scale</b> {{continued to live}} on as the linear speed value of the ISO system.|$|E
5000|$|... (Cyrillic: [...] ) was an {{arithmetic}} film <b>speed</b> <b>scale</b> {{defined in}} GOST 2817-45 and GOST 2817-50. It {{was used in}} the former Soviet Union since October 1951, replacing Hurter & Driffield (H&D, Cyrillic: ХиД) numbers, which had been used since 1928.|$|E
50|$|The Mark II version {{dispensed}} {{with the use}} of relative speeds and set the guide bar on a sliding <b>speed</b> <b>scale,</b> thus allowing the speed of the guide and the speed of the own ship to be set independently. The device was constructed largely of brass.|$|E
40|$|System design must {{strike a}} balance between energy and {{performance}} by carefully selecting the speed at which the system will run. In this work, we examine fundamental tradeoffs incurred when designing a speed scaler to minimize a weighted sum of expected response time and energy use per job. We prove that a popular dynamic <b>speed</b> <b>scaling</b> algorithm is 2 -competitive for this objective and that no “natural” speed scaler can improve on this. Further, we prove that energy-proportional <b>speed</b> <b>scaling</b> works well across two common scheduling policies: Shortest Remaining Processing Time (SRPT) and Processor Sharing (PS). Third, we show that under SRPT and PS, gated-static <b>speed</b> <b>scaling</b> is nearly optimal when the mean workload is known, but that dynamic <b>speed</b> <b>scaling</b> provides robustness against uncertain workloads. Finally, we prove that <b>speed</b> <b>scaling</b> magnifies unfairness, notably SRPT’s bias against large jobs and the bias against short jobs in non-preemptive policies. However, PS remains fair under <b>speed</b> <b>scaling.</b> Together, these results show that the speed scalers studied here can achieve any two, but only two, of optimality, fairness, and robustness. 1...|$|R
40|$|Abstract — <b>Speed</b> <b>scaling</b> {{has been}} widely adopted in {{computer}} and communication systems, in particular, to reduce energy consumption. An important question is how <b>speed</b> <b>scaling</b> interacts with other resource allocation mechanisms such as scheduling and routing, etc. In this paper, we study the interaction of <b>speed</b> <b>scaling</b> with load balancing. We characterize the equilibrium resulting from the load balancing and <b>speed</b> <b>scaling</b> interaction, and introduce two optimal load balancing designs, in terms of traditional performance metric and cost-aware (in particular, energy-aware) performance metric respectively. Especially, we characterize the load-balancing-speed-scaling equilibrium {{with respect to the}} optimal load balancing schemes in processor sharing systems. Our results show that the degree of inefficiency at the equilibrium is mostly bounded by the heterogeneity of the system, but independent of the number of the servers. These results provide insights in understanding the interaction of load balancing with <b>speed</b> <b>scaling</b> and guiding new designs...|$|R
40|$|Abstract—Energy use of {{computer}} communication systems has quickly become a vital design consideration. One effective method for reducing energy consumption is dynamic <b>speed</b> <b>scaling,</b> which adapts the processing speed {{to the current}} load. This paper studies how to optimally <b>scale</b> <b>speed</b> to balance mean response time and mean energy consumption under processor sharing scheduling. Both bounds and asymptotics for the optimal <b>speed</b> <b>scaling</b> scheme are provided. These results show that a simple scheme that halts when the system is idle and uses a static rate while the system is busy provides nearly the same performance as the optimal dynamic <b>speed</b> <b>scaling.</b> However, the results also highlight that dynamic <b>speed</b> <b>scaling</b> provides at least one key benefit — significantly improved robustness to bursty traffic and mis-estimation of workload parameters. I...|$|R
50|$|Apps {{built with}} Appcelerator {{products}} {{are written in}} JavaScript. Though initially developed as a Web language, JavaScript is increasingly popular for mobility due to its ability to meet the <b>speed,</b> <b>scale</b> and user experience requirements that mobile development demands. According to Forrester Research, JavaScript adoption is {{setting the stage for}} the “biggest shift in enterprise application development” in more than a decade.|$|E
50|$|In {{addition}} to the established arithmetic <b>speed</b> <b>scale,</b> ASA PH2.5-1960 also introduced logarithmic ASA grades (100 ASA = 5° ASA), where a difference of 1° ASA represented a full exposure stop and therefore the doubling of a film speed. For some while, ASA grades were also printed on film boxes, and they saw life {{in the form of}} the APEX speed value Sv (without degree symbol) as well.|$|E
50|$|The trace {{closest to}} the outer edge is the speed trace. The disc is {{preprinted}} with a <b>speed</b> <b>scale</b> and the stylus produces a mark corresponding {{with the speed of}} the vehicle at any given time. It is important that the maximum speed (Vmax) specification of the chart matches that of the tachograph head for the speed to be correctly recorded. It can be expected that a high speed trace will correlate with a tightly-spaced zig-zag pattern within the distance trace.|$|E
40|$|This {{paper is}} {{concerned}} with online scheduling algorithms that aim at minimizing the total flow time plus energy usage. The results are divided into two parts. First, we consider the well-studied “simple ” <b>speed</b> <b>scaling</b> model and show how to analyze a <b>speed</b> <b>scaling</b> algorithm (called AJC) that changes speed discretely. This {{is in contrast to}} the previous algorithms which change the spee...|$|R
40|$|Abstract—Energy {{consumption}} {{in a computer}} system can be reduced by dynamic <b>speed</b> <b>scaling,</b> which adapts the processing speed to the current load. This paper studies the optimal way to adjust speed to balance mean response time and mean energy consumption, when jobs arrive as a Poisson process and processor sharing scheduling is used. Both bounds and asymptotics for the optimal speeds are provided. Interestingly, a simple scheme that halts when the system is idle and uses a static rate while the system is busy provides nearly the same performance as the optimal dynamic <b>speed</b> <b>scaling.</b> However, dynamic <b>speed</b> <b>scaling</b> which allocates a higher speed when more jobs are present significantly improves robustness to bursty traffic and mis-estimation of workload parameters. I...|$|R
5000|$|The {{relationship}} between [...] and luminance depends {{on both the}} <b>speed</b> <b>scaling</b> constant [...] and the reflected-light meter calibration constant : ...|$|R
5000|$|As far as {{the wind}} is concerned, it should be {{recalled}} that as the <b>speed</b> <b>scale</b> factor is 1 in 5, a wind of 10 knots on the lake is equivalent to a 50 knot squall in reality. Ripples {{on the surface of}} the water and the movement of leaves on the trees are therefore unreliable indicators. The wind and ship speeds displayed on the control panel are therefore very important for trainees. However, the lake is situated in a forest in a region with little wind, so that uncontrollable wind effects are minimised.|$|E
5000|$|... 1982: Ricoh XR-S (Japan): first solar powered SLR. Was a Ricoh XR-7 (Japan) {{aperture}} priority AE 35 mm SLR of 1981 modified with two silicon photovoltaic {{cells in the}} sides of the pentaprism housing that charged a unique 3 volt 2G13R [...] "5-year" [...] rechargeable silver oxide battery. This battery could be replaced with two regular 1.5 volt S76 (SR44) silver oxide batteries. The XR-7 and XR-S also had unusual viewfinder LCD showing meter pseudo-needle pointing along an analogue shutter <b>speed</b> <b>scale</b> to indicate light meter recommended settings, mimicking a traditional galvanometer needle.|$|E
5000|$|TORRO {{claims it}} {{differs from the}} Fujita scale {{in that it is}} [...] "purely" [...] a wind <b>speed</b> <b>scale,</b> whereas the Fujita scale relies on damage for classification, but in practice, damage is {{utilised}} almost exclusively in both systems to infer intensity. That is because such a proxy for intensity is usually all that is available, although users of both scales would prefer direct, objective, quantitative measurements. The scale is primarily used in the United Kingdom whereas the Fujita scale is the primary scale used in North America, continental Europe, {{and the rest of the}} world.|$|E
40|$|In recent years, {{there has}} been a growing {{interest}} in <b>speed</b> <b>scaling</b> algorithms, where a set of jobs need to be scheduled on a machine with variable speed so as to optimize the flow-times of the jobs and the energy consumed by the machine. A series of results have culminated in constant-competitive algorithms for this problem in the clairvoyant model, i. e., when job parameters are revealed on releasing a job (Bansal, Pruhs, and Stein, SODA 2007; Bansal, Chan, and Pruhs, SODA 2009). Our main contribution in this paper is the first constant-competitive <b>speed</b> <b>scaling</b> algorithm in the nonclairvoyant model, which is typically used in the scheduling literature to model practical settings where job volume is revealed only after the job has been completely processed. Unlike in the clairvoyant model, the <b>speed</b> <b>scaling</b> problem in the non-clairvoyant model is non-trivial even for a single job. Our non-clairvoyant algorithm is defined by using the existing clairvoyant algorithm in a novel inductive way, which then leads to an inductive analytical tool that may be of independent interest for other online optimization problems. We also give additional algorithmic results and lower bounds for <b>speed</b> <b>scaling</b> on multiple identical parallel machines. link_to_OA_fulltex...|$|R
40|$|This {{paper is}} {{concerned}} with online scheduling algorithms that aim at minimizing the total flow time plus energy usage. The results are divided into two parts. First, we consider the well-studied "simple" <b>speed</b> <b>scaling</b> model and show how to analyze a <b>speed</b> <b>scaling</b> algorithm (called AJC) that changes speed discretely. This {{is in contrast to}} the previous algorithms which change the speed continuously. More interestingly, AJC admits a better competitive ratio, and without using extra speed. In the second part, we extend the study to a more general <b>speed</b> <b>scaling</b> model where the processor can enter a sleep state to further save energy. A new sleep management algorithm called IdleLonger is presented. This algorithm, when coupled with AJC, gives the first competitive algorithm for minimizing total flow time plus energy in the general model. © 2012 Springer Science+Business Media, LLC. link_to_subscribed_fulltex...|$|R
40|$|International audienceRecently, optimal {{combinatorial}} algorithms {{have been}} presented for the energy minimization multi-processor <b>speed</b> <b>scaling</b> problem with migration [Albers et al., SPAA 2011], [Angel et al., Euro-Par 2012]. These algorithms are based on repeated maximum-flow computations allowing the partition of the set of jobs into subsets {{in which all the}} jobs are executed at the same speed. The optimality of these algorithms is based on a series of technical lemmas showing that this partition and the corresponding speeds lead to the minimization of the energy consumption. In this paper, we show that both the algorithms and their analysis can be greatly simplified. In order to do this, we formulate the problem as a convex cost flow problem in an appropriate flow network. Furthermore, we show that our approach is useful to solve other problems in the dynamic <b>speed</b> <b>scaling</b> setting. As an example, we consider the preemptive openshop <b>speed</b> <b>scaling</b> problem and we propose a polynomial-time algorithm for finding an optimal solution based on the computation of convex cost flows. We also propose a polynomial-time algorithm for minimizing a linear combination of the sum of the completion times of the jobs and the total energy consumption, for the multi-processor <b>speed</b> <b>scaling</b> problem without preemptions. Instead of using convex cost flows, our algorithm is based on the computation of a minimum weighted maximum matching in an appropriate bipartite graph...|$|R
50|$|In manual mode, {{the camera}} is {{completely}} mechanical in operation, and only requires batteries for the light metering information system. In aperture priority mode, the batteries continued to power the meter, but are also utilized for shutter timing and the exposure control electronics. The FM3A's metering information system consisted of a match-needle system using two needles pointing along a vertical shutter <b>speed</b> <b>scale</b> {{on the left side}} of the viewfinder to indicate the readings of the built-in 60/40% centerweighted silicon photodiode light meter versus the actual camera settings. This system can be traced back to the Nikkormat EL (Nikomat EL in Japan) of 1972. The viewfinder also has Nikon's fully interchangeable bright focus screen with various options for focus.|$|E
50|$|In {{addition}} to designing an effective three-point belt, Bohlin demonstrated its effectiveness {{in a study}} of 28,000 accidents in Sweden, and presented a paper at the 11th Stapp Car Crash Convention. Unbelted occupants sustained fatal injuries throughout the whole <b>speed</b> <b>scale,</b> whereas none of the belted occupants was fatally injured at accident speeds below 60 mph. No belted occupant was fatally injured if the passenger compartment remained intact. This study resulted in the U.S. Department of Transportation requiring three-point seat belts in American cars. In 1968, the new seat belt design was made free for the public to use. In most industrial countries, occupants are required by law to use seat belts.|$|E
5000|$|In each {{of these}} cases, there is a massive network of {{parallel}} moving belts, the inner ones moving faster. Passengers are screened from wind, and there are chairs and even shops on the belt. In the Heinlein work the fast lane runs at 100 mph (160 km/h), and the first [...] "mechanical road" [...] was built in 1960 between Cincinnati and Cleveland. The relative speed of two adjacent belts is 5 mph (8 km/h) (in the book the fast lane stops, and the second lane keeps running at 95 mph (152 km/h)). In the Wells and Asimov works there are more steps in the <b>speed</b> <b>scale</b> and the speeds are less extreme.|$|E
40|$|Intel’s SpeedStep and AMD’s PowerNOW {{technologies}} {{allow the}} Windows XP operating system to dynamically change {{the speed of the}} processor to prolong battery life. In this setting, the operating system must not only have a job selection policy to determine which job to run, but also a <b>speed</b> <b>scaling</b> policy to determine the speed at which the job will be run. We give an online <b>speed</b> <b>scaling</b> algorithm that is O(1) -competitive for the objective of weighted flow time plus energy. This algorithm also allows us to efficiently construct an O(1) -approximate schedule for minimizing weighted flow time subject to an energy constraint. ...|$|R
40|$|Abstract. We study online {{scheduling}} {{to minimize}} flow time plus energy usage in the dynamic <b>speed</b> <b>scaling</b> model. We devise new <b>speed</b> <b>scaling</b> functions {{that depend on}} the number of active jobs, replacing the existing <b>speed</b> <b>scaling</b> functions in the literature that depend on the remaining work of active jobs. The new speed functions are more stable and also more efficient. They can support better job selection strategies to improve the competitive ratios of existing algorithms [5, 8], and, more importantly, to remove the requirement of extra speed. These functions further distinguish themselves from others as they can readily be used in the non-clairvoyant model (where the size of a job is only known when the job finishes). As a first step, we study the scheduling of batched jobs (i. e., jobs with the same release time) in the non-clairvoyant model and present the first competitive algorithm for minimizing flow time plus energy (as well as for weighted flow time plus energy); the performance is close to optimal. ...|$|R
50|$|YDS is a {{scheduling}} algorithm for dynamic <b>speed</b> <b>scaling</b> processors which {{minimizes the}} total energy consumption. It {{was named after}} and developed by Yao et al. There is both an online and an offline version of the algorithm.|$|R
50|$|The FE2 is a {{battery-powered}} (two S76 or A76, or one 1/3N) electro-mechanically controlled manual-focus SLR with {{manual exposure}} control or aperture-priority auto-exposure.It has a match-needle exposure control system using two needles pointing along a vertical shutter <b>speed</b> <b>scale</b> {{on the left}} side of the viewfinder to indicate the readings of the built-in 60/40 percent center-weighted light meter versus the actual camera settings.This system can be traced back to the Nikkormat EL (in the USA/Canada; Nikomat EL, rest of the world) of 1972 and continued until 2006 with the Nikon FM3A.The viewfinder also has an interchangeable Type K2 focusing screen with Nikon's standard 3 mm split image rangefinder and 1 mm micro-prism collar focusing aids plus 12 mm etched circle indicating the area of the meter center-weighting.|$|E
50|$|The {{batteries}} also powered the ME F's {{exposure control}} system. This system lit LEDs alongside a vertical shutter <b>speed</b> <b>scale</b> {{on the left}} side of the viewfinder. In aperture priority mode, a steadily lit LED indicated the shutter speed automatically set by the electronic microprocessor in response to the light reaching the built-in, open aperture, through-the-lens (TTL), centre-weighted gallium arsenide phosphide photodiode (GPD) light meter and the set lens aperture. The LEDs for the speeds between 1/2000th and 1/60th second were green, while those for 1/30th to 4 seconds were yellow to warn of possible picture blur at the slower speeds. A steadily lit red OVER or UNDER LED came on if the scene was out of the meter's exposure range.|$|E
50|$|This system {{allowed for}} {{straightforward}} implementation with the semiconductor {{technology of the}} time, but had the disadvantage that the power supplied to the motor was highly discontinuous - {{as can be seen}} from the description above, it took the form of square pulses of a maximum width of 10 ms, recurring at intervals which alternated between 20ms and 40ms (for a 50 Hz mains supply). This caused the motor to be extremely noisy and rough. Fine control of a locomotive at low speed was also difficult, partly due to the rough running, partly due to the inherent coarseness of a 14-step <b>speed</b> <b>scale,</b> and partly because there was a significant delay between operator input to the controller and response from the locomotive.|$|E
40|$|We {{consider}} the <b>speed</b> <b>scaling</b> problem of scheduling {{a collection of}} tasks with release times, deadlines, and sizes so as to minimize the energy recharge rate. This is the first theoretical investigation of <b>speed</b> <b>scaling</b> for devices with a regenerative energy source. We show that the problem can be expressed as a polynomial sized convex program. We that using the KKT conditions, one can obtain an efficient algorithm to verify the optimality of a schedule. We show that the energy optimal YDS schedule, is 2 -approximate {{with respect to the}} recharge rate. We show that the online algorithm BKP is O(1) -competitive with respect to recharge rate. © 2008 Springer-Verlag Berlin Heidelberg. link_to_subscribed_fulltex...|$|R
40|$|We {{consider}} the following variant of the <b>speed</b> <b>scaling</b> problem introduced by Yao, Demers, and Shenker. We are given a set of jobs {{and we have a}} variable-speed processor to process them. The higher the processor speed, the higher the energy consumption. Each job is associated with its own release time, deadline, and processing volume. The objective is to find a feasible schedule that minimizes the energy consumption. Moreover, no preemption of jobs is allowed. Unlike the preemptive version that is known to be in P, the non-preemptive version of <b>speed</b> <b>scaling</b> is strongly NP-hard. In this work, we present a constant factor approximation algorithm for it. The main technical idea is to transform the problem into the unrelated machine scheduling problem with Lp-norm objective. ...|$|R
40|$|Abstract. In {{this paper}} we extend {{the study of}} flow-energy {{scheduling}} to a model that allows both sleep management and <b>speed</b> <b>scaling.</b> Our main result is a sleep management algorithm called IdleLonger, which works online for a processor with one or multiple levels of sleep states. The design of IdleLonger is interesting; among others, it may force the processor to idle or even sleep even though new jobs have already arrived. IdleLonger works in both clairvoyant and non-clairvoyant settings. We show how to adapt two existing <b>speed</b> <b>scaling</b> algorithms AJC [15] (clairvoyant) and LAPS [9] (non-clairvoyant) to the new model. The adapted algorithms, when coupled with IdleLonger, are shown to be O(1) -competitive clairvoyant and non-clairvoyant algorithms for minimizing flow plus energy on a processor that allows sleep management and <b>speed</b> <b>scaling.</b> The above results {{are based on the}} traditional model with no limit on processor speed. If the processor has a maximum speed, the problem becomes more difficult as the processor, once overslept, cannot rely on unlimited extra speed to catch up the delay. Nevertheless, we are able to enhance IdleLonger and AJC so that they remain O(1) -competitive for flow plus energy under the bounded speed model. Non-clairvoyant scheduling in the bounded speed model is left as an open problem. ...|$|R
