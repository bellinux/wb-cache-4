1|2|Public
40|$|F 655. 8 > working_place_number : integer name : string Section construction_date : date Topological Connection Component Point {{longitude}} : real latitude : real altitude : {{real source}} : string accuracy : string entry_date : date Shaft shaft_type : string diameter : real Gangway gangway_type : string Mining mining_type : <b>string</b> <b>Polygon</b> Point Axis Point Point Triplet axis left right point course from to top road transport road rise heading Legend: Aggregation: Association: extactly one zero or one zero or more superclass subclass subclass role- 1 role- 2 Figure 1 : Part {{of the data}} model for a mine in OMT notation An integrated mining database involves different disciplines, each of which [...] - although all of them refer to the overall geology and the geometrical shape and the topological structure of the Institut fur Informatik III...|$|E
50|$|TopoJSON is an {{extension}} of GeoJSON that encodes topology. Rather than representing geometries discretely, geometries in TopoJSON files are stitched together from shared line segments called arcs. Arcs are sequences of points, while line <b>strings</b> and <b>polygons</b> are defined as sequences of arcs. Each arc is defined only once, but can be referenced several times by different shapes, thus reducing redundancy and decreasing the file size. In addition, TopoJSON facilitates applications that use topology, such as topology-preserving shape simplification, automatic map coloring, and cartograms.|$|R
40|$|We {{introduce}} an algorithmic paradigm called dynamic programming. It was {{popularized by}} Richard Bellman, circa 1954. The word “programming ” {{here is the}} same term as found in “linear programming”, and has the connotation of a systematic method for solving problems. The term is even identified 1 with the filling-in of entries in a table. The semantic shift from this to our contemporary understanding of the word “programming ” {{is an indication of}} the progress in the field of computation. In this chapter, we introduce dynamic programming techniques on several <b>string</b> problems, abstract <b>polygon</b> triangulation problems, and the problem of optimal binary search trees. ¶ 1. Divide and Conquer with a twist. Dynamic programming is a form of divide-andconquer because it is based on solving subproblems. But it has some rather distinctive features. A simple illustration is the problem of computing the Fibonacci numbers, F(n) = F(n− 1) +F(n− 2). On input n, the obvious recursive algorithm calls itself twice on the arguments n− 1 and n− 2. The returned results are added together. The running time has recurrence T(n) = T(n− 1) +T(n− 2) + 1. Thus T(n) is exponential (cf. §III. 6, AVL trees). A little reflection shows that linear time suffices: instead of computing F(n), let us define a new function F 2 (n) that computes a pair of consecutive Fibonacci numbers (F(n), F(n − 1)). Then we only need one recursive call to F 2 on the argument n − 1 : F 2 (n) : if (n = 1), return(1, 0) ⊳ Assume input n is ≥...|$|R

