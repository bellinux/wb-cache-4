110|2068|Public
50|$|<b>Software</b> <b>prototyping</b> {{is about}} {{creating}} prototypes, i.e. incomplete {{versions of the}} software program being developed.|$|E
5000|$|<b>Software</b> <b>prototyping,</b> one of {{the main}} {{strategies}} against essential complexity in [...] "No Silver Bullet" ...|$|E
5000|$|Rapid {{development}} {{due to the}} Adobe Flash IDE makes iterative <b>software</b> <b>prototyping</b> {{and software}} testing relatively easy.|$|E
40|$|This {{case study}} {{demonstrates}} {{the application of}} rapid prototyping techniques when developing <b>software</b> <b>prototypes</b> of hardware interfaces, {{in order to produce}} an ergonomic and user-friendly design. <b>Software</b> <b>prototypes</b> were developed of a new control panel, giving a focus for the design team and a prototype that could be tested in a usability laboratory. 1...|$|R
40|$|Objective: To {{propose a}} <b>software</b> <b>prototype</b> as a {{strategy}} to improve the communication process and records pertaining to the nursing care of patients undergoing Peripherally Inserted Central Catheter (PICC), and describe the steps for designing a <b>software</b> <b>prototype.</b> Methods: Intervention Research {{was used in the}} Intervention Process modality and as a method of operation the Prototyping associated to computer tools. Results: A simple graphics interface computerized model was created and designed to be used in open or private virtual networks. Conclusion: Development of the <b>software</b> <b>prototype</b> to run on web network will make the practical implementation process. It adds that validation with health staff will be carried out before use...|$|R
40|$|In Magnetic Resonance Imaging (MRI), {{anatomical}} {{structures are}} visualized by scanning successive slices {{of the human}} body. Traditionally, radiologists use a large light screen display to view MRI volume sets. This paper describes a video mock-up and a resulting <b>software</b> <b>prototype</b> developed to display MRI volume sets on a traditional computer monitor. Five key objectives were identified concerning {{the design of the}} <b>software</b> <b>prototype...</b>|$|R
50|$|Michael F Smith (born 1948) is an Anglo-American {{computer}} scientist, medical informatician and businessman. He {{specializes in}} <b>software</b> <b>prototyping,</b> computer security and health informatics.|$|E
50|$|<b>Software</b> <b>prototyping</b> {{has many}} variants. However, {{all of the}} methods are in some way based on two major forms of prototyping: {{throwaway}} prototyping and evolutionary prototyping.|$|E
50|$|<b>Software</b> <b>prototyping</b> is {{used for}} testing the design ideas with {{interactive}} prototypes before the implementation phase helps the designers communicate with users about the new system and develop the design further.|$|E
5000|$|OpenWire Studio - A visual {{development}} environment {{which allows the}} development of <b>software</b> <b>prototypes</b> by non developers.|$|R
5000|$|This {{is a list}} of <b>software</b> <b>prototypes</b> {{that are}} {{available}} on the web (several of them are strictly speaking rather set grammar systems): ...|$|R
30|$|In this article, the ArchReco <b>Software</b> <b>prototype</b> tool is presented, which {{supports}} Design Patterns learning and practicing through Semantic Web based Context Aware Recommendations of Design Patterns.|$|R
5000|$|Rapid {{application}} development (RAD) software development process features iterative development and <b>software</b> <b>prototyping.</b> According to Steve McConnell, timeboxing is a [...] "Best Practice" [...] for RAD and a typical timebox length should be 60-120 days.|$|E
50|$|Employing a runahead {{solution}} methodology {{is one way}} {{to speed}} time to market by injecting small doses of <b>software</b> <b>prototyping,</b> Agile software development or iterative and incremental development into slow, traditional waterfall model software development groups.|$|E
50|$|<b>Software</b> <b>prototyping</b> {{tools are}} used to quickly create {{software}} prototypes simulating key aspects of the final product, while ignoring others (like textual and media content, interactivity, real implementation). The article only includes dedicated applications, not paper tools, UI libraries or popular software repurposed for prototyping.|$|E
40|$|This paper {{describes}} a <b>software</b> <b>prototype</b> which allows visual composition and manipulation of everyday sounds {{based on a}} suggested concept called &quot;Auditory Scenes &quot; [3]. The description of user interface components in the Java <b>software</b> <b>prototype</b> is the main topic of this paper. The concept of &quot;Auditory Scenes &quot; assumes various perceptual attributes for each individual sound in the scene {{as well as the}} temporal, spatial and other relationships between them. An introduction to the suggested concept &quot;Auditory Scenes &quot; is given first. Various components of the implemented user interface and a conclusion are discussed in the following section...|$|R
40|$|D-UEA-ST (pronounced due east) is a plugin {{architecture}} that enables easy development of scientific <b>software</b> <b>prototypes</b> aimed at supporting <b>software</b> developers. <b>Prototypes</b> are developed as D-UEA-ST plugins that {{make use of}} knowledge representation models, reasoners and optimisers, and visualisation APIs. D-UEA-ST also defines a clear workflow that allows for continuous integration and deployment. This {{makes it easy for}} target users to try the tools and for researchers to get rapid feedback...|$|R
40|$|This paper {{presents}} an intelligent dimensioning approach to generate dimensions for 2 D drawing of mechanical parts automatically from their 3 D part models based on feature extraction. The key issues include the strategies and methods for identifying dimension redundancy, recognizing dimensioning features, determining dimensioning scheme, assigning necessary dimensions to suitable views, and locating the dimensions in reasonable positions for each view using artificial intelligent technology. Based on the approach, a corresponding <b>software</b> <b>prototype</b> was developed. Finally, it is demonstrated, from {{an example of}} dimensioning a box-type part, that its dimensions were generated successfully using this intelligent dimensioning <b>software</b> <b>prototype.</b> © 2001 Elsevier Science Ltd. All rights reserved. link_to_subscribed_fulltex...|$|R
50|$|Hardware {{interface}} design (HID) is a cross-disciplinary design {{field that}} shapes the physical connection {{between people and}} technology {{in order to create}} new hardware interfaces that transform purely digital processes into analog methods of interaction. It employs a combination of filmmaking tools, <b>software</b> <b>prototyping,</b> and electronics breadboarding.|$|E
5000|$|<b>Software</b> <b>prototyping</b> is the {{activity}} of creating prototypes of software applications, i.e., incomplete versions of the software program being developed. It is an activity that can occur in software development and is comparable to prototyping as known from other fields, such as mechanical engineering or manufacturing.|$|E
50|$|In many {{programming}} languages, {{a function}} prototype is {{the declaration of}} a subroutine or function (and {{should not be confused}} with <b>software</b> <b>prototyping).</b> This term is rather C/C++-specific; other terms for this notion are signature, type and interface. In prototype-based programming (a form of object-oriented programming), new objects are produced by cloning existing objects, which are called prototypes.|$|E
40|$|Volume {{rendering}} is {{an illustration}} technique for visualising different 3 D measured data or 3 D simulation data interactively on screen. This paper introduces {{a method that}} overlays several types of volume data on an architectural surface model. This complex calculation takes place on the graphics card using hardware-accelerated shaders. An implemented <b>software</b> <b>prototype</b> entitled ìVolumeRenderingî is introduced. In addition to interactive visualisation, the objective {{was to create a}} user-friendly interface. Synergies and new evaluation possibilities arise through the overlay, e. g. of different measuring techniques, with a surface model. Finally the use of the <b>software</b> <b>prototype</b> is illustrated using examples from our interdisciplinary research project...|$|R
40|$|The {{choice of}} a chord and its {{execution}} {{should be regarded as}} a must and not left to arbitrary wish or superficial speculation. (Johannes Itten, 1961) The paper describes a modular concept for the IT-support of planning practice using BIM (Building Information Modelling) and a parameterized building model. The platform used is the modularized software concept for architectural planning in existing built contexts (<b>prototype</b> <b>software</b> FREAK). The current progress {{in the development of a}} reasoned support of planning tasks is described in this paper in more detail. The system consists of a series of <b>software</b> <b>prototypes</b> which are linked to the BIM, utilize the specific data within and demonstrate the value of a consistent and extendable CAD-model. The “Colored Architecture” <b>software</b> <b>prototype</b> is one such design-support module of the software platform and enables the designer to experiment with the parameters colour, light and materials in architectural space. This module supports experimentation, assessment and realization of colours and materials in the architectural design process on a new quality. For instance, the integration of “live radiosity” light simulation allows a qualified and interactive assessment and evaluation of colours and materials in near-real lighting conditions. The paper also details further <b>software</b> <b>prototypes,</b> modules and concepts including building surveying and the design of self-supporting domed structures...|$|R
40|$|Presented at the 4 th International Conference on Auditory Display (ICAD), Palo Alto, California, November 2 - 5, 1997. This paper {{describes}} a <b>software</b> <b>prototype</b> which allows visual composition and manipulation of everyday sounds {{based on a}} suggested concept called "Auditory Scenes" [3]. The description of user interface components in the Java <b>software</b> <b>prototype</b> is the main topic of this paper. The concept of "Auditory Scenes" assumes various perceptual attributes for each individual sound in the scene {{as well as the}} temporal, spatial and other relationships between them. An introduction to the suggested concept "Auditory Scenes" is given first. Various components of the implemented user interface and a conclusion are discussed in the following section...|$|R
50|$|One method {{employed}} for game development is agile development. It {{is based on}} iterative prototyping, a subset of <b>software</b> <b>prototyping.</b> Agile development depends on feedback and refinement of game's iterations with gradually increasing feature set. This method is effective because most projects do not start with a clear requirement outline. A popular method of agile software development is Scrum.|$|E
50|$|An early {{example of}} {{large-scale}} <b>software</b> <b>prototyping</b> was {{the implementation of}} NYU's Ada/ED translator for the Ada programming language. It was implemented in SETL {{with the intent of}} producing an executable semantic model for the Ada language, emphasizing clarity of design and user interface over speed and efficiency. The NYU Ada/ED system was the first validated Ada implementation, certified on April 11, 1983.|$|E
5000|$|... iRise is a {{requirements}} {{definition and}} <b>software</b> <b>prototyping</b> platform {{used to create}} simulations of business software. It allows business analysts, product managers, project managers and usability professionals to assemble fully functional simulations of software solutions that mimic the exact look, feel, and behavior of the proposed final product. Business stakeholders, end users and development teams can interact with the simulation and conduct near-final usability testing {{prior to the start}} of coding. The visual allows users to get the desired features, functionality, look and feel before development. Web applications, commercial off-the-shelf systems like SAP and Oracle, desktop systems, and mobile apps can be simulated.|$|E
40|$|Bullying {{on social}} media is a dire problem for many youths, leading to severe health problems. In this thesis we {{describe}} {{the construction of a}} <b>software</b> <b>prototype</b> capable of automatically identifying bullying comments on the social media platform ASKfm using Natural Language Processing (NLP) and Machine Learning (ML) techniques. State of the art NLP and ML algorithms from previous research are studied and evaluated for the task of identifying bullying comments in a data set from ASKfm. The best performing classier acts as the core component in the detection <b>software</b> <b>prototype.</b> The resulting prototype can monitor selected proles on ASKfm in real time and display identied bullying comments connected to these proles on a web page...|$|R
40|$|The paper {{considers}} {{an approach}} to modeling and simulation of Distributed Denial of Service (DDoS) attacks fulfilled {{by a group of}} malefactors. The approach is based on combination of “joint intentions ” and “common plans” theories as well as state machines. The formal framework for modeling and simulation of DDoS) attacks is presented. The architecture and user interfaces of the Attack Simulator <b>software</b> <b>prototype</b> implemented and its evaluation results are depicted. The simulation-based exploration of the Attack Simulator prototype demonstrated its efficacy for accomplishing various DDoS attack scenarios. The framework and <b>software</b> <b>prototype</b> developed can be used for conducting experiments for evaluating computer network security and analyzing efficiency of security policy. 1...|$|R
40|$|Teaching {{graduate}} {{students how to}} develop hard real-time Ada software for embedded systems is a challenging task. We successfully used Ada {{in a series of}} software engineering courses to teach {{graduate students}} the charac of hard real-time software and fundamental skills to develop and validate complex systems and timing re through <b>software</b> <b>prototypes</b> of the systems. A research tool, called CAPS (Computer Aided Prototype System), was used by the student software designers to construct <b>software</b> <b>prototypes</b> based on the require of the system as well as to automatically generate Ada code interconnecting reusable modules. The approach greatly stimulated the students' interest and helped them to gain first hand experiences in developing hard real-time systems[URL]...|$|R
50|$|There are {{different}} methods of paper prototyping, {{each of them}} showing several benefits regarding the communication within the development team {{and the quality of}} the product to be developed: In the development team paper prototypes can serve as a visual specification of the graphical user interface, and by this means assure the quality of a <b>software.</b> <b>Prototyping</b> forces a more complete design of the user interface to be captured. In team meetings they provide a communication base between the team members. Testing prototypes at an early stage in development helps to identify software usability problems even before any code is written. The costs and annoyances of later changes are reduced, the support burden is lowered, and the overall quality of the software or website is increased.|$|E
5000|$|A notable {{rudimentary}} abstraction—that {{any single}} instruction available for execution in a serial program executes immediately—made serial computing simple. A {{consequence of this}} abstraction is a step-by-step (inductive) explication of the instruction available next for execution.The rudimentary parallel abstraction behind the PRAM-on-chip concept, dubbed Immediate Concurrent Execution (ICE) in , is that indefinitely many instructions available for concurrent execution execute immediately. A consequence of ICE is a step-by-step (inductive) explication of the instructions available next for concurrent execution. Moving beyond the serial von Neumann computer (the only successful general purpose platform to date), the aspiration of the PRAM-on-chip concept is that computer science will again be able to augmentmathematical induction with a simple one-line computing abstraction. A chronological overview {{of the evolution of}} the PRAM-on-chip concept and its hardware and <b>software</b> <b>prototyping</b> follow. In the 1980s and 1990s, Uzi Vishkin co-authored several articles that helped building a theory of parallel algorithms in a mathematical model called parallel random access machine (PRAM), which is a generalization for parallel computing of the standard serial computing model random-access machine (RAM). The parallel machines needed for implementing the PRAM model have not yet been built at the time, and quite a few challenged the ability to ever build such machines. Concluding in 1997 that the transistor count on chip as implied by Moore's Law will allow building a powerful parallel computer on a single silicon chip within a decade, he developed a PRAM-On-Chip vision that called for building a parallel computer on a single chip that allows programmers to develop their algorithms for the PRAM model. He went on to invent the explicit multi-threaded (XMT) computer architecture that enables implementation of this PRAM theory, and led his research team to completing in January 2007 a 64-processor computer named Paraleap, that demonstrates the overall concept. The XMT concept was presented in , , the XMT 64-processor computer in [...] and most recently in [...] The demonstration of XMT comprised several hardware and software components, as well as teaching PRAM algorithms in order to program the XMT Paraleap, using a language called XMTC. Since making parallel programming easy {{is one of the biggest}} challenges facing computer science today, the demonstration also sought to include teaching the basics of PRAM algorithms and XMTC programming to students ranging from high-school to graduate school.|$|E
40|$|Model-based <b>software</b> <b>prototyping</b> enables {{effective}} {{construction of}} design tools for new system design approaches effectively {{in a very}} short time. In this paper, we show that explicit interface modeling is well suited to integrate such prototyped tools into design environments. In addition, we point out how our model-based generative approach supports evolution of prototypes very well. We present the prototyping methodology at hand of Dual Dynamics Designer - a novel development tool for behavior-oriented robot software. We demonstrate how a first prototype evolved to a full-fledged design tool working as an integrated part in our robot design environment. 1 Introduction The design of complex real-time systems - in our case an autonomous mobile robot [1] - is particularly demanding with respect to hardware and <b>software</b> <b>prototyping.</b> In this paper, we focus on the software aspect. <b>Software</b> <b>prototyping</b> is required if new techniques, methodologies or approaches come into play. Their nove [...] ...|$|E
40|$|The Proximity- 1 Space Link Interleaved Time Synchronization (PITS) {{protocol}} provides {{time distribution}} and synchronization services for space systems. A <b>software</b> <b>prototype</b> {{implementation of the}} PITS algorithm has been developed that also provides the test harness to evaluate the key functionalities of PITS with simulated data source and sink. PITS integrates time synchronization functionality into the link layer of the CCSDS Proximity- 1 Space Link Protocol. The <b>software</b> <b>prototype</b> implements the network packet format, data structures, and transmit- and receive-timestamp function for a time server and a client. The software also simulates the transmit and receive-time stamp exchanges via UDP (User Datagram Protocol) socket between a time server and a time client, and produces relative time offsets and delay estimates...|$|R
40|$|For {{the drivers}} of heavy trucks, {{performing}} some maneuvers with high precision {{could be a}} challenging task even for experienced ones. Volvo has a system which helps drivers in reversing the truck. Developing a human machine interface on a mobile platform with high usability for this system could help drivers to decrease both the stress level and spent time on maneuvering and will result in performing the task easier. This thesis introduces a new area in safety critical systems by combining automation with a mobile platform. An iterative and user centered design process utilized and three main iterations performed. In first iteration a low-fidelity prototype was created and evaluated by performing user tests. The output of usability test used to implement the <b>software</b> <b>prototype</b> for the second iteration. Evaluation of <b>software</b> <b>prototype</b> was done by desktop testing. In third iteration, second version of <b>software</b> <b>prototype</b> evaluated by performing field testing. Android and Google maps were used to implement three tasks: Destination, Rewind and Saved point. In all these iterations usability and safety were two main concerns and considered by looking into guidelines and performing evaluations. In the final test, the prototype was evaluated considering four usability factors: satisfaction, learnability, safety and achievement. After analyzing these factors prototype showed strong potential for a future product...|$|R
40|$|The The developent developent of of an an object-orientated object-orientated <b>software</b> <b>software</b> <b>{{prototype}}</b> {{prototype for}} for a a requisit requisitio requisit requisitio io ions ions ns and and and purc purc purchase purc purc hase order orders order s manag management manag management ement system system syste...|$|R
