2|3|Public
40|$|A novel component-based, service-oriented {{framework}} for distributed metacomputing is described. Adopting a provider-centric view of resource sharing, this framework emphasizes lightweight software infrastructures that maintain minimal state, and interface to current and emerging distributed computing standards. In this model, resource owners host a <b>software</b> <b>backplane</b> onto which owners, clients, or third-party resellers may load components or componentsuites that deliver {{value added services}} without compromising owner security or control. Standardsbased descriptions of services facilitate publication and discovery via established schemes. The architecture of the container framework, design of components, security and access control schemes, and preliminary experiences are described in this paper. ...|$|E
40|$|Software {{infrastructures}} {{that support}} metacomputing are evolving from traditional monolithic, platform-specific systems to component and service-based frameworks. In this paper we demonstrate that {{contrary to popular}} belief, such modular software systems are capable of delivering good to excellent performance, support legacy {{as well as new}} application programming paradigms, and deliver enhanced functionality. The Harness system, a <b>software</b> <b>backplane</b> enabling reconfigurable distributed concurrent computing is used to emulate the PVM programming environment. Numerical kernel benchmarks show that application performance results using the emulator and native versions are within a few percent of each other. Coupled with the ability to leverage pre-existing and specialized modules, our experiences suggest that service-oriented computational grids may be constructed rapidly and effectively via such component-based architectural frameworks that deliver full functionality without compromising efficienc...|$|E
3000|$|Systems softwareâ€”i.e. {{operating}} systems, networking/communications, device/peripheral drivers, support utilities, middleware {{and system}} components, <b>software</b> <b>backplanes</b> (e.g. Eclipse), servers and malware [...]...|$|R
40|$|This paper {{describes}} a unique {{approach to a}} successful Design Automation System. It is an evolutionary approach, building on flexible, general purpose UNIX software tools. It is useful in such areas of design as circuit schematics, custom IC, <b>backplanes,</b> <b>software</b> code generation, building space management, music composition and many others. Examples from two year design automation effort known as UCAD are include...|$|R
40|$|TCS is {{company that}} specialises in systems {{integration}} {{and development of}} products for industrial application. Their flagship product for distributed control is the CPU 5. This project covers the design and development of a backplane solution to solve the limitation of the CPU 5 that it only has {{a limited number of}} inputs and outputs. The next iteration of the CPU 5, is to be called the PCC. Background research was carried out into the needs of TCS and their target markets. The IEC 61499 standard, Windows CE platform and ISaGRAF software environment were also investigated. The project planning was analysed to gain an understanding of R&D project planning. This project concluded {{that it was important to}} be able to make changes to the plan as the project proceeds so that it can still be completed by the deadline. TCS had set the limitation that the backplane protocol must be a serial bus. Various different types of serial bus were investigated including CAN, USB, Light Peak (optical) and EIA 485. The bus selected was a CAN bus with a custom protocol. Research was carried out into the operation of existing bus drivers and protocols such as DeviceNet and CANOpen to determine an appropriate protocol for a serial bus based <b>backplane.</b> <b>Software</b> was developed to manage devices attached to the <b>backplane.</b> Hardware and <b>software</b> for a digital I/O module was developed. Various ways of updating the I/O were investigated, an event-based and cyclic updating method was implemented with an adjustable debounce time to maximise performance and robustness. Hardware and software for a serial port module was developed. A major challenge faced was to transmit a stream based protocol across a frame based CAN <b>backplane.</b> <b>Software</b> for an Ethernet module was developed. Software design included development of an NDIS compatible miniport driver for Windows CE and software for the slave module. To demonstrate that the PCC is an effective platform for distributed control, a test setup was created to be shown at a trade show in Nuremberg. The trade show setup was fully programmed in compliance with the IEC 61499 standard and demonstrated the power of the PCC...|$|R

