28|117|Public
3000|$|... total_zeros: This <b>syntax</b> <b>element</b> {{specifies}} {{the number}} of zero coefficients preceding the last non-zero coefficient.|$|E
3000|$|... run_before: This <b>syntax</b> <b>element</b> {{specifies}} {{the number}} of consecutive zero coefficients preceding each non-zero coefficient including TrailingOnes.|$|E
3000|$|The run_before <b>syntax</b> <b>element</b> {{indicates}} {{the number of}} zero coefficients between two consecutive non-zero coefficients. This <b>syntax</b> <b>element</b> has seven tables depending {{on the number of}} remaining zero coefficients to be decoded. A table mapping method that does not need branch operations for table selection is proposed, and the consolidated table for the proposed decoding method of the run_before <b>syntax</b> <b>element</b> is as follows: The maximum codeword length from run_before_T 0 to run_before_T 5 is 3; therefore, six tables with 23 entries each are needed. For the last table, run_before_T 6, the maximum number of codeword bits is 11; therefore, a mapping table with 211 entries must be used for direct memory access. However, only one codeword in the table consists of 11 bits. Therefore, the codewords can be identified by checking the first 10 bits only, so the proposed mapping table for run_before_T 6 consists of 210 entries as shown in Figure  7. The proposed pseudo-code for fast decoding of the run_before <b>syntax</b> <b>element</b> is presented as follows: [...]...|$|E
5000|$|Context-adaptive binary {{arithmetic}} coding (CABAC), an algorithm to losslessly compress <b>syntax</b> <b>elements</b> {{in the video}} stream knowing the probabilities of <b>syntax</b> <b>elements</b> in a given context. CABAC compresses data more efficiently than CAVLC but requires considerably more processing to decode.|$|R
3000|$|... level_prefix and level_suffix: These <b>syntax</b> <b>elements</b> {{specify the}} value of a non-zero {{coefficient}} level except for TrailingOnes.|$|R
5000|$|Video {{compression}} {{based on}} MPEG-2, with additional <b>syntax</b> <b>elements</b> that represent contributions from each previously proposed system.|$|R
3000|$|The H. 264 /AVC {{standard}} {{defines a}} macroblock coding mode applied when no additional motion and residual information {{need to be}} transmitted in the bitstream. This mode, called SKIP mode, occurs when the macroblock can be decoded using information from neighbor macroblocks (in the current frame and in the previous frame). In this case, no information concerning the macroblock will be carried by the bitstream. A <b>syntax</b> <b>element,</b> [...]...|$|E
40|$|Abstract. AVS(audio video coding standard) Group formulates stereo-packing scheme {{aimed at}} 3 D video. In this paper, based on stereo-packing algorithm, using FPGA {{hardware}} accelerate module to parse the stereo-packing ES stream <b>syntax</b> <b>element</b> and {{cooperating with the}} Xilinx ZYNQ 7020 SoC development board,we complete the AVS 3 D decoder on FPGA/SoC Co-platform. Using HDMI port to export the decoded data to the 3 D display device, we get the 3 D video with depth information and verify the validity of AVS 3 D real-time decoder...|$|E
30|$|H. 264 /AVC uses seven VLC {{tables for}} the level <b>syntax</b> <b>element.</b> For {{the first level}} value, the Level_VLC 0 or Level_VLC 1 table is used {{depending}} on the context. If the number of non-zero coefficients is greater than ten {{and the number of}} TrailingOnes is less than three, the Level_VLC 1 table is selected; otherwise, Level_VLC 0 is used for the first level value. For the second level value, when the decoded level value is greater than a threshold defined for each step, the next VLC table is used. The thresholds for the seven VLC tables are { 0, 3, 6, 12, 24, 48, N/A}.|$|E
5000|$|Ook! - An {{exotic and}} esoteric {{programming}} language with three distinct <b>syntax</b> <b>elements</b> only. According {{to the language}} author, Ook! is designed for orang-utans.|$|R
5000|$|UTSL {{contains}} {{high amount}} of commands and test-functions. It also allows {{the usage of}} commonly known high level programming language <b>syntax</b> <b>elements</b> such as [...] "if/then/else" [...] and etc.|$|R
5000|$|A common {{simple and}} highly {{structured}} variable length coding (VLC) technique {{for many of}} the <b>syntax</b> <b>elements</b> not coded by CABAC or CAVLC, referred to as Exponential-Golomb coding (or Exp-Golomb).|$|R
40|$|It is very {{challenging}} to de-interlace HD videos in real time, as both high efficiency and low complexity should be fulfilled, which, however, are conflicting. This paper presents a de-interlacer {{to resolve the}} conflict specially for H. 264 coded videos. It adapts to spatially and temporally local activities by {{making full use of}} the <b>syntax</b> <b>element</b> (SE) values in bit-streams, which give many hints of the motions and textures of video sequences. Accuracy analysis is also introduced to deal with the disparity between the SE values and the real motions and textures. The experimental results show the proposed de-interlacer provides better visual quality than common ones and can de-interlace 1080 i sequences in real time on PCs. 1...|$|E
30|$|In this paper, a new fast CAVLD {{algorithm}} {{which uses}} dedicated instructions for table mapping is proposed. To {{reduce the number}} of branch operations, the various instructions are carefully organized to improve overall performance. As the three syntax elements, coeff_token, level, and run_before occupy a large fraction of computation time, we propose a new table mapping algorithm for them with several instructions in the BsPU. In contrast, the trailing_ones_sign_flag can be easily decoded because the length is known as the TrailingOnes. For the total_zeros <b>syntax</b> <b>element,</b> we also employed the table mapping algorithm. However, the decoding algorithm is conceptually the same as the simple table mapping algorithm. It allocates 29 entries for a table for total_zeros_syntax element since the longest code word has 9 bits.|$|E
30|$|As {{mentioned}} before, {{we developed}} a new table mapping algorithm for CAVLD and designated instructions for multi-format bitstream decoding. The added instructions, Showbits, GetBits, and Skipbits instructions run in 2 cycles, and the other instructions, CLZ and I_ONERETURN, run in 1 cycle. To evaluate {{the performance of the}} new table mapping algorithm for the coeff_token, level, and run_before syntax elements, we used a developed CAVLD decoder and compared the decoding cycles of the CAVLD. For example, to evaluate algorithms for coeff_token decoding, we just replaced the proposed algorithm for coeff_token with other conventional algorithms for the <b>syntax</b> <b>element.</b> In that case, the designated instructions are also applied not only for the proposed table mapping algorithm but also for the conventional algorithms.|$|E
40|$|It is an {{assumption}} that selective encryption does not strongly protect confidentiality owing to the partial visibility of some video data. This is because, though encryption keys {{may be difficult to}} derive, an enhanced version of selectively encrypted video sequence might be found from knowledge of the unencrypted parts of the sequence. An efficient selective encryption method for <b>syntax</b> <b>elements</b> of H. 264 encoded video was recently proposed at the entropy coding stage of an H. 264 encoder. Using this recent scheme as an example, {{the purpose of this paper}} is a comprehensive cryptanalysis of selectively encrypted H. 264 bit-streams to contradict the previous assumption that selective encryption is vulnerable. The novel cryptanalysis methods presented in this paper analyze the ability of an attacker to improve the quality of the encrypted video stream to make it watchable. The conclusion is drawn that if the <b>syntax</b> <b>elements</b> for selective encryption are chosen using statistical and structural characteristics of the video, then the selective encryption method is secure. The cryptanalysis is performed by taking into account the probability distribution of <b>syntax</b> <b>elements</b> within the video sequence, the relationship of <b>syntax</b> <b>elements</b> with linear regression analysis and the probability of successfully attacking them in order to enhance the visual quality. The results demonstrate the preservation of distorted video quality even after considering many possible attacks on: the whole video sequence; each video frame; and on small video segments known as slices. © 2014 Elsevier Inc. All rights reserved...|$|R
5000|$|Data {{partitioning}} (DP), {{a feature}} providing {{the ability to}} separate more important and less important <b>syntax</b> <b>elements</b> into different packets of data, enabling the application of unequal error protection (UEP) {{and other types of}} improvement of error/loss robustness.|$|R
50|$|A data {{manipulation}} language (DML) is a family of <b>syntax</b> <b>elements</b> similar to a computer programming language used for selecting, inserting, deleting and updating data in a database. Performing read-only queries of data is sometimes also considered a component of DML.|$|R
40|$|International audienceThis paper {{advances}} SPYART, a novel semi-fragile watermarking {{scheme for}} MPEG- 4 AVC protection. The authentication information, granting the method fragility, {{is provided by}} the Intra prediction mode types. This signature is embedded in the quantized error prediction of the DCT coefficients by an m-QIM technique, thus ensuring the method robustness. SPYART was evaluated under the framework of a videosurveillance application; the results exhibit fragility to content replacement (with an 1 / 81 frame and 3 s spatial and temporal accuracy, respectively) and robustness against transcoding (MPEG- 4 AVC compression by a factor of 4). As both the signature extraction and mark embedding take place at the MPEG- 4 AVC <b>syntax</b> <b>element</b> level, the method also features low complexity...|$|E
40|$|This paper {{presents}} a high-throughput decoder of HEVC context-based adaptive binary arithmetic coding (CABAC). A multi-sub-engine arithmetic decoder (MSE-AD) design is proposed {{to increase the}} average number of bins delivered per clock cycle by adaptively processing different patterns of upcoming bins with balanced critical path delay. A <b>syntax</b> <b>element</b> (SE) grouping scheme is proposed to maximize the utilization of MSE-AD under the SE parsing order specified in the standard. We also employ a prediction-based pipeline to alleviate the data hazard problem. The proposed CABAC decoder delivers 2. 36 bins per clock cycle and achieves a maximum clock frequency of 258 MHz in 90 nm technology. The resulting performance is 610 Mbin/s which is enough for H. 265 /HEVC level 6. ...|$|E
40|$|This paper {{advances}} SPYART, a novel semi-fragile watermarking {{scheme for}} MPEG- 4 AVC protection. The authentication information, granting the method fragility, {{is provided by}} the Intra prediction mode types. This signature is embedded in the quantized error prediction of the DCT coefficients by an m-QIM technique, thus ensuring the method robustness. SPYART was evaluated under the framework of a videosurveillance application; the results exhibit fragility to content replacement (with an 1 / 81 frame and 3 s spatial and temporal accuracy, respectively) and robustness against transcoding (MPEG- 4 AVC compression by a factor of 4). As both the signature extraction and mark embedding take place at the MPEG- 4 AVC <b>syntax</b> <b>element</b> level, the method also features low complexity. Index Terms — semi-fragile watermarking, content integrity, MPEG- 4 AVC...|$|E
50|$|Nomad's {{language}} {{was designed to}} simplify the application development process, especially for reporting applications. Where possible, common requirements were addressed by intuitive nonprocedural <b>syntax</b> <b>elements,</b> to avoid traditional programming. The heart of the system was the LIST command, which created report output.|$|R
5000|$|Occasionally <b>syntax</b> <b>elements</b> {{that were}} {{originally}} intended to be comments are re-purposed to convey additional information to a program, such as [...] "conditional comments".Such [...] "hot comments" [...] {{may be the only}} practical solution that maintains backward-compatibility, but are widely regarded as a kludge.|$|R
40|$|The H. 264 /AVC is {{the most}} recent {{standard}} of video compression/decompression for future broadband network. This standard was developed through the Joint Video Team (JVT) from the ITU-T Video Coding Experts Group and the ISO/IEC MPEG standardization committee. In this project H. 264 decoder functional block such as Context based Binary arithmetic coding (CABAC), Inverse Quantization and Inverse Discrete Cosine Transform are designed using Verilog. CABAC includes three basic building blocks of context modeling, binary arithmetic coding and Inverse binarization. Here the compressed bit-stream from NAL unit is expanded by CABAC module to generate various <b>syntax</b> <b>elements.</b> Here the basic arithmetic decoding circuit units are designed to share efficiently by all <b>syntax</b> <b>elements.</b> Inverse Quantization and Inverse Discrete Cosine Transform functional blocks are used to reconstruct the original image pixels value...|$|R
30|$|Four {{codeword}} {{tables are}} used for the coeff_token <b>syntax</b> <b>element</b> in H. 264 /AVC CAVLD. One of these four tables is selected depending on {{the average number of}} non-zero transform coefficient levels of the top and left blocks, which is denoted nC, as shown in Table  2. Three of these ones are variable-length tables, and the last one is a fixed-length table. For the variable-length tables, each codeword consists of three parts: a prefix, the number ‘ 1 ’, and a set of remainder bits. The prefix consists of consecutive zeros, and the remainder bits are an arbitrary sub-codeword with a length of {{less than or equal to}} 3. In the proposed algorithm, each of the three VLC tables is divided into multiple divisions depending on the number of consecutive zeros in order to achieve fast table mapping with minimum memory size. After implementation of a single table mapping for each table, there will be 216 entries, because the longest codeword bit length is 16. In the proposed algorithm, the length of divided divisions for VLC T 0 is 8 (= 23) to avoid any conditional branches regardless of the number of entries. As a result, the required number of entries is 120 (= 15 × 23) for the VLC T 0, because the number of divisions is 15. On the other hand, the required number of entries for the fixed-length coding (FLC) case is 26, and the table can be accessed with a 6 -bit address. Figure  3 shows a part of the reorganized tables for coeff_token. TrailingOnes and TotalCoeff are assigned by the remainder and quotient from division of the ‘coeff’ in the second table by four, respectively. Figure  4 shows two different methods to decode the <b>syntax</b> <b>element</b> for the VLC and FLC cases, depending on the value of nC. A branch operation is needed to distinguish the two cases. This paper proposes a single consolidated decoding algorithm for coeff_token without any branch operations. The following is the pseudo-code for the consolidated decoding algorithm of coeff_token.|$|E
40|$|Decomposing a {{value range}} of the {{respective}} syntax elements into a sequence of n partitions with coding the components of z laying within the respective partitions separately {{with at least one}} by VCL coding and with at least one by PIPE or entropy coding is used to greatly increase the compression efficiency at a moderate coding overhead since the coding scheme used may be better adapted to the <b>syntax</b> <b>element</b> statistics. Accordingly, in accordance with embodiments, syntax elements are decomposed into a respective number n of source symbols si with i= 1 [...] . n, the respective number n of source symbols depending on as to which of a sequence of n partitions (140 1 - 3) into which a value {{range of the}} respective syntax elements is sub-divided, a value z of the respective syntax elements falls into, so that a sum of values of the respective number of source symbols si yields z, and, if n > 1, for all i= 1 [...] . n- 1, the value of si corresponds to a range of the ith partition...|$|E
40|$|Graduation date: 2013 High Definition video {{streaming}} over WLANs faces many challenges because video data requires not only data integrity but also frames have strict playout deadline. Traditional streaming methods that {{rely solely on}} either UDP or TCP have difficulties meeting both requirements because UDP incurs packet loss while TCP incurs delay. This thesis proposed a new streaming method called Flexible Dual-TCP/UDP Streaming Protocol (FDSP) that utilizes the benefit of both UDP and TCP. The FDSP {{takes advantage of the}} hierarchical structure of the H. 264 /AVC syntax and uses TCP to transmit important syntax elements of H. 264 /AVC video and UDP to transmit non-important elements. Moreover, if desired, FDSP is flexible enough to send any H. 264 <b>syntax</b> <b>element</b> via TCP. The proposed FDSP is implemented and validated under different wireless network conditions. Both visual quality and delay results are compared against pure-UDP and pure-TCP streaming methods. Our results show that FDSP effectively achieves a balance between delay and visual quality, thus it has advantage over traditional pure-UDP and pure-TCP methods...|$|E
50|$|Dolby Digital Plus is {{nominally}} a 16-bit-aligned protocol, though {{very few}} {{fields in the}} syntax respect any byte or word boundaries. As many <b>syntax</b> <b>elements</b> are optional or variable-length, including some whose presence or length is dependent on complex preceding calculations, {{and there is little}} redundancy in the syntax, DD+ can be extremely difficult to parse correctly, with syntactically valid but incorrect parsings easily produced by defective encoders.|$|R
30|$|In this work, we {{implemented}} our own CAVLD {{to fully}} exploit the developed instructions {{along with the}} proposed table mapping algorithms for coeff_token, level, and run_before <b>syntax</b> <b>elements.</b> To evaluate the high-performance CAVLD algorithm, the developed CAVLD is evaluated by comparing the open H. 264 /AVC decoder (FFmpeg). Note that JM is not a proper platform for decoding speed evaluations because JM is around two times slower than the FFmpeg software for CAVLD.|$|R
40|$|Abstract. This paper re-studies the {{security}} of an MPEG-video encryption scheme based on secret Huffman tables. The present cryptanalysis shows that: 1) the key space of the encryption scheme is not sufficiently large against divide-and-conquer (DAC) ciphertext-only attack; 2) its security against the chosen-plaintext attack is very weak. The insecurity is mainly due to the separated use of different Huffman tables for different sets of <b>syntax</b> <b>elements.</b> A brief discussion {{on how to improve}} this MPEG-video encryption scheme is also given. ...|$|R
30|$|For {{the level}} and run_before syntax elements, the {{multi-level}} table mapping algorithms [22] are also used for fast decoding. The level <b>syntax</b> <b>element</b> is represented with the Exp-Golomb code, the codewords of which have leading zeros which are less than 15. The first 8 -bit codeword is decoded using table mapping, {{and the rest of}} the bits are decoded using arithmetic operations by employing characteristics of Exp-Golomb. Codewords with more than 15 leading zeros before the separator require exceptional handling. This algorithm also requires several conditional branches. For the run_before syntax, one of multiple tables is selected based on the number of zeros among the rest of coefficients to be decoded. When the number of zeros is greater than six, a larger mapping table is required. In this case, two-stage table mapping should be employed to reduce the amount of memory. For the remaining cases, one table mapping algorithm can perform the entire entropy decoding. This algorithm can significantly reduce the table memory requirement; however, many conditional branches should be involved, and these can reduce overall performance of entropy decoding with a multi-stage pipelined processor.|$|E
40|$|International audienceThis paper investigates {{whether the}} {{information}} related to the human visual saliency is still preserved {{at the level of}} the HEVC compressed stream syntax elements. In this respect, a new saliency model, matched to the peculiarities of this emerging standard is defined. It consists of four elementary maps, describing the four main saliency features: intensity, color, orientation and motion. These maps are defined based on the energies of the luma and chroma coefficients, on the variations of the intra prediction modes and on the energy of motion vectors, respectively. They are fusioned according to 48 static and static-dynamic pooling formulas. The results are compared to three state-of-the-art uncompressed (pixel) domain as well as to the MPEG- 4 AVC compressed domain saliency maps. It is brought to light that the HEVC saliency model outperforms (with singular exceptions) the state-of-the-art uncompressed domain and is as good as MPEG- 4 AVC saliency model. We can thus state that, as its MPEG- 4 AVC ancestor, although not designed based upon visual saliency principles, the HEVC compression standard preserves this human visual property at the level of its <b>syntax</b> <b>element...</b>|$|E
40|$|Abstract — To {{satisfy the}} video {{application}} diversities, {{an extension of}} H. 264 /advanced video coding (AVC), called scalable video coding (SVC), {{is designed to provide}} multiple demanded video data via a single video encoder. However, constructed on the fundamental of H. 264 /AVC, the complexity of SVC is much higher than that of H. 264 /AVC. In this paper, a VLSI design for all-intra scalable video encoder is proposed to aim at efficient scalable video encoding. First, the memory bandwidth require-ments for several encoding methods are analyzed to find out the best encoding method which can achieve best tradeoff between internal memory usage and external memory access. Afterward, an all-intra SVC encoder combined with several advanced tech-niques, including fast intra prediction algorithm, efficient <b>syntax</b> <b>element</b> encoding approach in context-adaptive variable-length coding, and hardware-efficient techniques, are implemented in a macroblock (MB) -level pipeline to increase data throughput. Implementation results demonstrate that our proposed SVC encoder can process more than 594 -k MBs per second, which is equivalent to the summation of 60 high-definition, 1080 -p, SD 480 -p, and common intermediate format frames under 135 -MHz working frequency. The proposed design consumes 258 -K gate counts when synthesized by 90 -nm CMOS technology. Index Terms — All-intra, scalable video coding (SVC), VLSI architecture design. I...|$|E
50|$|Seed7 is an {{extensible}} general-purpose {{programming language}} designed by Thomas Mertes. It is syntactically similar to Pascal and Ada. Along {{with many other}} features, it provides an extension mechanism. Seed7 supports introducing new <b>syntax</b> <b>elements</b> and their semantics into the language, and allows new language constructs to be defined and written in Seed7. For example, programmers can introduce syntax and semantics of new statements and user defined operator symbols. The implementation of Seed7 differs significantly from that of languages with hard-coded syntax and semantics.|$|R
40|$|Abstract. This work mainly {{focus on}} the design and {{implementation}} of context-based adaptive binary arithmetic coding (CABAC) parallelization on multicourse digital signal processor (DSP) platform. <b>Syntax</b> <b>elements</b> partitioning based on load balancing is proposed to achieve data parallelization of CABAC. On the multicourse DSP, a task-dispatch structure is proposed. Inter-core communication is achieved by combination of shared memory and interrupt. And inter-core synchronization is achieved by combination of shared variable and hardware semaphore. The above structure makes the overall system clearer and program control easier. A speedup of 2. 77 is obtained...|$|R
40|$|Abstract—Current {{research}} towards 3 D {{video compression}} within MPEG requires the compression of three texture and depth views. To reduce the additional complexity and bit {{rate of the}} depth map encoding, we present a fast mode decision model based on previously encoded macroblocks of the texture view. Meanwhile we present techniques to reduce the rate based on predicting <b>syntax</b> <b>elements</b> from the corresponding texture view. The proposed system is {{able to get a}} reduction in complexity of 71. 08 % with an average bit rate gain of 4. 35 %. I...|$|R
