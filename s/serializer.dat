175|32|Public
25|$|After being offline due to {{a server}} crash, <b>Serializer</b> relaunched in October, 2006 under the editorship of Eric Millikin. Fetus-X was among the comics on the relaunched <b>serializer,</b> along with A Softer World, Idiot Box, and Templar, Arizona.|$|E
25|$|In {{the fall}} of 2002, Fetus-X {{became part of the}} subscription-based online {{alternative}} comics anthology <b>Serializer,</b> a spin-off of the successful webcomics site Modern Tales. Other comics on <b>Serializer</b> included Achewood Sunday Edition, The Magic Whistle, and Little Laurie Sprinkles. In {{the fall of}} 2005 Fetus-X became a free comic on Webcomics Nation.|$|E
25|$|In 2002, Millikin was {{an editor}} (along with Tom Hart) and {{contributing}} {{artist of the}} online alternative comics anthology <b>Serializer.</b> In 2005, Millikin {{was one of the}} artists in the Clickwheel collective that published on the video iPod. Millikin has also been published by Modern Tales and Webcomics Nation, where {{he was one of the}} all-time most popular artists. Millikin is one of the few, and first, webcomic creators successful enough to make a living as an artist.|$|E
5000|$|...NET Framework: [...]NET Framework {{has several}} <b>serializers</b> {{designed}} by Microsoft. There are also many <b>serializers</b> by third parties. More {{than a dozen}} <b>serializers</b> are discussed and tested here. and here The list is constantly growing.|$|R
40|$|We further {{increase}} {{the efficiency of}} Java RMI programs. Where other optimizing re-implementations of RMI use pre-processors to create stubs and skeletons and to create class specific <b>serializers</b> and deserializers, this paper demonstrates that with transformations based on compile time analysis an additional 18 % performance gain can be achieved over class specific <b>serializers</b> alone for a simple scientific application...|$|R
5000|$|New {{extensible}} <b>serializers</b> {{that provide}} new [...]osgb binary, [...]osgt ascii and [...]osgx xml file native formats ...|$|R
2500|$|In October 2002, Achewood 's [...] "Sunday Edition" [...] {{became part}} of the online {{alternative}} comics anthology <b>Serializer.</b> In their review of serializer.net, The Comics Journal wrote: [...] "It's a pleasure to see strips like Achewood's [...] "Sunday" [...] strip ... use the newspaper format for far more daring, entertainingly perverse work ... would be perfectly at home at a good alternative weekly or a great college paper." [...] Achewood is sometimes featured in the Chaparral, Stanford University's humor publication, of which Onstad is an editor emeritus.|$|E
2500|$|Starting in 2002, some webcomic creators formed collectives {{and sold}} {{subscriptions}} to their webcomics, such as Modern Tales and <b>Serializer,</b> followed by Girlamatic in 2003. Here, viewers {{were able to}} read only a few comics for free, and paid a monthly subscription fee {{in order to be}} able to access the rest. This [...] "Modern Tales" [...] family of websites created one of the first profitable subscription models for webcomics and lasted a little over a decade, with the sites closing in April 2013, shortly before their publisher's death.|$|E
2500|$|The American Library Association's Booklist {{describes}} how Millikin's expressionistic visual style [...] "crosses Edvard Munch with an incipient victim of high-school suicide" [...] and The Hindu describes his paintings as [...] "haunting images." [...] In his book , syndicated newspaper editorial cartoonist Ted Rall describes Millikin's work as [...] "one {{of the most}} interesting webcomics around." [...] The Webcomics Examiner named Millikin's comics one of the best webcomics, the webcomics blog ComixTalk named it one of the 100 Greatest Webcomics of all time, and The Washington Posts readers named it one of the top 10 finalists for Best Webcomic of the Past Decade in 2010. Millikin's work has also been nominated for multiple Web Cartoonists' Choice Awards, including their top honor of [...] "Outstanding Comic". Millikin has been a panelist and guest at webcomic conventions, including the inaugural New England Webcomics Weekend, the first convention organized by and focusing on webcomic creators. The Sunday Times described <b>serializer</b> as [...] "high-art", [...] and the Sydney Morning Herald considered them to be the avant-garde.|$|E
5000|$|Although {{algebraic}} {{laws have}} been developed for the Actor model, they do not capture the crucial property of guaranteed delivery of messages sent to <b>Serializers.</b> For example see the following: ...|$|R
50|$|Aki Yonezawa {{published}} his specification and verification techniques for Actors. Russ Atkinson and Carl Hewitt published {{a paper on}} specification and proof techniques for <b>serializers</b> providing an efficient solution to encapsulating shared resources for concurrency control.|$|R
50|$|Higher-end FPGAs {{can contain}} high speed {{multi-gigabit}} transceivers and hard IP cores such as processor cores, Ethernet MACs, PCI/PCI Express controllers, and external memory controllers. These cores exist alongside the programmable fabric, {{but they are}} built out of transistors instead of LUTs so they have ASIC level performance and power consumption while not consuming {{a significant amount of}} fabric resources, leaving more of the fabric free for the application-specific logic. The multi-gigabit transceivers also contain high performance analog input and output circuitry along with high-speed <b>serializers</b> and deserializers, components which cannot be built out of LUTs. Higher-level PHY layer functionality such as line coding {{may or may not be}} implemented alongside the <b>serializers</b> and deserializers in hard logic, depending on the FPGA.|$|R
5000|$|Objects with locks (e.g., as in Java and C#) can {{be modeled}} as a <b>Serializer,</b> {{provided}} that their implementations {{are such that}} messages can continually arrive (perhaps by being stored in an internal queue). A <b>serializer</b> is an important kind of Actor defined by the property that it is continually available {{to the arrival of}} new messages; every message sent to a <b>serializer</b> is guaranteed to arrive.|$|E
50|$|After being offline due to {{a server}} crash, <b>Serializer</b> relaunched in October, 2006 under the editorship of Eric Millikin. Fetus-X was among the comics on the relaunched <b>serializer,</b> along with A Softer World, Idiot Box, and Templar, Arizona.|$|E
5000|$|The Sunday Times {{described}} <b>Serializer</b> as [...] "high-art." [...] The Sydney Morning Herald considered <b>Serializer</b> {{to be the}} [...] "avant-garde." [...] Publishers Weekly described Serializer's {{artists as}} [...] "critical darlings" [...] and [...] "art comics favorites." [...] The New York Times called their comics [...] "well drawn and funny." ...|$|E
40|$|We further {{increase}} {{the efficiency of}} Java RMI programs. Where other optimizing re-implementations of RMI use pre-processors to create stubs and skeletons and to create class specific <b>serializers</b> and deserializers, this paper demonstrates that with transformations based on compile time analysis, an additional 18 % performance gain can be achieved over class specific <b>serializers</b> alone for a simple scientific application. A novel and RMI-specific version of static heap analysis is used to derive information about objects that are passed as arguments of remote method invocations. This knowledge of objects and their interrelations is used for three optimizations. First, dynamic introspection and/or (recursive) dynamic invocations of object specific <b>serializers</b> is slow. With knowledge from our heap analysis, the marshaling of graphs of argument objects can be inlined at the call site. Hence, many method table lookups and skeleton indirections of previous approaches can be avoided and less protocol information is sent over the network. Secondly, because object graphs may be passed as RMI arguments, cyclic references need to be detected. With our heap analysis, we can detect {{if there is no}} potential for cycles and hence, cycle detection code can be left out of the serialization and marshaling codes. Finally, object arguments to remote methods cause object creation and garbage collection. Heap analysis and an RMI-specific version of escape analysis allows the reuse of object graphs created in earlier remote invocations. 1...|$|R
50|$|In his {{doctoral}} dissertation, Aki Yonezawa developed further {{techniques for}} proving properties of Actor systems {{including those that}} make use of migration. Russ Atkinson and Carl Hewitt developed techniques for proving properties of <b>Serializers</b> that are guardians of shared resources. Gerry Barber's doctoral disseration concerned reasoning about change in knowledgeable office systems.|$|R
40|$|Serial data streaming, one of {{the most}} {{important}} functions in modern communication systems, is becoming more and more power consuming as bit-rate is increasing without standstill. In this work, we propose a novel technique for partitioning conventional N-bit registers in standard data converters, in order to reduce their switching activity, and therefore power consumption. The architecture here presented have a very low area overhead with respect to the standard ones for <b>serializers</b> and, furthermore, it allows different (i. e., custom) configurations for the partitioning. The proposed method even allows to extract idleness conditions of register banks in order to apply the well-known clock-gating technique to the circuit and thus furtherly reducing the total power consumption. This method has been applied to different data converters (i. e., <b>serializers)</b> in a base-band radio within an ultra low-power industrial design and the results highlight the effectiveness of the proposed techniqu...|$|R
50|$|In {{the fall}} of 2002, Fetus-X {{became part of the}} subscription-based online {{alternative}} comics anthology <b>Serializer,</b> a spin-off of the successful webcomics site Modern Tales. Other comics on <b>Serializer</b> included Achewood Sunday Edition, The Magic Whistle, and Little Laurie Sprinkles. In {{the fall of}} 2005 Fetus-X became a free comic on Webcomics Nation.|$|E
5000|$|Phil McAndrew '07, artisit/comic {{featured}} <b>Serializer</b> {{in through}} his comic Bean.|$|E
5000|$|NRZ {{can refer}} {{to any of the}} {{following}} [...] <b>serializer</b> line codes: ...|$|E
40|$|RinSim is a {{logistics}} simulator {{written in}} Java. RinSim supports (de) centralized algorithms for dynamic pickup-and-delivery problems (PDP). The simulator is {{developed at the}} iMinds-DistriNet group at the dept. of Computer Science, KU Leuven, Belgium. Changes in this version: 	CommModel replaces the old CommunicationModel. Has a new API and is better tested. 	<b>Serializers</b> have moved to graph. io package. Reworked API and fixed some bugs...|$|R
40|$|This paper {{describes}} rst implementation {{strategies and}} decisions dur-ing {{the development of}} Resource Usage Service (RUS) [4][5] interfaces for the Distributed Grid Accounting System (DGAS) [2][3]. Lead within the EU-founded project OMII-Europe[1], established to improve interoper-ability across heterogeneuous Grid platforms through the re-engineering of grid software components the work we describe here is the extension of DGAS with the necessary interfaces to allow users to store and retrieve Usage Records (URs) [6][7] according to the Open Grid Forum (OGF) speci cations. 1 Description of the prototype Since the DGAS HLR server is written in C++ {{this has been the}} natural choice for the implementation of DGAS-RUS components. In order to generate SOAP <b>serializers</b> and stubs from WSDL service description we chose to use gSOAP [9] toolkit 1. It generates ecient XML <b>serializers</b> and oers a SOAP to C/C++ language binding. 2 Implementation As described in [8] the RUS interface for DGAS (DGAS-RUS) is supposed to be an additional module on top of the core system and thus the general design is thought to be minimally intrusive and to follow the architectural design of DGAS. Only some components needed modications to be enhanced with RUS 1 gSOAP web page...|$|R
40|$|Abstract. LDApp is {{designed}} as a very modular JavaScript Linked Data stack. A requirement for the modular design was an API to handle the graph data. RDF-Interfaces was the only JavaScript API standard, but lacks store handling and easy management of multiple parsers and <b>serializers.</b> The existing RDF-Interfaces API was extended to cover these use cases. To complete the framework, a JSON-LD integration is desir-able to use JavaScript native language features to deal with graph data. New modules for public interfaces, authentication, authorization, persis-tence and JSON-LD handling have been written to use this API...|$|R
50|$|The <b>Serializer</b> website was {{launched}} in October 2002 with Tom Hart as editor and with approximately 20 other contributing artists. After being offline due to a server crash in April, 2005, <b>Serializer</b> relaunched in October, 2006 under the editorship of Eric Millikin. The site was published by Joey Manley, who had previously published the subscription webcomics site Modern Tales, {{with some of the}} same artists, starting a few months prior in March 2002. <b>Serializer</b> {{was one of the first}} sites to sell digital subscriptions, using a freemium model, with each artist offering some of their series for free, but with the majority behind a paywall. Artists also sold content through micropayments, including through BitPass.|$|E
50|$|Demian5's other comic, Square Fiction, {{has been}} {{published}} in the Zurich Express newspaper {{as well as on the}} subscription webcomics site <b>Serializer.</b>|$|E
5000|$|User {{can write}} a custom <b>serializer</b> and/or {{deserializer}} {{so that they can}} control the whole process and even (de)serialize instances of classes for which the source code is not accessible.|$|E
40|$|International audienceThree-dimensional Networks-on-Chip (3 D NoCs) {{are based}} on Through-Silicon-Vias (TSV), which offer several {{advantages}} such as stacking, high throughput and energy efficiency. However, TSVs suffer from design process variations. On the other hand, designing purely asynchronous <b>serializers</b> enables reliable inter-tier communication with moderate performance overhead. A side benefit lies in the intrinsic delay insensitivity of asynchronous logic which exploits serialized TSV links to their full timing potential, thereby mitigating process variability impact. This paper explores similar impact on 3 D NoCs. It considers randomly generated process variation maps for which the impact on performance is analyzed according to various design parameters, e. g. TSV probabilistic delay distributions, TSV size and serialization rate...|$|R
40|$|Designers {{are often}} {{faced with the}} task of moving {{parallel}} data from one location to another, over moderate distances, and in the most efficient manner. Over the last few years, a broad spectrum of low-voltage differential signaling (LVDS) <b>serializers</b> have become available in various clock-rate/data-width configurations. This report illustrates the performance of Texas Instruments MuxIt serializer/deserializer devices using different clock-rate/data-widths and different lengths of standard CAT 5 UTP cable between the serializer/transmitter and receiver/deserializer. Test results are presented for various widths of parallel data, from 6 -bit to 20 -bit wide parallel data using the existing, commercially available, MuxIt evaluation module from Texas Instruments. Results are presented graphically showing cable length v...|$|R
40|$|When {{developing}} {{a system that}} partakes in a communication protocol, testing whether the implementation conforms to the official specification of that protocol is difficult: the specification may be unclear or ambiguous and creating a simulator that automates tests is time-consuming. The protocol specification language APSL is proposed, with which one can describe the types of messages used in a protocol, along with {{a model of the}} protocol’s state machine. It distinguishes itself from similar languages by allowing the generation of message parsers and <b>serializers,</b> and by providing an interaction model useful for conformance testing. Additionally, an extensible framework is presented that can execute automatic conformance tests in order to determine whether an implemen- tation exhibits the behaviour expressed by an APSL specification...|$|R
50|$|On March 2, 2002, Joey Manley founded Modern Tales, {{offering}} subscription-based webcomics. The Modern Tales spin-off <b>serializer</b> {{followed in}} October 2002, then came girlamatic and Graphic Smash in March and September 2003 respectively.|$|E
50|$|N3 Round Trip: This {{refers to}} the {{requirements}} on a formula-aware RDF store's persistence mechanism necessary {{for it to be}} properly populated by a N3 parser and rendered as syntax by a N3 <b>serializer.</b>|$|E
50|$|A {{pipeline}} is used {{to specify}} how the different Cocoon components interact with a given request to produce a response. A typical pipeline consists of a generator, followed by zero or more transformers, and finally a <b>serializer.</b>|$|E
40|$|As {{advances}} in computer architecture and changing economics make feasible machines with large-scale parallelism, Artificial Intelligence will require {{new ways of}} thinking about computation that can exploit parallelism effectively. We present the actor model of computation as being appropriate for parallel systems, since it organizes knowledge as active objects acting independently, and communicating by message passing. We describe the parallel constructs in our experimental actor interpreter Act 1. Futures create concurrency, by dynamically allocating processing resources much as Lisp dynamically allocates passive storage. <b>Serializers</b> restrict concurrency by constraining the order in which events take place, and have changeable local state. Using the actor model allows parallelism and synchronization to be implemented transparently, so that parallel or synchronized resources can be used as easily as their serial counterparts...|$|R
30|$|The {{achieved}} results {{prove the}} hypothesis of having a low range FPGA as {{a data processing unit}} operating at high frequency (500  MHz) without the use of dedicated high speed buffers [Multi Gigabit Transceiver (MGT), Rocket I/O] or external devices, such as <b>serializers,</b> that increase the price and complexity of the fabrication. The main goal is to operate the ADCs, FPGA and clock generator at its maximum limits. Indeed, this digital backend enables GEM to proceed towards acquisition of data over large sky areas in X-band with high sensitivity. As a corollary, projects with massive needs of digital processing subsystems like the SKA, may benefit from this approach since the main hardware characteristic of this high bandwidth design is the use of a conventional FPGA and off-the-shelf components, making the design affordable for projects requiring cost-effective digital processing.|$|R
40|$|The {{trend towards}} full {{integration}} of broadband transceivers [1, 2] makes it desirable to realize front-end circuits such as limiting amplifiers (LAs) and laser/modulator drivers (LMDs) in CMOS technology. These amplifiers and drivers {{may serve as}} stand-alone functions in optical modules or coexist with <b>serializers</b> and deserializers on the same chip. The low transconductance of MOS devices, the limited voltage headroom, and the large voltage swings necessary for CMOS CDR circuits create a tight performance envelope that severely constrains the speed of CMOS LAs. Furthermore, unlike their bipolar counterparts, the first few gain stages in a CMOS LA operate linearly, exhibiting a small-signal behavior and hence a smaller bandwidth. Figure 10. 8. 1 shows the LA architecture. The core consists of five identical stages each having a voltage gain of 10 dB and a bandwidth of 16 GHz. While inverse scalin...|$|R
