554|3826|Public
5|$|Bob Muglia {{started his}} Microsoft career in 1988. He {{was the first}} product manager for SQL Server. Muglia also served as the {{director}} of Windows NT Program Management and User Education. He was promoted to vice president of the Windows NT division in October 1995. Muglia later held the position of vice president of the <b>Server</b> <b>Application</b> group, until he was promoted to {{senior vice president of the}} Applications and Tools group in February 1998.|$|E
500|$|There are {{two primary}} ways for adding support for PHP to a web server {{as a native}} web server module, or as a CGI executable. [...] PHP has a direct module {{interface}} called <b>Server</b> <b>Application</b> Programming Interface (SAPI), which is supported by many web servers including Apache HTTP Server, Microsoft IIS, Netscape (now defunct) and iPlanet. [...] Some other web servers, such as OmniHTTPd, support the Internet <b>Server</b> <b>Application</b> Programming Interface (ISAPI), which is a Microsoft's web server module interface. [...] If PHP has no module support for a web server, it can always {{be used as a}} Common Gateway Interface (CGI) or FastCGI processor; in that case, the web server is configured to use PHP's CGI executable to process all requests to PHP files.|$|E
5000|$|In computing, <b>Server</b> <b>Application</b> Programming Interface (SAPI) is {{the direct}} module {{interface}} to web servers {{such as the}} Apache HTTP Server, Microsoft IIS, and Oracle iPlanet Web Server. Microsoft uses the term Internet <b>Server</b> <b>Application</b> Programming Interface (ISAPI), and the defunct Netscape web server used the term Netscape <b>Server</b> <b>Application</b> Programming Interface (NSAPI) for the same purpose. [...] In other words, SAPI is an application programming interface (API) provided by the web server to help other developers in extending the web server capabilities.|$|E
5000|$|JMX is {{supported}} by Java <b>application</b> <b>servers</b> such as OpenCloud Rhino <b>Application</b> <b>Server</b> http://www.opencloud.com/products/rhino-application-server/real-time-application-server/, JBoss, JOnAS, WebSphere <b>Application</b> <b>Server,</b> WebLogic, SAP NetWeaver <b>Application</b> <b>Server,</b> Oracle <b>Application</b> <b>Server</b> 10g and Sun Java System <b>Application</b> <b>Server.</b>|$|R
5000|$|... iPlanet <b>Application</b> <b>Server</b> (a Java EE <b>application</b> <b>server</b> system, {{based on}} the Netscape <b>Application</b> <b>Server</b> and NetDynamics <b>Application</b> <b>Server)</b> ...|$|R
5000|$|Clients {{can include}} {{database}} <b>servers,</b> <b>application</b> <b>servers,</b> file servers, and individual workstations.|$|R
5000|$|ISAPI Internet <b>Server</b> <b>Application</b> Programming Interface (Microsoft) ...|$|E
5000|$|Session {{poisoning}} (also {{referred to}} as [...] "session data pollution" [...] and [...] "session modification") is a method to exploit insufficient input validation within a <b>server</b> <b>application.</b> Typically a <b>server</b> <b>application</b> that is vulnerable {{to this type of}} exploit will copy user input into session variables.|$|E
5000|$|Diameter Network Access <b>Server</b> <b>Application</b> (NASREQ, RFC 7155)(Obsoletes: RFC 4005) ...|$|E
50|$|SysMaster {{can be used}} {{to monitor}} and manage the {{performance}} of web <b>servers,</b> web <b>application</b> <b>servers,</b> TP monitors, <b>application</b> <b>servers,</b> etc.|$|R
5000|$|TNAPS <b>Application</b> <b>Server,</b> {{freeware}} <b>application</b> <b>server,</b> {{developed by}} TN LLC ...|$|R
5000|$|... #Subtitle level 3: Mobile <b>application</b> <b>servers</b> vs. <b>application</b> <b>servers</b> vs. {{web servers}} ...|$|R
5000|$|... wlst - Oracle Weblogic <b>Server</b> <b>Application</b> Server tool {{scripting}} using Jython ...|$|E
5000|$|... 15.08, August 2015. Improved EiffelWeb {{solution}} to build web <b>server</b> <b>application.</b> (press release).|$|E
5000|$|ArkMC is a {{wireless}} media <b>server</b> <b>application</b> (iOS/Android) oriented on a UPnP/DLNA compatible devices.|$|E
30|$|The {{load on the}} <b>server</b> <b>applications</b> is reduced.|$|R
5000|$|Perform and {{schedule}} actions on <b>servers,</b> <b>applications</b> and services ...|$|R
50|$|A CMIS server library allows {{developers}} to create CMIS <b>server</b> <b>applications.</b>|$|R
50|$|The {{software}} distribution {{also includes a}} complete RTSP <b>server</b> <b>application,</b> RTSP clients and a RTSP proxy server.|$|E
50|$|The Telephony <b>Server</b> <b>Application</b> Programming Interface (TSAPI) is {{a similar}} {{standard}} developed by Novell for NetWare servers.|$|E
50|$|Applications {{that use}} NSAPI are {{referred}} to as NSAPI plug-ins. Each plug-in implements one or more <b>Server</b> <b>Application</b> Functions (SAFs).|$|E
40|$|General-purpose {{operating}} systems provide inadequate support for large-scale <b>servers.</b> <b>Server</b> <b>applications</b> lack sufficient control over scheduling {{and management of}} machine resources, which {{makes it difficult to}} enforce priority policies, and to provide robust and controlled service. For example, <b>server</b> <b>applications</b> cannot provide differentiated quality of service to requests from different clients. The root cause of these problems is a fundamental mismatch between the original design assumptions underlying the resource management mechanisms of current general-purpose {{operating systems}}, and the behavior of modern <b>server</b> <b>applications.</b> In particular, the notions of protection domain and resource principal coincide in the process abstraction of current operating systems. Moreover, these operating systems provide insufficient control to an application over the resources that are consumed inside the kernel on behalf of the application. These aspects of current operating systems prevent a server process that manages large numbers of network connections, for example, from properly allocating system resources among those connections. This dissertation addresses the lack of operating system support for fine-grained resource management in large-scale server systems. It starts by characterizing the nature of the mismatch between the design assumptions of current general-purpose operating systems, and the behavior of <b>server</b> <b>applications.</b> The traditional design of core operating system abstractions and APIs is reevaluated {{in the light of the}} requirements of <b>server</b> <b>applications.</b> This reevaluation leads to a set of novel operating system abstractions and APIs that serve to provide effective support for <b>server</b> <b>applications...</b>|$|R
40|$|This {{work was}} also {{published}} as a Rice University thesis/dissertation: [URL] operating systems provide inadequate support for large-scale <b>servers.</b> <b>Server</b> <b>applications</b> lack sufficient control over scheduling {{and management of}} machine resources, which {{makes it difficult to}} enforce priority policies, and to provide robust and controlled service. For example, <b>server</b> <b>applications</b> cannot provide differentiated quality of service to requests from different clients. The root cause of these problems is a fundamental mismatch between the original design assumptions underlying the resource management mechanisms of current general-purpose operating systems, and the behavior of modern <b>server</b> <b>applications.</b> In particular, the notions of protection domain and resource principal coincide in the process abstraction of current operating systems. Moreover, these operating systems provide insufficient control to an application over the resources that are consumed inside the kernel on behalf of the application. These aspects of current operating systems prevent a server process that manages large numbers of network connections, for example, from properly allocating system resources among those connections. This dissertation addresses the lack of operating system support for fine-grained resource management in large-scale server systems. It starts by characterizing the nature of the mismatch between the design assumptions of current general-purpose operating systems, and the behavior of <b>server</b> <b>applications.</b> The traditional design of core operating system abstractions and APIs is reevaluated {{in the light of the}} requirements of <b>server</b> <b>applications.</b> This reevaluation leads to a set of novel operating system abstractions and APIs that serve to provide effective support for <b>server</b> <b>applications...</b>|$|R
5000|$|Arxan Code Protection {{to secure}} Mobile, IoT & Embedded, Desktop and <b>Server</b> <b>applications</b> ...|$|R
50|$|The Netscape <b>Server</b> <b>Application</b> Programming Interface (NSAPI) is an {{application}} programming interface for extending server software, typically web server software.|$|E
50|$|SatPI is an {{open source}} project that {{implements}} a Sat>IP <b>server</b> <b>application</b> that runs under Linux. It currently supports DVB-S/S2/T/C cards.|$|E
50|$|In 2008, VSoft {{released}} version 6 of FinalBuilder, {{which included}} a <b>server</b> <b>application</b> for remotely managing build servers and implementing Continuous Integration.|$|E
50|$|The NEWS {{platform}} {{was later}} used for video-on-demand applications, and for Internet <b>server</b> <b>applications.</b>|$|R
40|$|In {{recent years}} <b>server</b> <b>applications</b> using Java become popular. However, they have {{different}} performance requirements from other applications: high throughput and small response time. One of obstacles for achieving those requirements is a Java Virtual Machine (JVM). Among the services that a JVM provides, garbage collection affects <b>server</b> <b>applications</b> in throughput and latency. Some JVMs have various garbage collectors for server-side Java {{but they do not}} still consider the behavior of <b>server</b> <b>applications.</b> We show that the lifetime pattern of objects is distinguished by the thread that allocates them in <b>server</b> <b>applications.</b> Separating objects and applying different collection policies according to threads, we propose that a garbage collector can achieve both high throughput and small pause time. Experiments show that the throughput of our collector is up to 1. 7 times greater than that of previous generational collectors with the same pause time and the pause time of minor collection is smaller by almost 10 % given the same throughput. 1...|$|R
5|$|Several Hewlett-Packard <b>server</b> <b>applications,</b> such as HP System Management Homepage (SMH) for Linux and Windows.|$|R
5000|$|JET Red is a {{file sharing}} technology, while ESE is {{designed}} to be embedded in a <b>server</b> <b>application,</b> and does not share files.|$|E
50|$|Fiddler is an HTTP {{debugging}} proxy <b>server</b> <b>application</b> {{written by}} Eric Lawrence, formerly a Program Manager on the Internet Explorer development team at Microsoft.|$|E
50|$|Mozilla {{also offers}} a {{synchronization}} <b>server</b> <b>application</b> for use with Firefox Sync, for users and businesses that prefer to host their own synchronization data.|$|E
50|$|It has {{support for}} n-tier systems {{by using the}} OpenROAD <b>Application</b> <b>Server.</b> The <b>Application</b> <b>Server</b> can be {{deployed}} on Windows or Linux/Unix platforms.|$|R
50|$|In 1998, BEA {{acquired}} the San Francisco start-up WebLogic, which {{had built the}} first standards-based Java <b>application</b> <b>server.</b> WebLogic's <b>application</b> <b>server</b> became {{the impetus for the}} Sun Microsystems' J2EE specification and formed the basis of BEA's WebLogic <b>application</b> <b>server</b> sold today.|$|R
5000|$|An <b>application</b> <b>server</b> is a {{collection}} of executables that collectively interpret the ABAP/4 (Advanced Business Application Programming / 4th Generation) programs and manage the input and output for them. When an <b>application</b> <b>server</b> is started, these executables all start at the same time. When an <b>application</b> <b>server</b> is stopped, they all shut down together. The number of processes that start up when you bring up the <b>application</b> <b>server</b> is defined in a single configuration file called the <b>application</b> <b>server</b> profile.Each <b>application</b> <b>server</b> has a profile that specifies its characteristics when it starts up and while it is running. For example, an <b>application</b> <b>server</b> profile specifies: ...|$|R
