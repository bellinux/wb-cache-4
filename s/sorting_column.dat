0|114|Public
5000|$|Defunct {{satellites}} {{are highlighted}} in gold.Default <b>sort</b> <b>column</b> ...|$|R
5000|$|Compute the {{necessary}} ingredients for the medcouple kernel function [...] with [...] sorted rows and [...] <b>sorted</b> <b>columns.</b>|$|R
40|$|In {{this paper}} we {{consider}} searching, and also ranking, in an m x n matrix with <b>sorted</b> <b>columns</b> on the EREW PRAM model. We propose a work-optimal parallel algorithm, {{based on the}} technique of accelerated cascading, that runs in O(log m log log m) -time for small elements with rank k ≤ m and in O(log m log log m log(k/m)) -time otherwise. Then we present a sequential algorithm for multisearch in a matrix with <b>sorted</b> <b>columns</b> {{as a prelude to}} a parallel algorithm for multisearch in a matrix with <b>sorted</b> <b>columns.</b> The sequential algorithm uses ideas from the parallel technique of chaining. The parallel multisearch algorithm follows this sequential algorithm and has a nontrivial dependence not only on the ranks of the search-elements but also on the number of search-elements. Finally we show how to adapt ideas from Bentley and Yao 2 ̆ 7 s [2] paper on sequential unbounded searching to parallel searching in matrices, which surprisingly leads to an asymptotic improvement...|$|R
50|$|Sorting hints - Placing {{cursor over}} a sorting tab will show {{if the next}} click will <b>sort</b> <b>column</b> in {{ascending}} (small triangle pointing up) or descending order (triangle pointing down).|$|R
40|$|In {{this paper}} we give {{evidence}} to show that in one-sided Jacobi SVD computation the <b>sorting</b> of <b>column</b> norms in each sweep is very important. An efficient parallel ring Jacobi ordering for computing singular value decomposition is described. This ordering can generate n(n- 1) / 2 different index pairs and <b>sort</b> <b>column</b> norms at the same time. The one-sided Jacobi SVD algorithm using this parallel ordering converges in about the same number of sweeps as the sequential cyclic Jacobi algorithm. The issue of equivalence of orderings for one-sided Jacobi is also discussed. We show how an ordering which does not <b>sort</b> <b>column</b> norms into order may still perform efficiently as long as it can generate the same index pairs at the same step as one which does sorting. Some experimental results on a Fujitsu AP 1000 are presented...|$|R
40|$|I n {{this paper}} we {{consider}} searching, and also rank-ing, in a n m x n matr ix with <b>sorted</b> <b>columns</b> o n the EREW PRAM model. W e propose a work-optimal parallel algorithm, based o n {{the technique of}} accelerated cascading, that runs i n O(1 og m log log m) -t ime for small elements with rank k 5 m and in O(1 og m loglogm l o g (k / m)) - t i m e otherwise. T h e n we present a sequential algorithm for multisearch an a matrix with <b>sorted</b> <b>columns</b> {{as a prelude to}} a paral-lel algorithm for multisearch i n a matrix with <b>sorted</b> <b>columns.</b> T h e sequential algorithm uses ideas f r o m the parallel technique of chaining. T h e parallel multi-search algorithm follows this sequential algorithm and has a nontrivial dependence not only o n the ranks of the search-elements but also o n the number of search-elements. Finally we show how to adapt ideas f r o m Bent ley and Yao’s [2] paper o n sequential unbounded searching t o parallel searching i n matrices, which sur-prisingly leads t o a n asymptotic improvement. ...|$|R
40|$|In {{this paper}} we give {{evidence}} to show that in onesided Jacobi SVD computation the <b>sorting</b> of <b>column</b> norms in each sweep is very important. Two parallel Jacobi orderings are described. These orderings can generate n(n 1) = 2 di erent index pairs and <b>sort</b> <b>column</b> norms at the same time. The one-sided Jacobi SVD algorithm using these parallel orderings converges in about the same number of sweeps as the sequential cyclic Jacobi algorithm. Some experimental results on a Fujitsu AP 1000 are presented. The issue of equivalence of orderings is also discussed. ...|$|R
50|$|The {{first stage}} of the fast {{algorithm}} proceeds as the naïve algorithm. We first compute the necessary ingredients for the kernel matrix, , with sorted rows and <b>sorted</b> <b>columns</b> in decreasing order. Rather than computing all values of , we instead exploit the monotonicity in rows and columns, via the following observations.|$|R
25|$|Click on {{the button}} in the header to <b>sort</b> each <b>column.</b>|$|R
5000|$|If table has {{not been}} sorted, just <b>sort</b> {{division}} <b>column,</b> otherwise ...|$|R
5000|$|There {{is no way}} to <b>sort</b> <b>columns,</b> nor {{to query}} an {{arbitrary}} query in distributed data stores. <b>Columns</b> are <b>sorted</b> when they are added to the column family. The way of sorting is defined by an attribute. For instance, this is done by the [...] attribute in Apache Cassandra that can have the following values: ...|$|R
40|$|A method {{which uses}} one-sided Jacobi {{to solve the}} {{symmetric}} eigenvalue problem in parallel is presented. We describe a parallel ring ordering for one-sided Jacobi computation. One distinctive feature of this ordering {{is that it can}} <b>sort</b> <b>column</b> norms in each sweep, which is very important to achieve fast convergence. Experimental results on both the Fujitsu AP 1000 and the Fujitsu VPP 500 are reported...|$|R
5000|$|With {{properties}} 1, 2, and 4, we {{can thus}} define the following matrix,If we sort the sets [...] and [...] in decreasing order, then the matrix [...] has sorted rows and sorted columns,The medcouple is then the median of this matrix with sorted rows and <b>sorted</b> <b>columns.</b> The {{fact that the}} rows and <b>columns</b> are <b>sorted</b> allows {{the implementation of a}} fast algorithm for computing the medcouple.|$|R
25|$|Click the triangles to <b>sort</b> any <b>column.</b> Click {{twice to}} bring the largest numbers to the top.|$|R
5000|$|<b>Sort</b> the <b>columns</b> of the {{eigenvector}} matrix V and eigenvalue matrix D {{in order}} of decreasing eigenvalue.|$|R
3000|$|... [...]. The j th row of {{the matrix}} {{contains}} all the child nodes of the j th parent of all groups. The illustration in the case G= 3 is shown in Figure  4. The matrix operates through two processes called as row <b>sorting</b> and <b>column</b> <b>sorting,</b> one after the other, as follows: [...]...|$|R
40|$|AbstractThe {{complexity}} of selection is analyzed for two sets, X + Y and matrices with <b>sorted</b> <b>columns.</b> Algorithms are presented that run in time which depends nontrivially on the rank k of the element {{to be selected}} and which is sublinear with respect to set cardinality. Identical bounds are also shown for the problem of ranking elements in these sets, and all bounds are shown to be optimal to within a constant multiplicative factor...|$|R
5000|$|Content can be <b>sorted</b> per <b>column</b> {{using the}} arrows in the headings.GGD Amsterdam {{refers to the}} local public health {{authority}} Gemeentelijke Gezondheidsdienst ...|$|R
50|$|Click on {{the button}} in the header to <b>sort</b> each <b>column.</b> Note that {{subdivision}} names will be sorted in Norwegian alphabetical order: a-z, æ, ø, å.|$|R
25|$|To use the sortable tables: {{click on}} the icons {{at the top of}} each <b>column</b> to <b>sort</b> that <b>column</b> in {{alphabetical}} order; click again for reverse alphabetical order.|$|R
40|$|We give compact {{extended}} formulations for {{the packing}} and partitioning orbitopes (with {{respect to the}} full symmetric group) described and analyzed in (Kaibel and Pfetsch, 2008). These polytopes are the convex hulls of all 0 / 1 -matrices with lexicographically <b>sorted</b> <b>columns</b> and at most, resp. exactly, one 1 -entry per row. They are important objects for symmetry reduction in certain integer programs. Using the extended formulations, we also derive a rather simple proof {{of the fact that}} basically shifted-column inequalities suffice in order to describe those orbitopes linearly. Comment: 16 page...|$|R
50|$|Subdivision {{names are}} listed as in the ISO 3166-2 {{standard}} published by the ISO 3166 Maintenance Agency (ISO 3166/MA).Click on the button in the header to <b>sort</b> each <b>column.</b>|$|R
40|$|This paper {{presents}} two novel sorting network-based architectures for computing high {{sample rate}} non-recursive rank order filters. The proposed architectures consist of significantly fewer comparators than existing sorting network-based architectures {{that are based}} on bubble-sort and Batcher's odd-even merge sort. The {{reduction in the number of}} comparators is obtained by <b>sorting</b> the <b>columns</b> of the window only once, and by merging the <b>sorted</b> <b>columns</b> in a way such that the number of candidate elements for the output is very small. The number of comparators per output is reduced even further by processing a block of outputs at a time. Block processing procedures that exploit the computational overlap between consecutive windows are developed for both the proposed networks. 1 This work was supported in part by a grant from NSF MIP- 9309504. 1 Introduction Rank order filters are non-linear digital filters that perform well in situations in which linear filters fail. In rank order filters, [...] ...|$|R
40|$|Column-oriented indexes—such as {{projection}} or bitmap indexes—are compressed by run-length encoding {{to reduce}} storage and increase speed. Sorting the tables improves compression. On realistic data sets, permuting the columns {{in the right}} order before sorting can {{reduce the number of}} runs by a factor of two or more. For many cases, we prove that the number of runs in table columns is minimized if we <b>sort</b> <b>columns</b> by increasing cardinality. Yet—maybe surprisingly—we must sometimes maximize the number of runs to minimize the index size. Experimentally, sorting based on Hilbert space-filling curves is poor at minimizing the number of runs. Key words...|$|R
50|$|Note : The {{cities are}} <b>sorted</b> by the <b>column</b> {{labelled}} Official population.|$|R
5000|$|Allows for default <b>column</b> <b>sorting</b> and {{the ability}} to set column widths ...|$|R
40|$|In {{this paper}} we give {{evidence}} to show that in onesided Jacobi SVD computation the <b>sorting</b> of <b>column</b> norms in each sweep is very important. Two parallel Jacobi orderings are described. These orderings can generate n(n Γ 1) = 2 different index pairs and <b>sort</b> <b>column</b> norms at the same time. The one-sided Jacobi SVD algorithm using these parallel orderings converges in about the same number of sweeps as the sequential cyclic Jacobi algorithm. Some experimental results on a Fujitsu AP 1000 are presented. The issue of equivalence of orderings is also discussed. 1 Introduction Let A be a real m Θ n matrix. Without loss of generality we assume that m n. The singular value decomposition (SVD) of A is its factorization into a product of three matrices A = U T; where U is an m matrix with orthonormal columns, V is an n Θ n orthogonal matrix, and Σ is an n Θ n nonnegative diagonal matrix, say Σ = diag(oe 1; ΔΔΔ; oe n). There are [...] ...|$|R
40|$|This paper {{presents}} two novel sorting network-based architectures for computing high {{sample rate}} non recursive rank order filters. The proposed architectures consist of significantly fewer comparators than existing architectures {{that are based}} on bubble-sort and Batcher's odd-even merge sort. The {{reduction in the number of}} comparators is obtained by <b>sorting</b> the <b>columns</b> of the window only once, and by merging the <b>sorted</b> <b>columns</b> in a way such that the set of candidate elements for the output is very small. The number of comparators per output are reduced even further by processing a block of outputs at a time. 1. INTRODUCTION Rank order filters are non-linear digital filters that perform well in situations in which linear filters fail. In rank order filters, the center value of each window is replaced by the rth largest element in the window, referred to as the element with rank r. Let W i;j be a (K Θ K) window centered at (i; j). Then the (i; j) th output, y i;j, is the element w [...] ...|$|R
50|$|The {{table is}} ordered by date; select an arrow to <b>sort</b> by another <b>column.</b>|$|R
50|$|LIL stores one list per row, {{with each}} entry {{containing}} the column index and the value. Typically, these entries are kept <b>sorted</b> by <b>column</b> index for faster lookup. This is another format good for incremental matrix construction.|$|R
500|$|Location: at city or provincial {{level and}} country name, with coordinates; <b>column</b> <b>sorts</b> by state ...|$|R
2500|$|LIL stores one list per row, {{with each}} entry {{containing}} the column index and the value. [...] Typically, these entries are kept <b>sorted</b> by <b>column</b> index for faster lookup. [...] This is another format good for incremental matrix construction.] ...|$|R
50|$|This is {{a partial}} list of {{commercial}} or professional recordings of Johann Sebastian Bach's Goldberg Variations, organized chronologically. You can alphabetically <b>sort</b> each <b>column</b> by clicking on the small box {{at the top of}} that column (click again to sort reverse-alphabetically).|$|R
5000|$|Statistics {{regarding}} transfer admissions {{are becoming}} easier to obtain since most schools follow the Common Data Set format and post information on numerous variables on a website. However, formats vary: some schools use a spreadsheet while others use a pdf. And in some cases, the common data set information {{is hard to}} find on a college's website, or buried in a [...] "Fast Facts" [...] section. The data in the adjacent table is for selected colleges for the 2010-2011 year. It is average data only, and may change substantially from year to year, and from college to college. Click on the triangles to <b>sort</b> <b>columns</b> by school name, state, number of applicants, and percent acceptances.|$|R
5000|$|For Furse-Malham (and {{traditional}} B-format), <b>sort</b> by FuMa <b>column</b> {{and multiply}} the spherical harmonic by the maxN* factor.|$|R
5000|$|Note: {{this is a}} sortable table, {{click on}} the column heading arrow icon to <b>sort</b> by that <b>column.</b>|$|R
