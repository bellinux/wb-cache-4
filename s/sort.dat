10000|10000|Public
5|$|In the Dimensional Change Card Sorting Task (DCCS), {{children}} are initially asked to <b>sort</b> cards {{by a single}} dimension (such as color), and are subsequently required to alter their strategy to <b>sort</b> cards based on a second dimension (such as shape). Typically, three-year-old {{children are}} able to <b>sort</b> cards based on a single dimension, but are unable to switch to <b>sort</b> the cards based on a second dimension. However, five-year-old children are able to <b>sort</b> cards based on one dimension and can then switch to sorting cards on a second dimension.|$|E
5|$|Another {{tax that}} the UN might promote {{would be some}} <b>sort</b> of global {{resources}} dividend.|$|E
5|$|Date: {{period and}} {{year of the}} construction; The column entries <b>sort</b> by year. If only a period is known, they <b>sort</b> by the start year of that period.|$|E
50|$|The terms {{describing}} <b>sorting</b> in sediments - {{very poorly}} <b>sorted,</b> poorly <b>sorted,</b> moderately <b>sorted,</b> well <b>sorted,</b> very well <b>sorted</b> - have technical definitions, and semi-quantitatively describe {{the amount of}} variance seen in particle sizes. In the field, sedimentologists use graphical charts to accurately describe the <b>sorting</b> of a sediment using one of these words.|$|R
40|$|Summary. In {{this paper}} {{definitions}} of many <b>sorted</b> closure system and many <b>sorted</b> closure operator are introduced. These notations are also introduced in [11], {{but in another}} meaning. In this article closure system is absolutely multiplicative subset family of many <b>sorted</b> sets and in [11] is many <b>sorted</b> absolutely multiplicative subset family of many <b>sorted</b> sets. Analogously, closure operator is function between many <b>sorted</b> sets and in [11] is many <b>sorted</b> function from a many <b>sorted</b> set into a many <b>sorted</b> set...|$|R
5000|$|For example, in {{alphabetical}} <b>sorting</b> [...] "z11" [...] would be <b>sorted</b> before [...] "z2" [...] because [...] "1" [...] is <b>sorted</b> as smaller than [...] "2", while in natural <b>sorting</b> [...] "z2" [...] is <b>sorted</b> before [...] "z11" [...] because [...] "2" [...] is <b>sorted</b> as smaller than [...] "11".|$|R
5|$|Date: {{period and}} year; The column entries <b>sort</b> by year. If only a period is known, they <b>sort</b> by the start year of that period.|$|E
5|$|Gatiss: He regards Milverton as a <b>sort</b> of plague, {{something}} that should be eradicated.|$|E
5|$|Horses have an {{advanced}} sense of taste, which {{allows them to}} <b>sort</b> through fodder and choose what they would most like to eat, and their prehensile lips can easily <b>sort</b> even small grains. Horses generally will not eat poisonous plants, however, there are exceptions; horses will occasionally eat toxic amounts of poisonous plants even when there is adequate healthy food.|$|E
60|$|Callicoes, divers <b>Sorts.</b> Hollands, {{and several}} <b>sorts</b> of Sheeting Linnen. Several <b>sorts</b> of Diapers and Table-Cloths. Several <b>sorts</b> of Cambricks. Mantua Silks, and Grassets. Beryllan, and plain Callimanco. Tamie yard-wide. Men's dyed shammie Gloves. Women's Ditto, Lamb. Stitching Silk, Thread and Silk. Twist for Women. Silk and Ribbands. Double Thread Stockings. Men's white shammie Gloves. Silk Handkerchiefs, & other <b>sorts</b> of Handkerchiefs. Men's glaz'd Gloves, Topp'd. Men's Shoe-Buckles, Bath-metal. Masks for Women. Several <b>sorts</b> of Penknives. Plain metal Buttons for Men's Coats and Jackets. Ivory Case-Knives, and several <b>sorts</b> of Pocket-Knives. Dowlasses several <b>sorts.</b> Huckabags, and Russia Linnen. Oznaburghs. Several <b>sorts</b> of Looking Glasses. Garlicks and brown Holland. Bag-Holland Ditto. Several <b>sorts</b> of Druggets. Fine Kerseys. Superfine double-mill'd Drab. Broad-Cloths. London Shalloons. Fine and coarse Hats. Men and Women's English Shoes. Stockings, several <b>sorts,</b> for Men, Women and Children. Several <b>sorts</b> of Caps. Women's Bonnets. Several <b>sorts</b> of Horn and Ivory Combs. Gun-powder, Shot, and Flints. Bibles of several <b>sorts.</b> Testaments, Psalters and Primers. Large Paper Books, and small ones, with Pocket-Books, and other Stationary Ware. Several <b>sorts</b> of Checquer'd Linnen. Flannels and Duroys. Scots-Snuff.|$|R
500|$|Many integer <b>sorting</b> {{algorithms}} {{have been}} developed whose theoretical analysis shows them to behave better than comparison <b>sorting,</b> pigeonhole <b>sorting,</b> or radix <b>sorting</b> for large enough ...|$|R
40|$|This paper {{contains}} {{properties of}} many <b>sorted</b> functions between two many <b>sorted</b> sets. Other theorems describe trivial many <b>sorted</b> algebras. In {{the last section}} there are theorems about many <b>sorted</b> congruences, which are defined on many <b>sorted</b> algebras. I have also proved facts about natural epimorphis...|$|R
5|$|Integer sorting {{algorithms}} including pigeonhole <b>sort,</b> counting <b>sort,</b> and radix <b>sort</b> {{are widely}} used and practical. Other integer sorting algorithms with smaller worst-case time bounds are not believed to be practical for computer architectures with 64 or fewer bits per word. Many such algorithms are known, with performance depending {{on a combination of}} the number of items to be sorted, number of bits per key, and number of bits per word of the computer performing the sorting algorithm.|$|E
5|$|Left mouse {{click on}} the up/down arrows to <b>sort</b> the list by that column.|$|E
5|$|Material and technique: wood/bronze/..., lacquered/colored/...; The column entries <b>sort</b> by {{the main}} {{material}} (stone/clay/wood/lacquer/bronze).|$|E
50|$|There {{are three}} {{different}} types of word sorts: sound <b>sorts,</b> picture <b>sorts,</b> and word <b>sorts.</b>|$|R
5000|$|The {{semantics}} {{of priority}} queues naturally suggest a <b>sorting</b> method: insert {{all the elements}} to be <b>sorted</b> into a priority queue, and sequentially remove them; they will come out in <b>sorted</b> order. This is actually the procedure used by several <b>sorting</b> algorithms, once the layer of abstraction provided by the priority queue is removed. This <b>sorting</b> method {{is equivalent to the}} following <b>sorting</b> algorithms: ...|$|R
50|$|External <b>sorting</b> is a {{class of}} <b>sorting</b> {{algorithms}} that can handle massive amounts of data. External <b>sorting</b> is required when the data being <b>sorted</b> do not fit into the main memory of a computing device (usually RAM) and instead they must reside in the slower external memory, usually a hard disk drive. External <b>sorting</b> typically uses a hybrid sort-merge strategy. In the <b>sorting</b> phase, chunks of data {{small enough to fit}} in main memory are read, <b>sorted,</b> and written out to a temporary file. In the merge phase, the <b>sorted</b> subfiles are combined into a single larger file.|$|R
5|$|Pigeonhole <b>sort,</b> {{counting}} <b>sort,</b> radix <b>sort,</b> and Van Emde Boas tree sorting {{all work}} best when the key size is small; for large enough keys, they become slower than comparison sorting algorithms. However, when the key size or the word size is very large {{relative to the}} number of items (or equivalently when the number of items is small), it may again become possible to <b>sort</b> quickly, using different algorithms that take advantage of the parallelism inherent in the ability to perform arithmetic operations on large words.|$|E
5|$|COBOL-60 was {{replaced}} in 1961 by COBOL-61. This was then {{replaced by the}} COBOL-61 Extended specifications in 1963, which introduced the <b>sort</b> and report writer facilities.|$|E
5|$|Defender {{serves as}} a plot-point in both the novel Ready Player One and the podcast Rabbits. In both cases, the game {{serves as a}} <b>sort</b> of gateway, used to advance further in the plotline.|$|E
40|$|Sortingisafundamentaloperationindataprocessing. While {{the problem}} of <b>sorting</b> flat data records has been {{extensively}} studied, {{there is very little}} work on <b>sorting</b> hierarchical data such as XML documents. Existing hierarchy-aware <b>sorting</b> approaches for hierarchical dataare based on creating <b>sorted</b> subtrees as initial <b>sorted</b> runs and merging <b>sorted</b> subtrees to create the <b>sorted</b> output using either explicit pointers or absolute node key comparisons for merging subtrees. In this paper, we propose SliceSort, a novel, level-wise sortingtechniqueforhierarchical datathatavoidsthedrawbacks of subtree-based <b>sorting</b> techniques. Our experimental performance evaluation shows that SliceSort outperforms the state-of-art approach, HErMeS, by up to a factor of 27 %...|$|R
40|$|Internal <b>sorting</b> is {{a problem}} of finding the {{permutation}} from a list of numbers so that the applied permutation list is <b>sorted.</b> Many <b>sorting</b> algorithms make use of various techniques to accomplish the <b>sorting</b> task. Moreover distinct characteristics of a finite list are extensively studied to find the practical <b>sorting</b> algorithm. This paper exhibits the unknown characteristic called the successive difference that can be computed during the <b>sorting</b> process. This number uncovers the extreme value of the <b>sorted</b> list in the permutation space. The <b>sorted</b> list attains the minimum value for both ascending and descending <b>sorting.</b> Moreover, it can be shown that the minimum successive difference can be computed using the maximum and minimum...|$|R
40|$|Summary. This paper {{contains}} {{properties of}} many <b>sorted</b> functions between two many <b>sorted</b> sets. Other theorems describe trivial many <b>sorted</b> algebras. In {{the last section}} there are theorems about many <b>sorted</b> congruences, which are defined on many <b>sorted</b> algebras. I have also proved facts about natural epimorphism. MML Identifier:MSUALG_ 9...|$|R
5|$|Go's <b>sort</b> {{standard}} library package {{contains the}} functions Search, SearchInts, SearchFloat64s, and SearchStrings, which implement general binary search, {{as well as}} specific implementations for searching slices of integers, floating-point numbers, and strings, respectively.|$|E
5|$|Height: {{height in}} cm; The column entries <b>sort</b> by the largest height if an entry {{is a group}} of statues.|$|E
5|$|Hippolyte's son, Count Aimery de La Rochefoucauld {{continued}} {{to collect the}} souvenirs of his ancestors, turning the château into a <b>sort</b> of family museum. He redecorated the chapel and added stained glass windows.|$|E
5000|$|...way merging generalizes binary merging to an {{arbitrary}} number [...] of <b>sorted</b> input lists. Applications of -way merging arise in various <b>sorting</b> algorithms, including patience <b>sorting</b> and an external <b>sorting</b> algorithm that divides its input into [...] blocks that fit in memory, <b>sorts</b> these one by one, then merges these blocks.|$|R
40|$|In the world, {{blackberries}} {{have been}} introduced into production 250 years ago, and in Croatia 50 years ago. As the result of intensive selection work, today there are numerous <b>sorts</b> of blackberries without thorns (around 300 <b>sorts),</b> but among them the choice is rather limited. The growing of blackberries, both with and without thorns, is spread {{the most in the}} USA. It is can be easily understood since we know that the work on the selection of new <b>sorts</b> has been the most intensive precisely in the USA. It is interesting to mention that in the USA both <b>sorts</b> with and without thorns are represented, whereas in Europe mostly thornless <b>sorts</b> are grown. Nowadays in Europe mostly American <b>sorts</b> without thorns, and of upright growth, are grown. Large number of <b>sorts</b> of blackberries can be classified into four categories: <b>sorts</b> of upright growth, creeping <b>sorts,</b> <b>sorts</b> without thorns, and <b>sorts</b> with thorns. There are also evergreen <b>sorts,</b> but they are not numerous in quantity and thus have a secondary economic importance. Among large number of <b>sorts</b> these <b>sorts</b> are of big economical importance for growing: Wilson’s wound, Black Satin, Thorenfree, Smoothstem, Thornles Evergreen, Thornless Logan, Darow, Bailey, Ebony King, Eldorado, Boysen, Himalaya. By their biological and economic characteristics some of the <b>sorts</b> reviewed in this article particularly stand out...|$|R
50|$|Optical <b>sorting</b> (sometimes called digital <b>sorting)</b> is the {{automated}} process of <b>sorting</b> solid products using cameras and/or lasers.|$|R
5|$|In 1996 Babangida {{acted in}} a {{commercial}} add for ABN-AMRO in which he points out his hesitations about a contract of some <b>sort.</b>|$|E
5|$|Noriko Nakagawa – A quiet, {{reserved}} {{girl who}} teams up with Nanahara {{from the beginning}} and becomes a <b>sort</b> of love interest. She is shot in the leg by a soldier before the Program starts.|$|E
5|$|Porpoises are {{not thought}} {{to have a good}} sense of taste, as their taste buds are atrophied or missing altogether. However, some have {{preferences}} between different kinds of fish, indicating some <b>sort</b> of attachment to taste.|$|E
40|$|Abstract: <b>Sorting</b> {{is one of}} {{the most}} {{well-known}} problems in computer science and is frequently used for benchmarking computer systems. It can contribute significantly to the overall execution time of a process in a computer system. Dedicated <b>sorting</b> architectures can be used to accelerate applications and/or to reduce energy consumption. In this paper, we propose an efficient <b>sorting</b> network aiming at accelerating the <b>sorting</b> operation in FPGA-based embedded systems. The proposed <b>sorting</b> network is implemented based on an Optimized Odd-even <b>sorting</b> method (O 2) using fully pipelined combinational logic architecture and ring shape processing. Consequently, O 2 generates the <b>sorted</b> array of numbers in parallel when the input array of numbers is given, without any delay or lag. Unlike conventional <b>sorting</b> networks, O 2 <b>sorting</b> network does not need memory to hold data and information about <b>sorting,</b> and neither need input clock to perform the <b>sorting</b> operations sequentially. We conclude that by using O 2 in FPGA-based image processing, we can optimize the performance of filters such as median filter which demands high performance <b>sorting</b> operations for realtime applications...|$|R
5000|$|... finally, another [...] {{operation}} unwraps {{the values}} (from the anonymous array) {{used for the}} <b>sorting,</b> producing the items of the original list in the <b>sorted</b> order (<b>sorted</b> list of value ⇒ <b>sorted</b> list of item).|$|R
40|$|The trans-Golgi network (TGN) is an {{important}} cargo <b>sorting</b> station within the cell where newly synthesized proteins are packaged into distinct transport carriers that are targeted to various destinations. To maintain the fidelity of protein transport, elaborate protein <b>sorting</b> machinery is employed to mediate <b>sorting</b> of specific cargo proteins into distinct transport carriers. Protein <b>sorting</b> requires assembly of the cytosolic <b>sorting</b> machinery onto the TGN membrane and capture of cargo proteins. We review the cytosolic and transmembrane <b>sorting</b> machinery that function at the TGN and describe molecular interactions and regulatory mechanisms that enable accurate protein <b>sorting.</b> In addition, we highlight the importance of TGN <b>sorting</b> in physiology and disease...|$|R
