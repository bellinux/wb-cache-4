4268|1845|Public
5|$|Sutner {{defines a}} {{directed}} graph (a type of de Bruijn graph) {{in which each}} vertex represents a pair of assignments of states for the cells in a contiguous sequence of cells. The length of this sequence is chosen to be one less than the neighborhood size of the automaton. An edge in Sutner's graph represents a pair of sequences of cells that overlap {{in all but one}} cell, so that the union of the sequences is a full neighborhood in the cellular automaton. Each such edge is directed from the overlapping <b>subsequence</b> on the left to the <b>subsequence</b> on the right. Edges are only included in the graph when they represent compatible state assignments on the overlapping parts of their cell sequences, and when the automaton rule (applied to the neighborhood determined by the potential edge) would give the same results for both assignments of states. By performing a linear-time strong connectivity analysis of this graph, it is possible to determine which of its vertices belong to cycles. The transition rule is non-injective if and only if this graph contains a directed cycle in which at least one vertex has two differing state assignments.|$|E
5|$|There are no nontrivial {{reversible}} elementary cellular automata. However, a near-miss {{is provided}} by Rule 90 and other elementary cellular automata based on the exclusive or function. In Rule 90, the state of each cell is the exclusive or of the previous states of its two neighbors. This use of the exclusive or makes the transition rule locally invertible, {{in the sense that}} any contiguous <b>subsequence</b> of states can be generated by this rule. Rule 90 is not a reversible cellular automaton rule, because in Rule 90 every assignment of states to the complete array of cells has exactly four possible predecessors, whereas reversible rules are required to have exactly one predecessor per configuration.|$|E
25|$|Instructions were {{implemented}} {{in groups of}} 12 steps, called timing pulses. The timing pulses were named TP1 through TP12. Each set of 12 timing pulses was called an instruction <b>subsequence.</b> Simple instructions, such as TC, executed in a single <b>subsequence</b> of 12 pulses. More complex instructions required several subsequences. The multiply instruction (MP) used 8 subsequences: an initial one called MP0, followed by an MP1 <b>subsequence</b> which was repeated 6 times, and then terminated by an MP3 <b>subsequence.</b> This was reduced to 3 subsequences in Block II.|$|E
30|$|False alarms are removed: if motion {{characteristics}} of successive <b>subsequences</b> are similar, those <b>subsequences</b> are merged {{and the change}} point between them is deleted.|$|R
40|$|Previous {{sequential}} pattern mining algorithms {{mine the}} {{full set of}} frequent <b>subsequences</b> satisfying a rain_sup threshold in a sequence database. However, since a frequent long sequence contains a combinatorial number of frequent <b>subsequences,</b> such mining will generate an explosive number of frequent <b>subsequences</b> for long patterns, which is prohibitively expensive in both time and space...|$|R
50|$|Every Fibonacci cube has a Hamiltonian path. More specifically, {{there exists}} a path that obeys the {{partition}} described above: it visits the nodes with first bit 0 and the nodes with first bit 1 in two contiguous <b>subsequences.</b> Within these two <b>subsequences,</b> the path can be constructed recursively by the same rule, linking the two <b>subsequences</b> {{at the ends of}} the <b>subsequences</b> at which the second bit is 0. Thus, e.g., in the Fibonacci cube of order 4, the sequence constructed in this way is (0100-0101-0001-0000-0010)-(1010-1000-1001), where the parentheses demark the <b>subsequences</b> within the two subgraphs of the partition. Fibonacci cubes with an even number of nodes greater than two have a Hamiltonian cycle.|$|R
25|$|The {{operation}} of diff {{is based on}} solving the longest common <b>subsequence</b> problem.|$|E
25|$|Ascoli's theorem: every bounded equicontinuous {{sequence}} of real functions {{on the unit}} interval has a uniformly convergent <b>subsequence.</b>|$|E
25|$|For example, the {{permutation}} 2453167 has the ascending runs 245, 3, and 167, {{while it}} has an increasing <b>subsequence</b> 2367.|$|E
40|$|Current DNA {{compression}} algorithms rely {{on finding}} repetitions within the DNA sequence so that similar <b>subsequences</b> can be encoded by referencing to each other. We explore similarities between different chromosomes {{of the sequence}} 'Saccharomyces cerevisiae'. These similarities are characterised by the existence of similar <b>subsequences</b> among different chromosomes. The longer the similar <b>subsequences</b> are, the higher the cross-similarities are. Our study indicates that these cross-sequence similarities are often significant as compared to self-sequence similarity. This implies {{that it would be}} advantageous to compress two or more chromosome sequences together so that similar <b>subsequences</b> found between multiple chromosome sequences can be encoded together.; Current DNA compression algorithms rely on finding repetitions within the DNA sequence so that similar <b>subsequences</b> can be encoded by referencing to each other. We explore similarities between different chromosomes of the sequence 'Saccharomyces cerevisiae'. These similarities are characterised by the existence of similar <b>subsequences</b> among different chromosomes. The longer the similar <b>subsequences</b> are, the higher the cross-similarities are. Our study indicates that these cross-sequence similarities are often significant as compared to self-sequence similarity. This implies that it would be advantageous to compress two or more chromosome sequences together so that similar <b>subsequences</b> found between multiple chromosome sequences can be encoded together. Department of Electronic and Information Engineerin...|$|R
40|$|Let be a {{sequence}} of i. i. d. valued random variables with distribution function F. Let. When F belongs to the domain of normal attraction of a Stable law, the law of iterated logarithm has been obtained for <b>subsequences</b> of (Sn) and extended to random <b>subsequences.</b> Law of iterated logarithm <b>Subsequences</b> Stable law Domain of normal attraction Random sums...|$|R
40|$|Abstract. Pattern {{discovery}} {{is used for}} determining, in a blind way, <b>subsequences</b> characterizing a given sequence or set of sequences. It is ap-plied in genome and proteome analysis for discovering interesting biose-quences which are usually very short {{when compared to the}} length of the analyzed sequence. Abstraction of <b>subsequences,</b> that is grouping similar <b>subsequences</b> and representing them in a compact way as patterns, seems particularly useful in the field of pattern discovery in order to stress sim-ilarities among interesting <b>subsequences.</b> In this paper we propose a set of techniques for pattern discovery which makes use of abstraction. We define a data structure, the k-trie, which is an enriched and truncated suffix trie, for collecting and counting <b>subsequences</b> of length at most k. We propose an on-line algorithm for building a k-trie in linear time. We associate the chi-square score to the <b>subsequences</b> represented in the tree in order to estimate their ”interest”. By analyzing the properties of the score w. r. t. symbol concatenation and string abstraction, we derive a method for collecting the most interesting <b>subsequences</b> in an automatic way. Besides, we abstract a set of <b>subsequences</b> of the same length into a set of rigid patterns. Such abstraction may be represented by a tree corresponding to the prefix automaton associated to the set of patterns. We propose to use such trees for concisely representing the most inter-esting <b>subsequences,</b> for searching patterns and for comparing biological sequences...|$|R
25|$|Cofinality can be {{similarly}} defined for a directed set {{and is used}} {{to generalize}} {{the notion of a}} <b>subsequence</b> in a net.|$|E
25|$|In any metric space, a Cauchy {{sequence}} {{which has}} a convergent <b>subsequence</b> with limit s is itself convergent (with the same limit), since, given any real number r > 0, beyond some fixed point in the original sequence, every term of the <b>subsequence</b> is within distance r/2 of s, and any two terms of the original sequence are within distance r/2 of each other, so every term of the original sequence is within distance r of s.|$|E
25|$|An {{ascending}} run of a permutation is a nonempty increasing contiguous <b>subsequence</b> of the permutation that {{cannot be}} extended at either end; it {{corresponds to a}} maximal sequence of successive ascents (the latter may be empty: between two successive descents there is still an ascending run of length1). By contrast an increasing <b>subsequence</b> of a permutation is not necessarily contiguous: it is an increasing sequence of elements obtained from the permutation by omitting the values at some positions.|$|E
40|$|Almost-convergence {{of double}} {{sequences}} (<b>subsequences)</b> {{is equivalent to}} almost Cauchy condition. If the set of all almost convergent <b>subsequences</b> of a sequence S = Snm is of the second category, then S is convergent in the simple sense. For the sequence S = Snm which almost converges to L, Lebesgue measure of the set of all its <b>subsequences</b> which almost converge to L is either 1 or 0...|$|R
40|$|Motivated by {{the study}} of {{deletion}} channels, this work presents improved bounds {{on the number of}} <b>subsequences</b> obtained from a binary sting X of length n under t deletions. It is known that the number of <b>subsequences</b> in this setting strongly depends on the number of runs in the string X; where a run is a maximal sequence of the same character. Our improved bounds are obtained by a structural analysis of the family of r-run strings X, an analysis in which we identify the extremal strings with respect to the number of <b>subsequences.</b> Specifically, for every r, we present r-run strings with the minimum (respectively maximum) number of <b>subsequences</b> under any t deletions; and perform an exact analysis of the number of <b>subsequences</b> of these extremal strings. Comment: 9 pages, 4 figures, a short version submitted to ISIT 201...|$|R
40|$|AbstractWe exhibit {{sequences}} ofnpoints inddimensions with no long monotone <b>subsequences,</b> {{by which}} we mean when projected in a general direction, our sequence has no monotone <b>subsequences</b> of lengthn+dor more. Previous work proved that this function ofnwould lie betweennand 2 n; this paper establishes that the coefficient ofnis one. This resolves {{the question of how}} the Erdo&#x 030 B;s–Szekeres result that a (one-dimensional) sequence has monotone <b>subsequences</b> of at mostngeneralizes to higher dimensions...|$|R
25|$|Each entry {{contains}} the leading {{terms of the}} sequence, keywords, mathematical motivations, literature links, and more, including the option to generate a graph or play a musical representation of the sequence. The database is searchable by keyword and by <b>subsequence.</b>|$|E
25|$|The {{sequence}} {Τn} {{may produce}} {{no more than}} a finite number of zero denominators B'i. while the <b>subsequence</b> of finite convergents dances wildly around the plane in a pattern that never repeats itself and never approaches any finite limit, either.|$|E
25|$|Each timing {{pulse in}} a <b>subsequence</b> could trigger up to 5 control pulses. The control pulses were the signals which did the actual {{work of the}} instruction, such as reading the {{contents}} of a register onto the bus, or writing data from the bus into a register.|$|E
5000|$|The {{following}} {{bottom-up approach}} [...] computes, for each 2 ≤ k ≤ n, the minimum costs of all <b>subsequences</b> of length k, using {{the costs of}} smaller <b>subsequences</b> already computed.It has the same asymptotic runtime and requires no recursion.|$|R
40|$|Abstract—Time series {{have become}} an {{important}} class of temporal data objects in our daily life while clustering analysis is an effective tool {{in the fields of}} data mining. However, the validity of clustering time series <b>subsequences</b> has been thrown into doubts recently by Keogh et al. In this work, we review this problem and propose the phase shift weighted spherical k-means algorithm (PS-WSKM in abbreviation) for clustering unsynchronized time series. In PS-WSKM, the phase shift procedure is introduced into the clustering process so that the phase problem is solved effectively. Meanwhile, the <b>subsequences</b> weights are assigned to <b>subsequences</b> to make the algorithm more robust. Experimental results on ECG datasets show that our approach is effective for the problem of unsynchronized time series <b>subsequences</b> clustering, which makes contributions {{to a wide range of}} applications, particularly in intelligent healthcare. Index Terms—time series clustering, unsynchronized time series <b>subsequences,</b> phase shift weighted spherical k-means algorithm I...|$|R
40|$|We {{find the}} numbers of <b>subsequences</b> of { 1, 2, [...] ., n) in which every odd member is {{accompanied}} {{by at least one}} even neighbor. For example, 123568 is acceptable, but 123578 is not, since 5 has no even neighbor. The empty sequence is always acceptable. Preliminary calculations for 0 < n < 8 yield the following values of zn c, the number of such <b>subsequences</b> of length c. It is convenient to define znc = 0 if c is not in the interval 0 < c < n and zn = Z"= 0 z„,c ls t i e total number of such <b>subsequences.</b> x „ and x^c are the corresponding numbers of <b>subsequences</b> from which n is excluded, whereas n does occur in the <b>subsequences</b> counted by yn mdync. Of course, xn + yn- zn with similar formulas for specific lengths. The following tables suggest several simple relations, which are easily verified by considering {{the last two or three}} members of the relevant subsequences: X n+l...|$|R
25|$|Interrupts {{could be}} {{triggered}} when the counters overflowed. The T3rupt and Dsrupt interrupts were produced when their counters, {{driven by a}} 100Hz hardware clock, overflowed after executing many Pinc subsequences. The Uprupt interrupt was triggered after its counter, executing the Shinc <b>subsequence,</b> had shifted 16bits of uplink data into the AGC.|$|E
25|$|A metric space M is compact {{if every}} {{sequence}} in M has a <b>subsequence</b> that converges {{to a point}} in M. This is known as sequential compactness and, in metric spaces (but not in general topological spaces), {{is equivalent to the}} topological notions of countable compactness and compactness defined via open covers.|$|E
25|$|A related problem, {{discussed}} by , is to list all k-digit sexagesimal numbers in ascending order, {{as was done}} (for k=6) by Inakibit-Anu, the Seleucid-era scribe of tablet AO6456. In algorithmic terms, this is equivalent to generating (in order) the <b>subsequence</b> of the infinite sequence of regular numbers, ranging from 60k to 60k+1.|$|E
5000|$|Repeat-related problems: {{that deal}} with {{operations}} on single sequences and can be based on exact string matching or approximate string matching methods for finding dispersed fixed length and maximal length repeats, finding tandem repeats, and finding unique <b>subsequences</b> and missing (un-spelled) <b>subsequences.</b>|$|R
3000|$|Best-so-far values {{obtained}} by ISPRING {{are less than}} or equal to those done by ESUCR-DTW, yet ISPRING often returns best-so-far <b>subsequences</b> whose lengths are unreasonable. This means that many similar <b>subsequences</b> {{obtained by}} ISPRING are too short in comparison to the lengths of the patterns.|$|R
40|$|BpMatch {{is a new}} {{algorithm}} whose {{function is}} to efficiently calculate, from sequences S and T, the maximum coverage of T using only <b>subsequences</b> and complemented reversed <b>subsequences</b> of S, with minimum length l, possibly overlapped, and, in such a maximum coverage, to minimize the number of <b>subsequences</b> used. The problem is solved by executing a preelaboration of S (independently from the sequence on which a maximum coverage will be later looked for, and therefore executed only once for any target sequence T), generating a graph which allows a fast recognizing of S's <b>subsequences.</b> Graphs G and G' must be generated from S and complemented reversed S, then, using G, G' and T, calculus of the maximum coverage can be computed in linear space and time...|$|R
25|$|The AGC {{also had}} 20 {{involuntary}} counters. These were memory locations which functioned as up/down counters, or shift registers. The counters would increment, decrement, or shift {{in response to}} internal inputs. The increment (Pinc), decrement (Minc), or shift (Shinc) was handled by one <b>subsequence</b> of microinstructions inserted between any two regular instructions.|$|E
25|$|While HMMER2 {{could perform}} glocal {{alignment}} (align a complete model to a <b>subsequence</b> of the target) and global alignment (align a complete model {{to a complete}} target sequence) {{as well as local}} alignment, HMMER3 only performs local alignment. This restriction is due to the difficulty in calculating the significance of hits when performing glocal/global alignments using the new algorithm.|$|E
25|$|The {{second of}} these two {{properties}} is equivalent to requiring that the subsets containing any particular vertex form a contiguous <b>subsequence</b> of the whole sequence. In {{the language of the}} later papers in Robertson and Seymour's graph minor series, a path-decomposition is a tree decomposition (X,T) in which the underlying tree T of the decomposition is a path graph.|$|E
40|$|Connections between longest {{increasing}} <b>subsequences</b> {{in random}} permutations and eigenvalues of random matrices with complex entries have been intensely studied. This note applies properties of random {{elements of the}} finite general linear group to obtain results about the longest increasing and decreasing <b>subsequences</b> in non-uniform random permutations. ...|$|R
5000|$|... #Subtitle level 2: Connection to longest {{increasing}} <b>subsequences</b> ...|$|R
40|$|Representation of amino-acid {{sequences}} {{constitutes the}} key point in classification of proteins into functional or structural classes. The representation should contain the biologically meaningful information hidden in the primary sequence of the protein. Conserved or similar <b>subsequences</b> are strong indicators of functional and structural similarity. In this study we present a feature mapping {{that takes into account}} the models of the <b>subsequences</b> of protein sequences. An expectation-maximization algorithm along with an HMM mixture model is used to cluster and learn the models of <b>subsequences</b> of a given set of proteins. © 2006 IEEE...|$|R
