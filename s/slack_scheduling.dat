5|57|Public
40|$|A {{real-time}} implementation for allocating slack to aperiodic {{processes in}} MetaH [4] is nearing completion. The <b>slack</b> <b>scheduling</b> algorithm used {{is based on}} the slack stealer originally proposed in [2] with practical extensions to allow for support of process criticalities, multiple process streams (of different criticalities) competing for pooled slack and inclusion of run-time overheads in the slack functions. Areas in need of future work are also identified...|$|E
40|$|Power-aware {{scheduling}} {{methods are}} a promising method {{to exploit the}} voltage and frequency scaling features of modern processors. We have devised a novel dynamic voltage scaling (DVS) scheme under earliest-deadline rst (EDF) preemptive scheduling for hard real-time systems. This paper goes beyond our previous results [5] and makes the following contributions. First, we present the details of <b>slack</b> <b>scheduling</b> and address the challenges of preemption handling in DVS scheduling. Second, we present new results of our DVS scheme that demonstrate the scalability of our approach for task sets of dierent sizes. The results demonstrate that our DVS scheduling scheme provides up to 37 % additional savings of the best published prior work with low runtime complexity and it scales for varying number of tasks...|$|E
40|$|In this paper, {{we propose}} an {{integrated}} approach for register-sensitive software pipelining. In this approach, the heuristics {{proposed in the}} stage scheduling method of Eichenberger and Davidson [4] are integrated with the iterative scheduling method to obtain schedules with high initiation rate and low register requirements. The performance of our integrated software pipelining method was analyzed for {{a large number of}} loops taken from a variety of scientific benchmark programs. Our studies reveal that the stage scheduling heuristics facilitate better performance benefits when applied at the scheduling time, resulting in significant performance improvement over both the stage scheduling method and the <b>slack</b> <b>scheduling</b> method. 1 Introduction Modulo scheduling or software pipelining is an aggressive instruction scheduling technique for loops. In modulo scheduling, instructions from successive iterations of the loop are initiated at a constant interval, known as the initiation interval [...] ...|$|E
50|$|Earliest {{deadline}} first <b>scheduling</b> and Least <b>slack</b> time <b>scheduling</b> {{are examples}} of Dynamic priority scheduling algorithms.|$|R
40|$|Contemporary {{computer}} systems often mix real-time and non real-time (best effort) work, {{due to the}} increasing range of applications. Contemporary scheduling algorithms {{in such an environment}} may use earliest deadline first <b>scheduling</b> along with <b>slack</b> time <b>scheduling.</b> This paper describes some additions made to the BACKSLASH <b>slack</b> time <b>scheduling</b> algorithm. It introduces the idea of early release of work under certain circumstances. The paper also introduces a refined measure of the deadline attainment performance of tasks in such a system. Finally, we address a problem in which tasks that dramatically under book their actual processor needs can produce the effect of a denial of service attack on the other tasks in the system. Page 2 1...|$|R
40|$|The {{growing trend}} towards {{ubiquitous}} computing at handheld devices {{has brought the}} battery life time issue to the forefront. Scaling down the integrated circuit geometry {{has given rise to}} other issues e. g., leakage current and dynamic energy. Systems are software running on hardware; software directs the hardware components and is major contributor to the energy consumption. In this paper, we present compiler directed technique that take advantage of optimization <b>slacks,</b> <b>scheduling</b> <b>slacks</b> and linker slacks to optimize the dynamic energy consumption. Our framework is implemented in two phase. In first phase, profile of software application as well as underlying hardware is captured, followed by the code transformation in second phase. The optimization search engine is powered by genetic algorithm. We present results for 10 widely used multimedia applications, and analyze their behavior for parallelism, live CPU register usage, anticipated scheduling, CPU bus activity, processing units utilization and binary code size. Finally impact of these factors are studied on objective functions e. g., speedup, energy saving etc [...] . Our result show that a unified scheme optimizes embedded source code better than the conventional multiphase approaches in VLIW processors. Keywords...|$|R
40|$|Instruction {{scheduling}} methods {{based on}} the construction of state diagrams (or automata) have been used for architectures involving deeply pipelined function units. However, the size of the state diagram is prohibitively large, resulting in high execution time and space requirement. In this paper, we present a simple method for reducing the size of the state diagram by recognizing unique paths of a state diagram. Our experiments show that the number of paths in the reduced state diagram is significantly lower — by 1 to 3 orders of magnitude — compared to the number of paths in the original state diagram. Using the reduced MS-state diagrams, we develop an efficient software pipelining method. The proposed software pipelining algorithm produced efficient schedules and performed better than Huff’s <b>Slack</b> <b>Scheduling</b> method, and the original Co-scheduling method, in terms of both the initiation interval (II) and the time taken to construct the schedule. ...|$|E
40|$|Software {{pipelining}} methods {{based on}} an ILP (integer linear programming) framework have been successfully applied to derive rate-optimal schedules under resource constraints. However, like many other previous works on software pipelining, ILP-based work has focused on resource constraints of simple function units, e. g., "clean pipelines"-pipelines without structural hazards. The problem for architectures beyond such clean pipelines remains open. One challenge is how to represent such resource constraints for unclean pipelines, i. e., pipelined function units, but having structural hazards. In this paper, we propose a method to construct rate-optimal software pipelined schedules for pipelined architectures with structural hazards. A distinct feature of this work is that it provides a unified ILP framework for two challenging and interrelated aspects of software pipelining [...] the scheduling of instructions at particular times and the mapping of those instructions to specific function units. Solving both of these aspects is essential to finding schedules which will work both on VLIW machines which map instructions to fixed function units and on dynamic out-of-order superscalars. We propose two ILP formulations to solve the integrated scheduling and mapping problem. Both adopt principles of graph coloring in an ILP framework, and one uses forbidden latencies in an elegant extension of classical hardware pipeline control theory. We have run experiments on four variations of our proposed formulations. As input we used a set of 415 "unique" loops taken from several benchmark suites, and we targeted an architecture whose function units contain many structural hazards. All four of our variations did well, with the best finding a rate-optimal schedule for 65 % of the loops. This compares favorably with a leading heuristic, Huff's <b>Slack</b> <b>Scheduling</b> [...] the ILP approaches found a schedule with smaller initiation interval for over 50 % of the loops, with a mean improvement of almost 30 %. Finally, {{we have found that}} reusing pipeline stages [...] and thus adding hazards results in only a 10 % drop in performance, while permitting significant savings in area...|$|E
40|$|In {{this paper}} we discuss the {{algorithmic}} aspects of uncertainty driven scheduling which is a new design paradigm. Slack oriented design flow {{could be used to}} address the uncertainty problem in high level synthesis. We formalize the concept of slack and discuss different variations of the <b>slack</b> driven <b>scheduling</b> problem...|$|R
40|$|We {{present an}} {{algorithm}} called MOVER (Multiple Operating Voltage Energy Reduction) to minimize datapath energy dissipation {{through use of}} multiple supply voltages. In a single voltage design, the critical path length, clock period, and number of control steps limit minimization of voltage and power. Multiple supply voltages permit localized voltage reductions to take up remaining <b>schedule</b> <b>slack.</b> MOVER initially finds one minimum voltage for an entire datapath. It then determines a second voltage for operations where there is still <b>schedule</b> <b>slack.</b> New voltages can be introduced and minimized until no <b>schedule</b> <b>slack</b> remains. MOVER was exercised {{for a variety of}} DSP datapath examples. Energy savings of up to 50 % were observed when comparing dual to single voltage results. The benefit of going from two to three voltages never exceeded 15 %. Circuit resource requirements for multiple voltages varied greatly. In some cases requirements changed very little with respect to number of voltages, b [...] ...|$|R
40|$|Bus {{schedules}} {{cannot be}} easily maintained on busy lines with short headways: Experience shows that buses offering {{this type of}} service usually arrive irregularly at their stops, often in bunches. Although transit agencies build <b>slack</b> into their <b>schedules</b> to alleviate this problem, their attempts often fail because practical amounts of slack cannot prevent large localized disruptions from spreading system-wide. This paper describes a more resilient control scheme that overcomes this problem. The method also produces even headways with less slack than the conventional approach. Thus, buses can run faster and be more productive. ...|$|R
40|$|The {{use of a}} dual-level {{structure}} in managing the use of resources in a multi-project environment involves 2 sets of decisions. Resource allocation decisions, usually controlled by a central authority, determine the allocation of resources among projects such that resources are allocated to the critical projects. Once assigned to a project, the resources are managed by an independent project manager who schedules the activities within his project using only the resources assigned to him. Analysis is presented of the relative performance of 4 resource allocation priority rules and 6 resource transfer rules in conjunction with 2 activity scheduling rules. The {{results show that the}} first in system first served resource allocation priority rule dominates over the other 3 proposed resource allocation priority rules with the lowest project tardiness, flowtime, and lateness standard deviation. The minimum late finish activity scheduling rule is shown to perform better than the minimum <b>slack</b> activity <b>scheduling</b> rule...|$|R
40|$|Increasing power {{consumption}} in high performance processors and {{the proliferation of}} embedded systems demand new compiler techniques geared toward both high performance and low power. Software pipelining, an effective compiler optimization to exploit instruction level parallelism across loop iterations, has been studied extensively. However, previous software pipelining methods focus on performance only. This paper presents a software pipelining method that reduces {{power consumption}} while keeping performance optimality. This is accomplished as <b>schedule</b> <b>slacks</b> exist for non-critical instructions even in performance optimal schedules, and by exploiting the slack appropriately, {{it may be possible to}} reduce the number of functional units used in the schedule...|$|R
40|$|This paper {{presents}} an optimal procrastinating voltage scheduling (OP-DVS) for hard real-time systems using stochastic workload information. Algorithms are presented for both single-task and multi-task workloads. Offline calculations provide real-time guarantees for worst-case execution, and online <b>scheduling</b> reclaims <b>slack</b> time and <b>schedules</b> tasks accordingly. The OP-DVS algorithm is provably optimal {{in terms of}} energy minimization with no deadline misses. Simulation results show up to 30 % energy savings for single-task workloads and 74 % for multi-task workloads compared to using a constant worst-case execution voltage. The complexity of the algorithm for multi-task workloads is linear {{to the number of}} tasks involved...|$|R
40|$|This paper {{presents}} Clockwise, a mixed-media file system. The {{primary goal}} of Clockwise {{is to provide a}} storage architecture that supports the storage and retrieval of best-effort and real-time file system data. Clockwise provides an abstraction called a dynamic partition that groups lists of related (large) blocks on one or more disks. Dynamic partitions can grow and shrink in size and reading or writing of dynamic partitions can be scheduled explicitly. With respect to scheduling, Clockwise uses a novel strategy to pre-calculate <b>schedule</b> <b>slack</b> time and it schedules best-effort requests before queued real-time requests in this slack tim...|$|R
50|$|Least <b>slack</b> time (LST) <b>{{scheduling}}</b> is a scheduling algorithm. It assigns priority {{based on}} the slack time of a process. Slack time {{is the amount of}} time left after a job if the job was started now. This algorithm is also known as least laxity first. Its most common use is in embedded systems, especially those with multiple processors. It imposes the simple constraint that each process on each available processor possesses the same run time, and that individual processes do not have an affinity to a certain processor. This is what lends it a suitability to embedded systems.|$|R
40|$|Power aware {{computing}} {{has become}} popular recently and many techniques {{have been proposed}} to manage the energy consumption for traditional real-time applications. We have previously proposed two greedy <b>slack</b> sharing <b>scheduling</b> algorithms for such applications on multi-processor systems. In this paper, we are concerned mainly with real-time applications that have different execution paths consisting of different number of tasks. The AND/OR graph model is used to represent the application's data dependence and control flow. The contribution {{of this paper is}} twofold. First, we extend our greedy slack sharing algorithm for traditional applications to deal with applications represented by AND/OR graphs. Then, using the statistical information about the applications, we propose a few variations of speculative scheduling algorithms that intend to save energy by reducing the number of speed changes (and thus the overhead) while ensuring that the applications meet the timing constraints. The performance of the algorithms is analyzed with respect to energy savings. The results surprisingly show that the greedy scheme is better than some speculative schemes and that the greedy scheme is good enough when a reasonable minimal speed exists in the system. 1...|$|R
40|$|A {{major source}} of delays in public {{transportation}} is the clustering instability, which causes late buses to become progressively later while the buses trailing it become progressively earlier. In this paper, we study this instability and how to neutralize it using the common practices of holding and <b>schedule</b> <b>slack.</b> Starting with an on-time route, we delay one or more buses at a single stop, and determine how these delays grow over time. We compare the effects of {{two different types of}} holding on the stability of the system, and briefly investigate how our results change with the use of timepoints. Comment: 6 pages, 6 figures v 2 has been moderately copyedited, but has no new content Paper has been submitted to Physical Review...|$|R
40|$|We propose an intra-task voltage {{scheduling}} algorithm for lowenergy hard real-time applications. Based on {{a static}} timing analysis technique, the proposed algorithm controls the supply voltage within an individual task boundary. By fully exploiting all the <b>slack</b> times, a <b>scheduled</b> program by the proposed algorithm always complete its execution near the deadline, thus achieving a high energy reduction ratio. In order {{to validate the}} effectiveness of the proposed algorithm, we built a software tool that automatically converts a DVS-unaware program into an equivalent low-energy program. Experimental results show that the low-energy version of an MPEG- 4 encoder/decoder (converted by the software tool) consumes less than 7 � 25 % of the original program running on a fixed-voltage system with a power-down mode. 1...|$|R
40|$|We {{present a}} scheme to {{guarantee}} that the execu-tion of real-time tasks can tolerate transient and in-termittent faults assuming any queue- based scheduling technique. The scheme is based on reserving suficient <b>slack</b> in a <b>schedule</b> such that a task can be re-executed before its deadline without compromising guarantees given to other tasks. Only enough slack is reserved in the schedule to guarantee fault tolerance if at most one fault occurs within a time interval. This results in increased schedulability and a very low percentage of deadline misses even if no restriction {{is placed on the}} fault separation. We provide two algorithms {{to solve the problem of}} adding fault tolerance to a queue of real-time tasks. The first is a dynamic programming optimal solution and the second is a greedy heuristic which closely approzimates the optimal...|$|R
40|$|Bus {{schedules}} {{cannot be}} easily maintained on busy lines with short headways: Experience shows that buses offering {{this type of}} service usually arrive irregularly at their stops, often in bunches. Although transit agencies build <b>slack</b> into their <b>schedules</b> to alleviate this problem − if necessary holding buses at control points to stay on schedule − their attempts often fail because practical amounts of slack cannot prevent large localized disruptions from spreading system-wide. This paper describes an adaptive control scheme to mitigate this problem. The new scheme dynamically determines bus holding times at a route’s control points based on real-time headway information. The method requires less slack than the conventional, schedule-based approach to produce headways within a given tolerance. This allows buses to travel faster, reducing in-vehicle passenger delay and increasing bus productivity. 1...|$|R
40|$|Multivoltage {{scheduling}} (MVS) for datapaths {{offers the}} energy savings of voltage scaling on a per-operation basis with a voltage aware operator scheduling. This work investigates {{the effect of}} using multivoltage register file storage in operator graph scheduling for multivoltage datapaths, thus partitioning the variable storage space {{on the basis of}} operating voltages. Scheduling operations on multivoltage functional units lowers the energy-delay product by exploiting <b>slack</b> in the <b>schedule.</b> We find that using multivoltage partitioned register files do the same by exploiting the variable lifetimes in the schedule. In a resource constrained context, longer variable lifetimes provide the opportunity to store such variables in low voltage register files. A ZOLP formulation for the resource constrained MVS problem is presented along with energy-delay savings obtained from applying this formulation to image processing transform graphs. 1...|$|R
40|$|In this paper, we {{analyze the}} {{potential}} for delays to propagate in passenger airline networks. The motivation for this research {{is the need to}} better understand the relationship between the scheduling of aircraft and crew members, and the operational performance of such schedules. In particular, when carriers decide how to schedule these costly resources, the focus is primarily on achieving high levels of utilization. The resulting plans, however, often have little <b>slack,</b> limiting the <b>schedule’s</b> ability to absorb disruption; instead, initial flight delays may propagate to delay subsequent flights as well. Understanding the relationship between planned schedules and delay propagation is a requisite precursor to developing tools for building more robust airline plans. In this paper, we investigate this relationship using flight data provided by two major U. S. carriers, one traditional hub-and-spoke and one “low-fare ” carrier operating a predominantly point-to-point network. ...|$|R
40|$|The {{variable}} and intermittent nature of many {{renewable energy sources}} makes integrating them into the electric grid challenging and limits their penetration. The current grid requires expensive, largescale energy storage and peaker plants to match such supplies to conventional loads. We present an alternative solution, in which supply-following loads adjust their power consumption to match the available renewable energy supply. We show Internet data centers running batched, data analytic workloads are well suited to be such supply-following loads. They are large energy consumers, highly instrumented, agile, and contain much <b>scheduling</b> <b>slack</b> in their workloads. We explore the problem of scheduling the workload to align with the time-varying available wind power. Using simulations driven by real life batch workloads and wind power traces, we demonstrate that simple, supply-following job schedulers yield 40 - 60 % better renewable energy penetration than supply-oblivious schedulers. ...|$|R
40|$|This study {{proposes a}} slack-diversifying fuzzy-neural rule to improve job {{dispatching}} in a wafer fabrication factory. Several soft computing techniques, including fuzzy classification and {{artificial neural network}} prediction, have been applied in the proposed methodology. A highly effective fuzzy-neural approach is applied to estimate the remaining cycle time of a job. This research presents empirical evidence {{of the relationship between}} the estimation accuracy and the scheduling performance. Because dynamic maximization of the standard deviation of <b>schedule</b> <b>slack</b> has been shown to improve performance, this work applies such maximization to a slack-diversifying fuzzy-neural rule derived from a two-factor tailored nonlinear fluctuation smoothing rule for mean cycle time (2 f-TNFSMCT). The effectiveness of the proposed rule was checked with a simulated case, which provided evidence of the rule’s effectiveness. The findings in this research point to several directions that can be exploited in the future...|$|R
40|$|Recent {{years have}} seen the {{emergence}} of wireless sensor network systems that must support high data rate and realtime queries of physical environments. This paper proposes Real-Time Query Scheduling (RTQS), a novel approach to conflict-free transmission scheduling for real-time queries in wireless sensor networks. First, we {{show that there is}} an inherent trade-off between prioritization and throughput in conflict-free query scheduling. We then present three new real-time scheduling algorithms. The non-preemptive query scheduling algorithm achieves high throughput while introducing priority inversions. The preemptive query scheduling algorithm eliminates priority inversion at the cost of reduced throughput. The <b>slack</b> stealing query <b>scheduling</b> algorithm combines the benefits of preemptive and nonpreemptive scheduling by improving the throughput while meeting query deadlines. Furthermore, we provide schedulability analysis for each scheduling algorithm. The analysis and advantages of our scheduling algorithms are validated through NS 2 simulations. ...|$|R
40|$|Abstract- To {{minimize}} {{energy consumption}} by voltage scaling in design of heterogeneous real-time embedded systems, {{it is necessary}} to perfom two distinct tasks: task scheduling (TS) and voltage selection (VS). Techniques propased to date either are fast hut yield inetlicient results, or output efficient solutions after many slow iterations. As a core problem to solve in the inner Iwp of a system-level optimization cycle, it is critical that the algorithm he fast while producing high quality results. This paper presents a new technique called EvolutioMry Relative <b>Slack</b> Distribution Voltage <b>Scheduling</b> (ERSD-VS) that achieves both speed and etrciency. It addresses priority adjustment and slack distribution issues with low cost heuristics. Experimental results from running publicly available testhenches show up to 42 % energy saving compared to a published technique called EVEN-VS. It also shows up to 70 times speed improvement compared to an efficient technique called EE-GLSA. I...|$|R
40|$|The {{traditional}} {{focus of}} scheduling research is on finding schedules {{with a low}} implementation cost. However, in many real world scheduling applications finding a robust or flexible schedule is just as important. A robust schedule is a quality schedule expected to still be acceptable if something unforeseen happens, while a flexible schedule is a quality schedule expected {{to be easy to}} change. In this paper the robustness and flexibility of schedules produced by minimising di#erent robustness measures are investigated. One kind of robustness measure is the neighbourhood based robustness measure, in which the basic idea is to minimise the implementation costs of a set of schedules located around a centre schedule. For tardiness problems another way of improving robustness is to increase the <b>slack</b> of the <b>schedule</b> by minimising lateness instead of tardiness. The problems used in the experiments are maximum tardiness, summed tardiness and total flow time job shop problems...|$|R
40|$|To {{minimize}} {{energy consumption}} by voltage scaling in design of heterogeneous real-time embedded systems, {{it is necessary}} to perform two distinct tasks: task scheduling (TS) and voltage selection (VS). Techniques proposed to date either are fast but yield inefficient results, or output efficient solutions after many slow iterations. As a core problem to solve in the inner loop of a system-level optimization cycle, it is critical that the algorithm be fast while producing high quality results. This paper presents a new technique called Evolutionary Relative <b>Slack</b> Distribution Voltage <b>Scheduling</b> (ERSD-VS) that achieves both speed and efficiency. It addresses priority adjustment and slack distribution issues with low cost heuristics. Experimental results from running publicly available testbenches show up to 42 % energy saving compared to a published technique called EVEN-VS. It also shows up to 70 times speed improvement compared to an efficient technique called EE-GLSA...|$|R
40|$|The European Project MABE has {{investigated}} {{the application of}} a Holonic Manufacturing Execution System (HMES) to networked production. This HMES implements the PROSA reference architecture [1]. Intelligent products manage their production in cooperation with intelligent resources. These intelligent products generate swarms of lightweight smart objects that respectively explore for suitable routings and reserve capacity at the intelligent resources [2]. The system is a self-organizing design. The research results revealed that the HMES design scales, without much effort, from a single plant control toward the control of a manufacturing network. Moreover, the HMES design was able to handle the part flows for the heat and surface treatment. Additionally, MABE has triggered research on trust to enable the HMES to cope with networks comprising independent organizations. Its results target cooperation in semi-closed networks. The research allows using track records during subsequent interactions, for instance to decide about <b>slack</b> values in <b>schedules.</b> status: publishe...|$|R
30|$|Modulo {{instruction}} scheduling schemes are mainly heuristic-based as finding an optimal solution is proven an NP-complete problem. Basic common operations {{of this technique}} include computing a lower bound of the initiation interval (denoted MII) which depends on provided resources and dependencies. Next, starting from this MII value, search for a valid schedule respecting hardware and graph dependency constraints. If no valid schedule could be found, increase the II value by 1 and search for a feasible schedule again. This last process is repeated until a solution is found. Higher performance is achieved for lower II; increasing II will {{reduce the amount of}} used parallelism, however, this makes finding a valid schedule easier [32]. Main evoked techniques in the literature for modulo scheduling include iterative modulo scheduling (IMS) [19], which uses backtracking by scheduling and un-scheduling operations at different time slots searching for a better solution. <b>Slack</b> modulo <b>scheduling</b> [33] minimizes needed registers by reducing lifetimes of operands, using their <b>scheduling</b> freedom (or <b>slack).</b> Integrated register-sensitive iterative software pipelining (IRIS) [34] modifies the IMS technique to minimize register requirements. Swing modulo scheduling (SMS) [35, 36] does not use backtracking but orders graph nodes guarantying effective schedules with low register pressure. The modulo scheduling with integrated register spilling (MIRS) in [37] suggests to integrate the possibility of storing data temporally out to memory (using spill code) when a schedule aims to exceed the number of available registers in the processor.|$|R
40|$|A {{myriad of}} {{uncontrollable}} factors in airline operations makes delays and disruptions unavoidable. To limit complexity, most conventional scheduling models, however, ignore {{the occurrence of}} unplanned events during operations. This leads to schedules that are vulnerable to delays and disruptions. In this work, we propose a flight schedule adjustment model that strategically re-allocates existing <b>schedule</b> <b>slack</b> to achieve a more robust schedule. Using data from an international carrier, we evaluate the resulting schedules using various performance metrics, including delay propagation and passenger delays. The results show that minor schedule adjustments to the original schedule can significantly improve overall schedule performance. In addition to the modeling contribution, we provide managerial insights obtained through extensive computational experiments. Unlike earlier works on slack re-allocation that focus primarily on demonstrating {{the effectiveness of the}} methods, our paper is, to our knowledge, the first one that also addresses a fundamental question pertaining to how airline characteristics and operations influence the strategy for robust scheduling. Jeppesen (Firm...|$|R
40|$|A {{widely used}} {{heuristic}} for solving stochastic optimization problems {{is to use}} a deterministic rolling horizon procedure, which has been modified to handle uncertainty (e. g. buffer stocks, <b>schedule</b> <b>slack).</b> This approach has been criticized for its use of a deterministic approximation of a stochastic problem, which is the major motivation for stochastic programming. We recast this debate by identifying both deterministic and stochastic approaches as policies for solving a stochastic base model, which may be a simulator or the real world. Stochastic lookahead models (stochastic programming) require a range of approximations to keep the problem tractable. By contrast, so-called deterministic models are actually parametrically modified cost function approximations which use parametric adjustments to the objective function and/or the constraints. These parameters are then optimized in a stochastic base model which does not require making any of the types of simplifications required by stochastic programming. We formalize this strategy and describe a gradient-based stochastic search strategy to optimize the parameters...|$|R
40|$|Abstract — Designing low {{overhead}} {{mechanisms for}} improving soft error reliability {{will be a}} key requirement at future technologies. The slack of an instruction {{is the number of}} cycles it can be delayed without extending the execution time. We make the observation that while the slack cycles do not affect execution time, they add to the total number of program cycles vulnerable to soft errors. In this paper, we show that exploiting slack to reduce this component of vulnerable cycles, has significant potential to improve soft error reliability. We explore two different mechanisms for exploiting slack, which reduce reduce soft error rate by 34 - 42 %, at a performance overhead of only 6 - 10 %. We also demonstrate that while redundant execution incurs high performance overhead, these techniques can efficiently adapt to the amount of slack available in different programs to achieve reliability improvement with minimum performance overhead. Index Terms—Soft error, slack, delay and observe, static <b>scheduling</b> <b>slack</b> I...|$|R
40|$|Abstract—A {{real time}} {{distributed}} computing has heterogeneously networked computers {{to solve a}} single problem. So coordination of activities among computers is a complex task and deadlines make more complex. The performances depend on many factors such as traffic workloads, database system architecture, underlying processors, disks speeds, etc. Simulation study have been performed to analyze the performance under different transaction scheduling: different workloads, arrival rate, priority policies, altering slack factors and Preemptive Policy. The performance metric of the experiments is missed percent that is the percentage of transaction {{that the system is}} unable to complete. The throughput of the system is depends on the arrival rate of transaction. The performance can be enhanced with altering the slack factor value. Working on slack value for the transaction can helps to avoid some of transactions from killing or aborts. Under the Preemptive Policy, many extra executions of new transactions can be carried out. Keywords—Real distributed systems, <b>slack</b> factors, transaction <b>scheduling,</b> priority policies. I...|$|R
40|$|In {{this paper}} we present an {{approach}} to the scheduling and voltage scal-ing of low-power fault-tolerant hard real-time applications mapped on distributed heterogeneous embedded systems. Processes and messages are statically scheduled, and we use process re-execution for recovering from multiple transient faults. Addressing simultaneously energy and reliability is especially challenging because lowering the voltage to re-duce the energy consumption {{has been shown to}} exponentially increase the number of transient faults. In addition, time-redundancy based fault-tolerance techniques such as re-execution and dynamic voltage scaling-based low-power techniques are competing for the <b>slack</b> in the <b>schedules.</b> Our approach decides the voltage levels and start times of processes and the transmission times of messages, such that the tran-sient faults are tolerated, the timing constraints of the application are satisfied and the energy is minimized. We present a constraint logic pro-gramming-based approach which is able to find reliable and schedula-ble implementations within limited energy and hardware resources. The developed algorithms have been evaluated using extensive experiments. 1...|$|R
