0|17|Public
5000|$|A target.ref file, which {{describes}} board-specific {{information such as}} <b>switch</b> and <b>jumper</b> settings, interrupt levels, and offset bias.|$|R
50|$|A pull-up {{resistor}} {{may be used}} when interfacing logic gates to inputs. For example, an input signal may be pulled by a resistor, then a <b>switch</b> or <b>jumper</b> strap {{can be used to}} connect that input to ground. This can be used for configuration information, to select options or for troubleshooting of a device.|$|R
50|$|Similarly, PCBA shorts {{coverage}} in the past {{was defined as the}} number of accessible board nodes divided {{by the total number of}} board nodes. This node-oriented measure did not take into account how nodes may have many or few connection points to device pins, and how some of these could never (in practice) be shorted. Others that could be shorted were also not tested. For example, a small-value inductor, a closed <b>switch</b> or <b>jumper</b> or a small-value resistor could have a short across its terminals, but not be tested due to resolution problems with the impedance measurement.|$|R
5000|$|Some devices {{include two}} copies of firmware, one active and the other stored in fixed ROM or writable {{non-volatile}} memory and not normally accessible to processes that could corrupt it, {{as well as a}} way to copy the stored firmware over the active version, even if corrupt, so that if the active firmware is damaged, it can be replaced by the copy and the device will not be bricked. Other devices have minimal [...] "bootloader" [...] firmware, enabled usually by operating a <b>switch</b> or <b>jumper,</b> which does not enable the device to work normally but can reload the main firmware.|$|R
500|$|Internally, the Odyssey {{architecture}} {{is composed of}} digital computing parts. [...] The circuitry is implemented in diode–transistor logic using discrete transistors and diodes, rather than the newly emerging transistor–transistor logic integrated circuits, due to cost concerns. The games themselves do not use cartridges like later consoles, but instead use [...] "game cards" [...] composed of printed circuit boards that plug into the console. These cards modify the internal circuitry like a set of <b>switches</b> or <b>jumpers,</b> causing the Odyssey to display different components and react to inputs differently. Multiple games use the same cards, with different instructions given to the player to change the style of game.|$|R
50|$|The SL and TL {{were also}} shipped with MS-DOS 3.3 and DeskMate 3 in ROM, and {{featured}} a serial EEPROM memory chip to store BIOS settings, which enabled similar functionality to today's CMOS NVRAMs so that startup options could be saved. By comparison, earlier Tandy 1000 models, {{with the exception}} of the HX, like IBM PC and PC/XT systems, used DIP <b>switches</b> and <b>jumpers</b> for startup configuration settings.) The machines could also run 'normal' MS-DOS 3.x, 5.x, and 6.x and Windows 2.x and 3.0 operating systems, although Windows was limited to real-mode operations. In common with many PC clones of the era, MS-DOS 4 was problematic and generally avoided.|$|R
50|$|Since PC/104-Plus {{is based}} on PCI, {{there is no need}} to set a Base Address, IRQ, or DMA channel on the {{peripheral}} boards. However, it is necessary to specify the PCI Slot Number of a peripheral board when it is installed. This is commonly set by a rotary switch, DIP <b>switch,</b> or <b>jumpers</b> on the peripheral board. Each PCI peripheral board in the system must have the PCI Slot Number set to a unique value. Failure to do so may cause erratic system behavior. The peripheral closest to the CPU should be set for the first slot, the next board should be set for the second slot, etc.|$|R
5000|$|The 401x series {{consisted}} of a large monitor {{sitting on top of}} a wheeled cart. The cart held most of the electronics in a vertical case at the back. This could be opened from the front to access the various <b>switches</b> and <b>jumpers,</b> as well as providing access to the expansion cards. Inside the cart, expansion cards were connected using the [...] "Minibus" [...] system, using a 36-pin card connector with an 8-bit data bus. In addition to the communications card and various enhancements, the Desk-Top Mounting Kit allowed the CRT to be placed on a desk while the cart was connected to it using a cable up to [...] away.|$|R
5000|$|Internally, the Odyssey {{architecture}} {{is composed of}} digital computing parts. The circuitry is implemented in diode-transistor logic using discrete transistors and diodes, rather than the newly emerging transistor-transistor logic integrated circuits, due to cost concerns. The games themselves do not use cartridges like later consoles, but instead use [...] "game cards" [...] composed of printed circuit boards that plug into the console. These cards modify the internal circuitry like a set of <b>switches</b> or <b>jumpers,</b> causing the Odyssey to display different components and react to inputs differently. Multiple games use the same cards, with different instructions given to the player to change the style of game.|$|R
50|$|The IBM PC AT added {{a second}}, slave 8259 PIC (at I/O address 0xA0), a second 8237 DMA {{controller}} for 16-bit DMA (at I/O address 0xC0), a DMA address register (implemented with a 74LS612 IC) (at I/O address 0x80), and a Motorola MC146818 real-time clock (RTC) with nonvolatile memory (NVRAM) used for system configuration (replacing the DIP <b>switches</b> and <b>jumpers</b> {{used for this}} purpose in PC and PC/XT models (at I/O address 0x70). On expansion cards, the Intel 8255 programmable peripheral interface (PPI) (at I/O addresses 0x378 is used for parallel I/O controls the printer, and the 8250 universal asynchronous receiver/transmitter (UART) (at I/O address 0x3F8 or 0x3E8) controls the serial communication at the (pseudo-) RS-232 port.|$|R
50|$|Original Apple IIs were {{designed}} to accommodate either 2104 (4kx1) DRAM or 4116 (16kx1) DRAM and had <b>jumper</b> <b>switches</b> to adjust the RAM size. The early Apple II+ models retained this feature, but after a drop in DRAM prices, Apple began redesigned the circuit boards without the jumpers so that only 16k chips were supported. A few months later they started shipping all machines with {{a full complement of}} 48k DRAM.|$|R
5000|$|The industry-standard way {{of setting}} floppy drive numbers was via setting <b>jumper</b> <b>switches</b> {{on the drive}} unit, however IBM chose to instead use a method known as the [...] "cable twist" [...] which had a floppy data cable with {{a bend in the}} middle of it that served as a switch for the drive motor control. This {{eliminated}} the need for users to adjust jumpers while installing a floppy drive.|$|R
50|$|Many {{settings}} {{are required for}} serial connections used for asynchronous start-stop communication, to select speed, number of data bits per character, parity, and number of stop bits per character. In modern serial ports using a UART integrated circuit, all {{settings are}} usually software-controlled; hardware from the 1980s and earlier may require setting <b>switches</b> or <b>jumpers</b> on a circuit board. One of the simplifications made in such serial bus standards as Ethernet, FireWire, and USB {{is that many of}} those parameters have fixed values so that users cannot and need not change the configuration; the speed is either fixed or automatically negotiated. Often if the settings are entered incorrectly the connection will not be dropped; however, any data sent will be received on the other end as nonsense.|$|R
50|$|IBM {{introduced}} {{what would}} retroactively {{be called the}} Industry Standard Architecture (ISA) bus with the IBM PC in 1981; it was then called the PC bus. The IBM XT, introduced in 1983, used the same bus (with slight exception). The 8-bit PC and XT bus was extended {{with the introduction of}} the IBM AT, in 1984. This used a second connector for extending the address and data bus over the XT, but was backward compatible; 8-bit cards were still usable in the AT 16-bit slots. Industry Standard Architecture (ISA) became the designation for the IBM AT bus after other types were developed. Users of the ISA bus had to have in depth knowledge of the hardware they were adding to properly connect the devices, since memory addresses, I/O port addresses, and DMA channels had to be configured by <b>switches</b> or <b>jumpers</b> on the card to match the settings in driver software.|$|R
2500|$|In the 1940s, the {{earliest}} electronic digital systems had no operating systems. [...] Electronic systems {{of this time}} were programmed on rows of mechanical <b>switches</b> or by <b>jumper</b> wires on plug boards. [...] These were special-purpose systems that, for example, generated ballistics tables for the military or controlled the printing of payroll checks from data on punched paper cards. [...] After programmable general purpose computers were invented, machine languages (consisting of strings of the binary digits 0 and 1 on punched paper tape) were introduced that sped up the programming process (Stern, 1981).|$|R
5000|$|The BIOS of the {{original}} IBM PC XT had no interactive user interface. Error codes or messages were displayed on the screen, or coded series of sounds were generated to signal errors when the power-on self-test (POST) had not proceeded {{to the point of}} successfully initializing a video display adapter. Options on the IBM PC and XT were set by <b>switches</b> and <b>jumpers</b> on the main board and on peripheral cards. Starting around the mid-1990s, it became typical for the BIOS ROM to include a [...] "BIOS configuration utility" [...] (BCU) or [...] "BIOS setup utility", accessed at system power-up by a particular key sequence. This program allowed the user to set system configuration options, of the type formerly set using DIP switches, through an interactive menu system controlled through the keyboard. In the interim period, IBM-compatible PCsincluding the IBM ATheld configuration settings in battery-backed RAM and used a bootable configuration program on disk, not in the ROM, to set the configuration options contained in this memory. The disk was supplied with the computer, and if it was lost the system settings could not be changed. The same applied in general to computers with an EISA bus, for which the configuration program was called an EISA Configuration Utility (ECU).|$|R

