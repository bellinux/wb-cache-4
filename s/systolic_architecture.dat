124|154|Public
40|$|In this paper, {{we propose}} a <b>systolic</b> <b>architecture</b> for hidden-surface removal. <b>Systolic</b> <b>architecture</b> {{is a kind}} of {{parallel}} architecture best known for its easy VLSI implementability. After discussing the design details of the architecture, we present the results of the simulation experiments conducted in order to evaluate the performance of the architecture...|$|E
40|$|The {{evolution}} of computer and Internet has brought demand for powerful and high speed data processing, but in such complex environment fewer methods can provide perfect solution. To handle above addressed issue, parallel computing is proposed {{as a solution}} to the contradiction. This paper provides solution for the addressed issues of demand for high speed data processing. This paper demonstrates an effective design for the Matrix Multiplication using <b>Systolic</b> <b>Architecture</b> on Reconfigurable Systems (RS) like Field Programmable Gate Arrays (FPGAs). Here, the <b>systolic</b> <b>architecture</b> increases the computing speed by combining the concept of parallel processing and pipelining into a single concept. Here, the RTL code is written for matrix multiplication with <b>systolic</b> <b>architecture</b> and matrix multiplication without <b>systolic</b> <b>architecture</b> in Verilog HDL, compiled and simulated by using Modelsim XE III 6. 4 b, Synthesized by using Xilinx ISE 9. 2 i and targeted to the device xc 3 s 500 e- 5 -ft 256 and then finally the designs are compared to each other to evaluate the performance of proposed architecture. The proposed Matrix Multiplication with <b>systolic</b> <b>architecture</b> is enhances the speed of matrix multiplication by twice of conventional method...|$|E
40|$|We {{describe}} a methodology for mapping linear recurrence equations to {{a spectrum of}} systolic architectures. First, we design a systolic program in a very general architecture referred to as Basic <b>Systolic</b> <b>Architecture</b> and establish the correctness of the implementation. Next, we show how efficient transformations/implementations of programs for different systolic architectures can be obtained through transformations such as projections and translations. 1 Introduction Designing systolic programs has been an area of considerable research [1, 2, 3, 5, 6, 7, 8, 9]. Among works cited above, the results of [8, 9] are of relevance to our work. In [8], Quinton gives a methodology to map a system of uniform recurrence equation into <b>systolic</b> <b>architecture.</b> This method derives a prototype <b>systolic</b> <b>architecture</b> for a given recurrence equation. However, it suffers {{from the fact that}} it is not easy to map the solutions of linear recurrence equations (LRE) to a given <b>systolic</b> <b>architecture</b> particular [...] ...|$|E
40|$|In this {{dissertation}} {{the basic}} techniques for designing more sophisticated adaptive array systems are first developed. Then several <b>systolic</b> <b>architectures</b> based on numerically stable and computationally efficient algorithms are proposed for adaptive array systems. Compared {{to the existing}} architectures proposed elsewhere in the literature, our new <b>systolic</b> <b>architectures</b> are more efficient structures for real-time signal processing applications and VLSI hardware implementation. The reasons are (1) the proposed <b>systolic</b> <b>architectures</b> are based on numerically stable and computationally efficient systolic algorithms, (2) there is no bottleneck in the whole architecture since QR decomposition by the square root free fast Givens method is used, (3) the whole architecture has a fully pipelined design since backward substitution is avoided, (4) it is a single fully pipelined open-loop system without any feedback arrangement, and (5) the <b>systolic</b> <b>architectures</b> function recursively to update the result for each new snapshot. Therefore, the new VLSI <b>systolic</b> <b>architectures</b> proposed in this dissertation using QR-recursive least squares (QR-RLS) and QR-constrained recursive least squares (QR-CRLS) techniques archieve minimal memory and maximal parallelism for real-time signal processing applications and VLSI hardware implementation...|$|R
40|$|This paper proposes new {{efficient}} low-power <b>systolic</b> <b>architectures</b> for Full Search-Block Matching (FS-BM) motion estimation. These architectures {{allow to}} eliminate unnecessary computations, reducing the power consumption while preserving the optimal solution and the throughput. The new and traditional <b>systolic</b> <b>architectures</b> for motion estimation are compared in what concerns the required hardware {{and the power}} consumption...|$|R
30|$|In summary, the {{developed}} <b>systolic</b> <b>architectures</b> perform the parallel and pipelined schemes which exploit the proposed above mapping methodology. These architectures {{provide the necessary}} HW-level implementation of the SW-optimized complex multi-purpose RS imaging algorithms.|$|R
40|$|This work proposes stream {{algorithms}} {{along with}} a decoupled <b>systolic</b> <b>architecture</b> (DSA). Stream algorithms executed on a decoupled <b>systolic</b> <b>architecture</b> are notable for two reasons. The floating-point efficiency of stream algorithms increases {{as the number of}} processing elements in the DSA increases. Furthermore, the compute efficiency approaches 100 % asymptotically, that is for large numbers of processors and an appropriate problem size. This thesis present...|$|E
40|$|In this paper, we {{describe}} a systematic method for mapping {{the problem of}} symmetrizing Hessenberg matrices onto systolic architectures. The starting point of our method is a graphical abstraction {{of the system of}} linear recurrence equations that specifies the problem. Using a procedure called cubization, we transform the dependency graph of the problem into a graph we term the Modified Dependency Graph. Using the modified dependency graph, we design systolic programs on a very general architecture referred to as a basic <b>systolic</b> <b>architecture.</b> Next, we map the basic <b>systolic</b> <b>architecture</b> onto a given <b>systolic</b> <b>architecture</b> using a set of semantics-preserving transformations and hence, the correctness of the solution comes for free. Finally, we compare the architectures for symmetrizing Hessenberg matrices obtained by our method with those proposed previously. 1 Introduction The aim {{of this paper is to}} describe a systematic approach for mapping the problem of symmetrizing Hessenberg matr [...] ...|$|E
40|$|Abstract. A new {{parallel}} algorithm for {{signal processing}} and a parallel <b>systolic</b> <b>architecture</b> of a CFAR processor with adaptive censoring and post detection integration (API) {{are presented in}} the paper. The processor proposed is used for target detection when echoes from targets are performed in conditions of binomial distribution pulse jamming. The property of the algorithm proposed is its ability automatically to determine and censor the unwanted samples corrupted by pulse jamming in both, the two-dimensional reference window and the test cell, before noise level estimation. In case of binomial distribution pulse jamming for big repetition frequency, the censoring capabilities of the algorithm offered from Behar is small and the probability of false alarm is not constant. We offer the vector at {{the output of the}} reference window to be sorted and censored again. In such a way the influence of pulse jamming environment over adaptive threshold is reduced to minimum. The <b>systolic</b> <b>architecture</b> of the API CFAR is designed. Computational losses of the <b>systolic</b> <b>architecture</b> are estimated as a number of processor elements and computational steps needed for real-time implementation. ...|$|E
40|$|Since {{the work}} of Kung, the <b>systolic</b> <b>architectures</b> have proven their {{efficiency}} to deal with many scientific algorithms (LU-decomposition, Gauss-Jordan elimination, [...] .). Since the early eighties, many works {{have been made in}} the area of automatic derivation of <b>systolic</b> <b>architectures.</b> In the general case, there are numerous solutions to the same problem. The final choice of the architecture is often done by comparison of performances. There are several criteria which can be considered: global time of computation, number of processors, latency of the circuit [...] . In this article we are especially interested with the number of processors of the final architecture for which we present a heuristic method...|$|R
40|$|This thesis investigates how <b>systolic</b> <b>architectures</b> {{can be used}} in the {{implementation}} of an arithmetic unit for small finite fields of characteristic two with polynomial basis representation. <b>Systolic</b> <b>architectures</b> provide very high performance but also consume a lot of chip area. A number of design methods for tailoring the systolic arrays for a specified requirement are presented, making it possible to trade throughput, chip area and propagation delays for oneanother. A study is also made on how these systolic arrays can be combined to form an arithmetic logic unit, ALU, that canperform operations in many different fields. A number of design alternatives are presented, and an example ALU is presented to give an idea of the performance of such a circuit...|$|R
40|$|Abstract- This paper {{presents}} a new <b>systolic</b> VLSI <b>architecture</b> for computing inverses and divisions in finite fields GF(2 ") {{based on a}} variant of Euclid's algorithm. It is highly regular, modular, and thus well suited to VLSI implementation. It has O(m 2) area complexity and can produce one result per clock cycle with a latency of 8 m- 2 clock cycles. As compared to existing related <b>systolic</b> <b>architectures</b> with the same throughput performance, the proposed one gains a significant improvement in area complexity. I...|$|R
40|$|We {{present a}} new <b>systolic</b> <b>architecture</b> for {{implementing}} Finite State Vector Quantization in real-time for both speech and image data. This architecture is modular {{and has a}} very simple control flow. Only one processor is needed for speech compression. A linear array of processors is used for image compression; the number of processors needed is independent {{of the size of}} the image. We also present a simple architecture for converting line- scanned image data into the format required by this <b>systolic</b> <b>architecture.</b> Image data is processed at a rate of 1 pixel per clock cycle. An implementation at 31. 5 MHz can quantize 1024 x 1024 pixel images at 30 frames/sec in real-time. We describe a VLSI implementation of these FSTSVQ processors...|$|E
40|$|An area-effcient <b>systolic</b> <b>architecture</b> for realtime, programmable-coefficient finite impulse {{response}} (FIR) filters is presented. A technique called pipelined clustering is introduced to derive the architecture {{in which a}} number of filter tap computations are multiplexed in an appropriately pipelined processor. This multiplezing is {{made possible by the}} fact that the processor is clocked at the highest possible frequency under the given. technology and design constraints. Reduction in hardware proportional to the ratio of data arrival period and clock period is achieved. The proposed <b>systolic</b> <b>architecture</b> is 100 % efficient and has the same throughput and latency and approximately the same power dissipation as an unclustered array. The architecture is completely specified, including a description, of the multip 1 exers and synchronisation delays that are required...|$|E
40|$|Abstract—In this paper, {{we propose}} an {{efficient}} <b>systolic</b> <b>architecture</b> {{for the delay}} least-mean-square (DLMS) adaptive finite impulse response (FIR) digital filter based on a new tree-systolic processing element () and an optimized tree-level rule. Applying our tree-systolic, a higher convergence rate {{than that of the}} conventional DLMS structures can be obtained without sacrificing the properties of the systolic-array architecture. The efficient systolic adaptive FIR digital filter not only operates at the highest throughput in the word-level but also considers finite driving/update of the feedback error signal. Furthermore, based on our proposed optimized tree-level rule that takes account of minimum delay and high regularity, an efficient-tap systolic adaptive FIR digital filter can be easily determined under the constraint of maximum driving of the feedback error signal. Index Terms—Adaptive filter, DLMS algorithm, equalization, system identification, <b>systolic</b> <b>architecture.</b> I...|$|E
40|$|Several {{algebraic}} operations can be efficiently implement by {{arrays of}} functional units such as systolic arrays. Systolic arrays provide {{a large amount}} of parallelism. However, their applicability is restricted to a small set of computational problems due to their lack of flexibility. This limitation can be circumvented by using reconfigurable systolic arrays, where the node operations and interconnections can be redefined even at run time. In this context, several alternative <b>systolic</b> <b>architectures</b> can be explored and powerful tools are needed to model and evaluate them. Well-known rewriting-logic environments such as ELAN and Maude can be used to specify, simulate and even synthesize complex application specific digital systems. In this paper we propose the use of rewriting-logic to model and evaluate reconfigurable <b>systolic</b> <b>architectures</b> which are applied to the efficient treatment of algebraic operations such as matrix multiplication and the FFT...|$|R
40|$|AbstractA {{variety of}} {{problems}} related to <b>systolic</b> <b>architectures,</b> systems, models and computations are discussed. The emphases are on theoretical problems of a broader interest. Main motivations and interesting/important applications are also presented. The first part is devoted to {{problems related to}} synthesis, transformations and simulations of <b>systolic</b> systems and <b>architectures.</b> In the second part, the power and structure of tree and linear array computations are studied in detail. The goal is to survey main research directions, problems, methods and techniques in not too formal a way...|$|R
40|$|AbstractThis paper {{presents}} {{two parallel}} algorithms for {{the solution of}} a polynomial equation of degree n, where n can be very large. The algorithms are based on Graeffe's root squaring technique implemented on two different <b>systolic</b> <b>architectures,</b> built around mesh of trees and multitrees, respectively. Each of these algorithms requires O(log n) time using O(n 2) processors...|$|R
40|$|Abstract—For {{cryptographic}} applications, such as {{elliptic curve}} digital signature algorithm (ECDSA) and pairing algo-rithm, the crypto-processors {{are required to}} perform large number of additions and multiplications over finite fields of large orders. To have a balanced trade-off between space complexity and time complexity, in this paper, novel digit-serial and digit-parallel systolic structures are presented for computing multipli-cation over GF (2 m). Based on novel decomposition algorithm, we have derived an efficient digit-serial <b>systolic</b> <b>architecture,</b> which involves latency of O(m d) clock cycles, while the existing digit-serial systolic multipliers involve at least O(m d) latency for digit-size d. The proposed digit-serial design {{could be used for}} AESP-based fields with the same digit-size as the case of trinomial-based fields with a small increase in area. We have also proposed digit-parallel <b>systolic</b> <b>architecture</b> employing n-term Karatsuba-like method, where the latency can be reduced from O...|$|E
40|$|Abstract—An FPGA-based <b>systolic</b> <b>architecture</b> for {{the high}} speed {{simulation}} of spiking neural networks is presented. The design is an implementation of Izhikevich’s neuron model and employs optimizations for the typical case where neuron activity is low. Since execution time required {{is related to the}} activity level, performance of the design can be improved by an order of magnitude. I...|$|E
40|$|With {{the advent}} of VLSI it has become {{possible}} to map parallel algorithms for compute-bound problems directly on silicon. <b>Systolic</b> <b>architecture</b> is very good candidate for VLSI implementation because of its regular and simple design, and regular communication pattern. In this paper, a systolic algorithm and corresponding <b>systolic</b> <b>architecture,</b> a linear systolic array, for the scanline-based hidden surface removal problem in three-dimensional computer graphics have been proposed. The algorithm {{is based on the}} concept of sample spans or intervals. The worst case time taken by the algorithm is O(n), n being the number of segments in a scanline. The time taken by the algorithm for a given scene depends on the scene itself, and on an average considerable improvement over the worst case behaviour is expected. A pipeline scheme for handling the I/O process has also been proposed which is suitable for VLSI implementation of the algorithm...|$|E
40|$|An {{investigation}} into <b>systolic</b> <b>architectures</b> for wave digital filters for low-power applications is presented. Based on a three-port adaptor {{implementation of the}} second-order section, minimum power is found using pipelining with a 2 bit block size for which the power consumption is reduced by 50 % and the power-area-delay performance increased by 5 times relative to the starting, non-pipelined, implementation...|$|R
40|$|Based {{on a new}} {{reformulation}} of {{the extended}} Euclidean al-gorithm, <b>systolic</b> <b>architectures</b> suitable for VLSI implemen-tations are proposed for finite field inversion and division in this paper. The architectures proposed in this paper can achieve O(m 2) area-time complexity, O(m) latency, and crit-ical path delays of two logic gates. These architectures show improved performances when compared with previously pro-posed architectures. Categories and Subject Descriptors B. 2. 4 [ARITHMETIC AND LOGIC STRUCTURES]...|$|R
5000|$|Systolic arrays, {{proposed}} {{during the}} 1980s are multiprocessors in which data and partial results are rhythmically pumped from processor to processor through a regular, local interconnection network. [...] <b>Systolic</b> <b>architectures</b> use a global clock and explicit timing delays to synchronize data flow from processor to processor. [...] Each processor in a systolic system executes an invariant {{sequence of instructions}} before data and results are pulsed to neighboring processors.|$|R
40|$|We {{present an}} {{automatic}} method for mapping {{a system of}} linear recurrence equations onto systolic architectures. First, we show that systolic architectures {{can be derived from}} linear recurrence equations using the notion of directed recurrence equations. Next, we provide a procedure called CUBIZATION to achieve better performance while mapping such equations. The CUBIZATION procedure is completely automated and can be implemented to design systolic programs for a very general architecture referred to as Basic <b>Systolic</b> <b>Architecture</b> (BSA). Using BSA, we obtain specific target architectures. The method is illustrated using a running example of Gauss-Jordan diagonalization. 1 Introduction In [6], we proposed a method to map a system of directed recurrence equations (DRE), a subclass of linear recurrence equations (LRE), which properly includes uniform recurrence equations onto <b>systolic</b> <b>architecture.</b> Here, we extend our method to LREs where the dependency vector at a point is a linear fun [...] ...|$|E
40|$|This paper {{deals with}} the {{systematic}} synthesis of systolic arrays. As a target example, we design a new 2 D-toroidal systolic array for the algebraic path problem. First, we informally explain how to derive this new <b>systolic</b> <b>architecture,</b> then we show how to synthesize it using a systematic methodology based upon uniform recurrence equations. Such a synthesis provides a proof of the correctness of the architecture. Key-words : <b>systolic</b> <b>architecture,</b> linear array of processors, automatic synthesis, algebraic path problem, recurrence equations 1 INTRODUCTION 1 1 Introduction Since the seminal work of Kung and Leiserson ([17]), interest for systolic algorithms and architectures has never decreased, for the following reasons: ffl systolic algorithms exist for a much larger class of algorithms than was initially expected, especially in the strategic domains of signal processing, numerical analysis and image processing, ffl with the advance of VLSI, it {{becomes more and more}} realistic to [...] ...|$|E
3000|$|Image {{processing}} {{requires more}} computational power and data throughput than most conventional processors can provide. Designing specific hardware can improve execution time and achieve better performance {{per unit of}} silicon area. A field-programmable-gate-array- (FPGA-) based configurable <b>systolic</b> <b>architecture</b> specially tailored for real-time window-based image operations is presented in this paper. The architecture {{is based on a}} 2 D systolic array of [...]...|$|E
40|$|This paper {{details the}} study of <b>systolic</b> <b>architectures</b> for fuzzy rules {{processing}} made at the Hardware and Advanced Control Laboratory - INTA. The theoretical basis of these architectures is described and analysed. Likewise, the resultant schematics are simulated using a hardware description language (VHDL) with standard cells from ES 2. This gives us a very accurate assessment of their real performance. In this way we can detect the inherent shortcomings in this class of systems and we outline several ways of overcoming then...|$|R
40|$|<b>Systolic</b> <b>architectures</b> {{implement}} regular algorithms in hardware, {{in order}} to obtain high computational throughput. In this paper we provide a modular architecture for a deconvolution iterative algorithm. The basic module is a systolic array which implement one iteration of the algorithm recentley proposed in 1. The algorithm is a generalization of the method to invert non singular polynomial transfer function, previously publoshed in 2. The basic systoloc module can be repeteadly concatenated {{in such a way that}} can be used in real time applications. Postprint (published version...|$|R
40|$|The paper {{presents}} novel recursive algorithms for {{realization of}} one-dimensional type-II discrete cosine transform (DCT) and inverse discrete cosine transform (IDCT) of any length. By using some mathematical techniques, recursive expressions for DCT and IDCT have been developed. The number of additions and multiplications in the recursive algorithm for DCT are less {{in comparison with}} some other DCT algorithms. Basing on these two recursive algorithms, two <b>systolic</b> <b>architectures</b> are presented for realization of DCT and IDCT. The recursive algorithms are appropriate for VLSI implementation...|$|R
40|$|We {{propose a}} <b>systolic</b> <b>architecture</b> for {{computing}} a singular value decomposition of an m x n matrix, where m ≥ n. Our algorithm is stable and requires only O(mn) {{time on a}} linear array of O(n) processors. Extensions to algorithms for two-dimensional arrays are also discussed. Key Words and Phrases: Systolic arrays, singular value decomposition, Hestenes method, threshold Jacobi method, real-time computation...|$|E
40|$|An {{algorithm}} for computing the discrete Hartley transform {{is presented}} {{that is based}} on the algebraic integers encoding scheme. With the aid of this scheme, an error-free representation of the cas function becomes possible. In addition, for further complexity reduction an approximation scheme is proposed. Finally, for the implementation of the algorithm a fully pipelined <b>systolic</b> <b>architecture</b> with O(N) throughput is proposed...|$|E
40|$|The matrix {{multiplication}} is a computationally intensive {{problem and}} a prerequisite in various image processing applications like spatial and frequency filtering, edge detection and convolution. Being a core part of various applications in portable devices like mobile phones, demand for high speed and {{low power consumption}} is extremely high. This work demonstrates an effective design and efficient implementation of the Matrix Multiplication using <b>Systolic</b> <b>Architecture</b> and Ancient mathematics. For efficient implementation and maximum speed-up, integer arithmetic was used. Three main steps of the work, i. e. design, simulation and implementation, were accomplished. For design and simulation, Verilog HDL was used. The design was simulated using modelsim 10. 1 d and synthesized using Xilinx Planahead 12. 1. The work also includes the comparison between three design approaches of the matrix multiplication using <b>systolic</b> <b>architecture.</b> In the first design approach, array multipliers were used. In the second approach, Wallace tree multipliers were used and in the final approach, matrix multiplier design was based on Ancient multiplication technique...|$|E
40|$|In this paper, {{we present}} a survey on {{implementation}} of adaptive power line interference canceller for ECG signals and recommends Least mean-square (LMS) algorithm for implementation of adaptive power line interference canceller using FPGA. Notch filters and adaptive interference cancellers are proposed in literature for power line interference canceller. Notch filters are ineffective, whenever the power line frequency is not stable or not accurately known, a mismatch between the suppression band and the power line frequency might lead to inadequate reduction of the power line interference therefore adaptive interference cancellers are beneficial. LMS algorithm is commonly used on adaptive filtering since it enables the design of modular <b>systolic</b> <b>architectures.</b> Adaptive interference cancellers are implemented using general-purpose microcontrollers or digital signal processors. These solutions are not optimum since they have low processing speed and sequential execution {{due to the fact}} that adaptive cancellers are implemented with a software program. Another solution is the implementation of the adaptive controller with field-programmable gate array (FPGA). The fundamental advantage that FPGAs offers is the parallel implementation of ECG signal processing algorithms without losing processing speed. It also provides additional control and management features in monitoring the ECG process. Use of <b>systolic</b> <b>architectures</b> in the implementation of LMS algorithm results in reduced area and high speed of operation...|$|R
40|$|In this paper, {{we present}} novel {{parallel}} architectures based on Quantum-dot Cellular Automata (QCA) hardware. We {{show that the}} QCA, by allowing co-planar line crossing, overcomes a major limitation of VLSI and, in this sense, it can potentially open a new direction {{in the design of}} parallel algorithms and architectures. In addition, the QCA is inherently suitable for pipeline and systolic computation. Exploiting these two unique features of QCA and as representative applications, we present <b>systolic</b> <b>architectures</b> for co-planar implementation of complex permutation matrices and computation of FFT by using QCA-based hardware. ...|$|R
40|$|The {{generalized}} singular value decomposition is used {{to analyze}} the problem of minimizing $||Ax - b||_{ 2 }$ subject to the constraint Bx = d. A byproduct of the analysis is a new iterative procedure {{that can be used to}} improve an approximate solution obtained via the method of weights. All that is required to implement the procedure is a single QR factorization. These developments turn out to be of interest when A and B are sparse and for the case when <b>systolic</b> <b>architectures</b> are used to carry out the computations...|$|R
