68|223|Public
25|$|The package author {{defines the}} product features. A word processor, for example, might place the program's core file into one feature, and the program's help files, {{optional}} <b>spelling</b> <b>checker</b> and stationery modules into additional features.|$|E
5000|$|TeXstudio : This IWE targets LaTeX {{documents}} and provides interactive <b>spelling</b> <b>checker,</b> code folding, and syntax highlighting.|$|E
50|$|Originally the company’s {{business}} model {{was a free}} 2-day trial followed by an option to purchase the user license after the trial expired. On 15 January 2012, the company changed its {{business model}} by releasing its freemium version. The freemium version consists of the contextual-based grammar and <b>spelling</b> <b>checker</b> which users could download and keep for free. The premium version was also available for purchase. Its features include Ginger Text Reader and Personal Trainer a progress report analysis tool, along with unlimited access to Grammar Checker, the grammar and <b>spelling</b> <b>checker,</b> and Sentence Rephraser the rephrasing tool.|$|E
5000|$|<b>Spell</b> <b>checker</b> program: [...] Avro {{provided}} a <b>spell</b> <b>checker</b> as separate program. There is a <b>spell</b> <b>checker</b> plug-in for Microsoft Word.|$|R
5000|$|<b>Spell</b> <b>checker</b> (<b>Spell</b> <b>checker</b> doesn't {{distinguish}} between text and code) ...|$|R
5000|$|SpellMaster - a ROM-based <b>spell</b> <b>checker.</b> Believed {{to be the}} world's first check-as-you-type <b>spell</b> <b>checker</b> ...|$|R
50|$|The package author {{defines the}} product features. A word processor, for example, might place the program's core file into one feature, and the program's help files, {{optional}} <b>spelling</b> <b>checker</b> and stationery modules into additional features.|$|E
50|$|TeXstudio is a {{cross-platform}} {{open source}} LaTeX editor. Its features include an interactive <b>spelling</b> <b>checker,</b> code folding, and syntax highlighting. It {{does not provide}} LaTeX itself - the user must choose a distribution of LaTeX and install it first.|$|E
50|$|MySpell {{was started}} by Kevin Hendricks {{in an attempt to}} {{integrate}} various open-source spelling checkers into the OpenOffice.org build. With a little prodding from Kevin Atkinson, the author of Pspell and Aspell, a new <b>spelling</b> <b>checker</b> (MySpell) was written in C++ that supported affix compression, based on Ispell.|$|E
40|$|This study {{investigates the}} {{performance}} of a <b>spell</b> <b>checker</b> designed for native writers on misspellings made by second language (L 2) learners. It addresses two research questions: 1) What is the correction rate of a generic <b>spell</b> <b>checker</b> for L 2 misspellings? 2) What factors influence the correction rate of a generic <b>spell</b> <b>checker</b> for L 2 misspellings? To explore these questions, the study considers a corpus of 1, 027 unique misspellings from 48 Anglophone learners of German and classifies these along three error taxonomies: linguistic competence (competence versus performance misspellings), linguistic subsystem (lexical, morphological or phonological misspellings), and target modification (single-edit misspellings (edit distance = one) versus multiple-edit misspellings (edit distance> 1)). The study then evaluates {{the performance of}} the Microsoft Word ® <b>spell</b> <b>checker</b> on these misspellings. Results indicate that only 62 % of the L 2 misspellings are corrected and that the <b>spell</b> <b>checker,</b> independent of other factors, generally cannot correct multiple-edit misspellings although it is quite successful in correcting single-edit errors. In contrast to most misspellings by native writers, many L 2 misspellings are multiple-edit errors and are thus not corrected by a <b>spell</b> <b>checker</b> designed for native writers. The study concludes with computational and pedagogical suggestions to enhance spell checking in CALL...|$|R
5000|$|... stavekontroll (spellchecker) or stave kontroll (<b>spell</b> <b>checker)</b> ...|$|R
50|$|For example: a user might first {{instruct}} {{the operating system}} to load a word processor program from one file, and then edit a document stored in another file with the word processor program. In this example, the document would be considered data. If the word processor also features a <b>spell</b> <b>checker,</b> then the dictionary (word list) for the <b>spell</b> <b>checker</b> would also be considered data. The algorithms used by the <b>spell</b> <b>checker</b> to suggest corrections would be either machine code data or text in some interpretable programming language.|$|R
50|$|OpenTaal {{provides}} {{files for}} spelling check {{which are being}} used in software such as OpenOffice.org, Firefox, Thunderbird, Safari, Opera, TinyMCE and more. Some of this software receives custom files from OpenTaal while other software uses the generic <b>spelling</b> <b>checker</b> Hunspell. This is using its own custom file from OpenTaal. Even the Dutch Wiktionary uses this list of correctly spelled words.|$|E
50|$|Depending on the {{particular}} implementation, a search box may {{be accompanied by a}} drop-down list to present the users with past searches or search suggestions. Search boxes may have other features to help the user, such as autocomplete, search suggestions, a <b>spelling</b> <b>checker,</b> etc. Search boxes are often also accompanied by drop-down menus or other input controls to allow the user to restrict the search or choose what type of content to search for.|$|E
50|$|Ginger Page {{operates}} as an online service and supports MS-Word, MS-Outlook, MS-PowerPoint, Internet Explorer, Chrome and Firefox, and {{functions as a}} writing enhancement app for Android and iOS mobile devices. Its main feature is the grammar and <b>spelling</b> <b>checker</b> that runs seamlessly with the different user interfaces. It also has an advanced paraphrasing tool, contextual synonyms and definitions, multi-language translation and a text-to-speech function that enables users to hear sentences before and after correction.|$|E
5000|$|... #Caption: A {{screenshot}} of Enchant, the AbiWord <b>spell</b> <b>checker.</b>|$|R
50|$|Spell is the {{standard}} English language <b>spell</b> <b>checker</b> for Unix.|$|R
40|$|Spelling Correction is {{a process}} of {{detecting}} and sometimes providing suggestions for incorrectly spelled words in a text. <b>Spell</b> <b>Checker</b> is an application program that flags words in a document that may not be <b>spelled</b> correctly. <b>Spell</b> <b>Checker</b> may be stand-alone capable of operating on a block a text such as word processor, electronic dictionary. When some text is given as an input to <b>spell</b> <b>checker,</b> it list outs the incorrect words separately by checking their availability in the dictionary. Finally it provides the suggestions for the incorrect words from the dictionary. This survey paper covers almost all the spelling correction technique...|$|R
5000|$|In 1986 Computer Concepts {{published}} InterWord as {{a successor}} to Wordwise Plus. [...] InterWord was shipped on a 32k ROM with a custom carrier board allowing specific memory accesses to page different parts of that ROM {{in and out of}} the 16k address space that the BBC Micro reserves for user ROMs. This approach was later expanded on by Computer Concepts for their 1987 ROM SpellMaster, which paged 128k into the 16k address space and acted as a <b>spelling</b> <b>checker</b> for InterWord, Wordwise and View.|$|E
5000|$|The {{standard}} keyboard layout in the Netherlands is US-International, as it provides {{easy access to}} diacritics on common UK- or US-like keyboards. The Dutch layout is historical, and keyboards with this layout are rarely used. Many US keyboards sold {{do not have the}} extra US-International characters or [...] engraved on the keys, although € (...) always is; nevertheless, the keys work as expected even if not marked. Many computer-literate Dutch people have retained the old habit of using [...] + number codes to type accented characters; others routinely type without diacritics, then use a <b>spelling</b> <b>checker</b> to produce the correct forms.|$|E
50|$|Ispell is a <b>spelling</b> <b>checker</b> for Unix that {{supports}} most Western languages. It offers several interfaces, including a programmatic interface {{for use by}} editors such as emacs. Unlike GNU Aspell, ispell will only suggest corrections {{that are based on}} a Damerau-Levenshtein distance of 1; it will not attempt to guess more distant corrections based on English pronunciation rules.Ispell has a very long history that {{can be traced back to}} a program that was originally written in 1971 in PDP-10 Assembly language by R. E. Gorin, and later ported to the C programming language and expanded by many others.It is currently maintained by Geoff Kuenning.The generalized affix description system introduced by ispell has since been imitated by other spellingcheckers such as MySpell.|$|E
50|$|LocoScript version 1 had no <b>spell</b> <b>checker</b> or {{mail merge}} facilities.|$|R
50|$|AtariWriter Plus - disk only. Contained {{enhancements}} and a <b>spell</b> <b>checker.</b>|$|R
5000|$|A {{different}} <b>spell</b> <b>checker</b> {{than that}} used by OpenOffice.org, and thesaurus ...|$|R
50|$|It {{includes}} Keynote, {{a presentation}} program; the word processing and desktop publishing application Pages; and the spreadsheet application Numbers. It is generally {{viewed as a}} prosumer office suite targeted at home and small business users, with fewer features than competitors such as Microsoft's Office for Mac and the open source LibreOffice project (and indeed its own earlier versions), but has a simpler user interface, strong touchscreen support and built-in links with Apple's iCloud document-hosting service and its Aperture and iPhoto image management applications. Apple's design goals in creating iWork have been to allow Mac users to easily create attractive documents and spreadsheets, making use of macOS's extensive font library, integrated <b>spelling</b> <b>checker,</b> sophisticated graphics APIs and its AppleScript automation framework.|$|E
50|$|Brass {{attended}} Cornell University, {{where he}} was an editor of The Cornell Daily Sun {{and member of the}} Quill and Dagger society. After a journalism career as a reporter and then editor at the New York Daily News, as well as restaurant critic for Playboy Magazine and WNBC-TV, Brass entered the technology field. In the late 1970s, Brass developed the first dictionary-based <b>spelling</b> <b>checker</b> and invented the electronic thesaurus. He founded Dictronics Publishing Inc, which acquired the exclusive rights to many of the world's most important reference works, including The Random House Dictionary and Roget's Thesaurus. Dictronics was sold to Wang Laboratories in 1983. In 1987, Brass joined Oracle Corporation as a vice president and served as president of one of its subsidiaries. He was involved in a proposed tie-up between Oracle and McCaw Cellular.|$|E
5000|$|Research {{extends back}} to 1957, {{including}} spelling checkers for bitmap images of cursive writing and special applications to find records in databases {{in spite of}} incorrect entries. In 1961, Les Earnest, who headed the research on this budding technology, saw it necessary to include the first spell checker that accessed a list of 10,000 acceptable words. Ralph Gorin, a graduate student under Earnest at the time, created the first true <b>spelling</b> <b>checker</b> program written as an applications program (rather than research) for general English text: Spell for the DEC PDP-10 at Stanford University's Artificial Intelligence Laboratory, in February 1971. [...] Gorin wrote SPELL in assembly language, for faster action; he made the first spelling corrector by searching the word list for plausible correct spellings that differ by a single letter or adjacent letter transpositions and presenting them to the user. Gorin made SPELL publicly accessible, as was done with most SAIL (Stanford Artificial Intelligence Laboratory) programs, and it soon spread around the world via the new ARPAnet, about ten years before personal computers came into general use. [...] Spell, its algorithms and data structures inspired the Unix ispell program.|$|E
5000|$|Informatic (since 2010) — {{development}} of ORFO <b>spell</b> <b>checker</b> and stylistics assistant; ...|$|R
40|$|Spelling {{errors are}} {{introduced}} in text either during typing, {{or when the}} user does not know the correct phoneme or grapheme. If a language contains complex words like sandhi where two or more morphemes join based on some rules, spell checking becomes very tedious. In such situations, having a <b>spell</b> <b>checker</b> with sandhi splitter which alerts the user by flagging the errors and providing suggestions is very useful. A novel algorithm of sandhi splitting is proposed in this paper. The sandhi splitter can split about 7000 most common sandhi words in Kannada language used as test samples. The sandhi splitter was integrated with a Kannada <b>spell</b> <b>checker</b> and a mechanism for generating suggestions was added. A comprehensive, platform independent, standalone <b>spell</b> <b>checker</b> with sandhi splitter application software was thus developed and tested extensively for its efficiency and correctness. A comparative analysis of this <b>spell</b> <b>checker</b> with sandhi splitter was made and results concluded that the Kannada <b>spell</b> <b>checker</b> with sandhi splitter has an improved performance. It is twice as fast, 200 times more space efficient, and it is 90 % accurate in case of complex nouns and 50 % accurate for complex verbs. Such a <b>spell</b> <b>checker</b> with sandhi splitter will be of foremost significance in machine translation systems, voice processing, etc. This is the first sandhi splitter in Kannada and {{the advantage of the}} novel algorithm is that, it can be extended to all Indian languages. Comment: 7 pages, 10 figure...|$|R
40|$|This {{thesis is}} about spell checking. The main {{goal is to}} design an {{automatic}} <b>spell</b> <b>checker</b> which can find misspellings in text and correct them without any additional user input. The <b>spell</b> <b>checker</b> must be also able to correct huge amount of text data {{because it will be}} used for pre-processing of text before some data mining methods will be applied...|$|R
5000|$|Research {{extends back}} to 1957, {{including}} spelling checkers for bitmap images of cursive writing and special applications to find records in databases {{in spite of}} incorrect entries. In 1961, Les Earnest, who headed the research on this budding technology, saw it necessary to include the first spell checker that accessed a list of 10,000 acceptable words. Ralph Gorin, a graduate student under Earnest at the time, created the first true <b>spelling</b> <b>checker</b> program written as an applications program (rather than research) for general English text: Spell for the DEC PDP-10 at Stanford University's Artificial Intelligence Laboratory, in February 1971. [...] Gorin wrote SPELL in assembly language, for faster action; he made the first spelling corrector by searching the word list for plausible correct spellings that differ by a single letter or adjacent letter transpositions and presenting them to the user. Gorin made SPELL publicly accessible, as was done with most SAIL (Stanford Artificial Intelligence Laboratory) programs, and it soon spread around the world via the new ARPAnet, about ten years before personal computers came into general use. [...] Spell, its algorithms and data structures inspired the Unix ispell program. The first spell checkers were widely available on mainframe computers in the late 1970s. A group of six linguists from Georgetown University developed the first spell-check system for the IBM corporation.|$|E
40|$|This paper {{shows how}} {{morphological}} analysis contributes {{to solving the}} challenges posed {{by the development of}} a <b>spelling</b> <b>checker</b> for an agglutinative language like isiZulu. It demonstrates how the incremental implementation of affix removal rules can be used to derive word forms and enhance the lexical and error recall of the system. In the case of the <b>spelling</b> <b>checker</b> the strategies used are mainly based on the use of regular expressions, and more specifically on a process of stemming...|$|E
40|$|This paper {{describes}} {{part of a}} {{three year}} collaboration between Carnegie Mellon University 2 ̆ 7 s Language Technologies Institute, the Programa de Educación Intercultural Bilingüe of the Chilean Ministry of Education, and Universidad de La Frontera (Temuco, Chile). We are currently constructing a <b>spelling</b> <b>checker</b> for Mapudungun, a polysynthetic language spoken by the Mapuche people in Chile and Argentina. The <b>spelling</b> <b>checker</b> will be built in MySpell, the spell checking system used by the open source office suite OpenOffice. This paper also describes the spoken language corpus that {{is used as a}} source of data for developing the spelling checke...|$|E
5000|$|The most {{successful}} algorithm {{to date is}} Andrew Golding and Dan Roth's [...] "Winnow-based spelling correction algorithm", published in 1999, which is able to recognize about 96% of context-sensitive spelling errors, in addition to ordinary non-word spelling errors. A context-sensitive <b>spell</b> <b>checker</b> appears in Microsoft Office 2007, Google Wave, and in Ghotit Dyslexia Software context <b>spell</b> <b>checker</b> tuned for people with dyslexia.|$|R
5000|$|Office: SIAG (spreadsheet program), Ted (word processor) with <b>spell</b> <b>checker,</b> Xpdf (viewer for PDF documents) ...|$|R
40|$|Design and {{development}} of <b>Spell</b> <b>Checker</b> for Tamil language and details of the implementation have been discussed in this paper. Lexicons with morphological and syntactic information are needed {{for the development of}} <b>spell</b> <b>checker</b> that can be integrated in word processors, {{as well as for the}} development of morphological and syntactic analyzers that can be exploited by more complex natural language processing applications. 1...|$|R
