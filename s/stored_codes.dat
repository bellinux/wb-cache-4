6|444|Public
50|$|A {{rolling code}} {{transmitter}} {{is useful in}} a security system for providing secure encrypted radio frequency (RF) transmission comprising an interleaved trinary bit fixed code and rolling code. A receiver demodulates the encrypted RF transmission and recovers the fixed code and rolling code. Upon comparison of the fixed and rolling codes with <b>stored</b> <b>codes</b> and determining that the signal has emanated from an authorized transmitter, a signal is generated to actuate an electric motor to open or close a movable component.|$|E
5000|$|Rinkus [...] {{proposes that}} {{distributed}} representation, specifically sparse distributed representation (SDR), provides a classical implementation of quantum computing. Specifically, {{the set of}} SDR codes stored in an SDR coding field will generally intersect {{with each other to}} varying degrees. In other work, Rinkus describes a fixed time learning (and inference) algorithm that preserves similarity in the input space into similarity (intersection size) in the SDR code space. Assuming that input similarity correlates with probability, this means that any single active SDR code is also a probability distribution over all stored inputs, with the probability of each input measured by the fraction of its SDR code that is active (i.e., the size of its intersection with the active SDR code). The learning/inference algorithm can also be viewed as a state update operator and because any single active SDR simultaneously represents both the probability of the single input, X, to which it was assigned during learning and the probabilities of all other stored inputs, the same physical process that updates the probability of X also updates all stored probabilities. By 'fixed time', it is meant that the number of computational steps comprising this process (the update algorithm) remains constant as the number of <b>stored</b> <b>codes</b> increases. This theory departs radically from the standard view of quantum computing and quantum physical theory more generally: rather than assuming that the states of the lowest level entities in the system, i.e., single binary neurons, exist in superposition, it assumes only that higher-level, i.e., composite entities, i.e., whole SDR codes (which are sets of binary neurons), exist in superposition.|$|E
40|$|We {{present an}} online {{adaptive}} clustering algorithm {{in a decision}} tree framework which has an adaptive tree and a code formation layer. The code formation layer stores the representative codes of the clusters and the tree adapts the separating hyperplanes between the clusters. The membership of a sample in a cluster is decided by the tree and the tree parameters are guided by <b>stored</b> <b>codes.</b> The model provides a hierarchical representation of the clusters by minimizing a global objective function {{as opposed to the}} exisitng hierarchical clusterings where a local objective function at every level is optimized. We show the results on real-life data. ...|$|E
50|$|Note that it {{does not}} <b>store</b> <b>code</b> or execute {{application}} logic locally as it is merely a client which instructs the Integration Server to perform those actions.|$|R
50|$|A {{codebook}} {{is a type}} of document {{used for}} gathering and <b>storing</b> <b>codes.</b> Originally codebooks were often literally books, but today codebook is a byword for the complete record of a series of codes, regardless of physical format.|$|R
50|$|The code {{space is}} {{generally}} implemented as on-chip ROM, EPROM or flash ROM. In general, {{there is no}} provision for <b>storing</b> <b>code</b> in external memory {{due to the lack}} of an external memory interface. The exceptions are PIC17 and select high pin count PIC18 devices.|$|R
40|$|A {{device for}} the {{wireless}} detection {{of the reaction}} of several persons comprises an inquiry unit {{and a large number}} of terminals. The control electronic circuitry of each terminal permits the input of a code in a memory in the terminal and causes the terminal to switch over to a ready-to-send state only after detecting an inquiry signal from the inquiry unit, however not while a user is performing an input. Due to special inquiry signals or numeric values of an internal time base, the inquiry units whose <b>stored</b> <b>codes</b> correspond to the special inquiry signal send a a reply signal. By measuring the characteristic of all receive signals, the inquiry unit can determine the number of persons who entered a corresponding code...|$|E
40|$|Online {{clustering}} is {{an issue}} in large amount of data crunching. Moreover, having a coarse-to-fine grain analysis is also desirable. We address both these problems in a single framework by designing an online adaptive hierarchical clustering algorithm in a decision tree framework. Our model consists of an online adaptive binary tree and a code formation layer. The adaptive tree hierarchically partitions the data and the finest level clusters are represented by the leaf nodes. The code formation layer stores the representative codes of the clusters corresponding to the leaf nodes, and the tree adapts the separating hyperplanes between the clusters at every layer in an online adaptive mode. The membership of a sample in a cluster is decided by the tree and the tree parameters are guided by the <b>stored</b> <b>codes.</b> As opposed to the existing hierarchical clustering techniques where certain local objective function at every level is optimized, we adapt the tree in an online adaptive mode by minimizing a global objective functional. We use the same global objective functional as used in the fuzzy c-means algorithm (FCM), however, we observe {{that the effect of}} the control parameter is different from that in the FCM. In our model the control parameter regulates the size and the number of clusters whereas in the FCM the number of clusters is always constant (c). We never freeze the adaptation process. For every input sample, the tree allocates it to certain leaf node {{and at the same time}} adapts the tree parameters simultaneously with the adaptation of the <b>stored</b> <b>codes.</b> We validate the effectiveness of our model on certain real-life datasets and also show that the model is able to perform unsupervised classification on certain datasets...|$|E
40|$|The {{brain is}} {{believed}} to implement probabilistic reasoning and to represent information via population, or distributed, coding. Most previous population-based probabilistic (PPC) theories share several basic properties: 1) continuous-valued neurons; 2) fully(densely) -distributed codes, i. e., all(most) units participate in every code; 3) graded synapses; 4) rate coding; 5) units have innate unimodal tuning functions (TFs); 6) intrinsically noisy units; and 7) noise/correlation is considered harmful. We present a radically different theory that assumes: 1) binary units; 2) only a small subset of units, i. e., a sparse distributed code (SDC) (cell assembly, ensemble), comprises any individual code; 3) binary synapses; 4) signaling formally requires only single (first) spikes; 5) units initially have completely flat TFs (all weights zero); 6) units are not inherently noisy; but rather 7) noise is a resource generated/used to cause similar inputs to map to similar codes, controlling a tradeoff between storage capacity and embedding the input space statistics {{in the pattern of}} intersections over <b>stored</b> <b>codes,</b> indirectly yielding correlation patterns. The theory, Sparsey, was introduced 20 years ago as a canonical cortical circuit/algorithm model, but not elaborated as an alternative to PPC theories. Here, we show that the active SDC simultaneously represents both the most similar/likely input and the coarsely-ranked distribution over all stored inputs (hypotheses). Crucially, Sparsey's code selection algorithm (CSA), used for both learning and inference, achieves this with a single pass over the weights for each successive item of a sequence, thus performing spatiotemporal pattern learning/inference with a number of steps that remains constant as the number of stored items increases. We also discuss our approach as a radically new implementation of graphical probability modeling. Comment: 33 pages, 11 figures - Sec. explaining single cell tuning fns as artifacts of embedding SDCs in superposition removed (for future paper) - Clarified that a given SDC code represents the whole likelihood distribution over stored hypotheses at a coarsely-ranked level of fidelity - Clarified and corrected section describing Sparsey as a radically new instantiation of graphical probability modelin...|$|E
40|$|The present {{invention}} relates a scanable {{product made}} of a physical object and an ID Container, such ID Container possessing on its memory a Unique ID and a <b>stored</b> <b>coded</b> locking mechanism. The <b>stored</b> <b>coded</b> locking mechanism is generated by inputting physimetric property of the physical object and its Unique ID into hash functions to create an unintelligible code. Methods of making such a scanable product, and methods of authenticating a scanable product are also taught. 本发明涉及一种可扫描产品，所述产品包括实体对象和ID容纳装置。所述ID容纳装置在其存储器上存储有唯一的ID标识并存储有编码锁机制。通过将实体对象的物理度量特性和唯一的ID标识输入至杂凑函数(hash) 而产生一个难解的码，可以生成所述存储的编码锁机制。本发明还提出一种产生可扫描产品的方法以及鉴别可扫描产品的方法。Department of Industrial and Systems EngineeringInventor name used in this publication: 张志辉, Cheung Chi-faiInventor name used in this publication: 曾庆才Inventor name used in this publication: 李荣彬, Lee Wing-bunInventor name used in this publication: 陈炎材Inventor name used in this publication: 吴沛谦Title in Traditional Chinese: 通過數字識別(DID) 對實體對像進行物理度量鑒別Chin...|$|R
5000|$|IMPA Marine <b>stores</b> <b>coding</b> {{is used in}} {{the marine}} industry.http://impa.net/marine-stores-guide/ The system, of British origin, {{consists}} of a 6-digit code for marine products. This aims to bridge the language barrier and offer worldwide shipping companies an easy way to order goods. Related products are grouped in product classes.|$|R
50|$|An {{alternative}} <b>stores</b> source <b>code</b> in {{a version}} management system.|$|R
5000|$|Unlike other cheat devices which <b>store</b> cheat <b>codes</b> on {{proprietary}} storage devices, the PlayStation 2 <b>Code</b> Breaker <b>stores</b> <b>codes</b> {{on memory}} cards, thus {{cutting down on}} manufacturing costs. Saves can also be copied from USB flash drives. The device's official web site, Codetwink, run by CodeMasterX, (who also coded the entire cheat engine and cheat code types in the product) provides codes posted by the former Game Shark Code Creators Club. Codes can be downloaded from the official web site using the device's [...] "Day1" [...] feature. Later versions include support for the PlayStation 2's Broadband Adapter and internet chat.|$|R
5000|$|... {{explicitly}} execute <b>stored</b> precompiled <b>code</b> {{made by a}} compiler {{which is}} part of the interpreter system.|$|R
50|$|Signifying {{features}} of the architecture are up to 4,096 fast on-chip registers which {{may be used as}} accumulators, pointers, or as ordinary RAM. A 16-bit address space for between 1 KB and 64 KB of either OTP ROM or flash memory are used to <b>store</b> <b>code</b> and constants, and there is also a second 16-bit address space which may be used for large applications.|$|R
5000|$|SMPTE 388M: GC-AA (how to <b>store</b> A-law <b>coded</b> audio essence data in MXF {{using the}} Generic Container) ...|$|R
40|$|Software {{repositories}} {{are typically}} used to <b>store</b> <b>code</b> together with additional information. These repositories are a valuable source to train knowledge discovery algorithms to detect code smells and other qualitative defects. In this paper {{we present a}} lightweight framework to detect previously unknown knowledge from software repositories to support refactoring. The results will be usable by software reengineers {{in the process of}} inspection and quality assessment of legacy systems...|$|R
50|$|A {{package that}} has a {{standardized}} structure for <b>storing</b> executable <b>code</b> and its associated resources, is called a bundle.|$|R
40|$|Abstract. Software {{repositories}} {{are typically}} used to <b>store</b> <b>code</b> together with additional information. These repositories are a valuable source to train knowledge discovery algorithms to detect code smells and other qualitative defects. In this paper {{we present a}} lightweight framework to detect previously unknown knowledge from software reposit ories to support refactoring. The results will be usable by software reengineers {{in the process of}} inspection and quality asses sment of legacy systems. 1...|$|R
50|$|The Limited Edition and {{the normal}} edition were sold with PlayStation <b>Store</b> product <b>codes</b> {{allowing}} to download exclusive colors (skin) {{for up to}} three Valkyries.|$|R
5000|$|Classic Forth systems {{traditionally}} use neither {{operating system}} nor file system. Instead of <b>storing</b> <b>code</b> in files, source <b>code</b> is <b>stored</b> in disk blocks written to physical disk addresses. The word [...] is employed {{to translate the}} number of a 1K-sized block of disk space into the address of a buffer containing the data, which is managed automatically by the Forth system. Block use has become rare since the mid-1990s. In a hosted system those blocks too are allocated in a normal file in any case.|$|R
5000|$|Critics of {{the tobacco}} {{industry}} say Codentify is simply not good enough, “because it focuses too much on production and does not <b>store</b> product <b>codes</b> or track them.” ...|$|R
5000|$|Numbering about 300 in total, the monoliths {{are between}} 0.3 and 1.8 metres (1 and 6 feet) high, and {{are laid out}} in some 30 circles located around Alok in the Ikom area of Cross River State. The monoliths are phallic in form and some feature stylized faces as well as {{decorative}} patterns and inscriptions. The forms represent a yet undeciphered ancient writing, a complicated means of <b>storing</b> <b>coded</b> data, and visual communication. [...] This writing is often believed to be an ancient form of nsibidi, which would prove its ancient origins.|$|R
5000|$|... {{used the}} 128's bank {{switching}} to <b>store</b> program <b>code</b> separately from variables. Variable values would be preserved across program executions {{if the program}} was started with the GOTO command.|$|R
50|$|Thus, the <b>code</b> <b>stores</b> context hashes {{of various}} orders in H0...H7.|$|R
50|$|Although VBScript is a {{general-purpose}} scripting language, several particular {{areas of}} use are noteworthy. First, {{it is widely}} used among system administrators in the Microsoft environment. This situation may change with the promotion and increased use of Windows PowerShell. Second, VBScript is the scripting language for Quick Test Professional, a test automation tool. A third area to note is the adoption of VBScript as the internal scripting language for some embedded applications, such as industrial operator interfaces and human machine interfaces. The hierarchical DBMS InterSystems Caché (which {{has its roots in}} the language MUMPS) also supports an implementation of VBScript, Cache BASIC, for programming <b>stored</b> <b>code.</b>|$|R
30|$|NOR Flash is slower in erase {{operation}} and write operation compared to NAND Flash [52]. This means that NAND Flash has faster erase and write times. Moreover, NAND Flash has smaller erase units, so fewer erases are needed. NOR Flash can read data slightly faster than NAND Flash. NOR Flash offers complete address and data buses to randomly access {{any of its}} memory locations (addressable to every byte). This makes it a suitable replacement for older ROM BIOS/firmware chips, which rarely needs to be updated. Its endurance is 10, 000 to 1, 000, 000 erase cycles. NOR Flash is highly suitable for <b>storing</b> <b>codes</b> in embedded systems. Most of today's microcontrollers come with built-in Flash memory [53].|$|R
40|$|International Telemetering Conference Proceedings / November 14 - 16, 1978 / Hyatt House Hotel, Los Angeles, CaliforniaA {{demodulator}} {{is described}} that utilizes an interrupt-driven 8 -bit microprocessor and an external digital counter to demodulate an 8 -ary Frequency-Shift-Keyed input signal. After demodulation, the system correlates received groups of symbols with a <b>stored</b> <b>code</b> to derive and maintain character synchronization, and compute the decoded and error corrected output. The total device package count {{is less than}} 10, including the microprocessor with integral read/write memory and clock driver circuits, a Parallel Interface Adapter, a 1024 X 8 -bit ROM, an 8 -bit digital counter, a two-pole filter, a limiter and complete input and output buffering...|$|R
50|$|To {{avoid the}} use of a {{separate}} delay line store for every line termination it was convenient to use, in each group of 800 lines, three sets of five <b>stores</b> <b>coded</b> to correspond with the ZXY designation of the line. As the drum rotated it generated waveforms corresponding to the ZXY code of the line whose information was available at that time. These waveforms indicated the appropriate delay lines and if a call was to be set up a selected pulse was injected into the selected delay lines which caused them to open the line gates repeatedly at the selected pulse time, the pulse continuing to circulate until the connection was cleared.|$|R
5000|$|In current {{versions}} of mainstream [...] "object-relational" [...] DBMSs like Oracle and Microsoft SQL Server, the above point {{may be a}} non-issue. With these engines, the functionality of a given database can be arbitrarily extended through <b>stored</b> <b>code</b> (functions and procedures) written in a modern OO language (Java for Oracle, and a Microsoft [...]NET language for SQL Server), and these functions can be invoked in-turn in SQL statements in a transparent fashion: that is, the user neither knows nor cares that these functions/procedures were not originally part of the database engine. Modern software-development paradigms are fully supported: thus, one can create a set of library routines that can be re-used across multiple database schemas.|$|R
5000|$|Method 1: Find {{the result}} below. <b>Store</b> the ASCII <b>code</b> of the {{character}} below it at c.|$|R
5000|$|JavaScript {{example of}} a dead store:function func(a, b) { var x; var i = 300; while (i--) { x = a + b; // dead <b>store</b> }}"The <b>code</b> in the loop {{repeatedly}} overwrites the same variable, {{so it can be}} reduced to only one call." ...|$|R
40|$|Abstract. Separation {{logic is}} a Hoare-style logic for {{reasoning}} about programs with heap-allocated mutable data structures. As {{a step toward}} extending separation logic to high-level languages with ML-style general (higher-order) storage, we investigate the compatibility of nested Hoare triples with several variations of higher-order frame rules. The interaction of nested triples and frame rules can be subtle, and the inclusion of certain frame rules is in fact unsound. A particular combination of rules can be shown consistent {{by means of a}} Kripke model where worlds live in a recursively defined ultrametric space. The resulting logic allows us to elegantly prove programs involving <b>stored</b> <b>code.</b> In particular, it leads to natural specifications and proofs of invariants required for dealing with recursion through the store. ...|$|R
50|$|The machine {{featured}} dual cassette tape control. This made {{it possible}} to write large assembly programs using the two pass assembler ROM. Source code in text was written twice consecutively to the input tape, and then the assembler, which could start/stop the input cassette tape using motor control was invoked. During the first pass the symbol table was built and stored in RAM. During the second pass symbols would be translated and code written out to the second tape, also using start/stop motor control. Being able to avoid <b>storing</b> <b>code</b> in RAM {{made it possible}} to save much space. It was however, still important to keep the symbols list short since RAM size was often no more than 4 KB.|$|R
50|$|Jack O'Shea's is {{an award-winning}} {{international}} Irish butcher chain located in London {{and in the}} European district of Brussels, selling organic fresh meat. The chain was formerly located in Selfridges, but had its contract terminated in 2012 after breaking the <b>store's</b> ethical <b>code</b> on selling foie gras.|$|R
50|$|IDD {{was also}} used to <b>store</b> {{definitions}} and <b>code</b> for other products in the IDMS family such as ADS/Online and IDMS-DC.|$|R
