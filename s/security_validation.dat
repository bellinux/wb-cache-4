30|62|Public
5000|$|Intercepting Validator pattern helps {{performing}} <b>security</b> <b>validation</b> {{for input}} data from clients ...|$|E
5000|$|Mallory has {{determined}} that [...] accepts any session identifier, accepts session identifiers from query strings and has no <b>security</b> <b>validation.</b> [...] is thus not secure.|$|E
5000|$|A {{directory}} traversal (or path traversal) {{consists in}} exploiting insufficient <b>security</b> <b>validation</b> / sanitization of user-supplied input file names, so that characters representing [...] "traverse to parent directory" [...] are passed {{through to the}} file APIs.|$|E
25|$|Many earlier decoders would happily try {{to decode}} these. Carefully crafted invalid UTF-8 {{could make them}} either skip or create ASCII {{characters}} such as NUL, slash, or quotes. Invalid UTF-8 {{has been used to}} bypass <b>security</b> <b>validations</b> in high-profile products including Microsoft's IIS web server and Apache's Tomcat servlet container.|$|R
50|$|Unbound is {{designed}} {{as a set of}} modular components that incorporate modern features, such as enhanced <b>security</b> (DNSSEC) <b>validation,</b> Internet Protocol Version 6 (IPv6), and a client resolver application programming interface library {{as an integral part of}} the architecture. Originally written for POSIX-compatible Unix-like operating system, it runs on FreeBSD, OpenBSD, NetBSD, OS X, and Linux, as well as Microsoft Windows.|$|R
50|$|Failures or {{omissions}} in {{data validation}} {{can lead to}} data corruption or a <b>security</b> vulnerability. Data <b>validation</b> checks that data are valid, sensible, reasonable, and secure before they are processed.|$|R
50|$|Monitoring system events {{according}} to a security monitoring strategy, an incident response plan and <b>security</b> <b>validation</b> and metrics are fundamental activities to assure that an optimal level of security is obtained.It is important to monitor the new vulnerabilities, apply procedural and technical security controls like regularly updating software, and evaluate other kinds of controls to deal with zero-day attacks.|$|E
50|$|BFC {{is based}} on a database-centric {{architecture}} whose cross-DBMS data dictionary plays a central role in supporting data <b>security,</b> <b>validation,</b> optimization, and maintainability features. Base One holds a number of U.S. patents on its core technologies, with additional patents pending. Developers can incorporate BFC components into Windows applications written in any of the major Microsoft programming languages (Visual C++, C#, VB.NET, ASP.NET) and using a variety of technologies, including COM/ActiveX, MFC, Crystal Reports, and AJAX. BFC works with both managed and unmanaged code, and {{it can be used to}} construct either thin client or rich client applications, with or without browser-based interfaces.|$|E
5000|$|SafeBreach's {{primary product}} is a {{continuous}} <b>security</b> <b>validation</b> platform that constantly runs breach simulations on a client's network to theoretically and proactively locate and remediate security issues. The platform simulates hacker breach {{methods such as}} brute force, exploits, and malware. Using a library of hacker breach methods called the [...] "Hacker's Playbook," [...] SafeBreach develops potential breach scenarios specific to a client's environment and runs simulations to identify {{whether or not the}} security defenses that are in place can defend itself. There are thousands of different possible breach scenarios depending on a client's unique network setup.|$|E
5000|$|These {{tests are}} [...] "designed to test {{conformance}} {{to the various}} approved RNG specifications ratherthan provide a measure of a product’s <b>security.</b> ... Thus, <b>validation</b> should not be interpreted as an evaluation orendorsement of overall product security." [...] Few conclusions can be drawn about {{the security of the}} algorithm as a result; FIPS evaluations do not necessarily inspect source code or evaluate the way RNG seeds are generated.|$|R
5000|$|The data {{must remain}} {{meaningful}} {{for the application}} logic. For example, if elements of addresses are to be obfuscated and city and suburbs are replaced with substitute cities or suburbs, then, if within the application there is a feature that validates postcode or post code lookup, that function must still be allowed to operate without error and operate as expected. The same is also true for credit-card algorithm validation checks and Social <b>Security</b> Number <b>validations.</b>|$|R
40|$|We outline a {{model for}} a society of agents based upon one of the {{classical}} theories of sociology: The Weber's model. We first investigate its links to agent technology through its relationship with the modeling of micro economy and the concept of expected utility. Then, some of the features of an agent society are enhanced by imposing <b>security</b> and <b>validation</b> requirements. We show that a societal concept from Sociology can be implemented through methods of Computer Science and thus is made feasible...|$|R
5000|$|It is not {{possible}} to store every possible ASCII or UTF-8 string in a null-terminated string, as the encoding of the NUL character is a zero byte. However, it is common to store the subset of ASCII or UTF-8 -- every character except the NUL character -- in null-terminated strings. Some systems use [...] "modified UTF-8" [...] which encodes the NUL character as two non-zero bytes (0xC0, 0x80) and thus allow all possible strings to be stored. (this is not allowed by the UTF-8 standard as it is a security risk. A C0,80 NUL might be seen as a string terminator in <b>security</b> <b>validation</b> and as a character when used) ...|$|E
3000|$|... <b>security</b> <b>validation</b> is an {{independent}} quality control that acts as “first customer” during the transition from software development to release, i.e., <b>security</b> <b>validation</b> finds vulnerabilities after the code freeze (called correction close) and the actual release; [...]...|$|E
40|$|With ever {{advancing}} {{in digital}} system, security has been {{emerged as a}} major concern. Many researchers {{all around the world}} come up with solutions to address various challenges that are crucial for industry and market. The aim of this survey is a brief review of challenges of <b>security</b> <b>validation</b> as well as define and classify Hardware Trojans. Then, we provide more details about various validation techniques for hardware security and trust. Comment: 7 pages, 10 figure...|$|E
5000|$|Extensible Web Services: uses Microsoft technologies, such as SQL Server, Visual Studio and [...]Net, {{as well as}} {{industry}} standards, such as Web Services and XML, {{to increase}} real-time data sharing and integrate business processes throughout the organization. The Web Services layer works with the Business Services layer to provide <b>security,</b> policy <b>validations,</b> defaulting, and exception management for consumers of the Web service. These two tiers interact with Business Logic and Persistence layer within eConnect to provide scalable and reliable integration solutions.|$|R
5000|$|Network Security Toolkit (NST) is a Linux-based Live DVD/USB Flash Drive that {{provides}} a set of free and open-source computer security and networking tools to perform routine security and networking diagnostic and monitoring tasks. The distribution {{can be used as}} a network <b>security</b> analysis, <b>validation</b> and monitoring tool on servers hosting virtual machines. The majority of tools published in the article [...] "Top 125 security tools" [...] by Insecure.org are available in the toolkit. NST has package management capabilities similar to Fedora and maintains its own repository of additional packages.|$|R
50|$|Although not a {{shortcoming}} of data deduplication, {{there have}} been data breaches when insufficient <b>security</b> and access <b>validation</b> procedures are used with large repositories of deduplicated data. In some systems, as typical with cloud storage, an attacker can retrieve data owned by others by knowing or guessing the hash value of the desired data.|$|R
40|$|Abstract—Modern {{enterprise}} {{systems are}} often processbased, i. e., they {{allow for the}} direct execution of business processes that are specified in a high-level language such as BPMN. In this paper, we present a service, called <b>Security</b> <b>Validation</b> as a Service (SVaaS) for validating the compliance of the business processes during design-time. Basically, while modeling a business process the business analyst specifies as well the security and compliance requirements the business process should comply to. By pressing a button, these requirements are validated {{and the results are}} presented in a graphical format to the business analysis. At the core of SVaaS lies a rigorous and industrially viable approach in which the <b>security</b> <b>validation</b> business logic is handled server-side (SVaaS Server) in the Cloud, while the clientside user interface that business analysts use is handled by a light-weight SVaaS Connector. As proof-of-concept we created a SVaaS prototype in which the SVaaS Server is deployed on the SAP NetWeaver Cloud and two SVaaS Connectors are built to enable two well-known BPMN tools, SAP NetWeaver BPM and Activiti, to consume SVaaS against industrial relevant business processes. Keywords-Validation, Security, Business Process Management I...|$|E
30|$|While the {{technical}} steps for fixing an issue {{are the same}} {{regardless of whether the}} issue is in released code or currently developed code, the organizational aspects differ significantly: For vulnerabilities in unreleased development code, detecting, confirming, and fixing vulnerabilities are lightweight process defined locally by the development teams. Vulnerabilities detected by <b>security</b> <b>validation,</b> e.g., after the code freeze, even if in unreleased code, involve much larger communication efforts across different organizations for explaining the actual vulnerabilities to development as well as ensuring that the vulnerability is fixed before the product is released to customers.|$|E
40|$|Abstract. More {{and more}} {{industrial}} activities are captured through Business Processes (BPs). To evaluate whether a BP under-design enjoys certain security desiderata is hardly manageable by business analysts without tool support, as the BP runtime environment is highly dynamic (e. g., task delegation). Automated reasoning {{techniques such as}} model checking can provide the required level of assurance but suffer of well-known obstacles for the adoption in industrial systems, e. g. they require a strong logical and mathematical background. In this paper, we present a novel <b>security</b> <b>validation</b> approach for BPs that employs state-of-the-art model checking techniques for evaluating security-relevant aspects of BPs in dynamic environments and offers accessible user interfaces and apprehensive feedback for business analysts so to be suitable for industry. ...|$|E
40|$|This {{presentation}} was made {{as part of}} the Information Management and Information Assurance: Collection and Analysis Panel which considered some of the most innovative approaches to solving national <b>security</b> challenges involve <b>validation</b> and fusion of disparate information in an unsecure bandwidth-limited environment. The panel addressed the continuous balance between “need to know,” “need to share,” and effective knowledge management...|$|R
50|$|Security {{programs}} {{overseen by}} NIST and CSE focus on working with {{government and industry}} to establish more secure systems and networks by developing, managing and promoting security assessment tools, techniques, services, and supporting programs for testing, evaluation and validation; and addresses such areas as: development and maintenance of security metrics, security evaluation criteria and evaluation methodologies, tests and test methods; security-specific criteria for laboratory accreditation; guidance {{on the use of}} evaluated and tested products; research to address assurance methods and system-wide security and assessment methodologies; <b>security</b> protocol <b>validation</b> activities; and appropriate coordination with assessment-related activities of voluntary industry standards bodies and other assessment regimes.|$|R
40|$|Thanks to the Single European Sky ATM Research Programme (SESAR) and the Next Generation Air Transportation System (NextGen), the Air Traffic Management (ATM) {{community}} {{has access to}} a bunch of tools and methodologies to tackle various problem areas belonging to the ATM of the future. Although SESAR has also created the basis for validation regarding functionality of <b>security</b> prototypes, extensive <b>validation</b> expenditures in respect to tools, systems or prototypes in the ATM security domain have not yet been realized. This is indeed an emerging task when introducing security tools to ATM. The emerging challenges in the next generation ATM when looking at security still seem to be underestimated. This {{stems from the fact that}} ATM, when being addressed as a system of systems, not only gives attention to threat sources like those well-known from the cyber security area, but also to ATM specific sources like e. g. satellite communication or Air Traffic Control (ATC) radio communication. In order to establish security management tools in the ATM domain the Global ATM Security Management Project (GAMMA) started in 2013. The main goal of the project is to develop ideas to solve emerging air traffic management vulnerabilities. This intention is backed up by practical proposals for implementation. The paper will discuss a subset of the GAMMA project outcomes. This will especially deal with the Secure ATC Communications Prototype (SACom). The prototype will be used as an example to enrich the theoretical presented background with a more tangible contribution. Although the project is still on its way there have already been some first insights into the validation phase as several rehearsals already took place. These insights will be described in more detail in the paper. Furthermore the theoretically delivered <b>security</b> prototype <b>validation</b> approach will be mapped to the prototype at hand. The obtained results will be presented and a discussion of the first validation results will be executed. This paper therefore describes as well the postulated <b>security</b> prototype <b>validation</b> methodology as the application of the described methodology on a dedicated prototype for secure ATC voice communication. This may be used as the blueprint for validating other ATM security oriented systems...|$|R
40|$|Smartphones and “app ” {{markets are}} raising {{concerns}} about how third-party applications may misuse or improperly handle users’ privacy-sensitive data. Fortunately, {{unlike in the}} PC world, we have {{a unique opportunity to}} improve the security of mobile applications thanks to the centralized nature of app distribution through popular app markets. Thorough validation of apps applied as part of the app market admission process has the potential to significantly enhance mobile device security. In this paper, we propose AppInspector, an automated <b>security</b> <b>validation</b> system that analyzes apps and generates reports of potential security and privacy violations. We describe our vision for making smartphone apps more secure through automated validation and outline key challenges such as detecting and analyzing security and privacy violations, ensuring thorough test coverage, and scaling to large numbers of apps...|$|E
40|$|In {{this paper}} we present an {{original}} approach to generate attack scripts aiming at <b>security</b> <b>validation</b> {{of information systems}} and applications. The goal is to uncover potential vulnerabilities that an attacker could exploit to cause security failures of the system. We use attack modelling to specify the system flaws and derive the corresponding attack scenarios. The attack scenarios are refined to generic attack scripts using: attack pattern, event- condition-action rule, keyword-driven testing, and UML diagrams. The generic attack scripts are then converted to executable scripts for a testing tool. The generated attack scripts are in a format that is independent of the used tool, i. e., they are reusable. The executable attack scripts are able to simulated real attacks. Examples are provided to show the usage of the approac...|$|E
40|$|There is a {{need for}} {{assessing}} the security of smart cards by an independent third party, specially if multi-application smart cards become reality. Intuitively, the methods to obtain this could be derived from the computer industry where security evaluation already is commonplace, but because of the special properties of smart cards, this seems very difficult. The article discusses the problems related to this topic, and makes suggestions on how security evaluation of smart cards can be achieved. Introduction Key words: security evaluation smart cards <b>security</b> <b>validation</b> assurance ITSEC security through obscurity standards illegal cloning Subject classification: Security Verification and Evaluation. Smart cards form an important new class of computer systems which are highly suitable for security applications. In order to show the [need to have better security assurance in smart card systems, the first section illustrates that {{there is a lack of}} justification for the inherent se [...] ...|$|E
40|$|Operated by Los Alamos National Security, LLC for NNSA. "This {{presentation}} was made {{as part of}} the Information Management and Information Assurance: Collection and Analysis Panel which considered some of the most innovative approaches to solving national <b>security</b> challenges involving <b>validation</b> and fusion of disparate information in an unsecure bandwidth-limited environment. The panel addressed the continuous balance between “need to know,” “need to share,” and effective knowledge management...|$|R
40|$|The {{development}} of commercial real-time location system (RTLS) enables new ICT solutions. This paper presents an intelligent surveillance system for indoor high-security environments based on RTLS and artificial intelligence methods. The system consists of several software modules each specialized for detection of specific <b>security</b> risks. The <b>validation</b> {{shows that the}} system is capable of detecting a broad range of security risks with high accuracy. Povzetek: Predstavljen je varnostni sistem za nekaj sob z uporabo RTLS. ...|$|R
50|$|The {{principal}} {{objective of the}} NIAP Validation Body is to ensure the provision of competent IT <b>security</b> evaluation and <b>validation</b> services for both government and industry. The Validation Body has the ultimate responsibility for {{the operation of the}} CCEVS in accordance with its policies and procedures, and where appropriate: interpret and amend those policies and procedures. The NSA is responsible for providing sufficient resources to the Validation Body so that it may carry out its responsibilities.|$|R
40|$|Our {{objective}} in web security {{is to move}} black box to white box in enterprise practices. In this paper, we explain how our approaches achieve the goal in terms of static and dynamic analysis. To better explain the framework and roadmap of analysis work, we describe our approaches by using macro and micro views individually. Based on this foundation, we explore dynamic analysis in string validation and node tracking, and introduce micro and macro views to architect comprehensive approaches. Micro view {{is related to the}} mechanism inside the node, so the event triggers and string validation are both under its coverage. Macro view is related to the node tracking which is under investigation of pattern benchmarking. Our evaluation reflects that a configurable and well-tuned topology helps architectural collaboration, consequently it achieve a better security governance. This paper further explains the architectural coherence of identification, validation and tracking. It started with node identification with further exploration to the issue identification. Keywords: vulnerability, web <b>security,</b> <b>validation,</b> tracking, dominant, stati...|$|E
40|$|Biometric {{access control}} focuses on {{measurable}} physiological or behavioral trait to automatically and accurately authenticate or verify {{the identity of}} that person. Biometric characteristics must ideally be distinctive to the individual, easily acquired/measurable and able to be compared or encoded for the <b>security</b> <b>validation.</b> The characteristic should change little over time (i. e. aging) and be difficult to change, circumvent, manipulate, or reproduce by other means. The mainstream biometric technologies use morphological feature recognition such as fingerprints, hand geometry, iris and retina feature scanning, and face recognition based on extracting characteristics of the face. Each of these except face recognition is either intrusive or fails in some cases (for example: fingerprint identification is not possible for about 10 % of population with indistinct fingerprints). Current face recognition technologies use algorithms ranging from heuristics to artificial intelligence to locate facial features, such as the eye socket, cheekbones, and sides of the mouth, in two dimensional (2 D) black/white or color space. However, even the most sophisticate...|$|E
30|$|Let us have {{a closer}} look on how an {{externally}} reported vulnerability in a shipped software version is fixed: First, an external reporter (e.g., customer or independent security researcher) contacts the security response team, which assigns a case manager. The case manager is responsible for driving the decision if a reported problem is a security vulnerability {{that needs to be}} fixed, and for ensuring that the confirmed vulnerability is fixed and that a patch is released. After vulnerability is confirmed, the case manager contacts the development team and often also a dedicated maintenance team (called IMS) to ensure that a fix is developed and back-ported to all necessary older releases (according to SAP’s support and maintenance contracts). The developed fixes are subject to a special security test by the <b>security</b> <b>validation</b> team and, moreover, the response teams reviews the SAP Security Note. If the technical fix as well as the resulting Security Note passes the quality checks, the Security Note is made available to customers individually and/or {{in the form of a}} support package (usually on the first Tuesday of a month). Support packages are functional updates that also contain the latest security notes.|$|E
40|$|International audienceThis {{paper is}} aimed at {{formally}} specifying and validating security-design models of an information system. It combines graphical languages and formal methods, integrating specification languages such as UML and an extension, SecureUML, with the Z language. The modeled system addresses both functional and security requirements of a given application. The formal functional specification is built automatically from the UML diagram, using our RoZ tool. The secure part of the model instanciates a generic security-kernel written in Z, free from applications specificity, which models the concepts of RBAC (Role-Based Access Control). The final modeling step creates {{a link between the}} functional model and the instanciated <b>security</b> kernel. <b>Validation</b> is performed by animating the model, using the Jaza tool. Our approach is demonstrated on a case-study from the health care sector where confidentiality and integrity appear as core challenges to protect medical records...|$|R
40|$|AbstractIn {{the recent}} years, {{tasks such as}} the Security Requirements Elicitation, the Specification of Security Requirements or the <b>Security</b> {{requirements}} <b>Validation</b> are essential to assure the Quality of the resulting software. An increasing part of the communication and sharing of information in our society utilizes Web Applications. Last two years have seen a significant surge {{in the amount of}} Web Application specific vulnerabilities that are disclosed to the public because of the importance of Security Requirements Engineering for Web based systems and as it is still under estimated. There-fore a thorough Security Requirements analysis is even more relevant. In this paper, we propose a Model oriented Security Requirement Engineering Process for Web Applications and applied our Process for E-Voting system. By applying Modeling technologies to Requirement phases, the Security requirements and domain knowledge can be captured in a well-defined model and it is better than traditional process...|$|R
5000|$|Due {{to the way}} {{in which}} the {{validation}} process is set up, a software vendor is required to re-validate their FIPS-validated module for every change, no matter how small, to the software; this re-validation is required even for obvious bug- or <b>security</b> fixes. Since <b>validation</b> is an expensive process, this gives software vendors an incentive to postpone changes to their FIPS-validated for a long amount of time, resulting in software that does not receive security updates until the next validation. The result of that may be less safe software implementations of cryptography ...|$|R
