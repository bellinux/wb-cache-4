5|99|Public
50|$|Note: No limit {{means no}} {{enforced}} limit. For example, a VM with 1 TB of memory cannot {{fit in a}} host with only 8 GB memory and no memory <b>swap</b> <b>disk,</b> so {{it will have a}} limit of 8 GB physically.|$|E
40|$|This paper {{discusses}} our {{implementation of}} Rajasekaran's (l,m) -mergesort algorithm (LMM) for sorting on parallel disks. LMM is asymptotically optimal for large problems {{and has the}} additional advantage of a low constant in its I/O complexity. Our implementation is written in C using the ViC* I/O API for parallel disk systems. We compare the performance of LMM {{to that of the}} C library function qsort on a DEC Alpha server. qsort makes a good benchmark because it is fast and performs comparatively well under demand paging. Since qsort fails when the <b>swap</b> <b>disk</b> fills up, we can only compare these algorithms on a limited range of inputs. Still, on most out-of-core problems, our implementation of LMM runs between 1. 5 and 1. 9 times faster than qsort, with the gap widening with increasing problem size. 1. Introduction Researchers in many fields often wish to solve problems that are too large to fit into main memory, but traditional in-core methods are generally unable to handle very large se [...] ...|$|E
40|$|We have {{developed}} a stack of semantics for a high-level C-like language and low-level assembly code, which has been carefully crafted to support the pervasive verification of system software. It can handle mixed-language implementations and concurrently operating devices, and permits the transferral of properties to the target architecture while obeying its resource restrictions. We demonstrate the applicability of our framework by proving the correct virtualization of user memory in our microkernel, which implements demand paging. This verification target {{is of particular interest}} because it has a relatively simple top-level specification and it exercises all parts of our semantics stack. At the bottom level a disk driver written in assembly implements page transfers via a <b>swap</b> <b>disk.</b> A page-fault handler written in C uses the driver to implement the paging algorithm. It guarantees that a step of the currently executing user can be simulated at the architecture level. Besides the mere theoretical and technical difficulties the project also bore the social challenge to manage the large verification effort, spread over many sites and people, concurrently contributing to and maintaining a common theory corpus. We share our experiences and elaborate on lessons learned...|$|E
5000|$|Symmetrix Optimizer -- Dynamical <b>swap</b> <b>disks</b> {{based on}} {{workload}} ...|$|R
50|$|As megademos {{became more}} and more popular, the number of demoscreens {{available}} would increase in size and often span two or more disks, requiring the user to <b>swap</b> <b>disks</b> between the main menu and whichever demos resided on the second disk.|$|R
50|$|Loudness {{monitoring}} of programme levels {{is needed in}} radio and television broadcasting, {{as well as in}} audio post production. Traditional methods of measuring signal levels, such as the Peak programme meter and VU meter, do not give the subjectively valid measure of loudness that many would argue is needed to optimise the listening experience when changing channels or <b>swapping</b> <b>disks.</b>|$|R
40|$|With {{the cost}} per byte of memory {{approaching}} that of {{the cost per}} byte for disks, and with file systems increasingly distant from the host machines, {{a new approach to}} the implementation of virtual memory is necessary. Rather than preallocating swap space which limits the maximum virtual memory that can be supported {{to the size of the}} swap area, the system should support virtual memory up to the sum of the sizes of physical memory plus swap space. For systems with a local <b>swap</b> <b>disk,</b> but remote file systems, it may be useful to use some of the memory to keep track of the contents of the swap space to avoid multiple fetches of the same data from the file system. The new implementation should also add new functionality. Processes should be allowed to have large sparse address spaces, to map files into their address spaces, to map device memory into their address spaces, and to share memory with other processes. The shared address space may either be obtained by mapping a file into (possibly different) parts of their address space, or by arranging to share ‘‘anonymous memory’ ’ (that is, memory that is zero fill on demand, and whose contents are lost when the last proces...|$|E
40|$|The Daytona ™ data {{management}} system {{is used by}} AT&T to solve {{a wide spectrum of}} {{data management}} problems. For example, Daytona is managing a 4 terabyte data warehouse whose largest table contains over 10 billion rows. Daytona’s architecture is based on translating its high-level query language Cymbal ™ (which includes SQL as a subset) completely into C and then compiling that C into object code. The system resulting from this architecture is fast, powerful, easy to use and administer, reliable and open to UNIX ™ tools. In particular, two forms of data compression plus robust horizontal partitioning enable Daytona to handle terabytes with ease. 1. Daytona The Daytona ™ data management system is used by AT&T to solve a wide spectrum of data management problems. On the tiny end, Daytona provided the data manager for the DACS VI switch which only had 64 MB of memory at the time. Since DACS VI used a real-time UNIX operating system, virtual memory could not be paged to <b>swap</b> <b>disk.</b> Consequently, the entire application, including the 15 % that was allocated to the database, had to fit into the rather small amount of physical memory at all times. As another example, all of AT&T’s (phone) call detail data (which represents most of the company’...|$|E
50|$|Because {{mechanical}} disks {{have much}} {{longer and more}} unpredictable response times, <b>swapping</b> to <b>disk</b> files is not used {{for the same reasons}} as RAM allocation discussed above.|$|R
5000|$|GPU {{memory is}} {{automatically}} allocated as page-locked, since GPU memory {{does not support}} <b>swapping</b> to <b>disk.</b> To allocate page-locked memory on the host in CUDA language one could use [...]|$|R
50|$|If {{a process}} {{requests}} something {{for which it}} must wait, it will be blocked. When the process is in the blocked state, it is eligible for <b>swapping</b> to <b>disk,</b> but this is transparent in a virtual memory system, where regions of a process's memory may be really on disk and not in main memory at any time. Note that even unused portions of active processes/tasks (executing programs) are eligible for <b>swapping</b> to <b>disk.</b> All parts of an executing program and its data {{do not have to}} be in physical memory for the associated process to be active.|$|R
50|$|<b>Disk</b> <b>swapping</b> {{refers to}} the {{practice}} of inserting and removing, or <b>swapping,</b> floppy <b>disks</b> in a floppy disk drive-based computer system. In the early days of personal computers, before hard drives became commonplace, most fully outfitted computer systems had 2 floppy drives (addressed as A: and B: on CP/M and MS-DOS - other systems had different conventions). Disk drives were expensive, however, and having two was seen as a luxury by many computer users who had to make do with a single drive.|$|R
5000|$|Releases 3.1 and 3.1+ added WYSIWYG capabilities, {{the ability}} to <b>swap</b> to <b>disk</b> {{allowing}} for larger files (up to 64 MB), and could be run as a DOS program under Windows 3.0 and OS/2. Introduced in 1990.|$|R
50|$|<b>Disk</b> <b>swapping</b> was an infamous {{feature of}} early Macintosh 128K systems, which were {{extremely}} RAM starved.|$|R
40|$|Abstrmct-A {{file server}} is a utility {{provided}} {{in a computer}} connected via a local communications network {{to a number of}} other computer. File servers exist to preserve material for the benefit of client machines or systems. It is desirable for a file server to be able to support multi-ple ife directory and access management systems, so that the designer of a client system retains the freedom to design the system that best suits him. For example, he may wish to use the rile server to support a predefimed directory structure or as a <b>swapping</b> <b>disk.</b> The paper explores the dedgn issues associated with such a file server and pro-poses some solutions. Index Terms-Access control, directory, distributed computing, rile server, filing system, garbage collector...|$|R
5|$|Writers Ben Elton and Richard Curtis {{wrote the}} scripts for Blackadder episodes {{separately}} using word processors and then <b>swapped</b> the <b>disks</b> containing the scripts {{for each other}} to add or remove jokes and dialogue. Curtis recalls that they stuck to a policy whereby if one removed a line for not being funny, then it was never put back.|$|R
5000|$|Programs {{designed}} for calculating [...] may have better performance than general-purpose mathematical software. They typically implement checkpointing and efficient <b>disk</b> <b>swapping</b> to facilitate extremely long-running and memory-expensive computations.|$|R
50|$|The {{biggest problem}} with the Apple Pascal system was that the {{operating}} system was too big to fit on one floppy disk. This meant that on a system with only floppy <b>disk</b> drive, constant <b>swapping</b> of <b>disks</b> was {{needed in order to}} do anything. A system needed at least two and preferably three drives in order to use the operating system properly.|$|R
50|$|The server {{supported}} {{up to six}} 3.5 inch SATA or SAS hot <b>swap</b> hard <b>disk</b> drives. Upgrades to {{the server}} included conversion options to eight 2.5 inch hard disk drives or four 3.5 inch hard disk drives with an internal tape drive with external storage arrays. Power consumption was recorded as being 45W on standby, 203W with the OS on idle, and 289W with the processor’s capabilities tested intensively.|$|R
5000|$|Jonathan Maddock of Amiga Computing {{praised the}} {{interior}} levels for their [...] "brilliant" [...] soundtrack and [...] "dark and moody" [...] graphics, writing [...] "it really generates a spooky feeling within you." [...] However, Maddock criticized the tedious gameplay and wrote, [...] "The adventure comes on four disks {{and is not}} hard drive installable, so you'll spend {{quite a bit of}} time <b>swapping</b> <b>disks.</b> ... this becomes very annoying indeed." [...] Maddock concluded that although Jurassic Park [...] "looks like one of the best film licence tie-ins" [...] ever released for computers, the game [...] "unfortunately is let down by some really bad playability. This makes the game boring in parts and gamers are easily going to lose interest with it which is a crying shame because, it could've been a classic." [...] Rob Hayes of Amazing Computing wrote, [...] "The biggest problem is that Jurassic Park uses disk-based copy protection, meaning no hard drive installation. Long load times between sections, and switching four disks around should not be necessary in 1994." ...|$|R
50|$|Disk Copy {{was also}} {{the name of an}} Apple utility {{distributed}} with some of the earliest versions of the classic Mac OS. In order to copy 400K floppy disks using as few <b>disk</b> <b>swaps</b> as possible on a machine with only 128K of RAM, the original Disk Copy used the screen buffer to store binary data from the disk being copied; as a result, the screen (other than a small area at the bottom displaying the GUI) filled with noise while copying was in progress. It was shipped with System 1.1 and System 2.0, probably as a reaction to a bug in the first version of Finder causing excessive <b>disk</b> <b>swaps.</b>|$|R
5000|$|Wozniak {{remains an}} {{employee}} of Apple and receives a stipend, estimated to be $120,000 per year. He is also an Apple shareholder. He also maintained a fine acquaintance with Steve Jobs until Jobs' death in October 2011, although, in 2006, Wozniak stated that he and Jobs were not as close {{as they used to}} be. In a 2013 interview, Wozniak said that the Macintosh [...] "failed" [...] under Steve Jobs, and that it was not until Jobs left that it became a success. Jobs called the Apple Lisa group, the team that had kicked Jobs out, idiots for making the Lisa computer too expensive. To compete with the Lisa, Jobs and his new team produced a cheaper computer, one that, according to Wozniak, was [...] "weak", [...] "lousy" [...] and [...] "still at a fairly high price". [...] "He made it by cutting the RAM down, by forcing you to <b>swap</b> <b>disks</b> here and there", says Wozniak. He attributed the eventual success of the Macintosh to people like John Sculley [...] "who worked to build a Macintosh market when the Apple II went away".|$|R
5|$|The {{episode was}} written by Richard Curtis and Ben Elton, who <b>swapped</b> {{computer}} <b>disks</b> to make edits. They stuck to a rule whereby they could not add back material the other had removed. The script was collaboratively edited by the cast members of Blackadder Goes Forth during read-throughs. Elton was primarily responsible for the sequence in which Blackadder explains how the First World War started; the running gag of Baldrick using mud and bodily fluids to make coffee throughout the episode was greatly expanded during rehearsals.|$|R
5000|$|In DOS, drives are {{referred}} to by identifying letters. Standard practice is to reserve [...] "A" [...] and [...] "B" [...] for floppy drives. On systems with only one floppy drive DOS assigns both letters to the drive, prompting the user to <b>swap</b> <b>disks</b> as programs alternate access between them. This facilitates copying from floppy to floppy or having a program run from one floppy while accessing its data on another. Hard drives were originally assigned the letters [...] "C" [...] and [...] "D". DOS could only support one active partition per drive. As support for more hard drives became available, this developed into first assigning a drive letter to each drive's active primary partition, then making a second pass over the drives to allocate letters to logical drives in the extended partition, then a third pass to give any other non-active primary partitions their names (where such additional partitions existed and contained a DOS-supported file system). Lastly, DOS allocates letters for optical disc drives, RAM disks, and other hardware. Letter assignments usually occur in the order the drivers are loaded, but the drivers can instruct DOS to assign a different letter; drivers for network drives, for example, typically assign letters nearer {{the end of the}} alphabet.|$|R
50|$|SCSI-3 devices with SCA-2 {{connectors}} {{are designed}} for hot swapping. Many server and RAID systems provide hardware support for transparent hot swapping. The designers of the SCSI standard prior to SCA-2 connectors did not target hot swapping, but in practice, most RAID implementations support hot <b>swapping</b> of hard <b>disks.</b>|$|R
50|$|Bain {{gets there}} first and kills the four Dutch buyers, who {{turn out to}} be Interpol agents. Rath, meanwhile, spares Electra, and the two escape from Bain with the disk. Rath exchanges the disk for his fee, given to him in a briefcase, which {{actually}} contains a bomb placed by his own contractor in an attempt to kill him. Electra then tells him she had <b>swapped</b> the <b>disk,</b> not sure if Rath was coming back. Rath demands a greatly increased fee from his contractor, this time to be wired to a bank.|$|R
5000|$|Occasionally {{it got a}} bit frosty and negative. But, {{generally}} speaking, it {{was just}} people {{staring at the ceiling}} and thinking about a line for 25 minutes. It was fun but tiring. Very tiring. Rowan Atkinson(2003) Writers Ben Elton and Richard Curtis wrote the scripts for Blackadder episodes separately using word processors and then <b>swapped</b> the <b>disks</b> containing the scripts for each other to add or remove jokes and dialogue. Curtis recalls that they stuck to a policy whereby if one removed a line for not being funny, then it was never put back.|$|R
50|$|Many home {{computers}} had a cartridge interface which accepted ROM-based software. This {{was also used}} for expansion or upgrades such as fast loaders. Application software on cartridge did exist, which loaded instantly and eliminated the need for <b>disk</b> <b>swapping</b> on single drive setups, {{but the vast majority}} of cartridges were games.|$|R
2500|$|Despite leaving Apple as {{a day-to-day}} {{employee}} in 1985, Wozniak chose to never remove {{himself from the}} official employee list, and continues to represent the company at events or in interviews. Today he receives a stipend from Apple for this role, estimated to be $120,000 per year. He is also an Apple shareholder. He maintained a friendly acquaintance with Steve Jobs until Jobs' death in October 2011, however, in 2006, Wozniak stated that he and Jobs were not as close {{as they used to}} be. In a 2013 interview, Wozniak said that the original Macintosh [...] "failed" [...] under Steve Jobs, and that it was not until Jobs left that it became a success. He called the Apple Lisa group the team that had kicked Jobs out, and that Jobs liked to call the Lisa group [...] "idiots for making [...] too expensive". To compete with the Lisa, Jobs and his new team produced a cheaper computer, one that, according to Wozniak, was [...] "weak", [...] "lousy" [...] and [...] "still at a fairly high price". [...] "He made it by cutting the RAM down, by forcing you to <b>swap</b> <b>disks</b> here and there", says Wozniak. He attributed the eventual success of the Macintosh to people like John Sculley [...] "who worked to build a Macintosh market when the Apple II went away".|$|R
2500|$|The Macintosh {{contained}} a single 400KB, single-sided 3.5-inch floppy disk drive, dedicating no space to other internal mechanical storage. The Mac OS was disk-based from the beginning, as RAM {{had to be}} conserved, but this [...] "Startup Disk" [...] could still be temporarily ejected. (Ejecting the root filesystem remained an unusual feature of the classic Mac OS until System 7.) One floppy disk was sufficient to store the System Software, an application and the data files created with the application. Indeed, the 400KB drive capacity was larger than the PC XT's 360KB 5.25-inch drive. However, more sophisticated work environments of the time required separate disks for documents and the system installation. Due to the memory constraints (128 KB) of the original Macintosh, {{and the fact that}} the floppies could hold 400 KB, users frequently had to <b>swap</b> <b>disks</b> in and out of the floppy drive. [...] For this reason, external floppy drives were frequently used. [...] The Macintosh External Disk Drive (mechanically identical to the internal one, piggybacking on the same controller) was a popular add-on at US $495. Third-party hard drives were considerably more expensive and usually connected to the slower serial port (as specified by Apple), though a few manufacturers chose to use the faster non-standard floppy port. The 128K can only use the original Macintosh File System for storage.|$|R
50|$|Eagles were {{marketed as}} {{business}} machines, so financial software {{had to be}} part of the package. Originally this was Accounting Plus, a professional bookkeeping system so large that it took six Eagle double-sided 784 kB floppy disks to hold it all, and required constant <b>disk</b> <b>swapping</b> on an Eagle without a hard disk.|$|R
500|$|The disk {{loading time}} was the most criticised aspect from reviewers. Houghton found the loading times [...] "hefty" [...] and {{recommended}} that the player use two disk drives instead of one, as constant <b>disk</b> <b>swapping</b> was required in the game. Ricketts similarly found the swapping of [...] "half a dozen" [...] floppy disks a [...] "nightmare" [...] on the Atari ST. Keating found the [...] "huge" [...] amount of <b>disk</b> <b>swapping</b> to be the game's largest drawback, {{as well as the}} long loading times that accompanied it. Davies stated that scrolling times were [...] "painfully slow" [...] due to the excessive disk accessing. White stated that the game had a disk access routine [...] "so bad" [...] that it was almost impossible to access icons during gameplay, as the cursor movement was always a second behind actual mouse movements.|$|R
30|$|Simply {{having a}} number of disks running in a storage system is not a {{reflection}} of RAID implementation. Such disks act independent of each other, and are usually used to host meant for spooling data or <b>swap</b> files. These <b>disks</b> are not managed by any RAID level, and are defined as “Just a Bunch of Disks” or JBOD.|$|R
50|$|Conky {{is a free}} {{software}} system monitor for the X Window System. It is available for Linux, FreeBSD, and OpenBSD. Conky is highly configurable {{and is able to}} monitor many system variables including the status of the CPU, memory, <b>swap</b> space, <b>disk</b> storage, temperatures, processes, network interfaces, battery power, system messages, e-mail inboxes, Arch Linux updates, many popular music players (MPD, XMMS2, BMPx, Audacious, etc.), weather updates, breaking news, and much more. Unlike system monitors that use high-level widget toolkits to render their information, Conky is drawn directly in an X window. This allows it to consume relatively fewer system resources when configured similarly.|$|R
50|$|The initial {{versions}} of the system provided no support for virtual memory and address translation. Only one active user could reside in core memory at any time. <b>Swapping</b> (to <b>disk)</b> was used to time-share between different users, and a variable-length timeslice was used. Virtual memory support was introduced in 1985. This allowed multiple users to be in core memory at the same time, removed many of the restrictions {{in the size of}} the programs that could be run and provided a significant performance improvement. System performance was also improved by pre-loading commonly used modules into virtual memory at startup time where they could be available to all users simultaneously.|$|R
50|$|Universe {{is a very}} {{involving}} game, like {{requiring the}} player to calculate hyperjump coordinates for the navigation computer and calculate minimum orbits for planets in order to launch shuttles. The speed of the game tended to bog down when graphics were involved and when the game performed calculations involving orbital mechanics. On the Atari, having only one disk drive resulted in numerous <b>disk</b> <b>swaps.</b>|$|R
