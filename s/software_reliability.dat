1350|394|Public
25|$|Sun, H., Basu, S., Honavar, V., and Lutz, R. (2010). Automata-Based Verification of Security Requirements of Composite Web Services. In: Proceedings of the IEEE International Symposium on <b>Software</b> <b>Reliability</b> Engineering (ISSRE-2010). pp.348–357, IEEE Press.|$|E
25|$|The {{software}} domain is not {{an isolated}} entity. There are many instances of overlap of software related subject matter with the domains of other IACs such as reliability, information assurance and modeling and simulation. For example, <b>software</b> <b>reliability</b> is a subtopic of the broader topic of system reliability. Software assurance is intertwined with the subject of Information Assurance. Software technology is a significant part of modeling and simulation.|$|E
25|$|Commodore had a {{reputation}} for announcing products that never appeared, so sought to quickly ship the C64. Production began in spring 1982 and volume shipments began in August. The C64 faced a wide range of competing home computers, but with a lower price and more flexible hardware, it quickly outsold many of its competitors. In the United States the greatest competitors were the Atari 8-bit 400, the Atari 800, and the AppleII. The Atari 400 and 800 had been designed to accommodate previously stringent FCC emissions requirements and so were expensive to manufacture. The latest revision in the aging Apple II line, the Apple IIe, had higher-resolution graphics modes than the C64. Though similar in specifications, the two computers represented differing design philosophies; as an open architecture system, upgrade capability for the Apple II was granted by internal expansion slots, whereas the C64's comparatively closed architecture had only a single external ROM cartridge port for bus expansion. However, the Apple II used its expansion slots for interfacing to common peripherals like disk drives, printers, and modems; the C64 had a variety of ports integrated into its motherboard which were used for these purposes, usually leaving the cartridge port free. Commodore's was not a completely closed system, however; the company had published detailed specifications for most of their models since the PET and VIC-20 days, and the C64 was no exception. Initial C64 sales were nonetheless relatively slow {{due to a lack of}} <b>software,</b> <b>reliability</b> issues with early production models, and a shortage of 1541 disk drives, which also suffered rather severe reliability issues. During 1983 however, a trickle of software turned into a flood and sales began rapidly climbing, especially with price cuts from $600 to just $300.|$|E
40|$|Abstract: Although, direct {{economic}} information’s are, in general, {{difficult to}} obtain through reason connected of confidentialities. Currently is observe the relation cost-benefit {{in the case of}} the using the <b>software</b> engineering <b>reliability</b> can be from one to six or upwards. More, the <b>software</b> engineering <b>reliability</b> it was credited with the incidents abatement considering to security software related, as well as the costs of servicing. Key-Words: <b>software</b> engineering, security, <b>reliability,</b> totally cost of software system. 1...|$|R
40|$|Although, direct {{economic}} information’s are, in general, {{difficult to}} obtain through reason connected of confidentialities. Currently is observe the relation cost-benefit {{in the case of}} the using the <b>software</b> engineering <b>reliability</b> can be from one to six or upwards. More, the <b>software</b> engineering <b>reliability</b> it was credited with the incidents abatement considering to security software related, as well as the costs of servicing...|$|R
40|$|Conception of <b>software</b> {{testing process}} <b>reliability</b> {{increasing}} and category neuronet model of <b>software</b> testing process <b>reliability</b> increasing {{at the expense}} of software hidden mistakes identification is described. Technique of evaluation of software hidden mistakes identification reliability on base proposed model is adduced...|$|R
2500|$|Some DACS {{reports have}} been {{published}} in peer-reviewed journals and collections. Some DACS work is referenced in the professional literature. For example, Warren Harrison et al. and Raffo et al. cite both Vienneau and Thomas McGibbon, the DACS Program Manager. Rini van Solingen cites McGibbon. David F. Rico acknowledges Thomas McGibbon for [...] "inspirational" [...] work that has [...] "been critical to the formation of concepts in this book". Hossam A. Gabbar and Almstrum et al. cite Vienneau. Michael R. Lyu cites a DACS implementation of the Goel-Okumoto <b>software</b> <b>reliability</b> model, distributed by the DACS at the time.|$|E
50|$|SAE JA1002 {{is based}} around the <b>Software</b> <b>Reliability</b> Plan and <b>Software</b> <b>Reliability</b> Case. The <b>Software</b> <b>Reliability</b> Case {{can be created}} or {{maintained}} to {{serve the needs of}} a support organization in sustaining reliability objectives and be used to supply the data needed by independent, regulatory, and/or third party certification bodies.|$|E
50|$|As with hardware, <b>software</b> <b>reliability</b> {{depends on}} good requirements, design and implementation. <b>Software</b> <b>reliability</b> {{engineering}} {{relies heavily on}} a disciplined software engineering process to anticipate and design against unintended consequences. There is more overlap between software quality engineering and <b>software</b> <b>reliability</b> engineering than between hardware quality and reliability. A good software development plan is a key aspect of the <b>software</b> <b>reliability</b> program. The software development plan describes the design and coding standards, peer reviews, unit tests, configuration management, software metrics and software models to be used during software development.|$|E
40|$|The performance-based {{engineering}} approach, {{as opposed}} to prescriptive rules of code-based design, is based on simulation of real structural behavior. Reliability of the expected performance state is assessed by using various methodologies based on finite element nonlinear static pushover analysis and specialized <b>reliability</b> <b>software</b> package. <b>Reliability</b> approaches that were considered included full coupling with an external finite element code based methods in conjunction with either first order reliability method or importance sampling method...|$|R
5000|$|... #Article: RAMP Simulation <b>Software</b> for Modelling <b>Reliability,</b> Availability and Maintainability ...|$|R
40|$|INTRODUCTION While the {{employment}} of systematic design and development practices results in increasingly reliable software, some errors are still likely {{to be present in}} the software. The goal of testing is to expose hidden errors by exercising the software on a set of test cases. In its simplest form, a test case consists of program inputs and corresponding expected outputs. Once the software has successfully gone through the testing phase, we have a greater degree of condence in the <b>software's</b> <b>reliability.</b> <b>Software</b> testing is very labor intensive and hence also expensive. It can account for 50 % of the total cost of software development [6]. Therefore tools that automate one or more aspects of testing can greatly help in managing the overall cost of testing. Testing techniques can be broadly classied into two categories, functional and structural. Functional testing is concerned with functionality rather than implementation of the program. T...|$|R
50|$|The Centre for <b>Software</b> <b>Reliability</b> (CSR) is a {{distributed}} British organisation {{concerned with}} <b>software</b> <b>reliability,</b> including safety-critical issues. It {{consists of two}} sister organisations based at Newcastle University, UK. and City, University of London, London.|$|E
50|$|<b>Software</b> <b>reliability</b> {{testing is}} a field of {{software}} testing that relates to testing a software's ability to function, given environmental conditions, for a particular amount of time. <b>Software</b> <b>reliability</b> testing helps discover many problems in the software design and functionality.|$|E
5000|$|Prof. Florin POPENTIU VLÃDICESCU is {{currently}} Visiting Professor at [...] "ParisTech"http://www.paristech.fr/index.php/eng {{which includes the}} [...] "Grandes Ecoles", The ATHENS Programme, where he teaches courses on <b>Software</b> <b>Reliability</b> http://db.intersek.ntnu.no/athens/catalog/show/744 [...] He also lectures on <b>Software</b> <b>Reliability</b> at International Master of Science in Computer Systems Engineering - Technical University of Denmark http://www.imm.dtu.dk/English/Teaching/IMM%20Courses.aspx?coursecode=02228 [...]|$|E
5000|$|<b>Software</b> Systems <b>Reliability</b> and Security — Volume 9, NATO Security through Science Series: Information and Communication Security (Nato Security Through … D: Information and Communication Security) by Manfred Broy, Johannes Grunbauer, and Tony Hoare (2007) ...|$|R
5000|$|Preventive - {{increasing}} <b>software</b> maintainability or <b>reliability</b> {{to prevent}} {{problems in the}} future ...|$|R
40|$|AbstractThe performance-based {{engineering}} approach, {{as opposed}} to prescriptive rules of code-based design, is based on simulation of real structural behavior. Reliability of the expected performance state is assessed by using various methodologies based on finite element nonlinear static pushover analysis and specialized <b>reliability</b> <b>software</b> package. <b>Reliability</b> approaches that were considered included full coupling with an external finite element code based methods in conjunction with either first order reliability method or importance sampling method. The building considered in the actual study has been designed against seismic hazard according to the Moroccan code RPS 2000...|$|R
50|$|<b>Software</b> <b>Reliability,</b> Security and Cryptography, Software Engineering, E-Learning Database Management System.|$|E
50|$|<b>Software</b> <b>reliability</b> testing {{includes}} feature testing, load testing, and regression testing.|$|E
50|$|<b>Software</b> <b>reliability</b> is {{measured}} in terms of mean time between failures (MTBF).|$|E
40|$|Abstract. Auto-loading {{system is}} as an {{important}} part of weapons and equipment, its work reliability determines the combat effectiveness and their own safety of weapon systems. As the core of the automatic loading system control, the control <b>software’s</b> <b>reliability</b> of automatic loading system is especially important. In introducing the importance of software testing, from the basic method of software testing starts, design methods is detailing on test and a case of black box test of the automatic loading system, and finally, combined with the equip software testing, software evaluation model was constructed, Results consistent with test results from platform, shooting range, altitude, cold regions, thermal zone, they are proved the software testing and evaluation are valid...|$|R
5000|$|<b>Reliability</b> (<b>Software</b> durability) - The {{software}} {{is able to}} perform a required function under stated conditions for a specified period of time.|$|R
40|$|Progress {{is being}} made toward being able to {{calculate}} <b>software</b> system <b>reliability</b> from {{the reliability of the}} components and information about the structure of their interactions. This paper enumerates the outstanding problems and provides solutions, or pointers to solutions, for each. 1 Introduction <b>Software</b> system <b>reliability</b> estimates are typically based upon data collected while testing the system as a whole [6]. However, there is growing interest in estimating system reliability from the reliabilities of its constituent components. This technique is both pragmatically appealing, and supportive of the treatment of software development as an engineering discipline. Pragmatically, the technique has potential for increasing the cost-effectiveness of reliability estimation and encouraging code reuse by creating a market for components with certified reliabilities. It also supports the transformation of software engineering into a discipline more like that of "traditional " engineeri [...] ...|$|R
50|$|The Motor Industry <b>Software</b> <b>Reliability</b> Association C++ coding {{standard}} references High Integrity C++.|$|E
50|$|Design {{issues for}} IFE include system safety, cost efficiency, <b>software</b> <b>reliability,</b> {{hardware}} maintenance, and user compatibility.|$|E
50|$|Michael R. Lyu, Ph.D., is a {{software}} engineer. He {{is now a}} professor at the Chinese University of Hong Kong in Shatin, Hong Kong. Michael is well known to the software engineering community as the editor of two classic book volumes in <b>software</b> <b>reliability</b> engineering: Software Fault Tolerance and the Handbook of <b>Software</b> <b>Reliability</b> Engineering. Both books have also been translated into Chinese and published in China.|$|E
40|$|We {{propose a}} <b>Software</b> Architecture <b>Reliability</b> Analysis (SARA) {{approach}} that benefits from both reliability engineering and scenario-based software architecture analysis {{to provide an}} early reliability analysis of the software architecture. SARA makes use of failure scenarios that are prioritized {{with respect to the}} user-perception in order to provide a severity analysis for the software architecture and the individual components...|$|R
40|$|Over {{the last}} 20 years, software's impact on embedded-system functionality, {{as well as}} on the {{innovation}} and differentiation potential of new products, has grown rapidly. This has led to an enormous increase in software complexity, shorter innovation cycle times, and an ever-growing demand for extrafunctional requirements - <b>software</b> safety, <b>reliability,</b> and timeliness, for example - at affordable costs...|$|R
40|$|The scripts {{part of this}} release {{support the}} results {{presented}} in the paper "Quantifying the Impact of Replication on the Quality-of-Service in Cloud Databases", by R. Osman, J. F. Perez, and G. Casale, accepted in IEEE International Conference on <b>Software</b> Quality, <b>Reliability,</b> and Security (QRS) 2016. When referring to the dataset or scripts please cite the paper above...|$|R
5000|$|The Motor Industry <b>Software</b> <b>Reliability</b> Association {{identifies}} the required steps {{in case of}} an error as follows: ...|$|E
5000|$|This article covers testing <b>software</b> <b>reliability</b> under {{unexpected}} or rare (stressed) workloads. See {{also the}} closely related: ...|$|E
5000|$|The {{company also}} placed #2 in Ease of Installation & Integration and Leaders in <b>Software</b> <b>Reliability</b> that year.|$|E
5000|$|The journal publishes {{research}} papers, state-of-the-art surveys, {{and practical}} experience reports. It includes papers covering issues of programming methodology, software engineering, and hardware/software systems. Topics include: [...] "software systems, prototyping issues, high-level specification techniques, procedural and functional programming techniques, data-flow concepts, multiprocessing, real-time, distributed, concurrent, and telecommunications systems, <b>software</b> metrics, <b>reliability</b> models for <b>software,</b> performance issues, and management concerns." ...|$|R
5000|$|The {{firmware}} on any Rio Forge can {{be easily}} upgraded with the Rio firmware upgrade utility. To complete the firmware upgrade, plug the unit into the USB port of your computer, then run the utility to upgrade the Rio Forge. This 2-minute procedure will fix any <b>software</b> related <b>reliability</b> issues that were present in older firmware.|$|R
30|$|Software {{failures}} {{or design}} defects affect <b>software</b> stability and <b>reliability,</b> and {{may result in}} safety incidents. Therefore, failures and defects can be avoided by providing sufficient aging information.|$|R
