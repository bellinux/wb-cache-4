167|274|Public
25|$|In {{the early}} 1980s, Evans & Sutherland (E) {{decoupled}} their PS300 graphics processor/display, which contained its own display information transformable through a dataflow architecture. Complex graphical objects could be downloaded over a <b>serial</b> <b>line</b> (e.g. 9600, 56K baud) or Ethernet interface and then manipulated without {{impact on the}} host. The architecture was excellent for high performance display but very inconvenient for domain-specific calculations, such as electron-density fitting and energy calculations. Many crystallographers and modellers spent arduous months trying to fit such activities into this architecture. E designed a card for the PS-300 which had several calculation algorithms using a 100 bit wide finite state machine {{in an attempt to}} simplify this process but it was so difficult to program that it quickly became obsolete.|$|E
25|$|Adding {{a second}} <b>serial</b> <b>line</b> to the device, and adding another {{latching}} region {{would allow for}} the latching of two input values at the two different outputs. To perform computation, a gate that takes as inputs both serial lines at their respective outputs is added. The gate is placed over a new latching region configured to process data only when both latching regions {{at the end of}} the serial lines hold the values of interest at the same instant. Figure 10 shows such an arrangement. If correctly configured, latching regions 5 and 6 will each hold input values of interest to latching region 7. At this instant, latching region 7 will let the values latched on regions 5 and 6 through the AND gate, thus the output could be configured to be the AND result of any two inputs (i.e. R and Q) by merely configuring the latching regions 5, 6 and 7.|$|E
5000|$|Some people {{refer to}} the {{successful}} and widely used [...] <b>Serial</b> <b>Line</b> Internet Protocolas [...] "Rick Adams' SLIP",to avoid confusion with other proposed protocols named [...] "SLIP".Those other protocols include the much more complicated [...] appendix D <b>Serial</b> <b>Line</b> Interface Protocol.|$|E
50|$|Ethernet was {{provided}} by the SGEC (Second-Generation Ethernet Controller) chip. SCSI {{was provided}} by the NCR 53C94, which connected to the EDAL bus. <b>Serial</b> <b>lines</b> were provided by a DC7085 quad UART. The four <b>serial</b> <b>lines</b> were used for the keyboard, mouse, modem and printer/console. A 64-entry FIFO queue was provided for all four <b>serial</b> <b>lines</b> and was implemented by a small external SRAM. Voice-quality sound {{was provided by}} an AMD Am79C30.|$|R
50|$|IÂ²C {{uses only}} two {{bidirectional}} open-drain <b>lines,</b> <b>Serial</b> Data <b>Line</b> (SDL) and <b>Serial</b> Clock <b>Line</b> (SCL), pulled up with resistors. Typical voltages used are +5 V or +3.3 V, although systems with other voltages are permitted.|$|R
50|$|The Point-to-Point Protocol (PPP) is a {{data link}} layer {{protocol}} that can operate over several different physical layers, such as synchronous and asynchronous <b>serial</b> <b>lines.</b>|$|R
50|$|<b>Serial</b> <b>Line</b> Internet Protocol (SLIP). SLIP-based {{connections}} {{will automatically}} be updated to PPP-based connections.|$|E
5000|$|Either {{a device}} name (to use a <b>serial</b> <b>line)</b> or a TCP {{hostname}} and portnumber, and ...|$|E
50|$|A {{serial port}} {{could also be}} used for a dial-up Internet {{connection}} using a serial modem and PPP. In this case, a PPP line discipline would be used; it would accumulate input data from the <b>serial</b> <b>line</b> into PPP input packets, delivering them to the networking stack rather than to the character device, and would transmit packets delivered to it by the networking stack on the <b>serial</b> <b>line.</b>|$|E
50|$|In the 1950s, {{the concept}} {{inspired}} {{a number of}} European composers including Karlheinz Stockhausen to attempt systematization of timbre along <b>serial</b> <b>lines,</b> especially in electronic music.|$|R
40|$|This paper {{documents}} {{an investigation}} of drum-buffer-rope (DBR) scheduling and flow control methodology in single-product <b>serial</b> production <b>lines.</b> In particular, DBR flow control is reviewed {{and the importance of}} correctly representing this type of flow control mechanism in <b>serial</b> <b>lines</b> is discussed. Departures from valid DBR conceptual and simulation modeling are illustrated. It is shown that the model of a previously published paper is a push system not a DBR system, and that related conclusions regarding protective capacity and constraint location are unsupported. Correct modeling of DBR flow control is shown using discrete simulation experiments that compare the DBR model and a similar push model. Suggestions for additional research are offered. Drum-buffer-rope <b>Serial</b> <b>lines</b> Theory of constraints Protective capacity Protective inventory...|$|R
50|$|These {{systems have}} four {{asynchronous}} <b>serial</b> <b>lines</b> that {{are provided by}} a DC7085 gate array. Of the four <b>serial</b> <b>lines,</b> only the third line has the required modem control signals to support a modem. A 4-pin MMJ connector is provided for the keyboard line, a 7-pin DIN connector for mouse line, and two 6-pin MMJ connectors for printer and modem lines. The real time clock is a Motorola MC146818, which also has 50 bytes of RAM for storing console configuration information, and the 256 KB of ROM for storing boot-strap and self-test software is provided by two 128 KB ROMs in DIP sockets.|$|R
5000|$|The 16450(A) UART, {{commonly}} used in IBM PC/AT-series computers, improved on the 8250 by permitting higher <b>serial</b> <b>line</b> speeds.|$|E
5000|$|Keyword Protocol 2000 (KWP2000) - a {{protocol}} for automotive diagnostic devices (runs either on a <b>serial</b> <b>line</b> or over CAN) ...|$|E
5000|$|A {{device name}} (for a <b>serial</b> <b>line)</b> or the IP address and port number needed for {{connection}} to the target system.|$|E
25|$|Unique {{implementations}} include Lightweight TCP/IP, an {{open source}} stack designed for embedded systems, and KA9Q NOS, a stack and associated protocols for amateur packet radio systems and personal computers connected via <b>serial</b> <b>lines.</b>|$|R
50|$|The M70 was {{developed}} between 1982 and 1984. It was a quad Q-bus module {{based on the}} J-11 chipset incorporating on-board ECC DRAM, bootstrap EPROMs and 4 <b>serial</b> <b>lines</b> implemented using DEC DC319 DLART chips.|$|R
50|$|In {{the early}} 1980s, 3Com's UNET Unix system could {{exchange}} TCP/IP traffic over <b>serial</b> <b>lines.</b> In 1984 Adams implemented this system on Berkeley Unix 4.2 and dubbed it SLIP. The SLIP protocol was documented in RFC 1055.|$|R
50|$|For example, in a <b>serial</b> <b>line</b> with a {{baud rate}} of 2.5 Gbit/s, a unit {{interval}} is 1/(2.5 Gbit/s) = 0.4 ns/baud.|$|E
50|$|Support for Ethernet alike network {{interface}} over <b>Serial</b> <b>line</b> IP (using 8250 UART), CSLIP, Parallel line IP, IPX, Token ring, LocalTalk, ARCNET.|$|E
5000|$|Visibility {{and control}} of <b>serial</b> <b>line</b> signals such as DSR, DCD, CTS, DTR. The {{redirector}} {{may be able to}} sufficiently emulate these signals.|$|E
50|$|The Multi-Line {{was capable}} of driving {{multiple}} 19.2Kb RS485 <b>serial</b> <b>lines</b> in a multi-drop configuration. The serial I/O was polled. A given terminal would wait until it was addressed, and grab the line and send any data it had pending.|$|R
5000|$|In many {{circumstances}} a transmitter {{might be}} able to send data faster than the receiver is able to process it. To cope with this, <b>serial</b> <b>lines</b> often incorporate a [...] "handshaking" [...] method, usual distinguished between hardware and software handshaking.|$|R
40|$|The {{focus of}} {{production}} {{system is to}} analyze, improve, and control the flow of products in the manufacturing process. In the field of study, the major difficulties are unreliable machines and finite buffers capacities, which lead to nonlinear and stochastic mathematical models. Extensive results on production systems have been derived for steady state operations, while their transient performance and properties are also of practical importance but paid with significantly less attention. In this dissertation, we study the problems of transient performance evaluation, bottleneck analysis, and production control of <b>serial</b> <b>lines,</b> closed lines and assembly systems. Specifically, {{in the framework of}} finite production run-based <b>serial</b> <b>lines</b> with Bernoulli/ geometric machine reliability model, we derive mathematical model and analytical formulas to evaluate the performance measures of small systems. Then, we propose computationally efficient algorithms based on decomposition and aggregation for large systems, to approximate the systems performance measures with high accuracy. For closed lines and assembly systems, based on Markovian analysis, we develop the mathematical models and propose approximation methods for transient performance evaluation. For <b>serial</b> <b>lines</b> with Bernoulli machines and with operation control, mathematical models for the system under consideration are derived and analytical methods are developed for calculating the system transient performance. One effective and efficient approach of analyzing transient performance of <b>serial</b> <b>lines,</b> closed lines and assembly systems is present in this dissertation. Bottlenecks, theoretic properties and control of the systems are studied under the transient analysis. Extension of the results to systems with exponential or non-Markovian models, adaptive control of machines, continuous improvement of systems, etc. can be further studied in future work...|$|R
50|$|At {{the end of}} {{the time}} code, the <b>serial</b> <b>line</b> is idle until the start of the next code. There is no idle time between other characters.|$|E
50|$|When {{developing}} or troubleshooting systems using RS-232, {{close examination}} of hardware signals can be important to find problems. A simple indicator device uses LEDs to show the high/low state of data or control pins. Y cables {{may be used to}} allow using another serial port to monitor all traffic on one direction. A <b>serial</b> <b>line</b> analyzer is a device similar to a logic analyzer but specialized for RS-232's voltage levels, connectors, and, where used, clock signals. The <b>serial</b> <b>line</b> analyzer can collect, store, and display the data and control signals, allowing developers to view them in detail. Some simply display the signals as waveforms; more elaborate versions include the ability to decode characters in ASCII or other common codes and to interpret common protocols used over RS-232 such as SDLC, HDLC, DDCMP, and X.25. <b>Serial</b> <b>line</b> analyzers are available as standalone units, as software and interface cables for general-purpose logic analyzers and oscilloscopes, and as programs that run on common personal computers and devices.|$|E
5000|$|... {{terminal}} hardware control flags {{for controlling}} the actual terminal device {{rather than the}} line discipline: the number of bits in a character, parity type, hangup control, and <b>serial</b> <b>line</b> flow control ...|$|E
50|$|Manufacturing Operations. Tayur has {{developed}} models for kanban controlled <b>serial</b> <b>lines,</b> for lead time quotation, and for scheduling of capacitated multi-product systems using methods from queueing theory, stochastic models (including chance constrained programs) competitive analysis of on-line algorithms, algebraic geometry and mixed-integer linear programming.|$|R
50|$|Some SSI systems allow all nodes {{to access}} the I/O devices (e.g. tapes, disks, <b>serial</b> <b>lines</b> and so on) of other nodes. There may be some {{restrictions}} on the kinds of accesses allowed (For example, OpenSSI can't mount disk devices from one node on another node).|$|R
50|$|The M71 was {{a version}} of the M70 {{intended}} for process control. It provided for 1/4 or 1 M Byte of ECC DRAM, up to 1/2 MB of EPROM, 4 <b>serial</b> <b>lines</b> (DC-319 DLARTs) and two parallel ports implemented using 8255 chips. It was initially designed by Mentec for use in its own Remote Terminal Units.|$|R
50|$|Van Jacobson Header Compression (also VJ compression, or just Header Compression) is {{an option}} in most {{versions}} of PPP. Versions of <b>Serial</b> <b>Line</b> Internet Protocol (SLIP) with VJ compression are often called CSLIP (Compressed SLIP).|$|E
5000|$|On Sun SPARC systems, the Open Firmware {{interface}} {{is displayed}} on the console terminal before the bootstrapping of the system software. If a keyboard is connected, the main video display {{will be used as}} the console terminal and Open Firmware can be re-entered at any time by pressing Stop-A (L1-A) on the keyboard. If no keyboard is connected, then the first <b>serial</b> <b>line</b> on the system is usually used as the console and Open Firmware is re-entered by sending a [...] "Break" [...] on the <b>serial</b> <b>line.</b> While the system software is running, various Open Firmware settings can be read or written using the [...] command.|$|E
50|$|The Player is set of APIs (e.g. position2d, bumper, ir, speech, power) {{that can}} be {{implemented}} by a robot chassis (Roomba, Khephera etc.), possibly over <b>serial</b> <b>line</b> or network, or by Stage (2D simulator) or Gazebo (3D simulator).|$|E
50|$|In addition, a {{modified}} Communication Slot II was {{present on the}} Power Macintosh G3 personality cards. This slot only provided power and <b>serial</b> <b>lines,</b> leaving the PCI pins disconnected. For this reason {{it could only be}} used with modem cards. As in other machines, the external modem port is disabled when a modem is installed in the Communication Slot.|$|R
40|$|In networks-on-chip (NoC) designs, delay {{variations}} and {{crosstalk noise}} {{have become a}} serious issue with the continuously shrinking geometry of semiconductor devices and the increasing switching speed. The crosstalk between adjacent lines causes data dependent signal delay and noise, thus finally makes the communication channel unreliable. The crosstalk problem can be mitigated by wide spacing of <b>serial</b> <b>lines,</b> however, the wider spacing of <b>serial</b> <b>lines</b> will {{reduce the number of}} the lines, thus reduce the data throughput. In this paper, we propose a multi-path routing scheme to maximize the data throughput by utilizing multiple paths for concurrent data transmission. For the proposed multi-path routing scheme, we consider two transport models: the multi-path full bitbank transport model and the multi-path half bitbank transport model. Through theoretical analysis, we show that the proposed multi-path scheme achieves significant improvement in data throughput under both transport models. 1...|$|R
50|$|With {{the single}} {{copy of the}} Dynix {{software}} installed on a central server, both patrons and librarians could access it by using dumb terminals. The technology for linking the terminals to the server within each building, and linking the separate buildings (branches) together to the central server location, changed over time as technology progressed. The earliest method {{was to have the}} entire system connected via RS-232; there would be many muxes (statistical multiplexers) and many miles of <b>serial</b> <b>lines.</b> Muxes were the phone company's solution for connecting <b>serial</b> <b>lines</b> between branches. Later, dumb terminals were connected via RS-232 to a terminal server, which in turn connected via Ethernet to the branch's LAN. The separate branches would be connected to the central Dynix server via IP-based methods (the Internet). The latest installations used PC's running terminal emulation software, and connecting to the Dynix server via telnet over the Internet.|$|R
