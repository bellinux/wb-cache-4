24|232|Public
2500|$|Macro {{assemblers}} often allow macros to take parameters. Some assemblers include quite sophisticated macro languages, incorporating such {{high-level language}} elements as optional parameters, symbolic variables, conditionals, string manipulation, and arithmetic operations, all usable during {{the execution of}} a given macro, and allowing macros to save context or exchange information. Thus a macro might generate numerous assembly language instructions or data definitions, based on the macro arguments. This {{could be used to}} generate record-style data structures or [...] "unrolled" [...] loops, for example, or could generate entire algorithms based on complex parameters. For instance, a [...] "sort" [...] macro could accept the specification of a complex <b>sort</b> <b>key</b> and generate code crafted for that specific key, not needing the run-time tests that would be required [...] for a general procedure interpreting the specification. An organization using assembly language that has been heavily extended using such a macro suite can be considered to be working in a higher-level language, since such programmers are not working with a computer's lowest-level conceptual elements. Underlining this point, macros were used to implement an early virtual machine in SNOBOL4 (1967), which was written in the SNOBOL Implementation Language (SIL), an assembly language for a virtual machine, which was then targeted to physical machines by transpiled to a native assembler via a macro assembler. This allowed a high degree of portability for the time.|$|E
50|$|If the <b>sort</b> <b>key</b> {{values are}} totally ordered, the <b>sort</b> <b>key</b> defines a weak {{order of the}} items: items with the same <b>sort</b> <b>key</b> are {{equivalent}} with respect to sorting. See also stable sorting. If different items have different <b>sort</b> <b>key</b> values then this defines a unique order of the items.|$|E
50|$|A new <b>sort</b> <b>key</b> can {{be created}} from two or more sort keys by {{lexicographical}} order. The first is then called the primary <b>sort</b> <b>key,</b> the second the secondary <b>sort</b> <b>key,</b> etc.|$|E
2500|$|Thorup's algorithm, a {{randomized}} algorithm for <b>sorting</b> <b>keys</b> from a domain of finite size, taking [...] time and O(n) space.|$|R
50|$|When <b>sort</b> <b>keys</b> for a dataset are uniformly {{distributed}} numbers, {{linear interpolation}} is straightforward to implement and will find an index {{very near the}} sought value.|$|R
2500|$|Self-Chord [...] decouples object {{keys from}} peer IDs and <b>sorts</b> <b>keys</b> along the ring with a {{statistical}} approach {{based on the}} swarm intelligence paradigm. Sorting ensures that similar keys are stored by neighbour nodes and that discovery procedures, including range queries, can be performed in logarithmic time.|$|R
50|$|For example, {{addresses}} {{could be}} sorted using {{the city as}} primary <b>sort</b> <b>key,</b> and the street as secondary <b>sort</b> <b>key.</b>|$|E
5000|$|... "Da#" [...] - Tale {{number as}} appears in Dasent's translation, usable as <b>sort</b> <b>key.</b>|$|E
50|$|For example, {{the items}} are books, the <b>sort</b> <b>key</b> is the title, subject or author, {{and the order}} is alphabetical.|$|E
5000|$|... # Every call to each {{returns the}} next key/value pair.# All values will be {{eventually}} returned, but their order# cannot be predicted.while (($name, $address) = each %addressbook) { print [...] "$name lives at $address\n";}# Similar to the above, but sorted alphabeticallyforeach my $next_name (<b>sort</b> <b>keys</b> %addressbook) { print [...] "$next_name lives at $addressbook{$next_name}\n";} ...|$|R
40|$|Describes the characte 1 ·istics, performance, and {{potential}} of SKED (Sort- Key Edit), a generalized computer program for creating <b>sort</b> <b>keys</b> for MARC II records at the users option. SKED and {{a modification of}} the IBM S/ 360 DOS tape sort/merge program {{form the basis for}} a comprehensive program for arranging catalog entries by computer...|$|R
50|$|This will output {{the keys}} {{and values of the}} entire map, <b>sorted</b> by <b>keys.</b>|$|R
5000|$|This list is sortable, and is {{initially}} sorted by year. Click on the [...] icon {{on the right}} side of the column header to change <b>sort</b> <b>key</b> and sort order.|$|E
50|$|Some sort {{utilities}} {{can sort}} on a reversed {{version of the}} <b>sort</b> <b>key,</b> {{making it easy to}} generate reverse dictionaries on the fly if the dictionary data is available in electronic form.|$|E
50|$|Union and Merge -Two or more streams can be {{combined}} by unioning or merging them. Unioning combines tuples in strict FIFO order. Merging is more deterministic, combining streams according to a <b>sort</b> <b>key.</b>|$|E
5000|$|<b>Sort</b> the <b>keys</b> using ProxmapSort, keeping theMapKey function, and the P and A2 arrays ...|$|R
5000|$|However, the {{simplest}} algorithms for BST item insertion may yield {{a tree with}} height n in rather common situations. For example, when the items are inserted in <b>sorted</b> <b>key</b> order, the tree degenerates into a linked list with n nodes. The difference in performance between the two situations may be enormous: for n = 1,000,000, for example, the minimum height is [...]|$|R
5000|$|Locality-preserving hashing {{ensures that}} similar keys are {{assigned}} to similar objects. This can enable a more efficient execution of range queries.Self-Chord [...] decouples object keys from peer IDs and <b>sorts</b> <b>keys</b> along the ring with a statistical approach based on the swarm intelligence paradigm. Sorting ensures that similar keys are stored by neighbour nodes and that discovery procedures, including range queries, can be performed in logarithmic time.|$|R
50|$|Sorting n-tuples (depending on context {{also called}} e.g. records {{consisting}} of fields) {{can be done}} based on {{one or more of}} its components. More generally objects can be sorted based on a property. Such a component or property is called a <b>sort</b> <b>key.</b>|$|E
50|$|In Unix-like {{operating}} systems, sort is {{a standard}} command line program that prints the lines of its input or concatenation of all files listed in its argument list in sorted order. Sorting is done based on one or more sort keys extracted from each line of input. By default, the entire input is taken as <b>sort</b> <b>key.</b> Blank space is the default field separator.|$|E
5000|$|Here {{the first}} sort is done using column 2. [...] {{specifies}} sorting {{on the key}} starting and ending with column 2. If [...] is used instead, the <b>sort</b> <b>key</b> would begin at column 2 and extend {{to the end of}} the line, spanning all the fields in between. The [...] stands for 'numeric ordering'. [...] dictates breaking ties using the value in column 1, sorting alphabetically by default. Note that bob, an and chad have the same quota and are sorted alphabetically in the final output.|$|E
40|$|Abstract. We {{study the}} problem of {{determining}} the complexity of optimal comparison-based in-place <b>sorting</b> when the <b>key</b> length, k, is not a constant. We present the first algorithm for lexicographically <b>sorting</b> n <b>keys</b> in O(nk+n log n) time using O(1) auxiliary data locations, which is simultaneously optimal in time and space. ...|$|R
30|$|For the {{remainder}} of this article, we define by c a comment submitted to an online discussion. For the purposes of this work, we assume that each comment is composed only of its textual content and its timestamp, which is used as a <b>sorting</b> <b>key.</b> Thus, a comment sequence C is an ordered set of n comments c 1,c 2,…,cn taken from a common context, for example, all comments of a given YouTube video.|$|R
40|$|The {{process of}} {{automatically}} making the indices for the abstract journal Mathematics is considered. The basis for {{creation of the}} indices is the database of the bibliography description sources and the text abstracts, which are typeset in the russi cation LaTeX 2. 09. An IBM PC is applied for working with a database and printing camera-ready copies. Em-TeX, MakeIndex and Perl scripts are used. Program DviSpell is applied for generating the <b>Sort</b> <b>Keys...</b>|$|R
5000|$|Macro {{assemblers}} often allow macros to take parameters. Some assemblers include quite sophisticated macro languages, incorporating such {{high-level language}} elements as optional parameters, symbolic variables, conditionals, string manipulation, and arithmetic operations, all usable during {{the execution of}} a given macro, and allowing macros to save context or exchange information. Thus a macro might generate numerous assembly language instructions or data definitions, based on the macro arguments. This {{could be used to}} generate record-style data structures or [...] "unrolled" [...] loops, for example, or could generate entire algorithms based on complex parameters. For instance, a [...] "sort" [...] macro could accept the specification of a complex <b>sort</b> <b>key</b> and generate code crafted for that specific key, not needing the run-time tests that would be required for a general procedure interpreting the specification. An organization using assembly language that has been heavily extended using such a macro suite can be considered to be working in a higher-level language, since such programmers are not working with a computer's lowest-level conceptual elements. Underlining this point, macros were used to implement an early virtual machine in SNOBOL4 (1967), which was written in the SNOBOL Implementation Language (SIL), an assembly language for a virtual machine, which was then targeted to physical machines by transpiled to a native assembler via a macro assembler. This allowed a high degree of portability for the time.|$|E
40|$|This article {{describes}} to a neuro-difusse <b>sort</b> <b>key</b> that marks {{a difference between}} four types of defects in wood known like bellboys. The visual inspection by humans of these defects has {{a high degree of}} complexity since within a same class variations in form, size and color exist. The characteristics used by the <b>sort</b> <b>key</b> were extracted of the wood images by means of Gabor filters 2 D. These filters very are used for images in where the texture is an important factor. The Method of Incorporation was used In order to reduce the dimensionality of the vector of characteristics. The neuro-difusse network was design from a network of Radial Base Functions, FBR, of two layers in where the entrances of the network are fuzified before initiating the training. The recognition that was reached was of the 97. 05 % being an acceptable result considering that a human inspector reaches recognition between 75 and 85 %...|$|E
40|$|We {{present a}} {{technique}} for converting continuous gray-scale images to halftone (black and white) images that {{lend themselves to}} lossless data compression with compression factor of three or better. Our method involves using novel halftone mask structures which consist of non-repeated threshold values. We have versions of both dispersed-dot and clustered-dot masks, which produce acceptable images {{for a variety of}} printers. Using the masks as a <b>sort</b> <b>key</b> allows us to reversibly rearrange the image pixels and partition them into groups with a highly skewed distribution allowing Huffman compression coding techniques to be applied. This gives compression ratios in the range 3 : 1 to 10 : 1...|$|E
50|$|In some applications, {{the strings}} by which items are {{collated}} {{may differ from}} the identifiers that are displayed. For example, The Shining might be sorted as Shining, The (see Alphabetical order above), but it may still be desired to display it as The Shining. In this case two sets of strings can be stored, one for display purposes, and another for collation purposes. Strings used for collation in this way are called <b>sort</b> <b>keys.</b>|$|R
50|$|Collation {{differs from}} {{classification}} in that classification {{is concerned with}} arranging information into logical categories, while collation {{is concerned with the}} ordering of items of information, usually based on the form of their identifiers. Formally speaking, a collation method typically defines a total order on a set of possible identifiers, called <b>sort</b> <b>keys,</b> which consequently produces a total preorder on the set of items of information (items with the same identifier are not placed in any defined order).|$|R
40|$|Schedule Report Generator {{provides}} {{simple method}} for generating periodic schedule reports. Enables engineering manager to monitor tasks assigned {{to staff members}} on weekly basis. Sorts three types of reports by use {{of one or more}} data fields as <b>sorting</b> <b>keys.</b> Schedule Organizer (SO) (COSMIC program MSC- 21525), Schedule Tracker (ST) (COSMIC program MSC- 21526), and Schedule Report Generator (SRG) computer programs manipulating data-base files in ways advantageous in scheduling. Written in PL/ 1 and DEC Command Language (DCL) ...|$|R
40|$|This memo defines an Experimental Protocol for the Internet community. It {{does not}} specify an Internet {{standard}} of any kind. Discussion {{and suggestions for}} improvement are requested. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2002). All Rights Reserved. This document defines two extensions (Select and Sort) for the Service Location Protocol (SLP). These extensions allow a User Agent (UA) to request that the Uniform Resource Locator (URL) entries in a Service Reply (SrvRply) {{be limited to the}} specified number, or be sorted according to the specified <b>sort</b> <b>key</b> list. Using these two extensions together can facilitate discovering the best match, such as finding a service that has the maximum speed or the minimum load. 1...|$|E
40|$|Many {{relational}} {{operations are}} best performed when the relationsarestoredsortedovertherelevantattributes(e. g. the common attributes {{in a natural}} join operation). However, generally relations are not stored sorted because it is expensive to maintain them this way (and impossible whenever {{there is more than}} one relevant <b>sort</b> <b>key).</b> Still, many times relations turn out to be nearly-sorted, where most tuples are close to their place in the order. This state can result from “leftover sortedness”, where originally sorted relations were updated, or were combined into interim results when evaluating a complex query. It can also result from weak correlations between attribute values. Currently, nearly-sorted relations are treated the same as unsorted relations, and when relational operations are evaluated for them, a generic algorithm is used. Yet, many operations can be computed mor...|$|E
40|$|Abstract. This paper {{reports on}} the {{construction}} and testing of a new Question Answering (QA) system, implemented as an workflow which builds on several web services developed at the Research Institute for Artificial Intelligence (RACAI). The evaluation of the system has been independently done by {{the organizers of the}} Romanian-Romanian task of the ResPubliQA 2009 exercise and has been rated the best performing system with the highest improvement due to the NLP technology over a baseline state-of-the-art IR system. We describe a principled way of combining different relevance measures for obtaining a general relevance (to the user’s question) score that will serve as the <b>sort</b> <b>key</b> for the returned paragraphs. The system was trained on a specific corpus, but its functionality is independent on the linguistic register of the training data. The trained QA system that participated in the ResPubliQA shared task is available as a web application a...|$|E
50|$|The Schwartzian {{transform}} is {{a version}} of a Lisp idiom known as decorate-sort-undecorate, which avoids recomputing the <b>sort</b> <b>keys</b> by temporarily associating them with the input items. This approach is similar to memoization, which avoids repeating the calculation of the key corresponding to a specific input value. By comparison, this idiom assures that each input item's key is calculated exactly once, which may still result in repeating some calculations if the input data contains duplicate items.|$|R
50|$|To improve {{compression}}, sorting rows {{can also}} help. For example, using bitmap indexes, sorting can improve compression by {{an order of}} magnitude. To maximize the compression benefits of the lexicographical order with respect to run-length encoding, {{it is best to}} use low-cardinality columns as the first <b>sort</b> <b>keys.</b> For example, given a table with columns sex, age, name, {{it would be best to}} sort first on the value sex (cardinality of two), then age (cardinality of <150), then name.|$|R
50|$|Consider a full array: Ato n-1 with n keys. Let i be {{an index}} of A. <b>Sort</b> As <b>keys</b> into array A2 of equal size.|$|R
