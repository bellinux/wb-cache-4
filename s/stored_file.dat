26|2444|Public
25|$|Before Microsoft {{added support}} for long filenames and creation/access time stamps, bytes 0x0C–0x15 of the {{directory}} entry {{were used by}} other operating systems to store additional metadata, most notably the operating systems of the Digital Research family <b>stored</b> <b>file</b> passwords, access rights, owner IDs, and file deletion data there. While Microsoft's newer extensions are not fully compatible with these extensions by default, most of them can coexist in third-party FAT implementations (at least on FAT12 and FAT16 volumes).|$|E
5000|$|HAIL (High-Availability and Integrity Layer) is a {{distributed}} {{cryptographic system}} that allows a set of servers to prove to a client that a <b>stored</b> <b>file</b> is intact and retrievable.|$|E
50|$|Most of {{the tools}} have a {{graphical}} interface although some do not. All provide a batch <b>stored</b> <b>file</b> interface where all actions are specified in the control stream. This allows scripting any {{and all of the}} administrative interfaces from either local sites, maybe based on time of day or other events, or from remote sites. Unique privileges are required for each administrative area.|$|E
50|$|As standard, the Recycle Bin only <b>stores</b> <b>files</b> deleted from hard drives, {{not from}} {{removable}} media, such as memory cards, thumb drives, or floppy disks, {{nor does it}} <b>store</b> <b>files</b> deleted from network drives. There are methods {{to make it work}} on network paths, however.|$|R
50|$|It <b>stores</b> <b>files</b> {{documenting the}} city since 1887.|$|R
50|$|A {{file storage}} or cloud storage {{is used to}} <b>store</b> <b>files</b> online.|$|R
50|$|Before Microsoft {{added support}} for long filenames and creation/access time stamps, bytes 0x0C-0x15 of the {{directory}} entry {{were used by}} other operating systems to store additional metadata, most notably the operating systems of the Digital Research family <b>stored</b> <b>file</b> passwords, access rights, owner IDs, and file deletion data there. While Microsoft's newer extensions are not fully compatible with these extensions by default, most of them can coexist in third-party FAT implementations (at least on FAT12 and FAT16 volumes).|$|E
5000|$|Specifically, the Shell {{namespace}} {{consists of}} two basic types of objects, namely files and folders. Folder objects, which are containers for file objects and other folders called subdirectories, are the nodes of the tree, while file objects are {{the leaves of the}} namespace tree. Objects in the Shell namespace can represent physically <b>stored</b> <b>file</b> system objects such as files and folders, or can be virtual objects such as the My Network Places and Recycle Bin [...] "virtual folders".|$|E
50|$|With this container, {{a single}} file object is {{associated}} with a signature or time assertion file. A “mimetype” file that specifies the media type might also be included in this container. When a mimetype file is included, it is required to be the first file in the ASiC container. This container type will allow additional signatures to be added in the future to be used to sign <b>stored</b> <b>file</b> objects. When long term time-stamp tokens are used, ASiC Archive Manifest files are used to protect long term time-stamp tokens from tampering.|$|E
50|$|The <b>store</b> <b>filed</b> for {{bankruptcy}} in 1930 and closed its doors the next year.|$|R
5000|$|DESCRIPT.ION (a similar <b>file</b> used to <b>store</b> <b>file</b> {{descriptions}} / long {{names and}} attributes) ...|$|R
50|$|Yellow Front <b>Stores</b> <b>filed</b> for {{bankruptcy}} in 1990 and eventually liquidated {{all of its}} stores.|$|R
30|$|When all chunks are processed, the {{individual}} results are combined. Here, a choice {{can be made}} on which values to save, {{in order not to}} bloat the finally <b>stored</b> <b>file.</b> This can again be adapted freely, such that only the results of interest are further processed.|$|E
40|$|This {{document}} specifies a {{file format}} that allows efficient streaming of a file, or, at the users choice, introduces {{various types of}} access data objects in the file. Random access as well as sequential segmentbased data access to objects is supported. The different access modes allow users to balance hardware resources against efficient data access {{for a variety of}} media and applications. For <b>stored</b> <b>file</b> applications...|$|E
40|$|Recently, a {{practical}} public integrity auditing scheme supporting multiuser data modification (IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY, DOI 10. 1109 /TIFS. 2015. 2423264) was proposed. Although the protocol was claimed secure, in this paper, {{we show that}} the proposal fails to achieve soundness, the most essential property that an auditing scheme should provide. Specifically, we show that a cloud server can collude with a revoked user to deceive a third-party auditor (TPA) that a <b>stored</b> <b>file</b> keeps virgin even when the entire file has been deleted...|$|E
5000|$|Ifolder <b>stores</b> <b>files</b> for secure {{accessibility}} {{online and}} offline, across systems {{and on the}} web ...|$|R
5000|$|The World Wide Web and {{websites}} {{became a}} major new medium for <b>storing</b> <b>files</b> and information.|$|R
50|$|DSLinux {{supports}} <b>storing</b> <b>files</b> on {{a variety}} of add-on hardware devices, none of which are officially endorsed by Nintendo. DSLinux can <b>store</b> <b>files</b> in SRAM memory found in GBA Flash Carts and CompactFlash and SD cards, which can be used with any of the following adaptors: GBAMP, M3, or SuperCard. Newer versions have included DLDI support, allowing for a much wider range of compatibility.|$|R
30|$|To access a <b>stored</b> <b>file</b> from a server, {{request from}} the client is {{received}} by the Supervisor which then analyzes the request in terms of type of file being sought. Depending on the file type, the Supervisor enables {{a connection between the}} client and the server designated to handle such file type. Whenever a client makes a search request for a file, the corresponding flag bit of the document is set to 1. In case the flat bit is not set to 0, the decryption algorithm is enabled at the client end for downloading of the file requested.|$|E
40|$|The {{goal with}} {{this project was}} to achieve {{real-time}} synchronized video playback over the Internet, or in other words, that multiple clients play the same part of a video at the same time. The result shows {{how it is possible}} to build such a protocol, that gives a user experience that the video is synchronized between computers when playing a locally <b>stored</b> <b>file,</b> stream or video delivered using progressive download. This was achieved by designing, then role playing to find weaknesses, and at last implementing the protocols to see how they work in practice. By using such a protocol, it is possible to navigate and discuss around a video in for example a telephone conference, and be sure that everybody is looking on the same picture...|$|E
3000|$|... (P, V) This {{interactive}} protocol {{between the}} Prover (P) and the Verifier ([...] V [...]) [...] takes a common input to (P, V) {{which is the}} public key [...] pk [...] and the public verification parameter φ. P has additional input the file [...] F = ([...] m_ 1,m_ 2, [...]...,m_n) [...] {{and a set of}} authenticators D [...] i [...] of this file. At the end of the protocol, V outputs a bit 1 or 0 to indicate whether the <b>stored</b> <b>file</b> is kept intact or not. For notational convenience, we use [...] P [...] V([...] pk, φ) = 1 [...] to indicate that V outputs 1 {{at the end of the}} interaction with [...] P [...]. We omit the parameters ([...] pk, φ) [...] when the context is clear.|$|E
5000|$|The legal aspect, from a {{regulatory}} compliance standpoint, {{is of concern}} when <b>storing</b> <b>files</b> domestically and especially internationally.|$|R
50|$|MongoDB {{can be used}} as a {{file system}} with load {{balancing}} and data replication features over multiple machines for <b>storing</b> <b>files.</b>|$|R
30|$|VM identification: Lack of {{controls}} for identifying virtual machines {{that are being}} used for executing a specific process or for <b>storing</b> <b>files.</b>|$|R
40|$|Recently, {{a public}} {{auditing}} protocol for shared data called Panda (IEEE Transactions on Services Computing, doi: 10. 1109 /TSC. 2013. 2295611) was proposed {{to ensure the}} correctness of the outsourced data. A distinctive feature of Panda is the support of data sharing and user revocation. Unfortunately, in this letter, we show that Panda is insecure {{in the sense that}} a cloud server can hide data loss without being detected. Specifically, we show that even some <b>stored</b> <b>file</b> blocks have been lost, the server is able to generate a valid proof by replacing a pair of lost data block and its signature with another block and signature pair. We also provide {{a solution to the problem}} while preserving all the desirable features of the original protocol. Department of Computin...|$|E
40|$|We {{introduce}} HAIL (High-Availability and Integrity Layer), a distributed {{cryptographic system}} that permits {{a set of}} servers to prove to a client that a <b>stored</b> <b>file</b> is intact and retrievable. HAIL strengthens, formally unifies, and streamlines distinct approaches from the cryptographic and distributed-systems communities. Proofs in HAIL are efficiently computable by servers and highly compact— typically tens or hundreds of bytes, irrespective of file size. HAIL cryptographically verifies and reactively reallocates file shares. It is robust against an active, mobile adversary, i. e., one that may progressively corrupt the full set of servers. We propose a strong, formal adversarial model for HAIL, and rigorous analysis and parameter choices. We show how HAIL improves on the security and efficiency of existing tools, like Proofs of Retrievability (PORs) deployed on individual servers. We also report on a prototype implementation. ...|$|E
40|$|Abstract—We {{consider}} {{the design of}} regenerating codes for distributed storage systems that enjoy the property of local, exact and uncoded repair, i. e., (a) upon failure, a node can be regenerated by simply downloading packets from the surviving nodes and (b) the number of surviving nodes contacted is strictly smaller {{than the number of}} nodes that need to be contacted for reconstructing the <b>stored</b> <b>file.</b> Our codes consist of an outer MDS code and an inner fractional repetition code that specifies the placement of the encoded symbols on the storage nodes. For our class of codes, we identify the tradeoff between the local repair property and the minimum distance. We present codes based on graphs of high girth, affine resolvable designs and projective planes that meet the minimum distance bound for specific choices of file sizes. I...|$|E
50|$|User's {{also had}} access to a shared <b>file</b> <b>store.</b> <b>Files</b> in the shared <b>file</b> <b>store</b> were {{labelled}} {{and when they were}} opened by an application the application's window label was set to that of the file. The shared <b>file</b> <b>store</b> could not be written directly by an application. The user was able to copy files to the shared <b>file</b> <b>store</b> but they were required to confirm the action using a trusted path interface that was inaccessible to applications.|$|R
50|$|Much of this {{traffic was}} redundant, {{the results of}} {{repeated}} requests by many independent users to access the same <b>stored</b> <b>files</b> and content.|$|R
50|$|Platform {{that manages}} content in a {{repository}} consisting of three parts: a content server, a relational database, {{and a place}} to <b>store</b> <b>files.</b>|$|R
30|$|All {{the tests}} are {{performed}} on a cloud storage platform and two laptops. The cloud storage platform which is composed of two servers, each equipped with Xeon E 5 - 2403 1.8 GHz CPU and 32 GB RAM, is built as the DSP. The two laptops which are equipped with Intel Core i 5 - 4210 M 2.60 GHz CPU and 4 GB memory work as the User and the TPV, respectively. In {{the process of the}} experiment, to reduce the experimental time, we set the size of every <b>stored</b> <b>file</b> to 1 MB. In the incremental storage, the ratio of the version file modified to its precursor version file α is 10 %, so that the size of each incremental storage file is 0.1 MB. Let the size of each data block be fixed to 512 bytes, the hash algorithm be the secure hash algorithm (e.g.,, SHA- 256) with high security, and the version storage threshold be set to 4. All the simulation results are the mean of 20 trials.|$|E
40|$|We used a {{multimodal}} {{nonlinear optics}} microscopy, specifically two-photon excited fluorescence (TPEF), {{second and third}} harmonic generation (SHG/THG) microscopies, to observe pathological conditions of ovarian tissues obtained from human samples. We show that strong TPEF + SHG + THG signals can be obtained in fixed samples stained with hematoxylin and eosin (H&E) stored {{for a very long}} time, and that H&E staining enhanced the THG signal. We then used the multimodal TPEF-SHG-THG microscopies in a <b>stored</b> <b>file</b> of H&E stained samples of human ovarian cancer to obtain complementary information about the epithelium/stromal interface, such as the transformation of epithelium surface (THG) and the overall fibrillary tissue architecture (SHG). This multicontrast nonlinear optics microscopy is able to not only differentiate between cancerous and healthy tissue, but can also distinguish between normal, benign, borderline, and malignant specimens according to their collagen disposition and compression levels within the extracellular matrix. The dimensions of the layers of epithelia can also be measured precisely and automatically. Our data demonstrate that optical techniques can detect pathological changes associated with ovarian cancer. (C) 2011 Society of Photo-Optical Instrumentation Engineers (SPIE). [DOI: 10. 1117 / 1. 3626575...|$|E
40|$|Fractional {{repetition}} (FR) {{codes are}} {{a class of}} regenerating codes for distributed storage systems with an exact (table-based) repair process that is also uncoded, i. e., upon failure, a node is regenerated by simply downloading packets from the surviving nodes. In our work, we present constructions of FR codes based on Steiner systems and resolvable combinatorial designs such as affine geometries, Hadamard designs and mutually orthogonal Latin squares. The failure resilience of our codes can be varied in a simple manner. We construct codes with normalized repair bandwidth (β) strictly larger than one; these cannot be obtained trivially from codes with β = 1. Furthermore, we present the Kronecker product technique for generating new codes from existing ones and elaborate on their properties. FR codes with locality are those where the repair degree is smaller {{than the number of}} nodes contacted for reconstructing the <b>stored</b> <b>file.</b> For these codes we establish a tradeoff between the local repair property and failure resilience and construct codes that meet this tradeoff. Much of prior work only provided lower bounds on the FR code rate. In our work, for most of our constructions we determine the code rate for certain parameter ranges. Comment: 27 pages in IEEE two-column format. IEEE Transactions on Information Theory (to appear...|$|E
5000|$|Following a raid by the FBI in February 2013, the Scooter <b>Store</b> <b>filed</b> for Chapter 11 {{bankruptcy}} and ceased all cash {{sales to the}} public.|$|R
5000|$|On April 1, 2015, the Healthy Back <b>Store</b> <b>filed</b> for Chapter 11 Bankruptcy (Case 15-14653) in the United States Bankruptcy Court for the District of ...|$|R
50|$|When a {{computer}} <b>file</b> system <b>stores</b> <b>file</b> names, the computer may keep or discard case information. When {{the case is}} stored, it is called case preservation.|$|R
