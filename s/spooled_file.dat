0|30|Public
50|$|A Windows <b>Spool</b> <b>File</b> could contain RAW CaPSL data.|$|R
5000|$|Variable/ - Multi-purpose log, temporary, {{transient}} and <b>spool</b> <b>files.</b>|$|R
50|$|SPOOL is set if the <b>file</b> is a <b>spool</b> <b>file,</b> {{such as an}} {{intermediate}} file used during printing.|$|R
5000|$|...SPL : Allows {{accessing}} <b>spool</b> <b>files</b> asynchronously. RSCS (The Remote Spool Communication Subsystem) is {{an example}} of an application that uses this system service.|$|R
50|$|Up to Sumatra 1.1, {{printing}} {{was achieved}} by transforming each PDF page into a bitmap image. This resulted in very large <b>spool</b> <b>files</b> and potentially slow printing.|$|R
5000|$|To {{allow the}} system to manage the problem, system {{components}} called [...] "writers" [...] and [...] "spool files" [...] were developed. A writer is a small system program that reads the <b>spool</b> <b>file,</b> matches a particular printer with a ready-to-print spool object, and begins sending instructions to the printer. It is a two-way process; the printer sends a signal back to the system when it is ready for more work. In order to avoid mixing up data from two <b>spool</b> <b>files,</b> the first report to finish and close is traditionally printed first.|$|R
25|$|Applications {{which use}} the Windows Presentation Foundation for the display {{elements}} can directly print to the XPS print path {{without the need}} for image or colorspace conversion. The XPS format used in the <b>spool</b> <b>file,</b> represents advanced graphics effects such as 3D images, glow effects, and gradients as Windows Presentation Foundation primitives, which are processed by the printer drivers without rasterization, preventing rendering artifacts and reducing computational load. When the legacy GDI Print Path is used, the XPS <b>spool</b> <b>file</b> is used for processing before it is converted to a GDI image to minimize the processing done at raster level.|$|R
50|$|Symptoms {{also include}} {{spontaneous}} disconnection of workstations from networks {{and creation of}} large printer <b>spooling</b> <b>files.</b> Disconnections occur since Jerusalem uses the 'interrupt 21h' low-level DOS functions that Novell Netware and other networking implementations required to hook into the file system.|$|R
5000|$|... iDocs - The central {{processing}} engine (administrator) that runs with iSeries - System i - Power Systems Accounting/ERP software applications. iDocs monitors Output Queues for <b>spool</b> <b>files,</b> database files or XML data to process and route based on user-defined business rules.|$|R
5000|$|... iView - A iSeries - System i native {{document}} archive - retrieval solution performing content management {{functions to}} enable the capture, storage, indexing and retrieval of <b>spool</b> <b>files,</b> merged documents and scanned forms so they are accessible via the Web.|$|R
25|$|At {{the core}} of the XPS print path is XPSDrv, the XPS-based printer driver which {{includes}} the filter pipeline. It contains a set of filters which are print processing modules and an XML-based configuration file to describe how the filters are loaded. Filters receive the <b>spool</b> <b>file</b> data as input, perform document processing, rendering and PDL post-processing, and then output PDL data for the printer to consume. Filters can perform a single function such as watermarking a page or doing color transformations or they can perform several print processing functions on specific document parts individually or collectively and then convert the <b>spool</b> <b>file</b> to the page description language supported by the printer.|$|R
5000|$|... iMail - From an AS/400, iSeries, i5, System i or Power Server, messages, {{business}} {{documents and}} <b>spool</b> <b>file</b> reports {{can be sent}} in readable formats. iMail enables organizations to upgrade to a paperless environment for more efficient document management and distribution. Paper-based labor and associated costs are saved.|$|R
50|$|HASP {{bypassed}} most {{operating system}} services with code specially tailored for efficiency. HASP operated {{as a single}} operating system task and used cooperative multitasking internally to run processors to perform tasks such as running card readers, printers, and punches, managing the <b>spool</b> <b>files,</b> communicating with the system operator, and driving multiple communication lines for remote job entry.|$|R
50|$|XPS {{supports}} HD Photo images natively for raster images. The XPS format {{used in the}} <b>spool</b> <b>file</b> represents advanced graphics effects such as 3D images, glow effects, and gradients as Windows Presentation Foundation primitives, which printer drivers could offload their rasterization to {{the printer}} {{in order to reduce}} computational load if the printer is capable of rasterizing those primitives.|$|R
50|$|Starting with Windows Vista, Unidrv is {{intended}} to be succeeded by XPSDrv. The XPSDrv printer driver extends Microsoft's GDI-based, printer driver architecture to support consuming XML Paper Specification (XPS) documents and is more modular and extensible. With an XPSDrv printer driver, the XPS Document format is used as a <b>spool</b> <b>file</b> format and as a document file format.|$|R
50|$|George 2 {{added the}} concept of spooling. Jobs and input data were read in from cards or paper tape to an input well on disk or tape. The jobs were then run, writing output to disk or tape <b>spool</b> <b>files,</b> which were then written to the output peripherals. The input/processing/output stages were run in parallel, {{increasing}} machine utilisation. On larger machines {{it was possible to}} run multiple jobs simultaneously.|$|R
50|$|ArchivistaBox {{comes with}} a web-based user {{interface}} and is set {{up with a few}} mouse clicks whether a single workstation is concerned or a storage cluster. No further software is needed. Document scanners, multi function copiers and internal services can be connected any time. The integrated print server (CUPS), for example, converts <b>spool</b> <b>files</b> automatically into an archive friendly format and sends them to the database where they remain in absolutely audit proof storage.|$|R
50|$|SmartRouter - The iDocs module {{is used to}} {{facilitate}} complex filtering and distribution requirements for IBM i spooled reports, forms and business documents. It controls the bursting and processing of <b>spool</b> <b>files</b> by individual page based on conditional user-defined criteria, and sorts, re-bundles and delivers spool content to individual targets. SmartRouter output feeds directly into other iDocs modules for distribution via email, fax and/or printer, or for indexing and storage in a Web-based archive for browser-based retrieval, 24x7.|$|R
40|$|This {{new edition}} of the bestselling i 5 {{application}} programming interface (API) book includes powerful new APIs and updated code to give programmers a working knowledge of the APIs available under i 5 /OS. Using real business-world examples, this book explains APIs that serve webpages, list APIs, APIs that work with user spaces, dynamic index APIs, APIs that retrieve system values, job information and job queue information APIs, APIs that work with data queues, APIs for error handling and message handling, and <b>spool</b> <b>file</b> APIs, among many others. Completely revised and including eight new chapter...|$|R
5000|$|Typical {{unstructured}} data sources include web pages, emails, documents, PDFs, scanned text, mainframe reports, <b>spool</b> <b>files,</b> classifieds, etc. Which is further used for sales / marketing leads. [...] Extracting data from these unstructured sources {{has grown into}} a considerable technical challenge where as historically data extraction has had to deal with changes in physical hardware formats, the majority of current data extraction deals with extracting data from these {{unstructured data}} sources, and from different software formats. This growing process of data extraction from the web is referred to as Web scraping.|$|R
5000|$|Under DOS and UNIX {{printing}} a file can be {{done with}} redirection; under UNIX it is normally done by <b>spooling</b> the <b>file</b> to the [...] "line printer" [...] (using the lpr command) because UNIX is conventionally a multi-user system.|$|R
25|$|The XPS Print Path {{introduced}} in Windows Vista supports high quality 16-bit color printing. The XPS print path uses XML Paper Specification (XPS) as the print <b>spooler</b> <b>file</b> format, {{that serves as}} the page description language (PDL) for printers. The XPS spooler format is the intended replacement for the Enhanced Metafile (EMF) format which is the print spooler format in the Graphics Device Interface (GDI) print path. XPS is an XML-based (more specifically XAML-based) color-managed device and resolution independent vector-based paged document format which encapsulates an exact representation of the actual printed output. XPS documents are packed in a ZIP container along with text, fonts, raster images, 2D vector graphics and DRM information. For printers supporting XPS, this eliminates an intermediate conversion to a printer-specific language, increasing the reliability and fidelity of the printed output. Microsoft claims that major printer vendors are planning to release printers with built-in XPS support and that this will provide better fidelity to the original document.|$|R
50|$|Report mining is the {{extraction}} of data from human readable computer reports. Conventional data extraction requires a connection to a working source system, suitable connectivity standards or an API, and usually complex querying. By using the source system's standard reporting options, and directing the output to a <b>spool</b> <b>file</b> instead of to a printer, static reports can be generated suitable for offline analysis via report mining. This approach can avoid intensive CPU usage during business hours, can minimise end-user licence costs for ERP customers, and can offer very rapid prototyping and development of custom reports. Whereas data scraping and web scraping involve interacting with dynamic output, report mining involves extracting data from files in a human readable format, such as HTML, PDF, or text. These can be easily generated from almost any system by intercepting the data feed to a printer. This approach can provide a quick and simple route to obtaining data without needing to program an API to the source system.|$|R
5000|$|In 1968, {{work began}} on adding {{time-sharing}} capability to Exec 8. It was delivered with level 23 {{of the executive}} in 1969. Time sharing (called demand mode) had the same capabilities as batch and real time processes. Everything {{that could be done}} in batch could be done from an ASCII terminal. In demand mode, job stream I/O was attached to a terminal handler rather than card image (input) and <b>spool</b> (output) <b>files.</b> The same run control language was used for both. A few years later, more specific time sharing commands were added, and some control statements could be issued asynchronously for immediate processing, even when neither the executive or the running program were expecting data. Those commands, which could be entered only from a terminal, began with [...] "@@". Because they could be performed without stopping other work in progress from the same terminal, they were called transparent commands. At first these were just statements to kill the current program or redirect terminal output to a file, but eventually, almost all control statements were allowed to be [...] "immediate." ...|$|R
40|$|GZKFast is a {{low-cost}} astrophysical event generator designed to simulate photohadron processes resulting from ultra high energy cosmic ray fluxes. GZKFast {{is an easy}} to use event generator which specifically addresses issues relevant to cosmogenic neutrinos and the ultra high energy (UHE) neutrino spectrum. GZKFast injects UHE particles into a simulated cosmic microwave background (CMB) using a Monte Carlo approach. The interaction of each particle is simulated and the resulting detectable events are <b>spooled</b> to log <b>files.</b> Although GZKFast uses a simplified particle physics model and limited accelerator data it generates event distributions which are comparable with more thorough simulations such as the event generator SOPHIA [1]. ...|$|R
40|$|One {{of the big}} {{challenges}} in Grid computing is storage management and access. Several solutions exist to store data in a persistent way. In this work we describe our contribution within the Worldwide LHC Computing Grid project. Substantial samples of data produced by the High Energy Physics detectors at CERN are shipped for initial processing to specific large computing centers worldwide. Such centers are normally able to provide persistent storage for tens of Petabytes of data mostly on tapes. Special physics applications are used to refine and filter the data after <b>spooling</b> the required <b>files</b> from tape to disk. At smaller geographically dispersed centers, physicists perform the analysis of such data stored on disk-only caches. In this thesis we analyze the application requirements such as uniform storage management, quality of storage, POSIX-like file access, performance, etc. Furthermore, security, policy enforcement, monitoring, and accounting {{need to be addressed}} carefully in a Grid environment. We then make a survey of the multitude of storage products deployed in the WLCG infrastructure, both hardware and software. We outline the specific features, functionalities and diverse interfaces offered to users. Among the other storage services, we describe StoRM, a storage resource manager that we have designed and developed to provide an answer to specific user request for a fast and efficient Grid interface to available paral lel file systems. We propose a model for the Storage Resource Management protocol for uniform storage management and access in the Grid. The black box testing methodology has been applied in order to verify the completeness of the specifications and validate the existent implementations. We finally describe and report on the results obtained...|$|R

