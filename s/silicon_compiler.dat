87|19|Public
5000|$|... (ed.) Anatomy of a <b>Silicon</b> <b>Compiler.</b> (1992). Kluwer Academic Pub[...]|$|E
50|$|He was {{president}} and CEO of Quickturn Systems, ex-chief of <b>Silicon</b> <b>Compiler</b> Systems. He died unexpectedly on his business trip to Japan in 1992.|$|E
50|$|A <b>silicon</b> <b>compiler</b> is a {{software}} system {{that takes a}} user's specifications and automatically generates an integrated circuit (IC). The process is {{sometimes referred to as}} hardware compilation.|$|E
50|$|Johannsen, Mead, and Edmund K. Cheng {{subsequently}} founded <b>Silicon</b> <b>Compilers</b> Inc. (SCI) in 1981.|$|R
5000|$|John Wawrzynek at Caltech {{used some}} of the {{earliest}} <b>silicon</b> <b>compilers</b> in 1982 as part of the [...] "Yet Another Processor Project" [...] (YAPP) ...|$|R
5000|$|Place {{equivalent}} {{logic gates}} on the IC. <b>Silicon</b> <b>compilers</b> typically use standard-cell libraries {{so that they}} do not have to worry about the actual integrated-circuit layout and can focus on the placement.|$|R
50|$|Some people {{hope that}} further {{improvements}} in autoplacers and autorouters will eventually produce good layouts without any human manual intervention. Further automation {{leads to the}} idea of a <b>silicon</b> <b>compiler.</b>|$|E
5000|$|Software: Xilinx Webpack version 6.3.03i (2007-07-22 9.1). Time from HDL {{source to}} loadable {{configuration}} file (.bit) = 2 minutes. CPU cache and memory speed {{is vital for}} the Synthesis + Place & Route <b>Silicon</b> <b>compiler</b> in FPGA generation software.|$|E
5000|$|Franz Lisp and {{all other}} flavors of LISP were {{eventually}} superseded by an ANSI standard for Lisp called [...] "Common Lisp." [...] Historically, SKILL was known as IL. SKILL was a library of IL functions. The name was originally an initialism for <b>Silicon</b> <b>Compiler</b> Interface Language (SCIL), pronounced [...] "SKIL", which then morphed into [...] "SKILL", a plain English word that was easier for everyone to remember.|$|E
40|$|Specialized <b>silicon</b> <b>compilers,</b> or module generators, are {{promising}} tools for automating {{the design of}} custom VLSI chips. In particular, generators for regular language recognizers have many applications. A problem called latch formation that causes regular expression recognizers to be more complex than they would first appear is identified. if recognizers are constructed in the most straightforward way from certain regular expressions, they may contain extraneous latches that cause incorrect operation. After identifying the problem, the article presents a source-to-source transformation that converts regular expressions that cause latch formation into expressions that do not. This transformation allows regular expression recognizers to be simpler, smaller, and faster, thus adding to the advantages of specialized <b>silicon</b> <b>compilers...</b>|$|R
40|$|A {{program for}} the design of leaf cells for <b>silicon</b> <b>compilers</b> of digital VLSI (Very Large Scale Integrated) circuits, is being developed. This program uses rule based {{reasoning}} and genetic algorithmic search techniques, whenever each is appropriate. Leaf cells are subcircuits of a complexity comparable with SSI (Small Scale Integration) components such as one-bit adders, flip-flops or multiplexers. They typically contain between 10 to 100 transistors. <b>Silicon</b> <b>compilers</b> can use libraries of ready designed leaf cells or each leaf cell can be automatically generated [1] by synthesis tools such as the program we are developing. The main advantage of the synthesis approach is that circuit performance will not be sacrificed since a new, optimal layout will be produced whatever the complexity of the circuit and whenever the fabrication process is upgraded...|$|R
40|$|Reducing circuit {{complexity}} {{to minimize}} design turnaround time and maximize chip area utilization {{is the most}} evident problem in dealing with VLSI layout. Three suggestions have been recommended to reduce circuit complexity. They are using regular modules as design targets, using hierarchical top-down design as a design methodology, and using CAD as a design tool. These three suggestions are {{the basis of this}} dissertation project. In this dissertation, three <b>silicon</b> <b>compilers</b> were implemented which take an universal AHPL circuit description as an input and automatically translate it into SLA (Storage Logic Array), PPLA (Path Programmable Logic Array), and ULA (Uncommitted Logic Array) chip layout. The goal is to study different layout algorithms and to derive better algorithms for alternative VLSI structures. In order to make a precise chip area comparison of these three <b>silicon</b> <b>compilers,</b> real SLA and ULA circuits have been designed. Four typical AHPL descriptions of different circuits or varying complexity were chosen as comparison examples. The result shows that the SLA layout requires least area for circuit realization generally. The PPLA approach is the worst one for large scale circuit realization, while the ULA lies in between...|$|R
50|$|After {{working as}} a {{computer}} designer for six years, Mazor moved to Brussels, Belgium where he continued to work for Intel, now as an application engineer helping customers to use the company’s products. He returned to California the following year, and began teaching, first in Intel’s Technical Training group, and later at Stanford University and the University of Santa Clara. Various teaching engagements took him around the world, including Stellenbosch, South Africa; Stockholm, Sweden; and Nanjing, China. In 1984, Mazor joined <b>Silicon</b> <b>Compiler</b> Systems. In 2008, Mazor was the Training Director of BEA Systems.|$|E
50|$|However, {{two-level}} {{logic circuits}} are of limited importance in a very-large-scale integration (VLSI) design; most designs use multiple levels of logic. As {{a matter of}} fact, almost any circuit representation in RTL or Behavioural Description is a multi-level representation. An early system {{that was used to}} design multilevel circuits was LSS from IBM. It used local transformations to simplify logic. Work on LSS and the Yorktown <b>Silicon</b> <b>Compiler</b> spurred rapid research progress in logic synthesis in the 1980s. Several universitiescontributed by making their research available to the public, most notably SIS from University of California, Berkeley, RASP from University of California, Los Angeles and BOLD from University of Colorado, Boulder. Within a decade, the technology migrated to commercial logic synthesis products offered by electronic design automation companies.|$|E
5000|$|Building on {{the ideas}} of VLSI design, Mead and his Ph.D. student David L. Johannsen created the first <b>silicon</b> <b>compiler,</b> capable of taking a user's {{specifications}} and automatically generating an integrated circuit. [...] Mead, Johannsen, Edmund K. Cheng and others formed Silicon Compilers Inc. (SCI) in 1981. SCI designed {{one of the key}} chips for Digital Equipment Corporation’s MicroVAX minicomputer. Mead and Conway laid the groundwork {{for the development of the}} MOSIS (Metal Oxide Semiconductor Implementation Service) and the fabrication of the first CMOS chip. Mead advocated for the idea of Fabless manufacturing in which customers specify their design needs to fabless semiconductor companies. The companies then design special-purpose chips and outsource the chip fabrication to less expensive overseas semiconductor foundries.|$|E
40|$|For this Special Report on Future Computing, Computer Design interviewed Carver Mead, {{an expert}} on the subject of neural computing. Professor Mead is the Gordon and Betty Moore Professor of Computer Science at the California Institute of Technology, where he has taught for 20 years. He's also a co-founder and {{chairman}} of Synaptics, a company that develops neural network technology Mead has pioneered in many areas of electronics, from the invention of the MESFET to <b>silicon</b> <b>compilers</b> and, recently, VLSI analog neural systems...|$|R
40|$|This paper {{addresses}} {{these problems}} using a functional language transformation, {{illustrated in the}} context of a particular application. We show that the overhead introduced by the transformation is relatively small, but the benefit derived is substantial, since the functional programming discipline enforces an implementation-independent definition of core parallel requirements, which can then be mapped onto a broad set of parallel architectures, ranging from shared and distributed memory conventional multiprocessors to direct hardware implementations constructed using <b>silicon</b> <b>compilers</b> and FPGA technolog...|$|R
40|$|VLSI Electronics Microstructure Science, Volume 14 : VLSI Design {{presents}} a comprehensive exposition {{and assessment of}} the developments and trends in VLSI (Very Large Scale Integration) electronics. This volume covers topics that range from microscopic aspects of materials behavior and device performance to the comprehension of VLSI in systems applications. Each article is prepared by a recognized authority. The subjects discussed in this book include VLSI processor design methodology; the RISC (Reduced Instruction Set Computer); the VLSI testing program; <b>silicon</b> <b>compilers</b> for VLSI; and specia...|$|R
50|$|Since its foundation, the {{university}} has had more than 40 projects that were ranked first {{in the country and}} has received more than 900 awards for achievements, which have made BUAA one of the top-ranked universities in the field of high tech. In addition, BUAA has filled scientific and technological gaps nationwide by making and launching spacecraft of different models, such as Beijing -1, the first light aircraft in China; Beijing -2, the first sounding rocket in Asia; Beijing -5, the first unmanned aircraft in China; the BEE series; and coaxial rotors helicopter. BUAA has also invented a flight simulator in automation, a <b>silicon</b> <b>compiler</b> in computer science, a Phase Change Disk in material and information storage, a robot of multi-degree freedom in artificial intelligence and assisted in the successful launch of the Shenzhou spacecraft.|$|E
40|$|Approved {{for public}} release; {{distribution}} is unlimitedAn {{analysis of the}} MacPitts <b>silicon</b> <b>compiler</b> is presented. The emphasis of the analysis is on the interrelationship between algorithmic syntax and resulting circuit structure. Errors inherent to the <b>silicon</b> <b>compiler</b> are investigated, and corrections to the errors are proposed. [URL] United States Nav...|$|E
40|$|A two layer pad router is {{developed}} for the Monterey <b>Silicon</b> <b>Compiler.</b> Features include an improved pad placement routine that extracts information from the internal layout to minimize chip area and wiring lengths, and a track allocation algorithm that minimizes the use of polysilicon during net layout. The router's performance was {{compared to that of}} the MacPitt's <b>Silicon</b> <b>Compiler</b> with four distinct circuits. The Monterey pad router layouts were 5 % to 25 % faster, and 10 % to 15 % smaller than those produced by MacPitts. Keywords: VLSI design, MacPitts, <b>Silicon</b> <b>compiler,</b> CAD Tools, Pad router, Pad placement, Router, Theses. (kt) [URL] Navy (U. S. N.) author...|$|E
5000|$|A {{pioneer of}} modern microelectronics, {{he has made}} {{contributions}} to the development and design of semiconductors, digital chips, and <b>silicon</b> <b>compilers,</b> technologies which form the foundations of modern very-large-scale integration chip design. In the 1980s, he focused on electronic modelling of human neurology and biology, creating [...] "neuromorphic electronic systems." [...] Mead {{has been involved in}} the founding of more than 20 companies. Most recently, he has called for the reconceptualization of modern physics, revisiting the theoretical debates of Niels Bohr, Albert Einstein and others in light of later experiments and developments in instrumentation.|$|R
40|$|The AMICAL {{architectural}} synthesis system {{starts with}} a behavioral specification given in VHDL, performs both scheduling and allocation, and generates a structural description that may feed existing <b>silicon</b> <b>compilers</b> acting at the logic and RT levels. All the synthesis algorithms are implemented {{as part of an}} interactive synthesis environment, where automatic and manual design may be mixed. Experiments have shown that the use of AMICAL leads to the best known solutions for most benchmarks. These solutions may be obtained by mixing automatic and manual design or by the use of an automatic exploration of the design space. The response time of AMICAL is reasonably short making it a genuine interactive system...|$|R
40|$|International audienceThe {{use of the}} {{high-level}} synthesis system AMICAL for {{the architectural}} synthesis of the filter or subband synthesis described in the MPEG-AUDIO specification is described. AMICAL starts with a behavioral specification given in VHDL and generates a structural description that may feed existing <b>silicon</b> <b>compilers</b> acting at the logic and register transfer levels. AMICAL is an interactive tool, meaning that different solutions can be rapidly obtained by carrying out varied manual interventions. Several architectural solutions have been generated {{by means of the}} AMICAL system. A comparison table for the results obtained indicates that the final solution obtained by AMICAL respects the real time constraints imposed by the application...|$|R
40|$|Conversion of the MacPitts <b>Silicon</b> <b>Compiler</b> from NMOS to Scalable CMOS {{technology}} {{includes the}} custom design of SCMOS organelles {{to replace the}} NMOS organelles in the data-path. Three arithmetic organelles, the incrementor, decrementor and subtractor, are designed using the Magic layout editor. Cell insertions are made to the MacPitts <b>Silicon</b> <b>Compiler</b> installed on I SI workstations. [URL] for public release; distribution is unlimitedLieutenant, United States Nav...|$|E
40|$|Design of general/special purpose {{supercomputing}} VLSI {{systems for}} numeric algorithm execution involves tackling two important aspects, namely their computational and communication complexities. Development of software tools for designing such systems itself becomes complex. Hence a novel design methodology {{has to be}} developed. For designing such complex systems a special purpose <b>silicon</b> <b>compiler</b> is needed in which: the computational and communicational structures of different numeric algorithms {{should be taken into}} account to simplify the <b>silicon</b> <b>compiler</b> design, the approach is macrocell based, and the software tools at different levels (algorithm down to the VLSI circuit layout) should get integrated. In this paper a special purpose silicon (SPS) compiler based on PACUBE macrocell VLSI arrays for designing supercomputing VLSI systems is presented. It is shown that turn-around time and silicon real estate get reduced over the silicon compilers based on PLA's, SLA's, and gate arrays. The first two <b>silicon</b> <b>compiler</b> characteristics mentioned above enable the SPS compiler to perform systolic mapping (at the macrocell level) of algorithms whose computational structures are of GIPOP (generalized inner product outer product) form. Direct systolic mapping on PLA's, SLA's, and gate arrays is very difficult as they are micro-cell based. A novel GIPOP processor is under development using this special purpose <b>silicon</b> <b>compiler...</b>|$|E
40|$|The {{advanced}} VLSI design {{course at}} the University of Michigan has been offered since 1985. Since 1987, a commercial <b>silicon</b> <b>compiler</b> {{has been used in}} class projects by the majority of students. This paper describes the course philosophy and content, and the impact of the <b>silicon</b> <b>compiler</b> on the students' design experience. By shielding students from much of the detail of physical design, the circuit compiler allows them to focus on higher-level issues. It enables students to design large integrated circuits, in which they encounter many challenges not seen in the tiny chips typically designed in introductory courses. These experiences become more valuable as technological advances focus efforts of integrated circuit designers on the efficient exploitation of large numbers of transistors in circuits of great complexity...|$|E
40|$|This paper {{presents}} {{an overview of}} the meaning of Guided Synthesis by means of transformational design. The report discusses the designer aspect of interaction with a specific Hardware Description Language to transform an original behavioral specification down to a level where an implementation can be done with logic synthesis tools or <b>silicon</b> <b>compilers.</b> A formal method for the optimization of a specification in a guaranteed correct way is presented. The method is based on the concept of improving a design by using a limited set of transformations that are proven to be correct. An environment enabling the user to do the transformations is created by using the Cornell Synthesizer Generator. 1. Introductio...|$|R
40|$|Transformational {{design is}} a {{promising}} design methodology which combines correctness by construction and interactive design. In this design methodology the design steps are behaviour preserving transformations of one design representation into another. The representations used in transformational design {{need to have}} formal semantic models {{in order to prove}} the correctness, behaviour preserving characteristics, of transformations. Flow graph representations have appeared to be useful in high level synthesis. SIL (SPRITE Input Language) is a single token signal flow graph representation developed as an intermediate format between specification languages and <b>silicon</b> <b>compilers.</b> This paper presents a formal semantic model for SIL which is denotational. The presented denotational semantics is based on relational algebras for tables and orders. Together with this semantic model SIL becomes a useful language backbone for transformational design. 1. Introduction Transformational design could [...] ...|$|R
40|$|SILdat is a data {{structure}} to store signal flow graph descriptions. The {{data structure}} is build using relations and objects {{to allow a}} flexible modeling of signal flow graph representations using nodes, edges and hierarchy. The signal flow descriptions used here are expressed in SIL, the Sprite Input Language. 1. 0 Another view to SIL. 1. 1 Introduction SIL, the Sprite Input Language, is an intermediate language between high level hardware description languages and <b>silicon</b> <b>compilers.</b> Apart from being an intermediate language, SIL is a backbone for silicon compilation and transformational design. To perform transformations on SIL descriptions, a system has been developed to store and change descriptions. The presented system {{is intended to be}} a common (low level) kernel for application programs, like transformation programs,verification programs or SIL graph displayers/editors. As a consequence the kernel contains no semantic, type or orderings checks that determine when a description [...] ...|$|R
40|$|We {{describe}} SAFL+: a call-by-value, parallel {{language in}} the style of ML which combines imperative, concurrent and functional programming. Synchronous channels allow communication between parallel threads and -calculus style channel passing is provided. SAFL+ is designed for hardware description and synthesis; a <b>silicon</b> <b>compiler,</b> translating SAFL+ into RTL-Verilog, has been implemented...|$|E
40|$|Approved {{for public}} release; {{distribution}} is unlimitedA Scalable Complementary Metal Oxide Semiconductor (SCMOS) microprogrammed controller for the Monterey <b>Silicon</b> <b>Compiler</b> (MSC) is {{implemented in the}} LISP programming language. The internal organization of MSC and the architecture of Very Large Scale Integrated (VLSI) circuits generated by MSC are discussed. [URL] Commander, United States Nav...|$|E
40|$|Development of {{software}} tools for designing supercomputing systems is highly complex and cost ineffective. To tackle this a special purpose PAcube <b>silicon</b> <b>compiler</b> which integrates different design levels from cell to processor arrays has been proposed. As {{a part of}} this, we present in this paper a novel methodology which unifies the problems of Layout Automation and Algorithm Mapping...|$|E
40|$|SIL (SPRITE Input Language) is {{developed}} {{as an intermediate}} format between a variety of specification languages {{and a number of}} input formats of synthesis tools and <b>silicon</b> <b>compilers.</b> The second aim in its development was to get a useful language backbone for transformational design, Therefore, SIL is based on a formal semantical model and on {{only a small number of}} basic concepts. Transformational design means using a series of simple transformations to obtain an implementation out of a specification. It is an important design approach because it improves the correctness of designs. It is a way to combine "correctness by construction" with interactive design. This design approach has to be based on a library consisting of transformations which are proven to be correct and behaviour preserving. In this report a number of useful transformations for SIL- 1 is defined. The definitions of these transformations are based on a formal representation of SIL- 1, which is also discussed in this rep [...] ...|$|R
40|$|Increasingly complex {{computing}} {{systems are}} used {{for a variety of}} applications, from world-wide networks to massively parallel computing, from transaction processing to automation of safety-critical systems. The usefulness and success of these applications depends on hardware and software dependability. Achieving them can be rather difficult and may require highest efforts because system complexity is the origin of many design faults, especially in the software, and the required system performance often is in conflict with the redundancy needed for fault tolerance. Consequently, a careful system design is required. Besides design tools like <b>silicon</b> <b>compilers</b> and CASE, special methods for the prediction and evaluation of system dependability play an important role. In contrast to some former reliabilility calculations dependability evaluation must be able to cope with complex system behaviour. One cannot expect that straight-forward methods are able to cover an extremely large state space or express the behavior of highly interacting subsystems with sufficient accuracy. This seminar was concentrated on new methods to quantify the dependability of complex computing systems. The usefulness of design and validation techniques for various type...|$|R
40|$|Abstract i Well-known {{techniques}} {{exist for}} optimal instruction selection based on tree-matching and dynamic programming. Such algorithms can optimally cover a tree of operations, representing a program under compilation, with tree-patterns describing the semantics of target operations. These techniques {{work well for}} intermediate representations based on trees where linear time solutions exist. However, more modern internal representations in compilers are based on data flow graphs, which describe a DAG (directed acyclic graph) of operations. Also, more complex target operations can have semantics {{that need to be}} described using DAGs instead of trees. Certain basic assumptions in optimal tree pattern matching (which enable dynamic programming and hence efficient implementations) break down when being generalized to DAGs. The <b>Silicon</b> Hive <b>compiler</b> uses a data-flow graph as its intermediate representation. The semantics of target operations are described in a machine description which is interpreted by the instruction selection. Such semantics can be arbitrary DAGs. This report will focus on DAG-based pattern matching, especially in making a survey of existin...|$|R
