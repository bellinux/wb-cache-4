8232|10000|Public
5|$|Within {{the first}} two weeks of the first session of the Council (October to December 1962) all seventy-two of the preparatory <b>schemas</b> had been {{rejected}} from consideration. The council rules had stipulated a necessary two-thirds supermajority to reject the <b>schemas.</b> Although only 60% had voted against the <b>schemas,</b> they were regardless discarded at the intervention of Pope John XXIII, upon the request of the liberal Council Fathers.|$|E
5|$|As {{a member}} of the Central Preparatory Commission the Archbishop worked for several years upon the draft {{documents}} which the Council Fathers were to discuss, a total of seventy-two preparatory <b>schemas.</b>|$|E
5|$|The seductive details {{effect has}} {{primarily}} been demonstrated {{at the point}} of knowledge acquisition (initial learning); its impact on transfer performance has not been clearly shown. Theory in text comprehension suggests that seductive details might be detrimental for recall but advantageous for transfer performance because of the schematic representation of information that trainees form during instruction. Researchers have described the seductive details effect as having a damaging effect on recall because it distracts trainees from learning and they tend to form inappropriate <b>schemas</b> to organize information. However, when learners are applying knowledge, empirical studies suggest that the distortion of the macro structure or schema of the instructional material is beneficial.|$|E
40|$|A <b>schema</b> mapping is a {{specification}} {{that describes}} how data structured under one <b>schema</b> (the source <b>schema)</b> {{is to be}} transformed into data structured under a di#erent <b>schema</b> (the target <b>schema).</b> <b>Schema</b> mappings {{play a key role}} in numerous areas of database systems, including database design, information integration, and model management. A fundamental problem in this context is composing <b>schema</b> mappings: given two successive <b>schema</b> mappings, derive a <b>schema</b> mapping between the source <b>schema</b> of the first and the target <b>schema</b> of the second that has the same e#ect as applying successively the two <b>schema</b> mappings...|$|R
40|$|<b>Schema</b> {{conversion}} problem aims {{to convert}} a source <b>schema</b> S in the given model M 1 to an equiv-alent target <b>schema</b> T in the desired model M 2. In this paper, we especially study <b>schema</b> conversion problem between XML and relational models. We present three semantics-based <b>schema</b> conversion al-gorithms: 1) CPI converts an XML <b>schema</b> to a relational <b>schema</b> while preserving semantic {{constraints of the}} original XML <b>schema,</b> 2) NeT derives a nested structured XML <b>schema</b> from a flat relational <b>schema</b> by repeatedly applying the nest operator so that the resulting XML <b>schema</b> becomes hierarchi-cal, and 3) CoT takes a relational <b>schema</b> as input, where multiple tables are interconnected through inclusion dependencies and generates an equivalent XML <b>schema</b> as output...|$|R
2500|$|The {{snowflake}} <b>schema</b> is in {{the same}} family as the star <b>schema</b> logical model. In fact, the star <b>schema</b> is considered a special case of the snowflake <b>schema.</b> The snowflake <b>schema</b> provides some advantages over the star <b>schema</b> in certain situations, including: ...|$|R
25|$|In summary, {{the mental}} working models that {{underlie}} attachment styles appear to contain information about self {{and information about}} others organized into relational <b>schemas.</b> The relational <b>schemas</b> are themselves organized into a three-tier hierarchy. The highest level of the hierarchy contains relational <b>schemas</b> for a general working model that applies to all relationships. The middle level of the hierarchy contains relational <b>schemas</b> for working models that apply to different types of relationships (e.g., friends, parents, lovers). The lowest level of the hierarchy contains relational <b>schemas</b> for working models of specific relationships.|$|E
25|$|The {{highest level}} of the {{hierarchy}} contains very general relational <b>schemas</b> that apply to all relationships. The next level of the hierarchy contains relational <b>schemas</b> that apply to particular kinds of relationships. The lowest level of the hierarchy contains relationship <b>schemas</b> that apply to specific relationships.|$|E
25|$|Another key {{concept in}} social {{cognition}} {{is the assumption}} that reality is too complex to easily discern. As a result, we tend to see the world according to simplified <b>schemas</b> or images of reality. <b>Schemas</b> are generalized mental representations that organize knowledge and guide information processing. <b>Schemas</b> often operate automatically and unintentionally, and can lead to biases in perception and memory. Expectations from <b>schemas</b> may lead us to see something that is not there. One experiment found that {{people are more likely to}} misperceive a weapon in the hands of a black man than a white man. This type of schema is actually a stereotype, a generalized set of beliefs about a particular group of people (when incorrect, an ultimate attribution error). Stereotypes are often related to negative or preferential attitudes (prejudice) and behavior (discrimination). <b>Schemas</b> for behaviors (e.g., going to a restaurant, doing laundry) are known as scripts.|$|E
40|$|In this chapter, three semantics-based <b>schema</b> {{conversion}} {{methods are}} presented: 1) CPI converts an XML <b>schema</b> to a relational <b>schema</b> while preserving semantic {{constraints of the}} original XML <b>schema,</b> 2) NeT derives a nested structured XML <b>schema</b> from a flat relational <b>schema</b> by repeatedly applying the nest operator so that the resulting XML <b>schema</b> becomes hierarchical, and 3) CoT takes a relational <b>schema</b> as input, where multiple tables are interconnected through inclusion dependencies and generates an equivalent XML <b>schema</b> as output...|$|R
40|$|We {{introduce}} the versioned relational data model, which allows a user to apply conditional <b>schema</b> changes to a populated database without breaking applications compiled against an existing <b>schema,</b> and without loss of existing data. Our model {{is based on}} keeping a history of conditional <b>schema</b> changes, and converting tuples on demand to ?t the correct <b>schema</b> in any <b>schema</b> version. We provide a concrete defnition of <b>schema</b> versioning: The ability to specify an operator on any <b>schema</b> version, such that the tuples in the result are unaffected by <b>schema</b> versions created after the speci?ed <b>schema</b> version. Finally, we show that our model supports <b>schema</b> versioning...|$|R
50|$|<b>Schema</b> {{documents}} are organized by namespace: all the named <b>schema</b> components {{belong to a}} target namespace, and the target namespace is a property of the <b>schema</b> document as a whole. A <b>schema</b> document may include other <b>schema</b> documents for the same namespace, and may import <b>schema</b> documents for a different namespace.|$|R
25|$|Some OLAP multidimensional {{database}} modeling tools are optimized for snowflake <b>schemas.</b>|$|E
25|$|Star and {{snowflake}} <b>schemas</b> {{are most}} {{commonly found in}} dimensional data warehouses and data marts where speed of data retrieval {{is more important than}} the efficiency of data manipulations. As such, the tables in these <b>schemas</b> are not normalized much, and are frequently designed at a level of normalization short of third normal form.|$|E
25|$|Print <b>schemas</b> {{provide an}} XML-based format for expressing and {{organizing}} a large set of properties that describe either a job format or print capabilities in a hierarchically structured manner. Print <b>schemas</b> {{are intended to}} address the problems associated with internal communication between the components of the print subsystem, and external communication between the print subsystem and applications.|$|E
5000|$|An Oracle {{database}} associates {{a separate}} <b>schema</b> with each database user.A <b>schema</b> comprises {{a collection of}} <b>schema</b> objects. Examples of <b>schema</b> objects include: ...|$|R
40|$|This paper first {{analyses}} {{the impact}} of variance on <b>schema</b> transmission. Working from an exact derivation of the expected variance in <b>schema</b> transmission, it derives and analyses the signal-to-noise ratio for schemata. The paper then presents short term <b>schema</b> transmission probability results that focus on newly created schemata in the population. The analysis reveals the relative dependencies between <b>schema</b> transmission, population size, <b>schema</b> measured fitness, <b>schema</b> fragility and <b>schema</b> creation...|$|R
50|$|Server administrators can add {{additional}} <b>schema</b> {{entries in}} addition to the provided <b>schema</b> elements. A <b>schema</b> for representing individual people within organizations is termed a white pages <b>schema.</b>|$|R
25|$|RQL, one of {{the first}} {{declarative}} languages for uniformly querying RDF <b>schemas</b> and resource descriptions, implemented in RDFSuite.|$|E
25|$|As Construction grammar {{is based}} on <b>schemas</b> and taxonomies, it does not operate with dynamic rules of derivation. Rather, it is monotonic.|$|E
25|$|DSDL (Document Schema Definition Languages) is a {{multi-part}} ISO/IEC standard (ISO/IEC 19757) {{that brings}} together a comprehensive set of small schema languages, each targeted at specific problems. DSDL includes RELAX NG full and compact syntax, Schematron assertion language, and languages for defining datatypes, character repertoire constraints, renaming and entity expansion, and namespace-based routing of document fragments to different validators. DSDL schema languages {{do not have}} the vendor support of XML <b>Schemas</b> yet, and are to some extent a grassroots reaction of industrial publishers to the lack of utility of XML <b>Schemas</b> for publishing.|$|E
40|$|Software legacy problem {{caused by}} <b>schema</b> {{evolution}} in an Object-Oriented database {{is a very}} important research issue. This paper proposes a method of equivalent <b>schema</b> evolution based on a path-independence (PI) language. The PI language, which has been adopted in some systems, raises the level of abstraction for behavioral <b>schema</b> design and is almost independence with the specijic <b>schema</b> digraph. We develop the PI language and advocate the equivalent <b>schema</b> evolution method which not only resolves software reuse problem in <b>schema</b> evolution, but supports <b>schema</b> version mechanism, which is an advanced feature in a database system. Keywords:object-oriented database, <b>schema</b> evolution, software reuse, <b>schema</b> version 1...|$|R
40|$|Abstract. <b>Schema</b> {{integration}} is {{the activity of}} providing a unified representation of multiple data sources. The core problems in <b>schema</b> integration are: <b>schema</b> matching, i. e. the identification of correspondences, or mappings, between <b>schema</b> objects, and <b>schema</b> merging, i. e. {{the creation of a}} unified <b>schema</b> based on the identified mappings. Existing <b>schema</b> matching approaches attempt to identify a single mapping between each pair of objects, for which they are 100 % certain of its correctness. However, this is impossible in general, thus a human expert always has to validate or modify it. In this paper, we propose a new <b>schema</b> integration approach where the uncertainty in the identified mappings that is inherent in the <b>schema</b> matching process is explicitly represented, and that uncertainty propagates to the <b>schema</b> merging process, and finally it is depicted in the resulting integrated <b>schema.</b> ...|$|R
5000|$|Some people, {{including}} Murata and James Clark, had critical {{attitudes toward}} XML Schema.XML <b>Schema</b> {{is a modern}} XML <b>schema</b> language designed by W3C XML <b>Schema</b> Working Group.W3C intended XML <b>Schema</b> to supersede traditional DTD (Document Type Definition).XML <b>Schema</b> supports so many features that its specification is large and complex.Murata, James Clark and those who criticised XML <b>Schema,</b> pointed out the following: ...|$|R
25|$|A {{deduction}} in a Hilbert-style deductive {{system is}} a list of formulas, each of which is a logical axiom, a hypothesis that has been assumed for the derivation at hand, or follows from previous formulas via a rule of inference. The logical axioms consist of several axiom <b>schemas</b> of logically valid formulas; these encompass a significant amount of propositional logic. The rules of inference enable the manipulation of quantifiers. Typical Hilbert-style systems have a small number of rules of inference, along with several infinite <b>schemas</b> of logical axioms. It is common to have only modus ponens and universal generalization as rules of inference.|$|E
25|$|Data {{designer}}: The data designer {{can be used}} to graphically edit database <b>schemas,</b> including typed tables, {{primary and}} foreign keys and constraints. It {{can also be used to}} design queries from the graphical view.|$|E
25|$|Agents may {{interpret}} {{a particular}} resource according to different <b>schemas.</b> E.g., a commander could attribute his wealth to military prowess, while others {{could see it}} as a blessing from the gods or a coincidental initial advantage.|$|E
40|$|XML <b>Schema’s</b> {{abstract}} {{data model}} consists of components, {{which are the}} structures that eventually define a <b>schema</b> as a whole. XML <b>Schema’s</b> XML syntax, on the other hand, is not a direct representation of the <b>schema</b> components, and it proves to be surprisingly hard to derive a <b>schema’s</b> components from the XML syntax. The <b>Schema</b> Component XML Syntax (SCX) is a representation which attempts to map <b>schema</b> components as faithfully as possible to XML structures. SCX serves {{as the starting point}} for applications which need access to <b>schema</b> components and want to do so using standardized and widely available XML technologies...|$|R
40|$|New XML <b>schema</b> {{languages}} {{have been}} recently proposed to replace Document Type Definitions (DTDs) as <b>schema</b> mechanism for XML data. These languages consistently combine grammar-based constructions with constraint- and pattern-based ones {{and have a}} better expressive power than DTDs. As <b>schema</b> remain optional for XML data, we {{address the problem of}} <b>schema</b> extraction from XML data. We model the XML <b>schema</b> as extended context-free grammars and propose the <b>schema</b> extraction algorithm that is based on methods of grammatical inference. The extraction algorithm copes also with the <b>schema</b> determinism requirement imposed by XML DTDs and XML <b>Schema</b> languages. We report the tests result of <b>schema</b> extraction on a collection of real XML documents...|$|R
40|$|With rapid {{advances}} in computer network {{technology and the}} increasing interest in global information sharing, grows the need for facilities that can effectively maintain the database consistency and program compatibility as the <b>schema</b> evolves. In this paper, we present a general framework based on versions of <b>schema</b> for supporting seamless <b>schema</b> evolution in large-scale object-oriented software systems. We argue that the effectiveness of using the <b>schema</b> version model to materialize <b>schema</b> evolution relies {{not only on the}} management of version derivation of <b>schema,</b> but also on the ability to maintain consistency of the database instances with the new <b>schema</b> versions, and the flexibility of sharing instance access scopes among versions of <b>schema.</b> Semantics of <b>schema</b> versioning is studied with the objective to facilitate instance adaptation and program compatibility in the presence of <b>schema</b> updates. A number of options for sharing of instance access scopes among versions of a <b>schema</b> is [...] ...|$|R
25|$|In August 2014 at Usenix WoOT conference, Bursztein et al. {{presented}} the first generic CAPTCHA-solving algorithm based on reinforcement learning and demonstrated its efficiency against many popular CAPTCHA <b>schemas.</b> They concluded that text distortion based CAPTCHAs schemes {{should be considered}} insecure moving forward.|$|E
25|$|Agents may modify <b>schemas</b> {{even though}} their use does not predictably {{accumulate}} resources. For example, {{the effect of a}} joke is never quite certain, but a comedian may alter it based on the amount of laughter it garners regardless of this variability.|$|E
25|$|Effortful processing: Tailored {{messages}} elicit {{careful consideration}} of persuasive arguments and more systematic {{utilization of the}} receivers own <b>schemas</b> and memories. This could also turn out damaging because this careful consideration does increase counterarguing, evaluations of credibility and other processes that lessens message effects.|$|E
2500|$|The axiom <b>schema</b> of separation, {{the other}} axiom <b>schema</b> in ZFC, is {{implied by the}} axiom <b>schema</b> of {{replacement}} and the axiom of empty set. Recall that the axiom <b>schema</b> of separation includes ...|$|R
5000|$|A <b>schema</b> {{crosswalk}} is a {{table that}} shows equivalent elements (or [...] "fields") {{in more than}} one database <b>schema.</b> It maps the elements in one <b>schema</b> to the equivalent elements in another <b>schema.</b>|$|R
50|$|Stylus Studio {{provides}} synchronized XML <b>schema</b> {{text editing}} and visual XML <b>schema</b> diagram views. Changes made to an XML <b>schema</b> {{in the text}} editor are synchronized with the Diagram View, and vice versa. The <b>schema</b> editor includes an integrated XML <b>schema</b> documentation generator, to publish XML content models in HTML format.|$|R
