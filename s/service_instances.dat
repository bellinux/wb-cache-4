180|619|Public
50|$|To {{simplify the}} administration, AMF further groups {{components}} into service units and service groups, and component <b>service</b> <b>instances</b> into <b>service</b> <b>instances.</b> All of these compose an application. Via IMM, {{a set of}} administrative operations are available on these logical entities.|$|E
50|$|Accordingly, the APIs {{provided}} by the Availability Management Framework enable component registration, life cycle management and workload assignments. They include functions for error reporting and health monitoring. They also allow tracking the assignment of component <b>service</b> <b>instances</b> among the set of components protecting the CSI.|$|E
50|$|A carrier's {{return on}} {{investment}} {{is directly related to}} its ability to transport more <b>service</b> <b>instances</b> over a fixed capacity-constrained infrastructure, keeping Quality of Service high. It is further associated with its ability to offer a broad range of added-value services, such as IPTV, Voice, and VPN, whose requirements can widely vary and pose technical difficulties when sharing the same infrastructure.|$|E
30|$|The <b>Service</b> <b>Instance</b> Layer {{describes}} the services (e.g., business services or end-user services) {{which should be}} supported. Each service is created as a <b>Service</b> <b>Instance.</b> Usually a <b>service</b> can be provided by a network operator or third parties, so the <b>Service</b> <b>Instance</b> can consist of by both operator’s services and third parties’ services.|$|R
5000|$|<b>Serviced</b> <b>instances</b> {{know the}} servant and the user sends them {{messages}} with his requests (in which case she doesn’t {{have to know}} the servant). The <b>serviced</b> <b>instances</b> then send messages to the instances of servant, asking for service.|$|R
5000|$|... #Caption: Figure 2: User {{requests}} operations from <b>serviced</b> <b>instances,</b> {{which then}} asks servant {{to do it}} for them.|$|R
50|$|A WCS {{provides}} {{access to}} coverage data in forms that are useful for client-side rendering, as input into scientific models, and for other clients. The WCS may {{be compared to the}} OGC Web Feature Service (WFS) and the Web Map Service (WMS). As with WMS and WFS <b>service</b> <b>instances,</b> a WCS allows clients to choose portions of a server's information holdings based on spatial constraints and other query criteria.|$|E
50|$|PBB, PBT, and PBB-TE use an {{alternative}} proposed solution, known as MAC-in-MAC, {{described in the}} proposed IEEE 802.1ah Provider Backbone Bridges standard, which encapsulates Ethernet frames with a Service Provider MAC header. MAC-in-MAC technology overcomes the inherent scalability limitations of VLAN and Q-in-Q networks that make them impractical for use in larger networks by enabling up to 4000 times as many <b>service</b> <b>instances</b> as supported by traditional VLAN and Q-in-Q networks.|$|E
5000|$|In SOP, runtime {{properties}} {{stored on}} the service interface metadata serve as {{a contract with the}} service virtual machine (SVM). One example for the use of runtime properties is that in declarative service synchronization. A service interface can be declared as a fully synchronized interface, meaning that only a single instance of that service can run at any given time. Or, it can be synchronized based on the actual value of key inputs at runtime, meaning that no two <b>service</b> <b>instances</b> of that service with the same value for their key input data can run at the same time. Furthermore, synchronization can be declared across services interfaces that belong to the same service group. For example, if two services, ‘CreditAccount" [...] and ‘DebitAccount", belong to the same synchronization service group and are synchronized on the accountName input field, then no two instances of ‘CreditAccount" [...] and ‘DebitAccount" [...] with the same account name can execute at the same time.|$|E
5000|$|According to the Department of Health and Human <b>Services,</b> <b>instances</b> of {{trafficking}} {{of adults}} and children in traveling sales crews, peddling and begging rings are rising.|$|R
30|$|The {{services}} {{selected for}} the operation experiment are EC 2, Relational Database Service (RDS) [28], Elastic Load Balancer [29], Cloud Servers [30], Cloud Databases [31] and Cloud Load Balancers [27]. They belong to AWS and Rackspace two CSPs respectively. Accordingly, the two CLIs involved in the experiment are AWS CLI [32] and Rackspace CLI (rumm [33]). For SIR, a series of <b>service</b> <b>instance</b> data retrieval operations are tested to justify the typical performances for IaaS, PaaS and SaaS operations individually. For SMR, various <b>service</b> <b>instance</b> manipulation operations are tested, including instance creation, deletion, updating, etc.|$|R
40|$|In {{this paper}} we present the {{prototype}} architecture of a distributed service which stores and retrieves time series data, together with replication mechanisms employed {{in order to}} provide both reliability and load balancing. The entries of each time series are stored locally on the machines running the <b>instances</b> of the <b>service.</b> Each entry is eventually fully replicated on every <b>service</b> <b>instance.</b> Our replication mechanisms depend on whether there is only one <b>service</b> <b>instance</b> receiving each entry of a time series from a client or there may be multiple such instances...|$|R
40|$|A key {{limitation}} of current Web services standards is {{the inability to}} differentiate <b>service</b> <b>instances</b> at runtime using (nonfunctional) qualities of services (QoS). Such differentiation is necessary to allow for runtime selection and binding to <b>service</b> <b>instances</b> {{in a manner that}} continually adapts selected services to the service consumer’s preferences and needs. Quality values are volatile, depend on the trust associated with instances and service providers, and also depend on the needs of service consumers. We propose a multiagent framework where agents consider the consumers ’ QoS preferences, determine trust levels to associate to <b>service</b> <b>instances</b> and providers, and automatically select <b>service</b> <b>instances</b> on a consumer’s behalf. The service agents use a trust model that is centered on a shared conceptualization for QoS (ontology) and a QoS preference model that considers consumer’s tradeoffs among qualities as well as relationships between qualities. We evaluate our approach via simulations on simplified but realistic <b>service</b> <b>instances</b> and service consumers. Our results show that using these considerations for QoS, service agents are able to determine over time the ‘best ’ service selection for a consumer...|$|E
40|$|Service {{composition}} enables flexible {{creation of}} new services by assembling independent service components. We {{are focused on the}} scenario where such composition takes place across the wide-area Internet. We envision independent providers deploying and managing <b>service</b> <b>instances</b> and portal providers composing them to quickly enable new applications in nextgeneration networks. One of the important goals in such service composition is load balancing across <b>service</b> <b>instances.</b> While load balancing has been studied extensively for web-server selection, the presence of composition presents new challenges. First, each client session involving composition requires a set of <b>service</b> <b>instances</b> and not just one server. Second, unlike web-mirror selection, we also concern ourselves with load balancing in the presence of failure recovery during a client session. We introduce (a) a metric to choose the set of <b>service</b> <b>instances</b> for composed client sessions: the least-inverse-available-capacity (LIAC) metric, as well as (b) a piggybacking mechanism to give quick feedback about server load. We then introduce an additional factor in the load balancing metric to avoid choosing far away <b>service</b> <b>instances.</b> Our experiments, based on an emulation testbed, show that our load balancing mechanism works well under a variety of scenarios including network path failures...|$|E
40|$|This paper {{focuses on}} service {{deployment}} optimization in cloud computing environments. In a cloud, each service in an application is deployed as {{one or more}} <b>service</b> <b>instances.</b> Different <b>service</b> <b>instances</b> operate at different quality of service (QoS) levels. In order to satisfy given service level agreements (SLAs) as end-to-end QoS requirements of an application, the application is required to optimize its deployment configuration of <b>service</b> <b>instances.</b> E 3 /Q is a multiobjective genetic algorithm to solve this problem. By leveraging queuing theory, E 3 /Q estimates the performance of an application and allows for defining SLAs in a probabilistic manner. Simulation results demonstrate that E 3 /Q efficiently obtains deployment configurations that satisfy given SLAs. ...|$|E
40|$|Currently, Grid {{technologies}} {{are widely used}} in largescale scientific applications. Grids support stateful interactions with explicit exposure of state information across the boundaries of a service. In this paper, we present a stateful Web service architecture that provides efficient sharing of a <b>service</b> <b>instance</b> between heterogeneous <b>service</b> requesters with monitoring of the interactions. We describe how we compose the state information based on the formalized sequence of the interactions. We also describe how the shared <b>service</b> <b>instance</b> is managed, and interacted with, through standard Web services interfaces. We analyze the performance of our approach in a large-scale scientific Grid application...|$|R
5000|$|Link layer {{discovery}} (IEEE 802.1ab) - Defines discovery for all Provider Edges (PEs) {{supporting a}} common <b>service</b> <b>instance</b> and/or discovery for all edge devices and P Routers) common {{to a single}} network domain.|$|R
5000|$|Analyze what {{behavior}} servant {{should take}} care of. State what methods servant will define and what these methods will need from serviced parameter. By other words, what <b>serviced</b> <b>instance</b> must provide, so that servants methods can achieve their goals.|$|R
40|$|This paper {{deals with}} the problem of {{selecting}} <b>service</b> <b>instances</b> to execute workflow processes by not only taking into consideration Quality of Service (QoS) constraints, posed by the end-users, but also the business relationships between different service providers. These business / strategic relationships, the providers have, may affect the parameters of the <b>service</b> <b>instances</b> regarding the offered QoS level, and therefore the relationships need to be modeled and expressed with specific metrics. In this paper we present an innovative algorithm that maps workflow processes to <b>service</b> <b>instances</b> by taking into account the aforementioned metrics during the selection process. We also demonstrate the operation of the implemented algorithm and evaluate its effectiveness using a scenario, based on a 3 D image rendering application. © 2009 Springer Berlin Heidelberg...|$|E
40|$|As {{part of the}} Agentcities project, we have {{developed}} a prototype of an Evening Organiser application which allows users to flexibly and dynamically schedule activities within an itinerary. The Evening Organiser and the Web-accessible restaurant and cinema services which it uses have been developed within a generic service environment and the implementation {{of this has been}} built using the April Agent Platform, the DAML+OIL ontology language, the DAML Query Language and the Java Theorem Prover. This service environment is populated with agents of different natures, such as <b>service</b> <b>instances</b> and service finders. <b>Service</b> <b>instances</b> represent individual business entities, such as restaurants and cinemas. Service finders represent aggregated views over <b>service</b> <b>instances,</b> such as Yahoo!-hosted restaurants or Citysearch-hosted cinemas. The details of the implementation of these Web Services are described {{through the use of a}} motivating scenario...|$|E
40|$|This paper {{focuses on}} service {{deployment}} optimization in cloud computing environments. In a cloud, an application {{is assumed to}} consist of multiple services. Each service in an application can be deployed as one or more <b>service</b> <b>instances.</b> Different <b>service</b> <b>instances</b> operate at different quality of service (QoS) levels depending {{on the amount of}} computing resources assigned to them. In order to satisfy given performance requirements, i. e., service level agreements (SLAs), each application is required to optimize its deployment configuration such as the number of <b>service</b> <b>instances,</b> the amount of computing resources to assign and the locations of <b>service</b> <b>instances.</b> Since this problem is NP-hard and often faces trade-offs among conflicting QoS objectives in SLAs, existing optimization methods often fail to solve it. E 3 -R is a multiobjective genetic algorithm that seeks a set of Pareto-optimal deployment configurations that satisfy SLAs and exhibit the trade-offs among conflicting QoS objectives. By leveraging queueing theory, E 3 -R estimates the performance of an application and aids defining SLAs in a probabilistic manner. Moreover, E 3 -R automatically reduces the number of QoS objectives and improves the quality of solutions further. Experimental studies demonstrate that E 3 -R efficiently obtains quality deployment configurations that satisfy given SLAs...|$|E
5000|$|For the Servant pattern we {{have some}} objects to which we want to offer some functionality. We create a class whose {{instances}} offer that functionality and which defines an interface that serviced objects must implement. <b>Serviced</b> <b>instances</b> are then passed as parameters to the servant.|$|R
40|$|Analytic {{applications}} from various industrial sectors have specific attributes and requirements including relatively long processing time, parallelization, multiple interactive invocations, web services, and expected {{quality of service}} objectives. Current parallel resource management systems for batch-oriented jobs lack the effective support for multiple interactive invocations with consideration in quality of service objectives, while transaction processing systems do not support dynamic creation of parallel application instances. To better serve the analytic applications, a set of additional resource management services, defined as stateful support, introduces the concept of <b>Service</b> <b>Instance</b> and <b>Service</b> <b>Instance</b> Management. This set of stateful support services can be implemented as extension to existing parallel resource management to serve these analytic applications that rapidly increase in the demand of computing power. 1...|$|R
40|$|Current service {{composition}} and coordination still remain at {{large amount of}} manual processing stage, which has brought about low efficiency. In this paper, we present an efficient algorithm for abstract service discovery and a <b>service</b> <b>instance</b> selection method. Our algorithm firstly builds up the special data structures of ontology concepts based on graph storage theories when publishing abstract services. Then, these data structures form a quick service query list. In our algorithm, {{the large number of}} ontology reasoning is processed at service publication stage, thus we can make sure the quick query response in service discovery without much reasoning. In addition, our <b>service</b> <b>instance</b> selection methods based on OWL QoS ontology can enable grid resource sharing and coordination more flexible...|$|R
40|$|The Web service {{technology}} {{allows the}} dynamic composition of a workflow (or a business flow) by composing {{a set of}} existing Web services scattered across the Internet. While a given Web service may have multiple <b>service</b> <b>instances</b> taking part in several workflows simultaneously, a workflow often involves a set of <b>service</b> <b>instances</b> that belong to different Web services. In order to establish trust relationships amongst <b>service</b> <b>instances,</b> new security protocols are urgently needed. Hada and Maruyabma [3] presented a session-oriented, multi-party authentication protocol to resolve this problem. Within a session their protocol provides a commonly shared session secret for all the <b>service</b> <b>instances,</b> thereby distinguishing the instances from those of other sessions. However, individual instances cannot be distinguished and identified using the session secret. This leads to vulnerable session management and poor threat containment. In this paper we present a new protocol design for multi-party authentication in which each service instance of a given session is provided with a unique identifier. The Coordinated Atomic Action scheme is exploited for achieving an improved level of threat containment. We evaluate the scalability of our design by means of both experiments and an analytical model. The result shows that time consumed by the authentication process increases linearly {{with an increase in}} the number of session participants...|$|E
40|$|Abstract—Service Oriented Architecture (SOA) {{has been}} em-braced in {{enterprise}} computing for several years. The scientific community always {{felt the need}} of an SOA infrastructure {{not only with the}} convenience of enterprise SOA but also with ex-pected level of high performance capabilities. Our research has produced an SOA middleware (ANU-SOAM) which supports an already popular enterprise SOA middleware API (Platform Symphony API) with the desired level of performance for scientific computations such as a Conjugate Gradient Solver. We have extended the compute services of ANU-SOAM with a common data service (CDS) between client and the <b>service</b> <b>instances.</b> The aim is to improve performance of applications by reducing communications or communication cost between the client and the <b>service</b> <b>instances</b> with the help of CDS. This is achieved by enabling tasks to perform a deferred put operation to the common data their <b>service</b> <b>instances,</b> with the results of the put operation only being visible to the next generation of tasks. These updates can be synchronised (committed) at CDS at the direction of the client. This property enables applications on ANU-SOAM to overcome latency of poor networks (or ‘cloud’) between client and <b>service</b> <b>instances.</b> Experimental results on a small Gigabit ethernet cluster show that, for the Conjugate Gradient Solver, the ANU-SOAM version suffers no appreciable performance loss over MPI versions and the CDS enhances N-Body Solver performance, with good scalability in both cases. I...|$|E
40|$|Abstract—Dynamic {{run-time}} {{selection and}} sourcing of ser-vice components provide considerable potential in todays changing business world. They provide means to counter agility, flexibility {{and the ability}} to integrate applications originating from systems of different security domains. While the advantages are obvious strong implications to security in general and authorizatin and access control in particular do exist. In this paper we present an infrastructure-based ap-proach for en-route dynamic credential enrichment. It enables dynamic replacement of access-restricted <b>service</b> <b>instances</b> by implementing runtime supplementation of security tokens. If authorized, a security intermediary accesses user profiles and retrieves security tokens supplied by identity providers and needed for access control at dynamically selected access-restricted <b>service</b> <b>instances...</b>|$|E
40|$|The {{time series}} {{indexing}} techniques and the replication coordination algorithms were partially inspired {{from the first}} author's participation in several algorithmic contests were efficient data structures and graph algorithms were required (see the attached zip archive for a few examples). International audienceIn this paper we present the prototype architecture of a distributed service which stores and retrieves time series data, together with replication mechanisms employed {{in order to provide}} both reliability and load balancing. The entries of each time series are stored locally on the machines running the <b>instances</b> of the <b>service.</b> Each entry is eventually fully replicated on every <b>service</b> <b>instance.</b> Our replication mechanisms depend on whether there is only one <b>service</b> <b>instance</b> receiving each entry of a time series from a client or there may be multiple such instances...|$|R
30|$|The SOS {{service is}} {{extended}} with the PubSub interface in a modular way. All functionality that {{has previously been}} realized by SES, the SOS-SES Connector and the WNS is now bundled within the PubSub interface. The client software only communicates with one <b>service</b> <b>instance</b> that provides both SOS and PubSub interfaces.|$|R
5000|$|N-to-N — A {{combination}} of active/active and N+M clusters, N to N clusters redistribute the <b>services,</b> <b>instances</b> or connections from the failed node among the remaining active nodes, thus eliminating (as with active/active) {{the need for}} a 'standby' node, but introducing a need for extra capacity on all active nodes.|$|R
30|$|Monitoring data {{collected}} by the collection service. Raw data is sent to storage <b>service</b> <b>instances</b> in the same sub-region, aggregates values of the sub-regions resource are sent to neighbouring regions and aggregates of the entire region are sent to other regions.|$|E
40|$|Pervasive {{computing}} environments aim at providing {{users with}} advanced services, dynamically composed our of networked services. In these open environments, availability of specific networked <b>service</b> <b>instances</b> cannot be guaranteed {{over time as}} users move and services leave and join the network accordingly. A major challenge in pervasive environments is thus to maintain services functionalities despite {{the dynamics of the}} environment, which induces connectivity loss with <b>service</b> <b>instances.</b> In this paper, we analyse the requirements to make distributed composite services able to face connectivity loss, i. e., able to dynamically adapt their configuration according to the networking environment. We then discuss the adaptation of relevant techniques that originate in the fault tolerance domain to the specifics of pervasive computing. ...|$|E
40|$|Cloud {{computing}} delivers {{new levels}} of being connected, instead of the once disconnected PC-type systems. The proposal {{in this paper}} extends that level of connectedness in the cloud such that cloud <b>service</b> <b>instances,</b> hosted by providers, can relocate between clouds. This is key in order to provide economical and regulatory benefits but more importantly liberation and positive market disruption. While service providers want to lock in their customer’s services, FluidCloud wants the liberation of those and thereby allow the service owner to freely choose the best matching provider at any time. In the cloud world of competing cloud standards and software solutions, each only partially complete, the central research question which this paper intends to answer: How to intrinsically enable and fully automate relocation of <b>service</b> <b>instances</b> between clouds...|$|E
50|$|Path {{protection}} {{is provided by}} configuring one work and one protect B-VID for each backbone <b>service</b> <b>instance.</b> In case of work path failure (as indicated by loss of 802.1ag continuity check messages, CCMs) the source bridge swaps the B-VID value to redirect the traffic onto the preconfigured protection path within 50 ms.|$|R
30|$|At {{the cloud}} service level, SIR often relies on {{collecting}} all available cloud <b>service’s</b> settings and <b>instances</b> (e.g. get available regions and list instances). At the CSI level, {{it is usually}} to retrieve the diverse real-time information of a certain <b>service</b> <b>instance</b> (e.g. get instance status). At the PSSA level, it tends to acquire the real-time information of the specific CSP entities (e.g. get VM image ID). Generally, SIR operations would not alter any cloud service, CSI or PSSA after execution.|$|R
30|$|Cloud service {{operations}} {{can be seen}} as {{reflections of}} the operational relationships among relevant cloud service and operation entities. For instance, I) “Create instance” and “List instance” can describe the creation and inclusion relationships from a cloud <b>service</b> to its <b>instance(s).</b> II) “Get instance ID” and “Modify instance name” can clarify the retrievable and modifiable relationships from a <b>service</b> <b>instance</b> to its property and condition. This is how SAMOS tackles cloud service operation specification by modelling the diversity of service entity operational relationships.|$|R
