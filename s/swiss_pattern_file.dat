0|231|Public
50|$|During the 1970s a third variant, {{with the}} L21 ordnance, was {{developed}} and prototypes produced. This was for Switzerland and used <b>Swiss</b> <b>pattern</b> 105 mm ammunition. It did not enter service.|$|R
5000|$|This rifle {{was based}} on a <b>Swiss</b> <b>pattern</b> using Minie {{ammunition}} in [...]54 caliber. It was 55.5 in long, with a 39.25 in barrel. Most of these weapons were made in Liege or in the Württemberg state-run factory in Oberndorf.|$|R
40|$|CONCUSS v 2. 0 {{supports}} the following additional features: 	Basic patterns 	 		User can specify common patterns by name instead of needing a <b>pattern</b> <b>file.</b> 		Supports cliques, wheels, cycles, paths, stars, and bicliques of any size. 	 	 	Multiple patterns 	 		Can return counts {{for a set}} of patterns in a single run of CONCUSS. 		Compatible with basic patterns and custom <b>pattern</b> <b>files</b> 	 	 	BEAVr integration 	 		Compatible with visualization software BEAVr 		Supports exporting archive of a single run to file for import by BEAV...|$|R
50|$|Anti-virus and {{anti-spyware}} software are helpful, {{but must}} be kept up-to-date with new <b>pattern</b> <b>files</b> at least every few days. The use of a firewall is also recommended.|$|R
40|$|Re-engineering from legacy {{executable}} (binary) files {{is greatly}} facilitated by identifying and naming statically linked library functions. This paper presents an efficient method for generating files of patterns; each pattern is {{a transformation of}} the first several bytes of a library function's executable code. Given a suitable <b>pattern</b> <b>file,</b> a candidate function can be identified in linear time. One <b>pattern</b> <b>file</b> is generated for each combination of compiler vendor, version, and memory model (where applicable). The process of identifying these parameters in a given executable file also identifies the main function of the program, i. e. {{the start of the}} code written by the user. The pattern les are produced automatically from a compiler's library file in a few seconds, with no user intervention required. Due to various limitations, not all library functions can be identified correctly; a small number will be either incorrectly identified or not identified. Optimal perfect hash functions are used to keep the <b>pattern</b> <b>files</b> compact and efficient to process...|$|R
30|$|The <b>pattern</b> <b>files</b> {{described}} {{in the previous section}} are a key element in any emulation setup. Their content largely decides whether the emulation is realistic or not, although realism is not the only reason to create patterns.|$|R
40|$|The {{performance}} of a parallel application is heavily affected by the I/O access <b>pattern,</b> <b>file</b> system type, and MPI communication modes. A determination of how these elements interact offers {{an explanation for the}} performance behavior, and provides hints for improving the execution of a particular pattern...|$|R
25|$|Early {{versions}} of Google Moon used a <b>Swiss</b> cheese <b>pattern</b> for the closest zoom levels before high-resolution images became available.|$|R
6000|$|... "The only {{possible}} government in Albania," [...] he said, looking steadfastly before {{him down the}} hill-side, [...] "is a group of republican cantons after the <b>Swiss</b> <b>pattern.</b> I can see no other solution that is not offensive to God. It does not matter in the least what we owe to Serbia or what we owe to Italy. We have got to set this world on a different footing. We have got {{to set up the}} world at last--on justice and reason." ...|$|R
5000|$|The program, {{currently}} in Version 4.20, supports more than 300 CA rules and over 1,000 <b>pattern</b> <b>files</b> in 14 different families including [...] "Life", [...] "Larger than Life", [...] "Vote for Life", [...] "Weighted Life", [...] "1-D binary CA", and [...] "1-D totalistic CA", and “Generations".A Java-based version, Mirek’s Java Cellebration, is an applet that plays more than 300 CA rules {{and more than}} 1,400 patterns.|$|R
30|$|GaP {{substrates}} {{were used}} in these experiments as a representative for the InGaAs family of semiconductors. The fabricated plasmonic nanostructures are plasmonic crystals consisting of arrays of periodically arranged cylindrical apertures in a 100 -nm Au film deposited on GaP substrates. The Au films were magnetron sputtered on the GaP substrates. Then, an FEI Nova 600 Dual Beam equipped with a Sidewinder FIB column was used to etch away selected regions of the Au film. To precisely control FIB mills, stream <b>patterning</b> <b>files</b> were used. Using FEI's PS Convert, <b>pattern</b> <b>files</b> are generated by inputting FIB-milling parameters such as horizontal field width, spot size, beam overlap (space between points in the pattern) and dwell time. The software then generates a file specifying pixel location and dwell for each point in the pattern. The choice of the input parameters allows controlling the overall depth of the aperture arrays created. Stream files provide fast and easy control over the various patterns required to mill arrays with various accelerating voltage conditions.|$|R
60|$|He had, however, already {{recognised}} {{that his}} mission was rather a delicate one, {{and he decided}} {{that it would be}} advisable to wait until he heard from Mrs. Hastings before calling upon Miss Ismay. There then remained the question, {{what to do with the}} next few days. A conversation with some pedestrian tourists whom he met at his hotel, and a glance at a map of the hill-tracks decided him, and remembering that he had on several occasions kept the trail in Canada for close on forty miles on end, he bought a <b>Swiss</b> <b>pattern</b> ruchsack, and set out on foot through the fells.|$|R
40|$|Abstract — This paper {{discusses}} {{the construction of}} a wireless emulator for the study of H. 264 Scalable Video Coding (SVC) and H. 264 based Scalable Multiple Description Coding (SMDC) transmission. This emulator is constructed as a part of European SUIT project for examining the benefit of SVC and SMDC for digital TV broadcasting. The individual component of the emulator and the technique to generate error <b>pattern</b> <b>files</b> will be discussed in this paper. An example of the emulator usage is finally shown...|$|R
50|$|The command-syntax is:csplit OPTION... <b>FILE</b> <b>PATTERN...</b>|$|R
3000|$|... [...]. Hence, the LFU {{approach}} for ranking cached content only produces nonexistent <b>patterns</b> of <b>file</b> popularity, which in turn, results in reductions of cache hit events.|$|R
30|$|KauNet already {{provides}} a pattern handling framework which is reused for encoding the semantics of triggers, thus simplifying the implementation. The framework provides {{the means to}} create and load compressed <b>pattern</b> <b>files</b> composed of position and value pairs. The values are represented as short values (i.e., 0 – 65535) that contain pattern specific information. For triggers {{the implication is that}} no more than 65536 mutually exclusive trigger values can exist. As the trigger values that are inserted in a pattern are {{under the control of the}} user, it is possible to generate triggers leading to arbitrary complex behavior.|$|R
40|$|A static library {{identification}} {{framework is}} proposed through studying library as “dcc”, which dynamically extracts binary characteristic file on applications under ARM processor. This framework obtains function modules according to ARM assemble characteristics, {{on the basis}} of which dynamic signature is generated due to <b>pattern</b> <b>files</b> through analyzing coding characteristics of assemble addressing mode and that of corresponding binary codes, then signatures of candidate functions are matched with signatures of library functions using hash algorithm to identify library functions. This method can recognize library functions efficiently and solve conflict between massive library files and matching efficiency effectively. </p...|$|R
60|$|After {{answering}} the letter Wyllard started North, and, obtaining Agatha's address from Miss Rawlinson, went on again {{to a certain}} little town, which, encircled by towering fells, stands beside a lake in the North Country. He had already recognized that his mission was rather a delicate one, and he decided {{that it would be}} advisable to wait until he heard from Mrs. Hastings before calling upon Miss Ismay. There remained the question, {{what to do with the}} next few days. A conversation with several pedestrian tourists whom he met at his hotel, and a glance at a map of the hill-tracks decided him. Remembering that he had on several occasions kept the trail in Canada for close on forty miles, he bought a <b>Swiss</b> <b>pattern</b> rücksack, and set out on foot through the fells.|$|R
5000|$|BioPAX-pattern, a Java API for {{defining}} and searching graph <b>patterns</b> in BioPAX <b>files.</b>|$|R
50|$|In June 2008, Trend Micro {{introduced}} Trend Micro Smart Protection Network, a cloud-client content security {{infrastructure that}} delivers global threat intelligence to protect customers from online threats, such as data stealing malware, phishing attacks, and other web, email, and mobile threats. In 2012, Trend Micro added big data analytics to its Smart Protection Network. Big data analytics allow the network to use behavioral-based identification methods to identify new security threats. The network also combines in-the-cloud technologies with other client-based antivirus technologies to reduce dependency on conventional <b>pattern</b> <b>file</b> downloads on the endpoint. Threat information from Trend Micro’s Smart Protection Network is deployed {{in real time}} to the company’s security software portfolio.|$|R
5000|$|Google flags {{search results}} {{with the message}} [...] "This site may harm your computer" [...] if the site is known to install {{malicious}} software in the background or otherwise surreptitiously. Google does this to protect users against visiting sites that could harm their computers. For approximately 40 minutes on January 31, 2009, all search results were mistakenly classified as malware and could therefore not be clicked; instead a warning message was displayed and the user was required to enter the requested URL manually. The bug was caused by human error. The URL of [...] "/" [...] (which expands to all URLs) was mistakenly added to the malware <b>patterns</b> <b>file.</b>|$|R
50|$|The {{patterns}} may be line {{numbers or}} regular expressions. The program outputs {{pieces of the}} file separated by the <b>patterns</b> into <b>files</b> xx00, xx01, etc., and outputs the size of each piece, in bytes, to standard output.|$|R
5000|$|Another {{but less}} popular way to {{identify}} the file format {{is to examine the}} file contents for distinguishable <b>patterns</b> among <b>file</b> types. The contents of a file are a sequence of bytes and a byte has 256 unique permutations (0-255). Thus, counting the occurrence of byte patterns that is often referred as byte frequency distribution gives distinguishable <b>patterns</b> to identify <b>file</b> types. There are many content-based file type identification schemes that use byte frequency distribution to build the representative models for file type and use any statistical and data mining techniques to identify file types ...|$|R
40|$|We {{demonstrate}} a novel pattern {{that results in}} bacterial biofilms {{as a result of}} the competition between hydrodynamic forces and adhesion forces. After the passage of an air plug, the break up of the residual thin liquid film scrapes and rearranges bacteria on the surface, such that a <b>Swiss</b> cheese <b>pattern</b> of holes is left in the residual biofilm...|$|R
40|$|Added 	Implementation of GPU {{processing}} 	Addition of a predictand <b>pattern</b> <b>file.</b> 	Addition of compression to {{the forecast}} files. 	Addition of CPack files. 	Addition {{of a unit}} test on gradients preprocessing. Changed 	The archive and calibration periods can now start {{in the middle of}} a year. 	Better check the requested time limits when loading predictor data. Fixed 	Removing a memory leak when aborting the app initialization. 	Correction of the data ordering in the forecast results. 	Bug fix in the time arrays intervals construction. 	Fix of a bug in the validation processing with a partial final year. 	Correction of the rank histogram. 	Reduced cURL outputs and fix of the multithreaded downloads. 	Adding a missing MSVC dll in the installation package...|$|R
40|$|The {{objective}} {{in this study}} was to evaluate the capacity of electronic nose to monitoring the effect of different Maillard reaction processes on natural flavors of sesame oil, using a specific Electronic Nose device (PEN 3). The flavors were prepared by Maillard reaction using chemical constituents from water extract of Lentinus and other precursors. The optimum conditions of reaction process was determined by using orthogonal test design, then an Electronic Nose (PEN 3) was used to characterize and classify eight different flavors from different reaction process and sesame oil from market. This method firstly sampled aroma composition emanating from the flavors by PEN 3 systems and then obtained response values of PEN 3. Principal Component Analysis (PCA) and Linear Discriminant Analysis (LDA) were used in order to investigate whether the electronic nose was able to distinguish among different Maillard Reaction Production (MRP). The loadings analysis was used to identify the sensors responsible for discrimination in the current <b>pattern</b> <b>file.</b> The results of this study showed that the basic components added with lysine, xylose and glycerin, heated in glycerine bath at 140 C for 120 min, was a novel flavors with sesame oil flavor and taste. The electronic nose PEN 3 can discriminate successfully different MRPs using both PCA and LDA analysis. But, it was not able to detect a clear difference in the sample of similar aroma with sesame oil using PCA analysis. Some sensors have the highest influence in the current <b>pattern</b> <b>file</b> for electronic nose PEN 3. A subset of few sensors can be chosen to explain all the variance. This result could be used in further studies to optimize the number of sensors...|$|R
40|$|This paper {{examines}} {{the determinants of}} inter-firm differences in MNCs (Multinational Corporations) patent <b>filing</b> <b>patterns</b> in India, in pesticides. The variables, R&D intensity of the foreign firms, international orientation of the foreign firms, areawise patent filing, role of Indian subsidiary {{and the effect of}} firms being world market leaders, are used to explain the inter-firm differences in patent <b>filing</b> <b>pattern.</b> The study finds that the firms with international orientation, but not necessarily Indian orientation, file more patents in India. More R&D-intensive firms are not filing patents in India and also more patents are being filed in herbicides, whose production and consumption is less compared to insecticides in India. Subsidiaries operating in India have no influence on the patent <b>filing</b> <b>pattern.</b> ...|$|R
40|$|Abstract:- The {{following}} is a proposal for separating cursive characters into separate and distinctive characters for recognition. The proposed method begins with thresholding of gray level image into binarised image using iterative thresholding selection method. The binary image is then slant corrected. Using Neuro-heuristic technique, the slant corrected word is over segmented and artificial neural network trained with segmentation points is used to verify the segmentation points found and each segmented character is further extracted using character matrix extraction module. At last, using neocognitron simulator, the ANN is trained with the extracted character patterns and then, input <b>pattern</b> <b>file</b> containing a set of test patterns are tested for recognition {{on the basis of}} similarity in shape between patterns, but with a little effect from deformation, changes in size or shifts in position...|$|R
40|$|This work {{aimed to}} {{determine}} the best harvest time for biomass production, yield and essential oil composition considering the seasonal variation (spring, summer, autumn and winter) on different plant parts (apical, medial and basal). Essential oils were extracted by hydro-distillation with a Clevenger apparatus for both fresh and dry mass obtained in field and lab conditions respectively. The extracted essential oils were analyzed by GS/MS (Shimadzu, QP- 5000). The chemical components were identified by comparing their mass spectrum to the <b>patterns</b> <b>filed</b> in the MS computer memory (Wiley, 139,Lib.), to the literature references, and by co-injection with authentic standards. Applying phyto-chemical tests on fresh and dry mass, the chemical component percentages of essential oils were calculated and identified as follows: citral (neral and geranial), myrcene, caryophylene and elemene...|$|R
40|$|Despite {{continued}} {{innovations in}} disk design, input/output performance has not {{kept pace with}} concurrent increases in processor speeds. Much {{research has focused on}} developing algorithms to avoid input/output or hide input/output latency in an attempt to redress this widening gap. Many studies have shown that with advance knowledge of access <b>patterns,</b> <b>file</b> systems can improve input/output performance by selecting policies appropriate for the resource demands. Unfortunately, access patterns may be complex or data dependent, and therefore unknown a priori. Our thesis is that the file system can automatically detect qualitative <b>file</b> access <b>patterns</b> both locally (per parallel program thread) and globally (per parallel program) and use this information to dynamically choose appropriate file system policies. We propose two complementary methods for automatic classification, based on neural networks and hidden Markov models, respectively. Global classifications are created from a combination [...] ...|$|R
40|$|We {{investigated}} {{the potential of}} transparently prefetching les in OceanStore, a wide area storage system, to reduce access latency for mobile users. We evaluated mechanisms which detect <b>patterns</b> in <b>file</b> access streams and predict usage based on these patterns. We designed and evaluated a novel technique for sharing collected pattern information among mobile users and multiple devices...|$|R
40|$|This paper {{presents}} a traffic characterization {{study of the}} popular video sharing service, YouTube. Over a three month period we observed almost 25 million transactions between users on an edge network and YouTube, including more than 600, 000 video downloads. We also monitored the globally popular videos over this period of time. In the paper we examine usage <b>patterns,</b> <b>file</b> properties, popularity and referencing characteristics, and transfer behaviors of YouTube, and compare them to traditional Web and media streaming workload characteristics. We conclude the paper {{with a discussion of}} the implications of the observed characteristics. For example, we find that as with the traditional Web, caching could improve the end user experience, reduce network bandwidth consumption, and reduce the load on YouTube’s core server infrastructure. Unlike traditional Web caching, Web 2. 0 provides additional metadata that should be exploited to improve the effectiveness of strategies like caching...|$|R
30|$|Six CIF format video contents, which cover a {{wide range}} of spatial {{complexity}} (SC) index and temporal complexity (TC) index [19], are used as original sequences, namely Foreman, Hall, Mobile, Mother, News, and Paris. The six sequences are encoded using H. 264 encoder with two sequence structures, namely, IBBPBB and IPPP. Group of picture (GOP) size is 15 frames. A proper fixed QP is used to prevent the compressed video from visible coding artifacts. Each row of MBs is encoded as an individual slice, and one slice is encapsulated into an RTP packet. To simulate transmission error, the loss patterns generated at five PLRs (0.1, 0.4, 1, 3, and 5 %) in [17] are used. For each nominal PLR, 30 channel realizations are generated by starting to read the error <b>pattern</b> <b>file</b> at a random point. Thus, for each original sequence, there are 150 realizations of packet loss corrupted sequences. Before subjective evaluation test, we must choose some typical PVSs from the large numbers of realizations.|$|R
40|$|Files are a {{tried and}} true {{operating}} system abstraction. They present a simple byte-stream model of I/O that has proven intuitive for application programmers and efficient for operating system builders. However, current file systems do not provide good support for adaptive continuous media (CM) applications - an increasingly important class of applications that exhibit complex access patterns and are particularly sensitive to variations in I/O performance. To address these problems we propose synthetic files. Synthetic files are specialized views of underlying regular files, and convert complex <b>file</b> access <b>patterns</b> into simple sequential synthetic <b>file</b> access <b>patterns.</b> Synthetic <b>file</b> construction {{can be viewed as}} a declarative meta-interface for I/O, enabling application-driven prefetching strategies that can hide device access latency even for applications with complex access <b>patterns.</b> Synthetic <b>files</b> can be realized dynamically, incremen-tally, or even optimistically. In this paper we outline a feedback-driven, incremental creation strategy that hides variations in device access latency for QoS-adaptive CM applications...|$|R
40|$|This paper {{describes}} a fast technique for dressing virtual humans with different pieces of clothing. The garments are constructed of cutting patterns seamed around the body. The system reads a body file and a cutting <b>pattern</b> <b>file</b> and produces a new body dressed with the specified product. The method exploits a mass-spring model of cloth but applies a new velocity modification approach to overcome its superelasticity. This {{results in a}} more realistic cloth simulation with one more control parameter [...] stretching threshold. The algorithm for cloth-body collision detection {{is based on a}} tree of bounding boxes with the leaves being faces on the body surface and their normal vectors. Responses to collisions are resolved modifying velocities of the cloth vertices and not applying penalty forces or energy fields as in other approaches. As the results show the system produces realistic images and makes it possible to sew a garment around a virtual human body in several seconds. Keywords: virt [...] ...|$|R
40|$|The {{objective}} {{of this paper is}} to present identification and recognition of Magneto-telluric data for sedimentary basins using Adaptive Resonance Theory (ART). Several sets of data consisting of 17 phases and 17 apparent resistivity values and their respective tag values are given. These sets of data are used for training the network, and other sets of data are used to test the network. The testing will result in the approximate identification of the data patterns with tag value of 1 where there is sediment of hydrocarbon and a tag value of 0 where there is no sediment of hydrocarbon in the given data set. Various techniques used in this experiment are creating the <b>pattern</b> <b>files,</b> normalizing the files, training the neural network, adjustment of weights and parameters, network file creation and finally testing of the field data for the pattern identification. The recognition rate in the proposed system lies between 95 % to 100 %...|$|R
