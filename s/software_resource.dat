64|1316|Public
2500|$|GeneNetwork is a {{combined}} database and open source bioinformatics data analysis <b>software</b> <b>resource</b> for systems genetics. This resource {{is used to}} study gene regulatory networks [...] that link DNA sequence variants to corresponding differences in gene and protein expression and to differences in traits such as health and disease risk. Data sets in GeneNetwork are typically made up of large collections of genotypes (e.g., SNPs) and phenotypes that are obtained from groups of related individuals, including human families, experimental crosses of strains of mice and rats, and organisms as diverse as Drosophila melanogaster, Arabidopsis thaliana, and barley. The inclusion of genotypes for all individuals makes it practical to carry out web-based gene mapping to discover those regions of the genome [...] that contribute to differences in gene expression, cell function, anatomy, physiology, and behavior among individuals.|$|E
50|$|In 2013, Torch {{was awarded}} with the U.S. Army Apache Technical <b>Software</b> <b>Resource,</b> Modernization, and Fielding Support Task for the AH-64 Apache Helicopter. The project will involve {{providing}} the Apache with platform-wide software upgrades, including GUIs and Modeling and simulation.|$|E
5000|$|Slurm began {{development}} as a collaborative effort [...] primarily by Lawrence Livermore National Laboratory, Linux NetworX, Hewlett-Packard and Groupe Bull as a Free <b>Software</b> <b>resource</b> manager in 2001. In 2010 Morris Jette and Danny Auble incorporated SchedMD LLC, to develop and market Slurm.|$|E
40|$|In this study, {{we propose}} an ontology-based {{framework}} {{to provide an}} integrated view, which could integrate various <b>software</b> <b>resources</b> and realize semantic interoperability between different <b>software</b> <b>resources.</b> Ontologies are divided into shared ontology and domain ontology. The design of shared ontology is described in detail. The shared ontology which has explicit ontological semantics, implements the uniform representation of heterogeneous information and helps to shield the heterogeneity of <b>software</b> <b>resources</b> systematically. The domain ontology is a domain-specific functional design ontology repository, in which, the invoking functions of the specific platform is encapsulated. The Collaborative Functional Design Environment (CFDE) is built through the shared ontology and the domain ontology. The CFDE facilitates the semantic interoperability among diverse <b>software</b> <b>resources,</b> which provides more <b>software</b> <b>resources</b> and better service to users...|$|R
50|$|For more <b>software</b> <b>resources,</b> see List {{of speech}} {{recognition}} software.|$|R
50|$|November 3, 1987 - Incorporated as Interface <b>Software</b> <b>Resources</b> Private Ltd.|$|R
50|$|Software {{requirements}} {{deal with}} defining <b>software</b> <b>resource</b> requirements and prerequisites {{that need to}} be installed on a computer to provide optimal functioning of an application. These requirements or prerequisites are generally not included in the software installation package and need to be installed separately before the software is installed.|$|E
50|$|The project also {{engaged in}} {{organizing}} State-wide awareness campaign, exposing the everyday computer user to the possibilities and advantages of using Linux-based <b>software.</b> <b>Resource</b> {{persons of the}} IT@School project in these sessions, demonstrate how there is a free software alternative {{to each and every}} computer application that an average user requires on a daily basis.|$|E
50|$|Slurm began {{development}} as a collaborative effort primarily by Lawrence Livermore National Laboratory, SchedMD, Linux NetworX, Hewlett-Packard, and Groupe Bull as a Free <b>Software</b> <b>resource</b> manager. It {{was inspired by the}} closed source Quadrics RMS and shares a similar syntax. The name is a reference to the soda in Futurama. Over 100 people around the world have contributed to the project. It has since evolved into a sophisticated batch scheduler capable of satisfying the requirements of many large computer centers.|$|E
5000|$|Provide {{very rich}} {{learning}} experience by optimising the conferencing <b>software</b> <b>resources.</b>|$|R
40|$|Performance is {{determined}} by a system’s resources and its workload. Some of these <b>resources</b> are <b>software</b> <b>resources</b> which are embedded in the software architecture; {{some of them are}} even created by the software architecture. This paper considers <b>software</b> <b>resources</b> and resource architecture, as an aspect of software architecture, It considers how resource architecture emerges, the relationship of <b>software</b> and hardware <b>resources,</b> some classes of resource architecture, and what they can tell us about system performance...|$|R
5000|$|Pantry: Links to <b>software</b> <b>resources</b> {{organized}} in different sections (Internet, multimedia, image, language...) for Windows, Linux and Mac.|$|R
50|$|The idea of SIM began {{during a}} break session at the Association for Computing Machinery (ACM) conference held in Las Vegas in August 1968. A {{conversation}} between Robert Head with the <b>Software</b> <b>Resource</b> Group and Herb Schwartz with the United States Atomic Energy Commission ensued on how current professional societies did not emphasize the managerial aspects of computing enough nor did they serve as a good communication mechanism between data processing managers and executive managers.That conversation {{was the basis for}} the formation of The Society for Management Information Systems (SMIS) which in 1982 became the Society for Information Management.|$|E
50|$|GeneNetwork is a {{combined}} database and open source bioinformatics data analysis <b>software</b> <b>resource</b> for systems genetics. This resource {{is used to}} study gene regulatory networks that link DNA sequence variants to corresponding differences in gene and protein expression and to differences in traits such as health and disease risk. Data sets in GeneNetwork are typically made up of large collections of genotypes (e.g., SNPs) and phenotypes that are obtained from groups of related individuals, including human families, experimental crosses of strains of mice and rats, and organisms as diverse as Drosophila melanogaster, Arabidopsis thaliana, and barley. The inclusion of genotypes for all individuals makes it practical to carry out web-based gene mapping to discover those regions of the genome that contribute to differences in gene expression, cell function, anatomy, physiology, and behavior among individuals.|$|E
40|$|This paper {{summarizes}} major {{achievements and}} challenges of <b>software</b> <b>resource</b> estimation over the last forty years. We address critical issues that enabled major achievements such as the development of good model forms, criteria for evaluating models, methods for integrating expert judgment and statistical data analysis, and processes for developing new models that cover new software development approaches. Future trends in software development and evolution processes are projected, along with their implications and challenges for future <b>software</b> <b>resource</b> estimation capabilities...|$|E
40|$|This paper {{presents}} {{mainly the}} project making techniques needed for integrating information systems into SMEs {{and tries to}} identify the appropiate <b>software</b> <b>resources.</b> As for the project making techniques, the paper presents elements {{for the analysis of}} the existing information system, the structure of the future system, a flexible scenario for implementing an IT system, steps to follow for generating a solution, methods of management and estimation of the project’s economic efficiency. integration techniques, sme, <b>software</b> <b>resources...</b>|$|R
40|$|Minimum Knowledge and Programming Skills [...] . 2 Equipment List [...] . 2 <b>Software</b> <b>Resources</b> [...] . 3 References [...] . 3 Analog to Digital Conversion [...] . ...|$|R
5000|$|... {{software-defined}} networking (SDN), which includes network virtualization - {{the process of}} merging hardware and <b>software</b> <b>resources</b> and networking functionality into a software-based virtual network ...|$|R
40|$|Abstract—Faced {{with the}} general trend of {{centralization}} of information, the biggest challenge to enterprise is how {{to ensure that all}} fixed computers and different mobile devices anywhere can access securely and quickly enterprise's businesses. To solve this problem, an Ontology-based Secure intranet/Internet Access Platform (OSAP) is presented. Ontology has been applied to the field of software resources sharing. <b>Software</b> <b>resource</b> ontology is defined for building the foundation of <b>Software</b> <b>Resource</b> Ontology Sharing Model (SROSM) and the OSAP. The OSAP framework is presented by semantic modeling based on SROSM for providing users with better and higher QOS in sharing software resources. The OSAP is designed with OSA...|$|E
30|$|Based on architecture-based meta-models and Access Models, {{the correct}} {{synchronization}} between runtime models and management {{systems can be}} guaranteed by the SM@RT tool. Thus, administrators are capable to manage the hardware and <b>software</b> <b>resource</b> at an architecture level separately.|$|E
40|$|Software {{product line}} {{engineering}} is one approach to reuse software and achieve large scale development cost reductions. The use of product line engineering in an embedded system context {{may increase the}} <b>software</b> <b>resource</b> consumption, i. e. the required memory and the execution time of the software, such that a larger and more expensive microcontroller must be used. Particularly for large production quantities, the additional expenses may result in an overall loss. This Ph. D. thesis addresses the risk of increased total cost due to product line engineering in several ways. An extension to existing cost models is presented that enables the calculation of the cost threshold beyond which product lines result in a loss. The <b>software</b> <b>resource</b> consumption engineering method is defined and applied to systematically reduce the <b>software</b> <b>resource</b> consumption of software architectures. Various examples and case studies conducted in an industrial context validate the thesis. Among them is the validation {{of the significance of}} the cost threshold, the application of the presented method, and an experimental setting organizations should consider to successfully introduce software product line engineering in a mass production setting...|$|E
40|$|Abstract — Grid {{infrastructures}} are {{in operation}} around the world, federating an impressive collection of computational resources {{and a wide}} variety of application software. In this context, it is important to establish advanced software discovery services that could help end-users locate software components suitable to their needs. In this paper, we present the design, architecture and implementation of an open-source keywordbased paradigm for the search of <b>software</b> <b>resources</b> in Grid infrastructures, called Minersoft. A key goal of Minersoft is to annotate automatically all the <b>software</b> <b>resources</b> with keywordrich metadata. Using advanced Information Retrieval techniques, we locate <b>software</b> <b>resources</b> with respect to users queries. Experiments were conducted in EGEE, one of the largest Grid production services currently in operation. Results showed that Minersoft successfully crawled 12. 3 million valid files (620 GB size) and sustained, in most sites, high crawling rates. I...|$|R
40|$|We {{introduce}} a method, so called FC method, for maintaining <b>software</b> <b>resources,</b> such as source codes and design documents, in consumer electronics products. Because a consumer electronics product is frequently and rapidly revised, software components in such product are also revised {{in the same}} way. However, {{it is not so}} easy for software engineers to follow the revision of the product because requirements changes for the product, including the changes of its functionalities and its hardware components, are largely independent of the structure of current <b>software</b> <b>resources.</b> FC method lets software engineers to restructure <b>software</b> <b>resources,</b> especially design documents, stepwise so as to follow the requirements changes for the product easily. We report an application of this method in our company to validate it. From the application, we can confirm that the quality of software was improved about in twice, and that efficiency of development process was also improved over four times. ...|$|R
40|$|Abstract—In this paper, we {{investigate}} {{the problem of}} supporting keyword-based searching for the discovery of <b>software</b> <b>resources</b> that are installed on the nodes of largescale, federated Grid computing infrastructures. We address a number of challenges that arise from the unstructured nature of software and the unavailability of software-related metadata on Grid sites. We present Minersoft, a Grid harvester that visits Grid sites, crawls their file-systems, identifies and classifies <b>software</b> <b>resources,</b> and discovers implicit associations between them. The results of Minersoft harvesting are encoded in a weighted, typed graph, named the Software Graph. A number of IR algorithms are used to enrich this graph with structural and content associations, to annotate <b>software</b> <b>resources</b> with keywords, and build inverted indexes to support keyword-based searching for software. Using a real testbed, we present an evaluation study of our approach, using data extracted from a production-quality Grid infrastructure. Experimental results show that our approach achieves high search efficiency. I...|$|R
40|$|Abstract. An {{approach}} {{to the design of}} display controller macrocells for embedded systems is described. This is based on algorithm modelling in a Win 32 based framework that allows the rapid evaluation of algorithms for display processing and the assessment of hardware and <b>software</b> <b>resource</b> implications. The paper outline...|$|E
3000|$|... — Media Appliance Widget: It {{lists the}} set of media {{appliances}} associated with content owner’s account. In general, an appliance[24] is pre-configured, self-contained, virtualization-enabled, and pre-built <b>software</b> <b>resource</b> unit (e.g., streaming, indexing and editing servers) that can be integrated with other compatible appliances for architecting complex applications such as video-on-demand CDN.|$|E
40|$|An {{approach}} {{to the design of}} display controller macrocells for embedded systems is described. This is based on algorithm modelling in a Win 32 based framework that allows the rapid evaluation of algorithms for display processing and the assessment of hardware and <b>software</b> <b>resource</b> implications. The paper outlines the implementation design and some application examples...|$|E
40|$|This paper {{describes}} {{the results of}} a study in which a group of science pre-service teachers used computer-based visualisation <b>software</b> <b>resources</b> to develop teaching strategies and lessons that would support the development of students’ conceptual understanding of chemical equilibrium. They used SMV: CHEM, VisChem and chemistry software packaged with textbooks. The goal was to assist science/chemistry teachers to design lessons that would overcome known difficulties in developing students’ understanding. Four teaching strategies of one teaching team are described in detail to illustrate the multifaceted nature {{of the way in which}} the <b>software</b> <b>resources</b> were used in lessons. Such a process of <b>software</b> deconstruction and <b>resource</b> integration in lesson plans has implications for all teachers of chemistry...|$|R
40|$|Thesis (Master) [...] University of Cyprus, Faculty of Pure and Applied Sciences, Department of Computer Science, 2009. Software {{retrieval}} {{is concerned}} with locating and identifying appropriate <b>software</b> <b>resources</b> to satisfy users requirements. It {{is considered to be}} one of the key technical issues in software reuse since must nd it before you can reuse it". In this thesis, we investigate the problem of supporting keyword-based searching for the discovery of <b>software</b> <b>resources</b> that are installed on the nodes of large-scale, federated Grid and Cloud computing infrastructures. We address a number of challenges that arise from the unstructured nature of software and the unavailability of software-related metadata on large-scale networked environments. We present Minersoft, a harvester that visits Grid/Cloud infrastructures, crawls their le-systems, identi es and classi es <b>software</b> <b>resources,</b> and discovers implicit associations between them. The results of Minersoft harvesting are encoded in a weighted, typed graph, named the Software Graph. A number of IR algorithms are used to enrich this graph with structural and content associations, to annotate <b>software</b> <b>resources</b> with keywords, and build inverted indexes to support keyword-based searching for software. Using a real testbed, we present an evaluation study of our approach, using data extracted from production-quality Grid and Cloud computing infrastructures. Experimental results show that Minersoft is a powerful tool for software retrieval...|$|R
30|$|Rice University {{provides}} many <b>software</b> <b>resources</b> at the WARP {{web site}} [15] including an Aloha-like MAC and a CSMA-like MAC. For our implementation we based our {{development on the}} CSMA-like MAC.|$|R
40|$|Abstract Background Current genomic {{research}} methods provide researchers with {{enormous amounts of}} data. Combining data from different high-throughput research technologies commonly available in biological databases can lead to novel findings and increase research efficiency. However, combining data from different heterogeneous sources is often a very arduous task. These sources can be different microarray technology platforms, genomic databases, or experiments performed on various species. Our aim {{was to develop a}} software program that could facilitate the combining of data from heterogeneous sources, and thus allow researchers to perform genomic cross-platform/cross-species studies and to use existing experimental data for compendium studies. Results We have developed a web-based <b>software</b> <b>resource,</b> called CROPPER that uses the latest genomic information concerning different data identifiers and orthologous genes from the Ensembl database. CROPPER can be used to combine genomic data from different heterogeneous sources, allowing researchers to perform cross-platform/cross-species compendium studies without the need for complex computational tools or the requirement of setting up one's own in-house database. We also present an example of a simple cross-platform/cross-species compendium study based on publicly available Parkinson's disease data derived from different sources. Conclusion CROPPER is a user-friendly and freely available web-based <b>software</b> <b>resource</b> that can be successfully used for cross-species/cross-platform compendium studies. </p...|$|E
40|$|As mobile {{applications}} {{become more}} pervasive, {{the need for}} assessing their quality, particularly in terms of efficiency (i. e. performance and resource utilisation), increases. Although there is a rich body of research and practice in developing metrics for traditional software, {{there has been little}} study on how these relate to mobile context-aware applications. Therefore, this paper defines and empirically evaluates metrics to capture <b>software,</b> <b>resource</b> utilisation and performance attributes, for the purpose of modelling their impact in context-aware mobile applications. To begin, a critical analysis of the problem domain identifies a number of specific <b>software,</b> <b>resource</b> utilisation and performance attributes. For each attribute, a concrete metric and technique of measurement is defined. A series of hypotheses are then proposed, and tested empirically using linear correlation analysis. The results support the hypotheses thus demonstrating the impact of software code attributes on the efficiency of mobile applications. As such, a more formal model in the form of mathematical equations is proposed in order to facilitate runtime decisions regarding the efficient placement of mobile objects in a context-aware mobile application framework. Finally, a preliminary empirical evaluation of the model is carried out using a typical application and an existing mobile application framework. 1...|$|E
40|$|A comprehensive, {{non-redundant}} composite protein sequence database is described. The database, OWL, is {{an amalgam}} of data from six publicly-available primary sources, and is generated using strict redundancy criteria. The database is updated monthly and its size has increased almost eight-fold {{in the last six}} years: the current version contains > 76, 000 entries. For added flexibility, OWL is distributed with a tailor-made query language, together with a number of programs for database exploration, information retrieval and sequence analysis, which together form an integrated database and <b>software</b> <b>resource</b> for protein sequences...|$|E
50|$|Below is the {{executive}} summary of the report. The full report was published in multiple formats, {{which can be found}} along with related open source <b>software</b> <b>resources</b> on Bollingers personal website.|$|R
25|$|An {{operating}} system (OS) is system software that manages computer hardware and <b>software</b> <b>resources</b> and provides common services for computer programs. All computer programs, excluding firmware, require an {{operating system}} to function.|$|R
40|$|Performance is {{determined}} by a system's resources and its workload. Some of the <b>resources</b> are <b>software</b> <b>resources</b> which are embedded in the software architecture; {{some of them are}} even created by the software behaviour. This paper describes <b>software</b> <b>resources</b> and resource architecture, and shows how resource architecture can be determined from software architecture and behaviour. It considers how resource architecture emerges during design, the relationship of <b>software</b> and hardware <b>resources,</b> some classes of resource architecture, and what they can tell us about system performance. Other uses of resource architecture are, to analyze deadlocks, to understand special software architectures developed for demanding situations, and to analyze how subsystems fit together when they share resources. Resource architecture can be described using description languages (ADLs) developed for software architecture. ...|$|R
