10|4|Public
50|$|An {{application}} may automatically {{determine a}} suitable <b>STUN</b> <b>server</b> for communications {{with a particular}} peer by querying the Domain Name System (DNS) for the stun (for UDP) or stuns (for TCP/TLS) server (SRV) resource record, e.g., _stun._udp.example.com. The standard listening port number for a <b>STUN</b> <b>server</b> is 3478 for UDP and TCP, and 5349 for TLS. Alternatively, TLS may also be run on the TCP port if the server implementation can de-multiplex TLS and STUN packets. In case no <b>STUN</b> <b>server</b> is found using DNS lookups, the standard recommends that the destination domain name should be queried for address records (A or AAAA), which would be used with the default port numbers.|$|E
5000|$|... ÂµTP {{also adds}} support for NAT {{traversal}} using UDP hole punching between two port-restricted peers where a third unrestricted peer {{acts as a}} <b>STUN</b> <b>server.</b>|$|E
50|$|The basic {{protocol}} operates essentially as follows. The client, typically operating {{inside a}} private network, sends a binding request to a <b>STUN</b> <b>server</b> {{on the public}} Internet. The <b>STUN</b> <b>server</b> responds with a success response that contains the IP address and port number of the client, as observed from the server's perspective. The result is obfuscated through exclusive or (XOR) mapping to avoid translation of the packet content by application layer gateways (ALGs) that perform deep packet inspection {{in an attempt to}} perform alternate NAT traversal methods.|$|E
50|$|<b>STUN</b> <b>servers</b> {{are used}} to {{establish}} a device-to-device connection while both devices are behind firewalls, that is, with no public Internet addresses and filtered Internet traffic. In certain cases, <b>STUN</b> <b>servers</b> fail to work around the firewalls. In such cases a specialized server is used to relay the information between devices: TURN servers. Unlike traditional use of <b>STUN</b> and TURN <b>servers,</b> the IoP implementation deploys them over decentralized peer-to-peer networks.|$|R
50|$|STUN {{messages}} are sent in User Datagram Protocol (UDP) packets. Since UDP {{does not provide}} reliable transport guarantees, reliability is achieved by application-controlled retransmissions of the <b>STUN</b> requests. <b>STUN</b> <b>servers</b> do not implement any reliability mechanism for their responses. When reliability is mandatory, the Transmission Control Protocol (TCP) may be used, but induces extra networking overhead. In security-sensitive applications, STUN may be transported and encrypted by Transport Layer Security (TLS).|$|R
40|$|Internet Connectivity Establishment (ICE) is {{becoming}} increasingly important for P 2 P systems on the open Internet, as it enables NAT-bound peers to provide accessible services. A problem for P 2 P systems that provide ICE services is how peers discover good quality ICE servers for NAT traversal, that is, the TURN and <b>STUN</b> <b>servers</b> that provide relaying and hole-punching services, respectively. Skype provides a P 2 P-based solution to this problem, where super-peers provide ICE services. However, experimental analysis of Skype indicates that peers perform a random walk of super-peers to find one with an acceptable roundtrip latency. In this paper, we discuss a self-organizing approach to discovering good quality ICE servers in a P 2 P system based the walk Topology. The walk Topology use...|$|R
50|$|STUN {{does work}} with {{three types of}} NAT: full cone NAT, {{restricted}} cone NAT, and port restricted cone NAT. In the cases of restricted cone or port restricted cone NATs, the client must send out a packet to the endpoint before the NAT will allow packets from the endpoint through to the client. STUN does not work with symmetric NAT (also known as bi-directional NAT) which is often found in the networks of large companies. Since the IP address of the <b>STUN</b> <b>server</b> {{is different from that}} of the endpoint, in the symmetric NAT case, the NAT mapping will be different for the <b>STUN</b> <b>server</b> than for an endpoint. TURN offers better results with symmetric NAT.|$|E
50|$|UDP hole {{punching}} {{will not}} work with symmetric NAT devices (also known as bi-directional NAT) {{which tend to be}} found in large corporate networks. In symmetric NAT, the NAT's mapping associated with the connection to the well-known <b>STUN</b> <b>server</b> is restricted to receiving data from the well-known server, and therefore the NAT mapping the well-known server sees is not useful information to the endpoint.|$|E
50|$|NAT-PMP {{runs over}} the User Datagram Protocol (UDP) and uses port number 5351. It has no {{built-in}} authentication mechanisms because forwarding a port typically {{does not allow}} any activity that could not also be achieved using STUN methods. The benefit of NAT-PMP over STUN {{is that it does}} not require a <b>STUN</b> <b>server</b> and a NAT-PMP mapping has a known expiration time, allowing the application to avoid sending inefficient keep-alive packets.|$|E
30|$|Due {{to the use}} of P 2 P technologies, the {{architecture}} is self-configuring, scalable, robust, and cost-efficient. It is scalable since each new PN added to the system brings extra resources to it. In contrast, in a client/server system, each new PN consumes additional resources on the central servers and thus eventually more capacity needs to be added, as we will show in Section 8. The system is also scalable when it comes to NAT traversal since in a P 2 P architecture, the peers can act as <b>STUN</b> and TURN <b>servers</b> to each other. In contrast, in a client/server system, centralized TURN servers are necessary. In a real-world system, a subset of the nodes will typically be behind the most restrictive types of NATs. When two such nodes need to communicate with each other, all the traffic between them needs to be relayed by a TURN server. If the volume of data is high and the system large, the relay servers need to have high capacity. However, in a P 2 P system, the responsibility for relaying data can be distributed among publically reachable peers. The architecture is robust since it is not dependent on centralized elements (i.e., central points of failure) for rendezvous and relaying of data. The system is cost-efficient since it has both low capex and perhaps more importantly, low opex.|$|R
50|$|STUN {{is a tool}} used {{by other}} protocols, such as Interactive Connectivity Establishment (ICE), the Session Initiation Protocol (SIP), or WebRTC. It {{provides}} a tool for hosts to discover {{the presence of a}} network address translator, and to discover the mapped, usually public, Internet Protocol (IP) address and port number that the NAT has allocated for the application's User Datagram Protocol (UDP) flows to remote hosts. The protocol requires assistance from a third-party network server (<b>STUN</b> <b>server)</b> located on the opposing (public) side of the NAT, usually the public Internet.|$|E
40|$|Session Traversal Utilities for NAT (STUN) Extension for Third-Party Authorization This {{document}} proposes {{the use of}} OAuth 2. 0 {{to obtain}} and validate ephemeral tokens {{that can be used}} for Session Traversal Utilities for NAT (STUN) authentication. The usage of ephemeral tokens ensures that access to a <b>STUN</b> <b>server</b> can be controlled even if the tokens are compromised. Status of This Memo This is an Internet Standards Track document. This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by th...|$|E
40|$|This {{specification}} defines {{an experimental}} {{usage of the}} Session Traversal Utilities for NAT (STUN) Protocol that discovers the presence and current behavior of NATs and firewalls between the STUN client and the <b>STUN</b> <b>server.</b> Status of This Memo This document is not an Internet Standards Track specification; it is published for examination, experimental implementation, and evaluation. This document defines an Experimental Protocol for the Internet community. This document {{is a product of}} the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741. Information about the current status of this document, any errata, and how to provide feedback on it may be obtained a...|$|E
40|$|This thesis project {{concerns}} NAT traversal {{techniques and}} their application to P 2 P networking {{with regard to}} MediaSense platform. Since MediaSense open source platform, developed by Mid Sweden University, utilizes the benefits of P 2 P networking, it also suffers from the drawbacks provided by NAT. The issue of NAT traversal is not trivial {{due to the fact}} that the behavior of NAT devices is not standardized and vendors are free to provide their own implementations. The common knowledge is, that at least four main types of NATs exist, differing in the filtering and mapping algorithms employed. NAT traversal techniques vary accordingly. No single technique can handle all the cases. Most of the techniques can handle up to three main types of NAT. The last type is usually used in large corporate networks and is called the Symmetric NAT. The most viable, and basically the only available technique for its traversal, is data relaying. This thesis builds a NAT traversal module for the MediaSense platform. The main purpose of this module is to provide seamless NAT traversal capabilities to the platform. The module does this in several steps: UPnP enabled device discovery, NAT type determination and data relaying via the proxy. Firstly the module attempts to discover the presence of a UPnP enabled Internet Gateway Device on the network. If such a device is present on the network, a port mapping can be created, making the node located behind NAT accessible from the public Internet. If a UPnP enabled device was not found, the module will try to determine the type of NAT used. Based on the type of NAT used, the module can transit to either the proxy mode or request assistance of the <b>STUN</b> <b>server</b> to keep the created mapping alive. The resulting chapters provide the reader with the output produced by each step, conclusions the author has made while working on this project and some general ideas on future work within the subject...|$|E

