10|136|Public
50|$|The packets may be {{encapsulated}} in a data frame, with a frame <b>synchronization</b> <b>bit</b> sequence {{indicating the}} start of the frame, and sometimes also a bit <b>synchronization</b> <b>bit</b> sequence, typically 01010101, for identification of the bit transition times. Note that at the physical layer, this is considered as synchronous serial communication. Examples of packet mode data link protocols that can be/are transferred using synchronous serial communication are the HDLC, Ethernet, PPP and USB protocols.|$|E
5000|$|In 1965, that {{permitted}} the TDM multiplexing of 24digital telephone channels of 64 kbit/s into a 1.544-Mbit/s signal with a formatcalled T1 (see Figure 11). For the T1 signal, a <b>synchronization</b> <b>bit</b> {{is added to}} the24 TDM time slots, {{in such a way}} that the aggregate transmission rate is: ...|$|E
5000|$|The data {{transfer}} speed was from 1000 to 2000 bits per second, {{compared to the}} disk drive's 250 kilobits per second. The technical reference for the IBM PC 5150 specifies that the WRITE-BLOCK routine turns on the cassette drive motor and transforms each byte into bits. A (1) bit corresponds to a 1.0 ms timer period, (0) bit corresponds to 0.5 ms which results in a recording speed of 1000 - 2000 bit/s. First 256 bytes of [...] "11111111" [...] is written. One <b>synchronization</b> <b>bit</b> [...] "0". A synchronization byte of 0x16. 256-byte blocks of data and a 2-byte CRC is written until all data is transferred.|$|E
50|$|The raw (maximum) {{data rates}} {{shown in the}} figures are what is {{available}} for Tactical Data transmission, after the low level overheads (Error Detection And Correction (EDAC) <b>bits,</b> <b>synchronization</b> <b>bits,</b> etc.) have been taken into consideration.|$|R
3000|$|... where DC is {{the duty}} cycle, Ndata the {{sampling}} data bits within one frame time, Noh the overhead bits within one frame time, Nsync the <b>synchronization</b> <b>bits</b> within one frame time, fc the communication data rate (bits per s) and fs the sampling data rate (bits per s).|$|R
50|$|Each voice {{time slot}} in the TDM frame is called a channel. In European systems, {{standard}} TDM frames contain 30 digital voice channels (E1), and in American systems (T1), they contain 24 channels. Both standards also contain extra bits (or bit time slots) for signaling and <b>synchronization</b> <b>bits.</b>|$|R
40|$|International Telemetering Conference Proceedings / October 10 - 12, 1972 / International Hotel, Los Angeles, CaliforniaThis paper {{discusses}} all-digital {{techniques for}} receiving and coherently detecting moderate data rate (less than 1 Mbps) PSK signals in real time. A receiver employing synchronous bandpass sampling and A/D {{conversion of the}} IF signal is described. Sampler <b>synchronization,</b> <b>bit</b> synchronization, and data detection are performed by a special-purpose digital processor. Analytical methods are developed for predicting receiver performance, and experimental data is presented to indicate the degree of agreement that one might expect...|$|E
40|$|Abstract: This paper discussw the use {{of shared}} {{register}} channels as a data exchange mechanism among processors in a fine-grained MIMD system with a load/store architecture. A register channel is provided with a <b>synchronization</b> <b>bit</b> {{that is used to}} ensure that a processor succeeds in reading a channel only after a value has been written to the channel. The instructions supported by this load/store architecture allow both registers and register channels to be used as operand sources and result destinations. Conditional load, store, and move instructions are provided to allow processors to exchange values through channels in presence of aliasing caused by array references. Compiler support required to take proper advantage of channels is briefly discussed. In contrast to a VLIW machine a system with channels does not require strict lockstep operation of its processors. This reduces the delays caused by unpredictable events such as memory bank conflicts...|$|E
40|$|Abstract-A turbo code codec is {{implemented}} as {{a portion of}} a modem in a software radio. The performance of this software radio is tested in a Monte Carlo simulation and on a hardware testbed. The codec uses two punctured rate 1 / 2 constituent codes and a 16383 -bit pseudo-random interleaver to produce a net rate ~ 1 / 2 turbo code. The modem generates a binary phaseshift keyed modulation on a 200 kHz carrier. Frame headers are inserted between interleaver blocks for synchronization of the receiver’s deinterleaver and to detect loss of carrier or symbol <b>synchronization.</b> <b>Bit</b> error rate performance curves are reported. The Monte Carlo simulation shows an implementation loss of about 0. 5 dB at threshold (i. e., an E b/N o of about 1 dB). This implementation loss is attributed to carrier and bit synchronization errors. The hardware testbed displayed a total implementation loss of about 2. 5 dB. The additional 2 dB loss over the Monte Carlo results can be attributed to detector mismatch and inter-symbol interference caused by unmodeled band-limiting filters of the hardware. Some of these filterinduced losses should be recoverable if an equalizer is added to the modem software. I...|$|E
5000|$|VITC is 90 bits long: 32 bits of time code, 32 bits of user data, 18 <b>synchronization</b> <b>bits,</b> and 8 bits of checksum. It is {{transmitted}} using non-return-to-zero encoding at a bit rate of 115 times the line rate. (The unused 25 bit times are to {{leave room for}} the horizontal blanking interval.) ...|$|R
40|$|An optical 565 Mbit/s {{transmission}} system at 1064 nm with {{phase shift keying}} and homodyne detection using a new carrier recovery technique is presented. The phase error signal in the receiver is obtained by means of <b>synchronization</b> <b>bits.</b> This method combines {{the advantages of the}} Costas loop with the simplicity of the pilot carrier technique...|$|R
5000|$|With one exception, VITC {{contains}} the same payload as SMPTE linear timecode (LTC), {{embedded in a}} new frame structure with extra <b>synchronization</b> <b>bits</b> and an error-detection checksum. The exception is that VITC is encoded twice per interlaced video frame, once in each field, and one additional bit (the [...] "field flag") is used to distinguish the two fields.|$|R
40|$|Abstract- A {{multiprocessor}} system capable of exploit-ing fine-grained parallelism must support efficient syn-chronization and data passing mechanisms. This paper demonstrates {{the use of}} shared register channels as the communication mechanism among processors in a mul-tiprocessor chip. A register channel is provided with a <b>synchronization</b> <b>bit</b> {{that is used to}} ensure that a proces-sor succeeds in reading a channel only after the channel has been written to. In contrast to a VLIW machine a system with channels does not require strict lockstep operation of its processors. This reduces the delays caused by unpredictable events such as memory bank conflicts. Providing channels accessible at the speed of registers constrains the number of channels that can be supported in hardware. This paper presents compile-time techniques that efficiently allocate the channels and successfully exploit the fine-grained parallelism using a small number of channels. The scheduling of operations is carried out in a manner that reduces communication among the processors and hence the number of channels required. Redundant synchronizations subsumed by other synchronizations are eliminated and channels are reused whenever possible. Results of experiments demonstrating the effectiveness of the techniques in util-izing a small number of channels are presented...|$|E
40|$|International Telemetering Conference Proceedings / October 27 - 30, 1997 / Riviera Hotel and Convention Center, Las Vegas, NevadaThe {{international}} space community, including National Aeronautics and Space Administration (NASA), European Space Agency (ESA), Japanese National Space Agency (NASDA) and others, {{are committed to}} using the Consultative Committee for Space Data Systems (CCSDS) recommendations for low earth orbiting satellites. With {{the advent of the}} CCSDS standards and the availability of direct broadcast data from a number of current and future spacecraft, a large number of users could have access to earth science data. However, to allow for the largest possible user base, the cost of processing this data must be as low as possible. By utilizing Very Large Scale Integration (VLSI) Application-Specific Integrated Circuits (ASIC), pipelined data processing, and advanced software development technology and tools, highly integrated CCSDS data processing can be attained in a single desktop system. This paper describes a prototype desktop system based on the Peripheral Component Interconnect (PCI) bus that performs CCSDS standard frame <b>synchronization,</b> <b>bit</b> transition density decoding, Cyclical Redundancy Check (CRC) error checking, Reed-Solomon decoding, data unit sorting, packet extraction, annotation and other CCSDS service processing. Also discussed is software technology used to increase the flexibility and usability of the desktop system. The reproduction cost for the system described is less than 1 / 8 th the current cost of commercially available CCSDS data processing systems...|$|E
40|$|International Telemetering Conference Proceedings / October 30 -November 02, 1995 / Riviera Hotel, Las Vegas, NevadaThe wide use of {{standard}} packet telemetry protocols {{based on the}} Consultative Committee for Space Data Systems (CCSDS) recommendations in future space science missions has created a large demand for low-cost ground CCSDS processing systems. Some of the National Aeronautics and Space Administration (NASA) missions using CCSDS telemetry include Small Explorer, Earth Observing System (EOS), Space Station, and Advanced Composite Explorer. For each mission, ground telemetry systems are typically used {{in a variety of}} applications including spacecraft development facilities, mission control centers, science data processing sites, tracking stations, launch support equipment, and compatibility test systems. The future deployment of EOS spacecraft allowing direct broadcast of data to science users will further increase demand for such systems. For the last ten years, the Data Systems Technology Division (DSTD) at NASA Goddard Space Flight Center (GSFC) has been applying state-of-the-art commercial Very Large Scale Integration (VLSI) Application Specific Integrated Circuit (ASIC) technology to further reduce the cost of ground telemetry data systems. As a continuation of this effort, a new desktop CCSDS processing system is being prototyped that offers up to 150 Mbps performance at a replication cost of less than 20 K. This system acts as a gateway that captures and processes CCSDS telemetry streams and delivers them to users over standard commercial network interfaces. This paper describes the development of this prototype system based on the Peripheral Component Interconnect (PCI) bus and 0. 6 micron complementary metal oxide semiconductor (CMOS) ASIC technology. The system performs frame <b>synchronization,</b> <b>bit</b> transition density decoding, cyclic redundancy code (CRC) error checking, Reed-Solomon decoding, virtual channel sorting/filtering, packet extraction, and quality annotation and accounting at data rates up to and beyond 150 Mbps...|$|E
40|$|International Telemetering Conference Proceedings / October 30 -November 02, 1995 / Riviera Hotel, Las Vegas, NevadaThis paper {{discusses}} an error-correcting scheme {{applied to}} a telemetry system over HF radio channel. According to the statistical properties of transmission error on HF radio channel, the scheme uses one important diffuse convolutional code, which is threshold decoded and corrects the random or burst errors. The operation of this code is explained, and a new method for word <b>synchronization</b> and <b>bit</b> <b>synchronization</b> is proposed. Coding and decoding, word <b>synchronization,</b> and <b>bit</b> <b>synchronization</b> are all activated by software program so as to greatly improve the flexibleness and applicability of the data transmission system. Test results of error-correcting are given {{for a variety of}} bit-error-rate (BER) s on HF radio channel...|$|R
30|$|The ML <b>bit</b> <b>synchronization</b> {{is first}} {{introduced}} in [12], {{and a brief}} assessment has showed that it outperforms the conventional histogram method in weak GNSS signal environments. However, all analyses in [12] were based on simulation results and no theoretical performance model had been developed. The ML bit decoding, introduced in [13] is reported to outperform other algorithms either in performance or complexity. However, the effect of different numbers of bits to be decoded {{at a time and}} the effect of Doppler error was not assessed in [13]. In [14], the requirements of ML <b>bit</b> <b>synchronization</b> and <b>bit</b> decoding algorithms were analyzed {{in terms of the number}} of data bits required for <b>bit</b> <b>synchronization</b> and the number of data bits that can be decoded at a time for bit decoding.|$|R
40|$|This paper {{presents}} a patchwork-based audio watermarking method to resist de-synchronization attacks such as pitch-scaling, time-scaling, and jitter attacks. At the embedding stage, the watermarks are embedded into the host audio signal in the discrete cosine transform (DCT) domain. Then, {{a set of}} <b>synchronization</b> <b>bits</b> are implanted into the watermarked signal in the logarithmic DCT (LDCT) domain. At the decoding stage, we analyze the received audio signal in the LDCT domain to find the scaling factor imposed by an attack. Then, we modify the received signal to remove the scaling effect, together with the embedded <b>synchronization</b> <b>bits.</b> After that, watermarks are extracted from the modified signal. Simulation results show that at the embedding rate of 10 bps, the proposed method achieves 98. 9 % detection rate on average under the considered de-synchronization attacks. At the embedding rate of 16 bps, it can still obtain 94. 7 % detection rate on average. So, the proposed method is much more robust to de-synchronization attacks than other patchwork watermarking methods. Compared with the audio watermarking methods designed for tackling de-synchronization attacks, our method has much higher embedding capacity...|$|R
40|$|International Telemetering Conference Proceedings / October 08 - 11, 1968 / Ambassador Hotel, Los Angeles, CaliforniaThe PCM BR Synchronizer/Signal Conditioner, {{hereafter}} called "synchronizer," plays a {{vital role}} in telemetry data recovery, and is perhaps the most important and complex component of telemetry data processing systems (DPS). The synchronizer, being the "front end" of the system, makes an irrevocable decision as to the binary value of each data bit, and provides the fundamental timing signal (clock) for the entire DPS. Thus, the performance characteristics of the synchronizer substantially determine the system's capabilities, and it may be said that the system is as good (or bad) as the synchronizer. This paper presents and discusses test data obtained on synchronizers available to date, and used at Goddard Space Flight Center (GSFC) and its satellite tracking and data acquisition network (STADAN) stations. Performance characteristics such as bit <b>synchronization</b> (<b>bit</b> sync), bit sync acquisition, tracking, bit error rate, and intersymbol interference have been measured with respect to split-phase (SP) and NRZ-L input signals between 500 bps and 300 Kbps, perturbed by "white" Gaussian noise plus jitter. The effect of tape recording and band limiting of these signals on synchronizer performance is also discussed. It is shown that bit error rate alone does not "tell the whole story" about synchronizers, particularly when operating with low (less than 7 dB) SNR's plus jitter. The test data indicate that there is no single synchronizer excelling in all respects. For example, a synchronizer which operates well down to SNR of - 3 dB has inferior acquisition, and slippage characteristics when jitter is added to noise. Generally, the performance threshold for random jitter (defined later) is at SNR greater than 10 dB. Some synchronizers seem to perform better with SP than NRZ-L signals, and vice versa. Finally, discussed and suggested are definitions of performance parameters which would uniformly and unambiguously describe and specify synchronizers. A lack of precisely defined and measurable performance parameters and characteristics has caused misinterpretation and misunderstanding of specifications presented by both vendor and customer...|$|E
50|$|The flags bits {{found in}} the fourth word are known as H, F, and V. The H bit {{indicates}} the start of horizontal blank; and <b>synchronization</b> <b>bits</b> immediately preceding the horizontal blanking region must have H set to one. Such packets are {{commonly referred to as}} End of Active Video, or EAV packets. Likewise, the packet appearing immediately {{before the start of the}} active video has H set to 0; this is the Start of Active Video or SAV packet.|$|R
25|$|The flags bits {{found in}} the fourth word (commonly known as the XYZ word) are known as H, F, and V. The H bit {{indicates}} the start of horizontal blank; and <b>synchronization</b> <b>bits</b> immediately preceding the horizontal blanking region must have H set to one. Such packets are {{commonly referred to as}} End of Active Video, or EAV packets. Likewise, the packet appearing immediately {{before the start of the}} active video has H set to 0; this is the Start of Active Video or SAV packet.|$|R
30|$|In {{the context}} of this work, the {{performance}} of <b>bit</b> <b>synchronization</b> and <b>bit</b> decoding is directly assessed in terms of the successful synchronization rate (SSR) with the navigation data bit (i.e., correct identification of the bit boundaries) and the successful decoding rate (SDR) of bit values. This contrasts with previous work [14], which focused primarily on fixed SSRs and SDRs. In addition, theoretical performance models are derived and experimentally validated. This paper also analyzes the effect of bit transitions for ML <b>bit</b> <b>synchronization</b> and the bound of frequency error for ML bit decoding in weak signals. Finally, the results are validated with multiple-trial test in a software-based GNSS receiver, and various implementation schemes are introduced and compared.|$|R
30|$|This section {{gives the}} {{theoretical}} performance models for <b>bit</b> <b>synchronization</b> and decoding.|$|R
5000|$|SSRC: (32 <b>bits)</b> <b>Synchronization</b> source {{identifier}} uniquely identifies {{the source of}} a stream.|$|R
40|$|A {{synchronization}} code scheme {{based on}} moving average is proposed for robust audio watermarking in the paper. Two proper positive integers are chosen to compute the moving average sequence by sliding one sample every time. The <b>synchronization</b> <b>bits</b> are embedded at crosses of the two moving average sequences with the quantization index modulation. The experimental {{results show that the}} proposed watermarking scheme maintains high audio quality and is robust to common attacks such as additive white Gaussian noise, re-sampling, low-pass filtering, random cropping, MP 3 compression, jitter attack and time scale modification. Simultaneously, the algorithm has high search efficiency and low false alarm rate. Comment: 23 pages, 7 tables, 5 figure...|$|R
40|$|Three {{implementations}} of a concurrently‐updateable {{linked list}} were compared, one that emulates a lock‐free approach {{based on a}} compare‐and‐swap instruction, one that makes direct use of the Cray XMT’s full‐empty <b>synchronization</b> <b>bits</b> on every word of memory, and a third that uses the XMT’s atomic int_fetch_add instruction. The relative performance of the three implementations was experimentally compared on a 512 ‐processor XMT. The direct implementation approach performed up to {{twice as fast as}} the other two approaches under conditions of low contention, but the three implementations performed about the same when the amount of contention was high. The Cray XMT The Cray XMT is a heavily multithreaded architecture, with 128 hardware threads pe...|$|R
30|$|Algorithms {{which do}} not require any {{external}} aiding source, e.g., histogram method [9], Viterbi algorithm [10], extended Kalman filter method [11], and maximum-likelihood (ML) algorithms [12, 13], can determine {{the location of the}} data bit boundaries and the data bit values for a stand-alone GNSS receiver. Authors in [12, 13] showed that the ML algorithms (i.e., ML <b>bit</b> <b>synchronization</b> and ML <b>bit</b> decoding) outperformed the other methods for weak GNSS signals.|$|R
40|$|This paper {{introduces}} Pica, a fine-grain, {{message passing}} architecture designed to efficiently support high-throughput parallel applications. This focus on high-throughput applications allows a small local memory of 4096 36 -bit words. The architecture minimizes overhead for basic parallel operations. An operand-addressed context cache and round-robin task manager allow single cycle task swaps. Fixed-sized activation contexts simplify storage management. Word-tag <b>synchronization</b> <b>bits</b> provide low-cost <b>synchronization.</b> Several applications {{have been developed}} for this architecture including thermal relaxation, matrix multiplication, JPEG image compression, and positron emission tomography image reconstruction. These applications have been implemented and executed on the Pica architecture using an instrumented instruction-level simulator. Using these results, the architectural features of Pica are evaluated. 1 Introduction There are many approaches to exploiting fine-grain parallelism: in [...] ...|$|R
30|$|This section gives a brief {{overview}} of the ML algorithms for <b>bit</b> <b>synchronization</b> and decoding used in this paper.|$|R
30|$|The {{performance}} of ML bit decoding being assessed {{in this paper}} assumes that successful <b>bit</b> <b>synchronization</b> has been achieved.|$|R
40|$|This paper {{introduces}} Pica, a fine-grain, {{message passing}} architecture designed to efficiently support high-throughput parallel applications. The architecture minimizes overhead for basic parallel operations. An operand-addressed context cache and round-robin task manager allow single cycle task swaps. Fixed-sized activation contexts simplify storage management. Wordtag <b>synchronization</b> <b>bits</b> provide low-cost <b>synchronization.</b> The focus on high-throughput applications allows a small local memory (1024 36 -bit words). A complete node (including memory) {{can be implemented}} using {{a fraction of a}} chip. A multi-node chip prototype (four nodes/chip) is being designed. In order to meet chip I/O requirements, a high-bandwidth, threedimensional optical network is also being designed. Using recent developments in epitaxial liftoff of optoelectronic devices and through-chip transmission, a network is presented that provides 3. 2 Gbits/sec offchip bandwidth. 1 High-Bandwidth Parallelism There are many [...] ...|$|R
50|$|To ensure enough {{transitions}} to maintain <b>synchronization,</b> a <b>bit</b> of opposite polarity is inserted after five consecutive {{bits of the}} same polarity. This practice is called bit stuffing, and is necessary due to the non-return to zero (NRZ) coding used with CAN. The stuffed data frames are destuffed by the receiver.|$|R
25|$|SSRC: (32 <b>bits)</b> <b>Synchronization</b> source {{identifier}} uniquely identifies {{the source of}} a stream. The synchronization sources within the same RTP session will be unique.|$|R
40|$|Abstract — ADS-B {{system allows}} the {{aircraft}} to periodically broadcast its identification, position, velocity {{and other information}} to the nearby aircraft and the ground station {{in order to provide}} better situational awareness. ADS-B system uses Reed Solomon code to encrypt the message data and it modulates the data using Continuous Phase Frequency Shift Keying (CPFSK) technique. This paper presents the MATLAB implementation of the receiver system which must be capable of extracting from a file ADS-B message and ground uplink message along with <b>Synchronization</b> <b>bits,</b> Payload, FEC parity bits from each aircraft. Demodulate the data and finally display the corresponding fields of each element in MATLAB GUI along with each aircraft’s Flight ID and position of the flight on a grid. The message transmitted by the ADS-B Out system is received correctly by the ADS-B In system. Keywords-ADS-B, RS Codes, CPFSK I...|$|R
50|$|In a {{communication}} system, the receiver side BER {{may be affected}} by transmission channel noise, interference, distortion, <b>bit</b> <b>synchronization</b> problems, attenuation, wireless multipath fading, etc.|$|R
40|$|Abstract—This paper {{describes}} Pica, a fine-grain, message-passing architecture {{designed to}} efficiently support high-throughput, low-memory parallel applications, such as image processing, object recognition, and data compression. By specializing the processor and reducing local memory (4, 096 36 -bit words), multiple nodes {{can be implemented}} on a single chip. This allows highperformance systems for high-throughput applications to be realized at lower cost. The architecture minimizes overhead for basic parallel operations. An operand-addressed context cache and round-robin task manager support fast task swapping. Fixed-sized activation contexts simplify storage management. Word-tag <b>synchronization</b> <b>bits</b> provide low-cost <b>synchronization.</b> Several applications {{have been developed for}} this architecture, including thermal relaxation, matrix multiplication, JPEG image compression, and Positron Emission Tomography image reconstruction. These applications have been executed using an instrumented instruction-level simulator. The results of these experiments and an evaluation of Pica’s architectural features are presented. Index Terms—Fine-grain parallelism, image processing architectures, through-wafer interconnects, MIMD architectures. ...|$|R
