54|76|Public
5000|$|Round {{dance is}} a term used in bee keeping, entomologyand {{communication}} of social insects. It describes a specific communicative behavior of honey bees inside the bee hive. When a forager, or <b>scout</b> <b>bee,</b> returns to the hive she performs a round dance to communicate the location of food {{sources close to the}} colony (less than 35 yards away). [...] The bee moves in a circular pattern.|$|E
5000|$|Where [...] is {{the fitness}} {{value of the}} [...] {{solution}} in the swarm. As seen, the better the solution , the higher the probability of the food source selected. If a position cannot be improved over a predefined number (called limit) of cycles, then the food source is abandoned. Assume that the abandoned source is , and then the <b>scout</b> <b>bee</b> discovers a new food source to be replaced with [...] as equation below: ...|$|E
50|$|A {{colony of}} honey bees can extend itself over long {{distances}} (over 14 km) and in multiple directions simultaneously to harvest nectar or pollen from multiple food sources (flower patches). A {{small fraction of}} the colony constantly searches the environment looking for new flower patches. These scout bees move randomly in the area surrounding the hive, evaluating the profitability (net energy yield) of the food sources encountered. When they return to the hive, the scouts deposit the food harvested. Those individuals that found a highly profitable food source go to an area in the hive called the “dance floor”, and perform a ritual known as the waggle dance. Through the waggle dance a <b>scout</b> <b>bee</b> communicates the location of its discovery to idle onlookers, which join in the exploitation of the flower patch. Since the length of the dance is proportional to the scout’s rating of the food source, more foragers get recruited to harvest the best rated flower patches. After dancing, the scout returns to the food source it discovered to collect more food. As long as they are evaluated as profitable, rich food sources will be advertised by the scouts when they return to the hive. Recruited foragers may waggle dance as well, increasing the recruitment for highly rewarding flower patches. Thanks to this autocatalytic process, the bee colony is able to quickly switch the focus of the foraging effort on the most profitable flower patches.|$|E
30|$|<b>Scout</b> bees: {{employed}} <b>bees</b> become <b>scout</b> <b>bees</b> when a {{food source}} is exhausted. In other words, the employed bees explored a food source neighborhood MAX LIMIT times; however, {{they did not}} find any food source with better quality. <b>Scout</b> <b>bees</b> try to find new food sources.|$|R
3000|$|... (maximum cycle number), of {{the search}} {{processes}} of the employed bees, the onlooker <b>bees,</b> and <b>scout</b> <b>bees.</b>|$|R
50|$|The forager and <b>scout</b> <b>bees</b> travel up to 3 {{kilometres}} (1.9 mi) to a nectar source, {{pollen source}} or to collect propolis.|$|R
5000|$|... {{function}} GBA %% Set {{the problem}} parametersmaxIteration = [...].; % number of iterations (e.g. 1000-5000)maxParameters = [...].; % number of input variablesmin = [...]. % {{an array of}} the size maxParameters to indicate the minimum value of each input parameter max = [...]. % an array of the size maxParameters to indicate the maximum value of each input parameter [...] %% Set the grouped bees algorithm (GBA) parametersR_ngh = [...].; % patch radius of the neighborhood search for bees in the first group (e.g. 0.001 - 1)n = [...].; % number of scout bees (e.g. 4-30)nGroups = [...].; % number of groups, excluding the random group %% GBA's automatic parameter settingsk = 3 * n / ((nGroups+1)^3 - 1); % GBA's parameter to set the number of scout bees in each groupgroups = zeros(1,nGroups); % An array to keep the number of scout bees for each grouprecruited_bees = zeros(1,nGroups); % An array to keep the number of recruited bees for each groupa = (((max - min) [...]/ 2) - R_ngh) [...]/ (nGroups^2 - 1); % GBA's parameter for setting neighborhood radiusesb = R_ngh - a; % GBA's parameter for setting neighborhood radiusesfor i=1:nGroups % For each group groups(i) = floor(k*i^2); % {{determine the number of}} scout bees in each group if groups(i) == 0 groups(i) = 1; % there has to be at least one <b>scout</b> <b>bee</b> per each group end recruited_bees = (nGroups+1-i)^2; % set the number of recruited bees for each group ngh(i) = a * i*i + b; % set the radius patch for each groupendgroup_random = n - sum(groups); % assign the remainder bees (if any) to random searchgroup_random = max(group_random,0); % make sure it is not a negative number %% initialize the population matrixpopulation = zeros(n,maxParameters+1); % A population of n bees including all input variables and their fitnessfor i=1:n population(i,1:maxParameters)= generate_random_solution(maxParameters,min, max); % random initialization of maxParameters variables between max and min population(i,maxParameters+1) = evalulate_fitness(population(i,:)); % fitness evaluation of each solution and saving it at the last index of the population matrixendsorted_population = sortrows(population); % sort the population based on their fitnesses %% Iterations of the grouped bees algorithmfor i=1:maxIteration % GBA's main loop beeIndex = 0; % keep track of all bees (i.e, patches) for g=1:nGroups % for each group of scout bees [...] for j = 1 : groups(g) % exploit each patch within each group beeIndex = beeIndex + 1; % increase the counter per each patch for i = 1 : recruited_bees(g) % for each recruited bees of the group solution = bee_waggle_dance(sorted_population(beeIndex,1:maxParameters),ngh(g)); % search the neighborhood around selected patch/solution within the radius of ngh fit = evaluate_fitness(solution); % evaluate the fitness of recently found solution if fit < sorted_population(beeIndex,maxParameters+1) % A minimization problem: if a better location/patch/solution is found by the recuiter bee sorted_population(beeIndex,1 : maxParameters+1) = : maxParameters),fit; % copy new solution and its fitness to the sorted population matrix end [...] end end end for i= 1 : group_random % For the remaining random bees beeIndex = beeIndex + 1; solution(beeIndex,1:maxParameters)= generate_random_solution(maxParameters,min, max); % generate a new random solution at the index beeIndex solution(beeIndex,maxParameters+1)= evaluate_fitness(solution); % evaluate its fitness sorted_population(beeIndex,:) = : maxParameters),fit; % copy the new random solution and its fitness to the sorted population matrix end [...] sorted_population=sortrows(sorted_population); % sort the population based on their fitnesses Best_solution_sofar=sorted_population(1,:); [...] disp('Best:');disp(Best_solution_sofar); % Display the best solution of current iterationend % end of GBA's main loop end % end of main function%% Function Bee Waggle Dancefunction new_solution=bee_waggle_dance(solution, ngh, maxParameters) new_solution(1:maxParameters) = (solution-ngh)+(2*ngh.*rand(1, maxParameters));end ...|$|E
30|$|<b>Scout</b> <b>bee.</b> If Failure {{counters}} of any solutions exceed Limit, {{the corresponding}} solution is abandoned, and <b>scout</b> <b>bee</b> is triggered. For example, if the l th solution is abandoned, a new solution is generated {{to replace the}} original one using formula (2), where set i[*]=[*]l.|$|E
30|$|Through {{the study}} in this paper, we could {{conclude}} that information exchange at employed bee phase is very useful to enhance the performance of ABC. History-based <b>scout</b> <b>bee</b> could find good solution but not reliable. A future direction may hybridize history-based <b>scout</b> <b>bee</b> method and the proposed employed bee phase.|$|E
30|$|Determine which sites {{should be}} {{abandoned}} and designate the employed bees visiting {{it to become}} <b>scout</b> <b>bees</b> to searching randomly for new food sites.|$|R
50|$|In A. cerana, {{reproductive}} swarming {{is similar}} to A. mellifera. A. cerana reproductive swarms settle 20-30 m away from the natal nest (the mother or primary colony) and stay {{for a few days}} before departing for a new nest site after getting information from <b>scout</b> <b>bees.</b> <b>Scout</b> <b>bees</b> search for suitable cavities in which to construct the swarm’s home. Successful scouts come back and report the location of suitable nesting sites to the other bees by performing communication dances {{on the surface of the}} swarm cluster in the same way as for food sources.|$|R
30|$|The {{aforementioned}} {{problems are}} difficult to handle, and effective algorithms are in great demand. This paper proposes a novel algorithm based on artificial bee colony (ABC) paradigm. ABC contains three bee groups: employed bees, onlooker <b>bees,</b> and <b>scout</b> <b>bees.</b> The initial food sources {{are supposed to be}} found by <b>scout</b> <b>bees.</b> Employed and onlooker bees then exploits the food sources in sequence until some food sources become exhausted. <b>Scout</b> <b>bees</b> are sent out exploring new food source in place of exhausted sources. In standard ABC, the number of employed bees is equal to that of onlooker bees. A population reduction method is used in the proposed algorithm. The purpose of this method is to assist explorative search by keeping a large population in the former evolutionary stage and turn to a small population for promoting exploitative search in the latter evolutionary stage. Moreover, a new boundary repair method is proposed to hybridize four commonly used repair methods in literature.|$|R
30|$|In particular, {{the main}} idea of ABC {{algorithm}} is to simulate the process {{of a group of}} bees gathering honey. They fully exploit individual intelligence to improve the efficiency and effect of the overall work greatly. Specifically, in ABC algorithm, three kinds of bees are involved, i.e., employed bee, onlooker bee, and <b>scout</b> <b>bee.</b> The employed bee and onlooker bee are used to update solutions to better ones in each iteration and the <b>scout</b> <b>bee</b> is applied to avoid local optimal solutions.|$|E
30|$|Worker bees gather nectar at the {{evaluated}} {{food source}} following the forager. After {{giving up a}} food source, a worker bee can transform into a <b>scout</b> <b>bee</b> and find the next potential food sources.|$|E
30|$|Besides initialization, {{the main}} cycle in {{standard}} ABC algorithm contains three phases: employed bee phase, onlooker bee phase, and <b>scout</b> <b>bee</b> phase. Without loss of generality, let the optimization be a minimization throughout the paper.|$|E
3000|$|... is the {{associated}} local optimum traced by BSP tree. Experimental {{results show that}} HdABC significantly outperforms ABC in most test problems. When the number of <b>scout</b> <b>bees</b> increases, HdABC performs even better.|$|R
40|$|Professor Thomas Seeley, Neurobiology and Behavior, {{presented}} C. A. P. E. ’s public {{lecture on}} November 17, 2011. He reviews {{the history of}} behavioral studies of foraging honey bees and then extends that understanding to {{the process by which}} swarming honey bees choose a new home. This Cornell-based research made exquisite usage of Appledore Island where he and his students tracked individual honey bees engaged in finding new home sites, how the <b>scout</b> <b>bees</b> communicated their findings to other <b>scout</b> <b>bees</b> and then how the bees reached a consensus decision of ‘the best’ site. 1 _ 05 ywpft...|$|R
5000|$|Swarming is {{the natural}} means of {{reproduction}} of honey bee colonies. In the process of swarming the original single colony reproduces to two and sometimes more colonies. [...] For instance, one species of honey bee that participates in such swarming behavior is Apis cerana. The reproduction swarms of this species settle 20-30 m away from the natal nest {{for a few days}} and will then depart for a new nest site after getting information from <b>scout</b> <b>bees.</b> <b>Scout</b> <b>bees</b> search for suitable cavities in which to construct the swarm’s home. Successful scouts will then come back and report the location of suitable nesting sites to the other bees.|$|R
30|$|The scout {{bees are}} used to {{introduce}} diversity in the food source population and they introduce new food sources to the employee bees. <b>Scout</b> <b>bee</b> can create random food sources and give this information to the employee bees.|$|E
40|$|AbstractThe {{artificial}} {{bee colony}} (ABC) {{is one of}} the swarm intelligence algorithms used to solve optimization problems which is inspired by the foraging behaviour of the honey bees. In this paper, artificial bee colony with the rate of change technique which models the behaviour of <b>scout</b> <b>bee</b> to improve the performance of the standard ABC in terms of exploration is introduced. The technique is called artificial bee colony rate of change (ABC-ROC) because the <b>scout</b> <b>bee</b> process depends on the rate of change on the performance graph, replace the parameter limit. The performance of ABC-ROC is analysed on a set of benchmark problems and also on the effect of the parameter colony size. Furthermore, the performance of ABC-ROC is compared with {{the state of the art}} algorithms...|$|E
40|$|Abstract. The main {{objective}} of dynamic deployment in Wireless Sensor Networks {{is to use}} the mobility of sensor nodes, trying to increase the coverage area of the networks by dynamically adjusting the node positions. In this paper, with the characteristics of the optimal sensor deployment in theory, we improve the standard artificial bee colony algorithm by introducing the distance factor to improve the onlooker bee selection probability formula, changing the working mode of the <b>scout</b> <b>bee</b> to avoid worse coverage rate and changing the limit l for <b>scout</b> <b>bee</b> to increase the chance to get better solution. Results show that the improved artificial bee colony algorithm has faster convergent speed and higher coverage rate compared with the standard artificial bee colony algorithm...|$|E
50|$|A set {{of honey}} bees, called swarm, can {{successfully}} accomplish tasks through social cooperation. In the ABC algorithm, there are three types of bees: employed bees, onlooker <b>bees,</b> and <b>scout</b> <b>bees.</b> The employed bees search food around the food source in their memory; meanwhile they share the information of these food sources to the onlooker bees. The onlooker bees tend to select good food sources from those found by the employed bees. The food source that has higher quality (fitness) will have a large chance to be selected by the onlooker bees than the one of lower quality. The <b>scout</b> <b>bees</b> are translated from a few employed bees, which abandon their food sources and search new ones.|$|R
30|$|The natural {{behaviour}} of the honeybee {{has attracted}} the attention of researchers in recent years and several algorithms have been developed that mimic swarm behaviour to solve optimisation problems. This paper introduces an artificial bee colony (ABC) algorithm for the vehicle routing problem with time windows (VRPTW). A Modified ABC algorithm is proposed to improve the solution quality of the original ABC. The high exploration ability of the ABC slows-down its convergence speed, which may due to the mechanism used by <b>scout</b> <b>bees</b> in replacing abandoned (unimproved) solutions with new ones. In the Modified ABC a list of abandoned solutions is used by the <b>scout</b> <b>bees</b> to memorise the abandoned solutions, then the <b>scout</b> <b>bees</b> select a solution from the list based on roulette wheel selection and replace by a new solution with random routs selected from the best solution. The performance of the Modified ABC is evaluated on Solomon benchmark datasets and compared with the original ABC. The computational results demonstrate that the Modified ABC outperforms the original ABC also produce good solutions when compared with the best-known results in the literature. Computational investigations show that the proposed algorithm is a good and promising approach for the VRPTW.|$|R
50|$|Worker bees create queen cups {{throughout}} the year. When the hive {{gets ready to}} swarm the queen lays eggs into the queen cups. New queens are raised and the hive may swarm {{as soon as the}} queen cells are capped and before the new virgin queens emerge from their queen cells. A laying queen is too heavy to fly long distances. Therefore, the workers will stop feeding her before the anticipated swarm date and the queen will stop laying eggs. Swarming creates an interruption in the brood cycle of the original colony.During the swarm preparation, <b>scout</b> <b>bees</b> will simply find a nearby location for the swarm to cluster. When a honey bee swarm emerges from a hive they do not fly far at first. They may gather in a tree or on a branch only a few metres from the hive. There, they cluster about the queen and send 20 - 50 <b>scout</b> <b>bees</b> out to find suitable new nest locations.This intermediate stop is not for permanent habitation and they will normally leave within a few hours to a suitable location. It is from this temporary location that the cluster will determine the final nest site based on the level of excitement of the dances of the <b>scout</b> <b>bees.</b> It is unusual if a swarm clusters for more than three days at an intermediate stop.|$|R
40|$|The {{artificial}} {{bee colony}} (ABC) {{is one of}} the swarm intelligence algorithms used to solve optimization problems which is inspired by the foraging behaviour of the honey bees. In this paper, artificial bee colony with the rate of change technique which models the behaviour of <b>scout</b> <b>bee</b> to improve the performance of the standard ABC in terms of exploration is introduced. The technique is called artificial bee colony rate of change (ABC-ROC) because the <b>scout</b> <b>bee</b> process depends on the rate of change on the performance graph, replace the parameter limit. The performance of ABC-ROC is analysed on a set of benchmark problems and also on the effect of the parameter colony size. Furthermore, the performance of ABC-ROC is compared with {{the state of the art}} algorithms...|$|E
30|$|The {{best food}} sources {{are stored in}} the archive for next cycle of the {{algorithm}} and the X % {{of the population of}} the food sources for the employee bee for next cycle of algorithm is taken from this archive and remaining is obtained from <b>scout</b> <b>bee.</b>|$|E
3000|$|Parameters {{initialization}} of ABC algorithm. Population number (PN) and <b>scout</b> <b>bee</b> {{triggering threshold}} (Limit) {{are the key}} parameters of ABC algorithm. Maximum cycle number (MCN) or ideal fitness threshold (IFT) could be set for terminating algorithm. As stated in formula (1), all variables to be optimized form a D-dimensional vector [...]...|$|E
30|$|In the ABC algorithm, {{there are}} three groups of agents (employed bees, onlooker <b>bees</b> and <b>scout</b> <b>bees)</b> that work collaboratively in solving problems. The groups of agents {{communicate}} and cooperate to find a food source (solution) with good-quality nectar (cost or fitness value for a problem). Each group of agents is responsible for one process. The <b>scout</b> <b>bees</b> are responsible for finding the positions of new food sources. At {{the beginning of the}} search, the food source positions are determined randomly. The employed bees are responsible for exploring the search space and visit the neighbourhood of the food source positions collecting all the information about the visited positions (including the distance, direction and profitability) in order to share this information with the onlooker bees. The onlooker bees are responsible for selecting promising food sources based on the information given by the employed bees.|$|R
30|$|Bee is {{a typical}} kind of social animal. They fully exploit {{individual}} intelligence to improve the efficiency and effect of the overall work greatly. In nature, this kind of animal, {{no matter where they}} are, can always find the best honey resource. In the process of gathering honey, three kinds of bees are involved: employed bees, onlooker <b>bees,</b> and <b>scout</b> <b>bees.</b> When an employed bee finds a food resource, it will go back to the beehive with the information of that food resource and lead other onlooker bees to that place. Then onlooker bees will begin to search potential better food resource around that food resource. <b>Scout</b> <b>bees</b> are responsible for finding potential new food resource in the whole searching space. Based on this model, Karaboga came up with a new meta-heuristic search algorithm [16], i.e., the artificial bee colony (ABC) algorithm.|$|R
30|$|The ABC algorithm, which {{belongs to}} the family of nature-inspired meta-heuristic {{optimization}} algorithms, was first introduced in 2005 by Karaboga [35]. This algorithm is inspired from the behavior of honey bees in nature and provides us with a powerful tool for solving complex optimization problems. In the ABC algorithm, artificial bees in the colony are divided into three parts: employed bees, onlooker <b>bees,</b> and <b>scout</b> <b>bees.</b> Employed bees (whose number is equal to onlooker bees) discover the food sources, bring the food to hive and share its location with other bees. Onlooker bees stay in the hive and decide to follow the employed bees based {{on the quality of the}} food sources they have discovered. <b>Scout</b> <b>bees</b> randomly search the outdoor (independent of employed bees) to find (probably better) unseen food sources. In ABC algorithm, the location of each food source identifies a point in the domain of problem (i.e., a potential solution) and points with smaller value for cost function are assumed to be better food sources (better solutions).|$|R
30|$|From the {{viewpoint}} of algorithmic parameters, standard ABC contains population size Np and consecutive non-improved evaluation trials limit. While NrABC removes <b>scout</b> <b>bee</b> stage, the parameter limit is also removed. Only parameter Np has to be set by users before executing NrABC. Thus, the NrABC algorithm reduces the burden of algorithmic parameter setting.|$|E
40|$|Abstract—In {{the basic}} Artificial Bee Colony (ABC) algorithm, if the fitness value {{associated}} with a food source is not improved for {{a certain number of}} specified trials then the corresponding bee becomes a scout to which a random value is assigned for finding the new food source. Basically, it is a mechanism of pulling out the candidate solution which may be entrapped in some local optimizer due to which its value is not improving. In the present study, we propose two new mechanisms for the movements of scout bees. In the first method, the <b>scout</b> <b>bee</b> follows a non-linear interpolated path while in the second one, <b>scout</b> <b>bee</b> follows Gaussian movement. Numerical results and statistical analysis of benchmark unconstrained, constrained and real life engineering design problems indicate that the proposed modifications enhance the performance of ABC...|$|E
30|$|Then, a {{roulette}} {{wheel is}} used for determining the food sources {{to be used by}} employed bees in the next iteration (angles of the corresponding sectors of roulette wheel are considered proportional to the probabilities calculated from (13)). Note that at each iteration onlooker bees select exactly SN bees by chance and, consequently, some of the employed bees may not be selected at all, while some others are selected more than once. In the standard ABC algorithm, one of the employed bees is selected and classified as the <b>scout</b> <b>bee</b> [39] (later, this definition is slightly modified in [40]). The classification is controlled by a control parameter called “limit”. In this manner if a solution representing a food source is not improved after a predetermined number of successive trials, then that food source is abandoned by its employed bee and the employed bee associated with that food source becomes a scout, which searches around randomly. The number of trials for releasing a food source is equal to the value of “limit”, which is an important control parameter in ABC algorithm. In this paper, however, for increasing the accuracy of results we have adopted more than one <b>scout</b> <b>bee</b> (similar to [40]) and, moreover, the scout bees are assumed to follow the best employed bee of colony instead of performing a random search. More precisely, any employed bee that cannot find a better solution (compared to its previous findings) after ten successive iterations is considered as a <b>scout</b> <b>bee</b> who begins to follow the best bee of colony.|$|E
30|$|This {{causes the}} search {{to slow the}} {{convergence}} speed (Weng and Bin Asmuni 2013). Therefore, {{in this paper we}} propose an improved version of the ABC algorithm, where a list of abandoned solutions is defined (abnd_lst: extendable abandoned list) so that the <b>scout</b> <b>bees</b> can memorise the solutions that exceed the maximum number of trials (limit).|$|R
30|$|All the vectors of the {{population}} of food sources, Xm’s, are initialized (m =  1 …SN, SN: population size) by <b>scout</b> <b>bees</b> and control parameters are set. Since each food source, Xm, is a solution vector to the optimization problem, each Xm vector holds n variables, (Xmi, i =  1 …n), which are to be optimized so as to minimize the objective function.|$|R
30|$|In this way, we make ABC {{algorithm}} {{more suitable}} for the discrete problem. However, this method will narrow the searching space, since the searching space just depends on the potential solutions generated from the beginning. To deal with this problem, we will discard the worst solution, whose f(X) is the largest, and re-initialize it in <b>scout</b> <b>bees</b> searching step to let more potential solutions come into exchange.|$|R
