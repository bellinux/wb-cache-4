75|66|Public
5000|$|... 2011: <b>Subflow</b> - You Come And Go (Luciano Remix), You Come And Go (Technical Enemy) ...|$|E
5000|$|The <b>subflow</b> system, used {{to gather}} {{multiple}} standard TCP connections (the paths from one host to another). Subflows are identified during the TCP three-way handshake. After the handshake, an application can add or remove some subflows (subtypes 0x3 and 0x4).|$|E
50|$|In {{standard}} TCP, {{the connection}} {{should be established}} between two IP addresses. Each TCP connection is identified by a four-tuple (source and destination addresses and ports). Given this restriction, an application can only create one TCP connection through a single link. Multipath TCP allows the connection to use several paths simultaneously. For this, Multipath TCP creates one TCP connection, called <b>subflow,</b> over each path {{that needs to be}} used.|$|E
3000|$|As {{discussed}} in Section 3.2, when we perform packing on the circular network by unwrapping it to a linear network, {{it is possible}} for a flow to be cut into two <b>subflows.</b> Each clockwise unidirectional packing contains at least one flow that does not generate <b>subflows</b> (a flow cannot have more than N hops). As a corollary, if the clockwise packing contains a flow that has been cut into two <b>subflows,</b> then the packing must contain at least two flows to start with. One of these <b>subflows</b> will be relegated to a future packing exercise. So, each clockwise packing reduces the number of remaining flows to be packed by at least one. For the matching counterclockwise packing, at most one flow will be cut into two <b>subflows.</b> Thus, the matching counterclockwise packing does not increase the number of remaining counter-clockwise flow. Recall from the discussion in Section 3.2 that for [...] "traffic balance" [...] successive dual packings will start with clockwise and counterclockwise packings in an alternate manner. Thus, successive dual packings will reduce the numbers of remaining clockwise and counterclockwise flows by at least one alternately.|$|R
40|$|Multipath TCP {{currently}} {{relies on}} the exchange of keys in clear during the initial handshake to authenticate the establishment of additional <b>subflows.</b> This document proposes {{a variant of the}} Multipath TCP handshake that allows Multipath TCP to reuse keys negotiated by the Application layer protocol above it such as SSL/TLS to authenticate the establishment of additional <b>subflows...</b>|$|R
3000|$|... extra flows being generated. Hence, {{the total}} number of flows (including the {{original}} flows and the <b>subflows)</b> is [...]...|$|R
30|$|After {{the second}} Wi-Fi AP assigns an IP {{address to the}} MD, the JOIN option is sent through the Wi-Fi {{interface}} of the MD with the new IP address (steps 10 â€“ 13). Immediately after the Wi-Fi <b>subflow</b> is formed, the data transfer shifts from the 3 G/ 4 G <b>subflow</b> to the Wi-Fi <b>subflow</b> (C denotes the data transfer period). Then, the 3 G/ 4 G <b>subflow</b> remains as a backup.|$|E
30|$|Only {{a single}} <b>subflow</b> is active with this mode. MPTCP {{is able to}} keep the {{established}} connection open for retransmission time out (RTO) time after the active <b>subflow</b> is lost. This feature enables peer devices to continue data transfer with the open <b>subflow</b> after a new IP address is acquired for the same interface or from different interface. A handover for a smartphone can be from Wi-Fi to 3 G/ 4 G network after it is disconnected from the Wi-Fi network. Compared to the backup mode, this mode waits for two more round-trip times before the new MPTCP <b>subflow</b> is established and data can be sent.|$|E
40|$|Abstract. We {{show that}} every {{infinite}} discrete group G has an infinite minimal <b>subflow</b> in its Bernoulli flow { 0, 1 }G. A countably infinite group G has an effective minimal <b>subflow</b> in { 0, 1 }G. If G is countable and residually finite {{then it has}} such a <b>subflow</b> which is free. We {{do not know whether}} there are groups G with no free subflows in { 0, 1 }G. 1...|$|E
3000|$|... {{according}} to the above argument. Thus, the total number of one-hop transmissions between all adjacent <b>subflows</b> is upper bounded by [...]...|$|R
40|$|Securing the MultiPath TCP {{handshake}} {{with external}} keys draft-paasch-mptcp-ssl- 00 Multipath TCP currently {{relies on the}} exchange of keys in clear during the initial handshake to authenticate the establishment of additional <b>subflows.</b> This document proposes {{a variant of the}} Multipath TCP handshake that allows Multipath TCP to reuse keys negotiated by the Application layer protocol above it such as SSL/TLS to authenticate the establishment of additional <b>subflows.</b> Status of this Memo This Internet-Draft is submitted in full conformance with th...|$|R
5000|$|The MPTCP DSS option {{contains}} a data sequence number and an acknowledgement number. These allow receiving data from multiple <b>subflows</b> {{in the original}} order, without any corruption (message subtype 0x2) ...|$|R
30|$|The {{scheduling}} of transmissions is {{the same}} as that in Part B except that here we also have to consider the transmission across the two subflows cut as above, if any. We assume the traffic from the destination of a preceding <b>subflow</b> to the source of its corresponding <b>subflow</b> is transmitted using the conventional scheme in the second interval.|$|E
30|$|As {{soon as the}} MD is {{disconnected}} from the Wi-Fi network, the data transfer shifts to the backup <b>subflow</b> (B denotes the data transfer duration). The REMOVE_ADDR (step 8) option is sent through the 3 G/ 4 G <b>subflow</b> to inform the VM that the previous IP address is no longer available. At step 9, an ACK message is sent from the VM to the MD.|$|E
30|$|Although ADD_ADDR 22 advertises the {{existence}} of the additional IP address, no <b>subflow</b> can be started with the additional interface before the VM is migrated. Since the IP address assigned to the additional interface is from a different LAN after migration, the VM is unreachable through this interface. But the connection from the MD will keep trying to create a new <b>subflow</b> with the new IP address of the VM.|$|E
50|$|In {{order to}} {{facilitate}} its deployment, Multipath TCP presents the same socket interface as TCP. This implies that any standard TCP application can be used above Multipath TCP while in fact spreading data across several <b>subflows.</b>|$|R
40|$|Multipath TCP {{has been}} {{recently}} introduced {{in order to}} allow a better resource consumption and user quality-of-experience. This is achieved by allowing a connection between two hosts through multiple <b>subflows.</b> However, with the rise of middleboxes and inherent Internet ossification, the large-scale deployment of this TCP extension is difficult. In particular, a load balancer at the entry point of a data center may forward <b>subflows</b> to different servers, canceling so the advantages of Multipath TCP. In this paper, we introduce MpLB, a Multipath TCP aware load balancer that fixes this particular issue without any modification to the Multipath TCP protocol itself. We demonstrate advantages of MpLB through a proof-of-concept. Peer reviewe...|$|R
40|$|This paper studies {{symbolic}} dynamical systems { 0, 1 }G, where G is a countably infinite group, { 0, 1 }G has {{the product}} topology, and G acts on { 0, 1 }G by shifts. It is proven {{that for every}} countably infinite group G the union of the minimal free <b>subflows</b> of { 0, 1 }G is dense. In fact, a stronger result is obtained which states that if G is a countably infinite group and U is an open subset of { 0, 1 }G, {{then there is a}} collection of size continuum consisting of pairwise disjoint minimal free <b>subflows</b> intersecting U...|$|R
40|$|In {{this paper}} we present our work on {{designing}} and implementing an ns- 3 model for MultiPath TCP (MPTCP). Our MPTCP model closely follows MPTCP specifications, {{as described in}} RFC 6824, and supports TCP NewReno loss recovery on a per <b>subflow</b> basis. <b>Subflow</b> management is based on MPTCP's kernel implementation. We briefly describe how we integrate our MPTCP model with ns- 3 and present example simulation results to showcase its working state...|$|E
30|$|After the MD is {{disconnected}} from C 1 and connected with C 2, C 2 then assigns a new IP {{address to the}} MD. The new 3 -way handshake starts at step 4 which is the TCP SYN packet with the JOIN option in MPTCP. Step 7 indicates an ACK for the JOIN <b>subflow.</b> Duration B represents data transfer using the new <b>subflow.</b> The REMOVE_ADDR option is sent from the MD to the VM in C 1 to inform that its previous IP address is no longer available (step 8). Step 9 is an ACK message.|$|E
40|$|In this paper, {{we propose}} a {{framework}} supporting dynamic interoperation between heterogeneous workflow systems and workflow-based dynamic Enterprise Application Integration (EAI). To this end, based on <b>Subflow</b> Task Model and Multi-Tiered Dynamic State Transition Model, four major components are defined: Th...|$|E
3000|$|... goes to infinity. The total one-hop {{transmissions}} in {{the second}} interval {{can be divided into}} two parts, the one-hop transmissions in the rectangles and the one-hop transmissions between <b>subflows</b> (created when we unwrap the circular network into a linear network).|$|R
40|$|Multipath TCP (MPTCP) {{allows the}} {{concurrent}} use of mul-tiple paths between two end points, {{and as such}} holds great promise for improving application performance. However, in this paper, we report a newly discovered class of attacks on MPTCP that may jeopardize and hamper its wide-scale adoption. The attacks stem from the interdependence be-tween the multiple <b>subflows</b> in anMPTCP connection. MPTCP congestion control algorithms are designed to achieve re-source pooling and fairness with single-path TCP users at shared bottlenecks. Therefore, multiple MPTCP <b>subflows</b> are inherently coupled with each other, resulting in potential side-channels that can be exploited to infer cross-path prop-erties. In particular, an ISP monitoring one or more paths used by an MPTCP connection can infer sensitive and pro-prietary information (e. g., level of network congestion, end-to-end TCP throughput, packet loss, network delay) about its competitors. Since the side-channel information enabled by the coupling among the <b>subflows</b> in an MPTCP connection results directly from the design goals of MPTCP conges-tion control algorithms, it is not obvious how to circumvent this attack easily. We believe our findings provide insights {{that can be used}} to guide future security-related research on MPTCP and other similar multipath extensions...|$|R
40|$|A generic control stream for Multipath TCP draft-paasch-mptcp-control-stream- 00 Multipath TCPâ€™s {{extensive}} use of TCP options to exchange control information consumes {{a significant part of}} the TCP option space. Extending MPTCP to add more control information into the session becomes cumbersome as the TCP option space is limited to 40 bytes. This draft introduces a control stream that allows to send control information as part of the <b>subflowâ€™s</b> payload. The control stream is mapped into a separate sequence number space and uses a TLV-format for maximum extensibility. It is left to future documents to specify how the TLV-format might be used to exchange control information. As the control stream is sent as part of the <b>subflowâ€™s</b> payload, it is not subject to the 40 bytes limitation of the TCP option space...|$|R
3000|$|... [...]. The constraint, called {{interference}} constraint as in [2], is {{well known}} to be a sufficient condition for feasible <b>subflow</b> schedules [23]. The constraint belongs to the class of IEEE 802.11 protocol interference models and is hence simple to implement in a distributed way in ad hoc networks. In the ad hoc network context, we do not use clique-based interference models, e.g., [6], which may have significant computation overheads in ad hoc networks and have to reduce a clique capacity sufficient enough for feasible <b>subflow</b> schedules. Signal-to-interference noise ratio (SINR)-based physical interference models [24] may be more accurately applied to multi-radio multi-channel networks, but the computational complexity of calculating SINR in the ad hoc environment may be significantly high.|$|E
30|$|If two network regions overlap, for a MD {{moving from}} the source to the {{destination}} region, {{the time needed to}} create a new <b>subflow</b> with the MPTCP connection is the time for the MD to be assigned an IP address from the destination region.|$|E
40|$|We {{show that}} for G a {{countable}} group {{which is not}} locally finite, the isomorphism of free G-subflows is bi-reducible with with the universal countable Borel equivalence relation Eâˆž. For a countable group G, the Bernoulli flow 2 G consists of all functions from G to 2 together with the shift action of G given by (g Â·Î±) (h) = Î±(gâˆ’ 1 h). A G-subflow is a compact shift-invariant subset X âŠ† 2 G. Two subflows are isomorphic, X âˆ¼ = Y, {{if there is a}} homeomorphism Ï•: X â†’ Y which commutes with the shift, i. e., Ï•(g Â·Î±) = g Â·Ï•(Î±). Various classes of subflows are of particular interest. A <b>subflow</b> X is free if g Â· Î± 6 = Î± for all g 6 = e in G and Î± âˆˆ X. A <b>subflow</b> is minimal if it contains no proper <b>subflow,</b> i. e., for all Î± âˆˆ X, the orbit closure of Î±, OÎ± = G Â· Î±, is equal to X. The authors of [?] asked to determine the exact complexity of the isomor-phism relation for several classes of G-subflows for various countable groups G, namely the classes of all subflows, of free subflows, and of minimal sub...|$|E
40|$|Multipath TCP (MPTCP) is an {{extension}} to TCP which aggregates multiple parallel connections over available network interfaces. MPTCP bases its scheduling decisions on the individual RTT values observed at the <b>subflows,</b> but does not attempt to perform any kind of joint optimization over the <b>subflows.</b> Using the MPTCP scheduler as an example, {{in this paper we}} demonstrate that exploiting cross-layer information and optimizing scheduling decisions jointly over the multiple flows, can lead to significant performance gains. While our results only represent a single data point, they illustrate the need to look at MPTCP from a more holistic point of view and not treat the connections separately, as is currently being done. We call for new approaches and research into how multiple parallel connections offered by MPTCP should be used in an efficient and fair manner...|$|R
40|$|Many {{computers}} and {{devices such as}} smart phones, laptops and tablet devices are now equipped with multiple network interfaces, enabling them to use multiple paths to access content over the network. If the resources could be used concurrently, end user experience can be greatly improved. The recent studies in MPTCP suggest that improved reliability, load balancing and mobility are feasible. The thesis presents a new multipath delay based algorithm, MPPERT (Multipath Probabilistic Early response TCP), which provides high throughput and efficient load balancing. In all-PERT environment, MPPERT suffers no packet loss and maintains much smaller queue sizes compared to existing MPTCP, making it suitable for real time data transfer. MP-PERT is suitable for incremental deployment in a heterogeneous environment. It also presents a parametrized approach to tune the amount of traffic shift off the congested path. Multipath approach is benefited from having multiple connections between end hosts. However, it is desired to keep the connection set minimal as increasing number of paths may not always provide {{significant increase in the}} performance. Moreover, higher number of paths unnecessarily increase computational requirement. Ideally, we should suppress paths with low throughputs and avoid paths with shared bottlenecks. In case of MPTCP, there is no efficient way to detect a common bottleneck between <b>subflows.</b> MPTCP applies a constraint of best single-path TCP throughput, to ensure fair share at a common bottleneck link. The best path throughput constraint along with traffic shift, from more congested to less congested paths, provide better opportunity for the competing flows to achieve higher throughput. However, the disadvantage is that even if there are no shared links, the same constraint would decrease the overall achievable throughput of a multipath flow. PERT, being a delay based TCP protocol, has continuous information {{about the state of the}} queue. This information is valuable in enabling MPPERT to detect <b>subflows</b> sharing a common bottleneck and obtain a smaller set of disjoint <b>subflows.</b> This information can even be used to switch from coupled (a set of <b>subflows</b> having interdependent increase/decrease of congestion windows) to uncoupled (independent increase/decrease of congestion windows) <b>subflows,</b> yielding higher throughput when best single-path TCP constraint is relaxed. The ns- 2 simulations support MPPERT as a highly competitive multipath approach, suitable for real time data transfer, which is capable of offering higher throughput and improved reliability...|$|R
40|$|We propose Software Defined Networking (SDN) {{framework}} to {{a fleet of}} naval ships that relies on multiple satellite communication systems for onboard communication. Our solution addresses practical issues in current shipboard naval networks such as sharing and load balancing of multiple satellite communication links as well as overcoming limited bandwidth constraints. To ameliorate link intermittence and outage, we propose Multi-Path Transmission Control Protocol (MPTCP), which improves end-to-end data delivery by creating several <b>subflows</b> under one TCP session. In our SDN framework, each ship is an SDN switch with multiple SATCOM connections. The management and classification of MPTCP <b>subflows</b> are handled by a remote SDN controller. The cooperation between MPTCP and SDN controller leads to an agile, bandwidth efficient, robust naval network. System analysis and numerical evaluation validate the feasibility and efficacy of our SDN-based solution for such a network...|$|R
3000|$|Now, {{consider}} the transmissions across subflows. A one-hop transmission {{is needed for}} two adjacent subflows generated by the cut when we unwrap the circular network to a corresponding linear network. In other words, there is a one-hop transmission whenever there is an extra <b>subflow,</b> which is upper bounded by [...]...|$|E
40|$|ArticleMultipath TCP (MPTCP) {{allows a}} TCP {{connection}} to operate across multiple paths simultaneously and becomes highly attractive {{to support the}} emerging mobile devices with various radio interfaces and to improve resource utilization as well as connection robustness. The existing multipath congestion control algorithms, however, are mainly loss-based and prefer the paths with lower drop rates, leading to severe performance degradation in wireless communication systems where random packet losses occur frequently. To address this challenge, this paper proposes a new mVeno algorithm, which makes full use of the congestion information of all the subflows belonging to a TCP connection in order to adaptively adjust the transmission rate of each <b>subflow.</b> Specifically, mVeno modifies the additive increase phase of Veno so as to effectively couple all subflows by dynamically varying the congestion window increment based on the receiving ACKs. The weighted parameter of each <b>subflow</b> for tuning the congestio...|$|E
30|$|The full-MPTCP mode allows {{creating}} a TCP <b>subflow</b> with all active IP addresses. For instance, a MD integrated with both Wi-Fi and 3 G/ 4 G interfaces {{can benefit from}} the full-MPTCP mode using both interfaces {{at the same time}} to achieve the maximum throughput. If one of the interfaces goes down, the other active interface keeps working without any disruption.|$|E
30|$|It is {{important}} to mention that although the proposed admission control mechanism has been designed with the opportunistic routing in mind, it {{can be adapted to}} be used with a multi-path routing protocol. To achieve this, after the resource reservation process, each node will perform parallel transmissions for each path depending on the generated <b>subflows.</b>|$|R
40|$|MultiPath TCP Low Overhead draft-paasch-mptcp-lowoverhead- 00 This {{document}} {{describes a}} low overhead connection establishment mechanism for Multipath TCP. Its {{goal is to}} reduce the computational overhead of establishing an MPTCP connection and the associated TCP <b>subflows</b> in controlled environments where security attacks are not a concern. Status of this Memo This Internet-Draft is submitted in full conformance with th...|$|R
40|$|Multipath TCP is {{a recent}} TCP {{extension}} that enables multihomed hosts like smartphones to send and receive data over multiple interfaces. Despite the growing interest in this new extension, {{little is known about}} its behavior in real networks. We analyze a five-month trace collected on multipath-tcp. org using Multipath TCP. This first detailed study of real Multipath TCP traffic reveals several interesting points about its behavior in the wild. With packets from thousands of hosts using IPv 4 and/or IPv 6, we confirm that Multipath TCP correctly passes through a wide range of Internet paths. We observe long Multipath TCP connections that benefit from handovers and also connections composed of <b>subflows</b> having very different round-trip-times. We also analyze some inefficiencies in the current Multipath TCP implementations and quantify the importance of reinjections, i. e. the transmission of the same data over two or more <b>subflows...</b>|$|R
