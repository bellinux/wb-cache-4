136|0|Public
50|$|The <b>Serverless</b> Framework is a {{free and}} {{open-source}} web framework written using Node.js. <b>Serverless</b> is the first framework for building applications exclusively on AWS Lambda, a <b>serverless</b> computing platform provided by Amazon {{as a part of}} the Amazon Web Services. A <b>Serverless</b> app can simply be a couple of lambda functions to accomplish some tasks, or an entire back-end composed of hundreds of lambda functions. <b>Serverless</b> currently supports Node.js and Python runtimes. Support for Java and other runtimes for AWS Lambda will be coming soon. <b>Serverless</b> is developed by Austen Collins and maintained by a full-time team.|$|E
5000|$|<b>Serverless</b> Framework, for {{creating}} <b>serverless</b> applications deployed to AWS Lambda or Azure Functions with Node.js and Python.|$|E
5000|$|<b>Serverless</b> {{frameworks}} {{are designed}} {{to make it easier}} to build, test, and deploy <b>serverless</b> applications. Some prominent ones are: ...|$|E
50|$|Several <b>serverless</b> {{databases}} {{have been}} released. These systems extend the <b>serverless</b> execution {{model to the}} RDBMS, eliminating the need to provision or scale virtualized or physical database hardware.|$|E
5000|$|<b>Serverless</b> {{computing}} still requires servers. The name [...] "serverless computing" [...] is {{used because}} the server management and capacity planning decisions are completely {{hidden from the}} developer or operator. <b>Serverless</b> code {{can be used in}} conjunction with code deployed in traditional styles, such as microservices. Alternatively, applications can be written to be purely <b>serverless</b> and use no provisioned services at all.|$|E
50|$|Note 6: <b>Serverless</b> {{protocols}} don't {{have any}} central entities (usually companies) controlling the network. <b>Serverless</b> network consists only of clients. Such systems are usually extremely resistant to surveillance and censorship.|$|E
5000|$|Kubeless, a {{proof of}} concept to develop a <b>serverless</b> {{framework}} for Kubernetes.|$|E
5000|$|Osiris (<b>Serverless</b> Portal System) - an {{anonymous}} and distributed web portals creator.|$|E
5000|$|Retroshare - filesharing, <b>serverless</b> email, instant messaging, VoIP, chatrooms, and {{decentralized}} forums.|$|E
5000|$|I2P-Messenger an anonymous, secure (end-to-end encrypted), <b>serverless</b> instant {{messenger}} for the I2P network ...|$|E
50|$|Major IM {{services}} {{are controlled by}} their corresponding companies. They usually follow the client-server model when all clients have to first connect to the central server. This requires users to trust this server because messages can generally be accessed by the company. Companies can be compelled to reveal their user's communication. Companies can also suspend user accounts for any reason. There is the class of instant messengers that uses the <b>serverless</b> model, which doesn't require servers, and the IM network consists only of clients. There are several <b>serverless</b> messengers: RetroShare, Tox, Bitmessage, Ricochet, Ring. <b>Serverless</b> messengers are generally more secure because they involve fewer parties.|$|E
50|$|Appirio runs as a <b>serverless</b> company, {{utilizing}} {{only public}} cloud solutions and no in-house datacenter.|$|E
5000|$|Fission, a {{framework}} for <b>serverless</b> functions on Kubernetes, supporting Python, NodeJS, Go, C#, and PHP.|$|E
5000|$|I2P-Bote an anonymous, secure (end-to-end encrypted), <b>serverless</b> mail {{application}} with remailer functionality for the I2P network ...|$|E
5000|$|Infrequently-used <b>serverless</b> code {{may suffer}} from greater {{response}} latency than code that is continuously {{running on a}} dedicated server, virtual machine, or container. This is because, unlike with autoscaling, the cloud provider typically [...] "spins down" [...] the <b>serverless</b> code completely when not in use. This means that if the runtime (for example, the Java runtime) requires {{a significant amount of}} time to start up, it will create additional latency.|$|E
5000|$|Google Cloud Functions - Currently in beta testing. [...] FaaS {{providing}} <b>serverless</b> {{functions to}} {{be triggered by}} cloud events.|$|E
50|$|For guaranteed, <b>serverless,</b> {{scalable}} data delivery {{over both}} Multicast and Unicast, Scalable Reliable Multicast (SRM) is used over the Real-time Transport Protocol, called SRRTP.|$|E
50|$|<b>Serverless</b> {{computing}} is a {{cloud computing}} code execution {{model in which}} the cloud provider fully manages starting and stopping virtual machines as necessary to serve requests, and requests are billed by an abstract measure of the resources required to satisfy the request, rather than per virtual machine, per hour. Despite the name, it does not actually involve running code without servers. <b>Serverless</b> computing is so named because the business or person that owns the system {{does not have to}} purchase, rent or provision servers or virtual machines for the back-end code to run on.|$|E
5000|$|I2P-Messenger is {{a simple}} Qt-based, <b>serverless,</b> end-to-end-encrypted instant {{messenger}} for I2P. No servers can log the user's conversations. No ISP can log with whom the user chats, when, or for how long. As it is <b>serverless,</b> it can make use of I2P's end-to-end encryption, preventing any node between two parties from having access to the plain text. I2P-Messenger {{can be used for}} fully anonymous instant communication with persons the user doesn't even know, or, alternatively, to communicate securely and untraceably with friends, family members, or colleagues. In addition to messaging, file transfer is also supported.|$|E
5000|$|IBM has {{published}} OpenWhisk as an open source <b>serverless</b> platform. OpenWhisk includes native support for Node.js, Python, Java, and Swift, and supports other languages and runtime via Docker containers.|$|E
5000|$|... zFS was an IBM {{research}} project {{to develop a}} distributed, decentralized file system. It was a follow-on to the IBM DSF (Data Sharing Facility) project to build a <b>serverless</b> file system.|$|E
50|$|In addition, a <b>serverless</b> {{architecture}} {{means that}} developers and operators {{do not need}} to spend time setting up and tuning autoscaling policies or systems; the cloud provider is responsible for ensuring that the capacity always meets the demand.|$|E
50|$|Osiris <b>Serverless</b> Portal System (usually {{abbreviated}} as Osiris sps or Osiris) is a freeware program used {{to create}} web portals distributed via peer-to-peer networking (P2P) and autonomous from centralized servers. It is available for Microsoft Windows and GNU/Linux operating systems.|$|E
50|$|In <b>serverless</b> computing, {{the units}} of code {{exposed to the}} outside world are simple functions. This means that typically, the {{programmer}} does {{not have to worry about}} multithreading or directly handling HTTP requests in their code, simplifying the task of back-end software development.|$|E
50|$|AWS Lambda, {{introduced}} by Amazon in 2014, {{was the first}} public cloud vendor with an abstract <b>serverless</b> computing offering. AWS Lambda initially supported only Node.js. It now supports Python, Java, and C#, and code written in other languages can be invoked indirectly via Node.js.|$|E
50|$|<b>Serverless</b> {{computing}} is {{more cost-effective}} than renting or purchasing a fixed quantity of servers, which generally involves significant periods of underutilization or idle time. It {{can even be}} more cost-efficient than provisioning an autoscaling group, due to more efficient bin-packing of the underlying machine resources.|$|E
50|$|<b>Serverless</b> {{computing}} is not {{suited to}} some computing workloads, such as high-performance computing, {{because of the}} resource limits imposed by cloud providers, and also because it would likely be cheaper to bulk-provision the number of servers believed to be required at any given point in time.|$|E
50|$|RetroShare is {{open source}} {{software}} for encrypted filesharing, <b>serverless</b> email, instant messaging, online chat, and BBS, based on a friend-to-friend network built on GNU Privacy Guard (GPG). It is not strictly a darknet since optionally, peers may communicate certificates and IP addresses from and to their friends.|$|E
5000|$|AWS Lambda is an event-driven, <b>serverless</b> {{computing}} platform {{provided by}} Amazon {{as a part}} of the Amazon Web Services. It is a compute service that runs code in response to events and automatically manages the compute resources required by that code. It was introduced in 2014.|$|E
5000|$|<b>Serverless</b> {{computing}} is a {{cloud computing}} execution {{model in which}} the cloud provider dynamically manages the allocation of machine resources. Pricing {{is based on the}} actual amount of resources consumed by an application, rather than on pre-purchased units of capacity. It is a form of utility computing.|$|E
50|$|Each {{file that}} is shared using eMule is hashed as a hash list {{comprising}} separate 9500 KiB chunks using the MD4 algorithm. The top-level MD4 hash, file size, filename, and several secondary search attributes such as bit rate and codec are stored on eD2k servers and the <b>serverless</b> Kad network.|$|E
50|$|IBM Bluemix {{includes}} IBM's Function as a Service (FaaS) system, or <b>Serverless</b> computing offering, that {{is built}} using open source from the Apache OpenWhisk incubator project largely credited to IBM for seeding. This system, equivalent to Amazon Lambda or Google Cloud Functions, allows calling {{of a specific}} function {{in response to an}} event without requiring any resource management from the developer.|$|E
50|$|Supports an {{efficient}} deployment of a trained model to low-end devices for inference, such as mobile devices (using Amalgamation Amalgamation), IoT devices (using AWS Greengrass), <b>Serverless</b> (Using AWS Lambda) or containers. These low-end environments can have only weaker CPU or limited memory (RAM), {{and should be}} able to use the models that were trained on a higher-level environment (GPU based cluster, for example).|$|E
50|$|CloudBoost is a cloud {{services}} provider, <b>Serverless</b> Framework and backend {{as a service}} company based in Hyderabad, India. The company makes a number of products for software developers building mobile or web applications. CloudBoost was founded in 2014 by Nawaz Dhandala. CloudBoost's primary product is a database which provides an API that allows developers to store, query, search, and have real-time data on multiple clients.|$|E
50|$|Video editing systems require {{very high}} data {{transfer}} rates and very low latency.SANs in media and entertainment are {{often referred to}} as <b>serverless</b> {{due to the nature of}} the configuration which places the video workflow (ingest, editing, playout) desktop clients directly on the SAN rather than attaching to servers. Control of data flow is managed by a distributed file system such as StorNext by Quantum.|$|E
50|$|Diagnosing {{performance}} or excessive resource usage problems with <b>serverless</b> code {{may be more}} difficult than with traditional server code, because although entire functions can be timed, there is typically no ability to dig into more detail by attaching profilers, debuggers or APM tools. Furthermore, {{the environment in which}} the code runs is typically not open source, so its performance characteristics cannot be precisely replicated in a local environment.|$|E
