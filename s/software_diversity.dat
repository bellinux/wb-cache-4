91|45|Public
50|$|Michael Franz is an American {{computer}} scientist {{best known for}} his pioneering work on just-in-time compilation and optimization and on artificial <b>software</b> <b>diversity.</b> He is a Chancellor's Professor of Computer Science in the Donald Bren School of Information and Computer Sciences at the University of California, Irvine (UCI), a Professor of Electrical Engineering and Computer Science (by courtesy) in the Henry Samueli School of Engineering at UCI, and Director of UCI's Secure Systems and Software Laboratory.|$|E
5000|$|More recently, Franz {{has been}} one of the main drivers of the [...] "Moving Target Defense" [...] {{movement}} for cyber security. He has been pioneering compiler-generated <b>software</b> <b>diversity</b> as a defense mechanism against software attacks, inspired by biodiversity in nature. Imagine an [...] "App Store" [...] containing a diversification engine (a [...] "multicompiler") that automatically generates a unique version of every program for every user. All the different versions of the same program behave in exactly the same way from the perspective of the end-user, but they implement their functionality in subtly different ways. As a result, any specific attack will succeed only on a small fraction of targets. An attacker would require a large number of different attacks and would have no way of knowing a priori which specific attack will succeed on which specific target. Equally importantly, this approach makes it much more difficult for an attacker to generate attack vectors by way of reverse engineering of security patches.|$|E
40|$|Code-reuse {{attacks are}} {{notoriously}} hard to defeat, and many current {{solutions to the}} problem focus on automated <b>software</b> <b>diversity.</b> This is a promising area of research, as diversity attacks one cause of code reuse attacks—the software monoculture. <b>Software</b> <b>diversity</b> raises the costs of an attack by providing users with different variations of the same program. However, modern <b>software</b> <b>diversity</b> implementations are still vulnerable to certain threats: code disclosure attacks and attacks targeted at JIT (just-in-time) compilers for dynamically compiled languages. In this dissertation, we address the pressing problem of building secure systems out of programs written in unsafe languages. Specifically, we use <b>software</b> <b>diversity</b> to present attackers with an unpredictable attack surface. This dissertation contributes new techniques that improve the security, efficiency, and coverage of <b>software</b> <b>diversity.</b> We discuss three practical aspects of <b>software</b> <b>diversity</b> deployment: (i) performance optimization using profile guided code randomization, (ii) transparent code randomization for JIT compilers, and (iii) code hiding support for JIT compilers. We make the following contributions: we show a generic technique to reduce the runtime cost of <b>software</b> <b>diversity,</b> describe the first technique that diversifies the output of JIT compilers and requires no source code changes to the JIT engine, and contribute new techniques to prevent disclosure of diversified code. Specifically, we demonstrate how to switch between execute-only and read-write page permissions to efficiently and comprehensively prevent JIT-oriented exploits. Our in-depth performance and security evaluation shows that <b>software</b> <b>diversity</b> can be efficiently implemented with low overhead (as low as 1 % for profile-guided NOP insertion and 7. 8 % for JIT code hiding) and is an effective defense against a large class of code reuse and code disclosure attacks...|$|E
3000|$|Our {{extended}} taxonomy {{can draw}} the attention of GSE researchers about the aforementioned aspects and help them to report these aspects in a more comparable way. It has also the potential to foster new research, specifically for the areas that are less covered by the existing literature (e.g. <b>software</b> process <b>diversity.)</b> [...]...|$|R
3000|$|Total {{number of}} parasitoids and predators {{collected}} under each family was recorded. The biodiversity indices were calculated using the PAST <b>Software.</b> Shannon-Weiner <b>diversity</b> index (Shannon and Wiener, 1949) {{took into account}} {{the number of individuals}} as well as number of taxa indicated by H[*]=[*]− sum((ni/n) ln (ni/n)) where ni, is the number of individuals of taxon “i”. Evenness index was calculated using the Pielou’s (1966) formula e [...]...|$|R
40|$|Landscape ecology {{starts from}} the {{assumption}} that diversity and spatial arrangement of ecosystem mosaics have ecological implications and tries to understand the interactions between diversity and structure of large spatially heterogeneous areas and their ecological functions. These assumptions imply effective use of earth observation techniques and geographic information systems, enabling a global view of the landscape mosaics. In this paper, a <b>software,</b> LaDy (Landscape <b>Diversity</b> <b>Software),</b> for computing Re´nyi’s local landscape diversity profile on raster land cover maps is presented. LaDy {{is based on the}} use of Merchant’s adaptive geographic window, which is designed to operate on a neighborhood of patches instead of a fixed rectangular neighborhood of pixels (the conventional approach in image analysis) ...|$|R
40|$|This paper reviews {{some results}} in {{improving}} software safety in computer control systems. The discussion covers {{various aspects of}} the software development process, as opposed to the product features. <b>Software</b> <b>diversity,</b> off-the-shelf software, failure mode and effect analysis, rigorous and formal software development are discussed. Copyright 2002 IFAC Keywords: Software safety, <b>software</b> <b>diversity,</b> off-the-shelf software, FMEA, rigorous development, formal verification, UML, software for computer control...|$|E
40|$|International audienceEarly {{experiments}} with <b>software</b> <b>diversity</b> {{in the mid}} 1970 's investigated N-version programming and recovery blocks to increase the reliability of embedded systems. Four decades later, the literature about <b>software</b> <b>diversity</b> has expanded in multiple directions: goals (fault-tolerance, security, software engineering); means (managed or automated diversity) and analytical studies (quantification of diversity and its impact). Our paper contributes {{to the field of}} <b>software</b> <b>diversity</b> as the first paper that adopts an inclusive vision of the area, with an emphasis on the most recent advances in the field. This survey includes classical work about design and data diversity for fault tolerance, as well as the cybersecurity literature that investigates randomization at different system levels. It broadens this standard scope of diversity, to include the study and exploitation of natural diversity and the management of diverse software products. Our survey includes the most recent works, with an emphasis from 2000 to present. The targeted audience is researchers and practitioners in one of the surveyed fields, who miss the big picture of <b>software</b> <b>diversity.</b> Assembling the multiple facets of this fascinating topic sheds a new light on the field...|$|E
40|$|Abstract—The idea of {{automatic}} <b>software</b> <b>diversity</b> {{is at least}} two decades old. The deficiencies of currently deployed defenses and the transition to online software distribution (the “App store ” model) for traditional and mobile computers has revived the interest in automatic <b>software</b> <b>diversity.</b> Consequently, the literature on diversity grew by {{more than two dozen}} papers since 2008. Diversity offers several unique properties. Unlike other de-fenses, it introduces uncertainty in the target. Precise knowledge of the target software provides the underpinning {{for a wide range of}} attacks. This makes diversity a broad rather than narrowly focused defense mechanism. Second, diversity offers probabilistic protection similar to cryptography—attacks may succeed by chance so implementations must offer high entropy. Finally, the design space of diversifying program transformations is large. As a result, researchers have proposed multiple approaches to <b>software</b> <b>diversity</b> that vary with respect to threat models, security, performance, and practicality. In this paper, we systematically study the state-of-the-art in <b>software</b> <b>diversity</b> and highlight fundamental trade-offs between fully automated approaches. We also point to open areas and unresolved challenges. These include “hybrid solutions”, error reporting, patching, and implementation disclosure attacks on diversified software. I...|$|E
30|$|The {{effectiveness}} of received software variants is not checked immediately upon receipt. Effectiveness is checked after the node has completed its current activity, such as generating its own repair. When a node {{that is not}} yet resistant to the current attack identifies a resistant software variant, the node replaces its own software with the variant. Incorporating a neighbor’s <b>software</b> decreases <b>diversity</b> in the network, but the individual node no longer needs to spend its own resources attempting to generate a repair. This illustrates a tradeoff between local resources and global diversity.|$|R
40|$|The {{field of}} {{computer}} security faces numerous vulnerabilities which cause network resources to become unavailable and violate systems confidentiality and integrity. Malicious software (Malware) {{has become one}} of the most serious security threats on the Internet. Malware is a widespread problem and despite the common use of anti-virus <b>software,</b> the <b>diversity</b> of malware is still increasing. A major challenge facing the anti-virus industry is how to effectively detect thousands of malware samples that are received every day. In this paper, a novel approach based on dynamic analysis of malware is proposed whereby Longest Common Subsequence (LCSS) and Longest Common Substring (LCS) algorithms are adopted to accurately detect malware. The empirical results show that the proposed approach performs favorably compared to other related work that use API call sequences...|$|R
40|$|This paper {{proposes a}} new N-version {{programming}} (NVP) scheme which allows several caller tasks to jointly use components which are designed diversely. Diversity is applied {{here at the}} level of classes {{in such a way that}} several version classes (objects) are developed separately and independently, and are encapsulated into a diversely designed object. Such objects are to be implemented in a special stylised way to incorporate a controlling mechanism which would deal with task and version synchronisation, adjudication of version output parameters and states, faulty version recovery, etc. The general approach is demonstrated using Ada. We outline the characteristics of applications which benefit from using such NVP scheme, discuss the engineering of diversely designed objects and of the software which uses them and describe several possible extensions of the scheme. Keywords: <b>software</b> design <b>diversity,</b> N-version programming, object-orientation, reuse, Ad...|$|R
40|$|Early {{experiments}} with <b>software</b> <b>diversity</b> {{in the mid}} 1970 ’s investigated N-version programming and recov-ery blocks to increase the reliability of embedded systems. Four decades later, the literature about <b>software</b> <b>diversity</b> has expanded in multiple directions: goals (fault-tolerance, security, software engineering); means (managed or automated diversity) and analytical studies (quantification of diversity and its impact). Our paper contributes {{to the field of}} <b>software</b> <b>diversity</b> as the first paper that adopts an inclusive vision of the area, with an emphasis on the most recent advances in the field. This survey includes classical work about design and data diversity for fault tolerance, as well as the cybersecurity literature that investigates randomization at different system levels. It broadens this standard scope of diversity, to include the study and exploitation of natural diversity and the management of diverse software products. Our survey includes the most recent works, with an emphasis from 2000 to present. The targeted audience is researchers and practitioners in one of the surveyed fields, who miss the big picture of <b>software</b> <b>diversity.</b> Assembling the multiple facets of this fascinating topic sheds a new light on the field. 1...|$|E
40|$|The N-Version Programming (NVP) {{approach}} {{applies the}} idea of design diversity to obtain fault-tolerant software units, called N-Version Software (NVS) units. The effectiveness {{of this approach is}} examined by the <b>software</b> <b>diversity</b> achieved in the member versions of an NVS unit. We define and formalize the concept of design diversity and <b>software</b> <b>diversity</b> in this paper. Design diversity is a property naturally applicable to the NVP process to increase its fault-tolerance attributes. The baseline design diversity is characterized by the employment of independent programming teams in the NVP. More design diversity investigations could be enforced in the NVP design process, including different languages, different tools, different algorithms, and different methodologies. <b>Software</b> <b>diversity</b> is the resulting dissimilarities appearing in the NVS member versions. We characterize it from four different points of view that are designated as: structural diversity, fault diversity, tough-spot div [...] ...|$|E
40|$|The use of <b>software</b> <b>diversity</b> {{has often}} been {{discussed}} in theresearchliteratureas an effective means tobreakup the software monoculture present on the Internet and to thus prevent malcode propagation. However, {{there have been no}} quantitative studies that examine the effectivenessof <b>software</b> <b>diversity</b> on viral propagation. Inthis paper, we study both real (an IPv 6 BGP topology) and synthetically generated (an Erdös-Rényi random graph) network topologies and employ a popular metric called the epidemic threshold to measure resistance to viral propagation in the presence of <b>software</b> <b>diversity.</b> We show that one can increase the epidemic threshold of a network even with a naïve, random distribution of diverse software on the nodes of a network. We also show that an algorithm-driven diversity assignment further increases the epidemic threshold. These results confirm the value of strategic topology-sensitive assignment of diversity to improving the tolerance of a network tomalcode propagation. 1...|$|E
40|$|Traditional modular {{redundancy}} {{based upon}} software fault tolerance techniques, such as N-version programming and recovery blocks, is now widely known {{and its use}} is on the increase. By contrast, data fault tolerance techniques have been largely ignored. The most likely reason for this omission is the perception that implementations are highly complex. Fortunately this situation has been greatly improved by object oriented systems which supply many of the required facilities. These allow data fault tolerance techniques {{to take their place}} alongside <b>software</b> design <b>diversity</b> techniques. Currently the areas of software fault tolerance and object-oriented techniques have been developed separately. This paper describes an approach to merge these two areas, providing a framework to utilise object-oriented approaches to achieve software fault tolerance incorporating both design and data diversity techniques. Index Terms [...] - Software fault tolerance, object fault tolerance, design diversity, [...] ...|$|R
40|$|The {{high rate}} of {{requirement}} changes make system administration a complex task. This complexity is further influenced by the increasing scale, unpredictable behaviour of <b>software</b> and <b>diversity</b> in terms of hardware and software. In {{order to deal with}} this complexity, configuration management solutions have been proposed. The processes that many configuration management solutions advocate are kept close to manual system administration. This approach has failed to address the complexity of system administration in the real world. In this paper, we propose PoDIM: a high-level language for configuration management. In contrast to many existing configuration management solutions, PoDIM allows modeling of cross machine constraints. We provide an overview of the PoDIM notation, describe a case study and present a prototype. We believe that high-level languages are needed to reduce system administration complexity. PoDIM is one step in that direction. status: publishe...|$|R
40|$|Modern {{computing}} environments face both low-frequency infrastructural changes, such as {{software and}} hardware upgrades, and frequent changes, such as fluctuations in the network bandwidth and CPU load. However, existing operating systems are not designed to cope with rapidly changing environments. They provide no mechanism to permit the insertion of self-adapting components that can optimize system performance according to <b>diversity,</b> <b>software</b> and hardware changes, and variations in the environment. They are not designed to accommodate dynamic updates of software, or to deal with component inter-dependence. This pa [...] ...|$|R
40|$|AbstractThe {{dependability}} of compiler would {{directly affect}} {{the quality of}} software because it can directly produce object code. At the same time, compiler diversity {{is an important part of}} <b>software</b> <b>diversity</b> design in a redundant system, which could not only help avoid common defects from compilers but also to find defects in source code. This paper proposes a method for compiler selection in safety-critical embedded redundant system based on airworthiness requirement and the principle of <b>software</b> <b>diversity.</b> A case on compiler selection in tri-redundancy FCS (flight control system) is given in the end...|$|E
40|$|Diversity is an {{important}} and valuable concept that has been adopted in many fields to reduce correlated risks and to increase survivability. In information security, diversity also helps to increase both defense capability and fault tolerance for in-formation systems and communication networks, where diversity can be adopted from many different perspectives. This dissertation, in particular, focuses mainly on two aspects of diversity – the application <b>software</b> <b>diversity</b> and the diversity in data interpretation. <b>Software</b> <b>diversity</b> has many advantages over mono-culture in improving system security. A number of previous researches focused on utilizing existing off-the...|$|E
40|$|The {{feasibility}} of automatically evolving software patches {{has been demonstrated}} by Forrest and Weimer [2]. In this paper we describe {{a model of a}} network of computers, each capable of evolving in response to an attack, bug, or vulnerability. Such a network may develop a diversity of software over time. We model such a network in order to explore the effects of different attack patterns and patch-sharing paradigms on the <b>software</b> <b>diversity</b> across the whole network. We wish to eventually investigate whether <b>software</b> <b>diversity</b> throughout a network confers increased resistance to novel attacks...|$|E
40|$|Key {{challenges}} {{caused by}} implementation of diversity-oriented approach and FPGA technology {{are discussed in}} context of NPP I&C systems safety. National and international standards containing the requirements to diversity application in NPP I&C systems are analyzed. A few evolution stages of multi-version NPP I&C systems (Reactor Trip Systems) are described taking into account different types of version redundancy (hardware, <b>software,</b> FPGA <b>diversity).</b> Main attention is attended to the methods of increasing tolerance of NPP I&C systems to physical and design faults using multi-version technologies. A life cycle model and multi-version technologies of FPGA-based I&C systems development are analyzed. Implementation results of safety-critical NPP I&Cs developed by RPC “Radiy ” using FPGA technology are described. The FPGA-based platform RADIYTM ensures scalability system functions, dependability and diversity. More than 20 different FPGA-based I&C systems were successfully developed, produced and implemented on the NPPs of Ukraine and Bulgaria during last five years...|$|R
40|$|Many {{communications}} applications require antennas with beam-steering {{ability and}} diversity performance. A new reconfigurable antenna is proposed and analyzed. It comprises moving parasitic elements near an active element. As {{a result of}} the changing mutual coupling between the parasitic elements and the active element, the antenna pattern changes. By carefully arranging the shape and locus of the parasitic elements, the impedance remains matched. This design has promising pattern-changing ability and is demonstrated to be capable of good diversity performance. By keeping the active element stationary, metal fatigue is eliminated and the reliability of such a mechanical system is improved. A parametric study is undertaken by simulation using commercial <b>software.</b> The <b>diversity</b> performance is evaluated using pattern correlation functions. The accuracy of the simulation software is also checked using canonical antenna configurations, namely the dipole. The results also demonstrate the advantages and limitations of different commercial simulation software...|$|R
40|$|Abstract. This paper {{introduces}} a new software polymorphism technique that randomizes program data structure layout. This technique will generate different data structure layouts {{for a program}} and thus diversify the binary code compiled from the same program source code. This technique can mitigate attacks (e. g., kernel rootkit attacks) that require knowledge about data structure definitions. It is also able to disrupt the generation of data structure-based program signatures. We have implemented our data structure layout randomization technique in the open source compiler collection gcc- 4. 2. 4 and applied it {{to a number of}} programs. Our evaluation results show that our technique is able to achieve <b>software</b> binary <b>diversity.</b> We also apply the technique to one operating system data structure in order to foil a number of kernel rootkit attacks. Meanwhile, programs produced by the technique were analyzed by a state-of-the-art data structure inference system and it was demonstrated that reliance on data structure signatures alone may lead to false negatives in malware detection. ...|$|R
40|$|Context <b>Software</b> <b>diversity,</b> self-modification, and {{obfuscation}} {{have many}} applications in software security and attack resilience. For example, <b>software</b> <b>diversity</b> schemes creating individualized binaries can, by scrambling memory and code layout, make unified exploits which are successful against all installations of one software product, much harder or even infeasible. Self-modification can help against runtime analysis, attacks, and binary patching which would, e. g., remove key, authorization, or integrity checks. Self-modification {{might also be}} used to other ends, e. g., to build cryptography on top of it. Obfuscation is commonly applied to protect programs against analysis and reverse engineering. While the aforementioned concepts may not offer perfect security, they can raise the bar for attackers such that reliable attacks become too expensive to pay off. <b>Software</b> <b>diversity</b> might even prevent reliable exploits against all software installations altogether. Goal The main objective of this thesis is to develop a general and extensible framework to allo...|$|E
40|$|In this paper, {{we define}} and formalize {{the concept of}} <b>software</b> <b>diversity,</b> which characterizes N-Version Software (NVS) from four {{different}} points of view that are designated as: structural diversity, fault diversity, tough-spot diversity, and failure diversity. Our goals are {{to find a way to}} quantify <b>software</b> <b>diversity</b> and to investigate the measurements which can be applied during the life cycle of NVS to gain confidence that operation will be dependable when NVS is actually employed. The versions from a six-language N-Version Programming project for fault-tolerant flight control software were used in the <b>software</b> <b>diversity</b> measurement. 1 Introduction Fault tolerance is a function of computing systems that serves to assure the continued delivery of required services in the presence of faults which cause errors within the system [2]. We say that a unit of software (module, CSCI, etc.) is fault-tolerant if it can continue delivering the required services, i. e., supply the expected ou [...] ...|$|E
40|$|Abstract—The {{software}} monoculture favors attackers over defenders, {{since it}} makes all target environments appear similar. Code-reuse attacks, for example, rely on target hosts running identical software. Attackers use this assumption {{to their advantage}} by automating parts of creating an attack. This article presents large-scale automated software diversification {{as a means to}} shore up this vulnerability implied by our software monoculture. Besides describing an industrial-strength implementation of automated <b>software</b> <b>diversity,</b> we introduce methods to objectively measure the effectiveness of diversity in general, and its potential to eliminate code-reuse attacks in particular. Index Terms—Biologically-inspired defenses, artificial <b>software</b> <b>diversity,</b> return-oriented programming, jump-oriented program-ming, code reuse attack...|$|E
40|$|Fault {{tolerant}} systems {{based on}} the use of <b>software</b> design <b>diversity</b> may be able to achieve high levels of reliability more cost-effectively than other approaches, such as heroic debugging. Earlier experiments have shown that the reliabilities of multi-version software systems are more reliable than the individual versions. However, {{it is also clear that}} the reliability benefits are much worse than would be suggested by naive assumptions of failure independence between the versions. It follows that it is necessary to assess the reliability actually achieved in a fault tolerant system. The difficulty here mainly lies in acquiring knowledge of the degree of dependence between the failures processes of the versions. The paper addresses the problem using Bayesian inference. In particular, it considers the problem of choosing a prior distribution to represent the beliefs of an expert assessor. It is shown that this is not easy, and some pitfalls for the unwary are identified...|$|R
40|$|The {{software}} engineering literature contains many {{studies of the}} efficacy of fault finding techniques. Few of these, however, consider what happens when several different techniques are used together. We show that the effectiveness of such multi-technique approaches depends upon quite subtle interplay between their individual efficacies and dependence between them. The modelling tool we use to study this problem {{is closely related to}} earlier work on <b>software</b> design <b>diversity.</b> The earliest of these results showed that, under quite plausible assumptions, it would be unreasonable even to expect software versions that were developed `truly independently' to fail independently of one another. The key idea here was a `difficulty function' over the input space. Later work extended these ideas to introduce a notion of `forced' diversity, in which it became possible to obtain system failure behaviour better even than could be expected if the versions failed independently. In this paper we show that many of these results for design diversity have counterparts in diverse fault detection in a single software version...|$|R
40|$|Human {{aspect is}} {{considered}} {{as one of the}} success factors for <b>software</b> development. Besides, <b>diversity</b> is labeled as the most effective element for creating effectiveness in team performance. Thus, this study has aimed to find the effects of gender diversity on team performance based on personality types. The personality types' variations were found effective on team performance based on genders. For instance, male-lead groups were found convenient with both genders but female-lead groups looked much comfortable with only female members. Moreover, female-gender looked uneasy in male dominant teams especially when their personality is E (extrovert). Whereas, male-gender was observed as digestible in female-lead teams if the I (introvert) personality is dominating...|$|R
30|$|Given that GP {{can be used}} to {{automatically}} generate <b>software</b> <b>diversity,</b> how should software be distributed so as to maintain diversity? In this paper we investigate the effect on diversity of distributing variants on different network topologies.|$|E
40|$|We {{provide a}} {{selective}} survey on software protection, including approaches to software tamper resistance, obfuscation, <b>software</b> <b>diversity,</b> and white-box cryptography. We review the early {{literature in the}} area plus recent activities related to trusted platforms, and discuss challenges and future directions...|$|E
40|$|In this paper, {{we propose}} a new {{approach}} for designing distributed systems to survive Internet catastrophes called informed replication, and demonstrate this approach with the design and evaluation of a cooperative backup system called the Phoenix Recovery Service. Informed replication uses a model of correlated failures to exploit <b>software</b> <b>diversity.</b> The key observation that makes our approach both feasible and practical is that Internet catastrophes result from shared vulnerabilities. By replicating a system service on hosts {{that do not have}} the same vulnerabilities, an Internet pathogen that exploits a vulnerability is unlikely to cause all replicas to fail. To characterize <b>software</b> <b>diversity</b> in an Internet setting, we measure the <b>software</b> <b>diversity</b> of host operating systems and network services in a large organization. We then use insights from our measurement study to develop and evaluate heuristics for computing replica sets that have a number of attractive features. Our heuristics provide excellent reliability guarantees, result in low degree of replication, limit the storage burden on each host in the system, and lend themselves to a fully distributed implementation. We then present the design and prototype implementation of Phoenix, and evaluate it on the PlanetLab testbed. ...|$|E
40|$|Modern {{software}} is created from components which can often perform {{a large number}} of tasks. For a given task, often there are many variations of components that can be used. As a result, software with comparable functionality can often be produced from a variety of components. The choice of software components influences the energy consumption. A popular method of software reuse with the components' setting selection is Software Product Line (SPL). Even though SPL has been used to investigate the energy related to the combination of software components, there has been no in depth study of how to measure the consumption of energy from a configuration of components {{and the extent to which}} the components contribute to energy usage. This thesis investigates how <b>software</b> components' <b>diversity</b> affects energy consumption in virtualised environments and it presents a method of identifying combinations of components that consume less energy. This work gives insight into the cultivation of the green software components by identifying which components influence the total consumption of energy. Furthermore, the thesis investigates how to use component diversity in a dynamic form in the direction of managing the consumption of energy as the demand on the system changes...|$|R
40|$|Fault {{tolerant}} systems {{based on}} the use of <b>software</b> design <b>diversity</b> may be able to achieve high levels of reliability more cost-effectively than other approaches, such as heroic debugging. Earlier experiments have shown that multi-version software systems are more reliable than the individual versions. However, {{it is also clear that}} the reliability benefits are much worse than would be suggested by naive assumptions of failure independence between the versions. To decide whether to use design diversity or other means for achieving the desired reliability a developer would need to know how they compare from the viewpoint of cost-effectiveness. Empirical data are insufficient for deciding this question, and expert opinions differ. We refute a recently published argument in favour of diversity and in the process show some general factors deciding whether process improvement, or debugging of the versions in a multiple-version system, will increase or decrease the statistical correlation between failures of the versions. The conclusion is that there is as yet no evidence that the choice between design diversity and other means of reliability improvement can be decided by general arguments rather than by detailed (and uncertain) special-case analysis...|$|R
40|$|The {{historical}} and cultural heritage of Qingxing palace and Lingyin and Kaihua temple, located in Hangzhou of China, include {{a large number of}} exquisite Buddhist statues and ancient stone sculptures which date back to the Northern Song (960 - 1219 A. D.) and Qing dynasties (1636 - 1912 A. D.) and are considered to be some of the best examples of ancient stone sculpting techniques. They were added to the World Heritage List in 2011 because of their unique craftsmanship and importance to the study of ancient Chinese Buddhist culture. However, biodeterioration of the surface of the ancient Buddhist statues and white marble pillars not only severely impairs their aesthetic value but also alters their material structure and thermo-hygric properties. In this study, high-throughput sequencing was utilized to identify the microbial communities colonizing the stone monuments. The diversity and distribution of the microbial communities in six samples collected from three different environmental conditions with signs of deterioration were analyzed by means of bioinformatics <b>software</b> and <b>diversity</b> indices. In addition, the impact of environmental factors, including temperature, light intensity, air humidity, and the concentration of NO 2 and SO 2, on the microbial communities' diversity and distribution was evaluated. The results indicate that the presence of predominantly phototrophic microorganisms was correlated with light and humidity, while nitrifying bacteria and Thiobacillus were associated with NO 2 and SO 2 from air pollution...|$|R
