4|142|Public
40|$|A {{systematic}} approach {{is presented to}} constructing a radiation assurance case using Goal <b>Structured</b> <b>Notation</b> (GSN) for spacecraft containing COTS parts. The GSN paradigm is applied to an SRAM single-event upset experiment board designed to fly on a CubeSat November 2016. Construction of a radiation assurance case without use of hardened parts or extensive radiation testing is discussed...|$|E
40|$|A {{problem when}} testing {{timeliness}} of event-triggered real-time systems is that response times {{depend on the}} execution order of concurrent tasks. Conventional testing methods ignore task interleaving and timing and thus do not help determine which execution orders need to be exercised to gain confidence in temporal correctness. This thesis presents and evaluates a framework for testing of timeliness {{that is based on}} mutation testing theory. The framework includes two complementary approaches for mutation-based test case generation, testing criteria for timeliness, and tools for automating the test case generation process. A scheme for automated test case execution is also defined. The testing framework assumes that a <b>structured</b> <b>notation</b> is used to model the real-time applications and their execution environment. This real-time system model is subsequently mutated by operators that mimic potential errors that may lead to timeliness failures. Each mutated model is automatically analyzed to generate test cases that target execution orders that are likely to lead to timeliness failures. The validation of the theory and methods in the proposed testing framework is done iteratively through case-studies, experiments and proof-of-concept implementations. This research indicates that an adapted form of mutation-based testing can be used for effective and automated testing of timeliness and, thus, for increasing the confidence level in real-time systems that are designed according to the event-triggered paradigm...|$|E
40|$|The use {{of tools}} in the {{software}} development environment has become increasingly popular. There are many tools available off the shelf to software developers. Developers of safety critical or safety related software have to balance the benefits of tool use against the potential hazards that may be introduced by tool use into their software. The selection of the most suitable tool is a problem. This paper proposes an approach to providing a structured argument for the safe use of a software development tool in a safety critical or safety related software development environment. An attempt is made to develop a generic safety argument expressed in Goal <b>Structured</b> <b>Notation</b> (GSN). This paper suggests that the developed GSN {{could be used as}} a pattern for application to any software development (or verification) tool. The pattern was applied to the use of an auto code generator on a military aircraft project. It was found that the pattern when applied was able to argue that the selected tool was safe to use. However, the pattern was found to be too granular in places and not detailed enough in others. To supplement the GSN an approach has been suggested to obtain a meaningful qualitative relative value for the safe use of a software development tool. This value could be used to compare tools t...|$|E
50|$|Safety {{cases are}} {{typically}} documented in both textual and graphical notations, e.g. using the Goal <b>Structuring</b> <b>Notation</b> (GSN).|$|R
50|$|Other notations {{have been}} {{proposed}} by researchers, while the Goal <b>Structuring</b> <b>Notation</b> (GSN) and GRL are sometimes used to make safety cases to satisfy the regulator in safety-related industries.|$|R
50|$|Toulmin's {{argument}} {{model has}} inspired research on, for example, the Goal <b>Structuring</b> <b>Notation</b> (GSN) (see goal modelling), widely used for developing safety cases, and argument maps and associated software.|$|R
40|$|This paper details {{a digital}} {{platform}} designed for digital creativity, learning, and engagement with new concepts and aesthetics in both music and coding. An open online ecosystem is outlined, connecting users {{for the purposes}} of collating, sharing, supporting, collaborating, and competing with works combining music and code – collectively designed to tackle both intrinsic and extrinsic motivational issues in both the learning of music and programming. Developing on observed practices and aesthetics in digital music subcultures, composing and coding through a unified digital notation is fashioned as a ‘serious game’; composers compete against themselves or others, in works that combine creativity and virtuosity in music and code. Mechanisms for scoring pieces with respect to both musical aesthetic (e. g. user reviews) and technique (e. g. code complexity) are considered, proposing a metric that rewards conciseness, in order to encourage abstraction and pattern recognition in both music and code. The platform develops on Manhattan (Nash, 2014), an end-user programming environment for music composition, based on a text-based pattern sequencer, using a grid/cell formula metaphor to integrate programming functionality. A rapid edit-audition cycle improves the liveness of notation interaction, facilitating learning and experimentation. Unlike other music programming tools, it prioritises the visibility and editing of musical data, rather than code; as in spreadsheets, users are able to engage with code expressions as much (or as little) as they wish, offering a lower entry threshold and shallower learning curve for programming – plus a continuum of musical applications from the fixed, <b>structured</b> <b>notation</b> of music (e. g. MIDI sequencing) to more dynamic and experimental elements, such as minimal (process-based) and algorithmic composition techniques. The paper provides musical examples and discusses existing use of the technologies in teaching, with reference to lessons and workshops based on the software, as well as current and future directions for the research...|$|E
40|$|Security tactics {{describe}} security design {{decisions in}} a very general, abstract, and implementation-independent way and provide basic security design guidance. Tactics directly address system quality attributes and {{can be seen as}} building blocks for design patterns. In order to establish a more detailed security tactic collection, we link them with the Common Criteria security certification standard by establishing a connection between the security tactic goals and the Common Criteria Security Functional Requirements through Goal <b>Structuring</b> <b>Notation.</b> In this paper we give a brief introduction to the Common Criteria standard and to Goal <b>Structuring</b> <b>Notation,</b> we present the full structured and refined catalog of security tactics, and we discuss benefits of the link with the Common Criteria security standard regarding security certification...|$|R
30|$|A pre-scripted {{familiarisation}} tutorial {{was provided}} before the experiment. Participants from both Group A and B attended the same tutorial session. This was {{to ensure that}} they received equal knowledge related to the handling of security incidents. The participants were introduced to the Goal <b>Structuring</b> <b>Notations</b> and G.S.T.|$|R
5000|$|... #Caption: Peter The Great 28955 <b>structure</b> chart <b>notation</b> {{pedigree}} ...|$|R
50|$|The idea of {{describing}} {{the structure of}} language using rewriting rules {{can be traced back}} to at least the work of Pāṇini (ancient Indian Sanskrit grammarian and a revered scholar in Hinduism who lived sometime between the 7th and 4th century BCE).His notation to describe Sanskrit word <b>structure</b> <b>notation</b> is equivalent in power to that of Backus and has many similar properties.|$|R
40|$|This work {{presents}} {{the safety and}} verification arguments {{for the development of}} an autonomous robot platform capable of leading humans around a building. It uses Goal <b>Structuring</b> <b>Notation</b> (GSN) to develop a pattern, a re-usable GSN fragment, that can form part of the safety case surrounding the interaction of a mobile guide robot to: record the decisions taken during the design phase, ensure safe operation around humans, and identify where mitigation must be introduced...|$|R
40|$|The project Deconstructive Evaluation of Risk In Dependability Arguments and Safety Cases (DERIDASC) has {{recently}} experimented with techniques borrowed from literary theory as safety case analysis techniques (Armstrong & Paynter 2003, Armstrong 2003). This paper introduces our high-level method for "deconstructing" safety arguments. Our approach is quite general {{and should be}} applicable to different types of safety argumentation framework. As one example, we outline how the approach would work {{in the context of}} the Goal <b>Structure</b> <b>Notation</b> (GSN) ...|$|R
40|$|This paper {{proposes a}} {{generation}} method for feature-strnctured) ased unification grammars. As compared with fixed arity term <b>notation.</b> feautre <b>structure</b> <b>notation</b> is more flexible for representing knowledge needed [o generate idiomatic structures {{s well as}} general constructions. The method enables feature structure retrieval via multiple indices. The indexing nmchnism, when used with a semantic hed driven generation gorithm, attMns efficient generation even when Irge mouut of generation knowledge must be consklered. Our method can produce all possi ble structures in pm'let, using structure shariug among ambiguous substructures...|$|R
40|$|The basic {{vision of}} AdvoCATE is to {{automate}} the creation, manipulation, {{and management of}} large-scale assurance cases based on a formal theory of argument structures. Its main purposes are for creating and manipulating argument structures for safety assurance cases using the Goal <b>Structuring</b> <b>Notation</b> (GSN), and as a test bed and proof-of-concept for the formal theory of argument structures. AdvoCATE is available for Windows 7, Macintosh OSX, and Linux. Eventually, AdvoCATE {{will serve as a}} dashboard for safety related information and provide an infrastructure for safety decisions and management...|$|R
40|$|A {{case study}} {{in the use of}} Goal <b>Structuring</b> <b>Notation</b> The HEAT/ACT project {{consists}} of replacing the conventional mechanical flight control system of a helicopter with a fly-by-wire system. With such a project, the safety concerns are obvious, and therefore the development of a thorough and convincing Safety Case is paramount. The project therefore chose to adopt a phased approach to safety case development, beginning with a Preliminary Safety Case (PSC). Goal <b>Structuring</b> <b>Notation</b> (GSN) was chosen as the development method for the PSC, because of its perceived merits of ease of construction and clarity of review. This work was first reported in a presentation at the UK Safety Critical Systems Symposium (SSS’ 04), which described the initial development of the PSC argument structure, and investigated some of the practical issues identified in using GSN. This paper revisits the HEAT/ACT project. It reprises the original construction of the GSN argument, and goes on to show how the PSC has developed and evolved since that initial development phase. It examines how the GSN argument has been used in the interaction with other partners and sub-system suppliers involved in the HEAT/ACT project, and considers whether the effort expended in developing the PSC has lived up to expectations in its contribution to safety process management [...] 1 Background to the HEAT/ACT project The HEAT/ACT project consists of replacing the conventional mechanical flight control system on a medium-lift helicopter with a fly-by-wire system (Juggin...|$|R
40|$|Goal <b>Structuring</b> <b>Notation</b> The HEAT/ACT project {{consists}} of replacing the conventional mechanical {{flight control system}} of a helicopter with a fly-by-wire system. With such a project, the safety concerns are obvious, and therefore {{the development of a}} thorough and convincing Safety Case is paramount. The project therefore chose to adopt a phased approach to safety case development, beginning with a Preliminary Safety Case (PSC). Goal <b>Structuring</b> <b>Notation</b> (GSN) was chosen as the development method for the PSC, because of its perceived merits of ease of construction and clarity of review. This work was first reported in a presentation at the UK Safety Critical Systems Symposium (SSS’ 04), which described the initial development of the PSC argument structure, and investigated some of the practical issues identified in using GSN. This paper revisits the HEAT/ACT project. It reprises the original construction of the GSN argument, and goes on to show how the PSC has developed and evolved since that initial development phase. It examines how the GSN argument has been used in the interaction with other partners and sub-system suppliers involved in the HEAT/ACT project, and considers whether the effort expended in developing the PSC has lived up to expectations in its contribution to safety process management [...] 1 Background to the HEAT/ACT project The HEAT/ACT project {{consists of}} replacing the conventional mechanical flight control system on a medium-lift helicopter with a fly-by-wire system (Juggin...|$|R
50|$|A Gorn address (Gorn, 1967) is {{a method}} of {{identifying}} and addressing any node within a tree data <b>structure.</b> This <b>notation</b> is often used for identifying nodes in a parse tree defined by phrase structure rules.|$|R
40|$|We {{introduce}} hierarchical safety cases (or hicases) as {{a technique}} to overcome some of the difficulties that arise creating and maintaining industrial-size safety cases. Our approach extends the existing Goal <b>Structuring</b> <b>Notation</b> with abstraction <b>structures,</b> which allow the safety case to be viewed {{at different levels of}} detail. We motivate hicases and give a mathematical account of them as well as an intuition, relating them to other related concepts. We give a second definition which corresponds closely to our implementation of hicases in the AdvoCATE Assurance Case Editor and prove the correspondence between the two. Finally, we suggest areas of future enhancement, both theoretically and practically...|$|R
40|$|This paper {{presents}} {{an approach to}} the reuse of common structures in safety case arguments through their documentation as Safety Case Patterns. Problems with the existing, informal and ad-hoc approaches to safety case material reuse are highlighted. We argue that through explicit capture and documentation of reusable safety case elements as patterns, the process of safety case construction and reuse can be made more systematic. For the description of patterns a safety case pattern language and a graphical pattern notation (based on the Goal <b>Structuring</b> <b>Notation)</b> are presented. Using this framework we briefly describe a number of example argument patterns. A fully documented example pattern is also included...|$|R
5000|$|The IUPAC {{nomenclature}} scheme becomes rapidly {{more elaborate}} for more complex cyclic <b>structures,</b> with <b>notation</b> for compounds containing conjoined rings, and many common {{names such as}} phenol being accepted as base names for compounds derived from them.|$|R
40|$|International audienceStructured {{arguments}} {{are commonly used}} to communicate to stakeholders that safety, security or other attributes of a system are achieved. Due to the growing complexity of systems, more uncertainties appear and the confidence in arguments tends to be less justifiable by reviewing. In this paper, we propose a quantitative method to assess the confidence in structured arguments, like safety cases. We adopt the Goal <b>Structuring</b> <b>Notation</b> (GSN) to model the safety case and propose to add annotations to identify uncertainties in this model. Three inference types of {{arguments are}} proposed according to their impact on confidence. Definition and quantification assessment of confidence {{are based on the}} belief function theory. The proposed approach is illustrated with several GSN examples...|$|R
40|$|A {{software}} tool named MetaBuilder is described. MetaBuilder's {{purpose is to}} enable the rapid creation of computerised diagram editing tools for <b>structured</b> diagrammatic <b>notations.</b> At its heart is an object-oriented, graphical metamodelling technique - a diagrammatic notation for describing other diagrammatic notations...|$|R
40|$|Abstract—Research {{based on}} {{computer}} simulations, especially that conducted through agent-based experimentation, is often criticised {{for not being}} a reliable source of information – the simulation software can hide errors or flawed designs that inherently bias results. Consequently, the academic community shows both enthusiasm and lack of trust for such approaches. In order to gain confidence is using engineered systems, domains such as Safety Critical Systems employ structured argumentation techniques as means of explicitly relating claims to evidence – in other words, requirements to deliverables. We argue here that structured argumentation {{should be used in}} the development and validation process of simulation-driven research. Making use of the Goal <b>Structuring</b> <b>Notation,</b> we provide insights into how more trustworthy outcomes can be obtained through argumentation-driven validation. Keywords-Software verification and validation; Simulation; Modelling. I...|$|R
40|$|Abstract. Safety {{policy is}} a {{collection}} of rules that govern the behaviour of entities such that they do not cause accidents. It has been suggested that policies in general can be expressed at various levels of abstraction and organised as a hierarchy of goals. In developing policy, it is desirable to decompose from top-level objectives down to rules in a structured manner. The Goal <b>Structuring</b> <b>Notation</b> (GSN) allows us to model the policy decomposition in order to scrutinise and better understand the development process. In so doing, a number of issues arise concerning reusable patterns of decomposition and the assumed models of the system whose behaviour the policy is intended to govern. This paper discusses the need to structure a safety policy decomposition and how modelling techniques and patterns can aid in this. ...|$|R
40|$|Mathematics {{notation}} {{contains a}} variety of tabular structures, including matrices, lists of expressions in a derivation, stacked limit expressions in a summation, and conditional expressions in a function definition. Tabular structures are particularly difficult to recognize in handwritten mathematics notation, due to irregular placement and sizing of symbols. In this paper we briefly survey prior work, describe a representation for tabular <b>structures</b> in mathematics <b>notation,</b> and present possible directions for recognizing tabular <b>structures</b> in handwritten <b>notation...</b>|$|R
40|$|We {{present a}} {{structured}} language for the specification of knowledge models {{according to the}} CommonKADS methodology. This language is called CML (Conceptual Modelling Language) and provides both a <b>structured</b> textual <b>notation</b> and a diagrammatic notation for expertise models. The use of our CML is illustrated {{by a variety of}} examples taken from the VT elevator design system...|$|R
40|$|A {{safety case}} is an argumentation for showing {{confidence}} in the claimed safety assurance of a system, which should be comprehensible and well-structured. Typically, safety cases are represented in plain text, but the structure of safety cases might become ambiguous and unclear. To address this, the Goal <b>Structuring</b> <b>Notation</b> (GSN) was introduced to represent safety arguments graphically. Recently, a number of safety case editors are developed to support safety case development with graphical representation. Those editors support the development and management of safety cases. However, only few of the editors offer functionality for safety case assessment which {{is also an important}} phase of safety assurance. This motivates us to developa safety case editor with assessment features. In this paper, we describe {{the state of the art}} of existing safety case editors. Furthermore, we briefly introduce three use cases to demonstrate the prototype functions that will be developed for safety case assessment...|$|R
40|$|A {{safety case}} should present a clear, {{comprehensive}} and defensible argument that {{a system is}} acceptably safe to operate within a particular context. However, many existing safety cases, {{in their attempt to}} manage potentially complex arguments, are poorly structured, presented and understood. This creates problems in developing and maintaining safety cases, and in capturing successful safety arguments for use on future projects. This thesis defines and demonstrates a coherent approach to the development, presentation, maintenance and reuse of the safety arguments within a safety case. This approach is based upon a graphical technique [...] the Goal <b>Structuring</b> <b>Notation</b> (GSN) [...] and has three strands. Firstly, a method for the use of GSN is defined together with an approach to supporting incremental safety case development. Secondly, the thesis presents a systematic process for the maintenance of a GSN-structured safety argument. Thirdly, the concept of `Safety Case Patterns' is defined as [...] ...|$|R
40|$|Abstract. Companies are {{increasingly}} adopting a product-line {{approach to the}} development of safety-critical systems. A product line offers large-scale reuse by exploiting common features and assets shared by systems within a specific domain. In this paper, we discuss the challenges of justifying the safety of architectural configurations and variation when developing product-line safety cases. We then address these challenges by defining an approach to developing product-line safety cases using the patterns and modular extensions of the Goal <b>Structuring</b> <b>Notation</b> (GSN). In this approach, we use the GSN patterns extension for explicitly capturing safety case variations and tracing these variations to their extrinsic source in the architectural model. Further, we use the GSN modular extension to organise the safety case into core and variable argument modules which are loosely coupled by means of argument contracts. We demonstrate this approach in a case study based on a product line of aeroengine control systems...|$|R
40|$|Abstract. The {{upcoming}} {{safety standard}} ISO/WD 26262 {{that has been}} derived from the more general IEC 61508 and adapted for the automotive industry, introduces {{the concept of a}} safety case, a scheme that has already been successfully applied in other sectors of industry such as nuclear, defense, aerospace, and railway. A safety case communicates a clear, comprehensive and defensible argument that a system is acceptably safe in its operating context. Although, the standard prescribes {{that there should be a}} safety argument, it does not establish detailed guidelines on how such an argument should be organized and implemented, or which artifacts should be provided. In this paper, we introduce a methodology and a tool chain for establishing a safety argument, plus the evidence to prove the argument, as a concrete reference realization of the ISO/WD 26262 for automotive systems. We use the goal <b>structuring</b> <b>notation</b> to decompose and refin...|$|R
40|$|Safety {{assurance}} using argument-based safety {{cases is}} an accepted best-practice in many safety-critical sectors. Goal <b>Structuring</b> <b>Notation</b> (GSN), which {{is widely used}} for presenting safety arguments graphically, provides a notion of modular arguments to support the goal of incremental certification. Despite the efforts at standardization, GSN remains an informal notation whereas the GSN standard contains appreciable ambiguity especially concerning modular extensions. This, in turn, presents challenges when developing tools and methods to intelligently manipulate modular GSN arguments. This paper develops {{the elements of a}} theory of modular safety cases, leveraging our previous work on formalizing GSN arguments. Using example argument structures we highlight some ambiguities arising through the existing guidance, present the intuition underlying the theory, clarify syntax, and address modular arguments, contracts, well-formedness and well-scopedness of modules. Based on this theory, we have a preliminary implementation of modular arguments in our toolset, AdvoCATE...|$|R
40|$|This paper {{presents}} in tutorial fashion the concepts, notation, aud data-base languages {{that were}} {{defined by the}} CODASYL Data Description Language and Programming Language Committees. Data <b>structure</b> diagram <b>notation</b> is ex-plained, and sample data-base definition is developed along with several sample programs. &quot; Advanced features of the languages are discussed, together with examples of their use. An extensive bibliography is included...|$|R
40|$|Process-based {{certification}} standards such as IEC 61508 and DO- 178 B {{are often}} criticised for being highly prescriptive and impeding {{the adoption of}} new and novel methods and techniques. Rather than arguing safety based on compliance with a prescribed and fixed process, product-based certification standards require the submission of a well structured and reasoned safety case. Ideally, the safety case presents an argument that justifies the acceptability of safety based on product-specific and targeted evidence. However, the role of process assurance {{should not be underestimated}} even in product arguments. Lack of process assurance can undermine even the seemingly strongest product safety evidence. However, unlike the SIL-based process arguments, the process argument of the type we suggest are targeted and assured against specific safety case claims. In this way, a close association between product and process safety arguments can be carefully maintained. This paper shows how integrated process and product safety arguments can be achieved using the modular features of the Goal <b>Structuring</b> <b>Notation</b> (GSN). ...|$|R
40|$|Querying {{a safety}} case {{to show how}} the various stakeholders' {{concerns}} about system safety are addressed has been put forth as {{one of the benefits of}} argument-based assurance (in a recent study by the Health Foundation, UK, which reviewed the use of safety cases in safety-critical industries). However, neither the literature nor current practice offer much guidance on querying mechanisms appropriate for, or available within, a safety case paradigm. This paper presents a preliminary approach that uses a formal basis for querying safety cases, specifically Goal <b>Structuring</b> <b>Notation</b> (GSN) argument <b>structures.</b> Our approach semantically enriches GSN arguments with domain-specific metadata that the query language leverages, along with its inherent structure, to produce views. We have implemented the approach in our toolset AdvoCATE, and illustrate it by application to a fragment of the safety argument for an Unmanned Aircraft System (UAS) being developed at NASA Ames. We also discuss the potential practical utility of our query mechanism within the context of the existing framework for UAS safety assurance...|$|R
40|$|Arguments {{in safety}} cases are {{predominantly}} qualitative. This is partly {{attributed to the}} lack of sufficient design and operational data necessary to measure the achievement of high-dependability targets, particularly for safety-critical functions implemented in software. The subjective nature of many forms of evidence, such as expert judgment and process maturity, also contributes to the overwhelming dependence on qualitative arguments. However, where data for quantitative measurements is systematically collected, quantitative arguments provide far more benefits over qualitative arguments, in assessing confidence in the safety case. In this paper, we propose a basis for developing and evaluating integrated qualitative and quantitative safety arguments based on the Goal <b>Structuring</b> <b>Notation</b> (GSN) and Bayesian Networks (BN). The approach we propose identifies structures within GSN-based arguments where uncertainties can be quantified. BN are then used to provide a means to reason about confidence in a probabilistic way. We illustrate our approach using a fragment of a safety case for an unmanned aerial system and conclude with some preliminary observation...|$|R
