103|181|Public
2500|$|A smart bond is an {{automated}} programmable bond contract {{that uses the}} capabilities of a blockchain database to operate as a cryptographically-secure yet open and transparent general bond ledger. [...] It {{is one of a}} class of financial instruments known as a <b>smart</b> <b>contract,</b> [...] "a computerized transaction protocol that executes the terms of a contract." [...] Smart bond technology may lower transaction costs by the elimination of the [...] "middle or back office", as well as the bond registry, substantially reducing the cost of bond servicing. [...] Another potential benefit is the potential for instantaneous settlement, rather than the days, as well as lower operational risk. In 2015, UBS was experimenting with smart bonds that use the bitcoin blockchain.|$|E
5000|$|A <b>smart</b> <b>contract</b> is [...] "a {{computerized}} transaction protocol that executes {{the terms}} of a contract." [...] A blockchain-based <b>smart</b> <b>contract</b> is visible to all users of said blockchain. However, this leads to a situation where bugs, including security holes, are visible to all but {{may not be able to}} be quickly fixed.|$|E
5000|$|Ethereum, an open-source, public, blockchain-based {{distributed}} computing platform featuring <b>smart</b> <b>contract</b> (scripting) functionality.|$|E
40|$|<b>Smart</b> <b>contracts,</b> {{self-executing}} agreements {{based on}} blockchain technology, are a hotly debated {{topic in the}} tech community, among policy makers, industry stakeholders and in academia. They offer the prospect of cheaper, faster and better transactions. The hype around <b>smart</b> <b>contracts</b> is also viewed with caution. We contribute to the existing academic literature by addressing some of the concerns about the legal nature, anonymity and reliability of <b>smart</b> <b>contracts.</b> Several contract law scholars argue that <b>smart</b> <b>contracts</b> cannot offer a superior solution to many problems addressed by traditional contract law, such as contract validity and legality. Furthermore, they argue that <b>smart</b> <b>contracts</b> cannot replicate the relational context which {{is essential for the}} day-to-day practice of contracting. In this contribution, we firstly draw a distinction between <b>smart</b> <b>contracts</b> based on public blockchains and those based on private or permissioned blockchains. While all existing contributions develop their arguments implicitly assuming that <b>smart</b> <b>contracts</b> are based on public blockchains, much commercial experimentation with <b>smart</b> <b>contracts</b> is occurring on permissioned blockchains. Importantly, many of the mentioned problems do not arise on permissioned blockchains. Secondly, we argue that there is a good reason to prefer public blockchains over permissioned blockchains for contracting, namely their capacity to create trust in otherwise no-trust contracting environments. This is the path to unleash the full potential of <b>smart</b> <b>contracts.</b> In contrast to critics, we argue that compared to traditional <b>contract</b> law, <b>smart</b> <b>contracts</b> potentially offer a superior solution for facilitating trade...|$|R
50|$|Solidity is an {{object-oriented}} programming language for writing <b>smart</b> <b>contracts.</b> It {{is used to}} implement <b>smart</b> <b>contracts</b> on various blockchain platforms. It was developed by Gavin Wood, Christian Reitwiessner, Alex Beregszaszi, Yoichi Hirai and several former Ethereum core contributors to enable writing <b>smart</b> <b>contracts</b> on blockchain platforms such as Ethereum.|$|R
50|$|<b>Smart</b> <b>contracts</b> are {{computer}} protocols {{intended to}} facilitate, verify, or enforce the negotiation or {{performance of a}} <b>contract.</b> <b>Smart</b> <b>contracts</b> were first proposed by Nick Szabo in 1996.|$|R
5000|$|Ethereum {{implements}} a turing complete {{language on}} their blockchain. It is the most-used <b>smart</b> <b>contract</b> platform.|$|E
5000|$|Smart {{contracts}} {{have been}} used primarily in association with cryptocurrencies. The most prominent <b>smart</b> <b>contract</b> implementation is the Ethereum blockchain platform. The real-world <b>smart</b> <b>contract</b> that gained mainstream coverage was The DAO, a decentralized autonomous organization for venture capital funding, running on Ethereum, which was launched with [...] in crowdfunding in May 2016 and was hacked and drained of 3,689,577 ETH three weeks later.|$|E
50|$|BTC Relay {{uses the}} <b>smart</b> <b>contract</b> {{functionality}} in Ethereum {{to allow people}} to verify Bitcoin transactions from Ethereum’s Blockchain.|$|E
30|$|Since the {{blockchain}} keeps {{a publicly}} verifiable and auditable proof of inter-microgrid communications, MGMCs are enforced to interact faithfully {{even if there}} was a previous mistrust. The emergence of <b>smart</b> <b>contracts</b> further makes it possible for MGMCs to realize decentralized consensus and optimization {{with a high degree of}} autonomy. Fundamentally, <b>smart</b> <b>contracts</b> are self-executable scripts allowing for distributed automation in a pre-specified manner [60]. <b>Smart</b> <b>contracts</b> are executed on the basis of clearly-defined specifications (e.g., events or times to take effect) determined individually or collectively by MGMCs. Similar to ordinary data records, <b>smart</b> <b>contracts</b> reside on blockchain with a unique address, and their logic can be transparently inspected by all MGMCs. Moreover, all MGMCs would have access to a cryptographically verifiable trace pertinent to the execution of <b>smart</b> <b>contracts.</b> Accordingly, <b>smart</b> <b>contracts</b> can be executed independently and flexibility by each MGMC and their execution behavior is guaranteed to be completely auditable and predictable.|$|R
30|$|The {{first is}} to ensure the {{integrity}} of the program. We have experienced that there is a loophole in Ethereum’s <b>Smart</b> <b>Contracts</b> with “The DAO” project. 19 Therefore, it is necessary {{to find a way to}} supplement the shortcomings of <b>Smart</b> <b>Contracts.</b> Several projects such as BOScoin, Tezos, Qtum, EOS and Cardano are aiming to find alternative ways to build a more secure and efficient <b>Smart</b> <b>Contracts</b> platform.|$|R
40|$|<b>Smart</b> <b>contracts</b> are {{computer}} programs {{that can be}} correctly executed by a network of mutually distrusting nodes, without the need of an external trusted authority. Since <b>smart</b> <b>contracts</b> handle and transfer assets of considerable value, besides their correct execution it is also crucial that their implementation is secure against attacks which aim at stealing or tampering the assets. We study this problem in Ethereum, the most well-known and used framework for <b>smart</b> <b>contracts</b> so far. We analyse the security vulnerabilities of Ethereum <b>smart</b> <b>contracts,</b> providing a taxonomy of common programming pitfalls which may lead to vulnerabilities. We show a series of attacks which exploit these vulnerabilities, allowing an adversary to steal money or cause other damage...|$|R
50|$|Mijin is able {{to support}} any {{arbitrary}} number of assets on its chain. All the features available with NEM are also available with Mijin, {{with the addition of}} <b>smart</b> <b>contract</b> support. Much about how the <b>smart</b> <b>contract</b> support will work is still under wraps, with the only reference to it being in the Mijin about page on the official website. The developers that are working on NEM are also the same ones working on Mijin.|$|E
50|$|The {{catapult}} {{release is}} said to include enhanced use of multisig providing the solution with a very extensive <b>smart</b> <b>contract</b> capability.|$|E
5000|$|Royal Bank of Scotland has {{announced}} that it has built a Clearing and Settlement Mechanism (CSM) based on the Ethereum distributed ledger and <b>smart</b> <b>contract</b> platform.|$|E
40|$|<b>Smart</b> <b>contracts</b> are {{computer}} {{programs that are}} executed by a network of mutually distrusting agents, without the need of an external trusted authority. <b>Smart</b> <b>contracts</b> handle and transfer assets of considerable value (in the form of crypto-currency like Bitcoin). Hence, {{it is crucial that}} their implementation is bug-free. We identify the utility (or expected payoff) of interacting with such <b>smart</b> <b>contracts</b> as the basic and canonical quantitative property for such contracts. We present a framework for such quantitative analysis of <b>smart</b> <b>contracts.</b> Such a formal framework poses new and novel research challenges in programming languages, as it requires modeling of game-theoretic aspects to analyze incentives for deviation from honest behavior and modeling utilities which are not specified as standard temporal properties such as safety and termination. While game-theoretic incentives have been analyzed in the security community, their analysis has been restricted to the very special case of stateless games. However, to analyze <b>smart</b> <b>contracts,</b> stateful analysis is required as it must account for the different program states of the protocol. Our main contributions are as follows: we present (i) ~a simplified programming language for smart contracts; (ii) ~an automatic translation of the programs to state-based games; (iii) ~an abstraction-refinement approach to solve such games; and (iv) ~experimental results on real-world-inspired <b>smart</b> <b>contracts...</b>|$|R
50|$|Proponents of <b>smart</b> <b>contracts</b> {{claim that}} {{many kinds of}} {{contractual}} clauses may be made partially or fully self-executing, self-enforcing, or both. The aim with <b>smart</b> <b>contracts</b> is to provide security that is superior to traditional contract law and to reduce other transaction costs associated with contracting.|$|R
30|$|Blockchain, Governance, Digital economy, Open Innovation, <b>Smart</b> <b>Contracts.</b>|$|R
50|$|Bitnation {{released}} its Pangea Blockchain Jurisdiction software May 2015. The Alpha software {{was built on}} the Horizon blockchain, but later on shifted to the Ethereum <b>Smart</b> <b>Contract</b> technology.|$|E
5000|$|The State Channel design [...] enables off-chain, or off-network, {{verification}} {{of data and}} smart contracts. This mechanism permits a high transactional throughput and parallel processing of smart contracts by allowing for their independence from the network. Hence, æternity's strengths lie in the programability of complex relationships for large numbers of users and in the parallel handling of high volumes of products and information. State channels allow for increased privacy {{in a way that}} only the parties participating in a <b>smart</b> <b>contract</b> know about the contents of that <b>smart</b> <b>contract.</b> When a channel is settled on-chain, the only information being put onto the Blockchain is the end-result of the transactional value that was exchanged. No contract state is stored on-chain, so all channels are independent of each other. Transaction speed is limited only by bandwidth, so æternity's scalable <b>smart</b> <b>contract</b> systems improves upon all the centralized and de-centralized scaling solutions that are available today.|$|E
50|$|Therefore, the {{programmability}} {{of complex}} relationships for {{large numbers of}} users and handling high volume of products and information in parallel is æternity's strong suit. Only the parties who participated in a <b>smart</b> <b>contract</b> know about the contents of that <b>smart</b> <b>contract.</b> When a channel is settled on-chain, {{the only way it}} changes the Blockchain state is by changing account balances. No contract state is stored on-chain, so all channels are independent from each other. Transaction speed is limited only by bandwidth, so the æternity system can scale as well as or even better than known centralized solutions available today.|$|E
5000|$|Programmable <b>Smart</b> <b>Contracts</b> - Turing-complete <b>smart</b> <b>contracts</b> {{scripting}} {{is one of}} {{the most}} powerful Counterparty features. Users can write their own custom financial instruments and decentralized applications (Dapp). Counterparty contracts are 100% compatible with Ethereum scripting, and pretty much all contracts can be run on both platforms without code changes.|$|R
30|$|<b>Smart</b> <b>contracts</b> are {{considered}} the silver bullet needed by the blockchain for automating microgrid interactions. The public blockchain platform, Ethereum [61], provides a built-in Turing-complete language (which is proved to solve any problem exactly if provided with sufficient time and storage space) for programming automated applications based on <b>smart</b> <b>contracts.</b> In practice, <b>smart</b> contract-aided blockchain technologies have shown disruptive potentials for securing decentralized energy management in ADN [62, 63]. A real-life peer-to-peer market for renewable energy trading was experimented in New York in April 2016, where the excess energy produced by solar panels was recorded securely on blockchain and traded with neighboring residents automatically via <b>smart</b> <b>contracts.</b> Accordingly, the integration of <b>smart</b> <b>contracts</b> with blockchain technologies presents a promising ADN strategy for optimizing and automating decentralized energy management (i.e., effected by MGMCs), while preserving the integrity and trustworthiness of data exchanges among MGMCs.|$|R
30|$|The {{deployment}} of <b>smart</b> <b>contracts</b> on blockchain {{is consistent with}} the development of fully distributed and autonomous energy management for ADN. <b>Smart</b> <b>contracts</b> make it possible to automate sophisticated inter-microgrid decision-making interactions in a dependable way. Note that edge computing capabilities of MGMCs facilitate the encryption and verification of data records as well as the execution of <b>smart</b> <b>contracts.</b> Accordingly, each MGMC is identical to an autonomous agent with inherent intelligence that adapts energy management decisions to dynamic operating conditions. Hence, collaborative MGMCs are assured to accomplish the same energy management goal as that of centralized schemes with DSO.|$|R
5000|$|Systems such as Ethereum emerged {{after the}} first {{successful}} blockchain deployment. These were designed to achieve greater Turing completeness and create vast value chain ecologies. Notable examples of implementation of <b>smart</b> <b>contract</b> technology are: ...|$|E
50|$|Szabo {{proposes that}} <b>smart</b> <b>contract</b> {{infrastructure}} {{can be implemented}} by replicated asset registries and contract execution using cryptographic hash chains and Byzantine fault tolerant replication. Askemos implemented this approachin 2002 using Scheme(later adding SQLite) as contract script language.|$|E
50|$|Monax Industries Limited, {{known as}} Monax, is a {{blockchain}} and <b>smart</b> <b>contract</b> software technology company founded in 2014. Incorporated as Eris Industries and previously known as Eris, the company {{changed its name}} to Monax in October 2016. The firm has offices in London, Berlin, and Connecticut.|$|E
5000|$|JPMorgan Chase's Quorum permissionable private {{blockchain}} {{with private}} store for <b>smart</b> <b>contracts</b> ...|$|R
40|$|<b>Smart</b> <b>contracts,</b> {{computer}} protocols {{designed for}} autonomous execution on predefined conditions, {{arise from the}} evolution of the Bitcoin’s crypto-currency. They provide higher transaction security and allow economy of scale through the automated process. <b>Smart</b> <b>contracts</b> provides inherent benefits for financial institutions such as investment banking, retail banking, and insurance. This technology is widely used within Ethereum, an open source block-chain platform, from which the data has been extracted to conduct the experiments. In this work, we propose an multi-dimensional approach to find and predict <b>smart</b> <b>contracts</b> interactions only based on their crypto-currency exchanges. This approach relies on tensor modeling combined with stochastic processes. It underlines actual exchanges between <b>smart</b> <b>contracts</b> and targets the predictions of future interactions among the community. The tensor analysis is also challenged with the latest graph algorithms to assess its strengths and weaknesses in comparison to a more standard approach...|$|R
40|$|<b>Smart</b> <b>contracts</b> are {{full-fledged}} {{programs that}} run on blockchains (e. g., Ethereum, {{one of the most}} popular blockchains). In Ethereum, gas (in Ether, a cryptographic currency like Bitcoin) is the execution fee compensating the computing resources of miners for running <b>smart</b> <b>contracts.</b> However, we find that under-optimized <b>smart</b> <b>contracts</b> cost more gas than necessary, and therefore the creators or users will be overcharged. In this work, we conduct the first investigation on Solidity, the recommended compiler, and reveal that it fails to optimize gas-costly programming patterns. In particular, we identify 7 gas-costly patterns and group them to 2 categories. Then, we propose and develop GASPER, a new tool for automatically locating gas-costly patterns by analyzing smart contracts' bytecodes. The preliminary results on discovering 3 representative patterns from 4, 240 real <b>smart</b> <b>contracts</b> show that 93. 5 %, 90. 1 % and 80 % contracts suffer from these 3 patterns, respectively. Comment: In International Conference on Software Analysis, Evolution, and Reengineering (SANER). 201...|$|R
5000|$|Hypothesised {{advantages}} of a <b>smart</b> <b>contract</b> over its equivalent conventional financial instrument include minimizing counterparty risk, reducing settlement times, and increased transparency., UBS was experimenting with [...] "smart bonds" [...] that use the bitcoin blockchainin which payment streams could hypothetically be fully automated, creating a self-paying instrument.|$|E
5000|$|Tezos is a {{blockchain}} {{project that}} governs itself by voting of its token holders. Bitcoin blockchain performs as a cryptocurrency and payment system. Ethereum blockchain added <b>smart</b> <b>contract</b> system {{on top of}} a blockchain. Tezos blockchain will add an autonomy system - a decentralized code Development function on top of both Bitcoin and Ethereum blockchains.|$|E
50|$|Blockchain-based smart {{contracts}} are contracts {{that can be}} partially or fully executed or enforced without human interaction. One of the main objectives of a <b>smart</b> <b>contract</b> is automated escrow. The IMF believes blockchains could reduce moral hazards and optimize the use of contracts in general. Due {{to the lack of}} widespread use their legal status is unclear.|$|E
50|$|High-level {{concept of}} Supply Chain Management (SCM) {{automation}} with <b>Smart</b> <b>Contracts,</b> Prediction Markets, and Oracles.|$|R
5000|$|Stateless <b>smart</b> <b>contracts.</b> This allows {{to write}} distributed, fault-tolerant, soft {{real-time}} and highly available non-stop applications.|$|R
40|$|Date: 28 June 2016 While {{procedural}} {{languages are}} commonly used to program <b>smart</b> <b>contracts</b> in blockchain systems, logic-based languages may be interesting alternatives. In this paper, we inspect what are the possible legal and technical (dis) advantages of logic-based <b>smart</b> <b>contracts</b> in light of common activities featuring ordinary contracts, then we provide insights {{on how to use}} such logic-based <b>smart</b> <b>contracts</b> in combination with blockchain systems. These insights lead us to emphasize a fundamental challenge - algorithms for logic approaches have to be efficient, but they also need to be literally cheap as measured within the environment where they are deployed and according to its economic rules. We illustrate this with different algorithms from defeasible logic-based frameworks...|$|R
