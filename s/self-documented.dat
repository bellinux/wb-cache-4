30|108|Public
5000|$|Untested, not peer reviewed, not (<b>self-)documented</b> utilities, ...|$|E
50|$|In {{addition}} to select APX programs, original submissions were added {{as well as}} public domain collections. All software was provided on <b>self-documented</b> disk. When the Atari ST was released, The Catalog became a mixture of Atari 8-bit and Atari ST software.|$|E
50|$|Alone is an American reality {{television}} {{series on the}} History channel. The first, second and fourth seasons were filmed on northern Vancouver Island, British Columbia, and the third near Nahuel Huapi National Park in Patagonia. It follows the <b>self-documented</b> daily struggles of 10 individuals (7 paired teams in season 4) as they survive in the wilderness {{for as long as}} possible. The participants are isolated from each other and all other humans, and the one who remains the longest wins a grand prize of $500,000.|$|E
5000|$|Commonly stated {{objectives}} for <b>self-documenting</b> systems include: ...|$|R
25|$|Well-designed, technology-enabled {{education}} reform will be self-improving, self-reforming and <b>self-documenting.</b>|$|R
5000|$|<b>Self-documenting</b> code: {{source code}} {{that is both}} {{machine-readable}} and human-readable ...|$|R
5000|$|The publication's own <b>self-documented</b> history {{states this}} about its {{editorial}} stance: What, besides {{free trade and}} free markets, does The Economist believe in? [...] "It is to the Radicals that The Economist still likes to think of itself as belonging. The extreme centre is the paper's historical position." [...] That is as true today as when former Economist editor Geoffrey Crowther said it in 1955. The Economist considers itself the enemy of privilege, pomposity and predictability. It has backed conservatives such as Ronald Reagan and Margaret Thatcher. It has supported the Americans in Vietnam. But it has also endorsed Harold Wilson and Bill Clinton, and espoused a variety of liberal causes: opposing capital punishment from its earliest days, while favouring penal reform and decolonisation, as well as—more recently—gun control and gay marriage. The Economist ...|$|E
5000|$|Nargelene Mendez is a Filipina national, and was {{formerly}} a domestic worker in Arabia. Mendez has made allegations {{that she was}} forced to labor under inhumane slave-like working conditions, until her October rescue by a Philippine diplomatic worker. Mendez's Facebook documentation of her working conditions under her Arabian employers, which to viewers may seem to have been akin to de facto forced migrant slavery, aroused worldwide journalistic condemnation. [...] Mendez documented claims of the physical abuse and neglect that her employers had subjected her to, including beatings, a [...] "sleeping berth" [...] in a laundry room cupboard, and the refusal of her employers to return her passport to her. [...] Mendez's <b>self-documented</b> Facebook story received nearly half a million hits. [...] In October the Philippine Embassy informed the BBC that Mendez had been rescued from her employers, but that the Embassy was still involved in negotiations with the Arabian government to arrange for her safe exit of the country. [...] One month on, as of 27 November 2014, Mendez remains trapped in the Philippine Consulate of Jedda, with the Philippine government still unable to secure from the Arabian government, her safe return to the Philippines. Nonetheless, she still hopes for her safe return home sometime before Christmas.|$|E
40|$|BSP (Berry-Sethi Parser) {{is a new}} SW {{tool for}} parsing {{ambiguous}} regular expressions (r. e.). Given a r. e., the BSP tool generates a DFA. Then the DFA processes the given input string, recognizes it and outputs, depending on user choice, all the syntax trees or just the one selected by either the Greedy or the POSIX criterion. The BSP tool is a HTML page including JavaScript code, and can be executed by any browser. It is <b>self-documented</b> and is intended for educational purposes. See [URL]...|$|E
5000|$|Well-designed, technology-enabled {{education}} reform will be self-improving, self-reforming and <b>self-documenting.</b>|$|R
50|$|The editor is <b>self-documenting</b> and is {{supported}} by a community of users.|$|R
5000|$|<b>Self-documenting</b> code - {{source code}} {{that can be}} easily {{understood}} without documentation ...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThe {{development and use}} of the FORTRAN program MARGO (Marine Reduction Gear Optimization) is described. MARGO performs design analysis, weight minimization, and a rudimentary form of noise minimization using the general purpose optimization program called ADS- 1 (Automated Design Synthesis, Version 1). Numerous subroutines are presented which calculate the associated design variables for marine reduction gears. The entire program is <b>self-documented</b> and easily modified by the user. Examples are presented to demonstrate the utility of the program. [URL] Commander, United States Nav...|$|E
40|$|This presentations {{highlights}} {{the advantages of}} using a database management systems approach to GIS. Database usage {{will lead to a}} reduction in data redundancy, as shared rather than independent databases will reduce the problem of inconsistencies in stored information. Maintenance of data integrity and quality is much easier. Data are <b>self-documented</b> or self-descriptive. Databases are able to avoid inconsistencies, as data must follow prescribed models, rules, and standards. Finally, they offer reduced costs and increased security over the alternatives. The presentation also looks at components and types of database systems...|$|E
40|$|Abstract. Constraint Handling Rules (CHR) is a {{high-level}} rule-based language extension, commonly embedded in Prolog. We {{introduce a new}} occurrence representation of CHR programs, and a new operational semantics for occurrence representations, equivalent to the widely implemented refined operational semantics. The occurrence representation allows in a natural way to express guard and continuation optimizations, which remove redundant guards and eliminate redundant code for subsumed occurrences. These optimizations allow CHR programmers to write <b>self-documented</b> rules with a clear logical reading. We show correctness of both optimizations, present an implementation in the K. U. Leuven CHR compiler, and discuss speedup measurements. ...|$|E
5000|$|In {{computer}} programming, <b>self-documenting</b> (or self-describing) {{source code}} and user interfaces follow naming conventions and structured programming conventions that enable {{use of the}} system without prior specific knowledge. [...] In web development, <b>self-documenting</b> refers to a website that exposes the entire process of its creation through public documentation, and whose public documentation {{is part of the}} development process.|$|R
5000|$|<b>Self-documenting</b> tests - Small {{test cases}} {{are easier to}} read and to understand.|$|R
50|$|There {{are certain}} {{practical}} considerations that influence {{whether and how}} well the objectives for a <b>self-documenting</b> system can be realized.|$|R
40|$|Constraint Handling Rules (CHR) is a {{high-level}} language {{commonly used to}} write constraint solvers. Most CHR programs depend on the refined operational semantics, resulting in an obfuscated logical reading and potential misbehavior under the theoretical operational semantics. We introduce two source to source transformations: guard simplification and occurrence subsumption. By removing redundant guards and eliminating redundant generated code for subsumed occurrences, they improve performance and allow CHR programmers to write <b>self-documented</b> rules with a clear logical reading. Formal correctness proofs are given, implementation in the K. U. Leuven CHR compiler is presented and experimental results are discussed...|$|E
40|$|Constraint Handling Rules (CHR) is a {{high-level}} rule-based language extension, commonly embedded in Prolog. We {{introduce a new}} occurrence representation of CHR programs, and a new operational semantics for occurrence representations, equivalent to the widely implemented refined operational semantics. The occurrence representation allows in a natural way to express guard and continuation optimizations, which remove redundant guards and eliminate redundant code for subsumed occurrences. These optimizations allow CHR programmers to write <b>self-documented</b> rules with a clear logical reading. We show correctness of both optimizations, present an implementation in the K. U. Leuven CHR compiler, and discuss speedup measurements. status: publishe...|$|E
40|$|Even though {{security}} protocols {{are designed}} to make computer communication secure, it is widely known that there is potential for security breakdowns at the human machine interface. This paper reports on a diary study conducted in order to investigate what people identify as security decisions that they make while using the web. The study aimed to uncover how security is perceived in the individual's context of use. From this data, themes were drawn, {{with a focus on}} addressing security goals such as confidentiality and authentication. This study is the first study investigating users' web usage focusing on their <b>self-documented</b> perceptions of security and the security choices they made in their own environment...|$|E
50|$|Thus IP {{systems are}} <b>self-documenting</b> {{to a large}} degree, {{allowing}} the programmer to keep a good high-level picture of the program as a whole.|$|R
50|$|Extreme Programming backers {{advocate}} {{code that}} is <b>self-documenting</b> to the furthest degree possible. This reduces {{the need for}} code comments, which {{can get out of}} sync with the code itself.|$|R
5000|$|DBL has an English-like syntax {{that was}} {{designed}} to be <b>self-documenting</b> and highly readable, but not verbose. The language is procedural and, since 2007 (version 9.1), object-oriented. Support for Microsoft’s [...]NET Framework was added in 2010 (version 9.5).|$|R
40|$|Published as {{technical}} report: Ulmer Informatik-Berichte Nr. 2005 - 01, February 2005 Constraint Handling Rules (CHR) is {{a high-level}} language {{commonly used to}} write constraint solvers. Most CHR programs depend on the refined operational semantics, obfuscating their logical reading and causing different (termination) behavior under the theoretical operational semantics. We introduce a source to source transformation called guard simplification which allows CHR programmers to write <b>self-documented</b> rules with a clear logical reading. Performance is improved by removing guards entailed by the implicit "no earlier (sub) rule fired" precondition and optional type and mode declarations. A formal description of the transformation is given, its implementation in the K. U. Leuven CHR compiler is presented and experimental results are discussed. status: publishe...|$|E
40|$|Code {{maintenance}} {{is perhaps the}} most time-consuming problem in developing source code for various purposes. The increased complexity of computational-electromagnetics (CEM) simulation software makes this task even more difficult and tedious. The current paper proposes a sophisticated approach for a significant performance improvement in CEM codemaintenance tasks, with the fusion of object-oriented and literate-programming techniques. A case study concerning the development of a CEM library is thoroughly analyzed and presented. Various aspects of computational efficiency have been examined in order to estimate the costs of developing object-oriented CEM programs. The aim of the analysis is to stress the advantages of the above-mentioned techniques, and to provide useful guidelines for effective implementation of CEM programs with reusable, extensible, <b>self-documented</b> source code. © 2005 IEEE...|$|E
40|$|There the {{statistic}} methods which {{guarantee the}} validity of processing results by lengthes of data samples which are lesser several times than ones {{to be determined by}} Chebyshev's theorem and by the central limiting theorem, namely they are unreal for the conditions of medically-biological experiment taking place practically, have been developed. The problem-oriented application package which is integrated <b>self-documented</b> system which was intended for mass application by user for processing of data of medically-biological experiment has been presented; there are the facilities for realization of common and individual databases. The study results have been introduced in the practical health protection, in the researches and in the educational processAvailable from VNTIC / VNTIC - Scientific & Technical Information Centre of RussiaSIGLERURussian Federatio...|$|E
40|$|First-order Markov model {{developed}} on digital computer for population with specific characteristics. System is user interactive, <b>self-documenting,</b> {{and does not}} require user to have complete understanding of underlying model details. Contains thorough error-checking algorithms on input and default capabilities...|$|R
500|$|COBOL has an English-like syntax, {{which was}} {{designed}} to be <b>self-documenting</b> and highly readable. However, it is verbose and uses over 300 reserved words. In contrast with modern, succinct syntax like , COBOL has a more English-like syntax (in this case, [...] ).|$|R
5000|$|Note how {{the code}} without tags is obscure (for example, [...] define window colors) while the code with tags is <b>self-documenting.</b> Note also that fewer {{parameters}} {{have to be}} defined with tags than are in the structure, as OpenWindowTags will fall back to default parameters.|$|R
40|$|The goal {{of social}} {{prospecting}} is {{to steer the}} user community into defining the guidelines for self care and lifestyle management. Using an evidence based approach, social prospecting combines the interest in keeping personal or family health care records with the momentum of user-generated healthcare (or health 2. 0). The personal healthcare record containing <b>self-documented</b> and self-collected information, or observations, can be used when a symptom or concern arises to identify a retrospective pathology. Coalesce of individual pathologies, related to a particular symptom or concern, can correlate a generic pathology or pathway in the self care domain. Using health 2. 0 technologies, the user community can augment these self care pathways with advice, suggestions and recommendations and collectively define self care guidelines. © 2008 The authors and IOS Press. All rights reserved...|$|E
40|$|A novel library layer, {{called the}} "design space layer," is proposed, aimed at {{supporting}} both, IP-based and traditional "inhouse " design methodologies, during early design space exploration. Strategies for effectively pruning the large design spaces characteristic of system-on-chip designs, and for transparently retrieving information on cores adequate for implementing the system components, {{are supported by}} the proposed layer. The layer is <b>self-documented</b> and highly compartmentalized into hierarchies of classes of design objects, and is thus easily scalable. A design space layer developed for encryption applications is presented and discussed in some detail. 1 Introduction The trend towards developing core-based, system-on-chip solutions for complex application specific systems is clearly irreversible. Increasing the level of design integration is quite attractive from a reliability, power consumption, and unit-cost perspective. The use of cores, i. e., macro-cells developed by thir [...] ...|$|E
40|$|The {{sophisticated}} {{document management}} needs of {{present and future}} Web-based environments have spawned the XML specification {{as well as a}} host of related technologies. In software engineering, XML to date has mostly been used to support three sub-activities: documentation management, data interchange and lightweight data storage. In this position paper, we propose using XML technology as the infrastructure for the integrated management of all core software development information. For several years now we have been developing the concept of design for testability based on a <b>self-documented</b> and self-testable class model. The aim {{of this paper is to}} propose a master document type that captures all relevant information for a class, i. e. documentation, contracts, tests, and so on. This document is de ned by an XML DTD and we have tentatively named the resulting markup language OOPML: Object-Oriented Programming Markup Language. After presenting our DTD prototype and describin [...] ...|$|E
5|$|COBOL syntax {{has often}} been criticized for its verbosity. Proponents {{say that this was}} {{intended}} to make the code <b>self-documenting,</b> easing program maintenance. COBOL was also intended to be easy for programmers to learn and use, while still being readable to non-technical staff such as managers.|$|R
50|$|<b>Self-documenting</b> code is ostensibly written using human-readable names, {{typically}} {{consisting of}} a phrase in a human language which reflects the symbol's meaning, such as numberOfWordsInThisArticle or TryOpen. The code must also have a clear and clean structure so that a human reader can easily understand the algorithm used.|$|R
5000|$|AUCTeX {{provides}} syntax highlighting, smart indentation and formatting, previews {{of mathematics}} and other elements directly in the editing buffer, smart folding of syntactical elements, macro and environment completion. It also supports the <b>self-documenting</b> [...]dtx format from the LaTeX project and, to a limited extent, ConTeXt and plain TeX.|$|R
