92|54|Public
50|$|In {{the early}} {{microcomputer}} {{era of the}} 1970s, Digital Research's operating system CP/M was often described as a <b>software</b> <b>bus.</b> Lifeboat Associates, an early distributor of CP/M and later of MS-DOS software, had a whole product line named <b>Software</b> <b>Bus.</b>|$|E
50|$|A <b>{{software}}</b> <b>bus</b> is {{a software}} architecture model where a shared communication channel facilitates connections and communication between software modules. This makes software buses conceptually {{similar to the}} bus term used in computer hardware for interconnecting pathways.|$|E
5000|$|In computing, D-Bus (for [...] "Desktop Bus"),a <b>software</b> <b>bus,</b> is an inter-process {{communication}} (IPC) {{and remote}} procedure call (RPC) mechanism that allows communication between multiple computer programs (that is, processes) concurrently running on the same machine. D-Bus was developed {{as part of the}} freedesktop.org project, initiated by Havoc Pennington from Red Hat to standardize services provided by Linux desktop environments such as GNOME and KDE.|$|E
5000|$|Exterminator, {{released}} by Nüfekop <b>Software</b> and Bubble <b>Bus</b> <b>Software</b> in 1982 for the VIC-20 and the C64 ...|$|R
5000|$|Cape Clear is {{a vendor}} of ESB (Enterprise service <b>bus)</b> <b>software,</b> founded in 1999.|$|R
50|$|Java Composite Application Platform Suite (CAPS or Java CAPS), is a standards-based Enterprise Service <b>Bus</b> <b>software</b> suite from Oracle Corporation.|$|R
5000|$|In {{the year}} 1986, Teknekron had a {{consulting}} project with Goldman Sachs to develop computer driven stock trading. In 1987, the first TIB for the integration {{and delivery of}} market data such as stock quotes, news and other financial information went live at Fidelity Investments, followed by First Interstate Bank and Salomon Brothers, eventually digitizing all of Wall Street. Teknekron's <b>software</b> <b>bus</b> programming allowed data to be shared between computers using different languages and different applications. [...] Wall Street trading firms used the software for trading systems, and eventually, large-scale manufacturers employed the technology as well. [...] Ranadivé said, [...] "We digitized Wall Street. You had 20 television monitors {{that you had to}} look at. What we did was get rid of all that and replaced it with a Sun workstation. All of that information could now be treated as digitized information." ...|$|E
40|$|We {{describe}} a decentralized reconfigurable {{implementation of a}} conference management system based on the low-level Internet Protocol (IP) multicasting protocol. IP multicasting allows low-cost, world-wide, two-way transmission of data between large numbers of conferencing participants through the Multicasting Backbone (MBone). Each conference is structured as a <b>software</b> <b>bus</b> [...] - a messaging system that provides a run-time interconnection model {{that acts as a}} separate agent (i. e., the bus) for routing, queuing, and delivering messages between distributed programs. Unlike the clientserver interconnection model, the <b>software</b> <b>bus</b> model provides a level of indirection that enhances the flexibility and reconfigurability of a distributed system. Current <b>software</b> <b>bus</b> implementations like POLYLITH [1], however, rely on a centralized bus process and point-to-point protocols (i. e., TCP/IP) to route, queue, and deliver messages. We implement a <b>software</b> <b>bus</b> called the MULTIBUS that relies on a separ [...] ...|$|E
40|$|We {{report on}} the actual {{industrial}} use of formal methods during {{the development of a}} <b>software</b> <b>bus.</b> During an internship at Neopost Inc., of 14 weeks, we developed the server component of a <b>software</b> <b>bus,</b> called the XBus, using formal methods during the design, validation and testing phase: we modeled our design of the XBus in the process algebra mCRL 2, validated the design using the mCRL 2 -simulator, and fully automatically tested our implementation with the model-based test tool JTorX. This resulted in a well- tested <b>software</b> <b>bus</b> with a maintainable architecture. Writing the model (mdev), simulating it, and testing the implementation with JTorX only took 17...|$|E
25|$|Cole and Degen {{started a}} new series called Ms. Frizzle's Adventures in 2001, which teaches social studies. There are now three books in that series. Microsoft Home started {{publishing}} Magic School <b>Bus</b> <b>software</b> in 1994.|$|R
40|$|<b>Software</b> for <b>Bus</b> Monitor (SOBUM) is {{a package}} {{developed}} for 13; MIL-STD- 1553 B based on Intel's Microprocessor Development System (MDS). SOBUM, consisting of modules in ASM 86 and PASCAL 86 when used with proper hardware interface can transfer the bus {{messages to the}} RAM in real time. SOBUM is then used in the off-line analysis of the message traffic on the bus. It displays or prints the data gathered in very useful and interpretive formats...|$|R
50|$|An {{electric}} motor (E-motor) test stand (also {{referred to as}} bench) is a test stand for reproducible testing of {{electric motor}}s. In addition to the mechanical design, an electric motor test stand consists of accompanying measurement devices, sensors and application <b>software.</b> The <b>bus</b> systems used to control and monitor the test objects are {{also included in the}} test stand.There are a variety of different types of test stands, such as developmental test stands, endurance test stands, end-of-line (EoL) test stands, and hardware-in-the-loop (HiL) test stands.|$|R
40|$|E-Learning {{emerges as}} the times require under the network environment. It {{is a new}} {{teaching}} and learning mode, this paper analyzes the meaning of E-Learning, teaching mode, {{as well as the}} traditional Chinese education influence. Service <b>Software</b> <b>Bus</b> (SSB) is a service-oriented <b>software</b> <b>bus.</b> Based on theory basis of existing general software and combing with loosely coupled service-oriented architecture technology based on business standards, a kind of SSB is proposed and designed. Such kind of service-oriented <b>software</b> <b>bus</b> architecture is then applied into E-Learning teaching platform to conduct overall design of E-Learning teaching platform. Detail design of each functional layer of the teaching platform is also given...|$|E
40|$|We {{report on}} the actual {{industrial}} use of formal methods during {{the development of a}} <b>software</b> <b>bus.</b> At Neopost Inc., we developed the server component of a <b>software</b> <b>bus,</b> called the XBus, using formal methods during the design, validation and testing phase: We modeled our design of the XBus in the process algebra mCRL 2, validated the design using the mCRL 2 -simulator, and fully automatically tested our implementation with the model-based test tool JTorX. This resulted in a well-tested <b>software</b> <b>bus</b> with a maintainable architecture. Writing the model, simulating it, and testing the implementation with JTorX only took 17 % of the total development time. Moreover, the errors found with model-based testing would have been hard to find with conventional test methods. Thus, we show that formal engineering can be feasible, beneficial and cost-effective...|$|E
40|$|We have {{implemented}} a <b>software</b> <b>bus</b> [1] for lightweight threads in an object-oriented programming environment {{that allows for}} rapid recofniguration and reuse of thread objects in discrete-event simulation experiments. While previous research in object-oriented, parallel programming environments have focused on direct communication between threads, our lightweight <b>software</b> <b>bus,</b> called the MINIBUS, provides a means to isolate threads from their contexts of execution by restricting communications between threads to message-passing via their local ports only. The <b>software</b> <b>bus</b> maintains a topology of connections between these ports. It routes, queues, and delivers messages according to this topology. This approach allows for rapid reconfiguration and reuse of thread objects in other systems without making changes to the specifications or source code. We present a layered approach that provides the needed transparency to developers, discuss example cases of using the MINIBUS, {{and the value of}} [...] ...|$|E
50|$|A {{particular}} {{strength of}} I²C is {{the capability of}} a microcontroller to control a network of device chips with just two general-purpose I/O pins and <b>software.</b> Many other <b>bus</b> technologies used in similar applications, such as Serial Peripheral Interface Bus, require more pins and signals to connect devices.|$|R
50|$|Bubble <b>Bus</b> <b>Software</b> was a {{publisher}} of video game software for home {{computers in the}} mid-1980s, founded by Mark Meakins and based in Tonbridge, Kent. Their releases targeted popular home computers of the time, such as the Commodore 64, VIC-20 and ZX Spectrum. Their most notable release was Starquake.|$|R
50|$|The SMBus uses I²C {{hardware}} and I²C hardware addressing, but adds second-level software for building special systems. In particular its specifications include an Address Resolution Protocol {{that can make}} dynamic address allocations.Dynamic reconfiguration of the {{hardware and}} <b>software</b> allow <b>bus</b> devices to be‘hot-plugged’ and used immediately, without restarting the system. The devices are recognized automatically and assigned unique addresses. This advantage results in a plug-and-play user interface. In both those protocols {{there is a very}} useful distinction made between a System Host and all the other devices in the system that can have the names and functions of masters or slaves.|$|R
40|$|We {{present an}} {{empirical}} {{study in which}} model-based testing (MBT) {{was applied to the}} <b>software</b> <b>bus</b> of NASA’s Goddard Mission Service Evolution Center (GMSEC), a reusable software framework. The goal was to study the feasibility of using MBT on a real-world software system that was designed to be flexible. GMSEC has three levels of flexibility: 1) loose application coupling through a <b>software</b> <b>bus</b> based on the publish–subscribe architectural style, 2) language independence by providing APIs to the bus in several programming languages, 3) middleware independence by providing wrappers for several middlewares that are supported by the <b>software</b> <b>bus.</b> The novelty brought forward in this paper is that one model and one set of generated test cases were used as the basis to test the <b>software</b> <b>bus</b> for behavioral consistency across multiple programming languages and middleware wrappers. The comparison of costs and benefits from using finite state machines (FSM) vs. extended FSMs (EFSM) when used for MBT on a real-world system is also novel. The case study shows that it was feasible, even for a programmer who neither knew MBT nor the system under test, to successfully apply MBT to a flexible system such as GMSEC and that MBT could within reasonable effort detect non-trivial defects in a fielded system...|$|E
40|$|Description Language (SADL) which forces {{providers}} and clients of {{a service to}} share the same service definition. The software plugs, ensuring the communication among the processes and the marshalling and un-marshalling of the data structures passed as parameters, are generated automatically by the <b>Software</b> <b>Bus</b> SADL compiler in C or C++, for UNIX processes or MS-Windows tasks, for server or client components, on demand. The adoption of the <b>Software</b> <b>Bus</b> allowed the easy physical re-distribution of the MIPS processes among several servers and the replication of subsystems of intercommunicating processes independent of their physical location. Core architecture The synchronous aspect of the RPC mechanism of the <b>Software</b> <b>Bus</b> motivates the diamond architecture of the generic system core. At {{the top of the}} diamond, the Presentation Manager sends requests either to the Presentation Dispatcher, for executing presentation primitives, or to the BACA process, for evaluating queries. At the bott [...] ...|$|E
40|$|The {{authors have}} {{implemented}} a <b>software</b> <b>bus</b> for lightweight threads in an object-oriented programming environment {{that allows for}} rapid reconfiguration and reuse of thread objects in discrete-event simulation experiments. While previous research in object-oriented, parallel programming environments has focused on direct communication between threads, our lightweight <b>software</b> <b>bus,</b> called the MiniBus, provides a means to isolate threads from their contexts of execution by restricting communications between threads to message-passing via their local ports only. The <b>software</b> <b>bus</b> maintains a topology of connections between these ports. It routes, queues, and delivers messages according to this topology. This approach allows for rapid reconfiguration and reuse of thread objects in other systems without making changes to the specifications or source code. A layered approach that provides the needed transparency to developers is presented. Examples of using the MiniBus are given, {{and the value of}} bus architectures in building and conducting simulations of discrete-event systems is discussed...|$|E
40|$|IBM-compatible {{personal}} computer {{used instead of}} logic analyzer or other special instrument to monitor IEEE- 488 interface data bus that interconnects various pieces of laboratory equipment. Needed is short program for computer, commercial general-purpose interface bus circuit card, and adapter cable to link card to <b>bus.</b> <b>Software</b> available in Ada or Quick Basic language...|$|R
50|$|In 2013, TARTA {{launched}} TARTA Tracker, {{which uses}} satellites and predictive computer <b>software</b> to identify <b>bus</b> locations {{in real-time and}} to anticipate arrival times of buses at various stop, also in real-time. TARTA Tracker is available in a desktop/laptop edition, mobile edition - both at www.TARTATracker.com - and a phone edition at 419-243-RIDE (7433).|$|R
40|$|Abstract This work {{presents}} {{a method of}} automatically generating embedded <b>software</b> including <b>bus</b> driver code from a transaction level model (TLM). For the application software, a real time operating system (RTOS) adapter is introduced to model scheduling and synchronization at C level. ANSI-C code is generated targeting this RTOS adapter. Bus drivers are also automatically created for HW/SW communication. Finally, the software image file is created from the C code, bus driver code, RTOS adapter and RTOS library code. As a result, efficient embedded software is synthesized from abstract, target CPU independent source code, {{eliminating the need for}} manual RTOS targeting, I/O driver coding and system integration. 1...|$|R
40|$|We {{describe}} decentralized reconfigurable {{implementation of}} a conference management system based on the low-level Internet Protocol (IP) multicasting protocol. IP multicasting allows low-cost, world-wide, two-way transmission of data between large numbers of conferencing participants through the Multicasting Backbone (MBone). Each conference is structured as a <b>software</b> <b>bus</b> [...] a messaging system that provides a run-time interconnection model {{that acts as a}} separate agent (i. e., the bus) for routing, queuing, and delivering messages between distributed programs. Unlike the client-server interconnection model, the <b>software</b> <b>bus</b> model provides a level of indirection that enhances the flexibility and reconfigurability of a distributed system. Current <b>software</b> <b>bus</b> implementations like POLYLITH, however, rely on a centralized bus process and point-to-point protocols (i. e., TCP/IP) to route, queue, and deliver messages. We implement a <b>software</b> <b>bus</b> called the MULTIBUS that relies on a separate process only for routing and uses a reliable IP multicasting protocol for delivery of messages. The use of multicasting means that interconnections are independent of IP machine addresses. This approach allows reconfiguration of bus participants during system execution without notifying other participants of new IP addresses. The use of IP multicasting also permits an economy of scale in the number of participants. We describe the MULITIBUS protocol elements and show how our implementation performs better than centralized bus implementations...|$|E
40|$|This paper {{exhibits}} the use {{of existing}} <b>software</b> <b>bus</b> technology in interconnecting Virtual-Reality Environment (VE) software. Interoperability and application construction from heterogeneous modules are well-explored topics of distributed systems. A joint project using the Polylith <b>software</b> <b>bus</b> from the University of Maryland and VE software from the UNC graphics lab has shown the utility of composing existing applications as opposed to making extensive individual modifications. This paper claims only a unique application of these methods to a new client area. Multi-user VE walkthroughs (software navigators) are an exciting new area in graphics software but we see that with the rapid development of graphics technology, next-generation applications (including multiuse...|$|E
40|$|AbstractThe Mathematics <b>Software</b> <b>Bus</b> is a {{software}} environment for combining heterogeneous systems performing {{any kind of}} mathematical computation. Such an environment will provide combinations of graphics, editing and computation tools through interfaces to already existing powerful software by flexible and powerful semantically integration. Communication and cooperation mechanisms for logical and symbolic computation systems enable to study and solve new classes of problems and to perform efficient computation in mathematics through cooperating specialized packages. We give an overview {{on the need for}} cooperation in solving mathematical problems and illustrate the advantages by several well-known examples. The needs and requirements for the Mathematics <b>Software</b> <b>Bus</b> and its architecture are demonstrated through some implementations of powerful interfaces between mathematical services...|$|E
50|$|Starquake is an arcade adventure, {{platform}} and maze game written by Stephen Crow {{and published by}} Bubble <b>Bus</b> <b>Software</b> in 1985. It was released for Commodore 64, MSX, ZX Spectrum, Amstrad CPC, Atari 8-bit family, Tatung Einstein (all 1985), the BBC Micro (1987) and IBM Compatible and Atari ST (both 1988). An Amiga version was planned for 1991 but was never released.|$|R
5000|$|In 1997, Ranadivé founded TIBCO (The Information Bus Company). The <b>bus</b> <b>software</b> allowed {{communication}} {{within the}} financial markets to happen in real-time and without human intervention. The technology was used by companies like SAP, IBM, and Oracle. Later in 1997, the company became one of 13 of Microsoft's partners in [...] "push" [...] technology, which delivers internet content to users for free through web browsers.|$|R
40|$|Abstract: The {{convergence}} between {{business process}} modeling and the service-oriented architecture {{has created a}} significant opportunity for Information Technology (IT) system integrators: they can offer effective business process outsourcing for Small Medium Enterprises (SME) s that often cannot afford the cost of designing, provisioning, and operating their own <b>software</b> service <b>bus.</b> In this paper, we present a methodology, and a corresponding implemented system Prosero, for managing multiple customized business processes, all derived from a small set of reference models. The methodology is based upon a semantic repository. The paper focuses {{on the structure of}} the semantic repository, and explains how specific operations in the end-to-end lifecycle of outsourced business processes benefit from the semantic services the Prosero repository delivers...|$|R
40|$|For the Lunar Reconnaissance Orbiter, the Command and Data Handling {{subsystem}} {{consisted of}} several electronic hardware assemblies that were connected with SpaceWire serial links. Electronic hardware would be commanded/controlled and telemetry data was obtained using the SpaceWire links. Prior art focused on parallel data buses {{and other types}} of serial buses, which were not compatible with the SpaceWire and the core flight executive (CFE) <b>software</b> <b>bus.</b> This innovation applies to anything that utilizes both SpaceWire networks and the CFE software. The CCSDS (Consultative Committee for Space Data Systems) packet contains predetermined values in its payload fields that electronic hardware attached at the terminus of the SpaceWire node would decode, interpret, and execute. The hardware s interpretation of the packet data would enable the hardware to change its state/configuration (command) or generate status (telemetry). The primary purpose is to provide an interface that is compatible with the hardware and the CFE <b>software</b> <b>bus.</b> By specifying the format of the CCSDS packet, it is possible to specify how the resulting hardware is to be built (in terms of digital logic) that results in a hardware design that can be controlled by the CFE <b>software</b> <b>bus</b> in the final applicatio...|$|E
40|$|In {{this paper}} we present an {{extension}} OMDoc to the Open-Math standard that allows {{to represent the}} semantics and structure of various kinds of mathematical documents, including articles, textbooks, interactive books, courses. It can serve as the content language for agent communication of mathematical services on a mathematical <b>software</b> <b>bus...</b>|$|E
40|$|Abstract. The data {{communication}} plays {{a very important}} role in fault diagnosis instrument system. In this paper, a flexible <b>software</b> <b>bus</b> method is proposed which is designed for the communication among instrument components. In this way, the data processing modules can be prefabricated together dynamically and in parallel. To carry out the communication between the bus and components, the design principle and the architecture of the components is discussed, and then the fault diagnosis instrument cases can be constructed by configuring the instrument components with the communication addresses. Based on the <b>software</b> <b>bus,</b> the processed data of fault diagnosis can propagate among the configured data flow ways asynchronously, and users can plug and unplug any components to the instrument platform. The application cases shows that the proposed way can accelerate data exchange among the modules based on the components and improve the working processes efficiency...|$|E
50|$|Ludeman {{then joined}} the local {{transport}} authority in Greater Manchester {{in the planning}} department, before switching to line management in Lancashire where he gained his bus driver's licence (badge number N 12281). After eight years {{he and his wife}} moved to Hong Kong where he worked as senior transport officer, before becoming a consultant in the private sector and then returning to the United Kingdom selling <b>software</b> for scheduling <b>bus</b> crews.|$|R
50|$|Stephen Crow (born 1965 in Hadlow, Kent) (also {{known as}} Stephen J. Crow, Steve Crow, and Steve J. Crow) {{is a game}} {{programmer}} {{who worked in the}} 1980s on the ZX Spectrum platform, programming for companies such as Hewson Consultants and Bubble <b>Bus</b> <b>Software.</b> He also worked with members of the Graftgold team. More recently, he was the lead artist working for Monkeytropolis, a game company that is no longer active.|$|R
40|$|Nowadays {{the design}} of complex systems {{requires}} the cooperation of several teams belonging to different cultures and using different languages. It is necessary to dispose of new design and verification methods to handle multilanguage approaches. This paper presents a multilanguage co-simulation tool that allows co-simulation of multilanguage specifications for complex systems. The main idea of our approach is to allow validation of the functional completeness of the system at a behavioral level. MCI starts with a configuration file that describes the interconnection between modules written in different languages. It generates automatically a <b>software</b> co-simulation <b>bus</b> and the interconnection required to connect the different simulators in a distributed way. The proposed tool is used to assist {{the design of}} an adaptive speed control system that was described in three different languages (VHDL, SDL and MatLab) ...|$|R
