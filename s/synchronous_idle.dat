6|3|Public
5000|$|<b>Synchronous</b> <b>Idle</b> (SYN) is the ASCII control {{character}} 22 (0x16), represented as ^V in caret notation. In EBCDIC the corresponding character is 50 (0x32). <b>Synchronous</b> <b>Idle</b> {{is used in}} some synchronous serial communication systems such as Teletype machines or the Binary Synchronous (Bisync) protocol to provide a signal from which synchronous correction may be achieved between data terminal equipment, [...] particularly when no other character is being transmitted.|$|E
5000|$|In computing, Control-V is {{a control}} {{character}} in ASCII code, {{also known as}} the <b>synchronous</b> <b>idle</b> (SYN) character. It is generated by pressing the [...] key while holding down the [...] key on a computer keyboard.|$|E
50|$|An early ISO {{standard}} {{defining a}} Telex-oriented communications protocol that used the non-printable ASCII transmission control characters SOH (Start of Heading), STX (Start of Text), ETX (End of Text), EOT (End of Transmission), ENQ (Enquiry), ACK (Acknowledge), DLE (Data Link Escape), NAK (Negative Acknowledge), SYN (<b>Synchronous</b> <b>Idle),</b> and ETB (End of Transmission Block).|$|E
50|$|The SYN {{character}} has the bit pattern 00010110 (EBCDIC 00110010), {{which has the}} property that it is distinct from any bit-wise rotation of itself. This helps bit-alignment of sequences of <b>synchronous</b> <b>idles.</b>|$|R
40|$|In this paper, {{procedure}} for AVR parameter estimation is proposed, based on step responses when <b>synchronous</b> generator in <b>idle</b> run. The exciter system includes AVR, thyristor rectifier and DC exciter. AVR is {{realized in the}} form of cascade control structure with two control loops. PID controller in the outer loop represents the primary controller. P controller in the inner loop represents secondary controller which enables the faster field current response time. The aim of procedure is to determine equivalent gain of PID controller and thyristor rectifier. The measurements used in the parameter estimation procedure are taken from fossil power plant 'Kolubara A', aggregate A 5...|$|R
40|$|AbstractWe study two {{different}} approaches to semantics for fairness within thecategorical framework of presheaf models for concurrency [1, 2]. The first approach, used in e. g. dataflow models, is based on representing finite or infinite completed observations. A completed observation {{is the result of}} an infinite computation. A finite completed observation is then the result of an infinite computation that only produces finitely many actions, i. e. at some point it stops producing output but stays active (as opposed to being deadlocked). The second approach is that of e. g. Milner's SCCS with finite delay [6], having an observable delay action and representing also finite incomplete observations, but only infinite completed observations. More precisely, we consider (separated) presheaves over respectively the category Comp of incomplete finite, and completed infinite and finite observations, and the category Inf of incompleted finite and completed infinite observations, possibly containing delays. The latter model was applied previously by the author [5, 4] to give a denotational semantics of SCCS with finite delay shown to be fully abstract with respect to Hennessy and Stirlings extended bisimulation [3]. One of the motivations for studying finite delay is the ability to encode a fair asynchronous parallel operator. However, the model contains a lot more processes than just those obtained from the encoding. Moreover, the introduction of delay actions makes the modelling of synchronous communication less obvious. This raises the questions of identifying the behaviours of fair processes and giving a “delay free” representation of the processes, both answered by the present paper. We apply the first model to give a denotational semantics for a CSP-like process language, FCSP, with a fair asynchronous parallel operator with <b>synchronous</b> communication, an <b>idle</b> process (the identity for the fair parallel operator) and a deadlocked process (represented by the incomplete observation with no actions). The canonical notion of bisimulation obtained from span of open maps is sensitive to both fairness and deadlock. We give a syntactic encoding of FCSP into SCCS with finite delay. Benefiting from the categorical presentation we show that, semantically, the encoding corresponds to the inverse image of the geometric morphism induced by the functor gamma from Inf to Comp which removes delay actions and adds the idle completion, if the sequence contained infinitely many delay actions but only finitely many non-delay actions...|$|R
5000|$|The control codes felt {{essential}} for data transmission were {{the start of}} message (SOM), end of address (EOA), end of message (EOM), end of transmission (EOT), [...] "who are you?" [...] (WRU), [...] "are you?" [...] (RU), a reserved device control (DC0), <b>synchronous</b> <b>idle</b> (SYNC), and acknowledge (ACK). These were positioned to maximize the Hamming distance between their bit patterns.|$|E
5000|$|The {{format of}} data on the tape is: 100 bytes with the value 0x16 (SYN, <b>Synchronous</b> <b>Idle),</b> one byte with the value 0x2A (*), the record {{identification}} number, the start address (two characters for the low byte of address, two characters for the high byte), the end address (in the same format), the actual data, one byte with the value 0x2F ("/" [...] character [...] ), a two-byte checksum, and two bytes with the value 0x04 (EOT, End Of Transmission).|$|E
50|$|Early {{synchronous}} protocols were byte-oriented protocols, where synchronization {{was maintained}} by transmitting {{a sequence of}} <b>synchronous</b> <b>idle</b> characters when the line was not actively transmitting data or transparently within a long transmission block. A certain number of idles were sent prior to each transmission. The IBM Binary Synchronous protocol (Bisync) is still in use, Other examples of byte-oriented protocols are IBM's Synchronous transmit-receive (STR), and Digital Data Communications Message Protocol (DDCMP) from Digital Equipment Corporation. Other computer manufacturers often offered similar protocols, differing mainly in small details.|$|E

