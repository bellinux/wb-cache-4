10000|10000|Public
5|$|Subtypes 2A and 2B: {{found in}} {{unfavorable}} widespread neuroblastoma, stages 3 and 4, with 11q loss and 17q gain without N-myc amplification (<b>subtype</b> 2A) or with N-myc amplification often together with 1p deletions and 17q gain (<b>subtype</b> 2B).|$|E
5|$|It is a tissue-specific <b>subtype</b> of {{troponin}} I, {{which in}} turn {{is a part of the}} troponin complex.|$|E
5|$|Primary {{progressive}} MS {{occurs in}} approximately 10–20% of individuals, with no remission {{after the initial}} symptoms. It is characterized by progression of disability from onset, with no, or only occasional and minor, remissions and improvements. The usual age of onset for the primary progressive <b>subtype</b> is later than of the relapsing-remitting <b>subtype.</b> It {{is similar to the}} age that secondary progressive usually begins in relapsing-remitting MS, around 40 years of age.|$|E
50|$|The ICHD-3 beta {{classification}} includes 6 main <b>subtypes</b> of migraine (ICHD-1: 7 main <b>subtypes,</b> ICHD-2: 6 main <b>subtypes),</b> most {{of which}} are further subdivided. Overall ICHD-3 beta distinguishes 29 migraine <b>subtypes.</b> The following table outlines the main <b>subtypes</b> and their ICHD-1, -2, -3 beta and ICD-10 codes.|$|R
40|$|The <b>subtyping</b> {{relation}} in Java exhibits self-similarity. The self-similarity in Java <b>subtyping</b> {{is interesting}} and intricate {{due to the}} existence of wildcard types and, accordingly, the existence of three <b>subtyping</b> rules for generic types: covariant <b>subtyping,</b> contravariant <b>subtyping</b> and invariant <b>subtyping.</b> Supporting bounded type variables also adds to the complexity of the <b>subtyping</b> relation in Java and in other generic nominally-typed OO languages such as C# and Scala. In this paper we explore defining an operad to model the construction of the <b>subtyping</b> relation in Java and in similar generic nominally-typed OO programming languages. Operads, from category theory, are frequently used to model self-similar phenomena. The Java <b>subtyping</b> operad, we hope, will shed more light on understanding the type systems of generic nominally-typed OO languages. Comment: 13 page...|$|R
40|$|<b>Subtyping</b> is {{a central}} notion in {{object-oriented}} programming. In this paper we investigate how the coalgebraic semantics of objects accounts for <b>subtyping.</b> We show that different characterisations of so-called behavioural <b>subtyping</b> {{found in the literature}} can conveniently be expressed in coalgebraic terms. We define <b>subtyping</b> between coalgebras and <b>subtyping</b> between coalgebraic specifications, and show that the latter is sound and complete w. r. t. the former. We also illustrate the subtle difference between the notions of <b>subtyping</b> and refinement...|$|R
5|$|<b>Subtype</b> 1: {{favorable}} neuroblastoma with near triploidy and a {{predominance of}} numerical gains and losses, mostly representing non-metastatic NB stages 1, 2 and 4S.|$|E
5|$|The {{expected}} future {{course of}} the disease depends on the <b>subtype</b> of the disease; the individual's sex, age, and initial symptoms; {{and the degree of}} disability the person has. Female sex, relapsing-remitting <b>subtype,</b> optic neuritis or sensory symptoms at onset, few attacks in the initial years and especially early age at onset, are associated with a better course.|$|E
5|$|The {{most common}} initial {{course of the}} disease is the relapsing-remitting <b>subtype,</b> which is {{characterized}} by unpredictable attacks (relapses) followed by periods of relative remission with no new signs of disease activity. After some years, {{many of the people}} who have this <b>subtype</b> begin to experience neurologic decline without acute relapses. When this happens it is called secondary progressive multiple sclerosis. Other, less common, courses of the disease are the primary progressive (decline from the beginning without attacks) and the progressive-relapsing (steady neurologic decline and superimposed attacks). Different therapies are used for patients experiencing acute attacks, for patients who have the relapsing-remitting <b>subtype,</b> for patients who have the progressive subtypes, for patients without a diagnosis of MS who have a demyelinating event, and for managing the various consequences of MS.|$|E
40|$|Mitchell {{defined and}} axiomatized a <b>subtyping</b> {{relationship}} (also known as containment, coercibility, or subsumption) over {{the types of}} System F (with "→" and "∀"). This <b>subtyping</b> relationship is quite simple and does not involve bounded quantification. Tiuryn and Urzyczyn quite recently proved this <b>subtyping</b> relationship to be undecidable. This paper supplies a new undecidability proof for this <b>subtyping</b> relationship. First, a new syntax-directed axiomatization of the <b>subtyping</b> relationship is defined. Then, this axiomatization is used to prove a reduction from the undecidable problem of semi-unification to <b>subtyping.</b> The undecidability of <b>subtyping</b> implies the undecidability of type checking for System F extended with Mitchell's <b>subtyping,</b> also known as "F plus eta". National Science Foundation (CCR- 9113196, CCR- 9417382...|$|R
40|$|Coercive <b>subtyping</b> is {{a useful}} and {{powerful}} framework of <b>subtyping</b> for type theories. The key idea of coercive <b>subtyping</b> is <b>subtyping</b> as abbreviation. In this paper, we give a new and adequate formulation of T[C], the system that extends a type theory T with coercive <b>subtyping</b> based on a set C of basic <b>subtyping</b> judgements, and show that coercive <b>subtyping</b> is a conservative extension and, in a more general sense, a definitional extension. We introduce an intermediate system, the star-calculus T[C]^@?, in which the positions that require coercion insertions are marked, and show that T[C]^@? is a conservative extension of T and that T[C]^@? is equivalent to T[C]. This makes clear {{what we mean by}} coercive <b>subtyping</b> being a conservative extension, on the one hand, and amends a technical problem that has led to a gap in the earlier conservativity proof, on the other. We also compare coercive <b>subtyping</b> with the 'ordinary' notion of <b>subtyping</b> - subsumptive <b>subtyping,</b> and show that the former is adequate for type theories with canonical objects while the latter is not. An improved implementation of coercive <b>subtyping</b> is done in the proof assistant Plastic...|$|R
40|$|Abstract <b>Subtyping</b> is {{a central}} notion in {{object-oriented}} programming. In this paper we investigate how the coalgebraic semantics of objects accounts for <b>subtyping.</b> We show that different characterisations of so-called behavioural <b>subtyping</b> {{found in the literature}} can conveniently be expressed in coalgebraic terms. We define <b>subtyping</b> between coalgebras and <b>subtyping</b> between coalgebraic specifications, and show that the latter is sound and complete w. r. t. the former. We also illustrate the subtle difference between the notions of <b>subtyping</b> and refinement. 1 Introduction <b>Subtyping</b> is one of the famous buzzwords in object-oriented (OO) programming. However, the precise meaning of <b>subtyping,</b> and more in particular the question whether <b>subtyping</b> is the same as inheritance, {{has been the subject of}} a lot of debate (more on that in Section 2). Given that the notion of (terminal) coalgebra can be used to describe the semantics of objects [Rei 95], an obvious question to ask is how this semantics accounts for <b>subtyping.</b> We will show that the coalgebraic view of objects provides a clean semantics for so-called behavioural <b>subtyping...</b>|$|R
5|$|An infant with an anxious-avoidant {{pattern of}} {{attachment}} will avoid or ignore the caregiver—showing little emotion when the caregiver departs or returns. The infant will not explore very much {{regardless of who}} is there. Infants classified as anxious-avoidant (A) represented a puzzle in the early 1970s. They did not exhibit distress on separation, and either ignored the caregiver on their return (A1 <b>subtype)</b> or showed some tendency to approach together with some tendency to ignore or {{turn away from the}} caregiver (A2 <b>subtype).</b> Ainsworth and Bell theorized that the apparently unruffled behaviour of the avoidant infants was in fact a mask for distress, a hypothesis later evidenced through studies of the heart-rate of avoidant infants.|$|E
5|$|Napkin {{psoriasis}} is a <b>subtype</b> of psoriasis {{common in}} infants characterized by red papules with silver {{scale in the}} diaper area that may extend to the torso or limbs. Napkin psoriasis is often misdiagnosed as napkin dermatitis (diaper rash).|$|E
5|$|<b>Subtype</b> classifications– such as {{catatonic}} and {{paranoid schizophrenia}} – are removed. These were retained in previous revisions largely {{for reasons of}} tradition, but had subsequently proved to be of little worth.|$|E
40|$|Structural <b>subtyping</b> {{is popular}} in {{research}} languages, but all mainstream object-oriented languages use nominal <b>subtyping.</b> Since languages with structural <b>subtyping</b> {{are not in}} widespread use, the empirical questions of whether and how structural <b>subtyping</b> is useful have thus far remained unanswered. This study aims to provide answers to these questions. We identified several criteria that are indicators that nominally typed programs could benefit from structural <b>subtyping,</b> and performed automated and manual analyses of open-source Java programs based on these criteria. Our results suggest that these programs could indeed be improved {{with the addition of}} structural <b>subtyping.</b> We hope this study will Structural <b>subtyping</b> is popular in the research community and is used in languages such as O’Caml [15], PolyToil [6], Moby [11], Strongtalk [5], and a number of type systems and calculi (e. g., [7, 1]). In the research community, many believe that structural <b>subtyping</b> is beneficial and is superior to nominal <b>subtyping.</b> But, structural <b>subtyping</b> is not used in any mainstream object-oriented programmin...|$|R
40|$|To {{investigate}} {{differences in}} pathogenesis, diagnosis and resistance pathways between HIV- 1 <b>subtypes,</b> an accurate <b>subtyping</b> tool for large datasets is needed. We aimed {{to evaluate the}} performance of automated <b>subtyping</b> tools to classify the different <b>subtypes</b> and circulating recombinant forms using pol, the most sequenced region in clinical practice. We also present the upgraded version 3 of the Rega HIV <b>subtyping</b> tool (REGAv 3). status: publishe...|$|R
40|$|Mitchell de ned and axiomatized a <b>subtyping</b> {{relationship}} (also {{known as}} containment, coercibility, orsubsumption) over {{the types of}} System F (with " and"). This <b>subtyping</b> relationship is quite simple and does not involve bounded quanti cation. Tiuryn and Urzyczyn quite recently proved this <b>subtyping</b> relationship to be undecidable. This paper supplies a new undecidability proof for this <b>subtyping</b> relationship. First, a new syntax-directed axiomatization of the <b>subtyping</b> relationship is dened. Then, this axiomatization is used to prove a reduction from the undecidable problem of semi-uni cation to <b>subtyping.</b> The undecidability ofsubtyping implies the undecidability of type checking for System F extended with Mitchell's <b>subtyping,</b> also known as plus eta"...|$|R
5|$|The genetic {{mutations}} most {{commonly associated with}} endometrioid adenocarcinoma are in the genes PTEN, a tumor suppressor; PIK3CA, a kinase; KRAS, a GTPase that functions in signal transduction; and CTNNB1, involved in adhesion and cell signaling. The CTNNB1 (beta-catenin) gene is most commonly mutated in the squamous <b>subtype</b> of endometrioid adenocarcinoma.|$|E
5|$|The morphologic subtypes of AML {{also include}} rare types not {{included}} in the FAB system, such as acute basophilic leukemia, which was proposed as a ninth <b>subtype,</b> M8, in 1999.|$|E
5|$|A {{number of}} subtypes of Guillain–Barré {{syndrome}} are recognized. Despite this, {{many people have}} overlapping symptoms that can make the classification difficult in individual cases. All types have partial forms. For instance, some people experience only isolated eye-movement or coordination problems; these {{are thought to be}} a <b>subtype</b> of Miller Fisher syndrome and have similar antiganglioside antibody patterns.|$|E
40|$|Coercive <b>subtyping</b> is {{a general}} {{approach}} to <b>subtyping,</b> inheritance and abbreviation in dependent type theories. A vital requirement for coercive <b>subtyping</b> is that of coherence which essentially says that coercions between any two types must be unique. Another important task for coercive <b>subtyping</b> is to prove the admissibility or elimination of transitivity and substitution. In this paper, we propose and study the notion of Weak Transitivity, consider suitable <b>subtyping</b> rules for certain parameterised inductive types and prove its coherence and the admissibility of substitution and weak transitivity in the coercive <b>subtyping</b> framework...|$|R
40|$|Escherichia coli O 157 (n = 376) from 41 cattle farms were <b>subtyped</b> using pulsed field gel {{electrophoresis}} of endonuclease cleaved chromosomal DNA. Cleavage with XbaI resulted in 81 <b>subtypes.</b> Fifty-one isolates from <b>subtypes</b> found {{in more than}} one herd, or in herds on multiple sample collection dates were compared using the endonuclease NotI, resulting in 23 additional <b>subtypes.</b> Up to 11 XbaI <b>subtypes</b> were found per farm with up to 7 subtypes/farm identified from a single date. Indistinguishable <b>subtypes</b> (both XbaI and NotI) were found to persist on 4 farms for 6 - 24 months. Five <b>subtypes</b> were found on more than one farm separated by up to 640 km. Dairy farms where cattle had moved onto the farm had a similar number of <b>subtypes</b> as farms with no movement of cattle, and feedlots had more <b>subtypes</b> than dairy farms. These data indicate that there is a mechanism for multiple herd exposure to specific <b>subtypes,</b> there are multiple sources of exposure for cattle on farms, and on-farm reservoirs other than cattle may exist...|$|R
40|$|Nominal <b>subtyping</b> (or {{user-defined}} <b>subtyping)</b> {{and structural}} <b>subtyping</b> each {{have their own}} strengths and weaknesses. Nominal <b>subtyping</b> allows programmers to explicitly express design intent, and, when types are associated with run time tags, enables runtime “type ” tests (e. g., downcasts) and external/multimethod dispatch. On the other hand, structural <b>subtyping</b> is flexible and compositional, allowing unanticipated reuse. To date, nearly all objectoriented languages fully support only one <b>subtyping</b> paradigm or the other. In this paper, we describe a core calculus for a language that combines the key aspects of nominal and structural <b>subtyping</b> in a unified framework. Our goal is to combine the flexibility of structural <b>subtyping</b> while still allowing static typechecking of external methods. We prove type safety for this language and illustrate its practical utility through examples that are not easily expressed in other languages. Our work provides a clean foundation {{for the design of}} future languages that enjoy the benefits of both nominal and structural <b>subtyping.</b> 1...|$|R
5|$|An {{effort to}} {{recreate}} the 1918 flu strain (a <b>subtype</b> of avian strain H1N1) was a collaboration among the Armed Forces Institute of Pathology, the USDA ARS Southeast Poultry Research Laboratory and Mount Sinai School of Medicine in New York City. The effort resulted in the announcement (on 5 October 2005) that the group had successfully determined the virus's genetic sequence, using historic tissue samples recovered by pathologist Johan Hultin from a female flu victim buried in the Alaskan permafrost and samples preserved from American soldiers.|$|E
5|$|Canadian {{neurologist}} C. Miller Fisher {{described the}} variant {{that bears his}} name in 1956. British neurologist Edwin Bickerstaff, based in Birmingham, described the brainstem encephalitis type in 1951 with Philip Cloake, and made further contributions with another paper in 1957. Guillain had reported on some of these features prior to their full description in 1938. Further subtypes have been described since then, such as the form featuring pure ataxia and the type causing pharyngeal-cervical-brachial weakness. The axonal <b>subtype</b> was first described in the 1990s.|$|E
5|$|LEMS {{may also}} be {{associated}} with autoimmune diseases, such as hypothyroidism (an underactive thyroid gland) or diabetes mellitus type 1. Myasthenia gravis, too, may happen {{in the presence of}} tumors (thymoma, a tumor of the thymus in the chest); people with MG without a tumor and people with LEMS without a tumor have similar genetic variations that seem to predispose them to these diseases. HLA-DR3-B8 (an HLA <b>subtype),</b> in particular, seems to predispose to LEMS.|$|E
40|$|<b>Subtyping</b> {{relations}} for object-oriented formalisms describe relationships between super- and subclasses which satisfy the substitutability requirement imposed on types and their <b>subtypes.</b> Behavioural <b>subtyping</b> {{is concerned with}} <b>subtypes</b> for active classes with an explicit dynamic behaviour, specifiable for instance by object-oriented formal methods combining state-based with behavioural formalisms. In thi...|$|R
40|$|International audienceWe propose an {{integration}} of structural <b>subtyping</b> with boolean connectives and semantic <b>subtyping</b> {{to define a}} Java-like programming language that exploits the benefits of both techniques. Semantic <b>subtyping</b> is an approach to defining <b>subtyping</b> relation based on set-theoretic models, rather than syntactic rules. On the one hand, this approach involves some non trivial mathematical machinery in the background. On the other hand, final users of the language need not know this machinery and the resulting <b>subtyping</b> relation is very powerful and intuitive. While semantic <b>subtyping</b> is naturally linked to the structural one, we show how the framework can also accommodate the nominal <b>subtyping.</b> Several examples show the expressivity and the practical advantages of our proposal...|$|R
40|$|Abstract. Structural <b>subtyping</b> {{is popular}} in {{research}} languages, but all mainstream object-oriented languages use nominal <b>subtyping.</b> Since languages with structural <b>subtyping</b> {{are not in}} widespread use, the empirical questions of whether and how structural <b>subtyping</b> is useful have thus far remained unanswered. This study aims to provide answers to these questions. We identified several criteria that are indicators that nominally typed programs could benefit from structural <b>subtyping,</b> and performed automated and manual analyses of open-source Java programs based on these criteria. Our results suggest that these programs could indeed be improved {{with the addition of}} structural <b>subtyping.</b> We hope this study will provide guidance for language designers who are considering use of this <b>subtyping</b> discipline. ...|$|R
5|$|MS usually {{appears in}} adults {{in their late}} twenties or early thirties but it can rarely start in {{childhood}} and after 50 years of age. The primary progressive <b>subtype</b> {{is more common in}} people in their fifties. Similar to many autoimmune disorders, the disease is more common in women, and the trend may be increasing. As of 2008, globally it is about two times more common in women than in men. In children, it is even more common in females than males, while in people over fifty, it affects males and females almost equally.|$|E
5|$|Marrow {{or blood}} is {{examined}} under light microscopy, {{as well as}} flow cytometry, to diagnose the presence of leukemia, to differentiate AML from other types of leukemia (e.g. acute lymphoblastic leukemia - ALL), and to classify the <b>subtype</b> of disease. A sample of marrow or blood is typically also tested for chromosomal abnormalities by routine cytogenetics or fluorescent in situ hybridization. Genetic studies may also be performed to look for specific mutations in genes such as FLT3, nucleophosmin, and KIT, which may influence {{the outcome of the}} disease.|$|E
5|$|Nearly 40% of lung cancers are adenocarcinoma, {{which usually}} {{originates}} in peripheral lung tissue. Although most cases of adenocarcinoma {{are associated with}} smoking, adenocarcinoma {{is also the most}} common form of lung cancer among people who have smoked fewer than 100 cigarettes in their lifetimes ("never-smokers") and ex-smokers with a modest smoking history. A <b>subtype</b> of adenocarcinoma, the bronchioloalveolar carcinoma, is more common in female never-smokers, and may have a better long-term survival.|$|E
40|$|In {{this paper}} we propose an {{integration}} of structural <b>subtyping</b> with boolean connectives and semantic <b>subtyping</b> to define a Java-like programming language that exploits the benefits of both techniques. Semantic <b>subtyping</b> is an approach for defining <b>subtyping</b> relation based on set-theoretic models, rather than syntactic rules. On the one hand, this approach involves some non trivial mathematical machinery in the background. On the other hand, final users of the language need not know this machinery and the resulting <b>subtyping</b> relation is very powerful and intuitive. While semantic <b>subtyping</b> is naturally linked to the structural one, we show how our framework can also accommodate the nominal <b>subtyping.</b> Several examples show the expressivity and the practical advantages of our proposal...|$|R
5|$|Four main {{histological}} <b>subtypes</b> are recognised, {{although some}} cancers may contain {{a combination of}} different <b>subtypes,</b> such as adenosquamous carcinoma. Rare <b>subtypes</b> include carcinoid tumors, bronchial gland carcinomas and sarcomatoid carcinomas.|$|R
40|$|AbstractSubtyping is {{a central}} notion in {{object-oriented}} programming. In this paper we investigate how the coalgebraic semantics of objects accounts for <b>subtyping.</b> We show that different characterisations of so-called behavioural <b>subtyping</b> {{found in the literature}} can conveniently be expressed in coalgebraic terms. We define <b>subtyping</b> between coalgebras and <b>subtyping</b> between coalgebraic specifications, and show that the latter is sound and complete w. r. t. the former. We also illustrate the subtle difference between the notions of <b>subtyping</b> and refinement...|$|R
