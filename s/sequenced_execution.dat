0|545|Public
40|$|We study {{several aspects}} of the {{behaviours}} produced by instruction <b>sequences</b> under <b>execution</b> {{in the setting of}} the algebraic theory of processes known as ACP. We use ACP to describe the behaviours produced by instruction <b>sequences</b> under <b>execution</b> and to describe two protocols implementing these behaviours in the case where the processing of instructions takes place remotely. We also show that all finite-state behaviours considered in ACP can be produced by instruction <b>sequences</b> under <b>execution.</b> Comment: 36 pages, consolidates material from arXiv: 0811. 0436 [cs. PL], arXiv: 0902. 2859 [cs. PL], and arXiv: 0905. 2257 [cs. PL]; abstract and introduction rewritten, examples and proofs adde...|$|R
40|$|Previous {{research}} has shown that when pigeons are required to peck each of two keys four times in any order for reinforcement, stereotyped response sequences develop, though they are not required by the task. However, despite this stereotypy, sequences are not automatized. They require sufficient attention that sequence performance is disrupted by a concurrent, delayed matching-to-sample task. In the present experiments, pigeons were required to execute response sequences and delayed matching-to-sample concurrently. Experiment 1 showed that the matching task disrupts sequence performance even when the matching sample stimuli {{do not have to be}} processed concurrently with <b>sequence</b> <b>execution.</b> The presence of sample stimuli during <b>sequence</b> <b>execution</b> seems to command attention even if the sample stimuli are also available for processing when sequences are not being executed. Experiment 2 used the directed forgetting technique to show that pigeons do seem able to ignore sample stimuli if they are given information that tells them they will not be required to remember those stimuli later. Together, the experiments suggest attentional mechanisms in the pigeon that are not quite involuntary...|$|R
40|$|Non-interleaving {{semantics}} of concurrent {{systems is}} often expressed using posets, where causally related events are ordered and concurrent events are unordered. Each causal poset describes a unique concurrent history {{which is a}} set of <b>executions,</b> expressed as <b>sequences</b> or step sequences, consistent with it. Moreover, such a poset captures all precedence-based invariant relationships between the events in the executions belonging to the concurrent history. Causal poset semantics underpins efficient verification techniques based on unfoldings of safe Petri nets and concurrent automata models. However, when one considers extensions of these standard models, such as nets with inhibitor arcs, concurrent histories become too intricate to be described solely in terms of causal posets. In this paper, we introduce and investigate generalised mutex order structures which can capture the invariant causal relationships in any concurrent history consisting of step <b>sequence</b> <b>executions.</b> Each such structure comprises two relations, viz. interleaving/mutex and weak causality. As our main result we prove that each generalised mutex order structure is the intersection of step <b>sequence</b> <b>executions</b> which are consistent with it...|$|R
40|$|The text {{shows how}} is {{possible}} the meaningful learning for apprentices trough {{the use of}} miscellaneous infovirtual sources and didactic <b>sequences</b> of planning, <b>execution</b> and assessment of the family subjects, psycholinguistics and psychometrics from the psychology program of the “Católica del Norte Fundación Universitaria”. The methodology used is qualitative, documentary and hermeneutic analysis. The main finding is the exploration {{and analysis of the}} planning didactic <b>sequences,</b> <b>execution</b> and assessment with each academic and administrative, logical, technological, methodological and didactic resources. Those resources were available for the subjects and are necessary to achieve a long-lasting, applied and important learning in the meaningful context for student...|$|R
40|$|This paper {{describes}} an experiment that aimed at examining {{the effects of}} extended practice in a sequential keypressing task. More specifically, predictions of three execution model were tested. First, the classic subprogram-retrieval model (Sternberg et al., 1978) assumes that an action sequence is programmed entirely before <b>sequence</b> <b>execution</b> while later, during <b>sequence</b> <b>execution,</b> instructions for the individual units in the sequence are retrieved. It predicts that keypressing rate decreases with sequence length but specific effects of practice are not predicted. The second mechanism, concurrent processing, assumes that various forms of information processing become increasingly concurrent {{in the course of}} practice. More specifically, it is proposed that with practice motor programming and retrieval of individual motor units from a short-term motor buffer concur with actual keypressing which, however, may delay execution of individual actions. Finally, associative motor unitization asserts that <b>sequence</b> <b>execution</b> comes to rely to an increasing degree on the automatic spread of activation among representations of the individual sequence units so that keypressing rate increases with position in the sequence. These and other predictions were verified with a two-choice sequence production task. One sequence contained four, the other two keypresses. The main results are: (a) a reduction with practice of the difference between the times to initiate long and short sequences, (b) practice had a larger effect on final keypresses than on earlier keypresses, and (c) practice had a larger effect on the final keypress of the long than that of the short sequence. An interesting additional effect was the occurrence of a pronounced `warming-up¿ effect for all interkey intervals at the second and third day of practice. The results were taken as evidence for the development of concurrent programming and concurrent retrieval while little support was observed for associative motor utinization and subprogram-retrieval...|$|R
40|$|Recently, {{a number}} of authors have {{advocated}} the introduction of gross motor tasks into research on sleep-related motor offline learning. Such tasks are often designed to be more complex than traditional key-pressing tasks. However, until now, little effort has been undertaken to scrutinize the role of task complexity in any systematic way. Therefore, the effect of task complexity on the consolidation of gross motor sequence memory was examined by our group {{in a series of}} three experiments. Criterion tasks always required participants to produce unrestrained arm movement sequences by successively fitting a small peg into target holes on a pegboard. The sequences always followed a certain spatial pattern in the horizontal plane. The targets were visualized prior to each transport movement on a computer screen. The tasks differed with respect to sequence length and structural complexity. In each experiment, half of the participants initially learned the task in the morning and were retested 12 h later following a wake retention interval. The other half of the subjects underwent practice in the evening and was retested 12 h later following a night of sleep. The dependent variables were the error rate and total <b>sequence</b> <b>execution</b> time (inverse to the <b>sequence</b> <b>execution</b> speed). Performance generally improved during acquisition. The error rate was always low and remained stable during retention. The <b>sequence</b> <b>execution</b> time significantly decreased again following sleep but not after waking when the sequence length was long and structural complexity was high. However, sleep-related offline improvements were absent when the sequence length was short or when subjects performed a highly regular movement pattern. It is assumed that the occurrence of sleep-related offline performance improvements in sequential motor tasks is associated with a sufficient amount of motor task complexity...|$|R
40|$|Compile-time code transformations which expose instruction-level {{parallelism}} (ILP) typically {{take into}} account the constraints imposed byallexecution scenarios in the program. However, there areaddi tional opportunities to increase ILP along some <b>execution</b> <b>sequences</b> if the constraints from alternative <b>execution</b> <b>sequences</b> can be ignored. Traditionally, pro le information has been used to identify important <b>execution</b> <b>sequences</b> for aggressive compiler optimization and scheduling. This paper presents a set of static program analysis heuristics used in the IMPACT compiler to identify <b>execution</b> <b>sequences</b> for aggressive optimization. We show that the static program analysis heuristics identify <b>execution</b> <b>sequences</b> without hazardous conditions that tend to prohibit compiler optimizations. As a result, the static program analysis approach often achieves optimization results comparable to pro le information in spite of its inferior branch prediction accuracies. This observation makes a strong case for using static program analysis with or without pro le information to facilitate aggressive compiler optimization and scheduling...|$|R
40|$|The {{behaviour}} {{produced by}} an instruction <b>sequence</b> under <b>execution</b> is a behaviour {{to be controlled}} by some execution environment: each step performed actuates the processing of an instruction by the execution environment and a reply returned at completion of the processing determines how the behaviour proceeds. The increasingly occurring case where the processing takes place remotely involves the generation of a stream of instructions to be processed and a remote execution unit that handles the processing of this stream of instructions. We use process algebra to describe the behaviours produced by instruction <b>sequences</b> under <b>execution</b> and to describe two protocols implementing these behaviours in the case of remote processing. We also show that all finite-state behaviours considered in process algebra can be produced by instruction <b>sequences</b> under <b>execution...</b>|$|R
40|$|Behavioral {{research}} produced many task-specific cognitive {{models that}} do not say much about the underlying information processing architecture. Such an architecture is badly needed to understand better how cognitive neuroscience can benefit from existing cognitive models. This problem is especially pertinent {{in the domain of}} sequential behavior where behavioral research suggests a diversity of cognitive processes, processing modes and representations. Inspired by decades of reaction time (RT) research with the Additive Factors Method, the Psychological Refractory Period paradigm, and the Discrete Sequence Production task, we propose the Cognitive framework for Sequential Motor Behavior (C-SMB). We argue that C-SMB accounts for cognitive models developed for a range of sequential motor tasks (like those proposed by Keele et al., 2003; Rosenbaum et al., 1983, 1986, 1995; Schmidt, 1975; Sternberg et al., 1978, 1988). C-SMB postulates that <b>sequence</b> <b>execution</b> can be controlled by a central processor using central-symbolic representations, and also by a motor processor using sequence-specific motor representations. On the basis of this framework we present a classification of the <b>sequence</b> <b>execution</b> strategies that helps researchers to understand better the cognitive and neural underpinnings of serial movement behavio...|$|R
50|$|NGOMSL is a {{structured}} natural language notation for representing GOMS models and a procedure for constructing them. This program form provides predictions of operator <b>sequences,</b> <b>execution</b> {{time and time}} to learn methods.An analyst constructs an NGOMSL model by performing a top-down, breadth-first expansion of the user's top-level goals into methods, until the methods contain only primitiveoperators, typically keystroke-level operators. This model explicitly represents the goal structure just like the CMN-GOMS and can so represent high-level goals. Shown below is a simple example.|$|R
5|$|When players deal enough {{damage to}} an enemy, they can {{activate}} an <b>execution</b> <b>sequence.</b> Once the <b>execution</b> <b>sequence</b> has been initiated, enemies {{involved in the}} execution are highlighted automatically with colors by the game, and players can perform a series of quick time events by pressing the appropriate buttons. These <b>execution</b> <b>sequences</b> serve to grant additional resources to players, depending on how well the execution is performed. At any time prior to initiating an execution, the player can select one of four categories of executions to perform upon weakened enemies; the selected type of execution determines the type of resource that will be granted when an enemy is executed. Upon completing a successful <b>execution</b> <b>sequence,</b> players are granted the type of execution that was selected. There are four perks available for players. One boosts the player's damage {{for a short period}} after the execution; one refills the player's Focus bar; one allows players to regain lost health, and the last significantly boosts the amount of experience points received from the kill. These experience points can be used to purchase upgrades for various attributes, such as health, damage, or Focus bar capacity, and to unlock additional execution moves. The game still automatically completes and finishes these <b>execution</b> <b>sequences</b> when players fail to press the highlighted buttons, but provides a much smaller reward. Lining up two or more weakened enemies in close proximity allows the player to perform a double <b>execution</b> <b>sequence,</b> which greatly increases the reward granted.|$|R
30|$|The {{corresponding}} NuSMV <b>execution</b> <b>sequence</b> is as follows.|$|R
40|$|Nocturnal sleep {{effects on}} memory {{consolidation}} following gross motor sequence learning were examined using a complex arm movement task. This task required participants to produce non-regular spatial {{patterns in the}} horizontal plane by successively fitting a small peg into different target-holes on an electronic pegboard. The respective reaching movements typically differed in amplitude and direction. Targets were visualized prior to each transport movement on a computer screen. With this task we tested 18 subjects (22. 6 +/- 1. 9 years; 8 female) using a between-subjects design. Participants initially learned a 10 -element arm movement sequence either {{in the morning or}} in the evening. Performance was retested under free recall requirements 15 minutes post training, as well as 12 hrs and 24 hrs later. Thus each group was provided with one sleep-filled and one wake retention interval. Dependent variables were error rate (number of erroneous sequences) and average <b>sequence</b> <b>execution</b> time (correct <b>sequences</b> only). Performance improved during acquisition. Error rate remained stable across retention. <b>Sequence</b> <b>execution</b> time (inverse to execution speed) significantly decreased again during the sleep-filled retention intervals, but remained stable during the respective wake intervals. These results corroborate recent findings on sleep-related enhancement consolidation in ecological valid, complex gross motor tasks. At the same time they suggest this effect to be truly memory-based and independent from repeated access to extrinsic sequence information during retests...|$|R
30|$|The <b>sequence</b> of <b>execution</b> of the {{proposed}} PAZSD methodology, as shown in Fig.  1, is illustrated in step by step manner to eliminate the infeed problem as discussed in the previous section.|$|R
40|$|Abstract-The {{concept of}} a data {{flowgraph}} is formalized as a bipartite directed graph. Each <b>execution</b> <b>sequence</b> of a computer program has a corresponding data flowgraph which describes functionally {{what happens to the}} data if that <b>execution</b> <b>sequence</b> is followed. The data flowgraph gives information which is useful in analyzing parallel processing, test case preparation, error analysis, and program verification. An attack aircraft tactical system is used to illustrate how the concept of data flowgraphs is applied to analyze real-time systemrs. Index Terms-Bipartite graph, control complexity, data flowgraph, discrete systems, <b>execution</b> <b>sequence,</b> independence, parallel processes, program analysis. I...|$|R
5000|$|EXHIBITOR, which {{searches}} for <b>execution</b> <b>sequences</b> matching a given regular expression ...|$|R
50|$|Procedural {{cohesion}}: Procedural cohesion is when {{parts of}} a module are grouped because they always follow a certain <b>sequence</b> of <b>execution</b> (e.g. a function which checks file permissions and then opens the file).|$|R
40|$|Stepwise {{refinement}} of programs {{has proven to}} be a suitable method for developing parallel and distributed programs. We examine and compare a number of different notions of program refinement for Unity. Two of these notions are based on <b>execution</b> <b>sequences.</b> Refinement corresponds to the reduction of the set of <b>execution</b> <b>sequences,</b> i. e. reducing the amount of nondeterminism. The other refinement notions are based on Unity properties as introduced by Chandy and Misra. The Unity approach is to refine specifications. Although it has proven a suitable formalism for deriving algorithms, it seems less suitable for handling implementation details. Following Sanders and Singh, we formalize program refinement in the Unity framework as the preservation of Unity properties. We show that Unity properties are not powerful enough to characterize <b>execution</b> <b>sequences.</b> As a consequence, the notion of property-preserving refinement differs from the notion of reducing the set of <b>execution</b> <b>sequences.</b> Keyw [...] ...|$|R
5000|$|Sequencing Responsibilities: These {{refer to}} the <b>sequencing</b> of the <b>execution</b> of {{subordinate}} responsibilities.|$|R
30|$|For some service {{operation}}s, the SRPostCondition of {{an operation}} may happen to match (or be equivalent to) another’s SRPreCondition. In other words, the successful execution of some operations would enable certain subsequent operations dynamically by satisfying their precondition requirements. As {{a series of}} such operations are linked one another with precondition and postcondition matches, a sequenced operation chain can be composed in real-time. SCSR serves to seek such operation chains and provide assistances in scheduling their <b>sequenced</b> <b>executions.</b> Although this may happen over multiple clouds, we consider {{that it would be}} more reasonable for implementation in a single cloud. Hence, the scale of SCSR reasoning is restricted to that.|$|R
40|$|Abstract. The {{behaviour}} {{produced by}} an instruction <b>sequence</b> under <b>execution</b> is a behaviour {{to be controlled}} by some execution environment: each step performed actuates the processing of an instruction by the execution environment and a reply returned at completion of the processing determines how the behaviour proceeds. In this paper, we are concerned with the case where the processing takes place remotely. We describe a protocol to deal with the case where the behaviour produced by an instruction <b>sequence</b> under <b>execution</b> leads to the generation of a stream of instructions to be processed and a remote execution unit handles the processing of that stream of instructions...|$|R
40|$|Everyday {{activities}} such as typing or playing the piano require us to produce both a series of eye fixations, as well as corresponding manual responses. In order to understand how these eye and hand actions are coordinated with the internal perceptual, cognitive and motor processing, {{it is essential to}} establish whether the eye movements incur a processing cost. Current literature is divided on this issue. To examine the costs of eye movement, Experiment 1 involved twenty participants completing a simple <b>sequence</b> <b>execution</b> task where stimuli were presented either Concurrently across the screen, or Consecutively, one after the other, in the centre of the screen. Presentation times in the Consecutive condition were incrementally decreased from 600 ms to 450, 350 and 250 ms. If eye movements result in a processing cost then processing times in the Consecutive condition should be shorter than in the Concurrent condition. The results showed no decrease in the processing time for a given item that would indicate a cost when making eye movements. Experiment 2 involved nineteen participants completing the same <b>sequence</b> <b>execution</b> task, but limited the presentation times of each item to 350 and 450 ms for both presentation conditions. This was closer to the processing time for each item from the Consecutive condition of Experiment 1. Again, no difference in processing time was found. The results are therefore consistent with the hypothesis that eye movements do not contribute to the processing time required to complete choice response time tasks. The implications of the results for theories of stimulus execution are discussed...|$|R
40|$|International audienceIn {{industrial}} production, a changeover or a {{setup is}} a very complex operation to consider and the probability that something breaks on the production line immediately after a changeover is raised significantly. A number of studies about scheduling problems that take into consideration setup times have been presented recently. The problem presented in this paper consist in minimizing the number of setup considering that the jobs scheduled on several machines can be splitted. Firstly, we use a heuristic to find an initial feasible solution and then we apply a neighbourhood search to improve the initial solution. Solutions are represented as sets of assignments and <b>sequences,</b> <b>execution</b> times are then determined using a maximum flow algorithm...|$|R
5000|$|Now the set {{of initial}} {{segments}} of <b>execution</b> <b>sequences</b> of a given nondeterministic program , starting from a given state, will form a tree. The branching points will correspond to the choice points in the program. Since there are always only finitely many alternatives at each choice point, the branching factor of the tree is always finite. That is, the tree is finitary. Now König's lemma says that if every branch of a finitary tree is finite, then so is the tree itself. In the present case this means that if every <b>execution</b> <b>sequence</b> of [...] terminates, then there are only finitely many <b>execution</b> <b>sequences.</b> So if an output set of [...] is infinite, it must contain nonterminating computation.|$|R
40|$|The indexes of {{estimation}} of efficiency of insetting {{of money from}} point of creditor and sequence of estimation are considered in the article. It is suggested to use the <b>sequence</b> of <b>executions</b> {{for the protection of}} own money and their more rational in setting. ? ?????? ??????????? ?????????? ?????? ????????????? ??????????? ??????? ? ????? ?????? ????????? ? ?????????????????? ??????. ?????????? ???????????? ?????? ?????????????????? ???????? ??? ?????????? ??????????? ??????? ? ????? ????????????? ?? ???????????...|$|R
40|$|The Low-Energy Demonstration Accelerator (LEDA) {{injector}} [1] {{is designed}} to inject 75 -keV, 110 -mA, proton beams into the LEDA RFQ [2]. The injector operation has been automated to provide long term, high availability operation using the Experimental Physics and Industrial Control System (EPICS) [3]. Automated recovery from spark-downs demands reliable spark detection and <b>sequence</b> <b>execution</b> by the injector controller. Reliable computer control in the high-energy transient environment required transient suppression and isolation of hundreds of analog and binary data lines connecting the EPICS computer controller to the injector and it’s power supplies and diagnostics. A transient suppression design based on measured and modeled spark transient parameters provides robust injector operation. This paper describes the control system hardware and software design, implementation and operational performance. ...|$|R
5000|$|In {{concurrency}} control, path expressions are {{a mechanism}} for expressing permitted <b>sequences</b> of <b>execution.</b> For example, a path expression like [...] "" [...] might specify that either multiple simultaneous executions of [...] or a single execution of [...] but not both are allowed {{at any point in}} time.|$|R
30|$|Figure  1 {{presents}} {{an example of}} composite cloud services in the commonly used BPMN notations (Sherry 2012) for illustrating the SSP, where ‘+’ re{{presents an}} AND branch and ‘X’ indicates an XOR branch. In general, there are three types of execution dependencies among tasks within a composite cloud service: AND-block, XOR-block, and Sequence. An AND-block, between two ‘+’ symbols, consists of several paths where each of them must be executed and all the paths can be executed in parallel. An XOR-block, between two ‘X’ symbols, also contains a set of paths. However, each time {{only one of the}} paths will be executed, and which path to execute depends on the application status right before the XOR-block. The services on a path will be executed one-by-one serially, called the <b>Sequence</b> <b>execution</b> dependency.|$|R
40|$|Formal {{techniques}} {{have been widely}} applied {{in the design of}} real-time systems and have significantly helped detect design errors by checking real-time properties of the model. However, a model is only an approximation of its realization in terms of the issuing time of events. Therefore, a real-time property verified in the model can not always be directly transferred to the realization. In this paper, both the model and the realization are viewed as sets of timed state sequences. In this context, we first investigate the real-time property preservation between two neighbouring timed state <b>sequences</b> (<b>execution</b> traces of timed systems), and then extend the results to two "neighbouring" timed systems. The study of real-time property preservation gives insight in building a formal link between real-time properties satisfied in the model and those in the realization...|$|R
40|$|VisPro is a {{general-purpose}} {{visual language}} generation system, which {{can produce a}} wide range of diagrammatic visual programming languages (VPLs) based on Reserved Graph Grammar (RGG), a context sensitive graph grammar. This paper presents an approach to specify the semantic <b>execution</b> <b>sequence</b> of VPLs based on VisPro. In this approach, we use an ordering mechanism to facilitate the parsing formalism of Reserved Graph Grammar to determine semantic <b>execution</b> <b>sequence</b> of super-nodes in visual programs of the VPLs...|$|R
50|$|Threading {{allows a}} {{separate}} <b>sequence</b> of <b>execution</b> for each API call that can block. This can prevent the overall application from stalling {{while waiting for}} a resource. This has the benefit {{that none of the}} information {{about the state of the}} API call is lost while other activities take place.|$|R
40|$|The {{concept of}} a data {{flowgraph}} is formalized as a bipartite directed graph. Each <b>execution</b> <b>sequence</b> of a computer program has a corresponding data flowgraph which describes functionally {{what happens to the}} data if that <b>execution</b> <b>sequence</b> is followed. the data flowgraph gives information which is useful in analyzing parallel processing, test case preparation, error analysis, and program verification. An attach aircraft tactical system is used to illustrate how the concept of data flowgraphs is applied to analyze real-time systems...|$|R
5000|$|PROIV {{programs}} {{consist of}} declarative/non-procedural specifications {{that control the}} overall structure {{of the program and}} database access and that have an implicit <b>sequence</b> of <b>execution</b> (which PROIV programmers refer to as the timing cycle). Procedural subroutines can be added by the programmer; these are written in a 3GL-like language which PROIV calls [...] "Logic".|$|R
40|$|We {{describe}} a robot system that autonomously acquires skills through interaction with its environment. The robot learns to <b>sequence</b> the <b>execution</b> {{of a set}} of innate controllers to solve a task, extracts and retains components of that solution as portable skills, and then transfers those skills to reduce the time required to learn to solve a second task...|$|R
40|$|One of {{the largest}} {{problems}} for tokamak devices such as Kazakhstan Tokamak for Material Testing (KTM) is the operation scenarios' development and execution. Operation scenarios may be varied often, so a convenient hardware and software solution is required for scenario management and execution. Dozens of diagnostic and control subsystems with numerous configuration settings {{may be used in}} an experiment, so it is required to automate the subsystem configuration process to coordinate changes of the related settings and to prevent errors. Most of the diagnostic and control subsystems software at KTM was unified using an extra software layer, describing the hardware abstraction interface. The experiment sequence was described using a command language. The whole infrastructure was brought together by a universal communication protocol supporting various media, including Ethernet and serial links. The operation <b>sequence</b> <b>execution</b> infrastructure was used at KTM to carry out plasma experiments...|$|R
40|$|We {{examine the}} {{expressive}} power of Unity properties {{in relation to}} <b>execution</b> <b>sequences</b> of Unity programs. One might expect that if two programs have the same unless and leadsto properties, then {{they have the same}} <b>execution</b> <b>sequences.</b> We show that this is not true. We examine whether this difference vanishes if we adopt a stronger notion of fairness, or use ensures properties instead of leadsto properties (possibly adopting a stronger fairness notion also). We show by a simple example that both approaches are not successful. Hence, properties are not expressive enough to characterize <b>execution</b> <b>sequences,</b> and {{it is not clear what}} execution model corresponds to Unity properties. As a consequence, the notion of property preserving program refinement differs from the notion of decreasing nondeterminism. Keywords Stepwise refinement, Unity, program refinement, program specification. 1 Preliminaries The Unity framework, introduced by Chandy and Misra in [2], consists of a programming langua [...] ...|$|R
