348|7502|Public
5|$|Date: {{period and}} {{year of the}} construction; The column entries <b>sort</b> <b>by</b> year. If only a period is known, they <b>sort</b> <b>by</b> the start year of that period.|$|E
5|$|Date: {{period and}} year; The column entries <b>sort</b> <b>by</b> year. If only a period is known, they <b>sort</b> <b>by</b> the start year of that period.|$|E
5|$|Material and technique: wood/bronze/..., lacquered/colored/...; The column entries <b>sort</b> <b>by</b> {{the main}} {{material}} (stone/clay/wood/lacquer/bronze).|$|E
50|$|The {{connected}} {{problems of}} signed <b>sorting</b> <b>by</b> reversals and <b>sorting</b> <b>by</b> reversals were also studied more recently. Whereas efficient exact algorithms {{have been found}} for the signed <b>sorting</b> <b>by</b> reversals, the problem of <b>sorting</b> <b>by</b> reversals has been proven to be hard even to approximate to within certain constant factor, and also proven to be approximable in polynomial time to within the approximation factor 1.375.|$|R
5000|$|... (When <b>sorted</b> <b>by</b> years won or lost, {{the table}} is <b>sorted</b> <b>by</b> the date of each team's first win) ...|$|R
50|$|Standard column {{families}} are column containers <b>sorted</b> <b>by</b> their names can be referenced and <b>sorted</b> <b>by</b> their row key.|$|R
5|$|Height: {{height in}} cm; The column entries <b>sort</b> <b>by</b> the largest height if an entry {{is a group}} of statues.|$|E
5|$|This is {{the full}} {{table of the}} medal count of the 1896 Summer Olympics, based on the medal count of the International Olympic Committee (IOC). These rankings <b>sort</b> <b>by</b> the number of gold medals earned by a country. The number of silver medals is taken into {{consideration}} next and then the number of bronze medals. If, after the above, countries are still tied, equal ranking is given and they are listed alphabetically. This information {{is provided by the}} IOC, however the IOC does not recognise or endorse any ranking system.|$|E
25|$|This {{includes}} only canals {{that are}} currently open or being restored and are at least partly in England. See also Abandoned Canals. Click on the diamond to <b>sort</b> <b>by</b> any column.|$|E
5000|$|When <b>sorted</b> <b>by</b> years won or lost, {{the table}} is <b>sorted</b> <b>by</b> the date of each team's first {{placement}} ...|$|R
5000|$|... (When <b>sorted</b> <b>by</b> years won or lost, {{the table}} is <b>sorted</b> <b>by</b> the date of each team's most recent win) ...|$|R
50|$|When <b>sorted</b> <b>by</b> year {{of winning}} or losing final(s), {{the table is}} <b>sorted</b> <b>by</b> the year of each club's first final.|$|R
25|$|Within each suit, {{the stable}} sort {{preserves}} the ordering by rank {{that was already}} done. This idea can be extended to any number of keys, and is leveraged by radix sort. The same effect can be achieved with an unstable <b>sort</b> <b>by</b> using a lexicographic key comparison, which, e.g., compares first by suit, and then compares by rank if the suits are the same.|$|E
25|$|The {{following}} code {{defines a}} class named Person. In addition to initialize, the usual constructor {{to create new}} objects, it has two methods: one to override the <=> comparison operator (so Array#sort can <b>sort</b> <b>by</b> age) {{and the other to}} override the to_s method (so Kernel#puts can format its output). Here, attr_reader is an example of metaprogramming in Ruby: attr_accessor defines getter and setter methods of instance variables, but attr_reader only getter methods. The last evaluated statement in a method is its return value, allowing the omission of an explicit return statement.|$|E
25|$|Shellsort {{was invented}} by Donald Shell in 1959. It {{improves}} upon bubble sort and insertion <b>sort</b> <b>by</b> moving out of order elements more than one position at a time. The concept behind Shellsort is that both of these algorithms perform in O(kn) time, where k is the greatest distance between two out-of-place elements. This means that generally, they perform in O(n2), but for data that is mostly sorted, {{with only a few}} elements out of place, they perform faster. So, by first sorting elements far away, and progressively shrinking the gap between the elements to sort, the final sort computes much faster. One implementation can be described as arranging the data sequence in a two-dimensional array and then sorting the columns of the array using insertion sort.|$|E
5000|$|When <b>sorted</b> <b>by</b> years won or lost, {{the table}} is <b>sorted</b> <b>by</b> the year of each team's most recent win or loss.|$|R
50|$|Only players {{participated in}} {{official}} matches are listed.Players <b>sorted</b> <b>by</b> numbers, players joined {{during the season}} <b>sorted</b> <b>by</b> the time they joined the team.|$|R
50|$|This {{is a list}} of African {{countries}} and dependent territories <b>sorted</b> <b>by</b> motorways' total length, which is <b>sorted</b> <b>by</b> kilometers built in the 21st century.|$|R
25|$|By equivocating certain columns with {{parameters}} to be estimated, Plackett–Burmans {{can also}} be used to construct mixed categorical and numerical designs, with interactions or high order effects, requiring no more than 4 runs more than the number of model parameters to be estimated. <b>Sort</b> <b>by</b> a-1 columns assigned to categorical variable A and following columns, where A=1+int(a'i /(max(i)+0.00001)), i = row number and a = A's number of values. Next sort on columns assigned to any other categorical variables and following columns, repeating as needed. Such designs, if large, may otherwise be incomputable by standard search techniques like D-optimality. For example, 13 variables averaging 3 values each could have well over a million combinations to search. To estimate the 105 parameters in a quadratic model of 13 variables, one must formally exclude from consideration or compute |X'X| for well over 106C102, i.e. 313C105, or roughly 10484 matrices.|$|E
500|$|Date: {{period and}} year; the column entries <b>sort</b> <b>by</b> year. If the entry {{can only be}} dated to a time-period, they <b>sort</b> <b>by</b> the start year of that period ...|$|E
500|$|Date: {{period and}} {{year of the}} item; column entries <b>sort</b> <b>by</b> year or start year of a period if only a period is known ...|$|E
40|$|AbstractWe {{prove that}} <b>sorting</b> <b>by</b> {{reciprocal}} translocations {{can be done}} in O(n 3 / 2 log(n)) for an n-gene genome. Our algorithm is an adaptation of the algorithm of Tannier, Bergeron and Sagot for <b>sorting</b> <b>by</b> reversals. This improves over the O(n 3) algorithm for <b>sorting</b> <b>by</b> reciprocal translocations given by Bergeron, Mixtacki and Stoye (2006) [4]...|$|R
5000|$|Optionally, {{they can}} be listed <b>sorted</b> <b>by</b> either the imagename, the PID or the amount of {{computer}} usage. But by default, they are <b>sorted</b> <b>by</b> chronological order: ...|$|R
50|$|Incomplete list, <b>sorted</b> <b>by</b> {{number of}} employees, {{but can be}} <b>sorted</b> <b>by</b> each column. Area use is from county records. Dates are {{at the start of}} 2016 unless {{otherwise}} noted.|$|R
500|$|Construction: {{architecture}} and general remarks including {{the number of}} stories (outside) and floors (inside); the column entries <b>sort</b> <b>by</b> the type of structure (donjon, yagura, watariyagura) ...|$|E
500|$|Format: {{principal}} type, {{technique and}} dimensions; The column entries <b>sort</b> <b>by</b> the main type: scroll (includes handscrolls and letters), book (includes albums, ordinary bound books and books bound by fukuro-toji) and other (includes hanging scrolls) ...|$|E
500|$|Format: {{principal}} type, {{technique and}} dimensions; The column entries <b>sort</b> <b>by</b> the main type: scroll (includes handscrolls and letters), collection (sets of items) and other (includes textiles, hanging scrolls, stone inscriptions and folding books 帖) ...|$|E
25|$|This {{is a list}} {{of ships}} of the Pawtuxet class. The list is <b>sorted</b> <b>by</b> launch date; however the table {{includes}} sort buttons so the list can be <b>sorted</b> <b>by</b> any column.|$|R
40|$|The {{understanding}} of genome rearrangements {{is an important}} endeavor in comparative genomics. A major computational problem in this field is finding a shortest sequence of genome rearrangements that transforms, or sorts, one genome into another. In this paper we focus on sorting a multi-chromosomal genome by translocations. We reveal new relationships between this problem and the well studied problem of <b>sorting</b> <b>by</b> reversals. Based on these relationships, we develop two new algorithms for <b>sorting</b> <b>by</b> reciprocal translocations, which mimic known algorithms for <b>sorting</b> <b>by</b> reversals: a score-based method building on Bergeron’s algorithm, and a recursive procedure similar to the Berman-Hannenhalli method. Though their proofs are more involved, our procedures for reciprocal translocations match {{the complexities of the}} original ones for reversals. Key words: genome rearrangement, <b>sorting</b> <b>by</b> translocations, <b>sorting</b> <b>by</b> reversals. 1...|$|R
50|$|<b>Sorted</b> <b>by</b> relevance.|$|R
500|$|Format: {{principal}} type, {{technique and}} dimensions; the column entries <b>sort</b> <b>by</b> the main type: scroll (includes handscrolls and letters), books (includes albums, ordinary bound books and books bound by fukuro-toji) and other (includes hanging scrolls) ...|$|E
500|$|Pose: standing/seated Amida Nyorai/Yakushi Nyorai/...; The column entries <b>sort</b> <b>by</b> {{the name}} of the {{principal}} image or as [...] "set" [...] in the case of sets of sculptures that don't fall under a common group name.|$|E
500|$|Radix sort is a sorting {{algorithm}} {{that works}} for larger keys than pigeonhole sort or counting <b>sort</b> <b>by</b> performing multiple passes over the data. Each pass sorts the input using {{only part of the}} keys, by using a different sorting algorithm (such as pigeonhole sort or counting sort) that is suited only for small keys. To break the keys into parts, the radix sort algorithm computes the positional notation for each key, ...|$|E
50|$|<b>Sorted</b> <b>by</b> {{individual}} gold medals.|$|R
40|$|Researchers and {{educators}} often {{argue that a}} student's peers strongly influence his or her educational outcomes. If so, an unequal distribution of advantaged and disadvantaged students across schools in a community will leave many students doubly disadvantaged and amplify existing inequalities. We explore {{the relationship between the}} degree of <b>sorting</b> <b>by</b> socioeconomic characteristics, ethnicity and language across schools within a community and inequality as measured by the variance of standardized high school exam scores within the community. Simple cross- sectional estimates suggest a direct relationship between <b>sorting</b> <b>by</b> ethnicity and the variance of test scores, but no direct relationship between <b>sorting</b> <b>by</b> income or primary parent's education and the variance of test scores. We then implement a fixed effects estimator to control for endogeneity in the extent of sorting: the results indicate that <b>sorting</b> <b>by</b> ethnicity does not affect the variance of test scores, but that <b>sorting</b> <b>by</b> home language and primary parent's education does. social interactions, peer effects, sorting, classroom effects...|$|R
25|$|Notable alumni <b>sorted</b> <b>by</b> {{graduation}} year.|$|R
