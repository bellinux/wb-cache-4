7|10000|Public
50|$|After {{traversing}} SDH paths, {{the traffic}} is processed in the reverse fashion: virtual concatenation path processing {{to recreate the}} original synchronous byte stream, followed by decapsulation to converting the <b>synchronous</b> <b>data</b> <b>stream</b> to an asynchronous stream of Ethernet frames.|$|E
50|$|In {{order to}} {{synchronise}} to the <b>synchronous</b> <b>data</b> <b>stream</b> the encoded characters {{can be sent}} erect or inverted. Inverted means that the 0 and 1 are swapped, whereas erect means that the character is sent without modification. There are two possible channel arrangements depending on the latency of the circuit. For normal latency the cycle consists of four characters, and if the channel has extra long latency it has eight characters. Channel A (or C) has one character inverted followed by either three or seven erect characters. Channel B (or D) has one character erect followed by either three or seven inverted characters.|$|E
40|$|This paper {{presents}} signal synchronization aspects in a large, distributed, multichannel RPC Muon Trigger {{system in}} the CMS experiment. The paper is an introduction to normalized structure analysis methods of such systems. The method introduces a general model of the system, presented in a form {{of a network of}} distributed, synchronous, pipeline processes. The model is based on a definition of a <b>synchronous</b> <b>data</b> <b>stream</b> and its formal, fundamental properties. Theoretical considerations are supported by a practical application of synchronous streams and processes management. The following processes were modeled and implemented in hardware: window synchronization, de-randomization, data concentration and generation of test pulses. There are presented chosen results of the model application in the CMS experiment at the LHC accelerator...|$|E
5000|$|The OBDH {{receives}} the TCs as a <b>synchronous</b> PCM <b>data</b> <b>stream</b> from the TT&C ...|$|R
40|$|In {{this paper}} we {{describe}} Nuance, a software application for recording <b>synchronous</b> <b>data</b> <b>streams</b> from modern musical systems that involve audio and gesture signals. Nuance currently supports recording {{data from a}} number of input sources including real-time audio, and any sensor system, musical interface, or instrument which outputs serial, Open Sound Control (OSC), or MIDI. Nuance is unique in that it is a highly customizable to the user and unknown musical systems for music information retrieval (MIR), allowing virtually any multimodal input to be recorded with minimal effort. Targeted toward musicians working with MIR researchers, Nuance considerably minimizes the set-up and running times of MIR data acquisition scenarios. Nuance attempts to eliminate most of the software programming required to gather data from custom multimodal systems, and provides an easy drag-and-drop user interface for setting up, configuring, and recording <b>synchronous</b> multimodal <b>data</b> <b>streams.</b> 1...|$|R
40|$|WAOA Session 7 LNCS v. 5893 is Proceedings of the 7 th International Workshop, WAOA 2009 In an {{asynchronous}} <b>data</b> <b>stream,</b> the <b>data</b> items {{may be out}} {{of order}} with respect to their original timestamps. This paper gives a space-efficient data structure to maintain such a <b>data</b> <b>stream</b> so that it can approximate the frequent item set over a sliding time window with sufficient accuracy. Prior to our work, Cormode et al. [3] have the best solution, with space complexity O(1 /ε log W log (ε B/log W) min{log W, 1 /ε } log U), where ε is the given error bound, W and B are parameters of the sliding window, and U is the number of all possible item names. Our solution reduces the space to O(1 /ε log W log (ε B/log W)). We also unify the study of <b>synchronous</b> and asynchronous <b>data</b> <b>stream</b> by quantifying the delay of the data items. When the delay is zero, our solution matches the space complexity of the best solution to the <b>synchronous</b> <b>data</b> <b>streams</b> [8]. © 2010 Springer-Verlag Berlin Heidelberg. link_to_subscribed_fulltextThe 7 th Workshop on Approximation and Online Algorithms (WAOA 2009), University of Copenhagen, Denmark, 10 - 11 September 2009. In Lecture Notes in Computer Science, 2009, v. 5893, p. 49 - 6...|$|R
40|$|A single-chip microprocessor-compatible 128 -b {{correlator}} {{is designed}} and implemented in a 3 -μm M 2 CMOS process. Full-custom design techniques {{are applied to}} achieve the best tradeoff among chip size, speed, and power consumption. The chip is placed in a microprocessor-based portable data terminal using HF radio communication. It {{marks the beginning of}} a <b>synchronous</b> <b>data</b> <b>stream</b> received from the very noisy channel by detecing the synchronization (sync) word. The sync word can be detected for either inverted or noninverted input data streams. Two chips can be cascaded to make a 256 -b correlator. The chip is fully programmable by a microprocessor to set the number of tolerable errors in detection and to select the bits of the 128 -b (or 256 -b) data stream {{to be used in the}} correlation...|$|E
40|$|A control {{architecture}} for {{resource allocation}} in satellite networks is proposed, {{along with the}} specification of performance indexes and control strategies. The latter, besides being based on information on traffic statistics and network status, rely upon some knowledge of the fading conditions over the satellite network channels. The resource allocation problem consists of the assignment, by a master station, of a total available bandwidth among traffic earth stations {{in the presence of}} different traffic types. Traffic stations are assumed to measure continuously their signal fade level, but this information may either be used only locally or also communicated to the master station. According to the information made available on-line to the master station on the level of the fading attenuation of the traffic stations, the assignment can be made static, based on the a priori knowledge of long-term fading statistics, or dynamic, based on the updated measurements. In any case, the decisions can be adapted to slowly time-varying traffic characteristics. At each earth station, two basic traffic types are assumed to be present, namely guaranteed bandwidth, real-time, <b>synchronous</b> <b>data</b> (<b>stream</b> traffic), and best effort traffic (datagram traffic). Numerical results are provided for a specific architecture in the dynamic case, in a real environment, based on the Italsat satellite national coverage payload characteristics...|$|E
40|$|Many {{real world}} data {{naturally}} arrive as rapid paced and virtually unbounded streams. Examples of such streams include network traffic at a router, events observed by a sensor network, accesses to a web server and transactional updates {{to a large}} database. Such streaming data need to be monitored online to collect traffic statistics, detect trends and anomalies, tune system performance and help make business decisions. However, {{because of the large}} size and rapid pace of the data, as well as the online processing requirement, conventional data processing methods, such as storing the data in a database and issuing offline SQL queries thereafter, are not feasible. Data stream processing is a new diagram of massive data set processing and creates new challenges in the algorithm design and implementation. In this thesis, we consider time-decayed data aggregation for data streams, where the importance or contribution of each data element decays over time, since recent data are usually considered of more importance in applications, and therefore are given heavier weights. We design small space data structures and algorithms for maintaining fundamental aggregates of the streams if it is possible and otherwise show large space lower bounds. We consider the data aggregation over a robust data stream model called asynchronous data stream, motivated by the streaming data transmitted in distributed systems, including computer networks, where the asynchrony in the data transmission is inevitable. In asynchronous data stream, the arrival order of the data elements at the receiver side is not necessarily the same as the order in which the data elements were generated. Asynchronous data stream is a robuster and generalized model of the previous <b>synchronous</b> <b>data</b> <b>stream</b> model. In summary, this thesis presents the following results: 1. We formalize the model of asynchronous data stream and the notion of timestamp sliding window. We propose the first small space sketch for summarizing the data elements over timestamp sliding windows of multiple geographically distributed asynchronous data streams. The sketch can return accuracy guaranteed estimates for basic aggregates, such as: Sum, Median and Quantiles. 2. We design the first small space sketch for general purpose network streaming data aggregation. The sketch has the following properties that make it useful in communication-efficient aggregation in distributed streaming scenarios: (1) The sketch can handle multiple geographically distributed asynchronous data streams. (2) The sketch is duplicate-insensitive, i. e. reinsertions of the same data will not affect the sketch, and hence the estimates of aggregates. (3) The sketch is also time-decaying, so that the weight of each data element summarized in the sketch decreases over time. (4) The sketch returns accuracy guaranteed estimates for a variety of core aggregates, including the sum, median, quantiles, frequent elements and selectivity. 3. We conduct a comprehensive study on the time-decayed correlated data aggregation over asynchronous data streams. For each class of time decay function, we either propose space efficient algorithms or show large space lower bounds. We not only closes the open problem of correlated data aggregation under sliding windows decay, but also presents negative results for the case of exponential decay, which however is highly used in the non-correlated scenarios. 4. We propose the forward decay model to simplify the time-decayed data stream aggregation and sampling. Forward decay captures a variety of usual decay functions (or called backward decay), such as exponential decay. We design efficient algorithms for data aggregation and sampling under the forward decay model, and show that they are easy to implement scalably...|$|E
40|$|International Telemetering Conference Proceedings / October 14 - 16, 1980 / Bahia Hotel, San Diego, CaliforniaMulti-carrier FDMA {{methods are}} widely used for {{transmitting}} digital data from several sources. In some cases, the digital signals may be controlled by a single clock and hence, the data channels may be fully synchronized. This paper describes a method for evaluating the characteristics of adjacent Channel interference (ACI), and intermodulation (IM) distortion in a FDMA data transmission system with <b>synchronous</b> <b>data</b> <b>streams.</b> A computer simulation method is {{used to evaluate the}} statistical characteristics of ACI and IM. It is shown that the IM component is uncorrelated with signal components whether or not the <b>data</b> <b>streams</b> are <b>synchronous.</b> The distribution of the IM amplitude is shown to be Gaussian and hence, the IM can be treated as an additive Gaussian noise component. ACI in multichannel FDMA data transmission systems is also shown to exhibit similar characteristics...|$|R
40|$|We {{propose a}} {{performance}} analysis framework for adaptive real-time <b>synchronous</b> <b>data</b> flow <b>streaming</b> applications on run-time reconfigurable FPGAs. As the main contribution, {{we present a}} constraint based approach to capture both streaming application execution semantics and the varying design concerns during reconfigurations. With our event models constructed as cumulative functions on <b>data</b> <b>streams,</b> we exploit a novel compile-time analysis framework based on iterative timing phases. Finally, we implement our framework on a public domain constraint solver, and illustrate its capabilities {{in the analysis of}} design trade-offs due to reconfigurations with experiments...|$|R
40|$|The {{importance}} of the bandwidth required for transmitting the chosen signaling or modulation technique in evaluating efficiency of a communication system is noted. The direct relation between bandwidth and the power spectral density (PSD) of the signaling scheme makes efficient analytical methods for calculating the PSD essential to specifying the spectral occupancy of the transmission channel. Several techniques for calculating the PSD of <b>synchronous</b> <b>data</b> pulse <b>streams</b> are reviewed...|$|R
40|$|Both legacy {{networking}} {{technology and}} SDN APIs gener-ally {{do not allow}} for highly precise timing of changes in data plane forwarding behavior. This can complicate the network processing of real-time <b>synchronous</b> <b>data</b> <b>streams.</b> For example, {{in the case of}} media ows, ow changes may be required to occur on the boundary of atomic elements such as video frames, requiring actions to be timed on the order of microseconds. Most SDN APIs and legacy network-ing tools do not allow for the changing of forwarding rules with a temporal accuracy of less than tens of milliseconds. To achieve precise timing of actions, the relatively slow and temporally imprecise process of establishing new data plane forwarding behavior can be decoupled from the actual tim-ing of payload-aware ow changes. A proof-of-concept was developed to demonstrate seamless " switching of un-compressed HD video (transported in UDP multicast RTP streams) using an off-the-shelf Ethernet switch and SDN techniques. In this PoC, specialized controller software uses SDN to prepare the network with new data-plane forward-ing behavior, and then causes -timed " changes at a precise time in the ow's packet headers to match the new forwarding rules. Old forwarding rules that no longer match the new header values are then removed from the network...|$|R
40|$|We {{present a}} global {{scheduling}} framework for <b>synchronous</b> <b>data</b> flow (SDF) <b>streaming</b> applications on MPSoCs, based on optimized computation and contention-free routing. The global scheduling of processors computing and communication transactions are formulated as constraint based problem, {{to avoid the}} scheduling overhead in TDMA-like heuristic schemes. A public domain constraint solver is exploited to solve the NP-complete scheduling efficiently, together with problem specific constraint modeling techniques. Experimental {{results show that the}} proposed framework can achieve a high predictable application throughput with minimized buffer cost. For instance, for applications in communication domain, higher throughput (up to 87 %) has been observed with less buffer cost, compared to scenarios considering the heuristic scheduling overhead...|$|R
40|$|International Telemetering Conference Proceedings / October 27 - 30, 1997 / Riviera Hotel and Convention Center, Las Vegas, NevadaThe RAH- 66 Comanche {{flight test}} program {{required}} {{a state of}} the art Airborne Data Acquisition System consisting of: 1) A modular distributed system that uses a series of software programmable building blocks capable of signal conditioning all types of sensors. 2) A digital multiplexing system capable of combining various types of digital streams at high rates including Synchronous and Asynchronous PCM, MIL-STD- 1553 B, and RS- 422 <b>data</b> <b>streams.</b> 3) A <b>Data</b> Combiner Unit that accepts <b>synchronous</b> PCM <b>data</b> <b>streams</b> from one to eight sources at 4 MBPS or less and a frame size of up to 8128 words each that outputs four independent PCM streams at 8 MBPS or less and a frame size of up to 16384 words. 4) A Data System Control Unit that controls the tape recorder, serves as the interface to the Pilot’s Control Unit and monitors/reports status of the data acquisition system to the Pilots Control Unit. 5) An Airborne Computer that provides the control and interface to the pilot & copilot instrumentation displays. 6) A Cockpit Instrumentation Pilot Display System consisting of a Main Unit Multi- Function Display, a Load Factor/Hub Moment Display and a Right Wing Flight Control Position Display. The Main Unit Multi-Function Display has the capability to display multiple graphic pages generated by the Airborne Computer. 7) The ability to record high speed avionics buses from the (Mission Equipment Package) MEP such as MIL-STD- 1553 B, (High Speed Data Bus) HSDB, (Processor Interconnect) PI Bus, (Data Flow Network) DFN and PCM utilizing the Ampex DCRsi- 107 Tape Recorder...|$|R
40|$|Graphics {{processing}} units (GPUs) {{provide a}} low cost platform for accelerating high performance computations. The {{introduction of new}} programming languages, such as CUDA and OpenCL, makes GPU programming attractive {{to a wide variety}} of programmers. However, programming GPUs is still a cumbersome task for two primary reasons: tedious performance optimizations and lack of portability. First, optimizing an algorithm for a specific GPU is a time-consuming task that requires a thorough understanding of both the algorithm and the underlying hardware. Unoptimized CUDA programs typically only achieve a small fraction of the peak GPU performance. Second, GPU code lacks efficient portability as code written for one GPU can be inefficient when executed on another. Moving code from one GPU to another while maintaining the desired performance is a non-trivial task often requiring significant modifications to account for the hardware differences. In this work, we propose Sponge, a compilation framework for GPUs using <b>synchronous</b> <b>data</b> flow <b>streaming</b> languages. Sponge is capable of performing a wide variety of optimizations to generate efficient code for graphics engines. Sponge alleviates the problems associated with current GPU programming methods by providing portability across different generations of GPUs and CPUs, and a better abstraction of the hardware details, such as the memory hierarchy and threading model. Using streaming, we provide a writeonce software paradigm and rely on the compiler to automatically create optimized CUDA code for a wide variety of GPU targets. Sponge’s compiler optimizations improve the performance of the baseline CUDA implementations by an average of 3. 2 x...|$|R
40|$|PCIO card in input/output interface-circuit card {{enabling}} {{computer based}} on ISA bus to transmit and receive high-speed, <b>synchronous</b> serial <b>data</b> and clock signals. Designed specifically to plug into IBM PC-AT or compatible computer and to handle {{input and output}} of data in packet formats like those of telemetric <b>data</b> <b>streams</b> used throughout NASA and aerospace industry. Reduces amount of auxiliary equipment needed...|$|R
40|$|EEG-based Brain-computer {{interfaces}} (BCI) {{are facing}} grant challenges in their real-world applications. The technical difficulties in developing truly wearable multi-modal BCI {{systems that are}} capable of making reliable real-time prediction of users’ cognitive states under dynamic real-life situations may appear at times almost insurmountable. Fortunately, recent advances in miniature sensors, wireless communication and distributed computing technologies offered promising ways to bridge these chasms. In this paper, we report our attempt to develop a pervasive on-line BCI system by employing state-of-art technologies such as multi-tier fog and cloud computing, semantic Linked Data search and adaptive prediction/classification models. To verify our approach, we implement a pilot system using wireless dry-electrode EEG headsets and MEMS motion sensors as the front-end devices, Android mobile phones as the personal user interfaces, compact personal computers as the near-end fog servers and the computer clusters hosted by the Taiwan National Center for High-performance Computing (NCHC) as the far-end cloud servers. We succeeded in conducting <b>synchronous</b> multi-modal global <b>data</b> <b>streaming</b> in March and then running a multi-player on-line BCI game in September, 2013. We are currently working with the ARL Translational Neuroscience Branch and the UCSD Movement Disorder Center to use our system in real-life personal stress and in-home Parkinson’s disease patient monitoring experiments. We shall proceed to develop a necessary BCI ontology and add automatic semantic annotation and progressive model refinement capability to our system...|$|R
5000|$|... #Subtitle level 2: Asynchronous and <b>synchronous</b> <b>data</b> {{transmission}} ...|$|R
5000|$|... a <b>Synchronous</b> <b>Data</b> Link Control (SDLC) {{communications}} interface ...|$|R
40|$|In {{this paper}} an {{embedded}} multiprocessor system {{on top of}} a network on chip is proposed which is amenable for timing analysis. This multiprocessor system is intended for multimedia application that process <b>data</b> <b>streams.</b> The temporal behavior of applications executed on this multiprocessor system is derived with a <b>Synchronous</b> <b>Data</b> Flow (SDF) graph in which computation, communication, buffer sizes as well as arbitration is modeled. This graph can be transformed in an event graph which is a special case of a Petri net from which properties like the minimal throughput can be derived with results of MaxPlus Linear System Theory [1]. Our main contribution in this paper is an SDF model of the network in which an arbiter is applied which allows the transfer of a possibly varying but bounded number of words per period...|$|R
5000|$|<b>Synchronous</b> <b>Data</b> Link Control (SDLC) {{high speed}} wide area {{networks}} ...|$|R
5000|$|... 2652 Multi-Protocol Communications Circuit (incl. <b>Synchronous</b> <b>Data</b> Link Control (SDLC)) ...|$|R
3000|$|... <b>data</b> <b>streams,</b> the RS has to {{separate}} the two <b>data</b> <b>streams</b> from the other received <b>data</b> <b>streams.</b> The superposed <b>data</b> <b>stream</b> needs to be transmitted simultaneously to [...]...|$|R
30|$|In the following, {{we explain}} {{the design of}} BCSA transceive beamforming. Based on the chosen BC strategy, the RS {{separates}} the <b>data</b> <b>streams</b> which {{are going to be}} transmitted in the BC phase and transmits to the corresponding node or nodes. For unicasting strategy, the RS separates all <b>data</b> <b>streams</b> and transmits each <b>data</b> <b>stream</b> to each corresponding receiving node. For hybrid uni/multicasting, for each group, the RS separates the unicasted <b>data</b> <b>stream</b> from the other <b>data</b> <b>streams</b> and transmits it to the corresponding node whose <b>data</b> <b>stream</b> is multicasted. The RS also separates the multicasted <b>data</b> <b>stream</b> from the other <b>data</b> <b>streams</b> and transmits it to the remaining nodes in the corresponding group. For multicasting strategy, the RS separates the superposition of two <b>data</b> <b>streams</b> from the others and transmits the superposed <b>data</b> <b>stream</b> to all nodes in the group.|$|R
50|$|The IRB {{protocol}} utilizes {{a control}} <b>data</b> <b>stream</b> and an audio <b>data</b> <b>stream.</b> The control <b>data</b> <b>stream</b> {{can be any}} protocol that will support compact data transfer, while the audio <b>data</b> <b>stream</b> generally uses existing audio streaming protocols.|$|R
40|$|In an {{internet}} end system, many applications with various requirements on their <b>data</b> <b>stream</b> transmission run simultaneously. The management of these <b>data</b> <b>streams</b> in a sending end system, {{and particularly the}} flow and congestion control for the <b>data</b> <b>streams</b> (if they exist at all), is for each <b>data</b> <b>stream</b> separate and independent from all other <b>data</b> <b>streams...</b>|$|R
40|$|In an {{internet}} end system, many applications with various requirements on their <b>data</b> <b>stream</b> transmission run simultaneously. The management of these <b>data</b> <b>streams</b> in a sending end system, {{and particularly the}} flow and congestion control for the <b>data</b> <b>streams</b> (if they exist at all), is for each <b>data</b> <b>stream</b> separate and independent from all other <b>data</b> <b>streams.</b> An interesting alternative to such a separate <b>data</b> <b>stream</b> management in a sending end system might be a common <b>data</b> <b>stream</b> management for all <b>data</b> <b>streams</b> in a sending end system. This common <b>data</b> <b>stream</b> management consists of two different aspects improving the overall performance, i. e., the throughput and the fairness, of the <b>data</b> <b>streams</b> of an end system. First, reuse {{of information about the}} current network conditions for an accurate adjustment of connection parameters of other <b>data</b> <b>streams</b> in an end system. This information can be implicitly obtained by some other <b>data</b> <b>streams</b> of the end system and/or explicitly obtained by a network performance probing approach from the end system. And second, a common congestion control between all <b>data</b> <b>streams</b> of an end system including TCP and UDP traffic. In this work some existing approaches for network information reuse, network performance probing...|$|R
3000|$|... <b>data</b> <b>streams</b> {{simultaneously}} to all nodes, one <b>data</b> <b>stream</b> for each node. For that purpose, the RS separates the received <b>data</b> <b>stream</b> spatially {{and in each}} BC phase transmits to each node one <b>data</b> <b>stream</b> {{from one of the}} other [...]...|$|R
40|$|An {{apparatus}} for mixing {{a plurality}} of input <b>data</b> <b>streams</b> is described, which has a processing unit adapted to compare the frames of the plurality of input <b>data</b> <b>streams,</b> and determine, based on the comparison, for a spectral component of an output frame of an output <b>data</b> <b>stream,</b> exactly one input <b>data</b> <b>stream</b> of the plurality of input <b>data</b> <b>streams.</b> The output <b>data</b> <b>stream</b> is generated by copying at least a part of an information of a corresponding spectral component of {{the frame of the}} determined <b>data</b> <b>stream.</b> Further or alternatively, the control values of the frames of the first and second input <b>data</b> <b>streams</b> are compared, and, if so, the control value is adopted...|$|R
40|$|DE 102007007830 A 1 UPAB: 20080912 NOVELTY - The device has a text {{data entry}} device (10) for {{entering}} text data (11 a) into a <b>data</b> <b>stream</b> {{to provide an}} escape-start-sequence into the <b>data</b> <b>stream.</b> The escape start sequence defines a set of data units (11 b) that are interpreted from an extension decoder, to provide the set into the <b>data</b> <b>stream</b> for providing an escape-continuation-sequence into the <b>data</b> <b>stream.</b> The escape-continuation-sequence defines another set of data units that is interpreted by the extension decoder together with the former set for providing the data units into the <b>data</b> <b>stream.</b> DETAILED DESCRIPTION - INDEPENDENT CLAIMS are also included for the following: (1) a method for producing a <b>data</b> <b>stream</b> (2) a method for reading a <b>data</b> <b>stream</b> with text <b>data</b> (3) a computer program with a program code for executing a method for producing a <b>data</b> <b>stream</b> and a method for reading a <b>data</b> <b>stream</b> with text <b>data</b> (4) a <b>data</b> <b>stream</b> with text <b>data.</b> USE - Device for producing a <b>data</b> <b>stream</b> (claimed). ADVANTAGE - The device enables high flexibility in data communication and processing. The method allows simple and complex receivers to process the <b>data</b> <b>stream...</b>|$|R
30|$|Our future {{research}} {{will focus on}} finding a proper method for <b>data</b> <b>stream</b> anonymization. In big <b>data,</b> <b>streaming</b> is an essential type in most data applications. The current anonymization method of MDSBA {{does not support the}} <b>data</b> <b>stream</b> anonymization. Most recent big data frameworks provide complete solutions for the <b>data</b> <b>stream.</b> We may need to amend the current MDSBA method to cope with the continuous <b>data</b> <b>streaming.</b>|$|R
40|$|<b>Data</b> <b>Streams</b> are {{infinite}} in nature. As a result, a query that executes over <b>data</b> <b>streams</b> specifies a ‘‘window’’ {{of focus}} or {{the part of}} the <b>data</b> <b>stream</b> that is of interest to the query. When new data items arrive into the <b>data</b> <b>stream,</b> the window may either expand or slide to allow the query to process these new data items. Hence, queries over <b>data</b> <b>streams</b> are continuous in nature, i. e., the query is continuously re-evaluated each time the query window slides. Window-based query processing on <b>data</b> <b>streams</b> refers to the various ways and techniques for processing and evaluating continuous queries over windows of <b>data</b> <b>stream</b> items...|$|R
3000|$|... in {{the second}} phase. Thus, S 2 needs to wait until it {{receives}} the <b>data</b> <b>stream</b> containing its own <b>data</b> <b>stream.</b> After performing self-interference cancellation, it performs known-interference cancellation to obtain the other <b>data</b> <b>stream.</b> After three phases, all nodes obtain the <b>data</b> <b>streams</b> from all other nodes.|$|R
40|$|A {{representation}} of a video sequence having a first <b>data</b> <b>stream</b> comprising first <b>data</b> portions, the first data portions comprising first timing information and a second <b>data</b> <b>stream,</b> the second <b>data</b> <b>stream</b> comprising a second data portion having second timing information, may be derived. Association information is associated to a second data portion of the second <b>data</b> <b>stream,</b> the association information indicating a predetermined first dat portion of the first <b>data</b> <b>stream.</b> A transport stream comprising {{the first and the}} second <b>data</b> <b>stream</b> as the {{representation of}} the video sequence is generated...|$|R
40|$|AbstractMobile Agent {{technology}} {{applied to}} the problem of mining <b>data</b> <b>streams</b> which, Mobile Agent application intelligence, distributed <b>data</b> <b>stream</b> mining to solve the noise present in the data processing is difficult to identify, classify slow, inefficient mining problems is proposed based on Mobile Agent distributed <b>data</b> <b>stream</b> mining model, the model design and data base displacement detection, <b>data</b> <b>stream</b> classification algorithms in a distributed environment to better address the problem of mining <b>data</b> <b>streams.</b> Mobile Agent based system for distributed <b>data</b> <b>stream</b> mining has a greater theoretical and practical significance...|$|R
