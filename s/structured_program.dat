318|7103|Public
25|$|Top Chef University is a {{comprehensive}} online culinary school involving 12 courses and over 200 in-depth video-lessons. The program takes participants through a <b>structured</b> <b>program</b> of the basics (knife skills, kitchen set-up, ingredients) to advanced culinary techniques (sous-vide, molecular gastronomy). The instructors at Top Chef University consist of the series' most successful and popular former contestants. Enrollment costs $25 for a monthly membership and $200 for an annual membership.|$|E
25|$|The {{notion of}} {{multi-level}} breaks is of {{some interest in}} theoretical computer science, because it gives rise to what is today called the Kosaraju hierarchy. In 1973 S. Rao Kosaraju refined the <b>structured</b> <b>program</b> theorem by proving that it's possible to avoid adding additional variables in structured programming, as long as arbitrary-depth, multi-level breaks from loops are allowed. Furthermore, Kosaraju proved that a strict hierarchy of programs exists: for every integer n, there exists a program containing a multi-level break of depth n that cannot be rewritten as a program with multi-level breaks of depth less than n without introducing added variables.|$|E
25|$|PotterCast was {{released}} {{less than two}} weeks after MuggleCast's first episode. Produced by The Leaky Cauldron, it differed from MuggleCast with a more <b>structured</b> <b>program,</b> including various segments and involvement of more people on the Leaky Cauldron staff compared to MuggleCast. It also was the first Potter podcast to produce regular interviews with people directly involved with the books and films. The first show featured interviews with Stuart Craig, art director of the films, as well as Bonnie Wright, who plays Ginny Weasley. PotterCast has also interviewed Matthew Lewis (the actor who portrays Neville Longbottom), Evanna Lynch (Luna Lovegood), Jamie Waylett (Vincent Crabbe), Rupert Grint (Ron Weasley), Chris Columbus, Alfonso Cuarón, Mike Newell (directors of the first four films), Arthur A. Levine and Cheryl Klein (editors of the books at Scholastic), {{and the author of the}} book series, J. K. Rowling.|$|E
5000|$|Jackson <b>Structured</b> <b>Programming</b> (JSP) is {{a method}} for <b>structured</b> <b>programming</b> based on correspondences between data stream <b>structure</b> and <b>program</b> <b>structure.</b>|$|R
2500|$|Dijkstra, Edsger W. (1972). Notes on <b>Structured</b> <b>Programming,</b> in <b>Structured</b> <b>Programming,</b> by O.-J. Dahl, E. W. Dijkstra, and C. A. R. Hoare, New York: Academic Press ...|$|R
5000|$|For {{an example}} {{comparing}} Jackson <b>Structured</b> <b>Programming</b> to [...] "traditional" [...] <b>structured</b> <b>programming,</b> {{let us consider}} a Java program to count repeated lines in a file.|$|R
2500|$|The Abendrealschule Heilbronn e.V. allows {{students}} with middle school diplomas {{to achieve the}} first in a series of steps to gain college entrance prerequisites on a part-time basis after work. It is part of a <b>structured</b> <b>program</b> commonly referred to as the [...]|$|E
2500|$|Structured programming, {{canonical}} structures: Per the Church–Turing thesis, any algorithm can be computed by a model {{known to}} be Turing complete, and per Minsky's demonstrations, Turing completeness requires only four instruction types—conditional GOTO, unconditional GOTO, assignment, HALT. Kemeny and Kurtz observe that, while [...] "undisciplined" [...] use of unconditional GOTOs and conditional IF-THEN GOTOs can result in [...] "spaghetti code", a programmer can write structured programs using only these instructions; {{on the other hand}} [...] "it is also possible, and not too hard, to write badly structured programs in a structured language". Tausworthe augments the three Böhm-Jacopini canonical structures: SEQUENCE, IF-THEN-ELSE, and WHILE-DO, with two more: DO-WHILE and CASE. An additional benefit of a <b>structured</b> <b>program</b> is that it lends itself to proofs of correctness using mathematical induction.|$|E
50|$|The {{graduate}} school offers a <b>structured</b> <b>program</b> for CASED PhD students.|$|E
40|$|To evolve <b>structured</b> <b>programs</b> we {{introduce}} H-PIPE, {{a hierarchical}} extension of Probabilistic Incremental Program Evolution (PIPE - Sa/lustowicz and Schmidhuber, 1997). Structure is induced by "hierarchical instructions" (HIs) limited to top-level, <b>structuring</b> <b>program</b> parts. "Skip nodes" (SNs) inspired by biology's introns (non-coding segments) allow for switching program parts on and off. In our experiments H-PIPE outperforms PIPE, and SNs facilitate synthesis of certain <b>structured</b> <b>programs</b> but not unstructured ones. We conclude that introns {{can be particularly}} useful {{in the presence of}} structural bias. Keywords: Probabilistic Incremental <b>Program</b> Evolution, <b>Structured</b> <b>Programs,</b> Hierarchical Programs, Introns, Non-Coding Segments. 1 Introduction and Previous Work Overview. Hierarchical Probabilistic Incremental Program Evolution (H-PIPE) is a novel method for synthesizing <b>structured</b> <b>programs.</b> It uses the PIPE paradigm (Sa/lustowicz and Schmidhuber, 1997) to iteratively generate succes [...] ...|$|R
40|$|To evolve <b>structured</b> <b>programs</b> we {{introduce}} H-PIPE, {{a hierarchical}} extension of Probabilistic Incremental <b>Program</b> Evolution (PIPE). <b>Structure</b> is induced by "hierarchical instructions" (HIs) limited to top-level, <b>structuring</b> <b>program</b> parts. "Skip nodes" (SNs) allow for switching program parts on and off. They facilitate synthesis of certain <b>structured</b> <b>programs.</b> In our experiments HPIPE outperforms PIPE: structural bias can speed up program synthesis. Keywords: Probabilistic Incremental <b>Program</b> Evolution, <b>Structured</b> <b>Programs,</b> Hierarchical Programs, Non-Coding Segments. 1 Introduction Overview. Automatic program synthesis {{is of interest}} because it addresses the problem of searching in general algorithm space as opposed to more limited search spaces like those of, say, feedforward neural networks. Hierarchical Probabilistic Incremental Program Evolution (H-PIPE) is a novel method for synthesizing <b>structured</b> <b>programs.</b> It uses the PIPE paradigm (Sa/lustowicz and Schmidhuber, 1997) to iterativ [...] ...|$|R
50|$|Jackson <b>Structured</b> <b>Programming</b> {{was seen}} by many as related to Warnier <b>structured</b> <b>programming,</b> but the latter method focused almost {{exclusively}} on the structure of the output stream. JSP and Warnier's method both <b>structure</b> <b>programs</b> and data using only sequences, iterations and selections, so they essentially create programs that are parsers for regular expressions which simultaneously match the program's input and output data streams.|$|R
50|$|The 2010 edition {{provided}} a <b>structured</b> <b>program</b> of workshops, lectures, classes, and concerts.|$|E
5000|$|Following the <b>structured</b> <b>program</b> theorem, all {{programs}} {{are seen as}} composed of control structures: ...|$|E
5000|$|The <b>structured</b> <b>program</b> theorem {{provides}} the theoretical basis of structured programming. It states that three ways of combining programs - sequencing, selection, and iteration - are sufficient to express any computable function. This observation did not originate with the structured programming movement; these structures are sufficient {{to describe the}} instruction cycle of a central processing unit, {{as well as the}} operation of a Turing machine. Therefore, a processor is always executing a [...] "structured program" [...] in this sense, even if the instructions it reads from memory are not part of a <b>structured</b> <b>program.</b> However, authors usually credit the result to a 1966 paper by Böhm and Jacopini, possibly because Dijkstra cited this paper himself. The <b>structured</b> <b>program</b> theorem does not address how to write and analyze a usefully <b>structured</b> <b>program.</b> These issues were addressed during the late 1960s and early 1970s, with major contributions by Dijkstra, Robert W. Floyd, Tony Hoare, Ole-Johan Dahl, and David Gries.|$|E
50|$|<b>Structured</b> <b>programming</b> theorists {{gained a}} major {{ally in the}} 1970s after IBM {{researcher}} Harlan Mills applied his interpretation of <b>structured</b> <b>programming</b> theory {{to the development of}} an indexing system for the New York Times research file. The project was a great engineering success, and managers at other companies cited it in support of adopting <b>structured</b> <b>programming,</b> although Dijkstra criticized the ways that Mills's interpretation differed from the published work.|$|R
40|$|This thesis {{describes}} {{a set of}} computer <b>program</b> control <b>structures</b> which permits the application of certain <b>structured</b> <b>programming</b> techniques to the IBM/ 360 assembly language (ALC). The control structures are implemented by programmerdefined instructions known as macros. A history of computer software is presented, providing {{a basis for the}} emergence of <b>structured</b> <b>programming.</b> A survey of the major concepts of <b>structured</b> <b>programming</b> with special attention to control structures and their significance to <b>structured</b> <b>programming</b> follows. The macros developed in this study include DO, ENDDO, LEAVE, CASE, and ENDCASE. They provide a looping control structure, a loop-escape construct, and a selective control structure. Examples of usage are given...|$|R
50|$|Most 3GLs support <b>structured</b> <b>programming.</b>|$|R
5000|$|P. J. Plauger, {{an early}} adopter of {{structured}} programming, described {{his reaction to}} the <b>structured</b> <b>program</b> theorem: ...|$|E
5000|$|Accelerate: The Acceleration Program {{consists}} of a three-phased <b>structured</b> <b>program</b> ranging from 6 to 18 months with equity funding available.|$|E
50|$|The Leadership Certificate is a multi-semester <b>structured</b> <b>program</b> {{which aims}} to develop students' {{leadership}} skills through different kinds of curricula and programs.|$|E
2500|$|Dijkstra's thesis {{was that}} departures from linear control flow were clearer if allowed only in disciplined higher-level {{structures}} such as the if-then-else statement and the while loop. This methodology was developed into <b>structured</b> <b>programming</b> movement, {{the title of his}} 1972 book, coauthored with C.A.R. Hoare and Ole-Johan Dahl. Considered by many as the first significant movement in history of computer <b>programming,</b> <b>structured</b> <b>programming</b> became the new programming orthodoxy during the 1970s. Bertrand Meyer remarked that, [...] "The revolution in views of programming started by Dijkstra's iconoclasm led to a movement known as <b>structured</b> <b>programming,</b> which advocated a systematic, rational approach to <b>program</b> construction. <b>Structured</b> <b>programming</b> is the basis for all that has been done since in programming methodology, including object-oriented programming." ...|$|R
40|$|The idea of {{functional}} programming {{has played a}} big role in shaping today's landscape of mainstream programming languages. Another concept that dominates the current programming style is Dijkstra's <b>structured</b> <b>programming.</b> Both concepts have been successfully married, for example in the programming language Scala. This paper proposes how the same can be achieved for <b>structured</b> <b>programming</b> and PURELY functional programming via the notion of LINEAR SCOPE. One advantage of this proposal is that mainstream programmers can reap the benefits of purely functional programming like easily exploitable parallelism while using familiar <b>structured</b> <b>programming</b> syntax and without knowing concepts like monads. A second advantage is that professional purely functional programmers can often avoid hard to read functional code by using <b>structured</b> <b>programming</b> syntax that is often easier to parse mentally...|$|R
5000|$|Dijkstra's thesis {{was that}} departures from linear control flow were clearer if allowed only in disciplined higher-level {{structures}} such as the if-then-else statement and the while loop. This methodology was developed into <b>structured</b> <b>programming</b> movement, {{the title of his}} 1972 book, coauthored with C.A.R. Hoare and Ole-Johan Dahl. Considered by many as the first significant movement in history of computer <b>programming,</b> <b>structured</b> <b>programming</b> became the new programming orthodoxy during the 1970s. Bertrand Meyer remarked that, [...] "The revolution in views of programming started by Dijkstra's iconoclasm led to a movement known as <b>structured</b> <b>programming,</b> which advocated a systematic, rational approach to <b>program</b> construction. <b>Structured</b> <b>programming</b> is the basis for all that has been done since in programming methodology, including object-oriented programming." ...|$|R
50|$|TenMarks {{provides}} personalized online math {{practice and}} enrichment programs for third through tenth graders using a <b>structured</b> <b>program</b> of practice, on-demand hints, video instruction and real time results.|$|E
50|$|For example, the {{following}} C program fragment has an essential complexity of 1, because the inner if statement and the for can be reduced, i.e. it is a <b>structured</b> <b>program.</b>|$|E
50|$|Green Valley {{employs a}} <b>structured</b> <b>program</b> of counselling, by {{utilizing}} parent forums and information sessions {{to provide an}} outline students can use to apply for higher level educational institutions around the world.|$|E
50|$|It is {{possible}} to do <b>structured</b> <b>programming</b> in any programming language, though it is preferable to use something like a procedural programming language. Some of the languages initially used for <b>structured</b> <b>programming</b> include: ALGOL, Pascal, PL/I and Ada, but most new procedural programming languages since that time have included features to encourage <b>structured</b> <b>programming,</b> and sometimes deliberately left out features - notably GOTO - {{in an effort to}} make unstructured programming more difficult.Structured programming (sometimes known as modular programming) enforces a logical <b>structure</b> on the <b>program</b> being written to make it more efficient and easier to understand and modify.|$|R
50|$|Pascal <b>structures</b> <b>programs</b> into {{procedures}} and functions.|$|R
5000|$|... (writing {{statements}} to be executed), including <b>structured</b> <b>programming.</b>|$|R
50|$|To avoid {{confusion}} {{between various}} notions of reducibility to structured programs, it's {{important to note}} that McCabe's paper briefly discusses and then operates {{in the context of a}} 1973 paper by S. Rao Kosaraju, which gave a refinement (or alternative view) of the <b>structured</b> <b>program</b> theorem. The seminal 1966 paper of Böhm and Jacopini showed that all programs can be rewritten using only structured programming constructs, (aka the D structures: sequence, if-then-else, and while-loop), however, in transforming a random program into a <b>structured</b> <b>program</b> additional variables may need to be introduced (and used in the tests) and some code may be duplicated.|$|E
50|$|Menon M, Shrivastava A, Tewari A, Sarle R, Hemal AK, Peabody JO, Vallancien G.Laparascopic and robot {{assisted}} radical prostatectomy: Establishment of a <b>structured</b> <b>program</b> and preliminary {{analysis of}} outcomes.J Urol 2002; 168(3): 945-49.|$|E
50|$|Nativ {{provides}} the freedom for personal discovery {{as well as}} the security of a carefully <b>structured</b> <b>program.</b> This experience is created through an intricate balance between academics and volunteer work, learning and teaching, personal challenge and community living.|$|E
5000|$|Edsger W. Dijkstra, {{developed}} {{the framework for}} <b>structured</b> <b>programming.</b>|$|R
5000|$|The {{linear search}} rediscovered, <b>Structured</b> <b>Programming</b> 11, (1990), 53-55 ...|$|R
5000|$|<b>Structured</b> <b>programming</b> in circa 1967 with Edsger W. Dijkstra.|$|R
