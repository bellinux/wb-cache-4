0|6484|Public
40|$|Modern micro droplet {{reactors}} and nanoparticle processing require uniform minute spheres. They, however, often face {{difficulty in}} collecting minute spheres {{with the same}} diameter. The difficulty comes from the bottom-up process of growing small seeds, instead of breaking larger ones. The bottom-up process ends up with the byproduct of spheres smaller than the target size due to variation in temperature, pressure, and concentration of the system. Moreover, when the minute sphere size is smaller than the filter pore or {{the opening of the}} pipette tip, separating them into different sizes is difficult. One will have a hard time even in selecting out the right sized ones visually. For our study we report with this paper, we set the primary <b>functional</b> <b>requirement</b> to “Produce minute spheres ” and the <b>secondary</b> <b>functional</b> <b>requirement</b> to “Homogenize minute spheres ” and applied axiomatic design theory to develop a design solution that satisfies the two <b>functional</b> <b>requirements</b> by “suppressing the growth of secondary cores. ...|$|R
5000|$|<b>Functional</b> <b>Requirement</b> Specification (FRS): the {{definition}} of higher lever <b>functional</b> <b>requirements</b> ...|$|R
40|$|The Flight IPT {{assessed}} the reasonableness of demonstrating {{each of the}} Access 5 Step 1 <b>functional</b> <b>requirements.</b> The <b>functional</b> <b>requirements</b> listed in this matrix are from the September 2005 release of the Access 5 <b>Functional</b> <b>Requirements</b> Document. The demonstration mission considered was a notional Western US mission (WUS). The conclusion of the assessment is that 90 % of the Access 5 Step 1 <b>functional</b> <b>requirements</b> can be demonstrated using the notional Western US mission...|$|R
50|$|As {{defined in}} <b>requirements</b> engineering, <b>functional</b> <b>requirements</b> specify {{particular}} {{results of a}} system. This should be contrasted with non-functional requirements which specify overall characteristics such as cost and reliability. <b>Functional</b> <b>requirements</b> drive the application architecture of a system, while non-functional requirements drive the technical architecture of a system. In some cases a requirements analyst generates use cases after gathering and validating a set of <b>functional</b> <b>requirements.</b> The hierarchy of <b>functional</b> <b>requirements</b> is: user/stakeholder request → feature → use case → business rule. Each use case illustrates behavioral scenarios through one or more <b>functional</b> <b>requirements.</b> Often, though, an analyst will begin by eliciting a set of use cases, from which the analyst can derive the <b>functional</b> <b>requirements</b> that must be implemented to allow a user to perform each use case.|$|R
40|$|A {{study was}} {{conducted}} to identify a broad base of payload control and display requirements for space missions. The subjects discussed are: (1) <b>functional</b> <b>requirements</b> and allocation analysis, (2) control and display generic device matrix, (3) control <b>functional</b> <b>requirements,</b> and (4) display <b>functional</b> <b>requirements.</b> Specific applications of payload control and display requirements for various disciplines are defined...|$|R
5000|$|ISO 16175-2:2011, Information and {{documentation}} — Principles and <b>functional</b> <b>requirements</b> for records in electronic office environments — Part 2: Guidelines and <b>functional</b> <b>requirements</b> for digital records management systems ...|$|R
5000|$|ISO 16175-2:2011 - Information and {{documentation}} - Principles and <b>functional</b> <b>requirements</b> for records in electronic office environments - Part 2: Guidelines and <b>functional</b> <b>requirements</b> for digital records management systems ...|$|R
3000|$|... [...]), {{but how to}} {{establish}} relationships between quality requirements (a quality feature in the study) is not explained in the study. Because quality <b>requirements</b> qualify <b>functional</b> <b>requirements,</b> measuring and predicting quality requirements {{on the basis of}} the content of each <b>functional</b> <b>requirement</b> is a natural idea. Kaiya et al. developed such an idea by using semi-formal <b>functional</b> <b>requirement</b> notation (Kaiya and Ohnishi [...]...|$|R
40|$|The {{purpose of}} this paper is to examine the {{characteristics}} and nature of <b>functional</b> <b>requirements</b> for electronic records management systems (ERMS). It attempts to highlight several electronic records management systems <b>functional</b> <b>requirement</b> models developed aiming at facilitating an efficient and effective electronic records management. The study employed literature reviews to gather information on <b>functional</b> <b>requirements</b> of the leading advocates on electronic records management. It provides a critical analysis of several electronic records management systems <b>functional</b> <b>requirement</b> models such as the Trust Model; Business-Driven Recordkeeping Model; and the ICA Model of High level <b>Functional</b> <b>Requirements</b> for ERMS. The findings illustrate that ERMS <b>functional</b> <b>requirements</b> are important to protect the reliability, accuracy, authenticity and the trustworthiness of electronic records as evidence, thus establishing the trusted electronic records management systems. The insights in this paper will be useful to stakeholders and key players in electronic records management such as archivists, records managers, administrators and IT personnel...|$|R
40|$|The SLC {{control system}} is the dynamic result {{of a number of}} forces. The most obvious force is the <b>functional</b> <b>requirements</b> of the SLC itself, but other forces are history, budget, people, {{available}} technology, etc. The plan {{of this paper is to}} describe the critical <b>functional</b> <b>requirements</b> of the SLC which caused significant development of the control system. I have tried to focus on <b>functional</b> <b>requirements</b> as a driver, and I will describe some solutions which we have implemented to satisfy those <b>requirements.</b> The important <b>functional</b> <b>requirements</b> drivers for the control system discussed in this paper are...|$|R
40|$|Most of the {{individual}} requirements cannot be treated in isolation. Requirements may affect each other in various ways. The dependency between requirements impacts a number of software development aspects and activities. How to classify and specify requirements dependency remains a classic research topic. This research aims at providing an approach of specifying <b>functional</b> <b>requirements</b> dependency. In this thesis we generalize a classification of <b>functional</b> <b>requirements</b> dependency. We also propose a process meta-model to specify the semantic information of <b>functional</b> <b>requirements</b> dependency and deploy it on a wiki platform named Semantic REWiki. Taken advantage of this system, we can specify the <b>functional</b> <b>requirements</b> dependency semantically to support requirements validation and provide an effective method to represent the functional flow of the software system. Asiasanat:Requirements, <b>Requirements</b> Dependency, <b>Functional</b> <b>Requirements</b> Dependency, Semantic Information, Semantic Media Wik...|$|R
50|$|<b>Functional</b> requirements: <b>Functional</b> <b>requirements</b> {{explain what}} has to be done by {{identifying}} the necessary task, action or activity that must be accomplished. <b>Functional</b> <b>requirements</b> analysis will be used as the toplevel functions for functional analysis.|$|R
50|$|Depending on the product, {{type and}} {{complexity}} of the existing SRP, the relative importance of the <b>functional</b> <b>requirements</b> stated above may be different. Often, not all <b>functional</b> <b>requirements</b> can be realized equally by a SRP.|$|R
40|$|It is {{generally}} accepted that early {{determination of the}} stakeholder requirements assists {{in the development of}} systems that better meet the needs of those stakeholders. General security requirements frustrate this goal because {{it is difficult to determine}} how they affect the <b>functional</b> <b>requirements</b> of the system. This paper illustrates how representing threats as crosscutting concerns aids in determining the effect of security <b>requirements</b> on the <b>functional</b> <b>requirements.</b> Assets (objects that have value in a system) are first enumerated, and then threats on these assets are listed. The points where assets and <b>functional</b> <b>requirements</b> join are examined to expose vulnerabilities to the threats. Security requirements, represented as constraints, are added to the <b>functional</b> <b>requirements</b> to reduce the scope of the vulnerabilities. These requirements are used during the analysis and specification process, thereby incorporating security concerns into the <b>functional</b> <b>requirements</b> of the system...|$|R
40|$|This <b>Functional</b> <b>Requirements</b> Document (FRD) {{establishes}} a minimum set of Human System Interface (HSI) <b>functional</b> <b>requirements</b> {{to achieve the}} Access 5 Vision of "operating High Altitude, Long Endurance (HALE) Unmanned Aircraft Systems (UAS) routinely, safely, and reliably in the National Airspace System (NAS) ". Basically, it provides what functions are necessary to fly UAS in the NAS. The framework used to identify the appropriate functions was the "Aviate, Navigate, Communicate, and Avoid Hazards" structure identified in the Access 5 FRD. As a result, fifteen high-level <b>functional</b> <b>requirements</b> were developed. In addition, several {{of them have been}} decomposed into low-level <b>functional</b> <b>requirements</b> to provide more detail...|$|R
5000|$|Axiomatic {{design is}} a systems design {{methodology}} using matrix methods to systematically analyze {{the transformation of}} customer needs into <b>functional</b> <b>requirements,</b> design parameters, and process variables. [...] Specifically, <b>functional</b> <b>requirements</b> (FRs) are related to design parameters (DPs): ...|$|R
50|$|RDA is {{a package}} of data elements, guidelines, and {{instructions}} for creating library and cultural heritage resource metadata that are well-formed according to international models for user-focussed linked data applications. The underlying conceptual models for RDA are the <b>Functional</b> <b>Requirements</b> for Bibliographic Records (FRBR), <b>Functional</b> <b>Requirements</b> for Authority Data (FRAD), and <b>Functional</b> <b>Requirements</b> for Subject Authority Data (FRSAD) maintained by IFLA, and will be compliant with the IFLA Library Reference Model that consolidates them.|$|R
40|$|The present paper {{describes}} {{a method for}} non <b>functional</b> <b>requirements</b> elicitation in agreement with standardizing and quality policies for medical software, being its main goal to guarantee the consonance of such policies with the non <b>functional</b> <b>requirements,</b> when adopting new technologies and requirements for the existing software, {{as well as to}} define models to create those policies and to represent the non <b>functional</b> <b>requirements,</b> besides encouraging the creation of such policies in whatever institutions in lack of it. ...|$|R
40|$|Requirements {{engineering}} {{approaches have}} {{for a long time}} mainly focused on <b>functional</b> <b>requirements.</b> During the last 5 years, several approaches dealing specifically with non-functional requirements have emerged. They support the elicitation, documentation, verification and validation of non-functional requirements: sometimes only concentrating on the non-functional requirements, sometimes in conjunction with <b>functional</b> <b>requirements,</b> and sometimes in conjunction with architecture. The position we put forward in this paper is that <b>functional</b> <b>requirements,</b> non-functional requirements, and architecture must be treated together...|$|R
40|$|This paper {{introduces}} Axiomatic Design (AD) for {{top-down design}} of ergonomics systems. The Independence Axiom {{was used to}} demonstrate how design activity can be structured to simplify the design process. <b>Functional</b> <b>Requirements</b> (FR) are first specified {{at a high level}} of abstraction and corresponding high level Design Parameters (DP) are generated. Then lower level <b>Functional</b> <b>requirements</b> are generated, and corresponding lower level Design Parameters. To avoid iterative improvements of design, one should strive for a decoupled design. This means that for each <b>Functional</b> <b>Requirement</b> there should ideally be only one Design Parameter- and this design parameter should satisfy only one <b>functional</b> <b>requirement.</b> Two case studies were used to illustrate the AD procedure...|$|R
40|$|Requirements {{engineering}} is a challenging process in software development projects. Requirements, in general, are documented in natural language. They often have {{issues related to}} ambiguity, completeness and consistency. How {{to improve the quality}} of requirements documentation remains a classic research topic. This research aims at improving the way of editing and documenting <b>functional</b> <b>requirements.</b> We propose a meta-model to specify the semantic information of <b>functional</b> <b>requirements,</b> and deploy it in the customized wiki platform named Semantic REWiki to support requirements specification. Taken advantage of the collaborative and open feature of a wiki, Semantic REWiki can improve the unambiguousness, completeness and consistency of semantic information specification for <b>functional</b> <b>requirements.</b> Asiasanat:Requirement Engineering, <b>Requirements</b> Specification, <b>Functional</b> <b>Requirements,</b> Semantic Information, MediaWiki, Semantic MediaWik...|$|R
40|$|Despite the {{advances}} in software engineering since 1968, current methods for going from {{a set of}} <b>functional</b> <b>requirements</b> to a design are not as direct, repeatable and constructive as we would like. Progress with this fundamental problem is possible once we recognize that individual <b>functional</b> <b>requirements</b> represent fragments of behaviour, while a design that satisfies a set of <b>functional</b> <b>requirements</b> represents integrated behaviour. This perspective admits the prospect of constructing a design out of its requirements. A formal representation for individual <b>functional</b> <b>requirements,</b> called behavior trees makes this possible. Behaviour trees of individual <b>functional</b> <b>requirements</b> may be composed, one at a time, to create an integrated design behaviour tree. From this problem domain representation it is then possible to transition directly and systematically to a solution domain representation of the component architecture {{of the system and}} the behaviour designs of the individual components that make up the system - both are emergent properties. Full Tex...|$|R
40|$|This {{presentation}} discusses <b>Functional</b> <b>Requirements</b> for Bibliographic Records (FRBR) / <b>Functional</b> <b>Requirements</b> for Authority Data (FRAD) Intentions and Resource Description and Access (RDA). This presentation includes {{information on}} the background and intent of FRBR, FRAD, and RDA, user tasks, and current issues...|$|R
40|$|Non <b>functional</b> <b>requirements</b> must be {{selected}} for implementation together with <b>functional</b> <b>requirements</b> {{to enhance the}} success of software projects. Three approaches exist for performing the prioritization of non <b>functional</b> <b>requirements</b> using the suitable prioritization technique. This paper performs experimentation on three different complexity versions of the industrial software project using cost-value prioritization technique employing three approaches. Experimentation is conducted to analyze the accuracy of individual approaches and the variation of accuracy with {{the complexity of the}} software project. The results indicate that selecting non <b>functional</b> <b>requirements</b> separately, but in accordance with functionality has higher accuracy amongst the other two approaches. Further, likewise other approaches, it witnesses the decrease in accuracy with increase in software complexity but the decrease is minimal...|$|R
40|$|This paper aims to {{construct}} {{a common set of}} <b>functional</b> <b>requirements</b> for metadata systems based on the research of metadata system specifications at the National Digital Archives Program (NDAP) in Taiwan. Eight projects of the NDAP are chosen as a case study to examine the <b>functional</b> <b>requirements</b> of metadata systems across museums, libraries, archives, and herbaria communities. To enable deeper analysis of <b>functional</b> <b>requirements,</b> interviewing and system prototyping are also employed. The study concludes with four findings for metadata system functions and proposes two recommendations, including (1) a set of recommendations for content experts, metadata professionals, and system designers to develop a clear and appropriate metadata system; and (2) the spectrum of <b>functional</b> <b>requirements</b> for metadata system design and testing...|$|R
40|$|SummaryNon <b>functional</b> <b>requirements</b> must be {{selected}} for implementation together with <b>functional</b> <b>requirements</b> {{to enhance the}} success of software projects. Three approaches exist for performing the prioritization of non <b>functional</b> <b>requirements</b> using the suitable prioritization technique. This paper performs experimentation on three different complexity versions of the industrial software project using cost-value prioritization technique employing three approaches. Experimentation is conducted to analyze the accuracy of individual approaches and the variation of accuracy with {{the complexity of the}} software project. The results indicate that selecting non <b>functional</b> <b>requirements</b> separately, but in accordance with functionality has higher accuracy amongst the other two approaches. Further, likewise other approaches, it witnesses the decrease in accuracy with increase in software complexity but the decrease is minimal...|$|R
40|$|Abstract – In the {{conceptual}} design of mechanisms, {{the consideration of}} <b>functional</b> <b>requirements</b> is usually put off after the enumeration of kinematic structures. This design process can thus easily perform the enumeration of kinematic structures in an exhaustive manner. The degree of ingenuity involved can be greatly reduced. However, exactly since <b>functional</b> <b>requirements</b> are not taken into consideration during the enumeration process, numerous infeasible mechanisms are subsumed. It is necessary to evaluate each kinematic structure enumerated and screen out infeasible ones so that an inefficient procedure is yielded. In this paper, an efficient and systematic methodology for {{the conceptual}} design of mechanisms will be presented. It will be shown that <b>functional</b> <b>requirements</b> of mechanisms {{can be embodied as}} different categories of functional characteristics. Different aspects of functional characteristics can be systematic contrived from technical details from relevant patents. Through these <b>functional</b> characteristics, <b>functional</b> <b>requirements</b> can positively be utilized as the foundation of enumerating feasible mechanisms, instead of a negative use as the evaluation criteria for the enumerated kinematic structures. Hence, <b>functional</b> <b>requirements</b> can be brought into the enumeration process of kinematic structures to avoid creating numerous infeasible ones failed to satisfy <b>functional</b> <b>requirements.</b> The design efficiency can thus be greatly enhanced...|$|R
5000|$|Evaluate {{the system}} {{addresses}} business <b>functional</b> <b>requirements,</b> ...|$|R
5000|$|EIRENE <b>Functional</b> <b>Requirements</b> Specification EIRENE System Requirements Specification ...|$|R
40|$|Affecting {{multiple}} {{parts in}} software systems, security requirements often tangle with <b>functional</b> <b>requirements.</b> In order to separate crosscutting concerns and increase modularity, we propose to represent security requirements as aspects {{that can be}} woven into <b>functional</b> <b>requirements.</b> Using problem frames to model the <b>functional</b> <b>requirements,</b> weaving is achieved by composing the modules representing security aspects with the requirement models. Moreover, we provide guidance on how such security aspects are structured to implement a particular access control solution. As a result, such security aspects become reusable solution patterns to refine the structure of security-related problem...|$|R
50|$|Delusional {{parasitosis}} {{is divided}} into primary, <b>secondary</b> <b>functional,</b> and <b>secondary</b> organic groups.|$|R
5000|$|... #Subtitle level 2: <b>Functional</b> <b>requirements</b> {{of heart}} valve {{prostheses}} ...|$|R
5000|$|This test checks {{whether all}} <b>functional</b> <b>requirements</b> {{are present in}} the product. If this is the case the product is {{completed}} and the product is ready to be transferred to the customer. Else the project falls back to the software requirements activity and the <b>functional</b> <b>requirements</b> have to be adjusted.|$|R
5000|$|... {{what the}} system will do when {{operational}} (the <b>functional</b> <b>requirements)</b> ...|$|R
5000|$|UNI 8289: 1981, Building. <b>Functional</b> <b>requirements</b> {{of final}} users. Classification ...|$|R
5000|$|A <b>functional</b> <b>requirement</b> in a <b>functional</b> {{specification}} might {{state as}} follows: ...|$|R
