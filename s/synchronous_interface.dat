25|85|Public
2500|$|Synchronous {{dynamic random-access memory}} (SDRAM) is any dynamic random-access memory (DRAM) {{where the}} {{operation}} of its external pin interface is coordinated by an externally supplied clock signal. DRAM integrated circuits (ICs) produced from the early 1970s to mid-1990s used an asynchronous interface, in which input control signals have a direct effect on internal functions only delayed by the trip across its semiconductor pathways. SDRAM has a <b>synchronous</b> <b>interface,</b> whereby changes on control inputs are recognised after a rising edge of its clock input. [...] In SDRAM families standardized by JEDEC, the clock signal controls the stepping of an internal finite state machine that responds to incoming commands. These commands can be pipelined to improve performance, with previously started operations completing while new commands are received. The memory is divided into several equally sized but independent sections called banks, allowing the device to operate on a memory access commands in each bank simultaneously and speed access in an interleaved fashion. [...] This allows SDRAMs to achieve greater concurrency and higher data transfer rates than asynchronous DRAMs could.|$|E
2500|$|Both the Ph.D. and Psy.D. in Clinical Psychology {{require the}} student to, within four to seven years, {{complete}} the prescribed {{number of hours}} in didactic/classroom training, continuously engage in research {{with a member of}} the core-faculty (for Ph.D. students), complete 50 or more hours of professional continuing education units (CEUs), pass a written qualifying comprehensive examination, pass an oral qualifying comprehensive examination, complete two years of diverse clinical practica, complete a one-year pre-doctoral internship, author an original doctoral dissertation, and pass an oral dissertation defense (viva voce). [...] While the program permits students to take some history and theory-based courses online via <b>synchronous</b> <b>interface</b> (two-way live interactive face-to-face group video conferencing), all clinical courses must be taken in person, in full-time residence (Ph.D.) or in residential seminars each month (Psy.D.), at the brick and mortar campus. [...] The Ph.D. program uses the Northern Kentucky campus for in-residence coursework, seminars, dissertation defenses, and faculty research. [...] This facility is also home to the University of the Cumberlands Psychological Services Clinic, which is operated by doctoral-level psychology students and provides mental health services to Northern Kentucky. [...] All students are supervised by the clinic's director, a licensed Kentucky psychologist.|$|E
5000|$|... with <b>synchronous</b> <b>interface,</b> usually {{used for}} caches and other {{applications}} requiring burst transfers, up to 18 Mbit (256K Ã— 72) per chip ...|$|E
5000|$|Hardware {{compatible}} for SSI standard (<b>synchronous</b> serial <b>interface)</b> ...|$|R
40|$|In {{this paper}} we propose an algebra of <b>synchronous</b> {{scheduling}} <b>interfaces</b> which combines the expres-siveness of Boolean algebra for logical and functional behaviour with the min-max-plus arithmetic for quantifying the non-functional aspects of <b>synchronous</b> <b>interfaces.</b> The interface theory arises from a realisability interpretation of intuitionistic modal logic (also known as Curry-Howard-Isomorphism or propositions-as-types principle). The resulting algebra of interface types aims to provide a general setting for specifying type-directed and compositional analyses of worst-case scheduling bounds. It covers synchronous control flow under concurrent, multi-processing or multi-threading execution and permits precise statements about exactness and coverage of the analyses supporting a variety of abstractions. The paper illustrates the expressiveness of the algebra by way of some examples taken from network flow problems, shortest-path, task scheduling and worst-case reaction times in synchronous programming. ...|$|R
5000|$|Synchronous Serial Communication Interface: I2C, SPI, SSC and ESSI (Enhanced <b>Synchronous</b> Serial <b>Interface)</b> ...|$|R
50|$|A common {{solution}} to this problem is providing an I/O API that implements a <b>synchronous</b> <b>interface</b> by using non-blocking I/O internally, and scheduling another user thread or fiber while the I/O operation is in progress. Similar solutions can be provided for other blocking system calls. Alternatively, the program can be written to avoid the use of synchronous I/O or other blocking system calls.|$|E
50|$|ONFI {{created the}} Block Abstracted NAND {{addendum}} specification to simplify host controller design by relieving {{the host of}} the complexities of ECC, bad block management, and other low-level NAND management tasks. The ONFI Block Abstracted NAND revision 1.1 specification adds the high speed source <b>synchronous</b> <b>interface,</b> which provides up to a 5X improvement in bandwidth compared with the traditional asynchronous NAND interface.|$|E
5000|$|The {{advantage}} of the asynchronous serial connection is its simplicity. One disadvantage is its low efficiency in carrying data. This can be overcome by using a <b>synchronous</b> <b>interface.</b> In this type of interface, a clock signal is added on a separate wire, and the bits are transmitted in synchrony with the clock [...] - [...] the interface no longer has {{to look for the}} start and stop bits of each individual character [...] - [...] however, it is necessary to have a mechanism to ensure the sending and receiving clocks are kept in synchrony, so data is divided up into frames of multiple characters separated by known delimiters. There are three common coding schemes for framed communications [...] - [...] HDLC, PPP, and Ethernet ...|$|E
25|$|Sometimes SPI {{is called}} a {{four-wire}} serial bus, contrasting with three-, two-, and one-wire serial buses. The SPI may be accurately described as a <b>synchronous</b> serial <b>interface,</b> but it {{is different from the}} <b>Synchronous</b> Serial <b>Interface</b> (SSI) protocol, which is also a four-wire synchronous serial communication protocol. SSI Protocol employs differential signaling and provides only a single simplex communication channel.|$|R
50|$|These {{standards}} {{define the}} physical layer and {{data link layer}} of the distribution system. Devices interact with the physical layer via a <b>synchronous</b> parallel <b>interface</b> (SPI), <b>synchronous</b> serial <b>interface</b> (SSI), or asynchronous serial interface (ASI). All data is transmitted in MPEG transport streams with some additional constraints (DVB-MPEG). A standard for temporally-compressed distribution to mobile devices (DVB-H) was published in November 2004.|$|R
50|$|Sometimes SPI {{is called}} a {{four-wire}} serial bus, contrasting with three-, two-, and one-wire serial buses. The SPI may be accurately described as a <b>synchronous</b> serial <b>interface,</b> but it {{is different from the}} <b>Synchronous</b> Serial <b>Interface</b> (SSI) protocol, which is also a four-wire synchronous serial communication protocol. SSI Protocol employs differential signaling and provides only a single simplex communication channel.|$|R
50|$|Synchronous {{dynamic random-access memory}} (SDRAM) is any dynamic random-access memory (DRAM) {{where the}} {{operation}} of its external pin interface is coordinated by an externally supplied clock signal. DRAM integrated circuits (ICs) produced from the early 1970s to mid-1990s used an asynchronous interface, in which input control signals have a direct effect on internal functions only delayed by the trip across its semiconductor pathways. SDRAM has a <b>synchronous</b> <b>interface,</b> whereby changes on control inputs are recognised after a rising edge of its clock input. In SDRAM families standardized by JEDEC, the clock signal controls the stepping of an internal finite state machine that responds to incoming commands. These commands can be pipelined to improve performance, with previously started operations completing while new commands are received. The memory is divided into several equally sized but independent sections called banks, allowing the device to operate on a memory access commands in each bank simultaneously and speed access in an interleaved fashion. This allows SDRAMs to achieve greater concurrency and higher data transfer rates than asynchronous DRAMs could.|$|E
40|$|Interface {{specifications}} play {{an important}} role in component-based software development. An inter-face theory is a formal framework supporting composition, refinement and compatibility of interface specifications. We present different interface theories which use modal I/O-transition systems as their underlying domain for interface specifications: <b>synchronous</b> <b>interface</b> theories, which employ a synchronous communication schema, as well as a novel interface theory for asynchronous commu-nication where components communicate via FIFO-buffers. ...|$|E
40|$|Hardware/Software Interface {{plays an}} {{important}} role in co-design of the embedded computer system. It links the software part and the hardware part of the system. The design process supports software interface implementation and hardware interface synthesis. This report shows how the hardware and software interfaces can be implemented by using bus extended technology in embedded computer system, which includes the primitive interface, the <b>synchronous</b> <b>interface</b> and the data communication protocol between the hardware and the software...|$|E
40|$|This paper {{reports on}} some {{experiments}} on time <b>synchronous</b> <b>interfaces</b> between word recognition and parsing, performed with a beam decoder and a chart parser. Using the same acoustic models, language model, and unification grammar, bottom-up and two interactive protocols were implemented and examined. Results show that close integration is possible without unbearable time penalties, if restrictions from both modules {{are applied to}} focus the search process. (orig.) SIGLEAvailable from TIB Hannover: RR 5221 (9) +a / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekBundesministerium fuer Forschung und Technologie (BMFT), Bonn (Germany) DEGerman...|$|R
50|$|A Synchronous Serial Port (SSP) is a {{controller}} {{that supports}} the Serial Peripheral <b>Interface</b> (SPI), 4-wire <b>Synchronous</b> Serial <b>Interface</b> (SSI), and Microwire serial buses. A SSP uses a master-slave paradigm to communicate across its connected bus.|$|R
40|$|Abstract- This paper proposes the self-timed {{circuits}} FPGA based design. Quasi-delay insensitive circuit {{is introduced}} as asynchronous prototype. The designed focuses on asynchronous processor design. The processor employs asynchronous system bus, asynchronous cache, asynchronous DMA controller and <b>synchronous</b> <b>interfaces.</b> The system almost completely asynchrony operation except I/O devices and memory interfaces, itâ€˜s a limitation {{on the present}} time devices, the designed has been implemented on spartan- 3 E FPGA no. 3 S 500 EFG 320 by partitioning each module to prevent place and routing conflict, 100 -Mhz memory frequency connected, and consumed 141, 063 equivalent gate counts. Finally, the timing details of each instruction execution are shown...|$|R
40|$|This {{application}} note describes {{the implementation of}} a two-dimensional Rank Order filter. The reference design includes the RTL VHDL implementation of an efficient sorting algorithm. The design is parameterizable for input/output precision, color standards, filter kernel size, maximum horizontal resolution, and implementation options. The rank to be selected can be modified dynamically, and the actual horizontal resolution is picked up automatically from the input synchronization signals. The design has a fully <b>synchronous</b> <b>interface</b> through the ce, clk, and rst ports...|$|E
40|$|Any {{engineering}} designs can {{be viewed}} as systems, i. e., as collections of several components whose combined operation provides useful services. Components can be heterogeneous in nature and their interaction may be regulated [5] by some simple or complex means. Interface between Hardware & Software plays a very important role in co-design of the embedded system. Hardware/software [7] co-design means meeting system-level objectives by exploiting the synergism of hardware and software through their concurrent design. This paper shows how hardware & software interfaces [3] can be implemented using <b>synchronous</b> <b>interface</b> design...|$|E
40|$|International audienceWe propose {{synchronous}} interfaces, a new interface {{theory for}} discrete-time systems. We use an application to time-triggered scheduling {{to drive the}} design choices for our formalism; in particular, additionally to deriving useful mathematical properties, we focus on providing a syntax which is adapted to natural high-level system modeling. As a result, we develop an interface model that relies on a guarded-command based language and is equipped with shared variables and explicit discrete-time clocks. We define all standard interface operations: compatibility checking, composition, refinement, and shared refinement. Apart from the <b>synchronous</b> <b>interface</b> model, the contribution {{of this paper is}} the establishment of a formal relation between interface theories and real-time scheduling, where we demonstrate a fully automatic framework for the incremental computation of time-triggered schedules...|$|E
50|$|R8C Tiny is {{series of}} {{low-cost}} microcontrollers from Renesas. Having 16-bit CPU core M16C with 8-bit bus, the R8C Tiny series offer {{wide variety of}} on-chip peripherals include 8-bit Multifunction Timers, UART/Clock <b>Synchronous</b> Serial <b>Interface,</b> Input Capture Timer, Watchdog Timer, etc.|$|R
50|$|Most {{models have}} a queued serial module (QSM) which {{provides}} both <b>synchronous</b> Serial Peripheral <b>Interface</b> (SPI), and logic-level RS232 UART capabilities.|$|R
25|$|SD {{cards and}} host devices {{initially}} communicate through a <b>synchronous</b> one-bit <b>interface,</b> where the host device provides a clock signal that strobes single bits {{in and out}} of the SD card. The host device thereby sends 48-bit commands and receives responses. The card can signal that a response will be delayed, but the host device can abort the dialogue.|$|R
40|$|Reuse of IP blocks {{has been}} {{advocated}} {{as a means}} to conquer the complexity of todayâ€™s system-on-chip (SoC) designs. Component integration and verification in such systems is a cumbersome and time consuming process. We present <b>synchronous</b> <b>interface</b> automata (SIA) as a framework for modelling communication aspects of IP blocks, to serve as a unifying model in the top-down refinement, synthesis and verification stages of the design process. We show how to formally specify component composition and protocol compatibility in our model, and how we can apply the model to the problem of synthesising converters for incompatible protocols of interaction between IP blocks. Our model is based on the game theoretic framework of interface automata, suitably adapted for practical modelling of IP blocks. 1...|$|E
40|$|In {{this paper}} we extend {{the work of}} Alfaro, Henzinger et al. on {{interface}} theories for component-based design. Existing interface theories often fail to capture functional relations between the inputs and outputs of an interface. For example, a simple <b>synchronous</b> <b>interface</b> that takes as input a number n â‰¥ 0 and returns, at the same time, as output n + 1, cannot be expressed in existing theories. In this paper we provide a theory of relational interfaces, where such input-output relations can be captured. Our theory supports synchronous interfaces, both stateless and stateful. It includes explicit notions of environments and pluggability, and satisfies fundamental properties such as preservation of refinement by composition, and characterization of pluggability by refinement. We achieve these properties by making reasonable restrictions on feedback loops in interface compositions...|$|E
40|$|Field-programmable gate arrays (FPGAs) are an {{important}} implementation medium for digital logic. Unfortunately, they currently suffer from poor silicon area utilization due to routing constraints. In this paper we present Triptych, an FPGA architecture designed to achieve improved logic density with competitive performance. This is done by allowing a per-mapping tradeoff between logic and routing resources, and with a routing scheme designed to match the structure of typical circuits. We show that this yields a logic density improvement of up to a factor of 3. 5 over commercial FPGAs, with comparable performance. We also describe Montage, the first FPGA architecture to fully support asynchronous and <b>synchronous</b> <b>interface</b> circuits. 1 Introduction Field-programmable gate arrays (FPGAs) have quickly become {{an important}} medium {{for the implementation of}} digital logic. These arrays exploit the increasing capacity of integrated circuits to provide designers with reconfigurable logic that can [...] ...|$|E
40|$|International audienceDataflow {{models of}} {{computation}} {{are widely used}} for the specification, analysis, and optimization of Digital Signal Processing (DSP) applications. In this talk, we present the Parameterized and <b>Interfaced</b> <b>Synchronous</b> Dataflow (Ï€SDF) model that addresses the important challenge of managing dynamics in DSP-oriented representations. In addition to cap-turing application parallelism, which is an intrinsic feature of dataflow models, Ï€SDF enables the specification of hierarchical and reconfigurable applications. The <b>Synchronous</b> Parameterized and <b>Interfaced</b> Dataflow Embedded Runtime (SPIDER) is also presented to support the execution of Ï€SDF specifications on heterogeneous Multiprocessor Systems-on-Chips (MPSoCs) ...|$|R
40|$|A Time to Digital Converter was {{designed}} (CMOS 0. 35 Î¼m) to perform coincidence detection in a Liquid Xenon PET prototype. This circuit {{proved to be}} able to operate at 150 K, while showing a resolution better than 250 ps. The circuit enables a low readout dead time (< 90 ns) and provides a fully <b>synchronous</b> digital <b>interface</b> for easy data retrieval...|$|R
40|$|Abstract â€” Power {{consumption}} can {{be reduced}} in clock of large VLSI by adapting Globally Asynchronous Locally Synchronous design style (GALS). This paper, reviewed a design methodology for a globally asynchronous router including locally-synchronous and asynchronous modules and proposed a novel design for Input Buffer of the mentioned router. This buffer, have used special Latches and Single Rail coding with lower power consumption and fewer numbers of transistors and transmission gates comparing to previous designs with PCFBs (you should put full name and abbreviation) that use Dual Rail coding with very high power consumption {{and a large number}} of transistors. The modules are equipped with Asynchronous to/from <b>Synchronous</b> <b>interfaces.</b> For obtaining Fault Coverage, Stuck-at fault has been injected to the circuit. The results show an average power saving of about 73. 8 % and Fault coverage of 53 %. The designed input buffer has been implemented with VHDL code and simulated in Model Sim Simulator...|$|R
40|$|In {{order to}} {{automate}} design reuse, methods for composing system components must be developed. The {{goal of this}} research is to automate the process of generating interfaces between hardware subsystems. The algorithms presented here can be used to generate a cycle-accurate, <b>synchronous</b> <b>interface</b> between two hardware subsystems given an HDL model of each subsystem. These algorithms have been implemented in the POLARIS hardware composition tool and have been used to generate an interface between a MIPS microprocessor and the SRAM that comprises its secondary cache. Interface generation for the MIPS R 4000 is described. 1. Introduction The increasing complexity of electronic systems is forcing designers to consider, if not implement, design reuse and intellectual property sharing. As this methodology matures, a new breed of tools will be required to automate component selection, subsystem scheduling, and system composition. This paper presents a mechanism for composing hardware blocks that [...] ...|$|E
40|$|We {{present a}} {{systematic}} {{way for the}} design and verification of real-time systems using Duration Calculus. We model real-time systems as synchronous systems and formalise the <b>synchronous</b> <b>interface</b> between {{the components of the}} systems as duration calculus formulae expressing the approximation between state variables. Preliminary Designs are then derived from the safety requirements and the interface. Functionality requirements are incorporated to be consistent with the Preliminary Designs. We also use our technique in specification and verification of Biphase Mark Protocol. The verification presented in this paper can be reused for other problems as well. Do Van Nhon is a doctor candidate in the Department of Math and Computer Science, National University of Ho Chi Minh City, Vietnam. He is a Fellow of UNU/IIST from September 1999 to May 2000. His research interests are Formal Methods, Design and Verification of Real-time Systems. E-mail: dvn@iist. unu. edu Dang Van Hung is from the Ins [...] ...|$|E
40|$|Suppose one has {{a system}} that has a <b>synchronous</b> <b>{{interface}}</b> with its environment. Now, suppose that one refines this system and changes its interface to an asynchronous one. Whatever is meant here by refinement, it cannot be standard (process) refinement since the interface actions have changed; nor is it action refinement in the sense that a process is substituted for an action, as the intention presumably is to allow the system to proceed without having to wait until the environment is willing to synchronize. In this paper we propose a notion of interface refinement of which changing synchronous to asynchronous communication is an instance; as is in fact the reverse change. This notion of interface refinement is quite powerful; it generalizes all existing methods w. r. t. the class of interface changes that it allows. The major part of the paper is concerned with developing proof rules with which to verify interface refinement. We use (linear) temporal logic as specification language and an adaptation of the Manna-Pnueli verification framework. The method is illustrated by verifying an interface change in which synchronous communication is replaced by asynchronous send and receive. Proofs of the various theorems and lemma's are delegated to an appendix...|$|E
50|$|The {{universal}} {{serial interface}} (USI) module is a <b>synchronous</b> serial communication <b>interface</b> with a data length {{of up to}} 16-bits and can support SPI and IÂ²C communication with minimal software.|$|R
50|$|The 68030 can be {{used with}} the 68020 bus, in which case its {{performance}} is similar to 68020 that it was derived from. However, the 68030 provides an additional <b>synchronous</b> bus <b>interface</b> which, if used, accelerates memory accesses up to 33% compared to an equally clocked 68020. The finer manufacturing process allowed Motorola to scale the full-version processor to 50 MHz. The EC variety topped out at 40 MHz.|$|R
5000|$|PS/2 systems {{introduced}} a new specification for the keyboard and mouse interfaces, which are still in use today and are thus called [...] "PS/2" [...] interfaces. The PS/2 keyboard interface was electronically identical to the long-established AT interface, but the cable connector was changed from the 5-pin DIN connector to the smaller 6-pin mini-DIN interface. The same connector and a similar <b>synchronous</b> serial <b>interface</b> {{was used for the}} PS/2 mouse port.|$|R
