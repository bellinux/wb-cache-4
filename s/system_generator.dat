315|2062|Public
5000|$|The Game Master's Kit - A game master's {{screen for}} Rogue Trader and a booklet that {{includes}} a pre-written adventure, an NPC starship generator and a star <b>system</b> <b>generator</b> ...|$|E
50|$|The Vivado IP Integrator allows {{engineers}} to quickly integrate and configure IP {{from the large}} Xilinx IP library. The Integrator is also tuned for MathWorks Simulink designs built with Xilinx’s <b>System</b> <b>Generator</b> and Vivado High-Level Synthesis.|$|E
50|$|The {{hydraulic}} system include an engine-driven hydraulic pump, a hydraulic reservoir/accumulator, and filter. The electrical systems involve a 24-volt battery, a high-energy ignition <b>system,</b> <b>generator,</b> landing and taxi lamps, navigation lighting, and an anti-collision beacon. Pneumatic systems comprise a bleed air compressor, de-icing/de-misting measures, and {{elements of the}} environmental control system.|$|E
40|$|Reactive {{power sources}} in power <b>system</b> nodes: <b>generators</b> and static {{reactive}} power compensators, {{are controlled by}} control <b>systems.</b> <b>Generators</b> – by generator node group controllers, compensators – by voltage controllers. The paper presents issues of these control systems’ coordination and proposals for its implementation...|$|R
50|$|In AC {{electrical}} power systems, a synchroscope is {{a device that}} indicates {{the degree to which}} two <b>systems</b> (<b>generators</b> or power networks) are synchronized with each other.|$|R
40|$|A {{key problem}} in {{software}} engineering is building complex software systems economically. We believe that domain-specific software <b>system</b> <b>generators</b> is a promising technology for attacking this problem. Generators are realizations of domain models that explain how software systems in a target domain can be assembled from previously written components. Thus, generators require significant problems in software reuse to be solved. In this paper, we review a related set of projects {{that we have}} undertaken to understand better the unusual software design techniques that are required and to evaluate the productivity and performance potentials of software <b>system</b> <b>generators.</b> ...|$|R
50|$|Xilinx's Embedded Developer's Kit (EDK) {{supports}} the embedded PowerPC 405 and 440 cores (in Virtex-II Pro and some Virtex-4 and -5 chips) and the Microblaze core. Xilinx's <b>System</b> <b>Generator</b> for DSP implements DSP designs on Xilinx FPGAs. A freeware {{version of its}} EDA software called ISE WebPACK is used with some of its non-high-performance chips. Xilinx is the only (as of 2007) FPGA vendor to distribute a native Linux freeware synthesis toolchain.|$|E
50|$|Motion {{graphics}} {{continue to}} evolve {{as an art form}} with the incorporation of sweeping camera paths and 3D elements. Maxon's CINEMA 4D, plugins such as MoGraph and Adobe After Effects. Despite their relative complexity, Autodesk's Maya and 3D Studio Max are widely used for the animation and design of motion graphics, as is Maya and 3D Studio which uses a node-based particle <b>system</b> <b>generator</b> similar to Cinema 4D's Thinking Particles plugin. There are also some other packages in Open Source panorama, which are gaining more features and adepts in order to use in a motion graphics workflow, while Blender integrates several of the functions of its commercial counterparts.|$|E
50|$|The {{most common}} APU for a {{commercial}} truck is a small diesel engine with its own cooling system, heating <b>system,</b> <b>generator</b> or alternator system with or without inverter, and air conditioning compressor, housed in an enclosure and mounted {{to one of the}} frame rails of a semi-truck. Other designs fully integrate the auxiliary cooling, heating, and electrical components throughout the chassis of the truck. The APU generator engine is a fraction of the main engine's size and uses a fraction of the fuel; some models can run for eight hours on 1 gal of diesel. The generator also powers the main engine's block and fuel system heaters, so the main engine can be started easily right before departure if the APU is allowed to run for a period beforehand. These units are used to provide climate control and electrical power for the truck's sleeper cab and engine block heater during downtime on the road as mandated by statewide laws for idle reduction.|$|E
50|$|Bosch's core {{products}} are automotive components (including brakes, controls, electrical drives, electronics, fuel <b>systems,</b> <b>generators,</b> starter motors and steering systems), industrial products (including drives and controls, packaging technology and consumer goods) and building products (including household appliances, power tools, security systems and thermotechnology).|$|R
40|$|Low {{frequency}} {{pressure generator}} is built to provide sinusoidal driving function in frequency range from 0. 05 to 50 Hz for frequency response testing of pressure transducers used in liquid-filled <b>systems.</b> <b>Generator</b> consists of piston-in-cylinder, scotch-yoke mechanism machined into piston, and adjustable eccentric...|$|R
5000|$|The syzygy problem consists, given k {{elements}} [...] in , {{to provide}} a <b>system</b> of <b>generators</b> of the module of the syzygies of [...] that is a <b>system</b> of <b>generators</b> of the submodule of those elements [...] in k that are solution of the homogeneous equation ...|$|R
50|$|Auxiliary {{power units}} (APUs) are {{commonly}} used on semi-trucks to provide electric power to the cabin at times when the cabin or cargo need to be heated or cooled while the vehicle is not in motion {{for an extended period}} of time. This period of time is usually overnight, when the truck driver has parked at a truck stop for some rest. Instead of having to keep the engine idling all night just to maintain the temperature in the cabin, the APU can turn on and provide power. Most commonly, the APU will have its own cooling system, heating <b>system,</b> <b>generator,</b> and air conditioning compressor. Sometimes the APU will be integrated into those components of the semi itself. APUs are also commonly used in police cruisers as an alternative to idling. Since a significant amount of time is spent in the cruiser while stationary, idling becomes a major source of cost to police fleets, though, most police fleets have idling policies. The drawback of APUs on police cruisers is that they are normally kept in the trunk where they take up valuable space.|$|E
50|$|In {{their level}} of abstraction, HDLs have been {{compared}} to assembly languages. There are moves to raise the abstraction level of the design {{in order to reduce}} the complexity of programming in HDLs, creating a sub-field called high-level synthesis. Companies such as Cadence, Synopsys and Agility Design Solutions are promoting SystemC as a way to combine high-level languages with concurrency models to allow faster design cycles for FPGAs than is possible using traditional HDLs. Approaches based on standard C or C++ (with libraries or other extensions allowing parallel programming) are found in the Catapult C tools from Mentor Graphics, and the Impulse C tools from Impulse Accelerated Technologies. Annapolis Micro Systems, Inc.'s CoreFire Design Suite and National Instruments LabVIEW FPGA provide a graphical dataflow approach to high-level design entry and languages such as SystemVerilog, SystemVHDL, and Handel-C seek to accomplish the same goal, but are aimed at making existing hardware engineers more productive, rather than making FPGAs more accessible to existing software engineers. It is also possible to design hardware modules using MATLAB and Simulink using the Mathworks HDL Coder tool or Xilinx <b>System</b> <b>Generator</b> (XSG) (formerly Accel DSP) from Xilinx.|$|E
40|$|This {{application}} note describes the steps {{for using the}} different clocking resources on the XtremeDSP ™ Development Kits developed by Nallatech. In addition to {{a detailed description of}} the clock resources, the clocking schemes used for Hardware Cosimulation with <b>System</b> <b>Generator</b> for DSP are explained and clocking suggestions for using the board as a stand-alone board are given. This {{application note}} includes five design examples with accompanying reference designs, (that is, <b>System</b> <b>Generator</b> for DSP models and HDL design files), demonstrating how to use different combinations of clocks, as well as different ways to generate the target designs (using <b>System</b> <b>Generator,</b> ISE ™ software, or a combination of both). After reading this document, users will know: • How to use the different clocking resources on the different XtremeDSP Development Kits How <b>System</b> <b>Generator</b> for DSP configures the clocking on these kits during Hardwar...|$|E
50|$|The {{operating}} <b>systems</b> the <b>generators</b> can run on.|$|R
40|$|Power system {{dynamics}} such as short circuits, auto-reclosures, line switching, or fluctuations due to significant variations in load cause the <b>system’s</b> <b>generators</b> {{to adjust to}} the new conditions in the network. These large disturbances may cause generators {{in one part of the}} system to accelerate, while generators i...|$|R
5000|$|ASF+SDF_Meta_Environment, {{programming}} language specification and prototyping <b>system,</b> IDE <b>generator</b> ...|$|R
40|$|Abstract. <b>System</b> <b>Generator</b> is a {{high level}} design tool well suited to {{creating}} custom DSP data paths in FPGAs. While providing a high level abstraction of an FPGA circuit, {{it can be used}} to build designs comparable to hand crafted implementations in terms of area and performance. In this paper we use a MAC-based FIR filter design example to demonstrate the interplay between mathematical abstraction and hardware-centric considerations enabled by <b>System</b> <b>Generator.</b> We demonstrate how an algorithm can be efficiently mapped onto FPGA resources and present the hardware results of several <b>System</b> <b>Generator</b> FIR filter implementations. ...|$|E
40|$|Xilinx <b>System</b> <b>generator</b> is used {{to design}} {{efficient}} DSP algorithm on FPGA. In this paper Finite Impulse Response (FIR) filter is designed using Simulink in Xilinx <b>System</b> <b>generator.</b> The filters have been designed using Distributed Arithmetic (DA) Algorithm. This design has been further synthesized on Xilinx Virtex- 4 FPGA kit. Finally comparison is done between the results obtained from the software simulations and those from FPGA using hardware co-simulation...|$|E
40|$|This article {{presents}} a design methodology for designing an {{artificial neural network}} as an equalizer for a binary signal. Firstly, the system is modelled in floating point format using Matlab. Afterward, the design is described for a Field Programmable Gate Array (FPGA) using fixed point format. The FPGA design {{is based on the}} <b>System</b> <b>Generator</b> from Xilinx, which is a design tool over Simulink of Matlab. <b>System</b> <b>Generator</b> allows one to design in a fast and flexible way. It uses low level details of the circuits and the functionality of the system can be fully tested. <b>System</b> <b>Generator</b> can be used to check the architecture and to analyse the effect of the number of bits on the system performance. Finally the <b>System</b> <b>Generator</b> design is compiled for the Xilinx Integrated System Environment (ISE) and the system is described using a hardware description language. In ISE the circuits are managed with high level details and physical performances are obtained. In the Conclusions section, some modifications are proposed to improve the methodology and to ensure portability across FPGA manufacturers...|$|E
40|$|A {{key problem}} in {{software}} engineering is building complex software systems economically [...] . In this paper, we review a related set of projects {{that we have}} undertaken to understand better the unusual software design techniques that are required and to evaluate the productivity and performance potentials of software <b>system</b> <b>generators...</b>|$|R
40|$|Expert {{systems are}} built {{with the help}} of: {{specialised}} programming languages or expert <b>system</b> <b>generators</b> (shell). But this structure was reached after tens of years of work and research, because expert systems are nothing but pragmatic capitalisation {{of the results of}} research carried out in artificial intelligence and theory of knowledge...|$|R
40|$|The Yangian of {{the strange}} Lie superalgebras in Drinfel'd {{realization}} is defined. The current <b>system</b> <b>generators</b> and defining relations are described. Comment: This is {{a contribution to the}} Vadim Kuznetsov Memorial Issue on Integrable Systems and Related Topics, published in SIGMA (Symmetry, Integrability and Geometry: Methods and Applications) at [URL]...|$|R
40|$|Abstract. As FPGAs {{increase}} in size {{there is a}} need for improved productivity, and this includes new design flows and tools. <b>System</b> <b>Generator,</b> from Xilinx, is a high-level block-based design tool that offers bit and cycle accurate simulation. In this paper, we discuss the use of <b>System</b> <b>Generator</b> to design a reconfigurable video encryption system. It includes the design of the AES (Advanced Encryption System) and Enigma encryption cores. This paper also demonstrates the use of Nallatech block-sets within <b>System</b> <b>Generator</b> to provide a synthesisable link straight to hardware. As a result of using this design flow, we are able to efficiently implement our system and algorithms with a significant improvement on traditional design times, without compromise for performance or area. ...|$|E
40|$|The {{development}} in electronics increases {{the demand for}} good design methods and design tools {{in the field of}} electrical engeneering. To improve their design methods Ericsson Microwave Systems AB is interested in using computer tools to create a link between the specification and the implementation of a digital system in a FPGA. Xilinx <b>System</b> <b>Generator</b> for DSP is a tool for implementing a model of a digital signalprocessing algorithm in a Xilinx FPGA. To evaluate Xilinx <b>System</b> <b>Generator</b> two testcases has been designed. The testcases are selected to represent the FPGA designs made at Ericsson Microwave Systems. The testcases show that Xilinx <b>System</b> <b>Generator</b> can be used to effectivly implement a model made in Simulink in a FPGA from Xilinx. The result of the implementation is comparable to the implementation of VHDL code written by hand. The use of tools for implementation of a model in hardware cause change in the design methods used at Ericsson Microwave Systems. The higher level of abstraction introduced by <b>System</b> <b>Generator</b> results in the design decisions made at system level having a higher impact on the final realization...|$|E
30|$|We {{made use}} of a rapid-prototyping tool (Xilinx <b>System</b> <b>Generator)</b> for {{developing}} the vehicular channel emulators. In order to evaluate multi-antenna systems we {{have taken advantage of}} one of the <b>System</b> <b>Generator</b> features: its ability to exchange data between a design running in the FPGA and a software implementation that is executed on a PC. In fact, during the measurements described in Section “Performance measurements” we used MATLAB/Simulink software transceivers while the vehicular channel emulator was running on an external FPGA.|$|E
5000|$|<b>System</b> Clock <b>Generator</b> Xin-X out (High-Low Speed On Chip Oscillator) ...|$|R
50|$|A network {{analyzer}} system {{was essentially a}} scale model of the electrical properties of a specific power <b>system.</b> <b>Generators,</b> transmission lines, and loads were represented by miniature electrical components with scale values {{in proportion to the}} modeled system. Model components were interconnected with flexible cords to represent the schematic diagram of the modeled system.|$|R
40|$|The {{objective}} of this master's thesis is to compare two different <b>generator</b> <b>systems</b> for wind turbines. It is the doubly fed induction <b>generator</b> <b>system</b> with three stage gearbox and the direct drive permanent magnet <b>generator</b> <b>system.</b> The comparison of <b>generator</b> <b>systems</b> is based on annual energy production for a given wind climate. For comparison a 3 MW, 15 rpm wind turbine is used. Modelling of a turbine rotor, gearbox and converters were done. Design of two generators was done and their performance was examined...|$|R
40|$|Digital VLSI {{implementation}} of an auditory filter for speech processor of cochlear implant (CI) is proposed. Optimized design for hardware {{implementation of}} the filter with respect to area, power and speed is the significant criterion {{for the implementation of}} auditory filter for a CI. A digital filter is designed using the <b>System</b> <b>Generator</b> 10. 1 through the mathematical model of the FIR filter developed in Simulink using FDA tool. It is further downloaded onto the Spartan 3 E FPGA Kit. Translation of the Simulink model into a hardware realization is done using <b>system</b> <b>generator.</b> Thus simulation is done both in the hardware and software environment. VHDL code for the filter is developed using the coefficients generated from FDA tool of <b>System</b> <b>generator.</b> The area, power and delay analysis for the design is done using SYNOPSYS Design Vision tool with 180 micron technology...|$|E
40|$|Abstract — This paper {{presents}} {{concept of}} hardware software co-simulation for image processing using Xilinx <b>System</b> <b>Generator</b> (XSG). This technique, provides {{a set of}} Simulink blocks (models) for several hardware operations that could be implemented on various Xilinx FPGA. This paper presents an efficient architecture for various image processing algorithms for negatives, image enhancement, contrast stretching, for grayscale and color images by using fewest possible <b>System</b> <b>Generator</b> Blocks. Performances of theses architectures implemented in FPGA card XUPV 5 -LX 110 T prototyping Virtex 5 were presented...|$|E
30|$|Using HDL {{generated}} by <b>System</b> <b>Generator</b> may be inconvenient for large control systems described with the XSG blockset, {{as it can}} require {{a couple of days}} of synthesis time. <b>System</b> <b>Generator</b> can be asked to produce a corresponding NGC binary netlist file instead, which is then treated as a black box to be imported and integrated into an XPS project. This considerably reduces the synthesis time needed. The process of instantiating a Netlist Core in a custom peripheral (e.g., user_logic.vhd), performed following the steps documented in XPS user guide.|$|E
5000|$|... #Caption: A Ward Leonard Control <b>system</b> with <b>generator</b> {{and motor}} {{connected}} directly.|$|R
2500|$|A central {{battery system}} {{consisting}} of {{lead acid cell}} units [...] is provided to supply emergency electric power, when needed, to essential items such as the power station's control <b>systems,</b> communication <b>systems,</b> <b>generator</b> hydrogen seal <b>system,</b> turbine lube oil pumps, and emergency lighting. This is essential for a safe, damage-free shutdown of the units in an emergency situation.|$|R
40|$|AbstractAn A-hypergeometric {{system is}} not irreducible, if its {{parameter}} vector is resonant. In this paper, we present a way of computing a finite <b>system</b> of <b>generators</b> of the first syzygy module of an irreducible A-hypergeometric quotient. In particular, if the semigroup generated by A is simplicial and scored, then an explicit <b>system</b> of <b>generators</b> is given...|$|R
