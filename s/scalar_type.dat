104|216|Public
25|$|The cosmic {{microwave}} background is polarized {{at the level of}} a few microkelvin. There are two types of polarization, called E-modes and B-modes. This is in analogy to electrostatics, in which the electric field (E-field) has a vanishing curl and the magnetic field (B-field) has a vanishing divergence. The E-modes arise naturally from Thomson scattering in a heterogeneous plasma. The B-modes are not produced by standard <b>scalar</b> <b>type</b> perturbations. Instead they can be created by two mechanisms: the first one is by gravitational lensing of E-modes, which has been measured by the South Pole Telescope in 2013; the second one is from gravitational waves arising from cosmic inflation. Detecting the B-modes is extremely difficult, particularly as the degree of foreground contamination is unknown, and the weak gravitational lensing signal mixes the relatively strong E-mode signal with the B-mode signal.|$|E
500|$|By default, <b>scalar</b> <b>type</b> {{declarations}} follow weak typing principles. So, for example, if a parameter's type is int, PHP {{would allow}} not only integers, but also convertible numeric strings, floats or booleans {{to be passed}} to that function, and would convert them. However, PHP 7 has a [...] "strict typing" [...] mode which, when used, disallows such conversions for function calls and returns within a file.|$|E
2500|$|... {{consists}} of inserting a quark model in a perturbative vacuum inside {{a volume of}} space called a bag. Outside this bag is the real QCD vacuum, whose effect is taken into account through the difference between energy density of the true QCD vacuum and the perturbative vacuum (bag constant [...] ) and boundary conditions imposed on the quark wave functions and the gluon field. The hadron spectrum is obtained by solving the Dirac equation for quarks and the Yang–Mills equations for gluons. The wave functions of the quarks satisfy the boundary conditions of a fermion in an infinitely deep potential well of <b>scalar</b> <b>type</b> {{with respect to the}} Lorentz group. The boundary conditions for the gluon field are those of the dual color superconductor. The role of such a superconductor is attributed to the physical vacuum of QCD. Bag models strictly prohibit the existence of open color (free quarks, free gluons, etc.) and lead in particular to string models of hadrons.|$|E
25|$|Frege, a Haskell-like {{language}} with Java's <b>scalar</b> <b>types</b> and good Java integration.|$|R
5000|$|Type {{verification}} {{was limited}} to <b>scalar</b> <b>types</b> because the API is based on format strings. This could be problematic if pointers must be dereferenced by the tracer code.|$|R
50|$|Harbour has 6 <b>scalar</b> <b>types</b> : Nil, String, Date, Logical, Numeric, Pointer, and 4 complex types: Array, Object, CodeBlock, and Hash. A scalar holds {{a single}} value, {{such as a}} string, numeric, or {{reference}} to any other type. Arrays are ordered lists of <b>scalars</b> or complex <b>types,</b> indexed by number, starting at 1. Hashes, or associative arrays, are unordered collections of any type values indexed by their associated key, which may be of any <b>scalar</b> or complex <b>type.</b>|$|R
50|$|The {{implicit}} copy constructor {{of a class}} calls base copy constructors and copies {{its members}} by means appropriate to their type. If it is a class type, the copy constructor is called. If it is a <b>scalar</b> <b>type,</b> the built-in assignment operator is used. Finally, if it is an array, each element is copied in the manner appropriate to its type.|$|E
5000|$|By default, <b>scalar</b> <b>type</b> {{declarations}} follow weak typing principles. So, for example, if a parameter's type is , PHP {{would allow}} not only integers, but also convertible numeric strings, floats or booleans {{to be passed}} to that function, and would convert them. However, PHP 7 has a [...] "strict typing" [...] mode which, when used, disallows such conversions for function calls and returns within a file.|$|E
5000|$|PHP 5.3, 5.4, 5.5, 5.6, 7.0, 7.1 support, {{including}} generators, coroutines, the finally keyword, list in foreach, using empty (...) on {{the result}} of function calls and other expressions, traits, closures, class member access on instantiation, short array syntax, array dereferencing on function call, binary literals, expressions in static calls, it supports return types and <b>scalar</b> <b>type</b> hints and constant visibility, etc. It {{can be used for}} both modern and legacy PHP-based projects.|$|E
5|$|PHP 7 also {{introduced}} new language features, including return type declarations for functions, which complement the existing parameter type declarations, {{and support for}} the <b>scalar</b> <b>types</b> (integer, float, string, and boolean) in parameter and return type declarations.|$|R
40|$|We {{present a}} {{technique}} for defining graphical depictions {{for all the}} data types defined in an algorithm. The ability to display arbitrary combinations of an algorithm's data objects in a common frame of reference, coupled with interactive control of algorithm execution, provides a powerful way to understand algorithm behavior. Type definitions are constrained so that all primitive values occurring in data objects are assigned <b>scalar</b> <b>types.</b> A graphical display, including user interaction with the display, is modeled by a special data type. Mappings from the <b>scalar</b> <b>types</b> into the display model type provide a simple user interface for controlling how all data types are depicted, {{without the need for}} type-specific graphics logic...|$|R
50|$|A major {{mismatch}} between existing relational and OO languages {{is the type}} system differences. The relational model strictly prohibits by-reference attributes (or pointers), whereas OO languages embrace and expect by-reference behavior. <b>Scalar</b> <b>types</b> and their operator semantics can be vastly different between the models, causing problems in mapping.|$|R
50|$|A PDS type in C++, or Plain Old C++ Object, {{is defined}} as either a <b>scalar</b> <b>type</b> or a PDS class. A PDS class has no {{user-defined}} copy assignment operator, no user-defined destructor, and no non-static data members that are not themselves PDS. Moreover, a PDS class must be an aggregate, meaning it has no user-declared constructors, no private nor protected non-static data, no virtual base classes and no virtual functions. The standard includes statements about how PDS must behave in C++. The type_traits library in the C++ Standard Library provides a template named is_pod {{that can be used}} to determine whether a given type is a POD.|$|E
50|$|The cosmic {{microwave}} background is polarized {{at the level of}} a few microkelvin. There are two types of polarization, called E-modes and B-modes. This is in analogy to electrostatics, in which the electric field (E-field) has a vanishing curl and the magnetic field (B-field) has a vanishing divergence. The E-modes arise naturally from Thomson scattering in a heterogeneous plasma. The B-modes are not produced by standard <b>scalar</b> <b>type</b> perturbations. Instead they can be created by two mechanisms: the first one is by gravitational lensing of E-modes, which has been measured by the South Pole Telescope in 2013; the second one is from gravitational waves arising from cosmic inflation. Detecting the B-modes is extremely difficult, particularly as the degree of foreground contamination is unknown, and the weak gravitational lensing signal mixes the relatively strong E-mode signal with the B-mode signal.|$|E
5000|$|Strictly, {{these models}} are not {{models of the}} QCD vacuum, but of {{physical}} single particle quantum states [...] - [...] the hadrons. The model proposed originally in 1974 by A. Chodos et al. consists of inserting a quark model in a perturbative vacuum inside a volume of space called a bag. Outside this bag is the real QCD vacuum, whose effect is taken into account through the difference between energy density of the true QCD vacuum and the perturbative vacuum (bag constant [...] ) and boundary conditions imposed on the quark wave functions and the gluon field. The hadron spectrum is obtained by solving the Dirac equation for quarks and the Yang-Mills equations for gluons. The wave functions of the quarks satisfy the boundary conditions of a fermion in an infinitely deep potential well of <b>scalar</b> <b>type</b> {{with respect to the}} Lorentz group. The boundary conditions for the gluon field are those of the dual color superconductor. The role of such a superconductor is attributed to the physical vacuum of QCD. Bag models strictly prohibit the existence of open color (free quarks, free gluons, etc.) and lead in particular to string models of hadrons.|$|E
50|$|S-algol {{provides}} true constant values, objects whose value {{cannot be}} updated. This idea {{is due to}} Strachey, but constants in many languages such as Pascal are manifest constants, processed at compile time and not implemented as protected locations. Also it must be possible to declare a constant of any data type, not just the <b>scalar</b> <b>types.</b>|$|R
40|$|Recent many {{physicists}} {{suggest that}} the dark energy in the universe might result from the Born-Infeld(B-I) <b>type</b> <b>scalar</b> field of string theory. The universe of B-I <b>type</b> <b>scalar</b> field with potential can undergo a phase of accelerating expansion. The corresponding equation of state parameter lies {{in the range of}} − 1 < ω < − 1. The equation of state parameter of 3 B-I <b>type</b> <b>scalar</b> field without potential lies in the range of 0 ≤ ω ≤ 1. We find that weak energy condition and strong energy condition are violated for phantom B-I <b>type</b> <b>scalar</b> field. The equation of state parameter lies in the range of ω < − 1. Keywords:Dark energy; Born-Infeld <b>type</b> <b>scalar</b> field; Phantom cosmology. PACS: 98. 80. C...|$|R
500|$|Variables are prefixed with {{a dollar}} symbol, and a type {{does not need}} to be {{specified}} in advance. [...] PHP 5 introduced type hinting that allows functions to force their parameters to be objects of a specific class, arrays, interfaces or callback functions. [...] However, before PHP 7.0, type hints could not be used with <b>scalar</b> <b>types</b> such as integer or string.|$|R
40|$|We derive {{necessary}} and sufficient {{conditions for a}} Hill operator (i. e., a one-dimensional periodic Schrödinger operator) H=-d^ 2 /dx^ 2 +V to be a spectral operator of <b>scalar</b> <b>type.</b> The conditions show the remarkable fact that the property of a Hill operator being a spectral operator is independent of smoothness (or even analyticity) properties of the potential V. In {{the course of our}} analysis we also establish a functional model for periodic Schrödinger operators that are spectral operators of <b>scalar</b> <b>type</b> and develop the corresponding eigenfunction expansion. The problem of deciding which Hill operators are spectral operators of <b>scalar</b> <b>type</b> appears to have been open for about 40 years. Comment: 52 page...|$|E
40|$|Some {{families}} of orthogonal matrix polynomials satisfying second order differential equations with coefficients independent of n {{have recently been}} introduced (see [DG 1]). An important difference with the scalar classical {{families of}} Jacobi, Laguerre and Hermite, is that these matrix families do not satisfy <b>scalar</b> <b>type</b> Rodrigues ’ formulas of the type (Φ n W) (n) W − 1, where Φ is a matrix polynomial of degree not bigger than 2. An example of a modified Rodrigues ’ formula, well suited to the matrix case, appears in [DG 1]. In this note, we discuss {{some of the reasons}} why a second order differential equation with coefficients independent of n does not imply, in the matrix case, a <b>scalar</b> <b>type</b> Rodrigues ’ formula and show that <b>scalar</b> <b>type</b> Rodrigues ’ formulas are most likely not going to play in the matrix valued case the important role they played in the scalar valued case. We also mention the roles of a <b>scalar</b> <b>type</b> Pearson equation {{as well as that of}} a non-commutative version of it. ...|$|E
40|$|We {{examine the}} {{stability}} of charged Lovelock black hole solutions under vector type and <b>scalar</b> <b>type</b> perturbations. We find the suitable master variables for the stability analysis; the equations for these variables are the Schrodinger type equations with two components and these Schrodinger operators are symmetric. By these master equations, we show that charged Lovelock Black holes are stable under vector type perturbations. For <b>scalar</b> <b>type</b> perturbations, we show the criteria for the instability and check these numerically. In our previous paper, we have shown that nearly extremal black holes have the instability under tensor type perturbations. In this paper, we find that black holes with small charge have the instability under <b>scalar</b> <b>type</b> perturbations {{even if they have}} relatively large mass. Comment: 35 pages, 8 figure...|$|E
50|$|The {{simplest}} <b>scalar</b> data <b>types,</b> such as integer and floating-point numbers, {{are nearly}} always first-class.|$|R
40|$|We {{study the}} {{stability}} under linear perturbations {{of a class}} of static solutions of Einstein-Gauss-Bonnet gravity in D=n+ 2 dimensions with spatial slices of the form Σ_^n × R^+, Σ_^n an n-manifold of constant curvature. Linear perturbations for this class of space-times can be generally classified into tensor, vector and <b>scalar</b> <b>types.</b> The analysis in this paper is restricted to tensor perturbations. Comment: 14 pages, 4 figure...|$|R
30|$|In this section, {{we use the}} <b>scalar</b> ratio <b>type</b> arithmetic-geometric mean {{inequality}} to get {{a series}} of operator versions.|$|R
40|$|AbstractThe chiral phase {{transition}} is studied in an extended Nambu–Jona-Lasinio model with eight-quark interactions. Equations for scalar and vector quark densities, derived {{in the mean}} field approximation, are nonlinear and mutually coupled. The <b>scalar</b> <b>type</b> nonlinear term hastens the restoration of chiral symmetry, while the scalar–vector mixing term makes the transition sharper. The <b>scalar</b> <b>type</b> nonlinear term shifts the critical endpoint toward the values predicted by lattice QCD simulations and the QCD-like theory...|$|E
40|$|Let H be {{a complex}} Hilbert space and let L(H) be the Banach algebra of all bounded linear {{operators}} on H. In this paper {{we consider the}} following class of operators: ^ (H) = fS 2 L(H) : S is a <b>scalar</b> <b>type</b> operator and (S) (S + 2 ki) fkig for k = 1; 2; : : :g. The main results of this paper read as follows: 1. If T; S 2 ^ (H) and e T e S = e S e T then T 2 S 2 = S 2 T 2. 2. If S 2 ^ (H), T 2 L(H) and e T = e S then TS 2 = S 2 T. Math. Subject Classication: 47 A 10, 47 A 60 Key words and phrases: <b>scalar</b> <b>type</b> operators, exponentials 1 Terminology and results Throughout this paper let H denote a complex Hilbert space and L(H) the Banach algebra of all bounded linear operators on H. For A 2 L(H) the spectrum and the spectral radius of A are denoted by (A) and r(A), respectively. The set of eigenvalues of A is denoted by p (A). For the resolvent set of A we write (A). We use N(A) and A(H) to denote the kernel {{and the range of}} A, respectively. An operator S 2 L(H) is called a <b>scalar</b> <b>type</b> operator if S admits a representation S = Z (S) E(d); where E(d) denotes integration with respect to a spectral measure E() on H. See [1], [2] and [14] for properties of spectral measures and <b>scalar</b> <b>type</b> operators. If A 2 L(H) is normal (AA = A A) then A is a <b>scalar</b> <b>type</b> operator and the values of the spectral measure of A are selfadjoint projections (see [1], Theorem 7. 18). J. Wermer [14] has shown that the <b>scalar</b> <b>type</b> operators on H are those operators which are similar to normal operators. More precisely, Wermer has shown that for every nite set S 1; : : :; S n of commuting <b>scalar</b> <b>type</b> operators on H there is a selfadjoint operator 1 B 2 L(H) with a bounded everywhere dened inverse such that the operators BS i B 1, i = 1; : : [...] ...|$|E
40|$|A {{description}} of the Carleman classes of vectors, in particular the Gevrey classes, of a <b>scalar</b> <b>type</b> spectral operator in a reflexive complex Banach space is shown to remain true without the reflexivity requirement. A similar nature {{description of}} the entire vectors of exponential type, known for a normal operator in a complex Hilbert space, is generalized {{to the case of}} a <b>scalar</b> <b>type</b> spectral operator in a complex Banach space. Comment: Published in Methods of Functional Analysis and Topology (MFAT), available at [URL] arXiv admin note: text overlap with arXiv: 1602. 0708...|$|E
40|$|Recent {{progress}} in theoretical physics {{suggests that the}} dark energy in the universe result from the Born-Infeld (B-I) <b>type</b> <b>scalar</b> field of string theory. The universe of B-I <b>type</b> <b>scalar</b> field with potential can undergo a phase of accelerated expansion. The corresponding equation of state parameter lies {{in the range of}} − 1 < w < − 1. The equation of state 3 parameter of B-I <b>type</b> <b>scalar</b> field without potential lies in the regime of 0 ≤ w ≤ 1. We find that weak energy condition and strong energy condition are violated for phantom B-I <b>type</b> <b>scalar</b> field. The equation of state parameter lies in the range w < − 1...|$|R
40|$|In this article, we {{tentatively}} {{assign the}} X(3915) and X(4500) {{to be the}} ground state and the first radial excited state of the axialvector-diquark-axialvector-antidiquark <b>type</b> <b>scalar</b> csc̅s̅ tetraquark states, respectively, assign the X(4700) to be the ground state vector-diquark-vector-antidiquark <b>type</b> <b>scalar</b> csc̅s̅ tetraquark state, and study their masses and pole residues with the QCD sum rules in details by calculating {{the contributions of the}} vacuum condensates up to dimension 10. The numerical results support assigning the X(3915) and X(4500) to be the ground state and the first radial excited state of the axialvector-diquark-axialvector-antidiquark <b>type</b> <b>scalar</b> csc̅s̅ tetraquark states, respectively, and assigning the X(4700) to be the ground state vector-diquark-vector-antidiquark <b>type</b> <b>scalar</b> csc̅s̅ tetraquark state. Comment: 15 pages, 2 figure...|$|R
30|$|Figures  5, 6 and 7 {{indicate}} that the three morphemes have preferences for co-occurring with certain types of motion morphemes. Specifically, 上 shang ‘ascend’ and 下 xia ‘descend’ prefer to occur with nonscalar change motion morphemes, whereas 退 tui ‘recede’ prefers closed scale motion morphemes. Due to space limitation, I do not discuss the possible reasons for the divergences between 退 tui ‘recede’ and 上/下 shang/xia ‘ascend/descend’ in this paper. Nonetheless, the figures show that {{the order of the}} three morphemes and morphemes from other <b>scalar</b> <b>types</b> are consistent with the hierarchy.|$|R
40|$|AbstractSome {{families}} of orthogonal matrix polynomials satisfying second-order differential equations with coefficients independent of n {{have recently been}} introduced (see [Internat. Math. Res. Notices 10 (2004) 461 – 484]). An important difference with the scalar classical {{families of}} Jacobi, Laguerre and Hermite, is that these matrix families do not satisfy <b>scalar</b> <b>type</b> Rodrigues’ formulas of the type (ΦnW) (n) W- 1, where Φ is a matrix polynomial of degree not bigger than 2. An example of a modified Rodrigues’ formula, well suited to the matrix case, appears in [Internat. Math. Res. Notices 10 (2004) 482]. In this note, we discuss {{some of the reasons}} why a second order differential equation with coefficients independent of n does not imply, in the matrix case, a <b>scalar</b> <b>type</b> Rodrigues’ formula and show that <b>scalar</b> <b>type</b> Rodrigues’ formulas are most likely not going to play in the matrix valued case the important role they played in the scalar valued case. We also mention the roles of a scalar-type Pearson equation {{as well as that of}} a noncommutative version of it...|$|E
40|$|Analysis of time-domain {{profiles}} for gravitational perturbations {{shows that}} Gauss-Bonnet black holes in a de Sitter world possess {{a new kind}} of dynamical instability which does not take place for asymptotically flat Einstein-Gauss-Bonnet black holes. The new instability is in the gravitational perturbations of the <b>scalar</b> <b>type</b> and is due to the nonvanishing cosmological constant. Analysis of the quasinormal spectrum in the stability sector shows that although the <b>scalar</b> <b>type</b> of gravitational perturbations alone does not obey Hod's conjectural bound, connecting the damping rate and the Hawking temperature, the vector and tensor types (and thereby the gravitational spectrum as a whole) do obey it. Comment: 9 pages, 8 figure...|$|E
40|$|The {{algebraic}} λ-calculus [40] and the linear-algebraic λ-calculus [3] {{extend the}} λ-calculus {{with the possibility}} of making arbitrary linear combinations of λ-calculus terms (preserving ∑ αi. ti). In this paper we provide a fine-grained, System F-like type system for the linear-algebraic λ-calculus (Lineal). We show that this <b>scalar</b> <b>type</b> system enjoys both the subject-reduction property and the strong-normalisationproperty, which constitute our main technical results. The latter yields a significant simplification of the linear-algebraic λ-calculus itself, by removing the need for some restrictions in its reduction rules – and thus leaving it more intuitive. But the more important, original feature of this <b>scalar</b> <b>type</b> system is that it keeps track of ‘the amount of a type’ that this present in each term. As an example, we show how to use this type system in order to guarantee the well-definiteness of probabilistic functions (∑ αi = 1) – thereby specializing Lineal into a probabilistic, higher-order λ-calculus. Finally we begin to investigate the logic induced by the <b>scalar</b> <b>type</b> system, and prove a no-cloning theorem expressed solely in terms of the possible proof methods in this logic. We discuss the potential connections with Linear Logic and Quantum Computation...|$|E
5000|$|OpenCL C is {{extended}} to facilitate use of parallelism with vector types and operations, synchronization, and functions {{to work with}} work-items and work-groups. In particular, besides <b>scalar</b> <b>types</b> such as [...] and , which behave similarly to the corresponding types in C, OpenCL provides fixed-length vector types such as [...] (4-vector of single-precision floats); such vector types are available in lengths two, three, four, eight and sixteen for various base types. Vectorized operations on these types are intended to map onto SIMD instructions sets, e.g., SSE or VMX, when running OpenCL programs on CPUs. Other specialized types include 2-d and 3-d image types.|$|R
40|$|Abstract:- One of {{the main}} new {{features}} in the Object-Relational Database Management Systems (ORDBMS) is possibility to define new data types. It increases the amount of design options as well as possibilities to make bad design decisions. For example, entity type in a conceptual data model can be implemented as a relation variable (relvar for short) {{or in some cases}} as an attribute of a relvar that has a scalar-, tuple- or relation type. One guideline that helps to avoid bad design decisions is The Principle of Orthogonal Design [1]. It states that if a new tuple is added to a relational database, then there shouldn’t be more than one base relvar which is suitable for recording it. Violation of this principle causes data redundancy. But original version of this principle doesn’t take into account that relvars could have attributes with the generated relation-or tuple types or with the user-defined <b>scalar</b> <b>types.</b> The value of such an attribute {{that is part of the}} value of one relvar (relation) could contain the same data as value of some other relvar. Main contribution of this article is the proposal of an extended version of the orthogonal database design principle that takes into account possibility that relation-, tuple- or user-defined <b>scalar</b> <b>types</b> are used in a database. In addition we propose two heuristic rules that help to reduce data redundancy within one relvar that has an attribute with a relation- or tuple type...|$|R
5000|$|Hack {{extends the}} type hinting {{available}} in PHP 5 through {{the introduction of}} static typing, by adding new type hints (for example, for <b>scalar</b> <b>types</b> such as integer or string), {{as well as by}} extending the use of type hints (for example, for class properties or function return values). However, types of local variables cannot be specified. Since Hack uses a gradual typing system, in the default mode, type annotations are not mandatory even in places they cannot be inferred; the type system will assume the author is correct and admit the code. However, a [...] "strict" [...] mode is available which requires such annotations, and thus enforces fully sound code.|$|R
