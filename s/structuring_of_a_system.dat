3|10000|Public
40|$|The article {{presents}} some {{ideas on how}} developing that type of investigation in the University {{by means of the}} adoption of a policy of integral investigation, the <b>structuring</b> <b>of</b> <b>a</b> <b>system</b> of investigations as unit and the accomplishment of strategic operations and concrete in the short term. In this article the difference between research and formative research is presented. The dangers of confusing these two forms of academic work are pointed out, and the need of developing them simultaneously to face the new challenges of the superior education is insisted...|$|E
40|$|This paper {{describes}} {{an approach to}} module composition by executing "module expressions" to build systems out of component modules. This approach extends the structural description capabilities of existing Architecture Description Languages (ADLs) to facilitate the manipulation of architectural components {{in a manner that}} results in either new components or complete instantiations of parameterized architectures. The paper also gives a novel semantics intended to aid with the implementation this approach. The semantics is based on set theory, and uses the technical notions of tuple set, partial signature, and institution, avoiding more difficult mathematics such as abstract algebra and category theory. Language features include information hiding, both vertical and horizontal composition, and views for binding modules to interfaces. Vertical composition refers to the hierarchical <b>structuring</b> <b>of</b> <b>a</b> <b>system</b> into layers, while horizontal composition refers to the structure of a given layer [...] ...|$|E
40|$|This paper {{describes}} {{an approach to}} module composition by executing "module expressions" to build systems out of component modules; the paper also gives a novel semantics intended to aid implementers. The semantics is based on set theoretic notions of tuple set, partial signature, and institution, thus avoiding more difficult mathematics theory. Language features include information hiding, both vertical and horizontal composition, and views for binding modules to interfaces. Vertical composition refers to the hierarchical <b>structuring</b> <b>of</b> <b>a</b> <b>system</b> into layers, while horizontal composition refers {{to the structure of}} a given layer. Modules may involve information hiding, and views may involve behavioral satisfaction of a theory by a module. Several "Laws of Software Composition" are given, which show how the various module composition operations relate. Taken together, this gives foundations for an algebraic approach to software engineering. 1. 1 Introduction The approach to module compos [...] ...|$|E
50|$|Structural {{requirements}}: Structural requirements {{explain what}} has to be done by identifying the necessary <b>structure</b> <b>of</b> <b>a</b> <b>system.</b>|$|R
5000|$|Compositional Structure Diagram {{depicts the}} static <b>structure</b> <b>of</b> <b>a</b> <b>system.</b> This diagram type {{is also known}} as FMC Block Diagram ...|$|R
5000|$|The law of {{increasing}} complexity: Through changes, the <b>structure</b> <b>of</b> <b>a</b> <b>system</b> becomes ever more complex, and more resources {{are required to}} simplify it.|$|R
50|$|In the <b>system</b> {{dynamics}} methodology, <b>a</b> {{problem or}} <b>a</b> <b>system</b> (e.g., ecosystem, political system or mechanical system) is first {{represented as a}} causal loop diagram. A causal loop diagram is <b>a</b> simple map <b>of</b> <b>a</b> <b>system</b> with all its constituent components and their interactions. By capturing interactions and consequently the feedback loops (see figure below), a causal loop diagram reveals the <b>structure</b> <b>of</b> <b>a</b> <b>system.</b> By understanding the <b>structure</b> <b>of</b> <b>a</b> <b>system,</b> it becomes possible to ascertain <b>a</b> <b>system’s</b> behavior over <b>a</b> certain time period.|$|R
40|$|Software {{systems are}} {{typically}} modified {{in order to}} extend or change their functionality, improve their performance, port them to different platforms, and so on. For developers, {{it is crucial to}} understand the <b>structure</b> <b>of</b> <b>a</b> <b>system</b> before attempting to modify it. The <b>structure</b> <b>of</b> <b>a</b> <b>system,</b> however, may not be apparent to new developers, because the design documentation is non-existent or, worse, inconsistent with the implementation. This problem could be alleviated if developers were somehow able to produce high-level system decomposition descriptions from the low-level structures present in the source code. We hav...|$|R
40|$|Software {{engineering}} {{is defined in}} the IEEE standard 610. 12 as “the application <b>of</b> <b>a</b> systematic, disciplined, quantifiable approach to the development, operation and maintenance of software”. This paper is based on approach {{which can be used}} for applying the reverse engineering {{to improve the quality of}} software <b>system.</b> The dynamic <b>structure</b> <b>of</b> <b>a</b> <b>system</b> plays <b>an</b> important role for providing high level abstraction. Analysis <b>of</b> <b>a</b> dynamic <b>structure</b> <b>of</b> <b>a</b> <b>system</b> is one <b>of</b> the areas of research for both structural and behavioral perspective. Role based approach explains the analysis <b>of</b> the dynamic <b>structure</b> <b>of</b> <b>a</b> complex <b>system.</b> Dynamic <b>structure</b> refers to change that occur to <b>a</b> <b>system</b> structure while it is running. Cost effective development <b>of</b> <b>a</b> large integrated <b>system</b> can be realized through systematic reuse <b>of</b> development into <b>a</b> development process <b>of</b> <b>a</b> software <b>system.</b> Happens that only documentation available for maintain is the source code itself. Under this environment, maintains the source code can be extremely difficult. One way of handling this problem to start with the source code and attempt to recreate the design documents or we have <b>a</b> dynamic <b>structure</b> <b>of</b> <b>a</b> <b>system.</b> Role is <b>a</b> particular set <b>of</b> properties associated with objects or groups <b>of</b> objects in <b>a</b> particular context. A role model describes the essential aspects <b>of</b> <b>a</b> pattern in terms of highly abstract state and behavior elements...|$|R
40|$|This chapter {{talks about}} Technological Systems and Complex Systems. system appraoch is used {{that will help}} in {{modeling}} <b>structure</b> <b>of</b> <b>a</b> <b>system</b> with system diagram using subsystems, components,parts and internal or external interface that exist in <b>a</b> complex <b>system.</b> System development process is also described. Solution to simple problems with tools used in management such as WBS or CPM etc. are present...|$|R
50|$|In {{software}} engineering, a {{class diagram}} in the Unified Modeling Language (UML) is <b>a</b> type <b>of</b> static <b>structure</b> diagram {{that describes the}} <b>structure</b> <b>of</b> <b>a</b> <b>system</b> by showing the system's classes, their attributes, operations (or methods), and the relationships among objects.|$|R
50|$|Compositional {{structure}} diagrams {{depict the}} static <b>structure</b> <b>of</b> <b>a</b> <b>system,</b> and {{the relationships between}} system components. System components can be active or passive. Agents are active system components. They perform activities in the system. Storages and channels are passive components which store or transmit information.|$|R
40|$|This chapter reviews four notions <b>of</b> system <b>structure,</b> three <b>of</b> {{which are}} contextual and classic (i. e. the {{complete}} computational structure {{linked to a}} state space model, the sparsity pattern <b>of</b> <b>a</b> transfer function, and the interconnection of subsystems) and one which is relatively new (i. e. the signal <b>structure</b> <b>of</b> <b>a</b> <b>system's</b> dynamical <b>structure</b> function). Although each of these structural concepts apply to the nonlinear and stochastic setting, this work will focus on linear time invariant systems to distill the key concepts and make their relationships clear. We then discusses three applications of the newest structural form (the signal <b>structure</b> <b>of</b> <b>a</b> <b>system's</b> dynamical <b>structure</b> function) : network reconstruction, vulnerability analysis, and a recent result in distributed control that guarantees the synthesis <b>of</b> <b>a</b> stabilizing controller with a specified structure or proves that no such controller exists...|$|R
40|$|We {{introduce}} ”chain by chain ” {{method for}} constructing the constraint <b>structure</b> <b>of</b> <b>a</b> <b>system</b> possessing both {{first and second}} class constraints. We show that the whole constraints can be classified into completely irreducible first or second class chains. We found appropriate redefinition of second class constraints to obtain a symplectic algebra among them. ...|$|R
40|$|We {{investigate}} sibling correlations {{in health}} status using the Panel Study of Income Dynamics and Bayesian methods {{that allow us}} to estimate the co-variance <b>structure</b> <b>of</b> <b>a</b> <b>system</b> <b>of</b> latent variable equations. Across a battery ∗We would like to thank Bo Honoré, Andriy Norets and participants at the University of Hawaii Applied Micro Workshop for useful comments...|$|R
30|$|The {{deductive}} <b>structure</b> <b>of</b> <b>a</b> general <b>system</b> S in Theorem  1 can {{be proved}} inductively.|$|R
5000|$|Stock {{and flow}} {{diagrams}} - {{a way to}} quantify the <b>structure</b> <b>of</b> <b>a</b> dynamic <b>system</b> ...|$|R
30|$|The {{direct method}} takes free blocks that are managed by <b>a</b> file <b>system</b> for files, and {{allocate}} {{them for the}} use of main memory. This method consults the management data <b>structures</b> <b>of</b> <b>a</b> file <b>system</b> in order to find and remove free blocks; thus, this method requires the direct manipulation of the internal data <b>structures</b> <b>of</b> <b>a</b> file <b>system.</b> The manipulation requires the implementation of additional code.|$|R
40|$|We {{introduce}} "chain by chain" {{method for}} constructing the constraint <b>structure</b> <b>of</b> <b>a</b> <b>system</b> possessing both {{first and second}} class constraints. We show that the whole constraints can be classified into completely irreducible first or second class chains. We found appropriate redefinition of second class constraints to obtain a symplectic algebra among them. Comment: 23 pages, to appear in Int. J. Mod. Phys. ...|$|R
40|$|We {{consider}} membrane {{systems with}} dissolving and thickening reaction rules. Application of these rules entails a dynamical {{change in the}} <b>structure</b> <b>of</b> <b>a</b> <b>system</b> during its evolution. First we provide a precise operational model for these dynamic membrane systems in which also promoter and inhibitor rules may occur. Next we describe a translation into behaviourally equivalent Petri nets with localities and range arcs...|$|R
5000|$|Class diagram: A {{class diagram}} is <b>a</b> type <b>of</b> static <b>structure</b> UML diagram that {{describes}} the <b>structure</b> <b>of</b> <b>a</b> <b>system</b> by showing the system's classes, their attributes, and {{the relationships between the}} classes. The messages and classes identified through the development of the sequence diagrams can serve as input to the automatic generation of the global class diagram of the system.|$|R
5000|$|Petri net - {{shows the}} <b>structure</b> <b>of</b> <b>a</b> {{distributed}} <b>system</b> as <b>a</b> directed bipartite graph with annotations ...|$|R
5000|$|Instead, {{they argue}} that genes might {{influence}} brain development by determining <b>a</b> <b>system's</b> [...] "architectural constraints". By establishing the physical <b>structure</b> <b>of</b> <b>a</b> <b>system,</b> {{they argue that}} genes would, in effect, by determining the learning algorithms the system employs {{to respond to the}} environment. They argue that the specific propositional information in the system would be determined as <b>a</b> result <b>of</b> the <b>system</b> responding to environmental stimulation.|$|R
30|$|The third {{element of}} {{legitimacy}} {{is the way}} in which decisions are formalized—by <b>a</b> word <b>of</b> will from <b>an</b> authority or by formalized procedure, restricting arbitrary power. What is addressed here is the governance <b>structure</b> <b>of</b> <b>a</b> <b>system</b> or the “processes and interactions that constitute patterns of rule” [51]. Legitimacy is determined by power distribution as <b>a</b> general character <b>of</b> <b>a</b> <b>system</b> as it appears in leadership, inclusiveness and governance.|$|R
40|$|LARES (LAnguage for REconfigurable {{dependable}} Systems) {{has been}} defined to model fault-tolerant systems. It serves as an easy-to-learn formalism that allows to describe the <b>structure</b> <b>of</b> <b>a</b> <b>system</b> and to express its dynamic failure and repair behavior in a convenient and concise way. The paper gives insight into the recent improvements to the language and its formal transformation semantics into a stochastic process algebra. 1...|$|R
40|$|The article {{presents}} polemically {{the peculiarities of}} using the indicators of innovation activity for evaluating the state and outcomes of the organization’s operation, including Higher Learning Institutions {{in the areas of}} development and learning new types of techniques and technology. There is considered <b>a</b> possible <b>structure</b> <b>of</b> <b>a</b> <b>system</b> <b>of</b> balanced innovation activity indicators. There is substantiated a necessity to change statistical reporting on the innovation activity...|$|R
40|$|The inadvisability {{of using}} {{standardized}} regression {{coefficients for the}} purpose of comparing causal relationships across populations or establishing causal laws is addressed by explicating, both abstractly and by example, the relationship between the underlying causal structure and the variance-covariance <b>structure</b> <b>of</b> <b>a</b> <b>system</b> <b>of</b> variables. Whin the causal analysis tradition in sociology, severalissues have appeared which center on whether stand-ardized or unstandardized coefficients should be used (Tukey...|$|R
50|$|The law {{is based}} on the {{reasoning}} that in order for a software module to function, multiple authors must communicate frequently with each other. Therefore, the software interface <b>structure</b> <b>of</b> <b>a</b> <b>system</b> will reflect the social boundaries of the organization(s) that produced it, across which communication is more difficult. Conway's law was intended as a valid sociological observation, although sometimes it's taken in a humorous context.|$|R
5000|$|Expert legal {{knowledge}} {{can be difficult to}} represent or formalize within the <b>structure</b> <b>of</b> <b>an</b> expert <b>system.</b> For knowledge engineers, challenges include: ...|$|R
50|$|DCI limits all {{permissible}} {{networks of}} communicating objects to networks that share common topologies, {{one for each}} use case. Such networks are explicit in the interactions between DCI Roles, whereas in classical object orientation they are emergent. A Role is a node in such a topology; it is <b>a</b> partial classification <b>of</b> the behaviors of all objects that can occupy this node. The topology is <b>a</b> description <b>of</b> the run-time <b>structure</b> <b>of</b> <b>a</b> <b>system.</b>|$|R
50|$|The common {{approach}} {{when working with}} FMC is to start with <b>a</b> high-level diagram <b>of</b> the compositional <b>structure</b> <b>of</b> <b>a</b> <b>system.</b> This “big picture” diagram serves as a reference in the communication with all involved stakeholders of the project. Later on, the high-level diagram is iteratively refined to model technical details of the system. Complementary diagrams for processes observed in the system or value domains found in the system are introduced as needed.|$|R
50|$|Object {{diagrams}} {{and class}} diagrams {{are closely related}} and use almost identical notation. Both diagrams are meant to visualize static <b>structure</b> <b>of</b> <b>a</b> <b>system.</b> While class diagrams show classes, object diagrams display instances of classes (objects). Object diagrams are more concrete than class diagrams. They are often used to provide examples or act as test cases for class diagrams. Only aspects of current interest in a model are typically shown on an object diagram.|$|R
5000|$|... (together with Regina Berger-Schmitt) (2000), Conceptual Framework and <b>Structure</b> <b>of</b> <b>a</b> European <b>System</b> <b>of</b> Social Indicators. Mannheim: Zuma. (EuReporting Working Paper, no. 9).|$|R
40|$|Software {{systems are}} {{typically}} modi ed inorder to extend or change their functionality, improve their performance, port them to di erent platforms, and so on. For developers, {{it is crucial}} to understand the <b>structure</b> <b>of</b> <b>a</b> <b>system</b> before attempting to modify it. The <b>structure</b> <b>of</b> <b>a</b> <b>system,</b> however, may not be apparent to new developers, because the design documentation is non-existent or, worse, inconsistent with the implementation. This problem could be alleviated if developers were somehow able to produce high-level system decomposition descriptions from the low-level structures present in the source code. We have developed a clustering tool called Bunch that creates <b>a</b> <b>system</b> decomposition automatically by treating clustering as an optimization problem. This paper describes the extensions made to Bunch in response to feedback we received from users. The most important extension, in terms of the quality of results and execution e ciency, is a feature that enables the integration of designer knowledge about the <b>system</b> structure into <b>an</b> otherwise fully automatic clustering process. We use a case study to show how our new features simpli ed the task of extracting the subsystem structure ofamedium size program, while exposing an interesting design aw in the process...|$|R
40|$|AbstractThe fine <b>structure</b> <b>of</b> <b>a</b> triple <b>system</b> <b>of</b> index λ is {{the vector}} (c 1, …, cλ), where c 1 {{is the number}} of triples {{appearing}} precisely i times in the system. We determine necessary conditions for a vector to be the fine <b>structure</b> <b>of</b> <b>a</b> threefold triple <b>system</b> and prove the sufficiency of these conditions for all υ ≡ 1, 3 (mod 6), υ ⩾ 19...|$|R
40|$|Virtually all {{branches}} of science give {{advice on how}} to interpret statistics related to their field. The field of Systems Dynamics suggests that the pattern of observable events resulting from <b>a</b> <b>system</b> provides insights into the <b>structure</b> <b>of</b> <b>a</b> <b>system.</b> With OHS, the events of significance are workplace injuries and incidents. The pattern of events, eg correlations or trends over time, is used to determine the causes of injuries and incidents and to elucidate the <b>structure</b> <b>of</b> the system that caused them...|$|R
