10|42|Public
50|$|In {{telecoms}} networks two key {{parameters are}} used for measurement of synchronisation performance. These parameters are defined by the International Telecommunication Union in its recommendation G.811, by European Telecommunications Standards Institute in its standard EN 300 462-1-1, by the ANSI <b>Synchronization</b> <b>Interface</b> Standard T1.101 defines profiles for clock accuracy at each stratum level, and by Telecordia/Bellcore standards GR-253 and GR-1244.|$|E
50|$|Logical {{extraction}} {{usually does}} not produce any deleted information, due to it normally being removed from the phone's file system. However, in some cases—particularly with platforms built on SQLite, such as iOS and Android—the phone may keep a database file of information which does not overwrite the information but simply marks it as deleted and available for later overwriting. In such cases, if the device allows file system access through its <b>synchronization</b> <b>interface,</b> {{it is possible to}} recover deleted information. File system extraction is useful for understanding the file structure, web browsing history, or app usage, as well as providing the examiner with the ability to perform an analysis with traditional computer forensic tools.|$|E
50|$|As {{described}} in, The {{framework of}} e-maintenance machine network consists of sensors, data acquisition system, communication network, analytic agents, decision-making support knowledge base, information <b>synchronization</b> <b>interface</b> and e-business system for decision making. Initially, the sensors, controllers and operators with data acquisition {{are used to}} collect the raw data from equipment and send it out to Data Transformation Layer automatically via internet or intranet. The Data Transform Layer then employs signal processing tools and feature extraction methods to convert the raw data into useful information. This converted information often carries rich information about the reliability and availability of machines or system and is more agreeable for intelligent analysis tools to perform subsequent process. The Synchronization Module and Intelligent Tools comprise the major processing power of the e-maintenance machine network and provide optimization, prediction, clustering, classification, bench-marking and so on. The results from this module can then be synchronized and shared with the e-business system on for decision making. In real application, the synchronization module will provide connection with other departments at the decision making level, like Enterprise Resource Planning (ERP), Customer Relation Management (CRM) and Supply Chain Management (SCM).|$|E
50|$|The <b>Synchronization</b> Clock <b>Interface</b> routes MLVDS (Multipoint Low-voltage {{differential}} signaling) clock signals over multiple 130 Ω buses. The clocks {{are typically}} used to synchronize telecom interfaces.|$|R
40|$|This paper {{contributes}} to the maturity of the GALS NoC design practice by advocating for tight integration of GALS <b>synchronization</b> <b>interfaces</b> into NoC architecture building blocks. At the cost of re-engineering the input/output stages of NoC switches and network interfaces, this approach proves capable of materializing GALS NoCs with the same area and power of their synchronous counterparts, while reducing latency at the clock domain boundary. This design style is experimented in this paper with a mesochronous synchronizer and a dual-clock FIFO, which are tightly coupled with the switches of the xpipesLite NoC architecture...|$|R
40|$|Abstract. We have {{developed}} a programming model that integrates concurrency with object-based programming. The model includes features for object definition and instantiation, and it supports concurrent executions of designated methods of the object instances. Yet, the model includes no specific communication or synchronization mechanism, except procedure call. The traditional schemes for communication, <b>synchronization,</b> <b>interfaces</b> among processes and accesses to shared memory can be encoded by objects in our model. Concurrency in the model is transparent to the programmer; the programmer believes that the program executes in a sequential manner whereas the implementation employs concurrent threads to gain efficiency. ...|$|R
40|$|Channel-to-channel isolation> 90 dB Analog output Adjustable 8. 7 mA to 31. 7 mA RL = 25 Ω to 50 Ω Novel 2 ×, 4 ×, and 8 × {{interpolator}} eases {{data interface}} On-chip fine complex NCO allows carrier placement anywhere in DAC bandwidth High performance, low noise PLL clock multiplier Multiple chip <b>synchronization</b> <b>interface</b> Programmable digital inverse sinc filter Auxiliary DACs allow for offset control Gain DACs allow for I and Q gain matching Programmable I and Q phase compensation Digital gain contro...|$|E
40|$|Abstract — In System-on-chip (SoC) design, it is {{essential}} to verify the correctness of design before a chip is fabricated. While conventional hardware emulators validate functional correctness of hardware components quickly, only a few researches exist to use hardware emulators for timing verification since synchronization between the hardware emulator and the other parts easily overwhelms the gain of hardware emulator. In this paper we propose a novel hardware/software coemulation framework for fast yet accurate system verification based on the virtual synchronization technique. For virtual <b>synchronization,</b> <b>interface</b> protocol and interface logic between a hardware emulator and the HW/SW coemulation kernel are proposed. Experiments with real-life examples prove the effectiveness of the proposed technique. Keywords- coemulation; cosimulation; synchronization; verification; I...|$|E
40|$|In {{this paper}} we {{describe}} an efficient methodology for rapid prototyping of data transmission systems based on Stateflow/Simulink models using a multi-level system development and testing approach. Transmission systems incorporate multi-domain functions and algorithms, i. e. physical layer circuits and communication protocol controllers. The Stateflow/Simulink environment enables {{the development of}} precise simulation models that include signal and protocol processing units. The proposed prototyping methodology {{is based on the}} progressive translation of high-level model blocks into hardware/software modules of the prototype architecture using custom and/or automated code generation tools. A custom data exchange and <b>synchronization</b> <b>interface</b> between the Stateflow/Simulink workspace and the circuit modules enables the integration of the simulation model and the prototyping platform into a complete functional system. The application of the proposed methodology in the development of an ADSL modem in a custom prototyping platform is also described...|$|E
40|$|This chapter reviews {{techniques}} for technology-aware connectivity {{design for the}} early planning of NoC architectures. On one hand, it contrasts several connectivity patterns taking the perspective of their mapping efficiency onto the 2 -D silicon surface, and characterizes to which extent the theoretical properties of a topology are offset by the physical implementation trade-offs. On the other hand, it reviews a few implementation variants of the globally asynchronous locally synchronous synchronization paradigm and reviews design {{techniques for}} cost-effective and robust implementation of <b>synchronization</b> <b>interfaces.</b> Overall, this chapter describes the key steps that designers have to take to change the appealing NoC concept into mature NoC technology...|$|R
40|$|<b>Synchronization</b> <b>interfaces</b> in a network-on-chip (NoC) are {{becoming}} vulnerable points {{that need to}} be safeguarded against link delay variations and signal misalignments. This paper addresses the challenge of designing a process variation and layout mismatch tolerant link for GALS NoCs by implementing a self-calibration mechanism. A variation detector senses the variability-induced misalignment between data lines with themselves and with the transmitter clock routed with data in source synchronous links. Then, a suitable delayed replica of the transmitter clock is selected for safe sampling of misaligned data. The paper proves correct operation of the GALS link augmented with the variation detector and compares its reliability with that of a detector-less link, beyond proving robustness with respect to the delay variability affecting the detector itself...|$|R
40|$|This paper {{provides}} an overview of specification and implementation of an ASIC running under the acronym UTCLIENT that supports external clock synchronization by hardware. It incorporates an adder-based clock to maintain local time, facilities to timestamp packets containing <b>synchronization</b> data, <b>interfaces</b> to GPS receivers and provides moderate application support...|$|R
40|$|Circuit {{simulation}} {{has proven}} {{to be one of the}} most important computer aided design (CAD) methods for the analysis and validation of integrated circuit designs. A popular approach to describing circuits for simulation purposes is to use a hardware description language such as VHDL. Similar efforts have also been carried out in the analog domain that has led to tools such as SPICE. However, with the growing trend of hardware designs that contain both analog and digital components, design environments that seamlessly integrate analog and digital circuitry are needed. Simulation of such circuits is however, exacerbated by the higher resource (CPU and memory) demands that arise when analog and digital models are integrated in a mixed-mode (analog and digital) simulation. One solution to this problem is to use PDES algorithms on a distributed platform. However, a <b>synchronization</b> <b>interface</b> between the analog and digital simulation environment is required to achieve integrated mixed-mode simu [...] ...|$|E
40|$|Customization of IP {{blocks in}} a multi-processor {{system-on-chip}} (MPSoC) is the historical {{approach to the}} cost-effective implementation of such systems. A recent trend consists of structuring a MPSoC into loosely coupled voltage and frequency islands to meet tight power budgets. In this context, synchronization between islands of synchronicity becomes a major design issue. Dual-clock FIFOs compare favorably with respect to synchronizer-based designs and pausible clocking interfaces from a performance viewpoint, but incur a significant area, power and latency overhead. This paper proposes a library of dual-clock FIFOs for cost-effective MPSoC design, where each architecture variant in the library {{has been designed to}} match well-defined operating conditions at the minimum implementation cost. Each FIFO synchronizer is suitable for plug-and-play insertion into the NoC architecture and selection depends on the performance requirements of the <b>synchronization</b> <b>interface</b> at hand. Above all, components of our synchronization library have not been conceived in isolation, but have been tightly co-designed with the switching fabric of the on-chip interconnection network, thus making a conscious use of power-hungry buffering resources and leading to affordable implementations in the resource constrained MPSoC domain...|$|E
40|$|Distributed {{simulation}} {{allows the}} treatment of large/complex models by having several interacting simulators running concurrently, each one {{in charge of a}} portion of the model. In order to effectively manage integration and interoperability aspects, the standard known as High Level Architecture (HLA) has been developed, which is based on a middleware component known as Run-Time-Infrastructure (RTI). One of the main issues faced by such a standard is synchronization, so that HLA supports both conservative and optimistic approaches. However, technical issues, combined with some peculiarities of the optimistic approach, force most simulators to use the conservative approach. In order to tackle these issues, we present the design and implementation of a Time Management Converter (TiMaC) for HLA based simulation systems. TiMaC is a state machine designed to be transparently interposed between the application layer and the underlying RTI, which performs mapping of the conservative HLA <b>synchronization</b> <b>interface</b> onto the optimistic one. Such a mapping allows transparent optimistic execution (and the related benefits) for simulators originally designed to rely on conservative synchronization. This is achieved without the need to modify the RTI services or alter the HLA standard. An experimental evaluation demonstrating the viability and effectiveness of our proposal is also reported, by integrating our TiMaC implementation with the Georgia Tech B-RTI package and running on it both (A) benchmarks relying on traces from simulated demonstration exercises collected using the Joint Semi-Automated Forces (JSAF) simulation program and (B) a self-federated Personal Communication System simulation application...|$|E
40|$|We have {{developed}} a programming model that integrates concurrency with object-based programming. The model includes features for object definition and instantiation, and it supports concurrent executions of designated methods of the object instances. Yet, the model includes no specific communication or synchronization mechanism, except procedure call. The traditional schemes for communication, <b>synchronization,</b> <b>interfaces</b> among processes and accesses to shared memory can be encoded by objects in our model. Concurrency in the model is transparent to the programmer; the programmer believes that the program executes in a sequential manner whereas the implementation employs concurrent threads to gain efficiency. 1 Introduction The research described in this document is based on two observations: (1) the applications that will be implemented on networks of processors {{in the future will}} be significantly more ambitious than the current applications (which are mostly involved with [...] ...|$|R
40|$|Many {{universities}} have applied e-learning {{on more than}} one LMS (Learning Management System) platforms such as Wordpress and Moodle. In addition, difficulties implementations in developing countries have occurred. Those are mainly caused by limitations and expensive of Internet infrastructure. Therefore to increase Moodle application as an e-learning system, the paper proposed two <b>synchronization</b> <b>interfaces.</b> The first interface is for Moodle and Wordpress. This assists teachers to migrate their learning material in their blog in Wordpress into Moodle. Second interface is for Moodle portable performing offline LMS and Moodle performing online LMS. Moodle portable was installed in teachers and students notebooks. Moodle itself was installed and run in e-learning server. The aim is to improve Moodle utilization in the class. The results showed satisfied outcomes. Students and teachers could employ the interfaces easily and secure as they have to login using student/teacher ID, course ID, username and password...|$|R
40|$|Nested {{recursive}} parallel applications {{constitute an}} important super-class of conventional, at parallel codes. For this class, parallel libraries utilizing {{the concept of}} tasks have been widely adapted. However, the provided abstract task creation and <b>synchronization</b> <b>interfaces</b> force corresponding implementations to focus their attention to individual task creation and synchronization points - unaware of their relation to each other - thereby losing optimization potential. Within this paper, we present a novel interface for task level parallelism, enabling implementations to grasp and manipulate the context of task creation and synchronization points { in particular for nested recursive parallelism. Furthermore, as a concrete application, we demonstrate the interface's capability to reduce parallel overhead within applications based on a reference implementation utilizing C++ 14 template meta programming techniques to synthesize multiple versions of a parallel task during the compilation process. To demonstrate its e ectiveness, we evaluate the impact of our approach {{on the performance of}} a series of eight task parallel benchmarks. For those, our approach achieves substantial speed-ups over state of the art solutions, in particular for use cases exhibiting ne grained tasks...|$|R
50|$|Many of {{the common}} {{problems}} in chip designing are related to interface timing between different components of the design. These can arise because of many factors including incomplete simulation models, lack of test cases to properly verify interface timing, requirements for <b>synchronization,</b> incorrect <b>interface</b> specifications, and lack of designer understanding of a component supplied as a 'black box'. There are specialized CAD tools designed explicitly to analyze interface timing, {{just as there are}} specific CAD tools to verify that an implementation of an interface conforms to the functional specification (using techniques such as model checking).|$|R
40|$|Hierarchical {{scheduling}} frameworks (HSFs) provide {{means for}} composing complex real-time systems from well-de¿ned, independently analyzed components. To support resource sharing in two-level HSFs, three synchronization protocols {{based on the}} stack resource policy (SRP) have recently been presented for single-processor execution platforms, i. e., HSRP, SIRAP, and BROE. This paper presents a transparent implementation of these three protocols side-by-side in an HSF-enabled real-time operating system. Transparent <b>synchronization</b> <b>interfaces</b> {{make it possible to}} select a protocol during integration time based on its relative strengths. A timing interface describes the required budget to execute a component on a shared platform and an accessor’s maximum critical-section execution time to global shared resources. These resources are arbitrated based on the available budget of the accessing task. We enable this explicit synchronization of virtual time with global time by means of a novel virtual-timer mechanism. Moreover, we investigate system overheads caused by each synchronization protocol, so that these can be included in the system analysis. Based on the analytical and implementation overheads of each protocol, we present guidelines for the selection of a synchronization protocol during system integration. Finally, we show that unknown task-arrival times considerably complicate an ef¿cient implementation of SIRAP’s self-suspension mechanism. We brie¿y discuss the implementation complexity caused by these arrivals for bandwidth-preserving servers, e. g., deferrable servers and BROE...|$|R
40|$|For GIS, SGML {{document}} servers {{and other}} highly specialized applicationdomains, the systems integration problem is essential since the available softwareoften {{is complex and}} would be costly to reimplement or to modify. In this paperwe describe a two-level architecture for integrating software components basedon partial data integration and user <b>interface</b> <b>synchronization.</b> We also present aprototype implementation of this architecture...|$|R
40|$|ABSTRACT. For GIS, SGML {{document}} servers {{and other}} highly specialized application domains, the systems integration problem is essential since the available software often {{is complex and}} would be costly to reimplement or to modify. In this paper we describe a two-level architecture for integrating software components based on partial data integration and user <b>interface</b> <b>synchronization.</b> We also present a prototype implementation of this architecture. 1...|$|R
40|$|High {{accurate}} external {{clock synchronization}} {{can only be}} achieved with adequate hardware support. We analyze the requirements yielding a specification and implementation of an ASIC running under the acronym UTCSU. It incorporates adder-based clocks to maintain both local time and accuracy, facilities to timestamp packets containing <b>synchronization</b> data, <b>interfaces</b> to couple GPS receivers, moderate application support, and self-test machinery. These novel clocks are distinguished by their fine grained rate adjustability and their hardware support for linear continuous amortization. Apart from addressing design and engineering issues of this chip, the paper provides a basic programming model as well. Keywords: Real-time systems, external clock synchronization, Universal Time Coordinated (UTC), adder-based clock (ABC), linear continuous amortization, accuracy intervals, Application Specific Integrated Circuit (ASIC), Very high speed integrated circuit Hardware Description Language (VHD [...] ...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThis thesis presents the design, implementation {{and evaluation of}} two abstracted programming and communication interfaces for developing distributed programs on a network of Transputers. One interface uses a shared memory model for interprocess communication and <b>synchronization.</b> The other <b>interface</b> uses a message passing model for communication and <b>synchronization.</b> The programming <b>interfaces</b> allow development of distributed programs that are independent of the physical configuration of a network. This thesis also presents an evaluation of Transputer performance with a particular emphasis on the interaction of computation and inter-Transputer communication. The Transputer is a single chip microprocessor that has been specifically designed {{to function as a}} computing element in a distributed multicomputer system. As the transistor was a building block for large and varied electronic circuits, the Transputer is intended by the manufacturer to be an analogous building block for distributed computing systems. To facilitate the use of the Transputer as an element in a distributed system, the Transputer implements the concept of Communicating Sequential Processes. Communicating Sequential Processes is a paradigm which defines and describes the interaction of programs that execute in parallel (as is the case in a distributed system). Keywords: OCCAM programming language, High level languages. (KR) [URL] Commander, United States Nav...|$|R
25|$|In the HD-SDI and dual link <b>interfaces,</b> <b>synchronization</b> packets {{must occur}} {{simultaneously}} {{in both the}} Y and C datastreams. (Some delay between the two cables in a dual link interface is permissible; equipment which supports dual link is expected to buffer the leading link {{in order to allow}} the other link to catch up). In SD-SDI and enhanced definition interfaces, there is only one datastream, and thus only one synchronization packet at a time. Other than the issue of how many packets appear, their format is the same in all versions of the serial-digital interface.|$|R
40|$|The overall aim of {{this thesis}} is the {{development}} of new concepts for parallel and distributed graph transformation to increase their applicability to communication-based systems. All concepts for parallel and distributed graph transformation pre-sented are formalized and compared with respect to their expressive power. Based on parallel graph grammars introduced by Ehrig and Kreowski the main concepts of existing approaches to parallel graph replacement are integrated into a new approach and generalized concerning exible synchronization mechanisms for parallel actions and restriction concepts for un-bounded parallel execution of actions. Distributed graph transformation as developed in this thesis combines structured graph transformation on two abstraction levels, the network and the local level, with the concept of <b>synchronization</b> by <b>interface</b> graphs into a new approach. In this new approach the main distribution concepts of categorical graph grammars presented by Schneider are combined with the algebraic approach to distributed graph transformation introduced by Ehrig et. al. Modeling of distributed system...|$|R
40|$|This {{document}} {{describes the}} interface between the Simulation Coupling System SiCS and the simulators, which are and will be integrated with SiCS. The integration results in a SiCS based simulator compound, whereof SiCS represents the kernel system for user <b>interface,</b> <b>synchronization</b> etc. The document is intended to line out the requirements and the effort for the integration of further simulators with SiCS from a simulator's point of view. Therefore the simulator interface functions to be supplied by the integrated simulation systems and the corresponding integration effort are described in the next chapters. 1. 2 Short description of SiC...|$|R
40|$|The {{design of}} microelectronic systems {{including}} {{hardware and software}} for open-loop and closed-loop control requires the combination of expertise from differ-ent domains. However, no integrated approach to the specification and design nor to the analysis and simulation of the overall system is available. The design of such com-plex and heterogeneous systems mandates a systematic, computer aided approach to requirements definition, spec-ification and design {{as well as to}} the verification and vali-dation of the results. In this paper a simulation backplane concept is presented for parallel mixed-mode cosimulation using a standardized <b>interface.</b> <b>Synchronization</b> mecha-nisms are developed and used that allow an efficient con-current cosimulation...|$|R
40|$|Abstract. Correct {{design of}} {{interface}} circuits {{is crucial for}} the development of high-speed SoCs (GALS systems) using IP cores. In this paper, we propose abstract timing diagrams as a formalism for reasoning about synchronization issues in different interface designs at a high level of abstraction. The advantage of using this formalism is that it permits reasoning about <b>synchronization</b> problems in <b>interfacing</b> schemes, even without knowing low-level implementation details. We show {{that it is possible to}} reason about the correctness and limitations of several existing interfacing schemes using this formalism. We also provide an example where reasoning using abstract timing diagrams guides us towards designing a new interface circuit for high-speed SoCs...|$|R
40|$|Grid-connected unity-power-factor {{converters}} {{based on}} one-cycle control (OCC) {{do not require}} the service of phase-locked loop or any other <b>synchronization</b> circuits for <b>interfacing</b> with the utility. As a result, these schemes are becoming increasingly popular. However, as the power handled by the converter increases, the power factor deteriorates. To understand quantitatively the cause of poor power factor while negotiating high power loads, large signal models for these schemes are developed. Having understood the cause for poor power factor operation, a modified-OCC-based converter is proposed. This scheme has high power factor while supplying high power loads. Detailed simulation studies are carried out to verify {{the efficacy of the}} scheme. In order to confirm the viability of the scheme, detailed experimental studies are carried out on a 3 -kW laboratory prototype...|$|R
40|$|Abstract—Grid-connected unity-power-factor {{converters}} {{based on}} one-cycle control (OCC) {{do not require}} the service of phase-locked loop or any other <b>synchronization</b> circuits for <b>interfacing</b> with the utility. As a result, these schemes are becoming increas-ingly popular. However, as the power handled by the converter increases, the power factor deteriorates. To understand quantita-tively the cause of poor power factor while negotiating high power loads, large signal models for these schemes are developed. Having understood the cause for poor power factor operation, a modified-OCC-based converter is proposed. This scheme has high power factor while supplying high power loads. Detailed simulation stud-ies are carried out to verify {{the efficacy of the}} scheme. In order to confirm the viability of the scheme, detailed experimental studies are carried out on a 3 -kW laboratory prototype. Index Terms—AC–DC power conversion, one-cycle controller, power-factor correction, single- and three-phase rectifier. I...|$|R
40|$|High-accuracy {{external}} {{clock synchronization}} {{can only be}} achieved with adequate hardware support. We analyze the requirements and present the specification and implementation of an ASIC running under the acronym UTCSU dedicated to that purpose. It is built around an elaborated local clock, {{which is based on}} an adder driven by a fixed-frequency oscillator. This novel clock design allows a fine grained rate adjustability apt for maintaining both local time with linear continuous amortization and accuracy information as needed in interval-based clock synchronization. Additional features incorporated in our UTCSU are facilities to timestamp clock <b>synchronization</b> data packets, <b>interfaces</b> to couple GPS receivers, some application support as well as sophisticated self-test machinery. Apart from addressing design and engineering issues of the chip, we also provide a basic programming model. Keywords: Real-time systems, external clock synchronization, Universal Time Coordinated (UTC), Adder- [...] ...|$|R
40|$|For GIS, SGML {{document}} servers {{and other}} highly specialized application domains, the systems integration problem is essential since the available software often {{is complex and}} would be costly to reimplement or to modify. In this paper we describe a two-level architecture for integrating software components based on partial data integration and user <b>interface</b> <b>synchronization.</b> We also present a prototype implementation of this architecture. 1. Introduction The growing facility to access distributed data via the World Wide Web has opened the horizon to new software environments integrating complex information from different application domains. Beyond this horizon, a big variety of data models and representations produced by sophisticated and highly-specialized software components have been discovered. Whereas the notion of URL (Uniform Resource Locator) facilitates the exchange of data by encapsulating various communication protocols, it does {{not solve the problem}} of data hetero [...] ...|$|R
40|$|Synthesis {{of systems}} {{containing}} application-specific {{as well as}} reprogrammable components, such as off-the-shelf microprocessors, provides a promising approach to realization of complex systems using a minimal amount of application-specific hardware while still meeting the required performance constraints. We describe an approach to synthesis of such hardware-software systems starting from a behavioral description as input. The input system model is partitioned into hardware and software components based on imposed performance constraints. Synchronization between various elements of a mixed system design {{is one of the}} key issues that any synthesis system must address. In this paper, we consider software and <b>interface</b> <b>synchronization</b> schemes that facilitate communication between system components. We present tools to perform synthesis and simulation of a system description into hardware and software components. In particular, we describe a program, Poseidon, that performs concurrent eve [...] ...|$|R
40|$|A finite {{state model}} for the {{specification}} and validation of communication protocols is considered. The concept of "direct coupling " between interacting finite state components is used to describe a hierarchical structure of protocol layers. The paper discusses different aspects of protocol validation, some verification tools based on the finite state formalism, and the basic limitations of the finite state modelling of protocols. An "empty medium abstraction " is proposed for reducing {{the complexity of the}} overall system description. The concept of "adjoint states " can be useful for summarizing the relative synchronization between the communicating system components. These concepts are applied to the analysis of a simple alternating bit protocol, and to the X. 25 call set-up and clearing procedures. The analysis of X. 25 shows that the procedures are stable in respect to intermittant perturbations in the <b>synchronization</b> of the <b>interface</b> introduced for different reasons, including occasional packet loss. ttowever, on very rare occasions, an undesirable cyclic behaviour could be encountered...|$|R
40|$|GNU Radio and OSSIE (Open-Source SCA (Software {{communication}} architecture) Implementation-Embedded) are two {{open source}} software toolkits for SDR (Software Defined Radio) developments, both {{of them can be}} supported by USRP (Universal Software Radio Peripheral). In order to compare the performance of these two toolkits, an FM receiver over GNU Radio and OSSIE are tested in my thesis, test results are showed in Chapter 4 and Chapter 5. Results showed that the FM receiver over GNU Radio has better performance, due to the OSSIE is lack of <b>synchronization</b> between USRP <b>interface</b> and the modulation /demodulation components. Based on this, the SISO (Single Input Single Output) communication system over GNU Radio is designed to transmit and receive sound or image files between two USRP equipped with RFX 2400 transceiver at 2. 45 G frequency. Now, GNU Radio and OSSIE are widely used for academic research, but the future work based on GNU Radio and OSSIE can be designed to support MIMO, sensor network, and real time users etc...|$|R
