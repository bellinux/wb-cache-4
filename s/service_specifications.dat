260|1068|Public
25|$|Pathak, J., Basu, S., and Honavar, V. (2008). Composing Web Services through Automatic Reformulation of <b>Service</b> <b>Specifications.</b> Proceedings of the IEEE International Conference on Services Computing, IEEE, pp.361–369.|$|E
25|$|Web 2.0 often uses machine-based {{interactions}} such as REST and SOAP. Servers often expose proprietary Application programming interfaces (API), but standard APIs (for example, for posting to a blog or notifying a blog update) {{have also}} come into use. Most communications through APIs involve XML or JSON payloads. REST APIs, through {{their use of}} self-descriptive messages and hypermedia as the engine of application state, should be self-describing once an entry URI is known. Web Services Description Language (WSDL) is the standard way of publishing a SOAP Application programming interface {{and there are a}} range of Web <b>service</b> <b>specifications.</b>|$|E
2500|$|Airtrans was {{operated}} over {{a number}} of fixed routes throughout the airport. Each route could be modified using different stations, guideways and vehicle configurations. Conversion of the system to offer point-to-point service like a true group rapid transit system was considered but not implemented, although all stations contained bypass tracks or vehicles could proceed through lower-demand stations without stopping. The flexibility of the system resulted in routes that changed often to serve different airline and passenger needs. While initially planned for [...] "origin and destination" [...] traffic, the system was modified to move connecting passengers (although never very effectively due to its uni-directional operation). The initial <b>service</b> <b>specifications</b> allowed for a maximum inter-terminal trip of 20 minutes, and 30 minutes to remote parking.|$|E
2500|$|... —The {{official}} Standard Positioning <b>Service</b> <b>specification</b> (2001 version).|$|R
5000|$|... #Subtitle level 3: 131: TR069 Connector <b>Service</b> <b>Specification</b> ...|$|R
5000|$|... #Subtitle level 3: 137: REST Management <b>Service</b> <b>Specification</b> ...|$|R
5000|$|Support composability as a {{critical}} architectural characteristic of Web <b>service</b> <b>specifications.</b> WS-CAF and WS-Context are targeted to become building blocks for other Web <b>service</b> <b>specifications</b> and standards.|$|E
5000|$|Generation {{of complex}} WSDL <b>service</b> <b>specifications</b> and {{management}} of Web service request handling.|$|E
5000|$|Demonstrated composability {{with other}} Web <b>Service</b> <b>specifications</b> {{that are being}} {{developed}} as open, recognized standards ...|$|E
5000|$|... #Subtitle level 3: 147: Transaction Control <b>Service</b> <b>Specification</b> ...|$|R
5000|$|XML Trust Assertion <b>Service</b> <b>Specification</b> (X-TASS) from VeriSign ...|$|R
40|$|In this paper, {{we propose}} a new {{algorithm}} for the derivation of a protocol specification in Pr/T-nets, {{which is the}} specification of communicating N entities (N can be given), from a given <b>service</b> <b>specification</b> in Pr/T-nets and an allocation of the places of the <b>service</b> <b>specification</b> to the N entities. Our algorithm decomposes each transition of the <b>service</b> <b>specification</b> into a set of communicating Pr/T-subnets running on the N entities. Moreover, for the efficient control of conflict of shared resources, we present a timestamp-based mutual exclusion algorithm and incorporate it into the derivation algorithm...|$|R
50|$|Interface standards, {{except for}} the {{physical}} layer to media, are approximate implementations of OSI <b>service</b> <b>specifications.</b>|$|E
5000|$|Pathak, J., Basu, S., and Honavar, V. (2008). Composing Web Services through Automatic Reformulation of <b>Service</b> <b>Specifications.</b> Proceedings of the IEEE International Conference on Services Computing, IEEE, pp. 361-369.|$|E
50|$|Web Services Security (WS-Security, WSS) is an {{extension}} to SOAP to apply security to Web services. It {{is a member of}} the Web <b>service</b> <b>specifications</b> and was published by OASIS.|$|E
2500|$|The Boot Integrity <b>Services</b> <b>specification</b> v1.0 {{published}} by Intel ...|$|R
5000|$|... #Subtitle level 3: 143: Network Interface Information <b>Service</b> <b>Specification</b> ...|$|R
5000|$|The WS-CAF {{accepts the}} {{following}} Web <b>services</b> <b>specifications</b> as input: ...|$|R
50|$|Technologies {{used for}} federated {{identity}} include SAML (Security Assertion Markup Language), OAuth, OpenID, Security Tokens (Simple Web Tokens, JSON Web Tokens, and SAML assertions), Web <b>Service</b> <b>Specifications,</b> Microsoft Azure Cloud Services, and Windows Identity Foundation.|$|E
50|$|Neither the OSI Reference Model nor OSI {{protocols}} {{specify any}} programming interfaces, other than deliberately abstract <b>service</b> <b>specifications.</b> Protocol specifications precisely define the interfaces between different computers, but the software interfaces inside computers, known as network sockets are implementation-specific.|$|E
50|$|There are {{two main}} {{branches}} of the BioMOBY project. One is a web-service-based approach, while the other utilizes Semantic Web technologies. This article will refer only to the Web <b>Service</b> <b>specifications.</b> The other branch of the project, Semantic Moby, is described in a separate entry.|$|E
40|$|LOTOS is a {{language}} developed within ISO for the formal description of communication protocoIs and distributed systems. In LOTOS, requirements for a distributed system are called a “service specification“. Each node exchanges synchronization messages {{to ensure the}} temporal ordering for the execution of events in a <b>service</b> <b>specification.</b> The actions of each node are described as a “protocol specification“. In this paper, we introduce a method to derive protocol <b>specifications</b> from a <b>service</b> <b>specification</b> written in a LOTOS based language. In order to derive the protocol specifications, we make the syntax tree of a given <b>service</b> <b>specification</b> and give some attributes for each node in the tree. The protocol specifications are derived automatically by evaluating these attributes. The derived protocol specifications satisfy the given <b>service</b> <b>specification.</b> We also explain a LOTOS simulator for the execution of derived protocol specifications. 1...|$|R
40|$|Abstract. This {{document}} {{presents the}} research {{approach of the}} SEINE project. The goal of the research {{is to improve the}} existing methods for <b>service</b> <b>specification</b> and discovery by using ontologies. The product of the research will be an ontology-based method for semantically rich <b>service</b> <b>specification</b> and discovery and infrastructure that implements the proposed method. ...|$|R
40|$|This report {{presents}} {{the result of}} the activity conducted in the various design tasks (T 1. 2. 1. a Information Service design, T 1. 2. 2. a Broker & Matchmaker Service design, T 1. 2. 3. a Keeper Service design, T 1. 2. 4. a Dynamic VO Support Service design, and T 1. 2. 5. a VDL Generator Service design) of the WP 1. 2 DL Creation & Management of the DILIGENT project during the period February 1 st - August 31 st 2005. It completes the <b>service</b> <b>specification</b> activity of the DILIGENT Collective Layer and replaces the interim <b>service</b> <b>specification</b> presented with the D 1. 2. 1 DL Creation & Management <b>Services</b> <b>Specification</b> interim report. The D 1. 2. 2 DL Creation & Management <b>services</b> <b>specification</b> report, by relying on the functions and features of the DILIGENT system, as reported in D 1. 1. 1 Test-bed functional specification [1], i) identifies the functionalities related with the services forming this functional area, ii) specifies the functionalities offered by each service, and iii) {{presents the}} <b>service</b> <b>specification</b> in order to capture and convey on the most significant architectural decisions that have been made by the services...|$|R
50|$|The Citylink Gold {{brand is}} used for two Scottish Citylink {{services}}, the G9 between Glasgow and Aberdeen and the G10 between Glasgow and Inverness. <b>Service</b> <b>specifications</b> are {{similar to that of}} the bus services branded as Stagecoach Gold, but with free tea and coffee served all day.|$|E
50|$|WS-Security is a {{flexible}} and feature-rich extension to SOAP to apply security to web services. It {{is a member}} of the WS-* family of web <b>service</b> <b>specifications</b> and was published by OASIS. Closely related to WS-Security is WS-Trust, also a WS-* specification and OASIS standard that provides extensions to WS-Security.|$|E
50|$|In 1989, to {{accommodate}} commencement speakers U.S. President George H. W. Bush and French President François Mitterrand, a large platform was constructed to Secret <b>Service</b> <b>specifications</b> {{on one side}} of the field. The platform, which can be seen in the bottom center of the color picture below, was removed during the summer of 2008 when the field was expanded and given a new turf.|$|E
50|$|Web <b>services</b> <b>specifications</b> {{are often}} under the {{umbrella}} of a quality management system.|$|R
5000|$|XML Interface for Network Services (XINS) {{provides}} a POX-style Web <b>service</b> <b>specification</b> format ...|$|R
40|$|<b>Service</b> <b>specification,</b> <b>service</b> {{oriented}} architecture, service modelling, SoaML The Service oriented architecture Modeling Language (SoaML) {{is a new}} specification {{from the}} Object Management Group (OMG) that provides support for modelling <b>services.</b> The SoaML <b>specification</b> defines three different approaches to specifying services; simple interfaces, service interfaces and service contracts. In this paper we {{provide an overview of}} the SoaML language constructs and discuss the three different ways to specify services. Furthermore, we provide practical modelling guidelines for how the different SoaML <b>service</b> <b>specification</b> approaches can be aligned and used as a baseline for specifying cloud-based services. ...|$|R
50|$|Google Cloud Storage is a RESTful online {{file storage}} web service for storing and {{accessing}} data on Google's infrastructure. The service combines the performance and scalability of Google's cloud with advanced security and sharing capabilities. It is an Infrastructure as a Service (IaaS), comparable to Amazon S3 online storage service. Contrary to Google Drive and according to different <b>service</b> <b>specifications,</b> Google Cloud Storage {{appears to be more}} suitable for enterprises.|$|E
50|$|Implementers {{commonly}} build SOAs using {{web services}} standards. One example is SOAP, which has gained broad industry acceptance after recommendation of Version 1.2 from the W3C (World Wide Web Consortium) in 2003. These standards (also {{referred to as}} web <b>service</b> <b>specifications)</b> also provide greater interoperability and some protection from lock-in to proprietary vendor software. One can, however, also implement SOA using any other service-based technology, such as Jini, CORBA or REST.|$|E
50|$|Web Services Management (WS-MAN) The DMTF’s Web Services Management (WS-Man) {{provides}} interoperability between management {{applications and}} managed resources, and identifies a {{core set of}} web <b>service</b> <b>specifications</b> and usage requirements that expose {{a common set of}} operations central to all systems management.A SOAP-based protocol for managing computer systems (e.g., personal computers, workstations, servers, smart devices), WS-Man supports web services and helps constellations of computer systems and network-based services collaborate seamlessly.|$|E
40|$|Abstract:- Unless automated, synthesizing {{specifications}} for concurrent and distributed communication protocol entities from a <b>service</b> <b>specification,</b> which is modeled in the UML state machine with composite states, is a time-consuming and labor-intensive task. In this paper, we introduce a tool, called the UML protocol specification synthesizer (UPSS), to automate an existing synthesis method that derives a protocol <b>specification</b> from a <b>service</b> <b>specification,</b> where both specifications are modeled in the UML state machine. The tool is developed in Java {{as an extension}} for a well known tool, Eclipse, and it supports drawing the UML state machine of the <b>service</b> <b>specification.</b> The tool stores the drawn diagram in XML format, parses the XML files, applies the synthesis rules to derive the corresponding protocol specification, stores the protocol specification in XML format, and allows for displaying and manipulating the protocol specification using the Eclipse diagram editor. Key-Words:- communication protocol, <b>service</b> <b>specification,</b> distributed protocol specification, automation, Java tool, UML state machine. ...|$|R
40|$|In general, the {{services}} of a distributed system are provided by some cooperative protocol entities. The protocol entities must exchange some data values and synchronization messages in order to ensure the temporal ordering of the events which are described in a <b>service</b> <b>specification</b> of the distributed system. It is desirable that a correct protocol entity specification for each node can be derived automatically from a given <b>service</b> <b>specification.</b> In this paper, we propose an algorithm which synthesizes a correct protocol entity specification automatically from a <b>service</b> <b>specification</b> in a Petri Net model with Registers called PNR model. In our model, parallel events and selective operations can be described naturally. The control flow of a <b>service</b> <b>specification</b> must be described as a free-choice net in order to simplify the derivation algorithm, however, many practical systems can be described in this class. In our approach, since each protocol entity specification is also described i [...] ...|$|R
5000|$|Device {{specification}} : The device register, {{memory and}} interrupt <b>services</b> <b>specification</b> {{obtained from the}} device data sheet.|$|R
