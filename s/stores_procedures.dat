1|454|Public
40|$|The {{main subject}} of the thesis is Food and Beverage {{inventory}} system in Anak Depok Restaurant, Den Dolder, The Netherland. The writers have identified that the main problem from the inventory system is not quite properly controlled. The establishment has limited inventory system only for food and beverage materials due to its function as the turn over cycle. It appears that the daily uses of materials are not always checked, and until now {{there has not been}} any changes in the inventory system. By implementing a good inventory system of food and beverage materials can make the daily uses of those materials easy to identify, especially when it is already in limited amount. The establishment is able to improve and complete the effectiveness of the materials' turn over. The writers attempt to analyze the inventory system which will be advantageus for the restaurant itself. This involves several elements of principles of purchasing, stocks and <b>stores</b> <b>procedures,</b> the inventory system itself. In analysing the problem on the stock inventory of food and beverage materials, the writers use the field analysis method, which is direct observation and interviewing the staffs who are responsible in handling the purchasing of food and beverage materials. This is also connected with the turn over of those materials used in daily operation of the restaurant. The result of this analysis is used to improve the effectiveness of food and beverage materials' storage and to solve the problems occured in the inventory system. The next step is to recommend a good inventory system, including proper stock control and punctual purchasing of food and beverage materials. The controlling action involves the inventory tracking record also the purchasing of food and beverage materials, so it can be evaluated and observed whether it is already effective or not besides to find whether the problems have been solved or not...|$|E
50|$|The MySQL {{database}} supports <b>stored</b> <b>procedures.</b> A <b>stored</b> <b>procedure</b> is a subroutine {{stored in}} the database catalog. Applications can call and execute the <b>stored</b> <b>procedure.</b> The CALL SQL statement is used to execute a <b>stored</b> <b>procedure.</b>|$|R
5000|$|Typical {{uses for}} <b>stored</b> <b>procedures</b> include [...] data-validation (integrated into the database) or [...] access-control mechanisms. Furthermore, <b>stored</b> <b>procedures</b> can {{consolidate}} and centralize logic that was originally implemented in applications. To {{save time and}} memory, extensive or complex processing that requires execution of several SQL statements can be saved into <b>stored</b> <b>procedures,</b> and all applications call the procedures. One can use nested <b>stored</b> <b>procedures</b> by executing one <b>stored</b> <b>procedure</b> from within another.|$|R
50|$|In some systems, <b>stored</b> <b>procedures</b> {{can be used}} {{to control}} {{transaction}} management; in others, <b>stored</b> <b>procedures</b> run inside a transaction such that transactions are effectively transparent to them. Stored procedures can also be invoked from a database trigger or a condition handler. For example, a <b>stored</b> <b>procedure</b> may be triggered by an insert on a specific table, or update of a specific field in a table, and the code inside the <b>stored</b> <b>procedure</b> would be executed. Writing <b>stored</b> <b>procedures</b> as condition handlers also allows database administrators to track errors in the system with greater detail by using <b>stored</b> <b>procedures</b> to catch the errors and record some audit information in the database or an external resource like a file.|$|R
50|$|SQL/JRT <b>stored</b> <b>procedures</b> are {{implemented}} in HSQLDB. Java <b>stored</b> <b>procedures</b> {{have also been}} implemented in Oracle's JServer (or Aurora JVM), which {{was introduced in the}} Oracle Database version 8i in 1999; it is now called Oracle JVM. IBM DB2 also supported Java <b>stored</b> <b>procedures</b> since about 1998, although using an external JVM (at that time).|$|R
50|$|The DataWindow {{also has}} the {{built-in}} ability to both retrieve data and update data via <b>stored</b> <b>procedures.</b> The user picks the <b>stored</b> <b>procedure</b> from a visual list.|$|R
50|$|By making <b>stored</b> <b>procedures</b> {{the unit}} of {{transaction}} and executing them at the partition containing the necessary data, {{it is possible to}} eliminate round trip messaging between SQL statements. Stored procedures are executed serially and to completion in a single thread without any locking or latching, similar to the LMAX architecture. Because data is in memory and local to the partition, a <b>stored</b> <b>procedure</b> can execute in microseconds. VoltDB's <b>stored</b> <b>procedure</b> initiation scheme allows all nodes to initiate <b>stored</b> <b>procedures</b> while ensuring that there is a single serializable global order.|$|R
50|$|When {{a client}} {{application}} calls a service provider or <b>stored</b> <b>procedure</b> through the server, a KSP server {{with a matching}} service provider or <b>stored</b> <b>procedure</b> is selected by the load balancer provider, and the request is routed to the appropriate KSP server. If a server, service provider, or <b>stored</b> <b>procedure</b> in the KSP server farm is unavailable, it will {{be taken out of}} rotation by the load balancer automatically.|$|R
25|$|SQL Server {{also allows}} <b>stored</b> <b>{{procedures}}</b> to be defined. Stored procedures are parameterized T-SQL queries, that {{are stored in}} the server itself (and not issued by the client application {{as is the case}} with general queries). Stored procedures can accept values sent by the client as input parameters, and send back results as output parameters. They can call defined functions, and other <b>stored</b> <b>procedures,</b> including the same <b>stored</b> <b>procedure</b> (up to a set number of times). They can be selectively provided access to. Unlike other queries, <b>stored</b> <b>procedures</b> have an associated name, which is used at runtime to resolve into the actual queries. Also because the code need not be sent from the client every time (as it can be accessed by name), it reduces network traffic and somewhat improves performance. Execution plans for <b>stored</b> <b>procedures</b> are also cached as necessary.|$|R
50|$|When logging to SQL, IAS {{appears to}} wrap the data into XML, then calls the <b>stored</b> <b>procedure</b> report_event, passing the XML data as text... the <b>stored</b> <b>procedure</b> can then unwrap the XML and save data as desired by the user.|$|R
30|$|Finally, besides {{creating}} new tables, whenever an ADE is implemented as database schema, {{a number of}} <b>stored</b> <b>procedures</b> must be also provided to help data management, given {{the complexity of the}} underlying schema. In the original 3 DCityDB, <b>stored</b> <b>procedures</b> (or functions, in the PostgreSQL jargon) can be grouped approximately in the “delete”, “get_envelope” and “miscellaneous” families. In particular, the “delete” <b>stored</b> <b>procedures</b> provide a convenient way of deleting objects having data spread over different tables.|$|R
50|$|When using {{late binding}} the {{timestamp}} check is not performed, and the <b>stored</b> <b>procedure</b> is executed via an anonymous PL/SQL block. While {{this can be}} slower, it removes the need to recompile all of the client applications when a <b>stored</b> <b>procedure</b> changes.|$|R
40|$|The {{software}} as {{a service}} model ensures not only cloud applications, but also cloud databases. In this paper we analyze the impact on <b>stored</b> <b>procedures</b> of the switch of the existing application to cloud applications and cloud databases. We demonstrate that the <b>stored</b> <b>procedures</b> and cloud applications have common advantages and we emphasize also other advantages of the <b>stored</b> <b>procedures.</b> As a contribution we propose a list of improvements to <b>stored</b> <b>procedures</b> that can be considered in the new versions of the SQL standard and implemented by the database management systems providers. For the moment the SQL standard does not include any feature related to the cloud databases, so we expect that once again the software industry will be one step forward to the SQL standard...|$|R
50|$|Most of the {{programming}} within a RDBMS is accomplished using <b>stored</b> <b>procedures</b> (SPs). Often procedures {{can be used}} to greatly reduce the amount of information transferred within and outside of a system. For increased security, the system design may grant access to only the <b>stored</b> <b>procedures</b> and not directly to the tables. Fundamental <b>stored</b> <b>procedures</b> contain the logic needed to insert new and update existing data. More complex procedures may be written to implement additional rules and logic related to processing or selecting the data.|$|R
50|$|Microsoft Access is a file {{server-based}} database. Unlike client-server {{relational database}} management systems (RDBMS), Microsoft Access does not implement database triggers, <b>stored</b> <b>procedures,</b> or transaction logging. Access 2010 includes table-level triggers and <b>stored</b> <b>procedures</b> {{built into the}} ACE data engine. Thus a Client-server database system is not a requirement for using <b>stored</b> <b>procedures</b> or table triggers with Access 2010.Tables, queries, forms, reports and macros can now be developed specifically for web base application in Access 2010. Integration with Microsoft SharePoint 2010 is also highly improved.|$|R
50|$|When using {{early binding}} between Ada and a database-stored procedure, a {{timestamp}} is checked {{to verify that}} the <b>stored</b> <b>procedure</b> has not changed since the code was compiled. This allows for faster executions and prevents the application from running against the wrong version of a <b>stored</b> <b>procedure.</b>|$|R
30|$|Define {{rules to}} deal with {{database}} <b>stored</b> <b>procedures.</b>|$|R
40|$|An SQL {{injection}} attack targets interactive web {{applications that}} employ database services. These applications accept user inputs {{and use them}} to form SQL statements at runtime. During an SQL injection attack, an attacker might provide malicious SQL query segments as user input which could result in a different database request. By using SQL injection attacks, an attacker could thus obtain and/or modify confidential/sensitive information. An attacker could even use a SQL injection vulnerability as a rudimentary IP/Port scanner of the internal corporate network. Several papers in literature have proposed ways to prevent SQL injection attacks in the application layer by examining dynamic SQL query semantics at runtime. However, very little emphasis is laid on securing <b>stored</b> <b>procedures</b> in the database layer which could also suffer from SQL injection attacks. Some papers in literature even refer to <b>stored</b> <b>procedures</b> as a remedy against SQL injection attacks. As <b>stored</b> <b>procedures</b> reside on the database front, the methods proposed by them cannot be applied to secure <b>stored</b> <b>procedures</b> themselves. In this paper, we propose a novel technique to defend against the attacks targeted at <b>stored</b> <b>procedures.</b> This technique combines static application code analysis with runtime validation to eliminate the occurrence of such attacks. In the static part, we design a <b>stored</b> <b>procedure</b> parser, and for any SQL statement which depends on user inputs, we use this parser to instrument the necessary statements in order to compare the original SQL statement structure to that including user inputs. The deployment of this technique can be automated and used on a need-only basis. We also provide a preliminary evaluation {{of the results of the}} technique proposed, as performed on several <b>stored</b> <b>procedures</b> in th...|$|R
5000|$|Another {{example of}} <b>stored</b> <b>procedure</b> in Java {{embedded}} in Oracle Documentation: ...|$|R
5000|$|Mod_PLSQL {{interface}} for executing PL/SQL <b>stored</b> <b>procedures</b> in an Oracle database ...|$|R
5000|$|... {{is used to}} {{immediately}} return from a <b>stored</b> <b>procedure</b> or function.|$|R
50|$|Note (4): Materialized views can be {{emulated}} using <b>stored</b> <b>procedures</b> and triggers.|$|R
5000|$|Stored Procedure Group Map OPCdata to {{and from}} SQL <b>stored</b> <b>procedure</b> parameters.|$|R
5000|$|Stored Procedures - allows queries to {{be defined}} for {{database}} <b>stored</b> <b>procedures.</b>|$|R
5000|$|SQL {{transaction}} details, such as errors, methods used, and <b>stored</b> <b>procedures</b> executed ...|$|R
50|$|The {{increasing}} {{adoption of}} <b>stored</b> <b>procedures</b> {{led to the}} introduction of procedural elements to the SQL language in the SQL:1999 and SQL:2003 standards in the part SQL/PSM. That made SQL an imperative programming language. Most database systems offer proprietary and vendor-specific extensions, exceeding SQL/PSM. A standard specification for Java <b>stored</b> <b>procedures</b> exists as well as SQL/JRT.|$|R
5000|$|Tarantool, a NoSQL database, {{with a set}} of <b>stored</b> <b>procedures</b> for message queues ...|$|R
50|$|The Microsoft adCenter Keyword Services Platform {{server farm}} {{provides}} a scalable platform for keyword technologies. Each server {{in the farm}} can have different configuration to suit a variety of service providers and <b>stored</b> <b>procedures.</b> A dynamic service load balance server, a cloud server, is {{the hub of the}} KSP server farm. When a KSP server is added to the server farm via the cloud server, all available keyword service providers and <b>stored</b> <b>procedures</b> are dynamically discovered and registered with the server. Any changes in the availability of the KSP server, as well as all its running service providers and <b>stored</b> <b>procedures,</b> are discovered and registered automatically with the server.|$|R
50|$|The exact {{and correct}} {{implementation}} of <b>stored</b> <b>procedures</b> varies from one database {{system to the}} other. Most major database vendors support them in some form. Depending on the database system, <b>stored</b> <b>procedures</b> can be implemented {{in a variety of}} programming languages, for example SQL, Java, C, or C++. Stored procedures written in non-SQL languages may or may not execute SQL statements themselves.|$|R
40|$|Abstract. Many legacy {{applications}} rely on {{a single}} instance relational database. In the age of big data, applications with growing popularity may continue to generate large amount of data. The data would be beyond the limit of a traditional relational database. These applications can be migrated to a distributed database system for acquiring high scalability and performance. But the migration process is complicated especially for user defined <b>stored</b> <b>procedure.</b> In order to obtain the correct behavior, a <b>stored</b> <b>procedure</b> usually has to be rewritten in the application code. This rewriting is usually a time consuming and unpleasant task. This study gives a mechanism for migrating <b>stored</b> <b>procedure</b> from single instance relational database to distributed sharded database without the need of application code rewriting. In the migration solution offered by this study, Oracle <b>stored</b> <b>procedure</b> code is parsed, analyzed, and translated {{so as to be}} stored and executed globally in a sharded database...|$|R
40|$|LDAP {{directories}} lack <b>stored</b> <b>procedure</b> and trigger facilities {{which have}} been provided by relational database management systems for many years. The need for these rich integration tier constructs drives information architects towards the use of relational databases for managing centralized information that would have best been served by directories. A novel model for specifying <b>stored</b> <b>procedures</b> and triggers in LDAP directories is presented. Rather than introducing incompatible changes to the protocol, these features were designed by making use of LDAP extension points. LDAP <b>stored</b> <b>procedures</b> allow users to define their own server side routines and to call them via an LDAP extended operation. LDAP triggers raised by standard LDAP operations invoke LDAP <b>stored</b> <b>procedures.</b> Triggers can be defined on individual entries or on sets of entries using subtree specifications based on the X. 500 administrative model adopted by LDAP. The proposed models have been realized and tested within the Apache Directory Server. 1...|$|R
50|$|The CREATE {{command is}} used to {{establish}} a new database, table, index, or <b>stored</b> <b>procedure.</b>|$|R
5000|$|A <b>stored</b> <b>procedure</b> {{can return}} {{multiple}} values using the [...] parameter, or return no value.|$|R
5000|$|Editing {{of other}} {{database}} objects: views, triggers, events, <b>stored</b> <b>procedures,</b> processes, mysql variables, user permissions ...|$|R
50|$|Stored {{procedure}} {{languages are}} often vendor-specific. Changing database vendors usually requires rewriting existing <b>stored</b> <b>procedures.</b>|$|R
5000|$|Local {{and remote}} {{debugging}} of SQL <b>stored</b> <b>procedures</b> on supported versions of Microsoft SQL Server.|$|R
