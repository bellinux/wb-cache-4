69|642|Public
2500|$|... the MinGW and Cygwin {{projects}} {{also provide}} {{such an environment}} based on the GNU Compiler Collection (GCC), using a stand-alone header file set, to make linking against the Win32-specific DLLs simple. LCC-Win32 is a C compiler maintained by Jacob Navia, freeware for non-commercial use. Pelles C is a freeware C compiler maintained by Pelle Orinius. Free Pascal is a free <b>software</b> <b>Object</b> Pascal compiler that supports the Windows API. The MASM32 package is a mature project providing support for the Windows API under Microsoft Macro Assembler (MASM) by using custom made or converted headers and libraries from the Platform SDK. Flat assembler FASM allows building Windows programs without using an external linker, even when running on Linux.|$|E
5000|$|Silvaco Data Systems v. Intel Corp. {{addressed}} {{the question of}} whether possession of <b>software</b> <b>object</b> code can result in misappropriation of trade secrets ...|$|E
50|$|It is {{possible}} to organise the computations so that incoming samples are delivered singly to a <b>software</b> <b>object</b> that maintains the filter state between updates, with the final power result accessed after the other processing is done.|$|E
5000|$|Best Novella: The Lifecycle of <b>Software</b> <b>Objects</b> by Ted Chiang ...|$|R
40|$|Effectiveness {{and clarity}} of <b>software</b> <b>objects,</b> their {{adherence}} to coding standards and programming habits of programmers are important features of {{overall quality of}} software systems. This paper proposes an approach towards a quantitative software quality assessment with respect to extensibility, reusability, clarity and efficiency. It exploits techniques of Computational Intelligence (CI) that are treated as a consortium of granular computing, neural networks and evolutionary techniques. In particular, we take advantage of self-organizing maps {{to gain a better}} insight into the data, and study genetic decision trees [...] a novel algorithmic framework to carry out classification of <b>software</b> <b>objects</b> with respect to their quality. Genetic classifiers serve as a "quality filter" for <b>software</b> <b>objects.</b> Using these classifiers, a system manager can predict quality of <b>software</b> <b>objects</b> and identify low quality objects for review and possible revision. The approach is applied to an object-oriented visualization-based software system for biomedical data analysis...|$|R
40|$|In {{this paper}} we define and {{describe}} syntactical substitution and syntactical similarity relationships between <b>software</b> <b>objects,</b> {{in order to}} make the reuse process more effective. As <b>software</b> <b>objects</b> we consider well documented programs and files, procedures, implementing a certain function, as well as object types, as they are defined and used in object oriented languages. We introduce a model for the description and storage of syntactical substitution or syntactical similarity relationships in a Software Information Base (SIB). We also define a model for the description of the syntactical structure of CooL, in order to describe the syntax of <b>software</b> <b>objects</b> in CooL. Both models are described using the TELOS, a knowledge representation language. We define the syntactical substitution reletionship between basic and structured types used in the programming language. Then we introduce a function for the evaluation of the degree of syntactical substitution between two given types. After that, we present a set of attributes for the <b>software</b> <b>objects</b> we deal with, which characterizes them. Having defined those attributes we introduce the function for the evaluation of the degree of syntactical substitution between two given <b>software</b> <b>objects.</b> This function uses the results of the same function with other intermediate operants, such as basic or structured types or <b>software</b> <b>objects,</b> in order to evaluate the degree of syntactical substitution. In the end we introduce an extended model for the evaluation of of the degree of syntactical substitution between <b>software</b> <b>objects</b> with respect to sets of attributes and we introduce a similar function for the evaluation of the degree of syntactical substitution with respect to sets of attributes. Our model was used in two different application examples : a car rental system and a library of optimization algorithms...|$|R
5000|$|Structural {{synthesis}} of programs {{is a method}} for composing programs from already implemented components (e.g. from computer commands or <b>software</b> <b>object</b> methods) that {{can be considered as}} functions. A specification for synthesis is given in intuitionistic propositional logic by writing axioms about the applicability of functions. An axiom about the applicability of a function f is a logical implication ...|$|E
50|$|Software mining is an {{application}} of knowledge discovery {{in the area of}} software modernization which involves understanding existing software artifacts. This process is related to a concept of reverse engineering. Usually the knowledge obtained from existing software is presented in the form of models to which specific queries can be made when necessary. An entity relationship is a frequent format of representing knowledge obtained from existing <b>software.</b> <b>Object</b> Management Group (OMG) developed specification Knowledge Discovery Metamodel (KDM) which defines an ontology for software assets and their relationships for the purpose of performing knowledge discovery of existing code.|$|E
5000|$|... the MinGW and Cygwin {{projects}} {{also provide}} {{such an environment}} based on the GNU Compiler Collection (GCC), using a stand-alone header file set, to make linking against the Win32-specific DLLs simple. LCC-Win32 is a C compiler maintained by Jacob Navia, freeware for non-commercial use. Pelles C is a freeware C compiler maintained by Pelle Orinius. Free Pascal is a free <b>software</b> <b>Object</b> Pascal compiler that supports the Windows API. The MASM32 package is a mature project providing support for the Windows API under Microsoft Macro Assembler (MASM) by using custom made or converted headers and libraries from the Platform SDK. Flat assembler FASM allows building Windows programs without using an external linker, even when running on Linux.|$|E
40|$|This paper {{describes}} research {{associated with}} the development and evaluation of Odin-an environ-ment integration system {{based on the idea}} that tools should be integrated around a centralized store of persistent <b>software</b> <b>objects.</b> The paper describes this idea in detail and then presents the Odin architecture, which features such notions as the typing of <b>software</b> <b>objects,</b> composing tools out of modular tool fragments, optimizing the storage and rederivation of <b>software</b> <b>objects,</b> and isolating tool interconnectivity information in a single centralized object. The paper then describes some projects that have used Odin to integrate tools on a large scale. Finally, it discusses the significance of this work and the conclusions that can be drawn about superior software environment architectures...|$|R
40|$|Object {{management}} systems (OMS) {{are central to}} software engineering tools and environments. These systems are responsible for recording and managing the various <b>software</b> artifacts (or <b>objects)</b> produced in the software development process. The way in which <b>software</b> <b>objects</b> are managed has direct impact {{on the degree of}} support provided by the tools and environments. In this paper, we present a comprehensive set of requirements for <b>object</b> management in <b>software</b> engineering tools and environments, analyse some of the major object {{management systems}} in terms of meeting these requirements, and suggest areas for further investigation and improvement. 1 Introduction Software engineering tools and environments assist software developers in carrying out various software development activities and maintaining the software artifacts (also referred to as software documents or <b>software</b> <b>objects)</b> produced in the software development process. Examples of <b>software</b> <b>objects</b> are system specifications, sy [...] ...|$|R
5000|$|RSO bundles: {{pre-built}} reusable <b>software</b> <b>objects</b> (RSOs) {{include the}} appearance {{and behavior of}} the object coupled with a well defined interface.|$|R
5000|$|Metaobject {{protocol}} {{is contrary}} to the [...] "closed" [...] aspect of Bertrand Meyer's open/closed principle, which holds that <b>software</b> <b>object</b> systems should be open for extension but closed for modification. Metaobject protocol, by contrast, transparently exposes the internal composition of objects and the entire object system in terms of the system itself. A metaobject protocol is not merely an interface to an [...] "underlying" [...] implementation; rather, through metaobject protocol the object system is recursively implemented in terms of a meta-object system, which itself is theoretically implemented in terms of a meta-metaobject system, and so on until an arbitrary base case (a consistent state of the object system) is determined, with the protocol as such being the recursive functional relationship between these implementation levels.|$|E
50|$|Another {{promising}} {{application of}} knowledge discovery {{is in the}} area of software modernization, weakness discovery and compliance which involves understanding existing software artifacts. This process is related to a concept of reverse engineering. Usually the knowledge obtained from existing software is presented in the form of models to which specific queries can be made when necessary. An entity relationship is a frequent format of representing knowledge obtained from existing <b>software.</b> <b>Object</b> Management Group (OMG) developed specification Knowledge Discovery Metamodel (KDM) which defines an ontology for the software assets and their relationships for the purpose of performing knowledge discovery of existing code. Knowledge discovery from existing software systems, also known as software mining is closely related to data mining, since existing software artifacts contain enormous value for risk management and business value, key for the evaluation and evolution of software systems. Instead of mining individual data sets, software mining focuses on metadata, such as process flows (e.g. data flows, control flows, & call maps), architecture, database schemas, and business rules/terms/process.|$|E
40|$|Abstract. The {{language}} game {{works in}} symbiosis {{with the human}} brain. It {{is not enough to}} simulate semiosis in the sense of conceiving a minimal structure of signification able to unfold a generative trajectory of the OO alive <b>software</b> <b>object</b> consisting of deep and surface levels. Agile software developers have been paving the way to this significant turn to build the <b>software</b> <b>object</b> as a whole alive unit. First they criticize software engineering as a metaphor. Second the search for the right one. This entails to take into consideration the nature of the <b>software</b> <b>object</b> and how it unfolds. A living <b>software</b> <b>object</b> must necessarily reflect the interaction of human beings with the real world as well as how the world is as a mirror. An ecodesign model to design and plan sustainable cities being implemented in the prototype-based OO programming language Self is given. These cities when built behave as true living organisms. 1...|$|E
40|$|Biomedical data {{analysis}} typically involves large data sets, a diverse user base and intensive visualization procedures. These features place stringent quality demands upon software development and performance {{for both the}} architect and supervisor. An invaluable tool for software supervisors would be the automatic qualitative grading of <b>software</b> <b>objects</b> {{in terms of their}} extensibility, reusability, clarity and efficiency. This paper examines the quality assessment of <b>software</b> <b>objects</b> by a multilayer perceptron in relation to a gold standard provided by two independent software architects...|$|R
40|$|In our days, the {{necessity}} of laboratory apparatus accustoming by building up specific <b>software</b> <b>objects</b> for studying the virtual evolution of physical phenomena is a major request. In this respect, {{the aim of the}} present paper is to present a developed set of electricity interactive simulation computer applica-tions. By following an Object Oriented Programming technology, the necessary <b>software</b> <b>objects</b> are described. Finally, specific examples are extensively presented as well as some screen-shots of the applications interface. Comment: 10 pages, 11 figure...|$|R
5000|$|System Shock, where ICE is {{represented}} in cyberspace as both autonomous security programs and ICE protection attached to data or <b>software</b> <b>objects</b> appearing as blue crystal formations.|$|R
40|$|The present paper {{describes}} the CAE-based approach {{for analysis of}} dynamics and stress state of parts of mechanical systems. The approach is being implemented in Universal Mechanism (UM) <b>software.</b> <b>Object</b> of researches is considered as rigid-flexible multibody system. Dynamics of flexible bodies is simulated using data imported from finite element analysis (FEA) software. An applicatio...|$|E
40|$|In {{an upgrade}} of the Range Data Acquisition Computer (RADAC) software, a modular <b>software</b> <b>object</b> library was {{developed}} to implement required functionality for filtering of flight-vehicle-tracking data and management of tracking-data sources. (The RADAC software is used to process flight-vehicle metric data for realtime display in the Wallops Flight Facility Range Control Center and Mobile Control Center. ...|$|E
40|$|Abstract. In {{this paper}} a formalized {{description}} of <b>software</b> <b>object</b> type system for building IEC 61499 applications is given, and {{a transition from}} the type system to an instance one is considered. The basic result of the paper is a function block model belonging to a state transition model. For formal definitions the set-theoretical and graph grammar-based approaches are used...|$|E
40|$|Abstract—Software {{engineers}} share {{experiences with}} modern technologies {{by means of}} software information sites, such as STACK OVERFLOW. These sites allow developers to label posted content, referred to as <b>software</b> <b>objects,</b> with short descriptions, known as tags. However, tags assigned to objects tend to be noisy and some objects are not well tagged. To {{improve the quality of}} tags in software information sites, we propose ENTAGREC, an automatic tag recommender based on historical tag assignments to <b>software</b> <b>objects</b> and we evalu-ate its performance on four software information sites, STAC...|$|R
40|$|This paper {{presents}} a proposed extension {{to the object}} oriented paradigm, whereby <b>software</b> <b>objects</b> are not only responsible for the encapsulation of data, but are also aware of the sensitivity of that data. Those <b>software</b> <b>objects</b> which encapsulate sensitive information will actively defend both their sensitive data and their functionality. These self-defending objects use object level role based access control to secure those sensitive resources. Applying access control measures within self-defending objects will not only ensure that access controls are appropriate and non bypassable, but will also simplify the development of security aware applications...|$|R
5000|$|VisualWorks is a {{cross-platform}} {{implementation of}} the Smalltalk language. It is implemented as a development system based on [...] "images", which are dynamic collections of <b>software</b> <b>objects,</b> each contained in a system image.|$|R
40|$|In {{this paper}} we present {{empirical}} work detailing the engagement practices {{of a large}} FLOSS project, the Digital Business Ecosystem (DBE). In common with many other FLOSS projects, the DBE project focused {{on the development of}} infrastructural software components. Infrastructures and FLOSS software exhibit multiplicity: as objects they both change and stay the same. Whilst the implications of multiplicity with respect to infrastructure have been well-documented, with respect to FLOSS, they remain under-explored. Through examining how the DBE engaged new participants we were able to explore the nature of the FLOSS <b>software</b> <b>object</b> by asking the implied question: engagement with what? We draw on recent analysis by Law and Singleton to show how the innovative yet non-existent potentiality of the DBE was as signifi- cant to engagement as its steadily growing odebase. We argue that acknowledging the materiality and immateriality of the FLOSS <b>software</b> <b>object</b> has important consequences for management of, and engagement with, FLOSS projects...|$|E
40|$|The fourth {{activity}} {{arises from}} the nature of system elements as self-contained units, with defined functionality and external interfaces. Each contract document can be viewed {{in the same way}} as one views a <b>software</b> <b>object,</b> and abstracting from its use in a particular project by means of appropriate metadata, it can be incorporated into a corporate contract document database. This standardiza-tion, in addition to any industry-wide standardization...|$|E
40|$|ABSTRACT: We {{describe}} the architecture and {{design for the}} Distributed Mission Training Integrated Threat Environment (DMTITE) system. DMTITE supports the development and deployment {{of different types of}} computer generated actors (CGAs) in large-scale Distributed Interactive Simulation (DIS) and High Level Architecture (HLA) based simulations. To address issues in software architecture, design, and prototyping, the architecture exploits the technical advantages provided by object-oriented techniques, component <b>software,</b> <b>object</b> frameworks, and containerization to achieve composability, flexibility, re-usability, and generality. 1...|$|E
40|$|Traditional {{information}} access systems generally {{assume that}} a well-articulated query exists, and that once an object i found, it can be readily understood. Although this asumption works for retrieving text objects, in more compi x domains, such as retrieving <b>software</b> <b>objects</b> for reuse, queries must be incrementally constructed and support is n ded for comprehending what is retrieved. Therefore, information access methods need support for query con [...] tnIction and relevance evaluation {{as an integral part}} of the I tion process. Two prototype systems are described for supporting this n d: CODEFINDER for query construction and EXPLAINER r explanations of program examples. These systems interact to support the processes of locating and comprehending <b>software</b> <b>objects</b> for reuse...|$|R
40|$|The objects {{produced}} during the software development process are generally highly interrelated {{and have a}} complex structure. Recent works on programming environments and software engineering methodologies attempt to simplify the design and construction of <b>software</b> <b>objects.</b> In practice, people involved in developing software find the current situation frustrating, because existing tools supply {{only a small amount}} of automated assistance and tool integration. In this paper we seek an integration by depicting an environment built of two strongly connected components: a system database, which contains all the <b>software</b> <b>objects</b> pertaining to a project and organizes them under a suitable data model, and a flexible environment language, in which the environment dynamics can be expressed...|$|R
50|$|In 2007 the Keeping Emulation Environments Portable (KEEP) project, {{part of the}} EU Framework Programmes for Research and Technological Development 7, {{developed}} {{tools and}} methodologies to keep digital <b>software</b> <b>objects</b> available in their original context. Digital <b>software</b> <b>objects</b> as video games might get lost because of digital obsolescence and non-availability of required legacy hardware or operating system software; such software {{is referred to as}} abandonware. Because the source code is often not available any longer, emulation is the only preservation opportunity. KEEP provided an emulation framework to help the creation of such emulators. KEEP was developed by Vincent Joguin, first launched in February 2009 and was coordinated by Elisabeth Freyre of the French National Library.|$|R
40|$|This paper {{proposes a}} novel {{approach}} to implement <b>software</b> <b>object</b> in hardware. Data-Memory mapping schemes are investigated and four hardware object design schemes are proposed and implemented on a CAD tool. Performance evaluation is carried out in Altera Quartus tool in terms of speed, logic elements and number of transitions. The result of experiments shows that object-reference scheme {{is much better than}} the other 3 schemes in terms of hardware cost, energy consumption and speed for FPGA implementation. Keywords:Java software objects, hardware objects...|$|E
40|$|Models, Software Models and UML. - UML for Real-Time. - Structural Modeling with UML 2. 0. - Message Sequence Charts. - UML and Platform-based Design. - UML for Hardware and <b>Software</b> <b>Object</b> Modeling. - Fine Grained Patterns for Real-Time Systems. - Architectural Patterns for Real-Time Systems. - Modeling Quality of Service with UML. - Modeling Metric Time. - Performance Analysis with UML. - Schedulability Analysis with UML. - Automotive UML. - Specifying Telecommunications Systems with UML. - Leveraging UML to Deliver Correct Telecom Applications. - Software Performance Engineering...|$|E
40|$|In fact Java is {{standard}} object orieneted programming language. Unified Modelling Language (UML) {{is in fact}} visual model standard in designing <b>software</b> <b>object</b> oriented. Java as object oriented programming language used applied model result using UML. Both have elements interpretation, so that can be gotten syncronisesion between some diagram in UML and java language fiture. This paper flatten map scheme like class diagram, sequential, component, and starchart to resource code srtucture in java. Map scheme evaluation test used simple model part, than made UML diagram required. This paper discuss strudtured approach in arousing java code from UML elements...|$|E
40|$|The {{subject of}} this paper is the {{description}} of a process-centered software development environment called MERLIN which monitors and guides teams of software developers and managers in producing <b>software</b> <b>objects.</b> <b>Software</b> <b>objects</b> (or objects for short) include all sorts of documents like the requirements analysis, design, code, user manuals, contracts etc. For each user, MERLIN automatically displays a specific working context which contains information like objects, their relations, their current development state, and corresponding tools. This information is filtered according to the (access) rights and duties a particular user has in a particular project, i. e. the working context depends on the user's role (e. g. programmer, designer, manager). Internally, the computation of the information to be contained in a working context, is based on a rule-like definition of a software process and a flexible interpretation mechanism to enact such a process definition. The main feature of the in [...] ...|$|R
25|$|Software reuse {{grew out}} of the {{standard}} subroutine libraries of the 1960s. It is the main principle of today's object-oriented programming. Instead of constantly reinventing software wheels, programming languages like C++, Java, Objective-C, and others are building vast collections of reusable <b>software</b> <b>objects</b> and components.|$|R
40|$|Recent {{developments}} {{have shown the}} need for an integrated view of the large scale software development environment that takes account of the artifacts and the way they are produced. To ful#ll these requirements, the activities as well as <b>software</b> <b>objects</b> in development and maintenance must be managed. We describe in this paper the work that we are carrying out in order to support a software process modeling language where the dynamic behavior of <b>software</b> <b>objects</b> can be modeled and supported. We shall discuss an original approach to process modeling known as an object-oriented software process modeling language. Special attention is paid on how object-oriented concepts, the role concept and triggers rules make it possible to describe in an integrated framework software process models. ...|$|R
