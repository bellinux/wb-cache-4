234|10000|Public
25|$|Often <b>systems</b> <b>programs</b> {{cannot be}} {{run in a}} debugger. Running the program in a {{simulated}} environment can sometimes be used to reduce this problem.|$|E
25|$|The Defense Infrastructure, or DI, is {{organized}} into ten sectors. Each sector {{is composed of}} assets, such as <b>systems,</b> <b>programs,</b> people, equipment, or facilities. Assets may be simple, such as one facility within one geographic location, or complex, involving geographically dispersed links and nodes.|$|E
25|$|Orbital's current {{advanced}} flight <b>systems</b> <b>programs</b> {{include the}} contract with Stratolaunch Systems to design a new intermediate-class rocket to be carried aloft and launched from the largest aircraft ever built-Stratolaunch carrier aircraft. Orbital {{is responsible for the}} program's overall systems engineering, and the development, production, test, and operations of the air-launch rocket and related ground operations, including payload and launch vehicle integration. A demo launch is currently scheduled for 2017.|$|E
50|$|Second, PL/I was {{overtaken}} in the <b>system</b> <b>programming</b> field. The IBM <b>system</b> <b>programming</b> {{community was}} not ready to use PL/I; instead, IBM developed and adopted a proprietary dialect of PL/I for <b>system</b> <b>programming.</b> - PL/S. With the success of PL/S inside IBM, and of C outside IBM, the unique PL/I strengths for <b>system</b> <b>programming</b> became less valuable.|$|R
5000|$|August 1983 - July 1986, <b>System</b> <b>Program</b> Director, F-16 <b>System</b> <b>Program</b> Office, Aeronautical <b>Systems</b> Division, Wright-Patterson AFB, Ohio ...|$|R
25|$|<b>System</b> <b>programming</b> (or <b>systems</b> <b>programming)</b> is the {{activity}} of <b>programming</b> computer <b>system</b> software. The primary distinguishing characteristic of <b>systems</b> <b>programming</b> when compared to application programming is that application programming aims to produce software which provides services to the user directly (e.g. word processor), whereas <b>systems</b> <b>programming</b> aims to produce software and software platforms which provide services to other software, are performance constrained, or both (e.g. operating systems, computational science applications, game engines and AAA video games, industrial automation, and {{software as a service}} applications).|$|R
25|$|When the kernel has an {{appropriate}} device driver in place, it can then access {{the contents of}} the disk drive in raw format, which may contain one or more file systems. A file system driver is used to translate the commands used to access each specific file system into a standard set of commands that the operating system can use to talk to all file <b>systems.</b> <b>Programs</b> can then deal with these file systems on the basis of filenames, and directories/folders, contained within a hierarchical structure. They can create, delete, open, and close files, as well as gather various information about them, including access permissions, size, free space, and creation and modification dates.|$|E
2500|$|Launcher Systems: Crane {{provides}} {{high reliability}} product and subsystem engineering and logistics to the Navy’s Strategic <b>Systems</b> <b>Programs</b> Strategic Weapons System and Attack Weapon Control System ...|$|E
5000|$|Defense Procurement & Acquisition Policy Directorate - {{responsible}} for all acquisition and procurement policy matters in the Department, including serving as the principal advisor to the Under Secretary on acquisition/procurement strategies for all major weapon <b>systems</b> <b>programs,</b> major automated information <b>systems</b> <b>programs,</b> and services acquisitions ...|$|E
50|$|In {{contrast}} with application languages, <b>system</b> <b>programming</b> languages typically offer more-direct {{access to the}} physical hardware of the machine: an archetypical <b>system</b> <b>programming</b> language in this sense was BCPL. <b>System</b> <b>programming</b> languages often lack built-in input/output (I/O) facilities because a system-software project usually develops its own I/O mechanisms or builds on top of basic monitor I/O or screen management facilities. The distinction between languages used for <b>system</b> <b>programming</b> and application programming became blurred over time with the widespread popularity of PL/I, C and Pascal.|$|R
50|$|<b>System</b> <b>programming</b> (or <b>systems</b> <b>programming)</b> is the {{activity}} of <b>programming</b> computer <b>system</b> software. The primary distinguishing characteristic of <b>systems</b> <b>programming</b> when compared to application programming is that application programming aims to produce software which provides services to the user directly (e.g. word processor), whereas <b>systems</b> <b>programming</b> aims to produce software and software platforms which provide services to other software, are performance constrained, or both (e.g. operating systems, computational science applications, game engines and AAA video games, industrial automation, and {{software as a service}} applications).|$|R
5000|$|IMP was a <b>systems</b> <b>programming</b> {{language}} {{developed by}} Edgar T. Irons {{in the late}} 1960s through early 1970s. Unlike most other <b>systems</b> <b>programming</b> languages, IMP was an [...]|$|R
50|$|On December 8, 2008, {{he became}} Principal Deputy of the Navy's Strategic <b>Systems</b> <b>Programs.</b>|$|E
5000|$|Business <b>Systems</b> <b>programs</b> combine Information Technology (IT) and Business/Management {{courses and}} {{are common in}} Australia.|$|E
50|$|While PWB users managed {{their source}} code on PDP-11 Unix <b>systems,</b> <b>programs</b> were often written {{to run on}} other legacy {{operating}} systems. For this reason, PWB included software for submitting jobs to IBM System/370, UNIVAC 1100 series, and XDS Sigma 5 computers. In 1977 PWB supported a user community of about 1100 users in the Business Information <b>Systems</b> <b>Programs</b> (BISP) group of Bell Labs.|$|E
50|$|Viktor Petrovich Ivannikov (Ви́ктор Петро́вич Ива́нников; 27 February 1940 - 27 November 2016) was a Russian {{computer}} scientist, {{a member}} of Russian Academy of Sciences, the head of <b>System</b> <b>Programming</b> Chair for the Institute for <b>System</b> <b>Programming,</b> head of the Departments of <b>system</b> <b>programming</b> at the Faculty of Computational Mathematics and Cybernetics, Moscow State University and the Moscow Institute of Physics and Technology.|$|R
40|$|Abstract. Reactive systems, such as {{operating}} systems or elevator control systems, are systems that ideally never terminate and {{are intended to}} maintain some interaction with their environment. Temporal logic {{is one of the}} methods for formal specification descriptions of reactive systems. By describing the formal specifications of reactive systems we can check the consistency of the specifications and whether they contain defects. By using a synthesis algorithm we also obtain reactive <b>system</b> <b>programs</b> from the formal specifications and prevent programming bugs. Therefore, it is important to describe reactive system formal specifications to reactive <b>system</b> <b>programs.</b> However, this algorithm synthesizes several reactive <b>system</b> <b>programs</b> from the formal specifications and it is supposed that some programs are good and some are bad. Thus, we have to choose the good programs for this specification among these reactive <b>system</b> <b>programs.</b> In this paper, we propose several strategies reactive <b>system</b> <b>program</b> synthesis to choose the efficient or good reactive <b>system</b> <b>program</b> among synthesized programs. ...|$|R
25|$|BLISS - <b>system</b> <b>programming</b> {{language}} {{developed at}} Carnegie Mellon University by W. A. Wulf, D. B. Russell, and A. N. Habermann around 1970. It {{was perhaps the}} best known <b>systems</b> <b>programming</b> language right up until C made its debut a few years later.|$|R
50|$|TIRR Memorial Hermann {{is one of}} {{fourteen}} sites in the U.S. to have the Traumatic Brain Injury (TBI) Model <b>Systems</b> <b>programs.</b>|$|E
50|$|In Unix-like {{operating}} <b>systems,</b> <b>programs</b> do redirection {{with the}} dup2(2) system call, or its less-flexible but higher-level stdio analogues, freopen(3) and popen(3).|$|E
50|$|Strategic Systems Program Office (SSP)The Strategic <b>Systems</b> <b>Programs</b> {{organization}} {{began with}} the POLARIS program and continues with the Ohio (SSBN-726)-class Trident submarines.|$|E
50|$|The Simplified Instructional Computer (also {{abbreviated}} SIC) is {{a hypothetical}} computer system introduced in System Software: An Introduction to <b>Systems</b> <b>Programming,</b> by Leland Beck. Due {{to the fact}} that most modern microprocessors include subtle, complex functions for the purposes of efficiency, {{it can be difficult to}} learn <b>systems</b> <b>programming</b> using a real-world system. The Simplified Instructional Computer solves this by abstracting away these complex behaviors in favor of an architecture that is clear and accessible for those wanting to learn <b>systems</b> <b>programming.</b>|$|R
5000|$|Chima Ugah - Computer Information <b>Systems</b> <b>Program</b> Coordinator/Director ...|$|R
5000|$|GTESPO - Ground Telecommunications Equipment <b>Systems</b> <b>Program</b> Office ...|$|R
5000|$|To {{undertake}} research, {{evaluation and}} {{monitoring of the}} <b>systems,</b> <b>programs</b> and materials {{with a view to}} improving the materials and increasing their effectiveness.|$|E
5000|$|Often <b>systems</b> <b>programs</b> {{cannot be}} {{run in a}} debugger. Running the program in a {{simulated}} environment can sometimes be used to reduce this problem.|$|E
5000|$|Some {{computer}} information <b>systems</b> <b>programs</b> {{have received}} accreditation from ABET, the recognized U.S. accreditor {{of college and}} university programs in applied science, computing, engineering, and technology.|$|E
5000|$|<b>Systems</b> <b>Programming</b> II (Cryptography and Network Security II) ...|$|R
5000|$|Mixed-Up Mother Goose - {{development}} <b>system</b> <b>programming</b> (Sierra) ...|$|R
50|$|<b>System</b> <b>programming</b> {{languages}} {{tend to be}} {{used for}} components and applications with large amounts of internal functionality such as operating systems, database servers, and Web browsers. These applications typically employ complex algorithms and data structures and require high performance. Prototypical examples of <b>system</b> <b>programming</b> languages include C and Modula-2.|$|R
5000|$|Launcher Systems: Crane {{provides}} {{high reliability}} product and subsystem engineering and logistics to the Navy’s Strategic <b>Systems</b> <b>Programs</b> Strategic Weapons System and Attack Weapon Control System ...|$|E
5000|$|Verifast is an {{advanced}} current {{tool in the}} in-between category. It has demonstrated proofs ranging from object-oriented patterns to highly concurrent algorithms and to <b>systems</b> <b>programs.</b>|$|E
50|$|Logical access {{controls}} enforce access control measures for <b>systems,</b> <b>programs,</b> processes, and information. The controls can be embedded within operating systems, applications, add-on security packages, or database and telecommunication management systems.|$|E
5000|$|AEWCSPO - Airborne Early Warning Control <b>System</b> <b>Program</b> Office ...|$|R
5000|$|<b>Systems,</b> <b>Programming,</b> Languages, and Applications: Software for Humanity (SPLASH) ...|$|R
5000|$|Vince Madison and Gavin Christopher - Oberheim <b>system</b> <b>programming</b> ...|$|R
