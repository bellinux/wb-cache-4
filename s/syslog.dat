201|26|Public
25|$|An example: Suppose {{there is}} a library {{function}} whose purpose is to parse a single <b>syslog</b> file entry. What should this function do if the entry is malformed? There is no one right answer, because the same library could be deployed in programs for many different purposes. In an interactive log-file browser, {{the right thing to}} do might be to return the entry unparsed, so the user can see it—but in an automated log-summarizing program, {{the right thing to do}} might be to supply null values for the unreadable fields, but abort with an error, if too many entries have been malformed.|$|E
50|$|The {{information}} provided by the originator of a <b>syslog</b> message includes the facility code and the severity level. The <b>syslog</b> software adds information to the information header before passing the entry to the <b>syslog</b> receiver. Such components include an originator process ID, a timestamp, and the hostname or IP address of the device.|$|E
5000|$|Enhancements to {{auditing}} {{and logging}} now provide {{the ability to}} retrieve audit events from the management node programmatically. This enhancement allows a <b>syslog</b> collector to be configured to accept the messages and write them to an external data store for further processing or archiving, or both. For more information see <b>Syslog</b> auditing and your cloud and <b>Syslog</b> configuration.|$|E
5000|$|Debian GNU/Linux used <b>syslogd</b> and klogd {{prior to}} 5.0; post-5.0 ("Lenny"), rsyslog is used ...|$|R
5000|$|... a LML {{enabling}} {{the treatment of}} any type of log file as <b>syslogs</b> or stream ...|$|R
5000|$|... {{use of the}} [...] {{application}} layer function, which causes the statement to be emitted at the [...] (=== 3, a.k.a. <b>Syslog's</b> [...] ) severity level ...|$|R
50|$|Octopussy {{receives}} <b>syslog</b> messages via <b>syslog</b> {{protocol and}} therefore behaves passively, not running {{any type of}} network agent on the remote machines under monitoring/surveillance. Octopussy completely conforms to RfC 3164 and RfC 3195 of the IETF, describing <b>syslog</b> as the logging mechanism in Unix-like/BSD operating systems. That especially includes the internal representation of the facility and severity-principle where applicable.|$|E
5000|$|The <b>Syslog</b> {{protocol}} {{is defined}} by Request for Comments (RFC) documents published by the Internet Engineering Task Force (Internet standards). The following {{is a list of}} RFCs that define the <b>syslog</b> protocol: ...|$|E
50|$|Computer system {{designers}} may use <b>syslog</b> for {{system management}} and security auditing {{as well as}} general informational, analysis, and debugging messages. A wide variety of devices, such as printers, routers, and message receivers across many platforms use the <b>syslog</b> standard. This permits the consolidation of logging data from different types of systems in a central repository. Implementations of <b>syslog</b> exist for many operating systems.|$|E
5000|$|... use of [...] {{application}} layer function, which passes a single C-style string directly {{through to the}} logging infrastructure and is suitable for logging low-memory conditions, at the [...] (=== 1, a.k.a. <b>Syslog's</b> [...] ) severity level ...|$|R
50|$|The server {{process which}} handles the message (<b>syslogd)</b> usually {{includes}} all lower (more severe) levels. That is, if messages {{are separated by}} individual severity, a Warning level entry will also be included in Notice, Info and Debug processing.|$|R
5000|$|... syslog-ng is {{available}} {{on a number of}} different Linux and Unix distributions. Some install it as the system default, or provide it as a package that replaces the previous standard <b>syslogd.</b> Several Linux distributions that used syslog-ng have replaced it with rsyslog.|$|R
5000|$|Gerhards {{focused on}} the IETF <b>syslog</b> {{standardization}} and authored four RFCs [...] on <b>syslog.</b> He wrote the base RFC 5424, which describes the <b>syslog</b> protocol architecture and stack. As {{a board member of}} Mitre's CEE effort, he worked on standardizing event expression formats and providing interoperability between different logging systems. He used his software projects as testbeds for IETF standardization including rsyslog for the development of RFC 5424, RFC 5425, and RFC 5426. He implemented RFC 3195, the <b>syslog</b> over RFC 3080 protocol. Later, Gerhards designed the Reliable Event Logging Protocol, and its predecessor Simple Event Transport Protocol (SETP).|$|E
50|$|RELP was {{developed}} in 2008 as a reliable protocol for rsyslog-to-rsyslog communication. As RELP designer Rainer Gerhards explains, the lack of reliable transmission in industry-standard <b>syslog</b> was a core motivation to create RELP. Originally, RFC 3195 <b>syslog</b> was considered to take up this part in rsyslog, but it suffered from high overhead and missing support for new IETF <b>syslog</b> standards (which have since been published as RFC 5424, but were not named at that time).|$|E
50|$|EEM is {{a member}} of a family of {{embedded}} management technologies in Cisco IOS including SNMP, NetFlow, IP SLA, Web Services Management Agent, <b>Syslog,</b> ESM (Embedded <b>Syslog</b> Manager), ERM (Embedded Resource Manager), EMM (Embedded Menu Manager), Tcl and Service Diagnostics.|$|E
40|$|Abstract—Accurate fault {{detection}} {{is a key}} element of resilient computing. <b>Syslogs</b> provide key information regarding faults, and are found on nearly all computing systems. Discovering new fault types requires expert human effort, however, as no previous algorithm has been shown to localize faults in time and space with an operationally acceptable false positive rate. We present experiments on three weeks of <b>syslogs</b> from Sandia’s 512 -node “Spirit ” Linux cluster, showing one algorithm that localizes 50 % of faults with 75 % precision, corresponding to an excellent false positive rate of 0. 05 %. The salient characteristics of this algorithm are (1) calculation of nodewise information entropy, and (2) encoding of word position. The key observation is that similar computers correctly executing similar work should produce similar logs. I...|$|R
40|$|In this paper, we de ne {{the forward}} {{integrity}} security property, motivate its appropriateness as a systems security requirement, and demonstrate designs that achieve this property. Applications include secure audit logs (e. g., <b>syslogd</b> data) for intrusion detection or accountability, communications security, and authenticating partial results of computation for mobile agents. We prove security theorems on our forward integrity message authentication scheme, and discus...|$|R
40|$|This paper {{presents}} a measurement-based availability assessment study using field data collected during a 4 -year period from 373 SunOS/Solaris Unix workstations and servers interconnected through a local area network. We {{focus on the}} estimation of machine uptimes, downtimes and availability based on the identification of failures that caused total service loss. Data corresponds to <b>syslogd</b> event logs that contain {{a large amount of}} information about the normal activity of the studied systems as well as their behavior in the presence of failures. It is widely recognized that the information contained in such event logs might be incomplete or imperfect. The solution investigated in this paper to address this problem is based on the use of auxiliary sources of data obtained from wtmpx files maintained by the SunOS/Solaris Unix operating system. The results obtained suggest that the combined use of wtmpx and <b>syslogd</b> log files provides more complete information {{on the state of the}} target systems that is useful to provide availability estimations that better reflect reality. 1...|$|R
5000|$|<b>Syslog</b> filtering: logrotate and logs {{redirection}} to /var/log/ndpmon.log ...|$|E
5000|$|Export event data to logging systems using <b>syslog</b> and RabbitMQ ...|$|E
5000|$|Monitoring: <b>Syslog,</b> Watchdog, S.M.A.R.T., SNMP (v1, 2c, and 3) (read-only) ...|$|E
5000|$|In {{multitasking}} computer operating systems, a daemon ( [...] or [...] ) is {{a computer}} program that runs as a background process, rather than being under the direct control of an interactive user. Traditionally, the process names of a daemon end with the letter d, for clarification that the process is, in fact, a daemon, and for differentiation between a daemon and a normal computer program. For example, <b>syslogd</b> is the daemon that implements the system logging facility, and sshd is a daemon that serves incoming SSH connections.|$|R
50|$|Cygwin {{consists}} of a library that implements the POSIX system call API in terms of Win32 system calls, a GNU development toolchain (including GCC and GDB) to allow software development, and running {{of a large number}} of application programs equivalent to those on Unix systems. Programmers have ported many Unix, GNU, BSD and Linux programs and packages to Cygwin, including the X Window System, K Desktop Environment 3, GNOME, Apache, and TeX. Cygwin permits installing inetd, <b>syslogd,</b> sshd, Apache, and other daemons as standard Windows services, allowing Microsoft Windows systems to emulate Unix and Linux servers.|$|R
40|$|International audienceThis paper {{presents}} a measurement-based availability study of networked Unix systems, {{based on data}} collected during 11 months from 298 workstations and servers interconnected through a local area computing network. The data corresponds to event logs recorded by the Unix operating system via the <b>Syslogd</b> daemon. Our study focuses on the identification of machine reboots and the evaluation of statistical measures characterizing: (a) the distribution of reboots (per machine, time), (b) the distribution of uptimes and downtimes associated to these reboots, (c) the availability of machines including workstations and servers, and (d) error dependencies between clients and servers...|$|R
5000|$|Proper modular {{architecture}} and separation of optional components (Cron, <b>syslog)</b> ...|$|E
50|$|Popular <b>syslog</b> {{tools such}} as Rsyslog conform to this new standard.|$|E
5000|$|A log {{viewer to}} search for <b>syslog</b> {{messages}} received by Octopussy ...|$|E
30|$|Our {{controlled}} experiment environment has the following configuration: a Cisco ASA firewall with NetFlow enabled, a Cisco switch with SPAN port connecting a Snort IDS, and a event monitoring server with SeeBot installed for analyzing various symptoms, including Snort alerts, <b>syslogs,</b> DNS logs and host events (e.g., IRC activity log, HIDS events, AVG anti-virus application, malware alerts) from distributed systems. In our system, network related evidence is adaptively combined with host related evidence. More specifically, network evidence will be initially analyzed {{at the first}} stage. The confidence evaluation on the generated detection hypotheses will be consistently conducted and incrementally updated with new evidence either passively input to actively collected from the monitored network system. Host based evidence such as security logs will be collected only when the passively input network related evidence is insufficient.|$|R
25|$|To {{reduce the}} risk of a {{vulnerability}} or misconfiguration allowing privilege escalation, many programs have been written or adapted to make use of privilege separation, privilege revocation and chrooting. Privilege separation is a technique, pioneered on OpenBSD and inspired by the principle of least privilege, where a program is split into two or more parts, one of which performs privileged operations and the other—almost always the bulk of the code—runs without privilege. Privilege revocation is similar and involves a program performing any necessary operations with the privileges it starts with then dropping them. Chrooting involves restricting an application to one section of the file system, prohibiting it from accessing areas that contain private or system files. Developers have applied these features to OpenBSD versions of many common applications, such as tcpdump, file, tmux, smtpd, and <b>syslogd.</b>|$|R
40|$|Of {{the major}} factors {{affecting}} end-to-end service availability, network component failure {{is perhaps the}} least well understood. How often do failures occur, how long do they last, what are their causes, {{and how do they}} impact customers? Traditionally, answering questions such as these has required dedicated (and often expensive) instrumentation broadly deployed across a network. We propose an alternative approach: opportunistically mining “low-quality ” data sources that are already available in modern network environments. We describe a methodology for recreating a succinct history of failure events in an IP network using a combination of structured data (router configurations and <b>syslogs)</b> and semi-structured data (email logs). Using this technique we analyze over five years of failure events in a large regional network consisting of over 200 routers; to our knowledge, this is the largest study of its kind...|$|R
5000|$|Arpwatch/ArpwatchNG/Winarpwatch: Keep {{mappings}} of IP-MAC pairs, report changes via <b>Syslog,</b> Email.|$|E
5000|$|RFC 5425 - Transport Layer Security (TLS) Transport Mapping for <b>Syslog</b> ...|$|E
5000|$|RFC 6012 Datagram Transport Layer Security (DTLS) Transport Mapping for <b>Syslog</b> ...|$|E
40|$|In this paper, {{we define}} the forward {{integrity}} security property, motivate its appropriateness as a systems security requirement, and demonstrate designs that achieve this property. Applications include secure audit logs (e. g., <b>syslogd</b> data) for intrusion detection or accountability, communications security, and authenticating partial results of computation for mobile agents. We prove security theorems on our forward integrity message authentication scheme, {{and discuss the}} secure audit log application in detail. Keywords: Audit logs, MACs, forward integrity. Dept. of Computer Science & Engineering, Mail Code 0114, University of California at San Diego, 9500 Gilman Drive, La Jolla, CA 92093, USA. E-mail: mihir@cs. ucsd. edu. Web page: [URL] Supported in part by NSF CAREER Award CCR- 9624439 and a 1996 Packard Foundation Fellowship in Science and Engineering. y Dept. of Computer Science & Engineering, Mail Code 0114, University of California at San Diego, [...] ...|$|R
50|$|To {{reduce the}} risk of a {{vulnerability}} or misconfiguration allowing privilege escalation, many programs have been written or adapted to make use of privilege separation, privilege revocation and chrooting. Privilege separation is a technique, pioneered on OpenBSD and inspired by the principle of least privilege, where a program is split into two or more parts, one of which performs privileged operations and the other—almost always the bulk of the code—runs without privilege. Privilege revocation is similar and involves a program performing any necessary operations with the privileges it starts with then dropping them. Chrooting involves restricting an application to one section of the file system, prohibiting it from accessing areas that contain private or system files. Developers have applied these features to OpenBSD versions of many common applications, such as tcpdump, file, tmux, smtpd, and <b>syslogd.</b>|$|R
40|$|Recently, {{there has}} been a global trend among the {{telecommunication}} industry on the rapid deployment of IPTV (Internet Protocol Television) infrastructure and services. While the industry rushes into the IPTV era, the comprehensive understanding of the status and dynamics of IPTV network lags behind. Filling this gap requires in-depth analysis of large amounts of measurement data across the IPTV network. One type of the data of particular interest is device or system log, which has not been systematically studied before. In this dissertation, we will explore the possibility of utilizing system logs to serve a wide range of IPTV network management purposes including health monitoring, troubleshooting and performance evaluation, etc. In particular, we develop a tool to convert raw router <b>syslogs</b> to meaningful network events. In addition, by analyzing set-top box (STB) logs, we propose a series of models to capture both channel popularity and dynamics, and users' activity on the IPTV network. Ph. D. Committee Chair: Jun Xu; Committee Member: Jia Wang; Committee Member: Mostafa H. Ammar; Committee Member: Nick Feamster; Committee Member: Xiaoli M...|$|R
