101|433|Public
2500|$|The Open Technology Institute, {{run by the}} group, New America, {{released}} a report [...] "Bugs in the System" [...] in August 2016 stating that U.S. policymakers should make reforms to help researchers identify and address software bugs. The report [...] "highlights the need for reform {{in the field of}} <b>software</b> <b>vulnerability</b> discovery and disclosure." [...] One of the report’s authors said that Congress has not done enough to address cyber <b>software</b> <b>vulnerability,</b> even though Congress has passed a number of bills to combat the larger issue of cyber security.|$|E
2500|$|In hacking, a shellcode is a {{small piece}} of code used as the payload in the {{exploitation}} of a <b>software</b> <b>vulnerability.</b> [...] It is called [...] "shellcode" [...] because it typically starts a command shell from which the attacker can control the compromised machine, but any piece of code that performs a similar task can be called shellcode. [...] Because the function of a payload is not limited to merely spawning a shell, some have suggested that the name shellcode is insufficient. However, attempts at replacing the term have not gained wide acceptance.|$|E
5000|$|... #Subtitle level 3: Technical {{issues and}} <b>software</b> <b>vulnerability</b> issue ...|$|E
50|$|Sucuri {{uses the}} {{principle}} of responsible disclosure to raise awareness about <b>software</b> <b>vulnerabilities</b> on their website security blog.|$|R
5000|$|Software Security Assessments: The {{identification}} of hardware and <b>software</b> <b>vulnerabilities</b> through black box, white box, and gray box testing.|$|R
40|$|Abstract: <b>Software</b> <b>vulnerabilities</b> are {{recognized}} as the major cause of system outages. This paper presents a <b>SoftwAre</b> <b>Vulnerabilities</b> Identifying Environment (SAVIE) which is a tool for identifying software weaknesses through profiling and conducting fault injection experiments on target software. SAVIE now supports the identification of two types of vulnerabilities, one is the weak part in software to resist environment perturbation (hardware faults); {{the other is the}} internal bugs in the source code of software (software faults). SAVIE also supports different injection methods (can be used on different platforms) and various error types (can be used to find different vulnerabilities), which can also be added by users easily. Experimental results are presented to demonstrate the potential of SAVIE in the identification of <b>software</b> <b>vulnerabilities.</b> Key words: <b>software</b> vulnerability; fault injection; environment perturbation; single event upset...|$|R
5000|$|Thompson, Herbert H., and Scott G. Chase. The <b>Software</b> <b>Vulnerability</b> Guide. Charles River Media, 2005. (...) ...|$|E
5000|$|Vulnerability {{management}} is the [...] "cyclical practice of identifying, classifying, remediating, and mitigating vulnerabilities", particularly in <b>software.</b> <b>Vulnerability</b> {{management is}} integral to computer security and network security.|$|E
5000|$|The Open Technology Institute, {{run by the}} group, New America, {{released}} a report [...] "Bugs in the System" [...] in August 2016 stating that U.S. policymakers should make reforms to help researchers identify and address software bugs. The report [...] "highlights the need for reform {{in the field of}} <b>software</b> <b>vulnerability</b> discovery and disclosure." [...] One of the report’s authors said that Congress has not done enough to address cyber <b>software</b> <b>vulnerability,</b> even though Congress has passed a number of bills to combat the larger issue of cyber security.|$|E
50|$|Vulnerability {{management}} is the cyclical practice of identifying, classifying, remediating, and mitigating vulnerabilities. This practice generally refers to <b>software</b> <b>vulnerabilities</b> in computing systems.|$|R
50|$|As a cyber-security researcher, Maertens {{published}} multiple <b>software</b> <b>vulnerabilities</b> on Microsoft and Linux platforms, and was {{a global}} trainer on the Extreme Hacking courses.|$|R
30|$|Similar to the {{inevitable}} <b>software</b> <b>vulnerabilities,</b> hardware vulnerabilities broadly exist as well. Unsafe hardware architecture and complex production processes are two main factors of hardware vulnerabilities.|$|R
50|$|On Friday March 8, 2013, the {{database}} was taken offline {{after it was}} discovered that the system used to run multiple government sites had been compromised by a <b>software</b> <b>vulnerability</b> of Adobe ColdFusion.|$|E
50|$|The project's {{goals were}} met in March 2007, when {{shortly after the}} {{announcement}} of a critical <b>software</b> <b>vulnerability</b> in the Xbox 360 Hypervisor a loader for Linux appeared, which allowed to run a Linux ported to the Xbox 360.|$|E
50|$|In Q1 2015, ionCube {{introduced}} a service called ionCube24 offering realtime malware protection for PHP websites. ionCube24 uses the ionCube Loader {{to monitor and}} block any unexpected PHP code, as might be introduced by a <b>software</b> <b>vulnerability</b> exploit, before it executes.|$|E
40|$|Due to the interdependent {{nature of}} Free Open Source <b>Software</b> projects, a <b>vulnerability</b> {{in just one}} highly used project can have {{significant}} and sweeping consequences across many projects, and can inflict {{hundreds of millions of}} dollars in damage. This paper proposes a model for predicting <b>software</b> <b>vulnerabilities</b> in highly used FOSS projects using measures of effort and complexity. We used several measures of complexity and effort to look at the top 150 projects listed on the Debian Popularity Contest. We determined that total development effort was the best measure of effort and lines of code was the best measure of complexity for predicting <b>software</b> <b>vulnerabilities</b> in these projects...|$|R
3000|$|... (2) Variety {{of attack}} means. The simple means of attack rely on unintentional yet harmful operations, such as {{downloading}} a program bundled with a Trojan. Next, worms and botnets {{are designed to}} self-replicate and spread. These attack means automatically exploit <b>software</b> <b>vulnerabilities.</b> The exploitation of <b>software</b> <b>vulnerabilities</b> has also evolved from code injection attacks to code reuse attacks such as ROP (Return-oriented programming) (Checkoway et al. 2010) and JOP (Jump-oriented programming) (Bletsch et al. 2011). Shifting the target from software to hardware, many side channel attacks exploit hardware vulnerability.|$|R
40|$|Testimony {{issued by}} the General Accounting Office with an {{abstract}} that begins "Attacks on computer systems [...] in government {{and the private sector}} [...] are increasing at an alarming rate, placing both federal and private-sector operations and assets at considerable risk. By exploiting <b>software</b> <b>vulnerabilities,</b> hackers can cause significant damage. While patches, or software fixes, for these vulnerabilities are often well publicized and available, they are frequently not quickly or correctly applied. The federal government recently awarded a contract for a government-wide patch notification service designed to provide agencies with information to support effective patching. Forty-one agencies now subscribe to this service. At the request of the Chairman of the Subcommittee on Technology, Information Policy, Intergovernmental Relations, and the Census, GAO reviewed (1) two recent <b>software</b> <b>vulnerabilities</b> and related responses; (2) effective patch management practices, related federal efforts, and other available tools; and (3) additional steps that can be taken to better protect sensitive information systems from <b>software</b> <b>vulnerabilities.</b> ...|$|R
5000|$|The {{time from}} when a {{software}} exploit first becomes active {{to the time}} when the number of vulnerable systems shrinks to insignificance, is known as the Window of Vulnerability (WoV). The time-line for each <b>software</b> <b>vulnerability</b> is defined by the following main events: ...|$|E
50|$|In January 2012, a <b>software</b> <b>vulnerability</b> {{potentially}} {{exposed the}} personal details {{of hundreds of}} thousands of users. Grindr subsequently commenced legal action and pursued software changes to block the site responsible. The site impacted a small number of primarily Australian Grindr users and it remains shut down.|$|E
5000|$|COMMENDEER [...] {{is used to}} commandeer (i.e. compromise) untargeted {{computer}} systems. The {{software is}} used as a part of QUANTUMNATION, which also includes the <b>software</b> <b>vulnerability</b> scanner VALIDATOR. The tool was first described at the 2014 Chaos Communication Congress by Jacob Appelbaum, who characterized it as tyrannical.|$|E
50|$|The CERT/CC works {{directly}} with software vendors {{in the private}} sector as well as government agencies to address <b>software</b> <b>vulnerabilities</b> and provide fixes to the public. This process is known as coordination.|$|R
40|$|When {{vulnerabilities}} {{are discovered}} in software, which often happens after deployment, {{they must be}} addressed as part of ongoing software maintenance. A mature software development organization should analyze vulnerabilities {{in order to determine}} how they, and similar vulnerabilities, can be prevented in the future. In this paper we present a structured method for analyzing and documenting the causes of <b>software</b> <b>vulnerabilities.</b> Applied during <b>software</b> maintenance, the method generates the information needed for improving the software development process, to prevent similar vulnerabilities in future releases. Our approach is based on vulnerability cause graphs, a structured representation of causes of <b>software</b> <b>vulnerabilities...</b>|$|R
40|$|Abstract. <b>Software</b> <b>vulnerabilities</b> {{represent}} {{a major cause}} of cybersecurity problems. The National Vulnerability Database (NVD) is a public data source that maintains standardized information about reported <b>software</b> <b>vulnerabilities.</b> Since its inception in 1997, NVD has published information about more than 43, 000 <b>software</b> <b>vulnerabilities</b> affecting more than 17, 000 software applications. This information is potentially valuable in understanding trends and patterns in <b>software</b> <b>vulnerabilities,</b> so that one can better manage the security of computer systems that are pestered by the ubiquitous software security flaws. In particular, one {{would like to be able}} to predict the likelihood that a piece of software contains a yet-to-be-discovered vulnerability, which must be taken into account in security management due to the increasing trend in zero-day attacks. We conducted an empirical study on applying data-mining techniques on NVD data with the objective of predicting the time to next vulnerability for a given software application. We experimented with various features constructed using the information available in NVD, and applied various machine learning algorithms to examine the predictive power of the data. Our results show that the data in NVD generally have poor prediction capability, with the exception of a few vendors and software applications. By doing a large number of experiments and observing the data, we suggest several reasons for why the NVD data have not produced a reasonable prediction model for time to next vulnerability with our current approach. ...|$|R
50|$|Security Administrator Tool for Analyzing Networks (SATAN) {{was a free}} <b>software</b> <b>vulnerability</b> scanner for {{analyzing}} networked computers. SATAN {{captured the attention of}} a broad technical audience, appearing in PC Magazine and drawing threats from the United States Department of Justice. It featured a web interface, complete with forms to enter targets, tables to display results, and context-sensitive tutorials that appeared when a vulnerability had been found.|$|E
50|$|Content {{written in}} the OVAL Language is located {{in one of the}} many {{repositories}} found within the community. One such repository, known as the OVAL Repository, is hosted by The MITRE Corporation. It is the central meeting place for the OVAL Community to discuss, analyze, store, and disseminate OVAL Definitions. Each definition in the OVAL Repository determines whether a specified <b>software</b> <b>vulnerability,</b> configuration issue, program, or patch is present on a system.|$|E
50|$|Metasploit's {{emerging}} {{position as}} the de facto exploit development framework led {{to the release of}} <b>software</b> <b>vulnerability</b> advisories often accompanied by a third party Metasploit exploit module that highlights the exploitability, risk and remediation of that particular bug. Metasploit 3.0 began to include fuzzing tools, used to discover software vulnerabilities, rather than just exploits for known bugs. This avenue can be seen with the integration of the lorcon wireless (802.11) toolset into Metasploit 3.0 in November 2006. Metasploit 4.0 was released in August 2011.|$|E
30|$|The {{following}} sections present {{the design of}} the proposed approach. The first section outlines the Update Checker, a solution for checking for updates in virtual machines. The second section describes the Online Penetration Suite, an approach for online-scanning virtual machines for known <b>software</b> <b>vulnerabilities.</b>|$|R
40|$|Java is {{essentially}} a safe language with good security features. However, there are several Java features and facilities that can compromise safety if they are misused or improperly implemented. This report briefly describes these potential <b>software</b> <b>vulnerabilities</b> in {{the current version of}} Java, Java 5...|$|R
40|$|With the {{proliferation}} of computer security threats on the Internet, especially threats such as worms that automatically exploit software flaws, it {{is becoming more and}} more important that home users keep their computers secure from known <b>software</b> <b>vulnerabilities.</b> Unfortunately, keeping <b>software</b> up-to-date is notoriously difficult for home users. This paper introduces TALC, a system to encourage and help home users patch vulnerable software. TALC increases home users’ awareness of <b>software</b> <b>vulnerabilities</b> and their motivation to patch their software; it does so by detecting unpatched software and then drawing graffiti on their computer’s background wallpaper image to denote potential vulnerabilities. Users can “clean up” the graffiti by applying necessary patches, which TALC makes possible by assisting in the software patching process...|$|R
5000|$|The RAND {{corporation}} openly endorses <b>software</b> <b>vulnerability</b> exploitation.In the RAND report entitled Zero Days, Thousands of Nights in the sectionentitled Other Recommendations for Offense RAND teaches an approachto aid private exploit {{developers to}} find vulnerabilities in the publicuse space and [...] "beat" [...] fuzzers and bug hunters.RAND recommends that [...] "private exploit developers" [...] analyze {{parts of the}} code basethat are the most complex. It follows that RAND is directly endorsing a controversial practice that places the privacy and safety of Americans at risk, namely, stockpiling vulnerabilities.|$|E
50|$|The CloudPassage {{platform}} provides cloud workload {{security and}} compliance for systems hosted in {{public or private}} cloud infrastructure environments, including hybrid cloud and multi-cloud workload hosting models. The flagship product the company offers is called Halo. Halo secures virtual servers in public, private, and hybrid cloud infrastructures and provides file integrity monitoring (FIM) while also administering firewall automation, vulnerability monitoring, network access control, security event alerting, and assessment. The Halo platform also provides security applications such as privileged access management, <b>software</b> <b>vulnerability</b> scanning, multifactor authentication, and log-based IDS.|$|E
5000|$|In hacking, a shellcode is a {{small piece}} of code used as the payload in the {{exploitation}} of a <b>software</b> <b>vulnerability.</b> It is called [...] "shellcode" [...] because it typically starts a command shell from which the attacker can control the compromised machine, but any piece of code that performs a similar task can be called shellcode. Because the function of a payload is not limited to merely spawning a shell, some have suggested that the name shellcode is insufficient. However, attempts at replacing the term have not gained wide acceptance.Shellcode is commonly written in machine code.|$|E
40|$|<b>Software</b> <b>vulnerabilities</b> {{have been}} the main {{contributing}} factor to the Internet security problems such as fast spreading worms. Among these <b>software</b> <b>vulnerabilities,</b> memory corruption vulnerabilities such as buffer overflow and format string bugs {{have been the}} most common ones exploited by network-based attacks. Many security countermeasures (e. g., patching, automatic signature generation for intrusion detection systems) require vulnerability information to function correctly. However, despite many years of research, automatically identifying unknown <b>software</b> <b>vulnerabilities</b> still remains an open problem. In this paper, we present the development of a security debugging tool named MemSherlock, which can automatically identify unknown memory corruption vulnerabilities upon the detection of malicious payloads that exploit such vulnerabilities. MemSherlock provides critical information for unknown memory corruption vulnerabilities, including (1) the corruption point in the source code (i. e., the statement that allows the exploitation of memory corruption vulnerability), (2) the slice of source code that helps the malicious input to reach the corruption point, and (3) the description of how the malicious input exploits the unknown vulnerability. We evaluate MemSherlock with a set of 11 real-world applications that have buffer overflow, heap overflow, and format string vulnerabilities. The evaluation results indicate that MemSherlock is a useful tool to facilitate the automatic vulnerability analysis process...|$|R
25|$|Spyware {{does not}} {{necessarily}} spread {{in the same way}} as a virus or worm because infected systems generally do not attempt to transmit or copy the software to other computers. Instead, spyware installs itself on a system by deceiving the user or by exploiting <b>software</b> <b>vulnerabilities.</b>|$|R
5000|$|... <b>software</b> <b>vulnerabilities,</b> exploits, {{exploitation}} techniques, hacking tools, attacking public {{outlets and}} distribution points of that information. The general thought behind {{this is that}} the computer security industry uses full disclosure to profit and develop scare-tactics to convince people into buying their firewalls, anti-virus software and auditing services.|$|R
