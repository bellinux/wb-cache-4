0|1073|Public
5000|$|... #Subtitle level 2: Asynchronous and <b>synchronous</b> <b>data</b> {{transmission}} ...|$|R
5000|$|... a <b>Synchronous</b> <b>Data</b> Link Control (SDLC) {{communications}} interface ...|$|R
5000|$|<b>Synchronous</b> <b>Data</b> Link Control (SDLC) {{high speed}} wide area {{networks}} ...|$|R
5000|$|... 2652 Multi-Protocol Communications Circuit (incl. <b>Synchronous</b> <b>Data</b> Link Control (SDLC)) ...|$|R
40|$|<b>Synchronous</b> <b>Data</b> Flow graphs {{are widely}} {{adopted in the}} {{designing}} of streaming applications, but were originally formulated to describe only how an application is partitioned and which data are exchanged among different tasks. Since <b>Synchronous</b> <b>Data</b> Flow graphs are often used to describe and evaluate complete design solutions, missing information (e. g., mapping, scheduling, etc.) has {{to be included in}} them by means of further actors and channels to obtain accurate evaluations. To address this issue preserving the simplicity of the representation, techniques that model data transfer delays by means of ad-hoc actors have been proposed, but they model independently each communication ignoring contentions. Moreover, they do not usually consider at all delays due to buffer contentions, potentially overestimating the throughput of a design solution. In this paper a technique to extend <b>Synchronous</b> <b>Data</b> Flow graphs by adding ad-hoc actors and channels to model resolution of resources contentions is proposed. The results show that the number of added actors and channels is limited but that they can significantly increase the <b>Synchronous</b> <b>Data</b> Flow graph accuracy...|$|R
5000|$|<b>Synchronous</b> <b>Data</b> Link Control (SDLC), a {{protocol}} which greatly improved {{the efficiency of}} data transfer over a single link: ...|$|R
40|$|In {{the first}} step of the bisection {{algorithm}} for lossless compression of a <b>data</b> <b>string</b> of length a power of two, one recursively performs bisections of substrings of the <b>data</b> <b>string</b> obtained from previous bisections, starting with the bisection of the entire <b>data</b> <b>string</b> into two substrings. We consider a compression method which is a modification of the bisection algorithm, applicable to <b>data</b> <b>strings</b> of general length. Define an approximate bisection of a string to consist of the partitioning of the string into two substrings whose lengths differ by at most one. Then, {{the first step}} of the modified compression method consists of recursive "approximate bisection" of substrings of the <b>data</b> <b>string,</b> starting with the approximate bisection of the entire <b>data</b> <b>string.</b> The modified compression method requires that one specify in advance which of the at most two ways in which every approximate bisection must take place; this is called guided approximate bisection. It is shown that the modified [...] ...|$|R
40|$|Each <b>data</b> <b>string</b> over {{a finite}} {{alphabet}} of length {{a power of}} two is represented via a binary tree called a bisection tree. The nodes of the bisection tree correspond {{to the members of}} the smallest class of substrings of the <b>data</b> <b>string</b> which contains the <b>data</b> <b>string</b> and is closed with respect to bisection. A <b>data</b> <b>string</b> can be perfectly reconstructed from its bisection tree. A lossless data compression algorithm is presented which compresses the <b>data</b> <b>string</b> by compressing its bisection tree. This algorithm is shown to be a universal algorithm in the sense that it yields a compression performance at least as good as the compression performance provided by any finite-state sequential lossless data compression algorithm, asymptotically as the length of the <b>data</b> <b>string</b> goes to infinity. Index Terms: lossless data compression, arithmetic coding, entropy, universal algorithms I Introduction Throughout this paper, let A be a generic symbol denoting a finite alphabet containing at least tw [...] ...|$|R
40|$|Till now {{communication}} is possible of 7 bit information <b>data</b> <b>string</b> by transmitting 11 bit <b>data</b> <b>string</b> in single frame {{due to this}} speed of communication system is very slow. And we can transmit very minimum number of configuration of <b>data</b> <b>string.</b> To increase the speed of communication system and increase the numbers of configuration <b>data</b> <b>string</b> author design some communication system by different methodologies of Hamming code. About all these communication systems all methodologies are discuss here. First, author design communication system to make communication by even parity check method for 25 bit information <b>data</b> <b>string.</b> In second paper, author design communication system to make communication by odd parity check method for 25 bit information data. In third paper, author again design communication system for 25 bit information <b>data</b> <b>string</b> by even parity and odd parity check method by using VHDL by single system. Till now, for 25 bit information <b>data</b> <b>string</b> {{communication is}} possible only in simplex mode. So that now author, design 25 bit hamming code transceiver to make communication possible in full duplex mode. Key word Hamming code, VHDL code, Xilinx ISE 10. 1 simulator, even parity check, odd parity check, transmitter, receiver, transceiver...|$|R
40|$|ITC/USA 2013 Conference Proceedings / The Forty-Ninth Annual International Telemetering Conference and Technical Exhibition / October 21 - 24, 2013 / Bally's Hotel & Convention Center, Las Vegas, NVWith {{industry}} standard <b>synchronous</b> <b>data,</b> {{the clock is}} effectively over {{twice the rate of}} the data (Figure 1.). The resultant problem is increased synchronous infrastructure bandwidth requirements and/or costly system architectures designed to avoid transport of <b>synchronous</b> <b>data.</b> This paper will discuss a potential solution...|$|R
50|$|<b>Synchronous</b> <b>Data</b> Flow is a {{restriction}} of Kahn process networks, nodes produce and consume a fixed number of data items per firing.|$|R
30|$|Because of only {{identifying}} the fault directions {{on both sides}} of HVDC line, so the pilot protection does not require the <b>synchronous</b> <b>data.</b>|$|R
40|$|We {{introduce}} streaming <b>data</b> <b>string</b> transducers that map input <b>data</b> <b>strings</b> {{to output}} <b>data</b> <b>strings</b> {{in a single}} left-to-right pass in linear time. <b>Data</b> <b>strings</b> are (unbounded) sequences of data values, tagged with symbols from a finite set, over a potentially infinite data domain that supports only the operations of equality and ordering. The transducer uses a finite set of states, a finite set of variables ranging over the data domain, and a finite set of variables ranging over <b>data</b> <b>strings.</b> At every step, it can {{make decisions based on}} the next input symbol, updating its state, remembering the input data value in its data variables, and updating data-string variables by concatenating data-string variables and new symbols formed from data variables, while avoiding duplication. We establish that the problems of checking functional equivalence of two streaming transducers, and of checking whether a streaming transducer satisfies pre/pos...|$|R
40|$|A {{method used}} preferably with LZSS-based {{compression}} methods for compressing {{a stream of}} digital data. The method uses a run-length encoding scheme especially suited for <b>data</b> <b>strings</b> of identical <b>data</b> bytes having large run-lengths, such as data representing scanned images. The method reads an input data stream to determine {{the length of the}} <b>data</b> <b>strings.</b> Longer <b>data</b> <b>strings</b> are then encoded {{in one of two ways}} depending on the length of the <b>string.</b> For <b>data</b> <b>strings</b> having run-lengths less than 18 bytes, a cleared offset and the actual run-length are written to an output buffer and then a run byte is written to the output buffer. For <b>data</b> <b>strings</b> of 18 bytes or longer, a set offset and an encoded run-length are written to the output buffer and then a run byte is written to the output buffer. The encoded run-length is written in two parts obtained by dividing the run length by a factor of 255. The first of two parts of the encoded run-length is the quotient; the second part is the remainder. Data bytes that are not part of <b>data</b> <b>strings</b> of sufficient length are written directly to the output buffer...|$|R
40|$|We {{present a}} {{trajectory}} from formal specification to component, {{which can be}} used to prototype applications which combine off-the-shelf components and custom hardware, provided they meet the constraints of <b>Synchronous</b> <b>Data</b> Flow. The formal specification allows us to prove that custom components will be correctly synchronized in a system context. We first introduce VLSI <b>Synchronous</b> <b>Data</b> Flow, elaborate the constraints it imposes, and define functions relevant to constructing a system. Then we describe the construction of a simulation model. Finally, we develop a component for motion video coding in VHDL, starting from a formal specification. Key-words: motion video coding, <b>synchronous</b> <b>data</b> flow, VLSI simulation (R'esum'e : tsvp) This work was partially funded by the French Coordinated Research Program ANM of the French Ministry of Research and Space, by the Esprit BRA project No 6632 NANA- 2, and by the Doctoralcandidate Network for System and Machine Architecture of the DR [...] ...|$|R
50|$|ADCCP is an ANSI standard, X3.66, {{derived from}} IBM's <b>Synchronous</b> <b>Data</b> Link Control (SDLC) protocol, and is {{functionally}} {{equivalent to the}} ISO High-Level Data Link Control (HDLC) standard.|$|R
50|$|Note 2: Flag {{sequences}} {{are used}} in bit-oriented protocols, such as Advanced Data Communication Control Procedures (ADCCP), <b>Synchronous</b> <b>Data</b> Link Control (SDLC), and High-Level Data Link Control (HDLC).|$|R
5000|$|... an ITU-T recommendation, {{approved}} in November 1988, titled Standardization of data signalling rates for <b>synchronous</b> <b>data</b> transmission {{in the general}} switched telephone network. It has been withdrawn since ...|$|R
5000|$|... 5250 devices can be {{directly}} attached to the host or communicate remotely using <b>Synchronous</b> <b>Data</b> Link Control (SDLC) at up to 9600bit/s. Devices can also be clustered or daisy-chained.|$|R
50|$|VTAM was {{introduced}} in 1974 {{after a series of}} delays as a major component of SNA along with the 370x Network Control Program (NCP) and <b>Synchronous</b> <b>Data</b> Link Control (SDLC).|$|R
5000|$|PSI5 is a {{two-wire}} interface, used {{to connect}} peripheral sensors to {{electronic control units}} in automotive electronics. Both point-to-point and bus configurations with asynchronous and <b>synchronous</b> <b>data</b> transmission are supported.|$|R
5000|$|High-Level Data Link Control (HDLC) is a bit-oriented code-transparent <b>synchronous</b> <b>data</b> {{link layer}} {{protocol}} {{developed by the}} International Organization for Standardization (ISO). The original ISO standards for HDLC are as follows: ...|$|R
40|$|Tests for the {{existence}} of covered interest arbitrage opportunity are complicated by {{the existence}} of market incompleteness and the lack of <b>synchronous</b> trading <b>data</b> in foreign exchange markets. The acquisition and use of <b>synchronous</b> <b>data</b> resolves some problems but does not address the issue of heterogeneity. Typically customers face different opportunity sets and tests which purport to find no arbitrage opportunities must take this fact into account. ...|$|R
5000|$|SNA {{was made}} public as part of IBM's [...] "Advanced Function for Communications" [...] {{announcement}} in September, 1974, which included {{the implementation of the}} SNA/SDLC (<b>Synchronous</b> <b>Data</b> Link Control) protocols on new communications products: ...|$|R
40|$|Mechanisms for {{operating}} a prover device and a verifier device {{so that the}} verifier device can verify {{the authenticity of the}} prover device. The prover device generates a <b>data</b> <b>string</b> by: (a) submitting a challenge to a physical unclonable function (PUF) to obtain a response string, (b) selecting a substring from the response string, (c) injecting the selected substring into the <b>data</b> <b>string,</b> and (d) injecting random bits into bit positions of the <b>data</b> <b>string</b> not assigned to the selected substring. The verifier: (e) generates an estimated response string by evaluating a computational model of the PUF based on the challenge; (f) performs a search process to identify the selected substring within the <b>data</b> <b>string</b> using the estimated response string; and (g) determines whether the prover device is authentic based on a measure of similarity between the identified substring and a corresponding substring of the estimated response string...|$|R
5000|$|... resource: Resource <b>data</b> <b>string</b> being transmitted, e.g., an IP address or email address.|$|R
5000|$|The SDP — The <b>Synchronous</b> <b>Data</b> Processor — added V.35, RS-422, and RS-232 {{data to the}} IPX (this {{card was}} a very early use of Xilinx FPGAs & StrataCom was their largest {{customer}} for a time) ...|$|R
40|$|Scheduling loops optimally {{is one of}} the {{important}} steps in parallel processing, since many applications are made up of iterative processes. There are iterative processes, which can be best described using <b>synchronous</b> <b>data</b> flow graphs (SDFGs) or multi-rate graphs. A great deal of research has been done to optimize SDFGs using techniques such as retiming. In this research, we apply a technique called rotation scheduling to reduce the execution times of SDFGs. We also present an algorithm that schedules <b>synchronous</b> <b>data</b> flow graphs based on the types of functional units and number of copies available for each functional unit. Finally, we demonstrate the contributions of our research using suitable examples...|$|R
50|$|Merit renamed its Communication Computers to be Primary Communication Processors (PCPs) {{and created}} LSI-11 based Secondary Communication Processors (SCPs). PCPs formed {{the core of}} the network and were {{attached}} to each other over Ethernet and dedicated <b>synchronous</b> <b>data</b> circuits. SCPs were attached to PCPs over <b>synchronous</b> <b>data</b> circuits. PCPs and SCPs would eventually include Ethernet interfaces and support local area network (LAN) attachments. PCPs would also serve as gateways to commercial networks such as GTE's Telenet (later SprintNet), Tymnet, and ADP's Autonet, providing national and international network access to MTS. Later still the PCPs provided gateway services to the TCP/IP networks that became today's Internet.|$|R
50|$|RecoverPoint is a {{continuous}} data protection product offered by EMC Corporation which supports asynchronous and <b>synchronous</b> <b>data</b> replication of block-based storage. RecoverPoint was originally {{created by a}} company called Kashya, which was bought by EMC in 2006.|$|R
50|$|Modern {{measurement}} {{systems are}} characterized by multi-channeling, synchronicity, and accuracy. Due to the advanced protocol features of EtherCAT, efficient <b>synchronous</b> <b>data</b> throughput is assured. The network features based on Ethernet enable a measurement network with distributed measurement modules.|$|R
40|$|Dynamic lung {{sound signal}} {{analysis}} and processing require <b>synchronous</b> multi-channel <b>data</b> acquisition system. In noninvasive and no pain lung sound diagnosis system, the highly accurate, <b>synchronous</b> and stable <b>data</b> acquisition {{system is the}} foundation of fellow-up work. In order to acquire the array data of lung sound, higher speed, reliability and <b>synchronous</b> <b>data</b> acquisition system can meet the requests. Lung sound signal was produced by lung vibration during air exchange. Simultaneous sampling maintains the phase information and provides us with more detailed information about physiology and pathology. Our method is to use piezopolymer sensor array attached to the backside and capture the lung vibration information. This paper mainly presents a FPGA-based <b>synchronous</b> <b>data</b> acquisition system. FPGA as a main component offers the ADC chip timing and FIFO design using Verilog HDL source code. Furthermore, this paper solves the synchronization problems so that array phase information is saved. Test results of the data acquisition system can fully meet the need of data acquisition in array data acquisition of lung sound. © 2012 IEEE...|$|R
50|$|After {{traversing}} SDH paths, {{the traffic}} is processed in the reverse fashion: virtual concatenation path processing {{to recreate the}} original synchronous byte stream, followed by decapsulation to converting the <b>synchronous</b> <b>data</b> stream to an asynchronous stream of Ethernet frames.|$|R
5000|$|The {{two sites}} {{can be on}} {{separate}} continents or simply on different utility grids. IBM also provides a <b>synchronous</b> <b>data</b> replication called Metro Mirror, {{which is designed to}} support replication at [...] "Metropolitan" [...] distances of (normally) less than 300 km.|$|R
40|$|Data {{compression}} {{is required}} to compress given data {{in order to save}} space on storage devices and remove unnecessary redundancies in given data. Data mainly consists of strings of characters and digits. Data compression algorithms are mainly lossless or lossy. In lossless algorithms no data is lost during operation and in lossy algorithm data is lost during operation but compression is more. Data can be compressed by exploiting factors like : repetition of characters, using dictionary, prediction etc. This paper is about compression of <b>Data</b> <b>Strings</b> used in various programming languages using the technique of K-Nets which is lossless technique. A K-Net can be an Ndimensional geometrical figure which is generally a square or a rectangle for N= 2 or in two dimensional plane. In this papaer we will firstly represent a <b>Data</b> <b>string</b> of characters using a points in the K-Net plane and then later calculate the space saved by the technique to represent <b>data</b> <b>string's</b> for long <b>data</b> <b>string's.</b> The programming language used in this paper for performance analysis and calculating results is JAVA. </p...|$|R
5000|$|A high-speed, <b>synchronous</b> <b>data</b> {{bus that}} is used to carry the actual data {{transfers}} between the storage devices and the host bus adapter. The data bus is 18 bits wide plus parity. 16 bits was used for PDP-11 and VAX systems, 18 bits for DEC-10s.|$|R
