8|64|Public
50|$|JavaFX Script, the <b>scripting</b> <b>component</b> of JavaFX, began life as {{a project}} by Chris Oliver called F3.|$|E
50|$|The Windows version {{includes}} an Active <b>Scripting</b> <b>component</b> for Windows Script Host (WSH) called PerlScript and an ISAPI module for embedding within Internet Information Services (IIS).|$|E
50|$|On February 9, 2006, version 4 of Script Debugger was released. This {{version was}} {{completely}} rewritten {{to take full}} advantage of the new Cocoa and Tiger APIs. The new release also included an improved version of the JavaScript OSA <b>scripting</b> <b>component.</b>|$|E
40|$|Part 5 : Industrial Management and Other ApplicationsInternational audienceScripting {{language}} {{support in}} SCADA systems significantly enhances their flexibility in performing diverse industry automation functions. Although SCADA vendors do provide rich scripting support in their automation solutions, development and integration aspects of SCADA <b>Script</b> <b>Component</b> are rarely {{presented in the}} contemporary research literature. This paper proposes a novel architecture of <b>Script</b> <b>Component</b> in SCADA systems to perform miscellaneous industry automation functions through any scripting language of choice. This architecture is validated by implementing and integrating <b>Script</b> <b>component</b> {{in a large scale}} SCADA automation solution. Moreover, series of experiments are performed to validate the working of <b>Script</b> <b>Component</b> after its integration. Empirical results prove that <b>Script</b> <b>Component</b> is capable to perform various SCADA functions through JavaScript by providing enhanced flexibility and simplicity...|$|R
5000|$|VBScript (and JScript) {{can also}} be used in a Windows <b>Script</b> <b>Component,</b> an ActiveX-enabled <b>script</b> class that can be invoked by other COM-enabled applications. These files have {{extension}} [...]wsc.|$|R
5000|$|Many custom <b>script</b> <b>components</b> are {{available}} in Pipeline Pilot, allowing experts to include their code directly into the pipelines and maintain a library of components based on their preferred language, such as Perl, Java, VBScript, [...]NET, JavaScript, Python, Matlab, etc.|$|R
50|$|The <b>scripting</b> <b>component</b> of the BAPP stack has {{its origins}} in the CGI web {{interfaces}} that became popular in the early 1990s. This technology allows the user of a web browser to execute a program on the web server, and to thereby receive dynamic as well as static content. Programmers used scripting languages with these programs because {{of their ability to}} manipulate text streams easily and efficiently, even when they originate from disparate sources. For this reason system designers often referred to such scripting systems as glue languages.|$|E
50|$|An {{important}} aspect of the AppleScript implementation is the Open Scripting Architecture (OSA). Apple provides OSA for other scripting languages and third-party scripting/automation products such as QuicKeys and UserLand Frontier, to function on an equal status with AppleScript. AppleScript was implemented as a <b>scripting</b> <b>component,</b> and the basic specs for interfacing such components to the OSA were public, allowing other developers to add their own scripting components to the system. Public client APIs for loading, saving and compiling scripts would work the same for all such components, which also meant that applets and droplets could hold scripts in any of those scripting languages.|$|E
40|$|In the Space Syntax community, the {{standard}} tool for computing {{all kinds of}} spatial graph network measures is depthmapX (Turner, 2004; Varoudis, 2012). The process of evaluating many design variants of networks is relatively complicated, since {{they need to be}} drawn in a separated CAD system, exported and imported in depthmapX via dxf file format. This procedure disables a continuous integration into a design process. Furthermore, the standalone character of depthmapX makes it impossible to use its network centrality calculation for optimization processes. To overcome this limitations, we present in this paper the first steps of experimenting with a Grasshopper component (reference omitted until final version) that can access the functions of depthmapX and integrate them into Grasshopper/Rhino 3 D. Here the component is implemented {{in a way that it}} can be used directly for an evolutionary algorithm (EA) implemented in a Python <b>scripting</b> <b>component</b> in Grasshoppe...|$|E
50|$|The Free edition has WED level editor, {{the shadow}} mapping {{compiler}} {{and the game}} template system that allows 'clicking together' games from prefabricated <b>scripts</b> and <b>components.</b> <b>Scripts</b> are compiled at runtime {{and there is a}} watermark on the game screen.|$|R
40|$|The {{present study}} {{investigated}} the influence of medical expertise, case typicality, and illness <b>script</b> <b>component</b> (enabling conditions vs. consequences) on the speed of case information processing and subjective disease probabilities. It was hypothesized that expert subjects would process case information faster than nonexpert subjects, that typical information would be processed faster than atypical information, and that an interaction would be found between expertise level, typicality, and illness script: Experts {{were expected to be}} sensitive to typicality of both illness <b>script</b> <b>components,</b> while advanced students would be sensitive only to typicality of consequences. This sensitivity would also be reflected in assigned probability estimates. The data supported the predictions concerning the effects of expertise level and typicality; it was also found that expert physicians are particularly sensitive to a combination of prototypical enabling conditions and prototypical consequences. Implications of these results for the illness script theory are discussed...|$|R
50|$|Jukujikun {{refers to}} {{instances}} in which words are written using kanji that reflect {{the meaning of the}} word though the pronunciation of the word is entirely unrelated to the usual pronunciations of the constituent kanji. Conversely, ateji refers to the employment of kanji that appear solely to represent the sound of the compound word but are, conceptually, utterly unrelated to the signification of the word. Such admitted oddities, in combination with the need for the aforementioned furigana, a <b>script</b> <b>component</b> that annotates another <b>script</b> <b>component</b> for the assistance of the non-scholar, led the British linguist and diplomat Sir George Sansom to write:One hesitates for an epithet to describe a system of writing which is so complex that it needs the aid of another system to explain it. There is no doubt that it provides for some a fascinating field of study, but as a practical instrument it is surely without inferiors.|$|R
40|$|The Multimedia Application Development paper endeavoured {{to provide}} {{students}} with the knowledge and skills to develop and incorporate multimedia components into websites and applications developed for other papers within the degree. The paper utilised Macromedia Flash as its main development tool and focused on both animation and scripting. It was intended that students would develop high quality applications and identify the benefits of utilising multimedia components in their IT studies. The outcome however was very different. While students understood and could apply the <b>scripting</b> <b>component</b> of the paper, the visual element of finished applications was poor. It appears on reflection that many students did not see the connection between multimedia and IT and instead believed that the topic belonged more in the realms of graphic design and art. Upon discussion with a graphic design lecturer from the School of Art and Design, it appears that the art students, while able to produce the visual impact, were not exposed to the scripting capabilities of Flash. This paper will discuss in more depth the issues identified from a lecturers perspective and investigate the proposed collaboration with the graphic design school for future deliveries...|$|E
40|$|Delivering Web {{content to}} {{wireless}} handheld devices is a challenge. Current popular wireless handheld devices, such as WAP phone, Palm and Pocket PC, have many inherent limitations. In addition, relatively low wireless network bandwidth and user mobility make {{it necessary to}} deliver data as succinct as possible to reduce transmission delay and fit into the small screen display. To achieve this goal, Web content has to be tailored {{to adapt to the}} mobile Web. This research would examine adaptation challenges and presents a classification scheme for evaluating current adaptation approaches. A model for guiding the development and assessment of adaptive content delivery over the mobile Web is presented. The paper concludes with an agenda for future research. Statement of Problem Just like the Web has been the core platform of current Internet business, the mobile Web is the central data exchange channel for extending current Internet business model to wireless services model (Shim et al. 2002). However, due to inherent constraints of wireless handheld devices and the current state of wireless network, proper considerations should be given before delivering Web content to the wireless user. Removal of many unsupported data format and <b>scripting</b> <b>component</b> is necessary to reduce the data transmission over the wireless network. Furthermore, personalization techniques could be applied to the information to mee...|$|E
5000|$|... {{to enable}} the {{provision}} of EDA vendor-neutral <b>scripts</b> for <b>component</b> creation and configuration (generators, configurators).|$|R
40|$|The {{purpose of}} this project {{is to develop a}} {{computerized}} timesheet application. Using this application, an employee of a company can log onto the company 2 ̆ 7 s Web site and fill out a timesheet from anywhere in the world. The project involved automating timesheet data entry and approval procedures using contemporary technologies like Active Server Pages (ASP), JavaScript, VB <b>Script,</b> <b>Component</b> Object Model (COM), Components and Open Database connectivity (ODBC) ...|$|R
40|$|Computer-supported {{collaborative}} learning (CSCL) environments may encourage learners {{to engage in}} argumentative knowledge construction. Argumentative knowledge construction means that learners work together to elaborate on concepts by constructing arguments and counterarguments. This is achieved through discourse {{with the goal of}} acquiring knowledge within a specific domain. However, learners may encounter problems relating to one of three dimensions of argumentative knowledge construction. First, learners seem to have difficulties in constructing arguments that contribute to solving the task. Second, learners' arguments may lack important components such as data and warrants. Third, learners rarely build upon the arguments of their learning partners. Structuring argumentative knowledge construction with collaboration scripts is a promising instructional approach for facilitating specific process dimensions of argumentative knowledge construction. Little is known, however, about how to most effectively facilitate the acquisition of knowledge by directing collaboration scripts at specific dimensions of argumentative knowledge construction. This chapter will outline the theoretical background of argumentative knowledge construction and will then describe <b>script</b> <b>components</b> that target different dimensions of argumentative knowledge construction. The chapter will then discuss the empirical findings of two studies regarding the effects of these <b>script</b> <b>component...</b>|$|R
50|$|One of the {{distinguishing}} features of ColdFusion is its associated scripting language, ColdFusion Markup Language (CFML). CFML compares to the <b>scripting</b> <b>components</b> of ASP, JSP, and PHP in purpose and features, but its tag syntax more closely resembles HTML, while its script syntax resembles JavaScript. ColdFusion {{is often used}} synonymously with CFML, but there are additional CFML application servers besides ColdFusion, and ColdFusion supports programming languages other than CFML, such as server-side Actionscript and embedded scripts that can be written in a JavaScript-like language known as CFScript.|$|R
40|$|Illness scripts are {{knowledge}} structures {{composed of}} consequences, enabling conditions, and faults. The effects of illness <b>script</b> <b>components</b> -consequences and enabling conditions - and physician factors on referral decisions for gastrointestinal disorders were investigated. The hypothesis that consequences and enabling conditions {{increase the likelihood}} of referral was confirmed and several interactions between consequences and enabling conditions were found. The hypothesis that physician factors moderate the effect of enabling conditions was also confirmed, but (contrary to illness script theory) evidence was also found for moderation of consequences. Both enabling conditions and consequences were found to be moderated by physician factors to a larger extent than previously assumed by illness script theory...|$|R
40|$|D 23. 5. 1) EU Sixth Framework {{programme}} priority 2, Information society technology, Network of Excellence Kaleidoscope, (contract NoE IST- 507838), project MOSIL: Mobile Support for Integrated LearningIn this paper we outline the instructional approach of scripting CSCL. Scripts are didactic scenarios that structure collaborative learning activities {{in a number}} of phases. The scripts may define for each phase what task the students have to perform, the composition of the group, the way the task is distributed, the mode of interaction, and the timing of the phase. CSCL scripts can be further differentiated with regard to the design dimensions granularity, degree of coercion, locus of control, and degree of generality. Finally, scripts may structure different planes of a collaborative learning environment, such as the individual plane, the plane of small groups, or the plane of classes, schools etc. Against the background of these multiple dimensions, all kinds of CSCL scripts can be classified. Different major classes of scripts could be identified. These are, for instance, the Jigsaw class, providing learners with complementary information, the conflict class that aims to trigger socio-cognitive conflict in CSCL groups, and the reciprocal class that provides learners with roles to regulate the learning partners, which they are supposed to switch after a specified time. Future work focuses on the translation of different <b>script</b> <b>components</b> in a modelling language in order to systematize research on different <b>script</b> <b>components,</b> making <b>scripts</b> transferable from one CSCL environment to another, and to better understand what kind of collaborative learning activities work for what kind of tasks...|$|R
50|$|Improved <b>Scripting.</b> Dependent <b>components</b> that {{cannot be}} virtualized {{may now be}} {{installed}} locally by the App-V client when needed using the new scripting interface, even when the logged in user does not have administrative privileges to install software. This includes dependent device drivers.|$|R
40|$|Abstract. We {{present a}} domain-specific {{language}} embedded within the Haskell programming language to build scripts in a declarative and typesafe manner. We can categorize <b>script</b> <b>components</b> into various orthogonal dimensions, or concerns, such as IO interaction, configuration, or error handling. In particular, we provide special support for two dimensions {{that are often}} neglected in scripting languages, namely creating deadlines for computations and tagging and tracing of computations. Arbitrary computations may be annotated with a textual tag explaining its purpose. Upon failure a detailed context for that error is automatically produced. The deadline combinator allows one to set a timeout on an operation. If it fails to complete within that amount of time, the computation is aborted. Moreover, this combinator works with the tag combinator so as to produce a contextual trace. ...|$|R
40|$|Cost and {{complexity}} of managing client machines {{is a major concern}} for enterprises. This concern is compounded by emerging client machines that are mobile and diverse. To address this concern, management systems must be easy to configure and deploy, must handle asynchrony and disconnection for mobile clients, and must be customizable for diverse clients. In this paper, we first present NetScript, an environment for <b>scripting</b> with network <b>components.</b> We then propose a management system built with NetScript, where mobile <b>scripts</b> invoke <b>components</b> to perform management operations. We demonstrate that our approach results in a flexible, scalable management system that can support mobile and diverse client machines...|$|R
50|$|The <b>script</b> host, related <b>components,</b> and {{engines are}} able to be {{integrated}} into and called from Windows applications {{just like any other}} component.|$|R
40|$|This work {{introduces}} MACACO, a macroscopic calcium currents simulator. It {{provides a}} parameter-sweep framework which computes macroscopic Ca 2 + currents {{from the individual}} aggregation of unitary currents, using a stochastic model for L-type Ca 2 + channels. MACACO uses a simplified 3 -state Markov model to simulate the response of each Ca 2 + channel to different voltage inputs to the cell. In order to provide an accurate systematic view for the stochastic nature of the calcium channels, MACACO is composed of an experiment generator, a central simulation engine and a post-processing <b>script</b> <b>component.</b> Due to the computational complexity {{of the problem and}} the dimensions of the parameter space, the MACACO simulation engine employs a grid-enabled task farm. Having been designed as a computational biology tool, MACACO heavily borrows from the way cell physiologists conduct and report their experimental work...|$|R
50|$|DHTML {{is not a}} {{technology}} in and of itself; rather, it {{is the product of}} three related and complementary technologies: HTML, Cascading Style Sheets (CSS), and JavaScript. To allow <b>scripts</b> and <b>components</b> to access features of HTML and CSS, the contents of the document are represented as objects in a programming model known as the Document Object Model (DOM).|$|R
40|$|Inheritance {{is a key}} {{concept of}} {{object-oriented}} programming languages, features such as conceptual modeling and reusability are largely accredited to it. While many useful components have been, and will be, developed in this paradigm, the form of white-box reuse offered by inheritance has a fundamental flaw: reusing components by inheritance requires {{an understanding of the}} internals of the components. We can not treat components of object-oriented languages as black-box entities, inheritance breaks encapsulation and introduces subtle dependencies between base and extending classes. Component-oriented programming addresses this problem by shifting away from programming towards software composition. We build applications by <b>scripting</b> <b>components.</b> Instead of overriding the internals of a component, we focus on composing its interfaces only. This form of black-box reuse leads to a flexible and extendible architecture with reusable components. In this master’s thesis we propose a migration strategy from class inheritance – a whitebox form of reuse – to component composition as a black-box form of reuse. We presen...|$|R
40|$|Abstract Macro scripts {{structure}} {{collaborative learning}} and foster {{the emergence of}} knowledge-productive interactions such as argumentation, explanations and mutual regulation. We propose a pedagogical model for the designing of scripts and illustrate this model using three scripts. In brief, a script disturbs the natural convergence of a team {{and in doing so}} increases the intensity of interaction required between team members for the completion of their collaborative task. The nature of the perturbation determines the types of interactions that are necessary for overcoming it: for instance, if a script provides students with conflicting evidence, more argumentation is required before students can reach an agreement. Tools for authoring scripts manipulate abstract representations of the <b>script</b> <b>components</b> and the mechanisms that relate components to one another. These mechanisms are encompassed in the transformation of data structures (social structure, resources structure and products structure) between script phases. We describe how this pedagogical design model is translated into computational structures in three illustrated scripts...|$|R
40|$|For more details, see editor's website : [URL] scripts {{structure}} {{collaborative learning}} and foster {{the emergence of}} knowledge-productive interactions such as argumentation, explanations and mutual regulation. We propose a pedagogical model for the designing of scripts and illustrate this model using three scripts. In brief, a script disturbs the natural convergence of a team {{and in doing so}} increases the intensity of interaction required between team members for the completion of their collaborative task. The nature of the perturbation determines the types of interactions that are necessary for overcoming it: for instance, if a script provides students with conflicting evidence, more argumentation is required before students can reach an agreement. Tools for authoring scripts manipulate abstract representations of the <b>script</b> <b>components</b> and the mechanisms that relate components to one another. These mechanisms are encompassed in the transformation of data structures (social structure, resources structure and products structure) between script phases. We describe how this pedagogical design model is translated into computational structures in three illustrated scripts...|$|R
50|$|The {{environment}} is also extendable with script engine {{which makes it}} possible to parse and to train NNs in <b>script</b> editor. This <b>component</b> is implemented as a plug-in and is called Scripting Environment.|$|R
40|$|Abstract. We {{define a}} core {{language}} combining computational and architectural primitives, and study how static typing {{may be used}} to ensure safety properties of component composition and dynamic reconfiguration in object-based systems. We show how our language can model typed entities analogous of configuration <b>scripts,</b> makefiles, <b>components,</b> and component instances, where static typing combined with a dynamic type-directed test on the structure of objects can enforce consistency of compositions and atomicity of reconfiguration. ...|$|R
50|$|It is {{reported}} to combine elements of Eve Online and Star Citizen, as well as Minecraft, No Man’s Sky, and Space Engineers. The game {{is set in a}} continuous single-shard universe, wherein players are able to fully edit the environment by building structures and altering terrain, as well as being given the ability to <b>script</b> the <b>components</b> within vehicles and other player-built objects. A heavy focus is also placed on allowing for collective social gameplay involving exploration, mining, crafting, trade, politics and warfare.|$|R
40|$|Most {{communication}} {{interactions are}} carried out at the discourse level. Clinically, it is important and ecologically valid to develop treatment protocols aimed at improving discourse ability in adults with aphasia. The {{purpose of this study}} was to investigate the effectiveness of <b>scripting</b> information <b>components</b> for narratives, one type of discourse ability, in adults with aphasia. This multiple probe design across participants and behaviors included two participants with Broca’s aphasia and one with conduction aphasia. Data analyses indicated that the protocol was effective in increasing the amount of information relayed in response to picture stimuli...|$|R
50|$|Visual Smalltalk Enterprise {{usually comes}} with another {{sub-system}} called the PARTS Workbench. This system allows {{the layout of}} components, which can then be connected using a visual representation of event-message links. Programmers can add <b>scripts</b> to particular <b>components</b> and build nested-components. They can also enhance the functionality of the main VSE Smalltalk system and use that within the PARTS Workbench.|$|R
5000|$|<b>Component</b> <b>scripts</b> on {{the client}} are {{responsible}} for reading the configuration parameters and taking the appropriate actions necessary to implement the configuration; usually this involves generating configuration files from the parameters in the profile. Components are notified when a new configuration is received which involves a change to some parameter of that component. The component regenerates any necessary configuration files, and notifies any associated daemons.|$|R
40|$|The goal of {{this paper}} is to explore the use of Keyword driven testing for {{automated}} testing of web application. In Keyword driven testing, the functionality of the system-under-test is documented in a table as well as in step by- step instructions for each test. It involves the creation of modular, reusable test components. These components are then assembled into test <b>scripts.</b> These <b>components</b> can be parameterized to make them reusable across various test script. These test scripts can also be divided into various reusable actions. This saves a lot of recording procedure. The Existing tools for this testing uses Html, Xml, Spreadsheet, etc. to maintain the test steps. The test results are analyzed to create test reports...|$|R
