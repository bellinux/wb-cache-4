1|1196|Public
50|$|In Q1 2015, ionCube {{introduced}} a service called ionCube24 offering realtime malware protection for PHP websites. ionCube24 uses the ionCube Loader {{to monitor and}} block any unexpected PHP code, as might be introduced by a <b>software</b> <b>vulnerability</b> <b>exploit,</b> before it executes.|$|E
5000|$|... <b>software</b> <b>vulnerabilities,</b> <b>exploits,</b> {{exploitation}} techniques, hacking tools, attacking public {{outlets and}} distribution points of that information. The general thought behind {{this is that}} the computer security industry uses full disclosure to profit and develop scare-tactics to convince people into buying their firewalls, anti-virus software and auditing services.|$|R
40|$|Part 1 : Invited PapersInternational audienceSecurity threats have {{escalated}} {{rapidly in}} the past decade. “Zero-day attacks,” delivered via web pages, pictures or documents, have become significant threats. Malware is rampant, being installed using phishing, <b>software</b> <b>vulnerability</b> <b>exploits,</b> and <b>software</b> downloads. With {{the emergence of a}} lucrative black market in cyber crime, even ordinary users are becoming targets of sophisticated malware attacks...|$|R
50|$|Unusual {{for such}} kits, MPack is sold as {{commercial}} software (costing $500 to $1,000 US), and {{is provided by}} its developers with technical support and regular updates of the <b>software</b> <b>vulnerabilities</b> it <b>exploits.</b> Modules are sold by the developers containing new exploits. These cost between $50 and $150 US depending on how severe the exploit is. The developers also charge to make the scripts and executables undetectable by antivirus software.|$|R
40|$|The Web is {{typically}} our first {{source of information}} about new <b>software</b> <b>vulnerabilities,</b> <b>exploits</b> and cyber-attacks. Information is found in semi-structured vulnerability databases as well as in text from security bulletins, news reports, cybersecurity blogs and Internet chat rooms. It can be useful to cybersecurity systems if {{there is a way to}} recognize and extract relevant information and represent it as easily shared and integrated semantic data. We describe such an automatic framework that generates and publishes a RDF linked data representation of cybersecurity concepts and vulnerability descriptions extracted from the National Vulnerability Database and other text sources. Entities, relations and concepts are represented using custom ontologies for the cybersecurity domain and also mapped to objects in the DBpedia knowledge base, producing a rich resource of machine-understandable linked data. The resulting cybersecurity linked data collection can be used for many purposes, including automating early vulnerability identification, mitigation and prevention efforts...|$|R
40|$|Abstract—The Web is {{typically}} our first {{source of information}} about new <b>software</b> <b>vulnerabilities,</b> <b>exploits</b> and cyber-attacks. In-formation is found in semi-structured vulnerability databases as well as in text from security bulletins, news reports, cybersecurity blogs and Internet chat rooms. It can be useful to cybersecurity systems if {{there is a way to}} recognize and extract relevant information and represent it as easily shared and integrated semantic data. We describe such an automatic framework that generates and publishes a RDF linked data representation of cybersecurity concepts and vulnerability descriptions extracted from the National Vulnerability Database and from text sources. A CRF-based system is used to identify cybersecurity-related entities, concepts and relations in text, which are then represented using custom ontologies for the cybersecurity domain and also mapped to objects in the DBpedia knowledge base. The resulting cybersecurity linked data collection can be used for many purposes, including automating early vulnerability identification, mitigation and prevention efforts. Index Terms—cybersecurity, linked data, information extrac-tion, ontolog...|$|R
40|$|Virtualization is {{a useful}} {{technology}} for addressing security concerns since it allows {{for the creation of}} isolated software execution environments, e. g., for separation of the sensitive parts of a system from the complex, untrusted parts. In this paper, we describe a tool for dynamically detecting and preventing <b>software</b> <b>vulnerabilities</b> that <b>exploits</b> the availability of virtualized (isolated) execution environments. A program that is not itself malicious, but could have vulnerabilities, is first safely executed within a virtualized Testing environment, wherein its execution is traced using dynamic binary instrumentation and checked against extensive security policies that express the behavioral patterns associated with various <b>vulnerability</b> <b>exploits.</b> The program’s execution trace is represented using a hybrid model that consists of regular expressions along with data invariants in order to capture both control and data flow. The behavioral model of the program’s exercised execution paths. Th...|$|R
40|$|Social {{media has}} been used as a tool for the {{dissemination}} and exchange of information among people in many different areas of knowledge. Computer security is one which utilises social media in this way. Researchers and specialists in security are using social media tools for informing their discoveries on subjects as computer security, <b>software</b> <b>vulnerabilities,</b> <b>exploits,</b> data breach and hacker intrusion. Within the context of social media, Twitter might be the first channel used by security researchers for disclosing novelty (such as exploits or backdoors) in computer security. This paper proposes a Support Vector Machine (SVM) classification model using Twitter posts (tweets) as a source for filtering relevant information related to <b>software</b> <b>vulnerabilities.</b> In this paper, tweets considered relevant will be those alerting about new <b>vulnerabilities</b> in <b>software</b> (being <b>exploited</b> or not), as well as posts alerting software users about security patches and updates. The non- relevant information will be considered as those which have no warning characteristic, i. e. : tweets about opinion, general conversation and topics which have no sense of alert. The proposed model achieved an accuracy of 94 % by using simple features such as the frequency of words (unigram and bigram). Reasonable rates of recall and precision into the desirable class values were recorded as, 68 % and 46 % respectively for the same simple features. This experiment opens a path for future studies about the relationship between how alerts and discoveries in computer security are expressed by the security community on social media posts...|$|R
50|$|Security: CMS's {{are often}} {{forgotten}} about when hardware, software, and operating systems are patched for security threats. Due {{to lack of}} patching by the user, a hacker can use unpatched CMS <b>software</b> to <b>exploit</b> <b>vulnerabilities</b> to enter an otherwise secure environment. CMS's {{should be part of}} an overall, holistic security patch management program to maintain the highest possible security standards.|$|R
40|$|Cyber {{resilience}} is characterised by {{an ability}} to understand and adapt to changing network conditions, including cyber attacks. Cyber resilience may be characterised by an effects-based approach to missions or processes. One of the fundamental preconditions underpinning cyber resilience is an accurate representation of current network and machine states and what missions they are supporting. This research outlines {{the need for an}} ontological network representation, drawing on existing literature and implementations in the domain. This work then introduces an open-source ontological representation for modelling cyber assets for the purposes of Computer Network Defence. This representation encompasses computers, network connectivity, users, <b>software,</b> <b>vulnerabilities</b> and <b>exploits</b> and aims for interoperability with related representations in common use. The utility of this work is highlighted against a functional use-case depicting a realistic operational network and mission. Finally, a future research direction is defined...|$|R
40|$|<b>Software</b> <b>vulnerabilities</b> are a {{major problem}} for {{organizations}} and society given how pervasive the use of computers and the Internet and networks has become. Computers, the Internet and networks in general are underpinned by operating system software and, increasingly, software applications are integrated with the Internet. In this increasingly complex environment hackers and attackers are more likely to take advantage of <b>software</b> <b>vulnerabilities</b> and <b>exploit</b> operating system software and application software. These software exploitations can result in huge losses to businesses which are highly reliant on computerized systems. Software vendors are responsible for securing these <b>vulnerabilities</b> through <b>software</b> patching. This study examines the effect of the level of criticality of <b>software</b> <b>vulnerabilities,</b> type of <b>software</b> vendor and type of software on the software vendors‘ response time in releasing software patches once software vendors have been informed of <b>vulnerabilities</b> in their <b>software.</b> The main theoretical support for this study is software security disclosure theory and an economic model of software security investment. These theories provide a framework for understanding how open source versus proprietary software vendors respond with patches to <b>software</b> <b>vulnerabilities</b> depending on the level of criticality of the <b>software</b> <b>vulnerability</b> and the type of software. Empirical data was collected from four related <b>software</b> <b>vulnerability</b> databases: SecurityFocus, Open Source Vulnerability Database, National Vulnerability Database and Secunia. These four <b>software</b> <b>vulnerability</b> databases contain archival data about <b>software</b> <b>vulnerabilities</b> which has been rigorously collected and screened. This research focuses on <b>software</b> <b>vulnerabilities</b> that have been recently reported in these <b>software</b> <b>vulnerability</b> databases from 2008 to 2010. To test the hypothesised relationships in the proposed research model, multiple regression analysis is used as the main statistical tool. Analysis of the archival data confirms that software vendors release patches for <b>software</b> <b>vulnerabilities</b> with a medium level of criticality in a shorter response time than <b>software</b> <b>vulnerabilities</b> with low and high levels of criticality once the vendor has been informed of the <b>software</b> <b>vulnerability.</b> Open source vendors release patches for open source <b>software</b> <b>vulnerabilities</b> 39 % quicker than proprietary source vendors release patches for proprietary software. Patches for operating system <b>software</b> <b>vulnerabilities</b> are released 8 % slower than patches for application <b>software</b> <b>vulnerabilities.</b> This study contributes to the existing knowledge and theory by investigating how the different levels of criticality of <b>software</b> <b>vulnerabilities,</b> the differences between open and proprietary source software vendors and the difference between operating system software and application software impact on the response time of software vendors in releasing patches once the software vendor is informed of <b>software</b> <b>vulnerabilities.</b> The findings of this study also establish that responsible disclosure is a more effective mechanism than full disclosure for determining the response time of software vendors. This study contributes to practice by providing an enhanced understanding of the <b>software</b> <b>vulnerability</b> landscape and the complex process of software vendors‘ patching behaviour. ...|$|R
40|$|FyLasso Antivulnerability is a {{software}} utility, developed for Windows XP and Windows Server 2003, which protects from 0 -days, worms and malicious hackers. FyLasso uses a periodically updated Attack Vectors Database to search your computer for potential <b>software</b> <b>vulnerabilities.</b> Every potential vulnerability found is protected from exploitation using FyLasso’s Proactive Real-time Defense System (PRDS). The {{purpose of this}} paper is to provide a technical explanation of FyLasso and PRDS. 1 1 What is the problem being solved? The software running on todays computer systems contain bugs. These software bugs are errors during programming or design of an application [2]. Some types of bugs, called <b>software</b> <b>vulnerabilities,</b> are <b>exploited</b> by worms and malicious hackers. <b>Software</b> <b>vulnerabilities</b> allow arbitrary code execution to occur resulting in the primary reason why computers are insecure. The following sections explain how FyLasso Antivulnerability (FyLasso) detects potential <b>software</b> <b>vulnerabilities</b> and prevents arbitrary code execution from occuring thus protecting computers from attack. 2 The Attack Vectors Database FyLasso organizes software bugs into attack vectors. Each attack vector contains a unique set of adjacent assembly instructions, consisting of a variety of buffer overruns, buffer underruns and integer overflows. One of the most commonly attacked bug used to penetrate into computer systems is the buffer overflow [7, 10]. Listing 1 contains three examples of common buffer overflow attack vectors. Listing 1 : Example Buffer Overflow Attack Vectors 004030 DC mov ch, byte [eax] 004030 DE mov byte [ebx], ch 004030 E 0 i n c eax 004030 E 1 i n c ebx 004030 E 2 t e s t ch, ch 004030 E 4 jnz 004030 DC 004012 F 0 rep movsd 004012 F 2 mov ecx, eax 004012 F 4 and ecx, 3 004012 F 7 rep movsb 00400087 mov dl, byte [eax] 00400089 mov byte [ecx+eax], dl 0040008 C i n c eax 0040008 D t e s t dl, d...|$|R
40|$|Abstract. Computers {{are often}} subject to {{external}} attacks that aim to control software behavior. Typically, such attacks arrive as data over a regular communication channel and, once resident in program memory, trigger pre-existing, low-level <b>software</b> <b>vulnerabilities.</b> By <b>exploiting</b> such flaws, these low-level attacks can subvert {{the execution of}} the software and gain control over its behavior. The combined effects of these attacks make them one of the most pressing challenges in computer security. As a result, in recent years, many mechanisms have been proposed for defending against these attacks. This chapter aims to provide insight in low-level software attack and defense techniques by discussing 4 examples of attacks that are representative of the major types of attacks on C and C++ software, and 4 examples of defenses selected because of their effectiveness, wide applicability and low enforcement overhead. Attacks and defenses are described in enough detail to be understood even by readers without a background in software security, and with-out a natural inclination for crafting malicious attacks. Throughout, the attacks and defenses are placed in perspective by showing how they are both facilitated by the gap between the semantics of the high-level language of the software under attack, and the low-level semantics of machine code and the hardware on which the software executes. ...|$|R
40|$|Despite {{years of}} {{intensive}} {{research in the}} field of <b>software</b> <b>vulnerabilities</b> discovery, <b>exploits</b> are becoming ever more common. Consequently, it is more necessary than ever to choose software configurations that minimize systems' exposure surface to these threats. In order to support users in assessing the security risks induced by their software configurations and in making informed decisions, we introduce M-STAR, a Modular Software Trustworthiness ARchitecture and framework for probabilistically assessing the trustworthiness of software systems, based on evidence, such as their vulnerability history and source code properties. Integral to M-STAR is a software trustworthiness model, consistent with the concept of computational trust. Computational trust models are rooted in Bayesian probability and Dempster-Shafer Belief theory, offering mathematical soundness and expressiveness to our framework. To evaluate our framework, we instantiate M-STAR for Debian Linux packages, and investigate real-world deployment scenarios. In our experiments with real-world data, M-STAR could assess the relative trustworthiness of complete software configurations with an error of less than 10 %. Due to its modular design, our proposed framework is agile, as it can incorporate future advances in the field of code analysis and vulnerability prediction. Our results point out that M-STAR can be a valuable tool for system administrators, regular users and developers, helping them assess and manage risks associated with their software configurations. Comment: 18 pages, 13 figure...|$|R
40|$|Event {{correlation}} is a widely-used {{data processing}} methodology {{for a broad}} variety of applications, and is especially useful {{in the context of}} distributed monitoring for <b>software</b> faults and <b>vulnerabilities.</b> However, most existing solutions have typically been focused on 'intra-organizational' correlation; organizations typically employ privacy policies that prohibit the exchange of information outside of the organization. At the same time, the promise of 'inter-organizational' correlation is significant given the broad availability of Internet-scale communications, and its potential role in both software maintenance and <b>software</b> <b>vulnerability</b> <b>exploits.</b> In this proposal, I present a framework for reconciling these opposing forces in event correlation via the use of privacy preservation integrated into the event processing framework. By integrating flexible privacy policies, we enable the correlation of organizations' data without actually releasing sensitive information. The framework supports both source anonymity and data privacy, yet allows for the time-based correlation of a broad variety of data. The framework is designed as a lightweight collection of components to enable integration with existing COTS platforms and distributed systems. I also present two different implementations of this framework: XUES (XML Universal Event Service), an event processor used as part of a software monitoring platform called KX (Kinesthetics eXtreme), and Worminator, a collaborative Intrusion Detection System. KX comprised a series of components, connected together with a publish-subscribe content-based routing event subsystem, for the autonomic software monitoring of complex distributed systems. Sensors were installed in legacy systems. XUES' two modules then performed event processing on sensor data: information was collected and processed by the Event Packager, and correlated using the Event Distiller. While XUES itself was not privacy-preserving, it laid the groundwork for this thesis by supporting event typing, the use of publish-subscribe and extensibility support via pluggable event transformation modules. Worminator, the second implementation, extends the XUES platform to fully support privacy-preserving event types and algorithms {{in the context of a}} Collaborative Intrusion Detection System (CIDS), whereby sensor alerts can be exchanged and corroborated [...] a reduced form of correlation that enables collaborative verification [...] without revealing sensitive information about a contributor's network, services, or even external sources as required. Worminator also fully anonymizes source information, allowing contributors to decide their preferred level of information disclosure. Worminator is implemented as a monitoring framework on top of a COTS IDS sensor, and demonstrably enables the detection of not only worms but also 'broad and stealthy' scans; traditional single-network sensors either bury such scans in large volumes or miss them entirely. Worminator has been successfully deployed at 5 collaborating sites and work is under way to scale it up further. The contributions of this thesis include the development of a cross-application-domain event correlation framework with native privacy-preserving types, the use and validation of privacy-preserving corroboration, and the establishment of a practical deployed collaborative security system. I also outline the next steps in the thesis research plan, including the development of evaluation metrics to quantify Worminator's effectiveness at long-term scan detection, the overhead of privacy preservation and the effectiveness of our approach against adversaries, be they 'honest-but-curious' or actively malicious. This thesis has broad future work implications, including privacy-preserving signature detection and distribution, distributed stealthy attacker profiling, and 'application community'-based <b>software</b> <b>vulnerability</b> detection...|$|R
40|$|Evaluating the {{security}} of a computer network system is a challenging task. Configurations of large systems are com-plex entities in continuous evolution. The installation of new software, a change in the firewall rules, or the discovery of a <b>software</b> <b>vulnerability</b> can be <b>exploited</b> by a malicious user to gain unauthorized control of the integrity, availability and confidentiality of the assets of an organization. This paper presents a framework for building security as-sessment tools able to perform online verification of the se-curity of a system configuration. Heterogeneous data gen-erated from multiple sources are integrated into a homoge-neous RDF representation using domain-specific ontologies and used for assessing {{the security}} of a configuration toward known attack vectors. Different vocabularies can be defined to express configurations, policies and attacks for each as-pect of {{the security of}} an organization (e. g., network security, physical security and application level security) in a modular way. By automatically extracting part of the configuration from the network system, the tool is able to detect in near real-time security threats created by configuration changes...|$|R
40|$|The {{consequences}} of a class of system failures, commonly known as <b>software</b> <b>vulnerabilities,</b> violate security policies. They can cause the loss of information and reduce the value or usefulness of the system. ^ An increased {{understanding of the nature}} of vulnerabilities, their manifestations, and the mechanisms that can be used to eliminate and prevent them can be achieved by the development of a unified definition of <b>software</b> <b>vulnerabilities,</b> the development of a framework for the creation of taxonomies for vulnerabilities, and the application of learning, visualization, and statistical tools on a representative collection of <b>software</b> <b>vulnerabilities.</b> ^ This dissertation provides a unifying definition of <b>software</b> <b>vulnerability</b> based on the notion that it is security policies that define what is allowable or desirable in a system. It also includes a framework for the development of classifications and taxonomies for <b>software</b> <b>vulnerabilities.</b> ^ This dissertation presents a classification of <b>software</b> <b>vulnerabilities</b> that focuses on the assumptions that programmers make regarding the environment in which their application will be executed and that frequently do not hold during the execution of the program. ^ This dissertation concludes by showing that the unifying definition of <b>software</b> <b>vulnerability,</b> the framework for the development of classifications, and the application of learning and visualization tools can be used to improve security. ...|$|R
5000|$|... #Subtitle level 3: <b>Vulnerability</b> <b>exploited</b> in {{attacks on}} U.S. firms ...|$|R
50|$|An {{overview}} of Bluetooth <b>vulnerabilities</b> <b>exploits</b> {{was published in}} 2007 by Andreas Becker.|$|R
30|$|We {{considered}} entries {{that describe}} the <b>vulnerabilities</b> <b>exploited</b> by the attacks in our classification.|$|R
5000|$|Pinkie Pie won $50,000. [...] Google {{released}} Chrome {{updates on}} 14 Nov {{to address the}} <b>vulnerabilities</b> <b>exploited.</b>|$|R
40|$|CVSS is a {{specification}} {{for measuring}} the relative severity of <b>software</b> <b>vulnerabilities.</b> The performance values of the CVSS given by CVSS-SIG cannot describe {{the reasons for the}} <b>software</b> <b>vulnerabilities.</b> This approach fails to distinguish between <b>software</b> <b>vulnerabilities</b> that have the same score but different levels of severity. In this paper, a <b>software</b> <b>vulnerability</b> rating approach (SVRA) is proposed. The vulnerability database is used by SVRA to analyze the frequencies of CVSS’s metrics at different times. Then, the equations for both exploitability and impact subscores are given in terms of these frequencies. SVRA performs a weighted average of these two subscores to create an SVRA score. The score of a vulnerability is dynamically calculated at different times using the vulnerability database. Experiments were performed to validate the efficiency of the SVRA...|$|R
5000|$|... #Subtitle level 3: Technical {{issues and}} <b>software</b> <b>vulnerability</b> issue ...|$|R
40|$|Information {{security}} researchers {{hypothesize that}} black markets {{exist for the}} trading of <b>software</b> <b>vulnerabilities</b> and zero-day <b>exploits.</b> Such markets would encourage the development and exploitation of vulnerabilities through direct attack, malware spread or extortion. It is hard to assess the presence of vulnerability black markets and their associated transactions, as they are naturally hidden from general view, with only insiders knowing where and how to locate potential buyers and sellers. Nevertheless, {{the importance of the}} possible presence of such markets to software security makes their study requisite. After reviewing evidence for the notion of the vulnerability black markets, we conclude that {{there seems to be a}} credible case for their existence. Next, we present data collection and modeling methods that may be used to explore this area further. In the absence of observable black market transactions, we define a “closed anchor ” approach that assumes that transactions exist, and look for indirect data of their influence on observable data. To this end we have begun an analysis of online vulnerability trading sites that apparently support underground activities. Archival analysis of existing Internet sources may be used to create a common vocabulary and semantic structure for conversations about vulnerability risks and markets. In addition, we posit that interviews with participants in these sites would be useful to identify causal models that support or refute the ongoing viability of black markets. Our ultimate goal is the integration of the survey and interview data into a simulation model that may shine light onto the effects of these hidden activities...|$|R
5000|$|In web {{security}}, cross-site tracing (abbreviated [...] "XST") is {{a network}} security <b>vulnerability</b> <b>exploiting</b> the HTTP TRACE method.|$|R
5000|$|System protection: Critical {{resources}} are dynamically protected from malware and <b>vulnerability</b> <b>exploits</b> ensuring {{the integrity of}} the operating system’s components.|$|R
40|$|Erroneous string {{manipulations}} are a {{major source}} of software defects in C programs yielding <b>vulnerabilities</b> which are <b>exploited</b> by software viruses. We present C String Static Verifyer (CSSV), a tool that statically uncovers all string manipulation errors. Being a conservative tool, it reports all such errors at the expense of sometimes generating false alarms. Fortunately, {{only a small number of}} false alarms are reported, thereby proving that statically reducing <b>software</b> <b>vulnerability</b> is achievable. CSSV handles large programs by analyzing each procedure separately. For this, procedures' contracts are allowed which are veri ed by the tool...|$|R
40|$|Considering {{the fast}} {{development}} of software and its complexity, {{the requirement of}} securing has faced new aspects. The more the software becomes complex and its access rate rises, a creative technique is being created to attack, access, or manipulate its data. Therefore, creating a new approach in order to detect <b>software</b> <b>vulnerability</b> is essential. Various studies have proved that in case of considering security in late phases of software development and testing to mitigate <b>software</b> <b>vulnerabilities,</b> will be time consuming and complex, and it is probably that it couldn’t supply the security completely. So, {{taking into account the}} security issue from the early phases of software development is essential. In this paper, we propose a framework in order to identify <b>software</b> <b>vulnerability.</b> In this framework, we use common criteria standard (ISO/IEC 15408) and CVE (Common Vulnerabilities and Exposures) to identify <b>software</b> <b>vulnerability,</b> which is done in every phase of the software development life cycle. Therefore, the process of secure software development will be improved, and <b>software</b> with less <b>vulnerability</b> will be produced...|$|R
5000|$|Thompson, Herbert H., and Scott G. Chase. The <b>Software</b> <b>Vulnerability</b> Guide. Charles River Media, 2005. (...) ...|$|R
50|$|The {{attack is}} named after the bar mitzvah {{ceremony}} which is held at 13 years of age, because the <b>vulnerability</b> <b>exploited</b> is 13 years old.|$|R
50|$|Sucuri {{uses the}} {{principle}} of responsible disclosure to raise awareness about <b>software</b> <b>vulnerabilities</b> on their website security blog.|$|R
5000|$|Software Security Assessments: The {{identification}} of hardware and <b>software</b> <b>vulnerabilities</b> through black box, white box, and gray box testing.|$|R
40|$|Abstract: <b>Software</b> <b>vulnerabilities</b> are {{recognized}} as the major cause of system outages. This paper presents a <b>SoftwAre</b> <b>Vulnerabilities</b> Identifying Environment (SAVIE) which is a tool for identifying software weaknesses through profiling and conducting fault injection experiments on target software. SAVIE now supports the identification of two types of vulnerabilities, one is the weak part in software to resist environment perturbation (hardware faults); {{the other is the}} internal bugs in the source code of software (software faults). SAVIE also supports different injection methods (can be used on different platforms) and various error types (can be used to find different vulnerabilities), which can also be added by users easily. Experimental results are presented to demonstrate the potential of SAVIE in the identification of <b>software</b> <b>vulnerabilities.</b> Key words: <b>software</b> vulnerability; fault injection; environment perturbation; single event upset...|$|R
40|$|We present vepRisk (<b>Vulnerabilities,</b> <b>Exploits</b> and Patches Risk {{analysis}} tool) : {{a web-based}} tool for analyzing publically available security data. The tool has a backend modules that mine, extract, parse and store data from public repositories of <b>vulnerabilities,</b> <b>exploits</b> and patches; and a frontend web-based application that provides functionality for analyzing the data. The frontend uses shinyR, hence allowing integration with the R statistical analysis package and seamless use of R functions. We also present initial analysis {{we have done}} with the tool, and outline the extensions and future development we plan to integrate into the tool in the near future...|$|R
50|$|Vulnerability {{management}} is the cyclical practice of identifying, classifying, remediating, and mitigating vulnerabilities. This practice generally refers to <b>software</b> <b>vulnerabilities</b> in computing systems.|$|R
50|$|As a cyber-security researcher, Maertens {{published}} multiple <b>software</b> <b>vulnerabilities</b> on Microsoft and Linux platforms, and was {{a global}} trainer on the Extreme Hacking courses.|$|R
