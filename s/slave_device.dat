105|99|Public
25|$|To begin communication, the {{bus master}} configures the clock, using a {{frequency}} {{supported by the}} <b>slave</b> <b>device,</b> typically up to a few MHz. The master then selects the <b>slave</b> <b>device</b> with a logic level 0 on the select line. If a waiting period is required, such as for an analog-to-digital conversion, the master must wait for at least {{that period of time}} before issuing clock cycles.|$|E
25|$|If {{a single}} <b>slave</b> <b>device</b> is used, the SS pin may be fixed to logic low if the slave permits it. Some slaves require a falling {{edge of the}} chip select signal to {{initiate}} an action. An example is the Maxim MAX1242 ADC, which starts conversion on a high→low transition. With multiple slave devices, an independent SS signal is required from the master for each <b>slave</b> <b>device.</b>|$|E
25|$|The {{timing diagram}} {{is shown to}} the right. The timing is further {{described}} below and applies to both the master and the <b>slave</b> <b>device.</b>|$|E
5000|$|The <b>slave</b> <b>devices</b> do {{not respond}} during the SAK bit {{following}} the start header. This is to avoid bus collisions which would occur of all <b>slave</b> <b>devices</b> tried to respond at the same time.|$|R
50|$|Both {{master and}} <b>slave</b> <b>devices</b> use a tri-stateable, {{push-pull}} I/O pin {{to connect to}} SCIO, with the pin being placed in a high impedance state when not driving the bus. Because push-pull outputs are used, the output driver on <b>slave</b> <b>devices</b> is current-limited to prevent high system currents from occurring during bus collisions.|$|R
5000|$|... {{it tells}} {{high-speed}} <b>slave</b> <b>devices</b> {{to change to}} high-speed timing rules, ...|$|R
50|$|After {{the start}} header has been {{transmit}}ted, the master must transmit a device address {{to select the}} desired <b>slave</b> <b>device</b> for the current operation. Once the device address has been sent, any <b>slave</b> <b>device</b> with an address different from that specified is required to shut down and ignore all further communication until a standby pulse is received.|$|E
5000|$|The master {{starts a}} {{transmission}} with a reset pulse, which pulls the wire to 0 volts {{for at least}} 480 µs. This resets every <b>slave</b> <b>device</b> on the bus. After that, any <b>slave</b> <b>device,</b> if present, shows that it exists with a [...] "presence" [...] pulse: it holds the bus low for at least 60 µs after the master releases the bus.|$|E
50|$|If {{a single}} <b>slave</b> <b>device</b> is used, the SS pin may be fixed to logic low if the slave permits it. Some slaves require a falling {{edge of the}} chip select signal to {{initiate}} an action. An example is the Maxim MAX1242 ADC, which starts conversion on a high→low transition. With multiple slave devices, an independent SS signal is required from the master for each <b>slave</b> <b>device.</b>|$|E
50|$|Early G3s with Revision A ROMs do {{not support}} <b>slave</b> <b>devices</b> on their IDE controllers, {{limiting}} them to one device per bus (normally one optical drive and one hard disk). Additionally, they came with onboard ATI Rage II+ video. G3s with Revision B ROMs support <b>slave</b> <b>devices</b> on their IDE controllers, and had the onboard video upgraded to ATI Rage Pro. G3s with Revision C ROMs also support <b>slave</b> <b>devices</b> on their IDE controllers, but the most significant technical differences are the newer Open Firmware version than the previous two models (2.4 vs 2.0f1) and another onboard video upgrade, this time to ATI Rage Pro Turbo.|$|R
25|$|The SPI bus {{can operate}} {{with a single}} master device and {{with one or more}} <b>slave</b> <b>devices.</b>|$|R
5000|$|I²C {{addressing}} allows multiple <b>slave</b> <b>devices</b> {{to share}} the bus without SPI bus style slave select signals, and ...|$|R
50|$|To begin communication, the {{bus master}} configures the clock, using a {{frequency}} {{supported by the}} <b>slave</b> <b>device,</b> typically up to a few MHz. The master then selects the <b>slave</b> <b>device</b> with a logic level 0 on the select line. If a waiting period is required, such as for an analog-to-digital conversion, the master must wait for at least {{that period of time}} before issuing clock cycles.|$|E
5000|$|The {{following}} is a table of object types provided by a Modbus <b>slave</b> <b>device</b> to a Modbus master device: ...|$|E
50|$|SMBus {{specifies}} TLOW:SEXT as {{the cumulative}} clock low extend {{time for a}} <b>slave</b> <b>device.</b> I²C {{does not have a}} similar specification.|$|E
50|$|A DMX512 network {{employs a}} {{multi-drop}} bus topology with nodes strung together {{in what is}} commonly called a daisy chain. A network consists of a single DMX512 controller - which is {{the master of the}} network — and one or more <b>slave</b> <b>devices.</b> For example, a lighting console is frequently employed as the controller for a network of <b>slave</b> <b>devices</b> such as dimmers, fog machines and intelligent lights.|$|R
5000|$|Peer-to-peer communications: both controller-to-controller (C2C) for {{multiple}} masters {{to communicate with}} one another and direct cross-communication (CC) among multiple <b>slave</b> <b>devices.</b>|$|R
5000|$|Often in a {{master-slave}} arrangement {{when one}} device dubbed [...] "the master" [...] initiates all communication activity, the master device itself provides the bias {{and not the}} <b>slave</b> <b>devices.</b> In this configuration, the master device is typically centrally located along the set of RS-485 wires, with two <b>slave</b> <b>devices</b> located at the physical end of the wires providing termination. The master device itself could provide termination if it were located at a physical end of the wires, but that is generally regarded as a bad topology design as the master operates optimally when located at a halfway point between the <b>slave</b> <b>devices,</b> thereby maximizing signal strength and therefore line distance and speed. Applying the bias at multiple node locations could possibly cause {{a violation of the}} RS-485 specification and cause communications to malfunction.|$|R
50|$|The {{timing diagram}} {{is shown to}} the right. The timing is further {{described}} below and applies to both the master and the <b>slave</b> <b>device.</b>|$|E
50|$|Starting {{with the}} 80-wire cable defined {{for use in}} ATAPI5/UDMA4, the master device goes {{at the end of}} the 18 in cable—the black {{connector}}—and the <b>slave</b> <b>device</b> goes on the middle connector—the gray one—and the blue connector goes onto the motherboard. So, if there is only one (master) device on the cable, there is no cable stub to cause reflections. Also, cable select is now implemented in the <b>slave</b> <b>device</b> connector, usually simply by omitting the contact from the connector body.|$|E
5000|$|Clocks {{determine}} the offset {{between themselves and}} their master. Let the variable [...] represent physical time. For a given <b>slave</b> <b>device,</b> the offset [...] at time [...] is defined by: ...|$|E
50|$|A piconet is {{an ad hoc}} {{network that}} links a {{wireless}} user group of devices using Bluetooth technology protocols. A piconet consists {{of two or more}} devices occupying the same physical channel (synchronized to a common clock and hopping sequence). It allows one master device to interconnect with up to seven active <b>slave</b> <b>devices.</b> Up to 255 further <b>slave</b> <b>devices</b> can be inactive, or parked, which the master device can bring into active status at any time, but an active station must go into parked first.|$|R
5000|$|<b>Slave</b> <b>devices</b> {{measure the}} time {{necessary}} {{to receive the}} 0x55 byte by counting signal transitions. This time is then used by the slaves to determine the bit period and synchronize with the master.|$|R
50|$|All slots {{following}} the start code contain control settings for <b>slave</b> <b>devices.</b> A slot's {{position within the}} packet determines the device and function to be controlled while its data value specifies the control set point.|$|R
50|$|Because the {{specified}} <b>slave</b> <b>device</b> is not selected until both bytes {{of the device}} address have been received, a NoSAK will occur during the acknowledge sequence following the first device address byte.|$|E
50|$|There is {{a choice}} of {{development}} boards, both from the EtherCAT Slave Controller suppliers and from third party vendors. There are also open-source projects for EtherCAT <b>slave</b> <b>device</b> development boards, such as SOES and ArduCAT.|$|E
50|$|After {{the master}} has {{transmitted}} the device address and selected an individual slave, the master must transmit the 8-bit {{value for the}} specific command to be executed by the slave. The available commands {{are determined by the}} designer of each <b>slave</b> <b>device,</b> and will vary from slave to slave, e.g. a serial EEPROM will likely have different commands than a temperature sensor. The <b>slave</b> <b>device</b> designer will also determine if and how many data bytes are necessary for the execution of a command. If any data bytes are necessary, they are transmitted by either the master or the slave (dictated by the command type) after the command byte.|$|E
50|$|Only one {{master device}} is allowed per bus, but {{multiple}} <b>slave</b> <b>devices</b> can {{be connected to}} a single UNI/O bus. Individual slaves are selected through an 8-bit to 12-bit address included in the command overhead.|$|R
25|$|The MOSI and MISO {{signals are}} usually stable (at their {{reception}} points) for the half cycle {{until the next}} clock transition. SPI master and <b>slave</b> <b>devices</b> may well sample data {{at different points in}} that half cycle.|$|R
25|$|SPI devices {{communicate}} in full duplex mode using a master-slave architecture {{with a single}} master. The master device originates the frame for reading and writing. Multiple <b>slave</b> <b>devices</b> are supported through selection with individual slave select (SS) lines.|$|R
50|$|I²C {{specifies}} that a <b>slave</b> <b>device,</b> {{although it}} may acknowledge its own address, may decide, some time later in the transfer, that it cannot receive any more data bytes. I²C specifies that the device may indicate this by generating the not acknowledge on the first byte to follow.|$|E
50|$|UNI/O {{allows for}} both 8-bit and 12-bit device addresses. 8-bit {{addressing}} offers better data throughput due to less command overhead, while 12-bit addressing allows for more slaves {{with a common}} family code to exist on a single bus. When a <b>slave</b> <b>device</b> is designed, the designer must choose which addressing scheme to use.|$|E
50|$|The {{physical}} connection is realized as a serial bus with a fixed data rate of 9600 baud. There are just 2 communications signals plus the essential common-ground reference signal. The TX signal goes from the MASTER to every <b>SLAVE</b> <b>device.</b> The RX signal goes from every <b>SLAVE</b> <b>device</b> to the MASTER device. Both signals have pull-ups. The bus is driven at every transmitter by an open collector transistor driver, and isolated at each receiver with an opto-isolator - though cable harnesses carrying the communication signals may also carry 24-volt power and ground signals to devices, meaning the devices {{may not be}} isolated from {{each other as they}} share the same power bus. Some devices, however, may have alternate power supplies, especially devices with motors and high current needs such as vintage bill acceptors or currency detector devices.|$|E
25|$|Most <b>slave</b> <b>devices</b> have tri-state outputs {{so their}} MISO signal becomes high {{impedance}} (logically disconnected) when {{the device is}} not selected. Devices without tri-state outputs cannot share SPI bus segments with other devices; only one such slave could talk to the master.|$|R
5000|$|Fast mode {{is highly}} {{compatible}} and simply tightens {{several of the}} timing parameters to achieve 400 kbit/s speed. Fast mode is widely supported by I²C <b>slave</b> <b>devices,</b> so a master may use {{it as long as}} it knows that the bus capacitance and pull-up strength allow it.|$|R
40|$|Bluetooth ad hoc {{networks}} are constrained by a master/slave configuration, {{in which one}} device is the master and controls the communication with the <b>slave</b> <b>devices.</b> The master and up to seven active <b>slave</b> <b>devices</b> can form a small Bluetooth network called a piconet. In order to build larger network topologies, called scatternets, the piconets must be interconnected. Scatternets are formed by allowing certain piconet members to participate in several piconets by periodically switching between them. Due {{to the fact that}} there is no scatternet formation procedure in the Bluetooth specification, numerous different approaches have been proposed. We discuss criteria for different types of scatternets and establish general models of scatternet topologies. Then we review the state-of-the-art approaches with respect to Bluetooth scatternet formation and compare and contrast them...|$|R
