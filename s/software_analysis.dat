997|10000|Public
25|$|For an {{overview}} of the current approach for <b>software</b> <b>analysis</b> of 2DE gel images see or.|$|E
25|$|Coverity was a {{provider}} of software development tools. Coverity's tools operated via Static and Dynamic <b>software</b> <b>analysis,</b> and were capable of finding defects related to security, stability, and testing. In February 2014, Coverity announced an agreement to be acquired by Synopsys, for $350 million net of cash on hand.|$|E
2500|$|Informatics, a major {{unique in}} the UC system. [...] The higher level of social {{abstraction}} prepares students in such fields as <b>software</b> <b>analysis,</b> management, design, and interfaces.|$|E
50|$|Fundamental <b>analysis</b> <b>software</b> automates <b>analysis</b> that {{supports}} fundamental analysts in their {{review of a}} company's financial statements and valuation.|$|R
50|$|Reference - Fundamental <b>Analysis</b> <b>Software</b> {{for more}} {{information}} on fundamental <b>analysis</b> <b>software.</b>|$|R
5000|$|... 1994 - JMAG-Works was {{developed}} as integrated electromagnetic <b>analysis</b> <b>software</b> with thermal <b>analysis</b> solutions.|$|R
5000|$|The OMG (Object Management Group) {{published}} a study regarding {{the types of}} <b>software</b> <b>analysis</b> required for software quality measurement and assessment. This document on [...] "How to Deliver Resilient, Secure, Efficient, and Easily Changed IT Systems in Line with CISQ Recommendations" [...] describes three levels of <b>software</b> <b>analysis.</b>|$|E
50|$|A further {{level of}} <b>software</b> <b>analysis</b> can be defined.|$|E
5000|$|Viktor Vafeiadis, {{head of the}} <b>Software</b> <b>Analysis</b> and Verification Group.|$|E
40|$|Modifiability is an {{important}} quality for software systems, because {{a large part of}} the costs associated with these systems is spent on modifications. The effort, and therefore cost, that is required for these modifications is largely determined by a system's <b>software</b> architecture. <b>Analysis</b> of <b>software</b> architectures is therefore {{an important}} technique to achieve modifiability and reduce maintenance costs. However, few techniques for <b>software</b> architecture <b>analysis</b> currently exist. Based on our experiences with <b>software</b> architecture <b>analysis</b> of modifiability, we have developed ALMA, an architecture-level modifiability analysis method consisting of five steps. In this paper we report on our experiences with ALMA. We illustrate our experiences with examples from two case studies of <b>software</b> architecture <b>analysis</b> of modifiability. These case studies concern a system for mobile positioning at Ericsson Software Technology AB and a system for freight handling at DFDS Fraktarna. Our experiences are related to each step of the analysis process. In addition, we made some observations on <b>software</b> architecture <b>analysis</b> of modifiability in general...|$|R
50|$|<b>Software</b> {{architecture}} <b>analysis</b> method (SAAM) is {{a method}} used in software architecture to evaluate a system architecture. It was the first documented <b>software</b> architecture <b>analysis</b> method, and {{was developed in the}} mid 1990s to analyze a system for modifiability, but it is useful for testing any non-functional aspect.|$|R
50|$|EuroSTAR {{stands for}} European <b>Software</b> Testing <b>Analysis</b> & Review.|$|R
5000|$|Linear code {{sequence}} and jump (LCSAJ), {{in the broad}} sense, is a <b>software</b> <b>analysis</b> method used to identify structural units in code under test. Its primary use is with dynamic <b>software</b> <b>analysis</b> to help answer the question [...] "How much testing is enough?". [...] Dynamic <b>software</b> <b>analysis</b> is {{used to measure the}} quality and efficacy of software test data, where the quantification is performed in terms of structural units of the code under test. When used to quantify the structural units exercised by a given set of test data, dynamic analysis is also referred to as coverage analysis.|$|E
5000|$|Goanna by Red Lizard Software - A <b>software</b> <b>analysis</b> {{tool for}} C/C++.|$|E
50|$|HP - HP {{is a major}} {{provider}} of big data <b>software</b> <b>analysis</b> tools.|$|E
5000|$|<b>Software</b> Requirements: <b>Analysis</b> and Specification (Prentice Hall 1990), [...]|$|R
5000|$|Verint's {{products}} include speech <b>analysis</b> <b>software</b> (used {{to analyze}} call center recordings) andIP surveillance cameras and [...] "smart" [...] video surveillance <b>analysis</b> <b>software.</b>|$|R
5000|$|Advanced Diploma in Computer <b>Software</b> System <b>Analysis</b> and Applications (ADCSSAA) ...|$|R
5000|$|Andy Johnson-Laird (pioneer in {{computer}} forensics, software reverse engineering and forensic <b>software</b> <b>analysis)</b> ...|$|E
50|$|For an {{overview}} of the current approach for <b>software</b> <b>analysis</b> of 2DE gel images see or.|$|E
5000|$|TECHx, {{a team of}} <b>software</b> <b>analysis</b> {{experts from}} GrammaTech, Inc. and the University of Virginia (funded track).|$|E
5000|$|<b>Software</b> {{architecture}} <b>analysis</b> method, {{precursor to}} architecture tradeoff analysis method ...|$|R
5000|$|Problem frames {{approach}} is another approach to <b>software</b> requirements <b>analysis.</b>|$|R
5000|$|... #Subtitle level 2: Scientific <b>software</b> for <b>analysis</b> of hydroacoustic data ...|$|R
50|$|By {{applying}} different <b>software</b> <b>analysis</b> packages, {{the same}} base technologies {{can be brought}} to bear to several applications.|$|E
50|$|Lori L. Pollock is an American Computer Scientist {{noted for}} her {{research}} on <b>software</b> <b>analysis</b> and testing, green software engineering and compiler optimization.|$|E
50|$|TXL is most {{commonly}} used in <b>software</b> <b>analysis</b> and reengineering tasks such as design recovery, and in rapid prototyping of new programming languages and dialects.|$|E
40|$|This thesis {{introduces}} a postmortem <b>software</b> failure <b>analysis</b> system named MobileCrash. The {{system is to}} catch Symbian OS panics and exceptions, to collect related information and to transmit crash logs to a central database for analysis. The basics of <b>software</b> failure <b>analysis</b> and similar systems on other operation systems are presented in the thesis. After revealing the system design of the MobileCrash, the system event log as a supplementary of the MobileCrash is introduced. The thesis also introduces the core of crash analysis together with real case studies in Symbian OS. Software developers can benefit from this thesis by learning about <b>software</b> failure <b>analysis</b> on Symbian OS. Project managers can get basic information on <b>software</b> failure <b>analysis</b> from this thesis to better control projects based on Symbian OS. Key words: Symbian OS, crash analysis, MobileCrash, system event lo...|$|R
5000|$|<b>Software</b> {{performance}} <b>analysis</b> - {{techniques to}} monitor code performance, including instrumentation ...|$|R
40|$|The most used {{techniques}} {{to ensure safety}} and reliability of the systems are applied together as a whole, and in most cases, the software components are usually overlooked or to little analyzed. The present paper describes the applicability of fault trees <b>analysis</b> <b>software</b> system, <b>analysis</b> defined as <b>Software</b> Fault Tree <b>Analysis</b> (SFTA), fault trees are evaluated using binary decision diagrams, all of these being integrated and used with help from Java library reliability...|$|R
50|$|The main {{difference}} between <b>software</b> <b>analysis</b> and design {{is that the}} output of a <b>software</b> <b>analysis</b> consists of smaller problems to solve. Additionally, the analysis should not be designed very differently across different team members or groups. In contrast, the design focuses on capabilities, and thus multiple designs for the same problem can and will exist. Depending on the environment, the design often varies, whether it is created from reliable frameworks or implemented with suitable design patterns. Design examples include operation systems, webpages, mobile devices or even the new cloud computing paradigm.|$|E
50|$|Liverpool Data Research Associates (LDRA) is a {{provider}} of software analysis,a test and requirements traceability tools for the Public and Private sectors and a pioneer in static and dynamic <b>software</b> <b>analysis.</b>|$|E
50|$|He {{is known}} for his work in the fields of {{software}} evolution and adaptive systems. He was the lead architect of Rigi, an end-user programmable environment for <b>software</b> <b>analysis,</b> exploration, and visualization.|$|E
5000|$|LimitState:GEO (2008-) General purpose {{geotechnical}} <b>software</b> limit <b>analysis</b> application. Uses discontinuity layout optimization.|$|R
40|$|Article covers basic {{concepts}} of {{free and open}} software and its implementation at small health care facilities. It summarizes costs of possession and maintenance free/open and proprietary <b>software.</b> Functional <b>analysis</b> is conducted on example of office <b>software.</b> Further <b>analysis</b> covers barriers of open software implementation based on requirements of small health care facilities. Finally, according to stated requirements suggestion of ways to overcome these barriers are made...|$|R
40|$|Performing an {{independent}} system andsoftware safety <b>analysis</b> on embedded <b>software</b> saves overall life-cycle cost and schedule resources, {{and provides a}} better overall product. The primary objective of safety analysis is to find and remove embedded safety related hazards in the hardware and software systems before a mishap occurs. Finding these embedded hazards early in the development cycle reduces cost, safeguards schedules, and improves prod-uct quality [see Figure 1]. The reduction in added costs and schedule slips due to problems found late in the development cycle and the improvement in product quality justify the cost of performing {{an independent}} <b>software</b> safety <b>analysis.</b> Additionally, preventing a single cata-strophic mishap by removing an embed-ded hazard could more than pay for the independent safety analysis effort many times over, depending upon the system. This article identifies key terms associ-ated with system and software safety, pro-vides a process for performing <b>software</b> safety <b>analysis,</b> specifies the required envi-ronment for efficiently and effectively per-forming safety analysis, provides cost and schedule savings rationale, and identifies issues that delay or prevent effective safe-ty analyses. Although this article empha-sizes performing safety analysis on soft-ware, a thorough <b>software</b> safety <b>analysis</b> includes a system safety analysis {{as many of the}} embedded hazards occur at inter-faces between system components. When developing software systems, a tool enables a developer to build better sys-tems quicker. The systems are more effec-tive, more efficient, and safer. Involving an independent <b>software</b> safety <b>analysis</b> con-tributes to these attributes and becomes a tool that should be used in today’s complex system development efforts. <b>Software</b> Safety <b>Analysis</b> Process An effective process for performing a <b>software</b> safety <b>analysis</b> includes four pri-mary steps (see Figure 2) ...|$|R
