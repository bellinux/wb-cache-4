6|5883|Public
50|$|Kishore {{was born}} in Kamareddy, Nizamabad, Telangana, India. Schooling in Jeevadan convent high school. Before his acting debut, he was working in USA as a <b>Software</b> <b>Quality</b> <b>Engineer.</b> In 2008 he gave up his career to fulfill his passion for movies and moved to settle down in India.|$|E
5000|$|For {{software}} testing the certifications can be grouped into exam-based and education-based. Exam-based certifications: For this {{there is the}} need to pass an exam, which can also be learned by self-study: e.g. for International Software Testing Qualifications Board Certified Tester by the International Software Testing Qualifications Board [...] or Certified Software Tester by QAI or Certified <b>Software</b> <b>Quality</b> <b>Engineer</b> by American Society for Quality. Education-based certifications are the instructor-led sessions, where each course has to be passed, e.g. Certified Software Test Professional or Certified Software Test Professional by International Institute for Software Testing.|$|E
40|$|This paper {{presents}} {{the design of}} a quality engineering process applicable in the program design phase of a generic software life cycle. The presented process model aims to guide the <b>software</b> <b>quality</b> <b>engineer</b> {{from the beginning of the}} phase to its completion defining the collaboration that should take place between the program designer and the <b>software</b> <b>quality</b> <b>engineer.</b> The paper also discusses th...|$|E
5000|$|Roles in <b>Software</b> <b>Quality</b> Assurance are {{designated}} as <b>Software</b> <b>Quality</b> Assurance <b>Engineer,</b> <b>Software</b> <b>Quality</b> Analyst, ...|$|R
40|$|Very {{little has}} been {{published}} {{on the subject of}} <b>software</b> <b>quality</b> certification training programs. This paper describes a case study on training software professionals to become certified <b>software</b> <b>quality</b> <b>engineers</b> (CSQE). We describe the design of the training course and practice exams, how we conducted the coaching of the students, and summarize the results obtained and the lessons learned during the three years we have offered the course. The experiences outlined in this paper might improve the design and implementation of intensive professional training courses intended at certifying <b>software</b> <b>quality</b> professionals. 1...|$|R
40|$|Previously, several {{research}} tasks {{have been}} conducted, some observations were obtained, and several possible suggestions have been contemplated involving <b>software</b> <b>quality</b> assurance engineering at NASA Johnson. These research tasks are briefly described. Also, {{a brief discussion}} is given {{on the role of}} <b>software</b> <b>quality</b> assurance in <b>software</b> engineering along with some observations and suggestions. A brief discussion on a training program for <b>software</b> <b>quality</b> assurance <b>engineers</b> is provided. A list of assurance factors as well as quality factors are also included. Finally, a process model which can be used for searching and collecting <b>software</b> <b>quality</b> assurance tools is presented...|$|R
40|$|The article {{presents}} {{an overview of}} the subject of Software Quality Engineering (SQE) education. Four different perspectives are taken into account: why to teach SQE, how the subject is being taught today, what support teachers have to teach SQE and how could the <b>Software</b> <b>Quality</b> <b>engineer</b> be educated. The latest trends in methods and tools pertinent to the domain are also presented. 1...|$|E
40|$|Theresa Hunt, ASQ CSQE is a lead consultant/trainer for the Westfall Team. Her {{specialties}} include {{software quality}} engineering, process definition and improvement, and testing. Prior to joining the Westfall Team Theresa was principal <b>software</b> <b>quality</b> <b>engineer</b> at ECC International Corp. based in Orlando, FL. The company provides {{a wide range}} of products and services used by all branches of the U. S. Department of Defense and by armed forces in 25 countries. Hunt serves as chair of the ASQ Software Division Programs Committee, is on the ASQ CSQE Exam Development Committee, and is currently continuing studies at Embry-Riddle Aeronautical University i...|$|E
40|$|Dealing with an {{enormous}} amount of data is characteristic of validating complex and safety-critical software systems. ATP, a high-level programming language, supports the validation process. In a patient monitor test environment it has shown its usefulness and power by enabling a dramatic increase in productivity. Its universal character allows it to migrate validation scenarios to different products based on other architectural paradigms. by Andreas Pirrung This article concentrates on the specific problem of transforming a test design into concrete automatic test procedures. For a systematic overview and context the reader is referred to Article 12. As described in that article, the test design identifies and documents the test set for a given product. It is derived from external and internal specifications, <b>software</b> <b>quality</b> <b>engineer</b> expertise, and risk and hazard analysis results. A test design is normally informal and describes test cases and test data on a high, abstract level, independent of the test environment. On the other hand, an automatic test procedure has to deal with all the details of the test environment and reflects the abstraction capabilities of the existing tools. In our software quality engineering department the automatic test environment is based upon two major tools: AutoTest 1 and AutoCheck. The first is a test execution tool and the latter is responsible for test evaluation (see Article 14). AutoTest is very close to the devices it controls and requires detailed commands on a low abstraction level. AutoCheck has to cope with the detailed low-level information produced by AutoTest and therefore also requires input on a detailed, low abstraction level (see Fig. 1). The strengths of the low-level interfaces are their flexibility and adaptability to various different test situations...|$|E
40|$|To improve <b>software</b> {{productivity}} and <b>quality,</b> <b>software</b> <b>engineers</b> are increasingly applying data mining algorithms to various software engineering tasks. However, mining SE data poses several challenges. The authors present various algorithms to effectively mine sequences, graphs, and text from such data...|$|R
40|$|Prediction of fault prone {{software}} components {{is one of}} the most researched problems in software engineering. Many statistical techniques have been proposed but there is no consensus on the methodology to select the “best model” for the specific project. In this paper, we introduce and discuss the merits of cost curve analysis of fault prediction models. Cost curves allow <b>software</b> <b>quality</b> <b>engineers</b> to introduce project-specific cost of module misclassification into model evaluation. Classifying a software module as fault-prone implies the application of some verification activities, thus adding to the development cost. Misclassifying a module as fault free carries the risk of system failure, also associated with cost implications. Through the analysis of sixteen projects from public repositories, we observe that <b>software</b> <b>quality</b> does not necessarily benefit from the prediction of fault prone components. The inclusion of misclassification cost in model evaluation may indicate that even the “best ” models achieve performance no better than trivial classification. Our results support a recommendation favoring the use of cost curves in practice with the hope they will become a standard tool for <b>software</b> <b>quality</b> model performance evaluation. ...|$|R
40|$|The <b>Software</b> <b>Quality</b> Assurance <b>engineer</b> {{position}} {{was created in}} fiscal year 2011 to better maintain and {{improve the quality of}} the SAPHIRE 8 development program. This year's <b>Software</b> <b>Quality</b> Assurance tasks concentrated on developing the framework of the SQA program. This report reviews the accomplishments and recommendations for each of the subtasks set forth for JCN V 6059 : (1) Reviews, Tests, and Code Walkthroughs; (2) Data Dictionary; (3) Metrics; (4) Requirements Traceability Matrix; (5) Provide Oversight on SAPHIRE QA Activities; and (6) Support NRC Presentations and Meetings...|$|R
40|$|Systems <b>software</b> <b>quality,</b> {{and system}} {{security}} in particular, is often compromised by phishing attacks. The latter were {{relatively easy to}} detect through phishing content filters, in the past. However, it has been increasingly difficult to stop more recent and sophisticated social phishing attacks. To protect the citizens from new types of phishing attacks, <b>software</b> <b>quality</b> <b>engineers</b> need to provide equally sophisticating preventive technology that models people’s reactions. The authors considered the behaviour {{of people on the}} Internet from a socio-cognitive perspective and deduced who could be more prone to be spoofed by social phishing techniques. The authors herein propose a computational and interdisciplinary metamodelling methodology, which can assist in capturing and understanding people’s interactive behaviour when they are online. Online behaviour can reveal Internet users’ knowledge, information, and beliefs in a given social context; these could also constitute significant factors for trust in social phishing circumstances which, in turn, can provide valuable insights and decision making meta-knowledge for recognition of potential victims of phishers. The proposed modelling approach is illustrated and explained using real-life phishing cases. This meta-model can i) help social computing and phishing researchers to understand users’ trust decisions from a socio-cognitive perspective, and ii) open ways to integrate artificial intelligence design techniques within <b>software</b> <b>quality</b> management practices in order to protect citizens from being spoofed by social phishing attacks. Thus, this <b>software</b> design <b>quality</b> approach will increase system security as a proactive maintenance strategy...|$|R
40|$|The {{paper is}} devoted to the {{training}} program for <b>Software</b> <b>Quality</b> Assurance (SQA) <b>engineer</b> created in Motorola, St. -Petersburg software center to prepare SQA engineers to fulfill their responsibilities. The paper will provide the stages how the training program was formed. We will describe approaches we used for the mentoring program and the effectiveness of the training program...|$|R
5000|$|Will Creedle (born April 16, 1973 in Rochester, Minnesota) is an American <b>Software</b> <b>Quality</b> Assurance <b>Engineer</b> and {{advocate}} for extending the Americans with Disabilities Act of 1990 to all title III websites. [...] He {{is known for}} suggesting that conformance is crucial to good design because it brings context to content and accurately re-prioritizes the visual to reflect the content {{as opposed to the}} site serving the visuals. He has advocated that the time is now for companies to commit to web compliance, ahead of the DOJ regulations coming in 2018, as the DOJ has provided what their compliance standards will be for TITLE III companies: WCAG 2.0 Level AA of the Web Content Accessibility Guidelines.|$|R
40|$|To improve <b>software</b> {{productivity}} and <b>quality,</b> <b>software</b> <b>engineers</b> are increasingly applying data mining algorithms to various software engineering tasks. However, mining SE data poses several challenges. The authors present various algorithms to effectively mine sequences, graphs, and text from such data. Because software plays {{a critical role}} in businesses, governments, and societies, improving <b>software</b> {{productivity and}} <b>quality</b> is an important goal of software engineering. Mining SE data has recently emerged as a promising means to meet this goal due to two main trends: the increasing abundance of such data and its demonstrate...|$|R
40|$|Evaluation of Clinical Information Systems (CIS) {{is usually}} {{performed}} by questionnaires administered to users {{to assess their}} level of satisfaction and usability of the system. In the modern enterprise system there is a layer of configuration {{of the system that}} requires a great deal of effort to engineer the customer’s solution, which has not received scrutiny from researchers. Insight into the critical weaknesses and the consequences of the “configuration programming ” of the Cerner Millenium software is provided through discussions with <b>software</b> <b>quality</b> and performance <b>engineers</b> whose job is to remedy the inefficiencies and concomitant insecurities created therein. The difficulties in maintaining Cerner sites for their customers are captured in the issues they have identified as weaknesses in the processing methods for creating a working CIS system. 1...|$|R
40|$|The {{purpose of}} this project was to develop, using Object Oriented Development (OOD), a {{software}} tool identified as the Ada Module Description Tool (AMDT). The AMDT provides an automated {{way to get a}} module level description of Ada code. A module level description will identify packages, subprograms, objects and type declarations and relationships. This software tool also has the ability to compare Ada source code with a module level description. The comparison shall identify any object, type, subprogram, or package declared in the module level description that does not match the provided source code. The AMDT is made up of two executable programs that run on a VAX/VMS system. The Module Description Generator (MDG) generates a module level description from a set of Ada source code files. The Module Description Checker (MDC) compares a module level description to the Ada source code. Ada is the required High Order Language for the Department Of Defense. The development methodology used was basically Object Oriented Development as described in the book Software Engineerinq With-AAA by Grady Booch and the Software Standards and Procedure Manual for Object Oriented Development (SSPM-M 02. 04 Draft). Booch's book is a description of Object Oriented Development methodology, while the SSPM is a set of instructions and standard format to implement the methodology. The total design of the AMDT is documented in five segments. The SSPM defines a segment as the code and documentation resulting from a pass through the OOD process. From a <b>Software</b> <b>Quality</b> <b>Engineer's</b> point of view the AMDT would save time in not having to check module descriptions by hand. From the Software Engineer's point of view, when the code is updated a new module description can be generated easily to keep the documentation current with the code. The AMDT tool as written does not find object declarations in the code. Fortunately the effect is minor because the module descriptions needs to be edited anyway. The module description generated by the MDG may have too much information in it. The designer wants only the types, objects, and operations that aid in the understandability of the design and how it is implemented. The only checks the MDC makes are to see if an identifier on the module description is in the code. It does not check {{to see if there are}} extra items in the code that should be required in the module description. Department of Computer ScienceThesis (M. S. ...|$|R
40|$|The {{basic idea}} {{underlying}} {{this paper is}} that the conventional {{understanding of the role}} of a <b>Software</b> <b>Quality</b> Assurance (SQA) <b>engineer</b> is unduly limited. This is because few have asked who the customers of a SQA engineer are. Once you do this, you can better define what tasks a SQA engineer should perform, as well as identify the knowledge and skills that such a person should have. The consequence of doing this is that a SQA engineer can provide greater value to his or her customers. It is the position of this paper that a SQA engineer providing significant value to his or her customers must not only assume the role of an auditor, but also that of a software and systems engineer. This is because software engineers and their managers particularly value contributions that directly impact products and their development. These ideas are summarized as lessons learned, based on my experience at Jet Propulsion Laboratory (JPL) ...|$|R
40|$|The <b>Software</b> <b>Quality</b> Forum was {{established}} by the <b>Software</b> <b>Quality</b> Assurance (SQA) Subcommittee, {{which serves as a}} technical advisory group on <b>software</b> engineering and <b>quality</b> initiatives and issues for DOE`s quality managers. The forum serves as an opportunity for all those involved in implementing SQA programs to meet and share ideas and concerns. Participation from managers, <b>quality</b> <b>engineers,</b> and <b>software</b> professionals provides an ideal environment for identifying and discussing issues and concerns. The interaction provided by the forum contributes to the realization of a shared goal [...] high <b>quality</b> <b>software</b> product. Topics include: testing, software measurement, software surety, software reliability, SQA practices, assessments, software process improvement, certification and licensing of software professionals, CASE tools, software project management, inspections, and management`s role in ensuring SQA. The bulk of this document consists of vugraphs. Selected papers have been indexed separately for inclusion in the Energy Science and Technology Database...|$|R
40|$|This chapter {{introduces}} the generally accepted knowledge on <b>software</b> <b>quality</b> {{that has been}} included in the (SWEBOK) Software Engineering Body of Knowledge (ISOTR 19759 - 05). One chapter of the SWEBOK is dedicated to <b>software</b> <b>quality</b> (Apr 05). It argues that ethics {{play an important role in}} applying the quality models and the notions of cost of <b>quality</b> for <b>software</b> <b>engineers.</b> It also describes the minimal content required in a <b>software</b> <b>quality</b> assurance plan. Finally an overview of what to expect in the upcoming international standards on <b>software</b> <b>quality</b> requirements, which transcend the life cycle processes of all IT processes, is presented...|$|R
40|$|Quality {{computer}} engineering education {{is integral to}} the recruitment, retention, and employment of <b>quality</b> <b>software</b> <b>engineers,</b> as part of enabling a greater uptake of Science, Technology, Engineering and Mathematics (STEM) careers. The introductory programing course DICT 440 uses Build Your Own Blocks (BYOB) and the team creation of a game, Theseus and the Minotaur, to teach introductory programing principles and skills. This paper argues that creativity is essential to innovation. Digital Games are being increasingly used in education and training internationally, as well as specifically in computer education. Aotearoa-New Zealand ITPs need to position themselves positively to leverage the creativity and motivation of software engineering students who are experienced gamers by developing games as part {{of teaching and learning}} software engineering. Computer game development courses can be developed collaboratively in a multi-disciplinary team, using appropriate learning theory, across ITPs in second and third year degree courses, in conjunction with regional game companies, alongside core business applications...|$|R
40|$|Abstract: <b>Software</b> <b>quality</b> models play a {{significant}} role in <b>software</b> <b>quality</b> assurance. Based on our previous work on graphic modelling of <b>software</b> <b>quality,</b> this paper extends the quality modelling language to enhance its expressiveness and to facilitate automated analysis of <b>software</b> <b>quality</b> as designed. A collection of algorithms that are implemented in an automated tool for the analysis of <b>software</b> <b>quality</b> are presented and illustrated by examples...|$|R
40|$|The <b>software</b> <b>quality</b> {{maintenance}} {{is becoming a}} crucial task in the <b>software</b> development. The <b>Quality</b> control process includes various activities which are carried out during development to ensure the effectiveness of software that is produced {{at the end of}} development cycle. It is necessary to measure the <b>software</b> <b>Quality</b> for reasons like errors, failures, risks, high cost. This paper provides a brief introduction about <b>software</b> <b>quality</b> management, SQA, <b>software</b> <b>quality</b> control plan. Fig. below shows a software product, which is to fulfill requirements in having appropriate characteristics. The existence of relationships between requirements and characteristics makes statements about the quality of a product possible. Keywords- <b>Quality</b> control plan, <b>software</b> <b>quality</b> assurance, <b>software</b> <b>quality</b> control, <b>Software</b> <b>quality</b> management I...|$|R
40|$|<b>Software</b> <b>quality</b> {{management}} (SQM) is {{the collection}} of all processes that ensure that software products, services, and life cycle process implementations meet organizational <b>software</b> <b>quality</b> objectives and achieve stakeholder satisfaction. SQM comprises three basic subcategories: <b>software</b> <b>quality</b> planning, <b>software</b> <b>quality</b> assurance (SQA), and <b>software</b> <b>quality</b> control and <b>software</b> process improvement. This chapter provides a general overview of the SQA domain and discuss the related concept. A conceptual model for <b>software</b> <b>quality</b> framework is provided together with the current approaches for SQA. The chapter concludes {{with some of the}} identified challenges and future challenges regarding SQA...|$|R
40|$|Abstract—Based {{upon the}} {{intention}} summary of <b>software</b> <b>quality</b> management, this paper give plain description of PDCA circulation, <b>software</b> <b>quality</b> scheme, quality control, quality assurance and quality improvement. Meanwhile, one quality evaluation is put forward. This {{will benefit the}} <b>software</b> <b>quality</b> management of information system. Keywords- information system; <b>software</b> process; <b>quality</b> management...|$|R
40|$|Abstract. Based {{upon the}} {{intention}} summary of <b>software</b> <b>quality</b> management, this paper gives plain description of PDCA circulation, <b>software</b> <b>quality</b> scheme, quality control, quality assurance, and quality improvement. Meanwhile, one quality evaluation is put forward. This {{will benefit the}} <b>software</b> <b>quality</b> management of information system...|$|R
40|$|The {{authors have}} {{analyzed}} {{the impact of}} the <b>software</b> <b>quality</b> for work of complex hardware-software systems, the <b>software</b> <b>quality</b> standards, the models, methods and tools of <b>software</b> <b>quality</b> evaluation. The analysis provides to discover an important tendency - the need of <b>software</b> <b>quality</b> evaluation and prediction at {{the early stages of the}} life cycle. The authors have proved the subjective dependence and artificial adaptable of used concepts and the lack of mathematical models, theory and methodology in the area of <b>software</b> <b>quality</b> evaluation and assurance...|$|R
40|$|In the {{software}} industry it is indisputably essential {{to control the}} <b>quality</b> of produced <b>software</b> systems in terms of capabilities for easy maintenance, reuse, portability and others {{in order to ensure}} reliability in {{the software}} development. But {{it is also clear that}} it is very difficult to achieve such a control through a ‘manual’ management of quality. There are a number of approaches for <b>software</b> <b>quality</b> assurance based typically on <b>software</b> <b>quality</b> models (e. g. ISO 9126, McCall’s, Boehm’s and Dormey’s models) and <b>software</b> <b>quality</b> metrics (e. g. LOC, McCabe's cyclomatic complexity, Halstead's metric, Object-oriented metrics) for assessment of various quality characteristics. Since the appearance of the <b>software</b> <b>quality</b> assurance as a field in the software engineering, researchers have been looking for ways to automatically assess and manage the <b>quality</b> of the <b>software</b> systems. This paper presents a conceptual design of a comprehensive solution, referring to the automation of the <b>software</b> <b>quality</b> assessment process. The designed software tool allows the definition of <b>software</b> <b>quality</b> models, based on standards, and enable the setting of matching between criteria of a <b>software</b> <b>quality</b> model and appropriate <b>software</b> <b>quality</b> metrics. The automatic definition and application of <b>software</b> <b>quality</b> models and <b>software</b> <b>quality</b> metrics is based on relevant supported by the software tool meta-models proposed in the paper...|$|R
5000|$|DOD-STD-2168 was the DoD's <b>software</b> <b>quality</b> {{assurance}} standard, titled [...] "Defense System <b>Software</b> <b>Quality</b> Program".|$|R
40|$|<b>Software</b> <b>quality</b> is {{specific}} property which tells {{what kind of}} standard software should have. In a <b>software</b> project, <b>quality</b> is the key factor of success and decline of software related organization. Many researches have been done regarding <b>software</b> <b>quality.</b> <b>Software</b> related organization follows standards introduced by Capability Maturity Model Integration (CMMI) to achieve good <b>quality</b> <b>software.</b> <b>Quality</b> {{is divided into three}} main layers which are <b>Software</b> <b>Quality</b> Assurance (SQA), <b>Software</b> <b>Quality</b> Plan (SQP) and <b>Software</b> <b>Quality</b> Control (SQC). So In this study, we are discussing the quality standards and principles of software projects in Pakistan software Industry and how these implemented quality standards are measured and managed. In this study, we will see how many software firms are following the rules of CMMI to create software. How many are reaching international standards and how many firms are measuring the quality of their projects. The results show some of the companies are using <b>software</b> <b>quality</b> assurance techniques in Pakstan...|$|R
40|$|It {{is usually}} {{believed}} that <b>software</b> <b>qualities</b> may influence {{each other and}} that improving one <b>software</b> <b>quality</b> may cause some other qualities to worsen. Since no commonly used set of metrics exist for quantifying the <b>software</b> <b>qualities</b> of interest, {{the perception of the}} influence of one <b>software</b> <b>quality</b> on another is often used in practice when making decisions about software development. We describe the results of an empirical study on the beliefs of software practitioners in the mutual influence of the ISO 9126 <b>software</b> <b>qualities.</b> The study shows that the subjects believed, on average, that a number of influences exist between the ISO 9126 <b>software</b> <b>qualities.</b> However, the practitioners did not believe that trade-offs exist among several of these <b>software</b> <b>qualities.</b> In other words, they believed that improving one quality is often likely to improve other qualities as well...|$|R
40|$|As Data Mining for Secure Software Engineering {{improves}} <b>software</b> {{productivity and}} <b>quality,</b> <b>software</b> <b>engineers</b> are increasingly applying data mining algorithms to various software engineering tasks. However mining software engineering data poses several challenges, requiring various algorithms to effectively mine sequences, graphs and text from such data. Software engineering data includes code bases, execution traces, historical code changes,mailing lists and bug data bases. They contains {{a wealth of}} information about a projects-status, progress and evolution. Using well established data mining techniques, practitioners and researchers can explore the potential of this valuable data in order to better manage their projects and do produce higher-quality software systems that are delivered on time and with in budget. Data mining can be used in gathering and extracting latent security requirements, extracting algorithms and business rules from code, mining legacy applications for requirements and business rules for new projects etc. Mining algorithms for software engineering falls into four main categories: Frequent pattern mining – finding commonly occurring patterns; Pattern matching – finding data instances for given patterns; Clustering – grouping data into clusters and Classification – predicting labels of data based on already labeled data. In this paper, we will discuss the overview of strategies for data mining for secure software engineering, with the implementation of a case study of text mining for source code management tool...|$|R
30|$|The term <b>software</b> <b>quality</b> {{assurance}} {{is generally}} used interchangeably with <b>software</b> <b>quality</b> management, likewise in this work.|$|R
40|$|Abstract <b>Software</b> <b>Quality</b> Assurance is {{a planned}} and {{systematic}} set of activities {{necessary to provide}} adequate confidence that requirements are properly established and products or services confirm to specified standards. Successful software engineering strongly depends on the delivery of high <b>quality</b> <b>software.</b> In the present paper, we compare Capability Maturity Model (CMM) and Extreme Programming (XP) regarding their <b>software</b> <b>quality</b> support in terms of <b>software</b> <b>quality</b> development and <b>software</b> <b>quality</b> assurance and also we presented Software Qualit...|$|R
40|$|<b>Software</b> <b>quality</b> {{evaluation}} {{is an important}} issue in software development. In this work, we investigate the characteristics of <b>software</b> <b>quality</b> and discuss the evaluation attributes of <b>software</b> <b>quality.</b> We then present existing commonly used software evaluation methods. For the limitations of the existing methods, we propose to apply the principle of maximum coordination and subordination to the <b>software</b> <b>quality</b> evaluation. Our method achieves relatively good results in experiment validation...|$|R
