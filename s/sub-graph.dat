487|380|Public
5000|$|Kashtan et al. [...] {{presented}} the first sampling NM discovery algorithm, {{which was based}} on edge sampling throughout the network. This algorithm estimates concentrations of induced sub-graphs and can be utilized for motif discovery in directed or undirected networks. The sampling procedure of the algorithm starts from an arbitrary edge of the network that leads to a <b>sub-graph</b> of size two, and then expands the <b>sub-graph</b> by choosing a random edge that is incident to the current <b>sub-graph.</b> After that, it continues choosing random neighboring edges until a <b>sub-graph</b> of size n is obtained. Finally, the sampled <b>sub-graph</b> is expanded to include all of the edges that exist in the network between these n nodes. When an algorithm uses a sampling approach, taking unbiased samples is the most important issue that the algorithm might address. The sampling procedure, however, does not take samples uniformly and therefore Kashtan et al. proposed a weighting scheme that assigns different weights to the different sub-graphs within network. The underlying principle of weight allocation is exploiting the information of the sampling probability for each <b>sub-graph,</b> i.e. the probable sub-graphs will obtain comparatively less weights in comparison to the improbable sub-graphs; hence, the algorithm must calculate the sampling probability of each <b>sub-graph</b> that has been sampled. This weighting technique assists mfinder to determine <b>sub-graph</b> concentrations impartially.|$|E
50|$|Context: A named, {{unordered set}} of statements. Also {{could be called}} a <b>sub-graph.</b> The named graphs {{literature}} and ontology are relevant to this concept. A context could {{be thought of as}} only the relationship between an RDF triple and a <b>sub-graph</b> (this is how the term context is used in the Notation 3 Design Issues page) in which it is found or the <b>sub-graph</b> itself.|$|E
5000|$|Grochow and Kellis [...] {{proposed}} an exact algorithm for enumerating <b>sub-graph</b> appearances. The algorithm {{is based on}} a motif-centric approach, which means that the frequency of a given sub-graph,called the query graph, is exhaustively determined by searching for all possible mappings from the query graph into the larger network. It is claimed [...] that a motif-centric method in comparison to network-centric methods has some beneficial features. First of all it avoids the increased complexity of <b>sub-graph</b> enumeration. Also, by using mapping instead of enumerating, it enables an improvement in the isomorphism test. To improve the performance of the algorithm, since it is an inefficient exact enumeration algorithm, the authors introduced a fast method which is called symmetry-breaking conditions. During straightforward <b>sub-graph</b> isomorphism tests, a <b>sub-graph</b> may be mapped to the same <b>sub-graph</b> of the query graph multiple times. In the Grochow-Kellis (GK) algorithm symmetry-breaking is used to avoid such multiple mappings. Here we introduce the GK algorithm and the symmetry-breaking condition which eliminates redundant isomorphism tests.|$|E
5000|$|Most {{algorithms}} in {{the field}} of NM discovery are used to find induced <b>sub-graphs</b> of a network. In 2008, Noga Alon et al. [...] introduced an approach for finding non-induced <b>sub-graphs</b> too. Their technique works on undirected networks such as PPI ones. Also, it counts non-induced trees and bounded treewidth <b>sub-graphs.</b> This method is applied for <b>sub-graphs</b> of size up to 10.|$|R
50|$|In 2010, Pedro Ribeiro and Fernando Silva {{proposed}} a novel data structure for storing {{a collection of}} <b>sub-graphs,</b> called a g-trie. This data structure, which is conceptually akin to a prefix tree, stores <b>sub-graphs</b> according to their structures and finds occurrences {{of each of these}} <b>sub-graphs</b> in a larger graph. One of the noticeable aspects of this data structure is that coming to the network motif discovery, the <b>sub-graphs</b> in the main network are needed to be evaluated. So, {{there is no need to}} find the ones in random network which are not in the main network. This can be one of the time-consuming parts in the algorithms in which all <b>sub-graphs</b> in random networks are derived.|$|R
30|$|CC (connected component): {{detecting}} <b>sub-graphs</b> (components) {{connected with}} edges.|$|R
5000|$|The Dependency matrix is the {{weighted}} adjacency matrix, representing the fully connected network. Different algorithms {{can be applied}} to filter the fully connected network to obtain the most meaningful information, such as using a threshold approach, or different pruning algorithms. A widely used method to construct informative <b>sub-graph</b> of a complete network is the Minimum Spanning Tree (MST). Another informative <b>sub-graph,</b> which retains more information (in comparison to the MST) is the Planar Maximally Filtered Graph (PMFG) which is used here. Both methods are based on hierarchical clustering and the resulting sub-graphs include all the N nodes in the network whose edges represent the most relevant association correlations. The MST <b>sub-graph</b> contains edges with no loops while the PMFG <b>sub-graph</b> contains [...] edges.|$|E
5000|$|... a <b>sub-graph</b> with {{no input}} is {{probably}} missing something important; ...|$|E
50|$|Various {{solutions}} {{have been}} proposed for the challenging problem of motif discovery. These algorithms can be classified under various paradigms such as exact counting methods, sampling methods, pattern growth methods and so on. However, motif discovery problem comprises two main steps: first, calculating the number of occurrences of a <b>sub-graph</b> and then, evaluating the <b>sub-graph</b> significance. The recurrence is significant if it is detectably far more than expected. Roughly speaking, the expected number of appearances of a <b>sub-graph</b> can be determined by a Null-model, which is defined by an ensemble of random networks {{with some of the}} same properties as the original network.|$|E
3000|$|In section 4.2 and 4.3 we {{introduced}} how to divide a social network into <b>sub-graphs,</b> and then generalize these <b>sub-graphs</b> to nodes, then finally produce a generalized social network. We also discussed {{what kind of}} information will be shared along with the generalized social network. In this section, given a generalized social network G [...]...|$|R
30|$|Generate {{complete}} <b>sub-graphs</b> for {{the first}} to (j (l −  1))th connected component.|$|R
3000|$|KNN method divides G into K <b>sub-graphs</b> by {{assigning}} each node v to its nearest insensitive node. Let SP [...]...|$|R
50|$|The {{remaining}} <b>sub-graph</b> (g) {{produced by}} the algorithm is not disconnected since the algorithm checks for that in line 7. the result <b>sub-graph</b> cannot contain a cycle since if it does then when moving along the edges we would encounter the max edge in the cycle and we would delete that edge.thus g must be a spanning tree of the main graph G.|$|E
5000|$|Where [...] {{indicates}} {{number of}} randomized networks, [...] is defined over an ensemble of randomized networks and the Kronecker delta function [...] is one if the condition [...] holds. The concentration [...] {{of a particular}} n-size <b>sub-graph</b> [...] in network [...] refers to {{the ratio of the}} <b>sub-graph</b> appearance in the network to the total n-size non-isomorphic sub-graphs’ frequencies, which is formulated by ...|$|E
50|$|To compute {{generalization}} of two parse thickets, {{one needs to}} find their maximum common <b>sub-graph</b> (sub-thicket).|$|E
5000|$|Non-trivially 3-connected {{those that}} can be split by 3 edge cuts into <b>sub-graphs</b> {{with at least two}} {{vertices}} remaining in each part ...|$|R
30|$|The Python {{software}} package OSMnx extracts and converts OSM network {{data of the}} desired location into a directed transport graph (which is a graph object of the Python networkX package) and performs some topological corrections and node clustering simplification. The links of the graph retain the tag information of the ways. Clearly, {{it is possible to}} generate <b>sub-graphs</b> for each transport infrastructure (ordinary roads, bikeway and rail). OSMnx does provide options to generate and analyze each of the <b>sub-graphs.</b>|$|R
40|$|In a {{paper of}} Harary and Plantholt, they {{concluded}} {{by noting that}} they knew of no generalization of the leaf edge exchange (LEE) transition se-quence result on spanning trees to other natural families of spanning <b>sub-graphs.</b> Now, we give two approaches for such a generalization. We define two kinds of LEE-graphs over the set of all connected spanning k-edge <b>sub-graphs</b> of a connected graph G, and show {{that both of them}} are connected for a 2 -connected graph G. ...|$|R
5000|$|Let [...] and [...] be two graphs. Graph [...] is a <b>sub-graph</b> of graph [...] (written as [...] ) if [...] and [...] If [...] and [...] {{contains}} {{all of the}} edges [...] with , then [...] is an induced <b>sub-graph</b> of [...] We call [...] and [...] isomorphic (written as [...] ), if there exists a bijection (one-to-one) [...] with [...] for all [...] The mapping [...] is called an isomorphism between [...] and [...]|$|E
5000|$|In {{expanded}} to include sharp contrast to exhaustive search, the computational time of the algorithm surprisingly is asymptotically independent of the network size. An analysis of the computational time of the algorithm has shown that it takes [...] for each sample of a <b>sub-graph</b> of size [...] from the network. On the other hand, there is no analysis in [...] on the classification time of sampled sub-graphs that requires solving the graph isomorphism problem for each <b>sub-graph</b> sample. Additionally, an extra computational effort is imposed on the algorithm by the <b>sub-graph</b> weight calculation. But it is unavoidable {{to say that the}} algorithm may sample the same <b>sub-graph</b> multiple times - spending time without gathering any information. In conclusion, by taking the advantages of sampling, the algorithm performs more efficiently than an exhaustive search algorithm; however, it only determines sub-graphs concentrations approximately. This algorithm can find motifs up to size 6 because of its main implementation, and as result it gives the most significant motif, not all the others too. Also, it is necessary to mention that this tool has no option of visual presentation. The sampling algorithm is shown briefly: ...|$|E
5000|$|... #Caption: Different {{occurrences of}} a <b>sub-graph</b> in a graph. (M1 - M4) are {{different}} occurrences of <b>sub-graph</b> (b) in graph (a). For frequency concept , the set M1, M2, M3, M4 represent all matches, so [...] For , {{one of the}} two set M1, M4 or M2, M3 are possible matches, [...] Finally, for frequency concept , merely one of the matches (M1 to M4) is allowed, therefore [...] The frequency of these three frequency concepts decrease as the usage of network elements are restricted.|$|E
40|$|The {{maximum weight}} {{independent}} set problem (MWISP) {{is one of}} the most well-known and well-studied problems in combinatorial optimization. This paper presents a novel approach to solve MWISP exactly by decomposing the original graph into vertex-induced <b>sub-graphs.</b> The approach solves MWISP for the original graph by solving MWISP on the <b>sub-graphs</b> in order to generate columns for a branch-and-price framework. The authors investigate different implementation techniques that can be associated with the approach and offer computational results to identify the strengths and weaknesses of each implementation technique...|$|R
40|$|In {{this paper}} we {{investigate}} a new framework for graph partitioning using decision trees {{to search for}} <b>sub-graphs</b> within a graph adjacency matrix. Graph partitioning by a decision tree seeks to optimize a specified graph partitioning index such as ratio cut by recursively applying decision rules found within nodes of the graph. Key advantages of tree models for graph partitioning are they provide a predictive framework for {{evaluating the quality of}} the solution, determining the number of <b>sub-graphs</b> and assessing overall variable importance. We evaluate the performance of tree based graph partitioning on a benchmark dataset for multiclass classification of tumor diagnosis based on gene expression. Three graph cut indices will be compared, ratio cut, normalized cut and network modularity and assessed in terms of their classification accuracy, power to estimate the optimal number of <b>sub-graphs</b> and ability to extract known important variables within the dataset...|$|R
50|$|Network motifs are <b>sub-graphs</b> that repeat {{themselves}} in a specific network or even among various networks. Each of these <b>sub-graphs,</b> defined by a particular pattern of interactions between vertices, may reflect a framework in which particular functions are achieved efficiently. Indeed, motifs are of notable importance largely because they may reflect functional properties. They have recently gathered much attention as a useful concept to uncover structural design principles of complex networks. Although network motifs may provide a deep insight into the network’s functional abilities, their detection is computationally challenging.|$|R
5000|$|... where [...] and [...] {{stand for}} mean and {{standard}} deviation frequency in set , respectively. The larger the , the more significant is the <b>sub-graph</b> [...] as a motif. Alternatively, another measurement in statistical hypothesis testing that can be considered in motif detection is the P-Value, given as the probability of [...] (as its null-hypothesis), where [...] indicates the frequency of G' in a randomized network. A <b>sub-graph</b> with P-value less than a threshold (commonly 0.01 or 0.05) will be treated as a significant pattern. The P-value is defined as ...|$|E
5000|$|When [...] {{and there}} exists an {{isomorphism}} between the <b>sub-graph</b> [...] and a graph , this mapping represents {{an appearance of}} [...] in [...] The number of appearances of graph [...] in [...] is called the frequency [...] of [...] in [...] A graph is called recurrent (or frequent) in , when its frequency [...] is above a predefined threshold or cut-off value. We used terms pattern and frequent <b>sub-graph</b> in this review interchangeably. There is an ensemble [...] of random graphs corresponding to the null-model associated to [...] We should choose [...] random graphs uniformly from [...] and calculate the frequency for a particular frequent <b>sub-graph</b> [...] in [...] If the frequency of [...] in [...] is higher than its arithmetic mean frequency in [...] random graphs , where , we call this recurrent pattern significant and hence treat [...] as a network motif for [...] For a small graph , the network [...] {{and a set of}} randomized networks , where , the Z-Score that has been defined by the following formula: ...|$|E
5000|$|NeMoFinder {{consists}} of three main steps. First, finding frequent size- trees, then utilizing repeated size-n trees to divide the entire network into a collection of size- graphs, finally, performing <b>sub-graph</b> join operations to find frequent size-n sub-graphs. In the first step, the algorithm detects all non-isomorphic size- trees and mappings from a tree to the network. In the second step, the ranges of these mappings are employed to partition the network into size-n graphs. Up to this step, there is no distinction between NeMoFinder and an exact enumeration method. However, {{a large portion of}} non-isomorphic size-n graphs still remain. NeMoFinder exploits a heuristic to enumerate non-tree size-n graphs by the obtained information from the preceding steps. The main advantage of the algorithm is in the third step, which generates candidate sub-graphs from previously enumerated sub-graphs. This generation of new size- sub-graphs is done by joining each previous <b>sub-graph</b> with derivative sub-graphs from itself called cousin sub-graphs. These new sub-graphs contain one additional edge in comparison to the previous sub-graphs. However, there exist some problems in generating new sub-graphs: There is no clear method to derive cousins from a graph, joining a <b>sub-graph</b> with its cousins leads to redundancy in generating particular <b>sub-graph</b> more than once, and cousin determination is done by a canonical representation of the adjacency matrix which is not closed under join operation. NeMoFinder is an efficient network motif finding algorithm for motifs up to size 12 only for protein-protein interaction networks, which are presented as undirected graphs. And it is not able to work on directed networks which are so important in the field of complex and biological networks. The pseudocode of NeMoFinder is shown below: ...|$|E
40|$|Abstract. Several kernels over {{labelled}} graphs {{have been}} proposed in the liter-ature so far. Most of them {{are based on the}} Cross Product (CP) Kernel applied on decompositions of graphs into <b>sub-graphs</b> of specific types. This approach has two main limitations: (i) it is difficult to choose a-priori the appropriate type of <b>sub-graphs</b> for a given problem and (ii) all the <b>sub-graphs</b> of a decomposition participate in the computation of the CP kernel even though many of them might be poorly correlated with the class variable. To tackle these problems we pro-pose a class of graph kernels constructed on the proximity space induced by the graph distances. These graph distances address the aforementioned limitations by learning combinations of different types of graph decompositions and by flexible matching the elements of the decompositions. Experiments performed on a num-ber of graph classification problems demonstrate the effectiveness of the proposed approach. 1 Motivation and Related Work Support Vector Machines (SVMs), and Kernel Methods in general, became popula...|$|R
40|$|Biological {{networks}} show {{a rather}} complex, scale-free topology consisting of few highly connected (hubs) and many low connected (peripheric and concatenating) nodes. Furthermore, they contain regions of rather high connectivity, as in e. g. metabolic pathways. To analyse data {{for an entire}} network consisting of several thousands of nodes and vertices is not manageable. This inspired us to divide the network into functionally coherent <b>sub-graphs</b> and analysing the data that correspond {{to each of these}} <b>sub-graphs</b> individually. We separated the network in a two-fold way: 1. clustering approach: <b>sub-graphs</b> were defined by higher connected regions using a clustering procedure on the network; and 2. connected edge approach: paths of concatenated edges connecting striking combinations of the data were selected and taken as <b>sub-graphs</b> for further analysis. As experimental data we used gene expression data of the bacterium Escherichia coli which was exposed to two distinctive environments: oxygen rich and oxygen deprived. We mapped the data onto the corresponding biochemical network and extracted disciminating features using Haar wavelet transforms for both strategies. In comparison to standard methods, our approaches yielded a much more consistent image of the changed regulation in the cells. In general, our concept may be transferred to network analyses on any interaction data, when data for two comparable states of the associated nodes are made available...|$|R
50|$|Context-aware: An RDF store {{capable of}} storing {{statements}} within contexts is considered context-aware. Essentially, such a store {{is able to}} partition the RDF model it represents into individual, named, and addressable <b>sub-graphs.</b>|$|R
5000|$|In addition, three {{specific}} {{concepts of}} <b>sub-graph</b> frequency have been proposed. As figure illustrates, the first frequency concept [...] considers all matches of a graph in original network. This definition {{is similar to}} what we have introduced above. The second concept [...] is defined as the maximum number of edge-disjoint instances of a given graph in original network. And finally, the frequency concept [...] entails matches with disjoint edges and nodes. Therefore, the two concepts [...] and [...] restrict the usage of elements of the graph, and as can be inferred, the frequency of a <b>sub-graph</b> declines by imposing restrictions on network element usage. As a result, a network motif detection algorithm would pass over more candidate sub-graphs if we insist on frequency concepts [...] and [...]|$|E
50|$|At first, the FPF {{algorithm}} enumerates {{and maintains}} the information of all matches of a <b>sub-graph</b> {{located at the}} root of the pattern tree. Then, one-by-one it builds child nodes of the previous node in the pattern tree by adding one edge supported by a matching edge in the target graph, and tries to expand all of the previous information about matches to the new <b>sub-graph</b> (child node). In next step, it decides whether the frequency of the current pattern is lower than a predefined threshold or not. If it is lower and if downward closure holds, FPF can abandon that path and not traverse further in this part of the tree; as a result, unnecessary computation is avoided. This procedure is continued until there is no remaining path to traverse.|$|E
5000|$|... (3) Ease {{support for}} {{dynamically}} evolving graphs. Almost all the graphs {{in real life}} are often evolving over time. Since community detection often uses the same global criterion to find communities, they are not very sensitive of the updates of nodes and edges in graphs. On the contrary, community search can handle this easily, as it usually works on a <b>sub-graph.</b>|$|E
40|$|Predictive graph mining {{approaches}} in chemical databases are extremely popular and effective. Most {{of these approaches}} first extract frequent <b>sub-graphs</b> and then use them as features to build predictive models. In the work presented here, the approach taken is similar. However, instead of frequent <b>sub-graphs,</b> frequent trees, based on SMILES strings are derived. For this, the SMILES strings of chemical compounds are decomposed into fragment trees, which in turn are mined for interesting sub-trees. These tree based patterns are then used as features by a classifier to build predictive models. The approach is experimentally evaluated on a real world chemical data set. ...|$|R
40|$|Effective {{dimensionality}} reduction {{has been}} an attractive research area for many large-scale vision and multimedia tasks. Several recent methods attempt to learn optimized graphbased embedding for fast and accurate applications. In this paper, we propose a novel linear unsupervised algorithm, termed Discriminative Partition Sparsity Analysis (DPSA), explicitly considering different probabilistic distributions that exist over the data points, meanwhile preserving the natural locality relationship among the data. Specifically, the Gaussian mixture model (GMM) is first applied to partition all samples into several clusters. In each cluster, a number of sparse <b>sub-graphs</b> are computed via the ` 1 -norm constraint to optimally represent the intrinsic data structure. Such <b>sub-graphs</b> are demonstrated to be robust to data noise, automatically sparse and adaptive to the neighborhood. All the <b>sub-graphs</b> from the clusters are then combined into a whole discriminative optimization framework for final reduction. We have systematically evaluated our method on three image datasets: USPS digital hand-writing, CMU PIE face and CIFAR- 10 tiny image, showing its accurate and robust performance for image classification...|$|R
40|$|The {{increasing}} {{growth of}} data on protein-protein interaction (PPI) networks has boosted research on their comparative analysis. In particular, recent studies proposed models and algorithms for performing network alignment, that is, the comparison of networks across species for discovering conserved functional complexes. In this paper, we present an algorithm for dividing PPI networks, prior to their alignment, into small <b>sub-graphs</b> {{that are likely to}} cover conserved complexes. This allows one to perform network alignment in a modular fashion, by acting on pairs of resulting small <b>sub-graphs</b> from different species. The proposed dividing algorithm combines a graph theoretical property (articulation) with a biological one (orthology). Extensive experiments on various PPI networks are conducted in order to assess how well the <b>sub-graphs</b> generated by this dividing algorithm cover protein functional complexes and whether the proposed pre-processing step can be used for enhancing the performance of network alignment algorithms. Source code of the dividing algorithm is available upon request for academic use. Key words: protein interaction network division, modular network alignmen...|$|R
