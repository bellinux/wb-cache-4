1|3|Public
60|$|One summer {{there was}} a great drought, and the rooks, unable to get their usual food from the hard, sun-baked pasture-lands, {{attacked}} the roots and would have pretty well destroyed them if the farmer had not protected his swedes by driving in stakes and running cotton-thread and twine from stake to stake all over the field. This kept them off, just as thread keeps the chaffinches from the seed-beds in small gardens, and as it keeps the sparrows from the crocuses on lawn and ornamental grounds. One day Caleb caught sight of an odd-looking, brownish-grey object {{out in the middle of}} the turnip-field, and as he looked it rose up two or three feet into the air, then dropped back again, and this curious movement was repeated at intervals of two or three minutes until he went to see what the thing was. It turned out to be a long-eared owl, with its foot accidentally caught by a <b>slack</b> <b>thread,</b> which allowed the bird to rise a couple of feet into the air; but every such attempt to escape ended in its being pulled back to the ground again. It was so excessively lean, so weightless in his hand, when he took it up after disengaging its foot, that he thought it must have been captive for the space of two or three days. The wonder was that it had kept alive during those long midsummer days of intolerable heat out there in the middle of the burning field. Yet it was in very fine feather and beautiful to look at with its long, black ear-tufts and round, orange-yellow eyes, which would never lose their fiery lustre until glazed in death. Caleb's first thought on seeing it closely was that it would have been a prize to anyone who liked to have a handsome bird stuffed in a glass case. Then raising it over his head he allowed it to fly, whereupon it flew off a distance of a dozen or fifteen yards and pitched among the turnips, after which it ran a little space and rose again with labour, but soon recovering strength it flew away over the field and finally disappeared in the deep shade of the copse beyond.|$|E
50|$|There {{are many}} things that can cause the warp threads not to {{separate}} cleanly, and thus produce a poor shed. A <b>slack</b> warp, <b>threads</b> set too closely in the reed, or increase of friction on the first foot or so of the warp where the threads were handled all cause poor sheds. Fuzzy yarns like mohair can also cause a poor shed. To get a better shed the weaver can lift the harnesses while the reed is against the fabric, or raise only one harness at a time. By weaving in a different manner sometimes a good shed can be created. The weaver can also insert a stick into the shed to clear it, and make way for the shuttle though this option is time-consuming.|$|R
40|$|We {{consider}} scheduling distributable real-time threads with dependencies (e. g., due to synchroniza-tion) {{in mobile}} ad hoc networks, {{in the presence}} of node/link failures, message losses, and dynamic node joins and departures. We present a distributed real-time scheduling algorithm called RTG-DS. The algo-rithm uses a gossip-style protocol for discovering el-igible nodes, node/link failures, and message losses. In scheduling local thread sections, it exploits <b>thread</b> <b>slacks</b> to optimize the time available for gossiping. We prove that RTG-DS probabilistically bounds distributed blocking times and distributed deadlock detection and notification times. Thereby, it probabilistically satis-fies end-to-end thread time constraints. We also prove that RTG-DS probabilistically bounds failure-exception notification times for failed threads (so that their par-tially executed sections can be aborted). Our simula-tion results validate RTG-DSâ€™s effectiveness. 1...|$|R
40|$|UnrestrictedSimulation is an {{indispensable}} tool for computer architecture research. However, as target systems become increasingly complex, designers of computer architecture simulators are facing several challenges including runaway development cost, poor simulation speed, and compromised simulation accuracy.; In this work, we investigate and demonstrate novel integration and parallelization techniques {{to address the}} above issues, which {{are part of an}} overarching vision to design a parallel full-system simulation infrastructure for future Chip Multiprocessors (CMPs) running on current CMPs.; First, through integration, we combine two existing and widely used simulators. This cost-effective and practical approach not only enables detailed cycle-accurate microarchitectural modeling with full system simulation, but also dramatically reduces development time and cost. The integrated tool is called SimWattch. After describing how we met the technical challenges in the design of SimWattch, we show the type of errors a user-level simulator can make because it omits operating system activities. Our results demonstrate that if operating system effects are omitted, performance and power will be overestimated while energy will be underestimated, sometimes by large amounts in all OS-intensive workloads and some SPEC workloads as well.; Current trends signal an imminent crisis in the simulation of future CMPs. In order to address this challenge, we explore the paradigm of simulating each core of a target CMP in one thread and then spreading the threads across the hardware thread contexts of a host CMP. We start with cycle-by-cycle simulation and then relax the synchronization condition in various schemes, which we call slack simulations.; In <b>slack</b> simulations, the <b>threads</b> simulating different simulated cores do not synchronize after each simulated cycle, but rather they are given some slack. The simulation slack is the difference in cycle(s) between the simulated times of any two target cores. The maximum possible slack is called the slack bound. Small slacks, such as a few cycles, greatly improve the efficiency of parallel CMP simulations, with no or negligible simulation errors. Using POSIX Threads (Pthreads), we have developed a simulation framework called SlackSim to experiment with various slack simulation schemes. Unlike previous attempts to parallelize multiprocessor simulations on distributed memory machines, SlackSim takes advantage of the efficient sharing of data in the host CMP architecture. We demonstrate the efficiency and accuracy of some well-known slack simulation schemes and of some new ones on SlackSim running on a state-of-the-art CMP platform.; Slack simulations may suffer from simulation violations, which affect the accuracy of target metrics. In order to control the number of simulation violations and error rates in slack simulations, adaptive slack simulation is proposed. Adaptive slack simulation paces the simulation by adaptively adjusting the simulation slack to meet a target simulation violation rate. Our experiments show that adaptive slack simulation can regulate simulation violations reliably and at low performance cost.; Finally, an optimistic simulation technique called speculative slack simulation is developed and evaluated. In speculative slack simulations, the simulation is periodically checkpointed. When a violation is detected the simulation rolls back to its nearest checkpoint and replays the checkpoint in safe mode. Because of its complexity and large overheads, this solution is only acceptable for simulations with very low violation rates...|$|R

