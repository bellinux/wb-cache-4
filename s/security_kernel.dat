73|78|Public
5000|$|In telecommunication, {{the term}} <b>security</b> <b>kernel</b> has the {{following}} meanings: ...|$|E
50|$|A <b>security</b> <b>kernel</b> {{occupies}} the innermost and most privileged ring and enforces all mandatory policies. It provides a virtual process environment, which isolates one process from another. It performs all low-level scheduling, memory management, and interrupt handling. The <b>security</b> <b>kernel</b> also provides I/O services and an IPC message mechanism. The security kernel’s data is global to the system.|$|E
5000|$|Examples of A1-class {{systems are}} Honeywell's SCOMP, Aesec's GEMSOS, and Boeing's SNS Server. Two that were unevaluated were the {{production}} LOCK platform and the cancelled DEC VAX <b>Security</b> <b>Kernel.</b>|$|E
5000|$|The {{development}} of guards {{began in the}} late 1970s with the creation of several [...] "Secure Communications Processors" [...] and [...] "Guard" [...] applications. The secure communications processors were high assurance operating systems and <b>security</b> <b>kernels</b> developed to support controlled plain-text bypasses for packet network encryption devices. The guard applications were designed to sanitise data being exported from a classified system to remove any sensitive information from it.|$|R
5000|$|Tracks: Distributions, Languages, <b>Security,</b> Systems, Collaboration, <b>Kernel</b> ...|$|R
50|$|Free {{open source}} (GPL) Linux <b>kernel</b> <b>security</b> extension.|$|R
50|$|The first {{commercial}} network layer encryption device was the Motorola Network Encryption System (NES). The system used the SP3 and KMP protocols {{defined by the}} NSA Secure Data Network System (SDNS) and were the direct precursors to IPsec. The NES was built in a three part architecture that used a small cryptographic <b>security</b> <b>kernel</b> to separate the trusted and untrusted network protocol stacks.|$|E
50|$|In current Trusted Computing specifications, {{there are}} two {{hardware}} components: the Trusted Platform Module (TPM), which will provide secure storage of cryptographic keys and a secure cryptographic co-processor, and a curtained memory feature in the Central Processing Unit (CPU). In NGSCB, {{there are two}} software components, the Nexus, a <b>security</b> <b>kernel</b> {{that is part of}} the Operating System which provides a secure environment (Nexus mode) for trusted code to run in, and Nexus Computing Agents (NCAs), trusted modules which run in Nexus mode within NGSCB-enabled applications.|$|E
50|$|Security-Enhanced Linux {{implements}} the Flux Advanced <b>Security</b> <b>Kernel</b> (FLASK). Such a kernel contains architectural components prototyped in the Fluke operating system. These provide {{general support}} for enforcing {{many kinds of}} mandatory access control policies, including those based on the concepts of type enforcement, role-based access control, and multilevel security. FLASK, in turn, was based on DTOS, a Mach-derived Distributed Trusted Operating System, as well as Trusted Mach, a research project from Trusted Information Systems that had an influence on the design and implementation of DTOS.|$|E
50|$|AppArmor is {{implemented}} using the Linux <b>Security</b> Modules (LSM) <b>kernel</b> interface.|$|R
50|$|Tomoyo Linux (stylised as TOMOYO Linux) is a Linux <b>kernel</b> <b>security</b> module which {{implements}} mandatory {{access control}} (MAC).|$|R
5000|$|AuthZ API which {{implements}} the NT <b>kernel</b> <b>Security</b> Reference Monitor in {{user mode}} for applications to protect objects.|$|R
50|$|The Flux Advanced <b>Security</b> <b>Kernel</b> (FLASK) is an {{operating}} system security architecture that provides flexible support for security policies. It {{is a joint}} venture between the National Security Agency, the University of Utah, and the Secure Computing Corporation project designed to provide a framework for a more secure operating system. Development and implementation started with the Mach microkernel, and has since shifted its focus to the Linux operating system. FLASK is a core framework in security-focused operating systems such as NSA's Security-Enhanced Linux (SELinux), OpenSolaris FMAC and TrustedBSD. This means that SELinux {{can be thought of as}} an implementation of FLASK.|$|E
5000|$|A {{separation}} kernel {{is a type}} of <b>security</b> <b>kernel</b> used {{to simulate}} a distributed environment. The concept was introduced by John Rushby in a 1981 paper. Rushby proposed the separation kernel as a solution to the difficulties and problems that had arisen in the development and verification of large, complex security kernels that were intended to [...] "provide multilevel secure operation on general-purpose multi-user systems." [...] According to Rushby, [...] "the task of a separation kernel is to create an environment which is indistinguishable from that provided by a physically distributed system: it must appear as if each regime is a separate, isolated machine and that information can only flow from one machine to another along known external communication lines. One of the properties we must prove of a separation kernel, therefore, is that there are no channels for information flow between regimes other than those explicitly provided." ...|$|E
40|$|The <b>security</b> <b>kernel</b> {{approach}} {{is the single most}} often used technique for building a highly secure operating system. However, it does not follow that you can buy one easily, that you can build one easily, that most secure systems are based on a <b>security</b> <b>kernel,</b> or even that most people agree that the <b>security</b> <b>kernel</b> is the right way to go. Indeed, many researchers believe that the <b>security</b> <b>kernel</b> is the wrong approach and are working on alternatives. But to date, for the highest-security systems, the <b>security</b> <b>kernel</b> has shown more promise than any other single technique. The <b>security</b> <b>kernel</b> concept was developed by Roger Schell in 1972 and has commonly been defined (Anderson 1972; Ames, Gasser, and Schell 1983) as the hardware and software that implements the reference monitor abstraction we introduced in section 4. 2. Sixteen years after the idea was first proposed, only a handful of security kernels have been implemented, few are commercially available, and rarely are they being used for practical applications. This seeming lack of progress is due not to a problem with the kernel approach, but to a lack of interest in security on the part of vendors, as we discussed in chapter 2. With today’s heightened interest in security in both industry and the government, you can expect additional commercially developed kernelbased systems to emerge in the next few years. The first <b>security</b> <b>kernel,</b> developed by MITRE as a government-sponsored research project to prove the concept, ran on a DEC PDP 11 / 45 (Schiller 1975). Another notable research <b>security</b> <b>kernel</b> is the UCLA Data Secure Unix for the PDP- 11 / 45 and 11 / 70 (Popek et al. 1979). The Department of Defense, under a project called Guardian, sponsored the design and formal specification of a <b>security</b> <b>kernel</b> for Multics (Schiller 1977), but the kernel was never implemented. Government sponsored developments that led to functioning systems (which have seen limited use) include KVM—an enhanced version of IBM's VM/ 370, developed by System Developmen...|$|E
50|$|Before academia Wehner was {{involved}} in computer <b>security,</b> for example <b>kernel</b> rootkits, {{and for a while}} worked as a professional hacker.|$|R
40|$|With the {{movement}} of operating system, linux has been stable one and used by many IT communities, meanwhile bug are also growing fast and must {{be considered as a}} serious threat for data privacy. Thus we need to provide more security at computer system level which resulting in the <b>kernel</b> <b>security.</b> Grsecurity is one of <b>kernel</b> <b>security</b> projects which offers configuration-free operation, protection against all kinds of address space bugs, access control list system and can be operated on multiple processor architectures and operating systems. In this research I will build a distro linux which provide enhanced computer system security. This Final Project resulting a linux distro for <b>kernel</b> <b>security</b> which can be operated through live cd, it has access control system mechanism and address space modification protection. Kata kunci â�� Grsecurity, Bug kernel, RBA...|$|R
40|$|Abstract. This paper {{presents}} a Common Criteria protection profile for high assurance <b>security</b> <b>kernels</b> (HASK-PP) {{based on the}} results and experiences of several (international) projects on design and implementation of trustworthy platforms. Our HASK-PP was motivated by the fact that currently no protection profile is available that appropriately covers trusted computing features such as trusted boot, sealing, and trusted channels (secure channels with inherent attestation). In particular, we show how trusted computing features are modeled in the HASK protection profile without depending on any concrete implementation for these features. Instead, this is left to the definition of the security targets of a an IT product which claims conformance to the HASK-PP. Our HASK protection profile was evaluated and certified at evaluation assurance level five (EAL 5) by the German Federal Office for Information Security (BSI). ...|$|R
40|$|This paper {{describes}} {{a research project}} to engineer a <b>security</b> <b>kernel</b> for Multics, a general-purpose, remotely accessed, multiuser computer system. The goals are to identify the minimum mechanism that must be correct to guarantee computer enforcement of desired constraints on information access, to simplify the structure of that minimum mechanism to make verification of correctness by auditing possible, and to demonstrate by test'implementation that the <b>security</b> <b>kernel</b> so developed is capable of supporting the functionality of Multics completely and efficiently. The paper presents the overall viewpoint and plan for the project and discusses initial strategies being employed to define and structure the <b>security</b> <b>kernel...</b>|$|E
40|$|We {{explore how}} many-core {{platforms}} {{can be used}} to enhance the security of future systems and to support important security properties such as runtime isolation using a small Trusted Computing Base (TCB). We focus on the Intel Single-chip Cloud Computer (SCC) to show that such properties can be implemented in current systems. We design a system called SEMA which offers strong security properties while maintaining high performance and flexibility enabled by a small centralized <b>security</b> <b>kernel.</b> We further implement and evaluate the feasibility of our design. Currently, our prototype <b>security</b> <b>kernel</b> is able to execute applications in isolation and accommodate dynamic resource requests from them. We show that, with minor modifications, many-core architectures can offer some unique security properties, not supported by existing single- and multi-core architectures, such as application context awareness. Context awareness, a new security property that we define and explore in this work, allows each application to discover, without any interaction with the <b>security</b> <b>kernel,</b> which other parts of the system are allowed to interact with it and access its resources. We also discuss how an application can use context awareness to defend itself from an unlikely, yet potentially compromised <b>security</b> <b>kernel.</b> I...|$|E
40|$|This paper reviews {{some of the}} diculties {{that arise}} in the verication of kernelized secure systems and {{suggests}} new techniques for their resolution. It is proposed that secure systems should be conceived as distributed systems in which security is achieved partly through the physical separation of their individual components and partly through the mediation of trusted functions performed within some of those components. The purpose of a <b>security</b> <b>kernel</b> is simply to allow such a `distributed ' system to actually run within a single processor; policy enforcement is not the concern of a <b>security</b> <b>kernel.</b> This approach decouples verication of components which perform trusted functions from verication of the <b>security</b> <b>kernel.</b> This latter task may be accomplished by a new verication technique called `proof of separability ' which explicitly addresses the security relevant aspects of interrupt handling and other issues ignored by present methods...|$|E
40|$|This paper {{discusses}} {{the implementation of}} security policies in multipolicy systems. Multipolicy systems are systems supporting a multitude of security policies, each policy governing the applications within its own and precisely defined security domain. The paper argues that within multipolicy systems, traditional approaches for implementing security policies such as <b>security</b> <b>kernels</b> are both too weak and too strong. In order to support this thesis, we will discuss architectural issues of the implementation of policy separation, policy persistency, total mediation and putting off-the-shelf applications {{under the control of}} security policies. Whenever our statements are illustrated by examples, these examples are taken from a case study we implemented for the OSF Distributed Computing Environment. Keywords: security policy, multipolicy system, information domain, policy domain, custodian, policy separation, policy persistency, reference monitor, micro-kernel, distributed computing environment, DCE. 1 Introductio...|$|R
40|$|In {{this paper}} we propose a new {{heuristic}} framework, called Kernel Search, to solve the complex problem of portfolio selection with real features. The method is based on the identification of a restricted set of promising <b>securities</b> (<b>kernel)</b> and on the exact solution of the MILP problem on this set. The continuous relaxation of the problem solved on the complete set of available securities is used to identify the initial kernel and a sequence of integer problems are then solved to identify further securities to insert into the kernel. We analyze the behavior of several heuristic algorithms as implementations of the Kernel Search framework for the solution of the analyzed problem. The proposed heuristics are very effective and quite efficient. The Kernel Search has the advantage of being general and thus easily applicable to a variety of combinatorial problems...|$|R
40|$|The {{need for}} {{multilevel}} secure (MLS) systems still exists yet, {{the popularity of}} desktop systems {{has resulted in the}} imposition of new requirements. To be useful, a system must employ commercialoff -the-shelf (COTS) operating systems and office productivity software. We describe the preliminary architecture for a COTS-driven local area network that will provide MLS services to users while permitting them to employ standard office productivity tools on standard workstations. Our ongoing development centers on the provision of multilevel mail and messaging to the desktop. 1. Introduction The problem of timely access to information at multiple security levels has challenged the computer security research and engineering community for several decades. During the 1960 s and 1970 s attention was focussed on the development of high assurance <b>security</b> <b>kernels</b> by vendors. The resulting systems permit controlled sharing of sensitive information by users at multiple security levels. Often t [...] ...|$|R
40|$|This paper reviews {{some of the}} {{difficulties}} that arise in the verification of kernelized secure systems and suggests new techniques for their resolution. It is proposed that secure systems should be conceived as distributed systems in which security is achieved partly through the physical separation of their individual components and partly through the mediation of trusted functions performed within some of those components. The purpose of a <b>security</b> <b>kernel</b> is simply to allow such a `distributed' system to actually run within a single processor; policy enforcement is not the concern of a <b>security</b> <b>kernel.</b> This approach decouples verification of components which perform trusted functions from verification of the <b>security</b> <b>kernel.</b> This latter task may be accomplished by a new verification technique called `proof of separability' which explicitly addresses the security relevant aspects of interrupt handling and other issues ignored by present methods. This work was performed wh [...] ...|$|E
40|$|Abstract-This paper {{describes}} {{the development of}} a virtual-machine monitor (VMM) <b>security</b> <b>kernel</b> for the VAX archi-tecture. The paper particularly focuses on how the system’s hardware, microcode, and software are aimed at meeting Al-level security requirements while maintaining the standard interfaces and applications of the VMS and ULTRIX- 32 operating systems. The VAX <b>Security</b> <b>Kernel</b> supports multiple concurrent virtual machines on a single VAX system, providing isolation and con-trolled sharing of sensitive data. Rigorous engineering standards were applied during development to comply with the assurance requirements for verification and configuration management. The VAX <b>Security</b> <b>Kernel</b> has been developed with a heavy emphasis on performance and system management tools. The kernel performs sufficiently well that much of its development was carried out in virtual machines running on the kernel itself, rather than in a conventional time-sharing system. Index Terms- Computer security, virtual machines, covert channels, mandatory security, discretionary security, layered de-sign, security kernels, protection rings. I...|$|E
40|$|Paperback is not available. This {{publication}} {{discusses the}} latest advances in kernel <b>security,</b> <b>kernel</b> flexibility, the efficient utilization of memory, I/O prefetching, and page replacement algorithms, including: “This {{book will be}} a nice contribution to the community of operating system kernel developers. ...|$|E
50|$|Security-Enhanced Linux (SELinux) is a Linux <b>kernel</b> <b>security</b> module that {{provides}} a mechanism for supporting access control security policies, including United States Department of Defense-style mandatory access controls (MAC).|$|R
40|$|Testing for {{software}} {{security is a}} lengthy, complex and costly process. Currently, security testing is done using penetration analysis and formal verification of <b>security</b> <b>kernels.</b> These methods are not complete and are difficult to use. Hence {{it is essential to}} focus testing effort in areas that have a greater number of security vulnerabilities to develop secure software as well as meet budget and time constraints. We propose a testing strategy based on a classification of vulnerabilities to develop secure and stable systems. This taxonomy will enable a system testing and maintenance group to understand the distribution of security vulnerabilities and prioritize their testing effort according to the impact the vulnerabilities have on the system. This is based on Landwehr's classification scheme for security flaws and we evaluated it using a database of 1360 operating system vulnerabilities. This analysis indicates vulnerabilities tend to be focused in relatively few areas and associated with a small number of software engineering issues...|$|R
50|$|Members of the {{computer}} laboratory have made impact in computers, Turing machines,microprogramming, subroutines, computer networks, mobile protocols, <b>security,</b> programming languages, <b>kernels,</b> OS, <b>security,</b> virtualization, location badgesystems, etc. Below is a list.|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThis thesis is a detailed {{design of a}} <b>security</b> <b>kernel</b> for an archival file storage system. Microprocessor technology is used to address {{a major part of}} the problem of information security in a distributed computer system. Utilizing multiprogramming techniques for processor efficiency, segmentation for controlled sharing, and a loop-free structure for avoiding intermodule dependencies, the Archival Storage System is designed for implementation on the filing Z 8001 microprocessor with a memory management unit. The concepts of a process structure and a distributed kernel are used in providing management of the shared resources of the system. The <b>security</b> <b>kernel</b> primitives create a virtual machine environment and provide information security in accordance with a non-discretionary security policy. [URL] United States Arm...|$|E
40|$|There is an {{increasing}} need tor systems which Drovide controlled access to multiple levels ot sensitive data and intormaticn. This rencrt comorises the first phase ot the realization ot such a system: the comprehensive design ot a multilevel secure tile storage system. This is the tocus ot an ongoing research oroject, which is currently in the early implementation phases. The design is based uocn <b>security</b> <b>kernel</b> technology as applied to modern multiple microcomputer arrays. This design is intended to interface with other (distributed) Drocessing elements, perhaps torminq the central hub ot a data secure network ot computers. The design would orovide archival shared storage while insuring that each interfacing processor accessed only that information appropriate. The design ohase of the orcject is presented {{in a series of}} three research reports (Masters Oegree theses). These reports, reorinted in their entirety here are: (1) Capt, O'Conneli and Lt. Richardson's definition ot a secure multi-microprocessor family of operating systems; (2) Cant- Coleman's detailed <b>security</b> <b>kernel</b> design tor a member ot this family; and (3) Lt. Parks' hierarchical tile system designed to run under the control ot Capt. Coleman's <b>security</b> <b>kernel.</b> supported in part by the Foundation Research Program of the Naval Postgraduate School with funds provided by the Chief of Naval Research[URL]...|$|E
40|$|As part of {{the general}} goal of {{providing}} secure computer systems, the design of verifiably secure operating systems {{is one of the most}} important tasks. This paper addresses the problem by defining security in terms of a model and proposing a set of principles which we feel should be satisfied in a secure operating system. Informally, an operating system is secure if its users completely control the use of all information which they introduce. Four key partitions are identified: user interface functions, user invoked services, background services, and the <b>security</b> <b>kernel.</b> Principles are then defined to insure that interface functions provide a safe initial environment for executing user programs, user called services are confined, background services have no access to user information, and the <b>security</b> <b>kernel</b> adequately protects information storage...|$|E
25|$|An {{important}} kernel {{design decision}} {{is the choice}} of the abstraction levels where the security mechanisms and policies should be implemented. <b>Kernel</b> <b>security</b> mechanisms {{play a critical role in}} supporting security at higher levels.|$|R
40|$|The {{flexibility}} and computing power of modern smartphones {{to install and}} execute various applications allows for a rich user experience but also imposes several security concerns. Smartphones that are used both for private and corporate purposes do not separate the data and applications of dif-ferent security domains, and users are usually too unskilled to deploy and configure extra security mechanisms. Hence, data leakage and unwanted information flow may occur. In this paper we present the design {{and implementation of the}} Trusted Virtual Domain (TVD) security architecture for smartphones. The TVD concept separates data and ap-plications of di↵erent security domains and automates the security configuration on devices. In particular, we build our solution on top of the OKL 4 microkernel, which provides the basic isolation properties, and extend it with a framework that realizes the TVD policy enforcement for Android op-erating systems. Our results show that the TVD security architecture can be built and used on modern smartphones, but there are also limitations that current <b>security</b> <b>kernels</b> like OKL 4 have to address to improve the user experience...|$|R
40|$|It is an {{established}} trend to develop low-level code—embedded software, device drivers, and operating systems—using high-level languages, especially functional languages with advanced facilities to abstract and generate code. To be reliable and secure, low-level code must correctly manage space, time, and other resources, so special type systems and verification tools arose to regulate resource access statically. However, a general-purpose functional language practical today {{can provide the}} same static assurances, also without run-time overhead. We substantiate this claim and promote the trend with two <b>security</b> <b>kernels</b> {{in the domain of}} device drivers: 1. one built around raw pointers, to track and arbitrate the size, alignment, write permission, and other properties of memory areas across indexing and casting; 2. the other built around a device register, to enforce protocol and timing requirements while reading from the register. Our style is convenient in Haskell thanks to custom kinds and predicates (as type classes); type-level numbers, functions, and records (using functional dependencies); and mixed type- and term-level programming (enabling partial type signatures). ...|$|R
