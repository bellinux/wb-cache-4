821|2308|Public
25|$|FAAC {{contains}} code {{based on}} the ISO MPEG-4 reference code, whose license is not compatible with the LGPL license. Only the FAAC changes to this ISO MPEG-4 reference code are licensed under the LGPL license. The ISO MPEG-4 reference software was published as ISO/IEC 14496-5 (MPEG-4 Part 5: Reference software) and it is freely available for download from ISO website. ISO/IEC gives users of the MPEG-2 NBC/MPEG-4 Audio standards free license to this <b>software</b> <b>module</b> or modifications thereof for use in hardware or software products claiming conformance to the MPEG-2 NBC/MPEG-4 Audio standards. Those intending to use this <b>software</b> <b>module</b> in hardware or software products are advised that this use may infringe existing patents.|$|E
25|$|The 6809 {{design team}} {{believed}} that future system integrators would look to off-the-shelf code in ROMs to handle common tasks. Motorola's official programming manual contains the full listing of assist09, a so-called monitor, a miniature operating system {{intended to be}} burned in ROM. Another example of ROM code might be binary floating point arithmetic, which is a common requirement in many systems. In order to speed time to market, common code modules would be purchased, rather than developed in-house, and integrated into systems with code from other manufacturers. Since a CPU designer could hardly guarantee where this code would be located in a future system, the 6809 design focused heavily on support of position-independent, reentrant code that could be freely located anywhere in the memory map. This expectation was, in reality, never quite met: Motorola's only released example of a ROM'd <b>software</b> <b>module</b> was the MC6839 floating-point ROM. However, the decisions made by the design team made for a very powerful processor and made possible advanced operating systems like OS-9 and UniFlex, which {{took advantage of the}} position-independent, re-entrant nature of the 6809 to create multi-user multitasking operating systems.|$|E
5000|$|... #Subtitle level 2: <b>Software</b> <b>module</b> file {{players and}} {{converters}} ...|$|E
5000|$|The base {{configuration}} of Storage Center includes a disk array controller, disk enclosure, disk drives, connectivity hardware, and <b>software</b> <b>modules.</b> The operating system, also called Storage Center, is regularly updated. <b>Software</b> <b>modules</b> include: ...|$|R
5000|$|... easy {{configuration}} of <b>software</b> <b>modules</b> via configuration files ...|$|R
40|$|Software {{robustness}} {{problems may}} hinder {{the use of}} Commercial Off-The-Shelf (COTS) <b>software</b> <b>modules</b> and legacy <b>software</b> <b>modules</b> in mission-critical and safety-critical applications. This research focuses on hardening COTS and legacy <b>software</b> <b>modules</b> against robustness failures triggered by exceptional inputs. An automated approach is presented {{that is capable of}} identifying the triggers of the robustness failures. A fault model – the Dimensionality Model – is used to guide analysis. An experiment is described which demonstrates the feasibility of automating the process of analyzing failure causes and hardening against certain data types in POSIX function calls, for example, NULL pointer values and scalar data types such as INT and FLOAT. The final goal of this research is to provide users a tool to harden COTS and legacy <b>software</b> <b>modules</b> automatically...|$|R
5000|$|The ClipGrab {{installer}} for Windows uses OpenCandy, {{an advertising}} <b>software</b> <b>module.</b>|$|E
5000|$|When making {{calls to}} a supplier, a <b>software</b> <b>module</b> should {{not violate the}} supplier's preconditions.|$|E
50|$|Provide a {{framework}} in XML schema and a <b>software</b> <b>module</b> integrating {{description of the}} three first subtasks.|$|E
5000|$|... basic {{specification}}s, for the {{specification of}} single <b>software</b> <b>modules,</b> ...|$|R
40|$|In {{the present}} work we study {{products}} for processing data from weather satellites named SAFNWC (SAF in Support to Nowcasting and Very Short-Range Forecasting). SAFNWC {{is one of}} the most important of EUMETSAT SAFs (dedicated centers of excellence for processing satellite data), delivering both - complex <b>software</b> <b>modules,</b> as well as operational products delivered in real-time to the end users. Main goal of the thesis is to prepare an overview of presently available <b>software</b> <b>modules</b> and their operational products, with emphasis on the MSG data. Second goal, depending on available <b>software</b> <b>modules</b> and support data resources, is to experimentally implement some of the modules in the Czech Hydrometeorological Institute (CHMI) ...|$|R
5000|$|Circular dependency: Introducing {{unnecessary}} {{direct or}} indirect mutual dependencies between objects or <b>software</b> <b>modules</b> ...|$|R
50|$|A mobile {{computing}} <b>software</b> <b>module</b> providing automated seamless authentication to {{public or private}} WLAN using the IETF Extensible Authentication Protocol standards.|$|E
50|$|SCOOP (Scalable Concurrent Operations in Python) is a Python <b>software</b> <b>module</b> for distributing {{concurrent}} tasks on various environments, from heterogeneous grids of workstations to supercomputers.|$|E
50|$|Switch Light vSwitch: A user space <b>software</b> <b>module</b> for KVM-based virtual {{switches}} {{that adds}} enhanced functionality and improved performance {{on top of}} the Open vSwitch kernel.|$|E
50|$|Spark Modular - a {{collection}} of <b>software</b> <b>modules</b> for building your own modular synthesizer.|$|R
5000|$|... 1980 - Ongoing {{development}} of various custom <b>software</b> <b>modules</b> in a mini computer environment ...|$|R
40|$|Large {{and complex}} {{software}} systems {{are confronted with}} continuous changes during all stages in their life comprising development, maintenance, migration, and retirement. On the one side these changes are mandatory to guarantee {{the success of a}} software system but on the other side changes affect the architecture and design of a software system. Therefore, a continuous observation and analysis of the architecture and the design is needed to early identify shortcomings and resolve them. In this dissertation we propose the ArchView approach that focuses on the analysis and evaluation of <b>software</b> <b>modules</b> regarding their structural and evolutionary characteristics. <b>Software</b> <b>modules</b> are architectural elements that are implemented in source files, classes, or aggregations of them. The primary objective of our approach is to extract higher-level views of <b>software</b> <b>modules</b> and their dependency relationships that allow the spectator to identify structural and evolutionary shortcomings. For the analysis of the structural and evolutionary characteristics of <b>software</b> <b>modules</b> Arch-View uses <b>software</b> metrics and coupling relationships. Software metrics quantify the size, complexity...|$|R
5000|$|Imaris - a {{scientific}} <b>software</b> <b>module</b> that delivers {{all the necessary}} functionality for data management, visualization, analysis, segmentation and interpretation of 3D and 4D microscopy datasets ...|$|E
50|$|Software: The <b>software</b> <b>module</b> {{tests the}} test takers' Understanding of Software, Ability to Analyze & Design Software, Develop & Test Software, Manage Software, and Implement Integrated Technology.|$|E
50|$|A Service Package Interpreter (SPI) is a <b>software</b> <b>module</b> {{that takes}} special tasks (Packages) from a generic HTTP daemon and handles {{them with the}} help of UI components.|$|E
5000|$|BioJava {{provides}} <b>software</b> <b>modules</b> {{for many}} of the typical tasks of bioinformatics programming. These include: ...|$|R
5000|$|When {{extending}} existing <b>software</b> <b>modules,</b> {{a recommendation}} for action {{could be to}} undertake code refactoring.|$|R
5000|$|... topics, {{representing}} any concept, from people, countries, {{and organizations}} to <b>software</b> <b>modules,</b> individual files, and events, ...|$|R
50|$|The {{advantage}} for implementation {{is that if}} a <b>software</b> <b>module</b> has a single purpose, it will be simpler, and therefore easier and less expensive, to design and implement.|$|E
5000|$|Open iT SystemAnalyzer is a <b>{{software}}</b> <b>module</b> {{for those}} who require better control of their software and hardware resources. Some of this module’s primary functions include the following: ...|$|E
50|$|A mobile {{computing}} <b>software</b> <b>module</b> providing automated seamless handover of Internet connectivity between 2G, 3G, and 4G technologies and {{public or private}} WLAN using the IETF Mobile IP standards.|$|E
5000|$|... 1900.3 Working Group on Recommended Practice for Conformance Evaluation of Software Defined Radio (SDR) <b>Software</b> <b>Modules</b> ...|$|R
40|$|Daimler uses a model-based test {{process for}} the {{development}} of <b>software</b> <b>modules</b> for automatic transmissions. The validation of the module functions is carried out with a test generator developed by QTronic. This test generator is able to automatically generate, simulate and analyze thousands of test scenarios. The individual components of the development environment, such as, powertrain and vehicle models, <b>software</b> <b>modules</b> and test generator, are coupled by a Software-in-the-Loop (SiL) tool and can be executed on standard laptops. The <b>software</b> <b>modules</b> are operating as in a real vehicle and can be thoroughly tested. 24 The complexity of vehicle engine and transmission systems is steadily increasing. One of the reasons is the increasing market expectation with respect to th...|$|R
50|$|In <b>software</b> engineering, the <b>module</b> {{pattern is}} a design pattern used to {{implement}} the concept of <b>software</b> <b>modules,</b> defined by modular programming, in a programming language with incomplete direct support for the concept.|$|R
5000|$|... #Caption: A {{study of}} {{daylight}} factors {{within a single}} storey building resulting from different perimeter glazing and rooflight designs and glass types. Undertaken using the IES Radiance <b>software</b> <b>Module.</b>|$|E
50|$|An {{agent is}} a network-management <b>software</b> <b>module</b> that resides on a managed device. An agent has local {{knowledge}} of management information and translates {{that information to}} or from an SNMP-specific form.|$|E
50|$|MatrixSSL is an Open-Source TLS/SSL {{implementation}} {{designed for}} custom applications in embedded hardware environments. The MatrixSSL library contains a full cryptographic <b>software</b> <b>module</b> that includes industry-standard public key and symmetric key algorithms.|$|E
40|$|Software defect {{predictors}} {{are useful}} {{to maintain the}} high quality of software products effectively. The early prediction of defective <b>software</b> <b>modules</b> can help the software developers to allocate the available resources to deliver high quality software products. The objective of software defect prediction system is to find as many defective <b>software</b> <b>modules</b> as possible without affecting the overall performance. The learning process of a software defect predictor is difficult due to the imbalanced distribution of <b>software</b> <b>modules</b> between defective and nondefective classes. Misclassification cost of defective <b>software</b> <b>modules</b> generally incurs much higher cost than the misclassification of nondefective one. Therefore, on considering the misclassification cost issue, we have developed a software defect prediction system using Weighted Least Squares Twin Support Vector Machine (WLSTSVM). This system assigns higher misclassification cost to the data samples of defective classes and lower cost to the data samples of nondefective classes. The experiments on eight software defect prediction datasets have proved {{the validity of the}} proposed defect prediction system. The significance of the results has been tested via statistical analysis performed by using nonparametric Wilcoxon signed rank test...|$|R
40|$|To apply new {{technologies}} and physical device for efficient CNC controls to the existing CNC controller, several open control architectures have been proposed. They contain the modularized functionalities of the CNC controller and the standardized communication protocols. They also guarantee the transparent data exchange and to plug and play <b>software</b> <b>modules.</b> However, several implementation issues do not be resolved yet, because the developers should identify and learn their numerous and complex interfaces, code the complex communication programs in several hardware and software platforms, and integrate physical devices and <b>software</b> <b>modules</b> by hand. To resolve these shortcomings, the paper proposes the kernel software that is instrumental in building, reconfiguring, and distributing CNC controllers. The kernel software helps integrate <b>software</b> <b>modules</b> and physical devices automatically and reduce the developer’s programming loads drastically. Furthermore, {{with the help of}} the kernel software, the developer can freely and easily reconfigure the existing CNC controllers by plugging in predeveloped <b>software</b> <b>modules.</b> As a result, the development and modification time of a CNC controller can be significantly reduced...|$|R
40|$|Abstract In this study, {{we present}} {{self-organizing}} maps and discuss {{their role in}} the analysis and visualization of <b>software</b> <b>modules</b> in the space of software measures. We reveal how self-organizing maps create a user-friendly and interactive visualization tool that helps user/software designer inspect various alternatives and get a thorough insight into the structure of the clusters of the <b>software</b> <b>modules</b> and the related metrics (software measures). We show how using self-organizing maps we can grow clusters in a dynamic fashion thus explicitly capture relationships between the software measures and quantify these dependencies for larger and less homogeneous clusters of <b>software</b> <b>modules.</b> The experimental environment exploited in this study relies on software measures coming from 10 large public domain systems, 5 Java and 5 C++ systems...|$|R
