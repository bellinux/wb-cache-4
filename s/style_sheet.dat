319|549|Public
5|$|The W3C and the INRIA, a French {{national}} research institution, gave additional funding to develop CSS. To better implement and write CSS, an experimental <b>style</b> <b>sheet</b> for Arena was developed. On 22 May 1996, the W3C announced that Amaya will replace Arena as their new testbed {{and that the}} W3C {{was looking for a}} new maintainer because the W3C didn't have the resources for two testbeds.|$|E
25|$|Internet Explorer 7 {{introduces}} the Windows RSS Platform {{with which it}} is tightly integrated and can subscribe to RSS and Atom feeds, synchronize and update them on a schedule and display them with its built-in <b>style</b> <b>sheet.</b>|$|E
500|$|... <b>style</b> <b>sheet</b> editing. This very {{experimental}} <b>style</b> <b>sheet</b> editor {{was implemented}} using forms ...|$|E
5000|$|The W3C's Web Content Accessibility Guidelines' {{guideline}} no. 3 states [...] "use markup and <b>style</b> <b>sheets</b> {{and do so}} properly."The guideline's checkpoint 3.3, a priority-2 checkpoint, says [...] "use <b>style</b> <b>sheets</b> {{to control}} layout and presentation." ...|$|R
30|$|Cascading <b>style</b> <b>sheets</b> (CSS).|$|R
40|$|Cascading <b>Style</b> <b>Sheets</b> {{provide a}} {{flexible}} mechanism for governing {{the appearance of}} Web pages. Cascading <b>Style</b> <b>Sheets</b> Level 2 (CSS 2) are an enhancement to the original CSS 1 specification, giving Web page designers additional control over the appearance of Web pages. However, the CSS 2 specification is written in English, leaving open the possibility of ambiguity or inconsistency. We present a formalization of {{a subset of the}} CSS 2 specification using constraints hierarchies to help ensure that potential problems in the specification are caught and corrected. We also comment on the formalization process. 1 Introduction 1. 1 Cascading <b>Style</b> <b>Sheets</b> Cascading <b>style</b> <b>sheets</b> are a mechanism suggested by the World Wide Web Consortium (W 3 C) to fix a fundamental problem with older versions of HTML [...] - their inability to separate content and appearance. By writing different <b>style</b> <b>sheets,</b> Web users can change the appearance of a document without ever having to edit the original document. The most [...] ...|$|R
500|$|Since July 1994 Lie was {{integrating}} libwww and CSS {{and helping}} Raggett. In October 1995, Yves Lafon joined the team [...] {{for a year}} to provide support for HTML form and <b>style</b> <b>sheet</b> development.|$|E
500|$|Hemingway {{said that}} he learned what he needed as a {{foundation}} for his writing from the <b>style</b> <b>sheet</b> for The Kansas City Star, where he worked as cub reporter. [...] The critic John Aldridge says that the minimalist style resulted from Hemingway's belief that to write authentically, each word had to be carefully chosen for its simplicity and authenticity and carry a great deal of weight. Aldridge writes that Hemingway's style [...] "of a minimum of simple words that seemed to be squeezed onto the page against a great compulsion to be silent, creates the impression that those words—if only because there are so few of them—are sacramental." [...] In Paris Hemingway had been experimenting with the prosody of the King James Bible, reading aloud with his friend John Dos Passos. From the style of the biblical text, he learned to build his prose incrementally; the action in the novel builds sentence by sentence, scene by scene and chapter by chapter.|$|E
2500|$|Society of Writers, Editors and Translators. Japan <b>Style</b> <b>Sheet</b> 1998 [...] Stone Bridge Press ...|$|E
40|$|Bachelor's thesis {{deals with}} the {{possibility}} to print HTML and XML documents using cascading <b>style</b> <b>sheets.</b> The first part is devoted to CSS what exactly CSS is {{and how to use}} them for printing, and the issues and the basics of XML. The second part consists of a practical side to create easily customizable Cascading <b>Style</b> <b>Sheets</b> for formatting documents in DocBook. The third and final part identifies areas where Cascading <b>Style</b> <b>Sheets</b> offer insufficient support for quality print output...|$|R
40|$|We {{present in}} this paper a new {{interactive}} method called Imagine that automatically generates <b>style</b> <b>sheets</b> for Web sites. This method aims at satisfying the artistic or aesthetic preferences of the user. This method uses a genetic algorithm to generate <b>style</b> <b>sheets</b> and to find in a search space one or several <b>style</b> <b>sheets</b> that will maximize the user satisfaction. This genetic algorithm is interactive: it generates <b>style</b> <b>sheets,</b> it displays them, and then it asks the user to select those which look the best. In this way, the search for an optimal sheet is guided by the answers provided by the user. Also, this algorithm uses non standard genetic operators based on gene frequencies. We present examples obtained with the actual prototype...|$|R
40|$|This report {{comes out}} of the attempt to {{translate}} the HELM CIC format into OMDoc by XslT <b>style</b> <b>sheets.</b> The experiment and the resulting <b>style</b> <b>sheets</b> are covered in the companion document D 2 c of this report. These <b>style</b> <b>sheets</b> transform the the low-level XML description of the library of the Coq Proof Assistant to the version of OMDoc described in this report. Currently, the <b>style</b> <b>sheets</b> only cover a part of the ultimate transformation, covered by the original HELM format. This part consists in adding inner types (as content-MathML expressions) to the -terms exported from Coq and transforming the proof structure. The generation of natural language, line-breaking considerations, etc. will be implemented later in the task T 2. ...|$|R
2500|$|A {{step towards}} {{standardizing}} Scots spelling was taken {{at a meeting}} of the Makar's Club in Edinburgh in 1947, where the Scots <b>Style</b> <b>Sheet</b> was approved. J. K.Annand, Douglas Young, Robert Garioch, A.D. Mackie, Alexander Scott, Tom Scott and Sydney Goodsir Smith all followed the recommendations in the <b>Style</b> <b>Sheet</b> to some extent. Some of its suggestions are as follows: ...|$|E
2500|$|In 1985, the Scots Language Society (SLS) {{published}} {{a set of}} spelling guidelines called [...] "Recommendations for Writers in Scots". They represent a consensus view of writers in Scots at the time, following several years of debate and consultation involving Alexander Scott, Adam Jack Aitken, David Murison, Alastair Mackie and others. A developed version of the <b>Style</b> <b>Sheet,</b> {{it is based on}} the old spellings of the Makars but seeks to preserve the familiar appearance of written Scots. It includes all of the Style Sheet's suggestions, but recommends that writers return to the more traditional -aw, rather than -aa. Some of its other suggestions are as follows: ...|$|E
2500|$|Saeki said in 2001 {{that most}} Japanese people writing in English use western order, but that some figures began {{to promote the}} use of Japanese order as Japan became a major {{economic}} power in the 20th century. The Japan <b>Style</b> <b>Sheet,</b> a 1998 guide for producing English language works about Japan written by SWET, advocates {{the use of the}} Japanese naming order as often as possible because the translators wanted to promote a consistency in naming order. In 1987, one publisher of English language textbooks in Japan used Japanese order, while in 2001 six of the eight publishers of English language textbooks in Japan use Japanese order. In December 2000 the Council on the National Language of the Ministry of Education recommended that English language productions begin using the Japanese naming order because [...] "it is in general desirable that personal names be presented and written in a way that preserves their unique forms, except for registries and other documents with specific standards." [...] It recommended using capitalization (YAMADA Taro) or commas (Yamada, Taro) to clarify which part of the personal name is the family name and which part is the given name. In a January 2000 opinion poll from the Agency for Cultural Affairs on the preferred order of Japanese names in the English language, 34.9% had a preference for Japanese order, 30.6% had a preference for Western order, and 29.6% had no preference. In 1986 the Japan Foundation decided that it would use the Japanese naming order in all of its publications. A Japan Foundation publishing division spokesperson stated around 2001 that some SWET publications, including popular anglophone newspapers, continue to use western order. As of 2001 the agency's <b>style</b> <b>sheet</b> recommends using a different naming order style depending upon the context. For instance it advocates using the western order in publications for readers who are not familiar with Japan, such as international conference papers.|$|E
5000|$|... #Article: Comparison {{of layout}} engines (Cascading <b>Style</b> <b>Sheets)</b> ...|$|R
5000|$|<b>Style</b> <b>sheets</b> help {{publications}} maintain consistency, {{so common}} {{elements such as}} story text, [...] and s always appear the same. <b>Style</b> <b>sheets</b> also help save time allowing a designer to click once {{rather than having to}} apply each element one at a time and risk using an incorrect value.|$|R
40|$|Although the web {{security}} community {{now has a}} variety of techniques that could help web developers to defend against common attacks such as cross-site scripting and cross-site request forgery, this work is not in a form suitable for general use. What is needed is a web standard that unites these techniques using syntax and semantics that are easy for web developers to learn and straightforward for browser makers to implement. Here we propose such a standard, Security <b>Style</b> <b>Sheets,</b> a browserenforced policy language modelled on Cascading <b>Style</b> <b>Sheets.</b> Security <b>Style</b> <b>Sheets</b> provides an extensible policy framework that allows for policy to be separated from content and to be specified at both coarse and fine levels of granularity. In this paper we present the syntax and semantics of Security <b>Style</b> <b>Sheets,</b> explain its relationship with past {{web security}} proposals and CSS, and give examples of how it could be used to protect mainstream websites such as Facebook. Also in the model of CSS and the Acid 3 tests, we present a conformance suite for Security <b>Style</b> <b>Sheets.</b> ...|$|R
50|$|In 2003, MSN.com was {{configured}} {{to present}} Opera browsers with a <b>style</b> <b>sheet</b> used for old versions of Microsoft Internet Explorer. Other browsers received either a <b>style</b> <b>sheet</b> tailored to them, {{or at least}} the latest Internet Explorer <b>style</b> <b>sheet.</b> The outdated <b>style</b> <b>sheet</b> that Opera received caused Opera to move a significant amount of MSN.com's content 30 pixels to the left of where it should be, distorting the page and making it appear as though there was a bug in Opera.|$|E
5000|$|Syntax: A <b>style</b> <b>sheet</b> {{language}} needs a syntax {{in order}} to be expressed in a machine-readable manner. For example, here is a simple <b>style</b> <b>sheet</b> written in the CSS syntax:h1 { font-size: 1.5em } ...|$|E
5000|$|Formatting model: All <b>style</b> <b>sheet</b> {{languages}} support {{some kind}} of formatting model. Most <b>style</b> <b>sheet</b> languages have a visual formatting model that describes, in some detail, how text and other content is {{laid out in the}} final presentation. For example, the CSS formatting model specifies that block-level elements (of which [...] "h1" [...] is an example) extend to fill the width of the parent element. Some <b>style</b> <b>sheet</b> languages also have an aural formatting model.|$|E
5000|$|HyperText Markup Language, ECMAScript (JavaScript) and Cascading <b>Style</b> <b>Sheets</b> ...|$|R
50|$|Cascading <b>Style</b> <b>Sheets</b> (CSS) {{controls}} the presentation {{aspect of the}} site and allows your site {{to have its own}} unique look. It does this by maintaining <b>style</b> <b>sheets</b> which sit on top of other style rules and are triggered based on other inputs, such as device screen size and resolution.|$|R
5000|$|Can be {{implemented}} using Cascading <b>Style</b> <b>Sheets</b> (CSS).tr:nth-child(2n+1) {background-color: #efefef} ...|$|R
50|$|After the complaints, Microsoft {{changed their}} servers {{to present the}} latest version of Opera, version 7, with the <b>style</b> <b>sheet</b> served to {{the latest version of}} Internet Explorer, which {{resolved}} the problem. However, Microsoft continued to serve the outdated <b>style</b> <b>sheet</b> to the older Opera 6.|$|E
5000|$|A web <b>style</b> <b>sheet</b> {{is a form}} of {{separation}} of presentation and content for web design in which the markup (i.e., HTML or XHTML) of a webpage contains the page's semantic content and structure, but does not define its visual layout (style). Instead, the style is defined in an external <b>style</b> <b>sheet</b> file using a <b>style</b> <b>sheet</b> language such as CSS or XSLT. This design approach is identified as a [...] "separation" [...] because it largely supersedes the antecedent methodology in which a page's markup defined both style and structure.|$|E
5000|$|All <b>style</b> <b>sheet</b> {{languages}} offer functionality {{in these}} areas: ...|$|E
5000|$|Cascading <b>Style</b> <b>Sheets</b> {{as used in}} Mozilla's XUL user {{interface}} ...|$|R
5000|$|The {{most recent}} {{generation}} of the Cascading <b>Style</b> <b>Sheets</b> specification ...|$|R
5000|$|Recommendations for stylesheets, {{especially}} Cascading <b>Style</b> <b>Sheets</b> (CSS), from W3C.|$|R
5000|$|Cascading Style Sheets, XSLT, {{and other}} <b>style</b> <b>sheet</b> {{specifications}} ...|$|E
5000|$|Properties: All <b>style</b> <b>sheet</b> {{languages}} {{have some}} concept of properties {{that can be}} given values to change one aspect of rendering an element. The [...] "font-size" [...] property of CSS {{is used in the}} above example. Common <b>style</b> <b>sheet</b> languages typically have around 50 properties to describe the presentation of documents.|$|E
50|$|Choosing {{the default}} background/text colors, like a CSS <b>style</b> <b>sheet.</b>|$|E
50|$|Dynamic CSS, or DCSS, is an {{umbrella}} {{term for a}} collection of technologies used together to create dynamic <b>style</b> <b>sheets,</b> by {{using a combination of}} any server-sided programming language (such as PHP/ASP/Perl/JSP) and Cascading <b>Style</b> <b>Sheets</b> (CSS). The first idea of DCSS was written in July 2002 by Jori Koolstra, a Dutch programmer.|$|R
5000|$|Co-author, Professional CSS: Cascading <b>Style</b> <b>Sheets</b> for Web Design, Wrox (2005) ...|$|R
50|$|Some {{programs}} split <b>style</b> <b>sheets</b> {{into two}} classes: paragraph and character.|$|R
