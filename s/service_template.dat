21|88|Public
5000|$|The {{definition}} of a [...] "service:" [...] URL and the allowed attributes for the URL are specified by a <b>service</b> <b>template,</b> a formalized description of the URL syntax and the attributes. Service templates are defined in RFC 2609.|$|E
40|$|The OASIS TOSCA {{specification}} [OAS 13 b] aims at {{enhancing the}} portability and interoperability of cloud-based applications {{by providing a}} language to describe and manage them across heterogeneous clouds. A cloud-based application is modelled by a <b>service</b> <b>template,</b> an orchestration of typed nodes which can be in turn instantiated by matching [BS 13] other service templates. In this paper we present a methodology to non-intrusively adapt a <b>service</b> <b>template</b> S into a new <b>service</b> <b>template</b> newS which exactly matches a node type N, and hence to easily reuse any actual service modelled by S to deploy cloud-based applications that rely on N...|$|E
30|$|The {{customer}} {{sends the}} <b>Service</b> <b>Template</b> of his/her {{application to the}} QuARAM Service Recommender.|$|E
5000|$|Fewer project <b>{{template}}s</b> (e.g. Windows <b>services</b> <b>template</b> and Excel Workbook template are unavailable) ...|$|R
40|$|In {{order to}} satisfy the need for {{sophisticated}} experiment and simulation management solutions for the scientific user community, various frameworks must be provided. Such frameworks include APIs, <b>services,</b> <b>templates,</b> patterns, GUIs, command line tools, and workflow systems that are specifically addressed towards the goal of assisting in the complex process of experiment and simulation management. Workflow by itsel...|$|R
40|$|Abstract—Service-oriented {{enterprise}} systems, {{which tend}} to be heterogeneous, loosely coupled, long-lived, and continuously running, have to cope with frequent changes to their requirements and the environment. In order to address such changes, applications need to be inherently flexible and adaptive, supported by appropriate infrastructures. In this paper, we propose a model-driven approach for the dynamic adaptation of Web services based on ontology-aware <b>service</b> <b>templates.</b> Model-driven engineering raises the level of abstraction from concrete Web service implementations to high-level service models, which leads to more flexible and automated adaptations through template designs and transformations. The ontological semantics enhances the service matching capabilities required by the dynamic adaptation process. <b>Service</b> <b>templates</b> are based on OWL-S descriptions and provide the necessary means to capture and parameterize specific behavior patterns of service models. In this paper, we apply our approach {{in the context of the}} EU-funded ALIVE project and illustrate, as an example, how the proposed framework supports the adaptation of the authentication mechanism used by an interactive tourist recommendation system...|$|R
40|$|Abstract: Cloud {{computing}} {{is changing}} the way enterprises develop and deploy information systems. With the rapid development and successful implementations of the model-driven architecure(MDA) and service-oriented architecture (SOA), clouding computing has {{become the focus of}} researches. This paper describes the design and implementation of a <b>service</b> <b>template</b> markup language (STML) and its integrated development tools, which provide a comprehensive solution to the reconfiguration of applications over cloud computing platforms. In the paper, we first analyze and point out the limitations of current software reconfiguration approaches, then propose a framework for a SMDA-based approach to software reconfiguration in a PaaS platform, next present a series of PaaS service models and an XML-based <b>service</b> <b>template</b> markup language, finally conclude by an example showing the practicability of the tools. 1...|$|E
40|$|The {{paradigm}} shift to service management opens {{a new dimension}} in management. In this paper we {{address the issue of}} dynamic service provisioning. The vision is that users would be able to review a set of services or service packages, select or customize a package, whereupon a service provider checks the request, clicks an “execute ” button, and the services are turned on, monitored and managed. Such a vision is hard to achieve. A first step towards dynamic service provisioning is to develop a framework for a service provisioning system (SPS). The key issues of the framework are (i) the concept of a <b>service</b> <b>template,</b> and (ii) the idea of looking at a <b>service</b> <b>template</b> as a case and applying case-based reasoning method...|$|E
40|$|The OASIS TOSCA {{specification}} aims at {{enhancing the}} portability of cloud applications by defining a language {{to describe and}} manage them across heterogeneous clouds. A <b>service</b> <b>template</b> is defined as an orchestration of typed nodes, which can be instantiated by matching other service templates. In this paper, we define and implement the notions of exact and plug-in matching between TOSCA service templates and node types. We then define two other types of matching (flexible and white-box), each permitting to ignore larger sets of non-relevant syntactic differences when type-checking service templates with respect to node types. The paper also describes how a <b>service</b> <b>template</b> that plug-in, flexibly or white-box matches a node type can be suitably adapted so as to exactly match it...|$|E
40|$|To {{adapt to}} {{continuously}} changing workloads in networks, {{components of the}} running network services {{may need to be}} replicated (scaling the network service) and allocated to physical resources (placement) dynamically, also necessitating dynamic re-routing of flows between service components. In this paper, we propose JASPER, a fully automated approach to jointly optimizing scaling, placement, and routing for complex network services, consisting of multiple (virtualized) components. JASPER handles multiple network services that share the same substrate network; services can be dynamically added or removed and dynamic workload changes are handled. Our approach lets service designers specify their services on a high level of abstraction using <b>service</b> <b>templates.</b> From the <b>service</b> <b>templates</b> and a description of the substrate network, JASPER automatically makes scaling, placement and routing decisions, enabling quick reaction to changes. We formalize the problem, analyze its complexity, and develop two algorithms to solve it. Extensive empirical results show the applicability and effectiveness of the proposed approach...|$|R
40|$|Service-oriented {{enterprise}} systems, {{which tend}} to be heterogeneous, loosely coupled, long-lived, and continuously running, have to cope with frequent changes to their requirements and the environment. In order to address such changes, applications need to be inherently flexible and adaptive, supported by appropriate infrastructures. In this paper, we propose a model-driven approach for the dynamic adaptation of Web services based on ontology-aware <b>service</b> <b>templates.</b> Model-driven engineering raises the level of abstraction from concrete Web service implementations to high-level service models, which leads to more flexible and automated adaptations through template designs and transformations. The ontological semantics enhances the service matching capabilities required by the dynamic adaptation process. <b>Service</b> <b>templates</b> are based on OWL-S descriptions and provide the necessary means to capture and parameterize specific behavior patterns of service models. In this paper, we apply our approach {{in the context of the}} EU-funded ALIVE project and illustrate, as an example, how the proposed framework supports the adaptation of the authentication mechanism used by an interactive tourist recommendation system...|$|R
5000|$|... {{contact and}} support {{information}} about the <b>service</b> or <b>template</b> (owner, responsible organization, support contact, manager, etc.) ...|$|R
40|$|In this paper, we {{describe}} {{a case study}} of the design and development of a group-conferencing tool suite, built on top of an overlay network based event dissemination framework, which is extensible via quality of <b>service</b> <b>template</b> plug-ins. We explain, for each of the tools, how the framework built-in conveniences were explored to create simple but effective distributed solutions, backed by the appropriate quality of service templates, whose design we also discuss...|$|E
3000|$|The Requirement/deployment entity {{extractor}} component {{receives the}} TOSCA <b>Service</b> <b>Template</b> {{of the application}} from the customer and extracts the application requirements, customer preferences, and the deployment entities of the application. It provides a couple of [...].csv documents based on this information and sends them to the recommendation manager, which in turn distributes them to the other components. To evaluate, select and integrate services for an application deployment, the platform uses the case-based recommender, the service search engine and the service consolidator components.|$|E
40|$|<b>Service</b> <b>Template</b> Version 1. 01 This Standardized DCP {{has been}} adopted as a Standardized DCP by the Steering Committee of the UPnP Forum, {{pursuant}} to Section 2. 1 (c) (ii) of the UPnP Forum Membership Agreement. UPnP Forum Members have rights and licenses defined by Section 3 of the UPnP Forum Membership Agreement to use and reproduce the Standardized DCP in UPnP Compliant Devices. All such use is subject {{to all of the}} provisions of the UPnP Forum Membership Agreement...|$|E
40|$|Template-based {{composition}} of web services is considered as useful middle-way between their manual ’programming in the large’ and fully automatic ’AI-planning-style’ composition. This is also relevant for applications analysing {{the content and}} structure of the web space. As simple proof of concept, we simulate this approach on a collection of <b>services,</b> <b>templates,</b> data objects and ontological knowledge, all implemented in Prolog. The underlying task is multi-way recognition of sites containing pornography, understood as instance of classification task...|$|R
30|$|The Topology and Orchestration Specification for Cloud Applications (TOSCA) [55], is an {{emerging}} standard that enhances service and application portability in a vendor-neutral ecosystem. TOSCA specification describes a meta-model for defining IT services. This metamodels defines both {{the structure of}} a service (topology model of a service) and its operational aspects (such as how to deploy, terminate, and manage this <b>service).</b> <b>Service</b> <b>templates</b> are interpreted by a TOSCA-compliant environment (e.g. OpenTOSCA [56]), which operates the cloud services and manages their instances [54].|$|R
5000|$|The latest NetExpert Neon {{solution}} {{offers more}} out-of-the-box features, such as <b>service</b> model <b>templates</b> and wizards for increased usability, reducing {{the challenges of}} rule-based customization.|$|R
40|$|Traditional survey based {{measures}} of service quality are argued to be problematic when reflecting individual services and turning measurement into action. This paper reviews developments to an alternative measurement approach, the <b>Service</b> <b>Template</b> Process and offers an extension to it. The extended process appears able to measure service users’ and deliverers’ perceptions of service quality independently. It also enables participants to jointly agree {{an agenda for}} quality improvement. The extended process is evaluated in four service situations. The paper concludes with {{an assessment of the}} advantages and disadvantages of the process in comparison with more traditional, approaches to measuring service quality. </p...|$|E
40|$|In a service-oriented architecture, {{adaptive}} and evolvable applications {{should be}} able to select, configure and compose different existing application services to deal with the changes which can arise from runtime contextual changes or the change of user requirements and preferences. To support this, hybrid service composition approaches have been proposed, in which the core of the application logic is specified in terms of processes, while rules are employed to specify the conditions and constraints to adapt the application behaviour. The rules are then exposed as a decision service which can be employed by the process to make adaptation decision with respect to runtime circumstances. The interaction between processes and decision services are generally performed in a synchronous request-response manner. We argue that such an interaction is not efficient to support different types of adaptation at runtime and therefore asynchronous interaction should also be supported. In this paper, we present an adaptive service provisioning architecture and a decision <b>service</b> <b>template</b> allowing both synchronous request-response interaction and asynchronous notification. To motivate the proposed architecture and the decision <b>service</b> <b>template,</b> we use a blood pressure monitoring scenario from the homecare domain. We also explain the implementation of the proposed approach based on commercially available rule and process engines. Finally, we discuss: 1) what is the efficient way (synchronous request-response interaction vs. asynchronous notification) of calling decision service to execute different types of decision rules; and 2) to what extent the use of a decision service facilitates dealing with unforeseen changes...|$|E
40|$|International audienceFor many {{students}} and lecturers evaluation {{is confined to}} some form of survey. Whilst these can provide useful feedback, their focus is likely to reflect the values and norms of those commissioning and undertaking the evaluation. For real improvements in quality to occur both lecturers' and students' perspectives of factors that are important need to be made explicit and understood. Drawing upon literature relating to service quality and in particular the <b>Service</b> <b>Template,</b> this article outlines and evaluates an alternative approach for establishing students' and lecturers' perspectives, obtaining feedback and developing an agenda for improvement. Using the example of dissertation supervision, it is argued that a revised Template Process operating within a process consultation framework can meet these concerns. The article concludes with a discussion of the applicability of the Template Process to evaluating teaching and learning...|$|E
5000|$|Rational Asset Manager handles {{any kind}} of asset, such as applications, components, patterns, {{software}} that runs systems and products, <b>services,</b> frameworks, <b>templates,</b> etc. Rational Asset Manager includes the following functionality: ...|$|R
50|$|There {{is also a}} <b>Service</b> Provider <b>Template</b> {{for various}} {{individual}} providers (such as Anveo and Phone Power) built into {{the current generation of}} devices; earlier devices used an online wizard to automate the configuration process.|$|R
5000|$|EVB-IT: These are {{supplementary}} {{conditions of}} contracts regarding the procurement of IT <b>services.</b> The <b>templates</b> for call for bids, derived from these supplementary conditions, require reformulation because they discriminate against businesses that offer free and open-source software-based solutions.|$|R
40|$|With the {{popularity}} of the Web services technology, more and more software systems?functionalities become available by being published and registered as Web services. Registered Web services need to be dynamically combined to form composite services when individual simple services fail to meet service requestors?complex service needs. In this article, we propose a semi-automatic approach to composite Web services discovery, description and invocation. We present an intelligent registry with constraint matching capabilities to support composite service discovery and description. It provides a user interface to interactively compose a service request. It then uses a semi-automatic mechanism and a search algorithm to construct a composite <b>service</b> <b>template</b> that satisfies the request. The operations of the template are bound to registered service operations by constraint matching subsequently. The resulting composite service is specified in the Web Services Flow Language. A composite service processor is designed to execute composite services by invoking the component service operations of various service providers...|$|E
40|$|This paper {{presents}} a formalization of the Web Service composition problem as a search problem in an AND/OR graph, and a search algorithm for searching the graph to identify composite service(s) that satisfies a Web Service request. Given a service request {{that can only}} be satisfied by a composition of Web Services, we identify the service categories that are relevant to the request and dynamically construct an AND/OR graph to capture the input/output dependencies among the Web Services of these service categories. The graph is modified, based on the information provided in the service request. The search algorithm is then used to search the modified AND/OR graph for a minimal and complete composite <b>service</b> <b>template</b> that satisfies the service request. The algorithm can be applied repeatedly to the graph to search for alternative templates until the result is approved by the service requester. We have evaluated the algorithm both analytically and experimentally, and the experiment results are presented...|$|E
40|$|Introduction: Despite {{research}} showing cost effective positive outcomes for community pharmacy asthma services, {{there has been}} no wider practice translation. Studies show a structured asthma service by specially trained pharmacists, improves health outcomes significantly with pharmacist and patient satisfaction. Can these trained pharmacists incorporate the asthma service into daily practice, post-trial? Aims: To investigate barriers to implementation and sustainability of an evidence-based asthma service and then create and trial a ‘practice-ready’ model. Methods: Qualitative semi-structured interviews with 19 pharmacists from previous pharmacy asthma service trial 1. 5 - 2 years post trial, exploring the nature of currently offered services and thoughts on barriers and future directions. Then, streamlining of original trial <b>service</b> <b>template</b> to be ‘practice ready’, then trialling in 10 patients for feasibility and acceptability. Post-service qualitative semi-structured patient interviews to explore experiences and preferences. Results: The majority of interviewed pharmacists wanted to continue service provision however structural barriers (lack of professional support, remuneration and time) meant none had done so. Pharmacist self-reported improvement in clinical management of asthma patients post trial participation. ‘Practice ready’ template 50...|$|E
40|$|Abstract. SOA {{modeling}} is {{a method}} of analyzing business processes and describing key functions by using a common service model. <b>Service</b> Description <b>Template</b> method helps you identify, describe and categorize services in your organization. This is a necessary step when you have decided to adopt SOA modeling as a means towards Service Oriented Enterprise as your final goal. In this paper, I will emphasize the management viewpoint {{in order to help}} them understand what consumers expect from different <b>services.</b> However, the <b>template</b> can be extended to cover a wide range of service semantics, for example service resourcing. Fortex Consulting conducted this analysis for Metso Minerals (a global Finnish metal industry company) in order to identify IT/BPD services for business and to develop a methodology for a larger scale survey being planned. The result is a straightforward procedure for assessing current processes and defining key functions by using a generalized <b>Service</b> Description <b>Template.</b> Web <b>services</b> are about implementation but this method is about abstraction – business logic. However, a service described using this method may well be implemented as a Web service later on. ...|$|R
5000|$|At the time, Steinfeld was {{the only}} {{employee}} of NoBrainerBlinds.com. He took phone calls on his personal cell phone while driving to and from Laura’s Draperies appointments. Although he was manually inputting customer information, Steinfeld utilized answering <b>services</b> and <b>template</b> forms to make the business seem more established.|$|R
50|$|Overall, the {{performance}} as a secret service were rather poor. After the war began, the network of agents in enemy countries was quickly removed as the agents were arrested. The Secret Service could not provide information about enemy intentions and operational deployment plans. The enemy situation Editor of News Department (from 1917 Foreign Armies) at the General Staff were more suspicions delivered as facts. Often the reports of the intelligence proved wrong. The enemy situation arranger wrong with the secret IIIb writing. Since the enemy situation editors {{no knowledge of the}} seriousness of the sources of the intelligence <b>service</b> <b>templates,</b> these reports could not be assessed clearly. Therefore, there was in the assessment of the enemy situation a mishap after another. The fundamental error lay in the separation of news gathering and analysis.|$|R
30|$|The {{authors of}} [11] are {{motivated}} by the business need to quickly develop and deploy solutions, {{in order to reduce}} the time to market for telecom services. They address the use of templates to skip the repeated development phases of traditional creation techniques. In order to become a new <b>service</b> <b>template,</b> a workflow must be carefully analyzed so that its use can be generalized. If approved for that purpose, the general behavior of the service must be extracted and the specific parts of the workflow must be marked as service configurable points. Like in our proposal, generic workflows may be instantiated for different solutions according to parameters specific to each case. Still, this approach does not make clear the role division between business and IT personnel, whereas our approach does consider different levels of templates of patterns and delegates different responsibilities in the service creation process. We advocate that this separation of activities is important to leverage the flexibility of service creation (i.e., allow the creation in various environments) and that a well-defined role assignment helps to understand each part of the creation and eases the automation of these specific activities.|$|E
30|$|A query to {{the system}} {{is in the form}} of a TOSCA [31] <b>Service</b> <b>Template</b> for an application, which is defined using a set of Normative Types. This {{template}} includes the deployment entities of the application, application requirements, and customer preferences. The QuARAM Service Recommender extracts the information and sends it to the recommendation manager, which sends a query based on this information to the case-based recommender subsystem. The case-based recommender searches for similar cases and proposes a solution. The recommended solution is given a similarity value that indicates how similar it is to the target case. If the customer is not satisfied with the recommendations or the similarity values of all solutions are less than a specified threshold, the system searches for a suitable service for each deployment entity separately. This search involves both the case-based recommender and the service search engine which searches among all available offerings in the clouds. When the system finds a suitable service for every deployment entity, it consolidates the services, where possible, to improve the resource utilization and reduce the deployment costs. Then, a set of recommendations is suggested to the customer. Based on the selection of the customer (customer selection feedback) a case is added to the case base. Monitoring systems also provide feedback on the service performance with respect to QoS requirements. This feedback is used to update the case bases. In this section we describe the different components of the QuARAM Service Recommender system and how they interact to provide recommendations for service selection.|$|E
40|$|Provisioning cloud {{computing}} solutions is a tedious and long process, especially when configuring many components {{and not only}} offering the application but also the infrastructure. Today, an administrator has to upload, install and configure all the components of a software solution manually, which not only takes time and is prone to errors but also increases the onboarding costs at the cloud provider. Decreasing deployment times {{by the use of}} an automated system is favored. TOSCA provides a specification which allows the deployment and management of cloud services by providing a meta-model. With {{that it is possible to}} mitigate all problems in theory. OpenTOSCA is a framework called container, which can interpret the TOSCA specification and is used in this work to deploy an Enterprise Content Management stack on a cloud environment, testing the boundaries of its capabilities. After designing deployment models by the means of a domain specific modeling approach, an implementation is realized and compiled into a deployment file. This file is also called a container file and is processed by OpenTOSCA to initiate the deployment on the cloud environment, including the necessary middleware. The goal of this diploma thesis is to develop a TOSCA <b>Service</b> <b>Template,</b> that provides a topology model and automates the deployment of ECM core components. TOSCA Node Types for the middleware and application components have to be defined. To further help modeling the topology, a domain specific model (DSM) will be introduced by generically defining all components and their operations. That generic model will be used to realize the actual ECM stack components. The ECM stack is then deployed via OpenTOSCA and the execution is reviewed...|$|E
40|$|We {{present the}} {{motivation}} {{and design of}} CCBROnto, an OWL Ontology for Conversational Case-Base Reasoning (CCBR). We use this ontology to define cases that can eventually be stored, retrieved and reused by a mixed-initiative approach based on CCBR. We apply this technique for retrieving Web <b>Service</b> Composition <b>templates.</b> Categories and Subject Descriptor...|$|R
40|$|Developing cross-organizational {{business}} processes is a tedious task. The partners {{have to agree}} on a common data format and meaning {{as well as on the}} Quality of Service (QoS) requirements each partner has to fulfill. The QoS requirements are typically described using Service Level Agreements (SLAs) among the partners. In this paper, we propose a top-down modeling approach for Web service based {{business processes}} to capture the functional and non-functional aspects using a choreography language (WS-CDL) which describes the message interactions among the participants. The choreography is annotated with SLAs for the different partners. For each partner in the process, an orchestration (in WS-BPEL) and the necessary Web <b>service</b> <b>templates</b> are automatically generated. Additionally, the Service Level Objectives (SLOs) from the partner SLAs are automatically translated into policies which can then be enforced by a BPEL engine during execution. 1...|$|R
40|$|The {{proliferation}} of Web Services is fostering {{the need for}} service-discovery and composition tools to provide more personalisation during the service retrieval process. In this paper, we describe the motivating details behind PreDiCtS, a framework for personalised service-retrieval. In our approach we consider that similar service composition problems can be tackled {{in a similar manner}} by reusing and adapting past composition best practices or templates. The proposed retrieval process uses a mixed- initiative technique based on Conversational Case-Based Reasoning (CCBR), that provides i) for a clearer identification of the user’s service requirements and ii) based on these requirements, finds suitable <b>service</b> <b>templates</b> that satisfy the user’s goal. We discuss how retrieval can vary through the use of different CCBR algorithms and how adaptation can be performed over the retrieved templates thus providing the personalisation feature in PreDiCtS. peer-reviewe...|$|R
