10000|2461|Public
5|$|The language, and {{implementations}} thereof, {{should provide}} support for <b>software</b> <b>engineering</b> principles such as strong type checking, array bounds checking, detection of attempts to use uninitialized variables, and automatic garbage collection. Software robustness, durability, and programmer productivity are important.|$|E
5|$|GoldenEye 007 {{received}} multiple year-end awards, {{including the}} BAFTA Interactive Entertainment Games Award in 1998, and four awards from the Academy of Interactive Arts & Sciences: Console Action Game of the Year, Console Game of the Year, Interactive Title of the Year, and Outstanding Achievement in <b>Software</b> <b>Engineering.</b> Rare was also recognised for its {{work on the}} game and won the BAFTA award for Best UK Developer.|$|E
5|$|Industries include aerospace, {{electronic}} goods, pharmaceuticals, printed goods, <b>software</b> <b>engineering,</b> telecommunications, textile {{and apparel}} manufacturing, tobacco, petrochemicals, and transportation. The service sector is also strong and includes civil, mechanical and process engineering, finance, higher education, {{and research and}} development. In 2002, Montreal was the fourth-largest centre in North America in terms of aerospace jobs.|$|E
40|$|The {{paper that}} follows was {{submitted}} {{to satisfy the}} requirements of DISS 725 Spring 2001 – System Development: Research Paper 2. <b>Software</b> requirements <b>engineering</b> {{lies at the heart of}} system development life cycle (SDLC) methodologies. The key objective of the <b>software</b> requirements <b>engineering</b> process is to specify a system that in the end will be successful. <b>Software</b> requirements <b>engineering</b> acts as a conduit between the needs of users and the capabilities of software technologies. In the following pages, the paper began with an introduction to the <b>software</b> requirements <b>engineering</b> process. In this discussion, the five phases of <b>software</b> requirements <b>engineering</b> were discussed: elicitation, analysis, specification, verification, and management. This was followed by an in-depth look at current issues and best practices in <b>software</b> requirements <b>engineering.</b> In addition, <b>software</b> requirements <b>engineering</b> methodologies and tools were explored. The paper concluded with a summary of current best practices in <b>software</b> requirements <b>engineering</b> along with recommendations for their use. Chapter...|$|R
5000|$|Computer <b>Engineering</b> (<b>Software),</b> Mechanical <b>Engineering,</b> Marine engineering, Civil Engineering, Electrical Engineering,Chemical Engineering ...|$|R
3000|$|Data {{dominant}} software—i.e. consumer-oriented software, business-oriented <b>software,</b> {{design and}} <b>engineering</b> <b>software</b> {{as well as}} information display and transaction entry [...]...|$|R
25|$|Lero, the Irish <b>Software</b> <b>Engineering</b> Research Centre {{with the}} University of Limerick, University College Dublin and Trinity College Dublin is a {{partnership}} {{to bring together}} and focus <b>software</b> <b>engineering</b> in Ireland.|$|E
25|$|From its beginnings, <b>software</b> <b>{{engineering}}</b> {{has helped}} shape modern systems engineering practice. The techniques {{used in the}} handling of the complexities of large software-intensive systems have had a major effect on the shaping and reshaping of the tools, methods and processes of <b>Software</b> <b>Engineering.</b>|$|E
25|$|Capability Maturity Model {{from the}} <b>Software</b> <b>Engineering</b> Institute.|$|E
5000|$|... #Article: Wuhan Vocational College of <b>Software</b> and <b>Engineering</b> ...|$|R
5000|$|Ingeniería en Desarrollo de <b>Software</b> (<b>Software</b> Development <b>Engineering)</b> ...|$|R
5000|$|... #Caption: The Hasso Plattner Institute for <b>Software</b> Systems <b>Engineering</b> ...|$|R
25|$|<b>Software</b> <b>Engineering</b> Laboratory, {{shared by}} only CSE and departments.|$|E
25|$|Team Software Process (TSP) {{from the}} <b>Software</b> <b>Engineering</b> Institute.|$|E
25|$|In Fall 2002, Carnegie Mellon {{initiated}} a full-time and part-time Masters of Science in <b>Software</b> <b>Engineering.</b> The <b>Software</b> <b>Engineering</b> Masters {{are divided into}} a Technical Track, aimed at advancing software developers to senior positions and architect roles, and the Development Management Track, aimed at providing software developers with technical project management and development management skills.|$|E
5000|$|Two key {{ideas of}} Computer-aided <b>Software</b> System <b>Engineering</b> (CASE) are: ...|$|R
5000|$|Klaus Pohl (born 1960 as Klaus Mussgnug in Karlsruhe) is a German {{computer}} scientist and Professor for <b>Software</b> Systems <b>Engineering</b> at the University of Duisburg-Essen, mainly {{known for his}} work in Requirements <b>Engineering</b> and <b>Software</b> product line <b>engineering.</b>|$|R
40|$|One of {{the biggest}} risks in <b>software</b> {{requirements}} <b>engineering</b> is the risk of overemphasizing one quality attribute requirement (e. g., performance) {{at the expense of}} others at least as important (e. g., evolvability and portability). This paper describes an exploratory knowledge-based tool for identifying potential conflicts among quality attributes early in the software/system life cycle. The Quality Attribute Risk and Conflict Consultant (QARCC) examines the quality attribute tradeoffs involved in software architecture and process strategies (e. g., one can improve portability via a layered architecture, but usually at some cost in performance). It operates in the context of the USC-CSE WinWin system, a groupware support system for determining software and system requirements as negotiated win conditions. Keywords: <b>Software</b> requirements <b>engineering,</b> <b>Software</b> quality, WinWin, Spiral Model, <b>Software</b> Architectures, Concurrent <b>engineering,</b> <b>Software</b> risk analysis, Knowledge based software en [...] ...|$|R
25|$|Among them, the School of Computer Science and <b>Software</b> <b>Engineering</b> is the {{amalgamation}} {{between the}} Department of Computer Science and Technology {{and the former}} <b>Software</b> <b>Engineering</b> Institute {{which is one of}} the 35 statewide pilot schools of <b>software</b> <b>engineering</b> granted by Ministry of Education in 2001; the International College of Chinese Studies is among the eight State Bases for Teaching Chinese as a Foreign Language, certified by the Ministry of Education. ECNU is designated as one of the National Liberal Arts and Basic Sciences Training and Research Bases in its disciplines of Chinese, History, Mathematics, Geography, Psychology and Physics.|$|E
25|$|IDEF0 is a {{function}} modeling methodology for describing manufacturing functions, which offers {{a function}}al modeling language for the analysis, development, re-engineering, and integration of information systems; business processes; or <b>software</b> <b>engineering</b> analysis. It {{is part of the}} IDEF family of modeling languages in the field of <b>software</b> <b>engineering,</b> and is built on the functional modeling language building SADT.|$|E
25|$|In 2013, Majora Carter {{joined the}} Advisory Board {{member of the}} Bronx Academy of <b>Software</b> <b>Engineering</b> High School.|$|E
5000|$|Founders of Intentia (part of Lawson <b>Software),</b> (Industrial <b>Engineering</b> and Management) ...|$|R
50|$|Jessica Tess McKellar is an American <b>software</b> developer, <b>engineering</b> manager, and author.|$|R
50|$|The <b>Software</b> Process <b>Engineering</b> Metamodel (SPEM) is an OMG-standard for meta-process modeling.|$|R
25|$|In <b>software</b> <b>engineering,</b> behavior-driven {{development}} (BDD) is {{a software}} development process {{that emerged from}} test-driven development (TDD).|$|E
25|$|Ranjith Tharayil -Holds 8 patents {{in fields}} related to <b>software</b> <b>engineering</b> {{and is also}} an ACM Distinguished Speaker.|$|E
25|$|Dijkstra's {{ideas about}} {{programming}} methodology (especially the structured programming movement) helped lay {{the foundations for}} the birth {{and development of the}} professional discipline of <b>software</b> <b>engineering</b> (in particular the software design and development), enabling programmers to organize and manage increasingly complex software projects. In the late 1960s Dijkstra discussed the concept of program families. And in the mid 1970s David Parnas and others clarified the idea and showed how to apply it in <b>software</b> <b>engineering</b> principles.|$|E
5000|$|Lionel C. Briand, Canada Research Chair in <b>Software</b> Quality <b>Engineering,</b> Carleton University.|$|R
40|$|Abstract—Traditional parser {{generators}} use deterministic parsing methods. These {{methods can}} not meet the parsing requirements of <b>software</b> reverse <b>engineering</b> effectively. A new parser generator is presented which can generate GLR parser with automatic error recovery. The generated GLR parser has comparable parsing speed with the traditional LALR(1) parser {{and can be used}} in the parsing of <b>software</b> reverse <b>engineering...</b>|$|R
40|$|This {{document}} {{describes the}} 2003 SNL ASCI <b>Software</b> Quality <b>Engineering</b> (SQE) assessment of twenty ASCI application code teams {{and the results}} of that assessment. The purpose of this assessment was to determine code team compliance with the Sandia National Laboratories ASCI Applications <b>Software</b> Quality <b>Engineering</b> Practices, Version 2. 0 as part of an overall program assessment...|$|R
25|$|As of fall 2016, the {{top five}} most popular {{undergraduate}} majors at SJSU were (in descending order of popularity) design studies, psychology, kinesiology, business administration/marketing and biological sciences. As of fall 2016, {{the top five}} most popular graduate programs were (in descending order of popularity) <b>software</b> <b>engineering,</b> electrical engineering, computer engineering, library and information sciences and industrial/systems engineering. Programs somewhat unique to SJSU include aviation, transportation management, meteorology, <b>software</b> <b>engineering,</b> and sustainable and green manufacturing technology.|$|E
25|$|In 1996, RIT {{also became}} the first college in the U.S to offer a <b>Software</b> <b>Engineering</b> degree at the {{undergraduate}} level.|$|E
25|$|Extended Enterprise Modeling Language (EEML) in <b>software</b> <b>engineering</b> is a {{modelling}} {{language used}} for Enterprise modelling across {{a number of}} layers.|$|E
5000|$|Andy Johnson-Laird (pioneer in {{computer}} forensics, <b>software</b> reverse <b>engineering</b> and forensic <b>software</b> analysis) ...|$|R
40|$|<b>Software</b> Quality <b>Engineering</b> is an {{emerging}} discipline that {{is concerned with}} improving the approach to software quality. It is important that this discipline be firmly rooted in a quality model satisfying its needs. In order to define the needs of this discipline, the meaning of quality is broadly defined by reviewing {{the literature on the}} subject. <b>Software</b> Quality <b>Engineering</b> needs a quality model that is usable throughout the software lifecycle and that it embraces all the perspectives of quality. The goal {{of this paper is to}} propose a quality model suitable for such a purpose, through the comparative evaluation of existing quality models and their respective support for <b>Software</b> Quality <b>Engineering...</b>|$|R
40|$|The second {{international}} {{workshop on}} Open and Original Problems in <b>Software</b> Language <b>Engineering</b> (OOP-SLE' 14) follows {{the first one}} held at WCRE 2013 in Koblenz. It {{is meant to be}} a discussion-oriented and collaborative forum for formulating and addressing with open, unsolved and unsolvable problems in <b>software</b> language <b>engineering</b> (SLE), which is a research domain of systematic, disciplined and measurable approaches of development, evolution and maintenance of artificial languages used in software development. OOPSLE aims to serve as a think tank for identifying and formulating challenges in the <b>software</b> language <b>engineering</b> field - these challenges could be addressed later at venues like SLE, MODELS, CSMR, WCRE, ICSM and others...|$|R
