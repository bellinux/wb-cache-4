5|80|Public
2500|$|The spider seldom initiates hunting {{behavior}} to still prey, and interrupts ongoing hunting behavior when the prey ceases to move. When pursuing a prey, {{it at first}} moves rapidly, slowing down as it comes near the prey. Within [...] of the prey, it presses its body {{close to the ground}} and draws the legs in toward the body. At about , it becomes still in this crouched position, attaches a <b>safety</b> <b>thread</b> to the ground, and jumps at the prey. When attacking large prey, it may take a curved course in order to jump on it from behind.|$|E
40|$|Abstract. Threads {{can easily}} be {{implemented}} using first-class continuations, but the straightforward approaches for doing so lead to space leaks, especially in a language with exceptions like Standard ML. We show how these space leaks arise and give a new implementation for threads that is safe for space. Keywords: continuations, coroutines, Standard ML, space <b>safety,</b> <b>thread...</b>|$|E
40|$|Spider {{dragline}} {{is used by}} {{many members}} of the Araneae family not only as a proteinogenic <b>safety</b> <b>thread</b> but also for web construction. Spider dragline has been shown to possess high tensile strength in combination with elastic behavior. This high tensile strength {{can be attributed to the}} presence of antiparallel β-sheets within the thread; these antiparallel β-sheets are why the protein is classified as a silk. Due to the properties of spider silk and its technical and medical uses, including its use as a suture material and as a scaffold for tissue regeneration, spider dragline is a focus of the biotechnology industry. The production of sufficient amounts of spider silk is challenging, as it is difficult to produce large quantities of fibers because of the cannibalistic behavior of spiders and their large spatial requirements. In recent years, the heterologous expression of genes coding for spider silk analogs in various hosts, including plants such as Nicotiana tabacum, has been established. We developed a simple and scalable method for the purification of a recombinant spider silk protein elastin-like peptide fusion protein (Q-/K-MaSp 1 - 100 × ELP) after heterologous production in tobacco leaves involving heat and acetone precipitation. Further purification was performed using centrifugal Inverse Transition Cycling (cITC). Up to 400 mg of highly pure spider silk protein derivatives can be isolated from six kilograms of tobacco leaves, which is the highest amount of silk protein derivatives purified from plants thus far...|$|E
50|$|The latest major {{overhaul}} was in 2004-2006. The station was repaired {{as well as}} upgraded for ADA-accessibility. The MTA repaired the staircases, retiled the walls, added new tiles to the floors, upgraded the station's lights and public address system, installed ADA yellow <b>safety</b> <b>threads</b> along the platform edge and replaced the trackbeds for all trains entering or bypassing the station. It also installed elevators on both platforms, as well as elevators to the street level.|$|R
50|$|This {{station was}} renovated again from 1990-1994. In {{addition}} to upgrading the same elements that were replaced {{in the previous}} overhaul, tiling on floors and track walls, the public announcement system, and <b>safety</b> <b>threads</b> along platform edges and track-beds were replaced. It also included an art installation by Emmett Wigglesworth called CommUnion. It features twenty-two panels of various designs in the recessed area of the platform tiles above the station signs and other designs on the openings in the track walls.|$|R
50|$|The {{referenced}} object must {{be protected}} separately to ensure <b>thread</b> <b>safety.</b>|$|R
40|$|Thesis (M. Ed.) [...] North-West University, Potchefstroom Campus, 2008. This {{study was}} {{undertaken}} in five (5) farm {{schools in the}} Maquassi Hills Area Project Office (APO) with the intention to assess whether the School Management Teams (SMT's) are given necessary guidance to deal with {{health and well-being of}} schools. The Constitution of South Africa stipulates that human values (dignity, freedom and equality) form the most important challenges that condone and maintain that a safe and discipline environment should be created for effective teaching and learning. Focus group interviews were conducted to gather information which was relevant to the study. The findings show that SMT's of farm schools have problems with the managerial tasks as well as the functional tasks of schools' daily activities. The researcher infers that both the landowners and the DoE must ensure that electricity and water is provided where contractual agreements exist, as power affects the usage of visual aids and administering school businesses. The Department of Education (DoE) has no legal structure within which farm schools should operate to guarantee equal educational opportunities, and create a positive disciplined schools where learners and educators not only know what is expected, but feel secure. The officials who are responsible for the dispatch of learning support materials (LSM) hold the SMT's back in assigning duties to the educators because of lack of LSM. The study shows that the official seem to be ignorant of basic education to farm school learners, and how the DoE manages farm schools, reflects how it still clanged to the red-tape of funding farm schools. Other essentials like water and phones are not given attention to communicate problems that need immediate attention like illness, danger or accident. Learners still have to travel long distances which is a <b>safety</b> <b>thread.</b> The researcher eludes that it {{is in the interest of}} the landowners and the DoE that the conditions that prevail on farm schools should not impede with the work of the SMT's. The landowners and the DoE should come to a consensus in making the school environment for SMT's inviting. The DoE through school-based support teams from Area Project Office (APO) should support SMT's and guide them in managerial tasks. Master...|$|E
50|$|Below {{we discuss}} two {{approaches}} for avoiding race conditions to achieve <b>thread</b> <b>safety.</b>|$|R
50|$|This station's 1970s {{overhaul}} included fixing {{its structure}} and the overall appearance by replacing the original wall tiles, old signs, and incandescent lighting to the 1970s modern look wall tile band and tablet mosaics, signs and fluorescent lights. It also included fixing staircases and platform edges. In 2001, the station received a major state of repairs, including upgrading for ADA compliance, restoring the original late 1910s tiling, repairing the staircases, re-tiling for the walls, new tiling on the floors, upgrading the station's lights and the public address system, installing ADA yellow <b>safety</b> <b>threads</b> along the platform edge, new signs, and new trackbeds in both directions.|$|R
5000|$|Mutexes {{may also}} provide {{deletion}} <b>safety,</b> where the <b>thread</b> holding the mutex cannot be accidentally deleted.|$|R
50|$|The station's {{overhaul}} in {{the late}} 1960s included extending the station platforms required for 10 car trains, and fixing the station's structure and the overall appearance (including the staircases and platform edges), replacing the original wall tiles, old signs, and incandescent lighting to the 70's modern look wall tile band and tablet mosaics, signs and fluorescent lights. In 2001, the station received a state of repairs including upgrading the station for ADA compliance and restoring the original late 1910s tiling, repairing the staircases, re-tiling for the walls, new tiling on the floors, upgrading the station's lights and the public address system, installing ADA yellow <b>safety</b> <b>threads</b> along the platform edge, new signs, and new trackbeds in both directions.|$|R
50|$|This complex was {{overhauled}} in {{the late}} 1970s. The Transit Authority fixed the station's structure and renovated its appearance. The overhaul replaced the original wall tiles, old signs, and incandescent lighting to the '70s modern look wall tile band and tablet mosaics, signs and fluorescent lights. It also fixed staircases and platform edges. In the early 1990s, the station received another major repair, which included an upgrade for ADA-accessibility and modernized wall tiling. The MTA repaired the staircases, re-tiling for the walls, installed new tiling on the floors, upgraded the station's lights and the public address system, installing ADA <b>safety</b> <b>threads</b> along the platform edge, new signs, and new track-beds in both directions.|$|R
50|$|This {{station was}} {{overhauled}} {{in the late}} 1970s. The MTA fixed the station's structure and overall appearance, replacing the original wall tiles, old signs, and incandescent lighting with 1970s modern-look wall tile band and tablet mosaics, signs and fluorescent lights. It also fixed staircases and platform edges. In 2002, the station received a major overhaul. It received state-of-art repairs {{as well as an}} upgrade of the station for ADA compliance and restoration the original late 1910s tiling. The MTA repaired the staircases, re-tiling for the walls, installed new tiling on the floors, upgraded the station's lights and the public address system, and installed ADA yellow <b>safety</b> <b>threads</b> along the platform edges, new signs, and new track-beds in both directions.|$|R
40|$|Robots and {{autonomous}} {{systems in}} general are set to suffer similar cybersecurity problems that computers have been facing for decades. This is not only worrying for critical tasks such as those performed by surgical, or military robots but also for household robots such as vacuum cleaners or for teleconference robots compromise privacy and safety of their owners. What will happen if these robots are hacked? This study presents a survey on the cybersecurity attacks associated with service robots, and as a result, a taxonomy that classifies the risks faced by users when using service robots, distinguish ing between security and <b>safety</b> <b>threads,</b> is presented. We also present the robot software development phase as one the most relevant ones {{for the security of}} robots...|$|R
50|$|In {{the late}} 1960s, New York City Transit {{extended}} the platforms for 10 car trains, and fixed the station's {{structure and the}} overall appearance. They replaced the original wall tiles, signs, and incandescent lighting with a 1970s style wall tile band and tablet mosaics, signs and fluorescent lights. It also fixed staircases and platform edges. In 2001, the station received a major overhaul. It included an upgrade of the station for ADA compliance and restoration of the original late 1910s tiling. New York City Transit repaired the staircases, re-tiled the walls, fitted new tiling on the floors, upgraded the station's lights and the public address system, installing ADA yellow <b>safety</b> <b>threads</b> along the platform edge, new signs, and new trackbeds in both directions.|$|R
5000|$|Mechanisms {{for adding}} {{security}} and reliability verification to the language: extended static checking, dependent typing, information flow control, static <b>thread</b> <b>safety.</b>|$|R
40|$|The MPI- 2 Standard has {{carefully}} specified {{the interaction}} between MPI and usercreated threads, {{with the goal of}} enabling users to write multithreaded programs while also enabling MPI implementations to deliver high performance. However, a simple reading of the thread-safety specification does not reveal what its implications are for an implementation and what implementers must be aware (and careful) of. In this paper, we describe and analyze what the MPI Standard says about <b>thread</b> <b>safety</b> and what it implies for an implementation. We classify the MPI functions based on their thread-safety requirements and discuss several issues to consider when implementing <b>thread</b> <b>safety</b> in MPI. We had to deal with many of these issues when designing and implementing <b>thread</b> <b>safety</b> in MPICH 2. We use the example of generating new context ids (required for creating new communicators) to demonstrate how a simple solution for the single-threaded case cannot be used when there are multiple threads and how a naïve thread-safe algorithm can be expensive. We then present an algorithm for generating context ids that works efficiently in both single-threaded and multithreaded cases. Key words: Message Passing Interface (MPI), <b>thread</b> <b>safety,</b> MPI implementation, multithreaded programming...|$|R
40|$|Toll gates {{are usually}} {{considered}} an inconvenience by travelers {{not only for}} the cost of the toll, but also for the delays at toll booths, toll roads and bridges. In order to ensure a steady flow of traffic, both staff and drivers require easy access to an efficient communication system covering the specific requirements of toll gates. In this way, hitches can be resolved while maintaining a convenient toll gate system. Security systems can also be added, which will further enhance the system. In this paper we are adding various safety & security measures to the modern toll gate system to avoid the security and <b>safety</b> <b>threads.</b> This paper is designed using a FPGA Xilinx Spartan 3 AN with the help of VLSI technology. We calculate the amount based upon weight so vehicle user cannot loss the money. In this paper we are using Gas sensor for recognizing unwanted gases...|$|R
40|$|Abstract. MPI {{implementations}} {{that support}} {{the highest level of}} <b>thread</b> <b>safety</b> for user programs, MPI THREAD MULTIPLE, are becoming widely available. Users often expect that different threads can execute independently and that the MPI implementation can provide the necessary level of <b>thread</b> <b>safety</b> with only a small overhead. The MPI Standard, however, requires only that no MPI call in one thread block MPI calls in other threads; it makes no performance guarantees. Therefore, some way of measuring an implementation’s performance is needed. In this paper, we propose a number of performance tests that are motivated by typical application scenarios. These tests cover the overhead of providing the MPI THREAD MULTIPLE level of <b>thread</b> <b>safety</b> for user programs, the amount of concurrency in different threads making MPI calls, the ability to overlap communication with computation, and other features. We present performance results with this test suite on several platform...|$|R
50|$|<b>Thread</b> <b>Safety</b> Analysis is {{a static}} {{analysis}} tool for annotation-based intra-procedural static analysis, originally implemented as {{a branch of}} gcc, and now reimplemented in Clang, supporting PThreads.|$|R
5000|$|Desirable Properties—the Proposed Recommendation {{will not}} {{necessarily}} specify any properties, such as <b>thread</b> <b>safety,</b> security, and fault tolerance, but {{it should not be}} incompatible with any such useful properties.|$|R
2500|$|The {{distinctive}} [...] "Lex" [...] mosaics were preserved {{during the}} renovation, by installing pre-arranged blocks along the station wall that cup the Lexington Avenue Line above it. The wall tiles have the red [...] "Lex" [...] evenly spaced out, {{similar to the}} IND style, with blue background, green borders, and white lettering. In 2002, the station received a major overhaul. It has received a state of repairs as well as upgraded the station for ADA compliance and restoring the original late 1910s tiling. The MTA repaired the staircases, re-tiling for the walls, new tiling on the floors, upgrading the station's lights and the public address system, installing ADA yellow <b>safety</b> <b>threads</b> along the platform edge, new signs, and new trackbeds in both directions. The station could not be made ADA-compliant to install elevators on the platform, because the platform columns on the Lexington Avenue side make the platform too narrow for a wheelchair to navigate.|$|R
5000|$|Sewing kit: {{scissors}} {{can be in}} the multi-tool, a {{place to}} store the threaded needles, dental floss and fishing line may double as <b>thread,</b> Kevlar <b>thread,</b> <b>safety</b> pins for repair and fishing hooks, replacements for critical buttons or fasteners.|$|R
50|$|<b>Thread</b> <b>safety</b> is a {{computer}} programming concept applicable to multi-threaded code. Thread-safe code only manipulates shared data structures {{in a manner that}} ensures that all threads behave properly and fulfil their design specifications without unintended interaction. There are various strategies for making thread-safe data structures.|$|R
50|$|The Saab Bofors CBJ-MS {{was first}} shown in August 2000. It {{is an unusual}} weapon in several respects, not least because {{it is meant to}} fulfill the roles of PDW, assault rifle and, with the {{addition}} of a proprietary bipod and 100-round drum magazine, light support weapon. The gun features a top-mounted Picatinny rail for mounting optics, a two-stage trigger for semi-and full automatic fire, a collapsing wire stock, a grip <b>safety,</b> a <b>threaded</b> barrel, and a hollow foregrip which can be used to hold a spare magazine.|$|R
2500|$|The station complex {{underwent}} {{another major}} overhaul from 1999 to 2003, using {{funds from the}} 1987 capital program; the $49 million in funding from that program had been delayed in 1994 due to the MTA's budget issues. This time the station received {{state of the art}} repairs and was updated for ADA-accessibility, with the installation of eight elevators in the station, as well as the widening or construction of fifteen staircases. The MTA repaired the staircases, re-tiled the walls and floors, upgraded the station's lights and the public address system, installed ADA yellow <b>safety</b> <b>threads</b> along the platform edge, installed new trackbeds for local and express trains entering the IRT station, and widened the 100-year-old passageways between the stations. To achieve this, the entire IRT station had to be supported by large [...] crossbeams hanging from the roof of the station box, a construction technique that had never been used previously; the station was also supported by conventional columns from below. The entire feat raised the subway infrastructure under Flatbush Avenue, as well as the avenue itself, by less than an inch while the [...] passageways were widened from [...] In 2004, the entire station was made a NRHP landmark. Late that year, the MTA installed elevators {{on both sides of the}} platform and street level to accommodate wheelchairs and those with disabilities.|$|R
50|$|The station complex {{underwent}} {{another major}} overhaul from 1999 to 2003, using {{funds from the}} 1987 capital program; the $49 million in funding from that program had been delayed in 1994 due to the MTA's budget issues. This time the station received {{state of the art}} repairs and was updated for ADA-accessibility, with the installation of eight elevators in the station, as well as the widening or construction of fifteen staircases. The MTA repaired the staircases, re-tiled the walls and floors, upgraded the station's lights and the public address system, installed ADA yellow <b>safety</b> <b>threads</b> along the platform edge, installed new trackbeds for local and express trains entering the IRT station, and widened the 100-year-old passageways between the stations. To achieve this, the entire IRT station had to be supported by large 36 ft crossbeams hanging from the roof of the station box, a construction technique that had never been used previously; the station was also supported by conventional columns from below. The entire feat raised the subway infrastructure under Flatbush Avenue, as well as the avenue itself, by less than an inch while the 350 ft passageways were widened from 15 to 42 ft. In 2004, the entire station was made a NRHP landmark. Late that year, the MTA installed elevators {{on both sides of the}} platform and street level to accommodate wheelchairs and those with disabilities.|$|R
50|$|<b>Thread</b> <b>safety</b> {{guarantees}} usually {{also include}} design steps {{to prevent or}} limit the risk of different forms of deadlocks, as well as optimizations to maximize concurrent performance. However, deadlock-free guarantees can not always be given, since deadlocks {{can be caused by}} callbacks and violation of architectural layering independent of the library itself.|$|R
40|$|Abstract. The MPI- 2 Standard has {{carefully}} specified {{the interaction}} between MPI and user-created threads, {{with the goal of}} enabling users to write multithreaded programs while also enabling MPI implementations to deliver high performance. In this paper, we describe and analyze what the MPI Standard says about <b>thread</b> <b>safety</b> and what it implies for an implementation. We classify the MPI functions based on their thread-safety requirements and discuss several issues to consider when implementing <b>thread</b> <b>safety</b> in MPI. We use the example of generating new context ids (required for creating new communicators) to demonstrate how a simple solution for the single-threaded case cannot be used when there are multiple threads and how a naïve thread-safe algorithm can be expensive. We then present an algorithm for generating context ids that works efficiently in both single-threaded and multithreaded cases. ...|$|R
40|$|Abstract—Writing multithreaded {{programs}} is hard. Static analysis tools can help developers by allowing threading policies to be formally specified and mechanically checked. They essen-tially provide a static type system for threads, and can detect potential race conditions and deadlocks. This paper describes Clang <b>Thread</b> <b>Safety</b> Analysis, a tool which uses annotations to declare and enforce <b>thread</b> <b>safety</b> policies in C and C++ programs. Clang is a production-quality C++ compiler {{which is available}} on most platforms, and the analysis can be enabled for any build with a simple warning flag: −Wthread−safety. The analysis is deployed {{on a large scale}} at Google, where it has provided sufficient value in practice to drive widespread voluntary adoption. Contrary to popular belief, the need for annotations has not been a liability, and even confers some benefits with respect to software evolution and maintenance. I...|$|R
50|$|The GObject {{object-oriented}} programming framework implements reference counting on its base types, including weak references. Reference incrementing and decrementing uses atomic operations for <b>thread</b> <b>safety.</b> A {{significant amount of}} the work in writing bindings to GObject from high-level languages lies in adapting GObject reference counting to work with the language's own memory management system.|$|R
2500|$|Within {{a native}} [...]NET/Mono application, all code is managed; that is, it {{is governed by}} the CLI's style of memory {{management}} and <b>thread</b> <b>safety.</b> Other [...]NET or Mono applications can use legacy code, which {{is referred to as}} unmanaged, by using the System.Runtime.InteropServices libraries to create C# bindings. Many libraries which ship with Mono use this feature of the CLI, such as Gtk#.|$|R
5000|$|Immutable objects : The {{state of}} an object cannot be changed after construction. This implies both that only {{read-only}} data is shared and that inherent <b>thread</b> <b>safety</b> is attained. Mutable (non-const) operations can then be implemented {{in such a way}} that they create new objects instead of modifying existing ones. This approach is used by the string implementations in Java, C# and Python.|$|R
5000|$|Within {{a native}} [...]NET/Mono application, all code is managed; that is, it {{is governed by}} the CLI's style of memory {{management}} and <b>thread</b> <b>safety.</b> Other [...]NET or Mono applications can use legacy code, which {{is referred to as}} unmanaged, by using the System.Runtime.InteropServices libraries to create C# bindings. Many libraries which ship with Mono use this feature of the CLI, such as Gtk#.|$|R
50|$|A {{program may}} execute code in several threads {{simultaneously}} in a shared address space where {{each of those}} threads has access to {{virtually all of the}} memory of every other <b>thread.</b> <b>Thread</b> <b>safety</b> is a property that allows code to run in multithreaded environments by re-establishing some of the correspondences between the actual flow of control and the text of the program, by means of synchronization.|$|R
40|$|ABSTRACT: The author {{shares his}} {{programming}} experience and performance analysis {{in making a}} parallel file compression program for the Cray XD 1. Discussion includes a practical example of combining MPI and pthreads in a single application. Issues with <b>thread</b> <b>safety</b> and MPI relative to the example program and the XD 1 are covered. The author includes an analysis of MPICH 2 using TCP/IP over RapidArray...|$|R
