8|250|Public
5000|$|<b>Structured</b> <b>Audio</b> <b>Orchestra</b> <b>Language</b> (SAOL) is an imperative, MUSIC-N {{programming}} language, {{which is}} part of the MPEG-4 audio standard, by Eric Scheirer ...|$|E
50|$|<b>Structured</b> <b>Audio</b> <b>Orchestra</b> <b>Language</b> (SAOL) is an imperative, MUSIC-N {{programming}} language designed for describing virtual instruments, processing digital audio, and applying sound effects. It was published as subpart 5 of MPEG-4 Part 3 (ISO/IEC 14496-3:1999) in 1999.|$|E
5000|$|Also MPEG-4 Part 3 audio objects, such as Audio Lossless Coding (ALS), Scalable Lossless Coding (SLS), MP3, MPEG-1 Audio Layer II (MP2), MPEG-1 Audio Layer I (MP1), CELP, HVXC (speech), TwinVQ, Text To Speech Interface (TTSI) and <b>Structured</b> <b>Audio</b> <b>Orchestra</b> <b>Language</b> (SAOL) ...|$|E
5000|$|A {{normative}} <b>Structured</b> <b>Audio</b> scheduler description - {{it is the}} supervisory run-time {{element of}} the <b>Structured</b> <b>Audio</b> decoding process.|$|R
5000|$|All opcodes that {{return a}} single value {{may be used}} as {{functions}} in the <b>orchestra</b> <b>language.</b>|$|R
50|$|MPEG-4 <b>Structured</b> <b>Audio</b> {{was cited}} by CNN {{as one of}} the top-25 {{innovations}} to arise at the Media Laboratory.|$|R
5000|$|<b>Structured</b> <b>Audio</b> <b>Orchestra</b> <b>Language</b> (SAOL), {{an audio}} {{programming}} language. SAOL is historically related to Csound and other so-called Music-N languages. It {{was created by}} an MIT Media Lab grad student named Eric Scheirer while he was studying under Barry Vercoe during the 1990s.|$|E
40|$|The MPEG- 4 Audio {{standard}} {{provides a}} toolset for Audio synthesis and Audio processing, i. e. Structured Audio (SA). SA permits to describe algorithms through its <b>Structured</b> <b>Audio</b> <b>Orchestra</b> <b>Language</b> (SAOL) programming language. Unlike some other languages {{of the same}} type, SAOL has a sample-by-sample execution structure, and this makes particularly important the overhead computation {{in case of an}} interpreted decoder implementation. This paper describes the design of an efficient virtual architecture able to exploit the data level parallelism contained in many Audio synthesis and processing algorithms and to consistently reduce the implementation overhead through a block-by-block execution...|$|E
40|$|We {{present an}} {{overview}} of the AudioBIFS system, part of the Binary Format for Scene Description (BIFS) tool in the MPEG- 4 International Standard. AudioBIFS is the tool that integrates the synthetic and natural sound coding functions in MPEG- 4. It allows the flexible construction of soundtracks and sound scenes using compressed sound, sound synthesis, streaming audio, interactive and terminal-dependent presentation, threedimensional (3 -D) spatialization, environmental auralization, and dynamic download of custom signal-processing effects algorithms. MPEG- 4 sound scenes are based on a model that is a superset of the model in VRML 2. 0, and we describe how MPEG- 4 is built upon VRML and the new capabilities provided by MPEG 4. We discuss the use of <b>structured</b> <b>audio</b> <b>orchestra</b> <b>language,</b> the MPEG- 4 SAOL, for writing downloadable effects, present an example sound scene built with AudioBIFS, and describe the current state of implementations of the standard...|$|E
40|$|The MPEG- 4 <b>Structured</b> <b>Audio</b> {{standard}} {{was created to}} enable high-quality, very-low-bitrate transmission of synthetic sound. However, structured-audio techniques also are suitable for flexible natural audio coding. This paper introduces the concept of generalized audio coding, in which the <b>Structured</b> <b>Audio</b> decoder is used to emulate the behavior of other audio decoders. We prove that the MPEG- 4 <b>Structured</b> <b>Audio</b> tool {{can be used to}} mimic the behavior of any other kind of decoder and that structured-audio coding is a universally minimal coding technique. We provide examples of simple natural audio coders that use the SA toolset, and characterize the overhead that arises in the transcoding process. Generalized audio coding removes marketplace barriers to the use of special-purpose or signal-adaptive coding formats, and thus promotes greater overall efficiency in the world of audio coding...|$|R
5000|$|As {{part of the}} MPEG-4 {{international}} standard, SAOL {{is one of the}} {{key components}} of the MPEG-4 <b>Structured</b> <b>Audio</b> toolset, along with: ...|$|R
5000|$|The sound {{descriptions}} generate audio when compiled (or interpreted) by a compliant decoder. MPEG-4 <b>Structured</b> <b>Audio</b> {{consists of}} the following major elements: ...|$|R
40|$|Research in {{multimedia}} {{for consumer}} electronics {{is dominated by}} the problem of incredibly short times-to-market, that means fast complexity estimations and fast design of new architectures. On one side more and more sophisticated and flexible applications are rapidly developed, on the other side the exponential growth in IC computational power seems to be hardly capable to keep pace with requirements for real-time applications, since their complexity is exponentially growing as well. The processor's performance, often slowed down by bottlenecks in memories and buses, is further reduced by the time wasted in communication among the several application layers. From this problem comes the conception of integrated development frameworks for simulation and design. Tools for simulation and analysis of architectures have appeared from academic and industrial research laboratories above all in the last decade. Many of them are conceived to provide low-level exact simulation of the supported devices, at the price of heavy slowdowns in simulation times and huge sizes of traced data reports. Some others, in the last years, introduced some degrees of approximation in simulations, in order to speed up execution time and to increase the flexibility of the tools to support multi-processors. The resulting more or less abstract models are anyway not suitable to analyze real multimedia-oriented applications, where programs are usually available in some languages including dedicated libraries and meaningful results are only those measured in function of time. On another level, tools for hardware/software codesign or for block-based system design provide more useful results, but to be effective they must rely on rigid cores that may allow only a few degrees of reconfigurability; some very recent tools are conceived to design complex systems by modeling blocks through a high level description language. Conversely, the virtual model and related tool proposed in this dissertation have their roots in an approach to the analysis of complexity that aims to be, as far as possible, platform independent. The method is based on the concepts of abstract classes of operations and simulation in function of the performance time. The work described in this dissertation finds its application field in the world of multimedia, more precisely in multimedia-oriented Audio applications. Media applications are commonly programmed by imperative or object-oriented languages, which are composed by many different statements, operators and above all standard libraries. A careful profiling of typical applications permits to detect fundamental operations and functions and to define a virtual instruction set, grouping more or less similar operators and breaking functions into basic building blocks. The resulting virtual instruction set does not correspond to any actual one but it has as property to be easily mapped on a large number of existing ones. The simulation of an architecture requires then the availability of measures, benchmarks or estimations of at least one member of each abstract class. The number of classes, i. e. the complexity vector, can be adapted in length and detail to the needed degree of precision and to the available set of actual measures and/or benchmarks. The input to the simulation is described by a high-level standardized programming language, the new MPEG- 4 <b>Structured</b> <b>Audio</b> <b>Orchestra</b> <b>Language</b> (SAOL); in principle, it may also be the case that the application does not need any translation, if it is already available in this format. Moreover, simulation through a high-level language permits to trace the behavior of the target architecture in function of the internal time of the application itself, result that is fundamental when the related workload is highly variable as in downloadable and/or interactive scenarios. In such cases complexity has always been considered a guess. The new virtual model for analyses of complexity led to two main practical results: the proposed method of simulation has been used to define complexity levels for Structured Audio in the MPEG- 4 Standard, and consequently the platform independent analyzer has become the MPEG- 4 reference software for MPEG- 4 SA Conformance test. a virtual instruction set has been conceived that has permitted the implementation of an efficient Structured Audio decoder, SAINT, based on a virtual interpreted DSP core. The flexibility of the SAINT virtual DSP approach has permitted a fast porting of its execution engine on a superscalar VLIW DSP, {{making it one of the}} building blocks of the ThreeDSPACE system, a framework for advanced rendering of 3 -D Audio scenes based on MPEG- 4 descriptions. The complete tool for simulation of architectures, including a cache simulator, has shown promising results, achieving estimations of the execution time of SAINT with an approximation of the 10 % in the mean for a general purpose processor, and of the 20 % for a very complex superscalar VLIW processor. Estimated programs have sometimes dynamic excursions of a factor 10 in their complexity along the time axis. In general, the experimental results can be considered in line with those of the most recent, state-of-the-art simulators presented in literature. A limitation of the language adopted to model the applications is that its generality is limited to onedimensional floating-point computation; the most relevant advantage is that simulation in function of the performance time is straightforward and provides the time-dependent results that are fundamental for the optimization of real-time applications. With the tool developed in this PhD work, complex programs can be quickly modeled thanks to SA specific libraries and also quickly analyzed; moreover, the tool can be easily extended to become a tool for automatic generation and configuration of the main building blocks of a system running the application, or the class of applications, under consideration. The proposed model is finally intended as an alternative approach to coordinate two sides; a principal goal of this work was to conceive and specify a systematic analysis method that can be useful to both the software programmer and to the hardware system engineer. The former can benefit of a reconfigurable and dedicated highlevel software tool able to profile programs in a simple and platform independent manner and to easily simulate, with some margins of error, the behavior of a specific platform, existing or virtual; the latter can exploit complexity estimations in an abstract format, with the possibility to study the target application in its several aspects (operations, memory usage, data flows among the different program blocks) and the potentiality to extend these results to an automatic generation of high-level system architectures. La recherche dans le multimédia pour l'électronique de consommation est dominée par le problème du temps de marché extrêmement court, ce qui signifie des estimations rapides de complexité et des conceptions rapides d'architectures. D'une part des applications de plus en plus sophistiquées et flexibles sont rapidement développées; d'autre part la croissance exponentielle dans la puissance de calcul des circuits intégrés semble être à peine capable de suivre les conditions requises par les applications temps réel, car leur complexité croît aussi de façon exponentielle. La performance d'un processeur, souvent réduite par la vitesse limitée des mémoires et des bus, est ultérieurement diminuée par le temps perdu dans la communication entre les différents niveaux de l'application. De ce problème, naît la conception de cadres de développement intégrés pour l'intégration et la simulation. Les outils pour la simulation et l'analyse d'architectures sont diffusés par des laboratoires de recherche académiques et industriels surtout dans cette dernière décennie. La plus part d'entre eux sont conçus pour obtenir une simulation exacte de bas niveau des dispositifs supportés, au prix de forts ralentissements dans le temps de simulation et d'énormes tailles des fichiers de données à la sortie. Quelques autres, dans les dernières années, ont introduit des degrés d'approximation dans les simulations, pour accélérer le temps d'exécution et pour augmenter la flexibilité des outils afin de supporter les multiprocesseurs. Les modèles résultants, plus ou moins abstraits, ne sont de toute façon pas aptes à l'analyse des vraies applications orientées au multimédia, où les programmes sont habituellement disponibles dans un langage qui inclut des librairies dédiées et les résultats significatifs sont seulement ceux mesurés en fonction du temps. A un autre niveau, les outils pour le hardware/software codesign ou pour la conception de systèmes basé sur des blocs donnent des résultats plus utiles, mais pour être efficaces ils doivent s'appuyer sur des noyaux rigides qui ne permettent que peu de reconfiguration; des outils très récents sont conçus pour projeter des systèmes complexes en manipulant des blocs à travers des langages de description de haut niveau. Le modèle virtuel et son outil relatif proposés dans ce rapport s'inspirent au contraire d'une approche à l'analyse de la complexité qui veut être le plus possible indépendant de la plate forme. La méthode est basée sur les concepts de classes d'opérations abstraites et de simulation en fonction du temps de performance. Le travail décrit dans ce rapport trouve son champ d'application dans le monde du multimédia, plus précisément dans les applications audio orientées multimédia. Les applications multimédia sont communément programmées par des langages impératifs ou orientés objets qui sont composés par plusieurs différents instructions, opérateurs et surtout librairies standard. Une analyse de profil attentive des applications typiques permet de détecter les opérations et les fonctions fondamentales et de définir un jeu d'instructions virtuel, en regroupant les opérateurs plus ou moins similaires et en subdivisant les fonctions en blocs de base qui les constituent. Le résultant jeu d'instruction virtuel ne correspond à aucun autre réel; au contraire il a comme propriété d'être facilement converti en un grand nombre de jeux existants. La simulation d'une architecture requiert donc la disponibilité de mesures ou d'estimations d'au moins un membre de chaque classe abstraite. Le nombre de classes, c'est-à-dire le vecteur de complexité, peut être adapté en longueur et en détail au degré nécessaire de précision et à la quantité disponible de mesures. L'entrée de la simulation est décrite par un langage de programmation standard de haut niveau : le nouveau MPEG- 4 <b>Structured</b> <b>Audio</b> <b>Orchestra</b> <b>Language</b> (SAOL); en principe, il n'est pas exclu qu'aucune traduction soit nécessaire pour l'application, si celle-ci est déjà disponible dans ce format. En plus, la simulation à travers un langage de haut niveau permet de tracer le comportement de l'architecture simulée en fonction du temps de l'application même, résultat qui est fondamental quand sa charge de travail est fortement variable comme dans des scénarios interactifs. Dans ces cas la complexité a toujours été considérée comme une chose à deviner. Le nouveau modèle virtuel pour l'analyse de la complexité a amené deux résultats pratiques principaux : la méthode de simulation proposée a été utilisée pour définir les niveaux de complexité pour l'outil « Structured Audio » de la norme MPEG- 4, et par conséquent l'analyseur, indépendant de la plate forme, est devenu le logiciel de référence pour le test de Conformance de MPEG- 4 SA. un jeu d'instruction virtuel a été conçu; il a permis l'implémentation d'un décodeur efficace pour SA : SAINT, basé sur un noyau virtuel de DSP interprété. La flexibilité du DSP virtuel de SAINT a permis un transfert rapide de son moteur d'exécution vers un DSP superscalaire VLIW, ce qui a fait de lui un des blocs composants de ThreeDSPACE, système pour la diffusion avancée de scènes Audio 3 -D basées sur des descriptions MPEG- 4. L'outil complet pour la simulation d'architecture, qui contient un simulateur de mémoire cache, a montré des résultats prometteurs, obtenant des estimations du temps d'exécution de SAINT avec une approximation de 10 % en moyenne pour des processeurs general purpose et de 20 % pour un processeur superscalaire VLIW très complexe. Les programmes estimés ont parfois des variations d'un facteur 10 dans leur complexité le long de l'axe du temps. En général, les résultats expérimentaux peuvent être considérés comparables à ceux des plus récents simulateurs décrits dans la littérature. Une limite du langage utilisé pour la modélisation des applications est que sa généralité est limitée à des calculs à une dimension en virgule flottante; le plus grand avantage est que la simulation en fonction du temps de la performance est très facile et donne des résultats dépendants du temps qui sont fondamentaux pour l'optimisation des applications en temps-réel. Avec l'outil développé dans ce travail de doctorat des programmes complexes peuvent être modélisés rapidement grâce aux librairies spécifiques de SA et aussi analysés rapidement; de plus, l'outil peut être facilement étendu pour devenir un outil de génération automatique et de configuration des blocs de base principaux du système qui réalise les applications considérées. En conclusion, le modèle proposé est pensé comme une approche alternative pour coordonner deux côtés : un des objectifs principaux de ce travail à été de concevoir une méthode d'analyse systématique qui puisse être utile en même temps au programmateur de logiciels et à l'ingénieur des systèmes hardware. Le premier peut bénéficier d'un outil de haut niveau reconfigurable et spécifique capable de analyser le profil des programmes de façon simple et indépendante de la plate forme et de simuler facilement, avec des marges d'erreur, le comportement d'une plate forme existante ou virtuelle; le deuxième peut exploiter des estimations de complexité en forme abstraite, avec la possibilité d'étudier les applications envisagées dans ses divers aspects (opérations, utilisation de la mémoire, flux de données entre les différents blocs du programme) et avec la potentialité d'étendre ces résultats vers la génération automatique d'architectures de système...|$|E
40|$|Research in {{multimedia}} {{for consumer}} electronics {{is dominated by}} the problem of incredibly short times-to-market, that means fast complexity estimations and fast design of new architectures. On one side more and more sophisticated and flexible applications are rapidly developed, on the other side the exponential growth in IC computational power seems to be hardly capable to keep pace with requirements for real-time applications, since their complexity is exponentially growing as well. The processor's performance, often slowed down by bottlenecks in memories and buses, is further reduced by the time wasted in communication among the several application layers. From this problem comes the conception of integrated development frameworks for simulation and design. Tools for simulation and analysis of architectures have appeared from academic and industrial research laboratories above all in the last decade. Many of them are conceived to provide low-level exact simulation of the supported devices, at the price of heavy slowdowns in simulation times and huge sizes of traced data reports. Some others, in the last years, introduced some degrees of approximation in simulations, in order to speed up execution time and to increase the flexibility of the tools to support multi-processors. The resulting more or less abstract models are anyway not suitable to analyze real multimedia-oriented applications, where programs are usually available in some languages including dedicated libraries and meaningful results are only those measured in function of time. On another level, tools for hardware/software codesign or for block-based system design provide more useful results, but to be effective they must rely on rigid cores that may allow only a few degrees of reconfigurability; some very recent tools are conceived to design complex systems by modeling blocks through a high level description language. Conversely, the virtual model and related tool proposed in this dissertation have their roots in an approach to the analysis of complexity that aims to be, as far as possible, platform independent. The method is based on the concepts of abstract classes of operations and simulation in function of the performance time. The work described in this dissertation finds its application field in the world of multimedia, more precisely in multimedia-oriented Audio applications. Media applications are commonly programmed by imperative or object-oriented languages, which are composed by many different statements, operators and above all standard libraries. A careful profiling of typical applications permits to detect fundamental operations and functions and to define a virtual instruction set, grouping more or less similar operators and breaking functions into basic building blocks. The resulting virtual instruction set does not correspond to any actual one but it has as property to be easily mapped on a large number of existing ones. The simulation of an architecture requires then the availability of measures, benchmarks or estimations of at least one member of each abstract class. The number of classes, i. e. the complexity vector, can be adapted in length and detail to the needed degree of precision and to the available set of actual measures and/or benchmarks. The input to the simulation is described by a high-level standardized programming language, the new MPEG- 4 <b>Structured</b> <b>Audio</b> <b>Orchestra</b> <b>Language</b> (SAOL); in principle, it may also be the case that the application does not need any translation, if it is already available in this format. Moreover, simulation through a high-level language permits to trace the behavior of the target architecture in function of the internal time of the application itself, result that is fundamental when the related workload is highly variable as in downloadable and/or interactive scenarios. In such cases complexity has always been considered a guess. The new virtual model for analyses of complexity led to two main practical results: the proposed method of simulation has been used to define complexity levels for Structured Audio in the MPEG- 4 Standard, and consequently the platform independent analyzer has become the MPEG- 4 reference software for MPEG- 4 SA Conformance test. a virtual instruction set has been conceived that has permitted the implementation of an efficient Structured Audio decoder, SAINT, based on a virtual interpreted DSP core. The flexibility of the SAINT virtual DSP approach has permitted a fast porting of its execution engine on a superscalar VLIW DSP, {{making it one of the}} building blocks of the ThreeDSPACE system, a framework for advanced rendering of 3 -D Audio scenes based on MPEG- 4 descriptions. The complete tool for simulation of architectures, including a cache simulator, has shown promising results, achieving estimations of the execution time of SAINT with an approximation of the 10 % in the mean for a general purpose processor, and of the 20 % for a very complex superscalar VLIW processor. Estimated programs have sometimes dynamic excursions of a factor 10 in their complexity along the time axis. In general, the experimental results can be considered in line with those of the most recent, state-of-the-art simulators presented in literature. A limitation of the language adopted to model the applications is that its generality is limited to onedimensional floating-point computation; the most relevant advantage is that simulation in function of the performance time is straightforward and provides the time-dependent results that are fundamental for the optimization of real-time applications. With the tool developed in this PhD work, complex programs can be quickly modeled thanks to SA specific libraries and also quickly analyzed; moreover, the tool can be easily extended to become a tool for automatic generation and configuration of the main building blocks of a system running the application, or the class of applications, under consideration. The proposed model is finally intended as an alternative approach to coordinate two sides; a principal goal of this work was to conceive and specify a systematic analysis method that can be useful to both the software programmer and to the hardware system engineer. The former can benefit of a reconfigurable and dedicated highlevel software tool able to profile programs in a simple and platform independent manner and to easily simulate, with some margins of error, the behavior of a specific platform, existing or virtual; the latter can exploit complexity estimations in an abstract format, with the possibility to study the target application in its several aspects (operations, memory usage, data flows among the different program blocks) and the potentiality to extend these results to an automatic generation of high-level system architectures...|$|E
40|$|Abstract. In {{recent years}} {{podcasting}} {{has been in}} great demand as a recreation and a learning tool. In this paper we describe the design and implementation of a system for automatically converting documents to <b>structured</b> <b>audio.</b> Our prototype is a Web-based service for preparing <b>structured</b> <b>audio</b> material to download on portable mp 3 players. The on-line service is especially designed to aid users with special needs, such as the visually impaired. Ultimately, this would enhance comprehension for all...|$|R
5000|$|<b>Structured</b> <b>Audio</b> Score Language (SASL) - {{is used to}} {{describe}} the manner in which algorithms described in SAOL are used to produce sound.|$|R
50|$|MPEG-4 <b>Structured</b> <b>Audio</b> is an ISO/IEC {{standard}} for describing sound. It was published as subpart 5 of MPEG-4 Part 3 (ISO/IEC 14496-3:1999) in 1999.|$|R
40|$|The MPEG- 4 {{standard}} defines numerous {{tools that}} represent the state-of-the-art in representation, transmission, and decoding of multimedia data. Among these is {{a new type of}} audio standard, termed “Structured Audio”. The MPEG- 4 standard for <b>structured</b> <b>audio</b> allows for the efficient, flexible description of synthetic music and sound effects, and the use of synthetic sound in synchronization with natural sound in interactive multimedia scenes. A discussion of the capabilities, technological underpinnings, and application of MPEG- 4 <b>Structured</b> <b>Audio</b> is presented...|$|R
5000|$|<b>Structured</b> <b>Audio</b> Sample Bank Format (SASBF) - {{allows for}} the {{transmission}} of banks of audio samples {{to be used in}} 'wavetable' sample-based synthesis (based on SoundFont and DownLoadable Sounds) ...|$|R
40|$|Structured-audio {{techniques}} are a recent development in audio coding that develop new {{connections between the}} existing practices of audio synthesis and audio compression. A theoretical basis for this coding model is presented, grounded in information theory and Kolmogorov complexity theory. It is demonstrated that algorithmic <b>structured</b> <b>audio</b> can provide higher compression ratios than other techniques for many audio signals and proved rigorously that it can provide compression at least as good as every other technique (up to a constant term) for every audio signal. The MPEG- 4 <b>Structured</b> <b>Audio</b> standard is the first practical application of algorithmic coding theory. It points the direction toward a new paradigm of generalized audio coding, in which structured-audio coding subsumes all other audio-coding techniques. Generalized audio coding offers new marketplace models that enable advances in compression technology to be rapidly leveraged toward the solution of problems in audio coding. Index Terms [...] -Audio compression, MPEG- 4, sound synthesis, <b>structured</b> <b>audio.</b> I...|$|R
50|$|The MPEG-4 SA project {{developed}} at the Media Lab made <b>structured</b> <b>audio</b> a practical reality and the Aspen Movie Map was the precursor to the ideas in Google Street View.|$|R
40|$|The saolc {{package is}} the {{reference}} {{software for the}} <b>Structured</b> <b>Audio</b> part of the MPEG- 4 Audio standard (ISO 14496 - 3 Section 5). saolc provides non-real-time decoding of <b>Structured</b> <b>Audio</b> bitstreams, and demonstrates the proper functioning of a normative SA decoder. The structure of saolc is documented for implementors who wish {{to make use of}} the reference software, beginning at a high-level overview and proceeding to a list of important data structures and a module-by-module description. Bugs, extensions, and areas of non-conformance to the paper specification are documented. This documentation augments the internal documentation provided by comments in the code. Content...|$|R
50|$|He is {{best known}} as the {{inventor}} of Csound, a music synthesis language with wide usage among computer music composers. SAOL, the underlying language for the MPEG-4 <b>Structured</b> <b>Audio</b> standard, is also historically derived from Csound.|$|R
40|$|This paper {{introduces}} {{the concept of}} generalized audio coding, in which the <b>Structured</b> <b>Audio</b> decoder is used to emulate the behavior of other audio decoders. We prove that the MPEG- 4 <b>Structured</b> <b>Audio</b> tool {{can be used to}} mimic the behavior of any other kind of decoder and that structured-audio coding is a universally minimal coding technique. We provide examples of simple natural audio coders that use the SA toolset, and characterize the overhead that arises in the transcoding process. Generalized audio coding removes marketplace barriers to the use of special-purpose or signal-adaptive coding formats, and thus promotes greater overall efficiency in the world of audio coding. INTRODUCTIO...|$|R
500|$|... (<b>audio).</b> London Philharmonic <b>Orchestra,</b> Nicholas Braithwaite conducting; Lorraine McAslan solo violin ...|$|R
50|$|Developed {{over many}} years, it {{currently}} has nearly 1700 unit generators. One of its greatest strengths {{is that it}} is completely modular and extensible by the user. Csound is closely related to the underlying language for the <b>Structured</b> <b>Audio</b> extensions to MPEG-4, SAOL.|$|R
5000|$|Rossini: Overtures, Piero Gamba conducts the London Symphony <b>Orchestra</b> (<b>Audio</b> CD 1990) ...|$|R
40|$|In this paper, {{we discuss}} the control of a {{physical}} model of a string instrument, the acoustic guitar. Both non-parametric and parametric inputs are described, and the specific implementation issues using the MPEG- 4 Structured <b>Orchestra</b> <b>Language</b> are addressed. This results in a multi-layered model, including a MIDI interpreter, a score-level Finite State Machine and a core signal processing routine. 1...|$|R
40|$|In {{this paper}} work to improve upon {{the design of}} <b>structured</b> <b>audio</b> {{messages}} called Earcons {{for use in a}} concurrent spatialised audio environment is described. Issues involving the limitations of current Earcon design are briefly described, and solutions to these limitations involving Auditory Scene Analysis are presented...|$|R
5000|$|The Prism <b>Orchestra</b> <b>Audio</b> CD (January 1, 1990) Owl Recording, Inc., ASIN: B0000WVWX2 ...|$|R
5000|$|Across 110th Street, Spanish Harlem <b>Orchestra,</b> (<b>Audio</b> Production, Engineer, Executive Producer, Mastering, Mixing, Producer), 2004 ...|$|R
5000|$|Rossini: Overtures, Piero Gamba conducts the London Symphony <b>Orchestra</b> (<b>Audio</b> CD 2004) Original {{recording}} remastered ...|$|R
50|$|The MPEG-4 Part 3 {{consists}} {{of a variety of}} audio coding technologies - from lossy speech coding (HVXC, CELP), general audio coding (AAC, TwinVQ, BSAC), lossless audio compression (MPEG-4 SLS, Audio Lossless Coding, MPEG-4 DST), a Text-To-Speech Interface (TTSI), <b>Structured</b> <b>Audio</b> (using SAOL, SASL, MIDI) and many additional audio synthesis and coding techniques.|$|R
40|$|The NewsComm system {{delivers}} personalized {{news and}} other program material as audio to mobile users through a hand-held playback device. This paper {{focuses on the}} iterative design and user testing of the hand-held interface. The interface was first designed and tested in a software-only environment and then ported to a custom hardware platform. The hand-held device enables navigation through audio recordings based on structural information which is extracted from the audio using digital signal processing techniques. The interface design addresses the problems of designing a hand-held and primarily non-visual interface for accessing large amounts of <b>structured</b> <b>audio</b> recordings. KEYWORDS Audio interfaces, hand-held computers, <b>structured</b> <b>audio.</b> INTRODUCTION This paper describes {{the design of the}} interface for a hand-held device called NewsComm (Figure 1) which provides mobile access to dynamic databases of large audio recordings. The motivation for this work is to deliver personalized [...] ...|$|R
5000|$|Bright {{light for}} mezzo-soprano, clarinet, drums & <b>orchestra</b> <b>Audio</b> CD, Release date: 4.8.2006, Label: MGB, DDD, 1989 ...|$|R
40|$|The MPEG- 4 {{standard}} {{has been}} proposed to provide high quality audio and video content over the Internet. This content is represented {{in the form of}} audiovisual objects. However, different parts of the audiovisual scene are encoded seperately depending {{on the nature of the}} data to be encoded. The standard calls for aggresive coding techniques which ensure reception of high quality audio and video at low bit rates. One such encoding scheme for audio, generally applied to synthetic audio and sound effects, is known as <b>Structured</b> <b>Audio.</b> This paper presents a survey on the structured representation of sound and the ways it can be decoded and synthesized at the receiving terminal. All the different components of the audio scene are decoded seperately (<b>Structured</b> <b>Audio</b> is one of the components). The different decoded streams are then composed into one coherent sound signal and presented to the user. This audio composition in MPEG- 4 is accomplished by the AudioBIFS layer in the MPEG- 4 decoder. The nodes in this layer compose the different sounds together and also provide some abstract effects and virtual reality effects post-processing on the entire audio scene. Some of the post-processing can also be represented in the <b>structured</b> <b>audio</b> format that is used for synthetic sound encoding. This project focuses on the working of the AudioBIFS layer, specifically the nodes in this layer which rely use a structured representation encode postprocessing of audio effects, such as reverbrations. I...|$|R
