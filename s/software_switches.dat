37|219|Public
5000|$|Network {{solutions}} {{are available in}} both reliable circuit-switched (telephone like) architectures and flat, IP architectures with soft (<b>software)</b> <b>switches.</b>|$|E
50|$|Later, some {{motherboard}} chipsets of Intel 80286-based computers implemented {{an expanded}} memory scheme {{that did not}} require add-on boards, notably the NEAT chipset. Typically, <b>software</b> <b>switches</b> determined how much memory should be used as expanded memory and how much should be used as extended memory.|$|E
5000|$|Like {{the second}} {{generation}} Prius, the third generation Prius battery pack {{is made up of}} the same type of 1.2 volt cells. It has 28 modules of 6 cells for a total nominal voltage of only 201.6 volts. A boost converter is used to produce 500 Volt DC supply voltage for the inverters for MG1 and MG2. The car's electronics only allow 40% of total rated capacity of the battery pack (6,5 Ampère hour) to be used in order to prolong the battery life. As a result, the SoC is allowed to vary only between 40% and 80% of the rated full charge. The battery used in the Highlander Hybrid and the Lexus RX 400h was packaged in a different metal battery casing with 240 cells that deliver high voltage of 288 volts. A button labelled [...] "EV" [...] maintains electric vehicle mode after being powered on and under most low-load conditions at less than 25 mph if the traction battery has enough charge. This permits all-electric driving with no fuel consumption for up to 1 mi. However, the HSD <b>software</b> <b>switches</b> to EV mode automatically whenever it can. Only the Toyota Prius Plug-in Hybrid has a longer driving all-electric range in blended operation electric-gasoline of 11 mi (EPA rating) until the battery is depleted. The Prius PHEV is outfitted with 4.4 kWh lithium-ion batteries co-developed with Panasonic that weighs 80 kg compared with the nickel-metal hydride battery of the third generation Prius, which has a capacity of only 1.3 kWh, and weighs 42 kg. The larger battery pack enables all-electric operation at higher speeds and longer distances than the conventional Prius hybrid.|$|E
50|$|In June 2012, Infoblox {{released}} LINC, an open-source OpenFlow version 1.2 and 1.3 compliant <b>software</b> <b>switch.</b>|$|R
30|$|Forwarding in the FITS testbed is {{performed}} by the Open vSwitch [9] <b>software</b> <b>switch,</b> deployed in all FITS nodes. The <b>software</b> <b>switch</b> performs packet forwarding between VMs and through the physical network. Open vSwitch implements a Flow Table, allowing network management {{through the use of}} flows. One of the possible interfaces for interaction with Open vSwitch is the OpenFlow protocol. Therefore, the integration of the VMs with the OpenFlow network is possible through the use of Open vSwitch. Other OpenFlow-enabled switches can be used, although there are none in the current stage.|$|R
50|$|On September 16, 2008, VMware {{announced}} a collaboration with Cisco Systems. One {{result was the}} Cisco Nexus 1000V, a distributed virtual <b>software</b> <b>switch,</b> an integrated option in the VMware infrastructure.|$|R
30|$|We {{evaluate}} {{the viability of}} MPI using a real SDN system. In this system, we deploy a controller, four hardware SDN switches, four <b>software</b> <b>switches,</b> a load balancer, and eight end hosts and two servers in a linear topology.|$|E
40|$|International audienceThe design shift {{proposed}} by OpenFlow, with its simple stateless dataplane, initially {{contributed to the}} success of Software-Defined Networks. Its lack of state, however, prevents the implementation of many dataplane algorithms. Network applications must therefore offload stateful operations to the control plane, thereby increasing latency and limiting network scalability. Thus, recent research efforts centered on the addition of stateful properties to switches. In this paper, we discuss the impact of emerging programmable dataplane abstractions on network monitoring. In particular, we investigate the need for dataplane states in the design of scalable monitoring applications. We argue that these abstractions are ill-suited for <b>software</b> <b>switches</b> as they retain hardware-specific limitations. Furthermore, we analyse the impact of stateful dataplane designs on the control plane visibility of the network. Finally, we identify opportunities for improvement in the design of stateful <b>software</b> <b>switches...</b>|$|E
40|$|The current {{infrastructure}} as {{a service}} (IaaS) cloud systems, allow users to load their own virtual machines. However, most of these systems do not provide users with an automatic mechanism to load a network topology of virtual machines. In order to specify and implement the network topology, we use <b>software</b> <b>switches</b> and routers as network elements. Before running a group of virtual machines, the user needs to set up the system once to specify a network topology of virtual machines. Then, given the user’s request for running a specific topology, our system loads the appropriate virtual machines (VMs) and also runs separated VMs as <b>software</b> <b>switches</b> and routers. Furthermore, we have developed a manager that handles physical hardware failure situations. This system has been designed in order to allow users to use the system without knowing all the internal technical details...|$|E
50|$|If {{the user}} {{turns off the}} {{wireless}} transmitter/receiver using either a hardware or <b>software</b> <b>switch,</b> Intel AMT cannot use the wireless interface under any conditions until the user turns on the wireless transmitter/receiver.|$|R
25|$|From 1981-85 Bridges {{wrote the}} RAM disk drivers, utilities, {{cracking}} <b>software,</b> task <b>switching</b> <b>software,</b> and memory test diagnostics for Abacus, {{a maker of}} large memory cards for the Apple II.|$|R
5000|$|Hotspots - This {{program has}} similar user {{characteristics}} to SAW, but {{is designed for}} point and click environments. In addition to scanning user defined spots on the screen it can annotate these with sounds, images and text. It is easy to make simple <b>software</b> <b>switch</b> accessible.|$|R
40|$|The planned {{upgrades}} of {{the experiments}} at the Large Hadron Collider at CERN will require higher bandwidth networks for their data acquisition systems. The network congestion problem arising from the bursty many-to-one communication pattern, typical for these systems, will become more demanding. It is questionable whether commodity TCP/IP and Ethernet technologies in their current form will be still able to effectively adapt to the bursty traffic without losing packets due to the scarcity of buffers in the networking hardware. We continue our study {{of the idea of}} lossless switching in software running on commercial-off-the-shelf servers for data acquisition systems, using the ATLAS experiment as a case study. The flexibility of design in software, performance of modern computer platforms, and buffering capabilities constrained solely by the amount of DRAM memory are a strong basis for building a network dedicated to data acquisition with commodity hardware, which can provide reliable transport in congested conditions. In this paper we extend the popular software switch, Open vSwitch, with a dedicated, throughput-oriented buffering mechanism for data acquisition. We compare the performance under heavy congestion of typical Ethernet switches to a commodity server acting as a switch, equipped with twelve 10 Gbps Ethernet interfaces providing a total bandwidth of 120 Gbps. Preliminary results indicate that <b>software</b> <b>switches</b> with large packet buffers perform significantly better, reaching maximum bandwidth, and completely avoiding throughput degradation typical for hardware switches that suffer from high packet drop counts. Furthermore, we evaluate the scalability of the system when building a larger topology of interconnected <b>software</b> <b>switches,</b> highlighting aspects such as management, port density, load balancing, and failover. In this context, we discuss the usability of software-defined networking technologies, Open vSwitch Database and OpenFlow protocols, to centrally manage and optimize a data acquisition network. We build an IP-only leaf-spine network consisting of eight <b>software</b> <b>switches</b> running on separate physical servers as a demonstrator. We intend to show in this paper that building a high bandwidth lossless network based on <b>software</b> <b>switches</b> dedicated for data acquisition is feasible and can be considered as a viable solution for future small- and large-scale systems based on commodity TCP/IP and Ethernet...|$|E
40|$|The {{concept of}} Software Defined Networking (SDN) has been {{successfully}} applied to efficiently configure and manage network infrastructure, e. g. {{in the context of}} data centres or WANs, and increasingly for ubiquitous communication. In this paper, we explore the idea of pushing SDN to the end-host. In particular, we consider the scenario of load balancing across multiple host network interfaces. We have explored and implemented different SDN-based load balancing approaches based on OpenFlow <b>software</b> <b>switches,</b> and have demonstrated the feasibility and potential of this approach...|$|E
40|$|In {{software-defined}} networking, {{the controller}} installs flow-based rules at switches either proactively or reactively. The reactive ap-proach allows controller applications to make dynamic decisions about incoming traffic, but performs {{worse than the}} proactive one due to the controller involvement. To support dynamic applications with better performance, we propose FAST (Flow-level State Tran-sitions) as a new switch primitive for software-defined networks. With FAST, the controller simply preinstalls a state machine and switches can automatically record flow state transitions by match-ing incoming packets to installed filters. FAST can support a vari-ety of dynamic applications, and can be readily implemented with today’s commodity switch components and <b>software</b> <b>switches...</b>|$|E
40|$|A fully {{synchronous}} circuit for embedded DRAMs is presented. It realizes accurate DRAM timing control, {{and easy}} timing adjustment. Using the circuit, <b>software</b> <b>switching</b> {{of the control}} timing is realized without difficulty. Providing handshake signals to on-chip memory-controller simplifies the memory-controller circuit in a CPU embedded DRAM. 1...|$|R
50|$|In 2003, Dialexia {{released}} Dial-Gate Softswitch PBX, {{a web-based}} softswitch and billing server {{based on the}} Session Initiation Protocol. A softswitch, short for <b>software</b> <b>switch,</b> is a central device in a telecommunications network which connects telephone calls from one phone line to another, across a telecommunication network or the public Internet, entirely by means of software running on a general-purpose computer system.|$|R
30|$|The virtual WLAN {{cards are}} {{connected}} to a <b>software</b> <b>switch,</b> the OpenFlow switching element. In addition, the <b>software</b> <b>switch</b> contains a super virtual WLAN device and a transmission buffer. The super virtual WLAN is the interface to the OS networking stack and has a device-wide IP and MAC address. The transmission buffer can be set into a blocked state, in which all data packets (not control packets) from higher layers are stored in the buffer, but not forwarded to the OpenFlow switching element. If the transmission buffer is in the unblocked state, then it simply passes packets down to the switching element. Blocking traffic at the transmission buffer insures that no packets are lost when the station is performing a handover. Packets that are lost during the wireless transmission (e.g., due to bit errors) are retransmitted using normal operations of the IEEE 802.11 MAC protocol. Retransmissions are always targeted to the same AP.|$|R
40|$|The bursty many-to-one {{communication}} pattern, {{typical for}} data acquisition systems, is particularly demanding for commodity TCP/IP and Ethernet technologies. The problem arising from {{this pattern is}} widely known in the literature as incast and can be observed as TCP throughput collapse. It {{is a result of}} overloading the switch buffers, when a specific node in a network requests data from multiple sources. This will become even more demanding for future upgrades of the experiments at the Large Hadron Collider at CERN. It is questionable whether commodity TCP/IP and Ethernet technologies in their current form will be still able to effectively adapt to bursty traffic without losing packets due to the scarcity of buffers in the networking hardware. This thesis provides an analysis of TCP/IP performance in data acquisition networks and presents a novel approach to incast congestion in these networks based on software-based packet forwarding. Our first contribution lies in confirming the strong analogies between the TCP behaviour in data acquisition and datacenter networks. We also provide experimental evaluation of different proposals from the datacenter environment for application in data acquisition to improve performance and reduce buffer requirements. The second contribution lies in the design and experimental evaluation of a data acquisition network that is based on <b>software</b> <b>switches.</b> Performance has traditionally been the challenge of this approach, but this situation changes with modern server platforms. High performance load balancers, proxies, virtual switches and other network functions can be now implemented in software and not limited to specialised commercial hardware, thus reducing cost and increasing the flexibility. We first design and optimise a software-based switch with a dedicated, throughput-oriented buffering mechanism for data acquisition. Our experimental results indicate that it performs significantly better than some typical Ethernet switches under heavy congestion. The optimised software switch with large packet buffer reaches maximum bandwidth and completely avoids throughput degradation typical for hardware switches that suffer from high packet drop counts. Furthermore, we evaluate the scalability of the system when building a larger topology of interconnected <b>software</b> <b>switches.</b> We highlight aspects such as management, costs, port density, load balancing, and failover. In this context, we discuss the usability of software-defined networking technologies, Open vSwitch Database and OpenFlow, to centrally manage and optimise a data acquisition network. We have built an IP-only parallel leaf-spine network consisting of eight <b>software</b> <b>switches</b> running on separate physical servers as a demonstrator...|$|E
40|$|International audienceThe {{deployment}} {{experience of}} OpenFlow support in production networks has highlighted variable limitations between network devices and vendors. Reactive control is possible solely in environments with low flow arrival rates, while support of high throughput control channels {{is limited to}} <b>software</b> <b>switches.</b> Recent vendor efforts have introduced OpenFlow support on 10 GbE optical switches, increasing further the performance requirements to support the switch control plane. This paper presents the integration of OFLOPS, an OpenFlow switch evaluation platform, with the OSNT platform, a hardware-accelerated traffic generation and capture system. We exploit {{the support of the}} platform for 10 GbE traffic to present an initial evaluation of flow table manipulation capabilities of a representative collection of 10 GbE OpenFlow switch product. We interpret the evolution of OpenFlow support by comparison with historical data...|$|E
40|$|Networks {{of today}} {{has emerged from}} series patches here and there to make it stable, {{scalable}} and manageable. Despite these regular improvements and upgrading, computer networks of today are struggling to meet the heterogeneous and ubiquitous society’s demand. The architectural inflexibility of computer networks gives researchers challenges in experimenting new ideas. The paradigm Software Defined Networking (SDN) and OpenFlow architecture, open ways {{for the implementation of}} a programmable network architecture to be applied gradually in production networks. In this paper, <b>software</b> <b>switches</b> in a virtual network environment replace physical switches. Displaying the SDN network in GUI, Floodlight controller was implemented as the network OS. Adapting its codes to develop components; packet forwarding/address learning, load balancer and firewall for optimizing network. This research achieved a state of the art network management from both a centralized and GUI controller...|$|E
50|$|A {{softswitch}} (<b>software</b> <b>switch)</b> is {{a central}} device in a telecommunications network which connects telephone calls from one phone line to another, across a telecommunication network or the public Internet, entirely by means of software running on a general-purpose computer system. Most landline calls are routed by purpose-built electronic hardware; however, soft switches using general purpose servers and VoIP technology are becoming more popular.|$|R
50|$|Mira {{referred}} to a fault-tolerant configuration of the MicroVAX II developed by DEC's European Centre for Special Systems located in Annecy in France. The system consisted of two MicroVAX 78032 microprocessors, an active and standby microprocessor in a single box, connected by Ethernet and controlled by a <b>software</b> <b>switch.</b> When a fault was detected in the active microprocessor, the workload was switched over to the standby microprocessor.|$|R
50|$|Virgin Mobile {{also offers}} {{standalone}} mobile Internet for mobile broadband modems and tablet computers. Both prepaid and postpaid customers can subscribe to such services. In Q4 2012, Virgin Mobile Canada started billing a $1 monthly reoccurring charge on any subscribers {{that wanted to}} block mobile Internet from their account at the network level. Many phones include a <b>software</b> <b>switch</b> for turning off mobile Internet.|$|R
40|$|An {{effective}} packet processing abstraction that leverages software or {{hardware acceleration}} techniques can simplify {{the implementation of}} high-performance virtual network functions. In this paper, we explore the suitability of SDN switches' stateful forwarding abstractions to model accelerated functions in both software and hardware accelerators, such as optimized <b>software</b> <b>switches</b> and FPGA-based NICs. In particular, we select an Extended Finite State Machine abstraction and demonstrate its suitability by implementing the Linux's iptables interface. By doing so, we provide the acceleration of functions such as stateful firewalls, load balancers and dynamic NATs. We find that supporting a flow-level programming consistency model is an important feature of a programming abstraction in this context. Furthermore, we demonstrate that such a model simplifies the scaling of the system when implemented in software, enabling efficient multi-core processing without harming state consistency. Comment: 15 pages, 7 figure...|$|E
40|$|The P 4 {{programming}} language [29, 16] has been recently proposed as a high-level language to program the forward-ing plane of programmable packet processors, spanning the spectrum from <b>software</b> <b>switches</b> through FPGAs, NPUs and reconfigurable hardware switches. This paper presents {{a case study}} of using P 4 to express the forwarding plane behavior of a datacenter switch, comparable in functional-ity to single-chip shared-memory switches found in many datacenters today. This case study allows us to understand how specific P 4 constructs were useful in modeling specific datacenter switch features. We also outline additional language constructs that needed to be added to P 4 to support certain features of a datacenter switch. We discuss several lessons that we learned in the process and distill these into a proposal for how P 4 could evolve in the future. 1...|$|E
40|$|With the {{deployment}} of Long Term Evolution (LTE) networks, mobile networks will become an important infrastructure component in the cloud ecosystem. However, in the cloud computing era, traditional routing and switching platforms {{do not meet the}} requirements of this new trend, especially in a mobile network environment. With the recent advances in <b>software</b> <b>switches</b> and efficient virtualization using commodity servers, Software Defined Networking (SDN) has emerged as a powerful technology to meet the new requirements for supporting a new generation of cloud service. This thesis describers an experimental investigation of cloud computing, SDN, and a mobile network’s packet core. The design of a mobile network exploiting the evolution of SDN is also presented. The actual implementation consists of a GTP enabled Open vSwitch together with the transparent mode of mobile network SDN evolution. Open vSwitch is a SDN product designed for computer networks. The implementation extends Open vSwitch with an implementatio...|$|E
5000|$|... #Caption: The phone <b>software</b> {{automatically}} <b>switches</b> {{to camera}} mode {{as soon as}} the lens cover is slid down.|$|R
50|$|In some contexts, {{particularly}} computing, a toggle switch, or {{the action}} of toggling, is understood in the different sense of a mechanical or <b>software</b> <b>switch</b> that alternates between two states each time it is activated, regardless of mechanical construction. For example, the caps lock key on a computer causes all letters to be generated in capitals after it is pressed once; pressing it again reverts to lower-case letters.|$|R
50|$|The Musepack format developer, Frank Klemm, {{extended}} the original APE tag format {{to add a}} header, allowing APE tags {{to be at the}} beginning of files and allowing metadata values to be Unicode rather than simply ASCII. Because of its simplicity and flexibility, APEv2 was adopted by the WavPack and OptimFROG formats as their primary tag format. Version 3.99 of the official Monkey's Audio <b>software</b> <b>switched</b> from using APEv1 to APEv2.|$|R
40|$|We {{present an}} {{approach}} for efficient {{design of a}} signaling network for a network of <b>software</b> <b>switches</b> supporting Internet telephony. While one may take an Integer Programming approach to solve this problem, it quickly becomes intractable even for modest-sized networks. Instead, our topology design uses random graphs that we show to be nearly optimal in cost, highly connected, and computationally efficient even for large networks. (Prior work [4] has addressed topology design using random graph techniques. We identified some gaps in this work, for which we provide resolutions.) We then formulate a Quadratic Assignment Problem (QAP) to map the abstract topology into the physical network to achieve optimal load balancing for given demand forecasts, which we solve using randomized heuristics. Numerical results on several example networks illustrate the performance and computational efficiency of our method. A graphical design tool has been developed based on our algorithms. I. INTRODUCTION [...] ...|$|E
40|$|Abstract—In cloud data centers, {{more and}} more {{services}} are deployed across multiple tiers to increase flexibility and scal-ability. However, this {{makes it difficult for}} the cloud provider to identify which tier of the application is the bottleneck and how to resolve performance problems. Existing solutions approach this problem by constantly monitoring either in end-hosts or physical switches. Host based monitoring usually needs instrumentation of application code, making it less practical, while network hardware based monitoring is expensive and requires special features in each physical switch. Instead, we believe network wide monitoring should be flexible and easy to deploy in a non-intrusive way by exploiting recent advances in software-based network services. Towards this end we are developing a distributed software-based network monitoring framework for cloud data centers. Our system leverages knowledge of topology and routing information to build relationships between each tier of the application, and detect and locate performance bottlenecks by monitoring the network from <b>software</b> <b>switches.</b> I...|$|E
30|$|OpenStack is {{composed}} of the function blocks which manage logical/virtual resources deployed on physical resources, the function block which provides Single Sign On authentication among other function blocks and the function block which orchestrates a set of virtual resources. Neutron controls virtual networks. OVS (Open Virtual Switch) [[8]] and other <b>software</b> <b>switches</b> {{can be used as}} a virtual switch. Nova controls virtual machines (VMs). KVM (Kernel based Virtual Machine) [[9]], Xen [[10]] and others can be used as hypervisors of VMs. Cinder manages block storages and can attach a logical volume to a VM like a local disk. Swift manages object storages. Glance manages Image files. Keystone is a base which performs Single Sign On authentications of these function blocks. Heat is an orchestration deployment function to create or update virtual resource instances using Nova, Cinder or other blocks based on a text template. Ceilometer is a metering function of virtual resource usage. The functions of OpenStack are used through REST (Representational State Transfer) APIs. There is also Web GUI called Horizon to use the functions of OpenStack.|$|E
40|$|CHILL is a {{concurrent}} programming language, especially for implementing telecommunications software. ETRI {{has used the}} language {{for the development of}} <b>switching</b> <b>software.</b> Generally, <b>switching</b> <b>software</b> is characterized byreal-time execution, parallel and distributed processing, large scale source code, and high complexity. The software is also developed on cross development environments. In this paper, we present a CHILL cross debugging system, in which the system can test and debug the programs on remote system from local system. The system provides the traditional debugging features such as executing and tracing a program, listing source code, setting breakpoints, examining and setting program locations, and single-stepping. It also provides parallel and distributed real-time debugging, a powerful command language, signal sending capability, and graphical user interface for <b>switching</b> <b>software.</b> 1...|$|R
40|$|International audienceExperimental studies {{dealing with}} the {{analysis}} of data collected on families of products are seldom reported. In this paper, we analyse the failure data of two successive products of a <b>software</b> <b>switching</b> system during validation and operation. A comparative analysis is done with respect to: i) the modifications performed on system components, ii) the distribution of failures and corrected faults in the components and the functions fulfilled by the system, and iii) {{the evolution of the}} failure intensity functions...|$|R
40|$|We {{describe}} {{the design and}} implementation of Open vSwitch, a multi-layer, open source virtual switch for all major hypervisor platforms. Open vSwitch was designed de novo for networking in virtual environments, result-ing in major design departures from traditional <b>software</b> <b>switching</b> architectures. We detail the advanced flow classification and caching techniques that Open vSwitch uses to optimize its operations and conserve hypervisor resources. We evaluate Open vSwitch performance, draw-ing from our deployment experiences {{over the past seven}} years of using and improving Open vSwitch. ...|$|R
