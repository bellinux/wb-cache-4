297|1500|Public
5000|$|One way for {{evaluating}} this upper bound for a partial {{solution is to}} consider each <b>soft</b> <b>constraint</b> separately. For each <b>soft</b> <b>constraint,</b> the maximal possible value for any assignment to the unassigned variables is assumed. The sum of these values is an upper bound because the soft constraints cannot assume a higher value. It is exact because the maximal values of soft constraints may derive from different evaluations: a <b>soft</b> <b>constraint</b> may be maximal for [...] while another constraint is maximal for [...]|$|E
5000|$|The bucket {{elimination}} algorithm can {{be adapted}} for constraint optimization. A given variable can be indeed removed from the problem by replacing all soft constraints containing it with a new <b>soft</b> <b>constraint.</b> The cost of this new constraint is computed assuming a maximal value for every value of the removed variable. Formally, if [...] is the variable to be removed, [...] are the soft constraints containing it, and [...] are their variables except , the new <b>soft</b> <b>constraint</b> is defined by: ...|$|E
5000|$|The {{total cost}} of an {{instantiation}} [...] on a <b>soft</b> <b>constraint</b> , includes the cost of [...] on [...] {{as well as the}} nullary cost [...] and the unary costs for [...] of the variables in [...]|$|E
40|$|Over-constrained {{problems}} can be solved {{with the help of}} <b>soft</b> <b>constraints.</b> Weighted constraints are a typical representation of <b>soft</b> <b>constraints</b> used to minimize weights of unsatisfied constraints. A natural extension of the CLP(FD) approach is presented which allows handling of weighted <b>soft</b> <b>constraints...</b>|$|R
40|$|In this study, a multi {{objective}} programming {{model for}} nurse scheduling is developed. In this paper, {{we present a}} goal programming (GP) model that accommodates both hard and <b>soft</b> <b>constraints</b> for a monthly planning horizon. The hard constraints should be adhered to strictly, whereas the <b>soft</b> <b>constraints</b> can be violated when necessary. The relative importance values of the <b>soft</b> <b>constraints</b> have been computed by the analytical hierarchy process (AHP), which are used as coefficients of the deviations from the <b>soft</b> <b>constraints</b> in the objective function. goal programming, analytical hierarchy process, AHP, nurse scheduling, emergency departments, A&am, E, accident and emergency, hard <b>constraints,</b> <b>soft</b> <b>constraints,</b> healthcare management,...|$|R
40|$|International audienceIn this study, a multi {{objective}} programming {{model for}} nurse scheduling is developed. In this paper, {{we present a}} goal programming (GP) model that accommodates both hard and <b>soft</b> <b>constraints</b> for a monthly planning horizon. The hard constraints should be adhered to strictly, whereas the <b>soft</b> <b>constraints</b> can be violated when necessary. The relative importance values of the <b>soft</b> <b>constraints</b> have been computed by the analytical hierarchy process (AHP), which are used as coefficients of the deviations from the <b>soft</b> <b>constraints</b> in the objective functio...|$|R
50|$|In some problems, {{often called}} {{constraint}} optimization problems, the objective function {{is actually the}} sum of cost functions, each of which penalizes the extent (if any) to which a <b>soft</b> <b>constraint</b> (a constraint which is preferred but not required to be satisfied) is violated.|$|E
5000|$|Each <b>soft</b> <b>constraint</b> [...] {{involves}} an ordered set [...] of variables, called its scope, and {{is defined as}} a cost function from [...] to [...] where [...] is the set of possible instantiations of [...] When an instantiation [...] is given the cost , i.e., , it is said forbidden. Otherwise it is permitted with the corresponding cost (0 being completely satisfactory).|$|E
50|$|Hard {{constraints}} typically {{include a}} specification of shifts (e.g. morning, afternoon, and night), that each nurse should work {{no more than}} one shift per day, and that all patients should have nursing coverage. Differences in qualifications between nurses also create hard constraints. Soft constraints may include minimum and maximum numbers of shifts assigned to a given nurse in a given week, of hours worked per week, of days worked consecutively, of days off consecutively, and so on. The shift preferences of individual nurses may be treated as a <b>soft</b> <b>constraint,</b> or as a hard constraint.|$|E
40|$|Many {{real life}} {{optimization}} problems contain both hard and <b>soft</b> <b>constraints,</b> {{as well as}} qualitative conditional preferences. However, {{there is no single}} formalism to specify all three kinds of information. We therefore propose a framework, based on both CP-nets and <b>soft</b> <b>constraints,</b> that handles both hard and <b>soft</b> <b>constraints</b> as well as conditional preferences efficiently and uniformly. We study the complexity of testing the consistency of preference statements, and show how <b>soft</b> <b>constraints</b> can faithfully approximate the semantics of conditional preference statements whilst improving the computational complexity. ...|$|R
40|$|Hard {{constraints}} {{must always}} hold. Violations of <b>soft</b> <b>constraints</b> may be tolerable. Inconsistency-tolerant in-tegrity checking serves to flexibly check both hard and <b>soft</b> <b>constraints</b> {{in a uniform}} manner. With an extended exam-ple for risk management, we illustrate that inconsistency-tolerant integrity checking methods are more efficient and more reliable for checking hard and <b>soft</b> <b>constraints</b> than traditional approaches. ...|$|R
40|$|<b>Soft</b> <b>constraints</b> {{are gaining}} {{popularity}} in diverse {{areas such as}} orchestration of Web services or optimization of scheduling decisions. However, current approaches to <b>soft</b> <b>constraints</b> preclude them from modelling certain decision problems with multiple preference criteria. We propose {{a new approach to}} <b>soft</b> <b>constraints</b> which allows a natural expression of these problems, describe an implementation in the rewriting logic system Maude, and prove its correctness...|$|R
30|$|Another {{alternative}} is the penalty function method (also called <b>soft</b> <b>constraint</b> method). The <b>soft</b> <b>constraint</b> consists in introducing a penalty function to discard solutions entering the constrained region [40, 64, 84]. For the problem (P_A), this <b>soft</b> <b>constraint</b> method {{is well suited}} in view of a continuation procedure starting from an unconstrained solution. This initial solution generally violates significantly the state constraint. The continuation procedure aims at reducing progressively the infeasibility.|$|E
30|$|However, {{the formal}} {{verification}} of <b>soft</b> <b>constraint</b> becomes more difficult, because the <b>soft</b> <b>constraint</b> conditions may be mathematical expressions representing QoS properties. These functions {{can be of}} the non-linear form, which causes serious difficulties for the current provers.|$|E
40|$|We propose an {{abstraction}} scheme for <b>soft</b> <b>constraint</b> problems and we study its main properties. Processing the abstracted {{version of a}} <b>soft</b> <b>constraint</b> problem can help us in many ways: for example, to nd good approximations of the optimal solutions, or also {{to provide us with}} information that can make the subsequent search for the best solution easier. The results of this paper show that the proposed scheme is promising; thus they {{can be used as a}} stable formal base for any experimental work specific to a particular class of <b>soft</b> <b>constraint</b> problems...|$|E
40|$|Abstract. As many {{real-world}} problems involve user preferences, costs, or probabilities, {{constraint satisfaction}} {{has been extended}} to optimization by generalizing hard <b>constraints</b> to <b>soft</b> <b>constraints.</b> However, as techniques such as local consistency or conflict learning do not easily generalize to optimization, solving <b>soft</b> <b>constraints</b> appears more difficult than solving hard constraints. In this paper, we present an approach to solving <b>soft</b> <b>constraints</b> that exploits this disparity by re-formulating <b>soft</b> <b>constraints</b> into an optimization part (with unary objective functions), and a satisfiability part. This re-formulation is exploited by a search algorithm that enumerates subspaces with equal valuation, that is, plateaus in the search space, rather than individual elements of the space. Within the plateaus, familiar techniques for satisfiability can be exploited. Experimental results indicate that this hybrid approach is in some cases more efficient than other known methods for solving <b>soft</b> <b>constraints.</b> ...|$|R
40|$|We study contractibility and its {{approximation}} for {{two very}} general classes of <b>soft</b> global <b>constraints.</b> We introduce a general formulation of decomposition-based <b>soft</b> <b>constraints</b> {{and provide a}} sufficient condition for contractibility and an approach to approximation. For edit-based <b>soft</b> <b>constraints,</b> we establish that the tightest contractible approximation cannot be expressed in edit-based terms, in general...|$|R
40|$|Classical {{constraint}} satisfaction problems (CSPs) provide an expressive formalism for describing and solving many real-world problems. However, classical CSPs {{prove to be}} restrictive in situations where uncertainty, fuzziness, probability or optimisation are intrinsic. <b>Soft</b> <b>constraints</b> alleviate many of the restrictions which classical {{constraint satisfaction}} impose; in particular, <b>soft</b> <b>constraints</b> {{provide a basis for}} capturing notions such as vagueness, uncertainty and cost into the CSP model. We focus on the semiring-based approach to <b>soft</b> <b>constraints...</b>|$|R
40|$|We study a {{resource}} allocation problem, {{which is a}} central piece of a real-world task scheduling problem. We rst formulate the problem as a <b>soft</b> <b>constraint</b> optimization problem and show that nding the optimal resource allocation is NP-hard. We then propose and study three <b>soft</b> <b>constraint</b> modeling schemes for the problem and discuss the expressiveness and space complexity of these models...|$|E
40|$|AbstractSoft {{constraints}} {{are very}} flexible and expressive. However, {{they are also}} very complex to handle. For this reason, it may be reasonable in several cases to pass to an abstract version of a given <b>soft</b> <b>constraint</b> problem, and then to bring some useful information from the abstract problem to the concrete one. This will hopefully make {{the search for a}} solution, or for an optimal solution, of the concrete problem, faster. In this paper we propose an abstraction scheme for <b>soft</b> <b>constraint</b> problems and we study its main properties. We show that processing the abstracted version of a <b>soft</b> <b>constraint</b> problem can help us in finding good approximations of the optimal solutions, or also in obtaining information that can make the subsequent search for the best solution easier. We also show how the abstraction scheme can be used to devise new hybrid algorithms for solving <b>soft</b> <b>constraint</b> problems, and also to import constraint propagation algorithms from the abstract scenario to the concrete one. This may be useful when we don't have any (or any efficient) propagation algorithm in the concrete setting...|$|E
40|$|The {{constraint}} satisfaction problem (CSP) {{is a central}} generic problem in computer science and artificial intelligence: it provides a common framework for many theoretical problems {{as well as for}} many real-life applications. <b>Soft</b> <b>constraint</b> problems are a generalisation of the CSP which allow the user to model optimisation problems. Considerable effort has been made in identifying properties which ensure tractability in such problems. In this work, we initiate the study of hybrid tractability of <b>soft</b> <b>constraint</b> problems; that is, properties which guarantee tractability of the given <b>soft</b> <b>constraint</b> problem, but which do not depend only on the underlying structure of the instance (such as being tree-structured) or only on the types of soft constraints in the instance (such as submodularity). We present several novel hybrid classes of <b>soft</b> <b>constraint</b> problems, which include a machine scheduling problem, constraint problems of arbitrary arities with no overlapping nogoods, and the SoftAllDiff constraint with arbitrary unary soft constraints. An important tool in our investigation will be the notion of forbidden substructures. Comment: A full version of a CP' 10 paper, 26 page...|$|E
40|$|Abstract. We study contractibility and its {{approximation}} for {{two very}} general classes of <b>soft</b> global <b>constraints.</b> We introduce a general formulation of decomposition-based <b>soft</b> <b>constraints</b> {{and provide a}} sufficient condition for contractibility and an approach to approximation. For edit-based <b>soft</b> <b>constraints,</b> we establish that the tightest contractible approximation cannot be expressed in edit-based terms, in general. 1...|$|R
40|$|The {{notion of}} {{optimality}} naturally arises {{in many areas}} of ap-plied mathematics and computer science concerned with de-cision making. Here we consider this notion in the context of two formalisms used for different purposes in reasoning about multi-agent systems. One of them are strategic games that are used to capture the idea that agents interact with each other while pursuing their own interests. The other are <b>soft</b> <b>constraints</b> that are used to express preferences in presence of constraints and uncertainty. To relate the notions of optimality in these formalisms we de-fine two mappings. We show for a natural mapping from <b>soft</b> <b>constraints</b> to strategic games that in general no relation exists between the notions of an optimal solution and Nash equilib-rium. However, for a class of <b>soft</b> <b>constraints</b> that includes weighted constraints every optimal solution is a Nash equi-librium. In turn, for a natural mapping from strategic games to <b>soft</b> <b>constraints</b> the notion that coincides with optimality for <b>soft</b> <b>constraints</b> is that of Pareto efficient joint strategy...|$|R
40|$|We review constraint-based {{approaches}} to handle preferences. We start by defining the main notions of constraint programming, then give various concepts of <b>soft</b> <b>constraints</b> and show {{how they can}} be used to model quantitative preferences. We then consider how <b>soft</b> <b>constraints</b> can be adapted to handle other forms of preferences, such as bipolar, qualitative, and temporal preferences. Finally, we describe how AI techniques such as abstraction, explanation generation, machine learning, and preference elicitation, can be useful in modelling and solving <b>soft</b> <b>constraints...</b>|$|R
40|$|Soft {{constraints}} {{are very}} and expressive. However, {{they also are}} very complex to handle. For this reason, it may be reasonable in several cases to pass to an abstract version of a given <b>soft</b> <b>constraint</b> problem, and then to bring some useful information from the abstract problem to the concrete one. This will hopefully make {{the search for a}} solution, or for an optimal solution, of the concrete problem, faster. In this paper we propose an abstraction scheme for <b>soft</b> <b>constraint</b> problems and we study its main properties. We show that processing the abstracted version of a <b>soft</b> <b>constraint</b> problem can help us in finding good approximations of the optimal solutions, or also in obtaining information that can make the subsequent search for the best solution easier. We also show how the abstraction scheme can be used to devise new hybrid algorithms for solving <b>soft</b> <b>constraint</b> problems, and also to import constraint propagation algorithms from the abstract scenario to the concrete one. This may be useful when we don 2 ̆ 7 t have any (or any efficient) propagation algorithm in the concrete setting...|$|E
40|$|The paper {{proposes a}} new {{calibrated}} adaptive frequency domain beamformer for speech enhancement. The beamformer {{is based on}} the principle of a <b>soft</b> <b>constraint</b> formed from calibration data, rather than precalculated from free-field assumptions. The benefit is that the real room acoustical properties are taken into account. The proposed algorithm continuously estimates the spatial information for each frequency band, based on weighting of the received data. The update of the beamforming weights is done recursively where the initial precalculated correlation estimates of the speech constitute a <b>soft</b> <b>constraint.</b> The <b>soft</b> <b>constraint</b> secures the spatial-temporal passage of the desired source signal, without the need of any speech detection. The performance is evaluated in real world scenarios, in both car and restaurant environments. Interference and noise suppression of more than 15 dB is accomplished, while very small distortion is measured for the source signal...|$|E
3000|$|The GC {{natively}} {{supports the}} <b>soft</b> <b>constraint</b> of boundary polarity {{and will be}} denoted as oriented graph cut (OGC). It (A_OGC^out(S_o,S_b)) solves the ε [...]...|$|E
40|$|Abstract. Classical {{constraint}} satisfaction problems (CSPs) provide an expressive formalism for modelling and solving many real-world problems. However, classical CSPs {{prove to be}} restrictive in any situation where uncertainty, fuzziness, probability, optimisation or partial satisfaction are intrinsic. <b>Soft</b> <b>constraints</b> alleviate many of the restrictions imposed by classical {{constraint satisfaction}}. In particular, <b>soft</b> <b>constraints</b> {{provide a basis for}} capturing notions such as vagueness, uncertainty and cost in the CSP model. In this paper we focus on the semiring-based approach to <b>soft</b> <b>constraints.</b> We present an overview of <b>soft</b> <b>constraints,</b> and the recent functional formulation of the semiring framework in particular, which also plays a tutorial role in this paper. Furthermore, we present a new evaluation-oriented scheme for implementing meta-constraints, which can be applied to any existing implementation to improve its time and space efficiency. ...|$|R
40|$|The goal of {{this note}} is to show how {{inference}} with <b>soft</b> <b>constraints</b> can be solved using an off-the-shelf ILP solver. We will introduce <b>soft</b> <b>constraints</b> and then show {{how they can be}} introduced into the inference problem using the same representation as hard constraints. The note ends with examples that works ou...|$|R
50|$|In e each {{field is}} {{randomized}} by default. Field randomization {{can be controlled}} by hard <b>constraints,</b> <b>soft</b> <b>constraints</b> or even be turned off completely. <b>Soft</b> <b>constraints</b> are used as the default constraints, and may be automatically overridden by the test layer if a conflict occurs. Otherwise it behaves like a regular constraint.|$|R
40|$|Soft {{constraints}} {{based on}} semirings are a generalization of classical constraints, where tuples of variables 2 ̆ 7 values in each <b>soft</b> <b>constraint</b> are associated to elements from an algebraic structure called semiring. This framework {{is able to}} express, for example, fuzzy, classical, weighted, valued and over-constrained constraint problems. Classical constraint propagation has been extended and adapted to soft constraints by defining a schema for <b>soft</b> <b>constraint</b> propagation [8]. On the other hand, in [1 - 3] it has been proven {{that most of the}} well known constraint propagation algorithms for classical constraints can be cast within a single schema. In this paper we combine these two schemas and we provide a more general framework where the schema of [3] can be used for soft constraints. In doing so, we generalize the concept of <b>soft</b> <b>constraint</b> propagation, and we provide new sufficient and independent conditions for its termination...|$|E
40|$|Chinese is {{an ancient}} hieroglyphic. It is inat-tentive to structure. Therefore, {{segmenting}} and parsing Chinese are more difficult and less accurate. In this paper, we propose an Omni-word feature and a <b>soft</b> <b>constraint</b> method for Chinese relation extraction. The Omni-word feature uses every potential word in a sentence as lexicon feature, reducing errors caused by word segmentation. In order to utilize the structure information of a relation instance, we discuss how <b>soft</b> <b>constraint</b> {{can be used to}} cap-ture the local dependency. Both Omni-word feature and <b>soft</b> <b>constraint</b> make a better use of sentence information and minimize the in-fluences caused by Chinese word segmenta-tion and parsing. We test these methods on the ACE 2005 RDC Chinese corpus. The re-sults show a significant improvement in Chi-nese relation extraction, outperforming other methods in F-score by 10 % in 6 relation types and 15 % in 18 relation subtypes. ...|$|E
40|$|This paper {{proposes a}} new {{calibrated}} adaptive frequency domain beamformer for speech enhancement. The beamformer {{is based on}} the principle of a <b>soft</b> <b>constraint</b> formed from calibration data, rather than precalculated from free-field assumptions. The benefit is that the real room acoustical properties will be taken into account. The proposed algorithm continuously estimates the spatial information for each frequency band, based on weighting of the received data. The update of the beamforming weights is done recursively where the initial precalculated correlation estimates of the speech constitute a <b>soft</b> <b>constraint.</b> The <b>soft</b> <b>constraint</b> secures the spatial-temporal passage of the desired source signal, without the need of any speech detection. The performance is evaluated in real world scenarios, both in a car-and a restaurant- environment. Interference and noise sup-pression of more than 15 dB is accomplished, while very small distortion is measured for the source signal...|$|E
40|$|<b>Soft</b> <b>constraints</b> {{add to the}} {{classical}} notion of constraint the possibility of dealing with important features like fuzziness, uncertainty, optimization, probability, and partial satisfaction. This tutorial will describe the current state-of-the-art {{in the area of}} <b>soft</b> <b>constraints,</b> by reviewing the existing frameworks and pointing out the relations among them. Then, it will focus {{on one of the most}} general frameworks for <b>soft</b> <b>constraints,</b> which is based on a semiring structure, and, for such a framework, it will present its properties and local propagation algorithms. Finally, it will describe and show the usefulness of a programming language, called clp(fd,S), where <b>soft</b> <b>constraints</b> can be naturally used and are eciently implemented. This tutorial paper is intended to provide a coherent presentation of most of the material underlying the tutorial transparencies, that will be distributed to the audience at the conference site...|$|R
50|$|Cost {{transfer}} algorithms {{have been}} shown to be particularly efficient to solve real-world problem when <b>soft</b> <b>constraints</b> are binary or ternary (maximal arity of constraints in the problem is equal to 2 or 3).For <b>soft</b> <b>constraints</b> of large arity, cost transfer becomes a serious issue because the risk of combinatorial explosion has to be controlled.|$|R
30|$|The {{proposed}} model {{includes some}} hard and <b>soft</b> <b>constraints.</b> The objective function {{is set in}} such a way that <b>soft</b> <b>constraints</b> are satisfied as much as possible. The model is applied and tested in the Industrial Engineering Department of Islamic Azad University in Firoozkooh, Iran. In this department, 12 courses are offered in four terms for postgraduate students.|$|R
