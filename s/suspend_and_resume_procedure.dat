0|10000|Public
5000|$|The ACPI/APM BIOS {{does not}} work well, with <b>suspend</b> <b>and</b> <b>resume</b> {{problems}} common ...|$|R
50|$|FreeNX and {{the various}} NX Clients are used for setup, {{handling}} <b>suspend</b> <b>and</b> <b>resume,</b> secure tunnelling over SSH, and for printing and sound.|$|R
5000|$|Version 4.2.5, {{released}} September 2010, brings {{support for}} the HP Integrity Superdome 2, as well as <b>suspend</b> <b>and</b> <b>resume</b> support for a VM.|$|R
5000|$|Other {{recent and}} {{actively}} maintained OSS NX clients include OpenNX, a [...] "drop-in replacement for NoMachine's proprietary nxclient". OpenNX has full <b>suspend</b> <b>and</b> <b>resume.</b>|$|R
50|$|More recent {{open-source}} efforts include QtNX, {{which offers}} full <b>suspend</b> <b>and</b> <b>resume.</b> However, {{this has been}} reported not {{to work with the}} most recent NX libraries.|$|R
50|$|ARexx scripts {{benefit from}} an error {{handling}} system which monitors execution and responds accordingly. The programmer can choose to <b>suspend</b> <b>and</b> <b>resume</b> {{the execution of the}} program as needed.|$|R
5000|$|Recon-X was an add on {{product from}} eXceed and ReflectionX which added <b>suspend</b> <b>and</b> <b>resume</b> {{capabilities}} to running X sessions. Features of Recon-X {{were incorporated into}} the LIVE product line ...|$|R
50|$|There are 12 power events (such as standby, <b>suspend</b> <b>and</b> <b>resume</b> requests, <b>and</b> {{low battery}} notifications), plus OEM-defined events, {{that can be}} sent from the APM BIOS to the {{operating}} system. The APM driver regularly polls for event change notifications.|$|R
40|$|Efficient {{mapping of}} Virtual Machines (VMs) onto {{physical}} servers {{is a key}} problem for cloud infrastructure providers as hardware utilization directly im- pacts revenue. Today, this mapping is commonly only performed when new VMs are created, but as VM workloads fluctuate and server availability varies, any ini- tial mapping is bound to become suboptimal over time. We introduce a set of heuristic methods for continuous optimization of the VM-to-server mapping based on combina- tions of fundamental management actions, namely <b>suspending</b> <b>and</b> <b>resuming</b> physical machines, migrating VMs, <b>and</b> <b>suspending</b> <b>and</b> <b>resuming</b> VMs. Using these methods cloud infrastructure providers can continuously optimize their server resources regard- less of the predictability of the workload. To verify that our approach is applicable in real-world scenarios, we build a proof-of-concept datacenter management system that implements the proposed algorithms. The feasibility of our approach is evaluated {{through a combination of}} simulations and real experiments where our system provi- sions a workload of benchmark applications. Our results indicate that the proposed algorithms are feasible, that the combined management approach achieves the best results, and that the VM <b>suspend</b> <b>and</b> <b>resume</b> mechanism has the largest impact. ...|$|R
5000|$|Coroutines are [...] computer-program {{components}} that generalize subroutines for non-preemptive multitasking, by allowing multiple entry points for <b>suspending</b> <b>and</b> <b>resuming</b> execution at certain locations. Coroutines are well-suited for implementing familiar program components such as cooperative tasks, exceptions, event loops, iterators, infinite lists and pipes.|$|R
2500|$|The railway through Leicester is not electrified, {{previous}} {{plans to}} carry out the electrification were finally cancelled on 20 July 2017, after being previously announced, commenced, <b>suspended</b> <b>and</b> <b>resumed,</b> so all services are operated using bi-mode electro-diesel trains running in electro-pantograph mode from London St Pancras to Kettering North Junction and electro-accumulator/diesel-electric mode through Leicester and beyond [...]|$|R
50|$|An {{application}} {{should be}} able to handle these interruptions by going into a <b>suspended</b> state <b>and</b> <b>resuming</b> afterwards.|$|R
40|$|We {{introduce}} {{just enough}} tabling (JET), {{a mechanism to}} <b>suspend</b> <b>and</b> <b>resume</b> the tabled execution of logic programs at an arbitrary point. In particular, JET allows pruning of tabled logic programs to be performed without resorting to any recomputation. We discuss issues {{that are involved in}} supporting pruning in tabled resolution, how re-execution of tabled computations which were previously prune...|$|R
50|$|Work {{began in}} 1964 in the Tuscolana area and {{immediately}} ran into unexpected delays and difficulties, {{an example of}} which was the disruption caused to traffic in the south-east of Rome by the cut and cover method of digging. The work was <b>suspended</b> <b>and</b> <b>resumed</b> 5 years later, with tunnelling machines which, although helping to ease traffic problems, caused vibration damage to buildings.|$|R
40|$|Abstract—This work {{introduces}} a new task preemption prim-itive for Hadoop, that allows tasks to be <b>suspended</b> <b>and</b> <b>resumed</b> exploiting existing memory management mechanisms {{readily available in}} modern operating systems. Our technique fills the gap that exists between the two extremes cases of killing tasks (which waste work) or waiting for their completion (which introduces latency) : experimental results indicate superior performance and very small overheads when compared to existing alternatives. I...|$|R
5000|$|In response, {{manufacturers}} of CD recorders began shipping drives with [...] "buffer underrun protection" [...] (under various trade names, such as Sanyo's [...] "BURN-Proof", Ricoh's [...] "JustLink" [...] and Yamaha's [...] "Lossless Link"). These can <b>suspend</b> <b>and</b> <b>resume</b> the recording process {{in such a}} way that the gap the stoppage produces can be dealt with by the error-correcting logic built into CD players and CD-ROM drives. The first of these drives were rated at 12× and 16×.|$|R
60|$|Mr. Wain <b>suspended</b> tapping operations, <b>and</b> <b>resumed</b> {{the thread}} of his discourse.|$|R
40|$|SINGLE-THREADED SPECIFICATION OF PROCESS-INTERACTION FORMALISM IN JAVA In {{order to}} support the {{conceptualization}} and specification of simulation models of complex systems, several formalisms or world views exist. Petri nets, differential equations, discrete event system specification and process interaction are typical examples. Throughout the last decade many have attempted to implement the process interaction formalism in Java. These initiatives mostly resulted in multi-threaded simulation languages in which a Process extends a Thread. These threads are then sequentially <b>suspended</b> <b>and</b> <b>resumed.</b> The article &quot;Why are Thread. stop, Thread. <b>suspend</b> <b>and</b> Thread. <b>resume</b> Deprecated? &quot; (Sun Microsystems 1999) implicitly ended most of these deadlock prone initiatives. This paper introduces a unique singlethreaded implementation of this world view by introducing a Java-based Java interpreter, which is used only to interpret pausable processes. This interpreter supports all Java programming constructs and hopefully serves as a cornerstone for renewed development of process oriented Java based simulation languages. ...|$|R
40|$|This project {{produces}} a package in Java – dk. ruc. dat. processsimulation –that include functionality, {{similar to the}} object oriented programming language SIMULA’s Simulation class. Furthermore we develop a simple package for event-based simulations, called dk. ruc. dat. eventsimulation. The report includes users guide and Java documentation to the two simulation packages. In order to build the package for process simulations, we develop a package - dk. ruc. dat. coroutine, that lets Java Threads explicitly <b>suspend</b> <b>and</b> <b>resume</b> control of program execution. The feature is shown in four different implementations...|$|R
40|$|<b>Suspend</b> <b>and</b> <b>resume</b> {{support in}} OpenBSD was almost {{complete}} in the 4. 8 Release. During the development, a lot {{had to be}} changed- {{it was a long}} process, starting from acpi(4) and apm(4) changes, down into the low level parts of autoconf(9) and upwards into the device drivers. What started as i 386 and amd 64 targeted development turned into a machine independent framework that can now be used by other architectures. Currently, loongson is one such architecture that is still a work in progress. 1 Device Configuratio...|$|R
5000|$|The OUT pin is set low {{after the}} Control Word is written, and {{counting}} starts one clock cycle after the COUNT is programmed. OUT remains low until the counter reaches 0, {{at which point}} OUT will be set high until the counter is reloaded or the Control Word is written. The counter wraps around to [...] internally and continues counting, but the OUT pin never changes again. The Gate signal should remain active high for normal counting. If Gate goes low, counting is <b>suspended,</b> <b>and</b> <b>resumes</b> when it goes high again.|$|R
40|$|We {{present the}} “boomerang ” technique, {{which makes it}} {{possible}} to <b>suspend</b> <b>and</b> <b>resume</b> drag-and-drop operations. A throwing gesture while dragging an object suspends the operation, anytime and anywhere. A drag-and-drop interaction, enhanced with our technique, allows users to switch windows, invoke commands, and even drag other objects during a drag-and-drop operation without using the keyboard or menus. We explain how a throwing gesture can <b>suspend</b> drag-and-drop operations, <b>and</b> describe other features of our technique, including grouping, copying, and deleting dragged objects. We conclude by presenting prototype implementations and initial feedback on the proposed technique. ACM Classification: H 5. 2 [Information interfaces an...|$|R
40|$|Abstract. When doing {{inference}} in ProbLog, a probabilistic {{extension of}} Prolog, we extend SLD resolution with some additional bookkeeping. This additional information {{is used to}} compute the probabilistic results for a probabilistic query. In Prolog’s SLD, goals are nested very natu-rally. In ProbLog’s SLD, nesting probabilistic queries interferes with the probabilistic bookkeeping. In order to support nested probabilistic infer-ence we propose {{the notion of a}} parametrised ProbLog engine. Nesting becomes possible by <b>suspending</b> <b>and</b> <b>resuming</b> instances of ProbLog en-gines. With our approach we realise several extensions of ProbLog such as meta-calls, negation, and answers of probabilistic goals. ...|$|R
40|$|OF THE DISSERTATION RESTCLK: A Communication Paradigm for Observation and Control of Object Interaction by Souripriya Das Dissertation Director: Professor Chitoor V. Srinivasan This {{dissertation}} {{introduces a}} new communication paradigm, RESTCLK, that extends programmatic observation and control (O&C) to the communication network. In a RESTCLK-based distributed application system, any software object with requisite privileges may <b>suspend</b> <b>and</b> <b>resume</b> {{the flow of}} data and examine and modify the data in transit over RESTCLK communication networks. Abstractions and protocols used in RESTCLK allow dynamic changes to be performed in RESTCLK communication networks while maintaining transparency {{with respect to the}} application objects, that is, without requiring their knowledge or participation...|$|R
50|$|He helped {{complete}} the Spire of San Domenico to a design by Cosimo Fanzago. Picchiatti was {{so intent on}} preserving and cataloging remnants of the original Greco-Roman city beneath the construction site that {{the work on the}} spire itself was eventually <b>suspended</b> <b>and</b> wasn't <b>resumed</b> until many years later.|$|R
40|$|We present DeskPod, a {{portable}} system {{that provides a}} highly reliable desktop computing environment for mobile users by leveraging rapid improvements in capacity, cost, and size of portable storage devices. DeskPod enables a user’s live computing environment to be suspended to portable storage, carried around, easily copied for faultresilience, <b>and</b> <b>resumed</b> from the storage device to provide the user with the same persistent, personalized computing environment on another computer. DeskPod achieves this by providing a virtualization and checkpoint/restart mechanism that decouples a desktop computing environment from any single hardware device {{so that it can}} be stored and executed anywhere, improving desktop computing reliability by eliminating a potential single point of failure. We have implemented a Linux DeskPod prototype and demonstrate its ability to quickly <b>suspend</b> <b>and</b> <b>resume</b> desktop sessions, enabling a seamless mobile experience. 1...|$|R
5000|$|Work was <b>suspended</b> in 1875, <b>and</b> <b>resumed</b> {{in earnest}} {{in the autumn}} of 1878 {{following}} negotiations with the various municipalities for connected bonuses and bond subscriptions ...|$|R
50|$|The {{results of}} the {{election}} were delayed after problems with the electronic counting system led to the count being <b>suspended</b> <b>and</b> then <b>resumed</b> later manually. When the results were declared the Conservatives increased their majority on the council after making 5 gains among the 18 seats that were being contested.|$|R
50|$|In the Major League Baseball postseason, {{regardless}} of inning, all games stopped {{at any time}} for weather are considered <b>suspended</b> <b>and</b> continued {{from the point of}} stoppage when play resumes, no matter if the game has not reached the requirements above. This rule was put into place as a result of Game 5 of the 2008 World Series, which was the first postseason game in history to be <b>suspended</b> <b>and</b> <b>resumed</b> from the point of suspension. Prior to the 2009 postseason, a playoff game had to have at least five innings completed in order to be suspendable; a playoff game stopped prior to that point had to be started over. An example was Game 1 of the 1982 National League Championship Series, which {{reached the top of the}} fifth inning, but had to be restarted from scratch the next day.|$|R
40|$|When doing {{inference}} in ProbLog, a probabilistic {{extension of}} Prolog, we extend SLD resolution with some additional bookkeeping. This additional information {{is used to}} compute the probabilistic results for a probabilistic query. In Prolog's SLD, goals are nested very naturally. In ProbLog's SLD, nesting probabilistic queries interferes with the probabilistic bookkeeping. In order to support nested probabilistic inference we propose {{the notion of a}} parametrised ProbLog engine. Nesting becomes possible by <b>suspending</b> <b>and</b> <b>resuming</b> instances of ProbLog engines. With our approach we realise several extensions of ProbLog such as meta-calls, negation, and answers of probabilistic goals. Comment: Online Proceedings of the 11 th International Colloquium on Implementation of Constraint LOgic Programming Systems (CICLOPS 2011), Lexington, KY, U. S. A., July 10, 201...|$|R
40|$|We {{introduce}} {{just enough}} tabling (JET), {{a mechanism to}} <b>suspend</b> <b>and</b> <b>resume</b> the tabled execution of logic programs at an arbitrary point. In particular, JET allows pruning of tabled logic programs to be performed without resorting to any recomputation. We discuss issues {{that are involved in}} supporting pruning in tabled resolution, how re-execution of tabled computations which were previously pruned can be avoided, and we describe the implementation of such a scheme based on an abstract machine like CHAT, which implements the suspension/resumption support that tabling requires through a combination of freezing and copying of execution states of suspended computations. Properties of just enough tabling and possible uses of the JET mechanism in a tabling system are also briefly discussed...|$|R
40|$|Memory for goals theory (Altmann & Trafton, 2002) {{describes}} how people <b>suspend</b> <b>and</b> <b>resume</b> an interrupted task by encoding, or rehearsing, the current problem {{state at the}} point of interruption and recalling this state after the interruption. In this work we investigated the timing of the encoding process, attempting to determine the most likely strategies for when to perform encoding of interrupted problem state. We examined several candidate encoding strategies and developed computational cognitive models to represent each strategy, embedding the models into a larger model of behavior in a interruption-tracking task. Comparison of the model simulations with recent empirical data suggests that encoding of problem state occurs for a short time {{at the start of the}} interruption period and is performed concurrently with the interrupting task...|$|R
40|$|Abstract. This paper {{demonstrates}} {{an architecture}} for <b>suspending</b> <b>and</b> <b>resuming</b> methods in Java using a restricted form of continuation passing style (CPS) transformation. It describes Kilim 1, a toolkit to portably weave threads of control called Fibers, through Java code. The chief contributions {{of this paper}} are the set of design choices made for both space and time efficiency in getting one-shot continuations {{to work on the}} JVM (in some cases, 60 x faster than competing approaches) and to address some tough issues traditionally passed over by others, such as handling of local subroutines and constructors. We are able to support hundreds of thousands of threads of control with switching times of the order of 3 to 4 μs on a low-powered laptop with Sun’s JVM...|$|R
50|$|Class B: Can be {{connected}} to GPRS service and GSM service (voice, SMS), but using only {{one or the other}} at a given time. During GSM service (voice call or SMS), GPRS service is <b>suspended,</b> <b>and</b> then <b>resumed</b> automatically after the GSM service (voice call or SMS) has concluded. Most GPRS mobile devices are Class B.|$|R
40|$|Traditional real options {{analysis}} addresses investment under uncertainty {{assuming a}} risk-neutral decision maker and complete markets. In reality, however, decision makers are often risk averse and markets are incomplete. Additionally, capital projects are seldom now-or-never investments {{and can be}} abandoned, <b>suspended,</b> <b>and</b> <b>resumed</b> at any time. In this thesis, we develop a utility-based framework {{in order to examine}} the impact of operational flexibility, via suspension and resumption options, on optimal investment policies and option values. Assuming a risk-averse decision maker with perpetual options to <b>suspend</b> <b>and</b> <b>resume</b> a project costlessly, we confirm that risk aversion lowers the probability of investment and demonstrate how this effect can be mitigated by incorporating operational flexibility. Also, we illustrate how increased risk aversion may facilitate the abandonment of a project while delaying its temporary suspension prior to permanent resumption. Besides timing, a firm may have the freedom to scale the investment’s installed capacity. We extend the traditional real options approach to investment under uncertainty with discretion over capacity by allowing for a constant relative risk aversion utility function and operational flexibility in the form of suspension and resumption options. We find that, with the option to delay investment, increased risk aversion facilitates investment and decreases the required investment threshold price by reducing the amount of installed capacity. We explore strategic aspects of decision making under uncertainty by examining how duopolistic competition affects the entry decisions of risk-averse investors. Depending on the discrepancy between the market share of the leader and the follower, greater uncertainty may increase or decrease the discrepancy in the non-pre-emptive leader’s relative value. Furthermore, risk aversion does not affect the loss {{in the value of the}} leader for the pre-emptive duopoly setting, but it makes the loss in value relatively less for the leader in a non-preemptive duopoly setting...|$|R
40|$|Virtual Machines {{allow for}} an easy {{abstraction}} as they encapsulate the entire running environment including the state of hardware like the processor. This encapsulation allows for quick <b>suspends</b> <b>and</b> <b>resumes</b> <b>and</b> therefore allows us to explore a number of exciting ideas {{in the field of}} user mobility. However one of the disadvantages of this encapsulation is that it can be very large and in the order of a number of gigabytes. Moving such heavy objects across networks can be slow and cumbersome. In this paper, we propose to exploit the presence of predetermined blocks of hashed data at sites closer to the resume site to reconstruct a portion of the Virtual Machine image without having {{to go back to the}} distributed file system. We intend to extend the work done for the Virtual Machine based Internet Suspend/Resume [8] system to develop our prototype...|$|R
