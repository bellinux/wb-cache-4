126|328|Public
25|$|Fermat primes are {{particularly}} useful in generating pseudo-random sequences of {{numbers in the}} range 1 … N, where N is a power of 2. The most common method used is to take any <b>seed</b> <b>value</b> between 1 and Pnbsp&−nbsp&1, where P is a Fermat prime. Now multiply this by a number A, which {{is greater than the}} square root of P and is a primitive root modulo P (i.e., it is not a quadratic residue). Then take the result modulo P. The result is the new value for the RNG.|$|E
25|$|Each Nintendo 64 Game Pak {{contains}} a lockout chip (conceptually {{similar to the}} 10NES) to prevent manufacturers from creating unauthorized copies of games and discourage production of unlicensed games. Unlike previous versions, the N64 lockout chip {{contains a}} <b>seed</b> <b>value</b> {{which is used to}} calculate a checksum of the game's boot code. To discourage playing of copied games by piggybacking on a real Game Pak, Nintendo produced five different versions of the chip. During the boot process, and occasionally while the game is running, the N64 computes the checksum of the boot code and verifies it with the lockout chip in the Game Pak, failing to boot if the check fails.|$|E
60|$|Let us now suppose, {{by way of}} {{an extreme}} case, that some {{contrivance}} is discovered, whereby the purposes to which the second third of the produce had been devoted, may be dispensed with altogether: that some means are invented by which {{the same amount of}} produce may be procured without the assistance of any fixed capital, or the consumption of any seed or material sufficiently valuable to be worth calculating. Let us, however, suppose that this cannot be done without taking on a number of additional labourers, equal to those required for producing the seed and fixed capital; so that the saving shall be only in the profits of the previous capitalists. Let us, in conformity with this supposition, assume that in dispensing with the fixed capital and <b>seed,</b> <b>value</b> 60 quarters, it is necessary to take on 40 additional labourers, receiving a quarter of corn each, as before.|$|E
5000|$|The {{choice of}} the {{independent}} variable to which differentiation is performed affects the <b>seed</b> <b>values</b> [...] and [...] Suppose one {{is interested in the}} derivative of this function with respect to [...] In this case, the <b>seed</b> <b>values</b> should be set to: ...|$|R
30|$|Starting <b>seed</b> <b>values</b> are {{encrypted}} using {{public key}} of the receiver.|$|R
30|$|<b>Seed</b> <b>values,</b> for the LFSR, {{depend upon}} the {{pseudo-random}} sequence generated by the chaos.|$|R
50|$|The global {{private key}} is {{generally}} handled using a pseudo-random number generator. It is then sufficient to store a <b>seed</b> <b>value.</b> One-time secret keys are derived successively from the <b>seed</b> <b>value</b> using the generator. With this approach, the global private key {{is also very}} small, e.g. typically 32 bytes.|$|E
5000|$|As {{should be}} {{apparent}} {{from the above}} description, the state needed for a Mersenne Twister implementation is an array of n values of w bits each. To initialize the array, a w-bit <b>seed</b> <b>value</b> is used to supply x0 through xn − 1 by setting x0 to the <b>seed</b> <b>value</b> and thereafter setting ...|$|E
50|$|The {{unformatted}} page {{contains a}} 10-bit word, called a master-slave <b>seed</b> <b>value.</b>|$|E
40|$|We {{describe}} an algorithm for inverting an iteration of the one-dimensional cellular automaton. The algorithm {{is based on}} the linear approximation of the updating function, and requires less than exponential time for particular classes of updating functions and <b>seed</b> <b>values.</b> For example, an n-cell cellular automaton based on the updating function CA 30 can be inverted in O#n# time for certain <b>seed</b> <b>values,</b> and at most 2 n= 2 trials are required for arbitrary <b>seed</b> <b>values.</b> The inversion algorithm requires at most 2 #q, 1 ## 1,##n trials for arbitrary nonlinear functions and <b>seed</b> <b>values,</b> where q is the number of variables of the updating function, and # is the probability of agreement between the function and its best affine approximation. The inversion algorithm coupled with the method of Meier and Staffelbach # 6 # becomes a powerful tool to cryptanalyze the random number generators based on one-dimensional cellular automata, showing that these random number generators provide less amount [...] ...|$|R
50|$|As {{with all}} {{pseudorandom}} number generators, the resulting sequences are {{functions of the}} supplied <b>seed</b> <b>values.</b>|$|R
40|$|The K-means {{algorithm}} for clustering is {{very much}} dependent on the initial <b>seed</b> <b>values.</b> We use a genetic algorithm to find a near-optimal partitioning of the given data set by selecting proper initial <b>seed</b> <b>values</b> in the K-means algorithm. Results obtained are very encouraging and {{in most of the}} cases, on data sets having well separated clusters, the proposed scheme reached a global minimum...|$|R
5000|$|Many {{square root}} {{algorithms}} require an initial <b>seed</b> <b>value.</b> If the initial <b>seed</b> <b>value</b> is {{far away from}} the actual square root, the algorithm will be slowed down. It is therefore useful to have a rough estimate, which may be very inaccurate but easy to calculate. With [...] expressed in scientific notation as [...] where [...] and n is an integer, the square root [...] can be estimated as ...|$|E
5000|$|The {{period of}} a CLCG is {{dependent}} on the <b>seed</b> <b>value</b> used to initiate the algorithm. The maximum {{period of a}} CLCG is defined by the function: ...|$|E
5000|$|An unfold on lists {{would build}} a (potentially infinite) list from a <b>seed</b> <b>value.</b> Typically, the unfold takes a <b>seed</b> <b>value</b> , a one-place {{operation}} [...] that yields a pairs of such items, and a predicate [...] which determines when to finish the list (if ever). In the action of unfold, the first application of , to the seed , would yield [...] The list defined by the unfold would then begin with [...] and be followed with the (potentially infinite) list that unfolds from the second term, , with the same operations. So if , then the list will begin , where [...] {{is the result of}} unfolding v with r, and so on.|$|E
30|$|As we know, {{slight change}} in <b>seed</b> <b>values</b> will {{generate}} the complete different pseudo-random sequences (using chaos).|$|R
50|$|Windows's CryptoAPI {{uses the}} binary {{registry}} key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\RNG\Seed to store a <b>seeded</b> <b>value</b> {{from all of}} its entropy sources.|$|R
30|$|Encrypt <b>seed</b> <b>values</b> {{along with}} data size using public key of {{receiver}} as F = E((Seed + Secret Data Size),Public key of Receiver), and embed in cover image.|$|R
50|$|The second method uses {{computational}} algorithms {{that can}} produce long sequences of apparently random results, which are in fact completely determined by a shorter initial value, known as a <b>seed</b> <b>value</b> or key. As a result, the entire seemingly random sequence can be reproduced if the <b>seed</b> <b>value</b> is known. This type of random number generator is often called a pseudorandom number generator. This type of generator typically does not rely on sources of naturally occurring entropy, {{though it may be}} periodically seeded by natural sources. This generator type is non-blocking, so they are not rate-limited by an external event, making large bulk reads a possibility.|$|E
50|$|Multiple Mersenne Twister {{instances}} {{that differ}} only in <b>seed</b> <b>value</b> (but not other parameters) are not generally appropriate for Monte-Carlo simulations that require independent random number generators, though {{there exists a}} method for choosing multiple sets of parameter values.|$|E
5000|$|An analog or digital {{source of}} {{unpredictable}} (i.e., high entropy), unbiased, and usually independent (i.e., random) output bits. A [...] "truly" [...] random generator {{may be used}} to feed a (more practical) deterministic pseudo-random random number generator, which extends the random <b>seed</b> <b>value.</b>|$|E
5000|$|In {{its most}} common form, a lag-r MWC {{generator}} requires abase b, a multiplier a, {{and a set}} ofr+1 random <b>seed</b> <b>values,</b> consisting of r residues of b, ...|$|R
50|$|Heuristics {{may produce}} results by themselves, {{or they may}} be used in {{conjunction}} with optimization algorithms to improve their efficiency (e.g., they may be used to generate good <b>seed</b> <b>values).</b>|$|R
5000|$|... {{with the}} golden ratio &radic;, , and [...]This is because an AVL tree of height [...] {{contains}} at least [...] nodes where [...] is the Fibonacci sequence with the <b>seed</b> <b>values</b> , [...]|$|R
50|$|The {{pseudorandom}} keystream {{is typically}} generated serially from a random <b>seed</b> <b>value</b> using digital shift registers. The <b>seed</b> <b>value</b> {{serves as the}} cryptographic key for decrypting the ciphertext stream.Stream ciphers represent {{a different approach to}} symmetric encryption from block ciphers. Block ciphers operate on large blocks of digits with a fixed, unvarying transformation. This distinction is not always clear-cut: in some modes of operation, a block cipher primitive is used {{in such a way that}} it acts effectively as a stream cipher. Stream ciphers typically execute at a higher speed than block ciphers and have lower hardware complexity. However, stream ciphers can be susceptible to serious security problems if used incorrectly (see stream cipher attacks); in particular, the same starting state (seed) must never be used twice.|$|E
5000|$|... is impure {{because each}} call {{potentially}} yields a different value. This is because pseudorandom generators use and update a global [...] "seed" [...] state. If we modify {{it to take}} the seed as an argument, i.e. then [...] becomes pure, because multiple calls with the same <b>seed</b> <b>value</b> return the same random number.|$|E
5000|$|... 65537 is {{also used}} as the modulus in some Lehmer random number generators, {{such as the one}} used by ZX Spectrum, which ensures that any <b>seed</b> <b>value</b> will be coprime to it (vital to ensure the maximum period) while also {{allowing}} efficient reduction by the modulus using a bit shift and subtract.|$|E
50|$|The diamond-square {{algorithm}} {{starts with}} a 2D grid then randomly generates terrain height from four <b>seed</b> <b>values</b> arranged in a grid of points so that the entire plane is covered in squares.|$|R
50|$|With the <b>seed</b> <b>values</b> set, one {{may then}} {{propagate}} the values using the chain rule {{as shown in}} both the table below. Figure 2 shows a pictorial depiction of this process as a computational graph.|$|R
5000|$|To {{compute the}} {{gradient}} of this example function, which requires the derivatives of [...] {{with respect to}} not only [...] but also , one must perform an additional sweep over the computational graph using the <b>seed</b> <b>values</b> [...]|$|R
50|$|Additionally a <b>seed</b> <b>value</b> is {{appended}} {{to the end}} of {{the data}} when computing the CRC. The seed is generated with every new message set of the protocol, and it is hashed in a similar way as the packets from each message specifications. Systems using the MAVLink protocol can use a precomputed array to this purpose.|$|E
5000|$|... 32 bits are {{encrypted}} (the rolling code) : 4 bits of button information, 2 bits of OVR (used {{to extend}} counter value), 10 bits of DISC (discrimination value; often the low 10 {{bits of the}} serial number), and a 16-bit counter. In a resyncing situation, the encrypted 32 bits are replaced with a 32-bit <b>seed</b> <b>value.</b>|$|E
50|$|Folds {{are in a}} sense dual to unfolds, {{which take}} a <b>seed</b> <b>value</b> and apply a {{function}} corecursively {{to decide how to}} progressively construct a corecursive data structure, whereas a fold recursively breaks that structure down, replacing it with the results of applying a combining function at each node on its terminal values and the recursive results (catamorphism, versus anamorphism of unfolds).|$|E
5000|$|The {{period of}} a general mixed congruential {{generator}} is at most m, and for some choices of factor a much less than that. The mixed congruential generator will have a full period for all <b>seed</b> <b>values</b> if and only if: ...|$|R
40|$|International audienceThis paper {{presents}} a simple hardware architecture for computing the <b>seed</b> <b>values</b> for reciprocal and square root reciprocal. These seeds {{are used in}} the intitialization of floating-point division and square root software iterations. The proposed solution is based on polynomial approximation with specific coefficients and a table lookup...|$|R
30|$|After {{finishing}} {{mutual authentication}} process, the proposed connectivity architecture performs two-phase key seed distribution. Basically, after distributing 255 <b>seed</b> <b>values</b> {{in the existing}} method, these values were performed XOR operation to generate the link encryption key of 128 [*]bits. However, the existing method have some problems such as key seeds are sent to a node as a plaintext and all key <b>seed</b> <b>values</b> (maximum 255 <b>seeds)</b> should be guaranteed their successful transmission each time without loss. Therefore, in this paper, we propose two-phase key seed distribution approaches called quick and main mode. In case of quick mode, it can provide DoS resilient capability {{because it does not}} need to send maximum 255 key seeds every time. And a main mode can provide the confidentiality of the key <b>seed</b> <b>values</b> using all different seed encryption keys. Current RF 4 CE standard does not provide any protection during key seed distribution, while our protocol provides the secure protection for the initial key seed distribution. In the pairing phase (Figure 5), controller device can verify target's certificate and obtain the public key of the target. Anyone who eavesdrop the communication cannot know or modify SEK_R since SEK_R is encrypted with accompanying hashed value. The message from controller device can be easily authenticated by target's private key, while previous methods do not provide the message authentication in this phase.|$|R
