173|173|Public
50|$|Specification {{languages}} generally rely on abstractions of {{one kind}} or another, since specifications are typically defined earlier in a project, (and at a more abstract level) than an eventual implementation. The UML specification language, for example, allows the definition of abstract classes, which in a waterfall project, remain abstract during the architecture and <b>specification</b> <b>phase</b> of the project.|$|E
50|$|Prototyping is a {{means of}} {{exploring}} ideas before an investment is made in them. Depending on the scope of the prototype and the level of detail required, prototypes can be built {{at any time during the}} project. Sometimes they are created early in the project, during the planning and <b>specification</b> <b>phase,</b> commonly using a process known as breadboarding; that's when the need for exploration is greatest, and when the time investment needed is most viable. Later in the cycle packaging mock-ups are used to explore appearance and usability, and occasionally a circuit will need to be modified to take these factors into account.|$|E
50|$|Storyboarding {{is used in}} {{software}} development as part of identifying the specifications for {{a particular set of}} software. During the <b>specification</b> <b>phase,</b> screens that the software will display are drawn, either on paper or using other specialized software, to illustrate the important steps of the user experience. The storyboard is then modified by the engineers and the client while they decide on their specific needs. The reason why storyboarding is useful during software engineering is that it helps the user understand exactly how the software will work, much better than an abstract description. It is also cheaper to make changes to a storyboard than an implemented piece of software.|$|E
5000|$|... #Subtitle level 2: <b>Specifications</b> (<b>Phase</b> I with Quantum Advantage High Performance wing) ...|$|R
25|$|Various {{applications}} require clocks with predefined {{signal and}} performance specifications. Of these, the key <b>specifications</b> are <b>phase</b> noise and frequency stability.|$|R
40|$|Abstract: We {{present in}} this paper a set of {{concepts}} that extend a design method issued from the Software Engineering domain, {{in order to take}} into account Human-Computer Interaction design, in particular for Augmented Reality systems. Previous works focused on the initial phases of development (i. e., <b>Specification</b> <b>phases).</b> Our efforts concentrate on the Analysis phase, into which we have introduced a new concept – Interactional Objects- that allows designers to structure the interactional space, and a specific relation that permits to draw links between the business and interactional spaces. These contributions also enable developers to develop reusable components and encourage code generation. 1...|$|R
40|$|In {{this paper}} we {{construct}} java code for <b>specification</b> <b>phase</b> of the Geoquorum approach: implementing atomic read / write shared memory in mobile ad hoc networks using fuzzy logic. This code {{is based on}} graphical user interface and is considered a tool to determine the specification of the communication protocol based on asynchronous real time distributed system using java language. This code satisfies the accuracy and determines {{the requirements of the}} <b>specification</b> <b>phase</b> using fuzzy logic of our suggested application...|$|E
40|$|Abstract—Aspect-oriented {{software}} development (AOSD) {{has emerged in}} recent years as a new paradigm for {{software development}}, providing mechanisms to localize cross-cutting concerns (i. e. scattered in many locations) during the software development process. Aspect interaction problems (due to their integration into the base components) is an important issue in AOSD; verification is most often based on a detection and correction strategy. This paper presents an ongoing work which goal is to built a prevention mechanism at the <b>specification</b> <b>phase</b> for aspect-oriented systems. This prevention mechanism will allow to avoid undesirable interactions in a aspect-oriented system. By acting at the <b>specification</b> <b>phase,</b> we believe that verification will be made timeless and costless. I...|$|E
40|$|Schemes for specifying {{synchronization}} {{relations between}} multimedia data have important ramifications from user level specification to system level schedule generation. This paper examines {{the problems of}} synchronizing multimedia objects in a multimedia presentation. We present a scheme to handle the general problem of temporal relationship specification and scheduling. The scheme proposes a two phased approach with a <b>specification</b> <b>phase</b> and a scheduling phase. The first phase focuses on assisting users to construct a consistent temporal relationship specification. The second phase ensures that the actual presentation proceeds according to the consistent temporal relationship specification despite dynamic factors such as resource contention. The use of Synchronization Relation Tree (SRT) as a formal temporal relationship specification to capture the temporal information is proposed. Consistency checks can be performed on the SRT during the <b>specification</b> <b>phase.</b> In order to gu [...] ...|$|E
5000|$|If {{there is}} any {{specification}} which is only partially complete, such as approximation of a magnitude response without the <b>specification</b> of <b>phase</b> response, this can be implemented with greater ease in the frequency domain rather than the space domain.|$|R
50|$|In {{line with}} other GSM <b>specifications,</b> later <b>phases</b> should be fully {{backwards}} compatible with earlier phases; this {{is achieved by}} means of the Transaction Capabilities Application Part (TCAP) Application Context (AC) negotiation procedure, with each CAMEL phase is allocated its own AC version.|$|R
40|$|International audienceEvaluation is {{a crucial}} phase in ontological life cycle. It helps to simplify the {{development}} of ontologies, to ensure their relevance to the requirement of a particular domain, and to detect eventual ontology changes. The main limit of the existing evaluation methods is that they use the quality to select resources and metrics to be used during analysis and <b>specification</b> <b>phases</b> or to describe the ontology after its implementation or even after its deployment. In this paper, we try to summarize difficulties, methods and criteria for assessing the quality of ontologies in order to design a high quality ontology dedicated to satellite imagery. We propose an incremental and quality directed approach to conceptual enrichment of an ontological core from a set of existing geographic ontologies...|$|R
40|$|This paper {{provides}} a brief {{introduction to the}} work that aims to apply the achievements within the area of engineering psychology {{to the area of}} formal methods, focusing on the <b>specification</b> <b>phase</b> of a system development process. Comment: Preprint. Final version published in Proceedings of IADIS International Conference Interfaces and Human Computer Interaction 2012 (IHCI 2012), 201...|$|E
40|$|Product {{quality is}} far more than "fitness for use" and {{robustness}} in the manufacturing process. This paper discusses the phenomena of product quality in the entire product life. It presents a total life model which serves several purposes, such as expanding the design teams' understanding of quality and adding structure to total life scenarios in the <b>specification</b> <b>phase...</b>|$|E
40|$|The <b>specification</b> <b>phase</b> {{is one of}} {{the most}} {{important}} and least supported part of the software development process. We have conceived SAREL (Assistance System for Writing Software Specification in Natural Language) as a tool to improve the <b>specification</b> <b>phase.</b> SAREL is a continuation of a program of research and development called LESD (Linguistic Engineering for Software Design). The purpose of SAREL 1 is to assist engineers in the creation of software specifications written in natural language. It is divided into three modules: the first one controls the requirement according to the writing norms, the second one obtains a conceptual representation using the Knowledge Base, and the third one carries out a series of optional analyses taking into account the following software quality properties: consistency, completeness, traceability, verifiability and modifiability. Once a requirement has been labeled as correct, its conceptual representation is added to the Requiremen [...] ...|$|E
40|$|Principles for {{the design}} and {{stability}} of a spacecraft on-orbit attitude control system employing on-off Reaction Control System (RCS) thrusters is presented. Both the vehicle dynamics and the control system actuators are inherently nonlinear, hence traditional linear control system design approaches are not directly applicable. This paper has three main aspects: It summarizes key RCS control System design principles from the Space Shuttle and Space Station programs, it demonstrates {{a new approach to}} develop a linear model of a phase plane control system using describing functions, and applies each of these to the initial development of the NASA's next generation of upper stage vehicles. Topics addressed include thruster hardware <b>specifications,</b> <b>phase</b> plane design and stability, jet selection approaches, filter design metrics, and automaneuver logic...|$|R
40|$|Basic {{principles}} {{for the design}} and stability of a spacecraft on-orbit attitude control system employing on-off Reaction Control System (RCS) thrusters are presented. Both vehicle dynamics and the control system actuators are inherently nonlinear, hence traditional linear control system design approaches are not directly applicable. This paper has two main aspects: It summarizes key RCS design principles from earlier NASA vehicles, notably the Space Shuttle and Space Station programs, and introduces advances in the linear modelling and analyses of a phase plane control system derived in the initial development of the NASA's next upper stage vehicle, the Exploration Upper Stage (EUS). Topics include thruster hardware <b>specifications,</b> <b>phase</b> plane design and stability, jet selection approaches, filter design metrics, and RCS rotational maneuver logic...|$|R
25|$|Video {{requires}} a wider bandwidth and tighter differential <b>phase</b> <b>specification</b> {{which in turn}} results in a tighter dimensional specification for the cable.|$|R
40|$|This paper aims to {{describe}} {{an extension of}} the SAREL system (Assistance System for Writing Software Specification in Natural Language) whose main goal is to improve the <b>specification</b> <b>phase.</b> The initial purpose of SAREL was to assist engineers in the creation of software specification written in natural language. At present the functionality of the system is twofold: vertical processing and horizontal processing. In vertical processing the input is a software specification written in natural language and the output is the conceptual representation associated. In this case the system validates every requirement taking into account the writing norms and the quality properties. The conceptual representation can be used to check the software quality factors. Working in horizontal processing the input is two different conceptual representations and the output is the information about the correspondence between them. 1 INTRODUCTION. The <b>specification</b> <b>phase</b> {{is one of the most}} important an [...] ...|$|E
40|$|Security by Design and Secure Engineering {{are among}} the most {{pressing}} challenges in IT Security research and practice. Increased attacker potential and dependence on IT-Systems in economy and in critical infrastructures cause a higher demand in securely engineered systems and thus in new approaches and methodologies. This paper introduces a consistent methodology for designing secure systems during the <b>specification</b> <b>phase.</b> The Security Modeling Framework SeMF serves as basis for its security vocabulary. We extend SeMF by the concept of SeMF Building Blocks SeBBs as reasoning tool and provide a security design process utilizing them as refinement artifacts. This process guides the decision making during the system <b>specification</b> <b>phase</b> focused on the security aspects and integrates with refinement driven functional engineering processes. Our approach further results in a security design documentation and residual assumptions that can serve as a basis for risk assessment, c ode review, and organizational security means during deployment...|$|E
40|$|FlowUML is a logic-based {{system to}} {{validate}} information flow policies at the requirements <b>specification</b> <b>phase</b> of UML based designs. It uses Horn clauses to specify information flow polices {{that can be}} checked against flow information extracted from UML sequence diagrams. FlowUML policies can be written at a coarse grain level of caller-callee relationships or at a finer level involving passed attributes...|$|E
50|$|During the FCC {{approval}} process, several manufacturers {{applied to}} the FCC for consideration. Most notably the Electronic Industries Alliance (EIA) and Japanese EIA asked {{to be included in}} order to represent their members in the testing and <b>specification</b> <b>phases</b> of the approval process. WTTW engineers helped set standards for frequency response, separation, and other uses of the spectrum. They also provided program source material used for the testing and maintained the broadcast chain. A 3M 24-track audio recorder was used to allow the selection of 12 different stereo programs for testing. The Matsushita Quasar TV manufacturing plant and laboratory, just west of Chicago, was used as the source for all testing of the competing systems. Following the testing, several questions were raised about the validity of some of the tests, and a second round of testing began.|$|R
40|$|Mars Pathfinder Project {{requires}} a Ground Data System that supports both an engineering and a science payload with reduced mission operations and planning schedules. Also, successful surface {{operation of the}} lander camera requires efficient mission planning and accurate pointing of the camera, To meet these challenges, the GDS Team designed a new software strategy that integrates virtual reality technology with existing JPL Navigational Ancillary Information Facilities and image processing capabilities. The result is an interactive, workstation-based application software that provides a high resolution, 3 -dimensional, stereo display of Mars {{as if it were}} viewed through the lander camera. The design, implementation strategy and parameter <b>specification</b> <b>phases</b> for the development of this software have already been completed, and the prototype has been tested. When completed, this software will allow science investigators and mission planners to access simulated and actual scenes o [...] ...|$|R
40|$|The paper {{reports the}} {{findings}} of a project to develop an online information literacy tutorial at the DCMT Library, Cranfield University. This case study is intended to highlight some of the issues raised in designing and developing a tutorial for a specific target audience and to describe the actual tutorial package. The paper describes the research and <b>specification</b> <b>phases</b> of the project and includes an in-depth discussion on the tutorial design and lessons learnt to date. Discussion on the tutorial design includes commentary on the navigation, themes associated with specific tutorials and the tools used to engage the user, including a generic search engine. A summary of the lessons learnt are:•Allow more time and place more emphasis on early planning activities;•Involve end users often and earlier;•Define the learning outcomes more clearly;•Ensure the project maintains good communication and mediation processes...|$|R
40|$|This report {{presents}} a SAREL system {{and it is}} compared with several systems focused {{on the quality of}} the <b>specification</b> <b>phase</b> in software development process. The main goal of SAREL system is to assist engineers in the creation of software specifications written in natural language. The assistance process takes into account the writing norms and the main quality properties. Postprint (published version...|$|E
40|$|In {{this paper}} {{we present a}} timed {{extension}} of the AltaRica language, Timed AltaRica, and describe the architecture of a compiler from Timed AltaRica to timed automata. We present {{the features of the}} language, namely modularity, hierarchical modeling and reuse of components during the <b>specification</b> <b>phase,</b> on an avionics example. Then, we use the compiler from Timed AltaRica to Timed Automata to check some safety properties on the system. ...|$|E
40|$|The {{demand for}} more complex but also more {{reliable}} and correct computer based systems on the one hand, {{and the fact that}} several changes in the user requirements through the development cycle on the other hand, leads to the need for more formal but also agile development methodologies. X-Machines is an intuitive formal method which can be easily applied to agile methodologies, especially in <b>specification</b> <b>phase,</b> gaining a lot of advantages...|$|E
40|$|In {{this paper}} an {{approach}} based on inversion formulae {{is used for}} the design of lead-lag compensators which satisfy frequency domain <b>specifications</b> on <b>phase</b> margin, gain margin and phase (or gain) crossover frequency. An analytical and graphical procedure for the compensator design on the Nyquist and Nichols planes is presented with some numerical examples...|$|R
40|$|During the {{development}} of Safety Critical Systems, the early specification activity, and the late phase of test have a primary importance. Software companies involved in the domain use to propose specific development cycles adapted to the stringent safety-related needs. We propose to increase the formality of {{the development}} process by using a temporal logic framework. We show the potential benefit during the validation of the early specification and during the conception and use of tests cases. Our approach is complementary to a common development cycle, and we show {{it can be used}} without upsetting the usual industrial practice. 1. INTRODUCTION The increasing system complexity demands the use of adapted development methodologies, {{especially in the case of}} systems performing safety related functions. The evolution of industrial practice aims at fulfilling this by various means, for example by enhancing the <b>specification</b> <b>phases,</b> by automating, as much as possible, the software code or [...] ...|$|R
50|$|The CM {{would advise}} the {{architect}} and owner on cost and construction technology during the design phase and would estimate the total cost. The architect would complete the construction drawings and <b>specifications</b> in <b>phases</b> and the CM would take open, competitive bids for those {{phases of the}} work, overlapping the design and construction activities. For instance, the CM might take bids for site clearing and grading {{as soon as the}} basic building configuration was set and drawings and <b>specifications</b> for that <b>phase</b> of the work were complete. Companies that typically functioned as subcontractors would bid the work. The low bidder would have a direct contract with the owner, metamorphosing from subcontractor to prime contractor. The owner would have multiple prime contracts.|$|R
40|$|Employing formal {{methods for}} complex systems {{specification}} is steadily growing {{from year to}} year. Whereas the formal specification process from abstraction to implementation via refinement is well understood, the traceability between initial user requirements (requirements analysis) and the corresponding formal specification is still unsatisfying and ambiguous. In fact, there is little research on reconciling the requirements phase with the formal <b>specification</b> <b>phase.</b> Consequently, {{the gap between the}} requirements phase and the formal <b>specification</b> <b>phase</b> continues to grow larger and the reconciliation seems more and more difficult and complicated. Our objective is to combine these two phases by using KAOS and the B method. KAOS is a goal-oriented methodology for requirements engineering enabling analysis to build requirements models and to derive requirements documents. B is a model-based formal method supported by tools and that allows the design of systems, from specification to implementation. For that purpose, we propose to derive the architecture of the B specification from the KAOS goal model. This makes traceability between KAOS requirements and B models more explicit...|$|E
40|$|Abstract — The {{applications}} conceptual models, {{during the}} requirements identification phase, uses an independent platform model for abstract {{a great part}} of the system specification without a formal verification, be either syntactic or semantic. This paper proposes an architecture for constructing MDA models using OWL (Ontology Web Language) formalizing concepts about application domain and reducing the time of models maintenances during the business rules <b>specification</b> <b>phase.</b> Index Terms — Ontology, model, MDA, OWL. I...|$|E
40|$|Abstract. The {{research}} reported upon in {{this paper}} aims at reducing errors in both the requirements engineering and the system <b>specification</b> <b>phase</b> of software development, by means of system ontology. The notion of system ontology is introduced and discussed. A particular generic ontology is presented {{as well as an}} accompanying diagramming technique. The application of system ontology in software development is demonstrated and discussed, using the design of a traffic control system as an example. ...|$|E
40|$|Today, {{in a very}} {{competitive}} industrial context, different companies have difficulties to respect delays in design and manufacturing of multi-domain product. These difficulties are most of time due to the non respect of requirements defined {{at the beginning of}} the project development, during the Function Performance <b>Specifications</b> <b>phase.</b> Furthermore, an important problem during multi-domain products design and development process is the communication between experts of different domains. To answer to this problem, the authors propose in this paper to describe and analyze this problematic through a meta-model. They focus only on mecatronic product. From the proposed meta-model analysis, they develop two possible links between both mechanical and electronic domains in a model: (1) between models and (2) between analysis tools of different domains. The application of this model to a concrete example shows that we can link all the main common data of a product design and development to the modeling and simulation tools of different domains...|$|R
40|$|AbstractThis work {{presents}} {{the effects of}} radio-frequency Local Oscillator non-idealities on OFDM inter-carrier interference. The synthesizer has the main role on modulation and demodulation process of base band IQ signals to radio frequency channels which need to fulfill several requirements imposed by standards <b>specifications.</b> <b>Phase</b> and frequency stability are crucial, since the synchronization of the entire system depends on the accuracy of this circuit. The discussed OFDM system {{is based on a}} simulation scenario including radio-frequency channel conversion considering Local Oscillator with configurable phase noise power and bandwidth. This feature allows the study of global system based on Local Oscillator output spectrum. Sub-channel spacing, cyclic redundancy and pulse shaping are configurable. The obtained results indicate that free run oscillator phase noise characterization is not appropriate when the Local Oscillator in the radio-frequency front end is based on synthesizer architecture. System evaluation is based on error vector magnitude. The relation of this metric with the Local Oscillator phase noise allows the performance estimation of the global system...|$|R
40|$|This paper {{explores the}} effects of virtual {{development}} on product quality, {{from the viewpoint of}} "conformance to specifications". Specifically, causes of defect injection and non- or late-detection are explored. Because of the practical difficulties of obtaining hard project-specific defect data, an approach was taken that relied upon accumulated expert knowledge. The accumulated expert knowledge based approach was found to be a practical alternative to an in-depth defect causal analysis on a per-project basis. Defect injection causes seem to be concentrated in the requirements <b>specification</b> <b>phases.</b> Defect dispersion is likely to increase, as requirements specifications are input for derived requirements specifications in multiple, related sub-projects. Similarly, a concentration of causes for the non- or late detection of defects was found in the Integration Test phases. Virtual development increases the likelihood of defects in the end product because of the increased likelihood of defect dispersion, because of new virtual development related defect causes, and because causes already existing in co-located development are more likely to occur. </p...|$|R
