2|10000|Public
50|$|Scrumban is a <b>software</b> <b>production</b> <b>model</b> {{based on}} Scrum and Kanban. Scrumban is {{especially}} suited for product maintenance with frequent and unexpected work items, such as production defects or programming errors. In such cases the time-limited sprints of the Scrum framework {{may be perceived}} to be of less benefit, although Scrum's daily events and other practices can still be applied, depending on the team and the situation at hand. Visualization of the work stages and limitations for simultaneous unfinished work and defects are familiar from the Kanban model. Using these methods, the team's workflow is directed {{in a way that}} allows for minimum completion time for each work item or programming error, {{and on the other hand}} ensures each team member is constantly employed.|$|E
40|$|The {{emergence}} of {{free and open}} source software (FOSS) has posed many challenges to the mainstream proprietary <b>software</b> <b>production</b> <b>model.</b> This dissertation endeavours to address these challenges through tackling the following legal problem: how does FOSS licensing articulate a legal language of software freedom in support of large-scale collaboration among FOSS programmers who have to face a rather hostile legal environment underlined by a dominant ideology of possessive individualism? I approach this problem from three aspects. The first aspect examines the unique historical context from which FOSS licensing has emerged. It focuses on the most prominent “copyleft” licence—GNU General Public Licence—which has been shaped by {{the tension between the}} MIT-style hacker custom and intellectual property law since the 1980 s. The second aspect tackles the legal mechanism of FOSS licences, which seems not dissimilar from other non-negotiated standard-form contracts. My analysis shows that FOSS licences do not fit well with the neoclassical contract model that has dominated software licensing jurisprudence so far. I therefore call for replacing the neoclassical approach with Ian Macneil’s Relational Contract Theory, which has remained conspicuously absent in the software licensing literature. The third aspect explores FOSS programmers’ authorship as manifested in FOSS licensing. It argues that the success of a FOSS project does not merely depend on the virtuosity of individual programmers in isolation. More importantly, a core team of lead programmers’ efforts are essential to channel individual authors’ virtuosity into a coherent work of collective authorship, which can deserve credit for the project as a whole. The study of these three aspects together aims to create a synergy to show {{that it is possible to}} graft a few collaborative elements onto the existing legal system—underpinned by a neoliberal ideology assuming that human beings are selfish utility-maximising agents—through carefully crafted licensing schemes...|$|E
40|$|The paper {{present a}} review of {{information}} system usability assurance approaches. The author describes a historical development of <b>software</b> <b>production</b> <b>models</b> and divides them into two main groups. The first one, named classical, included fundamental computer program life cycles derived from software engineering. Waterfall, spiral and rapid application development (RAD) models were among approaches presented here. The second group comprised software manufacturing models oriented towards end users, in which particular {{emphasis is placed on}} usability. Within the confines of this group, the user-centered software design approach, recommended by the ISO/DIS 13407, was described first. Next, the author characterises star, Collins, simplified interaction design model proposed by Preece, Rogers and Sharp as well as comprehensive approach prepared by Mayhev. For the sake of big evaluation significance in individual life cycle stages, the paper contains various classifications and typologies of software assessment methods. Additionally, the author describes current research trends aimed at developing userfriendly computer programs and he identifies existing and possible problems in this area. informatics products’ ergonomics, human–computer interaction, software life cycles, information technology systems...|$|R
50|$|One {{motivation}} for community source {{may be to}} promote the use of <b>software</b> <b>production</b> and development <b>models</b> {{similar to those used}} in open source communities. But because the community is not open, those <b>production</b> and development <b>models</b> must differ in subtle or marked ways from those used in open source. Another motivation may be to ease adoption by customers of complex software from a proprietary supplier, using trusted intermediaries to help.|$|R
40|$|In {{the thesis}} a needs-centered {{software}} product-model (called performance model) is developed. The bibliographical research {{showed that the}} consumer of software products, the consumer software product as a market object, and emotionalizing performances of software products were so far not covered by research efforts. In particular, there was not found a software product model that takes consumers´ needs into account and {{which can be used}} as a basis for market studies, in so far that their results are relevant for the <b>software</b> <b>production.</b> The performance <b>model</b> is to fulfill this interface function between market research and <b>software</b> <b>production.</b> The <b>model</b> is based on the product model by Koppelmann, developed for material products. With the help of the performance model software product performances offered on the market (content analysis of software product information in the WWW) and profiles of user´s needs of a lifestyle market segmentation model (the so called SINUS-Milieu-Modell) are established. The comparison between the established needs and the performances of software products shows that the marketing of software products is partly not geared to the target groups. Consequences for the price, product, communication, and staff policy (introduction of concepter) are pointed out. <BR...|$|R
40|$|Open source <b>software</b> <b>production</b> is a {{successful}} new <b>production</b> <b>model</b> in which a public good is voluntarily provided. We argue that by studying this new <b>production</b> <b>model</b> we gain valuable insight for organization theory beyond <b>software</b> <b>production.</b> Under specific conditions this model can be generalized, contingent on the interplay of motivational, situational, and institutional factors. It is argued that a <b>production</b> <b>model</b> building {{on the shoulders of}} predecessors and peers depends on a well balanced portfolio of intrinsic and extrinsic motivation, low costs for contributors and governance mechanisms that do not crowd out intrinsic motivation. (95 words) Key words: Networks, open source, intrinsic and extrinsic motivation, public goods, property right...|$|R
40|$|This paper {{presents}} a novel modeling method for distributed real-time control systems. The method uses function blocks model of IEC 61499 standard related to industrial control systems {{in combination with}} object-oriented approach for <b>software</b> <b>production.</b> The new <b>modeling</b> technique is named OO+FB. This method models distribution characteristics and real-time constraints accurately and provides a proper background for analysis and design of controllers. The new methodology, gives a complete framework for facing with modern industrial processes, using the good characteristics of both fundamental method. In this paper, different steps of OO+FB is described and advantages of using such a model is discussed, so a reliable approach is introduced for modeling...|$|R
40|$|It is {{essential}} to study quality of <b>software</b> <b>production</b> like others. <b>Software</b> <b>productions</b> have special properties. They are intangible. So, qualitative evaluation encountered with complexity. Hence, proposing a model in order to evaluate the quality of <b>Software</b> <b>productions</b> is considerable to most software managers and experts. In this paper, regarding to im prove <b>software</b> <b>productions</b> quality, the process of <b>software</b> <b>production</b> has been determined, using CMM standard framework of maturity level. In CMM it does not present a method for measurement and evaluation maturity level, the presented process in CMM standard mapped by COBIT control objectives has been combined {{in the process of}} <b>software</b> <b>productions</b> development in developed hybrid framework. In this research, the processes have been mapped utilizing fo cus and established group, in parallel of <b>software</b> <b>production</b> in different maturity level of CMM mapped by COBIT framework. In order to show the capabilities of proposed framework, the hybrid evaluation model was employed in a software developing organization as a case study. According to the results of evaluation, improvements proceedings and action plans have been proposed and discussed to enhance the <b>software</b> <b>production</b> processes. </p...|$|R
40|$|The {{first part}} of this thesis {{examines}} the economics of <b>software</b> <b>production.</b> Two development <b>models</b> are evaluated for their ability to deal with the peculiarities of software: The proprietary, closed source model and the Free and Open Source Software (FOSS) model. The former is shown to create enormous, usually hidden costs compared to a hypothetical, ideal solution. The combination of current regulations and proprietary, closed source development leads to a suboptimal resource allocation and – eventually – market failure. It is suggested that FOSS offers a solid approximation of the ideal solution made possible by technology and infrastructure advances, poised to become the dominant new development model in free markets unless regulations keep favoring the incumbent and largely obsolete model. The second part is concerned with the scalability of the Linux kernel, with a focus on its ability to scale down to machines with a limited and limiting amount of memory. The canonical solutions which date back to the time of the introduction of virtual memory in the 1960 s are reassessed in the light of hardware developments and modern usage patterns. A prototypical implementation of a load control mechanism for the Linux kernel is presented and evaluated along with the potential of load control in modern general purpose operating systems. Finally...|$|R
40|$|This study {{analyses}} how the IT supported international outsourcing of <b>software</b> <b>production</b> {{process is}} executed. We present essential ideas and theoretical background for our study through an in-depth literature {{review in the}} areas of subcontracting, outsourcing, international outsourcing, information technology (IT) and international <b>software</b> <b>production.</b> The literature review reveals the limitations of research on IT supported international outsourcing of <b>software</b> <b>production</b> process. Three research questions arise in this context. (1) What are the phases of the IT supported international outsourcing process and how these phases are executed? (2) What are the major activities in each phase of the international outsourcing process and how these activities are managed? (3) What are the performance measures and expected outcomes of each phase? The study addresses these research questions (1) by conceptualising a framework on IT supported international outsourcing of <b>software</b> <b>production</b> in the light of diffusion of innovation theory and relevant literature in the fields of outsourcing, <b>software</b> <b>production</b> and IT and (2) by conducting an empirical investigation. This study reports the results of an empirical research focusing on the IT supported international outsourcing process of <b>software</b> <b>production</b> through a single case study. Different issues associated with the conceptual framework of IT supported international outsourcing process of <b>software</b> <b>production</b> have been classified and analysed based on our empirical findings. The major contribution of this framework is to help companies to understand, improve and systematise the IT supported international outsourcing process of <b>software</b> 3 <b>production...</b>|$|R
40|$|In this paper, we use an {{evolutionary}} economic framework on knowledge management {{to make a}} first assessment of Swedish production of “embedded software”. The assessment starts by reviewing definitions and measurement techniques of <b>software</b> <b>production.</b> The reviews objective is to capture statistically relevant dimensions of <b>software</b> <b>production</b> in different countries to offer a first approximation of Swedish <b>software</b> <b>production.</b> In this paper, we focus on one type of <b>software</b> <b>production,</b> namely “embedded software”, and propose to measure it thanks to aspects of knowledge assets in vertically integrated industries. Our suggestion in {{this paper is to}} treat Swedish “embedded software production” within a classical product cycle model (Vernon, 1966). From that point of view, one can derive some characteristics relevant to industrial sectors. This paper limits itself to the link between “embedded software” and “industrial sectors” leaving the location dimension of <b>software</b> <b>production</b> for another paper 1. Here, one considers (1) basic evolutionary economic characteristics on the linkage between vertical integration of the manufacturing industry and the measurement of embedded software, (2) measurement boundaries of <b>software</b> <b>production</b> regarding the existing indicators in the US, OECD and Sweden. (3) descriptive statistics on the Swedish software expenditure per industrial sectors. ...|$|R
50|$|Óscar Pastor (born 3 March 1962 in Valencia) is a Spanish {{computer}} scientist, Full Professor of <b>software</b> <b>production</b> methods at the Department of Information Systems and Computing of Universitat Politècnica de València, and {{the director}} of the Research Centre in <b>Software</b> <b>Production</b> Methods (PROS).|$|R
40|$|Researchers {{who create}} <b>software</b> <b>production</b> environments face {{considerable}} problems. Soft� ware production environments are large {{systems that are}} costly to develop. Furthermore � soft� ware production environments which support particular software engineering methods may not be applicable to {{a large number of}} <b>software</b> <b>production</b> projects. These conditions have formed a trend towards research into ways which will lessen the cost of developing <b>software</b> <b>production</b> environments. In particular � the trend has been towards the construction of meta�environments from which speci�c <b>software</b> <b>production</b> environments can be created. In this paper � we at� tempt to categorize more than 60 meta�environment e�orts. For each of the categories � we review research e�orts which illustrate di�erent approaches within that category. We conclude by presenting an emerging common thread of requirements which links this �eld together. ...|$|R
40|$|Compatibility {{is a key}} {{strategic}} decision in <b>software</b> <b>production.</b> Proposals exist for standards in several fields of <b>software</b> <b>production,</b> such as networking (ISO and IEEE), operating systems (Posix), object management (OMG). However a formal treatment of standards in software is still missing. This paper tries to overcome such lack, presenting {{a model of the}} effects of compatibility in <b>software</b> <b>production.</b> It overviews existing works on compatibility. It details a model on the effects of compatibility decisions in software development. It describes the application of this model to the cases of new products being introduced and of well-established incumbents. 1...|$|R
5000|$|GSD (Corporate) Limited of Preston, Lancashire for <b>software</b> <b>production,</b> {{sales and}} training.|$|R
40|$|Firstly, it {{is found}} that process design is {{necessary}} for software process improvement after analyzing its complexity. Then, research methods and concepts framework are put forward, and the research content is also provided. The find-ings of research, including propositions of complexity of software process, the work program of complexity of software process improvement, software enterprise <b>model</b> and <b>software</b> <b>production</b> support structure are clarified. Finally, the demonstration, including mindbugs (cognitive barriers) in software process and the knowledge integration support structure of quality <b>software</b> <b>production,</b> is illustrated with case study. It is concluded that the research is useful for both <b>software</b> <b>production</b> and knowledge economy in the future...|$|R
5000|$|Electric Cloud — Build, {{test and}} {{deployment}} framework tool designed to automate the <b>software</b> <b>production</b> lifecycle ...|$|R
5000|$|... 1992 - to {{withdraw}} the Japan Amusement Machinery Manufacturers Association. SNES for <b>software</b> <b>production,</b> sales start.|$|R
40|$|Software {{development}} organizations {{today have}} to deliver products fast and {{tailored to the}} specific needs of customers. Software Product Line Engineering (PLE) has proven to support organizations in reducing time to market and increase the level of customization, but still software is not produced with similar efficiency than many hard goods today. We claim that organizations can improve the efficiency of software development if they apply a <b>software</b> <b>production</b> approach similar to other engineering disciplines. Key to successful <b>software</b> <b>production</b> is a product line architecture that is aligned with the production plan. As a first, step we introduce a conceptual <b>model</b> of <b>software</b> <b>production</b> that captures the relationship between the product line architecture and the production plan...|$|R
40|$|Through mixed-methods research, this {{dissertation}} {{details the}} regionally variegated and place-specific <b>software</b> <b>production</b> processes in three second-tier US software regions. I {{focus on the}} relationship between different industrial, firm, and worker production configurations and broad-based economic development, prosperity, and inequality. I develop four main empirical findings. First, I argue for a periodization of <b>software</b> <b>production</b> that tracks with changes in software laboring activity, software technologies, and wage-employment relationships. Through a GIS-based method, I use the IPUMS-USA to extensively measure the amount and type of software labor in industries across the US between 1970 and 2015. I map the uneven geography of software labor that produces different clusters of various software occupations. Second, I argue that between each software period, locational windows provide an opportunity for second-tier software regions to challenge Silicon Valley. I combine the IPUMS-USA dataset with interviews of software workers to analyze forms of regionally specific modes of production in Seattle, Washington, Portland, Oregon, and Austin, Texas. I trace how <b>software</b> <b>production</b> in these three cities evolves between each software period, taking on different spatial configurations, firm strategies, labor practices, and technological characteristics. Third, I argue that software labor is hyper-sensitive to deskilling because of <b>software</b> <b>production</b> activity produces <b>software.</b> I combine occupation classifications and interviews with software workers to interrogate the ever-present need for software workers to learn the newest development practices and software languages as firms seek to automate <b>software</b> <b>production.</b> I define five key moments since the 1970 s that exemplify software labor market dualization and segmentation. Using interviews, and conference observations, I find that community-based organizations and labor market intermediaries locally mitigate the structural tendencies toward labor market dualization and segmentation. I argue that without intervention, the layered and bifurcated labor market for <b>software</b> <b>production</b> reproduces existing inequalities. Further, the organizational, technological, and spatial changes in <b>software</b> <b>production</b> reduce the potential for equitable wealth production. Ultimately, this dissertation argues for the importance of labor organizing in software, contributing empirical and theoretical work in a lineage of regional-based industrial restructuring literature. The regional and industrial geographies produced by and out of <b>software</b> <b>production</b> are significant forces in the economy at regional and national scales. I connect this process to the feminization of other industries, noting how the technical nature of <b>software</b> <b>production</b> structurally genders and racializes the labor force. Leveraging a labor feminization framework highlights the flexibilization of labor and the rift between the pace of software skill building and technological development. Both <b>software</b> <b>production</b> and regional economies are necessary entry points to understand new capitalist relations. Understanding these new relations thus requires examining how configurations of <b>software</b> <b>production</b> differ across regions, how they impact industry and regional economic development outcomes, and how they weaken or strengthen actions of local workers, local organizations, and local firms. These processes offer a glimpse into how the contemporary moment of production differs from other moments of production. Armed with this understanding, this research will be able to connect industry and regional economic-development outcomes to regionally specific modes of production, answering relevant software-based economic-development policy questions...|$|R
40|$|Various {{important}} benefits can {{be achieved}} through the successful management of offshore outsourcing. Numerous studies exist on outsourcing in general, yet {{the vast majority of}} extant literature on offshore outsourcing has dealt with information technology (IT) outsourcing from the client's perspective. Several frameworks, focusing on guiding information systems managers in relation to IT outsourcing, have been developed. However, none of these frameworks attempted to provide a holistic guideline to manage the entire process of offshore outsourcing of <b>software</b> <b>production.</b> There is a significant lack of studies dealing with the management of offshore outsourcing of <b>software</b> <b>production</b> from both the vendor's and client's perspectives. Thus, there is a great need to study such a multifaceted and complex phenomenon more deeply for both scenarios to find out the best practices for managing the unified process. In this study, we utilize the conceptual framework of The ICT-supported Unified Process <b>Model</b> of Offshore <b>Software</b> <b>Production</b> Outsourcing as our research model. We then validate this model by reviewing the vast extant literature, and by conducting multiple case studies from both the vendor's and client's viewpoints, where professionals with extensive experience in managing offshore outsourcing of <b>software</b> <b>production</b> are interviewed. The implications of the findings are discussed for both practical and research purposes. Information and communication technology, outsourcing, offshore outsourcing, offshore <b>software</b> <b>production,</b> relationship management, unified process, cross-case validation...|$|R
5000|$|Associated with a Central Govt. funded audio {{cassette}} <b>software</b> <b>production</b> for school children project as Content Expert, 1990.|$|R
5000|$|... 1991 - Moved the Tokyo {{office in}} Roppongi, Minato-ku, Tokyo. <b>Software</b> <b>production</b> for the Mega Drive, sales start.|$|R
5000|$|... 2007. Model-Driven Architecture in Practice: A <b>Software</b> <b>Production</b> Environment Based on Conceptual Modeling. With Juan Carlos Molina. Springer.|$|R
40|$|Software {{development}} {{is difficult because}} software is complex, the <b>software</b> <b>production</b> process is complex and understanding of software systems is a challenge. In this {{paper we propose a}} 3 D visual approach to depict <b>software</b> <b>production</b> cost related program information to support software maintenance. The information helps us to reduce software maintenance costs, to plan the use of personnel wisely, to appoint experts efficiently and to detect system problems early...|$|R
30|$|Figure 3 {{illustrates}} {{new release}} development activities. This DFD diagram depicts how new revised business goals are addressed during <b>software</b> <b>production.</b>|$|R
3000|$|Software firms / IT {{companies}} (or internal software R&D units / IT departments) {{with new}} <b>software</b> <b>production</b> {{as the core}} purpose [...]...|$|R
50|$|Legends of War is a turn-based {{strategy}} {{video game}} series franchise created in 2010 by the Spanish development company Enigma <b>Software</b> <b>Productions.</b>|$|R
40|$|With {{the advent}} of a rapidly proliferating {{international}} computer network, it became feasible to consider remote operation of instrumentation normally operated locally. For modern electron microscopes, the growing automation and computer control of many instrumental operations facilitated the task of providing remote operation. In order to provide use of NCEM TEMs by distant users, a project was instituted in 1995 to place a unique instrument, a Kratos EM- 1500 operating at 1. 5 MeV, on-line for remote use. In 1996, the Materials Microcharacterization Collaboratory (MMC) was created as a pilot project within the US Department of Energy's DOE 2000 program to establish national collaboratories to provide access via the Internet to unique or expensive DOE research facilities as well as to expertise for remote collaboration, experimentation, <b>production,</b> <b>software</b> development, <b>modeling,</b> and measurement. A major LBNL contribution to the MMC was construction of DeepView, a microscope-independent computer-control system that could be ported to other MMC members to provide a common graphical user-interface (GUI) for control of any MMC instrument over the wide area network...|$|R
40|$|Lean {{management}} {{is based on}} two concepts: the elimination of “Muda”, the waste, from the production process, and “Jidoka”, the introduction of quality inside the production process and product. In <b>software</b> <b>production,</b> the elimination of Muda received significant attention, while Jidoka {{has not yet been}} fully exploited. In this work we want to propose a holistic approach to insert Jidoka in <b>software</b> <b>production.</b> We depict the architecture of a tool to support Jidoka and describe the components that are part of it...|$|R
50|$|The {{implementation}} of product software, {{as the final}} link in the deployment chain of <b>software</b> <b>production,</b> is in a financial perspective of a major issue.|$|R
50|$|Brahma Vision Private Limited is a TV <b>software</b> <b>production</b> house {{based in}} Mumbai, India. It {{produces}} more than 6000 episodes in various Indian national (Hindi) and regional languages.|$|R
40|$|<b>Software</b> <b>production</b> is an {{integral}} activity that encompasses the majority of computer science and information technologies knowledge and skills such as algorithms, programming, databases, networking etc. Referring to this, an introductory course on <b>software</b> <b>production</b> summarizes and upgrades the learning achievements of students in bachelor programs of computing. This paper focuses on some curriculum issues in software engineering course. The main discussion concerns {{the choice of the}} topics and learning activities. The course should expose fundamental concepts and principles that underlie current and emerging methods, tools, and techniques for cost-effective <b>production</b> of high-quality <b>software</b> systems...|$|R
30|$|For {{the mobile}} phones and {{smartphones}} market, the main GVC segments are product development (R&D) {{both in terms}} of hardware and <b>software,</b> <b>production</b> and assembling, packaging, export, and retail.|$|R
40|$|Many {{commercial}} software firms rely on opensourcing as {{a viable}} <b>model</b> of <b>software</b> <b>production.</b> Opensourcing is a specific form of interaction between firms and open source software (OSS) communities for collaboratively producing software. The existing literature has identified opensourcing {{as a viable}} form of <b>software</b> <b>production,</b> which could be a substitute for “in-house ” or “outsourced ” software development. However, {{little is known about}} how opensourcing works or is sustained in the long term. The objective of this research is to explain the factors affecting the sustainability of opensourcing as a <b>model</b> of <b>software</b> <b>production.</b> The study employs a single case study of hospital software in Thailand to understand how firms and the communities can live symbiotically and sustain their collaboration to peer-produce vertical domain software. The analysis reveals six mechanisms (positive experience, trust in the leadership of the project leader, the demonstration of reciprocity, marketing the community, enriching knowledge, and face-to-face meetings) and demonstrates how they operate in conjunction with each other to sustain opensourcing...|$|R
40|$|Abstract. The {{creation}} of a conceptual schema is a critical feature of the <b>software</b> <b>production</b> process. The conceptual schema should represent the structure and behavior of the information system so that the users can perform their organizational tasks. For this reason, the organizational context needs to be {{the starting point for}} the generation of an initial conceptual schema. This approach allows us to assure that the functionality of the information system will be equivalent to the tasks that are executed in the business. However, only a few research studies offer a systematic approach for carrying out the equivalence between models. In this paper, a methodological approach for deriving conceptual schemas from TROPOS business models is presented. The resultant conceptual schema will be the input of the OO-Method Case Tool, which implements the automatic <b>software</b> <b>production</b> process. By doing this, we go a step further in the process of including business modeling as a key piece in the <b>software</b> <b>production</b> process. 1...|$|R
