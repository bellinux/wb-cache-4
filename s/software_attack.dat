15|302|Public
40|$|We are {{designing}} scalable dynamic {{information flow}} tracking techniques and employing them {{to carry out}} tasks related to debugging (bug location and fault avoidance), security (<b>software</b> <b>attack</b> detection), and data validation (lineage tracing of scientific data). The focus of our ongoing work is on developing online dynamic analysis techniques for long running multithreaded programs that may be executed on a single core or on multiple cores to exploit thread level parallelism. 1. 1...|$|E
40|$|Abstract. We {{provide a}} {{state-of-the-art}} explication of application security and software protection. The relationship between application security and data security, network security, and software security is discussed. Three simplified threat models for software are sketched. To better understand what attacks must be defended against {{in order to}} improve software security, we survey <b>software</b> <b>attack</b> approaches and attack tools. A simplified software security view of a software application is given, and along with illustrative examples, used to motivate a partial list of software security requirements for applications. ...|$|E
40|$|Distributed Denial of Service (DDoS) {{attacks have}} become a large problem for users of {{computer}} systems connected to the Internet. DDoS attackers hijack secondary victim systems using them to wage a coordinated large-scale attack against primary victim systems. As new countermeasures are developed to prevent or mitigate DDoS attacks, attackers are constantly developing new methods to circumvent these new countermeasures. In this paper, we describe DDoS attack models and propose taxonomies to characterize the scope of DDoS attacks, {{the characteristics of the}} <b>software</b> <b>attack</b> tools used, and the countermeasures available. These taxonomies illustrate similarities and patterns in different DDoS attacks and tools, to assist in the development of more generalized solutions to countering DDoS attacks, including new derivative attacks. ...|$|E
50|$|UDP Unicorn is a {{free and}} open source DoS <b>attack</b> <b>software.</b> The <b>software</b> <b>attacks</b> a computer's network {{connection}} by repeatedly sending UDP packets with garbage data.|$|R
40|$|Abstract—This paper proposes using {{functional}} programming style {{in a way}} to respond to detection of and interaction with the <b>software</b> <b>attacks</b> and vulnerabilities. Additionally, our approach considers involving Description Logics, as a basis {{for the use of the}} Semantic Web and meta-programming to produce executable ontologies and to enable semantic reasoning over behavior and interaction with <b>software</b> <b>attacks</b> and vulnerabilities. Accordingly, we introduce Magic Potion, a recently defined Domain Specific meta-Language that uses Modeling Spaces framework to study heterogeneous modeling and meta-modeling problems inspired by Model Driven Architecture. As an example of formalism for modeling <b>software</b> <b>attacks</b> and vulnerabilities, we explore Attack Tree, which provides a formal methodology for analyzing the security of the system. Based on Attack Tree, which is herein specified for a particular problem of dealing with known attacks and vulnerabilities of the security layer of the Wireless Application Protocol, and which is particularly built on top of Magic Potion specification, we define our specific Domain Specific Language that we call Attack Tree Domain Specific Language. It is envisioned as a tool for modeling and interacting with <b>software</b> <b>attacks</b> and vulnerabilities. Keywords-Software vulnerability; Functional Programming...|$|R
50|$|Tabulation {{fraud and}} {{wholesale}} tampering {{can also be}} prevented by adding a cryptographic verification mechanism. This approach is mathematically based, and thus invariant to <b>software</b> <b>attacks</b> or breaches in chain-of-custody of the paper ballots. One such system is Scantegrity.|$|R
40|$|Computer {{security}} is a topic of paramount importance in computing today. Though enormous effort has been expended to reduce the <b>software</b> <b>attack</b> surface, vulnerabilities remain. In contemporary attacks, subverting the control-flow of an application is often the cornerstone to a successful attempt to compromise a system. This subversion, known as a control-flow attack, remains as an essential building block of many software exploits. This dissertation proposes a multi-pronged approach to securing software control-flow to harden the <b>software</b> <b>attack</b> surface. The primary domain of this dissertation is {{the elimination of the}} basic mechanism in software enabling control-flow attacks. I address the prevalence of such attacks by going {{to the heart of the}} problem, removing all of the operations that inject runtime data into program control. This novel approach, Control-Data Isolation, provides protection by subtracting the root of the problem; indirect control-flow. Previous works have attempted to address control-flow attacks by layering additional complexity in an effort to shield software from attack. In this work, I take a subtractive approach; subtracting the primary cause of both contemporary and classic control-flow attacks. This novel approach to security advances the state of the art in control-flow security by ensuring the integrity of the programmer-intended control-flow graph of an application at runtime. Further, this dissertation provides methodologies to eliminate the barriers to adoption of control-data isolation while simultaneously moving ahead to reduce future attacks. The secondary domain of this dissertation is technique which leverages the process by which software is engineered, tested, and executed to pinpoint the statements in software which are most likely to be exploited by an attacker, defined as the Dynamic Control Frontier. Rather than reacting to successful attacks by patching software, the approach in this dissertation will move ahead of the attacker and identify the susceptible code regions before they are compromised. In total, this dissertation combines software and hardware design techniques to eliminate contemporary control-flow attacks. Further, it demonstrates the efficacy and viability of a subtractive approach to software security, eliminating the elements underlying security vulnerabilities...|$|E
40|$|Most remote {{authentication}} schemes use key exchange {{protocol to}} provide secure communication over an untrusted network. The protocol enables remote client and host to authenticate {{each other and}} communicate securely with prearranged shared secret key or server secret key. Many remote services environment such as online banking and electronic commerce are dependent on remote authentication schemes to validate user legitimacy {{in order to fulfill}} the authentication process. Unfortunately, these schemes are not able to provide trust or evidence of claimed platform identity. Therefore, these schemes are vulnerable to malicious software attacks that could compromise the integrity of the platform used for the communication. As a result, user identity or shared secret key potentially can be exposed. In this paper, we present a remote authentication scheme using secure key exchange protocol with hardware based attestation to resist malicious <b>software</b> <b>attack.</b> In addition, a pseudonym identity enhancement is integrated into the scheme in order to improve user identity privacy...|$|E
40|$|Businesses, governments, {{academic}} institutions, {{and individual}} users {{are becoming increasingly}} interconnected {{through a variety of}} wired and wireless communication networks and with a variety of computing devices. Concerns about the security of communications, transactions, and wireless networks are inhibiting realization of benefits associated with pervasive connectivity and electronic commerce. These concerns include exposure of data on systems, system compromise due to <b>software</b> <b>attack,</b> and lack of user identity assurance for authorization. The latter concern is exacerbated by the increasing prevalence of identify theft. In addition, as users become more mobile, physical theft is becoming a growing concern. Users and IT organizations need the industry to address these issues with standards-based security solutions that reduce the risks associated with participation in an interconnected world while also ensuring interoperability and protecting privacy. Standardization will also enable a more consistent user experience across different device types. The Trusted Computing Group (TCG) formed in 2003 to respond to this challenge. The purpose of TCG is to develop, define, and promote open, vendor-neutral industry specifications for trusted computing. These include hardware building block and software interface specification...|$|E
5000|$|Open Mobile Terminal Platform (OMTP) first {{defined the}} TEE in their Advanced Trusted Environment:OMTP TR1 standard, {{defining}} it as a [...] "set of {{hardware and software}} components providing facilities necessary to support Applications" [...] which had {{to meet the requirements}} of one of two defined security levels. The first security level, Profile 1, was targeted against only <b>software</b> <b>attacks</b> and whilst Profile 2, was targeted against both <b>software</b> and hardware <b>attacks.</b>|$|R
5000|$|Patent Number: 8,645,527Network {{monitoring}} using bounded memory data structures Patent Number: 8,639,797Network {{monitoring of}} behavior probability density Patent Number: 8,451,731 Network monitoring using virtual packets Patent Number: 8,199,641Parallel distributed network monitoring Patent Number: 7,620,986Defenses against <b>software</b> <b>attacks</b> in distributed computing environments Patent Number: 7,331,060Dynamic DoS flooding protection ...|$|R
25|$|Information {{security}} threats come {{in many different}} forms. Some {{of the most common}} threats today are <b>software</b> <b>attacks,</b> theft of intellectual property, identity theft, theft of equipment or information, sabotage, and information extortion. Most people have experienced <b>software</b> <b>attacks</b> of some sort. Viruses, worms, phishing attacks, and Trojan horses are a few common examples of <b>software</b> <b>attacks.</b> The theft of intellectual property has also been an extensive issue for many businesses in the IT field. Identity theft is the attempt to act as someone else usually to obtain that person's personal information or to take advantage of their access to vital information. Theft of equipment or information is becoming more prevalent today {{due to the fact that}} most devices today are mobile. Cell phones are prone to theft and have also become far more desirable as the amount of data capacity increases. Sabotage usually consists of the destruction of an organization′s website in an attempt to cause loss of confidence on the part of its customers. Information extortion consists of theft of a company′s property or information as an attempt to receive a payment in exchange for returning the information or property back to its owner, as with ransomware. There are many ways to help protect yourself from some of these attacks but one of the most functional precautions is user carefulness.|$|R
40|$|Abstract — Distributed denial-of-service (DDoS) attacks present serious {{threats to}} servers in the Internet. They can exhaust {{critical}} resources at a target host {{with the help}} of a large number of compromised Internet hosts and hence deny services to legitimate clients. This paper studies some existing schemes for the detection and defense against TCP-based DDoS attacks. We propose a distributed scheme that can mitigate the damage caused by DDoS through a coordinated detection and response framework. This proposed scheme composes of a number of heterogeneous defense systems which cooperate with each other in protecting Internet servers. We have set up a network testbed for carrying out extensive experiments using real server machines, routers and <b>software</b> <b>attack</b> tools. Experimental results show that, compared to existing schemes, our proposed scheme can greatly improve the throughput of legitimate traffic and reduce the attack traffic during DDoS attacks. To investigate the scale-up behavior of our scheme, we have also developed a software simulator for largerscale experiments. Simulation results show that our scheme performs consistently well even in networks with more than 3000 nodes and under high traffic load. I...|$|E
40|$|Attestation {{has become}} a {{promising}} approach for ensuring software integrity in wireless sensor networks. However, current attestation either focuses on static system properties, e. g., code integrity, or requires hardware support such as Trusted Platform Module (TPM). However, there are attacks exploiting vulnerabilities that do not violate static system properties, and sensor platforms may not have hardware-based security support. This paper presents asoftwareattestationschemefordynamicdataintegrity based on data boundary integrity. It automatically transforms the source code and inserts data guards to track runtime program data. A data guard is unrecoverable once it is corrupted by an attacker, even if the attacker fully controls the system later. The corruption of any data guard at runtime can be remotely detected. A corruption either indicates a <b>software</b> <b>attack</b> or a bug in the software that needs immediate attention. The benefits of the proposed attestation scheme are as follows. First, it does not rely on any additional hardware support, making it suitable for lowcost sensor nodes. Second, it introduces minimal communication cost and has adjustable runtime memory overhead. Third, it works even if sensor nodes use different hardware platforms, {{as long as they}} run the same software. The prototype implementation and the experiments on TelosB motes show that the proposed technique is both effective and efficient for sensor networks. ...|$|E
40|$|Abstract. Computers {{are often}} subject to {{external}} attacks that aim to control software behavior. Typically, such attacks arrive as data over a regular communication channel and, once resident in program memory, trigger pre-existing, low-level software vulnerabilities. By exploiting such flaws, these low-level attacks can subvert {{the execution of}} the software and gain control over its behavior. The combined effects of these attacks make them one of the most pressing challenges in computer security. As a result, in recent years, many mechanisms have been proposed for defending against these attacks. This chapter aims to provide insight in low-level <b>software</b> <b>attack</b> and defense techniques by discussing 4 examples of attacks that are representative of the major types of attacks on C and C++ software, and 4 examples of defenses selected because of their effectiveness, wide applicability and low enforcement overhead. Attacks and defenses are described in enough detail to be understood even by readers without a background in software security, and with-out a natural inclination for crafting malicious attacks. Throughout, the attacks and defenses are placed in perspective by showing how they are both facilitated by the gap between the semantics of the high-level language of the software under attack, and the low-level semantics of machine code and the hardware on which the software executes. ...|$|E
40|$|New single-machine environments are {{emerging}} from abundant computation available through multiple cores and secure virtualization. In this paper, {{we describe the}} research challenges and opportunities around diversified replication as a method to increase the Byzantine-fault tolerance (BFT) of single-machine servers to <b>software</b> <b>attacks</b> or errors. We then discuss the design space of BFT protocols enabled by these new environments. ...|$|R
40|$|AEGIS is a single-chip secure {{processor}} {{that can}} be used to protect the integrity and confidentiality of an application program from both physical and <b>software</b> <b>attacks.</b> We briefly describe the history behind this architecture and its key features, discuss main observations and lessons from the project, and list limitations of AEGIS and how recent research addresses them...|$|R
40|$|Abstract. As {{its name}} indicates, NGSCB aims {{to be the}} “Next-Generation Secure Computing Base”. As envisioned {{in the context of}} Trusted Computing initiatives, NGSCB {{provides}} protection against <b>software</b> <b>attacks.</b> This paper describes NGSCB using a logic for authentication and access control. Its goal is to document and explain the principals and primary APIs employed in NGSCB. 1...|$|R
40|$|Computer {{security}} {{has become a}} central focus in the information age. Though enormous effort has been expended on ensuring secure computation, software exploitation remains a serious threat. The <b>software</b> <b>attack</b> surface provides many avenues for hijacking; however, most exploits ultimately rely on the successful execution of a control-flow attack. This pervasive diversion of control flow is {{made possible by the}} pollution of control flow structure with attacker-injected runtime data. Many control-flow attacks persist because {{the root of the problem}} remains: runtime data is allowed to enter the program counter. In this paper, we propose a novel approach: Control-Data Isolation. Our approach provides protection by going to the root of the problem and removing all of the operations that inject runtime data into program control. While previous work relies on CFG edge checking and labeling, these techniques remain vulnerable to attacks such as heap spray, read, or GOT attacks and in some cases suffer high overheads. Rather than addressing control-flow attacks by layering additional complexity, our work takes a subtractive approach; subtracting the primary cause of contemporary control-flow attacks. We demonstrate that control-data isolation can assure the integrity of the programmer's CFG at runtime, while incurring average performance overheads of less than 7 % for a wide range of benchmarks. 1...|$|E
40|$|Computers {{are often}} subject to {{external}} attacks that aim to control software behavior. Typically, such attacks arrive as data over a regular communication channel and, once resident in program memory, trigger pre-existing, low-level software vulnerabilities. By exploiting such flaws, these low-level attacks can subvert {{the execution of}} the software and gain control over its behavior. The combined effects of these attacks make them one of the most pressing challenges in computer security. As a result, in recent years, many mechanisms have been proposed for defending against these attacks. This chapter aims to provide insight in low-level <b>software</b> <b>attack</b> and defense techniques by discussing 4 examples of attacks that are representative of the major types of attacks on C and C++ software, and 4 examples of defenses selected because of their effectiveness, wide applicability and low enforcement overhead. Attacks and defenses are described in enough detail to be understood even by readers without a background in software security, and with-out a natural inclination for crafting malicious attacks. Throughout, the attacks and defenses are placed in perspective by showing how they are both facilitated by the gap between the semantics of the high-level language of the software under attack, and the low-level semantics of machine code and the hardware on which the software executes. status: publishe...|$|E
40|$|Dynamic Information Flow Tracking (DIFT) is a {{promising}} technique for detecting software attacks. Due to the computationally intensive {{nature of the}} technique, prior efficient implementations [21, 6] rely on specialized hardware support whose only purpose is to enable DIFT. Alternatively, prior software implementations are either too slow [17, 15] resulting in execution time increases as much as four fold for SPEC integer programs or they are not transparent [31] requiring source code modifications. In this paper, we propose the use of chip multiprocessors (CMP) to perform DIFT transparently and efficiently. We spawn a helper thread that is scheduled on a separate core and is only responsible for performing information flow tracking operations. This entails the communication of registers and flags between the main and helper threads. We explore software (shared memory) and hardware (dedicated interconnect) approaches to enable this communication. Finally, we propose a novel application of the DIFT infrastructure where, {{in addition to the}} detection of the <b>software</b> <b>attack,</b> DIFT assists in the process of identifying the cause of the bug in the code that enabled the exploit in the first place. We conducted detailed simulations to evaluate the overhead for performing DIFT and found that to be 48 % for SPEC integer programs...|$|E
40|$|Abstract — Many {{systems may}} have {{security}} requirements such as protecting {{the privacy of}} data and code stored in the system, ensuring integrity of computations, or preventing the execution of unauthorized code. It is becoming increasingly difficult to ensure such protections as hardware-based attacks, in addition to <b>software</b> <b>attacks,</b> become more widespread and feasible. Many of these attacks target a system during booting before any employed security measures can take effect. In this paper, we propose SHIELDSTRAP, a security architecture capable of booting a system securely {{in the face of}} hardware and <b>software</b> <b>attacks</b> targeting the boot phase. SHIELDSTRAP bridges the gap between the vulnerable initialization of the system and the secure steady state execution environment provided by the secure processor. We present an analysis of the security of SHIELDSTRAP against several common boot time attacks. We also show that SHIELDSTRAP requires an on-chip area overhead of only 0. 012 % and incurs negligible boot time overhead of 0. 37 seconds. I...|$|R
40|$|The Elliptic Curve Cryptosystem (ECC) {{provides}} the highest strength-per-bit of any cryptosystem known today. This paper {{provides an overview}} of the three hard mathematical problems which provide the basis for the security of publickey cryptosystems used today: the integer factorization problem (IFP), the discrete logarithm problem (DLP), and the elliptic curve discrete logarithm problem (ECDLP). An overview of current hardware and <b>software</b> <b>attacks</b> on ECDL...|$|R
40|$|In {{this paper}} we briefly {{describe}} some current techniques and mechanisms used to ensure diversity in software applications. We then introduce and discuss {{an alternative approach}} to software diversity aiming at the reduction of widespread <b>software</b> <b>attacks</b> and faults. This approach {{takes advantage of the}} componentisation of modern software solutions and enforces diversity at the installation time by randomly selecting and deploying critical software components...|$|R
40|$|Taint {{analysis}} {{has a wide}} variety of compelling applica-tions in security tasks, from <b>software</b> <b>attack</b> detection to data lifetime analysis. Static taint analysis propagates taint values following all possible paths with no need for concrete execution, but is generally less accurate than dynamic analysis. Unfortunately, the high performance penalty incurred by dynamic taint analyses makes its de-ployment impractical in production systems. To amelio-rate this performance bottleneck, recent research efforts aim to decouple data flow tracking logic from program execution. We continue this line of research in this paper and propose pipelined symbolic taint analysis, a novel technique for parallelizing and pipelining taint analy-sis to take advantage of ubiquitous multi-core platforms. We have developed a prototype system called TaintPipe. TaintPipe performs very lightweight runtime logging to produce compact control flow profiles, and spawns mul-tiple threads as different stages of a pipeline to carry out symbolic taint analysis in parallel. Our experiments show that TaintPipe imposes low overhead on applica-tion runtime performance and accelerates taint analysis significantly. Compared to a state-of-the-art inlined dy-namic data flow tracking tool, TaintPipe achieves 2. 38 times speedup for taint analysis on SPEC 2006 and 2. 43 times for a set of common utilities, respectively. In ad-dition, we demonstrate the strength of TaintPipe such as natural support of multi-tag taint analysis with several security applications. ...|$|E
40|$|This is the author’s {{version of}} a work that was {{accepted}} for publication in Pattern Recognition Letters. Changes resulting from the publishing process, such as peer review, editing, corrections, structural formatting, and other quality control mechanisms may not be reflected in this document. Changes may {{have been made to}} this work since it was submitted for publication. A definitive version was subsequently published in Pattern Recognition Letters 36, (2014) DOI: 10. 1016 /j. patrec. 2013. 04. 029 In certain applications based on multimodal interaction it may be crucial to determine not only what the user is doing (commands), but who is doing it, in order to prevent fraudulent use of the system. The biometric technology, and particularly the multimodal biometric systems, represent a highly efficient automatic recognition solution for this type of applications. Although multimodal biometric systems have been traditionally regarded as more secure than unimodal systems, their vulnerabilities to spoofing attacks have been recently shown. New fusion techniques have been proposed and their performance thoroughly analysed in an attempt to increase the robustness of multimodal systems to these spoofing attacks. However, the vulnerabilities of multimodal approaches to software-based attacks still remain unexplored. In this work we present the first <b>software</b> <b>attack</b> against multimodal biometric systems. Its performance is tested against a multimodal system based on face and iris, showing the vulnerabilities of the system to this new type of threat. Score quantization is afterwards studied as a possible countermeasure, managing to cancel the effects of the proposed attacking methodology under certain scenarios. This work has been partially supported by projects Contexts (S 2009 /TIC- 1485) from CAM, Bio-Challenge (TEC 2009 - 11186) and Bio-Shield (TEC 2012 - 34881) from Spanish MINECO, TABULA RASA (FP 7 -ICT- 257289) and BEAT (FP 7 -SEC- 284989) from EU, and Cátedra UAM-Telefónica...|$|E
40|$|Intel's Software Guard Extensions (SGX) have {{captured}} the attention of security practitioners by promising to secure computation performed on a remote computer where all the privileged software is potentially malicious. Unfortunately, an independent analysis of SGX reveals that it is vulnerable to software attacks, and it can only be used by developers licensed by Intel. Furthermore, significant parts of SGX are undocumented, making it impossible for researchers outside of Intel to reason about some of its security properties. Sanctum offers the same promise as SGX, namely strong provable isolation of software modules running concurrently and sharing resources, but protects against an important class of additional software attacks that infer private information from a program's memory access patterns. Sanctum shuns unnecessary complexity, leading to a simpler security analysis. We follow a principled approach to eliminating entire attack surfaces through isolation, rather than plugging attack-specific privacy leaks. Most of Sanctum's logic is implemented in trusted software, which is easier to analyze than SGX's opaque microcode. Our prototype targets a Rocket RISC-V core, an open implementation that allows any researcher to reason about its security properties. Sanctum's extensions can be adapted to other RISC cores, because we do not change any major CPU building block. Instead, we add hardware at the interfaces between building blocks, without impacting cycle time. Sanctum demonstrates that strong software isolation is achievable with a surprisingly small set of minimally invasive hardware changes, and a very reasonable overhead (assuming a <b>software</b> <b>attack</b> model) that is orders of magnitude less than what is incurred by ORAM-enabled processors. Our modifications cause a 2 % area increase to the Rocket core. Over a set of benchmarks, Sanctum's worst observed overhead for isolated execution is 15. 1 % over an idealized insecure baseline, and 2. 7 % average overhead over a representative insecure baseline. by Victor Marius Costan. Thesis: Ph. D., Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, 2016. Cataloged from PDF version of thesis. Includes bibliographical references (pages 319 - 334) ...|$|E
40|$|We {{present a}} {{practical}} tool for inserting security features against low-level <b>software</b> <b>attacks</b> into third-party, proprietary or otherwise binary-only software. We {{are motivated by}} the inability of software users to select and use low-overhead protection schemes when source code is unavailable to them, {{by the lack of}} information as to what (if any) security mechanisms software producers have used in their toolchains, and the high overhead and inaccuracy of solutions that treat software as a black box. Our approach is based on SecondWrite, an advanced binary rewriter that operates without need for debugging information or other assist. Using SecondWrite, we insert a variety of defenses into program binaries. Although the defenses are generally well known, they have not generally been used together because they are implemented by different (non-integrated) tools. We are also the first to demonstrate the use of such mechanisms in the absence of source code availability. We experimentally evaluate the effectiveness and performance impact of our approach. We show that it stops all variants of low-level <b>software</b> <b>attacks</b> at a very low performance overhead, without impacting original program functionality. ...|$|R
40|$|We {{describe}} the architecture for a single-chip aegis processor {{which can be}} used to build computing systems secure against both physical and <b>software</b> <b>attacks.</b> Our architecture assumes that all components external to the processor, such as memory, are untrusted. We show two di#erent implementations. In the first case, the core functionality of the operating system is trusted and implemented in a security kernel. We also describe a variant implementation assuming an untrusted operating system...|$|R
40|$|Subverting runtime {{data flow}} {{is common in}} many current <b>software</b> <b>attacks.</b> Data Flow Integrity (DFI) is a policy whose {{satisfaction}} can prevent such attacks. This paper develops a formal foundation on DFI specification, and characteristics of its enforcement techniques with formulations of hypotheses and guarantees. Enforcement techniques are based on static analysis and program monitoring at runtime. This foundation {{can be used for}} practical satisfaction of DFI and help establish guarantees in every applied platform...|$|R
30|$|Physical Attacks. Our {{main concern}} are <b>software</b> <b>attacks</b> on {{the cameras and}} the {{delivered}} data. Attacks on camera hardware, including hardware manipulation as well as power and timing analysis [12] are {{beyond the scope of}} this work. We however assume that, for example, with specifically designed camera enclosures and circuit boards, a reasonable degree of resistance against tampering can be achieved. If a hardware attack involves the reboot of the camera, this should be detectable for camera operators.|$|R
40|$|Abstract Secure {{processors}} enable new sets {{of applications}} suchas commercial grid computing, software copy-protection, and secure mobile agents by providing security from bothphysical and <b>software</b> <b>attacks.</b> This paper proposes new hardware mechanisms for memory integrity verification andencryption, which are two key primitives required in singlechip secure processors. The integrity verification mecha-nism offers significant performance advantages over existing ones when the checks are infrequent as in grid comput-ing applications. The encryption mechanism improves the performance in all cases. 1...|$|R
40|$|TITLE: Attacks on computers, servers and services. SUMMARY: The aim of {{theoretical}} part {{is to describe}} global <b>software</b> <b>attacks</b> on computer systems, servers and their services. It also describes the way of performing illegal attacks and dividing of attackers according to {{their knowledge of the}} issue. Practical part of the theses focuses focucec on an examination of basic safety and durability of university software systems. KEYWORDS: The attacks, attacker, computer, north, service, social engineering, foreign identity...|$|R
40|$|Part 5 : Software SecurityInternational audienceWe {{present a}} {{practical}} tool for inserting security features against low-level <b>software</b> <b>attacks</b> into third-party, proprietary or otherwise binary-only software. We {{are motivated by}} the inability of software users to select and use low-overhead protection schemes when source code is unavailable to them, {{by the lack of}} information as to what (if any) security mechanisms software producers have used in their toolchains, and the high overhead and inaccuracy of solutions that treat software as a black box. Our approach is based on SecondWrite, an advanced binary rewriter that operates without need for debugging information or other assist. Using SecondWrite, we insert a variety of defenses into program binaries. Although the defenses are generally well known, they have not generally been used together because they are implemented by different (non-integrated) tools. We are also the first to demonstrate the use of such mechanisms in the absence of source code availability. We experimentally evaluate the effectiveness and performance impact of our approach. We show that it stops all variants of low-level <b>software</b> <b>attacks</b> at a very low performance overhead, without impacting original program functionalit...|$|R
40|$|Abstract. This {{tutorial}} paper {{considers the}} issues of low-level software security from a language-based perspective, {{with the help of}} concrete examples. Four examples of low-level <b>software</b> <b>attacks</b> are covered in full detail; these examples are representative of the major types of attacks on C and C++ software that is compiled into machine code. Six examples of practical defenses against those attacks are also covered in detail; these defenses are selected because of their effectiveness, wide applicability, and low enforcement overhead. ...|$|R
40|$|This paper {{proposes a}} novel {{semi-automatic}} risk analysis approach {{that not only}} identifies the threats against the assets in a software application, {{but it is also}} able to quantify their risks and to suggests the software protections to mitigate them. Built on a formal model of the <b>software,</b> <b>attacks,</b> protections and their relationships, our implementation has shown promising performance on real world applications. This work represents a first step towards a user-friendly expert system for the protection of software applications...|$|R
