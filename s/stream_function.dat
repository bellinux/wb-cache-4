1378|503|Public
25|$|In {{axisymmetric}} flow another <b>stream</b> <b>function</b> formulation, {{called the}} Stokes <b>stream</b> <b>function,</b> {{can be used}} to describe the velocity components of an incompressible flow with one scalar function.|$|E
25|$|Taking the curl of the scalar <b>stream</b> <b>function</b> {{elements}} gives divergence-free velocity elements. The {{requirement that}} the <b>stream</b> <b>function</b> elements be continuous assures that the normal component of the velocity is continuous across element interfaces, all that is necessary for vanishing divergence on these interfaces.|$|E
25|$|Boundary {{conditions}} are simple to apply. The <b>stream</b> <b>function</b> is constant on no-flow surfaces, with no-slip velocity conditions on surfaces.|$|E
40|$|The <b>Stream</b> <b>Functions</b> Pyramid, {{developed}} by Harman (2008), {{provides a framework}} that organizes <b>stream</b> <b>functions</b> in a pyramid form. The Pyramid illustrates that <b>stream</b> <b>functions</b> are supported by lower level functions in a hierarchical structure. The Pyramid is a useful tool in goal setting, developing and reviewing stream assessment methodologies, and creating standard operating procedures for regulatory and non-regulatory stream restoration programs. The Pyramid framework consists of four components that increase in detail. These four components comprise the <b>Stream</b> <b>Functions</b> Pyramid Framework. First, the broad-level view shows the five functional categories (Levels) with the underlying controlling variables of geology and climate. Second, function-based parameters are provided for each functional category. Third, measurement methods are provided for each function-based parameter. And fourth, where possible, performance standards are provided for the measurement methods. This presentation will briefly describe the <b>Stream</b> <b>Functions</b> Pyramid Framework and it potential applications...|$|R
30|$|While {{the core}} of npstreams is {{concerned}} with autogenerating <b>streaming</b> <b>functions</b> from basic universal numpy functions, some more complex <b>streaming</b> <b>functions</b> are implemented, {{with the aim of}} providing real-world examples. For instance, a streaming weighted average and streaming weighted standard deviation routines are included, based on West [33].|$|R
40|$|In {{this article}} we give an {{accessible}} introduction to stream differential equations, i. e., equations that take the shape of differential equations from analysis and {{that are used to}} define infinite streams. Furthermore we discuss a syntactic format for stream differential equations that ensures that any system of equations that fits into the format has a unique solution. It turns out that the <b>stream</b> <b>functions</b> that can be defined using our format are precisely the causal <b>stream</b> <b>functions.</b> Finally, we are going to discuss non-standard stream calculus that uses basic (co-) operations different from the usual head and tail operations in order to define and to reason about <b>streams</b> and <b>stream</b> <b>functions...</b>|$|R
25|$|Adopting {{continuous}} plate-bending elements, interchanging the derivative degrees-of-freedom {{and changing}} {{the sign of the}} appropriate one gives many families of <b>stream</b> <b>function</b> elements.|$|E
25|$|Near {{the end of}} the 20th century, it {{was shown}} that for finite-amplitude waves the {{convergence}} of the Stokes expansion depends strongly on the formulation of the periodic wave problem. For instance, an inverse formulation of the periodic wave problem as used by Stokes – with the spatial coordinates as a function of velocity potential and <b>stream</b> <b>function</b> – does not converge for high-amplitude waves. While other formulations converge much more rapidly, e.g. in the Eulerian frame of reference (with the velocity potential or <b>stream</b> <b>function</b> {{as a function of the}} spatial coordinates).|$|E
25|$|Thus every {{analytic}} function {{corresponds to a}} steady incompressible, irrotational fluid flow in the plane. The real part is the velocity potential, and the imaginary part is the <b>stream</b> <b>function.</b>|$|E
40|$|This {{thesis is}} {{composed}} of three separate parts. The first part deals with definability and productivity issues of equational systems defining polymorphic <b>stream</b> <b>functions.</b> The main result consists of showing such systems composed of only unary <b>stream</b> <b>functions</b> complete with respect to specifying computable unary polymorphic <b>stream</b> <b>functions.</b> The second part deals with syntactic and semantic notions of isomorphism of finitary inductive types and associated decidability issues. We show isomorphism of so-called guarded types decidable in the set and syntactic model, verifying that the answers coincide. The third part deals with homotopy levels of hierarchical univalent universes in homotopy type theory, showing that the n-th universe of n-types has truncation level strictly n+ 1...|$|R
40|$|Polymorphic <b>stream</b> <b>functions</b> {{operate on}} the {{structure}} of streams, infinite sequences of elements, without inspection of the contained data, having to work on all streams over all signatures uniformly. A natural, yet restrictive class of polymorphic <b>stream</b> <b>functions</b> comprises those definable by a system of equations using only stream constructors and destructors and recursive calls. Using methods reminiscent of prior results in the field, we first show this class consists of exactly the computable polymorphic <b>stream</b> <b>functions.</b> Using much more intricate techniques, our main result states this holds true even for unary equations free of mutual recursion, yielding an elegant model of Turing-completeness in a severely restricted environment and allowing us to recover previous complexity results in a much more restricted setting...|$|R
40|$|Over {{the past}} two decades there has been a {{significant}} advancement in the science of stream restoration. Much effort has been spent on understanding channel dimension, pattern and profile. However, not as much consideration has been given to understanding how <b>stream</b> <b>functions</b> influence channel dimension, pattern and profile. Harman et al. has produced the <b>Stream</b> <b>Functions</b> Pyramid Framework which addresses this issue and provides guidance on applications relevant to stream restoration. This presentation provides a case example of how the framework can be applied on a reach specific stream restoration project. The U. S. Fish 2 ̆ 6 Wildlife Service used the <b>Stream</b> <b>Functions</b> Pyramid Framework to conduct functional and stability assessments, set quantifiable restoration goals and objectives, create design criteria and establish quantifiable monitoring performance standards for the Mossy Creek Stream Restoration Project, Augusta County, Virginia...|$|R
25|$|<b>Stream</b> <b>function</b> {{differences}} across open channels determine the flow. No boundary conditions are necessary on open boundaries, though consistent values {{may be used}} with some problems. These are all Dirichlet conditions.|$|E
25|$|It is {{desirable}} to choose basis functions which reflect the essential feature of incompressible flow – the elements must be divergence-free. While the velocity is the variable of interest, {{the existence of}} the <b>stream</b> <b>function</b> or vector potential is necessary by the Helmholtz Theorem. Further, to determine fluid flow {{in the absence of a}} pressure gradient, one can specify the difference of <b>stream</b> <b>function</b> values across a 2D channel, or the line integral of the tangential component of the vector potential around the channel in 3D, the flow being given by Stokes' Theorem. Discussion will be restricted to 2D in the following.|$|E
25|$|Different {{choices for}} the frame of {{reference}} and expansion parameters are possible in Stokes-like approaches to the non-linear wave problem. In 1880, Stokes himself inverted the dependent and independent variables, by taking the velocity potential and <b>stream</b> <b>function</b> as the independent variables, and the coordinates (x,z) as the dependent variables, with x and z being the horizontal and vertical coordinates respectively. This has the advantage that the free surface, in a frame of reference in which the wave is steady (i.e. moving with the phase velocity), corresponds with a line on which the <b>stream</b> <b>function</b> is a constant. Then the free surface location is known beforehand, and not an unknown part of the solution. The disadvantage is that the radius of convergence of the rephrased series expansion reduces.|$|E
40|$|Structured Lucid is an ISWIM-like {{language}} {{formed by}} combining Basic Lucid and USWIM. Structured Lucid {{is almost a}} member of the USWIM family, except that a distinction is made between two kinds of function variables: those which denote <b>functions</b> mapping <b>streams</b> (histories) of data objects to streams of data objects, and those which denote <b>streams</b> of <b>functions</b> mapping data objects to data objects. The inference and manipulation rules of Structured Lucid combine Basic Lucid's facility for implicit reasoning about time with the modular or nested reasoning of USWIM. The distinction between <b>stream</b> <b>functions</b> and <b>streams</b> of <b>functions</b> is inherent in the ideas of Basic Lucid and has a natural operational interpretation. On one hand, a module which computes a <b>stream</b> of <b>functions</b> can be thought of a defining a subcomputation which is carried out while the main computation 'waits' or is 'frozen'; on the other hand, some modules which compute <b>stream</b> <b>functions</b> {{can be thought of as}} defining separate computations carried out in parallel with the main computation (a form of coroutine). In general, though, a module may freeze some but not all of its parameters or globals, and for these various combinations of the two interpretations are appropriate...|$|R
40|$|We {{introduce}} {{the notion of}} functional stream derivative, generalising the notion of input derivative of rational expressions (Brzozowski 1964) {{to the case of}} <b>stream</b> <b>functions</b> over arbitrary input and output alphabets. We show how to construct Mealy automata from algebraically specified <b>stream</b> <b>functions</b> by the symbolic computation of functional stream derivatives. We illustrate this construction in full detail for various bitstream functions specified in the algebraic calculus of the 2 -adic numbers. This work {{is part of a larger}} ongoing effort to specify and model component connector circuits in terms of (functions and relations on) streams...|$|R
40|$|Abstract: We {{propose a}} novel {{discipline}} for programming <b>stream</b> <b>functions</b> {{and for the}} semantic description of stream manipulation languages based on the observation that both general and causal <b>stream</b> <b>functions</b> {{can be characterized as}} coKleisli arrows of comonads. This seems to be a promising application for the old, but very little exploited idea that if monads abstract notions of computation of a value, comonads ought to be useable as an abstraction of notions of value in a context. We also show that causal partial-stream functions can be described in terms of a combination of a comonad and a monad...|$|R
25|$|The {{incompressible}} Navier–Stokes {{equation is}} a differential algebraic equation, having the inconvenient feature {{that there is}} no explicit mechanism for advancing the pressure in time. Consequently, much effort has been expended to eliminate the pressure from {{all or part of the}} computational process. The <b>stream</b> <b>function</b> formulation eliminates the pressure but only in two dimensions and at the expense of introducing higher derivatives and elimination of the velocity, which is the primary variable of interest.|$|E
25|$|If a line, curve {{or closed}} curve {{is used as}} start point for a {{continuous}} set of streamlines, {{the result is a}} stream surface. In the case of a closed curve in a steady flow, fluid that is inside a stream surface must remain forever within that same stream surface, because the streamlines are tangent to the flow velocity. A scalar function whose contour lines define the streamlines is known as the <b>stream</b> <b>function.</b>|$|E
500|$|... where [...] is the {{boundary}} layer thickness and [...] is the <b>stream</b> <b>function,</b> {{in which the}} newly introduced normalized <b>stream</b> <b>function,</b> , is only {{a function of the}} similarity variable. This leads directly to the velocity components ...|$|E
40|$|AbstractWe {{introduce}} {{the notion of}} functional stream derivative, generalising the notion of input derivative of rational expressions (Brzozowski 1964) {{to the case of}} <b>stream</b> <b>functions</b> over arbitrary input and output alphabets. We show how to construct Mealy automata from algebraically specified <b>stream</b> <b>functions</b> by the symbolic computation of functional stream derivatives. We illustrate this construction in full detail for various bitstream functions specified in the algebraic calculus of the 2 -adic numbers. This work {{is part of a larger}} ongoing effort to specify and model component connector circuits in terms of (functions and relations on) streams...|$|R
5000|$|Mainichi Issho {{is part of}} the PlayStation 3 games {{which are}} playable on the PlayStation Portable {{handheld}} console through Remote Play <b>streaming</b> <b>function.</b> [...] "Game" [...] mode is not compatible with Remote Play though.|$|R
50|$|Compensation for impacts to {{a stream}} {{riparian}} zone {{may also be}} required {{in relation to the}} linear distance of lost <b>stream</b> <b>functions</b> resulting from <b>stream</b> bank structures (e.g., concrete or rip rap), sedimentation, channelization, dredging or similar activities.|$|R
500|$|The flow being incompressible, a <b>stream</b> <b>function</b> can {{be found}} such that ...|$|E
500|$|For steady {{two-dimensional}} boundary layers, von Mises {{introduced a}} transformation which takes [...] and (<b>stream</b> <b>function)</b> {{as independent variables}} instead of [...] and [...] and uses a dependent variable [...] instead of [...] The boundary layer equation then become ...|$|E
2500|$|For steady {{generalized}} Beltrami flow, we have [...] {{and since}} it is planar we have [...] Introducing the <b>stream</b> <b>function</b> ...|$|E
50|$|Because {{the media}} gateway connects {{different}} types of networks, one of its main functions is to convert between different transmission and coding techniques. Media <b>streaming</b> <b>functions</b> such as echo cancellation, DTMF, and tone sender are also located in the media gateway.|$|R
40|$|Borrowing {{a concept}} from {{hydrodynamic}} analysis, {{this paper presents}} <b>stream</b> <b>functions</b> which satisfy Laplace's equation as a local-minima free method for producing potential-field based navigation functions in two dimensions. These functions generate smoother paths (i. e. more suited to aircraft-like vehicles) than previous methods. A method is developed for constructing analytic <b>stream</b> <b>functions</b> to produce arbitrary vehicle behaviors while avoiding obstacles, and an exact solution for {{the case of a}} single uniformly moving obstacle is presented. The e#ects of introducing multiple obstacles are discussed and current work in this direction is detailed. Experimental results generated on the Cornell RoboFlag testbed are presented and discussed, as well as related work applying these methods to path planning for unmanned air vehicles...|$|R
30|$|It is {{not clear}} if the {{ecological}} roles of absent taxa are performed by those taxa remaining, or if essential <b>stream</b> <b>functions</b> are also altered in TDS/SC streams. Leaf-litter processing rates are often reduced in mining-influenced streams with elevated TDS/SC, relative to reference streams (Simmons et al. 2008; Fritz et al. 2010; Petty et al. 2013), although it is uncertain if elevated major ions are the causative factor. Two studies have found breakdown rates to be negatively correlated with SC (Fritz et al. 2010; Petty et al. 2013), but both studied limited selections of <b>streams.</b> Other <b>stream</b> <b>functions,</b> such as nutrient uptake, have not been studied sufficiently to draw conclusions concerning how {{they may or may}} not be affected by elevated major ions.|$|R
2500|$|... {{results in}} mass {{continuity}} being unconditionally satisfied (given the <b>stream</b> <b>function</b> is continuous), and then incompressible Newtonian 2D momentum and mass conservation condense into one equation: ...|$|E
2500|$|Differentiating {{the first}} {{with respect to}} , the second with respect to [...] and {{subtracting}} the resulting equations will eliminate pressure and any conservative force. Defining the <b>stream</b> <b>function</b> [...] through ...|$|E
2500|$|... {{then the}} {{continuity}} condition is the integrability condition for this differential: the resulting function {{is called the}} <b>stream</b> <b>function</b> because it is constant along flow lines. The first derivatives of ψ are given by ...|$|E
30|$|Riemann [7] is {{an event}} based {{distributed}} systems monitoring tool. Riemann does not focus on data collection, but rather on event submission and processing. Events are representations of arbitrary metrics which are generatedq by clients and encoded using Google Protocol Buffers [8] and additionally contains various metadata (hostname, service name, time, ttl, etc). On receiving an event Riemann processes it through a stream. Users can write <b>stream</b> <b>functions</b> in a Clojure based DSL to operate on <b>streams.</b> <b>Stream</b> <b>functions</b> can handle events, merge streams, split streams and perform various other operations. Through stream processing Riemann can check thresholds, detect anomalous behaviour, raise alerts and perform other common monitoring use cases. Designed to handle thousands of events per second, Riemann is intended to operate at scale.|$|R
30|$|The {{family of}} <b>stream</b> <b>functions</b> ψ_ε was {{constructed}} in [8] which satisfied ψ_ε∈ C^∞(Ω). In addition, the solution v of (3.16) is obtained in Theorem  3.1. Let u=v+ψ_ε, {{it is easy to}} check that u is the weak solution of (1.1) which satisfies (i), (ii), and (iii).|$|R
40|$|Bilateral spastic {{cerebral}} palsy (BSCP) {{is the most}} common form of {{cerebral palsy}}, and has risen in prevalence in recent years as advances in neonatal care improve survival rates for at-risk infants. In addition to the motor disability that defines the disorder, affected individuals often demonstrate pervasive visual cognitive deficits. Although the typical pattern of brain injury predicts greater compromise of dorsal than ventral <b>stream</b> visual <b>functions,</b> behavioral evidence is currently limited and no studies have evaluated this prediction using functional neuroimaging methods. To further characterize the nature and severity of visual cognitive deficits in BSCP, we probed dorsal and ventral <b>stream</b> <b>functioning</b> in typically developing 8 - 10 year-old children (n= 15), adults (n= 15), and children and adolescents with BSCP (n= 6), using working memory tasks for locations and faces. In Study 1, behavioral and FMRI data were compared across child and adult control groups to chart the normal course of developmental change in dorsal and ventral <b>stream</b> <b>functioning.</b> Study 2 explored the relative compromise of dorsal and ventral <b>stream</b> <b>functions</b> in BSCP participants via a series of individual case studies. Results of Study 1 revealed continued refinement of dorsal and ventral <b>stream</b> <b>functioning</b> from mid-childhood through adulthood. Across both tasks, ongoing development was apparent at the behavioral level through improvements in speed and accuracy of performance, and at the neural level through increasing reliance on higher-order prefrontal and parietal brain regions. Overall, the data from Study 2 underscored a striking degree of resilience in the face of early brain injury. BSCP participants as a whole performed within normal limits on both tasks and demonstrated only slight departures from expected profiles of regional brain activation. Specifically, across individual cases, findings converged to suggest subtle inefficiencies with face processing and modest reduction in BOLD response in dorsolateral prefrontal regions. Results will be discussed with reference to theories of visual cognitive and prefrontal dysfunction in BSCP, the likely inadequacy of predictions based on adult structure-function correspondences in the study of early brain injury, protective socioeconomic factors potentially relevant to our sample, and implications for neuroplasticit...|$|R
