25|77|Public
2500|$|The MIPS {{architecture}} supports one to 64 {{entries in}} the TLB. [...] The number of TLB entries is configurable at CPU configuration before synthesis. [...] TLB entries are dual. [...] Each TLB entry maps a virtual page number (VPN2) to either one of two page frame numbers (PFN0 or PFN1), depending on the least significant bit of the virtual address that {{is not part of}} the page mask. [...] This bit and the page mask bits are not stored in the VPN2. [...] Each TLB entry has its own page size, which can be any value from [...] to [...] in multiples of four. [...] Each PFN in a TLB entry has a caching attribute, a dirty and a valid <b>status</b> <b>bit.</b> [...] A VPN2 has a global <b>status</b> <b>bit</b> and an OS assigned ID which participates in the virtual address TLB entry match, if the global <b>status</b> <b>bit</b> is set to zero. [...] A PFN stores the physical address without the page mask bits.|$|E
50|$|Dying Gasp is {{referenced}} {{in section}} 7.1.2.5.3 of ITU-T Recommendation G.991.2 (12/2003) as the Power <b>Status</b> <b>bit.</b>|$|E
50|$|With one exception, S/PDIF {{protocol}} {{is identical}} to AES3. The channel <b>status</b> <b>bit</b> differs in S/PDIF. There is one channel <b>status</b> <b>bit</b> in each subframe, making 384 bits in each audio block. The meaning of the channel status bits is completely different between AES3 and S/PDIF. For S/PDIF, the 192-bit block for each channel is divided into 12 words of 16 bits each. The first 6 bits of the first word are a control code. The meaning of its bits are shown in the accompanying table.|$|E
5000|$|The Status field {{contains}} one byte of Channel <b>status</b> <b>bits,</b> indicating conditions {{detected by}} the channelPoOps, and one byte of Unit <b>status</b> <b>bits,</b> indicating conditions detected by the I/O unitPoOps. There is {{no distinction between}} conditions detected by the control unit and conditions detected by the device.|$|R
50|$|Not mapped {{into the}} address space is a 12-bit program counter and an {{associated}} hardware stack (four or six levels deep, depending on model). There {{are only two}} <b>status</b> <b>bits</b> (carry and zero), and they are banked based on processor mode, with separate <b>status</b> <b>bits</b> for normal, interrupt and non-maskable interrupt operation.|$|R
50|$|RISC-V {{does not}} cause {{exceptions}} on arithmetic errors, including overflow, underflow, subnormal and divide by zero. Instead, both integer and floating-point arithmetic produce reasonable default values and set <b>status</b> <b>bits.</b> Divide-by-zero can be discovered by a single branch after the division. The <b>status</b> <b>bits</b> can be tested by an operating system or periodic interrupt.|$|R
5000|$|... Instruction Transfer Register (ITR), 33 bits (32 {{instruction}} {{plus one}} <b>status</b> <b>bit)</b> used to execute processor instructions {{while in a}} special [...] "Debug Mode" [...] (see below) ...|$|E
50|$|The {{occurrence}} of an underflow may set a ('sticky') <b>status</b> <b>bit,</b> raise an exception, at the hardwarelevel generate an interrupt, or may cause {{some combination of}} these effects.|$|E
50|$|The 6545 may {{be set to}} work in linear 14 {{bit mode}} using a <b>status</b> <b>bit.</b> On the 6845 the same thing {{requires}} adjustment of the character height.|$|E
40|$|DE 102006061648 A 1 UPAB: 20080715 NOVELTY - The device has an encoder {{for passing}} a bit amount and coding {{predetermined}} bit amount {{level of a}} tuple into a coded data stream (14). A <b>bit</b> extractor determines <b>status</b> <b>bits</b> during passing of the bit amount, where the <b>status</b> <b>bits</b> indicates the significance related to the predetermined bit amount level. The bit amount represents same transformation coefficients even if a sequence of bit amounts lies in more significant bit levels. A buffer {{is filled with the}} <b>status</b> <b>bits,</b> and a coder (26) codes predetermined amount bits into the coded data stream using the <b>status</b> <b>bits.</b> DETAILED DESCRIPTION - An INDEPENDENT CLAIM is also included for a method for coding a block of transformation coefficients. USE - Device for coding a block of transformation coefficients. ADVANTAGE - The device is designed such that it codes the transformation coefficient blocks and effectively implements the blocks in the hardware...|$|R
50|$|In later {{implementations}} these <b>status</b> <b>bits</b> {{evolved to}} keep up with growing memory sizes and gained insights.|$|R
5000|$|The first {{computer}} with this architecture was the B5000. in that implementation, {{the meaning of}} the various <b>status</b> <b>bits</b> was: ...|$|R
5000|$|As stated {{before there}} is one channel <b>status</b> <b>bit</b> in each subframe, making one 192 bit word for each channel in each block. This 192 bit word is usually {{presented}} as 192/8 = 24 bytes. The contents of the channel status word are completely different between the AES3 and S/PDIF standards, although they agree that the first channel <b>status</b> <b>bit</b> (byte 0 bit 0) distinguishes between the two. In the case of AES3, the standard describes in detail how the bits have to be used. Here is {{a summary of the}} channel status word: ...|$|E
50|$|The MIPS {{architecture}} supports one to 64 {{entries in}} the TLB. The number of TLB entries is configurable at CPU configuration before synthesis. TLB entries are dual. Each TLB entry maps a virtual page number (VPN2) to either one of two page frame numbers (PFN0 or PFN1), depending on the least significant bit of the virtual address that {{is not part of}} the page mask. This bit and the page mask bits are not stored in the VPN2. Each TLB entry has its own page size, which can be any value from 1 KB to 256 MB in multiples of four. Each PFN in a TLB entry has a caching attribute, a dirty and a valid <b>status</b> <b>bit.</b> A VPN2 has a global <b>status</b> <b>bit</b> and an OS assigned ID which participates in the virtual address TLB entry match, if the global <b>status</b> <b>bit</b> is set to zero. A PFN stores the physical address without the page mask bits.|$|E
50|$|Bit-PLRU stores one <b>status</b> <b>bit</b> {{for each}} cache line. We call thesebits MRU-bits. Every {{access to a}} line sets its MRU-bit to 1, {{indicating}} that theline was recently used. Whenever the last remaining 0 bit of a set's status bits isset to 1, all other bits are reset to 0. At cache misses, the line with lowest index whose MRU-bit is 0 is replaced.|$|E
5000|$|Type II SmartNet systems uses <b>status</b> <b>bits</b> {{for special}} {{transmissions}} such as Emergency, Patches, DES/DVP encrypted transmissions, and Multiselects on Motorola Trunking systems. Motorola Trunking radios directly interpret these <b>status</b> <b>bits</b> for their special functions, therefore no difference is noticed by the user. Some Scanners may interpret these special talkgroup <b>status</b> <b>bits</b> as different talkgroups entirely. Below is the conversion chart for these special status bits: [...] Dec ID + # Usage ------------------------------------------------------- ID+0 Normal Talkgroup ID+1 All Talkgroup ID+2 Emergency ID+3 Talkgroup patch to another ID+4 Emergency Patch ID+5 Emergency multi-group ID+6 Not assigned ID+7 Multi-select (initiated by dispatcher) ID+8 DES Encryption talkgroup ID+9 DES All Talkgroup ID+10 DES Emergency ID+11 DES Talkgroup patch ID+12 DES Emergency Patch ID+13 DES Emergency multi-group ID+14 Not assigned ID+15 Multi-select DES TG ...|$|R
3000|$|... -locator replies a Loc_ack {{message with}} the <b>status</b> <b>bits</b> {{indicating}} {{whether it has}} detected the abnormality. The sensor measures the distances to its [...]...|$|R
5000|$|... 34 bits are not {{encrypted}} : a 28-bit serial number, 4 bits of button information, and 2 <b>status</b> <b>bits</b> (repeat and {{low battery}} indicators).|$|R
50|$|In serial {{communication}} contexts, parity is usually generated and checked by interface hardware (e.g., a UART) and, on reception, the result {{made available to}} the CPU (and so to, for instance, the operating system) via a <b>status</b> <b>bit</b> in a hardware register in the interface hardware. Recovery from the error is usually done by retransmitting the data, the details of which are usually handled by software (e.g., the operating system I/O routines).|$|E
5000|$|Handling: If it is {{anticipated}} that overflow may occur and when it happens detected and other processing done. Example: {{it is possible to}} add two numbers each two bytes wide using just a byte addition in steps: first add the low bytes then add the high bytes, but if it is necessary to carry out of the low bytes this is arithmetic overflow of the byte addition and it necessary to detect and increment the sum of the high bytes. CPUs generally have a way of detecting this to support addition of numbers larger than their register size, typically using a <b>status</b> <b>bit.</b>|$|E
5000|$|The PDP-6 {{supported}} {{time sharing}} {{through the use}} of a <b>status</b> <b>bit</b> selecting between two operating modes ("Executive" [...] and [...] "User", with access to I/O, etc., being restricted in the latter), and a single relocation/protection register which allowed a user's address space to be limited to a set section of main memory (a second relocation/protection register for shareable [...] "high segments" [...] was added on the PDP-10). The main operating system used on the machine was an early version of what later became TOPS-10, and several sites made custom versions of the system, which was available in source code form. MIT's ITS operating system also began on the PDP-6.|$|E
50|$|A BT.656 {{data stream}} is a {{sequence}} of 8-bit or 10-bit Word (computer architecture), transmitted {{at a rate of}} 27 Mword/s. Horizontal scan lines of video pixel data are delimited in the stream by 4-byte long SAV (Start of Active Video) and EAV (End of Active Video) code sequences. SAV codes also contain <b>status</b> <b>bits</b> indicating line position in a video field or frame. Line position in a full frame can be determined by tracking SAV <b>status</b> <b>bits,</b> allowing receivers to 'synchronize' with an incoming stream.|$|R
5000|$|Therefore, if a user was {{transmitting}} a multi-select call on talkgroup 1808, the trunktracker {{would actually}} receive those transmissions on 1815. Some common uses of these <b>status</b> <b>bits</b> are as follows: ...|$|R
50|$|Anything that is {{read and}} written can be renamed. While the {{general-purpose}} and floating-point registers are discussed the most, flag and status registers or even individual <b>status</b> <b>bits</b> are commonly renamed as well.|$|R
5000|$|Data Carrier Detect, {{abbreviated}} as DCD, or alternately Carrier Detect abbreviated as CD, is {{a control}} signal present inside an RS-232 serial communications cable that goes between {{a computer and}} another device, such as a modem. This signal is a simple [...] "high/low" [...] <b>status</b> <b>bit</b> that is sent [...] "from DCE to DTE", or in a typical scenario, from the peripheral to the computer. It is present on virtually all PC serial ports - pin 1 of a nine-pin (DE9) serial port, or pin 8 over a 25-pin (DB25) port. Its purpose varies depending on the device connected, but the most typical meaning is to indicate when a modem is connected to another remote modem via telephone lines.|$|E
5000|$|The [...] "SO" [...] input pin, when asserted, {{will set}} the processor's {{overflow}} <b>status</b> <b>bit</b> (deasserting it does not clear the overflow bit, however). This {{can be used by}} a high-speed polling device driver, which can poll the hardware once in only three cycles by using a Branch-on-oVerflow-Clear (BVC) instruction that branches to itself. For example, the Commodore 1541 and other Commodore floppy disk drives use this technique to detect without delay whether the serializer is ready to accept or provide another byte of disk data. Obviously great care must be used in the device driver and the associated system design, as spurious assertion of the overflow bit could ruin arithmetic processing.|$|E
3000|$|... i + 1 in {{the reverse}} path sends a M-ERROR {{message to the}} source then sets the <b>status</b> <b>bit</b> of guilty node N [...]...|$|E
40|$|A {{reconfigurable}} {{data path}} processor comprises {{a plurality of}} independent processing elements. Each of the processing elements advantageously comprising an identical architecture. Each processing element comprises a plurality of data processing means for generating a potential output. Each processor is also capable of through-putting an input as a potential output {{with little or no}} processing. Each processing element comprises a conditional multiplexer having a first conditional multiplexer input, a second conditional multiplexer input and a conditional multiplexer output. A first potential output value is transmitted to the first conditional multiplexer input, and a second potential output value is transmitted to the second conditional multiplexer output. The conditional multiplexer couples either the first conditional multiplexer input or the second conditional multiplexer input to the conditional multiplexer output, according to an output control command. The output control command is generated by processing a set of arithmetic status-bits through a logical mask. The conditional multiplexer output is coupled to a first processing element output. A first set of arithmetic bits are generated according to the processing of the first processable value. A second set of arithmetic bits may be generated from a second processing operation. The selection of the arithmetic status-bits is performed by an arithmetic-status bit multiplexer selects the desired set of arithmetic <b>status</b> <b>bits</b> from among the first and second set of arithmetic <b>status</b> <b>bits.</b> The conditional multiplexer evaluates the select arithmetic <b>status</b> <b>bits</b> according to logical mask defining an algorithm for evaluating the arithmetic <b>status</b> <b>bits...</b>|$|R
2500|$|Arithmetic: ADD, SUB, MULU (unsigned multiply), MULS (signed multiply), DIVU, DIVS, NEG (additive negation), and CMP (a sort of {{comparison}} done by subtracting the arguments {{and setting the}} <b>status</b> <b>bits,</b> but did not store the result) ...|$|R
5000|$|... Debug Communications Channel (DCC), 34 bits (one long {{data word}} plus two <b>status</b> <b>bits)</b> used for {{bidirectional}} data {{transfer to the}} core. This is used both in debug mode, and possibly at runtime when talking to debugger-aware software.|$|R
30|$|In the TBUT, each node {{is issued}} with a token at its inception. The token {{consists}} of three fields: NodeID, status, and reputation. NodeID {{is assumed to be}} unique and deemed to be beyond manipulation; status is a single-bit flag. Initially, the <b>status</b> <b>bit</b> is preset to zero indicating a green flag. Initially, reputation value is zero, i.e., positive. The token with a green flag and positive reputation is a permit issued to each node, which confers it the freedom to participate in all network activities. Each node in order to participate in any network activity, say Route Request RREQ, has to announce its token <b>status</b> <b>bit</b> and reputation value. If token <b>status</b> <b>bit</b> is “ 1 ” indicating a “red flag,” protocol does not allow the node to participate in any network activity. Similarly, if reputation value is “− 1 ” indicating a “negative reputation,” the protocol does not allow the node to participate in any network activity. Our study does not depend on the exact mobile node structure of the networks. For the sake of the result explanation, it will be assumed that the network consists of approximately 100 mobile nodes span in the flat space (i.e., its span size is roughly 1 km 2) and that there are roughly 20 mobile nodes per service area region [7].|$|E
30|$|The rows of {{the array}} {{represent}} strings (of bits) in a population, and the columns represent the (the <b>status</b> <b>bit</b> {{of the condition}} of availability) available channel numbers which will be assigned. There are P strings for a population and each string has Q (possible states) channels which are {{the total number of}} available channels in the system Q[*]<[*]K.|$|E
30|$|The Monitor {{provides}} the Link Prediction with relevant measurement data (e.g., signal quality and messages concerning upcoming changes in link availability) {{that needs to}} be processed to predict future link quality for each of the interfaces. Measurements concerning the available bandwidth and the round trip time are given to the Application Interface. The tunnel up/down <b>status,</b> <b>bit</b> error rate (BER), packet loss, round trip time etc are signaled to the Admission Control (see Section 4.3. 5).|$|E
50|$|Group 2 format {{instructions}} {{test for}} internal {{conditions of the}} J and Kaccumulator registers, manipulate the overflow and flag <b>status</b> <b>bits</b> andprovide complement, increment and negation operations on the J and K accumulatorregisters. Bits 9, 10 and 11 select the condition to be tested.|$|R
50|$|The Pep/7 Computer Simulation (also {{known as}} Pep7) {{is a virtual}} machine {{that is used by}} professors of schools and colleges to explain and simplify the lowest level of {{computing}} (machine language). True to its name, Pep/7 has seven registers and four <b>status</b> <b>bits.</b>|$|R
50|$|The {{carry bit}} {{can be set}} or complemented by {{specific}} instructions. Conditional-branch instructions test the various flag <b>status</b> <b>bits.</b> The flags can be copied as a group to the accumulator. The A accumulator and the flags together are called the PSW register, or program status word.|$|R
