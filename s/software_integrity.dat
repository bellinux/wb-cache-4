69|73|Public
25|$|The {{traditional}} {{software configuration}} management (SCM) process is looked upon by practitioners {{as the best}} solution to handling changes in software projects. It identifies the functional and physical attributes of software at various points in time, and performs systematic control of changes to the identified attributes {{for the purpose of}} maintaining <b>software</b> <b>integrity</b> and traceability throughout the software development life cycle.|$|E
2500|$|During {{the first}} six months in 2013, Microsoft had {{received}} requests that affected between 15,000 and 15,999 accounts. In December 2013, the company made statement to further emphasize the fact that they take their customers' privacy and data protection very seriously, even saying that [...] "government snooping potentially now constitutes an [...] "advanced persistent threat," [...] alongside sophisticated malware and cyber attacks". The statement also marked the beginning of three-part program to enhance Microsoft's encryption and transparency efforts. On July 1, 2014, as part of this program they opened the first (of many) Microsoft Transparency Center, that provides [...] "participating governments with the ability to review source code for our key products, assure themselves of their <b>software</b> <b>integrity,</b> and confirm there are no [...] "back doors." [...] Microsoft has also argued that the United States Congress should enact strong privacy regulations to protect consumer data.|$|E
2500|$|The {{fundamental}} problem with rootkit detection {{is that if}} the operating system has been subverted, particularly by a kernel-level rootkit, it cannot be trusted to find unauthorized modifications to itself or its components. Actions such as requesting a list of running processes, or a list of files in a directory, cannot be trusted to behave as expected. In other words, rootkit detectors that work while running on infected systems are only effective against rootkits that have some defect in their camouflage, or that run with lower user-mode privileges than the detection software in the kernel. As with computer viruses, the detection and elimination of rootkits is an ongoing struggle between both sides of this conflict. Detection can take a number of different approaches, including looking for virus [...] "signatures" [...] (e.g. antivirus <b>software),</b> <b>integrity</b> checking (e.g. digital signatures), difference-based detection (comparison of expected vs. actual results), and behavioral detection (e.g. monitoring CPU usage or network traffic).|$|E
5000|$|... several {{operating}} {{systems have been}} formally verified:NICTA's Secure Embedded L4 microkernel, sold commercially as seL4 by OK Labs; OSEK/VDX based real-time operating system ORIENTAIS by East China Normal University; Green Hills <b>Software's</b> <b>Integrity</b> operating system; and SYSGO's PikeOS.|$|R
50|$|Real-time {{operating}} systems {{that run on}} MIPS include CMX Systems, eCosCentric's eCos, ENEA OSE, Express Logic's ThreadX, FreeRTOS, Green Hills <b>Software's</b> <b>Integrity,</b> LynuxWorks' LynxOS, Mentor Graphics, Micrium's Micro-Controller Operating Systems (µC/OS), QNX Software Systems' QNX, Quadros Systems Inc.'s RTXC™ Quadros RTOS, Segger's embOS and Wind River's VxWorks.|$|R
50|$|In 1980, TCS {{established}} India's first dedicated software {{research and}} development centre, the Tata Research Development and Design Centre (TRDDC) in Pune. In 1981, it established India's first client-dedicated offshore development centre, set up for clients Tandem. TCS later (1993) partnered with Canada-based <b>software</b> factory <b>Integrity</b> <b>Software</b> Corp, which TCS later acquired.|$|R
5000|$|... a {{software}} taggant may cover small critical {{areas of the}} program to minimize the cost of <b>software</b> <b>integrity</b> checking (Authenticode always covers nearly the entire file so the cost of checking linearly depends on the file size) ...|$|E
50|$|The {{traditional}} {{software configuration}} management (SCM) process is looked upon by practitioners {{as the best}} solution to handling changes in software projects. It identifies the functional and physical attributes of software at various points in time, and performs systematic control of changes to the identified attributes {{for the purpose of}} maintaining <b>software</b> <b>integrity</b> and traceability throughout the software development life cycle.|$|E
50|$|Ad hoc {{testing and}} {{exploratory}} testing are important methodologies for checking <b>software</b> <b>integrity,</b> because they require less preparation time to implement, while the important bugs {{can be found}} quickly. In ad hoc testing, where testing takes place in an improvised, impromptu way, {{the ability of a}} test tool to visually record everything that occurs on a system becomes very important in order to document the steps taken to uncover the bug.|$|E
50|$|Craneware plc of Edinburgh for revenue <b>integrity</b> <b>software.</b>|$|R
5000|$|The Wall Street Journal has {{described}} the cloud software as combining [...] "Machine learning and contextual analytics to protect mobile devices from malicious applications .... The software, which uses machine intelligence technology, analyzes an app’s executable code, the IP address the device is accessing and several other traits to verify the <b>software’s</b> <b>integrity.</b> Each app on the device is cross checked with millions of data points Lookout has culled from more than six million mobile apps running on 50 million devices. Carriers preinstalled a consumer version, called Lookout Mobile Security, on smartphones sold to consumers." ...|$|R
40|$|Part 2 : Full PapersInternational audienceNowadays, {{more and}} more {{enterprises}} realize that one important step to success in their business is to create new and innovative products. Many times the solution {{to do that is}} to abandon the idea of an enterprise as an “isolated island”, and get collaboration with others: worldwide non-hierarchical networks are characterized by collaboration and non-centralized decision making. This paper proposes a conceptual model common to the entire business network, in a framework that enables the abstraction of individual models at their meta-level and increase language independency and interoperability, keeping all the enterprise <b>software’s</b> <b>integrity</b> intact. The strategy presented allows an incremental mapping construction, to achieve growing integration...|$|R
5000|$|The {{fundamental}} problem with rootkit detection {{is that if}} the operating system has been subverted, particularly by a kernel-level rootkit, it cannot be trusted to find unauthorized modifications to itself or its components. Actions such as requesting a list of running processes, or a list of files in a directory, cannot be trusted to behave as expected. In other words, rootkit detectors that work while running on infected systems are only effective against rootkits that have some defect in their camouflage, or that run with lower user-mode privileges than the detection software in the kernel. As with computer viruses, the detection and elimination of rootkits is an ongoing struggle between both sides of this conflict. Detection can take a number of different approaches, including looking for virus [...] "signatures" [...] (e.g. antivirus <b>software),</b> <b>integrity</b> checking (e.g. digital signatures), difference-based detection (comparison of expected vs. actual results), and behavioral detection (e.g. monitoring CPU usage or network traffic).|$|E
5000|$|During {{the first}} six months in 2013, Microsoft had {{received}} requests that affected between 15,000 and 15,999 accounts. In December 2013, the company made statement to further emphasize the fact that they take their customers' privacy and data protection very seriously, even saying that [...] "government snooping potentially now constitutes an [...] "advanced persistent threat," [...] alongside sophisticated malware and cyber attacks". The statement also marked the beginning of three-part program to enhance Microsoft's encryption and transparency efforts. On July 1, 2014, as part of this program they opened the first (of many) Microsoft Transparency Center, that provides [...] "participating governments with the ability to review source code for our key products, assure themselves of their <b>software</b> <b>integrity,</b> and confirm there are no [...] "back doors." [...] Microsoft has also argued that the United States Congress should enact strong privacy regulations to protect consumer data. In 2016, the company sued the U.S., arguing that secrecy orders were preventing the company from disclosing warrants to customers in violation of the company's and customers' rights.|$|E
40|$|<b>Software</b> <b>integrity</b> and {{confidentiality}} play {{a central}} role in making embedded computer systems resilient to various malicious actions, such as software attacks; probing and tampering with buses, memory, and I/O devices; and reverse engineering. In this paper we describe an efficient hardware mechanism that protects <b>software</b> <b>integrity</b> and guarantees software confidentiality. To provide <b>software</b> <b>integrity,</b> each instruction block is signed during program installation with a cryptographically secure signature. The signatures embedded in the code are verified during program execution. Software confidentiality is provided by encrypting instruction blocks. To achieve low performance overhead, the proposed mechanism combines several architectural enhancements: a variation of one-time-pad encryption, parallelizable signatures, and conditional execution of unverified instructions. A relatively high memory overhead due to embedded signatures can be reduced by protecting multiple instruction blocks with one signature, with minimal effects on complexity and performance overhead. 1...|$|E
5000|$|Real {{security}} {{begins with}} security policy. The Information Security professional {{must ensure that}} the security policy covers telecommuting/teleworking and who may telework, services available to teleworkers, information restrictions, identification/authentication/authorization, equipment and <b>software</b> specifications, <b>integrity</b> and confidentiality, maintenance guidelines, and robust user education." ...|$|R
50|$|Check Point {{acquired}} the <b>Integrity</b> <b>software</b> {{as part of}} its acquisition of endpoint security start-up Zone Labs in 2004. The <b>Integrity</b> <b>software,</b> released in early 2002, was derived from the ZoneAlarm security technology and added central policy management and network access control functions. Integrity was integrated with network gateways (the Cisco VPN 3000 series) to ensure that a PC met security requirements before it was granted access to the network.|$|R
50|$|The <b>software</b> {{supports}} referential <b>integrity,</b> multi-master replication, {{and has a}} modular authentication architecture. It can {{be accessed}} via LDAP, DSML, SOAP, ODBC, JDBC, JNDI, and ADSI.|$|R
40|$|Abstract. There is a {{need for}} {{terminal}} management mechanisms for high volume embedded devices. Current technology provides mechanisms for adaptation of software on embedded devices during their deployment. These mechanisms give the opportunity to adapt a device to the wishes of the consumer at a specific location or time. While being useful to the user, these mechanisms might also jeopardize the <b>software</b> <b>integrity</b> on these devices. In this paper we present mechanisms {{that can be used to}} adapt the software configuration of a device depending on the context in which it is used. Furthermore we present the mechanisms that can be used to maintain <b>software</b> <b>integrity</b> in a dynamically changing system. The challenge is to increase the value of a device by run-time adaptation of the software configuration to the needs of the consumer, and to maintain <b>software</b> <b>integrity</b> during run-time changes to ensure robust and reliable operation of a device. ...|$|E
40|$|Protecting <b>software</b> <b>integrity</b> {{is a key}} to {{successfully}} maintain its own credibility and reduce the financial and technical risks caused from a lack of integrity. Although researchers have been putting effort on improving software development techniques and preventing human errors during the software development process, it is still a daunting task to make non-vulnerable software in practice. For example, the national vulnerability database shows that a set of new software vulnerabilities are discovered every day. Since developing non-vulnerable software is hardly achievable, in this research, we look for a way to achieve <b>software</b> <b>integrity</b> while they are used. In particular, this dissertation investigates three mechanisms to protect <b>software</b> <b>integrity</b> at runtime. Firstly, this dissertation presents a protection mechanism that can thwart attacks that try to exploit memory corruption vulnerabilities of software. The protection mechanism is provided by randomizing the program’s runtime memory address layout and the memory objects. As a result, it hinders memory corruption attacks by preventing an attacker being able to easily predict their target addresses. The protection mechanism is implemented by a novel binary rewriting tool that can randomly place the code and data segments of programs an...|$|E
40|$|We {{summarize}} {{and relate}} current {{work in the}} area of dynamic software architecture. Based on this and our experience to date in constructing systems based on dynamic software architectures, we present a set of open research issues that need further investigation. Keywords Dynamic software architectures, runtime software evolution, runtime software reconfiguration, software consistency, <b>software</b> <b>integrity.</b> ...|$|E
40|$|International audienceTopological {{analysis}} of electron densities sampled on 3 D grids {{have been performed}} on two different crystalline compounds-ammonium dihydrogen phosphate and urea-using the <b>software</b> package <b>InteGriTy</b> {{and the results are}} compared to that of analytical derivation from the software Newprop and TOPOND. Both critical points and integrated quantities are considered with emphasis put on bond critical points and atomic charges...|$|R
40|$|Current {{practice}} for examination {{of a high}} <b>integrity</b> <b>software</b> artifact is often a manual process that is slow, tedious, and prone to human errors. This report describes a Computer Aided Software Engineering (CASE) tool, unravel, that can assist evaluation of high <b>integrity</b> <b>software</b> by using program slices to extract computations for examination. The tool can currently be used to evaluate software written in ANSI C and is designed such that other languages can be added. Program slicing is a static analysis technique that extracts all statements relevant to the computation of a given variable. Program slicing is useful in program debugging, software maintenance and program understanding. Application of program slicing to evaluation of high <b>integrity</b> <b>software</b> reduces the effort in examining software by allowing a software reviewer {{to focus attention on}} one computation at a time. Once a software reviewer has identified a variable for further investigation, the reviewer directs unravel to c [...] ...|$|R
40|$|This paper {{describes}} a program slicing tool, unravel, that {{can assist in}} the evaluation of high <b>integrity</b> <b>software</b> by using program slices to extract a single computation from a program for examination and test. The tool, available through the National Institute of Standards and Technology, can currently be used to evaluate software written in ANSI C and is designed such that other languages can be added. I. INTRODUCTION High <b>integrity</b> <b>software</b> systems are often used in environments where a lack of response can cause an accident or result in severe financial loss due to an operational failure. Detecting a fault in the code is difficult and costly. This paper {{describes a}} program slicing tool, unravel, that can assist {{in the evaluation of}} high <b>integrity</b> <b>software</b> by using program slices to extract a single computation for examination and test. The tool, available through the National Institute of Standards and Technology[6], can currently be used to evaluate software written in ANSI C a [...] ...|$|R
40|$|Doctor of PhilosophyDepartment of Computing and Information SciencesEugene VassermanChecking <b>software</b> <b>integrity</b> is a {{fundamental}} problem of system security. Many approaches have been proposed trying to enforce that a device runs the original code. Software-based methods such as hypervisors, separation kernels, and control flow integrity checking often rely on processors to provide some form of separation such as operation modes and memory protection. Hardware-based methods such as remote attestation, secure boot, and watchdog coprocessors rely on trusted hardware to execute attestation code such as verifying memory content and examining signatures appearing on buses. However, many embedded systems do not possess such sophisticated capabilities due to prohibitive hardware costs, unacceptably high power consumption, or the inability to update fielded components. Further, security assumption may become invalid as time goes by. For Systems-on-Chip (SoCs), in particular, internal activities cannot be observed directly, while in non-SoCs, sniffing bus traffic between constituent components may suffice for integrity checking. A promising approach to check <b>software</b> <b>integrity</b> for resource-constrained SoCs is through side-channels. Side-channels have been used mostly for attacks, such as eavesdropping from vibration of glass or plant leaves, fingerprinting machines from traffic patterns, or extracting secret key materials of cryptographic routines using power consumption measurements. In this work, side-channels are used to enhance rather than undercut security. First, we study {{the relationships between the}} internal states of a target device and side-channel information. We use the uncovered relationships to monitor the internal state of a running device and determine whether the internal state is an expected one. An unexpected state may be a sign of incorrect execution or malicious activity. To further explore the possibilities inherent in side-channel-based <b>software</b> <b>integrity</b> checking, we investigate various hardware platforms, representative of different degrees of knowledge of the hardware from the side-channel profiling point of view. In other words, side-channel information is extracted by black-, grey-, and white-box analysis. Each one involves unique challenges requiring different techniques to successfully derive “side-channel profiles”. We can use these profiles to detect unexpected states with extremely high probability, even when an adversary knows that their code may be subject to side-channel analysis, i. e., the methodology is robust to side-channel-aware adversaries. The research includes: (1) Constructing systematic approaches for black- and grey-box profiling of side channels (and comparing them to white-box analysis); (2) Designing custom measurement instrumentation; and (3) Developing techniques for monitoring and enforcing <b>software</b> <b>integrity</b> utilizing side-channel profiles. We introduce the term “side-channel programming” to refer to techniques we design in which developers explicitly utilize side-channel characteristics of existing hardware to optimize run-time <b>software</b> <b>integrity</b> checking, creating executable code which is more conducive to side-channel-based monitoring. Compared with other <b>software</b> <b>integrity</b> checking techniques, our approach has numerous benefits. Among them are that the measurement process is non-invasive, non-interruptive, and backward-compatible in that it does not require any hardware modification, meaning our approach works with processors that do not include security features. Our method can even be used to augment existing protection mechanism, as it works even when all security mechanisms internal to the device fail...|$|E
40|$|SDN/NFV {{techniques}} are growing in popularity. They are powerful and flexible but less secure because they exploit specific software modules running at the nodes {{of a highly}} distributed infrastructure. Due to errors or attacks, the node can be easily compromised to alter its behaviour. In order to tackle this issue, we exploit remote attestation, a well-known technique to assess the <b>software</b> <b>integrity</b> of a node. Unfortunately, it only works well with physical platforms but not so well in virtualized environments. This paper presents our insights to adopt remote attestation in SDN/NFV environments. We show the possible approaches to attest the <b>software</b> <b>integrity</b> inside virtualised instances in practice and show their respective performance results and limitations. Further we present a SDN verifier to attest the OpenFlow rules loaded in the NFV nodes and the improvements to push the performance of remote attestation to its limit. In the end, {{we talk about the}} recent efforts in standardising remote attestation in NFV...|$|E
40|$|This {{document}} contains "zeroth draft " {{text from}} Core Requirements and Testing (CRT) {{for the following}} parts of the next iteration of the VVSG: • Introductory text, including introduction to new standards architecture (Section 2. 1. 1) • Requirements on casting (Section 4. 4. 2) counting and reporting (Section 4. 4. 3) • General <b>software</b> <b>integrity</b> (not security [...] Section 4. 3. 1. 1. 1) and workmanshi...|$|E
50|$|Operations Program Integration: $350 {{million was}} spent on {{maintaining}} and sustaining U.S. flight and ground hardware and <b>software</b> to ensure <b>integrity</b> of the ISS design and the continuous, safe operability.|$|R
40|$|Because {{there are}} {{different}} types of software (e. g., language, application, target environment, etc.), different software certification methodologies are needed. Software process improvement schemes have not taken this approach and have therefore suffered in widespread adoption as a result. Their "one approach fits all" perspective {{is one reason why}} we are now seeing more customized process improvement schemes being created (e. g., CMM-SSE and the Common Criteria are recent "newcomers" that address developing software with security requirements) and even the call to certify software professionals. This paper presents a framework for customizing certification methodologies ac-cording to: (1) the specific needs of the organization requesting assurances about the <b>software's</b> <b>integrity,</b> and (2) the pecularities of that type of software. Each methodology must mirror the nuances of the type of software it was designed for. For example, certifying that a desktop plug-in will behave appropriately requires a different set of assessment technologies than the set of technologies needed to certify that an aircraft control system will behave appropriately. The goal of creating a certification frame-work is to provide a more systematic way to create and compare software certification methodologies which today does not exist. And from there, {{we will be able to}} offer limited software warranties...|$|R
40|$|A {{strategic}} surety roadmap {{for high}} consequence software systems developed under the High <b>Integrity</b> <b>Software</b> (HIS) Program at Sandia National Laboratories is presented. Selected research tracks are identified and described detailing current technology and outlining advancements {{to be pursued}} over the coming decade to reach HIS goals...|$|R
40|$|This paper {{introduces}} a metric {{to measure the}} degree to which two computer programs are similar for plagiarism detection. This similarity metric is based on Kolmogorov complexity [8] and measures the amount of shared information between two programs. The measure is universal hence in theory not cheatable. Although the metric is not computable, we have designed and implemented a system SID (<b>Software</b> <b>Integrity</b> Diagnosis system) that approximates this metric...|$|E
40|$|The {{importance}} of Information Assurance (IA) in military operations cannot be overstated. It is a {{sine qua non}} that achieving IA requires the effort of all personnel in the organization; just a single untrained end-user is needed to defeat many well thought-out and well-executed security strategies This thesis demonstrated that CyberCIEGE, with its rich elements and tools, {{can be used to}} create game scenarios, mimicking real life IA issues, for conveying security lessons to a wide audience of trainees. It provides an excellent alternative to the traditional methods of security education which so often fail in driving home the intended lessons. A military-based CyberCIEGE scenario definition file (SDF) was developed to illustrate and train players on the {{importance of}} ensuring hardware and <b>software</b> <b>integrity</b> in operational-critical systems. The focus of the research was on the protection of sensitive information systems through the maintenance of their <b>software</b> <b>integrity</b> and the application of an airgapped network architecture. The test cases developed in this thesis research also contributed to the improvement of the CyberCIEGE game engine...|$|E
40|$|The {{maintenance}} of a distributed software system in a production environment involves: (1) maintaining <b>software</b> <b>integrity,</b> (2) maintaining and database integrity, (3) adding new features, and (4) adding new systems. These issues {{will be discussed in}} general: what they are and how they are handled. This paper will present our experience with a distributed resource management system that accounts for resources consumed, in real-time, on a network of heterogenous computers. The simulated environments to maintain this system will be presented relate to the four maintenance areas...|$|E
50|$|SPARK is a {{formally}} defined {{computer programming}} language {{based on the}} Ada programming language, intended {{for the development of}} high <b>integrity</b> <b>software</b> used in systems where predictable and highly reliable operation is essential. It facilitates the development of applications that demand safety, security, or business integrity.|$|R
50|$|Hall and his {{business}} partner, Wayne Fowkes sold Wyse Leasing plc to <b>Integrity</b> <b>Software</b> Inc, a NASDAQ quoted IT company, in 1998. He joined {{the board of the}} company, which in June 2000 had a stock market valuation of $150m. He later bought the company back in 2000.|$|R
40|$|Using {{automated}} reasoning techniques, we {{tackle the}} niche activity of proving that a program is free from run-time exceptions. Such a property is particularly valuable in high <b>integrity</b> <b>software,</b> e. g. safety or security critical applications. The context for {{our work is}} the SPARK Approach {{for the development of}} high <b>integrity</b> <b>software.</b> The SPARK Approach provides a significant degree of automation in proving exception freedom. However, where this automation fails, the programmer is burdened with the task of interactively constructing a proof and possibly also having to supply auxiliary program annotations. We minimise this burden by increasing the automation, via an integration of proof planning and a program analysis oracle. We advocate a “co-operative” integration, where proof-failure analysis directly constrains the search for auxiliary program annotations. The approach has been successfully tested on industrial data...|$|R
