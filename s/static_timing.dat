467|26|Public
25|$|Synopsys, Inc., an American company, is {{the leading}} company by sales in the Electronic Design Automation industry. Synopsys' first and best-known product is Design Compiler, a logic-synthesis tool. Synopsys offers {{a wide range of}} other {{products}} used in the design of an application-specific integrated circuit. Products include logic synthesis, behavioral synthesis, place and route, <b>static</b> <b>timing</b> analysis, formal verification, hardware description language (SystemC, SystemVerilog/Verilog, VHDL) simulators as well as transistor-level circuit simulation. The simulators include development and debugging environments which assist {{in the design of the}} logic for chips and computer systems.|$|E
50|$|Tekton: <b>Static</b> <b>Timing</b> Analysis.|$|E
5000|$|<b>Static</b> <b>timing</b> {{analysis}} (STA) - Slowly being {{superseded by}} statistical <b>static</b> <b>timing</b> analysis (SSTA), STA {{is used to}} verify if all the logic data paths in the design can work at the intended clock frequency, especially under the effects of on-chip variation. STA is run {{as a replacement for}} SPICE, because SPICE simulation's runtime makes it infeasible for full-chip analysis modern designs.|$|E
40|$|AbsInt is {{the leading}} {{provider}} of commercial tools for <b>static</b> code-level <b>timing</b> analysis. Its aiT Worst-Case Execution Time Analyzer computes tight bounds for the WCET of tasks in embedded real-time systems. However, the results only incorporate the core-local latencies, i. e. interference delays due to other cores in a multicore system are ignored. This paper presents {{some of the work}} we have done towards multicore WCET analysis. We look into both <b>static</b> and measurement-based <b>timing</b> analysis for COTS multicore systems...|$|R
50|$|A tool-chain, xTIMEcomposer, {{come with}} LLVM-based compilers for C, C++ and xC, cycle-accurate simulator, {{symbolic}} debugger, runtime instrumentation and trace libraries (xSCOPE) and a <b>static</b> code <b>timing</b> analyzer (XTA). All {{of the components}} {{are aware of the}} real-time multicore nature of the programs, giving a fully integrated approach.|$|R
40|$|A 15 kWe spark {{ignition}} producer gas engine (SIPGE) {{has been developed}} by machine converting a 17 kWe direct injection diesel engine. The design modifications carried out are combustion chamber geometry, reduction of compression ratio from 17 to 11. 5, incorporation of ignition system and mounting of an air-gas mixer. The <b>static</b> ignition <b>timing</b> provided is 35 degrees btdc. The engine efficiency is 28 - 32 %. Wood based Producer gas of calorific value 6 to 7 MJ/Nm(3) is used as engine fuel. This paper reports {{the development of a}} simulation model for estimating the in-cylinder process parameters of the SIPGE and an attempt made for its validation...|$|R
50|$|These {{tasks are}} {{properly}} carried out during logic simulation {{or with a}} <b>static</b> <b>timing</b> analysis tool.|$|E
5000|$|The Age of Invention: During the {{invention}} era, routing, placement, <b>static</b> <b>timing</b> analysis and logic synthesis were invented.|$|E
5000|$|<b>Static</b> <b>timing</b> {{analysis}} - Synopsys PrimeTime, Magma Quartz SSTA, Cadence ETS, Cadence Tempus Timing Signoff Solution, Extreme-DA GoldTime ...|$|E
40|$|This paper {{presents}} {{a novel approach}} for retargetable <b>static</b> software <b>timing</b> analysis. Specifically, we target the problem of determining bounds on the execution time of a program on modern processors, and solve this problem in a retargetable software development environment. Another contribution {{of this paper is}} the modeling of important features in contemporary architectures, such as branch prediction, predication, and instruction pre-fetching, which have great impact on system performance, and have been rarely handled thus far. These ideas allow to build a timing analysis tool that is efficient, accurate, modular and retargetable. We present preliminary results for sample embedded programs to demonstrate the applicability of the proposed approach...|$|R
40|$|A {{study is}} {{conducted}} {{to investigate the}} fuel injection pressure effects on the performance and exhaust emissions of a naturally-aspirated, four-stroke, divided chamber diesel engine having a swirl-combustion chamber. The influence of injection pressure on fuel consumption, exhaust gas temperature, exhaust smokiness and exhaust gas emissions (nitrogen oxides and hydrocarbons) is examined, following a detailed experimental investigation. It is shown {{that there is a}} significant variation of the above parameters with injection pressure, while keeping constant the <b>static</b> injection <b>timing,</b> engine speed and load. Theoretical aspects of diesel spray formation (atomization, evaporation and mixing) and combustion are used to explain the observed engine behaviour and provide insight into the mechanisms influencing the engine characteristics...|$|R
40|$|Worst-case {{execution}} times (WCET) {{of tasks}} {{are essential for}} safe scheduling in hard real-time systems. However, contemporary processors exceed the capabilities of <b>static</b> worst-case <b>timing</b> analysis tools. The Virtual Simple Architecture (VISA) framework shifts the burden of bounding the WCET of tasks, in part, to hardware. A VISA is the pipeline timing specification of a hypothetical simple processor. WCET is derived for a task assuming the VISA. Nonetheless, at run-time, the task is executed speculatively on an unsafe complex processor, and its progress is continuously gauged. If continued safe progress {{appears to be in}} jeopardy, the complex processor is reconfigured to a simple mode of operation that directly implements the VISA, thereby explicitly bounding the task's overall execution time by the WCET...|$|R
50|$|While event {{simulation}} {{can provide}} some feedback regarding signal timing, {{it is not}} a replacement for <b>static</b> <b>timing</b> analysis.|$|E
50|$|Static Power Estimation {{does not}} use the input vectors, but may use the input statistics. Analogous to <b>static</b> <b>timing</b> analysis.|$|E
50|$|A <b>static</b> <b>timing</b> {{analysis}} engine {{will first}} calculate the delay {{of the individual}} cells and string them together to do further analysis.|$|E
40|$|To {{minimize}} {{energy consumption}} of a digital circuit, logic can be operated at sub- or near-threshold voltage. Operation at this region is challenging due to device and environment variations, and resulting performance {{may not be}} adequate to all applications. This article presents two variants of a 32 -bit RISC CPU targeted for near-threshold voltage. Both CPUs are placed on the same die and manufactured in 28 nm CMOS process. They employ timing-error prevention with clock stretching to enable operation with minimal safety margins while maximizing performance and energy efficiency at a given operating point. Measurements show minimum energy of 3. 15 pJ/cyc at 400 mV, which corresponds to 39 % energy saving compared to operation based on <b>static</b> signoff <b>timing.</b> Peer reviewe...|$|R
40|$|The aim of {{this work}} is to provide an elegant and {{accurate}} <b>static</b> execution <b>timing</b> model for 32 -bit microprocessor instruction sets, covering also inter [...] instruction effects. Such effects depend on the processor state and the pipeline behavior, and {{are related to the}} dynamic execution of assembly code. The paper proposes a mathematical model of the delays deriving from instruction dependencies and gives a statistical characterization of such timing overheads. The model has been validated on a commercial architecture, the Intel 486, by means of timing analysis of a set of benchmarks, obtaining an error within 5 %. This model can be seamlessly integrated with a static energy consumption model in order to obtain precise software power and energy estimations...|$|R
40|$|A latch-based timing {{analyzer}} {{is an essential}} tool for developing high-speed pipeline designs. As process variations increasingly influence the timing characteristics of DSM designs, a {{timing analyzer}} capable of handling process-induced timing variations for latchbased pipeline designs becomes in demand. In this work, we present a <b>static</b> statistical <b>timing</b> analyzer, STAP, for latch-based pipeline designs. Our analyzer propagates statistical worst-case delays as well as critical probabilities across the pipeline stages. We present an efficient method to handle correlations due to reconvergent fanouts. We also demonstrate the impact of not including the analysis of reconvergent fanouts in latch-based pipeline designs. Comparing to a Monte-Carlo based timing analyzer, our experiments show that STAP can accurately evaluate the critical probability that a design violates the timing constraints under a given statistical timing model. The runtime comparison further demonstrates the efficiency of our STAP. 1...|$|R
50|$|A timing {{requirement}} {{needs to be}} translated into a <b>static</b> <b>timing</b> constraint for an EDA tool {{to be able to}} handle it.|$|E
5000|$|<b>Static</b> <b>timing</b> analysis: Analysis of {{the timing}} of a circuit in an input-independent manner, hence finding a worst case over all {{possible}} inputs.|$|E
50|$|<b>Static</b> <b>timing</b> {{analysis}} (STA) is {{a simulation}} method of computing the expected timing of a digital circuit without requiring a simulation {{of the full}} circuit.|$|E
40|$|This paper {{integrates}} {{analysis of}} probabilistic cache related pre-emption delays (pCRPD) and <b>static</b> probabilistic <b>timing</b> analysis (SPTA) for multipath programs {{running on a}} hardware platform that uses an evict-on-miss random cache replacement policy. The SPTA computes an upper bound on the probabilistic worst-case execution time (pWCET) of the program, which is an exceedance function giving {{the probability that the}} execution time of the program will exceed any given value on any particular run. The pCRPD analysis determines the maximum effect of a pre-emption on the pWCET. The integration between SPTA and pCRPD updates the pWCET to account for the effects of one or more pre-emptions at any arbitrary points in the program. This integration is a necessary step enabling effective schedulability analysis for probabilistic hard real-time systems that use pre-emptive or co-operative scheduling. The analysis is illustrated via a number of benchmark programs...|$|R
40|$|The {{objective}} of this work is to optimize the control parameters of the direct injection (DI) single cylinder diesel engine with respect to NOx (Oxides of Nitrogen) and fuel emissions through experimental investigations and Taguchi method. A single cylinder 5. 2 kW diesel engine was selected for this experiment. Five parameters such as clearance volume, valve opening pressure, nozzle-hole diameter, <b>static</b> injection <b>timing</b> and load torque were varied at four levels and the responses such as NOx emissions and fuel economy were recorded. The optimum values of the response variables could be predicted using S/N ratio and optimum combination of control parameters were specified. Results of confirmation tests showed good agreement with predicted results. Thus {{the relationship between the}} diesel engine operating parameters with NOx and b. s. f. c (brake specific fuel consumption) could be understood using Taguchi method of experimental design...|$|R
40|$|International audienceThis paper {{integrates}} {{analysis of}} probabilistic cache related pre-emption delays (pCRPD) and <b>static</b> probabilistic <b>timing</b> analysis (SPTA) for multipath programs {{running on a}} hardware platform that uses an evict-on-miss random cache replacement policy. The SPTA computes an upper bound on the probabilistic worst-case execution time (pWCET) of the program, which is an exceedance function giving {{the probability that the}} execution time of the program will exceed any given value on any particular run. The pCRPD analysis determines the maximum effect of a pre-emption on the pWCET. The integration between SPTA and pCRPD updates the pWCET to account for the effects of one or more pre-emptions at any arbitrary points in the program. This integration is a necessary step enabling effective schedulability analysis for probabilistic hard real-time systems that use pre-emptive or co-operative scheduling. The analysis is illustrated via a number of benchmark programs...|$|R
50|$|Statistical <b>static</b> <b>timing</b> {{analysis}} (SSTA) is {{a procedure}} that is becoming increasingly necessary to handle the complexities of process and environmental variations in integrated circuits.|$|E
50|$|Conventional <b>static</b> <b>timing</b> {{analysis}} (STA) {{has been}} a stock analysis algorithm {{for the design of}} digital circuits over the last 30 years. However, in recent years the increased variation in semiconductor devices and interconnect has introduced a number of issues that cannot be handled by traditional (deterministic) STA. This has led to considerable research into statistical <b>static</b> <b>timing</b> analysis, which replaces the normal deterministic timing of gates and interconnects with probability distributions, and gives a distribution of possible circuit outcomes rather than a single outcome.|$|E
5000|$|One of the {{earliest}} descriptions of a <b>static</b> <b>timing</b> approach {{was based on the}} Program Evaluation and Review Technique (PERT), in 1966. [...] More modern versions and algorithms appeared in the early 1980s.|$|E
40|$|The present work {{deals with}} the {{investigation}} of the influence of fuel injector opening pressure on the dynamic injection timing in diesel engines. The results of the analysis are applied for an IDI (Indirect Injection) diesel engine for which experiments were conducted in the laboratory of the authors. It is revealed that the value of injector opening pressure has a considerable effect on the injection delay, which depends on the volume of the connecting pipeline and the pump cam design. The experimental results are combined with a simulation model of the entire engine in order to derive the actual injection timing (dynamic) and thus the injection delay, since a time reference for the measured fuel pressure diagram does not exist. When this is accomplished, the actual injection timing of the engine can be determined based on the <b>static</b> injection <b>timing.</b> Also one can then distinguish the effect of nozzle opening pressure on engine behaviour, since the effect of the varied timing has been eliminated...|$|R
40|$|Abstract Timing verication {{of digital}} syn chronous designs {{is a complex}} process that is tradi tionally carried out deep in the design cycle at the gate level A method {{embodied}} in a C based de sign system is presented that allows modeling and verication of clock regions {{at a much higher}} level By combining eventdriven clockcycle true and be havioral simulation we are able to perform <b>static</b> and dynamic <b>timing</b> analysis of the clock regions In addi tion a signicant increase in the design cycle speed is obtained Lets rst consider a small example	 that illustrates the targeted applications In a cable communication system there is a need for...|$|R
40|$|In {{real-time}} systems, {{safe operation}} requires that tasks complete before their deadlines. <b>Static</b> worst-case <b>timing</b> analysis {{is used to}} derive an upper bound {{on the number of}} cycles for a task, and this is the basis for a safe frequency that ensures timely completion in any scenario. Unfortunately, it is difficult to tightly bound the number of cycles for a complex task executing on a complex pipeline, and so the safe frequency tends to be over-inflated. Power efficiency is sacrificed for safety. The situation only worsens as advanced microarchitectural techniques are deployed in embedded systems. High-performance microarchitectural techniques such as caching, branch prediction, and pipelining decrease typical execution times. At the same time, it is difficult to tightly bound the worst-case execution time of complex tasks on highly dynamic substrates. As a result, the gap between worst-case execution time and typical execution time is expected to increase. This thesis explores frequency speculation, a technique for reconciling the power/safety trade-off. Tight but unsafe bounds (derived from past task executions) are the basis for a low speculative frequency. The task is divided into multiple smaller subtask...|$|R
50|$|To {{make these}} {{circuits}} work correctly, {{a great deal}} of care is needed {{in the design of the}} Clock Distribution Networks. <b>Static</b> <b>timing</b> analysis is often used to determine the maximum safe operating speed.|$|E
5000|$|Synchronous logic {{elements}} such as flip-flops have <b>static</b> <b>timing</b> criteria that must be satisfied {{in order for them}} to work correctly. In a system-synchronous clock topology where a skew-aligned clock is fed to all devices, the criteria is ...|$|E
5000|$|Standard Delay Format (SDF) is an IEEE {{standard}} for the representation and interpretation of timing data for use at any stage of an electronic design process. It finds wide applicability in design flows, and forms an efficient bridge between Dynamic timing verification and <b>Static</b> <b>timing</b> analysis ...|$|E
40|$|An {{experimental}} study is conducted {{to evaluate the}} use of JP- 8 aviation fuel as a full substitute for diesel fuel in a Ricardo E- 6 high-speed naturally-aspirated four-stroke experimental engine having a swirl combustion chamber. The study covers a wide range of engine load and speed operating conditions, comprising measurements of cylinder pressure diagrams, high-pressure fuel pipe pressures, exhaust gas temperatures, fuel consumptions, exhaust smokiness and exhaust gas emissions (nitrogen oxides, unburned hydrocarbons and carbon monoxide). Processing of the measurements provides important performance parameters such as maximum combustion pressure, dynamic injection timing, ignition delay, combustion irregularity and knocking tendency. The differences in the measured performance and exhaust emission parameters are determined for engine operation with JP- 8 fuel, against baseline engine operation using diesel fuel. The study shows that the exhaust emission levels are not much different for operation with the two fuels. On the contrary, operation with JP- 8 fuel increases combustion pressures, combustion intensity and irregularity. This is caused mainly by high pressure fluctuations present in the fuel injection system due to the different physical properties of JP- 8 fuel (compared to diesel fuel), which totally change the injection characteristics. Retardation of the <b>static</b> injection <b>timing</b> is one means of improving this situation, while using the same fuel injection equipment. (C) 1997 by John Wiley & Sons, Ltd...|$|R
40|$|An {{ignition}} delay {{is a very}} complex process which depends on a great number of parameters. In practice, definition of the {{ignition delay}} is based on the use of correlation expressions. However, the correlation expressions have very often limited application field. This paper presents a new correlation which has been developed during the research project on the direct injection M-type diesel engine using both the diesel and biodiesel fuel, as well as different values of a <b>static</b> injection <b>timing.</b> A dynamic start of injection, as well as the ignition delay, is defined in two ways. The first approach is based on measurement of a needle lift, while the second is based on measurement of a fuel pressure before the injector. The latter approach requires calculation of pressure signals delay through the fuel injection system and the variation of a static advance injection angle changing. The start of a combustion {{and the end of the}} ignition delay is defined on the basis of measurements of an in-cylinder pressure and its point of separation from a skip-fire pressure trace. The developed correlation gives better prediction of the ignition delay definition for the M-type direct injection diesel engine in the case of diesel and biodiesel fuel use when compared with the classic expression by the other authors available in the literature...|$|R
40|$|Worst-case {{execution}} time (WCET) analysis {{is one of}} the major tasks in timing validation of hard real-time sys-tems. In complex systems with real-time operating systems (RTOS), the timing properties of the system are decided by both the applications and the RTOS. Traditionally, WCET analysis mainly deals with application programs, while it is crucial to know whether the RTOS also behaves in a timely predictable manner. In this paper, we present a case study where static analysis is used to predict the WCET of the system calls of the µC/OS-II real-time kernel. To our knowl-edge, this paper is the first to present quantitative results on the real-time performance of µC/OS-II. The precision of ap-plying existing WCET analysis techniques on RTOS code is evaluated, and the practical difficulties in using <b>static</b> meth-ods in <b>timing</b> analysis of RTOS are also reported. 1...|$|R
