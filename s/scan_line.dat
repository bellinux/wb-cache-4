473|1495|Public
25|$|Analytical methods where a Bézier is intersected {{with each}} <b>scan</b> <b>line</b> involve finding roots of cubic polynomials (for cubic Béziers) {{and dealing with}} {{multiple}} roots, so they are not often used in practice.|$|E
25|$|If the {{horizontal}} sync pulse during the vertical synchronization {{starts in the}} middle of horizontal <b>scan</b> <b>line.</b> Then first interlace frame will be sent, otherwise if vertical synchronization let the full video line complete the second interlace frame is sent.|$|E
25|$|Keyboard is a {{functionally}} {{separate unit}} {{which could be}} connected by non-multiplexed and multiplexed interfaces. Multiplexed keyboard units feature additional data direction line, allowing sending <b>scan</b> <b>line</b> number to the keyboard using same data lines used for return scan code, decreasing overall number of wires between keyboard and machine. Non-multiplexed interface is usually used for internal keyboards (and some external keyboards, like Panasonic CF-3300); multiplexed interface is used for external keyboards (e.g. in Yamaha YIS805 model).|$|E
50|$|Since fine {{scrolling}} {{is based}} on <b>scan</b> <b>lines</b> not pixel height, and scrolling region movement is done simply by skipping <b>scan</b> <b>lines</b> from the first Mode <b>line</b> and adding <b>scan</b> <b>lines</b> to the last Mode line, {{it is possible to}} use different graphics Modes within the scrolling region. This merely requires additional care when determining how many <b>scan</b> <b>lines</b> can be shifted for the current first and last Mode lines in the scrolling region.|$|R
5000|$|Descenders: ANTIC Mode 3. A {{modification}} of the Standard method. The method of pixel color display is the same. Each mode line is 10 scanlines tall, though the character glyph is still 8 bytes. Characters $00hex/0dec to $5Fhex/95dec display in the top 8 <b>scan</b> <b>lines</b> with two blank <b>scan</b> <b>lines</b> added at the bottom. Characters $60hex/96dec to $7Fhex/127dec begin with two blank <b>scan</b> <b>lines</b> at the top, and then display the glyph bytes in the bottom 8 <b>scan</b> <b>lines.</b> The first two bytes in the glyph are moved to the bottom two <b>scan</b> <b>lines.</b> This allows a properly designed character set to display true descenders. The character set uses 128 characters and requires 1024 bytes of RAM.|$|R
50|$|Vertical fine {{scrolling}} {{moves the}} scrolling region {{the number of}} <b>scan</b> <b>lines</b> in a single Mode line of the scrolling region, up {{to a maximum of}} 16 <b>scan</b> <b>lines.</b> See VSCROL.|$|R
25|$|Depending on the parameter, each ANSI test is graded from 0.0 to 4.0 (F to A), {{or given}} a {{pass or fail}} mark. Each grade is {{determined}} by analyzing the scan reflectance profile (SRP), an analog graph of a single <b>scan</b> <b>line</b> across the entire symbol. The lowest of the 8 grades is the scan grade, and the overall ISO symbol grade is {{the average of the}} individual scan grades. For most applications a 2.5 (C) is the minimal acceptable symbol grade.|$|E
25|$|The AVT modes {{are mainly}} used in Japan and the United States. There {{is a full}} set of them in terms of black and white, color, and <b>scan</b> <b>line</b> counts of 128 and 256. Color bars and {{greyscale}} bars may be optionally overlaid top and/or bottom, but the full frame is available for image data unless the operator chooses otherwise. For receiving systems where timing was not aligned with the incoming image's timing, the AVT system provided for post-receive re-timing and alignment.|$|E
25|$|In {{computer}} graphics bubble sort is popular for its capability {{to detect a}} very small error (like swap of just two elements) in almost-sorted arrays and fix it with just linear complexity (2n). For example, it is used in a polygon filling algorithm, where bounding lines are sorted by their x coordinate at a specific <b>scan</b> <b>line</b> (a line parallel to the x axis) and with incrementing y their order changes (two elements are swapped) only at intersections of two lines. Bubble sort is a stable sort algorithm, like insertion sort.|$|E
5000|$|... {{decoupling}} physical <b>scan</b> <b>lines</b> {{from the}} 'logical' lines. The repeat count of physical <b>scan</b> <b>lines</b> could be 0 to 15 per line (Due to interlacing a physical scan was two pixels high), ...|$|R
50|$|During {{this time}} Theremin was {{also working on}} a {{wireless}} television with 16 <b>scan</b> <b>lines</b> in 1925, improving to 32 <b>scan</b> <b>lines</b> and then 64 using interlacing in 1926, and he demonstrated moving, if blurry, images on 7 June 1927.|$|R
5000|$|The {{number of}} blank <b>scan</b> <b>lines</b> are {{specified}} by the value of Bits 4 through Bits 6 allowing a range from 0 through 7. ANTIC adds one to this value and displays the resulting number of <b>scan</b> <b>lines.</b> Instruction Values: ...|$|R
25|$|Keyboard is {{organized}} as a matrix with maximum 11 input lines and 8 output lines, accounting for maximum 88 keys (including all control, numerical and alphanumerical keys). Each <b>scan</b> <b>line</b> is regularly queried {{to identify the}} state of the keys on the line; query speed is identified by the system interrupt frequency. Such organization allows system to sense state of each key, not exhibiting notorious problem with 8042 microcontroller-based keyboards when pressing several keys simultaneously (usually more than 3) generates wrong input characters, or renders inability to sense the press of more keys.|$|E
500|$|The {{character}} graphics {{were created}} {{with a special}} graphics machine ("Character Generator Computer Aided Design") that generated a collection of all the graphical shapes used in the game. Shapes in the collection were assigned numbers that the game's code uses to access, and are combined to form complete images on the screen in real time. The Super Mario Bros. 3 cartridge uses Nintendo's custom MMC3 (memory management controller) ASIC to enhance the NES capabilities. [...] The MMC3 chip allows for animated tiles, extra RAM for diagonal scrolling, and a <b>scan</b> <b>line</b> timer to split the screen. The game uses these functions to split the game screen into two portions, a playfield {{on the top and}} a status bar on the bottom, allowing the top portion to scroll as the character navigates the stage while the bottom portion remains static to display text and other information.|$|E
2500|$|Some of the Korean forum {{members who}} made Zemmix Neo {{created a new}} version of MSX called Mini IQ3000 Cutie, which has similar {{features}} to the IQ-2000 (MSX2. Made in Korea. Daewoo Electronics [...] ) It is based on 1ChipMSX but has some special features like 'Scan Line Generator' and 'Multi Language Support'. The <b>scan</b> <b>line</b> generator generates scan lines to show the MSX screen with better quality. It supports 2 languages at the same time. Normally it shows Korean font and working as Korean version of MSX but when pressing the 'del' key while booting, it changes to Japanese mode. Even though the default mode is Korean, the default font allocation table is Japanese, as it shows Japanese characters when executing Japanese version software.|$|E
5000|$|In {{facsimile}} systems, {{the cooperation}} {{factor is the}} product of the total image scanning length and the scanning density, given by CF = L σ, where L is the <b>scanning</b> <b>line</b> length and σ is the <b>scanning</b> <b>line</b> density, both in compatible units.|$|R
5000|$|The cathodes are {{connected}} to <b>scan</b> <b>lines</b> through driver transistors.|$|R
5000|$|To reduce flicker, analog CRT TVs write only odd-numbered <b>scan</b> <b>lines</b> on {{the first}} {{vertical}} scan; then, the even-numbered lines follow, placed ("interlaced") between the odd-numbered lines. This is called interlaced scanning. (In this case, positioning the even-numbered lines does require precise position control; in old analog TVs, trimming the Vertical Hold adjustment made <b>scan</b> <b>lines</b> space properly. If slightly misadjusted, the <b>scan</b> <b>lines</b> would appear in pairs, with spaces between.) Modern high-definition TV displays use data formats like progressive scan in computer monitors (such as [...] "1080p", 1080 lines, progressive), or interlaced (such as [...] "1080i").|$|R
2500|$|By the 1920s, when {{amplification}} made television practical, Scottish inventor John Logie Baird {{employed the}} Nipkow disk in his prototype video systems. He created his prototype {{in a little}} village called Santa Cruz {{on the island of}} Trinidad where he was recovering from an illness. He had also started work on the first color television. On March 25, 1925, Baird gave the first public demonstration of televised silhouette images in motion, at Selfridge's Department Store in London. Since human faces had inadequate contrast to show up on his primitive system, he televised a talking, moving ventriloquist's dummy named [...] "Stooky Bill", whose painted face had higher contrast. By January 26, 1926 he demonstrated the transmission of an image of a face in motion by radio. This is widely regarded as the first television demonstration in history. The subject was Baird's business partner Oliver Hutchinson. Baird's system used the Nipkow disk for both scanning the image and displaying it. A bright light shining through a spinning Nipkow disk set with lenses projected a bright spot of light that swept across the subject. A selenium photoelectric tube detected the light reflected from the subject and converted it into a proportional electrical signal. This was transmitted by AM radio waves to a receiver unit, where the video signal was applied to a neon light behind a second Nipkow disk rotating synchronized with the first. The brightness of the neon lamp was varied in proportion to the brightness of each spot on the image. As each hole in the disk passed by, one <b>scan</b> <b>line</b> of the image was reproduced. Baird's disk had 30 holes, producing an image with only 30 scan lines, just enough to recognize a human face.|$|E
5000|$|Vertical Fine Scrolling allows single <b>scan</b> <b>line</b> {{movement}} of the scrolling region for Text and Map modes which are greater than one <b>scan</b> <b>line</b> tall. Vertical Fine Scrolling for Map modes only one <b>scan</b> <b>line</b> tall is logically not practical. The effect of vertical [...] "fine" [...] scrolling for single <b>scan</b> <b>line</b> Map modes can be performed using the easier coarse scrolling method.|$|E
50|$|When enabled, Player/Missile DMA {{occurs on}} every <b>scan</b> <b>line</b> in the visible display—from <b>scan</b> <b>line</b> 8 to 247. Therefore, the Player/Missile {{data in the}} memory map (see ANTIC's PMBASE) above and below those <b>scan</b> <b>line</b> counts is unused and undisplayed.|$|E
5000|$|Vertical: 400 or 391 (note not 392) <b>scan</b> <b>lines</b> {{per inch}} ("Superfine") ...|$|R
50|$|The station {{broadcast}} with 45 horizontal <b>scanning</b> <b>lines,</b> and 15 frames per second.|$|R
5000|$|The scan section has a scan {{counter and}} four <b>scan</b> <b>lines,</b> SL0 to SL3.|$|R
5000|$|In the NTSC {{television}} standard, {{horizontal blanking}} occupies [...] (17.2%) {{out of every}} [...] <b>scan</b> <b>line.</b> In PAL, it occupies [...] (18.8%) out of every [...] <b>scan</b> <b>line.</b>|$|E
5000|$|... $00 - Double line resolution. ANTIC updates its DMA fetch address {{every other}} <b>scan</b> <b>line</b> and updates the CTIA/GTIA Player/Missile Graphics pattern {{registers}} every <b>scan</b> <b>line,</b> {{so that each}} Player/Missile byte pattern is two scan lines tall. When Double line resolution is enabled CTIA/GTIA register VDELAY ($D01Chex/53276dec) works by masking updates on even scan lines which results in shifting the bit pattern of individual Players and Missiles down one <b>scan</b> <b>line.</b>|$|E
5000|$|Bit 4 (value $10hex/16dec) of the DMACTL {{register}} {{controls the}} frequency of new data retrieval. ANTIC retrieves data and updates CTIA/GTIA every <b>scan</b> <b>line.</b> The DMACTL resolution settings affect how often ANTIC increments its internal DMA pointer for fetching new data. Single Line resolution Player/Missile graphics increments the DMA address every <b>scan</b> <b>line,</b> and Double Line resolution increments the DMA address with every even <b>scan</b> <b>line.</b> The DMACTL bit values for Player/Missile resolution: ...|$|E
5000|$|... post-equalizing pulses (5 {{to start}} <b>scanning</b> odd <b>lines,</b> 4 to start <b>scanning</b> even <b>lines)</b> ...|$|R
5000|$|... pre-equalizing pulses (6 {{to start}} <b>scanning</b> odd <b>lines,</b> 5 to start <b>scanning</b> even <b>lines)</b> ...|$|R
50|$|Mode 6, 7, A, B, or C: then {{corruption}} resolves itself {{within two}} <b>scan</b> <b>lines.</b>|$|R
50|$|The main {{gameplay}} of Cytus {{features the}} Active <b>Scan</b> <b>Line,</b> a black line that {{move up and}} down across the screen. The player taps circular objects, referred to as Notes, as the Active <b>Scan</b> <b>Line</b> passes over them, following the music.|$|E
50|$|The Vertical scroll value {{indicates}} the <b>scan</b> <b>line</b> number {{to begin the}} display in the first Mode line and is also used as the <b>scan</b> <b>line</b> number to end the display in the last Mode line (the line without the VS bit set).|$|E
50|$|If a {{graphics}} {{object is}} being displayed while the DLI changes its value {{the results may}} be inconsistent. The most common example is changing the background color. Since the DLI begins executing while the electron beam is in a visible portion of the screen, {{the transition from the}} previous background color to the new color written by the DLI will be visible somewhere on the current <b>scan</b> <b>line.</b> (The exact location varies based on DMA requirements for the display mode and Player/Missile graphics.) To produce a clean transition from <b>scan</b> <b>line</b> to <b>scan</b> <b>line</b> the code should first write to WSYNC which halts the DLI execution {{until the end of the}} <b>scan</b> <b>line,</b> and then write to the desired registers.|$|E
5000|$|In decoded scan mode, {{the output}} of <b>scan</b> <b>lines</b> will be similar to a 2-to-4 decoder.|$|R
5000|$|Number of sprites: 128 (maximum 32 per <b>scanning</b> <b>line)</b> each of size 8x8 to 128x128 pixels ...|$|R
50|$|Mode 2, 3, 4, 5, D, E, or F: then {{corruption}} resolves itself {{within three}} <b>scan</b> <b>lines.</b>|$|R
