16|135|Public
5000|$|To {{mitigate}} the described problem, many recommend, as legally allowed in very limited authorized airspace, that planes fly {{one or two}} miles offset {{from the center of}} the airway (to the right side) thus eliminating the problem only in the head-on collision scenario. The International Civil Aviation Organization's (ICAO) [...] "Procedures for Air Navigation--Air Traffic Management Manual," [...] authorizes lateral offset only in oceanic and remote airspace worldwide. [...] However, this workaround for the particular case of a head-on collision threat on a common assigned airway fails to address the navigation paradox in general, and it fails to specifically address the inherent system <b>safety</b> <b>fault</b> intolerance inadvertently designed into international air traffic safety regulations.4 [...] To be specific, in the cases of intersecting flight paths where either aircraft is not on an airway (for example, flying under a [...] "direct" [...] clearance, or a temporary diversion clearance for weather threats), or where intersecting aircraft flights are on deliberately intersecting airways, these more general threats receive no protection from flying one or two miles to the right of the center of the airway. Intersecting flight paths must still intersect somewhere. As with the midair collision over Germany, an offset to the right of an airway would have simply changed the impact point by a mile or two away from where the intersection actually did occur. Of the 342 deaths since 1997 so far encouraged by the lack of a linear cruising altitude rule (like ACCAR) improvement to the fault intolerance of the hemispherical cruising altitude rules, only the head-on collision over the Amazon could have been prevented if either pilot had been flying an offset to the right of the airway centerline. In contrast, ACCAR systematically separates conflicting traffic in all airspace at all altitudes on any heading, whether over the middle of the ocean or over high-density multinational-interface continental airspace. Nothing about Reduced Vertical Separation Minima (RVSM) system design addresses the inherent vulnerability of the air traffic system to expected faults in hardware and human performance, as experienced in the Namibian, German, Amazon and Japanese accidents.5 ...|$|E
40|$|Abstract—The paper {{presents}} a compressor anti-surge control system, {{that results in}} maximizing compressor throughput with pressure standard deviation reduction, increased safety margin between design point and surge limit line and avoiding possible machine surge. Alternative control strategies are presented. Keywords—Anti-surge, control, compressor, PID control, <b>safety,</b> <b>fault</b> tolerance, start-up, ESD...|$|E
40|$|Abstract—We {{propose a}} Byzantine Fault Tolerant {{variant of the}} Raft {{consensus}} algorithm, BFTRaft, inspired by the original Raft[1] algorithm and the Practical Byzantine Fault Tolerance algorithm[2]. BFT Raft maintains the <b>safety,</b> <b>fault</b> tolerance, and liveness properties of Raft {{in the presence of}} Byzantine faults, while also aiming towards to Raft’s goal of simplicity and understandability. We have implemented a proof-of-concept of this algorithm in the Haskell programming language. I...|$|E
50|$|Vehicles {{cited for}} <b>safety</b> <b>faults</b> by the police.|$|R
5000|$|A vehicle {{inspection}} is required before a vehicle can be registered {{for the first}} time, after a lapse in registration, if a vehicle has received certain modifications, or has been cited for <b>safety</b> <b>faults</b> (a [...] "yellow sticker") by the police. Certain commercial and public transport vehicles must be inspected annually.|$|R
50|$|The Dog & Lemon Guides website {{contains}} the only English language {{translation of the}} entire Japanese domestic car safety recalls database. This information is provided free of charge and is widely used to investigate possible <b>safety</b> <b>faults</b> on Japanese vehicles imported second-hand from Japan. This information is frequently used by buyers of grey market vehicles, who often have no other way of telling if their second-hand vehicles {{have been subject to}} unresolved recalls before export.|$|R
40|$|Covers {{important}} {{concepts and}} techniques in designing and operating safety-critical systems. Topics include: {{the nature of}} risk, formal accident and human error models, causes of accidents, fundamental concepts of system safety engineering, system and software hazard analysis, designing for <b>safety,</b> <b>fault</b> tolerance, safety issues {{in the design of}} human-machine interaction, verification of safety, creating a safety culture, and management of safety-critical projects. Includes a class project involving the high-level system design and analysis of a safety-critical system...|$|E
40|$|This course covers {{important}} {{concepts and}} techniques in designing and operating safety-critical systems. Topics covered include: {{the nature of}} risk, formal accident and human error models, causes of accidents, fundamental concepts of system safety engineering, system and software hazard analysis, designing for <b>safety,</b> <b>fault</b> tolerance, safety issues {{in the design of}} human-machine interaction, verification of safety, creating a safety culture, and management of safety-critical projects. It also includes a class project involving the high-level system design and analysis of a safety-critical system...|$|E
40|$|The {{objective}} of this task was to identify, from available literature, environmental and toxicity information on selected absorbent - refrigerant compound pairs that potentially {{could be used in}} the Battelle Absorption Heat Pump (BAHP). The study indicates that there are no life-threatening effects that might be expected from a heat pump using the candidate fluids (ammonia, and lithium bromide) and operating in a normal environment. Environmental Protection Agency regulations for hazardous waste and a report, ""Preliminary <b>Safety</b> (<b>Fault</b> Tree) Analysis of Dual Cycle Absorption Heat Pump,"" are included. "...|$|E
40|$|Abstract—-Length and {{complexity}} of the software are rising day by day. So software testing is particularly difficult for development of high assurance software such as software that is produced commercial airborne system. Modified condition/Decision Condition (MC/DC) is an effective verification technique and can help to remove <b>safety</b> <b>faults.</b> This paper present new approach for test case reduction and prioritization that effectively use MC/DC criteria. In this approach we used weight concept for discarding weak test case and set priority...|$|R
5000|$|.....the most incompetent {{procurement}} of all time...might as {{well have}} bought eight turkeys. Parliamentary public accounts committee The MoD has been criticised for an ongoing fiasco, having spent £240m on eight Chinook HC3 helicopters which only started to enter service in 2010, years after they were ordered in 1995 and delivered in 2001. A National Audit Office report reveals that the helicopters have been stored in air conditioned hangars in Britain since their 2001 [...] delivery, while troops in Afghanistan {{have been forced to}} rely on helicopters which are flying with <b>safety</b> <b>faults.</b> By the time the Chinooks are airworthy, the total cost of the project could be as much as £500m.|$|R
40|$|Pointer <b>safety</b> <b>faults</b> in device {{drivers are}} one of the leading causes of crashes in {{operating}} systems code. In principle, shape analysis tools can be used to prove the absence of this type of error. In practice, however, shape analysis is not used due to the unacceptable mixture of scalability and precision provided by existing tools. In this paper we report on a new join operation for the separation domain which aggressively abstracts information for scalability yet does not lead to false error reports. is a critical piece of a new shape analysis tool that provides an acceptable mixture of scalability and precision for industrial application. Experiments on whole Windows and Linux device drivers (firewire, pci-driver, cdrom, md, etc.) represent the first working application of shape analysis to verification of whole industrial programs. © 2008 Springer-Verlag...|$|R
40|$|Current {{research}} on software reliability does {{not lend itself}} to quantitatively assessing the risk posed by a piece of life-critical software. Black-box software reliability models are too general and make too many assumptions to be applied confidently to assessing the risk of life-critical software. We present a model for assessing the risk caused by a piece of software; this model combines software testing results and Hamlet's probable correctness model [2]. We show how this model can assess software risk for those who insure against a loss that can occur if life-critical software fails. Keywords Software reliability, probable correctness, probability of failure, software <b>safety,</b> <b>fault,</b> insurance, risk assessment, failure, peril, hazard. 1 Introduction Software liability issues can be characterized by two questions: (1) who is liable when a piece of software fails catastrophically and (2) how great is their liability? The questions of liability are legal and ethical quandaries, b [...] ...|$|E
40|$|This article {{presents}} {{the design and}} imple-mentation of a new robotic system for assisting surgeons in performing mini-mally invasive surgical procedures. This system is designed for collaborative opera-tion between the surgeon and the robot. In addition, it has the following attributes: quick interchangeable end tools, program-mable collaboration with the surgeon, and coordinated motion of multiple robotic de-vices for performing complex procedures. Two such devices have been built, {{with a variety of}} end-tools. The system has dem-onstrated direct manual operation and sur-geon-supervised autonomous stitching and knot tying. In addition to the mechanical design and kinematic analysis, several au-tonomous knot-tying algorithms and the associated kinematic requirements are dis-cussed. Note that, as the focus here is on the robot design and control, other important aspects on the clinical deployment of sur-gical robots such as <b>safety,</b> <b>fault</b> detection and amelioration, man-machine interface design, etc., are not addressed here...|$|E
40|$|Reliability is {{control and}} {{prevention}} of failures to reduce failure and improve operations by enhancing performance with system-level analysis and modelling are needed not only for predictability and comparability when partitioning end-to-end functions at design time levels of reliability. Reliability numbers by themselves will not motivate improvements, performance of two fault tolerant mechanisms dealing with repairable and non-repairable components that have failed. The improvement in the reliability and safety of a system with repairable components {{with respect to the}} fault tolerant systems under study correspond to a flexible arrangement of fault tolerant units (FTU’s). SFAS (<b>Safety</b> <b>Fault</b> tolerant Automotive Systems) and ECU are being compared to achieve effective results. Reliability principles are discussed which assist system improvement for reducing the high unreliability. CAN Controllers are used in automotive for fault tolerant embedded system. The existing reliability enhancement models are emphasizing various redundancy techniques both in hardware and software without focusing a formal way of recovery time minimization from the affected or degraded states in the automotive systems...|$|E
5000|$|Desirable Properties—the Proposed Recommendation {{will not}} {{necessarily}} specify any properties, such as thread <b>safety,</b> security, and <b>fault</b> tolerance, but {{it should not be}} incompatible with any such useful properties.|$|R
40|$|Foodborne {{outbreaks}} of Salmonella enterica serovar Enteritidis phage type 4 (PT 4) infection (n= 497), {{reported to the}} Health Protection Agency Communicable Disease Surveillance Centre between 1992 and 2002, were compared with other pathogens (n= 1148) to determine factors (season, setting, food vehicles, food <b>safety</b> <b>faults)</b> associated with this pathogen. Logistic regression was applied to control for potential confounding. Foodborne general {{outbreaks of}} S. Enteritidis PT 4 infection {{were more likely to}} occur in the spring and summer, and were more often linked to schools, private residences and residential institutions. Eggs, egg products and the use of raw shell egg were strongly associated with this pathogen. Most outbreaks were linked to cross-contamination and inadequate heat treatment. This paper describes the decline in the S. Enteritidis PT 4 epidemic, providing evidence that control measures introduced, e. g. improved biosecurity and vaccination, have worked. Continued surveillance of human and veterinary salmonellosis is essential to detect future problems...|$|R
40|$|Abstract. Redundancy {{technique}} {{is an effective}} method to improve the ability of mission reliability, <b>safety</b> reliability and <b>fault</b> tolerant. With redundancy technique, it will increase additional system software and hardware resources, such as fault monitor module and channel switch module etc. In allusion to sensor fault, serial fault, controller fault and motor fault, this paper designs and researches the strategy of fault logic, fault management and fault reconstruction, appropriately distributes the system resources, thus effectively processes fault monitoring and isolating, and sufficiently improves mission reliability, <b>safety</b> reliability and <b>fault</b> tolerant ability of the dual-redundancy brushless direct current electric rudder loop...|$|R
40|$|Abstract—As current studies show, in {{the last}} couple of years {{software}} functionality of modern cars has increased dramatically. This growth will gradually increase the system complexity, because the new functionality is more and more interconnected. To cope with this process, it is necessary to change the current electrics and electronics (E/E) architecture. An adequate run-time environment (RTE) is the heart of such a new E/E architecture and orchestrates the interaction and communication between the components in such systems. Due to high safety requirements of modern driver assistance, the RTE must also provide built-in safety features. This paper analyses these requirements and derives a set of software modules of an RTE that enforce the safety critical behavior of the entire system. The suggested software architecture can act as a blueprint for other run-time environments that deal with similar requirements. The proposed concept has been integrated in the RTE, that is developed in the RACE project 1. Keywords-embedded systems, automotive systems, safety-critical systems, middleware, components and reusability, <b>safety,</b> <b>fault</b> tolerance I...|$|E
40|$|Complex {{industrial}} processes invest {{a lot of}} money in sensors and automation devices to monitor and supervise the process in order to guarantee the production quality and the plant and operators <b>safety.</b> <b>Fault</b> detection is one of the multiple tasks of process monitoring and it critically depends on the sensors that measure the significant process variables. Nevertheless, most of the works on fault detection and diagnosis found in literature emphasis more on developing procedures to perform diagnosis given a set of sensors, and less on determining the actual location of sensors for efficient identification of faults. A methodology based on learning and classification techniques and on the information quantity measured by the Entropy concept, is proposed in order to address the problem of sensor location for fault identification. The proposed methodology has been applied to a continuous intensified reactor, the "Open Plate Reactor (OPR) ", developed by Alfa Laval and studied at the Laboratory of Chemical Engineering of Toulouse. The different steps of the methodology are explained through its application to the carrying out of an exothermic reaction. ...|$|E
40|$|In the {{manufacturing}} process, the test phase is consid-ered {{the most important}} challenge for designers of safety-critical avionic systems found in modern helicopters. In-deed, these systems often operate in uncertain conditions and they must provide <b>safety,</b> <b>fault</b> tolerance, and deter-ministic timing guarantees. For large range of helicopters, {{the functioning of the}} different system units is checked us-ing several software and hardware environments. Unfor-tunately, this test methodology increases the time-to-market and the cost of the final product. Focusing this issue, we pro-pose a generic test environment that can adapt easily to the helicopter range and the Unit-Under-Test (UUT). Within this environment, we conceived a hybrid CPU/FPGA architec-ture in order to design innovative avionic test systems that meet performance and flexibility goals. Furthermore, we defined an efficient test methodology that favors the reuse of hardware and software models, the adaptability of the sys-tem according to the scenario, and the interoperability of heterogeneous units. The presented case study shows the strong impact of our environment to reduce the complexity of the test phase. The Eurocopter corporation intends to adopt this environment {{as a part of the}} next generation test benches. ...|$|E
30|$|Through {{the example}} {{analysis}} in the IEEE 118 -bus, it verifies {{the effectiveness of the}} proposed security and stability analysis algorithm in the analysis of the <b>safety</b> regions during <b>faults</b> in the interregional liaison lines.|$|R
5000|$|ISO 26262 {{specifies}} {{a vocabulary}} (a Project Glossary) of terms, definitions, and abbreviations for application {{in all parts}} of the standard.Of particular importance is the careful definition of fault, error, and failure as these terms are key to the standard’s definitions of functional safety processes, particularly in the consideration that [...] "A fault can manifest itself as an error ... and the error can ultimately cause a failure".Note: In contrast to the formal vocabularies defined for other Functional <b>Safety</b> standards, <b>Fault</b> Tolerance is not explicitly defined within this standard -- it is assumed impossible to comprehend all possible faults in a system. [...] Functional <b>Safety</b> rather than <b>Fault</b> Tolerance is the objective of the standard. ISO 26262 does not use the (IEC 61508) terms SFF and hardware fault tolerance. The terms single point faults metric and latent faults metric are used instead.|$|R
40|$|High {{assurance}} systems must guarantee <b>safety,</b> security, <b>fault</b> {{tolerance and}} survivability objectives; {{it is therefore}} essential that such objectives be made explicit, refined, specified precisely and completely in application-specific terms, interrelated and analyzed thoroughly. The paper argues that goals are an essential abstraction for eliciting, elaborating, modeling, specifying, analyzing, verifying, negotiating and documenting robust and conflict-free requirements for high assurance systems. A safety injection system for {{a nuclear power plant}} is used as a running example to illustrate the key role of goals while engineering such requirements...|$|R
40|$|Survivability is the {{capability}} of an information system to support critical enterprise missions in adverse environments of attacks, failures, and accidents [Ellison et al 1999]. A research program in survivability must therefore address both systems and the environments within which they operate. Survivability {{is a combination of}} quality attributes, including security, reliability, <b>safety,</b> <b>fault</b> tolerance, dependability, and others [Mead et al 2000]. The SEI CERT Coordination Center, in cooperation with other researchers, has embarked on a multi-year, dual-thread research program, one thread to create engineering practices for survivable system design and development, the other to create engineering practices for analysis and definition of adverse environments. We believe that lack of theoretical foundations in both areas has been a serious impediment to survivable system development. In essence, we seek to move beyond natural language descriptions of survivability to a computational capability for engineering analysis of survivability properties. Accordingly, our agenda is to progress from theoretical foundations, to formal language representations, to engineering practices. We take it as an article of faith that to be effective, engineering practices must be based on rigorous foundations. At the same time, it is important to target foundations and engineering practices to the present reality and future evolution of information system architectures and technologies. Today’s large-scale infrastructur...|$|E
40|$|Appliances {{are special}} purpose systems that offer high {{processing}} speed, ease of configuration, <b>safety,</b> <b>fault</b> isolation, and minimal need for administration by human experts. Traditional approaches to building an appliance operating system have been either building it from scratch [CacheOS] or stripping down a monolithic kernel to its basic compo-nents [Jaeger 99]. The former approach is costly {{and the resulting}} product {{is likely to be}} highly specialized and not easily extensible. The latter approach is not easy, as the OS code and data structures are often shared and closely intertwined. The resulting OS is also likely to be coarse-grained and not easily customizable. Most appliances are net-work-centric (e. g. HTTP caches, proxies, file servers, routers) {{in the sense that they}} require high-performance net-work connections. Such performance is often achieved with application-specific specialization of system I/O [Cao 95] requiring a modification of a portion of the operating system, such as the protocol stack or the file system. Safety is a major concern for appliances, since new functions are constantly added, and there is never enough time to debug all possible interactions, especially when third party software is running on the appliance. The problem is more severe with legacy software written in C or other unsafe languages (in contrast with type-safe languages such as Java). Extensible routers are an example of network appliances where custom software processing has to be quickly added and safety is paramount. Diagnostic code and custom (e. g. multimedia) schedulers are also examples of extensions that appliances will need to support...|$|E
40|$|Embedded systems, {{which are}} safety critical, are {{frequently}} analyzed {{to find out}} whether they follow the safety standards and to improve their <b>safety.</b> <b>Fault</b> tree analyses enable the safety analysts to find possible causes of a system’s failure or unsafe behavior. From a fault tree, minimal cut sets are computed giving unique combinations of basic events that cause such a failure. Using minimal cut sets, the safety analysts try {{to find out how to}} improve the safety of the system with a restricted amount of resources, e. g., cost and time. The two most important results of minimal cut set analyses are the order (number of basic events) and the failure probability of the minimal cut sets. Small order minimal cut sets having 1 - 3 basic events are the most important ones, because, e. g., a single point of failure is more likely to occur than multiple failures at the same time. However, there is a lack of tools that visualize both failure probability and order of minimal cut sets. Therefore, we presented in our previous paper “Safety-Domino ” the design of a graphical metaphor for visualizing the minimal cut set’s order together with its failure probability. The design decisions were based on perception theory. To find the optimal color scheme for the design, we performed an empirical evaluation with 32 participants. This paper presents the extended version of an earlier paper [AZZD* 12] with an extended analysis of the results and additional preference tests. The statistical results of this evaluation are extended to show the tendenc...|$|E
40|$|Software {{testing is}} {{particularly}} expensive for developers of high-assurance software, such as software that is produced for commercial airborne systems. One {{reason for this}} expense is the Federal Aviation Administration's requirement that test suites be modified condition/decision coverage (MC/DC) adequate. Despite its cost, {{there is evidence that}} MC/DC is an effective verification technique and can help to uncover <b>safety</b> <b>faults.</b> As the software is modified and new test cases are added to the test suite, the test suite grows and the cost of regression testing increases. To address the test-suite size problem, researchers have investigated the use of test-suite reduction algorithms, which identify a reduced test suite that provides the same coverage of the software according to some criterion as the original test suite, and test-suite prioritization algorithms, which identify an ordering of the test cases in the test suite according to some criteria or goals. Existing test-suite reduction and prioritization techniques, however, may not be effective in reducing or prioritizing MC/DC-adequate test suites because they do not consider the complexity of the criterion. This paper presents new algorithms for test-suite reduction and prioritization that can be tailored effectively for use with MC/DC. The paper also presents the results of empirical studies of these algorithms...|$|R
40|$|A {{collection}} of document abstracts are presented {{on the topic}} of improving software dependability through NASA grant NAG- 1 - 1123. Specific topics include: modeling of error detection; software inspection; test cases; Magnetic Stereotaxis System <b>safety</b> specifications and <b>fault</b> trees; and injection of synthetic faults into software...|$|R
40|$|International audienceThe {{aim of the}} SecCo {{workshop}} {{series is}} to cover {{the gap between the}} security and the concurrency communities. More precisely, the workshop promotes the exchange of ideas, trying to focus on common interests and stimulating discussions on central research questions. In particular, we called for papers dealing with security issues (such as authentication, integrity, privacy, confidentiality, access control, denial of service, service availability, <b>safety</b> aspects, <b>fault</b> tolerance, trust, language-based security, probabilistic and information theoretic models) in emerging fields like web services, mobile ad-hoc networks, agent-based infrastructures, peer-to-peer systems, context-aware computing, global/ubiquitous/pervasive computing...|$|R
40|$|The article {{explores the}} issues {{concerning}} safety enhancement of pipeline active fault crossing on Sakhalin Island. Based on {{the complexity and}} analysis results, all the faults crossed by pipeline system are classified into five categories - from very simple faults to extremely complex ones. The pipeline fault crossing design is developed {{in accordance with the}} fault category. To enhance pipeline <b>safety</b> at <b>fault</b> crossing, a set of methods should be applied: use of pipes of different safety classes and special trench design in accordance with soil permeability characteristics...|$|R
40|$|Abstract—Software {{testing is}} {{particularly}} expensive for developers of high-assurance software, such as software that is produced for commercial airborne systems. One {{reason for this}} expense is the Federal Aviation Administration’s requirement that test suites be modified condition/decision coverage (MC/DC) adequate. Despite its cost, {{there is evidence that}} MC/DC is an effective verification technique and can help to uncover <b>safety</b> <b>faults.</b> As the software is modified and new test cases are added to the test suite, the test suite grows and the cost of regression testing increases. To address the test-suite size problem, researchers have investigated the use of test-suite reduction algorithms, which identify a reduced test suite that provides the same coverage of the software according to some criterion as the original test suite, and test-suite prioritization algorithms, which identify an ordering of the test cases in the test suite according to some criteria or goals. Existing test-suite reduction and prioritization techniques, however, may not be effective in reducing or prioritizing MC/DC-adequate test suites because they do not consider the complexity of the criterion. This paper presents new algorithms for test-suite reduction and prioritization that can be tailored effectively for use with MC/DC. The paper also presents the results of empirical studies of these algorithms. Index Terms—Test-suite reduction, test-suite prioritization, modified condition/decision coverage, testing, critical software. æ...|$|R
40|$|Abstract: We are {{surrounded}} by ever more dependable systems, such us driving assistance systems from the automotive domain or life-supporting systems from the medical domain. Due to their increasing complexity, not only the development of but also the quality assurance for such systems are becoming increasingly difficult. They may cause various degrees of harm to their environment. Hence, {{in order to reduce}} risks associated with these systems, development as well as quality assurance normally use risk analysis as a basis for constructive and analytical measures against these risks. One of the aims of quality assurance is fault detection and fault forecasting. In this paper, the authors present indicator-based inspections using Goal Indicator Trees, a novel risk-oriented quality assurance approach for fault detection. It can be used to detect faults of different types, like <b>safety</b> <b>faults</b> or security faults. Starting from typical risk analysis results like FMECA and FTA, the approach systematically derives quality goals and refines these goals into concrete quality indicators that guide the indicator-based inspection. Quality indicators can be mapped to concrete checklists and concrete inspection goals in order to support inspectors checking artifacts in a fine-grained way with respect to certain quality properties. The approach is explained and demonstrated with respect to the quality property safety, but tends to be generalizable to further quality properties. ...|$|R
40|$|In this paper, we {{analyze the}} {{difficulties}} of handling abnormal events. We introduce a framework that integrate the concepts of Design by Contract, exception <b>safety</b> and <b>fault</b> tolerance and from then, obtain a set of criterions {{for the design of}} a mechanism that integrate error code, exception and executable assertions for the handling of different types of abnormal events. From these criterions, a proposal for a novel exception mechanism adequate for C written embedded systems is presented. Finally, we analyze the advantages of our mechanism over the existing mechanisms and over other languages or previous extension to C. 1...|$|R
40|$|This paper {{gives an}} {{overview}} of the use of petrinets for the reliability analysis of <b>safety</b> systems. <b>Fault</b> tree technique had been widely employed in the reliability analysis of safety systems as a part of Level 1 Probabilistic Safety Assessment conducted for Nuclear Power Plants. This study presents the use of petrinets in failure analysis. It Is demonstrated that petrinets are more efficient than fault tree. Another arena, where petrinets were successfully employed, is in the evaluation of redundant systems where time {{is also one of the}} parameters. Analyses are presented with the help of appropriate case studies...|$|R
40|$|Compilers for Java {{and other}} type-safe {{languages}} have historically worked to overcome overheads and constraints imposed by runtime safety checks and precise exception semantics. We instead exploit these safety properties to perform code motion optimizations that {{are even more}} aggressive than those possible in unsafe languages such as C++. We present a novel framework for speculative motion of dangerous (potentially faulting) instructions in safe, objectoriented languages such as Java and C#. Unlike earlier work, our approach requires no hardware or operating system support. We leverage the properties already provided by a safe language to define <b>fault</b> <b>safety,</b> a more precise notion of safety that guarantees that a dangerous operation (e. g., a memory load) will not fault at a given program point. We illustrate how typical code motion optimizations are easily adapted to exploit our safety framework. First, we modify the standard SSAPRE partial redundancy elimination (PRE) algorithm [18, 20] to use <b>fault</b> <b>safety,</b> rather than the traditional down safety property. Our modified algorithm better exploits profile information by inserting of dangerous instructions on new paths when it is profitable and provably safe. Second, we extend an instruction trace scheduler to use <b>fault</b> <b>safety</b> to safely schedule load instructions across branches to better tolerate memory latency and to more compactly target instruction slots. We implemented these optimizations in StarJIT [1], a dynamic compiler, and show performance benefits of up to 10 % {{on a set of}} standard Java benchmarks...|$|R
