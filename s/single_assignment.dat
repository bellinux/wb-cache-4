421|113|Public
25|$|The {{sequential}} {{subset of}} the Erlang language supports eager evaluation, <b>single</b> <b>assignment,</b> and dynamic typing.|$|E
2500|$|Dijkstra's algorithm, {{as another}} example of a uniform-cost search algorithm, {{can be viewed as a}} special case of A* where [...] for all x. General depth-first search can be {{implemented}} using A* by considering that there is a global counter C initialized with a very large value. Every time we process a node we assign C to all of its newly discovered neighbors. After each <b>single</b> <b>assignment,</b> we decrease the counter C by one. Thus the earlier a node is discovered, the higher its [...] value. [...] It should be noted, however, that both Dijkstra's algorithm and depth-first search can be implemented more efficiently without including a [...] value at each node.|$|E
5000|$|IBM Outstanding Innovation Award, for co-inventing Static <b>Single</b> <b>Assignment</b> form. 1992 ...|$|E
50|$|There {{are both}} <b>single</b> <b>assignments</b> and {{projects}} where specific teams are formed to develop solutions for product development chains. The company operates several research projects, including Sonic Movement, which is developing sound effects for electric cars.|$|R
25|$|His longest <b>single</b> flying <b>assignment</b> was in {{the late}} 1950s, for the TV series Sky King.|$|R
50|$|The Apollo compilers {{were the}} first {{commercial}} compilers to use data-flow analysis and <b>single</b> static <b>assignment</b> techniques.|$|R
50|$|In {{general the}} {{resulting}} code {{does not have}} static <b>single</b> <b>assignment</b> form.|$|E
50|$|The {{sequential}} {{subset of}} the Erlang language supports eager evaluation, <b>single</b> <b>assignment,</b> and dynamic typing.|$|E
5000|$|Any {{assignment}} {{that changes}} an existing value (e.g. [...] ) is disallowed in purely functional languages. In functional programming, assignment is discouraged {{in favor of}} <b>single</b> <b>assignment,</b> also called initialization. <b>Single</b> <b>assignment</b> {{is an example of}} name binding and differs from assignment as described in this article in that it can only be done once, usually when the variable is created; no subsequent reassignment is allowed.|$|E
40|$|Team {{semantics}} is {{the mathematical}} framework of modern logics of dependence and independence in which formulae are interpreted by sets of assignments (teams) instead of <b>single</b> <b>assignments</b> as in first-order logic. In order to deepen the fruitful interplay between team semantics and database dependency theory, we define "Polyteam Semantics" in which formulae are evaluated over {{a family of}} teams. We begin by defining a novel polyteam variant of dependence atoms and give a finite axiomatisation for the associated implication problem. We also characterise the expressive power of poly-dependence logic by properties of polyteams that are downward closed and definable in existential second-order logic (ESO). The analogous result is shown to hold for poly-independence logic and all ESO-definable properties...|$|R
40|$|The {{availability}} of first derivatives of vector functions {{is crucial for}} the robustness and efficiency {{of a large number}} of numerical algorithms. A new version of the differentiation-enabled NAGWare Fortran 95 compiler is described that uses programming language extensions and a semantic code transformation known as automatic differentiation to provide Jacobians of numerical programs with machine accuracy. We describe a new improved user interface as well as the relevant algorithmic details. In particular, we focus on the source transformation approach that generates locally optimal gradient code for <b>single</b> <b>assignments</b> by vertex elimination in the linearized computational graph. Extensive tests show the superiority of this method over the current overloading-based approach. The robustness and convenience of the new compiler-feature is illustrated by various case studies...|$|R
50|$|In 1945, Mantz flew a P-40 and {{directed}} aerial sequences in God is My Co-Pilot. Mantz piloted a Boeing B-17 for the belly landing scenes in Twelve O'Clock High and the footage was reused {{in several other}} movies.His longest <b>single</b> flying <b>assignment</b> was in the late 1950s, for the TV series Sky King.|$|R
5000|$|Impure {{functional}} languages {{provide both}} <b>single</b> <b>assignment</b> {{as well as}} true assignment (though true assignment is typically used with less frequency than in imperative programming languages). For example, in Scheme, both <b>single</b> <b>assignment</b> (with [...] ) and true assignment (with [...] ) {{can be used on}} all variables, and specialized primitives are provided for destructive update inside lists, vectors, strings, etc. In OCaml, only <b>single</b> <b>assignment</b> is allowed for variables, via the [...] syntax; however destructive update can be used on elements of arrays and strings with separate [...] operator, as well as on fields of records and objects that have been explicitly declared mutable (meaning capable of being changed after their initial declaration) by the programmer.|$|E
5000|$|The {{process of}} {{splitting}} [...] into two separate variables is called live range splitting. See also static <b>single</b> <b>assignment</b> form.|$|E
5000|$|... #Caption: GlassyMesa is an LLVM-based {{compiler}} stack for shaders {{written in}} GLSL. For SSA see the article Static <b>single</b> <b>assignment</b> form.|$|E
2500|$|From 1892–1945 {{there were}} six {{different}} Academic Department heads. Each brought improvements to the curriculum of the school. [...] The first was Susan Showers (1896), who initiated literacy societies for students, home visits by teachers, <b>single</b> grade <b>assignments</b> for teachers, community socials, holiday celebrations, and evening religious services. (Partnering with the community {{was not part of}} the Hampton-Tuskegee model).|$|R
40|$|The {{resolution}} of constraint satisfaction problems heavily {{relies on the}} use of local consistency enforcement procedures which are used to lter the problems before or during their resolution. While procedures based on arc-consistency are almost a standard, path-consistency checking is often neglected because it is costly and it lters out pairs of <b>assignments</b> instead of <b>single</b> <b>assignments.</b> This paper presents a domain ltering procedure that tightly combines the use of arc and pathconsistency, each one helping the other to achieve further or faster work. We show, on an experimental evaluation, that the proposed procedure ooeers a considerable ltering power at relatively low cost. 1 Introduction Constraint satisfaction problems (csp) have proved useful in the encoding of various instances of practical combinatorial problems (e. g. planning, scheduling, resource allocation). A great part {{of the success of the}} csp approach is due to the simplicity of the formalism: a csp is simp [...] ...|$|R
40|$|Dependence logic, {{introduced}} by Väänänen, is {{the extension of}} first-order logic by atomic statements about (functional) dependencies of variables. An important feature of this logic is a model-theoretic semantics that, contrary to Tarski semantics, {{is not based on}} <b>single</b> <b>assignments</b> (mapping variables to elements of a structure) but on sets of assignments. Sets of assignments are called teams and the semantics is called team semantics. By focussing on independence rather than depencence, we have proposed a new logic, called independence logic, based on atomic formulae x ⊥z y which intuitively say that the variables x are independent from the variables y whenever the variables z are kept constant. We show that x ⊥z y gives rise to a natural logic capable of formalizing basic intuitions about independence and dependence. We contrast this with dependence logic and show that independence logic has strictly more expressive power. Further, we will discuss game-theoretic semantics, expressive power, and complexity of dependence and independence logic. 1...|$|R
50|$|SISAL ("Streams and Iteration in a <b>Single</b> <b>Assignment</b> Language") is a {{general-purpose}} <b>single</b> <b>assignment</b> {{functional programming}} language with strict semantics, implicit parallelism, and efficient array handling. SISAL outputs a dataflow graph in Intermediary Form 1 (IF1). It was derived from VAL (Value-oriented Algorithmic Language, designed by Jack Dennis), and adds recursion and finite streams. It has a Pascal-like syntax and {{was designed to be}} a common high-level language for numerical programs on a variety of multiprocessors.|$|E
50|$|During the 1980s stream {{processing}} was explored within dataflow programming. An {{example is the}} language SISAL (Streams and Iteration in a <b>Single</b> <b>Assignment</b> Language).|$|E
5000|$|Every {{variable}} {{is assumed to}} have a definition in the context or scope. (In static <b>single</b> <b>assignment</b> form, use-define chains are explicit because each chain contains a single element.) ...|$|E
50|$|Both {{theories}} {{account for}} semantic meaning, with Bhat allowing for nouns to contain multiple semantic meanings through multiple case roles, and Fillmore maintaining the <b>single</b> case role <b>assignment</b> theory but re-introducing semantic transformations.|$|R
40|$|In Dempster-Shafer (DS) theory, {{multiple}} {{information from}} the distinct information sources are combined to obtain a <b>single</b> Basic Probability <b>Assignment</b> (BPA) function. The well-known combination rule of Dempster-Shafer (DS) provides the weaker solution to the management of conflicting information at the normalization stage...|$|R
5000|$|In contrast, {{randomized}} algorithms {{like the}} PPSZ algorithm by Paturi, Pudlak, Saks, and Zane set variables {{in a random}} order according to some heuristics, for example bounded-width resolution. If the heuristic can't find the correct setting, the variable is assigned randomly. The PPSZ algorithm has a runtime of [...] for 3-SAT with a <b>single</b> satisfying <b>assignment.</b> Currently this is the best-known runtime for this problem. In the setting with many satisfying assignments the randomized algorithm by Schöning has a better bound.|$|R
50|$|Besides {{removing}} unused {{instructions from}} the compiled bytecode, ProGuard optimizes it using techniques such as control flow analysis, data-flow analysis, partial evaluation, static <b>single</b> <b>assignment,</b> global value numbering, and liveness analysis.|$|E
50|$|SafeTSA is {{a static}} <b>single</b> <b>assignment</b> form (SSA) {{intermediate}} representation capable of representing {{all of the}} type safety of the Java programming language and the standard Java Virtual Machine (JVM) byte-code.|$|E
50|$|Dominators, and {{dominance}} frontiers particularly, have {{applications in}} compilers for computing static <b>single</b> <b>assignment</b> form. A number of compiler optimizations can {{also benefit from}} dominators. The flow graph in this case comprises basic blocks.|$|E
40|$|Logics of {{dependence}} and independence have semantics that, unlike Tarski semantics, are {{not based on}} <b>single</b> <b>assignments</b> (mapping variables to elements of a structure) but on sets of assignments. Sets of assignments are called teams and the semantics is called team semantics. We design model-checking games for logics with team semantics in a general and systematic way. The construction works for any extension of first-order logic by atomic formulae on teams, as long as certain natural conditions are observed which are satisified by all team properties considered {{so far in the}} literature, including dependence, independence, constancy, inclusion, and exclusion. The second-order features of team semantics are reflected by the notion of a consistent winning strategy which is also a second-order notion {{in the sense that it}} depends not on single plays but on the space of all plays that are compatible with the strategy. Beyond the application to logics with team semantics, we isolate an abstract, purely combinatorial definition of such games, which may be viewed as second-order reachability games, and study their algorithmic properties. A number of examples are provided that show how logics with team semantics express familiar combinatorial problems in a somewhat unexpected way. Based on our games, we provide a complexity analysis of logics with teams semantics...|$|R
5000|$|The {{following}} {{is based on}} Fruja's formalization of the C# intraprocedural (<b>single</b> method) definite <b>assignment</b> analysis, {{which is responsible for}} ensuring that all local variables are assigned before they are used. It simultaneously does definite assignment analysis and constant propagation of boolean values. We define five static functions: ...|$|R
40|$|We {{study the}} planted {{ensemble}} of locked constraint satisfaction problems. We describe {{the connection between}} the random and planted ensembles. The use of the cavity method is combined with arguments from reconstruction on trees and first and second moment considerations; in particular the connection with the reconstruction on trees appears to be crucial. Our main result is the location of the hard region in the planted ensemble, thus providing hard satisfiable benchmarks. In a part of that hard region instances have with high probability a <b>single</b> satisfying <b>assignment...</b>|$|R
50|$|An {{important}} use of {{the conditional}} operator is in allowing a single initialization statement, rather than multiple initialization statements. In many cases this also allows <b>single</b> <b>assignment</b> and for an identifier to be a constant.|$|E
5000|$|KRL is event-based with strict evaluation, <b>single</b> <b>assignment,</b> {{and dynamic}} typing. In {{event-driven}} programming, events, a notification that something happened, control {{the flow of}} execution. KRL supports a programming model based on three key ideas: ...|$|E
50|$|Feature-specific {{extensions}} {{retain the}} <b>single</b> <b>assignment</b> property for variables, but incorporate new semantics to model additional features. Some feature-specific extensions model high-level programming language features like arrays, objects and aliased pointers. Other feature-specific extensions model low-level architectural features like speculation and predication.|$|E
40|$|The {{purpose of}} this study was to compare {{perceptions}} of elementary school teachers regarding the job performance of principals with <b>single</b> and multiple <b>assignments.</b> The differences between the perceptions of teachers under the supervision of a principal with a <b>single</b> building <b>assignment</b> and those under the supervision of a principal with a multiple assignment with respect to the quality of the principal 2 ̆ 7 s performance were examined in this study. The six professional responsibilities of the principal that were analyzed included instructional leadership, staff personnel management, student services, school community relations, school administrative functions, and school plant management. The study was designed as a follow-up of Bartee 2 ̆ 7 s (1986) research. ^ The instrument, 2 ̆ 2 Teacher Perceptions of an Elementary School Principal 2 ̆ 7 s Job Performance, 2 ̆ 2 developed by the researcher, was utilized to measure the quality of principals 2 ̆ 7 job performance based on the perceptions of teachers under their supervision. The sample included 234 elementary school teachers within the largest school districts in Nebraska. Independent t-tests were utilized to determine if significant differences existed between teacher perceptions in terms of the principal 2 ̆ 7 s quality of job performance. To control the variable of student enrollment for which the principals were responsible, analysis of variance with repeated measures was used to determine if significant differences existed in teacher perceptions based on student enrollment. ^ Teachers under the supervision of elementary school principals with a <b>single</b> building <b>assignment</b> perceived the quality of their principals 2 ̆ 7 performance in the areas of instructional leadership, staff personnel management, student services, school community relations, school administrative functions, and school plant management to be at a higher level than teachers under the supervision of principals with multiple assignments. However, when measured for statistical significance, differences existed only in the areas of staff personnel management and student services. ...|$|R
50|$|Values are {{computed}} by expressions written using {{a specific}} set of operations and builtin functions, most of which may be applied to aggregates as well as to single values, together with user-defined procedures which, likewise, may operate on and return aggregate as well as <b>single</b> values. The <b>assignment</b> statement assigns values to one or more variables.|$|R
40|$|Abstract. The pointer alias is {{indispensable}} for program analysis. Comparing to point-to set, it’s more efficient to formulate the alias as the context free language (CFL) reachability problem. However, the precision {{is limited to}} flow-insensitivity. To solve this problem, we propose a flow sensitive, demand-driven analysis algorithm for answering may-alias queries. First the partial <b>single</b> static <b>assignment</b> is used to discriminate the address-taken pointers. Then the order of control flow is encoded in the level linearization code to ease comparison. Finally, the query of alias in demand driven is converted into the search of CFL reachability with feasible flows. The experiments demonstrate {{the effectiveness of the}} proposed approach...|$|R
