87|223|Public
2500|$|Copies of {{the game}} {{purchased}} from Stardock's online store use product activation before the game can be played. [...] The game can only be installed and activated {{a limited number of}} times before needing to contact support. Installing on a computer without an internet connection require the files to be downloaded into an archive on another computer, and an activation data blob emailed to Stardock; a <b>signature</b> <b>file</b> is returned to be used on the activated computer.|$|E
50|$|He is {{also known}} for {{pioneering}} the use of ultra-compact code with his 3-line RSA in Perl <b>signature</b> <b>file</b> and non-exportable T-shirts to protest the (now relaxed) United States cryptography export regulations.|$|E
50|$|Such an {{electronic}} <b>signature</b> <b>file</b> would contain a single CAdES object or {{one or more}} XAdES signatures. A time assertion file would either contain a one timestamp token that will conform to IETF RFC 3161, whereas a single evidence record would conform to IETF RFC 4998 or IETF RFC6283.|$|E
40|$|Two {{well-known}} indexing {{methods are}} inverted <b>files</b> and <b>signature</b> <b>files.</b> We have undertaken a detailed comparison {{of these two}} approaches {{in the context of}} text indexing, paying particular attention to query evaluation speed and space requirements. We have examined their relative performance using both experimentation and a refined approach to modeling of <b>signature</b> <b>files,</b> and demonstrate that inverted files are distinctly superior to <b>signature</b> <b>files.</b> Not only can inverted files be used to evaluate typical queries in less time than can <b>signature</b> <b>files,</b> but inverted files require less space and provide greater functionality. Our results also show that a synthetic text database can provide a realistic indication of the behavior of an actual text database. The tools used to generate the synthetic database have been made publicly available...|$|R
40|$|Advanced {{database}} {{systems have}} to support complex data structures as treated in object-oriented data models and nested relational data models. In particular, efficient processing of set-valued object retrieval (simply, set retrieval) is indispensable for such systems. In the previous paper [6], we proposed the use of <b>signature</b> <b>files</b> as efficient set retrieval facilities and showed their potential capabilities based on a disk page access cost model. Retrieval with <b>signature</b> <b>files</b> is always accompanied by mismatches called false drops, {{and it is very}} important in designing <b>signature</b> <b>files</b> to properly control the false drops. In this paper, we present an in-depth study of false drops in set retrieval with <b>signature</b> <b>files.</b> We derive formulas estimating false drops in four types of set retrieval based on the "has-subset," "is-subset," "has-intersection," and "is-equal" relationships. Then we evaluate their validity by computer simulations. Simulation study is also done to investigate fal [...] ...|$|R
40|$|Statistical {{analysis}} service: It calculates P(cue|class) : {{probability of}} seeing a linguistic cue given a lexical class. This probability is computed given the occurrences of cues in a corpus (codified in the <b>signatures</b> <b>file)</b> and the information of belonging or not belonging of these words to different classes (codified in indicators file). The probability is computed for each studied cue in the <b>signatures</b> <b>file</b> and for each class in the indicators file...|$|R
50|$|The NAP {{health policy}} server {{can use a}} health {{requirement}} server to validate the health state of the NAP client or to determine {{the current version of}} software or updates that need to be installed on the NAP client. For example, a health requirement server might track the latest version of an antivirus <b>signature</b> <b>file.</b>|$|E
50|$|Copies of {{the game}} {{purchased}} from Stardock's online store use product activation before the game can be played. The game can only be installed and activated {{a limited number of}} times before needing to contact support. Installing on a computer without an internet connection require the files to be downloaded into an archive on another computer, and an activation data blob emailed to Stardock; a <b>signature</b> <b>file</b> is returned to be used on the activated computer.|$|E
50|$|A <b>signature</b> <b>file</b> is a {{technique}} that creates a quick and dirty filter, for example a Bloom filter, that will keep all the documents that match to the query and hopefully a few ones that do not. The way this is done is by creating for each file a signature, typically a hash coded version. One method is superimposed coding. A post-processing step is done to discard the false alarms. Since in most cases this structure is inferior to inverted files in terms of speed, size and functionality, it is not used widely. However, with proper parameters it can beat the inverted files in certain environments.|$|E
40|$|Set is a fundametal data {{structure}} and plays {{important role in}} data modeling not only for traditional database aplications but for advanced ones. The main issue of this dissertation is indexing methods for set-valued objects. Set has several inherent comparison operators such as inclusion ([?]) and membership ([?]). Therefore, indexing methods for set-valued objects must support efficient retrieval of objects under such set retrieval conditions. In this dissertation, superimposed-coded <b>signature</b> <b>files,</b> popular methods in text retrieval area, are proposed as promising indexing methods for set-valued objects. Such <b>signature</b> <b>files</b> are called set-based <b>signature</b> <b>files.</b> In this dissertation, several issues of set-based signature foles, such as organization schemes, retrieval/update algorithms, and availability, are investigated. ･･･Thesis (Ph. D. in Engineering) [...] University of Tsukuba, (B), no. 1115, 1995. 7. 3...|$|R
50|$|In the lawsuit, Bogaert {{asked for}} {{emergency}} consideration of {{a request for}} a preliminary injunction relative to the <b>signatures</b> <b>filed</b> in the Andy Dillon recall.|$|R
40|$|In this paper, {{we present}} the SigCache approach. In {{contrast}} to traditional <b>signature</b> <b>files</b> where <b>signatures</b> {{are stored in}} separate <b>files,</b> <b>signatures</b> are in our approach stored together with their objects. In addition, the most frequently accessed signatures are stored in a main memory signature cache (SigCache). When using the signatures stored in the SigCache as a filter during perfect match queries, the number of objects that actually have to be retrieved during perfect match queries can be reduced. The increase in update cost is insignificant, because the signatures are {{much smaller than the}} objects. Key words: object database systems, <b>signature</b> <b>files,</b> buffer management, query processing...|$|R
50|$|DROID (Digital Record Object Identification) is a {{software}} tool developed by The National Archives to perform automated batch identification of file formats. It {{is one of}} a planned series of tools utilising PRONOM to provide specific digital preservation services. DROID uses internal (byte sequence) and external (file extension) signatures to identify and report the specific file format versions of digital files. These signatures are stored in an XML <b>signature</b> <b>file,</b> generated from information recorded in the PRONOM technical registry. New and updated signatures are regularly added to PRONOM, and DROID can be configured to automatically download updated signature files from the PRONOM website via web services.|$|E
40|$|The <b>signature</b> <b>file</b> {{method is}} a popular {{indexing}} technique used in information retrieval and databases. It excels in efficient index maintenance and lower space overhead. However, it suffers from inefficiency in query processing {{due to the fact}} that for each query processed the entire <b>signature</b> <b>file</b> needs to be scanned. In this paper, we introduce a tree structure, called a signature tree, established over a <b>signature</b> <b>file,</b> which can be used to expedite the <b>signature</b> <b>file</b> scanning by one order of magnitude o...|$|E
40|$|For {{processing}} a <b>signature</b> <b>file</b> in parallel, {{an effective}} <b>signature</b> <b>file</b> declustering method is needed. The Linear Code Decomposition Method(LCDM) {{used for the}} Hamming Filter may give a good performance in some cases, but due to its static property, it fails to evenly decluster a <b>signature</b> <b>file</b> when signatures are skewed. In addition, it has other problems such as limited scalability and non-determinism. In this {{paper we propose a}} new <b>signature</b> <b>file</b> declustering method, called the Inner-product method, which overcomes those problems in the LCDM. The Inner-product method declusters a <b>signature</b> <b>file</b> dynamically based on the signature difference which is computed by using signature inner product. We show through the various experiments that the Inner-product method outperforms the LCDM under various data workloads. Jae � Chung � Jae��Byoung � A Dynamic <b>Signature</b> <b>File</b> Declustering Method based on the Signature Differenc...|$|E
40|$|This paper {{describes}} a new signature generation method for constructing multi-level <b>signature</b> <b>files</b> to support both relational queries which contain multiple conjunctive (AND) predicates and generic document text queries. We describe {{the major problems}} with traditional multi-level <b>signature</b> <b>files</b> and then describe how to build multi-level <b>signature</b> <b>files</b> using a new composite method of parent signature generation. Performance of this signature generation scheme im-proves as more key fields are provided in the query. A combinatorial error problem common to all multi-level signature structures is identified and addressed. We show how a signature access method can provide query support for {{a large number of}} fields in a relation for which no index exists and can dramatically reduce the number, of relation tuples that must be accessed during a normal scan. If one or more fields of the relation contain long tield data such as text, the same signature mechanism can also provide query support for text search predicates. 1...|$|R
40|$|A {{comparison}} of several indexing techniques for complex object in object-oriented database systems is presented, based on assumption of non-uniform distribution of attribute values. The cost estimations show that conventional ordered indices, especially nested indices with object skeletons, can provide better performance than <b>signature</b> <b>files...</b>|$|R
50|$|Users are {{encouraged}} by the IDA to install and activate a Virtual Private Network (VPN) or other encryption mechanism, Personal firewall; and Anti-virus software with the latest <b>signature</b> <b>files.</b> The IDA also encourages users to avoid ad hoc wireless networking to safeguard their security.|$|R
40|$|The paper {{presents}} {{a novel approach}} for searching a very large image database employing frame sliced parallel <b>signature</b> <b>file.</b> Signature files have been proposed and used for retrieval of databases in parallel fashion {{under the assumption that}} the main memory is sufficient enough to hold the entire <b>signature</b> <b>file.</b> We propose the use of a parallel frame-sliced <b>signature</b> <b>file</b> method in a parallel environment, when the size of the <b>signature</b> <b>file</b> exceeds the available memory. The implementation uses a binary signature for the images. The proposed technique is compared with the existing indexing techniques. It is observed that it has better performance in terms of response time. 1...|$|E
40|$|A <b>signature</b> <b>file</b> organization, {{called the}} weight-partitioned <b>signature</b> <b>file,</b> for {{supporting}} document ranking is proposed. It employs multiple signature files, {{each of which}} corresponds to one term frequency, to represent terms with different term frequencies. Words with the same term frequency in a document are grouped together and hashed into the <b>signature</b> <b>file</b> corresponding to that term frequency. This eliminates the need to explicitly record the term frequency for each word. We investigate the effect of false drops on retrieval effectiveness {{if they are not}} eliminated in the search process. We have shown that false drops introduce insignificant degradation on precision and recall when the false drop probability is below a certain threshold. This is an important result since false drop elimination could become the bottleneck in systems using fast <b>signature</b> <b>file</b> search techniques. We perform an analytical study on the performance of the weight-partitioned <b>signature</b> <b>file</b> un [...] ...|$|E
40|$|Object-oriented {{database}} systems (OODBs) need efficient {{support for}} manipulation of complex objects. In particular, support of queries involving evaluations of set predicates is often required in handling complex objects. In this paper, we propose {{a scheme to}} apply <b>signature</b> <b>file</b> techniques, which were originally invented for text retrieval, to the support of set value accesses, and quantitatively evaluate their potential capabilities. Two <b>signature</b> <b>file</b> organizations, the sequential <b>signature</b> <b>file</b> and the bitsliced <b>signature</b> <b>file,</b> are considered and their performance is {{compared with that of}} the nested index for queries involving the set inclusion operator (`). We develop a detailed cost model and present analytical results clarifying their retrieval, storage, and update costs. Our analysis shows that the bitsliced <b>signature</b> <b>file</b> is a very promising set access facility in OODBs. 1 INTRODUCTION Advanced database application areas, such as computer aided design, office automation, and [...] ...|$|E
40|$|We {{survey the}} major {{techniques}} for information retrieval. In the first part, we provide {{an overview of}} the traditional ones (full text scanning, inversion, <b>signature</b> <b>files</b> and clustering). In the second part we discuss attempts to include semantic information (natural language processing, latent semantic indexing and neural networks) ...|$|R
5000|$|... alt.fan.warlord is a Usenet {{newsgroup}} {{dedicated to}} the dissection and flaming of <b>signature</b> <b>files</b> (sigs) used in other Usenet groups. The newsgroup was best-known during the early and mid-1990s, and {{can no longer be}} considered active. In its time, it was a notable [...] "underground" [...] Internet phenomenon.|$|R
5000|$|Billing {{itself as}} the [...] "Authority in Spyware Protection," [...] it {{licensed}} its <b>signature</b> <b>files</b> for use in Yahoo! Companion and others. In 2003, along with other anti-spyware and anti-malware companies such as Webroot, Lavasoft and Aluria, it formed an industry consortium to fight malware called the Consortium of Antispyware Technology (COAST).|$|R
40|$|Abstract. Many {{works on}} the <b>signature</b> <b>file</b> methods {{have been made in}} the past, but they are mainly for static environments. However, many re-cent {{applications}} in practice require a dynamic information storage struc-ture that effectively supports insertions, deletions and updates. Though there are a few <b>signature</b> <b>file</b> techiniqucs for dynamic: environments, they suffer from serious performance degradation when query signature weights are light. In this paper, we propose a new dynamic <b>signature</b> <b>file</b> organization, called the hierarchical signature(llS) file, that solves the problem of light query signature weights. We perform simulation ex-periments by using wide range of parameter values. We show through performance comparison based on experiments that the HS file improves performance significantly in both the retrieval time and the storage over-head over the other dynamic <b>signature</b> <b>file</b> methods proposed earlier...|$|E
40|$|Abstract In this paper, a <b>signature</b> <b>file</b> {{method for}} {{indexing}} document database systems is presented. For this purpose, {{the concept of}} presentative word hierarchy is introduced, based on which <b>signature</b> <b>file</b> hierarchies can be established. Together {{with the concept of}} query signature hierarchy, it improves significantly the retrieval efficiency of documents stored structurally in object oriented databases. ...|$|E
40|$|Text {{indexing}} is {{an issue}} of primary importance in today's InterNet based world of information exchange and dissemination. Two textbase indexing methods which enjoy wide applicability are file inversion and the superimposed coding based <b>signature</b> <b>file</b> (SC-SF). The former is most efficient in query processing, whereas the latter excels in storage utilization. The present study: (a) considers SC-SF and its drawbacks in relation with the size of the textbase vocabulary, (b) presents two new <b>signature</b> <b>file</b> variations one of which achieves optimum information compression, whereas the other maximizes the query processing efficiency, and (c) proposes a new textbase indexing structure, the performance of which may be tuned to lie anywhere between file inversion and an information-loss-free <b>signature</b> <b>file.</b> The structure in (c) is labeled S-Index, where "S-" implies the <b>signature</b> <b>file</b> and "Index" implies file inversion. S-Index makes possible the indexing of selected logical sections of text, le [...] ...|$|E
40|$|This {{paper is}} a {{continuation}} of work started in [7]. We try two approaches to improve the response time of weight-partitioned <b>signature</b> <b>files.</b> In the first approach, we propose several fast heuristic search algorithms to reduce the percentage of signatures that needs to be searched. On average they achieve search reduction ratios in the range of 40 % to 65 % without sacrificing any precision and recall for top documents. In the second approach, we try to reduce the total size of the <b>signature</b> <b>files,</b> since space is speed. We establish a coarse ranking by first searching signature files; then we do exact text matching on the top documents obtained. Our results show that comparable precision can be achieved with at least 37 % less storage overhead. For long document collection, we achieve the same precision and recall with 75 % less of storage overhead...|$|R
40|$|Similarity-based {{retrieval}} is {{an essential}} requirement for retrieval of images by contents. In this paper, we are introducing a new symbolic image representation technique and an indexing scheme for spatial similarity-based retrieval of images. In this technique, an image is recursively decomposed into a spatial arrangement of distinct features to preserve the spatial information of image objects. This scheme is independent of image size, translation and rotation and is essentially domain independent. Quadtrees are used to manage the decomposition hierarchy and help in establishing a measure of similarity for the retrievals. This scheme is incremental in nature and allows matchatvarious levels of details, from coarse to fine. Atwo phase indexing scheme based on the concepts of <b>signature</b> <b>files</b> and quadtree matching is constructed. Use of <b>signature</b> <b>files</b> prunes the search space bydiscriminating against the non-matching entities which are further eliminated during the coars [...] ...|$|R
50|$|On 13 February 2015, the petition, {{containing}} 150,000 <b>signatures,</b> was <b>filed</b> {{with the}} Indonesian President.|$|R
40|$|A {{new method}} for ranking {{the output of}} the {{superimposed}} variation of the <b>signature</b> <b>file</b> method (SC/SF) is presented. The method is termed 'Binary Ranking ' and assigns a value ('B-rank value') to each block candidacy of the <b>signature</b> <b>file</b> output in a way which reflects the credibility of the signature to stand in place of the corresponding real text. In order to measure the performance of the proposed technique, a simulation environment based on a Relational Database Management System is established. Binary Ranking is found to be promising for a category of real-life applications and allows for future enhancements. The <b>signature</b> <b>file</b> metho...|$|E
40|$|A <b>signature</b> <b>file</b> {{acts as a}} {{filtering}} {{mechanism to}} reduce the amount of text that needs to be searched for a query. Unfortunately, the <b>signature</b> <b>file</b> itself must be exhaustively searched, resulting in degraded performance for large file size. We propose to use a deterministic algorithm to divide a <b>signature</b> <b>file</b> into partitions, each of which contains signatures with the same "key. " The signature keys in a partition can be extracted and represented as the partition's key. The search can then be confined to the subset of partitions whose keys match with the query key. The main concern of this paper is to study methods for obtaining the keys and their performance in terms of their ability to reduce the search space. Due to the reduction of search space, partitioning a <b>signature</b> <b>file</b> has direct benefit in a sequential search (single-processor) environment. In a parallel environment, search can be conduct in parallel effectively by allocating one or more partitions to a processor. Partition [...] ...|$|E
40|$|<b>Signature</b> <b>file</b> {{has been}} shown to be a very good access method for text and multiattribute {{retrieval}} [6, 13]. It has a low storage overhead and a simple structure. However its speed is poor compared to an inverted file, since every signature in the file must be searched. In this paper, we introduce a partitioning method to reduce the search space required on the <b>signature</b> <b>file.</b> A partitioned <b>signature</b> <b>file</b> is better than the multilevel <b>signature</b> <b>file</b> [15] and the S-tree [3] in that it has an extremely small storage and processing overhead. We outline three partitioning schemes and discuss their performance. We describe the data structure necessary to support the partitioning schemes and the algorithms for signature insertion, deletion and retrieval. 1 Introduction Signature files, in particular, the superimposed coding method [14], is an excellent access structure for supporting conjunctive queries. For instance given a relation R = (A 1; A 2; :::; A n), a partial match query may spe [...] ...|$|E
50|$|In practice, a fixity {{check is}} most often {{accomplished}} by computing checksum or cryptographic hash function values for a file and comparing them to a stored value or through digital <b>signatures.</b> <b>File</b> fixity figures prominently in Preservation Metadata: Implementation Strategies (PREMIS), the Government Printing Office's work on the Authenticity of Electronic Federal Government Publications, and fixity checking practices are used by a range of cultural heritage organizations.|$|R
40|$|We {{review and}} study the {{performance}} of four different index structures for indexing set-valued attributes designed to speed up set equality, subset and superset queries. All index structures are based on traditional techniques, namely <b>signatures</b> and inverted <b>files.</b> More specifically, we consider sequential <b>signature</b> <b>files,</b> <b>signature</b> trees, extendible signature hashing, and a B-tree based implementation of inverted lists. The latter is refined by a compression scheme {{in order to keep}} space requirements within acceptable bounds. The performance study is based on real implementations subjected to a benchmark accounting for different set sizes, domain sizes, and data distributions (uniform and skewed) ...|$|R
25|$|The {{application}} {{is free of}} charge, and claims to be fast and to provide up-to-date protection against threats. Virus <b>signature</b> <b>files</b> are stored in the cloud, not on individual computers, so update downloads are not required. Once a virus is detected and blocked for one user, all other Immunet users receive the same protection almost instantly. The software is noted {{for its ability to}} allow individual users to easily author their own signatures.|$|R
