4|25|Public
5000|$|XInclude - <b>server-side</b> <b>include</b> file {{processing}} (limited support) ...|$|E
5000|$|A <b>Server-Side</b> <b>Include</b> {{are very}} {{uncommon}} {{and are not}} typically enabled on a default web server. A <b>server-side</b> <b>include</b> {{can be used to}} gain remote code execution on a vulnerable web server. [...] The following code is vulnerable to a remote-file include vulnerability:The above code is not an XSS vulnerability, but rather including a new file to be executed by the server.|$|E
40|$|Pages are the {{fundamental}} unit of presentation on the Web, not (necessarily) {{a unit of}} implementation [...] one page in your diagram may correspond to multiple HTML files (as in a frameset interface) or multiple units of code (as in a <b>server-side</b> <b>include</b> or database-driven implementation). Visual Vocabulary Quick Reference file Files are parcels of data without navigational properties. They are delivered to the user for use outside a Web browser environment (such as audio or video files, stand-alone documents like PDFs, or executables). conditional area A conditional area is used when one or more conditions applies {{to a group of}} pages. Conditional areas are applied most commonly i...|$|E
5000|$|An HTML {{document}} may be pre-composed by {{the server}} before delivery {{to the client}} using <b>Server-Side</b> <b>Includes</b> or another <b>server-side</b> application.|$|R
5000|$|<b>Server-Side</b> <b>Includes</b> and PHP allowed {{shared content}} to be edited once and {{automatically}} delivered to the client {{as part of a}} finished page; as server CPU and connection speeds increased, the extra work required to do this on the fly became a lesser consideration.|$|R
50|$|Frames {{were used}} to display and {{navigate}} early web apps, such as web chat sites and online magazines. Frames {{had the advantage of}} allowing elements to be displayed sitewide without requiring server features such as <b>server-side</b> <b>includes</b> or CGI support. These features were not common on early web servers accessible to the public.|$|R
40|$|Frustrated by the {{time-consuming}} {{process of}} updating subject Web pages, librarians at Samford University Library (SUL) developed {{a process for}} streamlining updates using <b>Server-Side</b> <b>Include</b> (SST) commands. They created text files on the library server that corresponded to each of 143 online resources. Include commands within the HTML document for each subject page refer to these text files, which are pulled into the page as it loads on the user's browser. For the user, the process is seamless. For librarians, time spent in updating Web pages is greatly reduced; changes to text files on the server result in simultaneous changes to the edited resources across the library's Web site. For small libraries with limited online resources, this process may provide an elegant solution to an ongoing problem...|$|E
50|$|<b>Server-side</b> {{operations}} <b>include</b> {{both those}} that are carried out in response to client requests, and non-client-oriented operations such as maintenance tasks.|$|R
3000|$|Fault-tolerance: The {{state of}} each <b>server-side</b> component, <b>including</b> agents themselves, is copied to other nodes making {{the whole system}} {{resilient}} to hardware and software failures.|$|R
5000|$|Nimbus SRP is a Java library {{providing}} a verifier generator, client and <b>server-side</b> sessions. <b>Includes</b> interfaces for custom password key, client and server evidence message routines. No external dependencies. Released under the Apache 2.0 license.|$|R
50|$|ICQ 2001 <b>included</b> <b>server-side</b> {{storage of}} the contact list, {{allowing}} for its synchronization on multiple computers.|$|R
40|$|This paper first investigates and {{analyzes}} security holes {{concerning the}} use of <b>Server-Side</b> <b>Includes</b> (SSI) {{in some of the}} most used Web server software packages. We show that, by exploiting features of SSI, one could seri-ously compromise Web server security. For example, we demonstrate how users can gain access to information they are not supposed to see, and how attackers can crash a Web server computer by having an HTML file execute a simple program. Such attacks can be made with no trace left behind. We have successfully carried out all the at-tacks described in this paper on dummy servers we set up for this investigation. We then suggest several practical security measures to prevent a Web server from such at-tacks. 1...|$|R
50|$|The suite also {{included}} a number of <b>server-side</b> infrastructure components, <b>including</b> distributed event management and tools for managing large populations of iPlanet server instances.|$|R
5000|$|In a {{client-server}} architecture, on {{the other}} hand, a persistent connection is typically used so that server state can be managed. This [...] "state" [...] <b>includes</b> <b>server-side</b> cursors, , connection-specific functional settings, and so on.|$|R
40|$|At {{the time}} we began development, we took it on faith that the Servlet API would soon be ported to other web servers (Apache, Netscape, IIS), and of course our faith has been amply rewarded. Not only are Apache, NSAPI, and ISAPI servlet plugins {{available}} from several vendors, but high-powered, Java technology-enabled application servers like WebLogic's Tengah and ATG's Dynamo are fully servlet-compliant. The HTML/JavaScript front end gave us the most lightweight platform-independent solution and was adequate for our needs because our interface, besides a few forms, consisted mostly of information presentation. The Servlet API provided us with a simple, robust, and powerful object framework for building this HTML-based application, including objects for retrieving arguments from a web-server request, a simple stream interface for sending the HTML response to the client, and even more advanced functionality, such as cookies and <b>server-side</b> <b>includes</b> of servlets. This study involves extensive use of java servlets to develop an interactive course website. Some techniques of Online Educations are implemented in this paper. The packages used are Java Development Kit, Java Servlet Development Kit, a Relationa...|$|R
50|$|A web {{container}} handles {{requests to}} servlets, JavaServer Pages (JSP) files, {{and other types}} of files that <b>include</b> <b>server-side</b> code. The Web container creates servlet instances, loads and unloads servlets, creates and manages request and response objects, and performs other servlet-management tasks.|$|R
25|$|Office 2007 {{includes}} {{new applications}} and <b>server-side</b> tools, <b>including</b> Microsoft Office Groove, a collaboration and communication suite for smaller businesses, which was originally developed by Groove Networks before being acquired by Microsoft in 2005. Also included is Office SharePoint Server 2007, a major revision to the server platform for Office applications, which supports Excel Services, a client-server architecture for supporting Excel workbooks that are shared {{in real time}} between multiple machines, and are also viewable and editable through a web page.|$|R
5000|$|In August 2002, Paul Graham {{published}} an influential paper, [...] "A plan for spam", describing a spam-filtering technique using improved Bayesian filtering and variants of this were soon implemented {{in a number}} of products. <b>including</b> <b>server-side</b> email filters, such as DSPAM, SpamAssassin, and SpamBayes.|$|R
50|$|QUnit {{is a test}} {{automation}} framework used to {{test the}} jQuery project. The jQuery team developed it as an in-house unit testing library. The jQuery team uses it to test its code and plugins, but it can test any generic JavaScript code, <b>including</b> <b>server-side</b> JavaScript code.|$|R
30|$|Big Earth Data Analytics {{requires}} “shipping {{the code}} to the data” – which, however, begs the question: {{what kind of}} code? Certainly not procedural code (like C++ or python) which requires strong coding skills on the user side and also is highly insecure from a service operator perspective; rather, some safe, high-level query language is of advantage, in particular as it also enables strong <b>server-side</b> optimizations, <b>including</b> parallelization, distributed processing, and use of mixed CPU/GPU, to name a few. The ISO SQL database language acts as a shining example here.|$|R
25|$|Initially only {{implemented}} client-side in web browsers, JavaScript {{engines are}} now embedded {{in many other}} types of host software, <b>including</b> <b>server-side</b> in web servers and databases, and in non-web programs such as word processors and PDF software, and in runtime environments that make JavaScript available for writing mobile and desktop applications, including desktop widgets.|$|R
40|$|Security is an {{essential}} requirement of web-based enterprise applications. This report overviews {{the state of the}} art in security services of today’s commercial middleware platforms typically used to build this family of applications. The overview includes security services of large scale <b>server-side</b> middleware platforms, <b>including</b> web services, as well as their small footprint counterparts for mobil...|$|R
40|$|Survivable storage systems must {{maintain}} data {{and access to}} it in the face of malicious and accidental problems with storage servers, interconnection networks, client systems, and user accounts. These four component types can be grouped into two classes: server-side problems and client-side problems. The PASIS architecture addresses <b>server-side</b> problems, <b>including</b> the connections to those servers, by encoding data with threshold schemes and distributing trust amongst sets of storage servers. Self-securing storage addresses client and user account problems by transparently auditing accesses and versioning data within each storage server. Thus, PASIS clients use threshold schemes to protect themselves from compromised servers, and self-securing servers use full access auditing to protect their data from compromised clients. Together, these techniques can provide truly survivable storage systems...|$|R
40|$|Project Specification The {{aim of this}} openlab summer student {{project is}} to enhance mobile user {{experience}} for Invenio digital library services. The project will use the Apache Cordova platform to build native Android and iOS applications. The application itself will be built using HTML 5 and JavaScript technologies. An initial prototype of the application, targeting mostly search functionality, is available. The selected student will enrich existing functionality as well as address personal features related to tagging of resources or notifications about new publications of interest. The project will <b>include</b> <b>server-side</b> programming in Python to enrich REST API of the digital library platform. Abstract In this project, a mobile application is developed for the Invenio digital library system, using HTML 5 with Apache Cordova. Alternative HTML 5 technologies are compared and decisions justified. The features of a prototype are reimplemented {{with a view to}} improving performance, usability, and maintainability. OAuth 2 authentication is implemented, and further work proposed...|$|R
2500|$|ASP.NET Web pages, known officially as Web Forms, are {{the main}} {{building}} blocks for application development in ASP.NET. There are two basic methodologies for Web Forms, a web application format and a web site format. Web applications need to be compiled before deployment, while web sites structures allows the user to copy the files directly to the server without prior compilation. Web forms are contained in files with a [...] ".aspx" [...] extension; these files typically contain static (X)HTML markup or component markup. The component markup can <b>include</b> <b>server-side</b> Web Controls and User Controls that have been defined in the framework or the web page. For example, a textbox component can be defined on a page as , which is rendered into a html input box. Additionally, dynamic code, which runs on the server, can {{be placed in a}} page within a block <% -- dynamic code -- %>, which is similar to other Web development technologies such as PHP, JSP, and ASP. With ASP.NET Framework 2.0, Microsoft introduced a new code-behind model that lets static text remain on the [...]aspx page, while dynamic code remains in an [...]aspx.vb or [...]aspx.cs or [...]aspx.fs file (depending on the programming language used).|$|R
40|$|CMS has {{developed}} approximately one million lines of C++ code and uses many more from HEP, Grid and public domain projects. We describe {{a suite of}} tools which help to manage this complexity by measuring software dependencies, quality metrics, and CPU and memory performance. This coherent environment integrates and extends existing open-source tools where possible and provides new in-house components where a suitable solution does not already exist. This is a freely available environment with graphical user interface which can be run on any software without the need to recompile or instrument it. We have developed ignominy which performs software dependency analysis of source code, binary products and external software. CPU profiling is provided based on oprofile, with added features such as profile snapshots, distributed profiling and aggregate profiles for farm systems <b>including</b> <b>server-side</b> tools for collecting profile data. Finally, we have developed a low-overhead performance and memory profiling tool, MemProf, which can perform (gprof-style) hierarchical performance profiling, {{in a way that}} works with multiple threads and dynamically loaded libraries (unlike gprof). It also gathers exact memory allocation profiles including which code allocates most, in what sizes of chunks, for how long, where the memory is getting freed and where it is getting leaked. We describe this tool suite and how it has been used to enhance the quality of CMS software...|$|R
40|$|Thus far, we’ve {{written about}} {{concurrency}} {{as if the}} only way to build concurrent applications is to use threads. Like many things in life, this is not completely true. Specifically, a different style of concurrent programming is often used in both GUI-based applications [O 96] as well as some types of internet servers [PDZ 99]. This style, known as event-based concurrency, has become popular in some modern sys-tems, <b>including</b> <b>server-side</b> frameworks such as node. js [N 13], but its roots are found in C/UNIX systems that we’ll discuss below. The problem that event-based concurrency addresses is two-fold. The first is that managing concurrency correctly in multi-threaded applications can be challenging; as we’ve discussed, missing locks, deadlock, and other nasty problems can arise. The second is that in a multi-threaded application, the developer has little or no con-trol over what is scheduled at a given moment in time; rather, the programmer simply creates threads and then hopes that the under-lying OS schedules them in a reasonable manner across available CPUs. Given the difficulty of building a general-purpose scheduler that works well in all cases for all workloads, sometimes the OS will schedule work {{in a manner that is}} less than optimal. The crux: THE CRUX: HOW TO BUILD CONCURRENT SERVERS WITHOUT THREADS How can we build a concurrent server without using threads, and thus retain control over concurrency as well as avoid some of the problems that seem to plague multi-threaded applications...|$|R

