195|720|Public
5|$|In April 1992, {{the second}} YF-22 crashed while landing at Edwards AFB. The test pilot, Tom Morgenfeld, escaped without injury. The {{cause of the}} crash {{was found to be}} a flight control <b>software</b> <b>error</b> that failed to prevent a pilot-induced oscillation.|$|E
25|$|PSLV-D1 was {{the first}} mission of the PSLV program. The rocket carried IRS-1E {{satellite}} but could not deploy it as the mission failed due to a <b>software</b> <b>error</b> in on board guidance and control processor. PSLV-D1 was launched at 05:12 a.m. IST on 20 September 1993. This mission is the only full failed mission under the PSLV program.|$|E
25|$|Later, SDIO {{worked with}} the Navy to test the LEAP on the Terrier missile. The Terrier LEAP {{demonstration}} program lasted from 1991 into 1995 and consisted of four flight tests. Two of these were intercept tests in early 1995; both failed to interceptâ€”the first had a <b>software</b> <b>error</b> in the second-stage booster, the second had a squib (pyrotechnic switch to connect power) in the kinetic kill vehicle that was mounted backwards and failed to fire.|$|E
40|$|This paper {{analyzes}} {{the root causes}} of safety-related <b>software</b> <b>errors</b> in safety-critical, embedded systems. The results show that <b>software</b> <b>errors</b> identified as potentially hazardous to the system tend to be produced by different error mechanisms than non- safety-related <b>software</b> <b>errors.</b> Safety-related <b>software</b> <b>errors</b> are shown to arise most commonly from (1) discrepancies between the documented requirements specifications and the requirements needed for correct functioning of the system and (2) misunderstandings of the software's interface {{with the rest of the}} system. The paper uses these results to identify methods by which requirements errors can be prevented. The goal is to reduce safety-related <b>software</b> <b>errors</b> and to enhance the safety of complex, embedded systems...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThe occurrence and detection of <b>software</b> <b>errors</b> was studied in four <b>software</b> projects. <b>Errors</b> were analyzed {{with respect to}} complexity measures of individual subroutines. This paper also provides definitions of error categories and types. The detailed documentation of the software production effort allowed both a qualitative and Quantitative analysis of <b>software</b> <b>errors</b> with respect to error types. [URL] Commander, Federal German Nav...|$|R
5000|$|... {{inducing}} <b>software</b> <b>errors</b> using radiation (e.g., microwaves or ionising radiation) ...|$|R
25|$|Cassini {{released}} the Huygens probe on December 25, 2004, {{by means of}} a spring and spiral rails intended to rotate the probe for greater stability. It entered the atmosphere of Titan on January 14, 2005, and after a two-and-a-half-hour descent landed on solid ground. Although Cassini successfully relayed 350 of the pictures that it received from Huygens of its descent and landing site, a <b>software</b> <b>error</b> failed to turn on one of the Cassini receivers and caused the loss of another 350 pictures. While landing, for caution, NASA loaded Huygens with 3 parachutes.|$|E
25|$|Two Soviet probes {{were sent}} to Mars in 1988 {{as part of the}} Phobos program. Phobos 1 {{operated}} normally until an expected communications session on 2 September 1988 failed to occur. The problem was traced to a <b>software</b> <b>error,</b> which deactivated attitude thrusters causing the spacecrafts' solar arrays to no longer point at the Sun, depleting Phobos 1 batteries. Phobos 2 operated normally throughout its cruise and Mars orbital insertion phases on January 29, 1989, gathering data on the Sun, interplanetary medium, Mars, and Phobos. Shortly before the final phase of the mission, during which the spacecraft was to approach within 50 m of Phobos' surface and release two landers, one a mobile 'hopper', the other a stationary platform, contact with Phobos 2 was lost. The mission ended when the spacecraft signal failed to be successfully reacquired on March 27, 1989. The cause of the failure was determined to be a malfunction of the on-board computer.|$|E
500|$|Reviewers {{highlighted}} {{technical issues}} in the game. The eight door maze room {{was thought to be}} a bug, a <b>software</b> <b>error,</b> by two people at ZX Computing magazine. Because the game contains no reset feature they reloaded the game from cassette in order to continue playing. The player character's movements were criticised for being jerky and prone to stopping at infrequent intervals. One of Crash magazine's staff stated that the boy scout's movement to the left was quick; [...] "as if there's a force ten gale blowing to the left." [...] They added [...] "When any attempt is made to move right, all the moving characters on the screen slow right down." [...] In-game objects are removed from view when either the player character or one of the mansion staff move in front of them. When the player redefines the game's keyboard controls, allowing them to choose which keys move the boy scout during play, the pause key and music toggle key are not included. As a result it is possible to double-up movement controls with these two functions, effectively causing the game to pause and unpause or for the music to toggle constantly as the player moves in that direction.|$|E
40|$|This Bachelor`s thesis {{concerns}} {{with the process}} of fault detection in software programs. It contains hierarchically organized typology of <b>software</b> <b>errors,</b> gained by research of available literature and analysis of events responsible for influencing the <b>software</b> <b>errors</b> evolution gathered into a typology of factors inspired by cognitive psychology. It contains also comparison of software evolution techniques and methodologies from the point of product validation and verification. The Bachelor`s thesis was written with respect to needs and requests of the commissioning company focusing on the Voice over IP (VoIP) software evolution. The thesis aims to suggest modifications of <b>software</b> <b>errors</b> database and error causes database...|$|R
40|$|This thesis {{describes}} {{a technique to}} build replicated services that combines Byzantine fault tolerance with work on abstract data types. Tolerating Byzantine faults is important because <b>software</b> <b>errors</b> are {{a major cause of}} outages and they can make faulty replicas behave arbitrarily. Abstraction hides implementation details to enable the reuse of existing service implementations and to improve the ability to mask <b>software</b> <b>errors...</b>|$|R
40|$|Abstract. The mobile {{devices have}} gained much {{functionality}} and intelligence {{with the growth}} of network technologies, the abundance of network resources, and the increase of various services. At the same time they are also becoming complicated and related problems to services and resources of mobile devices frequently occur. Since it is not easy for the manufacturers to completely remove the <b>software</b> <b>errors</b> of the mobile devices before they sell them, the users face inconvenience caused by them and the credibility of the manufacturers also decreases. So far, no definitive method has been given to debug <b>software</b> <b>errors</b> of the sold mobile devices. In this paper, we propose a debugging method to find and correct the <b>software</b> <b>errors</b> of the sold mobile devices based on the Open Mobile Alliance (OMA) Device Management (DM) standard. We define the managed objects (MOs) for composing the execution image and design the management operations for collecting MOs at the central server. We present a system that we have developed based on the MOs and the management operations. We also present how to debug <b>software</b> <b>errors</b> with the execution image and JTAG debugger...|$|R
2500|$|On June 29, 2001, {{there was}} nearly a serious {{accident}} at the Oschatz crossover on the Leipzig-Dresden railway line. The crossover {{was set to}} diverging with a [...] speed limit but the LZB system displayed a [...] limit. The driver of ICE 1652 recognized the diverging signal and managed to slow down to [...] before the crossing and the train did not derail. A <b>software</b> <b>error</b> in the LZB computer was suspected as the cause.|$|E
2500|$|PSLV-D1 was {{launched}} at 05:12 a.m. IST on 20 September 1993 from Satish Dhawan Space Centre [...] (then called [...] "Sriharikota Launching Range"). A large disturbance {{occurred at the}} point of second stage separation and one of the retro rockets of the second stage failed due to <b>software</b> <b>error</b> in on board guidance and control processor. About 12 minutes after launch, the vehicle fell back to earth and crashed in the Bay of Bengal. The satellite IRS-1E could not be placed in orbit and the mission was a total failure.|$|E
2500|$|On April 9, 2002 on the Hanover-Berlin {{high-speed}} rail line a fault in the LZB line center computer brought four LZB controlled trains {{to a stop}} with two trains in each line direction being halted in the same signalling block (Teilblockmodus - divided block control). When the computer was rebooted it signaled [...] to the trains in front and [...] to the following trains. The drivers of the following trains did not proceed however - one driver saw the train {{in front of him}} and the other driver double-checked with the operations center which had warned him prior to departure, so two possible collisions were averted. As a consequence of this incident, the two mainline train operators (DB Cargo and DB Passenger Transport) issued an instruction to their drivers to be especially cautious during periods of LZB outage when the system is running in divided block mode. The cause was a <b>software</b> <b>error.</b>|$|E
25|$|The EULA removes iTunes' {{responsibility}} regarding {{damage to}} the consumer's computer caused by <b>software</b> <b>errors</b> even though responsibility cannot be waived in Scandinavian Law.|$|R
40|$|In this paper, we {{describe}} {{a method of}} execution retry for bypassing <b>software</b> <b>errors</b> based on checkpointing, rollback, message reordering and replaying. We demonstrate how rollback techniques, previously developed for transient hardware failure recovery, {{can also be used}} to recover from software faults by exploiting message reordering to bypass <b>software</b> <b>errors.</b> Our approach intentionally increases the degree of nondeterminism and the scope of rollback when a previous retry fails. Examples from our experience with telecommunications software systems illustrate the benefits of the scheme...|$|R
50|$|Glitches/bugs are <b>software</b> <b>errors</b> {{that can}} cause drastic {{problems}} within the code, and typically go unnoticed or unsolved during the production of said <b>software.</b> These <b>errors</b> can be game caused or otherwise exploited until a developer/development team repairs them with patches. Complex software is rarely bug-free or otherwise free from errors upon first release.|$|R
5000|$|In 1990, a <b>software</b> <b>error</b> {{caused a}} fueling machine error, {{damaging}} a fuel channel.|$|E
5000|$|July 5, 2015 - A <b>software</b> <b>error</b> {{prevented}} the platform from lowering, hindering the ride's operation.|$|E
5000|$|October 6, 2011: A <b>software</b> <b>error</b> knocks out Anik F2, {{one of the}} two {{satellites}} serving Shaw Direct customers, {{for approximately}} one day.|$|E
5000|$|Opponents {{have also}} argued that defects in the machines, damage from normal wear-and-tear, or <b>software</b> <b>errors</b> could focus an intense dose of {{radiation}} on just one spot of the body. The researchers write: ...|$|R
40|$|<b>Software</b> <b>errors</b> are a {{major cause}} of outages and they are {{increasingly}} exploited in malicious attacks. Byzantine fault tolerance allows replicated systems to mask some <b>software</b> <b>errors</b> but it is expensive to deploy. This paper describes a replication technique, BASE, which uses abstraction to re-duce the cost of Byzantine fault tolerance and to improve its ability to mask <b>software</b> <b>errors.</b> BASE reduces cost because it enables reuse of off-the-shelf service implementations. It improves availability because each replica can be repaired periodically using an abstract view of the state stored by correct replicas, and because each replica can run distinct or non-deterministic service implementations, which reduces the probability of common mode failures. We built an NFS service where each replica can run a different off-the-shelf file system implementation, and an object-oriented database where the replicas ran the same, non-deterministic imple-mentation. These examples suggest that our technique can be used in practice [...] in both cases, the implementation re-quired only a modest amount of new code, and our perfor-mance results indicate that the replicated services perform comparably to the implementations that they reuse. 1...|$|R
40|$|This thesis {{describes}} {{a technique to}} build replicated services that combines Byzantine fault tolerance with work on abstract data types. Tolerating Byzantine faults is important because <b>software</b> <b>errors</b> are {{a major cause of}} outages and they can make faulty replicas behave arbitrarily. Abstraction hides implementation details to enable the reuse of existing service implementations and to improve the ability to mask <b>software</b> <b>errors.</b> We improve resilience to <b>software</b> <b>errors</b> by enabling the recovery of faulty replicas using state stored in replicas with distinct implementations; using an opportunistic N-version programming technique that runs distinct, off-the-shelf implementations at each replica to reduce the probability of common mode failures; and periodically repairing each replica using an abstract view of the state stored by the correct replicas in the group, which improves tolerance to faults due to software aging. We have built two replicated services that demonstrate the use of this technique. The first is an NFS service where each replica runs a different off-the-shelf file system implementation. The second is a replicated version of the Thor object-oriented database. In this case, the methodolog...|$|R
5000|$|Although a <b>software</b> <b>error</b> was {{identified}} as the direct cause, this {{was considered to be}} made possible by system design failures and management issues: ...|$|E
50|$|On November 9, 2009, the company's {{subscribers}} {{lost the}} ability to send and receive calls and text messages. The company confirmed the outage via Twitter and later stated that five percent of its user base had been affected. It blamed a <b>software</b> <b>error</b> for the service interruption, stating that a backend system <b>software</b> <b>error</b> had generated abnormal congestion on the network. The root cause was determined and steps were taken to update a patch on the backend as a permanent resolution.|$|E
5000|$|Part 1 (mandatory services): ARINC 653 {{partition}} management, Cold {{start and}} warm start definition, Application <b>software</b> <b>error</b> handling, ARINC 653 compliance, Ada and C language bindings; ...|$|E
40|$|A set {{of errors}} {{known to have}} led to {{security}} breaches in computer systems was analyzed. The analysis led to a categorization of these errors. After examining several proposed schemes for the categorization of <b>software</b> <b>errors</b> a new scheme was developed and used. This scheme classi es errors by their cause, {{the nature of their}} impact, and the typeofchange, or x, made to remove the error. The errors considered in this work are found in a database maintained by the COAST laboratory. The categorization is the rst step in the investigation of the e ectiveness of various measures of code coverage in revealing <b>software</b> <b>errors</b> that might lead to security breaches...|$|R
50|$|The {{first class}} 415 train was {{assembled}} {{in the summer of}} 1998, when testing began. Trials with the activated tilting system started in October 1998. <b>Software</b> <b>errors</b> delayed the commissioning. The first class 411 was delivered in early 1999.|$|R
50|$|Transaction {{processing}} guards against {{hardware and}} <b>software</b> <b>errors</b> that might leave a transaction partially completed. If {{the computer system}} crashes {{in the middle of}} a transaction, the transaction processing system guarantees that all operations in any uncommitted transactions are cancelled.|$|R
50|$|Mars Polar Lander - Failed during EDL. The {{failure was}} {{believed}} to be the consequence of a <b>software</b> <b>error.</b> The precise cause is unknown for lack of real-time telemetry.|$|E
50|$|In 2002 German {{citizens}} were tipped off about wiretapping when a <b>software</b> <b>error</b> {{led to a}} phone number allocated to the German Secret Service being listed on mobile telephone bills.|$|E
5000|$|Under {{manufacturing}} defects, {{a plaintiff}} needs {{to show that}} the autonomous car failed to work as specified by the manufacturer. In the case of autonomous cars, however, this presents a major hurdle because no court has applied manufacturing defects to software, which is not something tangible that is manufactured. If a crash stems from a <b>software</b> <b>error,</b> then the traditional product liability law on manufacturing defects may not suffice. A greater understanding of how software will be treated under this liability law, particularly when a <b>software</b> <b>error</b> causes physical parts to malfunction, needs to be explored.|$|E
5000|$|Transient faults {{are hard}} to detect, {{and there are no}} well defined faults to detect. Errors in RAM {{introduced}} by transient faults are often called <b>software</b> <b>errors,</b> the following examples are possible factors that will contribute to transient faults : ...|$|R
50|$|This {{mechanism}} {{enables the}} automated handling of <b>software</b> <b>errors</b> {{independent of the}} application source code and of its developers. It is a direct artifact of the runtime engine paradigm and it enables unique advantages to the software lifecycle that were unavailable before.|$|R
40|$|<b>Software</b> <b>errors</b> are a {{major cause}} for system failures. To {{effectively}} design tools and support for detecting and recovering from software failures requires a deep understanding of bug 1 characteristics. Recently, software and its development process have significantly changed in many ways, including more help from bug detection tools, shift towards multi-threading architecture, the opensource development paradigm and increasing concerns about security and user-friendly interface. Therefore, results from previous studies may not be applicable to present software. Furthermore, many new aspects such as security, concurrency and open-sourcerelated characteristics have not well studied. Additionally, previous studies {{were based on a}} small number of bugs, which may lead to non-representative results. To investigate the impacts of the new factors on <b>software</b> <b>errors...</b>|$|R
