33|1390|Public
5000|$|... (an improved) Adaptive Forward Lighting - bi-xenon, gas {{discharge}} headlamps with variable light beam distribution in width, direction and range. Advanced Front-Lighting System (AFS), static cornering light, complemented by {{daytime running lights}} with LEDs. Sensors and <b>software</b> <b>monitor</b> the surroundings, traffic and weather conditions so that the system can activate the appropriate lighting function.|$|E
50|$|The VGA {{interface}} is not {{engineered to}} be hotpluggable (so that the user cannot connect or disconnect the output device while the host is running), although in practice {{this can be}} done and usually does not cause damage to the hardware or other problems. However, nothing in the design ensures that the ground pins form the first make or the last break in the connection, so hotplugging may introduce surges in signal lines {{that may or may not}} be adequately protected against damage. Also, depending on the hardware and <b>software,</b> <b>monitor</b> detection is sometimes unreliable when hotplugging a VGA connection.|$|E
5000|$|The signal {{induced by}} a {{potential}} gravitational wave is thus [...] "embedded" [...] {{in the light}} intensity variations detected at the interferometer output. Yet, several external causes—globally denoted as noises—changes the interference pattern perpetually and significantly. Should nothing be done to remove or mitigate them, the expected physical signals would be buried in noise and would then remain undetectable. The design of detectors like Virgo and LIGO thus requires a detailed inventory of all noise sources which could impact the measurement, allowing a strong and continuing effort to reduce {{them as much as}} possible. During the data taking periods, dedicated <b>software</b> <b>monitor</b> in real time the noise levels in the interferometer and deep studies are carried out to identify the loudest noises and mitigate them. Each period during which a detector is found to be [...] "too noisy" [...] is excluded from the data analysis: these deadtimes thus need to be reduced as much as possible.|$|E
40|$|<b>Software</b> <b>monitoring</b> is a well-suited {{technique}} {{to support the}} development of dependable systems, and has been widely applied not only for this purpose, but also for others such as debugging, security, performance, etc. <b>Software</b> <b>monitoring</b> consists of observing the dynamic behavior of programs when executed, by detecting particular events and states of interest, and analyzing this information for specific purposes...|$|R
40|$|In this paper, we {{introduce}} the new technique of High-Confidence <b>Software</b> <b>Monitoring</b> (HCSM), which {{allows one to}} perform <b>software</b> <b>monitoring</b> with bounded overhead and concomitantly achieve high confidence in the observed error rates. HCSM is formally grounded {{in the theory of}} supervisory control of finite-state automata: overhead is controlled, while maximizing confidence, by disabling interrupts generated by the events being monitored— and hence avoiding the overhead associated with processing these interrupts—for as short a time as possible under the constraint of a user-supplied target overhead Otarget. HCSM is a general technique for <b>software</b> <b>monitoring</b> in that HCSM-based instrumentation can be attached at any system interface or API. A generic controller implements the optimal control strategy described above. As a proof of concept, and as a practical framework for <b>software</b> <b>monitoring,</b> we have implemented HCSM-based monitoring for both bounds checking and memory leak detection. We have further conducted an extensive evaluation of HCSM’s performance on several real-world applications, including th...|$|R
5000|$|Enterprise Single signon <b>software</b> <b>monitors</b> {{applications}} {{launched by}} a user and automatically populates login IDs and passwords.|$|R
40|$|The {{study of}} medical signal {{processing}} {{to monitor the}} patient {{with the help of}} <b>software</b> <b>monitor</b> was discussed. The main advantage of the study is that it offers, in one intelligent monitor, the fusion of multiple sources of information. The application of the <b>Software</b> <b>Monitor</b> were related to high dependency care which give satisfactory care to those patient who fail to meet admission criteria for intensive care. In order to develop the data visualization and fusion algorithms for the <b>Software</b> <b>Monitor,</b> database system was developed at the John Radcliffe hospital...|$|E
40|$|An {{approach}} to the performance evaluation of a communication protocol operating in a concurrent environment is described. The method defines suitable performance indices and outlines {{the implementation of a}} <b>software</b> <b>monitor</b> embedded in the protocol. The defined performance indices allow the protocol performance to be evaluated both in the adopted implementation and with regard to the application requirements...|$|E
40|$|The <b>Software</b> <b>Monitor</b> is a {{portable}} PC which {{is capable of}} processing and analysing in real time the vital physiological signals recorded non-invasively from healthy subjects or unwell hospital patients. Its main advantage is that it offers, in one intelligent monitor, the fusion of multiple sources of information. This {{makes it possible to}} track physiological instability (since unexpecte...|$|E
40|$|To {{ensure the}} {{reliability}} of complex software systems, runtime <b>software</b> <b>monitoring</b> is widely accepted to monitor and check system execution against formal properties specification at runtime. Runtime <b>software</b> <b>monitoring</b> can detect property violations, however it can not explain why a violation has occurred. Diagnosing runtime property violations is still a challenge issue. In this paper, a novel diagnosis method based on dependency rules is constructed to diagnose runtime property violations in complex software systems. A set of rules is formally defined to isolate software fault from hardware fault, then software faults is localized by combining trace slicing and dicing. The method is implemented in the runtime <b>software</b> <b>monitoring</b> system SRMS, and experimental results demonstrate that the method can effectively isolate and locate the related faults with property violations. © 2011 IEEE...|$|R
5000|$|IT Operations. Hitachi IT {{operations}} <b>software</b> <b>monitors</b> the IT {{infrastructure and}} simplifies IT administration, including security and asset management, and software distribution.|$|R
5000|$|C V Ramamoorthy, K H Kim, and W T Chen. Optimal Placement of <b>Software</b> <b>Monitors</b> Aiding Systematic Testing. IEEE Trans. Software Eng. (...) , 1(4):403-411, 1975.|$|R
40|$|Measuring {{the quality}} of {{software}} is gaining more and more attention from the industry, since high quality systems generally have a lower total cost of ownership. In order to give both managers and software developers insight in {{the quality of}} the software system they develop, a software quality monitoring system is needed. The metrics calculated on the software system need to give a comprehensive, yet meaningful report. The Software Improvement Group has developed the <b>Software</b> <b>Monitor,</b> an analysis and on-line reporting tool for monitoring the quality of a software system during development. In this paper, we discuss the requirements for the <b>Software</b> <b>Monitor</b> and explain why currently existing solutions do not fulfill all the needs. Furthermore, we give an overview of the implementation of the monitor and relate the different aspects to the requirements. To illustrate the implementation, we show a case-study in which we describe a monitor for a commercial ERP-language...|$|E
40|$|In this handy, compact guide, you'll {{explore a}} ton of {{powerful}} Ubuntu Linux commands while you learn to use Ubuntu Linux as the experts do: from the command line. Try out more than 1, 000 commands to find and get <b>software,</b> <b>monitor</b> system health and security, and access network resources. Then, apply the skills you learn from this book to use and administer desktops and servers running Ubuntu, Debian, and KNOPPIX or any other Linux distribution...|$|E
40|$|This thesis {{describes}} the design, development, implementation, and output {{results of a}} <b>software</b> <b>monitor</b> program which measures job turnaround time on an IBM 360 system under OS/MFT and HASP. This {{program is designed to}} be used in conjunction with other monitors and accounting data to measure the performance of the System/ 360. In this thesis, relevant RASP logic is summarized, followed by design specifications of the monitor, solutions to design problems, and a full description of the monitor's program logic. Actual results obtained by the monitor are included. Ball State UniversityMuncie, IN 47306 Thesis (M. S.) [...] Ball State University, 1977...|$|E
40|$|<b>Software</b> runtime <b>monitoring</b> {{has been}} used to {{increase}} the dependability of software. This paper focuses on <b>software</b> runtime <b>monitoring</b> techniques and tools. A generic <b>software</b> runtime <b>monitoring</b> model is presented, which consists of five basic elements, i. e., Monitored Object Features, Monitoring Access Methods, Execution Relationships, Runtime Monitor and Platform Dependencies. This model is an innovation in <b>software</b> <b>monitoring</b> fields. This paper gives some features of each element. Based on these features, researchers can use the model to comprehend and analyze runtime monitoring techniques and tools. The objective {{of this paper is to}} help researchers and users to identify the difference and the basic principles of <b>software</b> runtime <b>monitoring</b> techniques and tools. This paper also shows a result of relationship between techniques and features, through the result, we can understand the development trends of the techniques and tools, such as, what features are concerned more, and what features are concerned less. </span...|$|R
5000|$|Standard and {{customized}} laser {{and resistance}} systems - Application qualification and testing, system specification, assembly, system verification, and installation and training. Included are gloveboxes and dryboxes, tooling, motion, optics, <b>software,</b> <b>monitoring.</b>|$|R
50|$|Huaptec got {{the first}} patent in February 2010 for SNMPAGENT {{repeater}} <b>monitoring</b> <b>software</b> (SnmpAgent) V1.0. The same year Huaptec patented 4 more software developments such as LCD repeater <b>monitoring</b> <b>software</b> (LCD <b>monitoring)</b> V1.0, OMC repeater topology management <b>software,</b> OMC repeater <b>monitoring</b> center software(OMC) V1.0 and optical repeater <b>monitoring</b> <b>software</b> V1.0. In 2012 Huaptec acquired a patent for invention of multiple system, multiband, multi-carrier digital repeater based on FPGA. All in all the company owns 1 patent for invention, 6 patents for section material and appearance and 14 patents for software.|$|R
40|$|A {{wide range}} of {{low-level}} security policies can be expressed as rules on metadata tags and enforced {{using a combination of}} a hardware rule cache and a <b>software</b> <b>monitor.</b> We present a generic framework for defining tag-based reference monitors (or micro-policies) on a simple tagged RISC processor, formalize this framework in Coq, and use it to define and verify micro-policies for dynamic sealing, control-flow integrity, memory safety, and compartmentalization; in addition, we show how to use the tagging mechanism to protect its own integrity. For each micro-policy, we prove by refinement that the hardware running a correctly implemented monitor embodies a high-level specification characterizing a useful security property. 1...|$|E
40|$|This paper {{describes}} the static and dynamic task allocation tools in PVM environment for distributed memory parallel systems. For the static mapping the objective function {{is used to}} evaluate the optimality of the allocation of a task graph onto a processor graph. Together with our optimization method also augmented simulated annealing and heuristic move exchange methods in the distributed form are implemented. For dynamic task allocation the semidistributed approach was designed based on the division of processor network topology into independent and symmetric spheres. Distributed static mapping (DSM) and dynamic load balancing (DLB) tools are controlled by user window interface. DSM and DLB tools are integrated together with <b>software</b> <b>monitor</b> (PG_PVM) in GRAPNEL environment. ...|$|E
40|$|To {{deal with}} {{increasing}} size and complexity, component-based software {{development has been}} employed in embedded systems. Due to several faults, components can make wrong assumptions about the working mode {{of the system and}} the working modes of the other components. To detect mode inconsistencies at runtime, we propose a "lightweight" error detection mechanism, which can be integrated with component-based embedded systems. We define links among three levels of abstractions: the runtime behavior of components, the working mode specifications of components and the specification of the working modes of the system. This allows us to detect the user observable runtime errors. The effectiveness of the approach is demonstrated by implementing a <b>software</b> <b>monitor</b> integrated into a TV system. © 2012 Springer-Verlag London Limited...|$|E
50|$|Besides, a Sequence of Events (SOE) {{recorder}} <b>software</b> and Diagnostic <b>monitor</b> <b>software</b> are implemented.|$|R
50|$|The <b>software</b> <b>monitors</b> {{the time}} between button presses. This is the Inter-Response Time (IRT). The actual {{duration}} of the segment is subtracted from the IRT to yield the Difference Time (DT). This DT is the variable of interest.|$|R
50|$|Bargain Buddy is an Adware program {{developed}} by Exact Advertising. Bargain Buddy <b>software</b> <b>monitors</b> Internet usage and displays advertisements {{based on the}} websites a user views. The software may also display ads for Exact Advertising programs such as FunGameDownloads and PhotoGizmo.|$|R
40|$|Due to {{copyright}} restrictions, {{the access}} to {{the full text of}} this article is only available via subscription. To deal with increasing size and complexity, component-based software development has been employed in embedded systems. Due to several faults, components can make wrong assumptions about the working mode of the system and the working modes of the other components. To detect mode inconsistencies at runtime, we propose a “lightweight” error detection mechanism, which can be integrated with component-based embedded systems. We define links among three levels of abstractions: the runtime behavior of components, the working mode specifications of components and the specification of the working modes of the system. This allows us to detect the user observable runtime errors. The effectiveness of the approach is demonstrated by implementing a <b>software</b> <b>monitor</b> integrated into a TV system...|$|E
30|$|Big Data is {{the data}} that are {{difficult}} to store, manage, and analyze using traditional database and software techniques. Big Data includes high volume and velocity, and also variety of data that needs for new techniques to deal with it. Intrusion detection system (IDS) is hardware or <b>software</b> <b>monitor</b> that analyzes data to detect any attack toward a system or a network. Traditional intrusion detection system techniques make the system more complex and less efficient when dealing with Big Data, because its analysis properties process is complex and take a long time. The long time it takes to analyze the data makes the system prone to harms for some period of time before getting any alert [1, 2]. Therefore, using Big Data tools and techniques to analyze and store data in intrusion detection system can reduce computation and training time.|$|E
40|$|Learning how {{to program}} is a {{difficult}} task: students must learn programming concepts, a language’s syntax, and a software environment that will assist their programming activi-ties. In this work we attempt {{to learn more about}} novice programming errors so that we can provide better tool support and information for instructors. We discuss our study where, with a <b>software</b> <b>monitor,</b> we tracked students ’ errors and their usage of the Gild integrated development environment. Based on our log file data, we describe student interactions with Gild: their first use, the features they use, and how they used them. It was found that a small number of error types accounted for the majority of errors made. Although feed-back to Gild’s extra error help feature was largely positive, improvements to this feature are required as {{it was found that the}} errors that students take the longest to fix are also less frequently made...|$|E
40|$|<b>Software</b> <b>monitoring</b> {{system for}} air {{pollution}} (exhaust gas) NOx / Cox {{used to determine}} the gas content of COX / NOx generated from an engine (motor vehicle). This system is equipped with Wi-Fi so that data obtained can be dispersed to other devices(kompoter client) <b>Software</b> <b>monitoring</b> system for air pollution (exhaust gas) NOx / Cox, in making its programs menggunkan Borland Delphi 7. Delphi language uses ASCII characters using the letters A through Z and a samapai z, digits 0 to 9. Writing Delphi program does not distinguish between the use of uppercase and lowercase letters. From this research found that the software is Borland Delphi 7 can read the sensors TGS 2201. Then we can know the level of air pollution that is happening...|$|R
30|$|After handing in the {{solution}} to the final user, defining strategies for gathering feedback from him and from his caregivers on the daily use of the technology developed. Those strategies may include field diaries, <b>software</b> <b>monitoring,</b> periodical meetings, observation of use, focus groups with therapists, etc.|$|R
50|$|In October 2007, LGfL {{rolled out}} {{software}} to tackle cyber-bullying across all London schools it connected. The <b>software</b> <b>monitored</b> computer {{activity on the}} internet, instant messaging, e-mail and other applications for inappropriate behaviour. If improper activity was detected, the programme stored details of the offending material for review.|$|R
40|$|To {{understand}} or improve the execution {{behavior of a}} program on a parallel system, it is often necessary to consider {{the interaction between the}} processors in the system. Since communication is important for all parallel programs, obtaining information about the inter-process communication of the program is an important aspect of understanding program execution. If the user's concern is the performance of the parallel program, then the user must be able to capture the dynamic aspects of interprocessor communication. Unfortunately, timing information about inter-processor communication is often not easy to obtain. Building a special-purpose hardware performance monitor is too costly in most scenarios, and the use of VLSI to integrate communication and computation on a single component often provides only a few externally visible measurement points. A <b>software</b> <b>monitor</b> on the other hand is often too slow to allow execution of the monitored program without serious perturbation. Although th [...] ...|$|E
40|$|This paper {{analyses}} {{the performance}} of the ISODE stack and of the convergence protocol between OSI TP 0 and TCP defined in the RFC 1006. The measurements were carried out using a newly developed <b>software</b> <b>monitor,</b> which allows to run various experiment types. Measurement results show a significant performance gap between TP 0 and TCP. To bridge this gap we introduce an algorithm to adjust the window size of the TCP flow control mechanism in accordance with the TPDU (Transport Protocol Data Units) size. The necessary changes within the ISODE software were implemented. Thenew measurement results reveal a significant performance improvement. Keywords: Protocol architecture, Protocol implementation, Performance evaluation 1. Introduction The OSI protocols and services were standardized {{in the middle of the}} eighties as international standards for open systems communication. Compared to the Internet protocol suite they provide a more extensive functionality that supports the implementation of [...] ...|$|E
40|$|This paper {{describes}} the hybrid approach to task allocation in distributed systems by using problem-solving {{methods of the}} artificial intelligence. For the static mapping the objective function is {{used to evaluate the}} optimality of the allocation of a task graph onto a processor graph. Together with our optimization method also augmented simulated annealing and heuristic move exchange methods in distributed form are implemented. For dynamic task allocation the semidistributed approach was designed based on the division of processor network topology into independent and symmetric spheres. Distributed static mapping (DSM) and dynamic load balancing (DLB) tools are controlled by user window interface. DSM and DLB tools are integrated together with <b>software</b> <b>monitor</b> (PG PVM) in the graphical GRAPNEL environment. 1. Introduction Optimal planning of parallel program execution in parallel and distributed systems solves the problem of minimization of execution time. The theory of optimal alloc [...] ...|$|E
40|$|This paper extends results {{concerning}} {{the recovery of}} accurate parallel program traces from corrupted traces initially gathered with <b>software</b> <b>monitoring.</b> Earlier work developed an approach that functioned for idealized machines. Here, we explain how this approach can be modified to track the temporal uncertainties due to the <b>software</b> <b>monitoring</b> mechanisms, and to halt when the recovered order {{can no longer be}} guaranteed. By quantifying certain system and application parameters, we are able to compute both worst-case and average-case {{estimates of the number of}} trace events that our modified trace-recovery algorithm will be able to recover before it can no longer guarantee the recovered order of events. We also report the values of these key parameters for some current parallel machines and compute typical expected trace lengths for a variety of application types on these machines...|$|R
30|$|On {{the other}} hand, VMware, {{a leader in}} {{virtualization}} provides <b>software</b> <b>monitoring</b> with vRealize Hyperic (HYPERIC) (Rahabok 2014). It monitors operating systems, middleware and applications running in physical, virtual and cloud environments. It features monitoring configuration templates, comprehensive events analysis with predefined KPIs, custom UI, role-based notification system and escalation workflows.|$|R
50|$|The {{system is}} submerged, and {{a digital camera}} observes the exits. The dynIMAGE <b>software</b> <b>monitors</b> the {{frequency}} of decisions per exit. Many thousand of glasseels pass through the system on a single day. The three exits in the left lower corner carry water from polluted sources (one is a drinking water reservoir).|$|R
