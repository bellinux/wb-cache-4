48|2174|Public
5|$|The {{terminal}} has {{stands for}} 24 aircraft, of which eight of sixteen at Terminal A have jetbridges. Four stands (two at each terminal is <b>size</b> <b>code</b> D (large {{enough for an}} Airbus A330 or a Boeing 757), while 20 are for size category C (large enough for an Airbus A320 or Boeing 737). Domestic jets normally use the seven jetbridge stands (gates 30–37), while the five non-bridged gates at Terminal A (gates 25–29) are used for domestic regional aircraft. International flights all use the eight non-bridged gates at Terminal B (gates 42-49). The Air Force has six stands for military freight planes up {{to the size of}} a Lockheed C-5 Galaxy (code F), although one is permanently used for deicing.|$|E
2500|$|Since then, {{several new}} {{proposals}} {{have been presented}} to the CEN working group. One of these, tabled by the , proposes a 5-character alphanumeric code, consisting of the 3-digit centimetre figure of the primary body dimension, followed by one or two letters that code a secondary dimension, somewhat like the system already defined for bra sizes. For example, an item designed for 100cm bust girth, 104cm [...] hip girth and 176cm height could bear the compact <b>size</b> <b>code</b> [...] "100BG". This proposal was agreed upon in 2006, but later disregarded. A paper by Bogusławska-Bączek published in 2010 showed that there were still significant difficulties in identifying clothing sizes.|$|E
5000|$|Standard <b>Size</b> <b>Code</b> (Normale) = ( [...] Chest Circumference cm - 1) / 2 ...|$|E
5000|$|AS1344-1972, 1975, 1997 <b>Size</b> <b>coding</b> {{scheme for}} women’s {{clothing}} ...|$|R
5000|$|AS1182 - 1980 - <b>Size</b> <b>coding</b> {{scheme for}} infants and children's {{clothing}} ...|$|R
40|$|Software {{pipelining}} {{technique is}} extensively used {{to explore the}} instruction level parallelism in loops. However, this performance optimization technique results in <b>code</b> <b>size</b> expansion. For embedded systems with very limited memory resources, the <b>code</b> <b>size</b> becomes {{one of the most}} important optimization concerns. In this paper, we propose the theoretical foundation for <b>code</b> <b>size</b> reduction based on the relationship between retiming function and <b>code</b> <b>size</b> expansion. A general Code-size REDuction technique (CRED) for software-pipelined loops are presented on various kind of processors. Our algorithms integrate the <b>code</b> <b>size</b> reduction procedure with scheduling to produce optimal <b>code</b> <b>size</b> for a target schedule length. The experiments on a set of well-known benchmarks show the effectiveness of this technique on both <b>code</b> <b>size</b> reduction and <b>code</b> <b>size</b> exploration...|$|R
50|$|As {{well as the}} {{recommended}} <b>size</b> <b>code</b> definitions there are also ten modifying suffix letters that {{can be added to}} the end of the specific <b>size</b> <b>code.</b> These run from A to L (omitting F and I) and depending on the largest dimension of the battery can either signify 0.0 - 0.9 mm maximum dimensions or 0.00 - 0.09 mm maximum dimensions with A being 0.0 or 0.00 and L being 0.9 or 0.09.|$|E
5000|$|... #Caption: Several {{sizes of}} button and coin cells. Some are {{alkaline}} {{and others are}} silver oxide. Two 9 V batteries were added as a size comparison. Enlarge to see the <b>size</b> <b>code</b> markings.|$|E
5000|$|... #Caption: Assorted {{sizes of}} button and coin cells, {{including}} alkaline and silver oxide chemistries. Four rectangular 9v batteries are also shown, for size comparison. Enlarge {{to see the}} button and coin cell <b>size</b> <b>code</b> markings.|$|E
40|$|In {{embedded}} computing, <b>code</b> <b>size</b> is {{very important}} for system cost and performance. In global scheduling for VLIW/EPIC style embedded processors, region-enlarging optimizations, especially tail duplication, are commonly used to exploit instruction level parallelism (ILP) to boost the performance. The <b>code</b> <b>size</b> increase due to such optimizations, however, raises serious concerns about the affected I-cache, branch and TLB performance. In this paper, we focus on the <b>code</b> <b>size</b> efficiency of <b>code</b> <b>size</b> related optimizations in global scheduling. First, we propose to use the ratio of static IPC (instruction per cycle) changes to <b>code</b> <b>size</b> changes as a quantitative measure of the <b>code</b> <b>size</b> efficiency at compile time for any <b>code</b> <b>size</b> related optimization. Then, based on the <b>code</b> <b>size</b> efficiency of tail duplication, we propose the solutions to the two related problems: (1) how to achieve the best performance for a given <b>code</b> <b>size</b> increase, (2) how to get the optimal <b>code</b> <b>size</b> efficiency for any program. Our study shows that <b>code</b> <b>size</b> increase resulting from tail duplication has a significant but varying impact on IPC, e. g., the first 2 % <b>code</b> <b>size</b> increase results in 18. 5 % increase in static IPC, while the static IPC changes less than 1 % when given <b>code</b> <b>size</b> increase ranging from 20 % to 30 %. We then use this feature to define the optimal <b>code</b> <b>size</b> efficiency and to derive a simple, yet robust threshold scheme finding it. The experimental results using SPECint 95 benchmarks show that this threshold scheme finds the optimal efficiency accurately. While the optimal efficiency results show an average increase of 2 % in <b>code</b> <b>size</b> over original <b>code</b> <b>size,</b> the improved I-cache performance (4 % decrease in I-cache penalty for a 32 KB I-cache) is observed due to the increased locality. Overal [...] ...|$|R
3000|$|... -PSK {{modulation}} using trellis coded modulation (TCM). An adaptive TCM {{system is}} also presented. Simulation results show that, {{depending on the}} constellation <b>size,</b> <b>coded</b> [...]...|$|R
50|$|Secondary cells using systems H and K (nickel-metal hydride and {{nickel-iron}} sulfide) have {{a separate}} series of <b>size</b> <b>codes,</b> but the cells are dimensionally interchangeable with primary cells.|$|R
5000|$|Prior to October 1990, round {{cells were}} {{designated}} with a sequential numeric <b>size</b> <b>code</b> ranging from R06 through to R70, for example R20 {{is the size}} of a [...] "D" [...] cell or ANSI"13" [...] size. After October 1990, round cells are systematically identified with a number derived from their diameter and height. Primary cells larger than 100 mm in diameter or height are designated with an oblique [...] "/" [...] between diameter and height.|$|E
5000|$|Since {{the code}} {{generated}} from various instantiations {{of the same}} class template in C++ is not shared (as with type-erased generics in Java), excessive use of templates may lead to significant increase of the executable code <b>size</b> (<b>code</b> bloat). However, because function templates are aggressively inlined, they can sometimes reduce code size, but more importantly allow for more aggressive static analysis and code optimizing by the compiler, more often making them more efficient than non-templated code. In contrast, Java generics are necessarily less efficient than non-genericized code.|$|E
50|$|For processing, {{a format}} {{should be easy}} to search, truncate, and {{generally}} process safely. All normal Unicode encodings use some form of fixed <b>size</b> <b>code</b> unit. Depending on the format and the code point to be encoded, {{one or more of}} these code units will represent a Unicode code point. To allow easy searching and truncation, a sequence must not occur within a longer sequence or across the boundary of two other sequences. UTF-8, UTF-16, UTF-32 and UTF-EBCDIC have these important properties but UTF-7 and GB 18030 do not.|$|E
50|$|Flat cells, used as {{components}} of multi-cell batteries, have an F prefix {{and a series}} of numbers to identify sizes.Coin cells were assigned <b>size</b> <b>codes</b> in the 5000 range.|$|R
40|$|Software {{pipelining}} and unfolding {{are commonly}} used techniques to increase parallelism for DSP applications. However, these techniques expand the <b>code</b> <b>size</b> of the application significantly. For most DSP systems with limited memory resources, <b>code</b> <b>size</b> becomes {{one of the most}} critical concerns for the highperformance applications. In this paper, we present the <b>code</b> <b>size</b> reduction theory based on retiming and unfolding concepts. We propose a <b>code</b> <b>size</b> reduction framework to achieve the optimal <b>code</b> <b>size</b> of software-pipelined and unfolded loops by using conditional registers. The experimental results on several wellknow benchmarks show the effectiveness of our <b>code</b> <b>size</b> reduction technique in controlling the <b>code</b> <b>size</b> of optimized loops. Categories and Subject Descriptor...|$|R
40|$|Real-time {{embedded}} systems often have multiple resource constraints such as energy and <b>code</b> <b>size</b> constraints. Traditionally, techniques for reducing energy consumption for real-time {{embedded systems}} have been developed without considering <b>code</b> <b>size</b> constraints, whereas <b>code</b> <b>size</b> reduction techniques have been developed without considering energy constraints. There, however, is a tradeoff relationship between reducing dynamic energy consumption and reducing <b>code</b> <b>size</b> for real-time embedded systems. Therefore, reducing <b>code</b> <b>size</b> may result in increasing energy consumption. In this paper, we present a triple-tradeoff relationship among <b>code</b> <b>size,</b> execution time, and energy consumption and then address the <b>code</b> <b>size</b> minimization problem while considering simultaneously the energy constraints and the real-time requirements of embedded systems. We formulate such an optimization problem and prove this optimization problem is NP-hard. Given the difficulty of finding the optimal solution to the problem, we then propose four heuristic algorithms to find sub-optimal solutions and evaluate their performance through simulations...|$|R
5000|$|By {{considering}} the occurrences [...] of values from , one has an alternate way {{to refer to}} , through [...] First, one chooses an occurrence , which requires information of [...] bits. To specify v, one subtracts the excess information used to choose one [...] from all thoselinked to , this is [...] Then, [...] {{is the number of}} [...] portions fitting into [...] Thus, one needs [...] bits to choose one of them. So the information (variable <b>size,</b> <b>code</b> length, number of bits) needed to refer to , considering its occurrences in a message is ...|$|E
5000|$|The {{data layout}} of AC-3 is {{described}} by simplified [...] "C-like" [...] language in official specifications. An AC-3 stream {{is a series of}} frames; The frame <b>size</b> <b>code</b> is used along with the sample rate code to determine the number of (2-byte)words before the next syncword. Channel blocks can be either long, in which case the entire block is processed as single modified discrete cosine transform or short, in which case two half length transforms are performed on the block. Below is a simplified AC-3 header. A detailed description is in the ATSC [...] "Digital Audio Compression (AC-3) (E-AC-3) Standard", section 5.4.|$|E
5000|$|Since then, {{several new}} {{proposals}} {{have been presented}} to the CEN working group. One of these, tabled by the European Association of National Organisations of Textile Traders (AEDT), proposes a 5-character alphanumeric code, consisting of the 3-digit centimetre figure of the primary body dimension, followed by one or two letters that code a secondary dimension, somewhat like the system already defined for bra sizes. For example, an item designed for 100 cm bust girth, 104 cm hip girth and 176 cm height could bear the compact <b>size</b> <b>code</b> [...] "100BG". This proposal was agreed upon in 2006, but later disregarded. A paper by Bogusławska-Bączek published in 2010 showed that there were still significant difficulties in identifying clothing sizes.|$|E
50|$|Certain sizes, {{given by}} one or two digit numbers, {{represent}} standard <b>size</b> <b>codes</b> from previous editions of the standard. Sizes given as 4 or more digits indicate {{the diameter of the}} battery and the overall height.|$|R
50|$|Round button {{batteries}} {{also carry}} two-digit <b>size</b> <b>codes</b> such as R44, see the button battery table for typical dimensions. Other round, flat, and square sizes have been standardized but are used mostly for components of multi-cell batteries.|$|R
5000|$|Standardized <b>size</b> <b>codes</b> for round {{batteries}} {{which do}} not follow the current nomenclature but have been retained for ease of use are given by a one or two digit number following the R. These include {{but are not limited}} to: ...|$|R
50|$|For ball-and-socket joints (also {{known as}} spherical joints), the inner joint is {{a ball and}} the outer joint is a socket, both having holes leading to the {{interior}} of their respective tube ends, {{to which they are}} fused. The ball tip is a hemisphere with a ground-glass surface on the outside, which fits inside of the socket, where the ground glass surface is on the inside. Ball-and-socket joints are labeled with a <b>size</b> <b>code</b> consisting of a number, a slash, and another number. The first number represents the outer diameter in mm of the ball at its base or the inner diameter in millimeters {{at the tip of the}} socket, in both cases where the diameters are their maximum in the joints.|$|E
50|$|The {{terminal}} has {{stands for}} 24 aircraft, of which eight of sixteen at Terminal A have jetbridges. Four stands (two at each terminal is <b>size</b> <b>code</b> D (large {{enough for an}} Airbus A330 or a Boeing 757), while 20 are for size category C (large enough for an Airbus A320 or Boeing 737). Domestic jets normally use the seven jetbridge stands (gates 30-37), while the five non-bridged gates at Terminal A (gates 25-29) are used for domestic regional aircraft. International flights all use the eight non-bridged gates at Terminal B (gates 42-49). The Air Force has six stands for military freight planes up {{to the size of}} a Lockheed C-5 Galaxy (code F), although one is permanently used for deicing.|$|E
40|$|The 2006 - 2007 (FY 07) {{edition of}} Iowa Public Library Statistics {{includes}} information on income, expenditures, collections, circulation, and other measures, including staff. Each section is arranged by <b>size</b> <b>code,</b> then alphabetically by city. The totals and percentiles for each <b>size</b> <b>code</b> grouping are given {{immediately following the}} alphabetical listings. Totals and medians for all reporting libraries are given {{at the end of}} each section. There are 543 libraries included in this publication; 530 submitted a report. The table of size codes (page 6) lists the libraries alphabetically. The libraries in each section of the publication are listed by <b>size</b> <b>code,</b> then alphabetically by city. The following table lists the <b>size</b> <b>code</b> designations, the population range in each <b>size</b> <b>code,</b> the number of libraries reporting in each <b>size</b> <b>code,</b> and the total population of the reporting libraries in each <b>size</b> <b>code.</b> The total population served by the 543 libraries is 2, 248, 279. Population data is used to determine per capita figures throughout the publication...|$|E
40|$|ABSTRACT Compiling {{concurrent}} {{programs to}} run on a sequential pro-cessor presents a difficult tradeoff between execution time and <b>size</b> of generated <b>code.</b> On one hand, the process-basedapproach to compilation generates reasonable <b>sized</b> <b>code</b> but incurs significant execution overhead due to concurrency. On the other hand, the automata-based approach incurs a much smaller execution overhead but can result in code thatis several orders of magnitude larger...|$|R
40|$|The {{design and}} {{performance}} of compound helicopters utilizing lift-offset rotors are examined, {{in the context of}} short-haul, medium-size civil and military missions. The analysis tools used are the comprehensive analysis CAMRAD II and the <b>sizing</b> <b>code</b> NDARC. Following correlation of the comprehensive analysis with existing lift-offset aircraft flight test data, the rotor performance model for the <b>sizing</b> <b>code</b> was developed, and an initial estimate was made of the rotor size and key hover and cruise flight conditions. The rotor planform and twist were optimized for those conditions, and the <b>sizing</b> <b>code</b> rotor performance model updated. Two models for estimating the blade and hub weight of lift-offset rotors are discussed. The civil and military missions are described, along with the aircraft design assumptions. The aircraft are sized for 30 passengers or 6600 lb payload, with a range of 300 nm. Civil and military aircraft designs are described for each of the rotor weight models. Disk loading and blade loading were varied to optimize the designs, based on gross weight and fuel burn. The influence of technology is shown, in terms of rotor hub drag and rotor weight...|$|R
40|$|In global {{scheduling}} for ILP processors, regionenlarging optimizations, especially tail duplication, {{are commonly}} used. The <b>code</b> <b>size</b> increase due to such optimizations, however, raises {{serious concerns about}} the affected I-cache and TLB performance. In this paper, we propose a quantitative measure of the <b>code</b> <b>size</b> efficiency at compile time for any <b>code</b> <b>size</b> related optimization. Then, based on the efficiency of tail duplication, we propose the solutions to two related problems: (1) how to achieve the best performance for a given <b>code</b> <b>size</b> increase, (2) {{how to get the}} optimal <b>code</b> <b>size</b> efficiency for any program. Our study shows that <b>code</b> <b>size</b> increase has a significant but varying impact on IPC, e. g., the first 2 % <b>code</b> <b>size</b> increase results in 18. 5 % increase in static IPC, but less than 1 % when the given <b>code</b> <b>size</b> further increases from 20 % to 30 %. We then use this feature to define the optimal <b>code</b> <b>size</b> efficiency and to derive a simple, yet robust threshold scheme finding it. The experimental results using SPECint 95 benchmarks show that this threshold scheme finds the optimal efficiency accurately. While the optimal efficiency results show an average increase of 2 % in <b>code</b> <b>size,</b> the improved I-cache performance is observed and a speedup of 17 % over the natural treegion results is achieved. 1...|$|R
40|$|This {{edition of}} Iowa Public Library Statistics {{includes}} information on income, expenditures, collections, circulation, and other measures, including staff. Each section is arranged by <b>size</b> <b>code,</b> then alphabetically by city. The totals and percentiles for each <b>size</b> <b>code</b> grouping are given {{immediately following the}} alphabetical listings. Totals and medians for all reporting libraries are given {{at the end of}} each section. There are 543 libraries included in this publication; 525 submitted a report. The table of size codes (page 5) lists the libraries alphabetically. The following table lists the <b>size</b> <b>code</b> designations, the population range in each <b>size</b> <b>code,</b> the number of libraries reporting in each <b>size</b> <b>code,</b> and the total population of the reporting libraries in each <b>size</b> <b>code.</b> The total population served by the 543 libraries is 2, 339, 070. Population data is used to determine per capita figures throughout the publication...|$|E
40|$|The 2010 - 2011 (FY 11) {{edition of}} Iowa Public Library Statistics {{includes}} information on income, expenditures, collections, circulation, and other measures, including staff. Each section is arranged by <b>size</b> <b>code,</b> then alphabetically by city. The totals and percentiles for each <b>size</b> <b>code</b> grouping are given {{immediately following the}} alphabetical listings. Totals and medians for all reporting libraries are given {{at the end of}} each section. There are 543 libraries included in this publication; 525 submitted a report. The table of size codes (page 5) lists the libraries alphabetically. The following table lists the <b>size</b> <b>code</b> designations, the population range in each <b>size</b> <b>code,</b> the number of libraries reporting in each <b>size</b> <b>code,</b> and the total population of the reporting libraries in each <b>size</b> <b>code.</b> The total population served by the 543 libraries is 2, 339, 070. Population data is used to determine per capita figures throughout the publication...|$|E
40|$|The 2005 - 2006 (FY 06) {{edition of}} Iowa Public Library Statistics {{includes}} information on income, expenditures, collections, circulation, and other measures, including staff. Each section is arranged by <b>size</b> <b>code,</b> then alphabetically by city. The totals and percentiles for each <b>size</b> <b>code</b> grouping are given {{immediately following the}} alphabetical listings. Totals for all reporting libraries are given {{at the end of}} each section. There are 542 libraries included in this publication; 10 did not report. The Table of Cities and Size Codes lists the libraries alphabetically and gives their size codes. The table allows a user of this publication to locate information about a specific library. The following table lists the <b>size</b> <b>code</b> designations, the population range in each <b>size</b> <b>code,</b> the number of libraries reporting in each <b>size</b> <b>code,</b> and the total population of the reporting libraries in each <b>size</b> <b>code.</b> The total population of the 542 libraries is 2, 243, 396. Population data is used to determine per capita figures used throughout the publication...|$|E
40|$|<b>Code</b> <b>size</b> {{expansion}} of software-pipelined loops {{is a critical}} problem for DSP systems with strict <b>code</b> <b>size</b> constraint. Some ad-hoc <b>code</b> <b>size</b> reduction techniques were {{used to try to}} reduce the prologue/epilogue produced by software pipelining. This paper presents the fundamental understanding of the relationship between <b>code</b> <b>size</b> expansion and software pipelining. Based on the retiming concept, we present a powerful Code-size REDuction (CRED) technique and its application on various kinds of processors. We also provide CRED algorithms integrated with software pipelining process. One advantage of our algorithms is that it can explore the trade-off space between “perfect ” software pipelining and constrained <b>code</b> <b>size.</b> That is, the software pipelining process can be controlled to generate a schedule concerned with <b>code</b> <b>size</b> requirement. The experiment results show the effectiveness of our algorithms in both reducing the <b>code</b> <b>size</b> for software-pipelined loops and exploring the code size/performance trade-off space...|$|R
40|$|Program {{valuable}} in analyzing and sizing filamentary composite panels. Panel Analysis and <b>Sizing</b> <b>code</b> (PASCO) for buckling and vibration analysis and sizing of prismatic structure having arbitrary cross section primarily intended for analyzing and sizing stiffened panels made of laminated orthotropic materials. PASCO written in FORTRAN IV...|$|R
50|$|The {{most common}} type of 9V battery is {{commonly}} referred to simply as 9-volt, although there are less common 9V batteries of different <b>sizes.</b> <b>Codes</b> for the usual size include PP3 (for size and voltage, any technology), 6LR61 (IEC code for alkaline batteries), and in Japan 006P.|$|R
