139|232|Public
25|$|Searle {{emphasizes}} {{the fact that}} this kind of symbol manipulation is syntactic (borrowing a term from the study of grammar). The computer manipulates the symbols using a form of <b>syntax</b> <b>rules,</b> without any knowledge of the symbol's semantics (that is, their meaning).|$|E
500|$|For Fodor, this formal {{notion of}} thought {{processes}} {{also has the}} advantage of highlighting the parallels between the causal role of symbols and the contents which they express. In his view, syntax plays the role of mediation between the causal role of the symbols and their contents. The semantic relations between symbols can be [...] "imitated" [...] by their syntactic relations. The inferential relations which connect the contents of two symbols can be imitated by the formal <b>syntax</b> <b>rules</b> which regulate the derivation of one symbol from another.|$|E
2500|$|The XML {{specification}} defines an XML document as a well-formed text, {{meaning that}} it satisfies a list of <b>syntax</b> <b>rules</b> provided in the specification. Some key points in the fairly lengthy list include: ...|$|E
50|$|Output {{productions}} {{produced a}} form of assembly code directly from a <b>syntax</b> <b>rule.</b>|$|R
40|$|Thesis (M. S.) [...] Wichita State University, College of Liberal Arts and Sciences, Dept. of Computer ScienceSchütz is a programmer's editor {{designed}} by Dr. Rodney Bates. Through its language definition language, users may adapt Schütz to any programming language. Describing {{a programming language}} in the language definition language involves writing largely parallel rule sets in three different syntaxes—the concrete syntax, the abstract syntax, and the format syntax. In this thesis, we present a method for mechanically generating the concrete <b>syntax</b> <b>rule</b> set, given the rule sets {{of the other two}} syntaxes; we also prove that the concrete <b>syntax</b> <b>rule</b> sets thus generated are correct and unambiguous, given the same traits in the rule sets of the other two syntaxes...|$|R
5000|$|Sep 14, 2015 - v4.9.6, fixed: print {{text with}} nested <b>syntax</b> {{highlighting}} <b>rules</b> ...|$|R
2500|$|Though many {{platforms}} feature custom extensions and letter case {{requirements and}} other minor syntactical features vary slightly in some implementations, the fundamental <b>syntax</b> <b>rules,</b> commands and features that define MML and {{are present in}} whole or in part in all implementations are as follows: ...|$|E
5000|$|As examples, the {{following}} <b>syntax</b> <b>rules</b> illustrate the facilities for expressing repetition: ...|$|E
5000|$|The {{following}} is the <b>syntax</b> <b>rules</b> {{of the model}} language defined in EBNF: ...|$|E
5000|$|All ABAP {{variables}} must be explicitly {{declared in}} order to be used. Normally all declarations are placed {{at the top of the}} code module (program, subroutine, function) before the first executable statement; this placement is a convention and not an enforced <b>syntax</b> <b>rule.</b> The declaration consists of the name, type, length (where applicable), additional modifiers (e.g. the number of implied decimals for a packed decimal field) and optionally an initial value: ...|$|R
25|$|XML Encryption defines <b>syntax</b> and {{processing}} <b>rules</b> for encrypting XML content.|$|R
5000|$|BioPAX Validator - <b>syntax</b> and {{semantic}} <b>rules</b> {{and best}} practices (project wiki) ...|$|R
50|$|They {{share some}} basic <b>syntax</b> <b>rules</b> {{and a few}} basic concepts, but are {{otherwise}} very different.|$|E
5000|$|Whether for {{the host}} {{computer}} or the GPU device, all CUDA source code is now processed according to C++ <b>syntax</b> <b>rules.</b> This {{was not always}} the case. Earlier versions of CUDA were based on C <b>syntax</b> <b>rules.</b> As with the more general case of compiling C code with a C++ compiler, it is therefore possible that old C-style CUDA source code will either fail to compile or will not behave as originally intended.|$|E
5000|$|While {{the string}} itself is semantically meaningless, {{there is a}} {{specific}} structure that is used. The <b>syntax</b> <b>rules</b> for thetwelve characters are as follows: ...|$|E
2500|$|The first, <b>syntax,</b> is the <b>rules</b> {{in which}} words are {{arranged}} into sentences.|$|R
25|$|XML Signature defines <b>syntax</b> and {{processing}} <b>rules</b> for creating digital signatures on XML content.|$|R
5000|$|The syntax of BNF can be {{represented}} with WSN as follows, based on translating the BNF example of itself: <b>syntax</b> = <b>rule</b> <b>syntax</b> [...] <b>rule</b> = opt-whitespace [...] "<" [...] rule-name [...] ">" [...] opt-whitespace [...] "::=" [...] opt-whitespace expression line-end [...] opt-whitespace = { [...] " [...] " [...] } [...] expression = list [...] "|" [...] expression [...] line-end = opt-whitespace EOL | line-end line-end [...] list = term opt-whitespace list [...] term = literal | [...] "<" [...] rule-name [...] ">" [...] literal = [...] """" [...] text [...] """" [...] | [...] "'" [...] text [...] "'" [...]This definition appears overcomplicated because the concept of [...] "optional whitespace" [...] must be explicitly defined in BNF, but it is implicit in WSN. Even in this example, [...] is left undefined, but it is assumed to mean [...] "". ( [...] is also left undefined.) Notice how the kludge [...] has been used twice because [...] was not explicitly defined.|$|R
50|$|The {{specific}} <b>syntax</b> <b>rules</b> {{vary depending}} on the specific implementation, programming language, or library in use. Additionally, the functionality of regex implementations can vary between versions.|$|E
50|$|In 1987, {{following}} {{the convergence of}} the UN and US/ANSI syntax proposals, the UN/EDIFACT <b>Syntax</b> <b>Rules</b> were approved as the ISO standard ISO 9735 by the International Organization for Standardization.|$|E
5000|$|A well-formed {{document}} in XML is {{a document that}} adheres to the <b>syntax</b> <b>rules</b> specified by the XML 1.0 specification in that it must satisfy both physical and logical structures." ...|$|E
50|$|A lexical rule is {{in a form}} of {{syntactic}} rule used within many {{theories of}} natural language <b>syntax.</b> These <b>rules</b> alter the argument structures of lexical items (for example verbs and declensions) in order to alter their combinatory properties.|$|R
50|$|He {{has also}} done {{extensive}} {{research in the}} area of Arabic <b>Syntax</b> (the <b>rules</b> of Arabic Grammar), and in the History of Islam and Iran. He is also well acquainted with the various forms of poetry, and is well versed in composing verses of poetry.|$|R
50|$|It is {{straightforward}} {{to provide such}} an RDF concrete <b>syntax</b> for <b>rules,</b> but the presence of variables in rules goes beyond the RDF Semantics. Translation from the XML Concrete Syntax to RDF/XML could be easily accomplished by extending the XSLT transformation for the OWL XML Presentation syntax.|$|R
50|$|The decimal mark {{is used to}} {{separate}} the integer from the fractional part of non-integer numbers. The optional nature of the UNA segment and the initial choice of the comma (",") as the default decimal mark provide a source of common confusion. Versions 1 through 3 of the ISO 9735 <b>syntax</b> <b>rules</b> specify the comma as the default; version 4 states that the decimal mark position in the UNA segment is to be ignored and that the comma and the dot (".") may be used indifferently in numeric data values. The UNB segment indicates which version of the <b>syntax</b> <b>rules</b> is in effect.|$|E
5000|$|Although <b>syntax</b> <b>rules</b> {{may affect}} {{the order in which}} {{characters}} are allowed to appear, XML (including XHTML) documents, by definition, comprise characters from most of the Unicode code points, with the exception of: ...|$|E
50|$|A logical {{framework}} {{is based on}} a general treatment of <b>syntax,</b> <b>rules</b> and proofs by means of a dependently typed lambda calculus. Syntax is treated in a style similar to, but more general than Per Martin-Löf's system of arities.|$|E
40|$|In this paper, we {{describe}} lexical and morphological resources {{as well as}} context-free <b>syntax</b> generation <b>rules</b> {{that are used to}} produce Chinese sentences in a natural language generation system, which is called VINCI. We created a range of Chinese sentences at random for learning of a second language. ...|$|R
5000|$|The {{ability to}} express {{decision}} logic with increased precision, using a business vocabulary <b>syntax</b> and graphical <b>rule</b> representations (decision tables, trees, scorecards and flows) ...|$|R
40|$|A natural {{language}} parser is described that analyzes the syntactic structure of an input sentence {{in relation to}} a specified grammar and generates all possible syntax trees of the sentence, along with estimates of the probability of each being the correct parse. The grammar used is based on X-bar theory, and the parsing algorithm is a chart parse – a top-down parser which uses dynamic programming for efficiency in cases where the grammar leads to ambiguities. The parser has a database of the frequency of application of each <b>syntax</b> <b>rule</b> in the grammar as well as a lexicon of known words and their lexical categories and frequency of use in each category. These are used in a probabilistic context-free grammar model to yield the likelihood judgments of the candidate parses and are updated by user feedback, leading to more accurate subsequent estimations...|$|R
5000|$|The XML {{specification}} defines an XML document as a well-formed text if it satisfies {{a list of}} <b>syntax</b> <b>rules</b> {{defined in}} the specification. This specification is long, however 2 key points relating to the tree structure of an XML document are: ...|$|E
50|$|Searle {{emphasizes}} {{the fact that}} this kind of symbol manipulation is syntactic (borrowing a term from the study of grammar). The computer manipulates the symbols using a form of <b>syntax</b> <b>rules,</b> without any knowledge of the symbol's semantics (that is, their meaning).|$|E
50|$|DDL (Description Definition Language) {{is part of}} the MPEG-7 standard. It {{gives an}} {{important}} set of tools for the users to create their own Description Schemes (DSs) and Descriptors (Ds). DDL defines the <b>syntax</b> <b>rules</b> to define, combine, extend and modify Description Schemes and Descriptors.|$|E
40|$|Abstract. The rule-to-rule {{hypothesis}} {{says that}} every <b>syntax</b> <b>rule</b> has its counterpart in se-mantics. If we replace semantics with translation, {{we get a}} basic concept a machine transla-tion system can rely on. Syntax-translation pairs are represented by pairs of patterns where pattern can stand for both rules and lexical items. Combining the advantages of example-based and rule-based machine translation, a new paradigm, pattern-based translation is in-troduced. The system called MetaMorpho based on these principles has been tested for English-Hungarian translation, and showed very promising results both in translation qual-ity and speed. 1. Rule-to-rule Translation The meaning of a complex linguistic structure is wholly determined by its sub-structures and the meanings of them. In the Rosetta machine translation system (Landsbergen 1985) we can meet a rather direct application of the composi-tionality principle: „The meaning of an expres...|$|R
50|$|For example, it is {{uncommon}} to characterise Java as a scripting language {{because of its}} lengthy <b>syntax</b> and <b>rules</b> about which classes exist in which files, {{and it is not}} directly possible to execute Java interactively, because source files can only contain definitions that must be invoked externally by a host application or application launcher.|$|R
3000|$|In Fig.  5, we {{adopt the}} {{informal}} “human readable” form {{to present the}} MOS mapping rules (as proposed by [13]). In this <b>syntax,</b> a <b>rule</b> has the form:Antecedent(A) [...] Consequent(C), where both antecedent and consequent are conjunctions of atoms written as a 1 ∧...∧ an. Variables are indicated using the standard convention of prefixing them with a question mark (e.g., ?argument).|$|R
