656|1147|Public
25|$|<b>Software</b> <b>Life</b> Cycle Empirical Database—established {{to support}} the acquisition, maintenance, and {{dissemination}} of software empirical life cycle data for research purposes and {{to support the}} improvement of the software development process.|$|E
5000|$|IEEE Std 12207, [...] "Systems and {{software}} engineering -- <b>Software</b> <b>life</b> cycle processes", {{is an international}} standard that establishes a common framework for <b>software</b> <b>life</b> cycle process, with well-defined terminology.|$|E
5000|$|ISO/IEC 12207 (<b>software</b> <b>life</b> cycle process {{development}} standard) ...|$|E
50|$|This {{is similar}} to the <b>software</b> {{development}} <b>life</b> cycle.|$|R
5000|$|... #Subtitle level 2: Incorporating P-Modeling Framework into <b>Software</b> Development <b>Life</b> Cycle (SDLC) ...|$|R
40|$|<b>Software</b> {{development}} <b>life</b> cycle (SDLC) is {{a process}} model adopted and followed during the development of software [...] Software Engineering encompasses software engineering process models, project planning, management, and <b>Software</b> Development <b>Life</b> Cycle activities. In this paper, we are proposing a software process model for architecture-based software development from the conventional models by taking spiral process model. This process model is coined a...|$|R
5000|$|ISO/IEC/IEEE 12207, Systems and {{software}} engineering - <b>Software</b> <b>life</b> cycle processes.|$|E
5000|$|IEEE 12207 [...] "Systems and {{software}} engineering - <b>Software</b> <b>life</b> cycle processes" ...|$|E
5000|$|ISO 29110: <b>Software</b> <b>Life</b> Cycle Profiles and Guidelines for Very Small Entities (VSEs) ...|$|E
50|$|ID Business Solutions Limited t/a IDBS of Guildford, Surrey for <b>Software</b> for <b>life</b> {{sciences}} research.|$|R
50|$|<b>Software</b> {{development}} <b>life</b> cycle standards - controls {{designed to}} ensure IT projects are effectively managed.|$|R
5000|$|Tools running {{automated}} from developer workstations {{which have}} become vital for the <b>software</b> development <b>life</b> cycle, ...|$|R
50|$|These {{activities}} {{are designed to}} help meet security objectives in the <b>software</b> <b>life</b> cycle.|$|E
50|$|Overall game {{development}} is not suited for typical <b>software</b> <b>life</b> cycle methods, {{such as the}} waterfall model.|$|E
5000|$|ISO/IEC/IEEE 15289, Systems and {{software}} engineering - Content of systems and <b>software</b> <b>life</b> cycle process information products (Documentation) ...|$|E
40|$|This paper {{presents}} {{characteristics of}} the computer audit process during <b>software</b> development <b>life</b> cycle focused on specific aspects of the mobile IT applications. There are highlighted specific features of the distributed informatics systems implemented in wireless environments as hardware components, wireless technologies, classes of wireless systems, specialized software for mobile IT applications, quality {{characteristics of the}} mobile IT applications, software development models and their specific stages and issues aspects of the computer audit during <b>software</b> development <b>life</b> cycle of the distributed informatics systems customized on mobile IT applications. In the computer audit process, tasks of the computer auditors and what controls they must implement are also presented. Audit Process, Mobile It Applications, <b>Software</b> Development <b>Life</b> Cycle, Project Management...|$|R
40|$|This course {{presents}} {{software engineering}} concepts and principles {{in parallel with}} the <b>software</b> development <b>life</b> cycle. Topics addressed include the <b>Software</b> Development <b>Life</b> Cycle (SDLC), <b>software</b> modeling using Unified Modeling Language (UML), major phases of SDLC (Software Requirements and Analysis, Software Design, and Software Testing), and project management. This free course may be completed online at any time. See course site for detailed overview and learning outcomes. (Computer Science 302) ...|$|R
50|$|In {{software}} engineering, architecture tradeoff {{analysis method}} (ATAM) is a risk-mitigation process used {{early in the}} <b>software</b> development <b>life</b> cycle.|$|R
5000|$|Software {{development}} process: The definition, implementation, assessment, measurement, management, change, {{and improvement}} of the <b>software</b> <b>life</b> cycle process itself.|$|E
50|$|Rational Team Concert {{is built}} on IBM Jazz, an {{extensible}} technology platform that helps teams integrate tasks across the <b>software</b> <b>life</b> cycle.|$|E
50|$|Lessons {{learned from}} EUD {{solutions}} can significantly influence the <b>software</b> <b>life</b> cycles for commercial software products, in-house intranet/extranet developments and enterprise application deployments.|$|E
40|$|In this paper, the Goal Tree Success Tree and Master Logic Diagram (GTST-MLD) is {{proposed}} to model <b>software</b> development <b>life</b> cycle to ensure software quality based on meeting {{the criteria for}} high integrity safety systems. The GTST-MLD- based <b>software</b> development <b>life</b> cycle framework allows one to (1) show how a local change affects other phases of development; (2) GTST-MLD hierarchically represent <b>software</b> development <b>life</b> cycle so as to identify missing and incomplete requirements; (3) {{it is easy to}} automate on computers, to expand and update. Safety-critical systems are becoming increasingly important to developers, customers and regulatory agencies. Many problems and difficulties exist in assuring safety in safety-critical computing which comes to light sometimes in the software itself and sometimes in the software development process. Many factors seem t...|$|R
50|$|Utilizing these {{techniques}} appropriately throughout the <b>software</b> development <b>life</b> cycle (SDLC) to maximize security {{is the role}} of an application security team.|$|R
40|$|Software {{engineers}} {{strive to}} understand software’s evolution and make software {{better and more}} reliable. In the last decade, <b>software’s</b> <b>life</b> cycle became an interesting research area. However, software evolution could be analyzed from different aspects. In the study, we focused on analyzing structural software changes between software’s versions. We used the WatiN project and observed its structural changes during the. The research showed {{that the number of}} structural source code changes increased near the release dates...|$|R
50|$|In {{detailed}} COCOMO, {{the effort}} is calculated as function of program size {{and a set of}} cost drivers given according to each phase of <b>software</b> <b>life</b> cycle.|$|E
50|$|Object-oriented {{modeling}} is {{an approach}} to modeling an application that is used {{at the beginning of}} the <b>software</b> <b>life</b> cycle when using an object-oriented approach to software development.|$|E
5000|$|<b>Software</b> <b>Life</b> Cycle Empirical Database—established {{to support}} the acquisition, maintenance, and {{dissemination}} of software empirical life cycle data for research purposes and {{to support the}} improvement of the software development process.|$|E
40|$|In {{software}} industry {{a large number}} of projects continue to fail due to non technical issue such as communication gap,requirements and poor executive. The authors identify the reasons for which are available for <b>software</b> development <b>life</b> cycles fall short of dealing with them. They also proposed the system development for <b>software</b> development <b>life</b> cycle. In this paper, the concept of system development, SDLC is further explored and a number of concepts are discussed in this regard...|$|R
5000|$|Amira - {{commercial}} 3D visualization {{and analysis}} <b>software</b> (for <b>life</b> sciences and biomedical) {{that uses a}} ray-casting volume rendering engine (based on Open Inventor) ...|$|R
50|$|This {{is not an}} {{exhaustive}} presentation of the <b>software</b> development <b>life</b> cycle, but a list of critical development functions applicable to separation of duties.|$|R
50|$|Within ISO/IEC JTC 1/SC 7, ISO/IEC/IEEE 29119 {{is part of}} {{a larger}} body of ISO/IEEE {{standards}} made up of 153 standards, including ISO/IEC 12207 <b>software</b> <b>life</b> cycle processes and ISO/IEC 15288 systems engineering.|$|E
50|$|The ISO/IEC 12207 Systems and {{software}} engineering - <b>Software</b> <b>life</b> cycle processes {{is an international}} standard for software lifecycle processes. It aims to be the standard that defines all the tasks required for developing and maintaining software.|$|E
5000|$|Implementing {{software}} reuse entails {{more than}} creating and using libraries of assets. It requires formalizing {{the practice of}} reuse by integrating reuse processes and activities into the <b>software</b> <b>life</b> cycle. The tasks related to reuse in software construction during coding and testing are: ...|$|E
40|$|Managing a sport {{event is}} a complex task. The {{requirement}} of a software system for managing such events has significantly increased in the recent years. Sport-event management <b>software</b> has short <b>life</b> time of operation. Most of the time, the <b>software</b> development <b>life</b> cycle is also short. Thus building a high quality and reliable system is difficult. Due to these reasons, such software can be quite expensive...|$|R
50|$|Process {{patterns}} can {{be defined}} as the set of activities, actions, work tasks or work products and similar related behaviour followed in a <b>software</b> development <b>life</b> cycle.|$|R
50|$|Security is most {{effective}} if planned and managed throughout every stage of <b>software</b> development <b>life</b> cycle (SDLC), especially in critical applications or those that process sensitive information.|$|R
