65|118|Public
25|$|R-Code is a {{high-level}} scripting language for AIBO. R-Code {{allows you to}} very easily create simple programs for AIBO to execute. While it does not allow the low-level control that the OPEN-R SDK has, what it lacks in power it makes up for in simplicity. Remoting is possible via a simple terminal <b>socket</b> <b>connection</b> via WiFi. Commercial usage is allowed, and the license fee is free.|$|E
50|$|Some {{connector}} styles {{may contain}} both pin and <b>socket</b> <b>connection</b> types.|$|E
5000|$|Heavyweight - TCP {{requires}} three packets {{to set up}} a <b>socket</b> <b>connection,</b> {{before any}} user data can be sent. TCP handles reliability and congestion control.|$|E
5000|$|... 15,000+ <b>socket</b> <b>connections.</b> Sending/receiving 5000 java objects {{per second}} between 2 {{computers}} works great.|$|R
5000|$|IEC 61968 is {{transport}} independent while MultiSpeak is transport specific. SOAP messages using HTTP, TCP/IP <b>sockets</b> <b>connections</b> directly between applications & file-based transfers {{are used}} for transferring data in multispeak.|$|R
50|$|It was {{originally}} designed and implemented by Ivan Penev back in 2005 as a network layer capable to handle around 10,000 <b>socket</b> <b>connections.</b> Then it gradually included {{the most common}} functionality a programmer may need - socket communication, simple database access, reading external resources as files, URLs, etc.|$|R
5000|$|A socket is {{a special}} file used for inter-process {{communication}}. These allow communication between two processes. In addition to sending data, processes can send file descriptors across a Unix domain <b>socket</b> <b>connection</b> using the [...] and [...] system.|$|E
50|$|A Transmission Control Protocol/Internet Protocol (TCP/IP) <b>socket</b> <b>connection</b> {{establishes}} {{communication between}} the CEP and a JODA database server. The JODA receives an initial data download and periodic updates from the CEP, and also communicates with the WHIP and other client programs that are assigned to it.|$|E
5000|$|PuTTY (...) is a {{free and}} {{open-source}} terminal emulator, serial console and network file transfer application. It supports several network protocols, including SCP, SSH, Telnet, rlogin, and raw <b>socket</b> <b>connection.</b> It can also connect to a serial port. The name [...] "PuTTY" [...] has no definitive meaning.|$|E
50|$|The pooled {{object is}} {{obtained}} in predictable time when {{creation of the}} new objects (especially over network) may take variable time. These benefits are mostly true for objects that are expensive with respect to time, such as database <b>connections,</b> <b>socket</b> <b>connections,</b> threads and large graphic objects like fonts or bitmaps.|$|R
50|$|Each {{namespace}} {{will have}} a private set of IP addresses, its own routing table, <b>socket</b> listing, <b>connection</b> tracking table, firewall, and other network-related resources.|$|R
50|$|The {{insulation}} of extension cords, particularly light-duty two-wire cords, {{is easily}} damaged by being pinched, crushed, or abraded. The cords {{can also be}} damaged at the plug and <b>socket</b> <b>connections</b> by being pulled on excessively, which sometimes happens when people trip on them. Overloading can cause an extension cord to heat {{up to the point}} that its insulation either melts or carbonizes. Heating appliances may also cause heat damage to the insulation of a cord, melting or burning it away.|$|R
50|$|In {{computer}} science, {{resource contention}} {{is a conflict}} over access to a shared resource such as random access memory, disk storage, cache memory, internal buses or external network devices. In recent years, research on the contention is more focused on the resources in the memory hierarchy, e.g., last-level caches, front-side bus, memory <b>socket</b> <b>connection.</b>|$|E
5000|$|Raw TCP socket connection: A raw TCP <b>socket</b> <b>connection</b> {{which can}} be {{initiated}} from the terminal server or from the remote host/server. This can be point-to-point or shared, where serial devices (like card readers, scanners, bar code readers, weight scales, etc.) can be shared amongst multiple devices. TCP sessions can be initiated from the TCP server application or from the terminal server.|$|E
50|$|A SPICE client {{connection}} to a remote desktop server consists of multiple data channels, {{each of which is}} run over a separate TCP or UNIX <b>socket</b> <b>connection.</b> A data channel can be designated to operate in either clear-text, or TLS modes, allowing the administrator to tradeoff the security level vs performance. The TLS mode provides strong encryption of all traffic transmitted on the data channel.|$|E
40|$|Description The package {{allows one}} to compose general HTTP {{requests}} and provides convenient functions to fetch URIs, get & post forms, etc. and process the results returned by the Web server. This provides {{a great deal of}} control over the HTTP/FTP/ [...] . connection and the form of the request while providing a higher-level interface than is available just using R <b>socket</b> <b>connections.</b> Additionally, the underlying implementation is robust and extensive, supporting FTP/FTPS/TFTP (uploads and downloads), SSL/HTTPS, telnet, dict, ldap, and also supports cookies, redirects, authentication, etc...|$|R
5000|$|... #Caption: Solderless {{breadboard}} <b>socket</b> with 400 <b>connection</b> points ...|$|R
30|$|One of {{the main}} {{concepts}} introduced by HIP is the Host Identity Tag (HIT). A HIT consists of a 128 -bit identifier assigned to a specific machine. HITs, differently from IP addresses, are always permanent. This means that a host can have several IP addresses that change frequently throughout time without causing hosts to break transport layer connections between them since HITs are used to identify <b>socket</b> <b>connections</b> instead of IP addresses. Therefore, the use of HITs requires introducing a new layer between the routing and transport layers to achieve the desired independence between them.|$|R
50|$|R-Code is a {{high-level}} scripting language for AIBO. R-Code {{allows you to}} very easily create simple programs for AIBO to execute. While it does not allow the low-level control that the OPEN-R SDK has, what it lacks in power it makes up for in simplicity. Remoting is possible via a simple terminal <b>socket</b> <b>connection</b> via WiFi. Commercial usage is allowed, and the license fee is free.|$|E
50|$|Since connect is a {{messaging}} format, it has {{the advantage}} of being completely language independent. This allows applications and client tools to be created in the programming language of the user's or developer's choice. In practice, {{as long as it is}} possible to create a <b>socket</b> <b>connection,</b> send information through that socket and then receive information that way then STK can be controlled with connect using that language.|$|E
50|$|TTFB {{measures}} the duration from the user or client making an HTTP {{request to the}} first byte of the page being received by the client's browser. This time {{is made up of}} the <b>socket</b> <b>connection</b> time, the time taken to send the HTTP request, and the time taken to get the first byte of the page. Although sometimes misunderstood as a post-DNS calculation, the original calculation of TTFB in networking always includes network latency in measuring the time it takes for a resource to begin loading.|$|E
50|$|The data is {{encrypted}} {{the files}} sent over the web, via a Secure <b>Sockets</b> Layer <b>connection</b> using 256-bit encryption. Data {{is stored in}} a dedicated server hosted by providers such as SingTel.|$|R
5000|$|HDMI <b>connection</b> <b>sockets</b> (although {{some people}} use three-cord sockets for the {{different}} colours) ...|$|R
50|$|MPI {{emerged in}} the early 1990s out of discussions among 40 organizations. The initial effort was {{supported}} by ARPA and National Science Foundation. Rather than starting anew, the design of MPI drew on various features available in commercial systems of the time. The MPI specifications then gave rise to specific implementations. MPI implementations typically use TCP/IP and <b>socket</b> <b>connections.</b> MPI is now a widely available communications model that enables parallel programs to be written in languages such as C, Fortran, Python, etc. Thus, unlike PVM which provides a concrete implementation, MPI is a specification which has been implemented in systems such as MPICH and Open MPI.|$|R
50|$|The GCN {{data flow}} starts when {{gamma-rays}} from a GRB hit a detector on a spacecraft. The spacecraft sends the GRB location information {{down to a}} ground station, which in turn relays it to the GCN at the NASA Goddard Space Flight Center. At GSFC the location information is processed by GCN with custom hardware and software, and then Notices are sent to users via <b>socket</b> <b>connection,</b> e-mail, and pagers. Those users may then schedule follow-up observations of the GRB, and send refined information about the GRB back to the GCN.|$|E
50|$|TimesTen {{functionality}} {{is contained}} {{in a set of}} shared libraries that application developers link to their application, allowing TimesTen to execute as part of the application's process. This shared library approach is different than conventional RDBMS systems where the database is essentially a set of distinct processes to which applications connect via some form of inter-process communication. This communication may {{take the form of a}} client/server connection spanning over a network or it may be some form of intra-system IPC such as a Unix domain <b>socket</b> <b>connection</b> or a shared memory based connection mechanism.|$|E
50|$|VacTrAK {{contains}} both a graphical {{user interface}} and a database which is accessible through secure <b>socket</b> <b>connection</b> via the internet. Vaccination records are stored and maintained at a central database, and physicians, nurses, and other medical personnel can view, edit, and update the records from any computer with an internet connection. As the State of Alaska issues immunization requirements for all children attending school or a licensed child care program, educational and day care administrators are able to access the records with read-only privileges in order to certify eligibility for enrollment.|$|E
5000|$|An {{interposer}} is {{an electrical}} interface routing between one <b>socket</b> or <b>connection</b> to another. The purpose of an interposer is to spread {{a connection to}} a wider pitch or to reroute a connection to a different connection.|$|R
50|$|A Mobile Web Server is {{software}} {{designed for}} modern-day smartphones to host personal web servers, {{through the use}} of open sourced software, such as, i-jetty, an open source software, based on jetty. I-jetty is an open source web container, serving Java-based web content such as, servlets and JSPs. Jetty is written in Java and its API is available as a set of JARs. Developers can instantiate a jetty container as an object, instantly adding network and web connectivity to a stand-alone Java app. Jetty is built for scalable performance allowing tens of thousands of HTTP connections {{and hundreds of thousands of}} simultaneous web <b>socket</b> <b>connections.</b> Jetty is optimized and known for creating small memory footprints, increasing scalability and performance.|$|R
40|$|In {{this article}} we discuss two topics. Both {{are part of the}} CDF Run II-online system. First we present the design and current status of the CDF online {{monitoring}} project which is based on ROOT. The framework consists of three parts, the online event analysis programs to check the detector and data, the browser to display their results, and the server program which communicates with the display via <b>socket</b> <b>connections.</b> The second topic is an ORACLE based database application. It keeps track of the exact location, repair history, modification history and status of all DAQ electronic equipment during development, commissioning and physics running periods. We discuss the implementation and status of the database...|$|R
5000|$|In {{addition}} to sending data, processes may send file descriptors across a Unix domain <b>socket</b> <b>connection</b> using the [...] and [...] system calls. This allows the sending processes {{to grant the}} receiving process access to a file descriptor for which the receiving process otherwise does not have access. [...] This {{can be used to}} implement a rudimentary form of capability-based security. For example, this allows the Clam AntiVirus scanner to run as an unprivileged daemon on Linux and BSD, yet still read any file sent to the daemon's Unix domain socket.|$|E
5000|$|The Ricoh 500 {{was one of}} {{the early}} {{relatively}} inexpensive 35 mm rangefinder cameras to enter the U.S. market in 1957. It had an unusually large (for that time) f/2.8 lens, and shutter speeds from 1 second to 1/500 second. Film was advanced by a rapid-throw [...] "trigger" [...] mechanism on the bottom, and focus was controlled by two buttons, at the 3 o'clock and 9 o'clock positions that permitted very rapid shifts of focus when needed for basketball and other such sporting events. Flash could be fired from a [...] "hot shoe" [...] on the top and from a regular <b>socket</b> <b>connection.</b>|$|E
5000|$|... p1: Given a node, ci ∈ Cnew, that is {{attempting}} to join a TD, then, if the value of OSi < OST, then ci {{is not allowed to}} join TD p2: Given a node, ci ∈ Cnew, that {{is attempting}} to join a TD, then, if the value of SAFEi < SAFET, then ci is not allowed to join TD p3: Given a node, ci ∈ Cnew, that {{is attempting to}} join a TD, and a node cx in the TD, then, if the value of responsei,x = responsec, then opinioni,x = compromised p4: Given a node, ci ∈ Cnew, that is attempting to join a TD, and a node cx in the TD, then, if the value of responsei,x = responsec, then opinioni,x = uncompromised p5: Given a set of nodes, c1, ..., cx, in a TD, a node ci not in TD, and a majorityi,x = compromised, then, cx does not open a <b>socket</b> <b>connection</b> to ci (preventing ci to join TD). p6: Given a set of nodes, c1, ..., cx, in a TD, a node ci not in TD, and a majorityi,x = uncompromised, then, cx opens a <b>socket</b> <b>connection</b> to ci (thus allowing ci is to join TD). p7: Given nodes cx and cy are nodes in a TD, and cx receives messagei from cy, such that messageTamperedi = T rue, then, cx discards messagei as if it was never received.|$|E
50|$|Silverlight also {{includes}} classes for data access over web services, REST, Windows Communication Foundation (WCF) Services and ADO.NET Data Services. The networking support in Silverlight {{can be used}} by Silverlight applications to communicate using HTTP, or at the lower socket level. Cross-domain communication is supported. Silverlight uses an XML-based configuration file to control the cross-domain resource-access policy, for both HTTP and <b>socket</b> <b>connections.</b> It {{can be used by}} site administrators to control which resources a Silverlight application can access, when that application did not originate in the domain of the site. In addition, Silverlight also supports the Adobe Flash Cross-domain policy file format. Silverlight sockets can only initiate a connection; they cannot listen for connections.|$|R
50|$|The pooling of {{resources}} {{can offer a}} significant performance boost in situations that have high cost associated with resource acquiring, high rate of the requests for resources, and a low overall count of simultaneously used resources. Pooling is also useful when the latency is a concern, because a pool offers predictable times required to obtain resources since they have already been acquired. These benefits are mostly true for system resources that require a system call, or remote resources that require a network communication, such as database <b>connections,</b> <b>socket</b> <b>connections,</b> threads, and memory allocation. Pooling is also useful for expensive-to-compute data, notably large graphic objects like fonts or bitmaps, acting essentially as a data cache or a memoization technique.|$|R
50|$|Unlike PVM, {{which has}} a {{concrete}} implementation, MPI is a specification rather than {{a specific set of}} libraries. The specification emerged in the early 1990 out of discussions between 40 organizations, the initial effort having been supported by ARPA and National Science Foundation. The design of MPI drew on various features available in commercial systems of the time. The MPI specifications then gave rise to specific implementations. MPI implementations typically use TCP/IP and <b>socket</b> <b>connections.</b> MPI is now a widely available communications model that enables parallel programs to be written in languages such as C, Fortran, Python, etc. The MPI specification has been implemented in systems such as MPICH and Open MPI.|$|R
