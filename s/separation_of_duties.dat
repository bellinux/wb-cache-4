136|10000|Public
25|$|An {{important}} physical {{control that}} is frequently overlooked is the <b>separation</b> <b>of</b> <b>duties,</b> which ensures {{that an individual}} can not complete a critical task by himself. For example: an employee who submits a request for reimbursement should not {{also be able to}} authorize payment or print the check. An applications programmer should not also be the server administrator or the database administrator – these roles and responsibilities must be separated from one another.|$|E
2500|$|Mary I's Carta de Lei (law) of 1787 [...] {{replaced}} the Real Mesa Censória with the Mesa da Comissão Geral sobre o Exame e Censura dos Livros (Board of the General Commission on the Exam and Censorship of the Books), the Queen having asked Pope Pius VI {{to provide this}} organ with the adequate jurisdiction for the censorship works throughout the entire Portuguese Empire. On December 17, 1793 Portugal returned to a system {{similar to the one}} in use before the Real Mesa Censória, with the <b>separation</b> <b>of</b> <b>duties</b> between 3 authorities: Pontifical, Royal and Episcopal. This meant that the Inquisition once again set foot on Portuguese lands. These were, however, times of change. Some periodicals, like the Correio Brasiliense (1808), the Investigador Português (1811), and the Campeão Português, managed to evade investigation during this period. During the Peninsular war, a rigorous regime of censorship was instituted by the French authorities, similar to the one in place in France at the time. Despite that, clandestine newspapers were still published. It would be from London, however, that the political refugees, with the support of local Portuguese merchants, would start an abundant literary production and an effort to translate the most important liberal works by John Locke, Adam Smith and Benjamin Franklin, among others, and establish dozens of periodicals, some of them being printed until after the Civil War.|$|E
5000|$|Based on <b>separation</b> <b>of</b> <b>duties,</b> Information Delivery can {{be split}} in two areas: ...|$|E
40|$|The {{increasing}} {{reliance on}} information technology to support business processes has emphasised {{the need for}} information security mechanisms. This, however, has resulted in an ever-increasing workload in terms of security administration. Policy-based approaches have been proposed, promising to lighten the workload <b>of</b> security administrators. <b>Separation</b> <b>of</b> <b>duty</b> is one <b>of</b> the principles cited as a requirement when setting up these policy-based mechanisms. Different types <b>of</b> <b>separation</b> <b>of</b> <b>duty</b> policies exist. They can be categorised into policies that can be enforced at administration time, viz. static <b>separation</b> <b>of</b> <b>duty</b> requirements and policies that can be enforced only at execution time, viz. dynamic <b>separation</b> <b>of</b> <b>duty</b> requirements. This paper deals with specifying static <b>separation</b> <b>of</b> <b>duty</b> requirements in role-based workflow environments. It proposes a mathematical model based {{on the concept of}} “conflicting entities ” to express static <b>separation</b> <b>of</b> <b>duty</b> requirements. It provides a detailed explanation of the integrity checking that must take place at administration time to ensure that specified <b>separation</b> <b>of</b> <b>duty</b> requirements are honoured...|$|R
40|$|<b>Separation</b> <b>of</b> <b>Duty</b> is a {{principle}} {{that has a}} long history in computer security research. Many computing systems provide rudimentary support for this principle, but often the support is inconsistent with the way the principle is applied in non-computing environments. Furthermore, {{there appears to be no}} single accepted meaning of the term. We examine the ways in which <b>Separation</b> <b>of</b> <b>Duty</b> has been used, adding the notion <b>of</b> History-based <b>Separation</b> <b>of</b> <b>Duty.</b> We assess ways in which computing systems may support <b>Separation</b> <b>of</b> <b>Duty.</b> We discuss the mechanisms we are implementing to support <b>Separation</b> <b>of</b> <b>Duty</b> and roles in Adage, a general-purpose authorization language and toolkit...|$|R
40|$|<b>Separation</b> <b>of</b> <b>duty</b> {{constraints}} define {{mutual exclusion}} relations between two entities (e. g. two permissions). Thus, a software component {{that supports the}} definition <b>of</b> <b>separation</b> <b>of</b> <b>duty</b> constraints implicitly requires a means to control their definition and to ensure {{the consistency of the}} resulting runtime structures. In this paper, we present our experiences with the implementation of conflict-checking methods for <b>separation</b> <b>of</b> <b>duty</b> constraints in the XORBAC access control service...|$|R
50|$|Existing {{methods to}} protect data and systems from the {{malicious}} insider include auditing, job rotation and <b>separation</b> <b>of</b> <b>duties.</b> Auditing is a reactive method meant to discover {{who did what}} after the fact. Job rotation and <b>separation</b> <b>of</b> <b>duties</b> are limiting techniques meant to minimize prolonged access to sensitive data or systems in order to limit undesirable acts. In contrast, MPA is a pro-active solution.|$|E
5000|$|To {{successfully}} implement <b>separation</b> <b>of</b> <b>duties</b> {{in information}} systems {{a number of}} concerns need to be addressed: ...|$|E
50|$|The {{accounting}} {{profession has}} invested significantly in <b>separation</b> <b>of</b> <b>duties</b> {{because of the}} understood risks accumulated over hundreds of years of accounting practice.|$|E
40|$|Constraints {{in access}} control {{in general and}} <b>separation</b> <b>of</b> <b>duty</b> {{constraints}} in particular are an important area of research. There are two important issues relating to constraints: their specification and their enforcement. We believe that existing <b>separation</b> <b>of</b> <b>duty</b> specification schemes are rather complicated and that the few enforcement models that exist are unlikely to scale well. We examine the assumptions behind existing approaches to <b>separation</b> <b>of</b> <b>duty</b> and present a combined specification and implementation model for a class of constraints that includes <b>separation</b> <b>of</b> <b>duty</b> constraints. The specification model is set-based and has a simpler syntax than existing approaches. We discuss the enforcement of constraints {{and the relationship between}} static, dynamic and historical <b>separation</b> <b>of</b> <b>duty</b> constraints. Finally, we propose a model for a scalable role-based reference monitor, based on dynamic access control structures, {{that can be used to}} enforce constraints in an efficient manner...|$|R
40|$|This paper {{presents}} the <b>separation</b> <b>of</b> <b>duty</b> and context constraints of recently proposed Contextual Role-Based Access Control Model C-RBAC. Constraints in C-RBAC enabled the specification {{of a rich}} set <b>of</b> <b>Separation</b> <b>of</b> <b>Duty</b> (SoD) constraints over spatial purpose roles. In healthcare environment in which user roles are position and are purpose dependant, the notion of SoD is still meaningful and relevant {{to the concept of}} conflict of interest. SoD may be defined as Static <b>Separation</b> <b>of</b> <b>Duty</b> (SSoD) and Dynamic <b>Separation</b> <b>of</b> <b>Duty</b> (DSoD) depending on whether exclusive role constraints are evaluated against the user-role assignment set or against the set of roles activated in user’s session. In particular, the model is capable of expressing a wider range of constraints on spatial domains, location hierarchy schemas, location hierarchy instances, spatial purposes and spatial purpose roles...|$|R
50|$|<b>Separation</b> <b>of</b> <b>duty,</b> as a {{security}} principle, has as its primary objective the prevention of fraud and errors. This objective is achieved by disseminating the tasks and associated privileges for a specific business process among multiple users. This principle is demonstrated in the traditional example <b>of</b> <b>separation</b> <b>of</b> <b>duty</b> found in the requirement of two signatures on a cheque.|$|R
5000|$|Proper <b>separation</b> <b>of</b> <b>duties</b> {{also needs}} to be verified. The company’s {{internal}} controls need to be tested to determine if they are effective.|$|E
50|$|<b>Separation</b> <b>of</b> <b>duties</b> {{is a key}} {{concept of}} {{internal}} controls. Increased protection from fraud and errors must be balanced with the increased cost/effort required.|$|E
50|$|This {{is not an}} {{exhaustive}} presentation of the software development life cycle, but a list of critical development functions applicable to <b>separation</b> <b>of</b> <b>duties.</b>|$|E
5000|$|The {{principle}} <b>of</b> <b>separation</b> <b>of</b> <b>duty</b> {{requires that}} the certifier of a transaction and the implementer be different entities.|$|R
40|$|Abstract. <b>Separation</b> <b>of</b> <b>duty</b> (SOD) is an {{important}} characteristic in the role-based access control (RBAC) system. In view of some issues such as various variations of SOD constraints (SODs), ambiguous relations among constraint states, this paper formally defines several typical SODs and analyzes the transition relations among different SODs states. In combination with a delegation case, it goes an exploration and discussion on the SODs state transition issues, and proposes some corresponding solutions. Keywords: Role-based access control, <b>Separation</b> <b>of</b> <b>duty,</b> Delegation 1...|$|R
40|$|Role based {{access control}} (RBAC) is {{attracting}} increasing attention {{as a security}} mechanism for both commercial and many military systems. Much of RBAC is fundamentally different from multi-level security (MLS) systems, and the properties of RBAC systems have not been explored formally {{to the extent that}} MLS system properties have. This paper explores some aspects of mutual exclusion of roles as a means <b>of</b> implementing <b>separation</b> <b>of</b> <b>duty</b> policies, including a safety property for <b>separation</b> <b>of</b> duty; relationships between different types of exclusion rules; properties of mutual exclusion for roles; constraints on the role hierarchy introduced by mutual exclusion rules; and necessary and sufficient conditions for the safety property to hold. Results have implications for implementing <b>separation</b> <b>of</b> <b>duty</b> controls through mutual exclusion of roles, and for comparing mutual exclusion with other means <b>of</b> implementing <b>separation</b> <b>of</b> <b>duty</b> policies. 1 Introduction Role based access control (RBAC) [...] ...|$|R
5000|$|Are proper <b>separation</b> <b>of</b> <b>duties</b> {{implemented}} and enforced, and are technology and procedures {{in place to}} make sure there is a continuous and accurate audit trail? ...|$|E
50|$|The 1.3.0 release {{came out}} on 2011-10-11, with a {{sizeable}} change log, generally focussing on performance, <b>separation</b> <b>of</b> <b>duties</b> and fixing the (design) issues in 1.2.|$|E
50|$|Computer {{assisted}} {{audit techniques}} {{should be used}} to explore the system, and on hand observations should be conducted to verify procedures, such as <b>separation</b> <b>of</b> <b>duties</b> are being followed.|$|E
40|$|This paper {{examines}} {{some questions}} concerning commercial computer security integrity policies. We {{give an example}} <b>of</b> a dynamic <b>separation</b> <b>of</b> <b>duty</b> policy which cannot be implemented by TCSEC based mechanisms alone, yet occurs in the real commercial world, and can be implemented efficiently in practice. We examine and describe a commercial computer security product in wide use for ensuring the integrity of financial transactions, show that it implements a well defined and sensible integrity policy that includes <b>separation</b> <b>of</b> <b>duty,</b> yet fails to meet either the TCSEC criteria or the Clark and Wilson rules...|$|R
40|$|Security {{policies}} play {{an important}} role in today's computer systems. We show some severe limitations of the widespread standard role-based access control (RBAC) model, namely that object-based dynamic <b>separation</b> <b>of</b> <b>duty</b> as introduced by Nash and Poland cannot be expressed with it. We suggest to overcome these limitations by extending the RBAC model with an execution history. The natural next step is then to add temporal logic for the specification of execution orders. We show that with this, object-based dynamic <b>separation</b> <b>of</b> <b>duty,</b> as well as other policies, can be adequately specified...|$|R
40|$|A <b>separation</b> <b>of</b> <b>duty</b> policy {{requires}} a sensitive task {{to be performed}} {{by a team of}} at least k users. It states a high-level requirement about the task without the need to refer to individual steps in the task. While extremely important and widely used, <b>separation</b> <b>of</b> <b>duty</b> policies cannot capture qualification requirements on users involved in the task. In this paper, we introduce a novel algebra that enables the specification of high-level policies that combine user qualification requirements with <b>separation</b> <b>of</b> <b>duty</b> considerations. A high-level policy associates a task with a term in the algebra and requires that all sets of users that perform the task satisfy the term. Our algebra has four operators. We give the syntax and semantics of the algebra and study algebraic properties of these operators. We also study several computational problems related to the algebra. As our algebra is about the general concept of sets of sets, we conjecture that it will prove to be useful in other contexts as well...|$|R
50|$|Internal control {{involves}} human action, which {{introduces the}} possibility of errors in processing or judgment. Internal control can also be overridden by collusion among employees (see <b>separation</b> <b>of</b> <b>duties)</b> or coercion by top management.|$|E
50|$|CR {{refers to}} the risk that a {{misstatement}} could occur but may not be detected and corrected or prevented by the entity's internal control mechanism. Example,control risk assessment may be higher in an entity where <b>separation</b> <b>of</b> <b>duties</b> is not well defined.|$|E
5000|$|Mémorial is {{subdivided}} into three separate publications. Although the separate publications {{had already been}} established, the current arrangement and <b>separation</b> <b>of</b> <b>duties</b> is dictated by the Grand Ducal decree of 9 January 1961. [...] Under that decree, the three publications of Mémorial are: ...|$|E
40|$|A {{high-level}} {{security policy}} states an overall requirement for a sensitive task. One {{example of a}} high-level security policy is a <b>separation</b> <b>of</b> <b>duty</b> policy, which requires a sensitive task to be performed {{by a team of}} at least k users. It states a high-level requirement about the task without the need to refer to individual steps in the task. While extremely important and widely used, <b>separation</b> <b>of</b> <b>duty</b> policies state only quantity requirements and do not capture qualification requirements on users involved in the task. In this paper, we introduce a novel algebra that enables the specification of high-level policies that combine qualification requirements with quantity requirements motivated by <b>separation</b> <b>of</b> <b>duty</b> considerations. A high-level policy associates a task with a term in the algebra and requires that all sets of users that perform the task satisfy the term. We give the syntax and semantics of the algebra and study algebraic properties of its operators. We also study several computational problems related to the algebra...|$|R
40|$|Crampton and Sellwood {{recently}} introduced {{a variant of}} relationship-based access control based on the concepts of relationships, paths and principal matching, to which we will refer as the RPPM model. In this paper, we show that the RPPM model can be extended to provide support for caching of authorization decisions and enforcement <b>of</b> <b>separation</b> <b>of</b> <b>duty</b> policies. We show that these extensions are natural and powerful. Indeed, caching provides far greater advantages in RPPM than it does in most other access control models and {{we are able to}} support a wide range <b>of</b> <b>separation</b> <b>of</b> <b>duty</b> policies. Comment: Accepted for publication at STM 2014 (without proofs, which are included in this longer version...|$|R
40|$|In this paper, we {{introduce}} EB 3 SEC. This {{language is}} used to express access control policies in information systems. Permissions and prohibitions are expressed with a class diagram. EB 3 SEC also includes a process algebra. This process algebra allows one to express specific constraints over permissions and prohibitions. Organizational constraints such as obligation and <b>separation</b> <b>of</b> <b>duty</b> are also supported by process algebra. <b>Separation</b> <b>of</b> <b>duty</b> constraints can be expressed at a workflow process level. Standards such as RBAC or OrBAC {{can be used to}} express the access control policy, but their derivatives can also be used. EB 3 SEC provide a formal language {{with a high level of}} expressiveness to describe access control policies. ...|$|R
50|$|A {{constraint}} {{places a}} restrictive {{rule on the}} potential inheritance of permissions from opposing roles, thus {{it can be used}} to achieve appropriate <b>separation</b> <b>of</b> <b>duties.</b> For example, the same person should not be allowed to both create a login account and to authorize the account creation.|$|E
50|$|The company {{developed}} {{technology to}} encrypt data at the filesystem or volume manager layer with keys managed in an appliance. The technology called “Metaclear” enabled file metadata {{to be in}} the clear while the file data is encrypted, enabling a <b>separation</b> <b>of</b> <b>duties</b> as file owners access data while file administrators can view metadata. This approach provided encryption, access control, and reporting.|$|E
50|$|Complications {{can arise}} when {{constraints}} such as <b>separation</b> <b>of</b> <b>duties</b> exist between roles. If separation of duty {{was used to}} prohibit personnel from holding both ‘loan manager’ and ‘accountant’ roles, then ‘branch manager’ could not inherit permissions from both of them. The NIST RBAC model, which unified the FK and SCFY models, treats the role hierarchy as a partial order, although RBAC products have not gone beyond the tree structured hierarchy.|$|E
50|$|GBAC {{was first}} {{implemented}} in the CoCoS Environment within the organizational server CoCoSOrg. In the C-Org-Project it was extended with more sophisticated features like <b>separation</b> <b>of</b> <b>duty</b> or access control in distributed environments. There is also a cloud-based implementation on IBM's BlueMix platform.|$|R
50|$|Randy Franklin Smith's Ultimate Windows Security {{points out}} that given the ability of administrators to {{manipulate}} the Security Log to cover unauthorized activity, <b>separation</b> <b>of</b> <b>duty</b> between operations and security-monitoring IT staff, combined with frequent backups of the log to a server accessible only to the latter, can improve security.|$|R
40|$|We {{introduce}} {{the notion of}} resiliency policies {{in the context of}} access control systems. Such policies require an access control system to be resilient to the absence of users. An example resiliency policy requires that upon removal of any s users, there should still exist d disjoint sets of users such that the users in each set together possess certain permissions of interest. Such a policy ensures that even when emergency situations cause some users to be absent, there still exist independent teams of users that have the permissions necessary for carrying out critical tasks. The Resiliency Checking Problem determines whether an access control state satisfies a given resiliency policy. We show that the general case of the problem and several subcases are intractable (NP-hard), and identify two subcases that are solvable in linear time. For the intractable cases, we also identify the complexity class in the polynomial hierarchy to which these problems belong. We discuss the design and evaluation of an algorithm that can efficiently solve instances of nontrivial sizes that belong to the intractable cases of the problem. Furthermore, we study the consistency problem between resiliency policies and static <b>separation</b> <b>of</b> <b>duty</b> policies. Finally, we combine the notions <b>of</b> resiliency and <b>separation</b> <b>of</b> <b>duty</b> to {{introduce the}} resilient <b>separation</b> <b>of</b> <b>duty</b> policy, which is useful in situations where both fault-tolerance and fraud-prevention are desired...|$|R
