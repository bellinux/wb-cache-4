1|12|Public
40|$|This article {{proceeds}} from a critical sociological revision of classical constitutional theory. In particular, it argues for a sociological {{reconstruction of the}} central concepts of constitutional theory: constituent power and rights. These concepts, it is proposed, first evolved as an internal reflexive dimension of the modern political system, which acted originally to stabilize the political system as a relatively autonomous aggregate of actors, adapted to the differentiated interfaces of a modern society. This revision of classical constitutional theory provides a basis for a distinctive account of transnational constitutional pluralism or societal constitutionalism. The article argues that the construction of transnational normative orders needs to be placed, in a sociological dimension, on a clearer continuum with classical constitutional models. Although contemporary society is marked by multiple, nationally overarching, and often functionally specific constitutions, such normative structures extend the original functions of constituent power and rights. The article sets out the concluding hypothesis that rights form a running constitution in contemporary society, facilitating highly improbable acts of transnational structural construction and systemic inclusion. It is around the code rights-relevant/rights-irrelevant that transnational society constructs its processes of politicization and political inclusion. This code, however, brings to light a subsidiary or <b>skeletal</b> <b>coding,</b> which was latently co-implied in the political exchanges of modern society, and which was already expressed in early constitutionalism. Transnational Societal Constitutionalism Symposium, Collegio Carlo Alberto, Turin Italy, May 17 - 19, 201...|$|E
40|$|Abstract. This paper {{describes}} a simulation-based technique {{for the performance}} prediction of message-passing applications on cluster systems. Given data measuring {{the performance of a}} target cluster in the form of standard benchmark results, along with the details of the chosen computing configuration (e. g., the number of nodes), it is possible to build and to validate automatically a detailed simulation model. This makes it possible to predict the performance of fully-developed or <b>skeletal</b> <b>code</b> off-line, i. e., without resorting to the real hardware. The reasonable accuracy obtained makes this approach particularly useful for preliminary performance testing of parallel code on non-available hardware. After a description of the approach and of the construction and validation of the simulation model, the paper presents a case study. ...|$|R
40|$|This report {{provides}} {{an introduction to}} the definition of the Hamlet Application Design Language (ADL). ADL is a graphical-based language and notation supporting the design of parallel real-time applications. Designs expressed in ADL are based on a model of processes that communicate by message-passing. Communication can either be synchronous or asynchronous, and orthogonally, may be subject to blocking, delaying, or nonblocking timing constraints. The language has been devised {{in such a way that}} automated (<b>skeletal)</b> <b>code</b> generation can be supported. To this aim, structural aspects are expressed in a notation somewhat similar to data-flow diagrams, whereas behavioral aspects are expressed as state-transition machines following a syntax similar to that of SDL. Exploitation of parallelism is obtained by annotating a design with process replication specifications...|$|R
40|$|AbstractSoftware Architectures {{have evolved}} {{considerably}} {{over the last}} decade and, partly also due to the significant progress made in component-based development, have become a major subfield of Software Engineering. The associated field of Architecture Description Languages (ADLs) has also evolved considerably, providing numerous approaches to the formal specification and representation of architectural designs. In this field, one of its most interesting (and rather recent) aspects has been the exploration of different ways to map architectural specifications down to executable representations. In this paper, we present a methodology for mapping the generic features of any typical ADL to executable code. The mapping process involves the use of ACME, a generic language for describing software architectures, and the coordination paradigm. More to the point, we show how the core concepts of ACME can be mapped to equivalent executable code written in the coordination language Manifold. The result is the generation of <b>skeletal</b> <b>code</b> which captures and implements the most important system implementation properties of the translated architectural design, thus significantly assisting the programmer in filling {{in the rest of the}} needed code...|$|R
40|$|FACT (Finite Automaton Compilation Tool) is a {{tool for}} the {{generation}} of <b>skeletal</b> Java <b>code</b> from a graphical spec ification of a concurrent system given in terms of networks of communicating automata. The code implements the dy namic behavior of the set of concurrent automata, abstract ing from data computation, and satisfies the constraints im posed by the specification. Moreover, global properties of the concurrent behavior {{of the system that}} are proved at the specification level are preserved by the implementation...|$|R
30|$|<b>Skeletal</b> trauma are <b>coded</b> {{independently}} {{of them being}} perimortal (fresh) or healed. Analyses of trauma were not a main purpose of the research into the Montella skeletons. So in the general examination traumatic lesions were only recorded {{to one of the}} bodily regions: Head, arms, legs and the rest.|$|R
50|$|Without {{sophisticated}} animation code, an avatars feet {{will appear}} to slide {{on the ground}} when moving at any other speed than what the animator specifically animated for. This {{may have been the}} case with Heretic II when the game went from first person POV to third person POV. Every speed at every direction had to be manually pre-animated for. It is possible that with advanced <b>skeletal</b> animation <b>code,</b> variable translation control would not cause sliding feet. A player would need variable translation control {{to take full advantage of}} new sophisticated animation code.|$|R
40|$|Project (M. S., Computer Science) [...] California State University, Sacramento, 2009. Formal {{languages}} use mathematical notations {{to capture}} the software specifications precisely. Design by Contract is a technique used during software implementation {{to ensure that the}} software conforms to the specifications. However, there is a semantic gap in the development process between the specifications written in a formal language and the design contracts written in an implementation language. Automated conversion of formal specifications to the design contracts in object-oriented implementation languages can help bridge this gap. Prior work has been done by Sowmiya Ramkarthik and Sherri Sanders to develop such tools for the automated conversions from the Object-Z formal language to the Java and Object PERL implementation languages. However, each tool was custom built to work with only one or two such OO languages. Moreover, there has been significant redundant efforts in the development of each of these tools. FOZCIL (Framework for Object Z Conversion to Implementation Language) is a framework that captures and implements these redundant language-independent features as frozen spots (i. e., the fixed part of the framework) and the language-dependent properties as hot spots (i. e., the extensible part of the framework). When the framework accepts the language-dependent features for a target object-oriented language, it generates a FOZCIL tool instance which, in turn, is capable of accepting Object-Z specifications and converting the specifications to <b>skeletal</b> <b>code</b> with dynamically-checkable design contracts written in that target language. Computer Scienc...|$|R
40|$|Master of Science in Engineering - EngineeringAny {{software}} project {{goes through}} the different stages of a Software Development Life Cycle (SDLC). Like any other commercial product, software has a design stage but this stage is unique and critical to software due to its soft nature. A system that is given careful thought at the design phase results in a correct and complete system and adheres to software design principle. The “Unified Modelling Language” (UML) is a standard modelling language for object-oriented systems. Many tools are currently available to support the design and implementation of software. Generating <b>skeletal</b> <b>code</b> from a design brings down the implementation time considerably. This research report presents a list of criteria against which one can compare different UML tools, and puts forward a rating system where decisions can be made on them. It {{presents a comparison between}} four UML tools: ArgoUML, Rational Rose, Together Control Centre, and MasterCraft. An end-to-end application was developed on each of these tools as part of the evaluation process. During the design phase a detailed design was done using the ICONIX process. The different features of an ideal UML tool is analysed and used to evaluate the four selected tools. Of the four tools, Rational Rose, Together Control Centre, MasterCraft are offthe-shelf modelling softwares whereas ArgoUML is an open source modelling software. From the evaluation it is observed that Together Control Centre attains a high score with Rational Rose following just behind. MasterCraft comes third. Argo UML has the least score but it has the advantage of being an open source software...|$|R
40|$|Construction of {{correctness}} is {{an essential}} issue {{for the implementation of}} a reliable software system. Formal methods based verification techniques provide programmers various ways to reason their program correctness through mathematically supported static analysis and dynamic analysis. In this paper, we introduce a tool that converts formal specifications in a subset of Object-Z to <b>skeletal</b> Spec # <b>code</b> with assertions. This tool aims at facilitating the refinement from formal specifications to Spec # and the full usage of the static and dynamic analysis techniques in Spec#. ...|$|R
40|$|We {{examined}} {{the expression of}} alpha-skeletal, alpha-cardiac, and beta- and gamma-cytoskeletal actin genes in a mouse skeletal muscle cell line (C 2 C 12) during differentiation in vitro. Using isotype-specific cDNA probes, we showed that the alpha-skeletal actin mRNA pool reached only 15 % of the level reached in adult skeletal muscle and required several days to attain this peak, which was then stably maintained. However, these cells accumulated a pool of alpha-cardiac actin six {{times higher than the}} alpha-skeletal actin mRNA peak within 24 h of the initiation of differentiation. After cells had been cultured for an additional 3 days, this pool declined to 10 % of its peak level. In contrast, over 95 % of the actin mRNA in adult <b>skeletal</b> muscle <b>coded</b> for alpha-actin. This suggests that C 2 C 12 cells express a pattern of sarcomeric actin genes typical of either muscle development or regeneration and distinct from that seen in mature, adult tissue. Concurrently in the course of differentiation the beta- and gamma-cytoskeletal actin mRNA pools decreased to less than 10 % of their levels in proliferating cells. The decreases in beta- and gamma-cytoskeletal actin mRNAs are apparently not coordinately regulated...|$|R
40|$|Mammalian {{hibernation}} is {{a complex}} phenotype involving metabolic rate reduction, bradycardia, profound hypothermia, and a reliance on stored fat that allows the animal to survive for months without food {{in a state of}} suspended animation. To determine the genes responsible for this phenotype in the thirteen-lined ground squirrel (Ictidomys tridecemlineatus) we used the Roche 454 platform to sequence mRNA isolated at six points throughout the year from three key tissues: heart, skeletal muscle, and white adipose tissue (WAT). Deep sequencing generated approximately 3. 7 million cDNA reads from 18 samples (6 time points × 3 tissues) with a mean read length of 335 bases. Of these, 3, 125, 337 reads were assembled into 140, 703 contigs. Approximately 90 % of all sequences were matched to proteins in the human UniProt database. The total number of distinct human proteins matched by ground squirrel transcripts was 13, 637 for heart, 12, 496 for skeletal muscle, and 14, 351 for WAT. Extensive mitochondrial RNA sequences enabled a novel approach of using the transcriptome to construct the complete mitochondrial genome for I. tridecemlineatus. Seasonal and activity-specific changes in mRNA levels that met our stringent false discovery rate cutoff (1. 0 × 10 − 11) were used to identify patterns of gene expression involving various aspects of the hibernation phenotype. Among these patterns are differentially expressed genes encoding heart proteins AT 1 A 1, NAC 1 and RYR 2 controlling ion transport required for contraction and relaxation at low body temperatures. Abundant RNAs in <b>skeletal</b> muscle <b>coding</b> ubiquitin pathway proteins ASB 2, UBC and DDB 1 peak in October, suggesting an increase in muscle proteolysis. Finally, genes in WAT that encode proteins involved in lipogenesis (ACOD, FABP 4) are highly expressed in August, but gradually decline in expression during the seasonal transition to lipolysis...|$|R
40|$|To {{analyze the}} {{formation}} of neuromuscular junctions, mouse pluripotent embryonic stem (ES) cells were differentiated via embryoid bodies into skeletal muscle and neuronal cells. The developmentally controlled expression of <b>skeletal</b> muscle-specific genes <b>coding</b> for myf 5, myogenin, myoD and myf 6, 1 subunit of the L-type calcium channel, cell adhesion molecule M-cadherin, and neuron-specific genes encoding the 68 -, 160 -, and 200 -kDa neurofilament proteins, synaptic vesicle protein synaptophysin, brain-specific proteoglycan neurocan, and microtubule-associated protein tau was demonstrated by RT-PCR analysis. In addition, genes specifically expressed at neuromuscular junctions, the - and -subunits of the nicotinic acetylcholine receptor (AChR) and the extracellular matrix protein S-laminin, were found. At the terminal differentiation stage characterized by {{the formation of}} multinucleated spontaneously contracting myotubes, the myogenic regulatory gene myf 6 and the AChR -subunit gene, both specifically expressed in mature adult skeletal muscle, {{were found to be}} coexpressed. Only the terminally differentiated myotubes showed a clustering of nicotinic acetylcholine receptors (AChR) and a colocalization with agrin and synaptophysin. The formation of AChRs was also demonstrated on a functional level by using the patch clamp technique. Taken together, our results showed that during ES cell differentiationin vitroneuron- and muscle-specific genes are expressed in a developmentally controlled manner, resulting in the formation of postsynaptic-like membranes. Thus, the embryonic stem cell differentiation model will be helpful for studying cellular interactions at neuromuscular junctions by loss of function analysisin vitro...|$|R

