29|26|Public
50|$|Trimmer and Tufts {{colleague}} David L. Kaplan gained {{international attention}} in 2007 upon successfully creating the world's first soft-bodied robot. The robot, or <b>SoftBot,</b> {{is composed of}} silicone elastomers and resembles a tobacco hornworm, a caterpillar that Trimmer has studied since 1990.|$|E
5000|$|Currently {{exhibited}} at the Museum of Modern Art (MoMa) in New York City, Trimmer and Kaplan hope the <b>SoftBot</b> will help [...] "spark revolutions in medicine, the military and even outer-space exploration." [...] Kaplan believes that, among other medical applications, soft-bodied robots could replace tiny cameras that patients swallow to help diagnose diseases.|$|E
40|$|Washington (Etzioni, Lesh, & SegaI 1993). The <b>softbot</b> uses a UNIX {{shell and}} the World- Wide Web to {{interact}} {{with a wide range}} of internet resources. The softbot's effectors include ftp. telnet. mail, and numerous file manipulation commands. Its sensors include internet facilities such as archie. gopher. netf ind, and many more. The <b>softbot</b> is designed to incorporate new facilities into its repertoire as they become available. The softbot's &quot;added value &quot; is three-fold. First, it provides an integrated and expressive interface to the internet. Second, the <b>softbot</b> dynamically chooses which facilities to invoke, and in what sequence. For example, the <b>softbot</b> might use netfind to determine David McAllester's e-mail address. Since it knows that netfind requires a person's institution as input, th...|$|E
40|$|Planning and Knowledge Representation for <b>Softbots</b> by Keith Golden Chairperson of Supervisory Committee: Professor Dan Weld Computer Science and Engineering This thesis {{describes}} {{the design of}} a planner and knowledge representation languages for building software agents, known as <b>softbots.</b> While the focus of this thesis is on <b>softbots,</b> the ideas and algorithms presented here are general-purpose and could be applied to robotic domains as well. The major contributions are: ffl The lcw (Local Closed World) knowledge representation, used to capture an agent's incomplete information about the world, which can include localized closure information, such as knowledge of all files in a directory. We present lcw inference and update procedures that are sound, fast and effective. ffl The sadl action language, used to describe actions and goals available to the agent, including sensing actions and goals of acquiring new information. We define the semantics for sadl and we illustrate the exp [...] ...|$|R
40|$|In multi-agent systems {{based on}} <b>softbots,</b> {{communication}} architectures have significant influences on system performance as interaction and cooperation of <b>softbots</b> {{are carried out}} via agent communication. In this {{paper we propose a}} new communication architecture which is based on a round-table mechanism. Communication channels are preliminarily defined based on the matching of agent requests. A channel connects an agent to a queue of matched agents with the same interests and is scheduled to become periodically active based on their proportions in total demand and the amount of available resources. The order of activating channels and the sequence of agents in matched queues are defined based on agent time constraints. Our evaluation shows that the proposed model achieves a good balance of performance and quality of service compared with the other methods and is especially useful when the number of agents are very large and the capacity of systems is limited. Keywords: multi-gent systems, architecture, communication, <b>softbots,</b> E-business. 1...|$|R
40|$|With the e. xplosive {{growth of}} {{information}} sources on the Internet, {{a number of}} software agents or <b>softbots</b> have been built to help users search and retrieve electronic documents from servers around the world. Information preferences vary greatly across users and therefore <b>softbots</b> must be highly personalized to serve the information filtering needs. of the user. In this paper we formulate information filtering as a learning problem and develop a genetic programming approach to this problem. Given a set of sample documents, genetic program-ming evolves a population of agents that specialize to user interests. Our ex-perimental results indicate that genetic programming is a promising technique for discovering and adapting to the specific interests of individual users...|$|R
40|$|In the RoboCup 97 robot soccer tournament, {{we entered}} {{a team of}} <b>softbot</b> {{programs}} whose player strategies had been entirely learned by computer. Our team beat other human-coded competitors and received the RoboCup 97 Scientific Challenge award. This paper discusses our approach, and details various ways that, in retrospect, {{it could have been}} improved. 1 Introduction The RoboCup simulation tournament pits teams of <b>softbot</b> programs against each other in simulated soccer matches,promoting artificial intelligence strategies that are robust in dynamic, noisy environments. For the RoboCup 1997 simulation tournament, most teams refined well-understood robotics techniques in order to win the competition. Almost every team used hand-coded decision algorithms, though some optimized a few low-level functions (like ball interception) with backpropagation or decision trees. In contrast, we ([Luke et al 1998 a]) entered a <b>softbot</b> team whose high-level strategies were entirely learned through genetic [...] ...|$|E
40|$|At RoboCup, {{teams of}} {{autonomous}} robots or software softbots compete in simulated soccer matches to demonstrate cooperative robotics techniques {{in a very}} difficult, real-time, noisy environment. At the IJCAI/RoboCup 97 <b>softbot</b> competition, all entries but ours used human-crafted cooperative decision-making behaviors. We instead entered a <b>softbot</b> team whose high-level decision making behaviors had been entirely evolved using genetic programming. Our team won its first two games against human-crafted opponent teams, and received the RoboCup Scientific Challenge Award. This report discusses the issues we faced and the approach we took to use GP to evolve our robot soccer team for this difficult environment. ...|$|E
40|$|In the RoboCup 97 robot soccer tournament, {{we entered}} {{a team of}} <b>softbot</b> {{programs}} whose player strategies had been entirely learned by computer. Our team beat other human-coded competitors and received the RoboCup 97 Scientific Challenge award. This paper discusses our approach, and details various ways that, in retrospect, {{it could have been}} improved. ...|$|E
40|$|AI {{is moving}} away from "toy tasks" such as block {{stacking}} towards real-world problems. This trend is positive, but the amount of preliminary groundwork required to tackle a real-world task can be staggering, particularly when developing an integrated agent architecture. To address this problem, we advicate real-world software environments, such as operating systems or databases, as domains for agent research. The cost, effort, and expertise required to develop and systematically experiment with software agents is relatively low. Furthermore, software environments circumvent many thorny, but peripheral, research issues that are inescapable in other environments. Thus, software environments enable us to test agents ina real world yet focus on core AI research issues. To support this claim, we describe our project to develop UNIX <b>softbots</b> (software robots) [...] intelligent agnets that interact with UNIX. Existing <b>softbots</b> accept a diverse set of high-level goals, generate and execute plans to achieve these goals in real time, and recover from errors when necessary...|$|R
40|$|Finally, we {{describe}} {{a set of}} experiments on several real-world domains, and show that GLUE proposes highly accurate semantic mappings. 1 A Motivating Example: the Semantic Web The current World-Wide Web has well over 1. 5 billion pages [2], {{but the vast majority}} of them are in human-readable format only (e. g., HTML). As Work done while the author was at the University of Washington, Seattle 2 AnHai Doan et al. a consequence software agents (<b>softbots)</b> cannot understand and process this information, and much of the potential of the Web has so far remained untapped. In response, researchers have created the vision of the Semantic Web [5], where data has structure and ontologies describe the semantics of the data. When data is marked up using ontologies, <b>softbots</b> can better understand the semantics and therefore more intelligently locate and integrate data for a wide variety of tasks. The following example illustrates the vision of the Semantic Web. Example 1. Suppose you want to f...|$|R
40|$|Abstract:- Intelligent <b>softbots</b> are {{now used}} in several fields of {{computer}} science and artificial intelligence. Due to the arising of new {{attacks in the}} cyber world everyday new intrusion detection systems have to be built to cope with these new attacks. These intrusion detection systems should be reactive. Since intelligent agents are characterized by reactivity {{they can be used}} to build intrusion detection systems. In this paper, we will describe a model for intrusion detection system built with intelligent agents...|$|R
40|$|Classical {{planners}} have traditionally made the {{closed world assumption}} [...] - facts absent from the planner's world model are false. Incompleteinformation planners make the open world assumption [...] - the truth value of a fact absent from the planner's model is unknown, and must be sensed. The open world assumption leads to two difficulties: (1) How can the planner determine the scope of a universally quantified goal? (2) When is a sensory action redundant, yielding information already known to the planner? This paper describes the fully-implemented xii planner, which solves both problems by representing and reasoning about local closed world information (LCW). We report on experiments utilizing our UNIX <b>softbot</b> (software robot) which demonstrate that LCW can substantially improve the <b>softbot</b> 's performance by eliminating redundant information gathering. Introduction Classical planners (e. g., (Chapman 1987)) presuppose correct and complete information about the world. Although recent wo [...] ...|$|E
40|$|AbstractClosed-world inference—an {{essential}} component of many planning algorithms—is the process of determining that a logical sentence is false based on its absence from a knowledge base, or the inability to derive it. We describe a novel method for closed-world inference and update over the first-order theories of action used by planning algorithms such as nonlin, tweak and ucpop. We show the method to be sound and efficient, but incomplete. In our experiments, closed-world inference consistently averaged about 2 milliseconds while updates averaged approximately 1. 2 milliseconds. Furthermore, we demonstrate that incompleteness is nonproblematic in practice, since our mechanism makes over 99 % of the desired inferences. We incorporated our method into the xii planner, which supports our Internet <b>Softbot</b> (software robot). The technique {{cut the number of}} actions executed by the <b>Softbot</b> by a factor of one hundred, and resulted in a corresponding speedup to xii...|$|E
40|$|Closed-world {{inference}} is {{the process}} of determining that a logical sentence is false based on its absence from a knowledge base, or the inability to derive it. This process is essential for planning with incomplete information. We describe a novel method for closed-world inference and update over the first-order theories of action used by planning algorithms such as nonlin, tweak, and ucpop. We show the method to be sound and efficient, but incomplete. In our experiments, closed-world inference consistently averaged about 2 milliseconds, while updates averaged approximately 1. 2 milliseconds. We incorporated the method into the xii planner, which supports our Internet <b>Softbot</b> (software robot). The method cut the number of actions executed by the <b>Softbot</b> by a factor of one hundred, and resulted in a corresponding speedup to xii. 1 Introduction and Motivation Classical planners such as nonlin [47], tweak [5], or ucpop [41, 48] presuppose correct and complete information about the world [...] . ...|$|E
40|$|Children do {{not learn}} the {{meanings}} of words from parsing and understanding gigabytes of text; instead meanings are learned from competent speakers who relate language to what’s happening in the child’s environment. We present a word learning algorithm that operates in a video game environment where the players fill {{the role of the}} competent speakers and train <b>softbots</b> to learn language as a child would. We provide empirical evidence that the word learning algorithm successfully learns the meanings for some words in this environment and the children enjoy playing the game...|$|R
40|$|We {{present a}} general {{framework}} for information extraction from web pages {{based on a}} special wrapper language, called token-templates. By using token-templates in conjunction with logic programs {{we are able to}} reason about web page contents, search and collect facts and derive new facts from various web pages. We give a formal definition for the semantics of logic programs extended by token-templates and define a general answer-complete calculus for these extended programs. These methods and techniques are used to build intelligent mediators and web information systems. Keywords: intelligent information systems; intelligent information retrieval; WWW; information extraction; template based wrappers; mediators; logic programming; theory reasoning; deductive web databases; <b>softbots.</b> ...|$|R
40|$|The Virtual Conference Facilities {{design is}} part of the Virtual Campus, which {{comprises}} several rooms, hallways, and resource areas. The rooms include facilities for slide projection, recording, and <b>softbots.</b> The three-dimensional visualization of the rooms assumes that an avatar can walk or teleport from one place to another, The design style is a derivation of the Virtual Office design, using similar framelike walls and distinctive activity areas. The facility has three main rooms: the entrance hall, the conference room, and the practice studio. The use of rooms is determined on the basis of activity and conversation privacy, since the main purpose of the facility is to provide a place for people to meet. A person can hear anyone else in the some room talk but cannot hear someone in another room...|$|R
40|$|The MetaCrawler <b>Softbot</b> is a {{parallel}} Web search service {{that has been}} available at the University of Washington since June of 1995. It provides users with a single interface with which they can query popular general-purpose Web search services, such as Lycos[6] and AltaVista[1], and has some sophisticated features that allow it to obtain results of much higher quality than simply regurgitating the output from each searc...|$|E
40|$|Abstract. Constraint Nets {{provide a}} {{semantic}} model for modeling hybrid dynamic systems. Controllers are embedded constraint solvers that solve constraints in real-time. A controller for our new <b>softbot</b> soccer team, UBC Dynamo 98, has been modeled in Constraint Nets, and implemented in Java, using the Java Beans architecture. An evolutionary algorithm is designed and implemented {{to adjust the}} weights of constraints in the controller. The paper demonstrates that the formal Constraint Net approach is a practical tool for designing and implementing controllers for robots in multi-agent real-time environments. ...|$|E
40|$|Abstract. State-of-the-art {{rule-based}} agent programming lan-guages, {{similar to}} AgentSpeak(L), provide theoretically solid tools for implementing cognitive agents. However, {{not too much}} attention was devoted to low-level design issues for development of non-trivial agents in them. In this {{paper we discuss some}} design considerations we faced while implementing Jazzbot, a <b>softbot</b> embodied in a simulated 3 D environment, implemented in a rule-based framework of Behavioural State Machines. Finally, we also make an attempt to lift our experi-ences to a set of informal design guidelines useful for design and implementation of agents with heterogeneous knowledge bases in rule-based agent oriented programming languages. ...|$|E
40|$|The {{increased}} {{prevalence of}} agents raises numerous practical considerations. This paper addresses {{three of these}} [...] adaptability to unforeseen conditions, behavioral assurance, and timeliness of agent responses. Although these requirements appear contradictory, this paper introduces a paradigm in which all three are simultaneously satisfied. Agent strategies are initially verified. Then they are adapted by learning and formally re-verified for behavioral assurance. This paper focuses on improving the time efficiency of re-verification after learning. A priori proofs are presented that certain learning operators are guaranteed to preserve important classes of properties. In this case, efficiency is maximal because no re-verification is needed. For those learning operators with negative a priori results, we present incremental algorithms that can substantially improve the efficiency of re-verification. 1 Introduction Agents (e. g., robots or <b>softbots)</b> are becoming an incre [...] ...|$|R
40|$|We {{introduce}} a novel framework called "artificial physics", {{which is used}} to provide distributed control of large collections of agents. The agents react to artificial forces that are motivated by natural physical laws. This framework provides an effective mechanism for achieving self-assembly, fault-tolerance, and self-repair. Examples are shown for various regular geometric configurations of agents. A further example demonstrates that self-assembly via distributed control can also perform distributed computation. Introduction The objective of this research is the distributed control of agents that range in scale from neurons, nanobots, or micro-electromechanical systems (MEMS) to microair vehicles (MAVs) and satellites e. g., see (Carlson, Gupta, & Hogg 1997). Agents can be physical or virtual (e. g., <b>softbots),</b> mobile or immobile. Agents generally have sensors and effectors. An agent's sensors perceive the world (including other agents) and an agent's effectors make changes to that [...] ...|$|R
40|$|Introduction There {{has been}} {{tremendous}} interest in information integration systems that automatically gather, manipulate, and integrate data from multiple information sources on a user's behalf. Unfortunately, web sites are primarily designed for human browsing {{rather than for}} use by a computer program. Mechanically extracting their content is in general a rather difficult job if not impossible [4]. Software systems using such web information sources typically use hand-coded wrappers to extract information content of interest from web sources and translate query responses to a more structured format (e. g., relational form) before unifying them into an integrated answer to a user's query. The most recent generation of information mediator systems (e. g., Ariadne [3], CQ [5, 7], Internet <b>Softbots</b> [4], TSIMMIS [2]) addresses this problem by enabling a pre-wrapped set of web sources to be accessed via database-like queries. However, hand-coding a wrapper is time co...|$|R
40|$|In this paper, we {{describe}} Orgsearch, an Internet <b>softbot</b> which organizes information retrieved from search engines {{in a form}} that is more useful to humans. Orgsearch meta-searches the web using three popular search engines, retrieves the web pages from the Internet and groups them according to their theme. Thus a search for “operating system ” automatically organizes the results into categories like Microsoft, open source resources, distributed operating systems, memory management etc. We use the K-Means and Subtractive Clustering algorithms to find clusters in the document vector space. In this paper we also define methods used for clusterin...|$|E
40|$|This {{project has}} two goals. First, {{to create a}} poker playing {{computer}} <b>softbot</b> for Sit and Go tournaments. This bot {{will be based on}} statistics and known strategies used by real players and should at least play better than a player new to the game. Second, to data mine records of poker hands played in the past and look for potentially interesting patterns that might be useful in creating a poker bot. The goal here is to at least find some interesting statistics about the way people play poker, and perhaps to even find a way to predict a person’s cards by analysing his actions. ...|$|E
40|$|A user {{interface}} <b>softbot</b> is a software agent that controls an interactive system through the graphical {{user interface}}, relying on visual {{information from the}} system rather than an application programming interface or access to source code. Interface softbots have acted as autonomous agents in applications such as drawing and data recording, and the core vision processing algorithms have been incorporated into cognitive models for simple problem-solving tasks. Building interface softbots is still a time-consuming task, unfortunately, requiring experience with complex program components {{as well as the}} details of the visual interface. We have developed a prototype development environment that facilitates the development of interface softbots, streamlining the programming process and making it more accessible to new developers...|$|E
40|$|Genetic Programming is a {{promising}} new method for automatically generating functions and algorithms through natural selection. In contrast to other learning methods, Genetic Programming's automatic programming {{makes it a}} natural approach for developing algorithmic robot behaviors. In this paper we present an overview of how we apply Genetic Programming to behavior-based team coordination in the RoboCup Soccer Server domain. The result {{is not just a}} hand-coded soccer algorithm, but a team of <b>softbots</b> which have learned on their own how to play a reasonable game of soccer. 1 Introduction The RoboCup competition pits robots (real and virtual) against each other in a simulated soccer tournament [Kitano et al, 1995]. The aim of the RoboCup competition is to foster an interdisciplinary approach to robotics and agent-based Artificial Intelligence by presenting a domain that requires large-scale cooperation and coordination in a dynamic, noisy, complex environment. For RoboCup's "virtual" c [...] ...|$|R
40|$|In {{this paper}} we explain how we applied genetic {{programming}} to behavior-based team coordination in the RoboCup Soccer Server domain. Genetic programming is a promising new method for automatically generating functions and algorithms through natural selection. In contrast to other learning methods, genetic programming's automatic programming {{makes it a}} natural approach for developing algorithmic robot behaviors. The RoboCup Soccer Server was a very challenging domain for genetic programming, but we were pleased with the results. At the end, genetic programming had produced teams of soccer <b>softbots</b> which had learned to cooperate to play a good game of simulator soccer. 1 Introduction The RoboCup competition pits robots {{against each other in}} a simulated soccer tournament [Kitano et al, 1995]. The aim of the RoboCup competition is to foster an interdisciplinary approach to robotics and agent-based Artificial Intelligence by presenting a domain that requires large-scale cooperation and c [...] ...|$|R
40|$|KQML is {{a message}} {{protocol}} and format for software agents {{to communicate with each}} other. In this paper we discuss the security features that a KQML user would expect and an architecture to satisfy those expectations. The proposed architecture is based on cryptographic techniques and would allow agents to verify the identity of other agents, detect message integrity violations, protect confidential data, ensure non-repudiation of message origin and take counter measures against cipher attacks. 1 Introduction Agents, in their different manifestations as filter agents, personal agents, <b>softbots,</b> knowbots etc, have become an important topic {{and is one of the}} primary research areas in the academia and the industry. These agents, to successfully interoperate with each other and share their knowledge, need a common interface standard. KQML, Knowledge Query and Manipulation Language [1] is such a message format and protocol, which enables autonomous and asynchronous agents to share their k [...] ...|$|R
40|$|Abstract-In this paper, we {{describe}} SoftBotSearch, an Internet <b>softbot</b> which organizes information retrieved from search engines {{in a form}} that is more useful to humans. SoftBotSearch meta-searches the web using three popular search engines, retrieves the web pages from the Internet and groups them according to their theme. Thus a search for “operating system ” automatically organizes the results into categories like Microsoft, open source resources, distributed operating systems, memory management etc. We use the K-Means and Subtractive Clustering algorithms to find clusters in the document vector space. In this paper we also define methods used for clustering including suffix tree clustering algorithm used. SoftBotSearch can be easily adapted to work on any information source...|$|E
40|$|Computer {{technology}} has dramatically enhanced {{our ability to}} generate, deliver, and store information. Unfortunately, our tools for locating, filtering, and analyzing information have not kept pace. A popular solution is intelligent agents. But what are they? We provide a survey showing the myriad {{ways in which the}} evocative term &quot;agent &quot; is interpreted by researchers in the field. Following the &quot;Information Superhighway&quot; metaphor, an intelligent agent may be:. A backseat driver who makes suggestions at every turn, or. A taxi driver who drives you to your destination, or even. A concierge whose knowledge and skills eliminate the need to personally ap-proach the Superhighway at all. We briefly describe a number of prototype Internet agents and elaborate on the Internet <b>Softbot,</b> a concierge under development at the University of Washington...|$|E
40|$|Most of {{the work}} in {{planning}} with incomplete information takes a "look before you leap" perspective: Actions must be guaranteed to have their intended effects before they can be executed. We argue that this approach is impossible to follow in many real-world domains. The agent may not have enough information to ensure that an action will have a given effect in advance of executing it. This paper describes PUCCINI, a partial order planner used to control the Internet <b>Softbot</b> (Etzioni & Weld 1994). PUCCINI takes a different approach to coping with incomplete information: "Leap before you look!" PUCCINI doesn't require actions to be known to have the desired effects before execution. However, it still maintains soundness, by requiring the effects to be verified eventually. We discuss how this is achieved using a simple generalization of causal links...|$|E
40|$|The paper {{discusses}} {{an architecture}} for intelligent agents {{based on the}} use of A-Prolog - a language of logic programs under the answer set semantics. A-Prolog is used to represent the agent's knowledge about the domain and to formulate the agent's reasoning tasks. We outline how these tasks can be reduced to answering questions about properties of simple logic programs and demonstrate the methodology of constructing these programs. Keywords: Intelligent agents, logic programming and nonmonotonic reasoning. 1 INTRODUCTION This paper is a report on the attempt by the authors to better understand the design of software components of intelligent agents capable of reasoning, planning and acting in a changing environment. The class of such agents includes, but is not limited to, intelligent mobile robots, <b>softbots,</b> immobots, intelligent information systems, expert systems, and decision-making systems. The ability to design intelligent agents (IA) is crucial for such diverse tasks as [...] ...|$|R
40|$|Software agents, or <b>softbots,</b> are {{supposedly}} intelligent {{programs that}} assist the user in performing repetitive, boring, and time-consuming tasks. An overview of software agents, with special {{attention focused on}} the so-called personal assistants, is presented as an introduction. Following that, an in-depth {{look at one of}} the first commercially available intelligent agents Open Sesame!, a personal assistant for managing the Macintosh desktop environment, is presented. The existing intelligent agent paradigms, we argue, break down when it comes to actively helping the end user because of flaws inherent in the current approaches to intelligent agent design. To that end, we discuss the reasons why this is, particularly with respect to Open Sesame!, and promote the notion of situatedness to be taken into account more seriously for developing software agents that actively support the user for the duration of the task at hand. As an example for a more situated approach to personal assistant [...] ...|$|R
40|$|Formal {{verification}} {{is a key}} step in {{the development}} of trusted and reliable multi-agent distributed systems. This is particularly relevant when security concerns such as privacy, integrity and availability impose limitations on the operations that can be performed on sensitive data. The aim of access control is to limit what agents (humans, programs, <b>softbots,</b> etc.) of distributed systems can do directly or indirectly by delegating their powers and tasks. As the size of the systems and the sensitivity of data increase, the availability of automated reasoning methods becomes essential for logical analysis of access control. This paper presents a prefixed tableau method for the calculus of access control developed at the Digital System Research Center by Abadi, Lampson et. al. This calculus is particularly interesting for a number of reasons. At first it was the basis for the development and the verification of an implemented system. Second, it poses many technical challenges for classi [...] ...|$|R
