460|613|Public
2500|$|The {{computer}} clustering approach connects {{a number}} of readily available computing nodes (e.g. personal computers used as servers) via a fast, private local area network. The activities of the computing nodes are orchestrated by [...] "clustering middleware", a <b>software</b> <b>layer</b> that sits atop the nodes and allows the users to treat the cluster as by and large one cohesive computing unit, e.g. via a single system image concept.|$|E
2500|$|The Internet {{protocol}} suite does not presume any specific hardware or software environment. [...] It only requires that hardware and a <b>software</b> <b>layer</b> exists that {{is capable of}} sending and receiving packets on a computer network. As a result, the suite has been implemented on essentially every computing platform. A minimal implementation of TCP/IP includes the following: Internet Protocol (IP), Address Resolution Protocol (ARP), Internet Control Message Protocol (ICMP), Transmission Control Protocol (TCP), User Datagram Protocol (UDP), and Internet Group Management Protocol (IGMP). In addition to IP, ICMP, TCP, UDP, Internet Protocol version 6 requires Neighbor Discovery Protocol (NDP), ICMPv6, and IGMPv6 and is often accompanied by an integrated IPSec security layer.|$|E
2500|$|Only {{the base}} Android {{operating}} system (including some applications) is open-source software, whereas most Android devices ship with {{a substantial amount}} of proprietary software, such as Google Mobile Services, which includes applications such as Google Play Store, Google Search, and Google Play Services a <b>software</b> <b>layer</b> that provides APIs for the integration with Google-provided services, among others. These applications must be licensed from Google by device makers, and can only be shipped on devices which meet its compatibility guidelines and other requirements. Custom, certified distributions of Android produced by manufacturers (such as TouchWiz and HTC Sense) may also replace certain stock Android apps with their own proprietary variants and add additional software not included in the stock Android operating system. There may also be [...] "binary blob" [...] drivers required for certain hardware components in the device.|$|E
5000|$|IMA concept {{also allows}} the Application {{developers}} {{to focus on}} the Application layer, reducing the risk of faults in the lower-level <b>software</b> <b>layers.</b>|$|R
25|$|The {{communications}} {{infrastructure of}} the Internet consists of its hardware components and a system of <b>software</b> <b>layers</b> that control {{various aspects of the}} architecture.|$|R
50|$|Multipath <b>software</b> <b>layers</b> can {{leverage}} the redundant {{paths to}} provide performance-enhancing features, including dynamic load balancing, traffic shaping, automatic path management, and dynamic reconfiguration.|$|R
5000|$|Transmeta {{processors}} were in-order {{very long}} instruction word (VLIW) cores running a special dynamic binary translation <b>software</b> <b>layer</b> which together implemented compatibility with the x86 architecture. Transmeta trademarked the term [...] "Code Morphing" [...] {{to describe their}} technology and referred to the <b>software</b> <b>layer</b> as Code Morphing Software (CMS).|$|E
50|$|LinuxCNC uses a <b>software</b> <b>layer</b> called HAL (Hardware Abstraction Layer).|$|E
5000|$|... the OpenCable Application Platform (OCAP / tru2way), {{which is}} an Interactive {{television}} (iTV) middleware <b>software</b> <b>layer</b> for US cable, ...|$|E
50|$|Similar system <b>software</b> <b>layers</b> were {{typically}} {{in use in}} the early days of the later minicomputers and microcomputers before they gained the power to support full operating systems.|$|R
50|$|Layered {{architectures}} - {{in which}} {{decision making is}} realized via various <b>software</b> <b>layers,</b> {{each of which is}} more or less explicitly reasoning about the environment at different levels of abstraction.|$|R
50|$|Standardization of {{functional}} interfaces across manufacturers and suppliers and standardization of the interfaces {{between the different}} <b>software</b> <b>layers</b> {{is seen as a}} basis for achieving the technical goals of AUTOSAR.|$|R
50|$|For interactivity, it is {{required}} that the STBs could be dynamically programmed and updated. For that, there are some different solutions in the market, among them, the definition of an intermediary <b>software</b> <b>layer</b> on which the applications, broadcast together with the audiovisual signals, run. This intermediary <b>software</b> <b>layer</b> is called Middleware. There are different software classified depending on they were of public or private property. Next, we will go over that classification.|$|E
5000|$|... vMOS is Violin Memoryâ€™s <b>software</b> <b>layer</b> that {{integrates}} {{with the}} FFA to provide data protection, management and connectivity to the host.|$|E
5000|$|Commodity {{hardware}} with storage logic abstracted into a <b>software</b> <b>layer.</b> This is {{also described}} as a clustered file system for converged storage.|$|E
5000|$|QFS is {{software}} {{that runs on}} a cluster of {{hundreds or thousands of}} commodity Linux servers and allows other <b>software</b> <b>layers</b> to interact with {{them as if they were}} one giant hard drive. It has three components: ...|$|R
50|$|The {{layering}} scheme {{from the}} IETF is called Internet layering or TCP/IP layering. The functionality of the layers {{has been described}} in the section on <b>software</b> <b>layering</b> and an overview of protocols using this scheme is given in the article on Internet protocols.|$|R
40|$|The {{ability for}} {{scientific}} simulation software {{to detect and}} recover from errors and failures of supporting hardware and <b>software</b> <b>layers</b> is becoming more important due to the pressure to shift from large, specialized multi-million dollar ASCI computing platforms to smaller, less expensive interconnected machines consisting of off-the-shelf hardware. As evidenced by the CPlant{trademark} experiences, fault tolerance can be necessary even on such a homogeneous system and may also prove useful {{in the next generation}} of ASCI platforms. This report describes a research effort intended to study, implement, and test the feasibility of various fault tolerance mechanisms controlled at the simulation code level. Errors and failures would be detected by underlying <b>software</b> <b>layers,</b> communicated to the application through a convenient interface, and then handled by the simulation code itself. Targeted faults included corrupt communication messages, processor node dropouts, and unacceptable slowdown of service from processing nodes. Recovery techniques such as re-sending communication messages and dynamic reallocation of failing processor nodes were considered. However, most fault tolerance mechanisms rely on underlying <b>software</b> <b>layers</b> which were discovered to be lacking {{to such a degree that}} mechanisms at the application level could not be implemented. This research effort has been postponed and shifted to these supporting layers...|$|R
5000|$|Basic Software: {{standardized}} {{software modules}} (mostly) without any functional job itself that offers services necessary {{to run the}} functional part of the upper <b>software</b> <b>layer.</b>|$|E
5000|$|... the {{directory}} containing the compiled code that is specific to a <b>software</b> <b>layer</b> of a processor, {{the directory}} is split into more directories within it: ...|$|E
5000|$|ObjectWeb defines {{middleware}} as: [...] "The <b>software</b> <b>layer</b> {{that lies}} between {{the operating system}} and applications {{on each side of}} a distributed computing system in a network." ...|$|E
40|$|This paper {{describes}} RTC, {{a set of}} <b>software</b> <b>layers</b> {{based on}} the ISO/OSI standard that implements a complete real-time communication platform on a cluster running under realtime Linux. A modified TDMA protocol is implemented as Media Access Control (MAC) discipline, and at the application level the communication approachischannel-oriented...|$|R
50|$|Security {{countermeasures}} {{are being}} developed and applied to smartphones, from security in different <b>layers</b> of <b>software</b> to the dissemination of information to end users. There are good practices to be observed at all levels, from design to use, {{through the development of}} operating systems, <b>software</b> <b>layers,</b> and downloadable apps.|$|R
40|$|The cFS is a FSW {{product line}} {{that uses a}} layered {{architecture}} and compile-time configuration parameters which make it portable and scalable {{for a wide range}} of platforms. The <b>software</b> <b>layers</b> that defined the application run-time environment are now under a NASA-wide configuration control board with the goal of sustaining an open-source application ecosystem...|$|R
5000|$|... tmiApplicationManager - This <b>software</b> <b>layer</b> {{developed}} for TellyMinder provides the management features required by {{applications such as}} where windows should be located and how applications should start and stop.|$|E
50|$|LVM can be {{considered}} as a thin <b>software</b> <b>layer</b> on top of the hard disks and partitions, which creates an abstraction of continuity and ease-of-use for managing hard drive replacement, repartitioning and backup.|$|E
50|$|Transmeta Corporation was an American fabless {{semiconductor}} {{company based}} in Santa Clara, California. It developed low power x86 compatible microprocessors based on a VLIW core and a <b>software</b> <b>layer</b> called Code Morphing Software.|$|E
50|$|Running a VAC-protected game {{through the}} Cedega <b>software</b> {{compatibility}} <b>layer</b> for Linux.|$|R
50|$|Something {{running on}} a {{computer}} natively means that it is running without any external <b>layer</b> requiring fewer <b>software</b> <b>layers.</b> For example, in Microsoft Windows the Native API is an application programming interface specific for Windows NT kernel, {{which can be used}} to give access to some kernel functions, which cannot be directly accessed through a more universal Windows API.|$|R
40|$|On {{the bottom}} level, IO {{programming}} {{is on the}} mercy of the hardware implementation. Hardware is simple; operations happen by giving commands and loading and storing bits. Thus, the HW/SW interface is imperative, not functional. There are reasons for this, compare the Intel 432 and Motorola 68000 CPUs of the same vintage. To overcome this, <b>software</b> <b>layers</b> create abstraction over IO...|$|R
50|$|Any <b>software</b> <b>layer</b> {{that makes}} it easier for a program to persist its state is generically called a {{persistence}} layer. Most persistence layers will not achieve persistence directly but will use an underlying database management system.|$|E
5000|$|... #Caption: A diagram {{showing how}} the user interacts with {{application}} software {{on a typical}} desktop computer.The application <b>software</b> <b>layer</b> interfaces with the operating system, which in turn communicates with the hardware. The arrows indicate information flow.|$|E
50|$|The Simon {{used the}} file system from Datalight ROM-DOS along with file {{compression}} from Stacker. IBM created a unique touch-screen user interface for Simon; no DOS prompt existed. This user interface <b>software</b> <b>layer</b> for Simon {{was known as}} the Navigator.|$|E
40|$|A {{scheme for}} message {{communication}} over specified domains {{has been developed}} and implemented for the AP 1000. Domains provide a higher level grouping of messages where generic message typing {{is not sufficient to}} support abstracted <b>software</b> <b>layers.</b> The implementation is efficient in the sense that each domain has its own message queue, eliminating the need for searching queues on domain keys. Additional advantages of domains are also discussed...|$|R
40|$|As the {{requirements}} for communication performance grow and the vast variation and improvement in hardware components increase, the various functionally different <b>software</b> <b>layers</b> have been increasingly responsible for performance degradation. In this paper, we explore the use of VTRACE, a tracing facility provided in Solaris, as a general methodology in communication performance analysis and also present performance data for an experimental version of Sunâ€™s Solaris Operating System. 1...|$|R
40|$|Timely {{operation}} {{is a key}} factor in CPS that is challenged by their inherent distributed nature. The variability intro- duced by the network and its unpredictable effects have to be handled. Thus, a vertical understanding of the involved <b>software</b> <b>layers</b> is needed at the levels of the operating sys- tem, the networking software and the middleware. Typi- cally, middleware has been described in a quite independent way from the underlying operating system kernel and the network software. That is not appropriate in a CPS as some degree of control over the resource assignment is expected as a means to ensure timeliness. In this paper, we look into the details of middleware in relation to its sorround- ing <b>software</b> <b>layers</b> to provide a middleware design, namely OMA-Cy, suiting the needs of CPS. We target subsystems where timing deadlines are not hard nor safety critical, but require quality of service guarantees such that resource man- agement techniques are applied both at the individual nodes {{as well as in the}} distributed communication...|$|R
