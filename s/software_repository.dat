267|795|Public
5|$|GNOME Web is default {{web browser}} on {{elementary}} OS and its source code is available under the GNU General Public License. The binary builds of the browser {{are available in}} the <b>software</b> <b>repository</b> of most Linux distributions and BSD releases.|$|E
5|$|FreeBSD has a <b>software</b> <b>repository</b> of over 26,000 {{applications}} that are developed by third parties. Examples include: windowing systems, web browsers, email clients, office suites and so forth. In general, the project {{itself does not}} develop this software, only the framework to allow these programs to be installed, which {{is known as the}} Ports collection. Applications may either be compiled from source ("ports"), provided their licensing terms allow this, or downloaded as pre-compiled binaries ("packages"). The Ports collection supports the current and stable branches of FreeBSD. Older releases are not supported and may or may not work correctly with an up-to-date Ports collection.|$|E
25|$|KDE neon is a <b>software</b> <b>repository</b> {{that uses}} Ubuntu LTS as a core. It aims {{to provide the}} users with rapidly updated Qt and KDE software, while {{updating}} {{the rest of the}} OS components from the Ubuntu repositories at the normal pace.|$|E
50|$|The mining <b>software</b> <b>repositories</b> (MSR) field {{analyzes}} the rich data available in <b>software</b> <b>repositories,</b> such as version control repositories, mailing list archives, bug tracking systems, issue tracking systems, etc. to uncover interesting and actionable information about software systems, projects and software engineering.|$|R
30|$|<b>Software</b> <b>repositories</b> {{can be a}} {{valuable}} source of information since they contain (or may allow to extract) information about the technical and social perspectives of a software project, such as sources of developer communications (Genc-Nayebi & Abran, 2016). Mining <b>Software</b> <b>Repositories</b> (MSR) area focuses on uncovering useful information about software by extracting and analyzing data from different <b>software</b> <b>repositories</b> (Ahmed, 2008). The unstructured data in <b>software</b> <b>repositories</b> have also pushed the Software Engineering research community to mine and analyze useful knowledge present in such repositories, i.e. different versioning systems (e.g. Git), archived communications (e.g. mailing lists), chat logs, online forums (e.g. Q&A repositories), mobile app stores (e.g. user reviews on Google Play) and online video-sharing websites (e.g. programming tutorials shared on YouTube) (Ahmad et al., 2018).|$|R
50|$|Available in the Debian, FreeBSD and Fedora <b>software</b> <b>repositories.</b>|$|R
25|$|A Personal Package Archive (PPA) is a <b>software</b> <b>repository</b> for {{uploading}} source {{packages to}} be built and published as an Advanced Packaging Tool (APT) repository by Launchpad. While the term is used exclusively within Ubuntu, Launchpad host Canonical envisions adoption beyond the Ubuntu community.|$|E
25|$|The Gay Nigger Association of America (GNAA) is an Internet {{trolling}} organization. They have trolled {{several prominent}} websites and Internet personalities including Slashdot, Wikipedia, CNN, Barack Obama's campaign website, Alex Jones, and prominent {{members of the}} blogosphere. They have also released software products and leaked screenshots and information about upcoming operating systems. In addition, they maintain a <b>software</b> <b>repository</b> and a wiki-based site dedicated to Internet commentary. They are listed as a far right cyberterrorist organization in TRAC.|$|E
5000|$|Promise <b>Software</b> <b>Repository</b> http://promise.site.uottawa.ca/SERepository/datasets/kc2.arff ...|$|E
40|$|As of today, {{software}} development does not revolve around {{a piece of}} source code but also around large volume of software project related information that exists in different <b>software</b> <b>repositories</b> hosting a <b>software</b> project. These <b>software</b> <b>repositories</b> produce a variety of software artifacts (i. e., source code, bugs, source control commit logs, emails, documentation etc.) during the whole {{software development}} lifecycle. Apart from the software project information that is distributed across different <b>software</b> <b>repositories</b> of a <b>software</b> project, software project related information is also distributed on the Web in heterogeneous open source <b>software</b> <b>repositories.</b> Examples of these open source <b>software</b> <b>repositories</b> are: collaborative infrastructure for software project development (i. e., code forges), social networking infrastructure (e. g., Twitter) to disseminate software project related information to a wider audience and statistical services that provides statistical information about software project development. Hence, {{we can say that}} information related to software projects are distributed on the Web. The information contained inside these heterogeneous <b>software</b> <b>repositories</b> is vital to software stakeholders for their day to day development needs. However, this information is not readily accessible due to the distributed nature and lack of integration among <b>software</b> <b>repositories.</b> In this thesis, we propose to integrate <b>software</b> <b>repositories</b> by exploiting a Linked Data approach that allows an easy integration and identification of related information about software artifacts across heterogeneous <b>software</b> <b>repositories.</b> We start by describing our approach to publish and integrate <b>software</b> <b>repositories</b> (based on <b>software</b> artifacts) using Linked Data and show how the interlinked information can be delivered to software stakeholders in their development environments. Further, we present our approach to identify and interlink different and multiple IDs of a software developer, which he/she uses to interact with different <b>software</b> <b>repositories</b> of a <b>software</b> project. Moreover, we present some use case scenarios that can be realized by interlinking multiple IDs of a software developer. With respect to hosting of software projects on publicly available development infrastructures (i. e., code forges), we propose to integrate different code forges based on metadata, similar software projects and software developers. We demonstrate the integration of software project and software developer related information across different code forges as well as relevant information that are available through statistical services. Further, we show that it enables software stakeholders to not only query statistical information about a software project as well as software developer but also allow them {{to keep track of the}} involvement of software developers in multiple software projects across different code forges. In regards to the social aspects, we present evidence that software project and software developer related information also exists on social media channels. Based on our case study of the usage of Twitter by software developers, we motivate the integration of social media channels and <b>software</b> <b>repositories.</b> Finally, we exploit our linked datasets to investigate the evolving social dependencies and social relations among software developers over the period of time...|$|R
40|$|With the {{increase}} of publicly available <b>software</b> <b>repositories,</b> we face new challenges related to managing and mining large-scale <b>software</b> <b>repositories.</b> These challenges naturally call for novel research contributions from large-scale data management and mining researchers. <b>Software</b> <b>repositories</b> include multi-version source code, bug reports, and development history, and managing these repositories has been recognized as an important task in software design, development, and maintenance processes. Due to these emerging challenges, many recent publications in major software engineering conferences and journals, such as ICSE, FSE, or TSE, have been contributed by database and mining researchers. To showcase some such efforts, minin...|$|R
40|$|The Mining <b>Software</b> <b>Repositories</b> (MSR) field {{analyzes}} the rich data available in <b>software</b> <b>repositories,</b> such as version control repositories, mailing list archives, bug tracking systems, issue tracking systems, etc. to uncover interesting and actionable information about software systems, projects and software engineering. The MSR field {{has received a}} great deal of attention and has now its own research conferenc...|$|R
50|$|The Store is {{a public}} domain <b>software</b> <b>repository</b> which was {{available}} for all 3B1 users.|$|E
5000|$|Looking up, downloading, {{installing}} or updating existing {{software from}} a <b>software</b> <b>repository</b> or app store ...|$|E
50|$|CrunchBang {{had its own}} <b>software</b> <b>repository</b> but {{drew the}} vast {{majority}} of packages from Debian's repositories.|$|E
40|$|Abstract:- Open source {{projects}} for example Eclipse and Firefox have open source bug repositories. User reports bugs to these repositories. Users of these repositories are usually non-technical and cannot assign correct class to these bugs. Triaging of bugs, to developer, {{to fix them}} is a tedious and time consuming task. Developers are usually expert in particular areas. For example, few developers are expert in GUI and others are in java functionality. Assigning a particular bug to relevant developer could save time and would help to maintain the interest level of developers by assigning bugs according to their interest. However, assigning right bug to right developer is quite difficult for tri-ager without knowing the actual class, the bug belongs to. In this research, we have classified the bugs in different labels {{on the basis of}} summary of the bug. Multinomial Na√Øve Byes text classifier is used for classification purpose. For feature selection, Chi-Square and TFIDF algorithms were used. Using Na√Øve Bayes and Chi- square, we get average of 83 % accuracy Key-Words: Text mining, classification, <b>software</b> <b>repositories,</b> open source <b>software</b> projects, triaging, feature 1. 1 Mining <b>Software</b> <b>Repositories</b> To understand constantly evolving software systems is a very daunting task. Software systems have history ofhow they come to be and this history is maintained in <b>software</b> <b>repositories.</b> <b>Software</b> <b>repositories</b> are the artifacts that document the evolution of <b>software</b> systems. <b>Software</b> <b>repositories</b> often contain data from years of development of a software project [2]. Examples of <b>software</b> <b>repositories</b> are...|$|R
5000|$|GNU/Linux, usually Insigne Linux, a Fedora based {{distribution}} {{fully compatible}} with <b>software</b> <b>repositories.</b>|$|R
40|$|Although shared <b>software</b> <b>repositories</b> are {{commonly}} used during software development, it is typical that a software developer browses and edits a local snapshot of the software under development. Developers periodically check their changes into the software repository; however, their interaction with the local copy is not recorded. Local interaction histories are a valuable source of information and should be considered when mining <b>software</b> <b>repositories.</b> In this paper we discuss the benefits of analyzing local interaction histories and present a technique and prototype implementation for their capture and analysis. As well, we discuss the implications of local interaction histories and the infrastructure of <b>software</b> <b>repositories.</b> 1...|$|R
50|$|The Slax {{homepage}} {{offers a}} <b>software</b> <b>repository</b> for downloading user created modules and uploading new ones.|$|E
50|$|Updated all {{supporting}} {{applications and}} libraries from the <b>software</b> <b>repository</b> which include security updates and bug fixes.|$|E
5000|$|PPA, {{a special}} <b>software</b> <b>repository</b> for {{uploading}} software packages {{to be built}} and published as an APT repository, ...|$|E
40|$|Versioned and bug-tracked {{software}} systems {{provide a}} huge amount of historical data regarding source code changes and issues management. In this paper we deal with im-pact analysis of a change request and show that data stored in <b>software</b> <b>repositories</b> are a good descriptor on how past change requests have been resolved. A fine grained analysis method of <b>software</b> <b>repositories</b> is used to index code at dif-ferent levels of granularity, such as lines of code and source files, with free text contained in <b>software</b> <b>repositories.</b> The method exploits information retrieval algorithms to link the change request description and code entities impacted by similar past change requests. We evaluate such approach on a set of three open-source projects...|$|R
40|$|Abstract We {{present a}} {{software}} framework for visual mining of <b>software</b> <b>repositories.</b> Our framework addresses three aspects: data extraction from repositories, data analysis, and interactive visualization and exploration. Along these, {{it provides an}} open structure, extensible with new functionality. We first discuss the challenges of data extraction and storage, and propose a flexible {{way to deal with}} implementation inconsistencies in <b>software</b> <b>repositories.</b> We next present a new technique to enrich the raw data with information about artifacts showing similar evolution. Finally, we propose a visualization back-end that supports visual navigation and query of the extracted data at several levels of detail. We demonstrate the applicability of our framework by presenting several case studies performed on industry-size <b>software</b> <b>repositories.</b> ...|$|R
5000|$|Data mining {{has been}} applied to {{software}} artifacts within the realm of software engineering: Mining <b>Software</b> <b>Repositories.</b>|$|R
50|$|A <b>software</b> <b>repository</b> is {{a storage}} {{location}} from which software packages may be retrieved and installed on a computer.|$|E
50|$|In March 2004, {{the game}} was {{released}} as free software and support for it was added to ScummVM, allowing it to be played on Linux, Mac OS X, Windows, and many other operating systems and consoles. The datafiles for both the floppy disk and CD-ROM version {{are available from the}} ScummVM website. The Fedora RPM <b>software</b> <b>repository</b> has an installer for the game alongside ScummVM. This game is directly included in the Debian <b>software</b> <b>repository.</b>|$|E
50|$|Numerous {{applications}} {{were created}} by third-party developers, with the Agenda <b>Software</b> <b>Repository</b> listing nearly 200 titles {{by the end of}} 2003.|$|E
5000|$|SourceForge (for Subversion {{integration}} only), an open-source software hosting {{facility that}} hosts {{various types of}} <b>software</b> <b>repositories</b> ...|$|R
40|$|<b>Software</b> <b>repositories</b> are {{typically}} used to store code together with additional information. These repositories are a valuable source to train knowledge discovery algorithms to detect code smells and other qualitative defects. In this paper {{we present a}} lightweight framework to detect previously unknown knowledge from <b>software</b> <b>repositories</b> to support refactoring. The results will be usable by software reengineers {{in the process of}} inspection and quality assessment of legacy systems...|$|R
3000|$|Mining local (e.g., {{projects}} {{stored on}} GIT) and remote <b>software</b> <b>repositories</b> (e.g., issues and milestones stored on github.com) [...]...|$|R
50|$|Derived from SpareMiNT is EasyMiNT, {{using its}} <b>software</b> <b>repository</b> and a GEM based installer, {{providing}} a folder system {{similar to the}} UNIX Filesystem Hierarchy Standard and German language translations to programs.|$|E
50|$|On January 18, 2017, Ikey Doherty {{announced}} that Solus will adopt Flatpak to reassemble third party applications. This will significantly improve software availability from vendors whose software licenses prevent distribution through Solus' own <b>software</b> <b>repository.</b>|$|E
5000|$|Another common {{assertion}} is that, {{by their}} very nature, rolling distributions in general are inherently unstable. Rolling distributions are often highly customizable, especially 'self-build' ones, which can give the user more control over stability (and other attributes) than many standard release distributions. Also, although rolling distributions generally have the latest stable software packages available in their <b>software</b> <b>repository,</b> the freshness of the packages in the repositories can vary from distribution to distribution, and need not be bleeding-edge in all cases. Also, as mentioned previously, more than one version of a given software package is often available in the <b>software</b> <b>repository,</b> giving the user {{the freedom to choose}} which to run.|$|E
5000|$|Davix is {{available}} on several linux distributions via the Fedora, RedHat EPEL, Debian [...] and Ubuntu [...] <b>software</b> <b>repositories.</b>|$|R
40|$|While {{in theory}} the mining <b>software</b> <b>repositories</b> {{is an area}} where {{replication}} is easier to perform than for other empiri-cal software engineering fields, a review of papers presented at the Mining <b>Software</b> <b>Repositories</b> Workshop/Working Con-ference shows that the research studies presented do not sat-isfy the requirements for easy replication. In this paper, we present some possibilities that replicability may provide to this community that go beyond the verification of results presented in the original study...|$|R
50|$|MeeGo uses RPM <b>software</b> <b>repositories.</b> It {{is one of}} {{the first}} Linux {{distributions}} to deploy Btrfs as the default file system.|$|R
