1670|1905|Public
25|$|In {{the testing}} phase, {{participants}} {{were provided with}} a test set for the disambiguating <b>subtask</b> using the induced sense inventory from the training phase.|$|E
25|$|Between 2008 and 2013, {{researchers}} from Australia, Austria, Belgium, Canada, Denmark, Finland, France, Germany, Italy, Republic of Korea, New Zealand, Norway, Portugal, Singapore, Spain, Sweden, Switzerland, United Kingdom and USA were working {{together in the}} joint research program “Towards Net Zero Energy Solar Buildings” {{under the umbrella of}} International Energy Agency (IEA) Solar Heating and Cooling Program (SHC) Task 40 / Energy in Buildings and Communities (EBC, formerly ECBCS) Annex 52 in order to bring the Net ZEB concept to market viability. The joint international research and demonstration activities are divided in subtasks. The objective is to develop a common understanding, a harmonized international applicable definition framework (<b>Subtask</b> A, see definitions methodology “Net Zero Energy Building” above), design process tools (<b>Subtask</b> B), advanced building design and technology solutions and industry guidelines for Net ZEBs (<b>Subtask</b> C). The scope encompasses new and existing residential and non-residential buildings located within the climatic zones of the participating countries.|$|E
25|$|Referring {{expression}} generation(REG) is the <b>subtask</b> of Natural language generation (NLG) {{that received}} most scholarly attention. While NLG {{is concerned with}} the conversion of non-linguistic information into natural language, REG focuses only on the creation of referring expressions (noun phrases) that identify specific entities called targets.|$|E
40|$|Artificial {{intelligence}} {{applications are}} normally complex, demanding much computing power. This paper presents the multiagent architecture of StormCast, a {{distributed artificial intelligence}} application for severe storm forecasting. Important objectives as scaleability, robustness and reusability can be met by partitioning an ove rall task in <b>subtasks,</b> distribution of the <b>subtasks</b> on different nodes, parallel processing of the <b>subtasks</b> and cooperation between the <b>subtasks...</b>|$|R
30|$|TMS_TS: nodes for {{planning}} service tasks performed by robots. According to a task requested via TMS_UR, TMS_TS inquires of the database {{a sequence of}} <b>subtasks</b> to accomplish the requested task, plans an execution schedule of these <b>subtasks,</b> and manages the execution of <b>subtasks</b> using a state machine “SMASH”.|$|R
40|$|Complex {{distributed}} tasks often involve parallel {{execution of}} <b>subtasks</b> at different nodes. To meet the deadline {{of a global}} task, all of its parallel <b>subtasks</b> have to be finished on time. Compared to a local task (which involves execution at only one node), a global task may have a much harder time making its deadline because it is fairly likely {{that at least one}} of its <b>subtasks</b> run into an overloaded node. Another problem with complex distributed tasks occurs when a global task consists of a number of serially executing <b>subtasks.</b> In this case, we have the problem of dividing up the end-to-end deadline of the global task and assigning them to the intermediate <b>subtasks.</b> In this paper, we study both of these problems. Different algorithms for assigning deadlines to <b>subtasks</b> are presented and evaluated. link_to_subscribed_fulltex...|$|R
25|$|Anderson, Franks, and McShea {{have broken}} down insect tasks (and subtasks) into a {{hierarchical}} taxonomy; their {{focus is on}} task partitioning and its complexity implications. They classify tasks as individual, group, team, or partitioned; classification of a task depends on whether there are multiple vs. individual workers, whether there is division of labor, and whether subtasks are done concurrently or sequentially. Note that in their classification, in order for an action {{to be considered a}} task, it must contribute positively to inclusive fitness; if it must be combined with other actions to achieve that goal, it {{is considered to be a}} <b>subtask.</b> In their simple model, they award 1, 2, or 3 points to the different tasks and subtasks, depending on its above classification. Summing all tasks and subtasks point values down through all levels of nesting allows any task to be given a score that roughly ranks relative complexity of actions. See also the review of task partitioning by Ratnieks and Anderson.|$|E
2500|$|There are {{different}} test variants {{commonly used in}} clinical settings, with differences between them {{in the number of}} subtasks, type and number of stimulus, times for the task, or scoring procedures. All versions have at least two numbers of subtasks. In the first trial, the written color name differs from the color ink it is printed in, and the participant must say the written word. In the second trial, the participant must name the ink color instead. However, there can be up to four different subtasks, adding in some cases stimuli consisting of groups of letters [...] "X" [...] or dots printed in a given color with the participant having to say the color of the ink; or names of colors printed in black ink that have to be read. The number of stimuli varies between fewer than twenty items to more than 150, being closely related to the scoring system used. While in some test variants the score is the number of items from a <b>subtask</b> read in a given time, in others it is the time that it took to complete each of the trials. The number of errors and different derived punctuations are also taken into account in some versions.|$|E
5000|$|Will {{the user}} try {{to achieve the}} effect that the <b>subtask</b> has? E.g. Does the user {{understand}} that this <b>subtask</b> is needed to reach the user's goal? ...|$|E
40|$|This paper {{presents}} an algorithm for planning in structured partially observable Markov Decision Processes (POMDPs). The new algorithm, named PolCA (for Policy-C ontingent Abstraction) uses an action-based decomposition to partition complex POMDP problems into {{a hierarchy of}} smaller subproblems. Low-level <b>subtasks</b> are solved rst, and their partial policies are used to model abstract actions {{in the context of}} higher-level <b>subtasks.</b> At all levels of the hierarchy, <b>subtasks</b> need only consider a reduced action, state and observation space. The reduced action set is provided by a designer, whereas the reduced state and observations sets are discovered automatically on a subtask-per-subtask basis. This typically results in lower-level <b>subtasks</b> having few, but high-resolution, state/observations features, whereas high-level <b>subtasks</b> tend to have many, but low-resolution, state/observation features...|$|R
40|$|Issues {{important}} in rotorcraft flight control are discussed. A perceptual description is suggested {{of what is}} believed to be the major issues in flight control. When the task is considered of a pilot controlling a helicopter in flight, the task is decomposed in several <b>subtasks.</b> These <b>subtasks</b> include: (1) the control of altitude, (2) the control of speed, (3) the control of heading, (4) the control of orientation, (5) the control of flight over obstacles, and (6) the control of flight to specified positions in the world. The first four <b>subtasks</b> can be considered to be primary control tasks as they are not dependent on any other <b>subtasks.</b> However, the latter two <b>subtasks</b> can be considered hierarchical tasks as they are dependent on other <b>subtasks.</b> For example, the task of flight control over obstacles can be decomposed as a task requiring the control of speed, altitude, and heading. Thus, incorrect control of altitude should result in poor control of flight over an obstacle...|$|R
40|$|Grid {{computing}} is {{the federation}} of pooling resources {{so as to}} solve large-scale problems. Scheduling is the main issue in grid computing and {{is the process of}} making scheduling decisions over multiple grid resources. In this paper, we propose a scheduling technique which classifies the <b>subtasks</b> based on the priority assigned by the user. This is mainly applicable in places where the high priority critical <b>subtasks</b> may need to be scheduled prior to other low priority <b>subtasks.</b> We thus segregate the <b>subtasks</b> into three queues based on their priority. <b>Subtasks</b> within each queue are reordered based on two new parameters, viz. complexity factor and realization factor, with computational complexity defined as the time of computation of a process. We evaluate the realization factor as the product of number of operations per cycle per processor and the speed of the processor. The <b>subtasks</b> are assigned high priority when both complexity factor and realization factor are high. Once the processes are classified into three queues we make use of a technique similar to round robin that reduces starvation of low and medium priority <b>subtasks.</b> The effectiveness of Starvation free (SF) Scheduling algorithm is evaluated through simulation results...|$|R
50|$|Within {{an order}} of {{hierarchical}} complexity, a person must count before they add (<b>subtask</b> 1). Note that this only requires one previous task action be acquired. They must add (<b>subtask</b> 2) before they multiply (<b>subtask</b> 3). The concrete order of hierarchical complexity requires the two primary order addition and primary order multiplication to be coordinated as with long multiplication or distributivity. Furthermore, previous theories of stage have confounded the stimulus and response in assessing stage by simply scoring responses and ignoring the task or stimulus.|$|E
5000|$|... #Subtitle level 3: <b>Subtask</b> 4: Case {{studies and}} demonstrations ...|$|E
5000|$|... #Subtitle level 3: <b>Subtask</b> A: Occupant {{movement}} and presence models ...|$|E
40|$|Under this {{contract}}, {{to merit}} having its contract renewed non-competitively the QIO shall meet the performance criteria (including {{a score of}} 1. 0 or greater for Tasks 1 a through 1 e and 2 b) on 10 of the 12 <b>subtasks</b> (9 of 11 for states with no M + C plans) of Task 1 through Task 3 of this SOW, provided that for both the <b>subtasks</b> which {{do not meet the}} criteria the QIO has: 1) Achieved a score of 0. 6 or better on all <b>subtasks,</b> only for those <b>subtasks</b> with quantitative measures (tasks 1 a through 1 e and 2 b) and 2) For the remaining <b>subtasks</b> only, in the judgment of its Project Officer, the QIO expended a reasonable effort to address these <b>subtasks,</b> developed and implemented an appropriate initial work plan, assessed during the contract period whether it is achieving results which are likely to lead to success in meeting contractual performance expectations, and has made appropriate adjustments to its work plan based on these results. To be considered successful (though not meriting a non-competitive renewal) the QIO shall meet the performance criteria (including a score of 1. 0 or greater for tasks 1 a through 1 e and 2 b) on 9 of the 12 <b>subtasks</b> (8 of 11 for states with no M+C plans) of task 1 through Task 3 of this SOW, provided that for the <b>subtasks</b> which do not meet the criteria the QIO has...|$|R
40|$|In this paper, we {{investigate}} {{the use of}} hierarchical reinforcement learning (HRL) {{to speed up the}} acquisition of cooperative multiagent tasks. We introduce a hierarchical multiagent reinforcement learning (RL) framework and propose a hierarchical multiagent RL algorithm called Cooperative HRL. In our approach, agents are cooperative and homogeneous (use the same task decomposition). Learning is decentralized, with each agent learning three interrelated skills: how to perform <b>subtasks,</b> which order to do them in, and how to coordinate with other agents. We define cooperative <b>subtasks</b> to be those <b>subtasks</b> in which coordination among agents significantly improves the performance of the overall task. Those levels of the hierarchy which include cooperative <b>subtasks</b> are called cooperation levels. Since coordination at high levels allows for increased cooperation skills as agents do not get confused by low-level details, we usually define cooperative <b>subtasks</b> at the high levels of the hierarchy. This hierarchical approach allows agents to learn coordination faster by sharing information at the level of cooperative <b>subtasks,</b> rather than attempting to lear...|$|R
40|$|An {{important}} success {{factor for}} the field of KDD lies {{in the development and}} integration of methods for supporting the construction and execution of KDD processes. Crucial aspects in this context are the (incremental) development of a precise problem description, a decomposition of this top level problem description into manageable and compatible <b>subtasks</b> which can be reused, and a selection and combination of adequate algorithms for solving these <b>subtasks.</b> In this paper we describe an approach for supporting the systematic decomposition of a KDD process into <b>subtasks</b> and for selecting appropriate problem-solving methods and algorithms for solving these <b>subtasks.</b> We propose to use pre-/postconditions (i) to characterize (sub) -tasks and methods, (ii) to guide the decomposition process, and (iii) to handle the dependencies between the <b>subtasks</b> and the methods. On the other hand we exploit and integrate techniques to describe the characteristics of the available (database) data to further [...] ...|$|R
5000|$|... #Subtitle level 3: <b>Subtask</b> 3: Global {{performance}} evaluation and commissioning methods ...|$|E
5000|$|... #Subtitle level 3: <b>Subtask</b> B: Occupant action {{models in}} {{residential}} buildings ...|$|E
5000|$|... #Subtitle level 3: <b>Subtask</b> E: Applications in {{building}} design and operations ...|$|E
50|$|The {{specialization}} {{and concentration}} of the workers on their single <b>subtasks</b> often leads to greater skill and greater productivity on their particular <b>subtasks</b> than would be achieved by {{the same number of}} workers each carrying out the original broad task.|$|R
50|$|With Wunderlist Pro, several {{additional}} features can be used, including unlimited assigning, unlimited file upload size, and unlimited number of <b>subtasks</b> (the free version of Wunderlist allows 25 <b>subtasks</b> per task). Additionally, Pro users {{can choose from}} an additional 10 backgrounds.|$|R
40|$|In this study, {{we focus}} on the two <b>subtasks</b> of Chinese event extraction: (1) Chinese event {{detection}} and identification; (2) Chinese event argument extraction. Some features for the two <b>subtasks</b> are provided. Considering the particular contributions of different features on classification analysis in the <b>subtasks,</b> we weight features by introducing ReliefF algorithm. Experimental results show that comparing with normal K-Nearest Neighbor algorithm, feature weighting obviously improves the F-Measures in Chinese event detection and identification and Chinese event argument extraction...|$|R
50|$|By {{answering}} the questions for each <b>subtask</b> usability problems will be noticed.|$|E
50|$|A {{control flow}} node {{is used to}} control the subtasks {{of which it is}} composed. A control flow node may be either a {{selector}} (fallback) node or a sequence node. They run each of their subtasks in turn. When a <b>subtask</b> is completed and returns its status (success or failure), the control flow node decides whether to execute the next <b>subtask</b> or not.|$|E
5000|$|... #Subtitle level 3: <b>Subtask</b> 1: Analysis of {{building}} {{heating and cooling}} demands and of equipment performances ...|$|E
40|$|The {{focus of}} this invited keynote paper (to be {{presented}} by H. J. Siegel) is mixed-machine heterogeneous computing, where a suite of di erent kinds of high-performance machines are interconnected by high-speed links. Such a system can be orchestrated to perform an application whose <b>subtasks</b> have diverse execution requirements. <b>Subtasks</b> are assigned to and executed on the machines {{that will result in}} a minimal overall execution time for the task, considering factors including inter-machine communication overhead. A conceptual model of the automatic decomposition of tasks and assignment of <b>subtasks</b> is presented. Examples of static and dynamic approaches to the matching and scheduling of <b>subtasks</b> are summarized. Some open research problems are discussed. ...|$|R
50|$|Modern {{task list}} {{applications}} may have built-in task hierarchy (tasks {{are composed of}} <b>subtasks</b> which again may contain <b>subtasks),</b> may support multiple methods of filtering and ordering the list of tasks, and may allow one to associate arbitrarily long notes for each task.|$|R
40|$|This paper {{describes}} {{the design and}} implementation of a new parallel programming environment called Parsley, which provides fine-grained scheduling services based {{on the structure of}} the application programs. In Parsley, application programs are divided into <b>subtasks</b> which may run serially or in parallel. Parsley provides a programming interface that allows a user to define <b>subtasks</b> and to specify the precedence constraints among them. According to this specification, the Parsley system schedules <b>subtasks</b> and allocates processors. Thus, the <b>subtasks</b> are executed in a dependence-driven manner. We developed a parallel molecular dynamics simulation program based on the Parsley mechanism and executed it on a scalable multiprocessor system. We achieved good scalability and showed that our system is efficient for large-scale molecular dynamics simulation...|$|R
5000|$|... #Subtitle level 3: <b>Subtask</b> D: Integration of {{occupant}} behavior {{models with}} current building energy modeling programs ...|$|E
50|$|The {{language}} subtest has 48 multiple-choice questions {{broken into}} six content clusters: capitalization; usage; punctuation; sentence structure; pre-writing; content and organization, {{in addition to}} a writing <b>subtask.</b> Testers must score at least 350 within a range of 250-450 on the language subtest, {{in addition to a}}t least a 2.5 within a score range of 1-5 on the writing <b>subtask</b> to pass the English-language arts section.|$|E
5000|$|Boxes or {{spaces in}} which check marks may be entered to {{indicate}} when the <b>subtask</b> {{has been completed}} ...|$|E
50|$|The {{duration}} of the hammock activity (the size of the hammock) may also be set by the <b>subtasks</b> within it, so that the abstract grouping has a start date of the earliest {{of any of the}} <b>subtasks</b> and the finish date is the latest of any of the contents.|$|R
40|$|Abstract. A Task Graph (TG) is a {{model of}} a {{parallel}} program that consists of many <b>subtasks</b> that can be executed simultaneously on different processing elements. <b>Subtasks</b> exchange data via an interconnection network. The dependencies between <b>subtasks</b> are described by means of a Directed Acyclic Graph. Unfortunately, due to their characteristics, scheduling a TG requires dedicated or uninterruptible resources. Moreover, scheduling a TG by itself results in a low resource utilization because of the dependencies among the <b>subtasks.</b> Therefore, in order to solve the above problems, we propose a scheduling approach for TGs by using advance reservation in a cluster environment. In addition, to improve resource utilization, we also propose a scheduling solution by interweaving one or more TGs within the same reservation block and/or backfilling with independent jobs. ...|$|R
5000|$|An (optionally numbered) {{outline of}} the <b>subtasks</b> to be {{performed}} ...|$|R
