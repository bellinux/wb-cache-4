20|65|Public
5000|$|Written in Java, OpenSearchServer can be {{run as a}} <b>standalone</b> <b>server</b> with a servlet container.The main features, {{which can}} be {{extended}} by using plugin architecture, are: ...|$|E
5000|$|Microsoft Office Forms Server: Lets users use any browser {{to access}} and fill InfoPath forms. Office Forms Server is a <b>standalone</b> <b>server</b> {{installation}} of InfoPath Forms Services.|$|E
5000|$|... i-net Clear Reports {{comes as}} a <b>standalone</b> <b>server</b> {{as well as a}} servlet which can be run on any Java EE {{application}} server such as Tomcat, Jetty, IIS, or Apache (via PHP).|$|E
5000|$|... fphttpserver unit {{provides}} {{ready to}} use multithreaded-able <b>standalone</b> http <b>server</b> ...|$|R
5000|$|... a {{lightweight}} and <b>standalone</b> web <b>server</b> for development and testing ...|$|R
50|$|There is {{a slight}} delay in {{connecting}} to the sub-daemons. Thus, when compared to <b>standalone</b> <b>servers,</b> a super-server setup may perform worse, especially when under high load. Some servers, such as hpa-tftpd, therefore take over the internet socket and listen on it themselves for some specified interval, anticipating more connections to come.|$|R
5000|$|... oVirt engine can be {{installed}} on a <b>standalone</b> <b>server,</b> or can be hosted on a cluster of nodes themselves inside a virtual machine (self-hosted engine). Self-hosted engine can be manually installed or automatically deployed via virtual appliance.|$|E
50|$|ScimoreDB is a {{proprietary}} freeware relational {{database management system}} for Microsoft Windows, developed by Scimore UAB. It features advanced features: SQL, ACID transactions, Multiversion concurrency control, free text search, shared nothing clustering, functional procedural shipment for distribution of data and queries. It works as embedded library, <b>standalone</b> <b>server</b> and distributed over many machines.|$|E
50|$|Sphinx {{can be used}} {{either as}} a {{stand-alone}} server or as a storage engine ("SphinxSE") for the MySQL family of databases.When run as a <b>standalone</b> <b>server</b> Sphinx operates similar to a DBMS and can communicate with MySQL, MariaDB and PostgreSQL through their native protocols or with any ODBC-compliant DBMS via ODBC.MariaDB, a fork of MySQL, is distributed with SphinxSE.|$|E
50|$|The EPA {{released}} Version 1.0 of the Computer Server specifications on May 15, 2009. It covered <b>standalone</b> <b>servers</b> {{with one}} to four processor sockets. A second tier to the specification adding active state power and performance reporting for all qualified servers, as well as blade and multi-node server idle state requirements became effective December 16, 2013.|$|R
50|$|PSGI or Perl Web Server Gateway Interface is an {{interface}} between web servers and web applications and frameworks {{written in the}} Perl programming language that allows writing portable applications that can be run as <b>standalone</b> <b>servers</b> or using CGI, FastCGI, mod_perl, et al. It is inspired by the Web Server Gateway Interface for Python, Rack for Ruby and JSGI for JavaScript.|$|R
5000|$|Xojo: A RAD IDE {{developed}} by Xojo, Inc. that uses an object-oriented programming language to create desktop, web and iOS apps. Xojo makes native, compiled desktop apps for macOS, Windows, Linux and Raspberry Pi. It creates compiled web apps {{that can be}} run as <b>standalone</b> <b>servers</b> or through CGI. And it recently added {{the ability to create}} native iOS apps.|$|R
5000|$|SSL-Explorer is an {{application}} written in Java and contains its own database and web server {{that is used}} to serve secure web pages in order to access back-end network resources. While the product is ideally installed upon a <b>standalone</b> <b>server,</b> it may be installed as a service and run in the background to other processes if desired.|$|E
50|$|Written {{completely}} in Java, it is a cross-platform <b>standalone</b> <b>server,</b> {{which serves as}} an environment from which a user can run daemons, web applications, web services, etc. The software was developed primarily {{in response to an}} inability to run non-event-driven beans within J2ee-based application servers (e.g. starting a mail server), as well as a general unhappiness with some of the EJB standards. The resulting application is Coadunation.|$|E
50|$|The {{product is}} {{designed}} to be installed on a <b>standalone</b> <b>server.</b> It allows a user to connect remotely to internal corporate resources such as intranet websites, network file shares, ‘fat client’ applications, and other data via a regular web browser. It gives end users access to applications that they would use every day at work through a simple web browser, without the necessity of installing dedicated VPN client software.|$|E
50|$|Dancer {{includes}} a <b>standalone</b> development <b>server</b> {{that can be}} used for developing and testing applications.|$|R
5000|$|Can {{run as a}} <b>standalone</b> web <b>server</b> or be used behind ("mounted on") any {{web server}} which {{supports}} WSGI ...|$|R
50|$|Axis2 {{provides}} {{the capability to}} add Web services interfaces to Web applications. It can also function as a <b>standalone</b> application <b>server.</b>|$|R
5000|$|TreapDB {{is a kind}} of NoSQL data store, and it {{is based}} on Treap data structure. Treap is a {{randomized}} balanced search tree, which has O(log(n)) complexity to insert or find a key. TreapDB supports many operations besides [...] "get" [...] and [...] "set". For example, [...] "prefix foo" [...] fetch all the pairs whose key startswith [...] "foo". TreapDB can be used in two ways: embedded library or <b>standalone</b> <b>server.</b>|$|E
50|$|Implementations of X.5002005 and LDAPv3 have {{occurred}} worldwide but are primarily located in major data centers with administrative policy boundaries regarding sharing of personal information. Since combined X.500 2005 and LDAPv3 directories can hold millions of unique objects for rapid access, {{it is expected}} to play a continued role for large scale secure identity access services. LDAPv3 can act as a lightweight <b>standalone</b> <b>server,</b> or in the original design as a TCP-IP based Lightweight Directory Access Protocol compatible with making queries to a X.500 mesh of servers which can run the native OSI protocol.|$|E
5000|$|Similar to Parallels Desktop for Mac, Parallels Server for Mac is a hypervisor-based server {{virtualization}} {{software that}} {{allows users to}} run multiple guest operating systems, each in a virtual machine, alongside a primary or [...] "host" [...] operating system. The product's hypervisor allows each virtual machine {{to function as a}} <b>standalone</b> <b>server</b> with its own virtualized hardware, memory and processor. However, unlike the desktop software, Parallels Server for Mac is a hardware-optimized enterprise product designed to handle server workloads such as databases and enterprise email and is aimed at the professional market rather than the consumer market. Parallels Server for Mac allows users to run Intel-powered Apple hardware in a business environment without isolating the Mac servers from the organization’s Windows and Linux systems.|$|E
5000|$|The {{first two}} editions are <b>standalone</b> <b>servers</b> which run on Windows, Linux, and OS X. With BD J2EE, CFML {{applications}} can be deployed on any J2EE server, enabling integration of CFML and J2EE as enabled in ColdFusion MX. BD, BEA WebLogic Edition, {{is a special}} edition based on BD J2EE for use with BEA's WebLogic Server. BD.NET extends the Microsoft [...]NET framework and IIS to permit deployment of CFML applications as native MS [...]NET web applications, offering integration between CFML and ASP.NET that's not possible with ColdFusion.|$|R
50|$|Yaws (Yet another {{web server}}) is a web server written in Erlang by Claes (klacke) Wikström. Yaws can be {{embedded}} into other Erlang-based applications or {{run as a}} regular <b>standalone</b> web <b>server.</b>|$|R
40|$|Cybersecurity {{has become}} a great concern as threats of service interruption, {{unauthorized}} access, stealing and altering of information, and spreading of viruses have become more prevalent and serious. Application layer access control of applications is a critical component in the overall security solution that also includes encryption, firewalls, virtual private networks, antivirus, and intrusion detection. An access control solution, based on an open-source access manager augmented with custom software components, was developed to provide protection to both Web-based and Javabased client and server applications. The DISA Security Service (DISA-SS) provides common access control capabilities for AMMOS software applications {{through a set of}} application programming interfaces (APIs) and network- accessible security services for authentication, single sign-on, authorization checking, and authorization policy management. The OpenAM access management technology designed for Web applications can be extended {{to meet the needs of}} Java thick clients and stand alone servers that are commonly used in the JPL AMMOS environment. The DISA-SS reusable components have greatly reduced the effort for each AMMOS subsystem to develop its own access control strategy. The novelty of this work is that it leverages an open-source access management product that was designed for Webbased applications to provide access control for Java thick clients and Java <b>standalone</b> <b>servers.</b> Thick clients and <b>standalone</b> <b>servers</b> are still commonly used in businesses and government, especially for applications that require rich graphical user interfaces and high-performance visualization that cannot be met by thin clients running on Web browser...|$|R
50|$|SymmetricDS runs {{either as}} a <b>standalone</b> <b>server</b> (using a {{built-in}} Jetty), within an application server (such as Apache Tomcat), or embedded into an application. Configuration is done through properties files {{and a collection of}} configuration tables at a central node. Both database tables and filesystems can be synchronized across a network of nodes. Configuration allows for selection of tables, columns (vertical filtering), and subsets of rows (horizontal filtering) to synchronize in one direction or both directions. Files are selected by base directory and whether to recurse into directories. Wildcard characters are used to match multiple tables and files. Tables can be grouped into channels that sync based on priority. Groups of nodes are linked together and assigned a transport method of push or pull. A push will connect to the node and send changes when they are ready, while a pull will periodically connect with a node to check if changes are available. Several network topologies are possible by linking node groups, including fan-in/out, multi-master, star, and multi-tier tree. A node can be prepared with an initial load of data to populate its database. Changes are grouped into batches and assigned for delivery to nodes using Routers. Routers can be configured or scripted to filter data and make decisions on which nodes should receive data. Batches are delivered during synchronization and tracked using a sequence number and status, with periodic retries designed to automatically recover from errors. Administration tools for command line and a web-based JMX console are included to manage nodes from a central location. Programming interfaces for Java and REST are included to extend and customize behavior.|$|E
40|$|A novel {{wireless}} {{motion sensing}} device {{for control of}} realtime electronics is presented. The device consists of a small (20 × 40 mm) cir-cuit board including all circuitry and battery, and contains a complete inertial measuring unit (IMU), measuring both acceleration and angular velocity in 3 dimensions. Data is transmitted wirelessly via a bluetooth link and can be read from applications either using bluetooth serial emulation, or using a small <b>standalone</b> <b>server</b> application that converts in-coming data and sends reformatted data out via OSC...|$|E
40|$|Approved {{for public}} release; {{distribution}} is unlimitedTo {{take advantage of}} cloud computing benefits that boost an enterprise’s efficiency, innovation, and cost savings, the Department of Defense’s (DOD) cloud computing strategy needs to evaluate databases as a service. If the DOD is going to prioritize outsourced database server hosting, each application’s performance and agility of each must be assessed {{to determine if they}} can thrive in this new environment. We performed an experiment to compare the performance between a current Naval Postgraduate School standalone database server and a cloud version developed specifically for the experiment. The cloud environment was created both with resources less equal to and greater than the live <b>standalone</b> <b>server.</b> We simulated cloud environment traffic based on the type of queries observed in production and collected data to compare its performance against the standalone database. The results show that the cloud database performed similarly to or better than our <b>standalone</b> <b>server,</b> with equivalent resources. It achieved this level of performance without utilizing additional resources. We increased the resources dedicated to our cloud environment to test scalability, and we witnessed that the time needed to execute queries decreased significantly. We therefore concluded that our database would perform and scale favorably in a cloud environment. Civilian, Department of the Nav...|$|E
50|$|ScriptBasic {{has been}} {{developed}} since 1999 and has reached a fairly matured state in terms of functions and stability. The precompiled version available for Windows and Linux includes a command line version and a <b>standalone</b> web <b>server.</b>|$|R
50|$|Jaxer {{is not a}} <b>standalone</b> web <b>server,</b> but {{works with}} another server such as Apache, Jetty or Tomcat. Jaxer {{provides}} server-side DOM and API processing for pages served by the web server before delivering the results to the browser.|$|R
50|$|PGRestAPI (also {{known as}} Chubbs Spatial <b>Server)</b> is a <b>standalone</b> NodeJS <b>server</b> {{which can also}} {{generate}} vector tiles on the fly from a PostGIS data source, as well as serving pre-generated vector tiles from sources such as Mapbox Studio.|$|R
40|$|In this paper, i {{am going}} to {{implement}} a heterogeneous network for industrial applications. In general, A wireless remote controller in which providing a wireless sensing solution for industries to operate essential industrial appliances, ranging from simple lightings to sophisticated electronic devices. A wireless protocol based on wireless token ring protocol (WTRP) has been modified, yielding wireless controller area network (WCAN) data centric communications, which is then proposed to be applied in managing concurrency control of industrial appliances. WCAN is an adaptation of its wired cousin, controller area network (CAN) protocol which has not being properly defined. The wireless controller communicates with the <b>standalone</b> <b>server</b> which in turn communicates with the rest of sensing nodes through CAN system. Each node will be receiving command from the <b>Standalone</b> <b>server</b> and based on the message identifier, either executing the command or discarding it. WCAN has been chosen to become the backbone network of the system as it offers an alternative solution when industrial mobile stations under certain constraints should continue to use CAN protocol as frame exchange protocol. This project is implemented in three sections. First node runs as data acquisition node to which sensors are connected and another one is responsible controlling machines and appliances. Communications between two nodes are accomplished through High Speed CAN communication. Sensors connected are temperature, level and MEMS. Third node is the Master Node collects all necessary data from node 1 and controls industrial appliances through node 2. The communication between master node with node...|$|E
40|$|Simulations, {{useful in}} {{emergency}} prevention and response, {{can range from}} using completely local data to requiring constantly up-to-date sensor information. With increasingly accurate simulations, there is also increased strain on the server providing the information, especially when considering multiple simulations being ran at the same time. This study wants to focus on evaluating different server architectures under different levels of stress {{to find the most}} robust solutions. The comparison will be made by changing the architectures while keeping the core structure and hardware characteristics the same. The architectures under test include a <b>standalone</b> <b>server,</b> docker containers and Kubernetes pods. The evaluation of the architectures will take into account the number of requests correctly handled, the number of mishandled and not handled ones, and their average response time...|$|E
40|$|The i. LON SmartServer is a {{versatile}} smart energy manager that connects to IP-based {{applications such as}} enterprise energy management, demand response programs, streetlight management systems, and high-value remote asset management programs. The server not only allows you to access, control, and monitor electronic devices, but also lets you use data intelligently to save energy, improve operations, and lower maintenance costs. Easy to deploy and manage, and capable of both local and remote control, the SmartServer offers unparalleled flexibility. Use it as a <b>standalone</b> <b>server,</b> or integrate it with the control system of your choice. With built-in drivers for industry-standard protocols like Echelon’s LONWORKS ® technology, SOAP/XML, Modbus, M-Bus, digital I/O, and pulsecount input, and custom driver support for everything else, the SmartServer offers unprecedented connectivity at no extra cost...|$|E
40|$|Applications are {{increasingly}} distributed and event-driven. Advances in web frameworks {{have made it}} easier to program <b>standalone</b> <b>servers</b> and their clients, but these applications remain hard to write. A model-based programming paradigm is proposed that allows a programmer to represent a distributed application {{as if it were a}} simple sequential program, with atomic actions updating a single, shared global state. A runtime environment executes the program on a collection of clients and servers, automatically handling (and hiding from the programmer) complications such as network communication (including server push), serialization, concurrency and races, persistent storage of data, and queuing and coordination of events. National Science Foundation (U. S.) (Grant CCF- 1138967) National Science Foundation (U. S.) (Grant CCF- 1012759) National Science Foundation (U. S.) (Grant CCF- 0746856...|$|R
5000|$|XSP is a simple, <b>standalone</b> web <b>server</b> {{written in}} C# that hosts ASP.NET's System for Linux and other Unix {{operating}} systems. It {{runs on the}} mono runtime for Linux and the [...]NET Framework runtime, making it usable as a lightweight web server on any platform supporting [...]NET.|$|R
5000|$|Snap is a web {{development}} framework {{written in the}} Haskell programming language. [...] It is used by Silk, JanRain, Racemetric, www.lpaste.net, SooStone Inc, and Group Commerce. Snap is also used as a lightweight, <b>standalone</b> Haskell <b>server.</b> The popular static site generator Hakyll uses Snap for its preview mode.|$|R
