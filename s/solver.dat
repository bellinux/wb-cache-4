10000|10000|Public
5|$|Gleason was a frog: {{he worked}} as a problem <b>solver</b> rather than a visionary formulating grand theories.|$|E
5|$|As Griffith stopped portraying {{some of the}} sheriff's more unsophisticated {{character}} traits and mannerisms, {{it was impossible for}} him to create his own problems and troubles in the manner of other central sitcom characters such as Lucy in I Love Lucy or Archie Bunker in All in the Family, whose problems were the result of their temperaments, philosophies and attitudes. Consequently, the characters around Taylor were employed to create the problems and troubles, with rock-solid Taylor stepping in as problem <b>solver,</b> mediator, advisor, disciplinarian and counselor.|$|E
5|$|ENZO (Enzyme Kinetics) is a {{graphical}} interface {{tool for}} building kinetic models of enzyme catalyzed reactions. ENZO automatically generates the corresponding differential equations from a stipulated enzyme reaction scheme. These differential equations are processed by a numerical <b>solver</b> and a regression algorithm which fits the coefficients of differential equations to experimentally observed time course curves. ENZO allows rapid evaluation of rival reaction schemes {{and can be}} used for routine tests in enzyme kinetics.|$|E
2500|$|Simulations can be run using {{a variety}} of <b>solvers</b> including: 6 {{ordinary}} differential equation (ODE) <b>solvers,</b> 2 partial differential equation (PDE) <b>solvers,</b> 4 non-spatial stochastic <b>solvers</b> and Smoldyn [...] for stochastic spatial simulations. Choices between fixed and variable time steps exist. Some <b>solvers</b> can be run locally, all <b>solvers</b> can be run remotely on VCell servers.|$|R
40|$|In this paper, we {{investigate}} GPU based parallel triangular <b>solvers</b> systematically. The parallel triangular <b>solvers</b> are fundamental to incomplete LU factorization family preconditioners and algebraic multigrid <b>solvers.</b> We {{develop a new}} matrix format suitable for GPU devices. Parallel lower triangular <b>solvers</b> and upper triangular <b>solvers</b> are developed for this new data structure. With these <b>solvers,</b> ILU preconditioners and domain decomposition preconditioners are developed. Numerical results show that we can speed triangular <b>solvers</b> around seven times faster...|$|R
40|$|Two direct Choleski {{equation}} <b>solvers</b> and two iterative preconditioned {{conjugate gradient}} (PCG) equation <b>solvers</b> {{used in a}} large structural analysis software system are described. The two direct <b>solvers</b> are implementations of the Choleski method for variable-band matrix storage and sparse matrix storage. The two iterative PCG <b>solvers</b> include the Jacobi conjugate gradient method and an incomplete Choleski conjugate gradient method. The performance of the direct and iterative <b>solvers</b> is compared by solving several representative structural analysis problems. Some key factors affecting {{the performance of the}} iterative <b>solvers</b> relative to the direct <b>solvers</b> are identified...|$|R
25|$|Currently {{there are}} two Poisson solvers {{implemented}} in BioMOCA based on the finite difference method. One uses the pre-conditioned Conjugate Gradient scheme (pCG) and is used by default. The later is borrowed from an APBS <b>solver,</b> which uses a V-multi-grid scheme. Other than the numerical approach to solve the Poisson equation, {{the main difference between}} the two solvers is on how they address the permittivity in the system. In the first <b>solver,</b> a dielectric value is assigned to each cell in the grid, while in the APBS <b>solver</b> the dielectric coefficients are defined on the grid nodes. As discussed earlier box integration method is used in the pCG <b>solver,</b> which allows us to treat the Poisson equation in the most accurate way. Even though a full multigrid <b>solver</b> based on box-integration method has been under development, there is a neat way to reuse the already exiting code and treat the ion channel systems.|$|E
25|$|As {{with the}} angle <b>solver</b> the {{equations}} {{implemented in the}} angle <b>solver</b> {{can be found in}} the Torpedo Data Computer manual. Similar functions were implemented in the rangekeepers for surface ship-based fire control systems. For a general discussion of the principles behind the position keeper, see Rangekeeper.|$|E
25|$|Klaus Hagendorf (2008). , 1939 {{with the}} OpenOffice.org Calc <b>Solver</b> {{as well as}} the lp_solver.|$|E
40|$|We discuss <b>solvers</b> for Sylvester, Lyapunov, and Stein {{equations}} {{that are}} available in the SLICOT Library (Subroutine Library In COntrol Theory). These <b>solvers</b> offer improved efficiency, reliability, and functionality compared to corresponding <b>solvers</b> in other computer-aided control system design packages. The performance of the SLICOT <b>solvers</b> is compared with the corresponding MATLAB <b>solvers.</b> This note can also serve as a guide to the SLICOT and SLICOTbased MATLAB <b>solvers</b> for Linear Matrix Equations. ...|$|R
40|$|Task Description: The {{question}} whether a propositional formula in {{conjunctive normal form}} is satisfiable (SAT) is answered with powerful clause learning SAT <b>solvers.</b> Parallel <b>solvers</b> can be categorized into competitive and cooperative systems. Most of the recent <b>solvers</b> belong to the first group {{and there has been}} much research on improving these <b>solvers.</b> A famous class of <b>solvers</b> in this category are portfolio <b>solvers,</b> which have been improved with complex clause exchange methods. However, <b>solvers</b> of the latter category are believed to scale better with the number of available cores. In this thesis, existing clause sharing mechanism for cooperative search space partitioning SAT <b>solvers</b> should be examined and improved. Finally, the clause sharing mechanisms should be compared against each other. Hochschulleh-Betreuer: verantwortliche...|$|R
40|$|Keywords: Computer-aided {{control system}} design, {{numerical}} algorithms, numerical linear algebra, Lyapunov equations, Sylvester equations. We discuss <b>solvers</b> for Sylvester, Lyapunov, and Stein equations {{that are available}} in the SLICOT Library (Subroutine Library In COntrol Theory). These <b>solvers</b> offer improved efficiency, reliability, and functionality compared to corresponding <b>solvers</b> in other computer-aided control system design packages. The performance of the SLICOT <b>solvers</b> is compared with the corresponding MATLAB <b>solvers.</b> ...|$|R
25|$|Monolithic approach: The {{equations}} describing multi-physics phenomena are solved simultaneously by {{a single}} <b>solver</b> producing a complete solution.|$|E
25|$|Judith Cook, Blood on the Borders: The Casebook of Dr. Simon FormanElizabethan Doctor and <b>Solver</b> of Mysteries, London, Headline, 1999.|$|E
25|$|They {{both can}} {{generate}} SMPS instance level format, which conveys in a non-redundant form {{the structure of}} the problem to the <b>solver.</b>|$|E
40|$|In this paper, we {{construct}} a general model of diverse problem <b>solvers</b> of limited abilities. We use this model to derive two main results: (1) {{a collection of}} diverse, bounded problem <b>solvers</b> can locate optimal solutions to difficult problems and (2) a collection of problem <b>solvers</b> of diverse abilities tends to jointly outperform a collection of high ability problem <b>solvers,</b> where a problem <b>solverâ€™s</b> ability equals her expected individual performance. ...|$|R
40|$|Abstract. State {{of the art}} Stochastic Local Search (SLS) <b>solvers</b> have {{difficulty}} in solving many CNF-encoded realistic SAT problems, apparently because {{they are unable to}} exploit hidden structure as well as systematic <b>solvers.</b> Recent work has shown that SLS <b>solvers</b> may benefit from a preprocessing phase borrowed from systematic SAT solving. In this paper, we report an extensive empirical examination of the impact of SAT preprocessing on the performance of contemporary SLS <b>solvers.</b> It emerges that all the examined <b>solvers</b> do indeed benefit from preprocessing, and the effect of each preprocessor is close to uniform across <b>solvers</b> and across problems. Our results suggest that SLS <b>solvers</b> need to be equipped with multiple preprocessors if they are ever to match the performance of systematic <b>solvers</b> on highly structured problems. ...|$|R
40|$|Abstract. <b>Solvers</b> for satisfiability modulo {{theories}} (SMT) {{check the}} satisfiabil-ity of first-order formulas containing operations from various theories {{such as the}} Booleans, bit-vectors, arithmetic, arrays, and recursive datatypes. SMT <b>solvers</b> are extensions of Boolean satisfiability <b>solvers</b> (SAT <b>solvers)</b> that check the sat-isfiability of formulas built from Boolean variables and operations. SMT <b>solvers</b> have {{a wide range of}} applications in hardware and software verification, extended static checking, constraint solving, planning, scheduling, test case generation, and computer security. We briefly survey the theory of SAT and SMT solving, and present some of the key algorithms in the form of pseudocode. This tutorial pre-sentation is primarily directed at those who wish to build satisfiability <b>solvers</b> or to use existing <b>solvers</b> more effectively. ...|$|R
25|$|These {{details are}} often {{hidden from the}} user since the {{reference}} junction block (with Tref thermometer), voltmeter, and equation <b>solver</b> are combined into a single product.|$|E
25|$|Artificial {{intelligence}} - Several of {{the first}} AI software programs were created at Carnegie Mellon. These include the Logic Theorist, General Problem <b>Solver,</b> and Soar.|$|E
25|$|MINTO (Mixed Integer Optimizer, {{an integer}} {{programming}} <b>solver</b> which uses {{branch and bound}} algorithm) has publicly available source code but is not open source.|$|E
5000|$|<b>Solvers</b> {{based on}} {{explicit}} linearization, {{that rely on}} EPS <b>solvers.</b>|$|R
40|$|Adaptive {{step size}} <b>solvers</b> are {{nowadays}} considered fundamental to achieve efficient ODE integration. While, traditionally, ODE <b>solvers</b> {{have been designed}} based on discrete time machines, new approaches based on discrete event systems have been proposed. Quantization provides an efficient integration technique based on signal threshold crossing, leading to independent and modular <b>solvers</b> communicating through discrete events. These <b>solvers</b> can benefit from the large body of knowledge on discrete event simulation techniques, like parallelization, to obtain efficient numerical integration. In this paper we introduce new <b>solvers</b> based on quantization and adaptive sampling techniques. Preliminary numerical results comparing these <b>solvers</b> are presented...|$|R
40|$|In this paper, {{we present}} a {{perspective}} on modern clause-learning SAT <b>solvers</b> that highlights the roles of, and the interactions between, decision making and clause learning in these <b>solvers.</b> We discuss two limitations of these <b>solvers</b> from this perspective and discuss techniques for dealing with them. We show empirically that the proposed techniques significantly improve state-of-the-art <b>solvers...</b>|$|R
25|$|Differential {{equations}} describe {{changes in}} molecular concentrations {{over time in}} a deterministic manner. Simulations based on differential equations usually do not attempt to solve those equations analytically, but employ a suitable numerical <b>solver.</b>|$|E
25|$|Reduction of the sum {{of square}} errors using the <b>Solver</b> option in Microsoft Excel with the glass {{components}} as variables. Other software (e.g. Microcal Origin) {{can also be used}} to perform these optimizations.|$|E
25|$|The {{equations}} {{implemented in}} the angle <b>solver</b> {{can be found in}} the Torpedo Data Computer manual. The Submarine Torpedo Fire Control Manual discusses the calculations in a general sense and a greatly abbreviated form of that discussion is presented here.|$|E
40|$|Abstract â€” This paper {{describes}} {{linear programming}} <b>solvers</b> for Markov Decision Processes, {{as an extension}} to the JMDP program. JMDP is an object-oriented framework to model and solve Markov Decision Processes (MDP) programmed in Java. The developed <b>solvers</b> work for the Discounted Cost and Average Cost criteria. Our <b>solvers</b> are compared with existing Value Iteration and Policy Iteration <b>solvers.</b> I...|$|R
40|$|Abstract. Modern SAT <b>solvers</b> {{are highly}} {{dependent}} on heuristics. Therefore, benchmarking is of prime importance in evaluating the performances of different <b>solvers.</b> However, relevant benchmarking is not necessarily straightforward. We present our experiments using the IBM CNF Benchmark on several SAT <b>solvers.</b> Using the results, we attempt to define guidelines for a relevant benchmarking methodology, using SAT <b>solvers</b> for real life BMC applications. ...|$|R
40|$|Online {{contests}} {{for open}} innovation â€“ seekers posting innovation projects to which <b>solvers</b> submit solutions â€“ {{have been developed}} into a new online commerce model. This study {{is one of the}} first to lift the veil of online contests. We identify that real world online contests are very different from what is assumed by previous studies. A real world online contest has uncertain number of <b>solvers</b> due to dynamic participation process. Feedback can encourage <b>solvers</b> to contribute more than the equilibrium effort. With a given award, if the seeker's feedback effort is high enough, the emerging number of <b>solvers</b> is a proxy measure of contest performance. More <b>solvers</b> can increase potential performance, however Electronic Commerce and Electronic Markets 2 Workshop of Information Systems and Economics, Phoenix 2009 attention based theories suggest that a seeker is optimal to have an appropriate number of <b>solvers</b> to fit her capability of exploiting knowledge of <b>solvers.</b> To predict the emerging number of <b>solvers</b> of a contest, we have developed a two...|$|R
25|$|The former {{approach}} requires a <b>solver</b> that handles all physical problems involved, therefore {{it requires a}} larger implementation effort. However, there exist scenarios {{for which it is}} difficult to arrange the coefficients of combined differential equations in one matrix.|$|E
25|$|In principle, each cryptic clue {{is usually}} {{sufficient}} to define its answer uniquely, {{so it should}} be possible to answer each clue without use of the grid. In practice, the use of checks is an important aid to the <b>solver.</b>|$|E
25|$|Simon Forman is {{the protagonist}} of the Elizabethan mystery series by Judith Cook, The Casebook of Dr Simon Formanâ€”Elizabethan doctor and <b>solver</b> of mysteries. The novels {{are based on the}} {{original}} casebook manuscripts, and contain a mix of historical and fictional characters.|$|E
50|$|Adjoint <b>solvers</b> are now {{becoming}} {{available in a}} range of Computational Fluid Dynamics (CFD) <b>solvers,</b> such as Fluent, OpenFOAM, SU2 and US3D. Originally developed for optimization, adjoint <b>solvers</b> are now finding more and more use in uncertainty quantification.|$|R
5000|$|<b>Solvers</b> {{based on}} the cross-product matrix or the cyclic matrix, that rely on EPS <b>solvers.</b>|$|R
40|$|The {{development}} of solution techniques for Maxwell's equations as an analysis tool is investigated. The solution techniques that were prevalent around {{the beginning of}} the 20 th century are reviewed. One of these analysis methods for Maxwell's equations are the fast <b>solvers.</b> These fast <b>solvers</b> were developed for electrostatics, electrodynamics, as well as fast <b>solvers</b> that are continuously valid from static to electrodynamics, for the frequency and time domains, and for layered media. These fast <b>solvers</b> use resources that are orders of magnitude smaller than traditional numerical <b>solvers.</b> link_to_subscribed_fulltex...|$|R
