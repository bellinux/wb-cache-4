457|10000|Public
25|$|System {{programming}} (or <b>systems</b> <b>programming)</b> is {{the activity}} of programming computer system software. The primary distinguishing characteristic of <b>systems</b> <b>programming</b> when compared to application programming is that application programming aims to produce software which provides services to the user directly (e.g. word processor), whereas <b>systems</b> <b>programming</b> aims to produce software and software platforms which provide services to other software, are performance constrained, or both (e.g. operating systems, computational science applications, game engines and AAA video games, industrial automation, and {{software as a service}} applications).|$|E
25|$|Don't panic! Douglas Adams to keynote Embedded show. (2001). Embedded <b>Systems</b> <b>Programming,</b> 14(3), 10.|$|E
25|$|<b>Systems</b> <b>programming</b> is {{sufficiently}} different from application programming that programmers tend {{to specialize in}} one or the other.|$|E
50|$|Second, PL/I was {{overtaken}} in the <b>system</b> <b>programming</b> field. The IBM <b>system</b> <b>programming</b> {{community was}} not ready to use PL/I; instead, IBM developed and adopted a proprietary dialect of PL/I for <b>system</b> <b>programming.</b> - PL/S. With the success of PL/S inside IBM, and of C outside IBM, the unique PL/I strengths for <b>system</b> <b>programming</b> became less valuable.|$|R
5000|$|August 1983 - July 1986, <b>System</b> <b>Program</b> Director, F-16 <b>System</b> <b>Program</b> Office, Aeronautical <b>Systems</b> Division, Wright-Patterson AFB, Ohio ...|$|R
50|$|Strategic <b>Systems</b> <b>Program</b> Office (SSP)The Strategic <b>Systems</b> <b>Programs</b> {{organization}} {{began with}} the POLARIS program and continues with the Ohio (SSBN-726)-class Trident submarines.|$|R
25|$|Implementing {{certain parts}} in {{operating}} systems and networking requires <b>systems</b> <b>programming,</b> for example implementing paging (virtual memory) or a device driver for an operating system.|$|E
25|$|TTM Is a recursive, interpretive {{language}} designed {{primarily for}} string manipulation, text editing, macro definition and expansion, and other applications generally classified as <b>systems</b> <b>programming.</b> It is derived, primarily, from GAP and GPM.|$|E
25|$|Concurrent logic {{programming}} integrates concepts of {{logic programming}} with concurrent programming. Its development {{was given a}} big impetus in the 1980s by its choice for the <b>systems</b> <b>programming</b> language of the Japanese Fifth Generation Project (FGCS).|$|E
50|$|In {{contrast}} with application languages, <b>system</b> <b>programming</b> languages typically offer more-direct {{access to the}} physical hardware of the machine: an archetypical <b>system</b> <b>programming</b> language in this sense was BCPL. <b>System</b> <b>programming</b> languages often lack built-in input/output (I/O) facilities because a system-software project usually develops its own I/O mechanisms or builds on top of basic monitor I/O or screen management facilities. The distinction between languages used for <b>system</b> <b>programming</b> and application programming became blurred over time with the widespread popularity of PL/I, C and Pascal.|$|R
50|$|Viktor Petrovich Ivannikov (Ви́ктор Петро́вич Ива́нников; 27 February 1940 - 27 November 2016) was a Russian {{computer}} scientist, {{a member}} of Russian Academy of Sciences, the head of <b>System</b> <b>Programming</b> Chair for the Institute for <b>System</b> <b>Programming,</b> head of the Departments of <b>system</b> <b>programming</b> at the Faculty of Computational Mathematics and Cybernetics, Moscow State University and the Moscow Institute of Physics and Technology.|$|R
40|$|Abstract. Reactive systems, such as {{operating}} systems or elevator control systems, are systems that ideally never terminate and {{are intended to}} maintain some interaction with their environment. Temporal logic {{is one of the}} methods for formal specification descriptions of reactive systems. By describing the formal specifications of reactive systems we can check the consistency of the specifications and whether they contain defects. By using a synthesis algorithm we also obtain reactive <b>system</b> <b>programs</b> from the formal specifications and prevent programming bugs. Therefore, it is important to describe reactive system formal specifications to reactive <b>system</b> <b>programs.</b> However, this algorithm synthesizes several reactive <b>system</b> <b>programs</b> from the formal specifications and it is supposed that some programs are good and some are bad. Thus, we have to choose the good programs for this specification among these reactive <b>system</b> <b>programs.</b> In this paper, we propose several strategies reactive <b>system</b> <b>program</b> synthesis to choose the efficient or good reactive <b>system</b> <b>program</b> among synthesized programs. ...|$|R
25|$|Computer {{programming}} in the 1950s to 1960s was not {{recognized as an}} academic discipline and unlike mature sciences there were no theoretical concepts or coding <b>systems.</b> <b>Programming</b> as a professional activity was poorly understood in those years.|$|E
25|$|BLISS - system {{programming}} language developed at Carnegie Mellon University by W. A. Wulf, D. B. Russell, and A. N. Habermann around 1970. It {{was perhaps the}} best known <b>systems</b> <b>programming</b> language right up until C made its debut a few years later.|$|E
25|$|It was {{broadcast}} via internet stream, usually prerecorded in Florida on a weekend, and then edited and released {{on the following}} Tuesday, on the DDP Hack Radio stream at 9:30pm EST. Topics included phreaking, identity theft, cryptography, operating <b>systems,</b> <b>programming</b> languages, free and open source software, wi-fi and bluetooth, social engineering, cyberculture, and information about various hacker conventions such as PhreakNIC, ShmooCon, H.O.P.E., and Def Con.|$|E
50|$|A new {{strategy}} and results framework was approved in 2015 and the portfolio of research prorgams revised. The <b>systems</b> <b>programs</b> Dryland <b>systems,</b> Aquatic Agricultural Systems and Humidtropics demised as standalone programs, {{even though they}} were seen as what was new to the earlier reformed CGIAR, but were not given a real chance to take off and prosper, mainly due to funding reduction, but also because of a refocus on commodity value chains. These commodity programs were renamed to for example RTB <b>Systems</b> <b>Program</b> or Rice <b>Systems</b> <b>Program.</b> Some work of the earlier <b>systems</b> <b>programs</b> got incorporated but most was lost.|$|R
5000|$|Defense Procurement & Acquisition Policy Directorate - {{responsible}} for all acquisition and procurement policy matters in the Department, including serving as the principal advisor to the Under Secretary on acquisition/procurement strategies for all major weapon <b>systems</b> <b>programs,</b> major automated information <b>systems</b> <b>programs,</b> and services acquisitions ...|$|R
40|$|Disseminates {{information}} concerning new developments and effective actions taken {{relative to the}} management of defense <b>systems</b> <b>programs</b> and defense <b>systems</b> acquisition. Disseminates {{information concerning}} new developments and effective actions taken relative to the management of defense <b>systems</b> <b>programs</b> and defense <b>systems</b> acquisition. Mode of access: Internet...|$|R
25|$|However, none {{of these}} {{alternative}} standards has been as widely adopted as Unicode, which is now the base character set for many new standards and protocols, internationally adopted, and {{is built into the}} architecture of operating systems (Microsoft Windows, Apple macOS, and many Unix-like <b>systems),</b> <b>programming</b> languages (Perl, Python, C#, Java, Common Lisp, APL), and libraries (IBM International Components for Unicode (ICU) along with the Pango, Graphite, Scribe, Uniscribe, and ATSUI rendering engines), font formats (TrueType and OpenType) and so on.|$|E
2500|$|Apple {{says that}} Swift [...] "is the first industrial-quality <b>systems</b> <b>programming</b> {{language}} that is as expressive and enjoyable as a scripting language".|$|E
5000|$|IMP was a <b>systems</b> <b>programming</b> {{language}} {{developed by}} Edgar T. Irons {{in the late}} 1960s through early 1970s. Unlike most other <b>systems</b> <b>programming</b> languages, IMP was an [...]|$|E
5000|$|Chima Ugah - Computer Information <b>Systems</b> <b>Program</b> Coordinator/Director ...|$|R
5000|$|GTESPO - Ground Telecommunications Equipment <b>Systems</b> <b>Program</b> Office ...|$|R
5000|$|Mixed-Up Mother Goose - {{development}} <b>system</b> <b>programming</b> (Sierra) ...|$|R
50|$|The Simplified Instructional Computer (also {{abbreviated}} SIC) is {{a hypothetical}} computer system introduced in System Software: An Introduction to <b>Systems</b> <b>Programming,</b> by Leland Beck. Due {{to the fact}} that most modern microprocessors include subtle, complex functions for the purposes of efficiency, {{it can be difficult to}} learn <b>systems</b> <b>programming</b> using a real-world system. The Simplified Instructional Computer solves this by abstracting away these complex behaviors in favor of an architecture that is clear and accessible for those wanting to learn <b>systems</b> <b>programming.</b>|$|E
50|$|System {{programming}} (or <b>systems</b> <b>programming)</b> is {{the activity}} of programming computer system software. The primary distinguishing characteristic of <b>systems</b> <b>programming</b> when compared to application programming is that application programming aims to produce software which provides services to the user directly (e.g. word processor), whereas <b>systems</b> <b>programming</b> aims to produce software and software platforms which provide services to other software, are performance constrained, or both (e.g. operating systems, computational science applications, game engines and AAA video games, industrial automation, and {{software as a service}} applications).|$|E
5000|$|<b>Systems</b> <b>Programming</b> II (Cryptography and Network Security II) ...|$|E
50|$|<b>System</b> <b>programming</b> {{languages}} {{tend to be}} {{used for}} components and applications with large amounts of internal functionality such as operating systems, database servers, and Web browsers. These applications typically employ complex algorithms and data structures and require high performance. Prototypical examples of <b>system</b> <b>programming</b> languages include C and Modula-2.|$|R
5000|$|AEWCSPO - Airborne Early Warning Control <b>System</b> <b>Program</b> Office ...|$|R
5000|$|Vince Madison and Gavin Christopher - Oberheim <b>system</b> <b>programming</b> ...|$|R
5000|$|<b>Systems,</b> <b>Programming,</b> Languages, and Applications: Software for Humanity (SPLASH) ...|$|E
5000|$|BLISS, as BLISS-10 and BLISS-36, compilers {{used for}} <b>systems</b> <b>programming</b> ...|$|E
5000|$|PL/S - an {{internal}} <b>systems</b> <b>programming</b> language proprietary to IBM ...|$|E
5000|$|American <b>System</b> <b>Program</b> (SAT 1, SAT 2, TOEFL, AP Preparation) ...|$|R
5000|$|Jones in the Fast Lane - {{development}} <b>system</b> <b>programming</b> (Sierra) ...|$|R
5000|$|Limbo—relative of Alef, for <b>system</b> <b>programming</b> in Inferno (operating system) ...|$|R
