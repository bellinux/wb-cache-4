3|2|Public
40|$|In {{previous}} work, we {{have proposed}} a method of preserving the functional semantics of model-based designs {{by the use of}} static checks and a double-buffer protocol [12]. However, this is restricted to static, fixed-priority scheduling and for high-priority to low-priority communications requires a double buffer to be stored for each pair of communicating tasks. In this paper we extend the method to dynamic-priority scheduling in the form of earliest-deadlinefirst (EDF) scheduling and show that, although scheduling is dynamic, a <b>static</b> <b>buffering</b> scheme can still be used. We also suggest some memory optimizations of our protocol which still preserve the original functional semantics. Finally, we show how model checking can be used to prove correctness of the scheme...|$|E
40|$|Data flow is {{a natural}} {{paradigm}} for describing DSP applications for concurrent implementation on parallel hardware. Data flow programs for signal processing are directed graphs where each node represents a function and each arc represents a signal path. Synchronous data flow (SDF) is a special case of data flow (either atomic or large grain) in which the number of data samples produced or consumed by each node on each invocation is specified a priori. Nodes can be scheduled statically (at compile time) onto single or parallel programmable processors so the run-time overhead usually associated with data flow evaporates. Multiple sample rates within the same system are easily and naturally handled. Conditions for correctness of SDF graph are explained and scheduling algorithms are described for homogeneous parallel processors sharing memory. A preliminary SDF software system for automatically generating assembly language code for DSP microcomputers is described. Two new efficiency techniques are introduced, <b>static</b> <b>buffering</b> and an extension to SDF to efficiently implement conditionals...|$|E
40|$|Abstract. The CELL {{architecture}} has one Power Processor Element (PPE) core, {{and eight}} Synergistic Processor Element (SPE) cores {{that have a}} distinct instruction set architecture of their own. The PPE core accesses memory via a traditional caching mechanism, but each SPE core can only access memory via a small 256 K software-controlled local store. The PPE cache and SPE local stores are connected {{to each other and}} main memory via a high bandwidth bus. Software is responsible for all data transfers to and from the SPE local stores. To hide the high latency of DMA transfers, data may be prefetched into SPE local stores using loop blocking transformations and static buffers. We find that the performance of an application can vary {{depending on the size of}} the buffers used, and whether a single-, double-, or triple-buffer scheme is used. Constrained by the limited space available for data buffers in the SPE local store, we want to choose the optimal buffering scheme for a given space budget. Also, we want to be able to determine the optimal buffer size for a given scheme, such that using a larger buffer size results in negligible performance improvement. We develop a model to automatically infer these parameters for <b>static</b> <b>buffering,</b> taking into account the DMA latency and transfer rates, and the amount of computation in the application loop being targeted. We test the accuracy of our prediction model using a research prototype compiler developed on top of the IBM XL compiler infrastructure. ...|$|E
40|$|The IXP 2800 is the {{high-end}} device {{of a family}} of network processors developed by Intel Corporation. It is designed for 10 Gigabit/sec data rates, with typical usage in packet forwarding systems. It can be configured with large amounts of dynamic and <b>static</b> storage for <b>buffering</b> hundreds of thousands of packets for up to a million Internet Transmission Control Protocol (TCP) connections. The programmability and parallel nature of this processor chip make it an ideal choice when high performance and ability to quickly adapt to new network standards are the requirements...|$|R
40|$|A sensor tip (10) {{for use in}} {{a robotic}} hand has a {{three-dimensional}} compliant elastomeric body (12) with an outer boundary (22) having a circular base (24) and a convex surface (26) extending therefrom. Four strain transducers (14, 16, 18, and 20) produce electrical signals indicative of the strain at various positions near the boundary of the elastomeric body (12) resulting from forces exerted upon the sensor tip (10) by an object which the robotic hand is manipulating. The transducers (14, 16, 18, and 20) are positioned about the convex surface (26) so as to produce signals that may be decoupled to determine the normal and tangential forces and the applied torque. A buffer amplifier circuit (34), one for each of the transducers (14, 16, 18, and 20), receives the signals and provides quasi-steady state force information. The circuit (34) connects the respective transducer (40) in a feedback loop around an amplifier (36) and has desirable attributes for <b>static</b> charge <b>buffering.</b> The sensor tip (10) is calibrated to determine proportionality constants for the decoupling algorithm for use of a force delivering system (60), which uses voice coils (74) to apply a force that is linearly related to the current introduced to each of the coils (74). A method of manufacture of the sensor tip (10) results in improved bonding between the transducers (14, 16, 18, and 20) and the elastomeric body (12) for better performance and longer life of the sensor tip (10) ...|$|R

