0|348|Public
40|$|The {{steady flow}} {{characteristics}} around a swing-type valve plate {{installed in a}} rectangular duct are studied theoretically and experimentally {{in order to determine}} the fluid force acting on a <b>swing-type</b> <b>check</b> valve and the side-gap-leakage effects. The results show that the side-gap leakage has dominant influence upon the fluid force characteristics, which can be well predicted by a small modification of the conventional two-dimensional potential flow theory. For the case of a large side gap, the pressure over the valve plate becomes nearly uniform and is equal to the upstream one. And that the fluid force is expressed as a function of only the velocity ratio of the jet to the upstream, if the side-gap-leakage is less than the mainflow volume. It is pointed out that the separation zone at the back of a valve plate is recovered very rapidly due to momentum transfer effects of side-gap-leakage, and that the outlet flow from a valve plate is not contracted with its width nearly equal to the valve opening one. The experimental formulae of moment coefficient are also presented...|$|R
25|$|The LOE, however, {{does not}} provide for an {{external}} <b>checking</b> <b>mechanism</b> for related-party transactions. The BOM has the sole and unfettered right to give approval to related-party transactions, and this lack of an extra <b>checking</b> <b>mechanism</b> {{has resulted in a}} lack of investor protection in Vietnam.|$|R
5000|$|There exist <b>checking</b> <b>mechanisms</b> {{that effect}} data integrity. For instance: ...|$|R
5000|$|... • All {{offices are}} {{synchronized}} at all times. • Graphical User Interface for planning {{as well as}} for running daily operations with full <b>checking</b> <b>mechanism.</b>|$|R
40|$|This paper upon {{looking at}} the Autonomic Computing {{architecture}} and Grid Computing {{highlights the importance of}} health <b>check</b> <b>mechanisms</b> to achieve a reflex-healing duel strategy. This will provide new design options {{for the development of the}} Autonomic Grid. The resulting pulse monitor is based on extending the existing Grid heart-beat monitor with urgency or anxiety levels such as that used in the NASA beacon monitor. The paper concludes with a discussion that this health <b>check</b> <b>mechanism</b> may be utilized in the future to achieve the necessary sense of urgency within a system for affect and emotion intelligence...|$|R
30|$|When {{implementing}} the barectf_get_ctx function, {{it is possible}} to allow multiple contexts to be created. In that case, no assumptions should be made about any preexisting <b>checking</b> <b>mechanism,</b> and potential coherency issues should be tested.|$|R
40|$|AbstractTwo {{complete}} loop <b>checking</b> <b>mechanisms</b> {{have been}} presented in the literature for logic programs with functions: OS-check and EVA-check. OS-check is computationally efficient but quite unreliable in that it often mis-identifies infinite loops, whereas EVA-check is reliable {{for a majority of}} cases but quite expensive. In this paper, we develop a series of new complete loop <b>checking</b> <b>mechanisms,</b> called VAF-checks. The key technique we introduce is the notion of expanded variants, which captures a key structural characteristic of infinite loops. We show that our approach is superior to both OS-check and EVA-check in that it is as efficient as OS-check and as reliable as EVA-check...|$|R
40|$|Two {{complete}} loop <b>checking</b> <b>mechanisms</b> {{have been}} presented in the literature for logic programs with functions: OS-check and EVA-check. OS-check is computationally ecient but quite unreliable in that it often mis-identies innite loops, whereas EVA-check is reliable {{for a majority of}} cases but quite expensive. In this paper, we develop a series of new complete loop <b>checking</b> <b>mechanisms,</b> called VAF-checks. The key technique we introduce is the notion of expanded variants, which captures a key structural characteristic of innite loops. We show that our approach is superior to both OS-check and EVA-check in that it is as ecient as OS-check and as reliable as EVA-check. Keywords: Loop checking, logic programming. ...|$|R
40|$|Description Logic (DL) formalisms {{have gained}} success in many {{application}} areas such as knowledge representation, database reasoning, multi-agent systems, semantic web, and ontology reasoning. The most explored reasoning approach for DLs is the tableau approach. Existing tableau-based DL systems essentially exploit the various kinds of the tree-model properties of DLs. It is known that the (standard) loop checking procedure is avoidable only in tableau algorithms for inexpressive DLs. Loop <b>checking</b> <b>mechanisms</b> are vital for logics with universal modalities, TBox reasoning, and/or transitive roles. However, the standard loop checking rule has various disadvantages. From a practical perspective implementation in a DL prover usually requires quite considerable effort. The standard loop <b>checking</b> <b>mechanism</b> is very sensitive to a notion of a finite type in a particular DL. Since {{the notion of a}} type varies from one logic to another, small changes {{in the language of the}} underlying DL and/or in the tableau procedure can force considerable redesign and refactoring of the code related to the loop checking. In this paper we propose and study alternative loop <b>checking</b> <b>mechanisms.</b> Our facilitation of loop checking uses inference rules which while being simple are also more general than standard loop <b>checking</b> <b>mechanisms</b> implemented in DL systems and remedy the mentioned problems. We focus on the description logic ALCIO(U). This is an extension of the basic DL ALC with inverse operator on roles, nominals (or objects/ABox elements) and the top role. As the language includes nominals and the universal modality, concept satisfiability with respect to (non-empty) TBox and (non-empty) ABox can be reduced to plain concep...|$|R
30|$|In the {{proposed}} method, ELM-based ensemble model {{is used as}} the intelligent model to provide diversified stability prediction outputs, and the credible decision-making rule in [9] is employed as the credibility <b>check</b> <b>mechanism.</b> This section introduces the existing methodologies used in {{the proposed}} method.|$|R
40|$|The present {{assembly}} {{method and}} component {{parts of a}} chosen product are analysed. The design of components is investigated, and a workstation sequence is proposed based upon the modified components. A pick-and-place head is designed, versatility being the main design criterion. A functional <b>check</b> <b>mechanism</b> is designed...|$|R
40|$|Inheritance {{is one of}} {{the most}} common {{features}} of object oriented languages, and has been widely applied to develop large and complex software system. However, designing a suitable inheritance hierarchy, involving redundant inheritance, is a difficult task and easily suffers from name-confliction and repeated inheritance which are error-prone and difficult to test. In this paper, we explain how redundant inheritance makes object-oriented programs difficult to test and maintain, and we give a concrete example of the problems that arise. We show that the difficulty lies in the fact that we lack an effective detection tool suited for work with inheritance problems. Therefore, a formal <b>checking</b> <b>mechanism</b> is proposed to detect and resolve redundant inheritance. Furthermore, this <b>checking</b> <b>mechanism</b> can be easily incorporated with object-oriented CASE tool to enhance software quality...|$|R
40|$|Hospital process {{management}} ought to deliver better value {{in terms of}} end-to-end services. Making managerial decisions based on electronic data generated by the Hospital Information System (HIS) to be more easily manipulated and destroyed than paper document. It is therefore important for auditors {{to assure that the}} information in HIS is well-controlled and high quality. This research aims to develop a control model, namely the Information Gap <b>Checking</b> <b>Mechanism</b> (IGAP <b>Checking</b> <b>Mechanism),</b> to automatically <b>check</b> the information gap between computerized process flows and workflow. This study also justifies the feasibility of IGAP-Checking Mechanism by providing a real case study. The result indicates that the IGAP-Checking Mechanism can assist the case hospital in resolving information quality problems that have occurred in its HIS and can also provide value service for the hospital. ...|$|R
40|$|In this work, a {{comparative}} {{analysis of the}} similarity <b>check</b> <b>mechanism</b> used in the most effective algorithm for mining simple motifs GEMS (Gene Enrichment Motif Searching) and that used in a popular multi-objective genetic algorithm, MOGAMOD (Multi-Objective Genetic Algorithm for Motif Discovery) was done. In our previous work, we had reported the implementation of GEMS on suffix tree –Suffix Tree Gene Enrichment Motif Searching (STGEMS) and shown the linear asymptotic runtime achieved. Here, we attempt to empirically proof the high sensitivity of the resulting algorithm, STGEMS in mining motifs from challenging sequences like we have in Plasmodium falciparum. The results obtained validates the high sensitivity of the similarity <b>check</b> <b>mechanism</b> employed in GEMS and also shows that a careful deployment of this mechanism in the multi-objective genetic algorithm, improved the sensiti...|$|R
5000|$|Sometimes called just {{distinct}} types, {{these were}} introduced as an optional feature (S011) to allow existing atomic types {{to be extended}} with a distinctive meaning {{to create a new}} type and thereby enabling the type <b>checking</b> <b>mechanism</b> to detect some logical errors, e.g. accidentally adding an age to a salary. For example: ...|$|R
2500|$|Simply put, {{there must}} be a {{separation}} of powers, where each branch is able to wield its own power to perform its functions independent of undue influence but yet be restrained from an abuse of its power through <b>checking</b> <b>mechanisms.</b> A system of checks and balances serves to ensure that each power will not be subject to abuse by the controlling body. While the <b>checking</b> <b>mechanisms</b> exercised by each body should be sufficient to prevent abuse of power, they should also not overstep their boundaries and encroach upon the powers that the other branches wield lawfully. In The Federalist No. 51 (6 February 1788), James Madison wrote that [...] "mbition must be made to counteract ambition", while in The Federalist No. 48 (1 February 1788) he explained the need for a system of checks and balances in preserving the separation of powers doctrine: ...|$|R
40|$|AbstractCurrent data {{abstraction}} mechanisms are not adequate to control sharing {{of state in}} the general case involving objects in linked structures. The pervading possibility of sharing {{is a source of}} errors and an obstacle to language implementation techniques. Balloon types, which we have introduced in [2], are a general extension to programming languages. They make the ability to share state a first class property of a data type. The balloon invariant expresses a strong form of encapsulation: no state reachable (directly or transitively) by a balloon object is referenced by any external object. In this paper we describe the <b>checking</b> <b>mechanism</b> for balloon types. It relies on a non-trivial static analysis, described as an abstract interpretation. Here we focus in particular on the design of the abstract domain which allows the <b>checking</b> <b>mechanism</b> to work under realistic assumptions regarding possible object aliasing...|$|R
40|$|This paper {{considers}} {{the case of}} students who attain {{the same level of}} performance {{at the end of one}} course and yet reveal very different levels of success on the course which follows. A comparison is made between two students attaining a grade B in college algebra who perform differently in the succeeding Pre-Calculus Course. Interviews reveal quite different cognitive structures. The successful student had a variety of approaches to problems, <b>checking</b> <b>mechanisms,</b> and an overall grasp of equations in one variable to build up links as if it were a cognitive unit. The student who struggled had a cognitive kit-bag of procedural techniques with no flexibility or <b>checking</b> <b>mechanisms.</b> She relied on her calculator to help her over difficulties with negative numbers and fractions. She had the same attainment but very different potential to cope with the ensuing course...|$|R
5000|$|Simply put, {{there must}} be a {{separation}} of powers, where each branch is able to wield its own power to perform its functions independent of undue influence but yet be restrained from an abuse of its power through <b>checking</b> <b>mechanisms.</b> A system of checks and balances serves to ensure that each power will not be subject to abuse by the controlling body. While the <b>checking</b> <b>mechanisms</b> exercised by each body should be sufficient to prevent abuse of power, they should also not overstep their boundaries and encroach upon the powers that the other branches wield lawfully. In The Federalist No. 51 (6 February 1788), James Madison wrote that [...] "ambition must be made to counteract ambition", while in The Federalist No. 48 (1 February 1788) he explained the need for a system of checks and balances in preserving the separation of powers doctrine: ...|$|R
40|$|This work {{presents}} a model-based development methodology 1 for verified software systems {{as well as}} a tool support for it: an applied AUTOFOCUS 3 tool chain and its basic principles emphasizing the verification of the system under development as well as the <b>check</b> <b>mechanisms</b> we used to raise the level of confidence in the correctness of the implementation of the automatic generators. ...|$|R
40|$|With the {{introduction}} of kernel integrity <b>checking</b> <b>mechanisms</b> in modern operating systems, such as PatchGuard on Windows OS, malware developers can no longer easily install stealthy hooks in kernel code and well-known data structures. Instead, they must target {{other areas of the}} kernel, such as the heap, which stores a large number of function pointers that are poten-tially prone to malicious exploits. These areas of kernel memory are currently not monitored by kernel integrity checkers. Our novel approach to monitoring the integrity of Windows kernel pools called HookLocator is based entirely on virtual machine introspection and is the only system of its kind to allow both 32 and 64 -bit versions of the Windows kernel to be moni-tored for function pointer integrity. Our system also scales easi-ly to protect multiple virtualized targets. Unlike other kernel integrity <b>checking</b> <b>mechanisms,</b> HookLocator does not require the source code of the operating system, complex reverse engi-neering efforts, or the debugging map files. 1...|$|R
40|$|UML {{has become}} the 'quasi' {{standard}} modeling language {{in a wide range}} of system domains, ranging from e-business to safety critical embedded systems, especially with the current trend in component-based system development. Various UML diagrams enable developers to specify various aspects of a system component, including component interfaces, their abstract/detailed behavior, and thus, the use of UML in a component-based system development methodology, known as KobrA. Nevertheless, the use of different UML diagrams introduces potential inconsistency problems. The iterative nature of the KobrA method is also subject to additional inconsistency issues at different levels of abstraction. In this paper, we define consistency problems in the context of component-based development with the KobrA method, and suggest a <b>checking</b> <b>mechanism</b> using environment modeling. Our approach emphasizes the integration of the <b>checking</b> <b>mechanism</b> into the development process and is general enough to be adapted towards other modeling approaches. We illustrate our checking approach with examples and demonstrate its automation using the SPIN model checker...|$|R
40|$|Background : At present, malaria {{diagnosis}} {{was based on}} clinical sign and symptoms confirmed with microscopy examination. Since Plasmodium falciparum was resistance to one or more/multi-drug and spreading out almost all over thecountry, and P. vivax resistance occurred in several endemic areas, the need of accuracy of the {{diagnosis was}} becomingincreasingly important. Methods: This paper discusses malaria laboratory situation analysis in two endemic areas. Two endemic areas representing Western and Eastern Part of Indonesia (Lampung and East Nusa Tenggara province) were selected. The respondents were laboratory microscopist from Province-Health Laboratories, Provinces had sufficient laoatory knowledge, except in Province Hospital laboratories.   Results: The East Nusa Tenggara Province Hospital, Lampung District Health Office and Health Center (HC) laboratories had not enough light and space to work, nor running water supply. The Guideline manual for malaria examination is very limited and only available in HC. Cross <b>check</b> <b>mechanism</b> did not work well due to budget limitation. Recomendation: It was conclude that the skill and capability of the malaria microscopist in the two provinces were varying and have not met the administrative level of the laboratory yet. Cross <b>check</b> <b>mechanism</b> did not performed well, and the situation as well as condition of most laboratories were not favorable to work. We suggest that improvement of the skill and capacity of the malaria microscopist should be done periodically. Meanwhile, laboratory conditions as well as cross <b>check</b> <b>mechanism</b> should also be improved to maintain {{the quality of the}} examination results.   Key words: malaria, microscopy, laboratory</p...|$|R
25|$|Internal {{governance}} {{structures are}} important in supervising the company managers. In US, the supervisory body is often subsumed within the single-tiered board of directors, whereas in Vietnam, the IC is an independent body. Through separation of supervisory and management functions, the Vietnamese corporate law model, at least theoretically, ensures that the BOM is held {{to a greater degree}} of accountability by an independent <b>checking</b> <b>mechanism.</b>|$|R
30|$|Picconi et al. [15] {{proposed}} {{a solution to}} validate an aggregated message with probabilistic signature <b>checking</b> <b>mechanism.</b> The proposed scheme is used to verify vehicle-related information such as the current speed and geographic location, not traffic events occurred along the road. In addition, a malicious vehicle {{may be able to}} circumvent the checking scheme if its false messages are far less than all transmitted messages in a VANET.|$|R
50|$|Versions {{prior to}} 2.3.1.0 of the {{original}} Shareaza connected to www.shareaza.com to check for software updates. From 1 January 2008 the new owner of the domain shareaza.com, Discordia Ltd. used this update <b>check</b> <b>mechanism</b> to suggest to users that ShareazaV4 (and later ShareazaV5, V6, and V7) was an update to the original Shareaza client. Since version 2.3.1.0, released on 3 January 2008, the original Shareaza has linked to the Shareaza pages at sourceforge.net.|$|R
2500|$|Tolerance {{can also}} be {{differentiated}} into [...] "Central" [...] and [...] "Peripheral" [...] tolerance, {{on whether or not}} the above-stated <b>checking</b> <b>mechanisms</b> operate in the central lymphoid organs (Thymus and Bone Marrow) or the peripheral lymphoid organs (lymph node, spleen, etc., where self-reactive B-cells may be destroyed). [...] It must be emphasised that these theories are not mutually exclusive, and evidence has been mounting suggesting that all of these mechanisms may actively contribute to vertebrate immunological tolerance.|$|R
40|$|This report {{presents}} initial {{results in}} the area of software testing and analysis produced as part of the Software Engineering Impact Project. The report describes the historical development of runtime assertion checking, including a description of the origins of and significant features associated with assertion <b>checking</b> <b>mechanisms,</b> and initial findings about current industrial use. A future report will provide a more comprehensive assessment of development practice, for which we invite readers of this report to contribute information...|$|R
5000|$|Modbus RTU — This {{is used in}} serial {{communication}} and makes use of a compact, binary representation of the data for protocol communication. The RTU format follows the commands/data with a cyclic redundancy check checksum as an error <b>check</b> <b>mechanism</b> to ensure the reliability of data. Modbus RTU {{is the most common}} implementation available for Modbus. A Modbus RTU message must be transmitted continuously without inter-character hesitations. Modbus messages are framed (separated) by idle (silent) periods.|$|R
5000|$|Tolerance {{can also}} be {{differentiated}} into [...] "Central" [...] and [...] "Peripheral" [...] tolerance, {{on whether or not}} the above-stated <b>checking</b> <b>mechanisms</b> operate in the central lymphoid organs (Thymus and Bone Marrow) or the peripheral lymphoid organs (lymph node, spleen, etc., where self-reactive B-cells may be destroyed). It must be emphasised that these theories are not mutually exclusive, and evidence has been mounting suggesting that all of these mechanisms may actively contribute to vertebrate immunological tolerance.|$|R
40|$|AbstractLoop <b>checking</b> <b>mechanisms</b> {{are used}} to detect and prune {{infinite}} SLD derivations, through run time checks which are introduced in logic program interpreters. Simple loop checks, i. e. checks which do {{not depend on the}} specific logic program, have been widely studied in literature. Since no sound and complete loop check exists even in the case of function-free programs, several subclasses have been characterized for which sound and complete loop checks can be determined. In this paper a theoretical framework for analysing properties of loop <b>check</b> <b>mechanisms</b> for logic programs is proposed, which exploits general mathematical results about well-quasi-ordered (wqo) sets. In a way, the method {{can be viewed as a}} counterpart of well known techniques based on well-founded partial-ordering, used in termination proofs for rewriting systems and for logic programs. The main results are obtained on the basis of a combinatorial analysis of properties of wqo sets of goals. As shown in the paper, subclasses of programs, for which sound and complete simple loop checks exist, can be easily framed in the wqo approach. Reasons for the different behaviours of subsumption loop checks based on list and multiset goal comparisons are also plainly highlighted...|$|R
40|$|International audienceReading {{a set of}} RFID tags all at once is an {{important}} feature of the RFID technology for many applications. However, RFID inventory is not completely reliable as tags may be missed in unfavorable situations. In this paper, we propose an application level protocol based on an integrity <b>checking</b> <b>mechanism</b> supporting a reliable inventory process. The integrity information is self-contained in tag group and the protocol does not require any support from an external information system, enabling autonomous and standalone operation...|$|R
40|$|International audienceA CONLAN {{document}} has significance {{only if it}} is read by {{a person}} or machine. that reader (environment) is required to use available facilities to respond to and interact with the document. It must provide the type <b>checking</b> <b>mechanism.</b> It must record the names of defined and declared items and provide the data base they require. It must record signal values. From such records, it can determine facts of importance to continued document evaluation. `System interfaces' are prescribed environment responses, not formally defined via CONLAN syntax...|$|R
40|$|This thesis {{deals with}} issue of {{reliability}} of real-time embedded systems. Contains {{a summary of}} basic concepts related to field in real-time embedded systems and mechanisms for dependability enhancement through redundancy techniques and control flow checking. Describes the implementation of selected control flow <b>checking</b> <b>mechanisms,</b> the technique uses software watchdog timers, use of hardware n-modular redundancy in software environment and technique of process pairs using operating system uC/OS-II. The different mechanisms are validated by method injection of faults into the chosen data structures of system uC/OS-II...|$|R
25|$|The {{separation}} of powers in Singapore is also enhanced by intra-branch <b>checking</b> <b>mechanisms.</b> Within the executive, the Elected President adds to the overall scheme {{of checks and balances}} through his discretionary power to block certain government actions. However, the presence of an override mechanism wielded by Parliament blunts the office's powers. The Presidential Council for Minority Rights also serves as a check on the legislature by reviewing bills to ensure that they do not discriminate against racial and religious minorities. However, the Council's powers are constrained by the presence of an override mechanism as well.|$|R
40|$|Performance-contingent {{compensation}} {{by means}} of stock options may induce risk taking in agents that is excessive {{from the point of}} view of the company or the shareholders. We test whether increasing shareholder control may be an effective <b>checking</b> <b>mechanism</b> to rein in such excessive risk taking. We thus tell one group of experimental CEOs that they may have to justify their decision making processes in front of their shareholders. This indeed reduces risk taking and increases the performance of the companies they manage. Implications are discussed. Peer reviewe...|$|R
