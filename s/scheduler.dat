10000|2067|Public
5|$|Furthermore, scans are {{no longer}} {{scheduled}} through the Windows Task <b>Scheduler,</b> but through the Symantec's proprietary one, which performs tasks while the computer is idle (i.e., when the user is away from the computer).|$|E
5|$|In 1991, Maloney {{began working}} on Bill Clinton's first {{campaign}} for President as Deputy to Susan Thomases, the chief <b>scheduler,</b> and in Clinton's re-election campaign Maloney worked as Director of Surrogate Travel. After the successful campaign Maloney was offered {{a position in the}} White House staff and served as a senior advisor and White House Staff Secretary from 1999 through 2000, among the youngest to serve in that capacity. At a campaign event Clinton stated that Maloney worked closely with him.|$|E
5|$|In DragonFly, each CPU {{has its own}} thread <b>scheduler.</b> Upon creation, threads are {{assigned}} to processors and are never preemptively switched from one processor to another; they are only migrated by the passing of an inter-processor interrupt (IPI) message between the CPUs involved. Inter-processor thread scheduling is also accomplished by sending asynchronous IPI messages. One advantage to this clean compartmentalization of the threading subsystem is that the processors' on-board caches in Symmetric Multiprocessor Systems do not contain duplicated data, allowing for higher performance by giving each processor in the system {{the ability to use}} its own cache to store different things to work on.|$|E
5000|$|... #Caption: A highly {{simplified}} {{structure of}} the Linux kernel, which includes process <b>schedulers,</b> I/O <b>schedulers,</b> and packet <b>schedulers</b> ...|$|R
40|$|AbstractIn this paper, we {{consider}} several subclasses of distributed <b>schedulers</b> and we investigate {{the ability of}} these subclasses to attain worst-case probabilities. Based on previous work, {{we consider}} the class of distributed <b>schedulers,</b> and we prove that randomization adds no extra power to distributed <b>schedulers</b> when trying to attain the supremum probability of any measurable set, thus showing that the subclass of deterministic <b>schedulers</b> suffices to attain the worst-case probability. Traditional <b>schedulers</b> are a particular case of distributed <b>schedulers.</b> So, since our result holds for any measurable set, our proof generalizes the well-known result that randomization adds no extra power to <b>schedulers</b> when trying to maximize the probability of an ω-regular language. However, non-Markovian <b>schedulers</b> are needed to attain supremum probabilities in distributed systems. We develop another class of <b>schedulers</b> (the strongly distributed <b>schedulers)</b> that restricts the nondeterminism concerning {{the order in which}} components execute. We compare this class against previous approaches in the same direction, showing that our definition is an important contribution. For this class, we show that randomized and non-Markovian <b>schedulers</b> are needed to attain worst-case probabilities. We also discuss the subclass of finite-memory <b>schedulers,</b> showing the intractability of the model checking problem for these <b>schedulers...</b>|$|R
40|$|Abstract: Large {{distributed}} systems challenge traditional <b>schedulers,</b> {{as it is}} often hard to determine a priori how long each task will take to complete on each resource, information that is input for such <b>schedulers.</b> Task replication has been applied {{in a variety of}} scenarios as a way to circumvent this problem. Task replication consists of dispatching multiple replicas of a task and using the result from the first replica to finish. Replication <b>schedulers</b> (i. e. <b>schedulers</b> that employ task replication) are able to achieve good performance {{even in the absence of}} information on tasks and resources. They are also of smaller complexity than traditional <b>schedulers,</b> making them better suitable for large {{distributed systems}}. On the other hand, replication <b>schedulers</b> waste cycles with the replicas that are not the first to finish. Moreover, this extra consumption of resources raises severe concerns about the system-wide performance of a distributed system with multiple, competing replication <b>schedulers.</b> This paper presents a comprehensive study of task replication, comparing replication <b>schedulers</b> against traditional information-based <b>schedulers,</b> and establishing their efficacy (the performance delivered to the application), efficiency (the amount of resources wasted), and emergent behavior (the system-wide behavior of a system with multiple replication <b>schedulers).</b> We also introduce a simple access control strategy that can be implemented locally by each resource and greatly improves overall performance of a system on which multiple replication <b>schedulers</b> compete for resources...|$|R
5|$|It {{provides}} network administrators {{a method}} of creating a computing cluster, which allows them to exploit previously unused computational power for calculations that can be divided easily into smaller operations, such as Mandelbrot maps. The setup of an Xgrid cluster can be achieved at next to no cost, as Xgrid client is pre-installed on all computers running Mac OS X 10.4 to Mac OS X 10.7. The Xgrid client {{was not included in}} Mac OS X 10.8. The Xgrid controller, the job <b>scheduler</b> of the Xgrid operation, is also included within Mac OS X Server and as a free download from Apple. Apple has kept the command-line job control mechanism minimalist while providing an API to develop more sophisticated tools built around it.|$|E
25|$|Windows Vista {{includes}} an overhauled Task <b>Scheduler</b> that uses hierarchical folders of tasks. The Task <b>Scheduler</b> can run programs, send email, or display a message. The Task <b>Scheduler</b> can also now {{be triggered by}} an XPath expression for filtering events from the Windows Event Log, and can respond to a workstation's lock or unlock, and {{as well as the}} connection or disconnection to the machine from a Remote Desktop. The Task <b>Scheduler</b> tasks can be scripted in VBScript, JScript, or PowerShell.|$|E
25|$|Peter Newell (class of 1997) {{served as}} the White House <b>Scheduler</b> for President Barack Obama.|$|E
40|$|Abstract. Quantitative model {{checking}} computes {{the probability}} {{values of a}} given property quantifying over all possible <b>schedulers.</b> It turns out that maximum and minimum probabilities calculated {{in such a way}} are overestimations on models of distributed systems in which components are loosely coupled and share little information with each other (and hence arbitrary <b>schedulers</b> may result too powerful). Therefore, we focus on the quantitative model checking problem restricted to distributed <b>schedulers</b> that are obtained only as a combination of local <b>schedulers</b> (i. e. the <b>schedulers</b> of each component) and show that this problem is undecidable. In fact, we show that there is no algorithm that can compute an approximation to the maximum probability of reaching a state within a given bound when restricted to distributed <b>schedulers.</b> ...|$|R
40|$|Abstract. In the {{verification}} of probabilistic systems, distributed sched-ulers {{are used to}} obtain tight bounds on worst-case probabilities, these bounds being more realistic than the ones obtained by considering un-restricted full-history dependent <b>schedulers.</b> In this paper, we define two classes of distributed <b>schedulers.</b> We present undecidability results re-lated to the automatic verification under these classes of <b>schedulers.</b> In previous literature, we have proven that the model checking problem is undecidable for distributed <b>schedulers.</b> However, {{in this paper we}} show that, by assuming that the <b>schedulers</b> are in a given class, the technique of partial order reduction (POR) for LTL properties can be applied in a more efficient way than usual, thus yielding a system with less states and transitions than if reduced assuming unrestricted <b>schedulers.</b> The reduced system can then be analysed using well-known algorithms for full-history dependent <b>schedulers.</b> Our partial order reduction technique may also obtain bounds strictly tighter than the ones obtained by con-sidering unrestricted <b>schedulers</b> (of course, such bounds are safe with respect to the class of <b>schedulers</b> under consideration). We explain that the two variants we present are obtained from a general theorem, thus raising the question of whether there are other “natural ” classes of sched-ulers for which POR variants can be developed. ...|$|R
40|$|In {{this article}} we provide brief {{descriptions}} of three classes of schedulers: Operating Systems Process <b>Schedulers,</b> Cluster Systems, Jobs <b>Schedulers</b> and Big Data <b>Schedulers.</b> We describe their evolution from early adoptions to modern implementations, considering both the use and features of algorithms. In summary, we discuss differences between all presented classes of <b>schedulers</b> and discuss their chronological development. In conclusion, we highlight similarities in the focus of scheduling strategies design, applicable to both local and distributed systems...|$|R
25|$|The {{following}} are non-standard characters and exist only in some cron implementations, such as Quartz java <b>scheduler.</b>|$|E
25|$|At {{the core}} of the {{operating}} system, many improvements have been made to the memory manager, process <b>scheduler,</b> heap manager, and I/O <b>scheduler.</b> A Kernel Transaction Manager has been implemented that can be used by data persistence services to enable atomic transactions. The service is being used to give applications the ability to work with the file system and registry using atomic transaction operations.|$|E
25|$|The memory {{manager and}} {{processes}} <b>scheduler</b> have been improved. The <b>scheduler</b> was modified {{to use the}} cycle counter register of modern processors {{to keep track of}} exactly how many CPU cycles a thread has executed, rather than just using an interval-timer interrupt routine. This new CPU cycle-based thread scheduling gives a greater fairness and more deterministic app behavior. Many kernel data structures and algorithms have been rewritten. Lookup algorithms now run in constant time, instead of linear time as with previous versions.|$|E
40|$|The {{increasing}} {{complexity of}} space operations and {{the inclusion of}} interorganizational and international groups in the planning and control of space missions lead to requirements for greater communication, coordination, and cooperation among mission <b>schedulers.</b> These <b>schedulers</b> must jointly allocate scarce shared resources among the various operational and mission oriented activities while adhering to all constraints. This scheduling environment is complicated by such factors {{as the presence of}} varying perspectives and conflicting objectives among the <b>schedulers,</b> the need for different <b>schedulers</b> to work in parallel, and limited communication among <b>schedulers.</b> Smooth interaction among <b>schedulers</b> requires the use of protocols that govern such issues as resource sharing, authority to update the schedule, and communication of updates. This paper addresses the development and characteristics of such protocols and their use in a distributed scheduling environment that incorporates computer-aided scheduling tools. An example problem is drawn from the domain of space shuttle mission planning...|$|R
40|$|In the {{existing}} Grid scheduling literature, the reported methods and strategies are mostly related to high-level <b>schedulers</b> such as global <b>schedulers,</b> external <b>schedulers,</b> data <b>schedulers,</b> and cluster <b>schedulers.</b> Although {{a number of}} these have previously considered job scheduling, thus far only relatively simple queue-based policies such as First In First Out (FIFO) have been considered for local job scheduling within Grid contexts. Our initial research shows that it is worth investigating the potential impact on the performance of the Grid when intelligent optimisation techniques are applied to local scheduling policies. The research problem is defined, and a basic research methodology with a detailed roadmap is presented. This paper forms a proposal with the intention of exchanging ideas and seeking potential collaborators. 1...|$|R
40|$|The {{beginnings}} of a methodology for quantifying the performance of knowledge-sources (KSs) and <b>schedulers</b> in a knowledge-based interpretation sys tern are presented. As part of this methodology, measures for the “reliability ” of an intermediate state of system processing {{and the effectiveness of}} KSs and <b>schedulers</b> are developed. Based on the measures, techniques for simulating KSs and <b>schedulers</b> of arbitrary effectiveness are described. ...|$|R
25|$|Groupon MerchantOS is a {{suite of}} {{products}} and tools for merchants running with Groupon. The suite includes Groupon Rewards, Groupon <b>Scheduler</b> and Groupon Payments.|$|E
25|$|Windows Vista also {{includes}} a new Multimedia Class <b>Scheduler</b> Service (MMCSS) that allows multimedia applications to register their time-critical processing to run at an elevated thread priority, thus ensuring prioritized access to CPU resources for time-sensitive DSP processing and mixing tasks.|$|E
25|$|An {{email from}} the One-Two-GO and Orient Thai’s flight <b>scheduler</b> to COO Cho Tsing Tsang, and CEO Udom Tantiprasongchai {{detailing}} the roster fraud provided to crash investigators and suggesting log book alterations {{to cover up}} the illegal flight of OG269.|$|E
40|$|Real-time <b>schedulers</b> are {{modelled}} by finite-state transition systems using FIFO queues as auxiliary memory. The intuitive {{notion of}} hard real time {{is related to}} the definition of quasi-real-time behaviour of an automaton. Then, starting with simple <b>schedulers</b> for independent tasks, a modular approach to the design of <b>schedulers</b> (FIFO, static priority based, preemptive, dynamic priorities) is presented. This is based on recent results on recognition power and closure properties of quasi-real-time queue automata w. r. t. intersection, shuffle and reverse homomorphism. The treatment of readers-writers <b>schedulers</b> is compared with recent proposals based on intersections of context-free languages. Possible developments are in the conclusion...|$|R
40|$|Abstract. For {{concurrent}} probabilistic programs having process-level nondeterminism, it {{is often}} necessary to restrict the class of <b>schedulers</b> that resolve nondeterminism to obtain sound and precise model checking algorithms. In this paper, we introduce two classes of <b>schedulers</b> called view consistent and locally Markovian <b>schedulers</b> and consider the model checking problem of concurrent, probabilistic programs under these alternate semantics. Specifically, given a Büchi automaton Spec, a threshold x ∈ [0, 1], and a concurrent program P, the model checking problem asks if the measure of computations of P that satisfy Spec is at least x, under all view consistent (or locally Markovian) <b>schedulers.</b> We give precise complexity results for the model checking problem (for different classes of Büchi automata specifications) and contrast it with the complexity under the standard semantics that considers all <b>schedulers.</b> ...|$|R
40|$|ABSTRACT − Buffered {{multistage}} interconnection networks {{offer one}} of the most scalable and cost-effective approaches to building high capacity routers. Unfortunately, the performance of such systems has been difficult to predict {{in the presence of the}} extreme traffic conditions that can arise in the Internet. Recent work introduced distributed scheduling, to regulate the flow of traffic in such systems. This work demonstrated, using simulation and experimental measurements, that distributed scheduling can deliver robust performance for extreme traffic. Here, we show that distributed <b>schedulers</b> can be provably work-conserving for speedups of 2 or more. Two of the three <b>schedulers</b> we describe were inspired by previously published crossbar <b>schedulers.</b> The third has no direct counterpart in crossbar scheduling. In our analysis, we show that distributed <b>schedulers</b> based on blocking flows in small-depth acyclic flow graphs can be work-conserving, just as certain crossbar <b>schedulers</b> based on maximal bipartite matchings have been shown to be work-conserving. We also study the performance of practical variants of these <b>schedulers</b> when the speedup is less than 2, using simulation...|$|R
25|$|Groupon <b>Scheduler</b> is {{an online}} booking tool for merchants, {{allowing}} their consumers to seamlessly book appointments for {{services at the}} time of purchasing their Groupon deal. This tool is targeted at merchants running deals where appointments are required, for example in the healthy and beauty industry or for classes and activities.|$|E
25|$|There was {{a simple}} {{real-time}} operating system designed by J. Halcombe Laning, consisting of the Exec, a batch job-scheduling using cooperative multi-tasking and an interrupt-driven pre-emptive <b>scheduler</b> called the Waitlist which could schedule multiple timer-driven 'tasks'. The tasks were short threads of execution which could reschedule themselves for re-execution on the Waitlist, or could kick off a longer operation by starting a 'job' with the Exec.|$|E
25|$|The {{software}} utility Cron is a time-based job <b>scheduler</b> in Unix-like computer operating systems. People {{who set up}} {{and maintain}} software environments use cron to schedule jobs (commands or shell scripts) to run periodically at fixed times, dates, or intervals. It typically automates system maintenance or administration—though its general-purpose nature makes it useful for things like downloading files from the Internet and downloading email at regular intervals. The origin of the name cron is from the Greek word for time, χρόνος (chronos).|$|E
40|$|Although work <b>schedulers</b> {{serve an}} {{organizational}} role influencing decisions about balancing conflicting stakeholder interests over schedules and staffing, scheduling has primarily {{been described as}} an objective activity or individual job characteristic. The authors use the lens of job crafting to examine how <b>schedulers</b> in 26 health care facilities enact their roles as they “fill holes” to schedule workers. Qualitative analysis of interview data suggests that <b>schedulers</b> expand their formal scope and influence to meet their interpretations of how to manage stakeholders (employers, workers, and patients). The authors analyze variations in the extent of job crafting (cognitive, physical, relational) to broaden role repertoires. They find evidence that some <b>schedulers</b> engage in rule-bound interpretation to avoid role expansion. They also identify four types of schedulers: enforcers, patient-focused <b>schedulers,</b> employee-focused <b>schedulers,</b> and balancers. The article adds to the job-crafting literature by showing that job crafting is conducted not only to create meaningful work but also to manage conflicting demands and to mediate among the competing labor interests of workers, clients, and employers...|$|R
40|$|Lossy channel systems (LCS’s) are {{systems of}} finite state {{processes}} that communicate via unreliable unbounded fifo channels. We introduce NPLCS’s, {{a variant of}} LCS’s where message losses have a probabilistic behavior while the component processes behave nondeterministically, and study the decidability of qualitative verification problems for ω-regular linear-time properties. We show that—in contrast to finite-state Markov decision processes—the satisfaction relation for linear-time formulas depends {{on the type of}} <b>schedulers</b> that resolve the nondeterminism. While the qualitative model checking problem for the full class of history-dependent <b>schedulers</b> is undecidable, the same question for finite-memory <b>schedulers</b> can be solved algorithmically. Additionally, some special kinds of reachability, or recurrent reachability, qualitative properties yield decidable verification problems for the full class of <b>schedulers,</b> which—for this restricted class of problems— are as powerful as finite-memory <b>schedulers,</b> or even a subclass of them...|$|R
40|$|CSMA) <b>schedulers</b> for {{wireless}} networks. For networks {{where all}} nodes are within transmission range of each other, {{it has been}} shown that such <b>schedulers</b> achieve the network capacity in the limiting region of large networks with a small sensing delay. However the design and analysis of CSMA <b>schedulers</b> for general networks has been an open problem due to the complexity of the interaction among coupled interference con-straints. For networks with primary interference constraints, we introduce a tractable analysis of such CSMA <b>schedulers</b> based on a fixed point approximation. We then use the approximation to characterize the achievable rate region of static CSMA <b>schedulers.</b> We show that the approximation is asymptotically accurate for the limiting regime of large networks with a small sensing delay, and that in this case the achievable rate region of CSMA converges to the capacity region. I...|$|R
25|$|Windows Vista {{contains}} {{a range of}} new technologies and features that are intended to help network administrators and power users better manage their systems. Notable changes include a complete replacement for NTLDR based on the Windows Preinstallation Environment, completely rewritten image-based deployment mechanisms, a significantly improved Task <b>Scheduler,</b> a revamped event logging infrastructure, Windows Recovery Environment, support for per-application Remote Desktop sessions, new diagnostic, health monitoring and system administration tools, {{and a range of}} new Group Policy settings covering many of the new features.|$|E
25|$|Augustine {{was born}} as Kathy Marie Alfano in Los Angeles, California, {{and was an}} Italian-American. Her {{educational}} background included a bachelor's degree in political science from Occidental College, and a Master of Public Administration degree from California State University, Long Beach. While in college, she worked in Washington, D.C., as a Congressional intern. Prior to entering politics, she worked for Delta Air Lines as a flight <b>scheduler</b> for twelve years, and briefly as a flight attendant, based out of Las Vegas, Nevada, after 1988.|$|E
25|$|McDuffie {{struggled}} in 1936, while battling stomach ailments that would haunt him {{in later years}} as well. He rebounded in 1937, going 10–4 with a 3.07 ERA, and hurled two victories over Satchel Paige in three matchups. He quickly became a favorite of Effa Manley, who along with his husband Abe Manley was co-owner of the Eagles. She took {{an active role in}} the team, serving as manager and <b>scheduler.</b> Sometimes she took too active a role, for instance when she tried to control the antics of McDuffie inside and outside the ballpark.|$|E
40|$|Despite {{the fact}} that size-based <b>schedulers</b> can give {{excellent}} results {{in terms of both}} average response times and fairness, data-intensive computing execution engines generally do not employ size-based <b>schedulers,</b> mainly because of {{the fact that}} job size is not known a priori. In this work, we perform a simulation-based analysis of the performance of size-based <b>schedulers</b> when they are employed with the workload of typical data-intensive schedules and with approximated size estimations. We show results that are very promising: even when size estimation is very imprecise, response times of size-based <b>schedulers</b> can be definitely smaller than those of simple scheduling techniques such as processor sharing or FIFO. ...|$|R
40|$|In {{the study}} of quantum process algebras, {{researchers}} have introduced different notions of equivalence between quantum processes like bisimulation or barbed congruence. However, there are intuitively equivalent quantum processes that these notions do not regard as equivalent. In this paper, we introduce a notion of equivalence named observational equivalence into qCCS. Since quantum processes have both probabilistic and nondeterministic transitions, we introduce <b>schedulers</b> that solve nondeterministic choices and obtain probability distribution of quantum processes. By definition, the restrictions of <b>schedulers</b> change observational equivalence. We propose some definitions of <b>schedulers,</b> and investigate {{the relation between the}} restrictions of <b>schedulers</b> and observational equivalence. Comment: In Proceedings QPL 2014, arXiv: 1412. 810...|$|R
40|$|Most {{existing}} research on real-time storage {{have focused on}} the use of QoS-aware disk <b>schedulers.</b> However, the increasing intelligence and autonomy of modern disk drives have made fine-grained external disk scheduling difficult. As this trend continues, providing QoS-aware storage by using external disk <b>schedulers</b> may become infeasible in the future. The goal of this paper paper is to present a general framework for QoS-aware storage that does not rely on external disk <b>schedulers...</b>|$|R
