142|1668|Public
25|$|Adds Group {{policies}} to control peer caching, download times, {{and the number}} of jobs and files download. BITS 3.0 also writes diagnostic and troubleshooting events to the <b>system</b> <b>log</b> which can be viewed in Event Viewer.|$|E
2500|$|The Connecticut Forest & Park Association (CFPA) {{offers the}} [...] Hike {{any of the}} trails in the Blue-Blazed Hiking Trail <b>System,</b> <b>log</b> your miles, and earn prizes. There are three {{categories}} (200, 400, and 800 miles).|$|E
2500|$|... sudo may be {{configured}} to log each command run. When a user {{attempts to}} invoke sudo without being {{listed in the}} configuration file, an exception indication is presented to the user indicating that the attempt has been recorded. The root user will be alerted via mail and an entry is recorded in the <b>system</b> <b>log.</b>|$|E
30|$|We {{propose a}} novel anti-malware {{system based on}} {{behavior}} profiling called Andro-profiler. We classify malware by exploiting the behavior profiling extracted from integrated <b>system</b> <b>logs.</b> Our method captures the behavior profiling by converting integrated <b>system</b> <b>logs</b> into human-readable contexts, which helps analysts analyze malware intuitively.|$|R
30|$|To {{overcome}} the drawbacks in previous methods, we propose a feature-rich anti-malware {{system based on}} behavior profiling called Andro-profiler. Our proposed behavior profiling system comprises mobile devices and a remote server to facilitate profiling, and adopts profiling method in the malware analysis domain. We exploit system calls, including their arguments provided by Loadable Kernel Module (LKM) and <b>system</b> <b>logs</b> (e.g., SMS, call, and network I/O) provided by Droidbox (2011) as feature vectors for malware characterization. We define system calls and <b>system</b> <b>logs</b> as integrated <b>system</b> <b>logs</b> from which we directly infer behavior patterns representation using the concept of behavior profiling of Bayer et al. (2009). We assume that: (a) malware samples have unique malicious behavior patterns, (b) malicious behavior is determined by system calls, and (c) such system call set has influence {{on the behavior of}} the program (malware). We prepare representative behavior profile for each malware family represented by integrated <b>system</b> <b>logs</b> including <b>system</b> calls, their arguments, and <b>system</b> <b>logs</b> of Droidbox—an analysis system we utilize in this work. We construct the behavior profile of each malware sample through its integrated <b>system</b> <b>logs</b> by executing it on an emulator. Then, by comparing the behavior profiles across samples, we can detect and classify malware samples into related families.|$|R
5000|$|Analyzing <b>system</b> <b>logs</b> and {{identifying}} potential issues with computer systems.|$|R
2500|$|Microsoft SQL Server {{also allows}} {{user-defined}} composite types (UDTs) {{to be defined}} and used. It also makes server statistics available as virtual tables and views (called Dynamic Management Views or DMVs). In addition to tables, a database can also contain other objects including views, stored procedures, indexes and constraints, along with a transaction log. A SQL Server database can contain a maximum of 231 objects, and can span multiple OS-level files with a maximum file size of 260 bytes (1 exabyte). The data in the database are stored in primary data files with an extension [...]mdf. Secondary data files, identified with a [...]ndf extension, are used to allow the data of a single database to be spread across more than one file, and optionally across more than one file <b>system.</b> <b>Log</b> files are identified with the [...]ldf extension.|$|E
50|$|<b>System</b> <b>Log</b> - The <b>system</b> <b>log</b> stores {{information}} about errors and messages generated by hardware, input/output operations, tasks, and user programs on two files and an optional specified device.|$|E
50|$|Diagnostic Support - The system {{supports}} online diagnostics that operate concurrently with program execution and <b>system</b> <b>log</b> analysis tasks.|$|E
5000|$|Logging - Application and <b>system</b> <b>logging,</b> {{filtering}} {{and logging}} strategies ...|$|R
50|$|The logs can be {{used for}} {{forensics}} to find out why programs or systems may have failed, or for detecting attempts to compromise <b>system</b> security. <b>System</b> <b>logs</b> are automatically closed after a system-settable period and a new one opened. <b>System</b> <b>logs</b> contain a huge amount of information, which can be filtered and analyzed with programs such as LOGANALYZER.|$|R
5000|$|Syslog server for {{receiving}} and cataloging the <b>system</b> <b>logs</b> {{produced by the}} remote hosts ...|$|R
50|$|Generally {{describes}} {{data files}} {{that have a}} dynamic or non-relational semantic structure (e.g. documents,XML,JSON,Device or <b>System</b> <b>Log</b> output,Sensor Output).|$|E
5000|$|Adds Group {{policies}} to control peer caching, download times, {{and the number}} of jobs and files download. BITS 3.0 also writes diagnostic and troubleshooting events to the <b>system</b> <b>log</b> which can be viewed in Event Viewer.|$|E
50|$|The Connecticut Forest & Park Association (CFPA) {{offers the}} Blue Trails Challenge. Hike {{any of the}} trails in the Blue-Blazed Hiking Trail <b>System,</b> <b>log</b> your miles, and earn prizes. There are three {{categories}} (200, 400, and 800 miles).|$|E
30|$|Disclose {{compliance}} and security safeguards to independent auditors, including security policies, changes, application and <b>system</b> <b>logs,</b> and operations.|$|R
5000|$|Security system (complete with <b>system</b> <b>logs</b> {{that can}} be {{provided}} to employers in order to guarantee work attendance).|$|R
40|$|SALSA {{examines}} <b>system</b> <b>logs</b> {{to derive}} state-machine {{views of the}} sytem’s execution, along with controlflow, data-flow models and related statistics. Exploiting SALSA’s derived views and statistics, we can effectively construct higher-level useful analyses. We demonstrate SALSA’s approach by analyzing <b>system</b> <b>logs</b> generated in a Hadoop cluster, and then illustrate SALSA’s value by developing visualization and failure-diagnosis techniques, for three different Hadoop workloads, based on our derived state-machine views and statistics. ...|$|R
50|$|Event logging: {{regardless}} of the event type, a good practice should be to record the event and the actions taken. The event can be logged as an Event Record {{or it can be}} left as an entry in the <b>system</b> <b>log</b> of the device.|$|E
5000|$|... sudo may be {{configured}} to log each command run. When a user {{attempts to}} invoke sudo without being {{listed in the}} configuration file, an exception indication is presented to the user indicating that the attempt has been recorded. The root user will be alerted via mail and an entry is recorded in the <b>system</b> <b>log.</b>|$|E
50|$|However, this {{transfer}} method overlooks certain {{considerations that}} a deployed application would require: it lacks security checks {{to verify that}} the current user has the authorization to perform this operation; a database transaction should encapsulate the operation {{in order to prevent}} accidental data loss; for diagnostics, the operation should be logged to the <b>system</b> <b>log,</b> etc.|$|E
40|$|Abstract—Understanding the {{behaviors}} of a software system {{is very important for}} performing daily system maintenance tasks. In practice, one way to gain knowledge about the runtime behavior of a system is to manually analyze <b>system</b> <b>logs</b> collected during the system executions. With the increasing scale and complexity of software systems, it has become challenging for system operators to manually analyze <b>system</b> <b>logs.</b> To address these challenges, in this paper, we propose a new approach for contextual analysis of <b>system</b> <b>logs</b> for understanding a system’s behaviors. In particular, we first use execution patterns to represent execution structures reflected by a sequence of <b>system</b> <b>logs,</b> and propose an algorithm to mine execution patterns from the program logs. The mined execution patterns correspond to different execution paths of the system. Based on these execution patterns, our approach further learns essential contextual factors (e. g., the occurrences of specific program logs with specific parameter values) that cause a specific branch or path to be executed by the system. The mining and learning results can help system operators to understand a software system’s runtime execution logic and behaviors during various tasks such as system problem diagnosis. We demonstrate the feasibility of our approach upon two real-world software systems (Hadoop and Ethereal). Index Terms—Contextual Analysis, understanding <b>system</b> behaviors, <b>log</b> analysis...|$|R
30|$|The Collection and Normalization {{layer is}} linked to the event sources: IDSs, firewalls, <b>system</b> <b>logs,</b> SNMP traps, and so on.|$|R
5000|$|Monitoring of host {{resources}} (processor load, disk usage, <b>system</b> <b>logs)</b> on {{a majority}} of network operating systems, including Microsoft Windows ...|$|R
50|$|The digital {{forensics}} {{tool set}} {{is used to}} perform analysis of file systems, new media types, new file types and file system metadata. The tools can search for particular patterns in the files allowing it to target significant files or usage profiles. It can, for instance, look for common files using hash functions and also deconstruct the data structures of the important operating <b>system</b> <b>log</b> files.|$|E
50|$|The System Display and Search Facility (SDSF) {{feature of}} IBM {{mainframes}} running z/OS allows users and administrators {{to be able}} to view and control various aspects of the mainframe's operation and system resources. Batch job output, status of running Unix processes, system information, workload scheduling, external device monitoring such as printers and initiators. SDSF is primarily used to access the batch and <b>system</b> <b>log</b> files and dumps.|$|E
50|$|Although many Operating Systems are now {{immune from}} {{being used in}} this attack, Some popular systems are still vulnerable; making the idle scan still very effective. Once a {{successful}} scan is completed there is {{no trace of the}} attacker's IP address on the target's firewall or Intrusion-detection <b>system</b> <b>log.</b> Another useful possibility is the chance of by-passing a firewall because you are scanning the target from the zombie's computer, which might have extra rights than the attacker's.|$|E
40|$|Filled with {{valuable}} data such as transactions, {{records and}} confidential information, <b>system</b> <b>logs</b> are lucrative targets for attack. Most computer <b>systems</b> use simple <b>logging</b> schemes that offer no protection after compromise. Various schemes {{have been proposed}} to strengthen <b>logging</b> <b>systems</b> by allowing verification of log integrity, protecting the confidentiality of the contents, and securely relocating <b>logs</b> on remote <b>systems.</b> Such <b>logging</b> <b>systems</b> increase overall system security by preventing certain attacks on the logs and providing accuracy guarantees for post-attack forensics. This paper summarizes the existing proposals in Secure Audit Logging, presents unaddressed problems in these proposals, and offers suggestions to enhance Secure Audit Log technology...|$|R
50|$|LOIC {{attacks are}} easily {{identified}} in <b>system</b> <b>logs,</b> and the attack can be tracked {{down to the}} IP addresses used at the attack.|$|R
5000|$|Monitoring of host {{resources}} (processor load, disk usage, <b>system</b> <b>logs)</b> on {{a majority}} of network operating systems, including Microsoft Windows, using monitoring agents.|$|R
5000|$|Windows XP {{includes}} a Shutdown Event Tracker (disabled by default) which when enabled from Group Policy allows administrators to document shutdown reasons {{and analyze the}} shutdown logs stored in the <b>System</b> <b>log</b> over time to {{develop an understanding of}} the cause for most shutdowns. Administrators can choose from a predefined set of reasons or enter their own reasons. Shutdown Event Tracker also takes a system state snapshot just before each shutdown to identify usage of system resources.|$|E
50|$|Four {{types of}} log streams are specified: alarm (ITU X.733 and ITU X.736 based log records), {{notification}} (ITU X.730 and ITU X.731 based log records), system and application. The application type {{is used by}} applications to define application-specific log streams. There is exactly one predefined log stream {{for each of the}} alarm, notification, and <b>system</b> <b>log</b> stream types in an SA Forum cluster. User applications are allowed to use any of the predefined streams or create new application-specific log streams.|$|E
50|$|A {{host-based}} IDS monitors all {{or parts}} of the dynamic behavior {{and the state of}} a computer system. Besides such activities as dynamically inspecting network packets targeted at this specific host (optional component with most software solutions commercially available), a HIDS might detect which program accesses what resources and discover that, for example, a word-processor has suddenly and inexplicably started modifying the system password database. Similarly a HIDS might look at the state of a system, its stored information, whether in RAM, in the file <b>system,</b> <b>log</b> files or elsewhere; and check that the contents of these appear as expected, e.g. have not been changed by intruders.|$|E
5000|$|Multiple users. A {{conventional}} database {{needed to}} support more than one user or <b>system</b> <b>logged</b> into the same data at the same time.|$|R
50|$|Logging exemplifies a {{crosscutting}} {{concern because}} a logging strategy necessarily affects every logged {{part of the}} <b>system.</b> <b>Logging</b> thereby crosscuts all logged classes and methods.|$|R
50|$|CUPS 1.2 {{and later}} provide a revamped web {{interface}} which features improved readability and design, support for automatically discovered printers, {{and a better}} access to <b>system</b> <b>logs</b> and advanced settings.|$|R
