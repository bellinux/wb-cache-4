0|93|Public
5000|$|Claims on {{international}} financial institutions resulting from repurchase agreements,sale and buy <b>back</b> <b>transactions</b> and securities lending agreements in the debt securities; ...|$|R
25|$|On November 19, 2010, Cerberus and Drago Capital {{acquired}} {{a real estate}} portfolio of 97 bank branches from Spain’s fourth largest financial group, Caja Madrid, in a 25-year lease <b>back</b> <b>transaction.</b>|$|R
50|$|Transactions {{can either}} be {{controlled}} using SQL or API calls. It is recommended to use API calls for enabling and disabling the auto commit mode and for committing and rolling <b>back</b> <b>transactions.</b>|$|R
5000|$|Riskified’s {{technology}} uses behavioral analysis, elastic linking, proxy detection, {{and machine}} learning {{to detect and}} prevent fraud. [...] Riskified <b>backs</b> <b>transactions</b> approved by its technology with a chargeback 100% money-back guarantee {{in the event of}} fraud.|$|R
50|$|TSX enables optimistic {{execution}} of transactional code regions. The hardware monitors multiple threads for conflicting memory accesses, while aborting and rolling <b>back</b> <b>transactions</b> that cannot be successfully completed. Mechanisms are provided for software {{to detect and}} handle failed transactions.|$|R
2500|$|Invocation and {{termination}} (committing or rolling <b>back)</b> of <b>transactions</b> ...|$|R
50|$|In October 1997, {{the black}} {{empowerment}} group Hosken Consolidated Investments (HCI) acquired 20% interest in Softline. In a <b>back</b> to <b>back</b> <b>transaction,</b> Softline acquired 60% of US based SVI Holdings Inc., for R150 million. This transaction marked Softline's entry into international markets. At this time, SVI had operations {{based in the}} USA and Australia.|$|R
50|$|Abort Record notes a {{decision}} to abort and hence roll <b>back</b> a <b>transaction.</b>|$|R
25|$|It is {{possible}} to recover data by rolling <b>back</b> entire <b>transactions</b> {{at the time of}} importing the zpool.|$|R
50|$|The BBL on each machine {{monitors}} {{the state of}} all servers and can automatically restart failed servers. It can also detect hung servers and kill/restart them as required. The BRIDGE process in a clustered environment monitors to BBL, {{so there are no}} single points of failure. Any transactions that are affected by a server or machine failure and that have not completed the prepare phase are rolled <b>back.</b> <b>Transactions</b> that have completed the prepare phase but not the commit phase will be committed as part of the Tuxedo boot sequence.|$|R
5000|$|Where to use pessimistic locking: this {{is mainly}} used in environments where data-contention (the degree of users {{request to the}} {{database}} system at any one time) is heavy; where the cost of protecting data through locks {{is less than the}} cost of rolling <b>back</b> <b>transactions,</b> if concurrency conflicts occur. Pessimistic concurrency is best implemented when lock times will be short, as in programmatic processing of records. Pessimistic concurrency requires a persistent connection to the database and is not a scalable option when users are interacting with data, because records might be locked for relatively large periods of time. It is not appropriate for use in Web application development.|$|R
5000|$|<b>Back</b> office <b>transaction</b> process {{management}} for loans or credit card portfolios, including custody services, fraud mitigation and detection, regulatory and program compliance, portfolio analytics, reporting, conversions, management of technology platforms, interface for customer data and custom development.|$|R
50|$|To ensure correctness, a DBMS usually {{guarantees}} that only serializable transaction schedules are generated, unless serializability is intentionally relaxed to increase performance, {{but only in}} cases where application correctness is not harmed. For maintaining correctness in cases of failed (aborted) transactions (which can always happen for many reasons) schedules also {{need to have the}} recoverability (from abort) property. A DBMS also {{guarantees that}} no effect of committed transactions is lost, and no effect of aborted (rolled <b>back)</b> <b>transactions</b> remains in the related database. Overall transaction characterization is usually summarized by the ACID rules below. As databases have become distributed, or needed to cooperate in distributed environments (e.g., Federated databases in the early 1990, and Cloud computing currently), the effective distribution of concurrency control mechanisms has received special attention.|$|R
50|$|As {{a result}} of this, failure to detect errors and roll <b>back</b> the {{enclosing}} <b>transaction</b> may cause failures of isolation and consistency.|$|R
30|$|Such a {{restructuring}} can for example be argued {{according to the}} extensive literature dating <b>back</b> to Coase’s <b>transaction</b> cost theory [18] (theory of the firm).|$|R
5000|$|Example of a tagged before hookBefore('@ATM') do |scenario| # Ruby codeendHooks {{are often}} used to {{maintain}} database state, typically by cleaning up prior to running a scenario. It is also possible to start and roll <b>back</b> a <b>transaction</b> using [...] and [...] hooks, and many Cucumber extensions provide an [...] tag for such a purpose.|$|R
5000|$|Here the [...] {{function}} {{has been}} used, which will roll <b>back</b> a <b>transaction,</b> {{and try it}} again. Retrying in STM is smart in that it won't try to run the transaction again until one of the variables it references during the transaction has been modified by some other transactional code. This makes the STM monad quite efficient.|$|R
40|$|This study {{utilizes}} {{a sample}} of private equity backed acquisitions to test whether certain factors, evaluated and quantified on the date of transaction completion, serve as indicators of future transaction bankruptcy. The results of this paper suggest that the effective federal funds rate is significantly and positively correlated with the bankruptcy of private equity <b>backed</b> <b>transactions.</b> Other measured factors specific to the private equity sponsor, the target firm in the acquisition and {{the characteristics of the}} transaction are found to be insignificant. Analysis on the influence of these factors is performed using two types of binary-response models, which predict the likelihood of the occurrence of bankruptcy, and a matched sample model that tests for the difference of means between a non-bankrupt transaction group and a bankrupt transaction group. Limitations in the availability of data derived from the private nature of the industry resulted in a limited sample size of 259 transaction...|$|R
40|$|This paper {{analyses}} {{the requirements}} of performing parallel transaction-oriented simulations with a special focus on the space-parallel approach and discrete event simulation synchronisation algorithms that are suitable for transaction-oriented simulation and the target environment of Ad Hoc Grids. To demonstrate the findings a Java-based parallel transaction-oriented simulator for the simulation language GPSS/H is implemented {{on the basis of}} the most promising Shock Resistant Time Warp synchronisation algorithm and using the Grid framework ProActive. The validation of this parallel simulator shows that the Shock Resistant Time Warp algorithm can successfully reduce the number of rolled <b>back</b> <b>Transaction</b> moves but it also reveals circumstances in which the Shock Resistant Time Warp algorithm can be outperformed by the normal Time Warp algorithm. The conclusion of this paper suggests possible improvements to the Shock Resistant Time Warp algorithm to avoid such problems. Comment: 6 pages, condensed research paper of my thesis with the same titl...|$|R
50|$|The aim of PoAs was {{to allow}} replicable {{projects}} with low and physically spread Greenhouse Gas reductions into the CDM. This {{type of project}} is often linked to higher sustainability benefits, but {{are too small to}} pay <b>back</b> the <b>transaction</b> cost involved in the CDM process. It was expected to allow African countries a higher participation in the CDM in particular.|$|R
40|$|Parallelization of simulation, {{grid and}} cluster computing, {{reliable}} parallel and distributed algorithms. In this paper we analyse {{the requirements of}} performing parallel transaction-oriented simulations within loosely coupled systems like ad hoc grids. We focus especially on the space-parallel approach to parallel simulation and on discrete event synchronisation algorithms that are suitable for transaction-oriented simulation and the target environment of ad hoc grids. To demonstrate our findings, a Java-based parallel simulator for the transaction-oriented language GPSS/H is implemented {{on the basis of}} the most promising shock-resistant Time Warp (SRTW) synchronisation algorithm and using the grid framework ProActive. The analysis of our parallel simulator shows that the SRTW algorithm can successfully reduce the number of rolled <b>back</b> <b>transaction</b> moves but it also reveals circumstances in which the SRTW algorithm can be outperformed by the normal Time Warp algorithm. Finally, possible improvements to the SRTW algorithm, based on experiments using the Grid’ 5000 platform, are proposed in order to avoid such problems. 1...|$|R
40|$|This paper {{analyses}} {{the possibilities}} of performing parallel transaction-oriented simulations with a special focus on the space-parallel approach and discrete event simulation synchronisation algorithms that are suitable for transaction-oriented simulation and the target environment of Ad Hoc Grids. To demonstrate the findings a Java-based parallel transaction-oriented simulator for the simulation language GPSS/H is implemented {{on the basis of}} the promising Shock Resistant Time Warp synchronisation algorithm and using the Grid framework ProActive. The validation of this parallel simulator shows that the Shock Resistant Time Warp algorithm can successfully reduce the number of rolled <b>back</b> <b>Transaction</b> moves but it also reveals circumstances in which the Shock Resistant Time Warp algorithm can be outperformed by the normal Time Warp algorithm. The conclusion of this paper suggests possible improvements to the Shock Resistant Time Warp algorithm to avoid such problems. Comment: 101 pages (plus 131 appendix), 23 figures, 11 tables, MSc thesis for degree in Advanced Computer Science at the Westminster University, Londo...|$|R
25|$|In April 2012, the Mint {{announced}} that it was developing MintChip, a digital currency to allow anonymous <b>transactions</b> <b>backed</b> by the Government of Canada and denominated in a variety of currencies.|$|R
50|$|The centre changed {{ownership}} in 2015, when Precision Group acquired the property for $74 million from Morgan Stanley's Arena Investment Management. The Bank of China provided financial <b>backing</b> for the <b>transaction.</b>|$|R
50|$|In April 2012, the Mint {{announced}} that it was developing MintChip, a digital currency to allow anonymous <b>transactions</b> <b>backed</b> by the Government of Canada and denominated in a variety of currencies.|$|R
40|$|We {{show that}} {{previous}} algorithmic and scheduling work concerning {{the use of}} lock-free objects in hard real-time systems can be extended to support real-time transactions on memory-resident data. Using our approach, transactions are not susceptible to priority inversion or deadlock, do not require complicated mechanisms for data-logging or for rolling <b>back</b> aborted <b>transactions,</b> and are implemented as library routines that require no special kernel support. ...|$|R
50|$|An {{attempted}} {{takeover bid}} of Carbacid Investments by BOC Group was aborted after the capital markets regulator declined {{to endorse the}} deal. In May 2006, the CMA argued that the latter had not met all the terms it had stated in an offer to Carbacid shareholders. The critical condition in the deal to warrant the takeover and subsequent delisting of Carbacid from the NSE was that at least 80 per cent of Carbacid shareholders had to <b>back</b> the takeover <b>transaction,</b> but only owners holding 71.0 per cent <b>backed</b> the <b>transaction.</b> Ironically, a ruling by the Capital Markets Tribunal okayed the takeover forcing the CMA to appeal against the ruling. Mr Ntalami said {{the approval of the}} takeover deal was likely to set a bad precedent that would plunge future takeovers of listed companies into chaos.|$|R
40|$|In {{this paper}} we analyse the {{requirements}} of performing parallel transaction-oriented simulations within loosely coupled systems like ad hoc grids. We focus especially on the space-parallel approach to parallel simulation and on discrete event synchronisation algorithms that are suitable for transaction-oriented simulation and the target environment of ad hoc grids. To demonstrate our findings, a Java-based parallel simulator for the transaction-oriented language GPSS/H is implemented {{on the basis of}} the most promising shock-resistant Time Warp (SRTW) synchronisation algorithm and using the grid framework ProActive. The analysis of our parallel simulator, based on experiments using the Grid 5000 platform, shows that the SRTW algorithm can successfully reduce the number of rolled <b>back</b> <b>transaction</b> moves but it also reveals circumstances in which the SRTW algorithm can be outperformed by the normal Time Warp algorithm. Finally, possible improvements to the SRTW algorithm are proposed in order to avoid such problems. Comment: 7 pages, 6 figures, 1 tables, Proceedings of the 2008 High Performance Computing and Simulation Conference (HPCS 2008), 3 - 6 June 2008, Nicosia, Cyprus. pp. 38 - 44; [URL]...|$|R
40|$|We {{evaluate}} the performance impact {{of two different}} write [...] buffer configurations (one word per buffer entry and one block per buffer entry) and two different write [...] policies (write [...] through and write [...] back), when using the partial block invalidation coherence mechanism [3] in a shared [...] memory multiprocessor. Using an execution [...] driven simulator, {{we find that the}} one word per entry buffer configuration with a write [...] back policy is preferred for small write [...] buffer sizes when both buffers have an equal number of data words, and when they have equal hardware cost. Furthermore, when partial block invalidation is supported, we find that a write [...] through policy is preferred over a write [...] back policy due to its simpler cache hit detection mechanism, its elimination of write [...] <b>back</b> <b>transactions,</b> and its competitive performance when the write [...] buffer is relatively large. Keywords: cache coherence, write [...] buffer, write [...] merging, write [...] through, shared [...] memory multiprocessors 1 Introduction O [...] ...|$|R
50|$|In {{database}} technologies, a rollback is {{an operation}} which returns the database to some previous state. Rollbacks {{are important for}} database integrity, because they mean that the database can be restored to a clean copy even after erroneous operations are performed. They are crucial for recovering from database server crashes; by rolling <b>back</b> any <b>transaction</b> which was active {{at the time of}} the crash, the database is restored to a consistent state.|$|R
60|$|He {{read out}} {{particulars}} {{of the money}} borrowed, with {{the high rate of}} interest charged, and traced the <b>transactions</b> <b>back</b> to Staffer through other hands. It was a telling accusation and Andrew thought Staffer was surprised and alarmed by Mackellar's knowledge.|$|R
50|$|The JTA is {{modelled}} on the X/Open XA architecture, but {{it defines}} two different APIs for demarcating transaction boundaries. It distinguishes between an application server {{such as an}} EJB server and an application component. It provides an interface, , {{that is used by}} the application server itself to begin, commit and roll <b>back</b> the <b>transactions.</b> It provides a different interface, the , that is used by general client code such as a servlet or an EJB to manage the transactions.|$|R
50|$|In April 2006, {{creditors}} of Refco sued BAWAG {{for over}} $1.3 billion, {{alleging that the}} bank had colluded to hide Bennett's fraudulent <b>transactions</b> <b>back</b> to at least 2000, and that the bank owned far more of Refco than it had ever revealed in regulatory filings.|$|R
40|$|AbstractIt {{is often}} {{necessary}} to ensure that database transactions preserve integrity constraints that specify valid database states. While {{it is possible to}} monitor for violations of constraints at run-time, rolling <b>back</b> <b>transactions</b> when violations are detected, it is preferable to verify correctness statically,beforetransactions are executed. This can be accomplished if we can verify transaction safety with respect to a set of constraints by means of calculatingweakest preconditions. We study properties of weakest preconditions for a number of transaction and specification languages. We show that some simple transactions do not admit weakest preconditions over first-order logic and some of its extensions such as first-order logic with counting and monadicΣ 11. We also show that the class of transactions that admit weakest preconditions over first-order logic cannot be captured by any transaction language. We consider a strong local form of verifiability, and show that it is different from the general form. We define robustly verifiable transactions as those that can be statically analyzed regardless of extensions to the signature of the specification language, and we show that the class of robustly verifiable transactions over first-order logic is exactly the class of transactions that admit the local form of verifiability. We discuss the implications of these results for the design of verifiable transaction languages...|$|R
40|$|We {{consider}} {{recovery from}} malicious but committed transactions. Traditional recovery mechanisms {{do not address}} this problem, except for complete rollbacks, which undo the work of good transactions as well as malicious ones, and compensating transactions, whose utility depends on application semantics. We develop an algorithm that rewrites execution histories {{for the purpose of}} <b>backing</b> out malicious <b>transactions.</b> Good transactions that are affected, directly or indirectly, by malicious transactions complicate the process of <b>backing</b> out undesirable <b>transactions.</b> We show that the prefix of a rewritten history produced by the algorithm serializes exactly the set of unaffected good transactions. The suffix of the rewritten history includes special state information to describe affected good transactions as well as malicious transactions. We describe techniques that can extract additional good transactions from this latter part of a rewritten history. The latter processing saves more [...] ...|$|R
2500|$|Recordset: A {{recordset}} is a {{group of}} records, and can either come from a base table or {{as the result of a}} query to the table. The RecordSet object contains a Fields collection and a Properties collection. The Fields collection is a set of Field objects, which are the corresponding columns in the table. The Properties collection is a set of Property objects, which defines a particular functionality of an OLE DB provider. The RecordSet has numerous methods and properties for examining the data that exists within it. Records can be updated in the recordset by changing the values in the record and then calling on the Update or UpdateBatch method. Adding new records is performed through the AddNew function and then by calling on the Update or UpdateBatch method. Records are also deleted in the recordset with the Delete method and then by calling on the Update method. However, if for some reason the deletion cannot occur, such as because of violations in referential integrity, then the recordset will remain in edit mode after the call to the Update method. The programmer must explicitly call on the CancelUpdate function to cancel the update. Additionally, ADO can roll <b>back</b> <b>transactions</b> (if this is supported) and cancel batch updates. Recordsets can also be updated in one of three ways: via an immediate update, via a batch update, or through the use of transactions: ...|$|R
