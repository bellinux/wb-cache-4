28|165|Public
50|$|After {{he joined}} {{the faculty of the}} University of Washington, Samudrala's Computational Biology Research Group {{developed}} a series of algorithms and web <b>server</b> <b>modules</b> to predict protein structure, function, and interactions known as Protinfo.|$|E
50|$|Like CTI APIs (see above), most CTI servers {{operate under}} only one {{operating}} system. By contrast, CT Connect has historically included client and <b>server</b> <b>modules</b> that operate under {{a range of}} popular operating systems including the Unix and Microsoft Windows families.|$|E
50|$|Internally, 3+Share had {{a network}} stack, file and print <b>server</b> <b>modules,</b> disk caching, user {{handling}} and more, all running simultaneously inside the DOS memory space. Because {{they were not}} limited by the PC memory map, 3+Share could support a megabyte or so of flat memory, breaking the x86 PC's 640 kByte barrier. This was {{a large amount of}} RAM for the time.|$|E
50|$|Apache Wink is {{composed}} of a <b>Server</b> <b>module</b> and a Client <b>module.</b> The <b>Server</b> <b>module</b> is an implementation of the JAX-RS (JSR-311) specification along with additional features to facilitate the development of RESTful Web services. The Client module is a Java-based framework that provides functionality for communicating with RESTful Web services.|$|R
5000|$|Apache Wink, Apache Software Foundation Incubator project, the <b>server</b> <b>module</b> {{implements}} JAX-RS ...|$|R
5000|$|The modules property, that {{exposes the}} <b>server's</b> <b>modules</b> namespace: [...] or [...]|$|R
5000|$|... 7.00 also {{introduced}} the Manifold Image Server interface API, allowing users to create modules that enable usage within Manifold of image servers such as Virtual Earth, Google Maps, Yahoo, Ask and others. Open source image <b>server</b> <b>modules</b> {{have been published}} by the user community in both 32-bit and 64-bit versions that enable automatic fetching and tiling of either satellite images or street map images from various image servers.|$|E
50|$|In computing, {{the form}} {{factor is the}} {{specification}} of a motherboard - the dimensions, power supply type, location of mounting holes, number of ports on the back panel, etc. Specifically, in the IBM PC compatible industry, standard form factors ensure that parts are interchangeable across competing vendors and generations of technology, while in enterprise computing, form factors ensure that <b>server</b> <b>modules</b> fit into existing rackmount systems. Traditionally, the most significant specification is for that of the motherboard, which generally dictates the overall size of the case. Small form factors have been developed and implemented.|$|E
5000|$|...Remote browser based {{connections}} are possible using Netop Portal, {{which is a}} hosted service for easy connections over the internet. The cross-platform capabilities {{make it possible to}} access the most common operating systems from any operating system of the same selection like Windows, Windows Mobile, Windows CE, Android, iOS, Symbian, Linux, Mac, eComStation, Toshiba 4690 and more via LAN, WAN or internet. Connections over the internet are possible to both pre-installed clients as well as on-demand clients. Client modules as well as <b>server</b> <b>modules</b> may run in a physical or virtual environment ...|$|E
50|$|This slave <b>server</b> <b>module,</b> {{introduced}} in OVD 4, allows publishing of Web applications alongside Linux and Windows application.|$|R
5000|$|The <b>Server</b> <b>module</b> (LiteManager Server): {{needs to}} be {{installed}} on the computer which you want to access remotely.|$|R
40|$|A network {{management}} system has SNMP agents distributed at {{one or more}} sites, an input output module at each site, and a <b>server</b> <b>module</b> located at a selected site for communicating with input output modules, {{each of which is}} configured for both SNMP and HNMP communications. The <b>server</b> <b>module</b> is configured exclusively for HNMP communications, and it communicates with each input output module according to the HNMP. Non-iconified, informationally complete views are provided of network elements to aid in {{network management}}...|$|R
5000|$|By around 1995, and {{coincidental}} with IBM´s renewed marketing {{push for}} its 32-bit OS/2 Warp OS, {{both as a}} desktop client and as a LAN server (OS/2 Warp Server), NetWare for OS/2 began receiving some good press coverage. [...] "NetWare 4.1 for OS/2" [...] allowed to run Novell´s network stack and <b>server</b> <b>modules</b> on top of IBM´s 32-bit kernel and network stack. It was basically NetWare 4.x running as a service on top of OS/2. It was compatible with third party client and server utilities and NetWare Loadable Moduleshttp://www.informationweek.com/537/37olnt2.htm.|$|E
5000|$|In 1999, Forté Software {{came out}} with a version of Forte based on java instead of TOOL, named SynerJ, also {{referred}} to as [...] "Forté for Java". As with the original TOOL-based products this consisted of a development IDE, a code repository, and a runtime environment. This new java product was of interest to Sun Microsystems who bought out the company. The TOOL-based listed above were bundled together and re-branded as Unified Development Server (UDS) and Integration Server (IS) under the IPlanet division. The <b>server</b> <b>modules</b> were later bundled together as Enterprise Application Integration (EAI).|$|E
5000|$|The {{original}} 3Server was a x86 {{computer that}} wasn't compatible with any ordinary PC {{based on an}} Intel 80186 CPU, running a special version of MS-DOS and 3Com's proprietary 3+Share network server software. This was a multitasking network server stack that ran on top of single-tasking DOS. Internally, it had a network stack, file and print <b>server</b> <b>modules,</b> disk caching, user handling and more, all running simultaneously inside the DOS memory space. Because they were not limited by the PC memory map, 3Servers could support 1 megabyte of flat memory, breaking the PC's 640 kB barrier. This was {{a large amount of}} RAM for the time.|$|E
5000|$|... #Caption: The Aquasar {{cooling system}} {{applied to a}} QS22 Blade <b>server</b> <b>module.</b> The two {{microchannel}} coolers at the center, are attached directly to the processors, allowing for unprecedented cooling efficiency.|$|R
5000|$|... mod_python is an Apache HTTP <b>Server</b> <b>module</b> that {{integrates}} the Python {{programming language}} with the server. It {{is intended to}} provide a Python language binding for the Apache HTTP Server.|$|R
50|$|NOIP {{program is}} {{designed}} for connecting the client <b>module</b> Viewer and <b>server</b> <b>module</b> <b>Server</b> by ID. The program is available free of charge and comes in a package along with the client side Viewer.|$|R
5000|$|Direct WiFi Control (DWiC) is an {{emerging}} technology for model railway control utilizing {{the concept of}} [...] "the internet of things". The availability of miniature web <b>server</b> <b>modules</b> in 2014 {{led to the formation}} of a DWiC Working group to explore the possibility of using this technology in model railways. WiFi technology is well established and proven. Although it is considerably more complex than any previous model railway control system it largely transparent to the user with tasks such as bi-directional communication being seamless. DWiC does not use any model rail specific items such as command stations and boosters and so is much lower in cost. This technology is also useful outside the model rail world as a DWiC controller could open a garage door or remotely turn on sprinklers. The web server/controller is similar to a DCC decoder in hardware and cost. The great advantage occurs on the client side where the [...] "throttle" [...] can be any WiFi device with a web browser. DWiC can run on DC, AC or DCC track power or a battery.|$|E
40|$|Consider a {{processor}} organization {{consisting of a}} number of client modules and <b>server</b> <b>modules,</b> like memory units and arithmetic-logic processing units. Suppose that these modules are interconnected with a single bus which is segmented {{in such a way that}} modules connected to a particular segment can communicate in parallel to the data transfer operations going on in the other segments. This is achieved by a control logic which is capable to reserve a continuous subsequence of the segments necessary to establish a path from the source to the target module. Given the frequency of data transfer operations between the modules, our task is to determine an efficient segmentation and segment-to-module assignment of this kind of computer organization. We consider several different optimization methods for the problem and demonstrate their use for sample cases...|$|E
40|$|The idea of {{the thesis}} was to design and {{implement}} a simple weather station, which would, independently of any other device, {{be able to send}} data into a local area (and with a suitable router setting also internet) network. The solution is split into two, sensory and <b>server,</b> <b>modules.</b> Modules operate independently of each other and exchange data over wireless RF link. The purpose of the sensory module is to capture the data and send it to server module. Server module implements a simple HTTP server. It can be accessed using any web browser. The thesis describes the tools, electronic components, their use and implementation. Furthermore, it describes operation, use and manufacture of both modules and web site. In the end, there is also a description of the testing process in real-world conditions. ...|$|E
5000|$|StrixDB: a {{commercial}} RDF graph store, SPARQL compliant with Lua API and Datalog inference capabilities. Could {{be used as}} httpd (Apache HTTP <b>Server)</b> <b>module</b> or standalone (although beta versions are under the Perl Artistic License 2.0).|$|R
5000|$|... mod_wsgi is an Apache HTTP <b>Server</b> <b>module</b> by Graham Dumpleton that {{provides}} a WSGI compliant interface for hosting Python based web applications under Apache. As of version 4.5.3, mod_wsgi supports Python 2 and 3 (starting from 2.6 and 3.2).|$|R
50|$|Map Viewer used a {{customized}} CGI <b>server</b> <b>module</b> written in Perl. Map images were generated in GIF format from two server side programs. MAP-WRITER created the raster {{images from the}} geographic database and RASTOGIF would convert the raster image into the GIF format.|$|R
40|$|Abstract ⎯ This paper {{describes}} a remote-experimentation project {{that is part}} of a virtual laboratory (VLab). The activity is organized around a spectrum analyzer and a function generator, as real devices mirrored into Web (Internet) nodes. A logically structured replica of the Advantest spectrum analyzer is realized on a LabVIEW platform, in a client-server approach. The application also integrates several other modules – as function generator control, chat, user authentication, and video broadcast of images from the device display. The corresponding <b>server</b> <b>modules</b> are distributed between the VLAB nodes in Politehnica University of Bucharest, Romania, and Arizona State University (ASU), U. S. A. Students from worldwide locations and enrolled in different programs with different on-the-subject knowledge levels can access the spectrum analyzer at ASU, while enjoying increased schedule freedom. Index Terms ⎯ client-server architecture, remote experiment, simulation, spectrum analyzer, virtual laboratories...|$|E
40|$|This paper {{reports on}} a first step towards the {{implementation}} of a framework for remote experimentation of electric machines ? the RemoteLabs platform. This project was focused on the development of two main modules: the user Web-based and the electric machines interfaces. The Web application provides the user with a front-end and interacts with the back-end ? the user and experiment persistent data. The electric machines interface is implemented as a distributed client server application where the clients, launched by the Web application, interact with the <b>server</b> <b>modules</b> located in platforms physically connected the electric machines drives. Users can register and authenticate, schedule, specify and run experiments and obtain results in the form of CSV, XML and PDF files. These functionalities were successfully tested with real data, but still without including the electric machines. This inclusion is part of another project scheduled to start soon...|$|E
40|$|Among the {{services}} {{to be first}} supported by B-ISDN will be connectionless data traffic particularly for the interconnection of MANs and LANs. The direct provision of a connectionless service in B-ISDN makes use of servers to supply the datagram routing function. An economical service realization which is adaptable to the constantly rising user demands, requires these servers to be expandable. But none of the conventional server architectures is truly scalable. This paper first determines an appropriate notion of scalability {{in the context of}} connectionless servers. Following, a new modular scaling principle is presented, that can be applied even to existing servers, independently of the particular AAL used. The key component of the architecture is a Packet Distribution Unit, that forwards the incoming packets from the network to the appropriate <b>server</b> <b>modules.</b> Thus, the expansion of a server requires only local configuration changes and is transparent to the other servers in the networ [...] ...|$|E
50|$|One of {{its many}} users is the OpenStreetMap project (OSM), which uses it in {{combination}} with an Apache Web <b>Server</b> <b>module</b> (mod_tile) and openstreetmap-carto style to render tiles {{that make up the}} OSM default layer. Mapnik is also used by CloudMade, MapQuest, and MapBox.|$|R
500|$|There are {{two primary}} ways for adding support for PHP to a web server {{as a native}} web <b>server</b> <b>module,</b> or as a CGI executable. [...] PHP has a direct <b>module</b> {{interface}} called <b>Server</b> Application Programming Interface (SAPI), which is supported by many web servers including Apache HTTP Server, Microsoft IIS, Netscape (now defunct) and iPlanet. [...] Some other web servers, such as OmniHTTPd, support the Internet Server Application Programming Interface (ISAPI), which is a Microsoft's web <b>server</b> <b>module</b> interface. [...] If PHP has no module support for a web server, it can always {{be used as a}} Common Gateway Interface (CGI) or FastCGI processor; in that case, the web server is configured to use PHP's CGI executable to process all requests to PHP files.|$|R
40|$|Abstract. An online {{monitoring}} method {{for the main}} drive system of rolling mill is studied in this paper. The monitoring objects are drive shaft torque, rolling force, and other related process signals of the rough rolling mill. A non-contact torque measurement method based on induction power supply was adopted, {{and this kind of}} power supply for sensors and transmitters can provide a long-term stable power supply, and make the system work continuously. The overall monitoring system includes signal acquisition module, network communication <b>module,</b> database <b>server</b> <b>module,</b> status monitoring and alarm module, signal processing and analysis <b>module,</b> and client <b>server</b> <b>module.</b> The realization of the monitoring system can help to prevent catastrophic damage and reduce additional costs due to unexpected downtime...|$|R
40|$|Sponsoring {{organization}} Title and subtitle A Home Automation Prototype (En prototyp för hemautomation) This master thesis {{concerns the}} current and future development {{in the area of}} intelligent houses and home automation. It also describes a system for home automation developed for this thesis. Key words in the design are dynamic behaviour, flexibility, transparency and adaptability. The prototype has been built with a central, Java based, server. To this <b>server,</b> <b>modules</b> handling different communication protocols can be connected at run time. To these modules, devices can connect over the specified communications protocols and register in the server, also at run time. Devices can be for control and supervision (computer or phone GUI), but also equipment that is to be controlled (lamps, ventilation, stereo) and equipment for notification (sensors). For communication, a message system has been developed. The server uses a MySQL database and also has support for building macros with extensive command and timer functionality. Finally, the system supports users and positioning using RFID...|$|E
30|$|Consider a {{processor}} organization {{consisting of a}} number of client modules and <b>server</b> <b>modules</b> (jointly called devices), like memory units and arithmetic-logic processing units. Suppose that these devices are interconnected with a bus which is segmented {{in such a way that}} devices connected to a particular segment can communicate in parallel to the data transfer operations going on in the other segments. This is achieved by a control logic which is able to reserve a continuous subsequence of the segments necessary to establish a path from the source to the target device. Given the frequency of data transfer operations between the devices, our task is to determine an efficient segmentation and segment-to-device assignment of this on-chip architecture. This task is formulated as an optimization problem which considers the amount of data transfer operations performed via the bus segments. The problem turns out to be NP hard but we propose efficient local search-based heuristics for it. The heuristics are applied to sample cases, and the outcome is an improved performance in terms of a shorter execution time.|$|E
40|$|Due to the {{character}} of the original source materials and the nature of batch digitization, quality control issues may be present in this document. Please report any quality issues you encounter to digital@library. tamu. edu, referencing the URI of the item. Includes bibliographical references: p. 39 - 42. This thesis presents a measurement-based dependability ics. study of a UNIX server. The event logs of a UNIX server are collected to form a dependability data basis. Message logs spanning approximately eleven months were collected for this study. The event log data are classified and categorized to calculate parameters such as MTBF and availability to characterize the dependability of the system. Component analysis is also performed to identify <b>server</b> <b>modules</b> that are prone to errors in the system. Next, the system error activity preceding each system failure is analyzed to identify error patterns which may be used to predict future failures. Lastly, the error/failure results of fault-injection experiments previously reported on computer systems are compared to the measurement data from the event logs...|$|E
50|$|There are {{two primary}} ways for adding support for PHP to a web server {{as a native}} web <b>server</b> <b>module,</b> or as a CGI executable. PHP has a direct <b>module</b> {{interface}} called <b>Server</b> Application Programming Interface (SAPI), which is supported by many web servers including Apache HTTP Server, Microsoft IIS, Netscape (now defunct) and iPlanet. Some other web servers, such as OmniHTTPd, support the Internet Server Application Programming Interface (ISAPI), which is a Microsoft's web <b>server</b> <b>module</b> interface. If PHP has no module support for a web server, it can always {{be used as a}} Common Gateway Interface (CGI) or FastCGI processor; in that case, the web server is configured to use PHP's CGI executable to process all requests to PHP files.|$|R
50|$|Software {{developers}} {{seeking to}} include telephone-related functions in their applications incorporate CT Connect software modules into their projects. The CT Connect <b>server</b> <b>module</b> must be installed {{on a computer}} that has a special CTI communication link to the telephone system. The CT Connect client module is installed on the same computer as the developer's application software. The client module presents an API for application telephone functions such as dialing a new call or generating an alert for an incoming call. The client module executes these requests by signaling them to the <b>server</b> <b>module,</b> which in turn requests the function from the telephone system. The client-server structure allows multiple applications running on multiple computers to share access to a single telephone system.|$|R
50|$|The SPARC T3 series servers {{include the}} T3-1B, a blade <b>server</b> <b>module</b> that {{fits into the}} Sun Blade 6000 system. All other T3 based servers are rack mounted systems. Subsequent T-Series server generations also include a blade server in the same Sun Blade 6000 form factor.|$|R
