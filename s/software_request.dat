3|150|Public
5000|$|... swask [...] - [...] run {{interactive}} <b>software</b> <b>request</b> {{scripts and}} store the responses {{for later use}} by the swinstall and swconfig files.|$|E
40|$|Ethernet network {{interfaces}} in commodity {{systems are}} designed {{with a focus on}} achieving high bandwidth at low CPU utilization, while often sacrificing latency. This approach is viable only if the high interface latency is still overwhelmingly dominated by <b>software</b> <b>request</b> pro-cessing times. However, recent efforts to lower software latency in request-response based systems, such as mem-cached and RAMCloud, have promoted network inter-face into a significant contributor to the overall latency. We present a low latency network interface design suit-able for request-response based applications. Evalua-tion on a prototype FPGA implementation has demon-strated that our design exhibits more than double la-tency improvements without a meaningful negative im-pact on either bandwidth or CPU power. We also inves-tigate latency-power tradeoffs between using interrupts and polling, as well as the effects of processor’s low power states. 1...|$|E
30|$|The good {{scaling of}} the gravity phase {{is due to}} the overlap of {{communication}} and computation, the improved tree walk algorithm using an interaction list, the <b>software</b> <b>request</b> cache, prefetching, and other optimizations. The time for domain decomposition also scales with the increase in number of cores. Table  1 shows, for the 12 billion particles at 512 K cores on Blue Waters, that domain decomposition takes on average 73 ms per step. At 128 K cores the domain decomposition is 9 times faster in comparison to the unoptimized version. This {{is due to the}} use of the adaptive technique to determine when to perform full domain decomposition. The tree build time also scales well and takes 34 ms at 512 K cores. At 128 K cores, the tree build is approximately 6 times faster than the unoptimized version. Similar trends are seen in the 24 billion particle simulation.|$|E
50|$|SBGrid {{monitors}} all software websites for updates and installs major {{software upgrades}} {{on a monthly}} basis. The SBGrid team also recompile existing software for newer releases of supported operating systems and respond to user bug reports and new <b>software</b> <b>requests.</b>|$|R
30|$|In the {{software}} part, we present the Arduino code and all <b>software</b> <b>requested</b> (PLX-DAQ Excel Macro and Arduino IDE) for the real-time virtual instrumentation system {{design and the}} guide to achieve this. Note that Arduino IDE and PLX-DAQ Excel Macro are both open source.|$|R
5000|$|Careware, {{where the}} <b>software</b> {{developer}} <b>requests</b> a donation to charity ...|$|R
5000|$|Main {{characteristics}} of the software, {{as stated in the}} <b>software</b> development <b>request,</b> are: ...|$|R
5000|$|The RSICC staff {{maintain}} an online software catalog at their website, which site visitors may browse (though no search functionality is provided). The software {{in the catalog}} cover {{a broad range of}} nuclear computational tools, providing in-depth coverage of radiation transport and safety topics for nuclear science and engineering, in support of modeling and simulation. Registered users may <b>request</b> <b>software</b> from the repository. With a few specific exceptions, a [...] "cost recovery fee" [...] is required to recoup the cost associated with RSICC operations before <b>software</b> <b>requests</b> are fulfilled.|$|R
40|$|The {{goal of the}} Real-time Outbreak and Disease Surveillance (RODS) Open Source Project is to {{accelerate}} deployment of computer-based syndromic surveillance. To this end, the project has released the RODS software under the GNU Gen-eral Public License and created an organizational structure to catalyze its development. This paper describes {{the design of the}} <b>software,</b> <b>requested</b> extensions, and the structure of the development effort...|$|R
5|$|A {{series of}} legal {{disputes}} between Reynolds and General Motors (GM) began in 2007. Through a GM program called the Integrated Dealership Management System (GMIDMS), Reynolds provided software to GM dealerships through GM. When Reynolds {{would not make}} changes to its <b>software</b> <b>requested</b> by GM, GM alleged it was a breach of contract. A settlement was reached in 2008, which ended Reynolds' participation in GM's program.|$|R
5000|$|... it.gruppen, the IT group, {{runs the}} student association's servers, {{maintains}} and develops their websites, develops <b>software</b> for <b>requested</b> projects, and helps {{the other groups}} with IT issues.|$|R
50|$|As {{the user}} base grew, {{so did the}} effort of {{maintenance}} and development. Finally, the author realized that {{he could no longer}} dedicate substantial amounts of time to the growing quantity of <b>software</b> enhancement <b>requests.</b>|$|R
40|$|The {{following}} {{article will}} have a look on methods for validation and verification of <b>software</b> <b>requested</b> for safety related systems by ISO 26262 (1) (or similar standards) and will point out how some dedicated tools from ETAS may help to fulfill and implement these. A brief introduction into the underlying technology will be given {{in order to discuss}} the aspects/use cases where these tools can be used either for simulation purpose or in combination with the final target. 2 Introduction to ISO 26262 ISO 26262 is the automotive derivative or variant of the IEC 61508 (an international standard) relating to the functional safety o...|$|R
40|$|Communication about {{requirements}} {{is often}} handled in issue tracking systems, {{especially in a}} distributed setting. As issue tracking systems also contain bug reports or programming tasks, the <b>software</b> feature <b>requests</b> of the users are often difficult to identify. This paper investigates natural language processing and machine learning features to detect <b>software</b> feature <b>requests</b> in natural language data of issue tracking systems. It compares traditional linguistic machine learning features, such as "bag of words", with more advanced features, such as subject-action-object, and evaluates combinations of machine learning features derived from the natural language and features taken from the issue tracking system meta-data. Our investigation shows that some combinations of machine learning features derived from natural language and the issue tracking system meta-data outperform traditional approaches. We show that issues or data fields (e. g. descriptions or comments), which contain <b>software</b> feature <b>requests,</b> can be identified reasonably well, but hardly the exact sentence. Finally, we show that the choice of machine learning algorithms should depend on the goal, e. g. maximization of the detection rate or balance between detection rate and precision. In addition, the paper contributes a double coded gold standard and an open-source implementation to further pursue this topic...|$|R
40|$|Change request {{management}} {{is the process}} that approves and schedules the change to ensure the correct level of notification and minimal user impact. Complexity level of this process would become complicated should software was distributed in many places. There are several techniques and tools have been produced to perform change request management. But most of these techniques do not give enough attention towards dynamic aspect of information management such as temporal base elements for the associated data. Therefore, this paper presents {{a new dimension to}} support <b>software</b> change <b>request</b> management. Temporal elements such as valid time and transaction time are the main attributes considered, to be inserted into the <b>software</b> change <b>request</b> management system database. By inserting these elements it would help the people involved in change request management to organize data and perform activity monitoring with more efficient...|$|R
50|$|When {{starting}} a new project CAM <b>software</b> <b>requests</b> a user to fill in measurements, these will usually be of the wall which the frescography is later mounted to. Once the project has been created the user may choose from a library of images which are categorized into themes and motives.The library will either be filled with content by the user himself, or the user can purchase a CAM software which is already filled by the manufacturer, the Dreamworlds Design Studio.The user creates designs by placing the motifs on the workspace. By giving the motifs layer attributes, {{it is possible to}} put image elements such as skies or oceans in the background and a beach or vegetation in the foreground. With additional options such as re-sizing and cropping individual motifs, a design gains depth and realistic proportions.|$|R
50|$|Companies with custom {{application}} software {{may also have}} an applications team {{who are responsible for}} the development of in-house software. The help desk may assign to the applications team such problems as finding <b>software</b> bugs. <b>Requests</b> for new features or information about the capabilities of in-house software that come through the help desk are also assigned to applications groups.|$|R
5000|$|A {{copy of the}} Weidner Multi-Lingual Word Processing <b>software</b> was <b>requested</b> by the German Government for the Siemens Corporation of Germany in September 1980 and was {{nicknamed the}} Siemens-Weidner Engine (originally English-German). This revolutionary multi-lingual word {{processing}} engine became foundational {{in the development of}} the Metal MT project according to John White of the Siemens Corporation.|$|R
40|$|International Telemetering Conference Proceedings / November 04 - 07, 1991 / Riviera Hotel and Convention Center, Las Vegas, NevadaOne of {{the most}} {{challenging}} technical problems {{in the development of a}} spacecraft telemetry simulation is the interface with a flight computer running real-world flight software. The ability of the simulation to satisfy flight <b>software</b> <b>requests</b> for telemetry data, and to load, mode, and control the flight software along with the simulation, can be constrained or degraded using conventional interface solutions. Telemetry dataflow architecture systems can be utilized to solve the interface problems with less constraints. This is an especially attractive solution in a telemetry simulation where the telemetry system can also be used to format and serialize spacecraft telemetry, and receive and preprocess commands. This paper discusses the concepts developed for such a system for a training simulation of the Orbital Maneuvering Vehicle for NASA at Johnson Space Center...|$|R
5000|$|The {{creation}} of the Mario character, Waluigi, {{can be attributed to}} Camelot <b>Software,</b> after Nintendo <b>requested</b> a [...] "Wario-like" [...] counterpart for Luigi during the development of Mario Tennis.|$|R
5000|$|A {{copy of the}} Weidner Multi-Lingual Word Processing <b>software</b> was <b>requested</b> by the German Government for the Siemens Corporation of Germany in September 1980 and was {{nicknamed the}} Siemens-Weidner Engine (originally English-German). This revolutionary multi-lingual word {{processing}} engine became foundational {{in the development of}} the Metal MT project according to John White of the Siemens Corporation. (The Deseret News, Friday, Aug. 22, 1980.) ...|$|R
5000|$|In tournament play, {{a player}} {{challenges}} by neutralizing the game clock and announcing, [...] "Challenge." [...] Both players must refer to word judge <b>software,</b> or <b>request</b> an adjudicator {{if one is}} unable to do so. Depending on the rules in play, there may be different consequences for a challenge. There are three common variations: double challenge, single challenge, and penalty challenge.|$|R
40|$|The {{design and}} {{implementation}} of mechanical domestic water meters in current industrial organization and intellectual properties have been registered as an invention {{to solve the problems}} of current meters. The device operation includes inquiry of printing, subscription connection and disconnection in an emergency. This system includes a software and hardware parts on the users and the control center connecting with two-way mobile phone. Central control software sends the message through the wireless telecommunication lines to the user’s <b>software,</b> <b>requesting</b> the desired information and also provides the commands needed to be sent through the same. The same information can also be submitted to the control center. Through the same way, some of advantages of this method are as follows: installing on existing meters, cheap cost of inquiry call meter, the possibility of declaring illegal manipulation to the control center, the exchange of information using information encoding, and manipulating digital meters applying minor changes...|$|R
25|$|Cross-site request forgery (CSRF/XSRF) {{is almost}} the {{opposite}} of XSS, in that rather than exploiting the user's trust in a site, the attacker (and his malicious page) exploits the site's trust in the client <b>software,</b> submitting <b>requests</b> that the site believes represent conscious and intentional actions of authenticated users. XSS vulnerabilities (even in other applications running on the same domain) allow attackers to bypass CSRF prevention efforts.|$|R
40|$|<b>Software</b> change <b>requests</b> {{are often}} {{formulated}} as requests to modify or {{to add a}} specific feature or concept. To implement these changes, the features or concepts must {{be located in the}} code. In this paper, we describe the scenarios of the feature and concept location. The scenarios utilize a computer-assisted search of software dependence graph. Scenarios are demonstrated by a case study of NCSA Mosaic source code...|$|R
5000|$|The {{computer}} {{receiving the}} HTTP request delivers it to web server <b>software</b> listening for <b>requests</b> on port 80. If the web server can fulfil the request it sends an HTTP response {{back to the}} browser indicating success:HTTP/1.0 200 OKContent-Type: text/html; charset=UTF-8 ...|$|R
25|$|The next {{iteration}} of SBML {{took two}} years in part because <b>software</b> developers <b>requested</b> time to absorb and understand the larger and more complex SBML Level2. The inevitable discovery of limitations and errors {{led to the development}} of SBML Level2 Version2, issued in September 2006. By this time, the team of SBML Editors (who reconcile proposals for changes and write a coherent final specification document) had changed and now consisted of Andrew Finney, Michael Hucka and Nicolas LeNovère.|$|R
30|$|<b>Software</b> {{maintenance}} <b>requests</b> can {{be grouped}} and implemented {{as part of}} large software projects (Aziz et al. 2009; Marques-Neto et al. 2013; Junio et al. 2011; Tan and Mookerjee 2005). open source projects typically adopt continuous maintenance policies where the maintenance requests are addressed by maintainers with different skills and commitment levels, as soon as possible, after being registered in an issue tracking platform, such as Bugzilla and Jira (Tan and Mookerjee 2005; Mockus et al. 2002; Liu et al. 2012).|$|R
40|$|In many {{software}} development organizations, bug tracking systems {{play an important}} role as they allow different types of users communi-cating with each other (i. e. devel-opers; testers and customers) to as-sure that they have the same percep-tion about problems or requesting new features (1 - 10). In addition, bug tracking systems can keep track of more historical information stored of the bugs; and also <b>software</b> require-ments <b>requests</b> to learn from the pre-vious bugs through the maintenance or the development process of th...|$|R
50|$|The next {{iteration}} of SBML {{took two}} years in part because <b>software</b> developers <b>requested</b> time to absorb and understand the larger and more complex SBML Level 2. The inevitable discovery of limitations and errors {{led to the development}} of SBML Level 2 Version 2, issued in September 2006. By this time, the team of SBML Editors (who reconcile proposals for changes and write a coherent final specification document) had changed and now consisted of Andrew Finney, Michael Hucka and Nicolas Le Novère.|$|R
50|$|FastPictureViewer is {{extensible}} via COM-based plug-ins, whose specifications {{are available}} from the <b>software</b> publisher upon <b>request.</b> The <b>software</b> adopts the user's language automatically (currently available for Brazilian/Portuguese, Simplified and Traditional Chinese, Dutch, English, French, German, Hungarian, Italian, Japanese, Korean, Polish, Romanian, Russian, Slovenian, Spanish).|$|R
50|$|Following Disney's {{decision}} to close LucasArts on April 3, 2013, the developers at Raven Software released the source code {{for the game}} on SourceForge under GNU GPLv2 licensing. A few days after release, the source code disappeared from SourceForge without explanation. SourceForge later explained to media outlet Kotaku that Raven <b>Software</b> had <b>requested</b> its removal. Kotaku speculated {{this was due to}} the presence of licensed code, such as for the Bink Video format from Rad Game Tools, that was not intended to be made public.|$|R
50|$|A client {{component}} is the interface point that presents a file system {{application programming interface}} (API) to other layers of the <b>software.</b> It makes <b>requests</b> of the metaserver to identify which chunk servers hold (or will hold) its data, then interacts with the chunk servers directly to read and write.|$|R
50|$|It {{allows the}} {{installation}} {{of a number of}} packages by entering the command sudo port install packagename in the Terminal, which will then download, compile if necessary, and install the <b>requested</b> <b>software,</b> while also installing any required dependencies automatically. Installed packages can be updated with the command sudo port upgrade outdated.|$|R
5000|$|Following Disney's {{decision}} to close LucasArts on April 3, 2013, the developers at Raven Software released the source code {{for the game}} on SourceForge under GNU GPLv2 licensing. A few days after release, the source code disappeared from SourceForge without explanation. SourceForge later explained to media outlet Kotaku that Raven <b>Software</b> had <b>requested</b> its removal. Kotaku speculated {{this was due to}} the presence of licensed code, such as for the Bink Video format from Rad Game Tools, that was not intended to be made public. [...] Based on the source release from Raven, Jedi Academy is maintained by the JACoders group as OpenJK.|$|R
40|$|Xnetlib is a {{new tool}} for {{software}} distribution. Whereas its predecessor nethb uses email as the user interface to its large collection of public-domain mathematical software, xnetlib uses an X Window interface and socket-based communication. Xnetlib {{makes it easy to}} search through a large distributed collection of software and to retrieve <b>requested</b> <b>software</b> in seconds...|$|R
