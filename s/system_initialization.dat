102|67|Public
50|$|Systems with a known {{topology}} can be initialized in {{a system}} specific manner without affecting interoperability. The RapidIO <b>system</b> <b>initialization</b> specification supports <b>system</b> <b>initialization</b> when system topology is unknown or dynamic. <b>System</b> <b>initialization</b> algorithms support the presence of redundant hosts, so <b>system</b> <b>initialization</b> need not have a single point of failure.|$|E
5000|$|The DOS <b>system</b> <b>initialization</b> code will initial its builtin device {{drivers and}} then load the DOS kernel, located in MSDOS.SYS on MS-DOS systems, into memory as well. In Windows 9x, the DOS <b>system</b> <b>initialization</b> code and builtin device drivers and the DOS kernel are {{combined}} into a single IO.SYS file while MSDOS.SYS {{is used as a}} text configuration file.|$|E
5000|$|Configurations may {{be stored}} in NVRAM, loaded by a host processor, or {{negotiated}} at <b>system</b> <b>initialization</b> time. In some cases, hot pluggable devices {{may be able to}} renegotiate their configuration.|$|E
50|$|The {{main entry}} point of ntoskrnl.exe {{performs}} some <b>system</b> dependent <b>initialization</b> then calls a <b>system</b> independent <b>initialization</b> then enters an idle loop.|$|R
40|$|The {{code that}} initializes a {{system can be}} {{notoriously}} difficult to understand. In secure <b>systems,</b> <b>initialization</b> is critical for establishing a starting state that is secure. This paper explores two architectures used for bringing an operating system to its initial state, once the operating system gains control from the boot loader. Specifically, {{the ways in which}} the OpenBSD and Linux operating <b>systems</b> handle <b>initialization</b> are dissected. ...|$|R
50|$|Change the runlevel (on {{systems with}} <b>System</b> V-style <b>initialization).</b>|$|R
50|$|There {{are three}} job entry {{subsystems}} in MVS; Master, JES2 and JES3. The Master subsystem is used during <b>system</b> <b>initialization</b> and for starting system tasks that must run {{outside of the}} control of the primary JES; in particular, it is used to start the primary JES.|$|E
5000|$|Upon <b>system</b> <b>initialization,</b> an Alpha AXP {{computer}} set to boot {{from the}} SRM console displays a short {{report of the}} software version of the firmware, and presents a prompt consisting {{of a series of}} brackets: Digital Personal WorkStation 433u Console V7.2-1 Mar 6 2000 14:47:02 >>> ...|$|E
50|$|AMD Generic Encapsulated Software Architecture (AGESA)a {{bootstrap}} protocol {{by which}} system devices on AMD64 mainboards are initializedwas open sourced in early 2011, aiming to provide required functionality for coreboot <b>system</b> <b>initialization</b> on AMD64 hardware. However, such releases never {{became the basis}} for future development by AMD, and were subsequently halted.|$|E
50|$|Signing exact English (SEE2) was {{developed}} by Gerilee Gustason, Esther Zawolkow, and Donna Pfetzing in the early 1970s. As an offshoot of SEE1, many features of SEE2 are identical to that code <b>system.</b> <b>Initializations</b> and grammatical markers are also used in SEE2, but compound words with an equivalent ASL sign are used as the ASL sign, as with butterfly. SEE2 is also used in Singapore. About 75% to 80% of SEE2 signs are either borrowed from ASL or are modified ASL signs.Signing Exact English uses more markers than the 14 used in Signed English.|$|R
40|$|Abstract. In {{order to}} improve the motion quality of the search-rescue robot, the new hexapod robot system is {{proposed}} in this paper. Based on the completed system hardware design and implementing scheme, embedded <b>system</b> software <b>initialization</b> design is realized. Through the improved kinematics analysis method, a simulation model of hexapod search-rescue robot is established in ADAMS. The experiment result shows that the whole robot is flexible and powerful...|$|R
30|$|The {{discretization}} {{of these}} equations has been implemented using standard finite element method; also the partial differential equation used for calculating the saturation changes in fractures and matrix was discretized using Galerkin’s least square technique (GLS) {{to stabilize the}} equation solutions. To obtain the numerical solution of this highly nonlinear equations <b>system,</b> suitable <b>initialization</b> and boundary conditions should be designated at first, then some of auxiliary functions are employed which are known as the constitutive relationships.|$|R
50|$|Unix Operating System Source Code Level Six is the kernel source code, lightly {{edited by}} Lions to better {{separate}} the functionality — <b>system</b> <b>initialization</b> and process management, interrupts and system calls, basic I/O, file systems and pipes and character devices. All procedures and symbols are listed alphabetically with a cross reference.|$|E
50|$|IBMBIO.COM is the {{filename}} of the <b>system</b> <b>initialization</b> {{code and}} builtin device drivers in many DOS operating systems, {{and as such}} part of PC DOS and DR DOS 5.0 and higher (with the exception of DR-DOS 7.06). It serves the same purpose as IO.SYS in MS-DOS, or DRBIOS.SYS in DR DOS 3.31 to 3.41.|$|E
5000|$|Despite {{having an}} [...] ".exe" [...] file extension, native {{applications}} cannot be {{executed by the}} user (or any program in the Win32 or other subsystems). An example is the autochk.exe binary that runs chkdsk during the <b>system</b> <b>initialization</b> [...] "Blue Screen". Other prominent examples are the services that implement the various subsystems, such as csrss.exe.|$|E
50|$|The iRMX for Windows RTOS {{loads and}} runs on a {{standard}} Windows <b>system.</b> Upon <b>initialization,</b> it sets up a separate execution environment, takes over the CPU, and encapsulates Windows as the lowest priority iRMX task. The iRMX operating system scheduler then determines which tasks will run; whenever a real-time task is ready to run, it preempts Windows, handles all real-time activities, and then resumes Windows (the lowest priority iRMX task) after all real-time activities have completed.|$|R
40|$|Calculations are {{reported}} for structural and thermodynamic properties of submonolayer xenon adsorbed on the (111) surface of platinum for temperatures {{up to the}} (apparently incipient) triple point and beyond. The interaction of the xenon with the surface is described by the Barker-Rettner model and {{the interaction between the}} xenon atoms is described by a "Hartree-Fock-Dispersion" interaction augmented with a McLachlan surface mediated interaction. While the motion of the atoms in the surface plane is treated with a standard two-dimensional molecular dynamics simulation, it is necessary to consider the thermal excitation of quantum states associated with the surface-normal dynamics to properly describe the softening of the corrugation with increasing temperature. The stability of observed and proposed low-temperature structures is determined. This analysis includes an examination of the effects of system size, boundary conditions, and <b>system</b> <b>initializations.</b> Structure factor calculations are compared to experimental results. These calculations provide strong evidence that, at very low temperatures, the domain wall structure of a xenon monolayer adsorbed on a Pt(111) substrate has a chaotic-like nature. This result is contrary to the standard wisdom regarding this system. Comment: 15 + 5 pages, 11 figure...|$|R
50|$|Runlevel is {{a mode of}} {{operation}} in the computer operating systems that implement Unix <b>System</b> V-style <b>initialization.</b> Conventionally, seven runlevels exist, numbered from zero to six; though up to ten, from zero to nine, may be used. S is sometimes used as a synonym {{for one of the}} levels. Only one runlevel is executed on startup; run levels are not executed one after another, i.e. either the runlevel 2, 3 or 4 is executed, not more of them sequentially or in any other order.|$|R
5000|$|The {{registry}} {{is stored}} on disk as several different files called [...] "hives." [...] One, the System hive, is loaded {{early in the}} boot sequence and provides configuration information required at that time. Additional registry hives, providing software-specific and user-specific data, are loaded during later phases of <b>system</b> <b>initialization</b> and during user login, respectively.|$|E
5000|$|... {{from the}} [...] file in the 3.2.10 modules build {{directory}}. trap [...] "" [...] 1 2 3 [...] case [...] "$0" [...] in -bash|bash|*/bash) [...] /usr/local/Modules/default/init/bash; [...] -ksh|ksh|*/ksh) [...] /usr/local/Modules/default/init/ksh; [...] -zsh|zsh|*/zsh) [...] /usr/local/Modules/default/init/zsh; *) [...] /usr/local/Modules/default/init/sh; # default esac [...] trap 1 2 3Copy the [...] file from the 3.2.10 modules build directory to the <b>system</b> <b>initialization</b> directory: ...|$|E
5000|$|The {{detection}} of a [...] signal causes the processor {{to enter a}} <b>system</b> <b>initialization</b> period of six clock cycles, after which it sets the interrupt request disable flag in the status register and loads the program counter with the values stored at the processor initialization vector ( [...] - [...] ) before commencing execution. [...] If operating in native mode, the 65C816/65C802 are switched back to emulation mode and stay there until returned to native mode under software control.|$|E
40|$|Three {{modifications}} of a microprocessor-controlled high performance liquid chromatography <b>system</b> are described: <b>initialization</b> of peripheral devices by the injection valve enabling more precise estimation of retention constants, automatic {{return of the}} automatic switching valve to the RUN position after stop-flow spectroscopy, and solvent-saving by program cycling during overnight column stabi...|$|R
40|$|Abstract. Threshold {{cryptography}} aims at {{enhancing the}} availability and security of decryption and signature schemes by splitting private keys into several (say n) shares (typically, each of size comparable to the original secret key). In these schemes, a quorum of at least (t ≤ n) servers needs to act upon a message to produce the result (decrypted value or signature), while corrupting less than t servers maintains the scheme’s security. For about two decades, extensive study was dedicated to this subject, which created a number of notable results. So far, most practical threshold signatures, where servers act non-interactively, were analyzed in the limited static corruption model (where the adversary chooses which servers will be corrupted at the <b>system’s</b> <b>initialization</b> stage). Existing threshold encryption schemes that withstand the strongest combination of adaptive malicious corruptions (allowing the adversary to corrupt servers at any time based on its complete view), and chosen-ciphertext attacks (CCA) all require interaction (in the non-idealized model) and attempts to remedy this problem resulted only in relaxed schemes. The {{same is true for}} threshold signatures secure under chosen-message attacks (CMA). To date (for about 10 years), it has been open whether there are non-interactive threshold schemes providing the highest security (namely, CCA-secure encryption and CMA-secure signature) with scalable shares (i. e., as short as the original key) and adaptive security. This paper answers thi...|$|R
40|$|This paper {{presents}} a novel system that uses two synchronous optimization processes to recover 3 D structure from recti ed stereo image pairs. The synchronization {{of the processes}} are done by energy terms that inform the optimization processes about the recovered positions of each other. This information is used to direct the optimizations towards a better direction. The <b>system</b> is <b>initialization</b> insensitive {{and it is very}} robust against local minima. We performed experiments on real and synthetic images with ground truth that showed the effectiveness and the robustness of our system. We also compared our system to other systems for further validation. ...|$|R
5000|$|This {{attack was}} {{originally}} presented in , {{which was a}} United States Air Force security analysis of Multics, where they described such {{an attack on a}} PL/I compiler, and call it a [...] "compiler trap door"; they also mention a variant where the <b>system</b> <b>initialization</b> code is modified to insert a backdoor during booting, as this is complex and poorly understood, and call it an [...] "initialization trapdoor"; this is now known as a boot sector virus.|$|E
50|$|The {{sound card}} runs its own {{operating}} system, which is uploaded to the board's RAM during <b>system</b> <b>initialization</b> via the card's 'SSINIT.EXE' utility program. There {{were no other}} TSR programs needed for software support, as were common with other popular sound cards such as Creative Labs Sound Blaster AWE32. The Soundscape also has a hardware MPU-401 implementation which, combined {{with the lack of}} TSRs, allowed a high degree of compatibility with minimal memory footprint, which was a significant benefit as many DOS games often ran in a custom flavor of protected mode or were particularly demanding of conventional memory space.|$|E
5000|$|The second {{method was}} created for PCI Express. It is called Enhanced Configuration Access Mechanism (ECAM). It extends device's {{configuration}} space to 4k, with the bottom 256 bytes overlapping the original (legacy) configuration space in PCI. The section of the addressable space is [...] "stolen" [...] so that the accesses from the CPU don't go to memory but rather reach a given device in the PCI Express fabric. During <b>system</b> <b>initialization,</b> firmware determines the base address for this “stolen” address region and communicates it to the root complex and to the operating system. This communication method is implementation-specific, and not defined in the PCI Express specification.|$|E
40|$|In {{this report}} are {{described}} means for indoor localization in special, challenging circum-stances in marine industry. The {{work has been}} carried out in MARIN project, where a tool based on mobile augmented reality technologies for marine industry is developed. The tool can be used for various inspection and documentation tasks and it is aimed for improving the efficiency in design and construction work by offering the possibility to visualize the newest 3 D-CAD model in real environment. Indoor localization is needed to support the <b>system</b> in <b>initialization</b> of the accurate camera pose calculation and auto-matically finding the right location in the 3 D-CAD model. The suitability of each indoor localization method to the specific environment and circumstances is evaluated...|$|R
40|$|In Mixed Reality (MR) Environments, the user's view is {{augmented}} with virtual, artificial objects. To visualize virtual objects, {{the position}} and orientation of the user's view or the camera is needed. Tracking of the user's viewpoint is an essential area in MR applications, especially for interaction and navigation. In present <b>systems,</b> the <b>initialization</b> is often complex. For this reason, we introduce a new method for fast initialization of markerless object tracking. This method is based on Speed Up Robust Features and paradoxically on a traditional marker-based library. Most markerless tracking algorithms {{can be divided into}} two parts: an offline and an online stage. The focus of this paper is optimization of the offline stage, which is often time-consuming...|$|R
40|$|We {{present a}} robust, {{real-time}} human detection and tracking system that achieves very good {{results in a}} wide range of commercial applications, including counting people and measuring occupancy. The key to the system is a human model based camera calibration process. The system uses a simplified human model that allows the user to very quickly and easily configure the <b>system.</b> This simple <b>initialization</b> procedure is essential for commercial viability. ...|$|R
5000|$|... {{improves}} the feature set already provided by D-Bus itself with additional functionality. For example, service activation allows automatic starting of services when needed [...] - {{when the first}} request to any bus name of such service arrives at the message bus daemon. This way, service processes neither need to be launched during the <b>system</b> <b>initialization</b> or user initialization stage nor need they consume memory or other resources when not being used. This feature was originally implemented using setuid helpers, but nowadays {{it can also be}} provided by systemd's service activation framework. Service activation is an important feature that facilitates the management of the process lifecycle of services (for example when a desktop component should start or stop).|$|E
50|$|CVRJ (CREW Vehicle Receiver Jammer) U.S. Marines: http://www.marcorsyscom.marines.mil/Portals/105/PMMC3/MC3PDF/2%201%20CVRJ%20CREW%20FACT%20SHEET.pdf, The {{primary purpose}} of the CVRJ system is to defeat {{existing}} Radio Frequency (RF) threats and newly identified Hard-to-Kill RF threats. The CVRJ system accomplishes its primary mission by jamming each threat's transmitted RF signals. The secondary purpose of the CVRJ system is to add the capability to combine multiple internal RF signals and external RF inputs from other systems, and serve as the conduit for transmitting those RF signals while maintaining system interoperability. It accomplishes both missions via 15 waveform programmable RF channels. The system is software controlled to meet specific threats. Indicators on the CVRJ front panel and Remote Control Unit (RCU) allow the operator to observe system health and diagnostic messages. Built-In-Test (BIT) routines run during <b>system</b> <b>initialization</b> and operation that notify the operator of system faults by illuminating indicators referred to as “annunciators” and by displaying text messages on the RCU display. The system is highly automated which reduces operator interaction. The system draws up to 36 amps of vehicle power, weighs approximately 69 lbs, and measures 13”H x 14”W x 19”D.|$|E
40|$|The {{capacity}} of flash-memory storage systems grows {{at a speed}} similar to many other storage systems. In order to properly manage the product cost, vendors face serious chal-lenges in system designs. How to provide an expected sys-tem initialization time for huge-capacity flash-memory stor-age systems has become an important research topic. In this paper, a time-predictable <b>system</b> <b>initialization</b> design is pro-posed for huge-capacity flash-memory storage systems. The objective of the design is to provide an expected <b>system</b> <b>initialization</b> time based on a coarse-grained flash transla-tion layer. The time-predictable analysis of the design is provided to discuss {{the relation between the}} size of main memory and the <b>system</b> <b>initialization</b> time. The system ini-tialization time can be also estimated and predicted by the time-predictable analysis...|$|E
40|$|Subsystem {{facilities}} flexible {{data acquisition}} by combining {{hardware and software}} processing. Device controls complex signal acquisition sequence and assists in precise phase locking to received signal. Key features include software <b>system</b> and code-generator <b>initialization</b> routines, executive routine, utility subroutines, control sequence routines for each receiver acquisition state, control-command decoding routine, and look-up tables for code-generator configuration versus code-set number. Steps {{can be added to}} extend input signal dynamic range...|$|R
40|$|We {{present an}} {{empirical}} strategy {{to determine the}} Hamiltonian dynamics of a two-qubit <b>system</b> using only <b>initialization</b> and measurement in a single fixed basis. Signal parameters are estimated from measurement data using Bayesian methods from which the underlying Hamiltonian is reconstructed, up to three unobservable phase factors. We extend the method to achieve full control Hamiltonian tomography for controllable systems via a multi-step approach. The technique is demonstrated and evaluated by analyzing data from simulated experiments including projection noise. Comment: 15 page...|$|R
5000|$|Enumerated {{types and}} “flags” types : In general, every {{enumerated}} type and every integer-based bitfield type (i.e., every [...] type) that {{one wishes to}} use {{in some way that}} is related to the object system [...] - [...] for example, as the type of an object property [...] - [...] should be registered with the type <b>system.</b> Typically, the <b>initialization</b> code that takes care of registering these types is generated by an automated tool called [...] and stored in a separate file.|$|R
