389|1115|Public
50|$|Even {{a simple}} stuck-at fault {{requires}} {{a sequence of}} vectors for detection in a <b>sequential</b> <b>circuit.</b> Also, due {{to the presence of}} memory elements, the controllability and observability of the internal signals in a <b>sequential</b> <b>circuit</b> are in general much more difficult than those in a combinational logic circuit. These factors make the complexity of sequential ATPG much higher than that of combinational ATPG.|$|E
50|$|Even {{a simple}} stuck-at fault {{requires}} {{a sequence of}} vectors for detection in a <b>sequential</b> <b>circuit.</b> Also, due {{to the presence of}} memory elements, the controllability and observability of the internal signals in a <b>sequential</b> <b>circuit</b> are in general much more difficult than those in a combinational logic circuit. These factors make the complexity of sequential ATPG much higher than that of combinational ATPG, where a scan-chain (i.e. switchable, for-test-only signal chain) is added to allow simple access to the individual nodes.|$|E
50|$|When output wires are fed back as inputs, {{the result}} is a {{feedback}} loop or <b>sequential</b> <b>circuit</b> that has the potential to consider its own history. Such circuits are often suitable as memories.|$|E
50|$|It {{should be}} noted that not all <b>sequential</b> <b>circuits</b> can be {{implemented}} using the Mealy model. Some <b>sequential</b> <b>circuits</b> can only be implemented as Moore machines.|$|R
40|$|Based on τk notation, {{the test}} {{generation}} complexity of several existing classes of <b>sequential</b> <b>circuits</b> has been reconsidered. Some classes of easily testable <b>sequential</b> <b>circuits</b> that cover some cyclic <b>sequential</b> <b>circuits</b> {{have also been}} introduced. These classes include length-bounded testable circuits, time-bounded testable circuits and time-bounded validity-identifiable circuits. In this paper, we introduce two classes of <b>sequential</b> <b>circuits,</b> state-shiftable finite state machine realizations and counter-cycle one-hot design realizations, which are subclasses of k-timebounded testable circuits and k-time-bounded validity-identifiable circuits, respectively, where k is τ(n) and n {{is the size of}} the circuits. [URL]...|$|R
40|$|Several {{classes of}} <b>sequential</b> <b>circuits</b> with combinational test {{generation}} complexity have been introduced. However, no general notation {{is used to}} define the time complexity of test generation. In this paper, we introduce a new test generation notation that we call tk notation in order to present and clarify the classification of <b>sequential</b> <b>circuits</b> based on the combinational test generation complexity. For a class of <b>sequential</b> <b>circuits,</b> the time complexity of test generation is tk-bounded if it is O(tk(n)) and tk-equivalent if it is Q(tk(n)), where t(n) is the combinational test generation complexity and n {{is the size of}} the circuits. Based on tk notation, we reconsider the time complexity of test generation for the existing classes of acyclic <b>sequential</b> <b>circuits</b> including balanced <b>sequential</b> <b>circuits,</b> strongly balanced <b>sequential</b> <b>circuits,</b> and internally balanced <b>sequential</b> <b>circuits.</b> In this paper, we also introduce a new method of design for testability called feedback shift register scan design (FSR scan design) technique, which is extended from the scan design technique. We discuss the time complexity of test generation for the scan designed circuits and the FSR scan designed circuits. We also introduce three classes of <b>sequential</b> <b>circuits,</b> which are t-equivalent and t 2 -bounded. The k-length-bounded testable circuits is identified as a class of <b>sequential</b> <b>circuits</b> with t 2 -bounded time complexity if the parameter k is O(n) while k-time-bounded testable circuits and k-time-bounded validity-identifiable circuits are identified as classes with t-equivalent (t 2 -bounded) time complexity if the parameter k is t(n) (t 2 (n)). [URL]...|$|R
5000|$|Polyphonic synthesizers such as <b>Sequential</b> <b>Circuit</b> Prophet-5 and Yamaha DX7 {{were capable}} of playing only one patch at a time (the DX7II could play 2 patches on 2 {{separate}} MIDI channels) There was some sequencing ability in some keyboards, {{but it was not}} MIDI sequencing.|$|E
50|$|In the early-to-mid-1970s, {{the digital}} {{keyboard}} scanning and voice allocation technologies were independently developed by several engineers and musical instrument manufacturers, including Yamaha, E-mu Systems, Roland Corporation (RS-101 in 1975 and RS-202 in 1976), and Armand Pascetta (Electro Group). The Oberheim 2/4/8-voices and <b>Sequential</b> <b>Circuit</b> Prophet-5 were both developed {{in collaboration with}} E-mu System.|$|E
50|$|Some early {{computers}} used ordinary relays {{as a kind}} of latch—they store bits {{in ordinary}} wire spring relays or reed relays by feeding an output wire back as an input, resulting in a feedback loop or <b>sequential</b> <b>circuit.</b> Such an electrically latching relay requires continuous power to maintain state, unlike magnetically latching relays or mechanically racheting relays.|$|E
5000|$|Kenji Konishi - Bass (Steinberger XL-2), Synthesizers (Korg 770, Korg PS-3200, Oberheim OB-X, Oberheim Xpander, Oberheim Matrix-12, Quasimidi Sirius, <b>Sequential</b> <b>Circuits</b> Prophet-5, <b>Sequential</b> <b>Circuits</b> Prophet-10), Sequencer (Roland System-100M-182, Roland MSQ-700), Sampler (Akai S1000), Macintosh (Power 7100/80AV), Backing vocals ...|$|R
40|$|Abstract: The paper {{deals with}} {{synthesis}} of <b>sequential</b> <b>circuits</b> defined by their al-gorithmic state machine notation. Such circuits {{have a number}} of specific properties which enable efficient design of the circuits by utilizing so-called linearization tech-niques. A typical linearization technique includes calculation of autocorrelation val-ues for a system of logic functions corresponding to the circuit. For the mentioned <b>sequential</b> <b>circuits,</b> the calculations which usually require massive computational re-courses may be significantly reduced and thus low-overhead implementations of the circuits can be obtained relatively easy. The paper introduces a novel architecture of so-called linearized <b>sequential</b> <b>circuits,</b> and a piece-wise linearization approach for synthesis of <b>sequential</b> <b>circuits.</b> Results are evaluated both analytically and by using a number of standard benchmarks...|$|R
40|$|Abstract—This paper {{describes}} transition delay faults in VLSI circuits. Characteristics {{of transition}} delay faults are stated and the fault model for combination and <b>sequential</b> <b>circuits</b> {{is discussed in}} detail. Use of Transition Fault SIMulation (TFSIM) algorithm for fault simulation of <b>sequential</b> <b>circuits</b> is explained...|$|R
50|$|The {{output of}} a <b>sequential</b> <b>circuit</b> or {{computer}} program {{at any time}} is completely determined by its current inputs and current state. Since each binary memory element has only two possible states, 0 or 1, {{the total number of}} different states a circuit can assume is finite, and fixed by the number of memory elements. If there are N binary memory elements, a digital circuit can have at most 2N distinct states. The concept of state is formalized in an abstract mathematical model of computation called a finite state machine, used to design both sequential digital circuits and computer programs.|$|E
50|$|This {{fault model}} applies to gate level circuits, or {{a block of}} a <b>sequential</b> <b>circuit</b> which can be {{separated}} from the storage elements.Ideally a gate-level circuit would be completely tested by applying all possible inputs and checking that they gave the right outputs, but this is completely impractical: an adder to add two 32-bit numbers would require 264 = 1.8*1019 tests, taking 58 years at 0.1 ns/test.The stuck at fault model assumes that only one input on one gate will be faulty at a time, assuming that if more are faulty, a test that can detect any single fault, should easily find multiple faults.|$|E
5000|$|For a <b>sequential</b> <b>circuit</b> such as two D-flip flops {{connected}} in series, the contamination delay {{of the first}} flip-flop must be factored in to avoid violating the hold-time constraint of the second flip-flop receiving the output from the first flip flop. Here, the contamination delay {{is the amount of}} time needed for a change in the flip-flop clock input to result in the initial change at the flip-flop output (Q).If there is insufficient delay from the output of one flip-flop to the input of the next, the input may change before the hold time has passed. Because the second flip-flop is still unstable, its data would then be [...] "contaminated." [...] Every path from an input to an output can be characterized with a particular contamination delay.|$|E
50|$|Originally, E-mu {{considered}} {{selling the}} design for the Emulator to <b>Sequential</b> <b>Circuits,</b> {{which at the time}} was using E-mu's keyboard design in its popular Prophet-5 synthesizer. However, soon afterward, <b>Sequential</b> <b>Circuits</b> stopped paying E-mu royalties on its keyboard design, which forced E-mu to release the Emulator itself.|$|R
5000|$|Keyboards: Roland Juno-D, Roland Juno-G, <b>Sequential</b> <b>Circuits</b> Prophet-5 ...|$|R
5000|$|Alan Rear (Songwriter, Vocals, Bass Guitar, <b>Sequential</b> <b>Circuits</b> Prophet-5) ...|$|R
5000|$|New England also {{benefited from}} the trade, as many merchants from New England, {{especially}} the state of Rhode Island, replaced the role of Europe in the triangle. New England also made rum from the Caribbean sugar and molasses, which it shipped to Africa as well as within the New World. [...] Yet, the [...] "triangle trade" [...] as considered in relation to New England was a piecemeal operation. No New England traders {{are known to have}} completed a <b>sequential</b> <b>circuit</b> of the full triangle, which took a calendar year on average, according to historian Clifford Shipton. [...] The concept of the New England Triangular trade was first suggested, inconclusively, in an 1866 book by George H. Moore, was picked up in 1872 by historian George C. Mason, and reached full consideration from a lecture in 1887 by American businessman and historian William B. Weeden.The song [...] "Molasses to Rum" [...] from the musical 1776 vividly describes this form of the triangular trade.|$|E
40|$|This paper gives {{a unified}} {{treatment}} for electronic <b>sequential</b> <b>circuit</b> realizations and suitable procedures :for synthesizing them. This {{is done by}} showing that every <b>sequential</b> <b>circuit</b> operating in synchronous mode can be transformed into an equivalent <b>sequential</b> <b>circuit</b> operating in fundamental mode with {{the same number of}} internal states...|$|E
40|$|The test {{generation}} {{problem for}} a <b>sequential</b> <b>circuit</b> capable of generating tests with combinational test generation complexity {{can be reduced to}} that for the combinalional circuit formed by replacing each FF in the sequenlial circuit by a wire. In this paper, we consider an application of this approach to general sequential circuits. We propose a test generation method using circuit pseudo-transformation technique: given a <b>sequential</b> <b>circuit,</b> we extract a subcircuit with balanced structure which is capable of generating tests with combinational test generation complexity, replace each FF in the subcircuit by wire, generate test sequences for the transformed <b>sequential</b> <b>circuit,</b> and finally obtain test sequences for the original <b>sequential</b> <b>circuit.</b> We also estimate the effectiveness of the proposed method by experiment with ISCAS' 89 benchmark circuits. [URL]...|$|E
5000|$|Lee Jacob (Songwriter, Vocals, Guitar, Zheng, <b>Sequential</b> <b>Circuits</b> Prophet-5) ...|$|R
5000|$|Pro Synth - {{model of}} <b>Sequential</b> <b>Circuits</b> Prophet-5 synthesizer; ...|$|R
5000|$|<b>Sequential</b> <b>Circuits</b> Prophet-5, {{an analog}} {{synthesizer}} in the Prophet series ...|$|R
40|$|Abstract — We {{describe}} {{an approach to}} estimate the average power dissipation in sequential logic circuits under user-specified input sequences or programs. This approach will aid the design of programmable controllers or processors, by enabling the esti-mation of the power dissipated when the controller or processor is running specific application programs. Current approaches to <b>sequential</b> <b>circuit</b> power estimation are limited {{by the fact that}} the input sequences to the <b>sequential</b> <b>circuit</b> are assumed to be uncorrelated. In reality, the inputs come from other sequential circuits, or are application programs. In this paper we show how user-specified sequences and pro-grams can be modeled using a finite state machine, termed an input-modeling finite state machines or IMFSM. Power estima-tion can be carried out using existing <b>sequential</b> <b>circuit</b> power estimation methods on a cascade circuit consisting of the IMFSM and the original <b>sequential</b> <b>circuit.</b> I...|$|E
40|$|<b>Sequential</b> <b>Circuit</b> Synthesis at the Gate Level by Ellen Marie Sentovich Doctor of Philosophy in Electrical Engineering and Computer Sciences University of California at Berkeley Professor Robert K. Brayton, Chair <b>Sequential</b> <b>circuit</b> {{synthesis}} is {{the process}} of automatically generating an optimal implementation of a <b>sequential</b> <b>circuit</b> given a high-level or gate-level description. Optimization of a <b>sequential</b> <b>circuit</b> design may be performed at either the state transition graph level or the gate level. The published work to date has favored the state transition graph level because it allows one to reason easily about input/output sequences; however, the impact of optimization at this level is hard to quantify. The gate-level view is important for several reasons: it provides a direct measure {{of the quality of the}} final implementation; all sequential designs must eventually be implemented at the gate level; given a gate-level description it is usually computationally impractical to extract [...] ...|$|E
40|$|We {{describe}} {{an approach to}} estimate the average power dissipation in sequential logic circuits under user-specified input sequences or programs. This approach will aid the design of programmable controllers or processors, by enabling the estimation of the power dissipated when the controller or processor is running specific application programs. Current approaches to <b>sequential</b> <b>circuit</b> power estimation are limited {{by the fact that}} the input sequences to the <b>sequential</b> <b>circuit</b> are assumed to be uncorrelated. In reality, the inputs come from other sequential circuits, or are application programs. In this paper we show how user-specified sequences and programs can be modeled using a finite state machine, termed an input-modeling finite state machines or IMFSM. Power estimation can be carried out using existing <b>sequential</b> <b>circuit</b> power estimation methods on a cascade circuit consisting of the IMFSM and the original <b>sequential</b> <b>circuit.</b> I. INTRODUCTION Average power dissipation estimation is [...] ...|$|E
40|$|New multi {{threshold}} voltage (multi-V(th)) brute-force FinFET <b>sequential</b> <b>circuits</b> with independent-gate bias, work-function engineering, and gate-drain/source overlap engineering techniques {{are presented in}} this paper. The total active mode power consumption, the clock power, and the average leakage power of the multi-V(th) <b>sequential</b> <b>circuits</b> are reduced by up to 55 %, 29 %, and 53 %, respectively, while maintaining similar speed and data stability {{as compared to the}} circuits in a single {{threshold voltage}} (single-V(th)) tied- 32 nm-gate FinFET technology. Furthermore, the area is reduced by up to 21 % with the new <b>sequential</b> <b>circuits</b> as compared to the circuits with single-V(th) tied-gate FinFETs...|$|R
40|$|Logic {{debugging}} of today's complex <b>sequential</b> <b>circuits</b> is {{an important}} problem. In this paper, a logic debugging method-ology for multiple errors in <b>sequential</b> <b>circuits</b> with no state equivalence is developed. The proposed approach reduces the problem of debugging to an instance of Boolean Satisa-bility. This formulation takes advantage of modern Boolean Satis ability solvers that handle large circuits in a computa-tionally ecient manner. An extensive suite of experiments with large <b>sequential</b> <b>circuits</b> conrm the robustness and e-ciency of the proposed approach. The results further suggest that Boolean Satisability provides an eective platform for sequential logic debugging. ...|$|R
40|$|Abstract—Reversible <b>sequential</b> <b>circuits</b> {{are going}} to be the {{significant}} memory blocks for the forthcoming computing devices for their ultra low power consumption. Therefore design of various types of latches has been considered a major objective for the researchers quite a long time. In this paper we proposed efficient design of reversible <b>sequential</b> <b>circuits</b> that are optimized in terms of quantum cost, delay and garbage outputs. For this we proposed a new 3 * 3 reversible gate called SAM gate and we then design efficient <b>sequential</b> <b>circuits</b> using SAM gate along with some of the basic reversible logic gates...|$|R
40|$|Abstract. A {{parallel}} checking {{method is}} {{proposed in the}} paper, {{in order to improve}} the speed of <b>sequential</b> <b>circuit</b> checking. The graph form of sequential circuits is isomorphic to finite state machine; a parallel <b>sequential</b> <b>circuit</b> equivalence checking method is designed using parallel minimization method of finite state machine. At last, the effectiveness and feasibility of the method is proved with an instance. The definition of sequential equivalence <b>Sequential</b> <b>circuit</b> is a sort of finite state machine [1, 2]. Finite state machine is a nonobjective model, which can be used to describe operation characteristic about system’s input and output. Finite state machine has two forms of Mealy and Moore, describing <b>sequential</b> <b>circuit</b> with Mealy state machine. Mealy state machine is described as follow: M = (S, r, Y,δ, S 0) S: finite non empty set of state S 0, S 1,, S n⋯ r: finite non empty set of input symbol. Y: output alphabet...|$|E
40|$|This paper {{introduces}} {{a new class}} of sequential circuits called acyclically testable sequential circuits which is wider than the class of acyclic sequential circuits but whose test generation complexity is equivalent to that of the acyclic sequential circuits. We also present a test generation procedure for acyclically testable sequential circuits and elaborate a design-for-test (DFT) method to augment an arbitrary <b>sequential</b> <b>circuit</b> into an acyclically testable <b>sequential</b> <b>circuit...</b>|$|E
30|$|As {{mentioned}} earlier, {{to increase}} the circuit testability, all or some of circuit (MM) elements should be included into self-testing register (STP or CSTP) (Fig. 36). Disconnecting the (MM) elements, converts the <b>sequential</b> <b>circuit</b> (CUT) to a combinational one, that is easier to test. The effect of disconnecting memory elements from the <b>sequential</b> <b>circuit</b> s 298 is shown in Figs.  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 and  35.|$|E
40|$|This paper {{presents}} a new structure, called discontinuous reconvergence structure (DR-structure), of <b>sequential</b> <b>circuits</b> with easy testability for delay faults. We {{show that the}} delay fault test generation problem for <b>sequential</b> <b>circuits</b> with DR-structure {{can be reduced to}} that for their time-expansion models, which are combinational circuits. Based on the reducibility, we propose a test generation method for delay faults in <b>sequential</b> <b>circuits</b> with DRstructure. This method can be applied to several delay fault models. By some experiments, we show that the proposed method is effective in the hardware overhead, the test generation time and the fault efficiency. [URL]...|$|R
50|$|Smith has {{degrees in}} both Computer Science and Electronic Engineering from UC Berkeley. He {{purchased}} a Minimoog in 1972 and later built his own analog sequencer, founding <b>Sequential</b> <b>Circuits</b> in 1974 and advertising his product {{for sale in}} Rolling Stone. By 1977 he was working at <b>Sequential</b> <b>Circuits</b> full-time, and later that year he designed the Prophet 5, the world's first microprocessor-based musical instrument and also the first programmable polyphonic synth, a functionality adopted by virtually all synthesizer designs ever since. <b>Sequential</b> <b>Circuits</b> {{went on to become}} one of the most successful music synthesizer manufacturers of the time.|$|R
5000|$|<b>Sequential</b> <b>Circuits</b> Pro-One, Korg Delta, Roland SH-09 (Light & Magic tour); ...|$|R
