11|293|Public
5000|$|USBKill, kill <b>switch</b> <b>software</b> {{created in}} {{response}} to circumstances of Ulbricht's arrest ...|$|E
50|$|Passport Carrier Release (PCR) is {{a version}} of the Passport Switch (now Multiservice <b>Switch)</b> <b>software</b> {{designed}} to run in telecommunications carrier environments. It was formerly developed by Nortel. After the sale in 2009 of most Nortel's assets, the passport SW is still used in several products of Alcatel-Lucent, Ericsson and Kapsch.|$|E
50|$|Big Switch has two products: Big Monitoring Fabric, {{a network}} packet broker (NPB) fabric, which enables {{security}} and monitoring of data center and cloud traffic, and Big Cloud Fabric, a data center switching fabric for OpenStack clouds, VMware SDDC and container use cases. Big <b>Switch</b> <b>software</b> runs on open Ethernet networking switches from Accton, Dell EMC, and HPE, and leverage centralized SDN controller software for fabric-wide control and management.|$|E
40|$|CHILL is a {{concurrent}} programming language, especially for implementing telecommunications software. ETRI {{has used the}} language {{for the development of}} <b>switching</b> <b>software.</b> Generally, <b>switching</b> <b>software</b> is characterized byreal-time execution, parallel and distributed processing, large scale source code, and high complexity. The software is also developed on cross development environments. In this paper, we present a CHILL cross debugging system, in which the system can test and debug the programs on remote system from local system. The system provides the traditional debugging features such as executing and tracing a program, listing source code, setting breakpoints, examining and setting program locations, and single-stepping. It also provides parallel and distributed real-time debugging, a powerful command language, signal sending capability, and graphical user interface for <b>switching</b> <b>software.</b> 1...|$|R
50|$|FlexTCA is {{a product}} family that {{consists}} of ATCA platforms pre-integrated with essential services software, SAF-compliant high availability middleware, <b>switching</b> <b>software,</b> and a Trillium Protocol Integration toolkit.|$|R
25|$|From 1981-85 Bridges {{wrote the}} RAM disk drivers, utilities, {{cracking}} <b>software,</b> task <b>switching</b> <b>software,</b> and memory test diagnostics for Abacus, {{a maker of}} large memory cards for the Apple II.|$|R
50|$|OpenDocument {{is an open}} {{document}} file format for saving and exchanging editable office documents such as text documents (including memos, reports, and books), spreadsheets, charts, and presentations. Organizations and individuals that store their data in an open format such as OpenDocument avoid being locked into a single software vendor, leaving them free to <b>switch</b> <b>software</b> if their current vendor goes out of business, raises their prices, changes their software, or changes their licensing terms to something less favorable.|$|E
40|$|The OFDM 60 Degree Sector Antenna Switch {{designed}} and developed based on RedLine AN- 50 802. 16 radio set to support high speed data link for Tactical Network Topology (TNT) experimentation series at Monterey Bay. There are three AN- 50 radios connected to three 60 degree sector antennas for a combined 180 degrees of coverage within the bay. Each of theses antennas transmit and receive {{on the same}} frequency, which could have resulted in significant interference. The OFDM Sector Antenna <b>Switch</b> <b>software</b> was developed to resolve this issue. It allows monitor each AN- 50 link status and maintain connectivity when a signal is established within its 60 degrees of coverage...|$|E
40|$|Existing IP routing {{algorithms}} {{have been}} developed mainly for non-VLAN networks. For these routing algorithms to work, an end station must be attached to its associated network. The introduction of VLAN hits, however, allowed the physical location of the end station to be changed from time to time. Therefore, some extra mechanism is required to support routing in VLAN environment. Existing approaches have some drawbacks in terms of inefficiency in traffic forwarding and <b>switch</b> <b>software</b> complexity. In this paper, a simple and efficient method for routing over IP subnet VLAN in Ethernet is proposed. This method has been implemented in hardware and found to work correctly. Various measurements and analyses have been performed to verify the efficiency of this protocol. Copyright (C) 2002 John Wiley Sons, Ltd...|$|E
50|$|Mellanox Technologies is an Israeli {{supplier}} of computer networking products using InfiniBand and Ethernet technology. Mellanox offers adapters, <b>switches,</b> <b>software,</b> cables and silicon for markets including company data centers, cloud computing, computer data storage and financial services.|$|R
50|$|Early PDP-8 systems did {{not have}} an {{operating}} system, just a front panel and run and halt <b>switches.</b> <b>Software</b> development systems for the PDP-8 series began with the most basic front panel entry of raw binary machine code (booting entry).|$|R
50|$|The NetSys {{software}} fulfills {{the needs}} of a Regional Telecommunications Hub (RTH), as specified by the World Meteorological Organization (WMO). In this category NetSys has its message <b>switching</b> <b>software</b> in South Africa (Pretoria), India (Delhi), Hungary (Budapest), Switzerland (Zurich) and Poland (Warsaw).|$|R
40|$|This paper {{examines}} a few {{techniques for}} booting Asynchronous Transfer Mode (ATM) switches securely over an insecure network. Each {{of these techniques}} assume a different trust model. This work is being {{carried out in the}} context of the Fairisle ATM switch environment. In this environment we are envisaging an open multi-service network where ATM switches are booted with third party software, possibly using a third party booting service. Hence we are faced with an increased security threat, compared with a closed network environment, in ensuring that the switch has been booted with authorised and authenticated boot code. In this paper, we examines these threats and presents three schemes of countering the threats. 1 Introduction Most Asynchronous Transfer Mode (ATM) switches do not run a software development environment. <b>Switch</b> <b>software</b> is developed on host machines before being loaded to the ATM switches. The loading process could take the form of replacing the boot PROM with a versio [...] ...|$|E
40|$|The paper {{describes}} {{the provision of}} connectionless services in a local ATM network by a connectionless server CLS, implemented {{as part of a}} workstation driver in software. It is described how connectionless service functions, CLSFs, can be provided by changing and enhancing existing workstation drivers, without involving the <b>switch</b> <b>software.</b> This concept should also allow a seamless interconnection of private CLSs with a public CLS. The environment used for the implementation consists of a local ATM switch (ASX 100), manufactured by Fore Systems and the modified workstation drivers for the Fore Systems SBA- 100 SBus ATM adapter cards for Sun workstations. Throughput measurements are presented for both AAL type 3 / 4 and AAL type 5 for the CL-data transfer. Issues concerning higher layer protocols like TCP/IP, XTP and ST-II are discussed. A description of the implemented methods and a discussion of {{the pros and cons of}} using CLSs in an ATM-LAN is given...|$|E
40|$|Abstract—In {{order to}} meet new mission {{requirements}} or to adapt environmental changes, robots perform a task switch or role switch. When a robot is required to perform a specific task, which is beyond its skills, it might need to request other robots’ help. In order to improve the flexibility, we use {{the concept of a}} software mobile agent to design an architecture called Virtual Operator MultiAgent System (VOMAS). In VOMAS, intelligent agents, called a virtual operator (VO) and a robot agent (RA), work together to control a robot to fulfill a specific task. Each task is represented by a VO and the RA handles reactive control. Based on this architecture, VOMAS can perform the dynamic task switch to handle missions, which are not initially given. Two case studies, a wheelchair and formation control, are introduced for explaining our approach and to show the feasibility and effectiveness of dynamic task switch. Furthermore, VOMAS can be treated as a telerobotic architecture, and the network-load test shows that VOMAS requires less network load than direct control. Index Terms—Mobile robot, multirobot system (MRS), role <b>switch,</b> <b>software</b> mobile agent, task switch. I...|$|E
40|$|We {{applied the}} COSMIC-FFP method, the latest {{functional}} size measurement method, to 13 enhancement projects of our <b>switching</b> systems <b>software</b> ranging from 4 to 121 CFSUs, the units of COSMIC-FFP. In this paper, {{we describe the}} motivation {{we had to have}} decided to try to apply COSMIC-FFP, issues on its application to <b>switching</b> <b>software,</b> its measurement characteristics such as speed of measurement, relationship between functional size in CFSU and costs. We have good results from the linear regression analysis of relationship between CFSUs and costs. Factors that affected the results are also analyzed. 1...|$|R
40|$|Abstract. This paper {{presents}} {{a case study}} in the application of formal methods to the verification of communication protocols. We analyze one component block of telephone <b>switching</b> <b>software</b> developed in the SDL language at Alcatel Network Systems Romania. We use the IF toolset from VERIMAG Grenoble to build a state-transitio...|$|R
30|$|We {{evaluate}} {{the viability of}} MPI using a real SDN system. In this system, we deploy a controller, four hardware SDN <b>switches,</b> four <b>software</b> <b>switches,</b> a load balancer, and eight end hosts and two servers in a linear topology.|$|R
40|$|It {{is common}} in {{practice}} that many companies build complex and highly delicate business processes around their legacy (existing software) systems making it extremely difficult and costly to <b>switch</b> <b>software</b> systems or to change their business processes. Software re-engineering is an approach that takes legacy software that has become expensive to maintain or whose implementation is obsolete, and reconstructs it with current software technologies. The software re-engineering approach is important for recovering and reusing existing software assets, putting high software maintenance costs under control, and establishing a base for future software development. Top Hat, Inc. started developing its demand-response transportation software in 1994. Today, it is {{a vital part of}} their business. Unfortunately, it has become increasingly expensive to enhance its features and compete against their competitors. The design structure, code organization, and development platform of the legacy system make it difficult to debug, modify, and distribute to the end-user community. This report discusses the techniques and methodologies used to re-engineer Top Hat's demand-response transportation software. It also describes the benefits, challenges, and issues encountered while introducing good software development techniques, maintaining required functionality, and applying new technologies to the Top Hat's demand-response transportation software...|$|E
40|$|Demand {{for network}} {{programmability}} was recognized when development of protocolsslowed down due to network inflexibilities in 1980 s. Research speeded up andmany proposals {{were made to}} solve architectural issues during 2000 s. Academicworld put up an initiative to build up new programmable network architecturelater 2000 s. OpenFlow was born. In modern public network infrastructures {{the security of the}} network architectureis crucial to archive data confidentiality, integrity and authenticity, yet high availability. Many studies have shown that there are many security vulnerabilities andissues on current OpenFlow implementations and even in OpenFlow specificationitself. Many proposals have been made to enhance these known issues. In thisresearch, the scenario based security evaluation of the generic OpenFlow networkarchitecture was carried out using technology publications and literature. Thesecurity evaluation framework was used in security assessment. Proposed risk mitigation patterns were found to be effective on most of the casesfor all 13 identified and evaluated scenarios. Lack of mandatory encryption andauthentication in OpenFlow control channel were most critical risks on generallevel. OpenFlow specification should provide clear guidance how this should beimplemented to guarantee inter-operability between different vendors. Short termsolution is to use IPSec. Second critical issue was that bugs and vulnerabilitiesin OpenFlow controller and <b>switch</b> <b>software</b> are causing major risks for security. Proper quality assurance process, testing methods and evaluation are needed toenhance security on all phases of the software production. Current OpenFlow implementations are suffering poor security. Tolerable levelcan be reached by utilizing small enhancements. There are still many areas whichneed to be researched to archive solid foundation for software defined networks ofthe future...|$|E
50|$|Mellanox Technologies {{provides}} InfiniBand and Ethernet switches for servers {{and storage}} used in enterprise data centers and also makes its own integrated circuits {{to support the}} InfiniBand protocol. Mellanox offers interconnect products: adapters, <b>switches,</b> <b>software</b> and silicon {{for a range of}} markets including high-performance computing, enterprise data centers, Web 2.0, cloud, storage and financial services.|$|R
50|$|In {{information}} security, {{computer security}} and network security, an asset is any data, device, or other {{component of the}} environment that supports information-related activities. Assets generally include hardware (e.g. servers and <b>switches),</b> <b>software</b> (e.g. mission critical applications and support systems) and confidential information. Assets should be protected from illicit access, use, disclosure, alteration, destruction, and/or theft, resulting in loss to the organization.|$|R
50|$|The {{network was}} {{initially}} {{based upon a}} dedicated modular packet switch using DCC's TP 4000 communication processor hardware. The operating system and the packet <b>switching</b> <b>software</b> was developed by Telenet (later on GTE Telenet). At the time of PSS's launch this was in advance of both Telenet's own network and most others that used general purpose mini-computers as packet switches.|$|R
40|$|The prime {{goals of}} this project are (1) {{developing}} an automatic software design system that aims at reproducing human cognitive processes; (2) automating software design by shifting the prototyping and modifications to higher design levels rather than source code. This paper introduces an improved version of the experimental expert system CREATOR 2 / 3 for automatic design of <b>switching</b> <b>software.</b> Basic features of this system are: object-oriented (OO) representation of the design process knowledge, composed of design rules for detailing, and tacit knowledge; using multiple strategies in applying this knowledge; and integrating it with a SDL CASE tool. This leads to having a uniform modeling and advanced reasoning environment for software design. Experiments on designing <b>switching</b> <b>software</b> are reported. Presently, the CREATOR 2 / 3 system together with an SDL CASE tool offers 60 - 100 times the code expansion rate. 1 Introduction (1) Conventional CASE tools generally facilitate requirement ana [...] ...|$|R
5000|$|Nintendo <b>Switch</b> system <b>software,</b> the {{official}} firmware version and operating system for Nintendo Switch gaming console ...|$|R
5000|$|Hitachi {{designed}} a private network system for sale as a turnkey package to multi-national organizations. In {{addition to providing}} X.25 packet <b>switching,</b> message <b>switching</b> <b>software</b> was also included. Messages were buffered at the nodes adjacent to the sending and receiving terminals. Switched virtual calls were not supported, but {{through the use of}} [...] "logical ports" [...] an originating terminal could have a menu of pre-defined destination terminals.|$|R
40|$|A {{review of}} high speed {{computer}} architectures up to November 1978 is presented using the specific {{examples of the}} TI ASC, Burroughs BSP, CDS STAR- 100, CRI CRAY- 1, ICL DAP and FPS AP- 120 B. The architectural design solutions adopted by these difference computer are analysed in terms of memory size and bandwidth, vector processing style, scalar processing power, input/output and context <b>switching.</b> <b>Software</b> problems and the vectorization of FORT...|$|R
50|$|The Nintendo <b>Switch</b> system <b>software</b> is an updatable {{firmware}} {{and operating}} system {{used by the}} Nintendo Switch gaming console.|$|R
40|$|A review from November 1978 of {{high speed}} {{computer}} architectures is presented using the specific {{examples of the}} TI ASC, Burroughs BSP, CDC STAR- 100, CRI CRAY- 1, ICL DAP and FPS AP- 120 B. The architectural design solutions adopted by these different computers are analysed in terms of memory size and bandwidth, vector processing style, scalar processing power, input/output and context <b>switching.</b> <b>Software</b> problems and the vectorization of FORTRAN programs are briefly touched upon...|$|R
50|$|Aiding Madge's {{growth was}} the 1995 {{agreement}} with Cisco Systems, by then global networking leader, to incorporate Madge's Token Ring switches into Cisco's products and to license {{other parts of}} Madge's Token Ring technology for future Cisco designs. At the same time, Madge gained access to Cisco-developed LAN and WAN <b>switching</b> <b>software.</b> Following on the Cisco agreement, Madge also prepared to step up its manufacturing capacity, with a new facility in Ireland.|$|R
40|$|Abstract: This paper {{presents}} {{a case study}} in the application of formal methods to the verification of communication protocols. We analyze one component block of telephone <b>switching</b> <b>software</b> developed in the SDL language at Alcatel Network Systems Romania. We use the IF toolset from VERIMAG Grenoble to build a state-transition model of the system and verify selected properties. We present the steps performed for translation and verification and discuss the potential for automating the process and using it on a larger scale...|$|R
50|$|Newbridge {{quickly became}} a major market player in this area using the voice <b>switching</b> and <b>software</b> {{engineering}} expertise that was prevalent in the Ottawa area.|$|R
40|$|Fundamental {{changes are}} {{required}} for the British Library to continue to support RDS to HE libraries. A Steering Group has been established to agree and then recommend these changes to the sector. Problems caused by encryption continue to dog RDS processes and innovation, and can be felt in other areas such as digitisation. <b>Switching</b> <b>software</b> appears to offer a short-term solution for RDS, while a longer-term resolution will depend on publishers {{following the lead of}} the music industry. For digitisation, Google appears set on exerting tighter control over an ever-increasing amount of content...|$|R
2500|$|The Dvorak Simplified Keyboard is {{available}} {{out of the}} box on most operating systems, making <b>switching</b> through <b>software</b> very easy. [...] "Hardwired" [...] Dvorak keyboards are also available, though only from specialized hardware companies.|$|R
50|$|In June 2012, Infoblox {{released}} LINC, an open-source OpenFlow version 1.2 and 1.3 compliant <b>software</b> <b>switch.</b>|$|R
40|$|Modula {{is a new}} {{programming}} language for implementing dedicated, parallel systems. Following a systematic design technique, this paper illustrates the use of Modula {{for the design of}} a message switching communication system. A message switching system poses a number of interesting problems: a high degree of concurrent activity exists, a variety of IO devices need to be controlled, messages can have multiple destinations, and messages can be preempted. The strengths and weaknesses of Modula with respect to these specific problems and its utility as a general purpose language are evaluated. Key Words and Phrases: structured multiprogramming, concurrent systems, Modula, message <b>switching,</b> <b>software</b> design, processes, monitors, modular design. CR Categories: 3. 81, 4. 2, 4. 21, 4. ...|$|R
