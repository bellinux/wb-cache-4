0|20|Public
50|$|The Motif {{look and}} feel is {{distinguished}} by its use of square, chiseled, three-dimensional effects for its various user interface elementsmenus, buttons, <b>sliders,</b> text <b>boxes,</b> and the like. Motif's operation was designed to correspond closely with the then-familiar Microsoft Windows and OS/2's Presentation Manager interfaces, and Microsoft {{played a key role}} in designing the original style guide.|$|R
5000|$|Content of {{a window}} is defined with [...] "controls" [...] that are {{primitive}} GUI elements such as <b>sliders,</b> check <b>boxes,</b> text lines, buttons or graphics. The background or invisible areas {{of a window}} don't need to be saved in a separate bitmap buffer. If an area needs to be restored on the display, its contents will be redrawn instead. This makes SymbOS GUI much more memory-friendly compared to most other 8-bit GUIs.|$|R
50|$|Color tools {{can vary}} in their interface. Some may use <b>sliders,</b> buttons, text <b>boxes</b> for color values, or direct manipulation. Often a two {{dimensional}} square is {{used to create a}} range of color values (such as lightness and saturation) that can be clicked on or selected in some other manner. Drag and drop, color droppers, and various other forms of interfaces are commonly used as well.|$|R
50|$|Max is {{typically}} learned through acquiring a vocabulary {{of objects and}} how they function within a patcher; for example, the metro object functions as a simple metronome, and the random object generates random integers. Most objects are non-graphical, consisting only of an object's name and several arguments-attributes (in essence class properties) typed into an object box. Other objects are graphical, including <b>sliders,</b> number <b>boxes,</b> dials, table editors, pull-down menus, buttons, and other objects for running the program interactively. Max/MSP/Jitter comes with about 600 of these objects as the standard package; extensions to the program can be written by third-party developers as Max patchers (e.g. by encapsulating some of the functionality of a patcher into a sub-program that is itself a Max patch), or as objects written in C, C++, Java, or JavaScript.|$|R
40|$|Meta search engines, {{collection}} fusion, metadata. We {{present a}} novel meta-search engine called DYNIQX for metadata based cross search {{in order to}} study the effect of metadata in collection fusion. DYNIQX exploits the availability of metadata in academic search services such as PubMed and Google Scholar etc for fusing search results from heterogeneous search engines. Furthermore, metadata from these search engines are used for generating dynamic query controls such as <b>sliders</b> and tick <b>boxes</b> etc for users to filter search results. ...|$|R
50|$|A {{new class}} of modern tools are {{represented}} by web-based applications. For example, Shiny is a web-based tool developed by Rstudio, an R IDE. With a Shiny app, a modeller has the advantage to represent any which way he or she chooses to represent the predictive model while allowing the user some control. A user can choose a combination of characteristics of interest via <b>sliders</b> or input <b>boxes</b> and results can be generated, from graphs to confidence intervals to tables and various statistics of interests. However, these tools often require a server installation of Rstudio.|$|R
40|$|The {{main focus}} of this {{contribution}} is the description of mechanisms for an intuitive input of user-data with a direct response to gain fast parameter selection. To build polymorph input methods for different parameter classes, a database containing knowledge about each operator is needed. This information about the syntactical and semantical structure is used to create adequate dialog elements, like <b>sliders,</b> list <b>boxes,</b> text fields, etc., each one responsible for a distinct parameter class. In addition higher-level semantics are used to aggregate data types, e. g., the user can draw a rectangle interactively, instead of only inputting the coordinates of its corners. Depending on the context, the user can also change certain subsets of the knowledge about the operator to fit special needs. Incremental computation {{of the results of}} an operator by successively expanding regions of interest is used to gain direct feedback for every change of parameter values. So by dragging a slider for [...] ...|$|R
40|$|We {{present a}} novel meta-search engine called DYNIQX for {{metadata}} based cross search {{in order to}} study the effect of metadata in collection fusion. DYNIQX exploits the availability of metadata in academic search services such as PubMed and Google Scholar etc for fusing search results from heterogeneous search engines. Furthermore, metadata from these search engines are used for generating dynamic query controls such as <b>sliders</b> and tick <b>boxes</b> etc for users to filter search results. The work reported in this paper is {{funded in part by}} the JISC (Joint Information Systems Committee) funded DYNIQX (Metadata-based DYNamIc Query Interface for Cross(X) -searching content resources) project...|$|R
40|$|The {{effect of}} {{metadata}} in collection fusion {{has not been}} sufficiently studied. In response to this, we present a novel meta-search engine called Dyniqx for metadata based cross search. Dyniqx exploits the availability of metadata in academic search services such as PubMed and Google Scholar etc for fusing search results from heterogeneous search engines. In addition, metadata from these search engines are used for generating dynamic query controls such as <b>sliders</b> and tick <b>boxes</b> etc which are used by users to filter search results. Our preliminary user evaluation shows that Dyniqx can help users complete information search tasks more efficiently and successfully than three well known search engines respectively...|$|R
40|$|Abstract—This paper {{presents}} scented widgets, graphical {{user interface}} controls enhanced with embedded visualizations that facilitate navigation in information spaces. We describe design guidelines for adding visual cues to common user interface widgets such as radio buttons, <b>sliders,</b> and combo <b>boxes</b> and contribute a general software framework for applying scented widgets within applications with minimal modifications to existing source code. We provide a number of example applications and describe a controlled experiment which finds that users exploring unfamiliar data make up to twice as many unique discoveries using widgets imbued with social navigation data. However, these differences equalize as familiarity with the data increases. Index Terms—Information visualization, user interface toolkits, information foraging, social navigation, social data analysis. ...|$|R
40|$|In {{this paper}} we {{describe}} the design and implementation of a system {{for the management of}} complex interactive graphical dynamical simulations. The main objective of the system is to provide tools which enable a graphical simulation to be built with minimum effort. These tools include routines for building interfaces (panels consisting of buttons, <b>sliders,</b> type in <b>boxes,</b> etc.), arranging the simulation workspace, describing complex 3 D objects in terms of predefined (or user defined) primitives, and providing objects with properties used in conjunction with lighting models. The need for such a management system is supported by the facts that both the development effort and the extent of machine-specific knowledge needed to successfully implement an arbitrary graphical simulation is significant. It is the aim of the Graphical Simulation Management System (GSMS) to reduce these burdens and place the power of 3 D simulation within easy reach. We have presented several examples of dynamical simulations in which the power and diversity of the management system is demonstrated...|$|R
40|$|The {{classical}} orbital {{elements of}} an orbit are eccentricity, angular momentum, inclination, right ascension of ascending node, true anomaly, and argument of perigee. These six parameters define an orbit. Using MATLAB® to model a satellite orbiting Earth in three dimensions, a {{graphical user interface}} was created to allow a user to manipulate the orbital elements to desired quantities. In doing so, each parameter’s impact on the orbit is visually displayed. This furthers the {{understanding of how the}} parameters are linked to the orbit. When the interface is first opened, the default circular orbit has a range of 20, 000 kilometers, an angular momentum of about 133, 929 km 2 /s, an inclination of 45 °, a true anomaly of 30 °, and right ascension of ascending node and argument of perigee of 0 °. This default orbit can easily be changed by <b>sliders</b> and input <b>boxes</b> on the interface. The user-friendly interface allows for anyone to better understand an orbit and its parameters...|$|R
40|$|MATLAB App Designer is {{a feature}} that allows MATLAB code to be {{packaged}} into an interactive software. The software can be shared on any computer without the trouble of having to install MATLAB or even knowing programming knowledge {{to be able to}} operate the software. This books provides hands on approach to guide learners in developing the software from scratch using MATLAB App Designer. It covers a wide variety on standard graphical component (radio button, tables, button, check <b>boxes,</b> <b>sliders</b> and many others) and how to utilize its properties and function in deploying end user software. Source code for all the example program can be studied and understand by student easily. This equips learners with the fundamental and required skills for developing the application on their own. Added that, the example code can be reusable with other case problem or application similar to the hands on example. The key to mastering any application development software is to practice, so that you are familiarize with the components and understand its properties and behavior. In simple word, knowing how each components work is essential. This is where this book benefits learner that needs to develop software application using MATLAB...|$|R
40|$|The Principal Component Analysis (PCA) is {{a widely}} used method of {{reducing}} the dimensionality of high-dimensional data, often followed by visualizing two of the components on the scatterplot. Although widely used, the method is lacking an easy-to-use web in-terface that scientists with little programming skills could use to make plots of their own data. The same applies to creating heatmaps: {{it is possible to}} add conditional formatting for Excel cells to show col-ored heatmaps, but for more advanced features such as clustering and experimental annotations, more sophisticated analysis tools have to be used. We present a web tool called ClustVis that aims to have an intuitive user interface. Users can upload data from a simple delimited text file that can be created in a spreadsheet program. It is possible to modify data processing methods and the final appearance of the PCA and heatmap plots by using drop-down menus, text <b>boxes,</b> <b>sliders</b> etc. Appropriate defaults are given to reduce the time needed by the user to specify input parameters. As an output, users can download PCA plot and heatmap in one of the pre-ferred file formats. This web server is freely available a...|$|R
40|$|Most {{commercial}} CAAD applications have {{online communities}} of end users, through blogs, discussion forums and learning portals. On many occasions, questions {{lead to the}} conclusion that the software can only provide the desired functionality using scripting or programming, to fill in the gaps of the software feature set. However, more than once, people suggest that architects are not programmers and that they should not be responsible for adding this functionality. Similarly, when guiding students through some of their technical design studio problems, a comparable reaction is noticed. This is especially remarkable, considering the fact that these students had prior programming courses, as part of their Bachelor of Architecture curriculum. There are many different advantages of embedding programming skills into the curriculum of the architect. Burry (1997) witnessed the influence of programming on the design studio work. While the examples from the article might be dated, the relation between programming and design studio assignments is still non-existent in many schools, nowadays. A notable counter-example can be read in (Fricker et al, 2008), describing the use of Processing (Reas and Fry 2007) as programming platform within the architectural courses. Programming should be part of the main architectural skills, albeit not necessarily in the sense of writing code. The design brief for a building project is commonly described as a series of constraints, parameters and a listing of the desired functionality. While the translation of these constraints into a design usually occurs mentally, there are benefits to transfer this process more explicitly, through the application of scripts or parametric systems, directly in the early stages of the design. The problem becomes more complex as the solution under development will have to be continuously adapted. The programmatic design process is not linear, but rather evolves through a cyclic process of modifications to the solution, not unlike the architectural design process. The last few years, however, have displayed a growing number of design tools where the creation of procedural systems can be performed more visually. Examples include Bentley Generative Components, as discussed in (Aish 2005) and Grasshopper for McNeel Rhino 3 D. The elaborate writing of code is wholly or partly replaced with the visual metaphor of connecting small blocks of independent functionality into a whole system or procedure. Through the application of Graphical User Interface items or widgets, designers can even add interaction to their design, allowing exploration of different alternatives through the modification of parameters controlled by <b>sliders,</b> check <b>boxes</b> or other widgets. Their visual appr! oach assists in creating a functional solution, while at the same time being less dependent on strict syntax and more easily adaptable during the development. Looking at the individual aspects of programming within CAAD and 3 D applications, all the pieces of the puzzle seem to be available, in the form of powerful modeling kernels, implementations of diagram-like interfaces to manage programmed logic, BIM functionality and extensive architectural libraries. However, right now, they seem to evolve almost independently, applied in different applications. status: publishe...|$|R
40|$|The {{test battery}} was {{developed}} to provide a standard procedure for cursor control device evaluation. The software was built in Visual Basic and consists of nine tasks and a main menu that integrates the set-up of the tasks. The tasks can be used individually, or in a series defined in the main menu. Task 1, the Unidirectional Pointing Task, tests the speed and accuracy of clicking on targets. Two rectangles with an adjustable width and adjustable center- to-center distance are presented. The task is to click {{back and forth between}} the two rectangles. Clicks outside of the rectangles are recorded as errors. Task 2, Multidirectional Pointing Task, measures speed and accuracy of clicking on targets approached from different angles. Twenty-five numbered squares of adjustable width are arranged around an adjustable diameter circle. The task is to point and click on the numbered squares (placed on opposite sides of the circle) in consecutive order. Clicks outside of the squares are recorded as errors. Task 3, Unidirectional (horizontal) Dragging Task, is similar to dragging a file into a folder on a computer desktop. Task 3 requires dragging a square of adjustable width from one rectangle and dropping it into another. The width of each rectangle is adjustable, as well as the distance between the two rectangles. Dropping the square outside of the rectangles is recorded as an error. Task 4, Unidirectional Path Following, is similar to Task 3. The task is to drag a square through a tunnel consisting of two lines. The size of the square and the width of the tunnel are adjustable. If the square touches any of the lines, it is counted as an error and the task is restarted. Task 5, Text Selection, involves clicking on a Start button, and then moving directly to the underlined portion of the displayed text and highlighting it. The pointing distance to the text is adjustable, as well as the to-be-selected font size and the underlined character length. If the selection does not include all of the underlined characters, or includes non-underlined characters, it is recorded as an error. Task 6, Multi-size and Multi-distance Pointing, presents the participant with 24 consecutively numbered buttons of different sizes (63 to 163 pixels), and at different distances (60 to 80 pixels) from the Start button. The task is to click on the Start button, and then move directly to, and click on, each numbered target button in consecutive order. Clicks outside of the target area are errors. Task 7, Standard Interface Elements Task, involves interacting with standard interface elements as instructed in written procedures, including: drop-down menus, <b>sliders,</b> text <b>boxes,</b> radio buttons, and check boxes. Task completion time is recorded. In Task 8, a circular track is presented with a disc in it at the top. Track width and disc size are adjustable. The task is to move the disc with circular motion within the path without touching the boundaries of the track. Time and errors are recorded. Task 9 is a discrete task that allows evaluation of discrete cursor control devices that tab from target to target, such as a castle switch. The task is to follow a predefined path and to click on the yellow targets along the path...|$|R
40|$|Technical {{developments}} in the automotive industry are making functionally-relevant components increasingly sensitive towards particulate contamination - so-called residual contamination. Examples of such failures include clogged injection system nozzles, jammed <b>sliders</b> in gear <b>boxes,</b> damaged bearing surfaces, leaks in hydraulic and pneumatic sealing systems and shorts in electronic control systems. As a result, particulate residues present on contamination-sensitive components need to be analyzed and recorded in compliance with VDA- 19. To evaluate particles on component surfaces, {{the first step to}} is gain information about the quantity and size of particles present. Knowledge of the mechanical and electrical characteristics of the particles is also essential in order to assess failure risks. For example, electronic components only react critically to electrically-conductive particles; on the other hand, mechanical aggregates are only damaged by particles possessing a certain degree of hardness. Therefore, to fully describe component cleanliness, not only is it necessary to know the size and count of particles but also - depending on the application at hand - their mechanical or electrical material properties. The current state-of-the-art method applied is to use scanning electron microscope in combination with energy-dispersive X-ray analysis (SEM-EDX). However, this method is technically complex and only supplies information about the element distribution of particles. The material properties of a material can only be estimated from its molecular structure. In order to develop a technically simple method for assessing the material properties of residual particles, it is necessary to observe particle sources in automotive industry and to group the resulting particles into material types. Simplified material classes were then derived from the material groups based on the relevant material properties of residual contamination particles typically found in practice. Thus, as well as determining the size and count of residual contamination particles, the damage potential of such particles can be completely assessed by classifying them into appropriate material classes. To select a measuring principle to form the basis of the material classification, analysis techniques were compared with one another considering the requirements of automotive industry ascertained. This showed clearly that luminescence spectroscopy fulfilled all requirements. The principle enables direct information about the material class and thus the material properties of the particles to be gained. Furthermore, luminescence spectroscopy does not require any expensive devices and can be combined with light microscopy to ascertain particle size and count. Based on the measuring principle, a luminescence spectroscope was then designed and implemented in a test set-up to classify the materials forming the particles. In the sample chamber, on an analysis filter inactive to luminescence particles are illuminated by a beam of ultraviolet light between 360 and 370 nm. The luminescence signal is recorded simultaneously by a camera and a spectrometer and subsequently analyzed. The camera serves to localize the particles and the spectrometer records the wavelengths of the dispersive intensity of the luminescence signals. Gray value images of the particles on the analysis filter are also recorded by the camera under visible illumination to enable particle size and count to be ascertained...|$|R
40|$|Masteroppgave i informasjons- og kommunikasjonsteknologi 1999 - Høgskolen i Agder, GrimstadThis report {{investigates the}} {{development}} of multi-player WebSims using the Powersim Metro technology. A WebSim is a simulation of some phenomenon that can be played as a game on the Internet or Intranet. The WebSim front-end is the user interface to a simulation model that has been developed with a system dynamics modeling tool like Powersim Constructor. The WebSim front-end is an interactive interface that allows a user to enter inputs to the underlying simulation model and start the simulation. The user can {{see the results of}} the simulation in form of time-graphs or time-tables. WebSims can be single-player or multi-player games. This report is concerned with multi-player WebSims. The two main issues that this report covers are: · What is the process for development of a multi-player WebSim; · How robust this technology is regarding working on different computerplatforms and browsers; To answer these two questions, I have developed a multi-player WebSim called "OrgSim" and tested it in a number of configurations. This development was done as a collaboration with the Business Modelling Team at BT Laboratories, UK. In OrgSim four players can participate in the game and compete with each other. OrgSim consists of two windows. One is a wizard window and the other one is the main window where the user will play. The wizard window collects some information from the user. Powersim Metro Session Manager allows for running several sessions of OrgSim. Therefore in the wizard window the user has the option to either create a new session or to join an existing running session. After gathering the other needed information in the wizard window (like the user's name and the session name), the main window is shown to the user. In the main window the user will commence the play. The main window consists of several tab panels which time-graphs, time-tables, <b>sliders,</b> buttons, text <b>boxes,</b> labels and etc are placed on these tab panels. Objects like time-graphs and time-tables are used to show the results of the simulation and objects like text <b>boxes</b> and <b>sliders</b> enter the user inputs. The main conclusions drawn from the research are as follows: · Using Powersim Metro to develop a multi-player WebSim is not a complicated process and rather it follows a well defined process; · Although Powersim Metro facilitates {{the development of}} a multi-player Websim, but considerable care and some ingenuity are needed in the development process; · The challenge in developing a multi-player Websim (like OrgSim) lies primarily in implementing the WebSim front-end rather than in usage of the Powersim Metro tools; · In general the multi-player simulator OrgSim works and is reasonably robust. However, some robustness and reliability problems remain which would require further development to address; · OrgSim runs on both browsers IE 4. 01 (or later versions) and NC 4. 08 (or later versions); · OrgSim front-end has an interactive interface that provides the player with both input and output facilities (input objects like text <b>boxes</b> and <b>sliders</b> to enter the inputs and output objects like time-graphs and time-table to show the results). OrgSim also provides a simple communication between the players ("hurry up" messages can be sent between the players); · OrgSim has some undesired features that the cause for some of these features are not known for certain and further investigation and research are needed to clarify the problems...|$|R
40|$|This report {{investigates the}} {{development}} of multi-player WebSims using the Powersim Metro technology. A WebSim is a simulation of some phenomenon that can be played as a game on the Internet or Intranet. The WebSim front-end is the user interface to a simulation model that has been developed with a system dynamics modeling tool like Powersim Constructor. The WebSim front-end is an interactive interface that allows a user to enter inputs to the underlying simulation model and start the simulation. The user can {{see the results of}} the simulation in form of time-graphs or time-tables. WebSims can be single-player or multi-player games. This report is concerned with multi-player WebSims. The two main issues that this report covers are: · What is the process for development of a multi-player WebSim; · How robust this technology is regarding working on different computerplatforms and browsers; To answer these two questions, I have developed a multi-player WebSim called "OrgSim" and tested it in a number of configurations. This development was done as a collaboration with the Business Modelling Team at BT Laboratories, UK. In OrgSim four players can participate in the game and compete with each other. OrgSim consists of two windows. One is a wizard window and the other one is the main window where the user will play. The wizard window collects some information from the user. Powersim Metro Session Manager allows for running several sessions of OrgSim. Therefore in the wizard window the user has the option to either create a new session or to join an existing running session. After gathering the other needed information in the wizard window (like the user's name and the session name), the main window is shown to the user. In the main window the user will commence the play. The main window consists of several tab panels which time-graphs, time-tables, <b>sliders,</b> buttons, text <b>boxes,</b> labels and etc are placed on these tab panels. Objects like time-graphs and time-tables are used to show the results of the simulation and objects like text <b>boxes</b> and <b>sliders</b> enter the user inputs. The main conclusions drawn from the research are as follows: · Using Powersim Metro to develop a multi-player WebSim is not a complicated process and rather it follows a well defined process; · Although Powersim Metro facilitates {{the development of}} a multi-player Websim, but considerable care and some ingenuity are needed in the development process; · The challenge in developing a multi-player Websim (like OrgSim) lies primarily in implementing the WebSim front-end rather than in usage of the Powersim Metro tools; · In general the multi-player simulator OrgSim works and is reasonably robust. However, some robustness and reliability problems remain which would require further development to address; · OrgSim runs on both browsers IE 4. 01 (or later versions) and NC 4. 08 (or later versions); · OrgSim front-end has an interactive interface that provides the player with both input and output facilities (input objects like text <b>boxes</b> and <b>sliders</b> to enter the inputs and output objects like time-graphs and time-table to show the results). OrgSim also provides a simple communication between the players ("hurry up" messages can be sent between the players); · OrgSim has some undesired features that the cause for some of these features are not known for certain and further investigation and research are needed to clarify the problems...|$|R
40|$|Die technische Entwicklung in der Automobilindustrie hat in jüngster Vergangenheit eine verstärkte Anfälligkeit funktionsrelevanter Komponenten gegenüber Partikelverunreini¬gungen – sog. Restschmutz – mit sich gebracht. Beispiele für diese Schadensfälle sind Verstopfen von Düsen im Einspritzsystem, Verklemmen von Schiebern im Getriebe, Beschädigung von Lagerlaufflächen, Leckagen in hydraulischen und pneumatischen Dichtungs¬systemen sowie Kurzschlüsse in elektro¬nischen Steuersystemen. Aus diesem Grund müssen partikuläre Rückstände auf sauberkeitskritischen Komponenten gemäß VDA- 19 messtechnisch erfasst und analysiert werden. Erstes Kriterium zur Bewertung der Partikel auf Bauteiloberflächen ist deren Anzahl und Größe. Darüber hinaus sind die mechanischen und elektrischen Eigenschaften der Partikel für das Eintreten eines Schadensfalls entscheidend. Elektronische Komponenten reagieren nur kritisch auf elektrisch leitende Partikel. In mechanischen Aggregaten hingegen können lediglich Partikel mit einer gewissen Härte zu Beschädigungen führen. Zur vollständigen Beschreibung der Bauteilsauberkeit ist somit die Bestimmung der Anzahl und Größe der Partikel notwendig und – je nach Anwendungsfall – deren mechanische oder elektrische Materialeigenschaften. Das derzeitige Verfahren nach Stand der Technik stellt die energiedispersive Röntgenanalyse am Rasterelektronen¬mikroskop (REM-EDX) dar. Dieses Verfahren ist jedoch technisch sehr aufwändig und liefert darüber hinaus nur die Elementverteilung des Materials. Die Materialeigenschaften, die sich aus der Molekülstruktur des Materials ergeben, können somit nur abgeschätzt werden. Zur Entwicklung eines technisch einfachen Verfahrens, zur direkten Bewertung von Partikeln entsprechend ihrer Materialeigenschaften, müssen zunächst die in der Automobilindustrie auftretenden Partikelquellen betrachtet und die daraus resultierenden Partikel nach Werkstoffen gruppiert werden. Anhand der relevanten Material¬eigen¬schaften der praxistypischen Restschmutzpartikel werden aus den Werkstoffgruppen vereinfachte Materialklassen abgeleitet. Zur vollständigen Bestimmung des Schädigungs¬potenzials von Restschmutzpartikeln ist somit neben der Größen- und Anzahlbestimmung lediglich deren Einordnung in die zugehörige Materialklasse notwendig. Zur Auswahl des Messprinzips, auf dessen Grundlage die Materialklassifizierung erfolgt, wurden Analyseverfahren anhand der Anforderungen der Automobilindustrie einander gegenübergestellt. Durch diese Betrachtung wurde ersichtlich, dass die Lumineszenzspektroskopie die aufgestellten Anforderungen komplett erfüllt. Dieses Prinzip ermöglicht eine direkte Aussage über die Materialklasse und somit die Materialeigenschaften der Partikel. Des Weiteren bedarf die Lumineszenzspektroskopie keiner teuren Gerätetechnik und ist mit der Lichtmikroskopie zur Bestimmung der Partikelgröße und -anzahl kombinierbar. Technical {{developments}} in the automotive industry are making functionally-relevant components increasingly sensitive towards particulate contamination – so-called residual contamination. Examples of such failures include clogged injection system nozzles, jammed <b>sliders</b> in gear <b>boxes,</b> damaged bearing surfaces, leaks in hydraulic and pneumatic sealing systems and shorts in electronic control systems. As a result, particulate residues present on contamination-sensitive components need to be analyzed and recorded in compliance with VDA- 19. To evaluate particles on component surfaces, {{the first step to}} is gain information about the quantity and size of particles present. Knowledge of the mechanical and electrical characteristics of the particles is also essential in order to assess failure risks. For example, electronic components only react critically to electrically-conductive particles; on the other hand, mechanical aggregates are only damaged by particles possessing a certain degree of hardness. Therefore, to fully describe component cleanliness, not only is it necessary to know the size and count of particles but also – depending on the application at hand – their mechanical or electrical material properties. The current state-of-the-art method applied is to use scanning electron microscope in combination with energy-dispersive X-ray analysis (SEM-EDX). However, this method is technically complex and only supplies information about the element distribution of particles. The material properties of a material can only be estimated from its molecular structure. In order to develop a technically simple method for assessing the material properties of residual particles, it is necessary to observe particle sources in automotive industry and to group the resulting particles into material types. Simplified material classes were then derived from the material groups based on the relevant material properties of residual contamination particles typically found in practice. Thus, as well as determining the size and count of residual contamination particles, the damage potential of such particles can be completely assessed by classifying them into appropriate material classes. To select a measuring principle to form the basis of the material classification, analysis techniques were compared with one another considering the requirements of automotive industry ascertained. This showed clearly that luminescence spectroscopy fulfilled all requirements. The principle enables direct information about the material class and thus the material properties of the particles to be gained. Furthermore, luminescence spectroscopy does not require any expensive devices and can be combined with light microscopy to ascertain particle size and count. Based on the measuring principle, a luminescence spectroscope was then designed and implemented in a test set-up to classify the materials forming the particles. In the sample chamber, on an analysis filter inactive to luminescence particles are illuminated by a beam of ultraviolet light between 360 and 370 nm. The luminescence signal is recorded simultaneously by a camera and a spectrometer and subsequently analyzed. The camera serves to localize the particles and the spectrometer records the wavelengths of the dispersive intensity of the luminescence signals. Gray value images of the particles on the analysis filter are also recorded by the camera under visible illumination to enable particle size and count to be ascertained. The test method defines the procedure for assessing the material class using the test set-up. Materials were classified by way of the luminescence spectra measured. The spectral variables of the central wavelength CWL, full width at half maximum FWHM and band symmetry at half maximum SFWHM were calculated from the wavelengths of dispersive intensity values. As characteristic value ranges can be assigned to each material class, materials can be classified by comparing the spectral variables recorded with the characteristic value ranges for each material class. The test method also enables particle sizes and counts to be ascertained using the optical camera system of the test set-up. To assess the method developed particles of known size and material typically found in manufacturing in the automotive industry were utilized. The quantity, size and material class of the particles on the test analysis filters were ascertained by applying the inspection method and test set-up. The suitability of the method for determining particle size, count and material class was then verified by comparing the test results with the particles used...|$|R

