0|1028|Public
40|$|Despite the {{substantial}} {{contribution to the}} software industry by small and medium enterprises purchasing <b>software</b> package <b>upgrades,</b> to date there has been minimal research on the topic. Most businesses rely on packaged software for administrative and many core business functions. The practitioner press reports that managers experience frustration due to the frequency of <b>software</b> <b>upgrade</b> <b>releases.</b> After reviewing the diffusion of innovation literature, factors thought to influence the likelihood to purchase <b>software</b> <b>upgrades</b> were identified: business characteristics, innovativeness, relative advantage, external influences, complexity of purchase decision, and compatibility. A multi-method approach explored these factors. Although the analysis demonstrated that innovativeness, and to a much lesser extent, potential relative advantage and complexity influenced the likelihood to <b>upgrade</b> <b>software,</b> the fit of the resultant model accounted for much less variation than expected. The inconclusive analysis has called into question the efficacy of diffusion of innovation theory to explain <b>software</b> <b>upgrade</b> behaviour...|$|R
40|$|Despite the {{substantial}} {{contribution to the}} software industry by small and medium sized businesses purchasing <b>software</b> package <b>upgrades,</b> to date there has been minimal research on the topic. Most businesses rely on packaged software for administrative and many core business functions. The practitioner press reports that managers experience frustration due to the frequency of <b>software</b> <b>upgrade</b> <b>releases.</b> After reviewing the diffusion of innovation literature, factors thought to influence the likelihood to purchase <b>software</b> <b>upgrades</b> were identified: business characteristics, innovativeness, relative advantage, external influences, complexity of purchase decision, and compatibility. A mixture of qualitative and quantitative methods was used to further explore {{the factors that influence}} the decision to <b>upgrade</b> <b>software</b> in small and medium sized Australian businesses. The responses to ten in-depth interviews were used to develop a questionnaire which was mailed to a five thousand small and medium sized Australian businesses. A number of factors were identified through exploratory factor analysis and these were further examined using structural equation modelling to determine which factors contributed significantly to the decision to <b>upgrade</b> <b>software.</b> The analysis concluded that innovativeness of the decision maker, the perceived lack of control in the upgrade decision and the complexity of the upgrade decision had a small but significant influence on the likelihood to <b>upgrade</b> <b>software...</b>|$|R
40|$|Project Report Submitted in partial {{fulfillment}} of the requirements for the degree of Bachelor of EXTC Engineering. Operation and Maintenance System(OMS) has being {{an integral part of}} the Radio Access Network (RAN) pertaining to 3 G telecommunication standard plays a vital role in managing the network. The systematic approach helps to uncover several defects related to system <b>software</b> <b>release</b> <b>upgrade</b> & back out, abnormal process terminations, shared memory violation and unusual process size growth. These diagnosis results have been evaluated through simulation studies and are compared with defined benchmarks of the field trial data in order to ensure overall performance stability, high quality and robustness of the OMS system...|$|R
5000|$|Partly rolling {{distribution}} which mixes {{rolling and}} non-rolling development models. Examples are PCLinuxOS, Chakra Linux, Aurora OS and Toorox Linux, but also (to a much lesser extent) distributions like Fedora and Ubuntu which allow rolling <b>upgrades</b> between <b>releases</b> (instead of re-installing) {{and try to}} supply the latest stable application releases — however, Fedora and Ubuntu are not currently listed as rolling distributions in this article, since (although they are both capable of rolling <b>software</b> <b>upgrades)</b> they do not use a rolling release software development model.|$|R
30|$|Assessing <b>software</b> <b>upgrades.</b>|$|R
50|$|Ballistic missiles:1000 km after <b>software</b> <b>upgrade.</b>|$|R
40|$|This paper proposes {{using an}} {{economical}} model {{in making the}} case for <b>software</b> <b>upgrade</b> at or-ganizations in general and at educational institutions in particular. Cost-benefit Analysis (CBA) is a model widely used in economics by various organizations to select among alternatives and to justify making certain investments. Spending money or investing in <b>software</b> <b>upgrade</b> costs may need to be justified in some cases. In these cases, {{it would be helpful to}} use a framework such as the CBA to justify and make the case for investing in <b>software</b> <b>upgrade.</b> The paper intends to help with determining the feasibility (or lack of it) of paying for <b>software</b> <b>upgrade</b> by introducing this framework. The main contribution of this paper lie in the introduction of a framework that can be used by academic institutions when tackling a decision or contemplating the purchase of software up-grades. Such a framework can then be systematically applied to justify and make the case for or against purchasing <b>software</b> <b>upgrade.</b> A secondary contribution for the paper is to suggest meth-ods for converting factors influencing <b>software</b> <b>upgrades</b> into monetary values so to be able to plug values in the proposed framework. To achieve both objectives, the paper articulates the fac-tors that stand for and against the purchase of technology upgrade. It then suggests ways convert these factors into monetary values. The final contribution of the paper is the introduction of the framework that is developed along the CBA model so it can be used when discussing investing in <b>software</b> <b>upgrade...</b>|$|R
25|$|JA 37C: Upgrade {{of older}} JA 37, {{avionics}} and <b>software</b> <b>upgrade.</b>|$|R
50|$|Nvidia <b>released</b> SHIELD Portable <b>Software</b> <b>Upgrade</b> 106 on September 3, 2015.|$|R
50|$|Nvidia <b>released</b> SHIELD Portable <b>Software</b> <b>Upgrade</b> 110 on July 6, 2016.|$|R
50|$|JA 37C: Upgrade {{of older}} JA 37, {{avionics}} and <b>software</b> <b>upgrade.</b>|$|R
50|$|Technical Category 1: Subscriber Base - Portable/mobile radios, control/base stations, <b>software,</b> <b>upgrades,</b> etc.|$|R
5000|$|Included in the Samsung Omnia SCH-i910 (for Verizon Wireless) CF03 <b>software</b> <b>upgrade</b> http://ars.samsung.com/customer/usa/jsp/faqs/faqs_view.jsp?SITE_ID=22&PG_ID=557&PROD_SUB_ID=561&PROD_ID=1360&AT_ID=157996 ...|$|R
5000|$|Included in the Samsung Saga SCH-i770 (for Verizon Wireless) CE07 <b>software</b> <b>upgrade</b> http://ars.samsung.com/customer/usa/jsp/faqs/faqs_view.jsp?SITE_ID=22&PG_ID=557&PROD_SUB_ID=561&PROD_ID=1359&AT_ID=156313 ...|$|R
5000|$|MyLink <b>software</b> <b>upgrades</b> {{that users}} can {{download}} online {{and transfer to}} the vehicle ...|$|R
50|$|Network-element <b>software</b> <b>upgrades</b> {{are done}} mostly through the SONET/SDH {{management}} network in modern equipment.|$|R
5000|$|... 23 September 2010: a {{firmware}} upgrade (to 2.1-update1) and a <b>software</b> <b>upgrade</b> (to VS740ZV8) ...|$|R
5000|$|... 2009: Release 9, a {{hardware}} and <b>software</b> <b>upgrade</b> that was certified in April 2009.|$|R
40|$|The DØ {{detector}} underwent {{an upgrade}} to its silicon vertex detector and triggering systems {{during the transition}} from Run IIa to Run IIb to maximize its ability to fully exploit Run II at the Fermilab Tevatron. This thesis describes improvements made to the tracking and vertexing algorithms used by the high level trigger in both Run IIa and Run IIb, {{as well as a}} search for resonant di-J/ψ states using both Run IIa and Run IIb data. Improvements made to the tracking and vertexing algorithms during Run IIa included the optimization of the existing tracking software to reduce overall processing time and the certification and testing of a new <b>software</b> <b>release.</b> <b>Upgrades</b> made to the high level trigger for Run IIb included {{the development of a new}} tracking algorithm and the inclusion of the new Layer 0 silicon detector into the existing software. The integration of Layer 0 into the high level trigger has led to an improvement in the overall impact parameter resolution for tracks of ∼ 50 %. The development of a new parameterization method for finding the error associated to the impact paramete...|$|R
40|$|Abstract — The {{goal of the}} guarded <b>software</b> <b>upgrading</b> (GSU) {{framework}} is to minimize mission performance loss due to onboard <b>software</b> <b>upgrading</b> activities and that due to system failure caused by residual faults in an upgraded version. We exploit inherent system resource redundancies as the means of fault tolerance to meet the development cost and onboard resource constraints. Furthermore, we devise a message-driven confidence-driven protocol t...|$|R
40|$|This paper reports {{findings}} from a two-year study to identify Lean practices for deriving software requirements from aerospace system level requirements, {{with a goal}} towards improving the <b>software</b> <b>upgrade</b> value stream. The study was undertaken {{as part of the}} MIT Lean Aerospace Initiative. Three detailed case studies and 128 surveys collected from ten "successful" mission critical aerospace <b>software</b> <b>upgrade</b> programs support seven major findings...|$|R
40|$|We {{present in}} this paper an {{extension}} of the messagedriven confidence-driven framework that we developed for onboard guarded <b>software</b> <b>upgrading.</b> The purpose of this work is to provide the framework with the capability of protecting distributed <b>software</b> <b>upgrades</b> that involve messagepassing interface changes. To achieve this goal, we propose an approach to clustering the components involved in <b>software</b> <b>upgrades</b> and those involved in message-passing interface changes, such that from outside the cluster all those components can be perceived collectively as one virtual low-confidence component. Moreover, we develop a confidence-driven mechanism that enables combined use of sender- and receiver-side message logging for efficient, fine-grained error containment and recovery. The paper provides a detailed algorithm description...|$|R
5000|$|CAT-iq 3.0 - [...] "Internet Ready" [...] (ETSI TS 102 527-4): <b>software</b> <b>upgrade</b> {{over the}} air (SUOTA) ...|$|R
50|$|Standard Edition - Menu based configuration. No CLI access available. Could be <b>software</b> <b>upgraded</b> to Enterprise Edition.|$|R
25|$|JA 37D: Upgrade {{of older}} JA 37 between 1993 and 1998, {{avionics}} and <b>software</b> <b>upgrade.</b> 35 airframes modified.|$|R
50|$|Although {{the initial}} batches of the Nokia 6600 were not stable, later system <b>software</b> <b>upgrades</b> {{corrected}} the situation.|$|R
50|$|JA 37D: Upgrade {{of older}} JA 37 between 1993 and 1998, {{avionics}} and <b>software</b> <b>upgrade.</b> 35 airframes modified.|$|R
50|$|The 4 litre V8 engine {{features}} internal, cartographic and <b>software</b> <b>upgrades</b> {{designed to improve}} performance and fuel consumption.|$|R
5000|$|CAT-iq 3.0 [...] "Internet Ready" [...] (ETSI TS 102 527-4): Light data services, <b>software</b> <b>upgrade</b> {{over the}} air (SUOTA) ...|$|R
50|$|Hardware add-ons {{are still}} being {{produced}} for the original QL by Sandy Electronics. RWAP Software supplies various hardware and <b>software</b> <b>upgrades.</b>|$|R
50|$|Kosovo: FY 2009 NADR Terrorism Interdiction Program funding will sustain {{existing}} program {{operations and}} provide for <b>software</b> <b>upgrades</b> to program equipment.|$|R
5000|$|Advanced Edition for TriCaster (<b>software</b> <b>upgrade</b> {{that adds}} NDI Advanced Workflow IP support and other {{features}} to most current TriCaster models) ...|$|R
5000|$|<b>Software</b> <b>Upgrades</b> - Provide for new {{software}} and/or bug fixes to be loaded on the device, including applications and system software ...|$|R
5000|$|On 22 February 2010, Motorola <b>released</b> on over-the-air <b>software</b> <b>upgrade</b> to the Motoblur interface, {{its version}} number is 1.3.18. The update includes: ...|$|R
50|$|On the 2500 <b>software</b> <b>upgrade</b> {{required}} booting to a BOOTROM OS {{with reduced}} functionality to have write access on the flash file system. The BOOTROM OS {{did not support}} Tokenring interfaces, making <b>software</b> <b>upgrade</b> more complex.On more recent models, the software is a compressed file on flash that first need to be extracted in RAM. As a result, the flash file systems on those routers was read/write during operation and software installation could be done during runtime.|$|R
25|$|M777A2 – Block 1A <b>software</b> <b>upgrade.</b> Addition of an Enhanced Portable Inductive Artillery Fuze Setter (EPIAFS) {{to enable}} Excalibur and {{precision}} munition compatibility.|$|R
