1|3041|Public
50|$|The bitmap file is {{responsible}} for storing information regarding used and available space on a volume. It contains the <b>storage</b> <b>control</b> <b>block</b> (SCB), which includes summary information detailing ???, and the bitmap, an array of bits to indicate if a cluster of blocks on the disk is free or allocated. In early versions of VMS the cluster comprised 3 blocks but as disk sizes have increased, so has the cluster size.|$|E
50|$|A, B and C are {{processes}} executing code components. O1, O2, {{and the two}} INs are ports {{connecting the}} connections M and N to their respective processes. It is permitted for processes B and C to be executing the same code, so each process must have {{its own set of}} working <b>storage,</b> <b>control</b> <b>blocks,</b> etc. Whether or not they do share code, B and C are free to use the same port names, as port names only have meaning within the components referencing them (and at the network level, of course).|$|R
5000|$|The {{name of the}} Matilija poppy (Romneya) {{is taken}} from the Matilija creek canyon. The Matilija Dam was {{constructed}} in 1947 on lower Matilija Creek {{for the purpose of}} supplying water <b>storage</b> and flood <b>control,</b> <b>blocking</b> access of anadromous Steelhead trout (Oncorhynchus mykiss) to over ten miles of upstream spawning areas. Historically 5,000 steelhead trout used the upper Matilija basin. The Robles Diversion Dam on the Ventura River downstream posed a barrier to trout migration until a $6 million fish ladder was constructed in 2006. Recent genetic analysis of the steelhead in Matilija Creek (both above and below Matilija Dam) has shown them to be of native and not hatchery stocks.|$|R
5000|$|In September 1966, CSC staff {{began the}} {{conversion}} of CP-40 and CMS to run on the S/360-67. CP-67 was a significant reimplementation of CP-40; Varian reports that the design was [...] "generalized substantially, to allow a variable number of virtual machines, with larger virtual memories", that new data structures replaced [...] "the <b>control</b> <b>blocks</b> describing the virtual machines which had been a hard-coded part of the nucleus", that CP-67 added [...] "the concept of free <b>storage,</b> so that <b>control</b> <b>blocks</b> could be allocated dynamically", and that [...] "the inter-module linkage was also reworked, and the code was made re-entrant." [...] Since CSC's -67 would not arrive for some time, CSC further modified the microcode on its own customized S/360-40 to simulate the S/360-67 [...] - [...] particularly its different approach to virtual memory. CSC repeatedly and successfully used simulation to work around the absence of hardware: when waiting for its modified S/360-40, for its S/360-67, and later for the first S/370 prototypes. This {{can be seen as}} a logical outgrowth of [...] "virtual machine" [...] thinking. During this period, early testing of CP-67 was also done at sites where S/360-67 hardware was available [...] - [...] notably IBM's Yorktown Heights lab and MIT's Lincoln Laboratory.|$|R
50|$|The 3830 Model 2 <b>storage</b> <b>control</b> and {{associated}} Integrated <b>Storage</b> <b>Controls</b> announced in August 1972were {{the first instance}} of a <b>storage</b> <b>control</b> as a director for A-Units.|$|R
50|$|The {{following}} sections list {{in order of}} announcement IBM mainframe CKD <b>storage</b> <b>controls,</b> categorized as conventional <b>storage</b> <b>controls,</b> director type <b>storage</b> <b>controls</b> and integrated controls attaching an A-unit.|$|R
50|$|In {{nonsynchronous}} operation, {{the transfer}} of data between the channel and the <b>storage</b> <b>control</b> is not synchronized with {{the transfer of}} data between the <b>storage</b> <b>control</b> and the device. Channel programs can be executed such that channel and <b>storage</b> <b>control</b> activities required to end execution of one command and advance to the next {{do not have to}} occur during the inter-record gap between two adjacent fields. An intermediate buffer in the <b>storage</b> <b>control</b> allows independent operations between the channel and the device. A major advantage of ECKDs is far longer cables; depending upon application it may improve performance.|$|R
50|$|There {{are three}} types of Service Modules used in the Intel Modular Server System; the <b>Storage</b> <b>Control</b> Module, the Ethernet Switch Module, and the Chassis Management Module. An Intel Modular Server Chassis {{accommodates}} one Chassis Management Module, up to two <b>Storage</b> <b>Control</b> Modules, and up to two Ethernet Switch Modules. The addition of a second Ethernet Switch Module and/or <b>Storage</b> <b>Control</b> Module permits high availability and load balancing.|$|R
30|$|IEC 61850 - 9 - 2 and 8 - 1 {{standards}} {{already have}} <b>control</b> <b>blocks</b> for SVs, i.e. streaming information, and GOOSE messages, i.e. event driven information, which {{are known as}} “SVCB” and “GoCB” <b>control</b> <b>blocks</b> respectively. These <b>control</b> <b>blocks</b> are used to start and {{stop the flow of}} messages. <b>Control</b> <b>blocks</b> for R-SV and R-GOOSE are defined by addition of new functional constraints to the existing <b>control</b> <b>blocks.</b> So in order to accommodate the IP protocol in SVCB and GoCB <b>control</b> <b>blocks,</b> new attributes such as “SecurityEnable” and “UDPCOMADDR” are introduced. The “UDPCOMADDR” attribute contains the priority, VID, and other attributes related to IP such as IP address, IP type of service etc. The new <b>control</b> <b>blocks</b> for R-SV and R-GOOSE, with additional enhancements, are termed as R-MSVCB and R-GoCB respectively.|$|R
50|$|The {{channel and}} <b>storage</b> <b>control</b> under certain {{conditions}} can inter-operate to cause a CCW to be retried without an I/O interruption.This procedure is initiated by the <b>storage</b> <b>control</b> and used to recover from correctable errors.|$|R
50|$|Conventional DASD <b>storage</b> <b>controls</b> {{listed in}} this section have {{different}} interfaces to the attached DASD, unique to a DASD or DASD family. In 1972, IBM introduced a standard DASD to control interface used with Director type <b>storage</b> <b>controls.</b>|$|R
50|$|The Task <b>Control</b> <b>Block</b> (TCB) is an {{instance}} of a Process <b>control</b> <b>block</b> in an IBM System/360 architecture and successors operating system environment.|$|R
50|$|Caches {{were also}} {{provided}} on subsequently introduced <b>storage</b> <b>controls.</b>|$|R
50|$|The Thread <b>Control</b> <b>Block</b> acts as {{a library}} of {{information}} about the threads in a system. Specific information is stored in the thread <b>control</b> <b>block</b> highlighting important information about each process.|$|R
50|$|A TCB is a {{general-purpose}} {{instance of}} a Process <b>control</b> <b>block</b> in OS/360 and successor systems. An SRB {{is a highly}} optimized instance of a Process <b>control</b> <b>block</b> in MVS/370 and successor systems.|$|R
5000|$|The {{integrated}} SAN {{consists of}} the HDD module (which accommodates up to fourteen 2.5" [...] HDDs in the MFSYS25 chassis, and up to six 3.5" [...] HDDs in the MFSYS35 chassis) and the <b>Storage</b> <b>Control</b> Module(s). Each Compute Blade accesses volumes, which are assigned to it by connecting to the <b>Storage</b> <b>Control</b> Module(s) through its integrated SAS HBA.|$|R
50|$|An SRB is a highly-optimized {{instance}} of a Process <b>control</b> <b>block</b> in these MVS/370 and successor systems. A TCB is a general-purpose {{instance of}} a Process <b>control</b> <b>block</b> in these OS/360 and successor systems.|$|R
5000|$|Command-CICS intercepted macro level {{applications}} via a Link-edited (static) [...] "stub" [...] positioned {{ahead of}} the Load module (MVS) or Phase (DOS/VSE). On gaining control from the CICS Program Control Program (PCP), a [...] "pseudo macro level" [...] environment was established consisting of a pointer to a (unique) pseudo [...] "Common System Area" [...] (CSA), a pointer to a Transaction Control Area plus Transaction Work Area (TCA+TWA) and a pseudo Terminal Control Terminal Entry (TCTTE) and other artifacts of a macro level environment. Before passing control directly to the original program entry point, Command-CICS set up the actual general purpose registers, R13 and R12 {{to point to the}} pseudo control blocks.The CSA was the principal <b>control</b> <b>block</b> holding pointers to the CICS kernel programs (File <b>Control</b> Program, <b>Storage</b> <b>Control</b> Program etc.) in a real macro level CICS environment.The Command-CICS CSA had alternative pointers to Command-CICS entry points instead. It was possible to use CEDF to debug the application program calls when Command-CICS was used.|$|R
50|$|The IBM 2841 <b>Storage</b> <b>Control</b> Unit was a Direct Access <b>Storage</b> Device (DASD) <b>control</b> unit {{introduced}} with System/360, first {{shipped in}} 1965 and offered {{until at least}} 1975.|$|R
50|$|Rather, a TCB {{provides}} an anchor for a linked list of other, related request <b>control</b> <b>blocks</b> (RBs), the composite of which (i.e., the TCB plus the top-linked RB) performs {{the function of}} a Process <b>control</b> <b>block.</b>|$|R
50|$|DASD devices {{introduced}} {{after the}} 2841 used different <b>storage</b> <b>controls</b> {{as discussed in}} the following sections.|$|R
50|$|The Integrated <b>Storage</b> <b>Control</b> for the System/370 Models 158 and 168 {{functions}} identically to the 3830-2.|$|R
50|$|A <b>storage</b> <b>control,</b> {{frequently}} {{called a}} <b>Storage</b> <b>Control</b> Unit, attaches to a System/360 (or System/370) channel {{one or more}} logically separate devices. The control unit and the device each comporting to System/360 and/or System/370 Input/Output architecture. Since the control unit and attached devices are logically distinct either or both can be busy when an I/O is initiated and either can present ending status when it becomes free.|$|R
50|$|Once {{the control}} program's {{dispatcher}} selects a TCB to be dispatched, the context is determined {{and the general}} purpose registers are obtained from the appropriate <b>control</b> <b>block,</b> then the PSW is loaded from the appropriate <b>control</b> <b>block</b> thereby dispatching the unit of work.|$|R
5000|$|... returns all {{elements}} of list for which the <b>controlled</b> <b>block</b> or expression evaluates to true. [...] evaluates the <b>controlled</b> <b>block</b> or expression for each element of list and returns {{a list of the}} resulting values. These constructs enable a simple functional programming style.|$|R
5000|$|... #Caption: IBM S/360 & S/370 Input/Output {{operations}} for CKD DASD showing channel, <b>storage</b> <b>control</b> unit and DASD device ...|$|R
50|$|RPL <b>control</b> <b>blocks</b> are not {{strictly}} postfix. Although {{there are some}} notable exceptions, the <b>control</b> <b>block</b> structures appear as they would in a standard infix language. The calculator manages this by allowing the implementation of these blocks to skip ahead in the program stream as necessary.|$|R
5000|$|The IBM 2841 <b>Storage</b> <b>Control</b> Unit was {{initially}} capable of attaching combinations {{of up to}} eight of following DASD: ...|$|R
5000|$|Theodor Sebastian Borsche, [...] " [...] Impact of Demand and <b>Storage</b> <b>Control</b> on Power System Operation and Dynamics", 2016 ...|$|R
3000|$|... “A horizontal, {{system-level}} {{architecture that}} distributes computing, <b>storage,</b> <b>control</b> and networking functions {{closer to the}} users along a cloud-to-thing continuum”.|$|R
5000|$|Smart - {{made up of}} sensors, microprocessors, data <b>storage,</b> <b>controls,</b> software, and an {{embedded}} {{operating system}} with enhanced user interface.|$|R
50|$|An IOCS program {{must create}} a <b>control</b> <b>block</b> for each file, specifying {{information}} {{unique to the}} file. For 7070 IOCS these are entries in the File Specification Table for tape files, {{each of which is}} generated by a DTF statement, or separate <b>control</b> <b>blocks</b> generated by DDF orDUF statements.|$|R
5000|$|Process <b>Control</b> <b>Block</b> (PCB, {{also called}} Task <b>Controlling</b> <b>Block,</b> Entry of the Process Table, Task Struct, or Switchframe) is a data {{structure}} in the operating system kernel containing the information needed to manage a particular process. The PCB is [...] "the manifestation of a process in an operating system." ...|$|R
5000|$|... #Subtitle level 2: Create <b>control</b> <b>blocks</b> for {{individual}} files ...|$|R
50|$|A <b>control</b> <b>block</b> {{called the}} JFCB (Job File <b>Control</b> <b>Block)</b> {{initially}} holds the information {{extracted from the}} DD statement for the dataset. The results of the merge are stored in the JFCB which may also be written into the DSCB during the CLOSE process, thereby making the dataset definition permanent.|$|R
50|$|The 2835 <b>storage</b> <b>Control</b> {{connects to}} one or two block {{multiplexer}} channels and attaches one or two 2305 Fixed Head storage Modules.|$|R
