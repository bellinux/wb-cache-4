21|4|Public
5|$|Drives which encrypt all {{writes on}} the fly can {{implement}} ATA <b>Secure</b> <b>Erase</b> in another way. They simply zeroize and generate a new random encryption key each time a <b>secure</b> <b>erase</b> is done. In this way the old data cannot be read anymore, as it cannot be decrypted. Some drives with an integrated encryption may require a TRIM command {{be sent to the}} drive to put the drive back to its original out-of-box state.|$|E
5|$|The ATA <b>Secure</b> <b>Erase</b> {{command is}} {{designed}} to remove all user data from a drive. With an SSD without integrated encryption, this command will put the drive back to its original out-of-box state. This will initially restore its performance to the highest possible level and the best (lowest number) possible write amplification, {{but as soon as}} the drive starts garbage collecting again the performance and write amplification will start returning to the former levels. Many tools use the ATA <b>Secure</b> <b>Erase</b> command to reset the drive and provide a user interface as well. One free tool that is commonly referenced in the industry is called HDDErase. Gparted and Ubuntu live CDs provide a bootable Linux system of disk utilities including <b>secure</b> <b>erase.</b>|$|E
50|$|Since about 2001, some ATA IDE and SATA {{hard drive}} {{manufacturer}} designs include {{support for the}} ATA <b>Secure</b> <b>Erase</b> standard, obviating the need to apply the Gutmann method when erasing an entire drive. However, a 2011 research found that 4 out of 8 manufacturers did not implement ATA <b>Secure</b> <b>Erase</b> correctly.|$|E
50|$|Some file systems defer {{operations}} such as {{reorganization of}} free space, <b>secure</b> <b>erasing</b> of free space, and rebuilding of hierarchical structures by providing utilities to perform these functions {{at times of}} minimal activity. An example is the file system defragmentation utilities.|$|R
5|$|The peak random write {{performance}} on an SSD {{is driven by}} plenty of free blocks after the SSD is completely garbage collected, <b>secure</b> <b>erased,</b> 100% TRIMed, or newly installed. The maximum speed will depend upon the number of parallel flash channels connected to the SSD controller, {{the efficiency of the}} firmware, and the speed of the flash memory in writing to a page. During this phase the write amplification will be the best it can ever be for random writes and will be approaching one. Once the blocks are all written once, garbage collection will begin and the performance will be gated by the speed and efficiency of that process. Write amplification in this phase will increase to the highest levels the drive will experience.|$|R
50|$|Zero-filling a {{drive is}} not {{necessarily}} a <b>secure</b> method of <b>erasing</b> sensitive data, or of preparing a drive for use with an encrypted filesystem.|$|R
5000|$|RCMP B2-002, IT Media Overwrite and <b>Secure</b> <b>Erase</b> Products, May 2009 ...|$|E
50|$|As for secure {{deletion}} of data, {{using the}} ATA <b>Secure</b> <b>Erase</b> command is recommended, as the drive itself knows {{the most effective}} method to truly reset its data. A program such as Parted Magic {{can be used for}} this purpose. In 2014, Asus was the first company to introduce a <b>Secure</b> <b>Erase</b> feature built into the UEFI of its Republic of Gamers series of PC motherboards.|$|E
50|$|The ATA <b>Secure</b> <b>Erase</b> {{command is}} {{designed}} to remove all user data from a drive. With an SSD without integrated encryption, this command will put the drive back to its original out-of-box state. This will initially restore its performance to the highest possible level and the best (lowest number) possible write amplification, {{but as soon as}} the drive starts garbage collecting again the performance and write amplification will start returning to the former levels. Many tools use the ATA <b>Secure</b> <b>Erase</b> command to reset the drive and provide a user interface as well. One free tool that is commonly referenced in the industry is called HDDErase. Gparted and Ubuntu live CDs provide a bootable Linux system of disk utilities including <b>secure</b> <b>erase.</b>|$|E
50|$|Drives which encrypt all {{writes on}} the fly can {{implement}} ATA <b>Secure</b> <b>Erase</b> in another way. They simply zeroize and generate a new random encryption key each time a <b>secure</b> <b>erase</b> is done. In this way the old data cannot be read anymore, as it cannot be decrypted. Some drives with an integrated encryption may require a TRIM command {{be sent to the}} drive to put the drive back to its original out-of-box state.|$|E
50|$|Although {{originally}} designed for mechanical hard disk drives, Parted Magic {{is suitable for}} use also with solid state drives and can perform an ATA <b>Secure</b> <b>Erase</b> (a method that {{is built into the}} hard drive controller to return the drive into its factory state).|$|E
50|$|It {{differs from}} other file {{deletion}} {{programs such as}} Darik's Boot and Nuke which attempt to erase data using block writes which cannot access certain portions of the hard drive. The internal firmware <b>Secure</b> <b>Erase</b> command can access data {{that is no longer}} accessible through software, such as bad blocks.|$|E
50|$|Apart from overwriting, {{other methods}} could be used, such as degaussing, or {{physical}} {{destruction of the}} media. With some inexpensive media, destruction and replacement may be cheaper than sanitisation followed by reuse. ATA <b>Secure</b> <b>Erase</b> is not approved. Different methods apply to different media, ranging from paper to CDs to mobile phones.|$|E
50|$|Disk {{cleaning}} utilities use {{a variety}} of methods to overwrite the existing data on disks (see data remanence). The effectiveness of disk cleaning utilities as anti-forensic tools is often challenged as some believe they are not completely effective. Experts who don't believe that disk cleaning utilities are acceptable for disk sanitization base their opinions of current DOD policy, which states that the only acceptable form of sanitization is degaussing. (See National Industrial Security Program.) Disk cleaning utilities are also criticized because they leave signatures that the file system was wiped, which in some cases is unacceptable. Some of the widely used disk cleaning utilities include DBAN, srm, BCWipe Total WipeOut, KillDisk, PC Inspector and CyberScrubs cyberCide. Another option which is approved by the NIST and the NSA is CMRR <b>Secure</b> <b>Erase,</b> which uses the <b>Secure</b> <b>Erase</b> command built into the ATA specification.|$|E
50|$|Data Shredder (also {{known as}} CBL Data Shredder) is a data {{destruction}} utility designed to securely erase a hard disk or digital storage device, completely removing {{the data and}} making it unrecoverable. The software utilizes an overwrite method of destroying data rather than other means of data destruction (such as: ATA <b>secure</b> <b>erase,</b> crypto-shredding, degaussing, physical destruction).|$|E
50|$|HDDerase is a {{freeware}} utility that securely erases data on {{hard drives}} using the <b>Secure</b> <b>Erase</b> unit command {{built into the}} firmware of Parallel ATA and Serial ATA drives manufactured after 2001. HDDerase {{was developed by the}} Center for Magnetic Recording Research at the University of California, San Diego. HDDerase is designed for command-line use only.|$|E
50|$|A {{limitation}} of shred when invoked on ordinary files {{is that it}} only overwrites the data in place without overwriting other copies of the file. Copies can manifest themselves {{in a variety of}} ways, such as through manual and automatic backups, file system snapshots, copy-on-write filesystems, wear leveling on flash drives, caching such as NFS caching, and journaling. All limitations imposed by the file system can be overcome by shredding every device on which the data resides instead of specific files. However, since wear leveled devices do not guarantee a fixed relationship between logical blocks addressable through the interface and the physical locations in which the data is stored, shredding may not provide adequate security. If available, the SATA <b>secure</b> <b>erase</b> command, issued through hdparm or a similar utility, may be helpful in this situation. Even for magnetic devices, SATA <b>secure</b> <b>erase</b> will be faster and more reliable than shredding. Physical destruction may be necessary to securely erase devices such as memory cards and unusable hard disks.|$|E
5000|$|Modern {{hard disk}} drives contain a <b>Secure</b> <b>Erase</b> command {{designed}} to permanently and securely erase every accessible and inaccessible {{portion of a}} drive. It may also work for some Solid-state drives (flash drives). As of 2017, {{it does not work}} on USB flash drives nor on Secure Digital flash memories. When available, this is both faster than using dd, and more secure. On Linux machines it is accessible via the hdparm command's [...] option.|$|E
5000|$|However, {{there are}} {{applications}} and tools, especially used in forensic information technology, that can recover data {{that has been}} conventionally erased. In {{order to avoid the}} recovery of sensitive data, governmental organization or big companies use information destruction methods like the Gutmann method. For average users there are also special applications that can perform complete data destruction by overwriting previous information. Although there are applications that perform multiple writes to assure data erasure, any single write over old data is generally all that is needed on modern hard disk drives. The ATA <b>Secure</b> <b>Erase</b> can be performed by disk utilities to quickly and thoroughly wipe drives. [...] Degaussing is another option; however, this renders the drive unusable.|$|E
50|$|The {{common problem}} with {{sensitive}} data is that deleted files {{are not really}} erased and so may be recovered by interested parties. Most file systems only remove the link to data (see undelete, above). But even overwriting parts of the disk with something else or formatting it may not guarantee that the sensitive data is completely unrecoverable. Special software is available that overwrites data, and modern (post-2001) ATA drives include a <b>secure</b> <b>erase</b> command in firmware. However, high security applications and high-security enterprises can sometimes require that a disk drive be physically destroyed to ensure data is not recoverable, as microscopic changes in head alignment and other effects can mean even such measures are not guaranteed. When the data is encrypted only the encryption key has to be unavailable. Crypto-shredding is the practice of 'deleting' data by (only) deleting or overwriting the encryption keys.|$|E
50|$|Some {{advanced}} {{hard disk}} drive commands, such as Tagged Command Queuing and Native Command Queuing (which may increase performance), ATA <b>Secure</b> <b>Erase</b> (which allows all data on the drive to be securely erased) and S.M.A.R.T. (accessing indicators of drive reliability) exist as extensions to low-level drive command sets such as SCSI, ATA and ATAPI. These features may not work when the drives are placed in a disk enclosure that supports a USB mass-storage interface. Some USB mass-storage interfaces are generic, providing basic read-write commands; although that works well for basic data transfers with devices containing hard drives, there is no simple way to send advanced, device-specific commands to such USB mass-storage devices (though, devices may create their own communication protocols over a standard USB control interface). The USB Attached SCSI (UAS) protocol, introduced in USB 3.0, fixes several of these issues, including command queuing, command pipes for hardware requiring them, and power management.|$|E
50|$|Solid-state drives, {{which are}} flash-based, differ from hard-disk drives in two ways: first, {{in the way}} data is stored; and second, {{in the way the}} {{algorithms}} are used to manage and access that data. These differences can be exploited to recover previously erased data. SSDs maintain a layer of indirection between the logical addresses used by computer systems to access data and the internal addresses that identify physical storage. This layer of indirection hides idiosyncratic media interfaces and enhances SSD performance, reliability, and lifespan (see wear leveling); but it can also produce copies of the data that are invisible to the user and that a sophisticated attacker could recover. For sanitizing entire disks, sanitize commands built into the SSD hardware {{have been found to be}} effective when implemented correctly, and software-only techniques for sanitizing entire disks have been found to work most, but not all, of the time. In testing, none of the software techniques were effective for sanitizing individual files. These included well-known algorithms such as the Gutmann method, US DoD 5220.22-M, RCMP TSSIT OPS-II, Schneier 7 Pass, and Mac OS X <b>Secure</b> <b>Erase</b> Trash.|$|E
30|$|Controller layer. At the {{controller}} layer, {{there are several}} standardized interfaces that permit reading/writing of fixed-sized blocks. Similarly, there are no semantics of file system in this layer, thus {{the controller}} must sanitize every block to achieve secure deletion. To delete the data, sanitize commands and overwrite techniques are widely used in HDDs, e.g., <b>secure</b> <b>erase</b> commands offered by both SCSI (Incits: Scsi storage interfaces 2016) and ATA (Team work systems: Advanced technology attachment 2017). These sanitization commands work like a button that erases all data on the device by exhaustively overwriting every block with zeros or ones.|$|E
30|$|Application layer. The {{application}} layer can only interact with file system through a POSIX-compliant interface. A user-level application can securely erase {{all the data}} on the storage medium by invoking a <b>secure</b> <b>erase</b> command (Incits: Scsi storage interfaces 2016; Team work systems: Advanced technology attachment 2017) in the hardware controller’ interface. A few files overwriting tools, e.g, srm (Jagdmann 2015) and wipe (Durak 2006), {{can be used to}} securely remove files. Gracewipe (Zhao and Mannan 2015), as has been discussed in “PDE for desktop computers” section, can achieve secure and verifiable deletion of encryption keys through a special deletion password by taking advantage of TPM and Intel TXT, thus making the encrypted data permanently inaccessible. In the case of database, there is also a secure deletion interface, which can be used to overwrite data with zeros in the underlying file system. For MySQL, (Stahlberg et al. 2007) proposed an approach to delete entries by overwriting them with zeros, and the transaction log is encrypted and can be securely disposed by deleting the encryption key. For SQLite (SQLite: Pragma statements 2017), there is a compile-time option to enable a secure deletion feature that overwrites deleted records with zeros.|$|E

