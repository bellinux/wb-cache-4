1541|0|Public
25|$|JSON {{grew out}} of a need for <b>stateful,</b> {{real-time}} server-to-browser communication protocol without using browser plugins such as Flash or Java applets, the dominant methods used in the early 2000s.|$|E
25|$|The use of {{feedback}} is {{widespread in the}} design of electronic amplifiers, oscillators, and <b>stateful</b> logic circuit elements such as flip-flops and counters. Electronic feedback systems are also very commonly used to control mechanical, thermal and other physical processes.|$|E
25|$|Memristor patents include {{applications}} in programmable logic, signal processing, neural networks, control systems, reconfigurable computing, brain-computer interfaces and RFID. Memristive devices are potentially used for <b>stateful</b> logic implication, allowing {{a replacement for}} CMOS-based logic computation. Several early works in this direction are reported.|$|E
25|$|The goal of {{the library}} is {{to benefit from the}} <b>stateful</b> {{component}} model used in desktop applications APIs, applied to web development, instead of the traditional model–view–controller (MVC) model. Rather than using MVC at the level of a page, MVC is pushed to the level of individual components.|$|E
25|$|ACK {{scanning}} {{is one of}} {{the more}} unusual scan types, as it does not exactly determine whether the port is open or closed, but whether the port is filtered or unfiltered. This is especially good when attempting to probe for the existence of a firewall and its rulesets. Simple packet filtering will allow established connections (packets with the ACK bit set), whereas a more sophisticated <b>stateful</b> firewall might not.|$|E
25|$|If the {{end-user}} {{accepts the}} OpenID provider's request {{to trust the}} relying party, then the user-agent is redirected back to the relying party along with the end-user's credentials. That relying party must then confirm that the credentials really came from the OpenID provider. If the relying party and OpenID provider had previously established a shared secret, then the relying party can validate {{the identity of the}} OpenID provider by comparing its copy of the shared secret against the one received along with the end-user's credentials; such a relying party is called <b>stateful</b> because it stores the shared secret between sessions. In contrast, a stateless or dumb relying party must make one more background request (check_authentication) to ensure that the data indeed came from the OpenID provider.|$|E
500|$|The {{subject of}} custom allocators {{has been treated}} by many C++ experts and authors, {{including}} Scott Meyers in Effective STL and Andrei Alexandrescu in Modern C++ Design. Meyers emphasises that C++98 requires all instances of an allocator to be equivalent, and notes that this in effect forces portable allocators to not have state. Although the C++98 Standard did encourage library implementors to support <b>stateful</b> allocators, Meyers calls the relevant paragraph [...] "a lovely sentiment" [...] that [...] "offers you next to nothing", characterizing the restriction as [...] "draconian".|$|E
500|$|The 2011 {{revision}} of the C++ Standard removed the weasel words requiring that allocators of a given type always compare equal and use normal pointers. [...] These changes make <b>stateful</b> allocators much more useful and allow allocators to manage out-of-process shared memory. The current purpose of allocators {{is to give the}} programmer control over memory allocation within containers, rather than to adapt the address model of the underlying hardware. [...] In fact, the revised standard eliminated the ability of allocators to represent extensions to the C++ address model, formally (and deliberately) eliminating their original purpose.|$|E
2500|$|PF, an IPv4/IPv6 <b>stateful</b> {{firewall}} with NAT, PAT, QoS {{and traffic}} normalization support ...|$|E
2500|$|According to Microsoft, UMDF {{drivers are}} simpler {{to write and}} debug than kernel-mode drivers. [...] However, UMDF would {{not be used for}} performance-intensive or highly <b>stateful</b> devices.|$|E
2500|$|Once {{the client}} and server have agreed to use TLS, they {{negotiate}} a <b>stateful</b> connection by using a handshaking procedure. [...] The protocols use a handshake with an asymmetric cipher to establish not only cipher settings but also a session-specific shared key with which further communication is encrypted using a symmetric cipher. During this handshake, {{the client and}} server agree on various parameters used to establish the connection's security: ...|$|E
2500|$|Check Point was {{established}} in Ramat-Gan, Israel in 1993, by Gil Shwed (CEO [...] ), Marius Nacht (Chairman [...] ) and Shlomo Kramer (who left Check Point in 2003). Shwed had the initial idea for the company’s core technology known as <b>stateful</b> inspection, which became {{the foundation for the}} company's first product, FireWall-1; soon afterwards they also developed one of the world’s first VPN products, VPN-1. Shwed developed the idea while serving in the Unit 8200 of the Israel Defense Forces, where he worked on securing classified networks.|$|E
2500|$|Douglas Crockford first {{specified}} and popularized the JSON format. The acronym originated at State Software (originally named Veil Networks, Inc.), {{a company}} co-founded by Crockford, Randy Farmer [...] (left {{to work at}} 3DO), Greg Macdonald, Chip Morningstar, Robert F. Napiltonia and Dominik Zynis in March 2001. State Software was funded by Tesla Ventures with $1.8 Million in October 2011, and tried to trademark the word [...] "State". [...] The co-founders agreed to build a system that used standard browser capabilities and provided an abstraction layer for Web developers to create <b>stateful</b> Web applications that had a persistent duplex connection to a Web server by holding two HTTP connections open and recycling them before standard browser time-outs if no further data were exchanged. The co-founders had a round-table discussion and voted whether to call the data format JSML or JSON, as well as under what license type to make it available. Crockford, being inspired by the words of then President Bush, should also be credited with {{coming up with the}} [...] "evil-doers" [...] JSON license ("The Software shall be used for Good, not Evil.") in order to open-source the JSON libraries, but force (troll) corporate lawyers, or those who are overly pedantic, to seek to pay for a license from State. Morningstar developed the idea for the State Application Framework at State Software. On the other hand, this clause led to license compatibility problems of the JSON license with other open-source licenses.|$|E
50|$|There can be complex {{interactions}} between <b>stateful</b> and stateless protocols among different protocol layers. For example, HTTP {{is an example}} of a stateless protocol layered on top of TCP, a <b>stateful</b> protocol, which is layered on top of IP, another stateless protocol, which is routed on a network that employs BGP, another <b>stateful</b> protocol, to direct the IP packets riding on the network.|$|E
50|$|That year, Shwed invented and {{patented}} <b>stateful</b> inspection, {{which served}} {{as the basis for}} the first version of the company’s renowned FireWall-1, released in 1994. <b>Stateful</b> Inspection is still widely used in network firewalls today.|$|E
50|$|VPN-1 is a <b>stateful</b> {{firewall}} {{which also}} filters traffic by inspecting the application layer. It {{was the first}} commercially available software firewall to use <b>stateful</b> inspection. Later (1997), Check Point registered U.S. Patent # 5,606,668 on their security technology that, among other features, included <b>stateful</b> inspection. VPN-1 functionality is currently bundled within all the Check Point's perimeter security products. The product, previously known as FireWall-1, is now sold as an integrated firewall and VPN solution.|$|E
5000|$|Two IRTF Internet Drafts on <b>stateful</b> {{hash-based}} schemes (XMSS/XMSSMT and LMS) {{are currently}} active. Practical improvement {{have been proposed}} in the literature that alleviate the concerns introduced by <b>stateful</b> schemes. Hash functions appropriate for these schemes include SHA-2, SHA-3 and BLAKE ...|$|E
5000|$|<b>Stateful</b> and {{stateless}} objects : An object {{state is}} a possible situation in which an object may exist. An object state has meaning only {{in the context of}} the object to which it belongs. A stateless object shall be an object that has no specification of states. A <b>stateful</b> object shall be an object for which a set of permissible states are specified. In a runtime model, at any point in time, any <b>stateful</b> object instance is at a particular permissible state or in transition between two states.|$|E
5000|$|Native IPv6 {{configuration}} (SLAAC, stateless DHCPv6, <b>stateful</b> DHCPv6, DHCPv6-PD), ...|$|E
5000|$|Pages {{directly}} {{interact with}} <b>stateful</b> Java components on the server.|$|E
5000|$|... most invalid packets {{are easily}} {{filtered}} by modern <b>stateful</b> firewalls.|$|E
5000|$|... #Subtitle level 2: Stacking of {{stateless}} and <b>stateful</b> protocol layers ...|$|E
50|$|Before WSRF, no {{standard}} in the Web Services family of specifications explicitly defined {{how to deal with}} <b>stateful</b> interactions with remote resources. This does not mean that web services could not be <b>stateful.</b> Where required a web service could read from a database, or use session state by way of cookies or WS-Session.|$|E
5000|$|Downstream IPv6 {{configuration}} (Router Advertisement, DHCPv6 (stateless and <b>stateful)</b> and DHCPv6-PD).|$|E
5000|$|The Snap monad for <b>stateful</b> {{access to}} HTTP {{requests}} and responses.|$|E
5000|$|<b>Stateful</b> NAT64 {{feature on}} Juniper MX Series 3D Universal Edge router ...|$|E
5000|$|<b>Stateful</b> firewall, NAT {{and port}} {{forwarding}} through netfilter; additionally PeerGuardian is available ...|$|E
5000|$|It has {{significant}} security, scalability, and reliability problems, {{by virtue of}} being <b>stateful.</b>|$|E
5000|$|PF, an IPv4/IPv6 <b>stateful</b> {{firewall}} with NAT, PAT, QoS {{and traffic}} normalization support ...|$|E
50|$|<b>Stateful</b> Session Beans are {{business}} objects having state: that is, {{they keep}} track of which calling client {{they are dealing with}} throughout a session and thus access to the bean instance is strictly limited to only one client at a time. If concurrent access to a single bean is attempted anyway the container serializes those requests, but via the @AccessTimeout annotation the container can instead throw an exception. <b>Stateful</b> session beans' state may be persisted (passivated) automatically by the container to free up memory after the client hasn't accessed the bean for some time. The JPA extended persistence context is explicitly supported by <b>Stateful</b> Session Beans.|$|E
50|$|Depending {{on whether}} the IV for a {{cryptographic}} scheme must be random or only unique the scheme is either called randomized or <b>stateful.</b> While randomized schemes always require the IV chosen by a sender to be forwarded to receivers, <b>stateful</b> schemes allow sender and receiver to share a common IV state, which is updated in a predefined way at both sides.|$|E
50|$|Because {{they can}} keep track of a conversation, connection-oriented {{protocols}} are sometimes described as <b>stateful.</b>|$|E
50|$|<b>Stateful</b> {{firewall}} {{technology was}} introduced by Check Point Software with the FireWall-1 product in 1994.|$|E
50|$|The device {{may include}} a <b>stateful</b> firewall, a VPN concentrator, or be an IPSec {{security}} gateway.|$|E
5000|$|Jool, a <b>stateful</b> NAT64 {{implementation}} for Linux, {{developed by}} NIC Mexico and Monterrey Institute of Technology ...|$|E
5000|$|Lifecycle methods (e.g. @PostConstruct) can be {{transactional}} for <b>stateful</b> session beans {{using the}} existing @TransactionAttribute annotation ...|$|E
