164|1417|Public
25|$|XML {{also has}} the concept of schema. This permits <b>strong</b> <b>typing,</b> {{user-defined}} types, predefined tags, and formal structure, allowing for formal validation of an XML stream in a portable way. There is, however, an IETF draft proposal for a schema system for JSON.|$|E
500|$|C# (pronounced as see sharp) is a multi-paradigm {{programming}} language encompassing <b>strong</b> <b>typing,</b> imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines. It {{was developed by}} Microsoft within its [...]NET initiative and later approved as a standard by Ecma (ECMA-334) and ISO (ISO/IEC 23270:2006). C# {{is one of the}} {{programming language}}s designed for the Common Language Infrastructure.|$|E
2500|$|Initially, Stroustrup's [...] "C with Classes" [...] added {{features}} to the C compiler, Cpre, including classes, derived classes, <b>strong</b> <b>typing,</b> inlining and default arguments.|$|E
40|$|A supersimple theory {{eliminates}} hyperimaginaries. In particular, in a supersimple theory Lascar <b>strong</b> <b>type</b> is {{the same}} as <b>strong</b> <b>type,</b> and every <b>strong</b> <b>type</b> has a canonical base in C eq. It follows that the Amalgamation Theorem (Independence Theorem) holds for types over algebraically closed sets...|$|R
40|$|We {{prove the}} {{boundedness}} of the intrinsic functions on generalized weighted Morrey spaces Mp,φ(w), including the <b>strong</b> <b>type</b> estimates and weak type estimates. Moreover, we define the kth-order commutators generated by BMORn functions and intrinsic functions, and obtain their <b>strong</b> <b>type</b> estimates on Mp,φ(w). In some cases, we improve previous results...|$|R
40|$|For a rosy theory, we give a {{canonical}} surjective homomorphism from a Lascar group over A=^eq(A) to a first homology {{group of}} a <b>strong</b> <b>type</b> over A, and we describe its kernel by an invariant equivalence relation. As a consequence, {{we show that}} the first homology groups of <b>strong</b> <b>types</b> in rosy theories have the cardinalities of one or at least 2 ^ℵ_ 0. We give two examples of rosy theories having non trivial first homology groups of <b>strong</b> <b>types</b> over ^eq(∅). In these examples, these two homology groups are exactly isomorphic to their Lascar group over ^eq(∅). Comment: 28 pages, no figures, made some corrections in appendix...|$|R
2500|$|Algol68 {{allowed the}} switch to be of either type int or (uniquely) union. The latter allows the {{enforcing}} <b>strong</b> <b>typing</b> onto union variables. c.f. [...] below for example.|$|E
2500|$|Safety – A type system {{enables the}} {{compiler}} to detect meaningless or probably invalid code. For example, {{we can identify}} an expression 3 / [...] "Hello, World" [...] as invalid, when the rules do not specify how to divide an integer by a string. <b>Strong</b> <b>typing</b> offers more safety, but cannot guarantee complete type safety.|$|E
2500|$|The APLNext VisualAPL {{system is}} a {{departure}} from a conventional APL system in that VisualAPL is a true [...]NET language which is fully interoperable with other [...]NET languages such as VB.NET and C#. VisualAPL is inherently object-oriented and Unicode-based. While VisualAPL incorporates most {{of the features of}} standard APL implementations, the VisualAPL language extends standard APL to be [...]NET-compliant. VisualAPL is hosted in the standard Microsoft Visual Studio IDE and as such, invokes compilation in a manner identical to that of other [...]NET languages. By producing Common Intermediate Language (CIL) code, it utilizes the Microsoft just-in-time compiler (JIT) to support 32-bit or 64-bit hardware. Substantial performance speed-ups over standard APL have been reported, especially when (optional) <b>strong</b> <b>typing</b> of function arguments is used.|$|E
40|$|AbstractLet G be {{a locally}} compact abelian group with {{character}} group Γ. We study {{the interplay of}} boundedness properties for suitably related maximal operators defined by (weak <b>type</b> or <b>strong</b> <b>type)</b> multipliers for G, its subgroups, and its Bohr compactification b(G). These considerations lead to weak <b>type</b> and <b>strong</b> <b>type</b> maximal estimates which generalize fundamental theorems of de Leeuw and Saeki concerning <b>strong</b> <b>type</b> norms of single multipliers. Suppose that 1 ≤ p < ∞, and M is the maximal operator on Lp(G) defined by a sequence {ψn}∞n = 1 of <b>strong</b> <b>type</b> Fourier multipliers which are continuous functions on γ. Our main result establishes that M is of weak type (p, p) on Lp(G) {{if and only if}} the corresponding maximal operator M# on Lp(b(G)) is of weak type (p, p). This provides a counterpart for locally compact abelian groups of E. M. Stein′s Continuity Principle for compact groups, since the latter characterizes the weak (p, p) boundedness of M# when 1 ≤ p ≤ 2...|$|R
50|$|Staffordshire blue brick is a <b>strong</b> <b>type</b> of {{construction}} brick, originally made in Staffordshire, England.|$|R
3000|$|... are established. As applications, {{weighted}} <b>strong</b> <b>type</b> {{estimates for}} vector-valued commutators associated with T and [...]...|$|R
50|$|<b>Strong</b> <b>typing</b> is {{a luxury}} not {{available}} for {{the most of the}} scripting languages.|$|E
5000|$|A {{wide range}} of {{computational}} data types, program control data types, and forms of data structure (<b>strong</b> <b>typing).</b>|$|E
50|$|The type {{system of}} XPath 2.0 is {{noteworthy}} {{for the fact}} that it mixes <b>strong</b> <b>typing</b> and weak typing within a single language.|$|E
5000|$|... #Caption: Skull {{masks and}} other items made with a <b>strong</b> <b>type</b> of paper mache called cartonería.|$|R
50|$|The {{resonance}} assisted {{hydrogen bond}} (commonly abbreviated as RAHB) is a <b>strong</b> <b>type</b> of hydrogen bond.|$|R
5000|$|In general, a maximal {{operator}} M {{is said to}} be of <b>strong</b> <b>type</b> (p, p) if ...|$|R
5000|$|Initially, Stroustrup's [...] "C with Classes" [...] added {{features}} to the C compiler, Cpre, including classes, derived classes, <b>strong</b> <b>typing,</b> inlining and default arguments.|$|E
50|$|Algol68 {{allowed the}} switch to be of either type int or (uniquely) union. The latter allows the {{enforcing}} <b>strong</b> <b>typing</b> onto union variables. c.f. union below for example.|$|E
50|$|<b>Strong</b> <b>typing</b> {{prevents}} the above. An attempt {{to perform an}} operation on the wrong type of value raises an error. Strongly typed languages are often termed type-safe or safe.|$|E
40|$|Ely and Peski (2006) and Friedenberg and Meier (2010) provide {{examples}} when {{changing the}} type space behind a game, taking a "bigger" type space, induces changes of Bayesian Nash Equilibria, in other words, the Bayesian Nash Equilibrium is not invariant under type morphisms. In this paper we introduce {{the notion of}} <b>strong</b> <b>type</b> morphism. <b>Strong</b> <b>type</b> morphisms are <b>stronger</b> than ordinary and conditional type morphisms (Ely and Peski, 2006), and we show that Bayesian Nash Equilibria are not invariant under <b>strong</b> <b>type</b> morphisms either. We present our results in a very simple, finite setting, and conclude {{that there is no}} chance to get reasonable assumptions for Bayesian Nash Equilibria to be invariant under any kind of reasonable type morphisms. ...|$|R
40|$|AbstractLet γ be the Gaussian {{measure in}} Rd and Ht, t> 0, the {{corresponding}} Ornstein–Uhlenbeck semigroup, whose infinitesimal generator is − 12 Δ+x⋅grad. For each p with 1 2 this operator is of weak type {{but not of}} <b>strong</b> <b>type</b> (p,p) for γ. However, if a neighbourhood of the origin is deleted from Ep {{in the definition of}} Hp∗, the resulting operator is shown to be of <b>strong</b> <b>type...</b>|$|R
40|$|AbstractWe prove Lp {{boundedness}} for the maximal {{operator of}} the heat semigroup associated to the Laguerre functions, {Lkα}k, when the parameter α is greater than - 1. Namely, the maximal operator is of <b>strong</b> <b>type</b> (p,p) if p> 1 and 22 +α<p< 2 -α, when - 1 <α< 0. If α⩾ 0 there is <b>strong</b> <b>type</b> for 1 <p⩽∞. The behavior at the end points is studied in detail...|$|R
50|$|Qore is an interpreted, high-level, general-purpose, garbage {{collected}} {{dynamic programming}} language, featuring support for code embedding and sandboxing with optional <b>strong</b> <b>typing</b> and {{a focus on}} fundamental support for multithreading and SMP scalability.|$|E
50|$|Any {{comparison}} {{must take}} into account the fact that XSLT 1.0 and XSLT 2.0 are very different languages. XSLT 2.0, in particular, has been heavily influenced by XQuery in its move to <b>strong</b> <b>typing</b> and schema-awareness.|$|E
50|$|Features of Ada include: <b>strong</b> <b>typing,</b> {{modularity}} mechanisms (packages), run-time checking, {{parallel processing}} (tasks, synchronous message passing, protected objects, and nondeterministic select statements), exception handling, and generics. Ada 95 added support for object-oriented programming, including dynamic dispatch.|$|E
40|$|We {{construct}} a possibly non-commutative groupoid from {{the failure of}} 3 -uniqueness of a <b>strong</b> <b>type.</b> The commutative groupoid constructed by John Goodrick and Alexei Kolesnikov in GK lives {{in the center of}} the groupoid. A certain automorphism group approximated by the vertex groups of the non-commutative groupoids is suggested as a "fundamental group" of the <b>strong</b> <b>type.</b> Comment: 16 pages, no figures. arXiv admin note: substantial text overlap with arXiv: 1105. 292...|$|R
40|$|We {{prove that}} the {{generalized}} Carleson operator C_d with polynomial phase function is of <b>strong</b> <b>type</b> (p,r), 1 <r<p<∞; this yields a positive answer in the 1 <p< 2 case to a conjecture of Stein which asserts that for 1 <p<∞ we have that C_d is of <b>strong</b> <b>type</b> (p,p). A key ingredient in this proof is the further extension of the relational time-frequency perspective (introduced in q) to the general polynomial phase. Comment: 24 page...|$|R
40|$|In this paper, the {{boundedness}} {{properties of}} vector-valued intrinsic square functions and their vector-valued commutators with BMO(R^n) functions are discussed. We first show the weighted <b>strong</b> <b>type</b> and weak type estimates of vector-valued intrinsic square {{functions in the}} Morrey type spaces. Then we obtain weighted <b>strong</b> <b>type</b> estimates of vector-valued analogues of commutators in Morrey type spaces. In the endpoint case, we establish the weighted weak L L-type estimates for these vector-valued commutators {{in the setting of}} weighted Lebesgue spaces. Furthermore, we prove weighted endpoint estimates of these commutator operators in Morrey type spaces. In particular, we can obtain <b>strong</b> <b>type</b> and endpoint estimates of vector-valued intrinsic square functions and their commutators in the weighted Morrey spaces and the generalized Morrey spaces. Comment: 35 pages. arXiv admin note: text overlap with arXiv: 1011. 1622, arXiv: 1603. 0391...|$|R
50|$|XML {{also has}} the concept of schema. This permits <b>strong</b> <b>typing,</b> {{user-defined}} types, predefined tags, and formal structure, allowing for formal validation of an XML stream in a portable way. There is, however, an IETF draft proposal for a schema system for JSON.|$|E
5000|$|Safety - A type system {{enables the}} {{compiler}} to detect meaningless or probably invalid code. For example, {{we can identify}} an expression [...] as invalid, when the rules do not specify how to divide an integer by a string. <b>Strong</b> <b>typing</b> offers more safety, but cannot guarantee complete type safety.|$|E
50|$|First {{released}} in 1985, the Rational Environment was an {{integrated development environment}} for the Ada programming language, which provided good support for abstraction through <b>strong</b> <b>typing.</b> Its goal was to provide the productivity benefits associated with academic single-user programming environments to teams of developers developing mission-critical applications that could execute {{on a range of}} computing platforms.|$|E
40|$|In {{this paper}} {{a class of}} simple {{theories}}, called the low theories is developed, and the following is proved. Theorem Let T be a low theory, A a set and a; b elements realizing the same <b>strong</b> <b>type</b> over A. Then, a and b realize the same Lascar <b>strong</b> <b>type</b> over A. The reader {{is expected to be}} familiar with forking in simple theories, as developed in Kim's thesis [Kim]. The Lascar <b>strong</b> <b>type</b> of a over A is denoted lstp(a=A). Unless stated otherwise, we work {{in the context of a}} simple theory in this paper. 1 Amalgamation properties Type amalgamation (the Independence Theorem) is perhaps the most useful property of forking dependence in a simple theory. First, we stress an important fact from [Kim]. Lemma 1. 1 Let A be a set, a; b elements such that lstp(a=A) = lstp(b=A) and a...|$|R
3000|$|In this section, we {{give the}} {{estimate}} for potential operators with Lipschitz norm and BMO norm applied to differential forms. The following <b>strong</b> <b>type</b> [...]...|$|R
5000|$|Theorem (<b>Strong</b> <b>Type</b> Estimate). For d ≥ 1, 1 < p ≤ ∞, and f ∈ Lp(Rd),there is a {{constant}} Cp,d > 0 such that: ...|$|R
