0|8395|Public
40|$|Healthy adults bisect visual {{horizontal}} lines {{slightly to}} the left of their true center. This bias has been termed “pseudoneglect” and is considered to reflect right hemisphere dominance in the orienting of spatial attention. A previous investigation reported a positive correlation between pseudoneglect and a corresponding negative bias towards numbers lower than the true midpoint, i. e. supposedly {{to the left of}} the midpoint, during the mental bisection of <b>number</b> <b>intervals</b> that were defined by two visual arabic digits presented one to the left and one to the right of a horizontal line (Longo and Lourenco, 2007, Neuropsychologia, 45, 7, 1400 – 1407). Here, studying a sample of 60 healthy participants we verified whether this correlation still holds when the endpoints of <b>number</b> <b>intervals</b> are defined verbally, i. e. with no visual-spatial cues suggesting their left-to-right arrangement. Participants bisected horizontal lines (2 cm, 10 cm and 20 cm), short <b>number</b> <b>intervals</b> (3 -, 5 -, 7 - and 9 -unit) and large <b>number</b> <b>intervals</b> (16 -, 24 -, 32 -, 40 -, 48 -, 56 -, and 64 -unit). Pseudoneglect was observed both in line and <b>number</b> <b>interval</b> bi- section, confirming the results of Longo and Lourenco (2007). Nonetheless, the study of correlations between bisection biases averaged across different line and <b>number</b> <b>intervals</b> lengths and between all possible pairings of line and <b>number</b> <b>interval</b> lengths revealed no significant or systematic pattern. During line bisection pseudoneglect increased as a function of line length while with short <b>number</b> <b>intervals</b> pseudoneglect decreased and turned into an opposite positive bias as a function of interval length. With large <b>number</b> <b>intervals</b> no linear relationship was present between bisection bias and in- terval length and, as in Longo and Lourenco (2007), the higher was the starting point of the <b>number</b> <b>interval</b> the larger was pseudoneglect. These results show that verbally defined <b>number</b> <b>intervals</b> are not mentally inspected with the same mechanisms that are engaged by the bisection of horizontal visual lines. This suggests that <b>number</b> <b>intervals</b> are not inherently arranged along the mental equivalent of a left-to-right oriented horizontal line. This spatial representation seems rather adopted when, as in the case of the SNARC task, “left” vs. “right” codes must be used for the selection of responses associated with numbers or when, as in the case of Longo and Lourenco (2007), the numerical material to be processed is arranged in left-to-right order...|$|R
5000|$|<b>Sequence</b> <b>Number</b> (32 bits) : A {{monotonic}} strictly increasing <b>sequence</b> <b>number</b> (incremented by 1 {{for every}} packet sent) to prevent replay attacks. When replay detection is enabled, <b>sequence</b> <b>numbers</b> are never reused, because a new security association must be renegotiated before {{an attempt to}} increment the <b>sequence</b> <b>number</b> beyond its maximum value.|$|R
50|$|To {{avoid these}} problems, {{the most common}} {{solution}} is to define a 1 bit <b>sequence</b> <b>number</b> in the header of the frame. This <b>sequence</b> <b>number</b> alternates (from 0 to 1) in subsequent frames. When the receiver sends an ACK, it includes the <b>sequence</b> <b>number</b> of the next packet it expects. This way, the receiver can detect duplicated frames by checking if the frame <b>sequence</b> <b>numbers</b> alternate. If two subsequent frames have the same <b>sequence</b> <b>number,</b> they are duplicates, and the second frame is discarded. Similarly, if two subsequent ACKs reference the same <b>sequence</b> <b>number,</b> they are acknowledging the same frame.|$|R
5000|$|The {{received}} <b>sequence</b> <b>number</b> is {{the last}} <b>sequence</b> <b>number</b> received by this sender.|$|R
5000|$|S: <b>Sequence</b> <b>number</b> bit. Set to 1 if a <b>sequence</b> <b>number</b> is present.|$|R
50|$|If the SYN flag is set (1), {{then this}} is the initial <b>sequence</b> <b>number.</b> The <b>sequence</b> <b>number</b> of the actual first data byte and the {{acknowledged}} number in the corresponding ACK are then this <b>sequence</b> <b>number</b> plus 1.|$|R
5000|$|<b>Sequence</b> <b>number</b> flag(S): a 1-bit {{value that}} states {{whether there is}} a <b>Sequence</b> <b>Number</b> {{optional}} field.|$|R
30|$|Initially, each server s sends signed <b>sequence</b> <b>numbers</b> 1 through K to each client c, {{and sets}} the next <b>sequence</b> <b>number</b> to emit, N_s^c, to K+ 1. Whenever s accepts to certify a new transaction, s {{increments}} N_s^c and sends N_s^c signed to c. Server s only accepts to certify transactions whose <b>sequence</b> <b>numbers</b> belong to set V_s^c. Initially, this set contains <b>sequence</b> <b>numbers</b> 1 to K. Each time s accepts to certify a transaction with <b>sequence</b> <b>number</b> seq, seq is removed from V_s^c and N_s^c {{is added to the}} set after being incremented.|$|R
5000|$|... #Caption: TCP <b>sequence</b> <b>numbers</b> {{and receive}} windows behave {{very much like}} a clock. The receive window shifts each time the {{receiver}} receives and acknowledges a new segment of data. Once it runs out of <b>sequence</b> <b>numbers,</b> the <b>sequence</b> <b>number</b> loops back to 0.|$|R
50|$|When A sends a message, it resends it continuously, {{with the}} same <b>sequence</b> <b>number,</b> until it {{receives}} an acknowledgment from B that contains the same <b>sequence</b> <b>number.</b> When that happens, A complements (flips) the <b>sequence</b> <b>number</b> and starts transmitting the next message.|$|R
5000|$|Transmission <b>sequence</b> <b>number</b> (TSN) : The <b>sequence</b> <b>number</b> for {{the entire}} DATA stream (used in {{fragmentation}} for reassembly).|$|R
25|$|Numbering {{subsequent}} Application {{records with}} a <b>sequence</b> <b>number</b> and using this <b>sequence</b> <b>number</b> {{in the message}} authentication codes (MACs).|$|R
50|$|Lollipop <b>sequence</b> <b>number</b> {{spaces are}} {{a more recent}} and {{sophisticated}} scheme for dealing with finite-sized <b>sequence</b> <b>numbers</b> in protocols.|$|R
5000|$|S: <b>Sequence</b> <b>number</b> bit. Set to 1 if a <b>sequence</b> <b>number</b> is supplied, {{indicating}} a PPTP GRE data packet.|$|R
5000|$|Numbering {{subsequent}} Application {{records with}} a <b>sequence</b> <b>number</b> and using this <b>sequence</b> <b>number</b> {{in the message}} authentication codes (MACs).|$|R
3000|$|... 1) Using the {{pseudorandom}} <b>sequence</b> <b>number</b> X of {{the confusion}} process as the final set X of pseudorandom <b>sequence</b> <b>numbers.</b>|$|R
50|$|Here {{are some}} {{examples}} (in 16 bits, again), comparing some random <b>sequence</b> <b>numbers,</b> against the <b>sequence</b> <b>number</b> with the value 0.|$|R
50|$|A {{means of}} {{comparing}} two <b>sequence</b> <b>numbers</b> i1 and i2 (the unsigned integer representations of <b>sequence</b> <b>numbers</b> s1 and s2) is presented.|$|R
30|$|A <b>sequence</b> <b>number</b> and a loop flag are {{included}} in the data packet header and are used to detect routing loops. When a node receives a downstream data packet, the node records the <b>sequence</b> <b>number</b> of the data. When a node receives data with the same <b>sequence</b> <b>number,</b> the node judges that a loop has occurred and sets the loop flag to one. Each node records nhist <b>sequence</b> <b>numbers</b> of received packets from the newest received one.|$|R
5000|$|It {{is easy to}} {{see that}} the signed {{interpretation}} of the <b>sequence</b> <b>numbers</b> are in the correct order, so long as we [...] "rotate" [...] the <b>sequence</b> <b>number</b> in question so that its 0 matches up with the <b>sequence</b> <b>number</b> we are comparing it against. It turns out that this is simply done, using an unsigned subtraction, and simply interpreting the result as a signed two's complement number. The result is the signed [...] "distance" [...] between the two <b>sequence</b> <b>numbers.</b> Once again, if i1 and i2 are the unsigned binary representations of the <b>sequence</b> <b>numbers</b> s1 and s2, the distance from s1 to s2 is: ...|$|R
5000|$|So, if {{we simply}} re-cast <b>sequence</b> <b>numbers</b> as 2's {{complement}} integers, and allow {{there to be}} one more <b>sequence</b> <b>number</b> considered [...] "less than" [...] than there are <b>sequence</b> <b>numbers</b> considered [...] "greater than", {{we should be able}} to use simple signed arithmetic comparisons instead of the logically incomplete formula proposed by the RFC.|$|R
5000|$|Many {{communication}} protocols apply serial number arithmetic to packet <b>sequence</b> <b>numbers</b> in their {{implementation of a}} sliding window protocol. Some versions of TCP use [...] protection against wrapped <b>sequence</b> <b>numbers</b> (PAWS). PAWS applies the same serial number arithmetic to packet timestamps, using the timestamp {{as an extension of}} the high-order bits of the <b>sequence</b> <b>number.</b>|$|R
50|$|The {{protocol}} may be initialized {{by sending}} bogus messages and acks with <b>sequence</b> <b>number</b> 1. The first message with <b>sequence</b> <b>number</b> 0 {{is a real}} message.|$|R
50|$|We create log {{records of}} the form (<b>Sequence</b> <b>Number,</b> Transaction ID, Page ID, Redo, Undo, Previous <b>Sequence</b> <b>Number).</b> The Redo and Undo fields keep {{information}} about the changes this log record saves and how to undo them. The Previous <b>Sequence</b> <b>Number</b> is {{a reference to the}} previous log record that was created for this transaction. In the case of an aborted transaction, it's possible to traverse the log file in reverse order using the Previous <b>Sequence</b> <b>Numbers,</b> undoing all actions taken within the specific transaction.|$|R
50|$|It is a ten-digit {{number with}} the format DDMMYY-SSSS, where DDMMYY is {{the date of}} birth and SSSS is a <b>sequence</b> <b>number.</b> The first digit of the <b>sequence</b> <b>number</b> encodes the century of birth (so that centenarians are {{distinguished}} from infants), and the last digit of the <b>sequence</b> <b>number</b> is odd for males and even for females.|$|R
50|$|It is a reader-writer {{consistent}} mechanism which {{avoids the}} problem of writer starvation. A seqlock consists of storage for saving a <b>sequence</b> <b>number</b> {{in addition to a}} lock. The lock is to support synchronization between two writers and the counter is for indicating consistency in readers. In addition to updating the shared data, the writer increments the <b>sequence</b> <b>number,</b> both after acquiring the lock and before releasing the lock. Readers read the <b>sequence</b> <b>number</b> before and after reading the shared data. If the <b>sequence</b> <b>number</b> is odd on either occasion, a writer had taken the lock while the data was being read and it may have changed. If the <b>sequence</b> <b>numbers</b> are different, a writer has changed the data while it was being read. In either case readers simply retry (using a loop) until they read the same even <b>sequence</b> <b>number</b> before and after.|$|R
5000|$|Stream <b>sequence</b> <b>number</b> : Identifier of the <b>sequence</b> <b>number</b> for {{the message}} in this stream. If a message is {{fragmented}} then this value is maintained for all fragments.|$|R
40|$|AbstractLocal sensorsin {{distributed}} multi-target {{tracking systems}} {{are different in}} types for different missions. So local sensors usually have different sampling rates and transfer asynchronous track data to fusion centre. The current track association algorithms are mostly synchronous track association algorithms based on time alignment. Tracks need to be synchronized before the algorithms applied. But it brings extra estimation error when using the time alignment method. And the estimation error spreads at the same time, which affects {{the performance of the}} track association algorithm. To solve this problem, this paper presents an algorithm for asynchronous track to track association without time alignment. This paper provides a method of Real to Interval Transformation (RTIT) to describe the real <b>number</b> track <b>sequences</b> as <b>interval</b> <b>number</b> track <b>sequences.</b> Then a new distance measurement for the interval sequence is defined to measure the differences of each track sequence. So the correlation degree can be calculated,which describes the similarity degree between each track. Also the track association conclusion can be made. Simulation results show that the presented method can effectively solve the asynchronous track-to-track association problem, and the correct association ratemaintains on high level...|$|R
30|$|Calculate all the {{elements}} of the pseudorandom <b>sequence</b> <b>number</b> in (xi[*]×[*] 256)[*]mod[*] 256, and then convert the calculated result into binary, thereby obtaining a binary M[*]×[*]N long <b>sequence</b> <b>number.</b>|$|R
50|$|Lollipop <b>sequence</b> <b>numbering</b> was {{originally}} believed {{to resolve the}} ambiguity problem in cyclic <b>sequence</b> <b>numbering</b> schemes, and was used in OSPF version 1 for this reason. Later work showed {{that this was not}} the case, and OSPF version 2 replaced it with a linear numbering space, with special rules for what happens when the <b>sequence</b> <b>numbers</b> reach the end of the numbering space.|$|R
5000|$|All <b>sequence</b> <b>number</b> {{arithmetic}} {{must deal}} with [...] "wrapping" [...] of <b>sequence</b> numbers; the <b>number</b> 2N−1 is equidistant in both directions, in [...] <b>sequence</b> <b>number</b> terms. In our math, they are both considered to be [...] "less than" [...] each other: ...|$|R
5000|$|Cumulative TSN ACK : Acknowledges all <b>sequence</b> <b>numbers</b> {{received}} in <b>sequence</b> {{so is the}} <b>sequence</b> <b>number</b> of the last received byte. The immediate value after this one has not been received yet.|$|R
5000|$|<b>Sequence</b> <b>Number</b> (32 bits) : A monotonically {{increasing}} <b>sequence</b> <b>number</b> (incremented by 1 {{for every}} packet sent) {{to protect against}} replay attacks. There is a separate counter kept for every security association.|$|R
50|$|The CPR {{number is}} a ten-digit number with the format DDMMYY-SSSS, where DDMMYY is {{the date of}} birth and SSSS is a <b>sequence</b> <b>number.</b> The first digit of the <b>sequence</b> <b>number</b> encodes the century of birth (so that centenarians are {{distinguished}} from infants, 0-4 in odd centuries, 5-9 in even centuries), and the last digit of the <b>sequence</b> <b>number</b> is odd for males and even for females.|$|R
50|$|The Identifier and <b>Sequence</b> <b>Number</b> {{can be used}} by {{the client}} to match the reply with the request that caused the reply. In practice, most Linux systems use a unique {{identifier}} for every ping process, and <b>sequence</b> <b>number</b> is an increasing number within that process. Windows uses a fixed identifier, which varies between Windows versions, and a <b>sequence</b> <b>number</b> that is only reset at boot time.|$|R
30|$|The RREQ {{messages}} {{generated by}} the reactive routing protocol {{as well as all}} the broadcast messages are generated with a <b>sequence</b> <b>number.</b> The <b>sequence</b> <b>number</b> helps a receiving node to detect the message whether it is new or it is a copy of a previous message. In this way, the receiving nodes maintain a table to associate the <b>sequence</b> <b>number</b> and the sources which are employing them. Thus, a receiving node only pays attention to the messages with a <b>sequence</b> <b>number</b> which is higher than the one stored for the source. In order to implement this behavior properly when managing multiple routing protocols, in GREENIE, a source just uses one <b>sequence</b> <b>number</b> which is incremented either by the reactive or the proactive routing protocol when a broadcast message needs to be generated.|$|R
