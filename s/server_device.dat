23|564|Public
5000|$|Some system {{components}} (such as filesystem, GWES (graphics, windowing, events <b>server),</b> <b>device</b> driver manager) {{have been moved}} to the kernel space.|$|E
50|$|The four primary {{types of}} {{personal}} cloud {{in use today}} are: Online cloud, NAS device cloud, <b>server</b> <b>device</b> cloud, and home-made clouds.|$|E
50|$|Dial-up analog alarm panels or {{systems with}} serial/parallel data ports may be {{migrated}} to broadband through {{the addition of}} an alarm <b>server</b> <b>device</b> which converts telephone signaling signals or data port traffic to IP messages suitable for broadband transmission. But the direct use of VoIP (POTS port on premises terminal) to transport analog alarms without an alarm <b>server</b> <b>device</b> is problematic as the audio codecs used throughout the entire network transmission path cannot guarantee a suitable level of reliability or quality of service acceptable for the application.|$|E
50|$|McAfee {{products}} are primarily digital security tools for personal computers and <b>server</b> <b>devices,</b> and more recently, mobile devices.|$|R
50|$|In {{this case}} the {{workload}} is divided across multiple <b>server</b> <b>devices,</b> each handling {{a slice of the}} overall workload.|$|R
5000|$|TANGO is a {{software}} for building control systems which {{need to provide}} network access to hardware. Hardware can range from single bits of digital input/output up to sophisticated detector systems or entire plant control systems (SCADAs). Hardware access is managed in a process called a <b>Device</b> <b>Server.</b> The <b>Device</b> <b>Server</b> contains <b>Devices</b> belonging to different Device Classes which implement the hardware access. At <b>Device</b> <b>Server</b> startup time <b>Devices</b> (instances of Device Classes) are created which then represent logical instances of hardware in the control system. Clients [...] "import" [...] the Devices via a database and send requests to the devices using TANGO. Devices can store configuration and setup values in a Mysql database permanently.|$|R
5000|$|The time profile allows {{current time}} and time zone {{information}} on a client device to be set from a <b>server</b> <b>device,</b> such as between a wristwatch and a mobile phone's network time.|$|E
50|$|For a {{very large}} and complex {{security}} camera system, there may be too many cameras, too much network bandwidth, too much data to be analyzed, or too much storage required for a single <b>server</b> <b>device</b> to handle the workload.|$|E
50|$|Windows Home Server {{supports}} media streaming to Xbox 360 {{and other}} DLNA-based media receivers via the built-in Windows Media Connect technology. Some Windows Home <b>Server</b> <b>device</b> manufacturers, such as HP, extend this functionality {{with a full}} DLNA implementation such as PacketVideo TwonkyMedia server.|$|E
50|$|For {{rack mounted}} {{computer}} <b>servers,</b> <b>devices</b> generally intake {{air on the}} front and exhaust on the rear. This prevents circular airflows where hot exhaust air is recirculated through an adjacent device and causes overheating.|$|R
50|$|Data agents, Storage Resource agents, {{and fabric}} agents gather host, application, and SAN fabric {{information}} and send {{this information to}} the Data <b>Server</b> or <b>Device</b> <b>server.</b>|$|R
50|$|WS-Management (Web Services-Management) is a DMTF open {{standard}} {{defining a}} SOAP-based protocol {{for the management}} of <b>servers,</b> <b>devices,</b> applications and various Web services. WS-Management provides a common way for systems to access and exchange management information across the IT infrastructure.|$|R
50|$|An {{existing}} network server (e.g. a file server) {{can become a}} time server with additional software. The NTP homepage provides a free and widely used reference implementation of the NTP server and client for many popular operating systems. The other choice is a dedicated time <b>server</b> <b>device.</b>|$|E
50|$|The DIAL {{protocol}} has two components, DIAL Service Discovery and the DIAL REST Service. The DIAL Service Discovery {{enables a}} DIAL client device to discover DIAL servers on its local network segment and obtain {{access to the}} DIAL REST Service on those devices. The DIAL REST Service enables a DIAL client to query, launch and optionally stop applications on a DIAL <b>Server</b> <b>device.</b>|$|E
50|$|The RVU Protocol {{was defined}} {{to solve the}} problem of how to provide a {{consistent}} television user interface throughout the home, without requiring the use of a dedicated set-top box for each television. The RVU Protocol is a communications protocol which runs on a media <b>server</b> <b>device</b> and multiple client devices. RVU uses open standards (including DLNA and UPnP) which are already in use in the consumer electronics field.|$|E
3000|$|The UPnP {{protocol}} stack implementation developed by [...] "Ciberlink" [...] [23] {{has been taken}} as reference to create the extended UPnP {{protocol stack}} used {{in order to create}} the UPnP client (control point) as well as the <b>servers</b> (<b>devices)</b> which are implemented into the car gateway.|$|R
50|$|An Internet service {{provider}} which provides network access via common modem or modem-like devices (be it PSTN, DSL, cable or GPRS/UMTS) can {{have one or}} more NAS (network access <b>server)</b> <b>devices</b> which accept PPP, PPPoE or PPTP connections, checking credentials and recording accounting data via back-end RADIUS servers, and allowing users access through that connection.|$|R
50|$|A {{basic set}} of servers for a {{general-purpose}} microkernel includes file system <b>servers,</b> <b>device</b> driver <b>servers,</b> networking servers, display servers, and user interface <b>device</b> <b>servers.</b> This set of servers (drawn from QNX) provides roughly {{the set of}} services offered by a Unix monolithic kernel. The necessary servers are started at system startup and provide services, such as file, network, and device access, to ordinary application programs. With such servers running in the environment of a user application, server development is similar to ordinary application development, rather than the build-and-boot process needed for kernel development.|$|R
50|$|A single Omninet {{was limited}} to 64 devices, and the device address was set with a 5-bit DIP switch. Device zero was the first file <b>server,</b> <b>device</b> one was the Mirror or The Bank tape backup, the rest were user computers, or Utility Servers. Systems {{with more than one}} file server had them at zero and up, then the tape backup, then the user computers. No matter what the configuration, you could only have 64 devices.|$|E
5000|$|... 1987 also {{marked the}} {{introduction}} of the AppleShare product, a dedicated file server that ran on any Mac with 512 kB of RAM or more. A common AppleShare machine was the Mac Plus with an external SCSI hard drive. AppleShare was the #3 network operating system in the late 1980s, behind Novell NetWare and Microsoft's MS-Net. AppleShare was effectively the replacement for the failed Macintosh Office efforts, which had been based on a dedicated file <b>server</b> <b>device.</b>|$|E
5000|$|Version 4.1.0 of 23. December 2013 is OATH {{certified}} for HOTP and TOTP, {{which means}} full compatibility with certified hardware tokens, including encrypted PSKC provisioning files. This beta version {{has been used}} for a 30 minutes talk during the PasswordsCon 2013 in Bergen (Norway). Instructions and all necessary files to build a strong authentication <b>server</b> <b>device</b> on a Raspberry Pi nano-computer are included. Self-registration of unattributed hardware tokens and automatic resync/unlock during authentication have also been added, and a basic web interface is now also available.|$|E
5000|$|The terms [...] "requester" [...] and [...] "responder" [...] {{are used}} in place of [...] "client" [...] and [...] "server" [...] for the two peers in the transaction. This is to {{acknowledge}} that the peers that are being authenticated do not necessarily map one-to-one to client or <b>server</b> <b>devices.</b> For example, a server may host multiple endpoints that are distinctly identified.|$|R
40|$|We {{present the}} <b>Device</b> <b>Server,</b> a {{framework}} and applica-tion driving interaction in the AlloSphere virtual reality environment. The motivation {{and development of}} the De-vice Server stems from the practical concerns of managing multi-user interactivity with a variety of physical devices for disparate performance and virtual reality environments housed in the same physical location. The interface of the <b>Device</b> <b>Server</b> allows users to see how devices are assigned to application functionalities, al-ter these assignments and save them into configuration files for later use. Configurations defining how applications use devices can be changed on the fly without recompiling or relaunching applications. Multiple applications can be con-nected to the <b>Device</b> <b>Server</b> concurrently. The <b>Device</b> <b>Server</b> provides several conveniences for per-formance environments. It can process control data ef-ficiently using Just-In-Time compiled Lua expressions; in doing so it frees processing cycles on audio and video ren-dering computers. All control signals entering the <b>Device</b> <b>Server</b> can be recorded, saved, and played back allowing performances based on control data to be recreated in their entirety. The <b>Device</b> <b>Server</b> attempts to homogenize the ap-pearance of different control signals to applications so that users can assign any interface element they choose to appli-cation functionalities and easily experiment with different control configurations...|$|R
50|$|Software {{applications}} {{running on}} desktops, corporate <b>servers,</b> mobile <b>devices</b> and embedded devices are all {{at risk from}} subversion.|$|R
5000|$|The {{basic model}} of Telescript {{is similar to}} Java, and differs {{primarily}} in where the applications would run. Java was modelled {{to make it possible}} to download Java applications onto any platform and run them locally. Telescript essentially reversed this, allowing end-user equipment with limited capabilities to upload Telescript programs to servers to allow them {{to take advantage of the}} server's capabilities. Telescript could even migrate a running program; the language included features to marshal a program's code and serialized state, transfer it to another Telescript engine (on a device or a server) to continue execution, and finally return to the originating client or <b>server</b> <b>device</b> to deliver its output.|$|E
50|$|The RUI {{concepts}} {{makes use}} of a <b>server</b> <b>device</b> which implements all content bitmaps and graphics functions {{for a number of}} remote client devices. In this way a server can be used to generate a user guide experience specific to a TV service providers “look and feel”, and send that experience to a client device. The client can then display this graphics data without the need for any proprietary software from that service provider. RVU technology enables a compliant client device to offer user interface interactions such as guide, trick play, and interactive applications all without the presence of a dedicated set-top box. RVU Server devices will be provided by television content providers such as satellite, cable and telco broadcasters. Client devices such as televisions, Blu-ray players and PCs need only be compliant with the requirements of the RVU Protocol to work with an RVU server.|$|E
40|$|Recent {{years have}} seen a surge of {{interest}} in the field of pervasive context-aware computing. In this framework we propose a novel real implementation of an adaptive self-configurable system, applied within the scope of wireless ad-hoc networks. WiDFuNC is an integrated system that consists of an intelligent unit implemented on a real PDA, a number of sensors and a remote <b>server</b> <b>device</b> to form an efficient prototype system that can be applied in various domains. This implementation of WiDFuNC focuses on pure classification problems with satisfactory experimental results, presenting great adaptability and context-awareness. © World Scientific Publishing Company...|$|E
50|$|Puppet Master is {{installed}} {{on one or}} more servers and the systems {{that need to be}} configured install Puppet Agent. Puppet Agents communicate with the server and fetch configuration instructions. The Agent then applies the configuration on the system and sends the status report to the <b>server.</b> <b>Devices</b> can run Puppet Agent as a daemon, that can be triggered periodically as a cron job or can be run manually whenever needed.|$|R
50|$|Wire data is the {{information}} that passes over computer and telecommunication networks defining communications between client and <b>server</b> <b>devices.</b> It {{is the result of}} decoding wire and transport protocols containing the bi-directional data payload. More precisely, wire data is {{the information}} that is communicated in each layer of the OSI model (Layer 1 not being included because those protocols are used to establish connections and do not communicate information).|$|R
40|$|This paper {{presents}} TANGO 1 - {{an object}} oriented control {{system based on}} CORBA 2. TANGO has been developed at the ESRF. All control points in TANGO are implemented as methods or attributes of CORBA network objects (ser-vants). Control actions are executed by invoking methods on objects. Objects are served by <b>device</b> <b>servers.</b> TANGO <b>device</b> <b>servers</b> can be written in C++ or Java. <b>Device</b> <b>servers</b> can run on Linux, Windows/NT, Solaris, or HP-UX. TANGO is fully compatible with the ONC RPC based TACO [1] control systems. In this paper the TANGO idl definition, device pattern, database, naming service, event service and scripting languages are presented. The present status of TANGO {{and how it will}} be deployed in a TACO control system will be reviewed. ...|$|R
40|$|This is {{an initial}} {{research}} about development of appliance server prototype for middle industry. The main {{objective of this}} study is to analyze and design an alternative server as a solution to providing <b>server</b> <b>device</b> on a small industry. The prorotype used by small industry to implement their information system applications. This study uses ADDIE development method. ADDIE phase that has been used is analysis, design, and some evaluation of them (ADE). The result of analyze is user needs analysis, hardware requirements analysis and software requirement analysis. The result of design is network topology design, hardware architecture design, validation test instrument, feasibility testing instrument, performance testing instrument, evaluation of prototype feasibility instrument and evaluation of server performance instrument. In the future, the result of this study can be used as reference for development and implementation of appliance server in middle industry...|$|E
40|$|In these days, the {{widespread}} creation of home networks, {{due to the}} continuous development of computer technology for personal use. These networks are formed, for example, {{with the aim of}} facilitating access to information, ease of communication between people and control of various devices in the home. Their development is influenced by trends in information communication technologies in the market. This bachelor thesis is fully focused on the practical implementation of the proposal for extension of the original smaller home network using the new network elements (wireless routers, switches, network printers, NAS <b>server,</b> <b>device</b> for live monitoring of security cameras) and rendering certain network services (DLNA, print server, VPN, iTunes server, live monitoring of security cameras). A given network was tested with respect to performance network and its response, coverage of Wi-Fi signal, testing remote access, power consumption, read and writes speed of the NAS server...|$|E
40|$|AbstractLarge {{and complex}} {{infrastructures}} as industry plants and hospitals {{are vulnerable to}} natural, man-made disasters, and causality events. In this paper, we present a solution addressing the guiding personnel during maintenance and/or emergency conditions. The aim {{is to reduce the}} time needed to react and to cope with organization and maintenance support, while facilitating communication, and indoor/outdoor navigation. The solution is based on the formalization of protocol, the modelling of knowledge for navigation, the algorithms {{and the development of a}} mobile application and corresponding <b>server</b> <b>device</b> for integrated indoor/outdoor navigation. The navigation algorithms are based on low costs mobile sensors and Adaptive Extended Kalman Filter. The solution has been validated and tried out within a large medical infrastructure, thus demonstrating the validity of the identified modalities and procedures, measuring the advantage from both qualitative and quantitative aspects. The indoor navigation solution has been compared with other former solutions based on classical Kalman and dead reckoning...|$|E
40|$|Clarify {{interactions}} of RMC and ADC <b>device</b> <b>servers,</b> physical <b>device,</b> and DT device. Modify model section to allow automation and DT devices with no ADT ports. Specify method {{to prepare and}} to retrieve dumps. • Consolidated redundant entries for automation firmware update. Revision 2 : • Modified description of real-time clock to refer to proposal against SPC-x...|$|R
50|$|Within a {{switched}} {{or mixed}} fabric, {{a set of}} auxiliary servers, including a name <b>server</b> for <b>device</b> discovery and network address resolution.|$|R
5000|$|Top of Rack: Included GS7200 and GS4008, allowed {{standard}} based connectivity to <b>servers</b> and <b>devices</b> via standard 10GbE SFP+ optics or 40GbE QSFP connections ...|$|R
