5872|2106|Public
5|$|In an undirected graph, a widest path may {{be found}} as the path between the two {{vertices}} in the maximum <b>spanning</b> <b>tree</b> of the graph, and a minimax path {{may be found}} as the path between the two vertices in the minimum <b>spanning</b> <b>tree.</b>|$|E
5|$|In nonplanar surface embeddings {{the set of}} dual edges {{complementary}} to a <b>spanning</b> <b>tree</b> is not a dual <b>spanning</b> <b>tree.</b> Instead {{this set}} of edges is the union of a dual <b>spanning</b> <b>tree</b> with a small set of extra edges whose number {{is determined by the}} genus of the surface on which the graph is embedded. The extra edges, in combination with paths in the spanning trees, can be used to generate the fundamental group of the surface.|$|E
5|$|If all edge weights of an {{undirected graph}} are positive, then the minimax {{distances}} between pairs of points (the maximum edge weights of minimax paths) form an ultrametric; conversely every finite ultrametric space comes from minimax distances in this way. A data structure constructed from the minimum <b>spanning</b> <b>tree</b> allows the minimax distance between any pair of vertices to be queried in constant time per query, using lowest common ancestor queries in a Cartesian tree. The {{root of the}} Cartesian tree represents the heaviest minimum <b>spanning</b> <b>tree</b> edge, {{and the children of}} the root are Cartesian trees recursively constructed from the subtrees of the minimum <b>spanning</b> <b>tree</b> formed by removing the heaviest edge. The leaves of the Cartesian tree represent the vertices of the input graph, and the minimax distance between two vertices equals the weight of the Cartesian tree node that is their lowest common ancestor. Once the minimum <b>spanning</b> <b>tree</b> edges have been sorted, this Cartesian tree can be constructed in linear time.|$|E
40|$|The {{search of}} <b>spanning</b> <b>trees</b> with {{interesting}} disjunction properties {{has led to}} the introduction of edge-disjoint <b>spanning</b> <b>trees,</b> independent <b>spanning</b> <b>trees</b> and more recently completely independent <b>spanning</b> <b>trees.</b> We group together these notions by defining (i, j) -disjoint <b>spanning</b> <b>trees,</b> where i (j, respectively) is the number of vertices (edges, respectively) that are shared by more than one tree. We illustrate how (i, j) -disjoint <b>spanning</b> <b>trees</b> provide some nuances between the existence of disjoint connected dominating sets and completely independent <b>spanning</b> <b>trees.</b> We prove that determining if there exist two (i, j) -disjoint <b>spanning</b> <b>trees</b> in a graph G is NP-complete, for every two positive integers i and j. Moreover we prove that for square of graphs, k-connected interval graphs, complete graphs and several grids, there exist (i, j) -disjoint <b>spanning</b> <b>trees</b> for interesting values of i and j...|$|R
40|$|There exist many {{algorithms}} {{for producing}} the <b>spanning</b> <b>trees</b> of a graph with better {{time and space}} complexities. In this research study, we are presenting a study on number of <b>spanning</b> <b>trees</b> and a technique based on the basic cycle to find the number of <b>spanning</b> <b>trees</b> and also the structure of all the <b>spanning</b> <b>trees</b> of a labeled and undirected graph...|$|R
40|$|AbstractIn this note, {{we define}} {{completely}} independent <b>spanning</b> <b>trees.</b> We say that T 1,T 2,…,Tk are completely independent <b>spanning</b> <b>trees</b> in a graph H if for any vertex r of H, they are independent <b>spanning</b> <b>trees</b> rooted at r. We present a characterization of completely independent <b>spanning</b> <b>trees.</b> Also, {{we show that}} for any k-vertex-connected line digraph L(G), there are k completely independent <b>spanning</b> <b>trees</b> in the underlying graph of L(G). At last, we apply our results to de Bruijn graphs, Kautz graphs, and wrapped butterflies...|$|R
5|$|In {{geographic}} information systems, flow networks (such as the networks showing how water flows {{in a system}} of streams and rivers) are dual to cellular networks describing drainage divides. This duality can be explained by modeling the flow network as a <b>spanning</b> <b>tree</b> on a grid graph of an appropriate scale, and modeling the drainage divide as the complementary <b>spanning</b> <b>tree</b> of ridgelines on the dual grid graph.|$|E
5|$|Due to the matroid {{structure}} of pseudoforests, minimum-weight maximal pseudoforests {{may be found}} by greedy algorithms similar to those for the minimum <b>spanning</b> <b>tree</b> problem. However, Gabow and Tarjan found a more efficient linear-time approach in this case.|$|E
5|$|In {{directed}} graphs, {{the maximum}} <b>spanning</b> <b>tree</b> solution cannot be used. Instead, several different algorithms are known; {{the choice of}} which algorithm to use depends on whether a start or destination vertex for the path is fixed, or whether paths for many start or destination vertices must be found simultaneously.|$|E
40|$|Working with tree graphs {{is always}} easier than with loopy ones and <b>spanning</b> <b>trees</b> are the closest tree-like {{structures}} {{to a given}} graph. We find a correspondence between the solutions of random K-satisfiability problem and those of <b>spanning</b> <b>trees</b> in the associated factor graph. We introduce a modified survey propagation algorithm which returns null edges of the factor graph and helps us to find satisfiable <b>spanning</b> <b>trees.</b> This allows us to study organization of satisfiable <b>spanning</b> <b>trees</b> in the space <b>spanned</b> by <b>spanning</b> <b>trees.</b> Comment: 12 pages, 5 figures, published versio...|$|R
40|$|The {{number of}} <b>spanning</b> <b>trees</b> in a (di-) graph (network) is an important, well-studied quantity. Most {{research}} {{about the number}} of <b>spanning</b> <b>trees</b> is devoted to determining exact formulae for the number of <b>spanning</b> <b>trees</b> in many kinds of special graphs. In this thesis, we start by stating the general methods for counting the number of <b>spanning</b> <b>trees</b> in (di-) graphs. We then discuss our new results. We show that the number of <b>spanning</b> <b>trees</b> in the circulant graph CnS 1,S 2, [...] .,Sk always satisfies a recurrence relation and describe how to derive this relation. The asymptotic behavior of these quantities are also derived. Boesch and Prodinger have shown how to use Chebyshev polynomials to derive closed formulae for the number of <b>spanning</b> <b>trees</b> of graphs in certain classes. This work has been extended to develop new techniques for the evaluation of the number of <b>spanning</b> <b>trees</b> in circulant graphs and graphs related to circulant graphs. We end by describing a method of counting the number of <b>spanning</b> <b>trees</b> in one class of double fixed-step loop networks...|$|R
40|$|The {{literature}} is very rich with works {{deal with the}} enumerating the <b>spanning</b> <b>trees</b> in any graph G since the pioneer Kirchhoff (1847). Generally, the number of <b>spanning</b> <b>trees</b> in a graph can be acquired by directly calculating an associated determinant corresponding to the graph. However, for a large graph, evaluating the pertinent determinant is ungovernable. In this paper, we introduce a new technique for calculating the number of <b>spanning</b> <b>trees</b> which avoids the strenuous computation of the determinant for calculating the number of <b>spanning</b> <b>trees.</b> Using this technique, we can obtain the number of <b>spanning</b> <b>trees</b> of any graph generated by the wheel graph. Finally, we give the numerical result of asymptotic growth constant of the <b>spanning</b> <b>trees</b> of studied graphs. Keywords: Number of <b>spanning</b> <b>trees,</b> Wheel graph, Gear graph, Asymptotic growth, Mathematics subject classification: 05 C 85, 05 C 05, 05 C 5...|$|R
5|$|An {{example of}} this type of {{decomposition}} into interdigitating trees can be seen in some simple types of mazes, with a single entrance and no disconnected components of its walls. In this case both the maze walls and the space between the walls {{take the form of a}} mathematical tree. If the free space of the maze is partitioned into simple cells (such as the squares of a grid) then this system of cells can be viewed as an embedding of a planar graph, in which the tree structure of the walls forms a <b>spanning</b> <b>tree</b> of the graph and the tree structure of the free space forms a <b>spanning</b> <b>tree</b> of the dual graph. Similar pairs of interdigitating trees can also be seen in the tree-shaped pattern of streams and rivers within a drainage basin and the dual tree-shaped pattern of ridgelines separating the streams.|$|E
5|$|A matroid is a {{mathematical}} structure in which certain sets of elements are defined to be independent, {{in such a}} way that the independent sets satisfy properties modeled after the properties of linear independence in a vector space. One of the standard examples of a matroid is the graphic matroid in which the independent sets are the sets of edges in forests of a graph; the matroid structure of forests is important in algorithms for computing the minimum <b>spanning</b> <b>tree</b> of the graph. Analogously, we may define matroids from pseudoforests.|$|E
25|$|In certain {{fields of}} graph theory {{it is often}} useful to find a minimum <b>spanning</b> <b>tree</b> of a {{weighted}} graph. Other optimization problems on spanning trees have also been studied, including the maximum <b>spanning</b> <b>tree,</b> the minimum tree that spans at least k vertices, the <b>spanning</b> <b>tree</b> with the fewest edges per vertex, the <b>spanning</b> <b>tree</b> with {{the largest number of}} leaves, the <b>spanning</b> <b>tree</b> with the fewest leaves (closely related to the Hamiltonian path problem), the minimum diameter <b>spanning</b> <b>tree,</b> and the minimum dilation <b>spanning</b> <b>tree.</b>|$|E
40|$|In {{this paper}} we propose a linear-time {{algorithm}} for determining the number of <b>spanning</b> <b>trees</b> in cographs; we derive formula for the number of <b>spanning</b> <b>trees</b> of a cograph G on n vertices and m edges, and prove that the problem of counting the number of <b>spanning</b> <b>trees</b> of G can be solved in O(n+m) time. Our proofs are based on the Kirchho matrix tree theorem which expresses the number of <b>spanning</b> <b>trees</b> of a graph {{as a function of the}} determinant of a matrix that can be easily construct from the adjacency relation of the graph. Our results generalize previous results regarding the number of <b>spanning</b> <b>trees...</b>|$|R
40|$|A tree-based {{multicast}} algorithm for wormholerouted torus networks, {{which makes}} use of multiple edge-disjoint <b>spanning</b> <b>trees</b> is presented. A technique for constructing two <b>spanning</b> <b>trees</b> in 2 -dimensional torus networks is described. It is formally proven that this construction produces two edge-disjoint <b>spanning</b> <b>trees</b> in any 2 -D torus network. Compared with an algorithm for construction of multiple edge-disjoint <b>spanning</b> <b>trees</b> in arbitrary networks, our construction produces significantly lower maximum and average path lengths. Finally, two approaches to providing single link fault tolerance with edge-disjoint <b>spanning</b> <b>trees</b> are presented and evaluated. Keywords: Deadlock freedom, edge-disjoint <b>spanning</b> <b>trees,</b> tree-based multicast, wormhole routing. 1 Introduction Multicast communication involves one multicomputer node sending messages to {{a subset of the}} other nodes in the system. Multicast can be used to build many useful operations such as barrier synchronization, cache invalidati [...] ...|$|R
40|$|Let G be an {{undirected graph}} with V {{vertices}} and E edges. We consider {{the problem of}} enumerating all <b>spanning</b> <b>trees</b> of G: In order to explicitly output all <b>spanning</b> <b>trees,</b> the output size is of 2 (NV), where N {{is the number of}} <b>spanning</b> <b>trees.</b> This, however, can be compressed into 2 (N) size. In this paper, we propose a new algorithm for enumerating all <b>spanning</b> <b>trees</b> of G in such compact form. The time and space complexities of our algorithm are O(N + V + E) and O(V E), respectively. The algorithm is optimal in the sense of time complexity. 1 Introduction. In this paper we consider the problem of enumerating all <b>spanning</b> <b>trees</b> of an undirected graph with V vertices, E edges and N <b>spanning</b> <b>trees.</b> Several algorithms for this problem have been proposed (see [7], [8], [4], [5], [6]). To explicitly enumerate all <b>spanning</b> <b>trees,</b> the total output size is 2 (NV). For this requirement, Gabow and Myers' algorithm [4], and Matsui's [6] which require O(NV +V +E) time and O(V +E) space are best in [...] ...|$|R
25|$|Optimal <b>spanning</b> <b>tree</b> {{problems}} {{have also been}} studied for finite sets of points in a geometric space such as the Euclidean plane. For such an input, a <b>spanning</b> <b>tree</b> is again a tree that has as its vertices the given points. The quality of the tree is measured {{in the same way}} as in a graph, using the Euclidean distance between pairs of points as the weight for each edge. Thus, for instance, a Euclidean minimum <b>spanning</b> <b>tree</b> is the same as a graph minimum <b>spanning</b> <b>tree</b> in a complete graph with Euclidean edge weights. However, it is not necessary to construct this graph in order to solve the optimization problem; the Euclidean minimum <b>spanning</b> <b>tree</b> problem, for instance, can be solved more efficiently in O(nlogn) time by constructing the Delaunay triangulation and then applying a linear time planar graph minimum <b>spanning</b> <b>tree</b> algorithm to the resulting triangulation.|$|E
25|$|Not every {{infinite}} graph has {{a normal}} <b>spanning</b> <b>tree.</b> For instance, a complete graph on an uncountable set of vertices {{does not have}} one: a normal <b>spanning</b> <b>tree</b> in a complete graph can only be a path, but a path has only a countable number of vertices. However, every graph on a countable set of vertices does have a normal <b>spanning</b> <b>tree.</b>|$|E
25|$|Due to {{the notion}} of a {{fundamental}} cycle is the notion of a fundamental cutset. By deleting just one edge of the <b>spanning</b> <b>tree,</b> the vertices are partitioned into two disjoint sets. The fundamental cutset is defined as the set of edges that must be removed from the graph G to accomplish the same partition. Thus, each <b>spanning</b> <b>tree</b> defines a set of V−1 fundamental cutsets, one for each edge of the <b>spanning</b> <b>tree.</b>|$|E
40|$|AbstractThe {{number of}} <b>spanning</b> <b>trees</b> is an {{important}} quantity characterizing the reliability of a network. Generally, the number of <b>spanning</b> <b>trees</b> in a network {{can be obtained by}} directly calculating a related determinant corresponding to the network. However, for a large network, evaluating the relevant determinant is intractable. In this paper, we investigate the number of <b>spanning</b> <b>trees</b> in two-tree networks. We first give a new algorithm which avoids the laborious computation of the determinant for counting the number of <b>spanning</b> <b>trees.</b> Using the algorithm, we can obtain the number of <b>spanning</b> <b>trees</b> of any two-tree network in linear time. The result shows that the computation complexity is O(n), which is better than that of the matrix tree theorem with O(n 2), where n is the number of steps. We then characterize two-tree networks with the maximum and minimum numbers of <b>spanning</b> <b>trees.</b> Denote by P(t) and K(t), respectively, the two-tree networks of t+ 2 vertices with the maximum and minimum numbers of <b>spanning</b> <b>trees.</b> Denote by PA and EN, respectively, the two-tree network of t+ 2 vertices generated by preferential attachment and by equiprobability attachment. By algorithmic analysis and through simulations, we conjecture that NST(K(t)) ≤NST(PA) ≤NST(EN) ≤NST(P(t)) as t tends to infinity, where NST(G) is the number of <b>spanning</b> <b>trees</b> of G. As an application of the algorithm, we give the formula of the number of <b>spanning</b> <b>trees</b> of a particular small-world network...|$|R
40|$|AbstractDeo and Micikevicius {{recently}} gave a new bijection for <b>spanning</b> <b>trees</b> {{of complete}} bipartite graphs. In this paper we devise a generalization of Deo and Micikevicius's method, {{which is also}} a modification of Olah's method for encoding the <b>spanning</b> <b>trees</b> of any complete multipartite graph K(n 1,…,nr). We also give a bijection between the <b>spanning</b> <b>trees</b> of a planar graph and those of any of its planar duals. Finally we discuss the possibility of bijections for <b>spanning</b> <b>trees</b> of DeBriujn graphs, cubes, and regular graphs such as the Petersen graph that have integer eigenvalues...|$|R
40|$|Two <b>spanning</b> <b>trees</b> rooted at some vertex r in a graph G {{are said}} to be {{independent}} if for each vertex v of G, v ≠ r, the paths from r to v in two trees are vertex-disjoint. A set of <b>spanning</b> <b>trees</b> of G is said to be independent if they are pairwise independent. A set of independent <b>spanning</b> <b>trees</b> is optimal if the average path length of the trees is the minimum. Any k-dimensional hypercube has k independent <b>spanning</b> <b>trees</b> rooted at an arbitrary vertex. In this paper, an O(kn) time algorithm is proposed to construct k optimal independent <b>spanning</b> <b>trees</b> on a k-dimensional hypercube, where n = 2 k is the number of vertices in a hypercube...|$|R
25|$|In the {{mathematical}} field of graph theory, a <b>spanning</b> <b>tree</b> T of an undirected graph G is a subgraph {{that is a}} tree which includes all of the vertices of G, with minimum possible number of edges. In general, a graph may have several spanning trees, but a graph that is not connected will not contain a <b>spanning</b> <b>tree</b> (but see Spanning forests below). If all of the edges of G are also edges of a <b>spanning</b> <b>tree</b> T of G, then G is a tree and is identical to T (that is, a tree has a unique <b>spanning</b> <b>tree</b> and it is itself).|$|E
25|$|An {{alternative}} {{model for}} generating spanning trees randomly but not uniformly is the random minimal <b>spanning</b> <b>tree.</b> In this model, {{the edges of}} the graph are assigned random weights and then the minimum <b>spanning</b> <b>tree</b> of the weighted graph is constructed.|$|E
25|$|In {{order to}} {{minimize}} the cost of power networks, wiring connections, piping, automatic speech recognition, etc., people often use algorithms that gradually build a <b>spanning</b> <b>tree</b> (or many such trees) as intermediate steps {{in the process of}} finding the minimum <b>spanning</b> <b>tree.</b>|$|E
40|$|<b>Spanning</b> <b>trees</b> are an {{important}} quantity characterizing the reliability of a network, however, explicitly determining the number of <b>spanning</b> <b>trees</b> in networks is a theoretical challenge. In this paper, we study the number of <b>spanning</b> <b>trees</b> in a small-world scale-free network and obtain the exact expressions. We find that the entropy of <b>spanning</b> <b>trees</b> in the studied network is less than 1, which is {{in sharp contrast to}} previous result for the regular lattice with the same average degree, the entropy of which is higher than 1. Thus, the number of <b>spanning</b> <b>trees</b> in the scale-free network is much less than that of the corresponding regular lattice. We present that this difference lies in disparate structure of the two networks. Since scale-free networks are more robust than regular networks under random attack, our result can lead to the counterintuitive conclusion that a network with more <b>spanning</b> <b>trees</b> may be relatively unreliable. Comment: Definitive version accepted for publication in EPL (Europhysics Letters...|$|R
40|$|This paper {{addresses}} an NP-hard problem, {{referred to}} as Network Topology Design with minimum Cost subject to a Reliability constraint (NTD-CR), to design a minimal-cost communication network topology that satisfies a pre-defined reliability constraint. The paper describes a dynamic programming (DP) scheme to solve the NTD-CR problem, and proposes a DP approach, called Dynamic Programming Algorithm to solve NTD-CR (DPCR-ST), to generate the topology using a selected sequence of <b>spanning</b> <b>trees</b> of the network, STXmin. The paper shows that our DPCR-ST approach always provides a feasible solution, and produces an optimal topology given an optimal order of <b>spanning</b> <b>trees.</b> The paper proves {{that the problem of}} optimally ordering the <b>spanning</b> <b>trees</b> is NP-complete, and proposes three greedy heuristics to generate and order only k <b>spanning</b> <b>trees</b> of the network. Each heuristic allows the DPCR-ST approach to generate STXmin using only k <b>spanning</b> <b>trees,</b> which improves the time complexity while producing a near optimal topology. Simulations based on fully connected networks that contain up to 2. 3 × 109 <b>spanning</b> <b>trees</b> show the merits of using the ordering methods and the effectiveness of our algorithm vis-à-vis to four existing state-of-the-art techniques. Our DPCR-ST approach is able to generate 81. 5 % optimal results, while using only 0. 77 % of the <b>spanning</b> <b>trees</b> contained in networks. Further, for a typical 2 × 100 grid network that contains up to 1. 899102 <b>spanning</b> <b>trees,</b> DPCR-ST approach requires only k= 1214 <b>spanning</b> <b>trees</b> to generate a topology with a reliability no larger than 5. 05 % off from optimal...|$|R
40|$|Let T 1, T 2, [...] Tk be <b>spanning</b> <b>trees</b> in a graph G. If for any pair of {{vertices}} u and v of G, {{the paths}} between u and v in every Ti(0 2), construction of n- 1 edge-disjoint <b>spanning</b> <b>trees</b> {{is given the}} result is optimal {{with respect to the}} number of edge-disjoint <b>spanning</b> <b>trees.</b> Comment: Total number of pages 5 including 8 figure...|$|R
25|$|Every {{connected}} graph has a <b>spanning</b> <b>tree.</b>|$|E
25|$|A <b>spanning</b> <b>tree</b> chosen {{randomly}} {{from among}} all the spanning trees with equal probability is called a uniform <b>spanning</b> <b>tree.</b> Wilson's algorithm {{can be used to}} generate uniform spanning trees in polynomial time by a process of taking a random walk on the given graph and erasing the cycles created by this walk.|$|E
25|$|The {{idea of a}} <b>spanning</b> <b>tree</b> can be {{generalized}} to directed multigraphs. Given a vertex v on a directed multigraph G, an oriented <b>spanning</b> <b>tree</b> T rooted at v is an acyclic subgraph of G in which every vertex other than v has outdegree 1. This definition is only satisfied when the “branches” of T point towards v.|$|E
40|$|AbstractWe {{obtain a}} {{sufficient}} condition for K 1, 4 -free graphs to have <b>spanning</b> <b>trees</b> with at most k leaves, as a generalization {{of the condition}} of Kyaw [A. Kyaw, <b>Spanning</b> <b>trees</b> with at most 3 leaves in K 1, 4 -free graphs, Discrete Math. 309 (2009) 6146 – 6148] for K 1, 4 -free graphs to have <b>spanning</b> <b>trees</b> with at most 3 leaves...|$|R
40|$|Deo and Micikevicius {{recently}} gave a new bijection for <b>spanning</b> <b>trees</b> {{of complete}} bipartite graphs. In this paper we devise a generalization of Deo and Micikevicius’s method, {{which is also}} a modification of Olah’s method for encoding the <b>spanning</b> <b>trees</b> of any complete multipartite graph K(n 1, [...] .,nr). We also give a bijection between the <b>spanning</b> <b>trees</b> of a planar graph and those of any of its planar duals. Finally we discuss the possibility of bijections for <b>spanning</b> <b>trees</b> of DeBriujn Graphs, Cubes, and regular graphs such as the Petersen graph that have integer eigenvalues...|$|R
40|$|In {{this short}} note, we study {{pairwise}} edge-disjoint rainbow <b>spanning</b> <b>trees</b> in properly edge-coloured complete graphs, where a graph is rainbow if its edges have distinct colours. Brualdi and Hollingsworth conjectured that every K_n properly edge-coloured by n- 1 colours has n/ 2 edge-disjoint rainbow <b>spanning</b> <b>trees.</b> Kaneko, Kano and Suzuki later suggested this should hold for every properly edge-coloured K_n. Improving the previous best known bound, {{we show that}} every properly edge-coloured K_n contains Ω(n) pairwise edge-disjoint rainbow <b>spanning</b> <b>trees.</b> Independently, Pokrovskiy and Sudakov recently proved that every properly edge-coloured K_n contains Ω(n) isomorphic pairwise edge-disjoint rainbow <b>spanning</b> <b>trees.</b> Comment: 6 page...|$|R
