15|6135|Public
5000|$|UMS {{protocol}} (proprietary) for streaming to Unreal <b>Streaming</b> <b>Media</b> <b>Player</b> on Windows OS ...|$|E
5000|$|The WDTV Live <b>Streaming</b> <b>Media</b> <b>Player</b> added Miracast {{support with}} {{firmware}} version 2.02.32 ...|$|E
50|$|In 2012, GlobeNewswire {{introduced}} its <b>Streaming</b> <b>Media</b> <b>Player,</b> which {{allows users to}} alternate between videos and slides while monitoring a variety of news sources.|$|E
50|$|Bitmovin is a {{multimedia}} technology company which provides services that transcode digital {{video and audio}} to streaming formats using cloud computing, and <b>streaming</b> <b>media</b> <b>players.</b> Founded in 2013, the Austrian company contributes to MPEG-DASH, an open standard that allows streaming video to be played in HTML5 video and Flash players.|$|R
50|$|The Ultraviolet Common File Format (CFF) {{was created}} by DECE to allow {{downloaded}} video files to be copied between devices, stored on physical media (e.g. DVDs, SD cards, flash memory) or online backup services. They {{are designed to be}} playable on any UltraViolet authorized device (e.g. Blu-ray, <b>streaming</b> <b>media</b> <b>players,</b> Smart TV's, or mobile devices) or software player registered to the household Ultraviolet library.|$|R
50|$|The station can be <b>streamed</b> online using <b>Media</b> <b>player</b> or {{web browser}} on MR1 Kossuth Radio Online.|$|R
50|$|RealPlayer is a <b>streaming</b> <b>media</b> <b>player</b> made by Progressive Networks (later called RealNetworks). The {{first version}} of RealPlayer was {{introduced}} in April 1995 as RealAudio Player {{and is one of}} the first media players capable of streaming media over the Internet.|$|E
5000|$|The Nexus Player is a <b>streaming</b> <b>media</b> <b>player</b> {{created in}} {{collaboration}} between Google and Asus. It {{is the first}} device running Android TV. It was first announced on October 15, 2014 along with the Nexus 6 and the Nexus 9. On May 24, 2016, Google discontinued sales of the Nexus Player, however the device is still receiving official software updates.|$|E
50|$|Google Nexus {{is a line}} of {{consumer}} electronic devices that run the Android operating system. Google manages the design, development, marketing, and support of these devices, but some development and all manufacturing are carried out by partnering with original equipment manufacturers (OEMs). , the devices currently available in the line are two smartphones, the Nexus 6P (made with Huawei) and Nexus 5X (made with LG). The line has also included tablets and streaming media players, though neither type of device is currently available. The most recent tablet was the Nexus 9 (made with HTC), {{and the most recent}} <b>streaming</b> <b>media</b> <b>player</b> the Nexus Player (made with Asus).|$|E
50|$|On {{the release}} {{day of the}} single, the {{official}} Enigma website was updated and finally the video was made available <b>streaming</b> through Windows <b>Media</b> <b>Player</b> and RealPlayer.|$|R
40|$|This paper {{introduces}} Time-lined TCP (TLTCP). TLTCP is {{a protocol}} {{designed to provide}} TCP-friendly delivery of time-sensitive data to applications that are loss-tolerant, such as <b>streaming</b> <b>media</b> <b>players.</b> Previous work on unicast delivery of <b>streaming</b> <b>media</b> over the Internet proposes using UDP and performs congestion control at the user level by regulating the application's sending rate (attempting to mimic the behavior of TCP {{in order to be}} TCP-friendly). TLTCP, on the other hand, is intended to be implemented at the transport level, and is based on TCP with modifications to support time-lines. Instead of treating all data as a byte stream TLTCP allows the application to associate data with deadlines. TLTCP sends data in a similar fashion to TCP until the deadline for a section of data has elapsed; at which point the now obsolete data is discarded in favor of new data. As a result, TLTCP supports TCP-friendly delivery of <b>streaming</b> <b>media</b> by retaining much of TCP's congestion control fun [...] ...|$|R
50|$|With version 12, <b>media</b> <b>streaming</b> {{was further}} improved. While {{previous}} versions <b>streamed</b> <b>media</b> to UPnP compliant devices (Digital Media Server role) and could play media by fetching {{it from a}} network share (Digital <b>Media</b> <b>Player</b> role), Windows <b>Media</b> <b>Player</b> 12 can access media from the shared media libraries on the network or HomeGroup, <b>stream</b> <b>media</b> to DLNA 1.5 compliant devices and allows itself (once the remote control option is turned on) to be remotely controlled by Digital Media Controller devices which <b>stream</b> <b>media</b> (Digital Media Renderer role). Similarly, the Play To feature once enabled for remote PCs, by turning on remote control of the player, allows compliant devices and computers to be discovered and controlled remotely from a computer running Windows <b>Media</b> <b>Player</b> 12 (Digital <b>Media</b> Controller role). If the devices {{do not support the}} <b>streamed</b> format, Windows <b>Media</b> <b>Player</b> 12 transcodes the format on-the-fly. Media from a home network can also be streamed over the internet using an Online ID Provider service, which handles discovery of the computer's IP address, authorization, security, connectivity and Quality of Service issues.|$|R
5000|$|According to the WD Site, it was {{released}} in early 2013. [...] (NTSC model number WDBMBA0000NBK). Their exact words are: With the WD TV Play Media Player, we have changed the interface, while retaining all of the favorite features such as customizable themes, {{the ability to get}} content info from the internet, as well as the same built-in wireless capabilities used by the WD TV Live <b>Streaming</b> <b>Media</b> <b>Player.</b> Also, like the WD TV Live Plus, WD TV Live Streaming, and WD TV Live Hub, the WD TV Play is capable of playing DRM protected services. The remote control has been modified to fit the model's compact design, and we added specific buttons to the favorite Online Services for quick access to them.|$|E
40|$|This study {{introductions}} {{situation of}} video storage {{and the methods}} of video data management, then proposes a Scheduling Strategy algorithm based on Offset Cache (SSOC). According to the statistical information of data block buffer offset, through building a cloud environment and studying the storage layerâ€™s video data storage of the cloud storage, the algorithm schedules on mastering the supply and demand of data block comprehensively and accurately and solves the system's launch delay and the continuity of <b>streaming</b> <b>media</b> <b>player.</b> The method has applied in school's teaching resources...|$|E
30|$|Further {{study will}} {{determine}} whether the dynamic channel model characteristics can be easily and beneficially extended, with additional states to capture the dynamic nature of adaptive traffic and radio channels on different timescales and with other channels and traffic types. It is also attractive to consider other policy derivation algorithms to determine the trade-off between time taken to accurately capture traffic/channel behaviour and the opportunity exploitation potential. Finally, we have not evaluated {{the replacement of the}} built-in adaptive algorithms within the Smooth <b>streaming</b> <b>media</b> <b>player.</b> This can potentially provide the benefit of faster convergence to optimal policies and also better overall performance. However, there are clearly implications on the system stability and the need to ensure fairness between different OTT CoD users is not compromised in larger deployment scenarios.|$|E
40|$|The typical {{duration}} of multimedia streams makes wireless network interface (WNIC) energy consumption a particularly acute problem for mobile clients. In this work, we explore ways to transmit data packets in a predictable fashion; allowing the clients to transition the WNIC {{to a lower}} power consuming sleep state. First, we show the limitations of IEEE 802. 11 power saving mode for isochronous multimedia streams. Without {{an understanding of the}} stream requirements, they do not offer any energy savings for multimedia streams over 56 kbps. The potential energy savings is also affected by multiple clients sharing the same access point. On the other hand, an application-specific server side traffic shaping mechanism can offer good energy saving for all the stream formats without any data loss. We show that the mechanism can save up to 83 % of the energy required for receiving data. The technique offers similar savings for multiple clients sharing the same wireless access point. For high fidelity <b>streams,</b> <b>media</b> <b>players</b> react to these added delays by lowering the stream fidelity. We propose that future <b>media</b> <b>players</b> should offer configurable settings for recognizing such energy-aware packet delay mechanisms...|$|R
5000|$|MSNP9 was {{introduced}} with MSN Messenger 6, adding support for [...] "D type" [...] (data) messages, {{which are used}} for transferring display pictures and custom emoticons between clients, frame-by-frame web cam (rather than a traditional <b>stream</b> like Windows <b>Media</b> <b>Player's</b> WMV format) and an improved voice system, as well as improved NAT traversal for file transfers.|$|R
40|$|Abstract Nowadays mobile {{streaming}} service through {{cell phone}} {{is becoming the}} highlight of new value-added mobile services. Based on the present CDMA 1 x wireless data network and Binary Runtime Environment for Wireless (BREW) platform, adopting compression technologies of H. 264 and QCP, a set of <b>streaming</b> <b>media</b> <b>players</b> are designed and implemented, and the principle, structure, key technologies and performance analysis of this system are introduced. This player works well in practice. Key Words streaming media; Binary Runtime Environment for Wireless (BREW); Real-time Transport Protocol (RTP); Real-time Streaming Protocol (RTSP) There are two major methods for audio/video files transfer through the network, downloading and streaming. The volume of storage and network bandwidth restricts transferring big audio/video files. Downloading needs minutes or hours while streaming only takes several seconds in starting and buffering. Streaming server will continuously send real-time packets to clients and the users donâ€™t need {{to wait for the}} whole file to be downloaded. They can play and receive simultaneously without big cache. Streaming is certainly a better choice for the limited working space of cell phone and PDA, etc [1 - 2]. The expanded bandwidth for air interfaces has made a solid ground for <b>streaming</b> <b>media</b> application on wireless networks. With the advantages of wireless system in time and place, mobile <b>streaming</b> <b>media</b> service is very attractive. The China Unicomâ€™s CDMA 1 x data network has an average steady rate of 70 - 80 kbps and is capable of running <b>streaming</b> <b>media</b> business. This paper will introduce the implementation of a mobile streaming client player based on BREW platform. 1 Mobile <b>Streaming</b> <b>Media</b> System Fig. 1 shows the structure of the mobile <b>streaming</b> <b>media</b> system, including four basic parts: the server, the client, the transmission channel and the content source. The server adopts concurrent server of cluster; the client is a cell phone supporting BREW application; the transmission channel uses CDMA 1 x wireless network of China Unicom; and the content source are the streaming type documents or real-time audio/vide...|$|R
40|$|The {{emergence}} of free streaming media players, {{coupled with the}} availability of powerful inexpensive laptop computers has created a domain for mobile multimedia applications. Mobile multimedia applications must deal with the inherent variability generated when migrating from office to conference room, den to patio, or classroom to dorm room. This paper presents a multi-layered multimedia architecture utilizing adaptive layers and cross-layer notifications. An implementation of that architecture is demonstrated using a <b>streaming</b> <b>media</b> <b>player</b> that communicates with a video server while switching from wired LAN to POTS to wireless LAN, transparently adapting to new network addresses and bandwidth fluctuations. Mobility is supported by using device indications to force the adaptive feedback system into an "exploratory" mode and signal the application to re-establish the control and data channels. 1 Introduction Recent years have witnessed two prominent trends that have serious implicatio [...] ...|$|E
40|$|Deployment of {{asynchronous}} learning systems {{is still very}} limited and expensive due to the common use of digital video for recording and distribution of classroom lectures. Lectern II is a digital desk system that can transparently capture, through a touch-sensitive screen, all important lecture components during normal classroom lecturing activity without expensive video acquisition equipments. Lectures recorded through Lectern can be edited, automat ically uploaded to a web server and viewed by students using a standard <b>streaming</b> <b>media</b> <b>player.</b> Since the average size of a one hour-long lecture is less than 10 MB, Lectern II lectures can be conveniently played even using a modest modem connection. Considering {{the total cost of}} a complete Lectern II system at less than $ 4, 000, Lectern II represents the first Web-based course lecture recording system that {{has the potential to be}} widely used in the classrooms of universities and K- 12 schools...|$|E
40|$|In recent years, {{although}} there are many IMC(Interactive Multimedia Creator) software, such as Macromedia Flash Shockware tool & Founder Author Tool, which have become very popular among multimedia CAI (Computer Aided Instruction) developers on creating two_dimensional(2 D) animation, vector graphics and interaction operations, some IMCPs(the Product of Interactive Multimedia Creator) couldnâ€™t be transferred over Internet through streaming multimedia technology. In order to enhance the functions of IMCPs, in the paper, some methods are proposed to combine IMCPs with MPEG 4 technology by which IMCPs could be translated to streaming multimedia and transferred over Internet, these methods include converting the file format of IMCPs â€™ into MP 4 format, Revealing Chinese characters, improving QoS, extending MPEG 4 â€™s support streamType and so on. These technologies have been realized by presenting a process of both converting the products of Founder Author Tool into a kind of MPEG 4 file format and building a corresponding <b>streaming</b> <b>media</b> <b>player,</b> which further enhances the content of Founder Author Toolâ€™s products by streaming multimedia technology. On the other hand, IMC can painlessly produce MPEG 4 contents without learning any new content development tools, and benefit from the international standard and its interoperability...|$|E
5000|$|The show aired from 6:00 to 9:00 am Eastern Time from Monday to Friday, with a [...] "Best of Morning Sedition" [...] on Saturdays from 6:00 to 10:00 am Eastern Time on Air America Radio. [...] It was {{available}} via Internet <b>streaming</b> through Windows <b>Media</b> <b>Player</b> or the RealPlayer. The show was {{also available in}} MP3 podcast format for use with iTunes and the iPod.|$|R
5000|$|Element OS {{came with}} some {{specialty}} applications for its role, including XBMC as a media center, the Cooliris Media Browser plugin for <b>streaming</b> content, VLC <b>media</b> <b>player</b> to play back video, Decibel Audio Player and the Transmission BitTorrent client. It also {{came with the}} Mozilla Firefox browser with zoom functionality through the [...] "no squint" [...] add-on to aid in web browsing at the higher resolutions that HTPCs often use.|$|R
50|$|The client software, {{running on}} each listener's computer, scans through a {{playlist}} file until it finds an entry {{which is scheduled}} for the current time, then fetches that media. Files are downloaded using the Open Content Network (OCN) utilizing Swarmcast swarming download technology. After the first file download has started, the client immediately sends it to a locally generated icecast-compatible <b>stream.</b> The client's <b>media</b> <b>player</b> can then be directed to the local stream and listen to it exactly {{as though it was}} a normal icecast stream.|$|R
40|$|Thesis (Master) [...] Ä°zmir Institute of Technology, Electronics and Communication Engineering, Ä°zmir, 2008 Includes bibliographical {{references}} (leaves: 85 - 88) Text in English; Abstract: Turkish and Englishxi, 90 leavesThere {{has been}} a surge {{in the number of}} digital audio and video content in recent years. Advances in the compression and storage technologies and improvements in the speed of internet connection have enabled widespread use of multimedia content. A wide variety of devices have been introduced to decode and play these media contents. Initially designed as a mere voice communication device, the mobile phones nowadays come equipped with a variety of multimedia capabilities including media players despite their limited system resources. Nowadays, huge servers host dramatically increased audio and video contents Users prefer to watch these contents while streaming rather than downloading them first. So, streaming media players are responsible to present multimedia contents without annoying interrupts. This thesis firstly introduces challenges in design and implementation of a <b>streaming</b> <b>media</b> <b>player</b> and then proposes solutions. Main challenges are keeping audio-video synchronization and server-client synchronization and detecting stream type, handling of multithreaded operations and buffer management. Audio-video synchronization problem is solved by using audio as master stream. Server-client synchronization problem is solved by designing a playback mechanism that keeps synchronization with the server by tuning the playback rate of a streaming media without losing lip-sync between audio and video. The proposed streaming player also has a feature of identifying the type of a media stream very rapidly without using a discrete stream inspector module. The presented design is heavily multithreaded which is implemented on Linux platform, moreover it is also convenient for and implementable on any multithreaded platform...|$|E
40|$|There is {{widespread}} use of compression in multimedia content delivery, e. g. within video on demand services and transport links between live events and production sites. The content must undergo compression prior to transmission in order to deliver high quality video and audio over most networks, {{this is especially true}} for high definition video content. 	 JPEG 2000 is a recent image compression standard and a suitable compression algorithm for high definition, high rate video. With its highly flexible embedded lossless and lossy compression scheme, JPEG 2000 has a number of advantages over existing video codecs. The only evident drawbacks with respect to real-time applications, are that the computational complexity is quite high and that JPEG 2000, being an image compression codec as opposed to video codec, typically has higher bandwidth requirements. Special-purpose hardware can deliver high performance, but is expensive and not easily updated. A JPEG 2000 decoder application running on general-purpose computer hardware can complement solutions depending on special-purpose hardware and will experience performance scaling together with the available processing power. In addition, production costs will be none-existing, once developed. The application implemented in this project is a <b>streaming</b> <b>media</b> <b>player.</b> It receives a compressed video stream through an IP interface, decodes it frame by frame and presents the decoded frames in a window. The decoder is designed to better take advantage of the processing power available in today's desktop computers. Specifically, decoding is performed on both CPU and GPU in order to decode minimum 50 frames per second of a 720 p JPEG 2000 video stream. The CPU executed part of the decoder application is written in C++, based on the Kakadu SDK and involve all decoding steps up to and including reverse wavelet transform. The GPU executed part of the decoder is enabled by the CUDA programming language, and include luma upsampling and irreversible color transform. Results indicate that general purpose computer hardware today easily can decode JPEG 2000 video at bit rates up to 45 Mbit/s. However, when the video stream is received at 50 fps through the IP interface, packet loss at the socket level limits the attained frame rate to about 45 fps at rates of 40 Mbit/s or lower. If this packet loss could be eliminated, real-time decoding would be obtained up to 40 Mbit/s. At rates above 40 Mbit/s, the attained frame rate is limited by the decoder performance and not the packet loss. Higher codestream rates should be endurable if reverse wavelet transform could be mapped from the CPU to the GPU, since the current pipeline is highly unbalanced. </p...|$|E
5000|$|Installing Windows Media Connect or Windows <b>Media</b> <b>Player</b> 11 adds a UPnP-based <b>streaming</b> <b>media</b> server.|$|R
50|$|The Helix Universal Media Server was {{a product}} {{developed}} by RealNetworks and originates from the first <b>streaming</b> <b>media</b> server originally developed by Progressive Networks in 1994. It supported a variety of <b>streaming</b> <b>media</b> delivery transports including MPEG-DASH (Standards based HTTP streaming) RTMP (flash), RTSP (standard), HTTP Live Streaming (HLS), Microsoft Silverlight and HTTP Progressive Download enabling mobile phone OS (Android, Blackberry, iOS, Symbian, Windows Mobile) and PC OS media client (Flash <b>Media</b> <b>Player,</b> QuickTime, RealPlayer, Windows <b>Media</b> <b>Player)</b> delivery.|$|R
5000|$|... #Caption: The Roku XD/S digital <b>media</b> <b>players</b> {{works with}} popular <b>streaming</b> <b>media</b> sites like Amazon.com and Netflix {{as well as}} locally stored content ...|$|R
50|$|Lahr joined Microsoft in 1996, {{after leaving}} CNNfn, and helped as a {{founding}} member of its <b>streaming</b> <b>media</b> division. Prior to joining Microsoft he worked for VXtreme and developed <b>streaming</b> <b>media</b> solutions which were later bought by Microsoft and were essential in the development of Windows <b>Media</b> <b>Player</b> and MPEG4.|$|R
5000|$|... 14 April 2010 - Helix Universal Server version 14 {{launched}} supporting universal <b>streaming</b> <b>media</b> delivery transports including RTMP, RTSP, HTTP Live Streaming, Microsoft Silverlight and HTTP Progressive Download enabling {{mobile phone}} OS (Android, Blackberry, iPhone OS 3.0, Symbian, Windows Mobile) and PC OS media client (Flash <b>Media</b> <b>Player,</b> QuickTime, RealPlayer, Windows <b>Media</b> <b>Player)</b> delivery. Helix Universal Server continues to support 3GPP, RealMedia, Windows Media, QuickTime and MPEG-4 {{from a single}} <b>streaming</b> <b>media</b> platform operating on Linux (RHEL5), Solaris SPARC, Windows 2003 or Windows 2008 Server OS ...|$|R
5000|$|Microsoft {{developed}} a <b>media</b> <b>player</b> known as ActiveMovie in 1995 that allowed <b>streaming</b> <b>media</b> and included a proprietary streaming format, {{which was the}} precursor to the streaming feature later in Windows <b>Media</b> <b>Player</b> 6.4 in 1999. In June 1999 Apple also introduced a <b>streaming</b> <b>media</b> format in its QuickTime 4 application. It was later also widely adopted on websites along with RealPlayer and Windows <b>Media</b> <b>streaming</b> formats. The competing formats on websites required each user to download the respective applications for streaming and resulted in many users having to have all three applications on their computer for general compatibility.|$|R
50|$|ActiveMovie was the {{immediate}} ancestor of Windows <b>Media</b> <b>Player</b> 6.x, {{and was a}} <b>streaming</b> <b>media</b> technology now known as DirectShow, developed by Microsoft to replace Video for Windows. ActiveMovie allows users to view <b>media</b> <b>streams,</b> whether distributed via the Internet, an intranet or CD-ROMs.|$|R
50|$|VLC <b>media</b> <b>player</b> {{supports}} many {{audio and}} video compression methods and file formats, including DVD-Video, video CD and streaming protocols. It is able to <b>stream</b> <b>media</b> over computer networks and to transcode multimedia files.|$|R
40|$|Abstract. Due to {{the limited}} {{resources}} in thin-clients on mobile devices and {{the large amount of}} computation for decoding <b>streaming</b> <b>media,</b> {{it is not easy to}} support the QoS of <b>streaming</b> <b>media</b> for thin-client on mobile environment. To solve the problems, the terminal servers would be charged for decoding the <b>streaming</b> <b>media</b> and thin-clients have a role to update only the changed areas in their screen. In this paper, an intelligent <b>media</b> <b>player</b> is proposed to provide the improved QoS for <b>streaming</b> <b>media</b> in thin-client computing. Since the proposed method reflects the intrinsic property of <b>streaming</b> <b>media,</b> it provides both the enhanced video quality and the audio streaming fully synchronized with image frames. ...|$|R
25|$|VLC <b>media</b> <b>player</b> (commonly {{known as}} VLC) {{is a free}} and open-source, {{portable}} and cross-platform <b>media</b> <b>player</b> and <b>streaming</b> <b>media</b> server developed by the VideoLAN project. VLC is available for desktop operating systems and mobile platforms, such as Windows 10 Mobile, Windows Phone, Android, Tizen, iOS. VLC is also available on digital distribution platforms such as Apple's App Store, Google Play and Windows Store.|$|R
