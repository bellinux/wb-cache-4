0|10000|Public
40|$|Abstract State Machines (ASMs) are {{a proven}} {{methodology}} for the precise high-level <b>specification</b> <b>of</b> <b>formal</b> <b>requirements</b> in early phases of software design. Many extensions to ASMs {{have been proposed}} and used widely, including Distributed ASMs, Turbo ASMs, Gurevich 2 Ì† 7 s partial updates, and syntactically convenient rule forms. This, coupled {{with the fact that}} ASMs do not bind the user to any predetermined data types or operators, allows for extreme flexibility in exploration of the problem space. Striving to provide this same level of freedom with executable ASMs, the CoreASM engine and language have been designed with syntactic and semantic extensibility in mind. We formally specify extensibility mechanisms that allow for language augmentation with arbitrary data structures supporting simultaneous incremental modification, new operators, and additional language syntax. Our work is a major step toward providing an environment suitable for both further experimentation with ASMs and for the machine-aided creation <b>of</b> robust software <b>specifications...</b>|$|R
40|$|This paper {{details the}} design of an {{autonomous}} vehicle CAD toolchain, which captures <b>formal</b> descriptions <b>of</b> driving scenarios {{in order to develop}} a safety case for an autonomous vehicle (AV). Rather than focus on a particular component of the AV, like adaptive cruise control, the toolchain models the end-to-end dynamics of the AV in a formal way suitable for testing and verification. First, a domain-specific language capable of describing the scenarios that occur in the day-to-day operation of an AV is defined. The language allows the description and composition of traffic participants, and the <b>specification</b> <b>of</b> <b>formal</b> correctness <b>requirements.</b> A scenario described in this language is an executable that can be processed by a specification-guided automated test generator (bug hunting), and by an exhaustive reachability tool. The toolchain allows the user to exploit and integrate the strengths of both testing and reachability, in a way not possible when each is run alone. Finally, given a particular execution of the scenario that violates the requirements, a visualization tool can display this counter-example and generate labeled sensor data. The effectiveness of the approach is demonstrated on five autonomous driving scenarios drawn from a collection of 36 scenarios that account for over 95 % of accidents nationwide. These case studies demonstrate robustness-guided verification heuristics to reduce analysis time, counterexample visualization for identifying controller bugs in both the discrete decision logic and low-level analog (continuous) dynamics, and identification of modeling errors that lead to unrealistic environment behavior...|$|R
40|$|We {{present a}} formal model for {{modelling}} Event-Condition-Action Rules by partitioning a state space and evolution function {{taking into account}} the features that are typical of Intelligent Environments. This model allows for a precise definition <b>of</b> <b>formal</b> <b>requirements</b> and for their efficient verification...|$|R
2500|$|Sanctions for non-voting {{behaviour}} were foreseen {{sometimes even}} in absence <b>of</b> a <b>formal</b> <b>requirement</b> ...|$|R
40|$|Abstract. This paper {{illustrates}} {{a framework for}} the definition <b>of</b> <b>formal</b> <b>requirements</b> {{on the behavior of}} Web service compositions. The framework exploits Quantified Linear Time Logics (QLTL) as formal specification language. The paper also discusses two ap-proach for the verification <b>of</b> such <b>formal</b> <b>requirements.</b> The first approach, which is classical, transforms QLTL formulas into (non-quantified) Linear Time Logic formulas by expanding the quantifiers, and then exploits SAT-based Bounded Model Checking techniques on the resulting LTL formulas. The second approach, which is novel, exploits Bounded Model Checking techniques based on Quantified Boolean Formulas (QBF), thus avoiding the explicit expansion of the quantifiers. ...|$|R
5000|$|One {{major goal}} of the Electronic Communications Convention is the removal of {{obstacles}} to international trade arising from the insertion <b>of</b> <b>formal</b> <b>requirements</b> in treaties concluded before the broad adoption of electronic means. Article 20 ECC lists several treaties prepared by UNCITRAL as treaties that will be [...] "electrified" [...] by {{the adoption of the}} ECC. In other words, by virtue of adoption <b>of</b> the ECC <b>formal</b> <b>requirements</b> contained in those treaties, especially written form requirements, will be satisfied with the use of electronic communications under the conditions set forth in the ECC.|$|R
50|$|The {{great success}} of the fideicommissum as a clever fraus legi fracta is proved by {{reference}} to its long usage (redefined by Justinian I, it may have by his reign existed up to 700 years). The reasons lie in the great variety of cases it could deal with and the lack <b>of</b> <b>formal</b> <b>requirements</b> {{which had to be}} met.|$|R
5000|$|Dress uniforms {{are worn}} during military-related formal occasions, such as ceremonies and other {{official}} functions. Many types of dress uniforms {{are used in}} the Navy with the full range <b>of</b> <b>formal</b> <b>requirements</b> represented. Service dress is the least formal dress uniform, full dress is one step higher in formality, and mess dress is the most formal dress available.|$|R
50|$|Finally, {{in order}} to lend {{prestige}} to the distinctions of this Order and ensure that each is properly justified, the current regulation makes a detailed discussion of the merits {{to be considered for}} grant, <b>of</b> <b>formal</b> <b>requirements</b> to be met by proposals for entry and promotion within the Order, stating the legitimate authorities to do them, and reporting procedures that can be instructed {{in order to}} determine the suitability of granting.|$|R
40|$|This article {{deals with}} the {{validation}} <b>of</b> <b>formal</b> <b>requirement</b> <b>specifications</b> <b>of</b> real-time systems. Formally specified requirements can be validated by both direct execution and by proving properties at the specification level. We first discuss how the timing characteristics of a system can be specified by a formalism based on high-level Petri nets. Then we show how its temporal properties can be proven {{by means of a}} symbolic execution-based proof method for time reachability analysis. Depending on the complexity of the model of the specified system, the method may contain some undecidable steps and require interaction with the user. In many practical cases, however, the method can be performed mechanically and has acceptable response times...|$|R
40|$|Abstract. We discuss generic <b>formal</b> <b>requirements</b> for {{reasoning}} {{about two}} party key distribution protocols, using a language developed for specifying security requirements for security protocols. Typically earlier work has considered <b>formal</b> analysis <b>of</b> already developed protocols. Our {{goal is to}} present sets <b>of</b> <b>formal</b> <b>requirements</b> for various contexts which can be applied {{at the design stage}} as well as to existing protocols. We use a protocol analysis tool we have developed {{to determine whether or not}} a speci c protocol has met some of the requirements we speci ed. We show how this process uncovered a aw in the protocol and helped us re ne our requirements. ...|$|R
40|$|We are {{concerned}} with the maintenance <b>of</b> <b>formal</b> <b>requirements</b> documents in the application area of telephone switching. We propose a speci cation methodology that avoids some of the so-called feature interaction problems from the beginning, and that converts some more into type errors. We maintain all the variants and versions of such a system together as one family <b>of</b> <b>formal</b> speci cations. For this, we de ne a formal feature combination mechanism. We present a tool which checks for feature interaction problems, which extracts a desired family member from the family document, and which generates documentation on the structure of the family. We also report on a quite large case study...|$|R
40|$|Requirements play an {{important}} role in software systems developments. The impact of errors in requirements is costly, especially for safety and critical systems. Two kinds of properties are necessary in a <b>formal</b> <b>requirements</b> speci cation, applicationindependent properties and application properties. Application-independent properties are simple properties derived from the underlying <b>formal</b> <b>requirements</b> model and speci cation notation. Although detecting the failure to satisfy the application-independent properties is usually simple, the large size of requirements documents means that reviewers must spend considerable time and e ort checking them. Computer-supported preliminary checking tools are necessary for industrial application <b>of</b> <b>formal</b> <b>requirements</b> methods and improving the quality of requirements documents. In this thesis, a Preliminary Requirements Checking Tool (PRCT) is developed for this purpose. It checks the application-independent properties for SCR style requirements. The properties checked by PRCT are derived from the Four Variabl...|$|R
50|$|Through ACAT, {{post-secondary}} stakeholders work cooperatively {{to ensure}} a smooth transition and transferability of courses and programs within the post-secondary system. ACAT also promotes assessment and recognition of prior learning assessment to recognize experiences outside <b>of</b> <b>formal</b> course <b>requirements.</b>|$|R
40|$|This paper {{presents}} a method {{which makes it}} possible to determine reliability characteristics of navigational positioning systems, relevant to an assumed value of permissible error in position fixing. The method allows to calculate: availability, reliability as well as operation continuity of position fixing system for an assumed, determined on the basis <b>of</b> <b>formal</b> <b>requirements</b> - both worldwide and national, position-fixing accuracy. The proposed mathematical model allows to satisfy, by any navigational positioning system, not only requirements as to position-fixing accuracy of a given navigational application (for air, sea or land traffic) but also the remaining characteristics associated with technical serviceability of a system...|$|R
40|$|Formal {{methods have}} been shown {{to improve the quality of}} software, but they are seldom if ever used outside the safety-critical system domain. Typically, the initial cost <b>of</b> {{creating}} <b>formal</b> <b>requirements</b> <b>specifications</b> is perceived to be prohibitively large while not necessarily guaranteeing future benefits. In this paper we discuss ways <b>of</b> tailoring <b>formal</b> methods to suit current economic realities...|$|R
40|$|The {{standard}} covering-law {{model of}} explanation sets forth a <b>formal,</b> deductive account <b>of</b> explanation. The account faces two kinds <b>of</b> <b>formal</b> objections. The fist {{is the problem}} of explanatory relevance. This concerns the <b>specification</b> <b>of</b> <b>formal</b> conditions for relevant logical derivations. The second difficulty {{is the problem of}} 2 Ì† 2 self 2 Ì† 2 -explanation. This involves specifications which govern the role that a given statement is allowed to play in an explanatory deduction of itself. A revision of the standard covering-law model provides a natural way to avoid both of these problems. And, it also has the virtue of not being an ad hoc solution...|$|R
40|$|We discuss generic <b>formal</b> <b>requirements</b> for {{reasoning}} {{about two}} party key distribution protocols, using a language developed for specifying security requirements for security protocols. Typically earlier work has considered <b>formal</b> analysis <b>of</b> already developed protocols. Our {{goal is to}} present sets <b>of</b> <b>formal</b> <b>requirements</b> for various contexts which can be applied {{at the design stage}} as well as to existing protocols. We use a protocol analysis tool we have developed {{to determine whether or not}} a specific protocol has met some of the requirements we specified. We show how this process uncovered a flaw in the protocol and helped us refine our requirements. 1 Introduction Recently, there has been a growing interest in the development and use <b>of</b> <b>formal</b> methods to analyze security properties of cryptographic protocols. Together with this increased interest, there has been a growing recognition that it is not enough to possess a means of formally specifying and analyzing a protocol; one must [...] ...|$|R
50|$|Before {{he stepped}} down as Harvard's {{president}} in 1933 and with Nazi rumblings overseas in Germany, Abbott Lawrence Lowell wished to break the stranglehold of the German Ph.D. degree on American academic life, believing it stifled creativity with its overlong list <b>of</b> <b>formal</b> <b>requirements.</b> Lowell designed the Society of Fellows {{as an alternative to}} the Ph.D. Its relative freedom encourages members to pursue lines of thinking that transcend traditional academic disciplinary boundaries and allow them to focus their attention on larger questions more fundamental to society. Junior Fellows were required to be male until 1972, when Martha Nussbaum was selected as the first female Junior Fellow.|$|R
40|$|We de ne the syntax and the {{semantics}} of {{a feature}} construct for the formal speci cation language CSP-OZ. Our extension allows to specify a family <b>of</b> <b>formal</b> <b>requirements</b> in one document. The intended application area {{is to avoid}} or to detect feature interaction problems in telephone switching systems. Our extension converts {{some of these problems}} into type errors. CSP-OZ has been de ned recently, it is a combination of CSP and Object-Z. Our extension itself is of a more general nature, since { while on our way { we de ne it for the well-known formal speci cation languages Z and CSP, too...|$|R
40|$|Termination detection, a {{classical}} problem in distributed computing, is revisited {{in the new}} setting provided by the emerging mobile computing technology. A simple solution tailored for use in ad hoc networks is employed {{as a vehicle for}} demonstrating the applicability <b>of</b> <b>formal</b> <b>requirements</b> and design strategies to the new field of mobile computing. The approach is based on well understood techniques in specification refinement, but the methodology is tailored to mobile applications and helps designers address novel concerns such as the mobility of hosts, transient interactions, and specific coordination constructs. The proof logic and programming notation of Mobile UNITY provide the intellectual tools required to carry out this task. 1...|$|R
40|$|We {{present the}} EuRailCheck tool, which {{supports}} the for-malization and the validation of requirements, {{based on the}} use <b>of</b> <b>formal</b> methods. The tool allows the user to analyze the requirements in natural language and to categorize and structure them. It allows to formalize the requirements into a subset of UML enriched with static and temporal constraints for which we defined a formal semantics. Finally, the tool allows to apply model checking techniques specialized for the validation <b>of</b> <b>formal</b> <b>requirements.</b> The tool has been developed and validated within a project funded by the European Railway Agency for the val-idation of the European Train Control System specification. By now, the tool has been successfully used by about thirty railway experts of different companies...|$|R
50|$|On 15 May 2013, Schmitt {{formally}} {{resigned from}} his doctorate after an academic remedy commission declared that his thesis {{did not meet}} the criteria, either in terms <b>of</b> content or <b>formal</b> <b>requirements.</b>|$|R
40|$|Norwegian {{fisheries}} {{have undergone}} tremendous changes, due to tech- nological developments {{and the introduction}} of resource management. In addi- tion, societal changes and in particular the introduction <b>of</b> <b>formal</b> <b>requirements</b> and the formalization of training and education, have also greatly affected the fishing fleet. Jentoft and Wadel (1984) described the Coastal Employment System. This system was characterized by mutual dependency among actors, flexibility of the system and mobility of labour, and primary socialization. The question we ask is therefore: have the above mentioned changes affected the employment and recruitment patterns in the fishing fleet? If so, what do they look like today? And is the concept of the Coastal Employment System still relevant...|$|R
40|$|The {{phenomenon}} in empirical domain of saving and credit cooperation {{is believed to}} have destroyed the ideal concept of cooperation. However, the norms can not protect the concept. Saving and credits are often used by the managerial, mostly businessmen to offer saving and draw credits from the society. The unbalance of of the contributed capital and the authority of drawing credit risks in the security of the creditors. The lack of the rules in cooperation Rules about if unmet <b>of</b> <b>formal</b> <b>requirements</b> causes the managerial to take the responsibility personally gives a lot of advantages to the managerial. It is because the managerial conduct cooperation as a firm with a very limited responsibility...|$|R
40|$|Abstract. For {{application}} scenarios such as {{the management}} of business process variants or business process quality, business objective models assume the role <b>of</b> <b>formal</b> <b>requirements</b> definitions as in software engi-neering. However, effective concepts in this area still constitute {{a gap in the}} presently available array of business process management meth-ods. To address this issue, this paper develops and shortly evaluates a refined business objective modeling approach. Our approach builds on use case-based effectiveness criteria, and on insights gained from assess-ing the state of the art. It derives required constructs and interrelations from application scenarios, and integrates these into a business objective meta-model. As an initial validation of our concept, we model a sample scenario and match the results against effectiveness criteria...|$|R
40|$|Abstract. In {{business}} process design, business objective models can ful-fill the role <b>of</b> <b>formal</b> <b>requirement</b> definitions. Matching process models against objective models would, for instance, enable sound comparison of implementation alternatives. For that purpose, objective models {{should be available}} independently of their concrete implementation in a busi-ness process. This issue is not addressed by common {{business process}} management concepts yet. Moreover, process models are currently not sufficiently expressive to determine business process efficacy {{in the sense of}} fulfilling a business objective. Therefore, this paper develops and in-tegrates constructs required for efficacy-aware process modeling and apt to extend common modeling approaches. The concept is illustrated with a sample scenario. Overall, it serves as an enabler for progressive appli-cations like automated process optimization...|$|R
40|$|An {{analysis}} <b>of</b> <b>formal</b> <b>requirements</b> {{and methodological}} concepts of admission procedures applied in German Master {{programs in the}} library and information science field Inspired by the Bologna process, LIS Master programs now come with quite different admission criteria and admission procedures. Purely formal criteria â€“ like e. g. the grade of an earlier degree â€“ were replaced by university-specific admission procedures which differentiate by program related criteria. Ranking of applicants is now determined by scores related to working experience, by subject-based qualification, and by relevant criteria from the labour market. Interviews and assessments have been introduced as {{the second stage of}} the admission procedures. This paper gives a comprehensive overview on the different concepts applied to LIS Master programs at universities in Germany...|$|R
40|$|Whether {{or not a}} {{software}} system satisfies the anticipated user requirements is ultimately determined by the behaviors of the software. So it is necessary and valuable to research requirements modeling language and technique {{from the perspective of}} behavior. This paper presents a lightweight behavior based requirements modeling language BDL with formal syntax and semantics, and a general-purpose requirements description model BRM synthesizing the concepts of viewpoint and scenario. BRM is good for modeling large and complex system due to its structure is very clear. In addition, the modeling process is demonstrated through the case study On-Line Campus Management System. By lightweight formal style, BDL & BRM can effectively bridge the gap between practicability and rigorousness <b>of</b> <b>formal</b> <b>requirements</b> modeling language and technique...|$|R
40|$|The feature {{interaction}} {{problem is}} prominent in telephone service development. Through {{a number of}} case studies, we have discovered that no single semantic framework is suitable for the synthesis and analysis <b>of</b> <b>formal</b> feature <b>requirements</b> models, and the choice of modelling language has certain knock-on effects on the transformational design steps which lead to implementation...|$|R
40|$|As {{part of a}} {{comprehensive}} design concept for complex reactive systems we investigate the derivation <b>of</b> <b>formal</b> <b>requirements</b> and design <b>specifications</b> at systems level. We discuss the meaning of correctness with respect to the embedding of mathematical models into the physical world. A crucial aspect in our attempt to make the logic link between the application domain specific view and the formal view explicit is the concept of evolving algebra [13, 14]; it provides the <b>formal</b> basis <b>of</b> a <b>specification</b> methodology which has successfully been applied to a variety <b>of</b> <b>specification</b> and verification problems. We introduce an evolving algebra abstract machine as a conceptual framework for the development of tools for machine based analysis and execution <b>of</b> evolving algebra <b>specifications.</b> 1 Introduction Reactive systems 1 cover a wide range of challenging applications of computer based information, communication, and control systems; this class, in particular, does also include various [...] ...|$|R
40|$|<b>Formal</b> <b>specification</b> and {{analysis}} <b>of</b> software properties {{can be useful}} in reducing the number of errors in production software. More intuitive methods of specifying constraints and system properties are needed so that developers and other stakeholders can participate in validation <b>of</b> <b>formal</b> software <b>requirements.</b> This work introduces composite propositions, a set of abstractions that define the relations between sets of conditions or events, and it is directed at making the <b>specification</b> <b>of</b> common temporal properties accessible to practitioners and clients. Composite propositions can be used with response formulas to describe concurrent behavior such as concurrency, synchronization, and non-determinism. Composite propositions assist in the elicitation and validation of properties facilitating the integration <b>of</b> <b>formal</b> approaches into the software development lifecycle...|$|R
40|$|One of {{the main}} {{obstacles}} <b>of</b> using <b>formal</b> verification for complex PLC (Programmable Logic Controller) programs is the lack <b>of</b> <b>formal</b> <b>requirements.</b> There are no widely used specification methods {{that could serve as}} input for formal verification; also that could help the developers to capture the behaviour and handle the complexity of these programs. The goal of this research is to bring formal specification closer to the PLC domain in order to help the development, verification and maintenance. This paper aims to briefly overview the particularities of the PLC domain and {{the state of the art}} in formal specification. Then it collects the requirements towards a PLC-specific formal specification language based on general works, comparative case studies and own experiences at CERN. Also, it draws up a sketch <b>of</b> a possible <b>specification</b> method that follows the collected requirements...|$|R
40|$|The ITP tool is an {{experimental}} inductive theorem prover for proving properties <b>of</b> Maude equational <b>specifications,</b> i. e., specifications in membership equational logic {{with an initial}} algebra semantics. The ITP tool has been written entirely in Maude and is in fact an executable <b>specification</b> <b>of</b> the <b>formal</b> inference system that it implements. ...|$|R
40|$|In {{this paper}} {{we present a}} formal {{language}} for specifying and reasoning about cryptographic protocol requirements. We give examples of simple sets of requirements in that language. We look at two versions of a protocol that might meet those requirements and show how to specify them {{in the language of}} the NRL Protocol Analyzer. [Mea 91] [Mea 92] We also show how to map one of our sets <b>of</b> <b>formal</b> <b>requirements</b> to the language of the NRL Protocol Analyzer and use the Analyzer to show that one version of the protocol meets those requirements. In other words, we use the Analyzer as a model checker to assess the validity of the formulae that make up the requirements. Introduction The past few years have seen a proliferation <b>of</b> <b>formal</b> techniques for the <b>specification</b> and analysis <b>of</b> cryptographic protocols. That these techniques can be useful has been shown by the fact that several (including BAN logic [BAN 89], the NRL Protocol Analyzer [Mea 91] [Mea 92], and the Stubblebine-Gligor model [SG 92]) [...] ...|$|R
40|$|A generic {{approach}} to the <b>formal</b> <b>specification</b> <b>of</b> system <b>requirements</b> is presented. It {{is based on a}} pool of requirement patterns, which are related to design patterns well-known in object-oriented software development. The application of such patterns enhances the reusability and genericity as well as the intelligibility <b>of</b> the <b>formal</b> <b>requirement</b> <b>specification.</b> The approach is instantiated by a tailored real-time temporal logic and by selecting building automation systems as application domain. With respect to this domain, the pattern discovery and reuse tasks are explained and illustrated, and a set of typical requirement patterns is presented. Finally, the results of a case study where the approach has been applied are summarized...|$|R
