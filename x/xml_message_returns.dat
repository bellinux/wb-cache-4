0|593|Public
50|$|The Java API for <b>XML</b> <b>Messaging</b> (JAXM) enables {{developers}} to use <b>XML</b> <b>messaging</b> using the Java platform. Developers can create and send <b>XML</b> <b>messages</b> {{over the internet}} using the JAXM API.|$|R
50|$|Netcare {{messaging}} {{is performed}} with HL7-encoded <b>XML</b> <b>messages.</b> Messages are sent and received over a HTTPS connection.|$|R
40|$|We {{present a}} novel {{approach}} {{for the implementation of}} efficient and dependable web service engines (WSEs). A WSE instance represents a single node in a distributed network of participants that communicate using <b>XML</b> <b>messages.</b> We introduce a fully declarative language customtailored to <b>XML</b> <b>message</b> processing that allows to specify business processes in a concise manner. To support the efficient and reliable evaluation of our language, we show how to augment a native, transactional XML data store with efficient and reliable <b>XML</b> <b>message</b> queues...|$|R
5000|$|EntireX XML Mediator, {{which is}} {{primarily}} a router for <b>XML</b> <b>messages</b> ...|$|R
50|$|Utilize the WebObjects {{template}} {{engine and}} object-relational mapping for seamless <b>XML</b> <b>messaging.</b>|$|R
40|$|This paper {{gives an}} {{overview}} of Demaq, an <b>XML</b> <b>message</b> processing system operating on the foundation of transactional <b>XML</b> <b>message</b> queues. We focus on the syntax and semantics of its fully declarative, rule-based application language and demonstrate our message-based programming paradigm {{in the context of}} a case study. Further, we discuss optimization opportunities for executing Demaq programs. 1...|$|R
5000|$|They can parse, validate, {{transform}} and route <b>XML</b> <b>messages</b> via XPath and XSLT ...|$|R
40|$|We present XPi, a core {{calculus}} for <b>XML</b> <b>messaging.</b> XPi features asynchronous communications, pattern matching, {{name and}} code mobility, integration of static and dynamic typing. Flexibility and expressiveness of this calculus {{is illustrated by}} a few examples, some concerning description and discovery of web services. In XPi, a type system disciplines <b>XML</b> <b>message</b> handling {{at the level of}} channels, patterns and processes...|$|R
40|$|We {{describe}} {{the design and}} implementation of an <b>XML</b> <b>messaging</b> system for creating, delivering and managing general purpose <b>XML</b> <b>messages.</b> We describe message composition wizards, a multipurpose delivery system implementation, and message access role definitions. This system {{may be used as}} the foundation for both human readable messaging (such as newsgroupss and registration systems) as well as event-driven application-to-application systems...|$|R
40|$|Abstract—This paper {{studies the}} problem of <b>XML</b> <b>message</b> brokering with user subscribed {{profiles}} of keyword queries and presents a KEyword-based <b>XML</b> <b>Message</b> Broker (KEMB) to address this problem. In contrast to traditional-path-expressions-based <b>XML</b> <b>message</b> brokers, KEMB stores {{a large number of}} user profiles, in the form of keyword queries, which capture the data requirement of users/applications, as opposed to path expressions, such as XPath/XQuery expressions. KEMB brings new challenges: 1) how to effectively identify relevant answers of keyword queries in XML data streams; and 2) how to efficiently answer large numbers of concurrent keyword queries. We adopt compact lowest common ancestors (CLCAs) to effectively identify relevant answers. We devise an automaton-based method to process large numbers of queries and devise an effective optimization strategy to enhance performance and scalability. We have implemented and evaluated KEMB on various data sets. The experimental results show that KEMB achieves high performance and scales very well. Index Terms—Keyword search, XML data stream, <b>XML</b> <b>message</b> brokers, compact lowest common ancestor (CLCA). Ç...|$|R
40|$|This paper {{proposes a}} {{reversible}} anonymisation scheme for <b>XML</b> <b>messages</b> that supports fine-grained enforcement of XACML-based privacy policies. Reversible anonymisation means that information in <b>XML</b> <b>messages</b> is anonymised, however the information required {{to reverse the}} anonymisation is cryptographically protected in the messages. The policy can control access down to octet ranges of individual elements or attributes in <b>XML</b> <b>messages.</b> The reversible anonymisation protocol effectively implements a multi-level privacy and security based approach, so that only authorised stakeholders can disclose confidential information up to the privacy or security level they are authorised for. The approach furthermore supports a shared secret based scheme, where stakeholders need to agree to disclose confidential information. Last, it supports time limited access to private or confidential information. This opens up for improved control of access to private or confidential information in <b>XML</b> <b>messages</b> used by a service oriented architecture. The solution provides horizontally scalable confidentiality protection for certain types of big data applications, like XML databases, secure logging and data retention repositories...|$|R
50|$|FpML (Financial {{products}} Markup Language) is an <b>XML</b> <b>message</b> {{standard for}} the OTC Derivatives industry.|$|R
5000|$|Also, Java API for <b>XML</b> <b>Messaging</b> {{has several}} {{advantages}} over Remote Procedure Call {{such as the}} following: ...|$|R
50|$|The {{interaction}} between the Push Initiators and the Push Proxy Gateways {{is in the form}} of <b>XML</b> <b>messages.</b>|$|R
40|$|Author's {{version of}} {{an article in the}} journal: Information Systems. Also {{available}} from the publisher at: [URL] paper proposes a reversible anonymisation scheme for <b>XML</b> <b>messages</b> that supports fine-grained enforcement of XACML-based privacy policies. Reversible anonymisation means that information in <b>XML</b> <b>messages</b> is anonymised, however the information required to reverse the anonymisation is cryptographically protected in the messages. The policy can control access down to octet ranges of individual elements or attributes in <b>XML</b> <b>messages.</b> The reversible anonymisation protocol effectively implements a multi-level privacy and security based approach, so that only authorised stakeholders can disclose confidential information up to the privacy or security level they are authorised for. The approach furthermore supports a shared secret based scheme, where stakeholders need to agree to disclose confidential information. Last, it supports time limited access to private or confidential information. This opens up for improved control of access to private or confidential information in <b>XML</b> <b>messages</b> used by a service oriented architecture. The solution provides horizontally scalable confidentiality protection for certain types of big data applications, like XML databases, secure logging and data retention repositories...|$|R
50|$|Forté Fusion - an {{integration}} backbone to link {{external systems}} using <b>XML</b> <b>messaging</b> and tie {{in with the}} Conductor engine.|$|R
5000|$|SOAP {{envelope}} : As per its name, {{it is the}} enclosing {{element of}} an <b>XML</b> <b>message</b> identifying it as a SOAP message.|$|R
50|$|The Java API for <b>XML</b> <b>Messaging</b> (JAXM) enables {{distributed}} software applications to communicate using XML (and SOAP). JAXM supports both asynchronous and synchronous messaging.|$|R
50|$|The {{initiative}} {{lead to the}} {{specification of}} about 20 specific <b>XML</b> <b>messages</b> (the Kind Messages for Electronic Healthcare Records - Belgian implementation standard or KMEHR-bis).|$|R
5000|$|Web Enabled JTLS services: Apache data server, <b>XML</b> <b>Message</b> Service (XMS), Synchronized Application Preferences Service (SYNAPSE), Order Management Authority (OMA), and JTLS XML Serial Repository (JXSR) ...|$|R
5000|$|The {{protocol}} uses <b>XML</b> <b>messages</b> {{sent over}} SSL connections with client authentication [...] (this ensures {{the authenticity of}} both peers, the server and the client, using digital certificates).|$|R
5000|$|TOAST (The Oversized-Attribute Storage Technique) {{is used to}} transparently store large table {{attributes}} (such as big MIME attachments or <b>XML</b> <b>messages)</b> in {{a separate}} area, with automatic compression.|$|R
40|$|Applications {{that use}} {{directory}} services or relational databases {{operate in a}} client–server model, where a client requests information from a server, and the server returns {{a response to the}} client. These client–server applications typically have a specific message protocol that is unique to that application. Systems with multiple client–server applications require that there are separate client programs that individually communicate with their respective server programs. A need exists to access information from heterogeneous systems in a standard message request–response format. A generic eXtensible Markup Language (XML) model was developed to obtain data from diverse measurement systems. The objective {{of this paper is to}} describe the XML model that abstracts the differences in the underlying heterogeneous client–server message formats and provides a common <b>XML</b> <b>message</b> interface. The <b>XML</b> <b>messages</b> are parsed through a common XML gateway that decides to which application server to forward the <b>messages.</b> The generic <b>XML</b> <b>messages</b> are translated to the correct application server format before being sent to the application server...|$|R
40|$|Flexibility, friendliness, and {{adaptability}} {{have been}} key components to use XML to exchange information across different networks providing the needed common syntax for various messaging systems. However excess usage of XML as a communication medium shed {{the light on}} security standards used to protect exchanged messages achieving data confidentiality and privacy. This research presents a novel approach to secure <b>XML</b> <b>messages</b> being used in various systems with efficiency providing high security measures and high performance. system model is based on two major modules, the first to classify <b>XML</b> <b>messages</b> and define which parts of the messages to be secured assigning an importance level for each tag presented in <b>XML</b> <b>message</b> and then using XML encryption standard proposed earlier by W 3 C [3] to perform a partial encryption on selected parts defined in classification stage. As a result, study aims to improve both the performance of XML encryption process and bulk message handling to achieve data cleansing efficiently...|$|R
40|$|In {{this paper}} {{we present a}} novel {{approach}} for securing financial XML transactions using intelligent fuzzy classification techniques. Given an <b>XML</b> <b>message</b> X, our approach defines the process of classifying XML content to assign a unique value, which indicates the data sensitivity declaring importance level for each XML tag. The classified message Xs includes this new modified attributes with importance level value assigned for each tag. The framework also defines the process of securing classified financial <b>XML</b> <b>message</b> by performing element-wise XML encryption on selected parts defined in Xs. Based on our approach, we define which encryption algorithm is more appropriate to be deployed on selected parts depending on importance level attribute defined in Xs. An implementation has been performed on a real life environment using online banking systems to demonstrate its flexibility, feasibility, and security. Our experimental results of the new model verified tangible enhancements in encryption efficiency, processing time reduction, and financial <b>XML</b> <b>message</b> utilization...|$|R
50|$|DisplayML is an open, free-to-use {{protocol}} for encoding display information for display devices. It {{is based upon}} <b>XML</b> <b>messages</b> with a Request/Response model where the display device works as the server.|$|R
50|$|A KMEHR <b>XML</b> <b>message</b> is {{composed}} of two components a header {{and at least one}} folder. The header of the message describes the sender, the recipient(s) and a few technical statuses.|$|R
50|$|In a service-oriented architecture, Simple Object Access Protocol or SOAP {{messages}} {{constructed with}} Extensible Markup Language (<b>XML)</b> <b>messages</b> {{can be used}} by consumer applications to cause web servers to create sessions.|$|R
50|$|A {{virtual asset}} stands {{in for a}} {{dependent}} component by listening for requests and returning an appropriate response—with the appropriate performance. For a database, this might involve listening for a SQL statement, then returning data source rows. For a web service, this might involve listening for an <b>XML</b> <b>message</b> over HTTP, JMS, or MQ, then <b>returning</b> another <b>XML</b> <b>message.</b> The virtual asset's functionality and performance might reflect the actual functionality/performance of the dependent component, or it might simulate exceptional conditions (such as extreme loads or error conditions) {{to determine how the}} application under test responds under those circumstances.|$|R
40|$|Abstract. We present XPi, a core {{calculus}} for <b>XML</b> <b>messaging.</b> XPi features asynchro-nous communications, pattern matching, {{name and}} code mobility, integration of static and dynamic typing. Flexibility and expressiveness of this calculus are illustrated {{by a few}} examples, some concerning description and discovery of web services. In XPi, a type system disciplines <b>XML</b> <b>message</b> handling {{at the level of}} channels, patterns, and processes. A run-time safety theorem ensures that in well-typed systems no service will ever receive documents it cannot understand, and that the offered services, even if re-defined, will be consistent with the declared channel capacities. ...|$|R
40|$|<b>XML</b> <b>message</b> {{filtering}} {{systems are}} used for sifting through real-time messages to support business data mining and reporting. An <b>XML</b> <b>message</b> filtering system needs to (a) process registered filter predicates on multiple distributed real-time streams and (b) match and validate the filter results with local data to identify the relevant data {{that can be used}} for higher-level processing. Although efficient real-time filtering schemes exists, the matching phase of the operation where filter results have to be matched against local data to select those matches that are relevant to the particular task remains to be expensive as it requires expensive join operations. In this paper, we present an efficient middleware (FMware) for filtering and matching <b>XML</b> <b>messages</b> against locally available data. The proposed operator relies on a novel cluster-domain matching scheme to reduce the cost of the process. We analytically study the cost of the proposed middleware and experimentally show that it adaptively reduces the number of local data accesses and provides large savings in matching time with respect to cluster-unaware matching...|$|R
5000|$|... (<b>XML)</b> <b>Messaging</b> Protocol: {{responsible}} for encoding messages {{in a common}} XML format {{so that they can}} be understood at either end of a network connection. Currently, this area includes such protocols as XML-RPC, WS-Addressing, and SOAP.|$|R
25|$|XML {{is widely}} used in a Services Oriented Architecture (SOA). Disparate systems {{communicate}} with each other by exchanging <b>XML</b> <b>messages.</b> The message exchange format is standardised as an XML schema (XSD). This is also referred to as the canonical schema.|$|R
40|$|This paper {{gives an}} {{overview}} of Demaq, an <b>XML</b> <b>message</b> processing system operating on the foundation of transactional <b>XML</b> <b>message</b> queues. We focus on the syntax and semantics of its fully declarative, rule-based application language and demonstrate our message-based programming paradigm {{in the context of}} a case study. Further, we discuss optimization opportunities for executing Demaq programs. Comment: This article is published under a Creative Commons License Agreement ([URL] You may copy, distribute, display, and perform the work, make derivative works and make commercial use of the work, but, you must attribute the work to the author and CIDR 2007. 3 rd Biennial Conference on Innovative Data Systems Research (CIDR) January 710, 2007, Asilomar, California, US...|$|R
40|$|This paper {{describes}} a validating XML parsing method based on deterministic finite state automata (DFA). XML parsing and validation is {{performed by a}} schema-specific XML parser that encodes the admissible parsing states as a DFA. This DFA is automatically constructed from the XML schemas of <b>XML</b> <b>messages</b> using a code generator. A twolevel DFA architecture is used to increase efficiency and to reduce the generated code size. The lower-level DFA efficiently parses syntactically well-formed <b>XML</b> <b>messages.</b> The higher-level DFA validates the messages and produces application events associated with transitions in the DFA. Two example case studies are presented and performance results are given {{to demonstrate that the}} approach supports the implementation of high-performance Web services...|$|R
40|$|The eXtensible Markup Language (XML) {{has been}} widely adopted for {{information}} exchange across various networks due to flexibility providing common syntax for messaging systems. Excessive use of XML as a communication medium created an aligned interest {{in the level of}} security provided for those XML-Based systems. Many security concerns have been tackled by the World Wide Consortium (W 3 C) creating the "XML Encryption Syntax and Processing" Recommendation [4]. This study presents a new architecture to handle received <b>XML</b> <b>messages</b> from various systems, on one hand suggested architecture is focused on classifying received <b>XML</b> <b>messages</b> (sensitive and non-sensitive) data to define which parts of the XML document to be encrypted and which to be forwarded to another module in suggested system to handle message composition, On the other hand the architecture is focused on securing <b>XML</b> <b>messages</b> by encrypting flagged XML parts each with different type of encryption depending on data sensitivity and importance level defined, this stage uses an approach based on W 3 C "XML Encryption Syntax and Processing" Recommendation. As a result, study aims to improve both the performance of XML encryption process and bulk message handling to achieve data cleansing efficiently...|$|R
