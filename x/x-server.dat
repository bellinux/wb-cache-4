20|0|Public
25|$|Workarounds like x11vnc (VNC :0 viewers), Xpra's {{shadow mode}} and NX's nxagent shadow mode also exist {{to make the}} current <b>X-server</b> screen available. This ability allows the user {{interface}} (mouse, keyboard, monitor) of a running application to be switched from one location to another without stopping and restarting the application.|$|E
50|$|Unlike most Unix hosted VNC servers, {{which are}} also X-servers, and serve an X {{environment}} that they maintain internally, gemsvnc, like its predecessors x0rfbserver and x11vnc, which is distributed with libvncserver, is only a VNC server, but not an <b>X-server.</b> It attaches to an already running <b>X-server</b> and permits remote control of that <b>X-server</b> from the vncviewer. This is desirable when one is using VNC for a customer service or training tool, or where special graphics hardware (such as OpenGL) is being used so that a normal vncserver would not work.|$|E
50|$|The goal {{of project}} XFast {{is to have}} a very slim and fast {{graphical}} environment that contains both within the same project: a replacement for an <b>X-server</b> to give access to the graphics hardware and a WindowManager-like layer that offers user interface elements for applications and desktop management.|$|E
5000|$|Cygwin/X, Cygwin's {{implementation}} of the X server for Microsoft Windows, uses the X.Org Server, as do VcXsrv (Visual C++ <b>X-server)</b> and Xming. SSH clients such as PuTTY allow launching of X applications through X11 forwarding {{on the condition that}} it is enabled on both the server and client.|$|E
50|$|Linux, UNIX and BSD support remote {{administration}} via remote login, typically via SSH (The {{use of the}} Telnet protocol {{has been}} phased out due to security concerns). <b>X-server</b> connection forwarding, often tunnelled over SSH for security, allows GUI programs to be used remotely. VNC is also available for these operating systems.|$|E
50|$|Direct Graphics Access allows {{direct access}} to the frame-buffer and the <b>X-server</b> hands over control of the frame-buffer to the client program and waits for the client to hand it back. This means that the client program has control of the whole screen, and so it is mostly used for full-screen video/games.|$|E
5000|$|The Device Dependent X (DDX) is {{the part}} of the <b>x-server</b> that interacts with the hardware. In the X.Org Server source code, each {{directory}} under [...] "hw" [...] corresponds to one DDX. Hardware comprises graphics cards as well as mouse and keyboards. Each driver is hardware specific and implemented as a separate loadable module.|$|E
50|$|GIMP 0.54 was {{released}} in January 1996. It required X11 displays, an <b>X-server</b> that supported the X shared memory extension and Motif 1.2 widgets. It supported 8, 15, 16 and 24-bit color depths, dithering for 8-bit displays and could view images as RGB color, grayscale or indexed color. It could simultaneously edit multiple images, zoom and pan in real-time, and supported GIF, JPEG, PNG, TIFF and XPM images.|$|E
50|$|Maemo 5, {{also known}} as Fremantle, is the default {{operating}} system on the Nokia N900. The release features a much more finger-friendly and consistent user interface, and an <b>X-server</b> based on Xorg rather than KDrive. It also features several new technologies, including the Tracker search system, PulseAudio (replacing ESD), the OHM hardware management daemon, the gUPnP UPnP framework, enhanced location framework, and Upstart. Several existing technologies have also been updated, including Gecko, BlueZ, gstreamer (will include OpenMAX), GTK+, and Telepathy.|$|E
5000|$|For {{historical}} {{reasons the}} X.Org Server still contains graphics device drivers supporting {{some form of}} 2D rendering acceleration. In ancient times, the mode-setting was done by an <b>X-server</b> graphics device driver specific to some video controller hardware (e.g., a GPU). To this mode-setting functionality, additional support for 2D acceleration was added when such became available with various GPUs. The mode-setting functionality was moved into the DRM and is being exposed through an DRM mode-setting interface, the new approach being called [...] "kernel mode-setting" [...] (KMS). But the 2D rendering acceleration remained.|$|E
50|$|Section 8 {{supports}} <b>X-Server</b> functionality, where {{players can}} {{run their own}} dedicated servers for Xbox 360 games using a Windows-based PC. An X Server can handle up to 32 players at once. Similar to this, the PlayStation 3 version supports TGNServer technology which allows players to host dedicated servers using a Windows-based PC with up to 32 players. The PC version also features a 40-player maximum with dedicated servers, and 32-player maxiumum with P2P servers. Computer-controlled characters (bots) may {{also be used to}} fill remaining slots in multiplayer games for Xbox 360, PlayStation 3, and PC.|$|E
50|$|An X client cannot {{generally}} be detached from one server and reattached to another unless its code specifically provides for it (emacs {{is one of}} the few common programs with this ability). As such, moving an entire session from one X server to another is generally not possible. However, approaches like Virtual Network Computing (VNC), NX and Xpra allow a virtual session to be reached from different X servers (in a manner similar to GNU Screen in relation to terminals), and other applications and toolkits provide related facilities.Workarounds like x11vnc (VNC :0 viewers), Xpra's shadow mode and NX's nxagent shadow mode also exist to make the current <b>X-server</b> screen available. This ability allows the user interface (mouse, keyboard, monitor) of a running application to be switched from one location to another without stopping and restarting the application.|$|E
40|$|This thesis {{describes}} {{the design and}} implementation of a graphical application that shows the status of intellingent home. Application run directly on the adapter that communicates with sensors and actuators. Its graphical output can be displayed via the HDMI connector or remotely over <b>X-Server.</b> The application is implemented in C++ and using the Qt graphics libraries. The goal is simply and clearly to display important information about the household even in case of failure of the LAN...|$|E
40|$|Maestro is a {{middleware}} {{support tool}} for distributed multimedia and collaborative computing applications. These applications {{share a common}} need for managing multiple subgroups while providing possibly different quality-of-service guarantees {{for each of these}} groups. Maestro’s functionality maps well into these requirements, and can significantly shorten the development time of such applications. In this paper, we report on Maestro, and demonstrate its utility in implementing several multimedia and collaborative computing applications. In particular, we provide {{a detailed description of the}} implementation of IMUX, a pseudo <b>X-server</b> (proxy) for collaborative computing applications that is based on Maestro. Copyright © 1999 John Wiley & Sons, Ltd. KEY WORDS: distributed multimedia; collaborative computing; middleware; group communication; quality of servic...|$|E
40|$|This paper {{describes}} an {{implementation of a}} hybrid solution for improving the library's proxy service by integrating Shibboleth and ExLibris' Aleph’s <b>X-server</b> using a proxy server running both EZproxy and Squid applications. We will describe in detail the hybrid solution of a proxy service {{within the context of}} our institution and explain how this service improves the user experience. We will explain how we developed and implemented this solution with a minimum of development cost and describe some of the preliminary empirical research undertaken. The main benefit of this solution is that instead of relying on e-resource vendors to become Shibboleth-compliant, we are able to prepare and deploy a Shibboleth-ready environment while granting our patrons reliable and stable access to e-resources via different types of connections. As of December 2011, the hybrid solution is running in production...|$|E
40|$|The VLT Real-Time Display (RTD) {{software}} {{was developed in}} order to support image display in real-time, providing a tool for users to display video like images from a camera or detector as fast as possible on an <b>X-Server.</b> The RTD software is implemented as a package providing a Tcl/Tk image widget written in C++ and an independent image handling library and {{can be used as a}} building block, adding display capabilities to dedicated VLT control applications. The RTD widget provides basic image display functionality like: panning, zooming, color scaling, colormaps, intensity changes, pixel query, overlaying of line graphics. A large set of assisting widgets, e. g., colorbar, zoom window, spectrum plot are provided to enable the building of image applications. The support for real-time is provided by an RTD image event mechanism used for camera or detector subsystems to pass images to the RTD widget. Image data are passed efficiently via shared memory. This paper describes the architect [...] ...|$|E
40|$|The {{operators}} ’ consoles of KEKB accelerators will {{be described}} {{in comparison with the}} former TRISTAN accelerator control consoles. The construction policy of the KEKB operators ’ console is the flexibility. For TRISTAN, there were several sets of identical console desk made of iron frames in which two touch-panels, two graphic display monitors, and ten TV monitors are packed. Each set of console was directly controlled by a mini-computer in the TRISTAN control computer network. On the contrary, in the KEKB control system, all the man-machine interface devices are based on Xwindow system and application software runs on a UNIX server workstation. Therefore, the number of X-window devices such as X-terminals, Macintosh and PC/AT compatible PCs with <b>X-server</b> software is limited only by the capacity of the UNIX server and the space. Low-cost Network Stations are introduced as X-terminals with single screen. A Macintosh or a PC can have multiscreen up to four and works as multiple X-terminals with only a set of a mouse and a keyboard. For the space and ergonomic reasons, we adopted TFT flat-panel displays, which are thin and light in weight, and they reduce reflection of lights. For the same reason, cordless keyboard/mouse are also introduced...|$|E
40|$|Multi-threshold CMOS is {{a popular}} circuit style that will pro-vide high {{performance}} and low power operation. Optimally sizing the gating sleep transistor to provide adequate perfor-mance is difficult because the overall delay characteristics are strongly dependent on the discharge patterns of internal gates. This paper proposes a methodology for sizing the sleep transis-tor for a large module based on mutual exclusive discharge patterns of internal blocks. This algorithm can be applied {{at all levels of}} a circuit hierarchy, where the internal blocks can rep-resent transistors, cells within an array, or entire modules. This methodology will give an upper bound for the sleep transistor size required to meet any performance constraint. 1. BACIKGROUND Multi-threshold CMOS is an emerging technology that provides high performance and low power operation by utilizing both high and low V, transistors[l][2][3]. By using low V, transistors in the signal path, the supply voltage can be lowered (while still main-taining performance) to reduce switching power dissipation. By reducing Vdd, the switching power can be reduced quadratically, but as V, decreases to maintain performance, the subthreshold leakage current will increase e uponentially. For ambitious scaling, the increased leakage power can actually dominate the switching power[4]. In many event driven applications, like a processor run-ning an <b>X-server,</b> circuits {{spend most of their time}} in an idle state where no computation is being performed. During these “sleep” times, it is very wasteful to have large subthreshold leakage cur-rents. Static power dissipation can be reduced in the sleep mode by using high V, transistors with kery low leakage currents to gate the power supply lines for the entiie module. 1 NMOS sleep transistor Low v, preferred since lower Logic on resistanc...|$|E
40|$|Multi-threshold CMOS is {{a popular}} circuit style that will provide high {{performance}} and low power operation. Optimally sizing the gating sleep transistor to provide adequate performance is difficult because the overall delay characteristics are strongly dependent on the discharge patterns of internal gates. This paper proposes a methodology for sizing the sleep transistor for a large module based on mutual exclusive discharge patterns of internal blocks. This algorithm can be applied {{at all levels of}} a circuit hierarchy, where the internal blocks can represent transistors, cells within an array, or entire modules. This methodology will give an upper bound for the sleep transistor size required to meet any performance constraint. 1. BACKGROUND Multi-threshold CMOS is an emerging technology that provides high performance and low power operation by utilizing both high and low Vt transistors[1][2][3]. By using low Vt transistors in the signal path, the supply voltage can be lowered (while still maintaining performance) to reduce switching power dissipation. By reducing Vdd, the switching power can be reduced quadratically, but as Vt decreases to maintain performance, the subthreshold leakage current will increase exponentially. For ambitious scaling, the increased leakage power can actually dominate the switching power[4]. In many event driven applications, like a processor running an <b>X-server,</b> circuits {{spend most of their time}} in an idle state where no computation is being performed. During these “sleep” times, it is very wasteful to have large subthreshold leakage currents. Static power dissipation can be reduced in the sleep mode by using high Vt transistors with very low leakage currents to gate the power supply lines for the entire module...|$|E
40|$|Multi-threshold CMOS is an {{increasingly}} popular circuit approach that enables high performance and low power operation. However, no methodologies {{have been developed}} to size the high V, sleep transistor in an intelligent manner that trades off area and performance. In fact, many attempts at sizing the sleep transistor without close consideration of input vector patterns or internal structures can lead to large overestimates or large underestimates in sleep transistor sizing. This paper describes some of the issues involved in sizing transistors for MTCMOS and also introduces a variable breakpoint switch level simulator that can rapidly calcu-late delay in MTCMOS circuits as functions of design variables such as Vdd, V,, and sleep transistor sizing. 1. BACKGROUND Power consumption in conventional CMOS circuits can be attributed to switching power, leakage power, and short circuit power. Switching power is usually the dominant term and is given by the well known formula: 2 Pswitching = aCLVdd fclk where a is the activity factor, C, is the total load capacitance, v dd is the supply voltage, and fclk is the clock frequency. Clearly, to reduce this energy dissipated to charge and dis-charge load capacitances, the circuit designer’s optimum choice is to scale the supply voltage down. However, in order to maintain performance, the threshold voltage should also be scaled down as well so that the gate drive, (Vgs- V,), remains large enough, since propagation delay in a CMOS gate can be approximated as: where a is for modeling short channel effects [I] [2]. By reducing Vdd, the switching power is reduced quadratically, but a reduction in V, causes an exponential increase in subthreshold leakage cur-rent. As one continues to scale down Vdd and V,, the increased leakage power can dominate the dynamic switching power [3]. In many event driven applications, like a processor running an <b>X-server,</b> circuits {{spend most of their time}} in an idle state where no i “Permission to make digital/hard copy of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distrib-uted for protit or commercial advantage, the copyright notice, the title of the publi-cation and its date appear, and notice is given that copying is by permission o...|$|E

