192|86|Public
2500|$|... Google Play {{features}} over 2.7 million Android applications. Users in over 145 {{countries can}} purchase apps, although Google notes on its support pages that [...] "Paid content {{may not be}} available in some provinces or territories, even if the governing country is listed above." [...] Developers in over 150 locations can distribute apps on Google Play, though not every location supports merchant registration. To distribute apps, developers {{have to pay a}} one-time $25 registration fee for a Google Play Developer Console account. App developers can control which countries an app is distributed to, as well as the pricing for the app and in-app purchases in each country. Developers receive 70% of the application price, while the remaining 30% goes to the distribution partner and operating fees. Developers can set up sales, with the original price striked out and a banner underneath informing users when the sale ends. Google Play allows developers to release early versions of apps to a select group of users, as alpha or beta tests. Developers can also release apps through staged rollouts, in which [...] "your update reaches only a percentage of your users, which you can increase over time." [...] Users can pre-order select apps (as well as movies, music, books, and games) to have the items delivered as soon as they are available. Some network carriers offer billing for Google Play purchases, allowing users to opt for charges in the monthly phone bill rather than on credit cards. Users can request refunds within 48 hours after a purchase if [...] "something you bought isn't working, isn't what you expected, was bought by accident, or you changed your mind about the purchase". Apps meeting specific <b>usability</b> <b>requirements</b> can qualify as an Android Wear app.|$|E
50|$|The {{international}} standard IEC 62366 medical devices - Application of usability engineering to medical devices {{is a standard}} which specifies <b>usability</b> <b>requirements</b> {{for the development of}} medical devices. It is harmonized by the European Union (EU) and the United States (US), and therefore {{can be used as a}} benchmark to comply with regulatory requirements from both these markets.|$|E
5000|$|... Google Play {{features}} over 2.7 million Android applications. Users in over 145 {{countries can}} purchase apps, although Google notes on its support pages that [...] "Paid content {{may not be}} available in some provinces or territories, even if the governing country is listed above." [...] Developers in over 150 locations can distribute apps on Google Play, though not every location supports merchant registration. To distribute apps, developers {{have to pay a}} one-time $25 registration fee for a Google Play Developer Console account. App developers can control which countries an app is distributed to, as well as the pricing for the app and in-app purchases in each country. Developers receive 70% of the application price, while the remaining 30% goes to the distribution partner and operating fees. Developers can set up sales, with the original price striked out and a banner underneath informing users when the sale ends. Google Play allows developers to release early versions of apps to a select group of users, as alpha or beta tests. Developers can also release apps through staged rollouts, in which [...] "your update reaches only a percentage of your users, which you can increase over time." [...] Users can pre-order select apps (as well as movies, music, books, and games) to have the items delivered as soon as they are available. Some network carriers offer billing for Google Play purchases, allowing users to opt for charges in the monthly phone bill rather than on credit cards. Users can request refunds within 48 hours after a purchase if [...] "something you bought isn't working, isn't what you expected, was bought by accident, or you changed your mind about the purchase". Apps meeting specific <b>usability</b> <b>requirements</b> can qualify as an Android Wear app.|$|E
40|$|Abstract. A {{basic problem}} {{in the design of}} {{monitoring}} system is how to improve the usability, this paper describes a methods based on the User-Centered Design and analyses user from task domains and cognitive psychology aspects. After deciding the interaction system’s task <b>requirement</b> and <b>usability</b> <b>requirement,</b> we develop the Fiber Bragg Grating Monitoring System in JAVA platform with JAXB and JDBC technology...|$|R
40|$|This paper {{describes}} several {{methods for}} improving query evaluation speed in a content-based {{image retrieval system}} (CBIRS). Response time is an extremely important factor in determining the usefulness of any interactive system, as has been demonstrated by human factors studies over the past thirty years. In particular, response times of less than one second are often specified as a <b>usability</b> <b>requirement.</b> It is shown {{that the use of}} inverted files facilitates the reduction of query evaluation time without significantly reducing the accuracy of the response. The performance of the system is evaluated using precision recall graphs, which are an established evaluation method in information retrieval (IR), and are beginning to be used by CBIR researchers...|$|R
40|$|A <b>usability</b> <b>requirement</b> for {{interactive}} layout {{assistance systems}} {{is the principle}} of least astonishment (Borning et al. 1987) which states that the system should arrange the layout {{in a way that}} conforms to the user’s expectations. This paper presents a framework for transformation-based similarity between two-dimensional spatial configurations. Here, similarity is intended to measure the user’s expectations when he is presented with a system-side generated layout. The framework is based on results in cognitive science. Firstly, it can serve to validate existing layout algorithms with respect to their ergonomic adequacy. Secondly, it is demonstrated how it can help to design new algorithms respecting the principle of least astonishment. The practical use of the framework is illustrated with UML class diagrams as example domain...|$|R
40|$|Abstract. A {{system can}} have {{adequate}} functionality, but inadequate usability {{because it is}} too difficult to use. The purpose of <b>usability</b> <b>requirements</b> is to guard against that. This paper shows six styles for <b>usability</b> <b>requirements</b> seen in practice or recommended by experts. For each style we discuss how we can verify the requirements, how we can use them during development, how we elicit {{the data for the}} specification, and to what extent the style covers the essence of usability...|$|E
40|$|Abstract: Various data {{collection}} methods are available to serve the purpose of fulfilling <b>usability</b> <b>requirements.</b> Though all these methods are equally useful for {{data collection}}, the scale of influence of these methods varies in different classes of software in order to fulfil <b>usability</b> <b>requirements.</b> Observations strengthen the fact that to attain software usability, <b>usability</b> <b>requirements</b> must be determined and fulfilled throughout software development. Therefore, it is required to identify the Usability Data Collection Methods (UDCM) with preferences. In this paper, we propose to prioritize aforesaid UDCMs by computing some metrics referring different classes of software. Case study has also been performed considering three classes of software. The proposed work is useful to {{understand the importance of}} UDCMs and further for usability measurement considering specific nature of software. Also, it will lead to provide ease to developers and thereby maximizing user satisfaction as well...|$|E
40|$|Like {{any other}} quality attribute, {{usability}} cannot be achieved {{at the last}} development moment. On the contrary, usability {{has to be taken}} into account right from the earliest stages by considering features that raise the usability level of the software system as well as <b>usability</b> <b>requirements</b> that enhance the performance of other functional requirements. However, existing HCI usability heuristics are not sufficient to serve as proper requirements from a software engineering perspective. HCI heuristics for incorporating usability features lead to incomplete and ambiguous requirements. For example, the classical approach for reducing requirements ambiguity, related to incorporating new information, cannot be used for <b>usability</b> <b>requirements,</b> since the information that would need to be added is likely to be beyond the usability knowledge of most requirements writers, developers and users. One possible solution to this problem is to bring HCI experts into the software development process. However, this is not a straightforward approach and may have serious implications for the development process. In this paper, we propose an alternative solution based on the definition of usability elicitation patterns. These patterns capitalise upon the know-how in <b>usability</b> <b>requirements</b> elicitation by specifying fundamental elements recurrently intervening in <b>usability</b> <b>requirements</b> elicitation. We have focused on usability features with major implications in functionality...|$|E
40|$|Reconfigurable {{devices are}} often {{employed}} in heterogeneous systems {{due to their}} low power and parallel processing advantages. An important <b>usability</b> <b>requirement</b> is {{the support of a}} homogeneous programming interface. Nevertheless, homogeneous programming interfaces do not eliminate the need for code tweaking to enable efficient mapping of the computation across heterogeneous architectures. In this work we propose a code optimization framework which analyzes and restructures CUDA kernels that are optimized for GPU devices in order to facilitate synthesis of high-throughput custom accelerators on FPGAs. The proposed framework enables efficient performance porting without manual code tweaking or annotation by the user. A hierarchical region graph in tandem with code motions and graph coloring of array variables is employed to restructure the kernel for high throughput execution on FP-GAs. 1...|$|R
40|$|It {{has been}} {{reported}} that many software companies do not use existing requirements engineering approaches. This indicates that there is room and opportunity for improving the <b>usability</b> of existing <b>requirements</b> engineering approaches. This paper describes a market study intended to elicit a set of characteristics that could improve the <b>usability</b> of <b>requirements</b> engineering approaches. The survey is aimed toward software stakeholders such as developers, designers, customers, and managers at various software companies. The survey results are used to define a set of desirable characteristics for usable requirements engineering approaches and to suggest a set of guidelines that could help achieve the desirable characteristics...|$|R
40|$|A {{balanced}} approach {{is needed for}} developing information security policies in Critical National Infrastructure (CNI) contexts. Requirements Engineering methods can facilitate such an approach, but these {{tend to focus on}} either security at the expense of usability, or vice-versa; it is also uncertain whether existing techniques are useful when the time available for applying them is limited. In this paper, we describe a case study where <b>Usability</b> and <b>Requirements</b> Engineering techniques were used to derive missing requirements for an information security policy for a UK water company following reports of the Stuxnet worm. We motivate and describe the approach taken while carrying out this case study, and conclude with three lessons informing future efforts to integrate Security, <b>Usability,</b> and <b>Requirements</b> Engineering techniques for secure system design. Keywords-personas; misuse cases; KAOS; CAIRIS; I...|$|R
40|$|Abstract. Non-functional {{requirements}} specify software {{restrictions and}} how well the software shall perform its functions. In Web applications, <b>usability</b> <b>requirements</b> {{are the most important}} type of non-functional requirements because they determine the acceptability of such applications. Nevertheless, <b>usability</b> <b>requirements</b> are usually forgotten or unconsidered, which increases the cost of their development and the cost of fixing usability problems. This paper presents the research agenda {{for the development of a}} set of technologies for the elicitation and specification of <b>usability</b> <b>requirements</b> for Web applications. We will propose and develop a set of techniques and a tool support that will allow software engineers to produce descriptive requirements specifications. Such specifications will guide the development team through the implementation of Web applications meeting usability principals. Finally, to verify the feasibility of the techniques and tool; identify improvement opportunities; and safely apply the technologies in the industry, we will evaluate the technologies through empirical studies...|$|E
40|$|Enterprise {{networks}} constantly face {{new security}} challenges. Obtaining complete network security is almost impossible, especially when <b>usability</b> <b>requirements</b> {{are taken into}} account. Previous research have provided ways to identify attack paths due to network vulnerabilities and misconfiguration, but few have addressed ways to correct them, especially when considering <b>usability</b> <b>requirements.</b> This thesis presents an approach based on the learning algorithm Population Based Incremental Learning in order to solve a constrained optimization problem {{with the intention of}} increasing network security. Preliminary results show that this approach is effective, scalable and reliable...|$|E
40|$|How {{should the}} {{customer}} specify <b>usability</b> <b>requirements</b> in a tender situation? This is particularly difficult if {{the product is}} a standard system with enhancements, since the customer cannot prescribe a specific user interface. Furthermore it must be possible to verify the <b>usability</b> <b>requirements</b> with a reasonable effort, and the requirements must not discourage serious proposers. This paper discusses six different styles of usability specification and shows {{an example of how}} to combine them in a complex real-life case to meet these goals. The final requirements are presented. 1...|$|E
50|$|The National Institute of Standards and Technology has {{collaborated with}} {{industry}} {{to develop the}} Common Industry Specification for <b>Usability</b> - <b>Requirements,</b> {{which serves as a}} guide for many industry professionals. The specifications for successful usability in biometrics were also developed by the NIST. Usability.gov provides a tutorial and wide general reference for the design of usable websites.|$|R
50|$|Tools, devices or {{software}} (as {{diverse as}} a TV remote control, the interface of an oven, or a word processor) must be evaluated before their release {{on the market}} from {{different points of view}} such as their technical properties or their usability. Usability evaluation allows assessing whether the product under evaluation is efficient enough (Are the users able to carry out their task while expending reasonable resources such as time, cognitive or physical demand), effective enough (Can the user complete the tasks they are supposed to perform with the tool? Is their performance complete and accurate?) and sufficiently satisfactory for the users (What is the users’ attitude towards the system? Do they experience discomfort?). For this assessment to be objective, {{there is a need for}} measurable goals (for instance in terms of easiness of use or of learning) that the system must achieve.That kind of goal is called a usability goal (or also <b>usability</b> <b>requirement).</b> They are objective criteria against which the results of the usability evaluation are compared to assess the usability of the product under evaluation.|$|R
30|$|Nguyen (2009) extends Gomaa‘s {{template}} (Gomaa 2004) {{to specify}} non-functional requirements. In this template, additional sections {{are used to}} specify performance, <b>usability,</b> and security <b>requirements.</b> Each of them can have variation points just like other functional steps of the use cases.|$|R
40|$|Like {{any other}} {{software}} system quality attribute, usability places requirements on software components. In particular, {{it has been}} demonstrated that certain usability features have a direct impact throughout the software process. This paper details an approach that looks at {{how to deal with}} certain usability features in the early software development stages. In particular, we consider usability features as functional <b>usability</b> <b>requirements</b> using patterns that have been termed usability patterns to elicit requirements. Additionally, we clearly establish the responsibilities of all the players at the <b>usability</b> <b>requirements</b> elicitation stage...|$|E
40|$|We {{describe}} {{the challenges of}} understanding and setting <b>usability</b> <b>requirements</b> for a web site containing a form. We define ‘usability requirements’, {{and go on to}} explain how to set them. Ideally, <b>usability</b> <b>requirements</b> should be defined early in a project. In practice, we often find that the first opportunity we have is when we are asked to undertake an evaluation. Collecting the users ’ opinions of the requirements as part of the evaluation can often prompt the organization into investigating the users, leading to a better set of requirements and, eventually, a better web site...|$|E
40|$|While Greenstone is a {{versatile}} tool for creating and managing digital collections, its interface {{is not well}} suited for senior users. As we age, our <b>usability</b> <b>requirements</b> for software change; the mismatch between interfaces designed for (and by) younger members of society and the interface <b>usability</b> <b>requirements</b> of the elderly can make software less usable for the elderly. This paper reports on an intensive usability study of the Greenstone ‘Librarian’ interface (supporting collection development and maintenance) with senior participants. The {{findings of this study}} contribute to a re-design of Greenstone for senior users...|$|E
40|$|The ever {{increasing}} diffusion of mobile communications {{will lead to}} massive mobile access to the Internet. This paper focuses on the Wireless Application Protocol (WAP) for providing mobile information services, as envisaged by the Personalized Access to Local Information and Services for Tourists (PALIO) project within the fifth research framework of the European Commission. In particular, we consider a Global System for Mobile Communications (GSM) network where WAP traffic is transported by the Short Message Service (SMS) on specific GSM signaling channels. We develop suitable traffic models for both the WAP downlink traffic and the signaling traffic. An analytical approach is described that allows evaluation of the mean transmission delay of a WAP page. Finally, a downlink traffic scheduling policy is proposed {{in order to reduce}} the delay variance so that users experience a more regular traffic behavior (service <b>usability</b> <b>requirement).</b> The theoretical derivations shown in this paper for the GSM-SMS scenario are general and can also be tailored for other mobile communication systems. Such study allows dimensioning both the service and the downlink signaling traffic capacity in order to fulfill quality-of-service requirements for the users...|$|R
50|$|The senior ICT {{directors}} {{engaged in}} BTAT are also {{contributing to the}} creation of a procurement protocol that can be adopted by any company wanting to ensure that all new ICT purchases make accessibility and <b>usability</b> an important <b>requirement</b> when deciding on ICT related purchases.|$|R
40|$|As {{human factor}} studies {{over the last}} thirty years have shown, {{response}} time is a very important factor for the usability of an interactive system, especially on the world wide web. In particular, response times of under one second are often specified as a <b>usability</b> <b>requirement</b> (Nie 97). This paper compares several methods for improving the evaluation time in a content-based image retrieval system (CBIRS) which uses inverted file technology. The use of the inverted file technology facilitates search pruning in a variety of ways, as is shown in this paper. For large databases (> 2000 images) and a high number of possible features (> 80000), efficient and fast access is necessary to allow interactive querying and browsing. Parallel access to the inverted file can reduce the response time. This parallel access is very easy to implement with little communication overhead, and thus scales well. Other search pruning methods, similar to methods used in information retrieval, can also reduce the response time significantly without reducing the performance of the system. The performance of the system is evaluated using precision vs. recall graphs, which are an established evaluation method in information retrieval. A user survey was carried out in order to obtain relevance judgments for the queries reported in this work...|$|R
40|$|The {{success of}} Web {{applications}} is constrained by two key features: fast evolution and usability. Cur-rent Web engineering approaches follow a "unified " development style {{which tends to}} be unsuitable for applications that need to evolve fast. Moreover, according to the quality standard ISO 9126 - 1, us-ability is a key factor to obtain quality systems. In this paper, we show how to address usability re-quirements in a test-driven and model-based Web engineering approach. More specifically, we focus on <b>usability</b> <b>requirements</b> with functional implications, which do not only concern the visual appear-ance, but also the architecture design. <b>Usability</b> <b>requirements</b> are contemplated from the very begin-ning of each cycle, by creating a set of meaningful tests that drive {{the development of the}} application and ensure that no functionality related to usability is altered unintentionally through development cycles. Dealing with those <b>usability</b> <b>requirements</b> in the very early steps of the software development process avoids future hard changes in the system architecture to support them. The approach is illus-trated with an example {{in the context of the}} OOWS suite...|$|E
40|$|Abstract. The {{success of}} web {{applications}} is constrained by two key features: usability and fast evolution. Current web engineering approaches follow a "uni-fied " development style {{which tends to}} be unsuitable for applications that needs to evolve fast. In this paper, we show how to address <b>usability</b> <b>requirements</b> in an agile test/model driven web engineering method. <b>Usability</b> <b>requirements</b> are contemplated {{from the very beginning}} of each cycle by creating a set of mean-ingful tests that drive the development of the application and ensure that no functionality is altered unintentionally through development cycles. The ap-proach is illustrated with an example in the context of the WebML / WebRatio suite. ...|$|E
40|$|Context: Smartphone {{is gaining}} {{popularity}} {{due to its}} feasible mobility, computing capacity and efficient energy. Emails, text messaging, navigation and visualizing geo-spatial data through browsers are common features of smartphone. Display of geo-spatial data is collected in computing format and made publically available. Therefore the need of usability evaluation becomes important due to its increasing demand. Identifying <b>usability</b> <b>requirements</b> are important as conventional functional requirements in software engineering. Non-functional <b>usability</b> <b>requirements</b> are objectives and testable using measurable metrics. Objectives: Usability evaluation {{plays an important role}} in the interaction design process as well as identifying user needs and requirements. Comparative <b>usability</b> <b>requirements</b> are identified for the evaluation of a geographical information system (Google Maps) on personal computer (Laptop) and smartphone (iPhone). Methods: ISO 9241 - 11 guide on usability is used as an input model for identifying and specifying usability level of Google Maps on both personal computer and smartphone for intended output. Authors set target value for <b>usability</b> <b>requirements</b> of tasks and questionnaire on each device, such as acceptability level of tasks completion, rate of efficiency and participant’s agreement of each measure through ISO 9241 - 11 respectively. The usability test is conducted using Co-discovery technique on six pairs of graduate students. Interviews are conducted for validation of test results and questionnaires are distributed to get feedback from participants. Results: The non-functional <b>usability</b> <b>requirements</b> were tested and used five metrics measured on user performance and satisfaction. Through usability test, the acceptability level of tasks completion and rate of efficiency was matched on personal computer but did not match on iPhone. Through questionnaire, both the devices did not match participant’s agreement of each measure but only effectiveness matched on personal computer. Usability test, interview and questionnaire feedback are included in the results. Conclusions: The authors provided suggestions based on test results and identified usability issues for the improvement of Google Maps on personal computer and iPhone. + 46 (0) 76 55 44 63...|$|E
40|$|Efficient access {{methods for}} {{content-based}} image retrieval with inverted files MULLER, Henning, et al. As human factor studies {{over the last}} thirty years have shown, response time is a very important factor for the usability of an interactive system, especially on the world wide web. In particular, response times of under one second are often specified as a <b>usability</b> <b>requirement</b> (Nie 97). This paper compares several methods for improving the evaluation time in a content-based image retrieval system (CBIRS) which uses inverted file technology. The use of the inverted file technology facilitates search pruning in a variety of ways, as is shown in this paper. For large databases ($> 2000 $ images) and a high number of possible features ($> 80000 $), efficient and fast access is necessary to allow interactive querying and browsing. Parallel access to the inverted file can reduce the response time. This parallel access is very easy to implement with little communication overhead, and thus scales well. Other search pruning methods, similar to methods used in information retrieval, can also reduce the response time significantly without reducing the performance of the system. The performance of the system is evaluated using [ [...] . ] MULLER, Henning, et al. Efficient access methods for content-based image retrieval with inverted files. Genève: 1999 Available at...|$|R
40|$|The {{usability}} of a {{user interface}} is often neglected {{in the design}} and development of software applications. An Integrated Development Environment (IDE) is prone to poor usability problems due to the rich functionality offered through its User Interface (UI). Since an IDE targets a wide range of users (from novice to expert users), the <b>usability</b> <b>requirement</b> for an IDE vary considerably. Novice users, such as first year undergraduate students, often have difficulty in understanding many of the features provided in an IDE and have a hard time locating the appropriate menu elements. We propose an Adaptive User Interface (AUI) architecture which provides a simplified UI for the Eclipse IDE. The AUI assists novice users in using complex IDEs. We develop adaptive algorithms that modify the existing menu system for the Eclipse IDE based on statistical user interaction patterns. Our adaptive algorithms perform a cost-benefit analysis when modifying the menu system. The algorithms determine the optimal changes which reduce the time needed by novice users when searching for menu elements. A prototype AUI is developed as an Eclipse plug-in for novice users of the Eclipse IDE. Through an initial case study, we demonstrate the benefits of our AUI in improving the usability of the Eclipse IDE...|$|R
40|$|The {{traditional}} manual {{methods of}} programming in architectural design have definite disadvantages that could, in part at least, {{be overcome by}} computational support. We have developed RaBBiT, a support tool for programming {{that can be easily}} adapted to various programming styles end terminologies. In the present paper, we report on the evaluation of its <b>usability</b> in <b>requirements</b> modelling by expert designers. The evaluation is performed through the following steps: (a) measuring usefulness of RaBBiT and its effectiveness in requirements modelling and generation and (b) assessing the usability of RaBBiT by applying “pair-collaborated usability evaluation using heuristics”...|$|R
40|$|The {{design of}} a user {{interface}} usable by blind people sets specific <b>usability</b> <b>requirements</b> that are unnecessary for sighted users. These requirements focus on task adequacy, dimensional trade-off, behaviour equivalence, semantic loss avoidance and device-independency. Consequently, the development of human-computer interfaces (HCI) {{that are based on}} task, domain, dialog, presentation, platform and user models has to be modified to take into account these requirements. This paper presents a user interface model for blind people, which incorporates these <b>usability</b> <b>requirements</b> into the above HCI models. A frame-work implementing the model has been developed and implemented in an electronic speaking bilingual software environment for blind or visually impaired people and in an educational system for children with special educational needs...|$|E
40|$|Nowadays {{there are}} sound Model-Driven Development (MDD) methods {{that deal with}} {{functional}} requirements, but in general, usability is not considered from {{the early stages of}} the development. Analysts that work with MDD implement usability features manually once the code has been generated. This manual implementation contradicts the MDD paradigm and it may involve much rework. This paper proposes a method to elicit <b>usability</b> <b>requirements</b> at early stages of the software development process such a way non-experts at usability can use it. The approach consists of organizing several interface design guidelines and usability guidelines in a tree structure. These guidelines are shown to the analyst through questions that she/he must ask to the end-user. Answers to these questions mark the path throughout the tree structure. At the end of the process, the paper gathers all the answers of the end-user to obtain the set of <b>usability</b> <b>requirements.</b> If it represents <b>usability</b> <b>requirements</b> according to the conceptual models that compose the framework of a MDD method, these requirements can be the input for next steps of the software development process. The approach is validated with a laboratory demonstration...|$|E
40|$|Background: There {{are various}} {{approaches}} to evaluating the usability of {{electronic medical record}} (EMR) systems. User perspectives {{are an integral part}} of evaluation. Usability evaluations efficiently and effectively contribute to user-centered design and supports tasks and increase user satisfaction. This study determined the main <b>usability</b> <b>requirements</b> for EMRs by means of an end-user survey. Method: A mixed-method strategy was conducted in three phases. A qualitative approach was employed to collect and formulate EMR <b>usability</b> <b>requirements</b> using the focus group method and the modified Delphi technique. Classic Delphi technique was used to evaluate the proposed requirements among 380 end-users in Iran. Results: The final list of EMR <b>usability</b> <b>requirements</b> was verified and included 163 requirements divided into nine groups. The highest rates of end-user agreement relate to EMR visual clarity (3. 65 ± 0. 61), fault tolerance (3. 58 ± 0. 56), and suitability for learning (3. 55 ± 0. 54). The lowest end-user agreement was for auditory presentation (3. 18 ± 0. 69). Conclusion: The highest and lowest agreement among end-users was for visual clarity and auditory presentation by EMRs, respectively. This suggests that user priorities in determination of EMR usability and their understanding of the importance of the types of individual tasks and context characteristics differ...|$|E
50|$|To provide {{auditability}} and proactively {{address the}} increasing difficulty of protecting against all prospective threats, the TGDC directs STS to write {{requirements for the}} next version of the VVSG requiring {{the next generation of}} voting systems to be software independent. The TGDC directs STS and HFP to draft <b>usability</b> and accessibility <b>requirements</b> to ensure that all voters can verify the independent voting record.|$|R
40|$|The gap in {{usability}} knowledge between {{research and}} industry practice {{is an important}} one to bridge. This paper presents the findings of 12 interviews with usability practitioners. The interviews focus on eliciting stories about successful and unsuccessful usability outcomes. The analysis shows that an iterative usability process, ensuring stakeholder involvement, articulating <b>usability</b> goals and <b>requirements</b> and avoiding technological constraints are critical issues to achieving a successful usability outcome in a project...|$|R
40|$|Current {{persistent}} storage implementations of large bioontologies fall short in meeting <b>usability</b> and reusability <b>requirements.</b> Main limitations are demonstrated with two representative ontologies-stored-in-databases: the Gene Ontology and the Foundational Model of Anatomy. We discuss and propose several improvements for ontology development. Advantages {{of a better}} implementation are illustrated with granularity based querying. This granular information retrieval enables both retrieving more information quicker {{and can be used}} for improving and enlarging an ontology. 1...|$|R
