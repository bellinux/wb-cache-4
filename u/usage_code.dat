11|283|Public
30|$|Unlike the wired network, channel {{condition}} {{is an important}} factor that may affect the performance of a wireless network. In IEEE 802.16, the channel condition of a subscriber station (SS) is described in the downlink interval <b>usage</b> <b>code</b> (DIUC) and uplink interval <b>usage</b> <b>code</b> (UIUC) messages. As the name implied, DIUC is the downlink channel condition while UIUC represents the uplink channel condition. These messages are transmitted through downlink media access protocol and uplink media access protocol (ULMAP), respectively. A better channel condition, for example, 64 quadrature amplitude modulations (QAM), could lead to higher throughput than a poor channel, for example, quadrature phase shift keying (QPSK) modulation scheme. Hence, {{there are a lot of}} scheduling proposals that consider the network condition as one of the factors in scheduling and integrate it with MAC layer, named cross-layer design (PHY + MAC), as proposed in [17] and [23 – 27].|$|E
40|$|Reusing {{existing}} library components {{is essential}} for re-ducing the cost of software development and maintenance. When library components evolve to accommodate new fea-ture requests, to fix bugs, or to meet new standards, the clients of software libraries often need to make correspond-ing changes to correctly use the updated libraries. Existing API usage adaptation techniques support simple adaptation such as replacing the target of calls to a deprecated API, however, cannot handle complex adaptations such as creat-ing a new object to be passed to a different API method, or adding an exception handling logic that surrounds the updated API method calls. This paper presents LIBSYNC that guides developers in adapting API <b>usage</b> <b>code</b> by learning complex API usag...|$|E
40|$|Abstract. We {{report on}} {{the latest version of}} our GNU-Linux port of the ATLAS – SYNTHE – WIDTH suite of codes for the stellar {{atmosphere}} modeling. The latest version (8. 1 {{at the time of the}} workshop) of the Intel Fortran Compiler allowed for a significantly better backward compatibility with the VMS version of the code, thus allowing us to remove almost all the modifications we initially introduced in order to compile the code under IFC. We now provide ported versions both of ATLAS 9 (the ODF version of ATLAS) and ATLAS 12 (the opacity sampling version). A comprehensive website has been created to host the ported codes, along with a growing body of documentation and resources. Also, three mailing lists have been created at the university of Ljubljana in order to cover general <b>usage,</b> <b>code</b> development and ATLAS-related announcements. Key words. Stars: atmospheres – Stars: abundance...|$|E
5000|$|... {{any special}} subject or <b>usage</b> <b>codes</b> {{assigned}} to the headword - used to identify text document subject matter; ...|$|R
5000|$|Regardless of <b>usage,</b> area <b>code</b> 504 {{is almost}} universally spoken as [...] "five-oh-four".|$|R
5000|$|During the 1980s and 1990s, Drake {{clashed with}} {{officials}} {{of the city of}} Buena Park when he [...] "turned his church parking lot and a church recreation building into a makeshift homeless shelter...", housing groups of homeless persons for months at a time. This activity led to his conviction in July 1997 of violation of building and property <b>usage</b> <b>codes.</b>|$|R
40|$|A {{service is}} {{commonly}} realized {{by a set}} of components distributed over different nodes. For example, Internet based applications are orchestrated across a large scale distributed computing infrastructures and underlying resource elements; Similarly, in TINA-like approaches intelligence for control and management of services and resource, in particular, is distributed among network nodes and user/terminal nodes. In fact a service {{can be seen as a}} set of interacting components with a common purpose, being it application-oriented or of a support nature. The placement of components in different machines is more or less empirically determined at the design phase, by loosely (and occasionally subconsciously) taking into account ""reasonable"" predictions of the component <b>usage.</b> <b>Code</b> mobility has added complexity to the distribution problem. The aim of this paper is to present a methodology of dealing with component distribution, to explore its limitations, and to present its effect on service and network design. © IFIP International Federation for Information Processing 2004...|$|E
40|$|We {{report on}} {{the latest version of}} our GNU-Linux port of the ATLAS - SYNTHE - WIDTH suite of codes for the stellar {{atmosphere}} modeling. The latest version (8. 1 {{at the time of the}} workshop) of the Intel Fortran Compiler allowed for a significantly better backward compatibility with the VMS version of the code, thus allowing us to remove almost all the modifications we initially introduced in order to compile the code under IFC. We now provide ported versions both of ATLAS 9 (the ODF version of ATLAS) and ATLAS 12 (the opacity sampling version). A comprehensive website has been created to host the ported codes, along with a growing body of documentation and resources. Also, three mailing lists have been created at the university of Ljubljana in order to cover general <b>usage,</b> <b>code</b> development and ATLAS-related announcements. Comment: 3 pages, no figures. To appear in the proceedings of the Workshop "ATLAS 12 and related codes", Trieste, July 11 - 15, 200...|$|E
40|$|In {{the spring}} of 2002, Argonne National Laboratory founded the Laboratory Computing Resource Center, and in April 2003 LCRC began full {{operations}} with Argonne's first teraflops computing cluster. The LCRC's driving mission is to enable and promote computational science and engineering across the Laboratory, primarily by operating computing facilities and supporting application use and development. This report describes the scientific activities, computing facilities, and usage in the first eighteen months of LCRC operation. In this short time LCRC has had broad impact on programs across the Laboratory. The LCRC computing facility, Jazz, is available to the entire Laboratory community. In addition, the LCRC staff provides training in high-performance computing and guidance on application <b>usage,</b> <b>code</b> porting, and algorithm development. All Argonne personnel and collaborators are encouraged {{to take advantage of}} this computing resource and to provide input into the vision and plans for computing and computational analysis at Argonne. Steering for LCRC comes from the Computational Science Advisory Committee, composed of computing experts from many Laboratory divisions. The CSAC Allocations Committee makes decisions on individual project allocations for Jazz...|$|E
25|$|The {{placement}} and registration of BIC Codes is standardized by the commissions TC104 and TC122 in the JTC1 of the ISO which {{are dominated by}} shipping companies. Shipping containers are labelled {{with a series of}} identification codes that includes the manufacturer code, the ownership <b>code,</b> <b>usage</b> classification <b>code,</b> UN placard for hazardous goods and reference codes for additional transport control and security.|$|R
5000|$|RFC 3661 - Media Gateway Control Protocol (MGCP) Return <b>Code</b> <b>Usage</b> ...|$|R
5|$|The {{following}} list contains airports, heliports, {{or water}} aerodromes that {{are located in}} the Okanagan region of British Columbia, Canada. It includes the airport name, location, type, <b>usage,</b> <b>codes</b> of the International Civil Aviation Organization (ICAO airport code) and the International Air Transport Association (IATA airport code), as well as the Transport Canada location identifier (TC LID) code, and coordinates of the airport's location. ICAO and IATA codes are not given for airports which were closed or converted to general aviation before being issued such codes. As shown in the following list, each airport contains certain codes that are given, but not all of the three.|$|R
40|$|This {{document}} {{contains the}} course {{notes on the}} computational fluid dynamics code CFL 3 D version 6. 4. It is intended to provide from basic to advanced users the information necessary to successfully use the code for {{a broad range of}} cases. Much of the course covers capability that {{has been a part of}} previous versions of the code, with material compiled from a CFL 3 D v 5. 0 manual and from the CFL 3 D v 6 web site prior to the current release. This part of the material is presented to users of the code not familiar with computational fluid dynamics. There is new capability in CFL 3 D version 6. 4 presented here that has not previously been published. There are also outdated features no longer used or recommended in recent releases of the code. The information offered here supersedes earlier manuals and updates outdated usage. Where current usage supersedes older versions, notation of that is made. These course notes also provides hints for <b>usage,</b> <b>code</b> installation and examples not found elsewhere...|$|E
40|$|Sequential {{control flow}} forms the {{backbone}} of any procedural program. Just as common function, data, and structure in a C++ program can be factored out using functions, classes, and templates, common control flow schemas can also be named and abstracted. One such recurring schema, or programming cliché, is the embracing or bracketing of a sequence {{by a pair of}} actions, such as resource acquisition and release operations executed around the actual resource <b>usage</b> <b>code.</b> The patterns in this paper document idiomatic practices for abstracting such control flow in C++. They are connected into a language and further explored through a narrative example. Pre- and Post-Sequence Actions Paired actions – where a function is called before some statement sequence and a corresponding function afterwards – are commonly associated with resource acquisition and release. Pre- and post-sequence actions are a common feature of block-scoped resource management – e. g. allocate memory, use it, deallocate it – and this programming cliché can be found time and time again across many programs. Such repetition suggests a missing abstraction, and is both error prone (from the programming perspective) and prone in the presence of error (not exception safe). What is needed is a way to capture this control flow form, encapsulating it so that it is simple and exception safe...|$|E
40|$|Reusing {{existing}} library components {{is essential}} for reducing the cost of software development and maintenance. When library components evolve to accommodate new feature requests, to fix bugs, or to meet new standards, the clients of software libraries often need to make corresponding changes to correctly use the updated libraries. Existing API usage adaptation techniques support simple adaptation such as replacing the target of calls to a deprecated API, however, cannot handle complex adaptations such as creating a new object to be passed to a different API method, or adding an exception handling logic that surrounds the updated API method calls. This paper presents LIBSYNC that guides developers in adapting API <b>usage</b> <b>code</b> by learning complex API usage adaptation patterns from other clients that already migrated to a new library version (and also from the API usages within the library’s test code). LIBSYNC uses several graph-based techniques (1) to identify changes to API declarations by comparing two library versions, (2) to extract associated API usage skeletons before and after library migration, and (3) to compare the extracted API usage skeletons to recover API usage adaptation patterns. Using the learned adaptation patterns, LIBSYNC recommends the locations and edit operations for adapting API usages. The evaluation of LIBSYNC on real-world software systems shows that it is highly correct and useful with a precision of 100 % and a recall of 91 %...|$|E
5000|$|Although {{much of the}} electrician's field {{terminology}} matches that of {{the electrical}} <b>codes,</b> <b>usages</b> can vary: ...|$|R
30|$|Data <b>usage,</b> model <b>code</b> and {{parameters}} are routinely evaluated and {{tested by the}} database curators before publication of an entry on the Add-My-Pet database. We conducted a further evaluation of the used code and parameters of the rainbow trout using specific model performance criteria.|$|R
5000|$|Definition of {{the general}} {{prohibition}} {{of the use of}} unassigned code points and methods of <b>usage</b> for unassigned <b>code</b> points ...|$|R
40|$|In {{the pursuit}} of quality, {{software}} development teams are adopting new and innovative software testing techniques which allow them to deliver better, faster and more reliable applications to their clients. Indeed, structured software testing allows development teams to track and measure software quality {{in a number of}} areas including code conformance and business process rules regularity as well as meet non‑functional requirements such as scalability and security. Thus software testing has transcended its original purpose of finding basic code errors and moved on to provide future bug prevention mechanisms that enhance an application’s quality, stability and maintainability. This thesis focuses on the growing discipline of software testing with a particular emphasis on automated testing. The most frequently used testing tools and techniques are described along with their common <b>usage.</b> <b>Code</b> snippets and explanations are provided where relevant. To successfully incorporate automated testing, software development teams have to adjust their coding patterns. This thesis explains the changes that need to be made to enhance software testability and allow for test automation. Test methods, as well as test levels, are explained in detail and an indication is given as to which methods may be automated and how this can be achieved. Special emphasis has been given to unit testing. Specifically for the purpose of this thesis, I have performed an original research into the practices of professional software development teams with regard to their use of systematic software testing techniques. Results of this original research analysis make up the bulk of the quantitative data presented herein. ...|$|E
40|$|Now in its seventh year of operation, the Laboratory Computing Resource Center (LCRC) {{continues}} to be an integral component of science and engineering research at Argonne, supporting a diverse portfolio of projects for the U. S. Department of Energy and other sponsors. The LCRC's ongoing mission is to enable and promote computational science and engineering across the Laboratory, primarily by operating computing facilities and supporting high-performance computing application use and development. This report describes scientific activities carried out with LCRC resources in 2009 and the broad impact on programs across the Laboratory. The LCRC computing facility, Jazz, is available to the entire Laboratory community. In addition, the LCRC staff provides training in high-performance computing and guidance on application <b>usage,</b> <b>code</b> porting, and algorithm development. All Argonne personnel and collaborators are encouraged {{to take advantage of this}} computing resource and to provide input into the vision and plans for computing and computational analysis at Argonne. The LCRC Allocations Committee makes decisions on individual project allocations for Jazz. Committee members are appointed by the Associate Laboratory Directors and span a range of computational disciplines. The 350 -node LCRC cluster, Jazz, began production service in April 2003 and has been a research work horse ever since. Hosting a wealth of software tools and applications and achieving high availability year after year, researchers can count on Jazz to achieve project milestones and enable breakthroughs. Over the years, many projects have achieved results that would have been unobtainable without such a computing resource. In fiscal year 2009, there were 49 active projects representing a wide cross-section of Laboratory research and almost all research divisions...|$|E
5000|$|Metal Gear Solid 3: Snake Eater (PS2, PS3, Xbox 360, Vita) - This game {{features}} several <b>usages</b> of the <b>code</b> ...|$|R
50|$|The direct {{comparison}} of costs between an APS and a multi-story parking garage can be complicated by many {{variables such as}} capacity, land costs, area shape, number and location of entrances and exits, land <b>usage,</b> local <b>codes</b> and regulations, parking fees, location, and aesthetic and environmental requirements.|$|R
50|$|Lucee has {{built-in}} {{support for the}} object relational mapping (ORM) framework Hibernate, facilitating Hibernate <b>usage</b> from Lucee <b>code</b> without complex and explicit configuration.|$|R
5000|$|... → Eventbrite Analytics - Charts and {{downloadable}} {{reports on}} ticket purchasing and trends, attendee demographics, discount <b>code</b> <b>usage,</b> sales by ticket type, attendance and no shows.|$|R
40|$|Abstract — We propose {{distributed}} asynchronous algorithms {{for network}} coding in multi-source multicast networks with cycles. Our algorithms find an acyclic subset of connections between links, {{and set up}} a network code over these connections. They offer advantages in terms of link <b>usage</b> and <b>coding</b> complexity over previous distributed algorithms based on random coding, while requiring modest additional coordination. I...|$|R
40|$|When {{applying}} for convenorship at TC 251 meeting in Brussels) ❧ Interoperability needs coherence of meanings, not only messages ❧ Harmonisation {{of names and}} definitions appearing in standards ❧ Quality for development, certification, <b>usage</b> of <b>coding</b> systems ❧ Definition of value domains and subdomains for each attribute in models/messages ❧ From categorial structures to semantic archetypes and templates common Structured information catc...|$|R
50|$|The <b>usage</b> of QR <b>codes</b> enabled some {{users to}} develop desktop {{software}} {{that can be}} used to write SmileBASIC and generate a QR code for easy transfer to the DS.|$|R
40|$|A {{self-organizing}} {{approach is}} proposed for gene finding {{based on the}} model of codon <b>usage</b> for <b>coding</b> regions and positional preference for noncoding regions. The symmetry between the direct and reverse coding regions is adopted for reducing the number of parameters. Without requiring prior training, parameters are estimated by iteration. By employing the window sliding technique and likelihood ratio, a very accurate segmentation is obtained...|$|R
40|$|We {{present a}} low {{complexity}} algorithm for designing algebraic codes that achieve the info mation theoretic capacity for the multicast problem on directed acyclic networks. These codes operate over field sizes which are significantly smaller than those previously known, leading to significantly lower {{design and implementation}} complexity, and network link <b>usage.</b> These <b>codes</b> can be extended for networks with cycles and delays, and for robustness properties...|$|R
5000|$|Depending on <b>usage</b> and {{building}} <b>codes</b> and environment, most foams require protection with a thermal barrier such as drywall {{on the interior}} of a house. For example, a 15-minute fire rating may be required.|$|R
40|$|A {{self-organizing}} {{approach is}} proposed for gene finding {{based on the}} model of codon <b>usage</b> for <b>coding</b> regions and positional preference for noncoding regions. The symmetry between the direct and reverse coding regions is adopted for reducing the number of parameters. Without requiring prior training, parameters are estimated by iteration. By employing the window sliding technique and likelihood ratio, a very accurate segmentation is obtained. Comment: 2. eps figures, 4 page...|$|R
40|$|This dataset {{contains}} the pre-computed Mel-bands features from the training part of Rong Gong, Rafael Caro Repetto, & Yile Yang. (2017). Jingju a cappella singing dataset part 1 [Data set]. Zenodo. [URL] This dataset {{is used for}} reproducing the singing voice phoneme classification experiment described in the following paper: Timbre Analysis of Music Audio Signals with Convolutional Neural Networks For the <b>usage</b> and <b>code,</b> please refer to [URL]...|$|R
50|$|Number conserving {{practices}} {{allowed for}} 724 and 412 area <b>code</b> <b>usage</b> {{to be extended}} until April, 2013. The first 878 numbers were issued in April 2013, after 724 was exhausted. 412 {{has yet to be}} exhausted.|$|R
5000|$|Panama's {{urban areas}} are divided by zoning codes setting forth {{the type of}} construction, area and height restrictions, density, {{allowable}} activities, and parking spaces. Areas are divided into commercial, residential, or mixed <b>usage.</b> These <b>codes</b> must be followed {{in order for a}} real estate development or a builder to obtain a construction permit and an occupancy permit. [...] A builder needs to obtain approval from eight government agencies in order to begin construction of real property in Panama.|$|R
40|$|We {{have carried}} out a survey of codes and {{algorithms}} used on NERSC computers within the science category of material science. This {{is part of the}} effort to track the usage of different algorithms in NERSC community. This survey is based on the data provided in the ERCAP application of FY 06. To figure out the <b>usage</b> of each <b>code</b> in one account, we have multiplied the total high performance computer (HPC) time allocation (MPP hours) of this account with the percentage <b>usage</b> of this <b>code</b> as estimated by the users in the ERCAP application. This is not the actual usage time, but should be a good estimation of it, and it represents the intention of the users...|$|R
40|$|Cytogenetic and {{molecular}} investigations of Acute Lymphoblastic Leukaemia (ALL) {{have identified the}} existence of distinct clinical subgroups. Molecular monitoring of clonal Immunoglobulin and T cell receptor (IG/TR) gene rearrangements has become an important tool in stratification of therapy of ALL. In order to determine whether certain features of the patient-specific rearrangements could hold further prognostic clues or provide information on the cell of origin of ALL, a comprehensive analysis of structural and biological features (V gene <b>usage,</b> <b>coding</b> frame and mutational status and complementarity-determining region -III length) of 473 IG/TR rearrangements identified in 229 adults with ALL was carried out. Distinct variable-gene usage profiles were identified between ALL subgroups, particularly for patients positive for BCR-ABL 1 compared to MLL-AFF 1 positive leukaemias; suggesting that the former is derived from a more mature B progenitor. Interestingly, occurrence of TRGV 1 -TRGV 8 was prognostic for better event-free survival (31 % at 4 years with vs. 0 % at 4 years without, P = 0. 05). The heterogeneity in clinical outcome {{is suggested by the}} basic molecular processes of antigen receptor gene rearrangements as shown in this work...|$|R
