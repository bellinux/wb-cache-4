210|188|Public
25|$|The OpenBSD Project {{is noted}} for its {{high-quality}} <b>user</b> <b>documentation,</b> considered top among the BSD family operating systems, {{all of which have}} excellent documentation.|$|E
25|$|Hyper DA by Symmetry was a Desk Accessory for classic single-tasked Mac OS {{that allowed}} viewing HyperCard 1.x stacks as added windows in any extant application, {{and was also}} {{embedded}} into many Claris products (like MacDraw II) to display their <b>user</b> <b>documentation.</b>|$|E
25|$|Currently the KDE {{community}} {{uses the}} Git revision control system. The KDE Projects site and QuickGit give {{an overview of}} all projects hosted by KDE's Git repository system. Review Board is used for patch review. Commitfilter will send an email with each commit for the projects you want to watch, without either getting tons of mails or getting infrequent and redundant information. English Breakfast Network (EBN) {{is a collection of}} machines that do automated KDE source artifact quality checking. The EBN provides KDE API documentation validation, <b>user</b> <b>documentation</b> validation, source code checking. It is operated by Adriaan de Groot and Allen Winter. Commit-Digest site gives a weekly overview of the development activity. LXR indexes classes and methods used in KDE.|$|E
40|$|The {{point of}} this work is {{creating}} web aplication, that means analysis of functional and non-functional requirements, plan, realization, testing, documentation of source code and <b>user's</b> <b>documentation.</b> The result of the work will be functional aplication, {{which can be used}} by any kind of sporty club to improve organizational and communication processes...|$|R
5000|$|... {{optional}} other data, such as parameter tables, <b>user</b> interface, <b>documentation</b> {{which may}} be needed by the model.|$|R
40|$|The Grid Stiffened Analysis Tool {{contract}} is contract performed by Boeing under NASA purchase order H 30249 D. The contract {{calls for a}} "best effort" study comprised of two tasks: (1) Create documentation for a composite grid-stiffened structure analysis tool, {{in the form of}} a Microsoft EXCEL spread sheet, that was developed by originally at Stanford University and later further developed by the Air Force, and (2) Write a program that functions as a NASTRAN pre-processor to generate an FEM code for grid-stiffened structure. In performing this contract, Task 1 was given higher priority because it enables NASA to make efficient use of a unique tool they already have; Task 2 was proposed by Boeing because it also would be beneficial to the analysis of composite grid-stiffened structures, specifically in generating models for preliminary design studies. The {{contract is}} now complete, this package includes copies of the <b>user's</b> <b>documentation</b> for Task 1 and a CD ROM & diskette with an electronic copy of the <b>user's</b> <b>documentation</b> and an updated version of the "GRID 99 " spreadsheet...|$|R
2500|$|In 1978, as a 14-year-old {{high school}} student, he {{attended}} a summer program at the Courant Institute of Mathematical Sciences of New York University (NYU) to study computer programming; and then while a student at Livingston High School in New Jersey, Ayyadurai volunteered at the University of Medicine and Dentistry of New Jersey (UMDNJ) where his mother worked. There he created an email system to emulate the paper-based interoffice mail system then in use at the medical school. In 1982, he registered the copyright for his software, called [...] "EMAIL", {{as well as for}} the program's <b>user</b> <b>documentation.</b>|$|E
5000|$|<b>User</b> <b>documentation</b> can be {{produced}} {{in a variety of}} online and print formats. However, there are three broad ways in which <b>user</b> <b>documentation</b> can be organized.|$|E
5000|$|Like {{other forms}} of {{technical}} documentation, good <b>user</b> <b>documentation</b> benefits from an organized process of development. In the case of <b>user</b> <b>documentation,</b> the process as it commonly occurs in industry consists of five steps: ...|$|E
40|$|Changes <b>User</b> {{interface}} and <b>documentation</b> Changed {{order of}} options in <b>user</b> interface. Adjusted <b>documentation</b> accordingly. Example experiments Updated example experiments to OpenSesame version 3. 1. 3. Added example experiment for advanced loop operation shuffle_horiz (randomize {{the position of}} the response categories in each trial...|$|R
5000|$|... {{detailed}} <b>documentation</b> (<b>user</b> guide, videos, theory guide, ready-to-run examples) ...|$|R
5000|$|All {{files were}} {{editable}} by all <b>users,</b> including online <b>documentation</b> and source code.|$|R
5000|$|<b>User</b> <b>documentation</b> must {{be written}} {{so that the}} system can be given to new users.|$|E
50|$|As {{an active}} open source project, InterMine {{maintains}} a developer mailing list and thorough developer and <b>user</b> <b>documentation.</b>|$|E
50|$|The JAUS Tool Set can be {{downloaded}} from www.jaustoolset.org <b>User</b> <b>documentation</b> and community forum are also available at the site.|$|E
5000|$|<b>User</b> {{interface}} <b>documentations</b> (if applicable): Document {{that shows}} and describes {{the look and}} feel of the end product's user interface. It is not mandatory to have this, but it helps to visualize the end-product and therefore helps the designer.|$|R
50|$|Most new campus {{buildings}} at the University of Oregon reflect {{the influence of}} participation by <b>user</b> groups. <b>Documentation</b> related to {{the building of the}} University of Oregon science complex in the late 1980s describes 'pattern language' planning principles in process.|$|R
50|$|Kexi {{application}} and libraries is available under the LGPL. <b>User</b> and developer <b>documentation</b> is available under the GFDL.|$|R
50|$|The main {{activity}} of the RULE site is to test contributors' packages and provide <b>user</b> <b>documentation</b> and easy installation procedures.|$|E
50|$|Compiere {{also works}} with the open source {{alternative}} to Oracle database, EnterpriseDB. <b>User</b> <b>documentation</b> is still offered on a fee-based accessibility.|$|E
50|$|The Experiment Computing Grid Integration {{working group}} {{represented}} the Italian {{contribution to the}} development of middleware by testing the gLite software and providing <b>user</b> <b>documentation.</b>|$|E
40|$|Use Cases can be {{employed}} in system requirements engineering to capture requirements from an external point of view. In product line modeling, commonalities and variabilities {{of a family of}} systems have to be described. In order to support variability modeling for product lines with Use Cases, extensions and modifications of Use Cases have to be provided. Capturing the variations characterizing the different products is a key issue for product line requirements engineering. This paper describes an approach to derive product line requirements in the form of Use Cases, starting from the analysis of <b>user</b> <b>documentations</b> of existing systems. We provide a disciplined approach to integrate legacy information found in existing documentation into product line Use Cases and illustrate this with an example...|$|R
40|$|The University of Iowa Hospitals and Clinics (UIHC) {{implemented}} {{an online}} documentation system for patient care orders in 1994 - 1996. Developed entirely in-house, the INFORMM NIS (Information Network for Online Retrieval & Medical Management Nursing Information System) features order-generated task lists, defaulted charting responses, computer-generated chart forms, and graphical data displays. To measure {{the impact of}} automation on <b>user</b> perceptions, and <b>documentation</b> compliance, completeness, time, and location, a team of nursing and information systems representatives captured data before and after implementation. Staff surveys show more positive <b>user</b> perceptions. <b>Documentation</b> results indicate increased compliance and completeness, and a decrease or no change in time. Online documentation occurs mainly at unit workstations...|$|R
50|$|Other {{languages}} such as Perl, Javascript and PHP can be {{used for}} libraries as well, using the remote library interface, see Robot Framework <b>User</b> Guide and <b>documentation</b> for more information.|$|R
50|$|Mallard is a markup {{language}} {{for the creation}} of help pages and <b>user</b> <b>documentation</b> for applications (technical documentation). Mallard 1.0 was released on 23 July 2013.|$|E
50|$|Two {{books are}} {{available}} on the software. Extensive admin, developer and <b>user</b> <b>documentation</b> is available on the project site. There are also active forums and an IRC channel.|$|E
50|$|The JhaiPC runs Linux with a {{localised}} {{version of}} KDE. The {{hardware and software}} design and <b>user</b> <b>documentation</b> for the JhaiPC are completely open and have been released through SourceForge.net.|$|E
5000|$|According to the <b>documentation,</b> <b>users</b> {{should make}} sure FuncJS is loaded and working {{properly}} on their webpages by checking whether the browser recognises the FuncJS object:if(window.funcJS) {alert("I'm working!");} else {alert("I'm not working!");} ...|$|R
40|$|Within the {{electric}} power industry, the average companyâ€™s enterprise system- i. e. the over-all system of IT related entities- is today highly complex. Technically, large organizations posses {{hundreds or thousands}} of extensively interconnected and heterogeneous single IT systems performing tasks that varies from enterprise resource planning to real-time control and monitoring of industrial processes. Moreover are these systems storing a wide variety of sometimes redundant data, and typically they are deployed on several different plat-forms. IT does, however, not execute in splendid isolation. Organizationally, the enterprise system embraces business processes and business units using as well as maintaining and acquiring the IT systems. The interplay between the organization and the IT systems are further determined by for instance business goals, ownership and governance structures, strategies, individual system <b>users,</b> <b>documentation,</b> and cost. Lately, Enterprise Architecture (EA) has evolved with the mission to take a holistic ap-proach to managing the above depicted enterprise system. The disciplineâ€™s presumption is that architectural models are the key to succeed in understanding and administrating enter...|$|R
5000|$|Kramer's second {{contention}} was [...] "that the government's {{evidence was}} insufficient {{to demonstrate that}} his cellular phone was a computer." [...] The government referenced the phone's <b>user's</b> manual and <b>documentation</b> from Motorola's website describing the phone's features.|$|R
50|$|Jesse Smith of DistroWatch notes fast bootup times {{which he}} {{credited}} to runit, but {{also notes that}} documentation and bug-testing are lacking. The official wiki is {{the main source of}} <b>user</b> <b>documentation.</b>|$|E
50|$|Part II: Documentation Requirements - {{contains}} {{requirements that}} apply to the technical data package, voting equipment <b>user</b> <b>documentation,</b> the test plan, the test report, the public information package, and data for repositories.|$|E
5000|$|The main MONAHRQ Website {{provides}} software downloads, <b>user</b> <b>documentation,</b> a live demo {{site of the}} MONAHRQ-generated website, a fact sheet, presentations, [...] "Whatâ€™s New?" [...] announcements, a FAQ page, {{and links}} to known MONAHRQ-generated websites.|$|E
30|$|Installation, training, routine maintenance, {{emergency}} repair, {{spare parts}} supply, and software services are primary {{activities in the}} aftersales services [39]. These services also include transport or delivery, installation, <b>user</b> training, <b>documentation,</b> advice by helpdesk, technical advice, maintenance and repair, online report, warranty, spare part delivery, recycling, and upgrades [12, 13, 16, 32, 36]. In addition to these lists of activities, aftersales services include call center operations, home visiting services, and claim handling services [1].|$|R
40|$|Documentation is an {{integral}} part of a software system. It contains the information that is necessary to effectively and successfully develop, use, and maintain a system. In practice, however, the creation of appropriate documentation is largely neglected. This paper investigates the reasons for this neglect and proposes an approach to improve the current situation. As the quality of documentation depends on its usage, the approach presented here realizes the software engineering principle separation of concerns to provide all <b>documentation</b> <b>users</b> with the <b>documentation</b> they require for performing their tasks. The approach has been empirically validated in a series of experiment and case studies of which one experiment is described here in more detail...|$|R
40|$|This thesis was {{submitted}} for {{the degree of}} Doctor of Philosophy and awarded by Brunel University. Many people believe that good documentation is important, yet few use it regularly and effectively. An attempt is made to find reasons for this contradictory behaviour, by examining the existing practices of providers and <b>users</b> of <b>documentation.</b> Reasons for not using documentation appear to fall into two classes; predictable interaction effects and unpredictable interaction effects. Providers usually try to predict the problems users {{are likely to have}} at the user-documentation interface, by following standard quality control procedures. When these fail to produce good <b>documentation,</b> <b>users</b> become dissatisfied and turn elsewhere for their information needs. On the other hand, good quality documentation may not be used for reasons which cannot be predicted, and often cannot be explained. An approach which suggests methods for dealing with both of these situations is formulated, and ideas for raising the status of documentation are discussed...|$|R
