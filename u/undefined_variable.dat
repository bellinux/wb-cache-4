16|32|Public
5000|$|The {{variables}} [...] and [...] are scoped {{within the}} [...] function, but variable [...] is not. As a result, [...] becomes a global variable {{that can be}} accessed without {{the scope of the}} [...] function. Here is what happens when swap is executed and , [...] and [...] are then printed:> swap2 1 1t> a*Error* toplevel: <b>undefined</b> <b>variable</b> - a> b*Error* toplevel: <b>undefined</b> <b>variable</b> - b> c1 ...|$|E
50|$|FTN95, like it {{predecessor}} FTN77, {{has strong}} run-time checking options, collectively called CHECKMATE. Compiler switches {{can turn on}} various levels of run-time checking. These include array bound checks, constant modification, DO LOOP modification, argument checking and <b>undefined</b> <b>variable</b> use. Program run-times are increased when checking is used.|$|E
50|$|There {{is also a}} {{philosophical}} difference between the dialects. MIIS often takes the approach that code should march along, regardless of possible errors, where MUMPS will error out to prevent more serious problems. For example, when encountering an <b>undefined</b> <b>variable,</b> MUMPS generates an error where MIIS treats it as nil.|$|E
50|$|The {{following}} {{provides some}} examples of how various programming language implementations respond to <b>undefined</b> <b>variables.</b> Each code snippet is followed by an error message (if any).|$|R
40|$|The last {{article on}} L-Systems [1] showed how {{terminal}} L-Systems {{can be used}} to characterize t-sequences in terms of t-sequence expressions. A t-sequence expression with <b>undefined</b> <b>variables</b> represents all the possible t-sequences that can be produced by giving all possible values to the <b>undefined</b> <b>variables</b> during interpretation. The usefulness of this idea is illustrated by the following examples. Here is the weave pattern: Example 1 seed: S rules: S ➛ pal(T) T ➛ motif(X,V) X ➛ hor(Y) Y ➛ motif(U,V)) The terminal generation is pal(motif(hor(motif(U,V)),V)) Given the values U: = [1, 2, 3, 2...|$|R
5000|$|A [...] {{statement}} intercepts uses of <b>undefined</b> <b>variables,</b> {{which would}} otherwise {{get their own}} (upper case) name as their value. Regardless {{of the state of}} the [...] condition, the status of a variable can always be checked with the built-in function [...] returning VAR for defined variables.|$|R
50|$|Two {{components}} of the compiler are not portable. The code generator translates FORTRAN statements into native computer instructions and stores them in memory. The first version of WATFOR-77 generates instructions for the IBM 370 computer architecture. Most of the execution-time support (<b>undefined</b> <b>variable</b> checking, subscript evaluation, intrinsic functions) was written in assembly language for good performance.In September 1984, the first version was installed at the University of Waterloo for the Department of Computing Services. It was an implementation for IBM 370 computers running the VM/SP CMS operating system.|$|E
5000|$|Perl 5.6.1 and newer support autovivification of {{file and}} {{directory}} handles. Calling [...] on an <b>undefined</b> <b>variable</b> will set it to a filehandle. According to perl561delta, [...] "this largely {{eliminates the need}} for typeglobs when opening filehandles that must be passed around, as in the following example: for my $file ( [...] qw(this.conf that.conf) [...] ) { my $fin = open_or_throw('<', $file); process_conf( [...] $fin [...] ); # no close (...) needed } use Carp; sub open_or_throw { my ($mode, $filename) = @_; open my $h, $mode, $filename or croak [...] "Could not open '$filename': $!"; return $h; } ...|$|E
50|$|This simple, {{one-step}} process allowed non-experienced programmers {{to learn}} programming with lower cost {{in time and}} computing resources.To aid in debugging, the compiler uses an innovative approach to checking for undefined variables (an extremely common mistake by beginning programmers). It uses a diagnostic feature of the 7040 that can deliberately set areas of memory to bad parity. When a program tries to reference variables that hadn't been set, the machine takes an interrupt (handled by the Watfor runtime routines) and the error is reported to the user as an <b>undefined</b> <b>variable.</b> This has the pleasant side effect of checking for undefined variables with essentially no CPU overhead.|$|E
40|$|The {{processing}} of agrimateriais utiiizing sub- and supercritical fluids {{is one of}} the more challenging and time-honored applications of the technology. Agrimaterials can by definition include food, natural products, and nunaceuticals; however it is probably raw agriculmrai materials that encompass and present so many <b>undefined</b> <b>variables</b> to th...|$|R
5000|$|... irb(main):001:0> y = xNameError: <b>undefined</b> local <b>variable</b> or method `x' for main:Object from (irb):1 ...|$|R
50|$|A subtle {{issue is}} exactly when a scope begins and ends. In some languages, {{such as in}} C, a scope starts at declaration, and thus {{different}} names declared within a given block can have different scopes. This requires declaring functions before use, though not necessarily defining them, and requires forward declaration in some cases, notably for mutual recursion. In other languages, such as JavaScript or Python, a name's scope begins {{at the start of}} the relevant block (such as the start of a function), regardless of where it is defined, and all names within a given block have the same scope; in JavaScript this is known as variable hoisting. However, when the name is bound to a value varies, and behavior of in-context names that have undefined value differs: in Python use of <b>undefined</b> <b>variables</b> yields a runtime error, while in JavaScript <b>undefined</b> <b>variables</b> are usable (with undefined value), but function declarations are also hoisted to the top of the containing function and usable throughout the function.|$|R
5000|$|While it is {{convenient}} to compare between solvents to qualitatively compare systems {{it is not}} quantitatively meaningful. Much as pKa are related between solvents, but not the same, so {{is the case with}} E°. While the SHE might seem to be a reasonable reference for nonaqueous work as it turns out the platinum is rapidly poisoned by many solvents including acetonitrile [...] causing uncontrolled drifts in potential. Both the SCE and saturated Ag/AgCl are aqueous electrodes based around saturated aqueous solution. While for short periods {{it may be possible to}} use such aqueous electrodes as references with nonaqueous solutions the long-term results are not trustworthy. Using aqueous electrodes introduces <b>undefined,</b> <b>variable,</b> and unmeasurable junction potentials to the cell in the form of a liquid-liquid junction as well as different ionic composition between the reference compartment and the rest of the cell. [...] The best argument against using aqueous reference electrodes with nonaqueous systems, as mentioned earlier, is that potentials measured in different solvents are not directly comparable. For instance, the potential for the Fc0/+ couple is sensitive to solvent.|$|E
40|$|In {{an earlier}} paper, {{the authors have}} defined type 1 and type 2 data flow {{anomalies}} to be, respectively, the reference to an <b>undefined</b> <b>variable</b> and {{the definition of a}} variable without subsequent reference. It is not difficult to devise search techniques to detect such anomalies when the anomalous data flow is contained in a single procedure. When the data flow crosses procedure boundaries, however, many difficulties may arise. In this paper, we carefully define the conditions under which inter-procedural anomalies occur. We also show how algorithms currently used in global program optimization can easily be adapted to yield highly efficient algorithms for the detection of such inter-procedural anomalies...|$|E
40|$|This paper {{presents}} the results of a controlled experiment comparing debugging abilities of novice, intermediate, and skilled student programmers. Debugging-performance dif-ferences were studied using two single-page Pascal pro-grams: a binary search program and a median calculation program. Two types of semantic errors, array bounds and <b>undefined</b> <b>variable,</b> and two types of error messages, with and without line number, were varied within the two programs. Subjects were asked to find and correct a single error in each program. Results demonstrate skill-level differences, show the importance of error and message interaction, and support previous research claiming that programmers can almost always correct an error once it is located. 1...|$|E
40|$|Multiphase {{separators}} are {{intrinsic to}} {{the recovery of}} crude oil. This work compares extant separator design models with a newly developed procedure to optimise existing models by minimising economic cost. The new method avoids the use of ‘fudge factors’ or <b>undefined</b> <b>variables</b> in {{the solution of the}} design. A comparison between results obtained from this model and four extant models is presented. The newly developed model gave results similar to models based on retention time theory without the need for undertaking a laboratory testing...|$|R
40|$|Genetic Algorithms (GAS) are stochastic, non-derivative {{optimization}} method. They use popula-tions {{of acceptable}} solutions (genes) of the given problem, which evolve toward optimum. The genes in standard GAS are Boolean vectors. When in synthesis of {{finite state machine}} are used JK and RS flip-flops there are <b>undefined</b> <b>variables</b> in the activation signals. When the finite state machine is of high order Quine-McClusky method is used, which requires exact values of the variables. At this stage the GAS are used to find the optimal set of variables, in terms of simplifying the description...|$|R
50|$|Based on the {{operators}} within lambda calculus, application and abstraction, {{it is possible}} to develop an algebra whose group structure uses application and abstraction as binary operators. Application is defined as an operation between lambda terms producing a λ-term, e.g. the application of λ onto the lambda term a produces the lambda term &lambda;a. Abstraction incorporates <b>undefined</b> <b>variables</b> by denoting λx.t(x) as the function assigning the variable a to the lambda term with value t(a) via the operation ((λ x.t(x))a = t(a)). Lastly, an equivalence relation emerges which identifies λ-terms modulo convertible terms, an example being beta normal form.|$|R
30|$|Séralini et al. [2, 3] was {{designed}} as a follow-on study to Hammond et al. [4]. Since Hammond et al. used Sprague–Dawley (SD) rats, it was correct, according to OECD guidelines [6], for Séralini et al. to also use this strain. Séralini et al. [2, 3] interpret their finding of liver and kidney toxicity as being consistent with Hammond et al. [4], confirming that, the observations reported by Hammond et al. were early signs of liver and kidney toxicity. It {{should be pointed out that}} the two studies procured SD rats from different sources. This is an <b>undefined</b> <b>variable</b> since sub-lines of outbred stocks of rats (such as SD), propagated in isolation, can undergo genetic drift, complicating comparisons of results between studies.|$|E
40|$|AbstractIn {{physiological}} research, inductive reasoning {{has traditionally}} been the rule, rather than the exception. This is because mathematical formulations of human body function inevitably lead to indeterminate situations where there are more unknown quantities than there are equations to describe them. This paper discusses a deductive approach {{to the study of}} human body dynamics, where the indeterminateness is usually associated with the presence of “will” as an <b>undefined</b> <b>variable.</b> The point is made that “will” may be quantified by viewing musculoskeletal mechanics in terms of a minimum energy principle. Thus, variational and optimization methods may be employed to generate additional equations of motion which render the problem determinate in a deductive sense. Several examples illustrate the succesful use of variational methods in biodynamic modelling...|$|E
40|$|This {{dissertation}} uses {{samples of}} Initial Public Offerings (IPOs) {{to examine the}} separate effects that {{a capital gains tax}} and investor interest have on trading volume and returns. Chapter one looks at how different tax rates for long-term and short-term capital gains and losses affect trading in IPOs. Prior to the Tax Reform Act of 1986 (TRA ' 86), long-term capital gains were taxed at a lower rate than short-term gains, presenting investors with an opportunity to increase their after-tax return by delaying the sale of appreciated assets until after they qualified for long-term status and selling depreciated assets prior to long-term qualification. Using a sample of Initial Public Offering, I find that stocks that appreciated prior to long-term qualification exhibit increased trading volume and decreased returns just after their qualification date, while stocks that depreciated prior to long-term qualification exhibit these effects just prior to their qualification date. Chapter two explores how the previously <b>undefined</b> <b>variable</b> "investor interest" affects an IPO's trading activity. The level of investor interest in an IPO prior to its issue influences its offer price, its initial return and its initial trading volume. After issue, this interest level impacts the stock's long-term trading volume, leading to a positive relationship between an IPO's initial return and its trading volume {{for more than three years}} after issuance. Using newspaper references as a proxy for the level of interest in a firm, I find that investor interest is positively related to initial return, initial trading volume and long-term trading volume...|$|E
5000|$|Hybrid (stylized HYBRID) is a {{role playing}} game created by [...] "C". The [...] "game" [...] is said to {{correctly}} model physical reality, and originated {{from a series of}} [...] "disjointed" [...] posts by the author on a Usenet board. Hybrid consists of over 500 different and non-sequential rules, many of them utilizing references to pop culture and politics, cross-references to other rules (existent or not) and even other completely different RPG's, equations with <b>undefined</b> <b>variables,</b> and other random content. The version numbering system is also non-sequential, version 0.21 is considered newer than 0.34. An RPGnet reviewer declared Hybrid to be [...] "unmitigated nonsense", and the game is also ranked as the 2nd worst RPG on the site.|$|R
40|$|We {{present a}} {{methodology}} for designing and implementing interactive intelligences. The Constructionist Design Methodology (CDM) – so called because it advocates modular building blocks and incorporation of prior work – addresses factors {{that we see}} as key to future advances in A. I., including interdisciplinary collaboration support, coordination of teams and large-scale systems integration. We test the methodology by building an interactive multi-functional system with a real-time perception-action loop. The system, whose construction relied entirely on the methodology, consists of an embodied virtual agent that can perceive both real and virtual objects in an augmented-reality room and interact with a user through coordinated gestures and speech. Wireless tracking technologies give the agent {{awareness of the environment}} and the user’s speech and communicative acts. User and agent can communicate about things in the environment, their placement and function, as well as more abstract topics such as current news, through situated multimodal dialog. The results demonstrate CDM’s strength in simplifying the modeling of complex, multi-functional systems requiring architectural experimentation and exploration of unclear sub-system boundaries, <b>undefined</b> <b>variables,</b> and tangled data flow and control hierarchies...|$|R
40|$|Despite {{extensive}} testing, deployed software still crashes. Other than a stack trace, these crashes {{offer little}} guidance to developers, making them hard to reproduce and fix. This work seeks to ease error correction by providing diagnostic {{information about the}} origins of null pointer exceptions and <b>undefined</b> <b>variables.</b> The key idea is to use value piggybacking to record and report useful debugging information in undefined memory. For example, instead of storing zero at a null store, store the origin program location, then correctly propagate this value through assignment statements and comparisons. If the program dereferences this value, report the origin. We describe, implement, and evaluate low-overhead value piggybacking for origin tracking of null pointer exceptions in deployed Java programs. We show that the reported origins add useful debugging information over a stack trace. We also describe, implement, and evaluate origin tracking of undefined values in C, C++, and Fortran programs in a memory error testing tool built with Valgrind. Together these implementations demonstrate that value piggybacking yields useful debugging information that can ease bug diagnosis and repair...|$|R
40|$|Primary human hepatocytes are a scare {{resource}} {{with limited}} lifespan and variable function which diminishes with time in culture. As a consequence, {{their use in}} tissue modelling and therapy is restricted. Human embryonic stem cells (hESC) could provide a stable source of human tissue due to their self-renewal properties {{and their ability to}} give rise to all the cell types of the human body. Therefore, hESC have the potential to provide an unlimited supply of hepatocytes. To date, the use of hESCs-derived somatic cells is limited due to the <b>undefined,</b> <b>variable</b> and xeno-containing microenvironment that influences the cell performance and life span, limiting scale-up and downstream application. Therefore, the development of highly defined cell based systems is required if the true potential of stem cell derived hepatocytes is to be realised. In order to replace the use of animal derived culture substrates to differentiate and maintain hESCs-derived hepatocytes, an interdisciplinary approach was employed to define synthetic materials, which maintain hepatocyte-like cell phenotype in culture. A simple polyurethane, PU 134, was identified which improved hepatocyte performance and stability when compared to biological matrices. Moreover, the synthetic polymer was amenable to scale up and demonstrated batch-to-batch consistency. I subsequently used the synthetic polymer surface to probe the underlying biology, identifying key modulators of hepatocyte-like cell phenotype. This resulted in the identification of a novel genetic signature, MMP 13, CTNND 2 and THBS 2, which was associated with stable hepatocyte performance. Importantly, those findings could be translated to two hESC lines derived at GMP. In conclusion, hepatocyte differentiation of pluripotent stem cells requires a defined microenvironment. The novel gene signature identified in this study represents an example of how to deliver stable hESCs-derived hepatocytes...|$|E
40|$|Thesis (Ph. D.) [...] University of Washington, 2013 Despite {{advances}} in hearing aid technology and careful fitting processes, outcomes vary widely among hearing aid users, particularly in background noise. Predicting benefit with hearing aids {{is not easy}} to do, as many variables contributing to outcomes are not known. The general aim of this research is to explore a previously <b>undefined</b> <b>variable</b> in outcomes, the signal-to-noise ratio. The level of speech compared to the level of background noise (i. e., signal-to-noise ratio; SNR) has been linked to speech perception and quality of brain responses at the input stage of processing. However, hearing aid processing is likely to modify the SNR, therefore delivering an altered SNR version to the listener. This study first aims to quantify the amount of change in SNR made by hearing aid processing, and second, to use the SNR changes at the output of the hearing aid to predict changes in speech percpetion. Two groups were studied, normal and impaired hearing listeners. Our hypothesis is that speech perception is dependent in part on the SNR at the output of the hearing aid, since this is the signal entering the listener's auditory system. To test this hypothesis, we quantified the SNR at the output of the hearing aid using acoustic measures of the hearing aid output. We then correlated the changes in output SNR to changes in speech perception scores, measured in a background of noise. The results showed that hearing aids for both groups of listeners were changing the SNR from input to output by a small, but statistically significant, amount (mean change: - 0. 25 dB). However, the change in SNR was not predictive of changes in speech perception for either group. We discuss the limitations and generalizations of these results, as well as future directions for research...|$|E
40|$|AbstractBackground/purposeSickle cell disease (SCD) is a chronic, hereditary, {{autosomal}} recessive disorder. The pathophysiology of SCD {{is thought to}} result from polymerization of hemoglobin S in red blood cells under hypoxic conditions, which results in vaso-occlusion. The {{aim of this study}} was to determine the periodontal and dental health status of patients with SCD. Materials and methodsFifty-five SCD patients and 41 healthy individuals were evaluated. Detailed medical and dental histories were taken, and a record made of dental status (missing teeth, restorations, impacted teeth, root canal treatment), periodontal status [plaque index (PI), gingival index (GI), probing depth (PD), bleeding on probing (BOP) ], alveolar bone level (ABL), mandibular cortex index, and bone quality index. ResultsTwo hundred and six teeth were missing, and a total of 195 teeth had restorations. Between-group differences existed for the PI, GI, and BOP; these variables were higher in patients than in the healthy individuals (P< 0. 0001). No between-group differences existed for PD. In patients, there was a positive correlation between PD and BOP (P< 0. 0001; r= 0. 657), PD and GI (P= 0. 02; r= 0. 299), PD and PI (P= 0. 01; r= 0. 343); BOP and GI (P< 0. 0001; r= 0. 503), BOP and PI (P< 0. 0001; r= 0. 496); and GI and PI (P= 0. 003; r= 0. 388). The ABL in patients was found to be similar to that of the general population with an unknown periodontal condition. ConclusionNo clinical periodontal disease or attachment loss was detected in patients. However the PI, GI, and BOP were significantly higher in patients with SCD, which may reflect an as yet <b>undefined</b> <b>variable</b> response to microbes. There were no significant differences, however, in pocket depth between the two groups. Therefore we are unable to confirm any significant relationship between SCD and periodontal diseases. Oral health is not a major concern for SCD patients. The reason for this finding may be the potentially severe complications of SCD, which mean that oral and dental problems are not major concerns for this particular group of patients...|$|E
40|$|This manual {{describes}} the input for the pc version of John Lamar’s vortex lattice program. This program {{is identical to}} the program given in reference 2. An advanced version described in reference 4 is also available. The input data sets differ slightly between the two versions. The code is called VLMpcv 2. f on the disk, and has been modified for WATFOR. This means that the output field length is limited to eighty columns. In WATFOR you may also need to invoke the NOCHECK option to prevent the program from halting because of <b>undefined</b> <b>variables.</b> The code is provided with two OPEN statements near the beginning of the main program: OPEN(5,file=infile, status=old) OPEN(6,file=outfil, status=new) such that the input data is defined on the file infile, and the output is placed in file outfil. The user is prompted for the names of these files at the start of execution. Users should customize the code to fit their preferences. The disk also contains a sample input file, YF 23. IN, and a sample output file, YF 23. OUT. The theory is described in references 1, 2 and 3, and the user’s manual provided here is basically the instructions from references 1 and 2, with minor corrections and clarifications. Referenc...|$|R
5000|$|Another {{difference}} in Windows 2000 or higher {{is that an}} empty <b>variable</b> (<b>undefined)</b> is not substituted. As described in previous examples, previous batch interpreter behaviour {{would have resulted in}} an empty string. Example:C:\>set MyVar=C:\>echo %MyVar%%MyVar%C:\>if [...] "%MyVar%"=="" [...] (echo MyVar is not defined) else (echo MyVar is %MyVar%)MyVar is %MyVar% ...|$|R
40|$|Progress in {{generating}} robust differentiation protocols for efficient and scalable production of defined cell lineages from {{human embryonic stem}} cells (hESc) has been slow. Amongst the obstacles to be addressed are those inherent to standard hESc culture and differentiation practices {{including the use of}} feeder cells, serum and animal-derived matrices. These components are biologically complex, <b>undefined</b> and highly <b>variable</b> between batches, inhibiting the development of consistently reproducible protocols (1, 2) ...|$|R
40|$|We {{consider}} {{the problem of}} building relational probabilistic models with an underlying ontology that defines the classes and properties used in the model. Properties in the ontology form random variables when applied to individuals. When an individual {{is not in the}} domain of a property, the corresponding random <b>variable</b> is <b>undefined.</b> If we are uncertain about the types of individuals, we may be uncertain about whether random variables are defined. We discuss how to extend a recent result on reasoning with potentially <b>undefined</b> random <b>variables</b> to the relational case. Object properties may have classes of individuals as their ranges, giving rise to random variables whose ranges vary with populations. We identify and discuss {{some of the issues that}} arise when constructing relational probabilistic models using the vocabulary and constraints from an ontology, and we outline possible solutions to certain problems...|$|R
40|$|Over 70 % of the domesticated {{birds in}} Kenya are {{indigenous}} chicken (IC) providing meat and table eggs. They are frequently raised through the free range, backyard production system. Small flock sizes {{are characteristic of}} this production system and often, sales are mainly at the farmgate. Although IC production possesses enormous potential at livelihood improvement, marketing systems are <b>undefined</b> and <b>variable.</b> The influence of prices on market engagement has frequently been assumed. A study of 68 farmers conducted in Machakos, Kibwezi, Nzaui and Mwala District in 2008 revealed that 70 % of all IC sales were conducted at the farmgate while only 19 % of the sales were at the local market. This study also investigates the probability of market participation by employing a binary logistic regression model. The results suggests that while farmers complain of poor farm gate prices for indigenous chicken offered by middlemen, low volumes are an important drawback to market participation. ...|$|R
40|$|Abstract: 2 ̆ 2 In the {{interest}} of designing a recursive module extension to ML that is as simple and general as possible, we propose a novel type system for general recursion over effectful expressions. The presence of effects seems to necessitate a backpatching semantics for recursion based on Scheme 2 ̆ 7 s. Our type system ensures statically that recursion is well-founded (that {{the body of a}} recursive expression will evaluate without attempting to access the <b>undefined</b> recursive <b>variable),</b> which avoids some unnecessary run-time costs associated with backpatching. To ensure well-founded recursion in the presence of multiple recursive variables and separate compilation, we track the usage of individual recursive variables, represented statically by 2 ̆ 7 names 2 ̆ 7. So that our type system may eventually be integrated smoothly into ML 2 ̆ 7 s, reasoning involving names is only required inside code that uses our recursive construct and does not need to infect existing ML code. 2 ̆...|$|R
40|$|This paper {{tests the}} Feltham–Ohlson (1995) model by {{transforming}} the <b>undefined</b> “other information” <b>variables</b> into expectational variables, {{as suggested by}} Liu and Ohlson [Liu and Ohlson (2000). Journal of Accounting, Auditing and Finance 15, 321 – 331]. The signs of the estimated coefficients conform to the model’s predictions using panel data techniques, non-parametric estimation, reverse regressions and portfolio regressions. The tests reject the Ohlson model in favor of Feltham–Ohlson. Nevertheless, the estimated leverage coefficient takes a value of three instead of one for most variations of the model. Also, the 1 -year-ahead price predictions of the Feltham–Ohlson model are no more accurate {{than those of the}} Ohlson model or a naive earnings valuation model...|$|R
50|$|Scope is a source-code level concept, and a {{property}} of identifiers, particularly variable or function names - identifiers in the source code are references to entities {{in the program}} - and {{is part of the}} behavior of a compiler or interpreter of a language. As such, issues of scope are similar to pointers, which are a type of reference used in programs more generally. Using the value of a variable when the name is in context but the variable is uninitialized is analogous to dereferencing (accessing the value of) a wild pointer, as it is <b>undefined.</b> However, as <b>variables</b> are not destroyed until they go out of context, the analog of a dangling pointer does not exist.|$|R
40|$|ObjectiveTo examine {{patient and}} wound {{variables}} presumed to influence healing outcomes {{in the context}} of therapeutic trials for chronic venous leg ulcers. MethodsThis double-blind, vehicle-controlled study was conducted with randomized assignment to one of four cell therapy dose groups (n = 46, 43, 44, 45) or vehicle control (n = 50). A 2 -week run-in period was used to exclude rapid healers and those with infection or uncontrolled edema. This was a multicenter (ambulatory, private, hospital-based and university-based practices, and wound care centers in North America) study. Adults ≥ 18 years old with chronic venous insufficiency associated with an uninfected venous leg ulcer (2 - 12 cm 2 area, 6 - 104 weeks' duration) were included in the study. Excluded were pregnant or lactating women, wounds with exposed muscle, tendon or bone, patients unable to tolerate compression bandages, or patients who had exclusionary medical conditions or exposure to certain products. Exclusion during run-in included patients with infection, uncontrolled severe edema or with healing rates ≥ 0. 349 cm/ 2 wk. Screen fail rate was 37 % (134 / 362), and the withdrawal rate was ∼ 10 % (23 of 228). Growth-arrested neonatal dermal fibroblasts and keratinocytes were delivered via pump spray in a fibrin sealant-based matrix, plus a foam dressing and four-layer compression bandaging. Treatment continued for 12 weeks or until healed, whichever occurred first. Patient demographic and wound-related variables were evaluated for influence on complete wound healing in all patients, as well as the subsets of treated and control patients. ResultsWound duration (P =. 004) and the presence of specific quantities of certain bacterial species (P <. 001) affected healing in the vehicle group, while healing in the cell-treated groups was influenced by wound duration (P =. 012), wound area (P =. 026), wound location (P =. 011), and specific quantities of certain bacterial species (P =. 002). Age, sex, race, diabetes, HbA 1 C, peripheral neuropathy, and serum prealbumin did not significantly affect healing. Body mass index was positively associated with healing in cell-treated patients. ConclusionsWound duration is a quantifiable surrogate for one or more <b>undefined</b> <b>variables</b> that can have a profound negative effect on venous leg ulcer healing. Although cell therapy overcame barriers to healing, the only specific barrier identified was the presence of certain bacterial species. Interventional trials of potentially effective new therapies can be most informative when patients with suspected barriers to healing are included. The specific measurement of candidate barriers such as microbial pathogens, wound inflammatory state, and fibroblast function should be considered in future randomized trials to improve our understanding of the basis for chronicity...|$|R
