3085|2594|Public
5|$|The {{personal}} decompression computer {{provides a}} real time modelling of the inert gas {{load on the}} diver according to the decompression algorithm programmed into the computer by the manufacturer, with possible personal adjustments for conservatism and altitude set by the user. In all cases the computer monitors the depth and elapsed time of the dive, and many allow <b>user</b> <b>input</b> specifying the gas mixture.|$|E
5|$|MSE {{provides}} real-time protection, constantly monitoring {{activities on}} the computer and scanning new files as they are downloaded or created. It disables detected threats and prompts for <b>user</b> <b>input</b> {{on how to deal}} with them. If no response is received within ten minutes, suspected threats are handled according to the default actions defined in the application's settings. Depending on those settings, it may also create System Restore checkpoints before removing the detected malware. As a part of real-time protection, by default, MSE reports all suspicious behaviors of monitored programs to Microsoft Active Protection Service (MAPS, originally Microsoft SpyNet), a web-based service. If the report matches a newly discovered malware threat with an unreleased virus definition, the new definition is downloaded to remove the threat.|$|E
25|$|KeePass {{features}} a built-in password generator that generates random passwords. Random seeding {{can be done}} through <b>user</b> <b>input</b> (mouse movement and random keyboard input).|$|E
5000|$|Feedback informing {{about the}} <b>user's</b> <b>input</b> timely, perceptible, and non-intrusive.|$|R
5000|$|One {{commonly}} used function, , {{is used to}} validate the output with <b>user</b> <b>inputs.</b>|$|R
5000|$|... Populate {{an array}} with the <b>user's</b> <b>input.</b> Local $aSplit = StringSplit($sInput, [...] ",") ...|$|R
25|$|Lastly, SQL {{injection}} exploits a vulnerability in {{the database}} layer of an application. When <b>user</b> <b>input</b> is incorrectly filtered, any SQL statements can be executed by the application.|$|E
25|$|The {{basic idea}} of an input method {{is to have a}} buffer that holds the <b>user</b> <b>input</b> until it is {{converted}} into characters that would otherwise be unavailable from the keyboard.|$|E
25|$|X is an architecture-independent {{system for}} remote {{graphical}} user interfaces and input device capabilities. Each person using a networked terminal {{has the ability to}} interact with the display with any type of <b>user</b> <b>input</b> device.|$|E
5000|$|... ? - Operator input command, {{used when}} <b>user's</b> <b>input</b> is required. Usually used with →(variable) ...|$|R
5000|$|Routing {{of input}} video to video {{monitors}} based on <b>user</b> <b>inputs</b> or automatically on alarms or events.|$|R
40|$|Abstract In a {{multimodal}} human-machine conversation, <b>user</b> <b>inputs</b> {{are often}} abbreviated or imprecise. Simply fusing multimodal inputs together {{may not be}} sufficient to derive a complete understanding of the inputs. Aiming to handle a wide variety of multimodal inputs, we are building a context-based multimodal interpretation framework called MIND (Multimodal Interpreter for Natural Dialog). MIND is unique in its use of a variety of contexts, such as domain context and conversation context, to enhance multimodal interpretation. In this chapter, we first describe a fine-grained semantic representation that captures salient information from <b>user</b> <b>inputs</b> and the overall conversation, and then present a context-based interpretation approach that enables MIND to reach a full understanding of <b>user</b> <b>inputs,</b> including those abbreviated or imprecise ones...|$|R
25|$|A common {{method of}} {{processing}} and extracting meaning from natural language is through semantic indexing. Although these indexes require a {{large volume of}} <b>user</b> <b>input,</b> {{it is expected that}} increases in processor speeds and decreases in data storage costs will result in greater efficiency.|$|E
25|$|However, {{the main}} {{limitation}} of electron diffraction in TEM remains the comparatively {{high level of}} user interaction needed. Whereas both the execution of powder X-ray (and neutron) diffraction experiments and the data analysis are highly automated and routinely performed, electron diffraction requires a much higher level of <b>user</b> <b>input.</b>|$|E
25|$|The Gmail Labs feature, {{introduced}} on June 5, 2008, {{allows users}} to test new or experimental features of Gmail. Users can enable or disable Labs features selectively and provide feedback about each of them. This allows Gmail engineers to obtain <b>user</b> <b>input</b> about new features to improve them and also to assess their popularity.|$|E
5000|$|A {{pattern is}} {{a string of}} {{characters}} intended to match one or more <b>user</b> <b>inputs.</b> A literal pattern like ...|$|R
5000|$|<b>User</b> <b>inputs</b> {{their credit}} card info or another payment method if {{necessary}} (not necessary if the account has already been added) and validates payment ...|$|R
40|$|Abstract. This paper {{proposes a}} method for {{performing}} predictive simulation of complex cardiac surgery. It computes complex surgical results given {{a small amount of}} <b>user</b> <b>inputs.</b> In this way, the surgeon can easily explore various surgical options without having to go through all the detailed steps of the surgical procedure. Test results, using aorta reconstruction as an application example, show that the proposed method can generate realistic simulation results given different kinds of <b>user</b> <b>inputs,</b> thus demonstrating the feasibility of the approach...|$|R
25|$|As the JavaScript {{code was}} also {{processing}} <b>user</b> <b>input</b> and rendering {{it in the}} web page content, a new sub-class of reflected XSS attacks started to appear that was called DOM-based cross-site scripting. In a DOM-based XSS attack, the malicious data does not touch the web server. Rather, it is being reflected by the JavaScript code, fully on the client side.|$|E
25|$|Depending on its capabilities, {{the machine}} will require {{varying degrees of}} <b>user</b> <b>input</b> to read and sew {{embroidery}} designs. Sewing-embroidery machines generally have only one needle and require the user to change thread colors during the embroidery process. Multi-needle industrial machines are generally threaded prior to running the design and do not require re-threading. These machines require the user to input the correct color change sequence before beginning to embroider. Some can trim and change colors automatically.|$|E
25|$|The use of bourdon tube, diaphragm, {{and digital}} depth gauges may require {{adjustment}} for use at altitude. Capillary gauges {{have been shown}} to be a conservative method for measurement of compensated depth at altitude. Modern dive computers detect changes in altitude or accept it as a <b>user</b> <b>input</b> and automatically adjust their calculation of a safe decompression regime for a dive at that altitude. If an altitude-aware computer is not used, altitude decompression tables must be used.|$|E
50|$|M&C {{systems may}} receive data from sensors, {{telemetry}} streams, <b>user</b> <b>inputs,</b> and pre-programmed procedures. The software may send telecommands to actuators, computer systems, or other devices.|$|R
5000|$|A deliberative layer, which {{contains}} a task planner {{to generate a}} sequence of operations to reach a certain goal {{with respect to the}} <b>user's</b> <b>input</b> command.|$|R
5000|$|On-Demand Content Validation - Rather than validating as the <b>user</b> <b>inputs</b> content, {{this can}} happen at the user's {{discretion}} or when the content is 'checked in' ...|$|R
25|$|Historically XSS {{vulnerabilities}} {{were first}} found in applications that performed all data processing on the server side. <b>User</b> <b>input</b> (including an XSS vector) {{would be sent}} to the server, and then sent back to the user as a web page. The perceived need for an improved user experience resulted in popularity of applications that had a majority of the presentation logic (maybe written in JavaScript) working on the client-side that pulled data, on-demand, from the server using AJAX.|$|E
25|$|None of {{the current}} Raspberry Pi models have a {{built-in}} real-time clock, so {{they are unable to}} keep track of the time of day independently. As a workaround, a program running on the Pi can retrieve the time from a network time server or from <b>user</b> <b>input</b> at boot time, thus knowing the time while powered on. To provide consistency of time for the file system, the Pi does automatically save the time it has on shutdown, and re-installs that time at boot.|$|E
25|$|CPU-scavenging, cycle-scavenging, or shared {{computing}} {{creates a}} “grid” from the unused resources {{in a network}} of participants (whether worldwide or internal to an organization). Typically this technique uses a desktop computer instruction cycles {{that would otherwise be}} wasted at night, during lunch, or even in the scattered seconds throughout the day when the computer is waiting for <b>user</b> <b>input</b> on relatively fast devices. In practice, participating computers also donate some supporting amount of disk storage space, RAM, and network bandwidth, in addition to raw CPU power.|$|E
25|$|End {{effector}} displays {{can respond}} to <b>users</b> <b>inputs</b> with resistance and force. These systems are often used in medical applications for remote surgeries that employ robotic instruments.|$|R
40|$|We {{propose a}} deep {{learning}} approach for user-guided image colorization. The system directly maps a grayscale image, along with sparse, local user "hints" to an output colorization with a Convolutional Neural Network (CNN). Rather than using hand-defined rules, the network propagates user edits by fusing low-level cues along with high-level semantic information, learned from large-scale data. We train on a million images, with simulated <b>user</b> <b>inputs.</b> To guide the <b>user</b> towards efficient <b>input</b> selection, the system recommends likely colors {{based on the}} input image and current <b>user</b> <b>inputs.</b> The colorization is performed in a single feed-forward pass, enabling real-time use. Even with randomly simulated <b>user</b> <b>inputs,</b> we show that the proposed system helps novice users quickly create realistic colorizations, and offers large improvements in colorization quality with just a minute of use. In addition, we demonstrate that the framework can incorporate other user "hints" to the desired colorization, showing an application to color histogram transfer. Our code and models are available at [URL] Accepted to SIGGRAPH 2017. Project page: [URL]...|$|R
40|$|Abstract—Numerous {{software}} vulnerabilities can {{be activated}} only with dedicated <b>user</b> <b>inputs.</b> Taint analysis is a security check which consists {{in looking for}} possible dependency chains between <b>user</b> <b>inputs</b> and vulnerable statements (like array accesses). Most of the existing static taint analysis tools produce some warnings on potentially vulnerable program locations. It is then up to the developer to analyze these results by scanning the possible execution paths {{that may lead to}} these locations with unsecured <b>user</b> <b>inputs.</b> We present a Taint Dependency Sequences Calculus, based on a fine-grain data and control taint analysis, that aims to help the developer in this task by providing some information on the set of paths that need to be analyzed. Following some ideas introduced in [1], [2], we also propose some metrics to characterize these paths in term of “dangerousness”. This approach is illustrated {{with the help of the}} Verisec Suite [3] and by describing a prototype, called STAC. Keywords-static taint analysis; vulnerability detection; test objectives. I...|$|R
25|$|Much of the {{gameplay}} involves solving puzzles {{by using}} items with other items or with objects and characters onscreen. Another significant {{aspect of the}} game involves talking with characters in the game, namely the bots that work in the ship and a parrot, by inputting prompts in the Chat-O-Mat mode. Additionally to conversation with characters through interpreting of <b>user</b> <b>input,</b> the parser often provides hints or explanations that {{come in the form}} of pre-recorded speech, which can help the player in progressing in the game.|$|E
25|$|Modular {{arithmetic}} {{is often}} used to calculate checksums that are used within identifiers. International Standard Book Number (ISBN) uses modulo 11 (if issued before 1 January, 2007) or modulo 10 (if issued on or after 1 January, 2007) arithmetic for error detection. Likewise, International Bank Account Numbers (IBANs), for example, make use of modulo 97 arithmetic to trap <b>user</b> <b>input</b> errors in bank account numbers. In chemistry, the last digit of the CAS registry number (a number which is unique for each chemical compound) is a check digit, which is calculated by taking the last digit of the first two parts of the CAS registry number times 1, the previous digit times 2, the previous digit times 3 etc., adding all these up and computing the sum modulo 10.|$|E
25|$|Android's default user {{interface}} is mainly based on direct manipulation, using touch inputs that loosely correspond to real-world actions, like swiping, tapping, pinching, and reverse pinching to manipulate on-screen objects, {{along with a}} virtual keyboard. Game controllers and full-size physical keyboards are supported via Bluetooth or USB. The response to <b>user</b> <b>input</b> {{is designed to be}} immediate and provides a fluid touch interface, often using the vibration capabilities of the device to provide haptic feedback to the user. Internal hardware, such as accelerometers, gyroscopes and proximity sensors are used by some applications to respond to additional user actions, for example adjusting the screen from portrait to landscape depending on how the device is oriented, or allowing the user to steer a vehicle in a racing game by rotating the device, simulating control of a steering wheel.|$|E
50|$|Because ChatScript is {{designed}} for interactive conversation, it automatically maintains user state across volleys. A volley is any number of sentences the <b>user</b> <b>inputs</b> at once and the chatbots response.|$|R
50|$|The central {{component}} of any game, from a programming standpoint, {{is the game}} loop. The game loop allows the game to run smoothly regardless of a <b>user's</b> <b>input</b> or lack thereof.|$|R
50|$|Project Avata r {{allows users}} to {{customize}} their own avatar. Through Blockly programming language, <b>users</b> <b>input</b> different shapes on a virtual 2D work space, then arrange the shapes into a 3D avatar.|$|R
