0|10000|Public
40|$|Abstract. Based on {{a generic}} {{extensible}} data access framework (DAF) [10], we devised a domain-specific extension to support interoperability of Yawl workflow cases with hospital information systems (HIS). In the scenario considered, the HIS {{is the principal}} system that keeps master data and clinical data of the patient. Data transfer between HIS and the Yawl runtime environment is facilitated via exchange of standardized HL 7 messages. The solution presented supports read and write tasklevel synchronization of workflow variables <b>using</b> the patient’s <b>case</b> <b>ID</b> as correlation parameter. A first proof-of-concept {{has been carried out}} in a real clinical setting...|$|R
40|$|This paper {{discusses}} {{the challenges and}} possible policy options for the regulation of electronic identity (eIdentity). Policy-oriented literature has often focused on technological solutions, and while this interest is warranted, much less has been said on the regulatory challenges and possible solutions arising directly from developments in eIdentity. In this context, we distinguish five main challenges for policymakers: eIdentity as a new legal category, issues related to identity rights, changing role of governments, developments in the eIdentity industry, and proliferation of identity management systems. We analyse these five challenges as they apply to two <b>use</b> <b>cases,</b> Augmented <b>ID</b> and Pinch Analytics, which highlight some practical problems for consumers that have emerged {{as a result of}} new concepts of eIdentity. We conclude by discussing possible policy options such as driving the development of a single regulatory market, supporting the development of common standards, enhancing cross-border legislation, defining a clear incentive framework for companies, and uniformly implementing existing legislation. JRC. DDG. J. 4 -Information Societ...|$|R
40|$|Abstract. Event logs are {{invaluable}} {{sources of}} knowledge about the actual ex-ecution of processes. A large number of techniques to mine, check conformance and analyze performance have been developed based on logs. All these tech-niques require at least <b>case</b> <b>ID,</b> activity ID and the timestamp to be in the log. If one of those is missing, these techniques cannot be applied. Real life logs are rarely originating from a centrally orchestrated process execution. Thus, <b>case</b> <b>ID</b> might be missing, known as unlabeled log. This requires a manual preprocessing of the log to assign <b>case</b> <b>ID</b> to events in the log. In this paper, we propose a new approach to deduce <b>case</b> <b>ID</b> for the unlabeled event log depending on the knowledge about the process model. We provide set of labeled logs instead of a single labeled log with different rankings. We evaluate our prototypical implementation against similar approaches...|$|R
5000|$|Holders of {{passports}} (or {{in certain}} <b>cases</b> <b>ID</b> cards) {{of the following}} 78 jurisdictions can enter Albania without a visa for a maximum stay of 90 days (unless otherwise noted):1 - may enter using the national ID card/passport card/citizenship card/permanent ID card (except for Croatians).2 - citizens of these countries or territories staying for more than 90 days within the period of six months are required to obtain a type [...] "D" [...] visa.3 - countries whose citizens can enter without visas due to the [...] "visa liberalizationwith the Schengen area".4 - allowed to stay for 1 year without a visa.|$|R
5000|$|Matthews {{referred}} to Hrbacek as [...] "Mayor Osama" [...] and [...] "Dean Osama Hrbacek", {{a reference to}} terrorist, al-Qaida leader and suspected 9/11 mastermind Osama bin Laden. Columns attacking Hrbacek by both Mathews and {{the publisher of the}} paper, along with radio attacks, were made during the weeks before the May 2002 election campaign. Following the election, Hrbacek filed a lawsuit against Matthews and the newspaper publisher, B.K. Carter, over the comments, which claimed that the comments also damaged the reputation of Hrbacek's law firm. The lawsuit, filed in Fort Bend County District Court, <b>Case</b> <b>ID</b> 02-CV-127119, was dismissed.|$|R
50|$|The Wetsuit Case is {{the first}} waterproof, topless direct {{touchscreen}} smartphone <b>case</b> with Touch <b>ID</b> compatibility.|$|R
50|$|Steve Matheson, a {{developmental}} biologist at Calvin College (an {{institution of the}} Christian Reformed Church), wrote an analysis critical of the book. In a post on The Panda's Thumb, Richard Hoppe concluded that the book failed to make a strong <b>case</b> for <b>ID.</b>|$|R
40|$|Abstract Background The ideal {{screening}} test would {{be capable of}} identifying iron deficiency in the absence of anemia. We tried to detect role of urinary hepcidin- 25 level in early prediction of iron deficiency in children. Methods This is a case control study performed on 100 children in Hematology Unit of Pediatric Department, Zagazig University Hospital, Egypt. Our study included 25 cases of iron deficiency (ID) stage- 1 (iron depletion), 25 <b>cases</b> <b>ID</b> stage- 2 (iron-deficient erythropoiesis), 25 <b>cases</b> <b>ID</b> stage- 3 (iron deficiency anemia) and 25 healthy children as a control group. Estimation of iron status parameters was done. Urinary hepcidin- 25 level was detected. Results Urinary hepcidin- 25 level was significantly lower in all stages of iron deficiency than in control group, more significant reduction in its level was observed with the progress in severity of iron deficiency. Urinary hepcidin showed significant positive correlation with hemoglobin, mean corpuscular volume, hematocrit value, serum iron and ferritin and transferrin saturation. In contrary, it showed significant negative correlation with serum transferrin and total iron binding capacity. Urinary hepcidin at cutoff point ≤ 0. 94 nmol/mmol Cr could Predict ID stage- 1 with sensitivity 88 % and specificity 88 %. Cutoff point ≤ 0. 42 nmol/mmol Cr could predict ID stage- 2 with sensitivity 96 % and specificity 92 %. Cutoff point ≤ 0. 08 nmol/mmol Cr could Predict ID stage- 3 with Sensitivity 96 % and specificity 100 %. Conclusions We can conclude that detection of urinary hepcidin- 25 level was a simple and non invasive test and could predict iron deficiency very early, before appearance of hematological affections. </p...|$|R
40|$|Abstract. Existing process mining {{techniques}} {{are able to}} discover process models from event logs where each event {{is known to have}} been produced by a given process instance. In this paper we remove this restriction and address the problem of discovering the process model when the event log is provided as an unlabelled stream of events. Using a probabilistic approach, it is possible to estimate the model by means of an iterative Expectaction–Maximization procedure. The same procedure can be used to find the <b>case</b> <b>id</b> in unlabelled event logs. A series of experiments show how the proposed technique performs under varying conditions and in the presence of certain workflow patterns. Results are presented for a running example based on a technical support process. ...|$|R
40|$|The control-flow {{for five}} kinds of <b>use</b> <b>cases</b> is analysed: for common <b>use</b> <b>cases,</b> variant <b>use</b> <b>cases,</b> {{component}} <b>use</b> <b>cases,</b> specialised <b>use</b> <b>cases</b> and for ordered <b>use</b> <b>cases.</b> The control-flow semantics of <b>use</b> <b>cases</b> - {{and of the}} uses-relation, the extends-relation and the precedes-relation between <b>use</b> <b>cases</b> - is {{described in terms of}} flowgraphs. Sequence diagrams of <b>use</b> <b>cases</b> are refined to capture the control-flow adequately. Guidelines are given for <b>use</b> <b>case</b> descriptions to attain a well-defined flow of control...|$|R
40|$|Discussion of <b>use</b> <b>cases</b> and UML often {{focuses on}} the UML <b>use</b> <b>case</b> diagram. <b>Use</b> <b>case</b> {{diagrams}} are contrasted (usually unfavorably) with text <b>use</b> <b>cases.</b> But specification of <b>use</b> <b>cases</b> with UML {{is not limited to}} the <b>use</b> <b>case</b> diagram. In fact UML 2 includes a variety of expressive techniques for specifying a <b>use</b> <b>case.</b> This article looks at UML <b>use</b> <b>cases</b> from the ODP viewpoint, and describes UML <b>use</b> <b>case</b> specification techniques in ODP terms. ...|$|R
40|$|Abstract 1 The control-flow {{for five}} kinds of <b>use</b> <b>cases</b> is analysed: for common <b>use</b> <b>cases,</b> variant <b>use</b> <b>cases,</b> {{component}} <b>use</b> <b>cases,</b> specialised <b>use</b> <b>cases</b> and for ordered <b>use</b> <b>cases.</b> The control-flow semantics of <b>use</b> <b>cases</b> – {{and of the}} uses-relation, the extends-relation and the precedes-relation between use cases- is {{described in terms of}} flowgraphs. Sequence diagrams of <b>use</b> <b>cases</b> are refined to capture the control-flow adequately. Guidelines are given for <b>use</b> <b>case</b> de-scriptions to attain a well-defined flow of control...|$|R
30|$|Advice use case: The <b>use</b> <b>case</b> {{template}} {{describes the}} variabilities as advice <b>use</b> <b>cases.</b> The advice <b>use</b> <b>cases</b> capture crosscutting requirements and are {{defined in the}} same form as normal <b>use</b> <b>cases,</b> but they may only {{have some of the}} <b>use</b> <b>case</b> sections. The linking of advice <b>use</b> <b>cases</b> with affected base <b>use</b> <b>cases</b> is based on syntactical matching of joinpoints and pointcut expressions.|$|R
30|$|Anthonysamy and Somé (2008) propose an aspect-oriented <b>use</b> <b>cases</b> {{modelling}} {{approach to}} model product line systems that {{is supported by}} a tool called <b>Use</b> <b>Case</b> Editor (UCEd). In this approach, the variabilities can be modeled by advice <b>use</b> <b>cases</b> that extend the behavior of base <b>use</b> <b>cases.</b> These advice <b>use</b> <b>cases</b> are defined {{in the same way as}} normal <b>use</b> <b>cases,</b> but they may only have some of the <b>use</b> <b>case</b> sections.|$|R
40|$|The {{ability to}} express {{sequencing}} constraints {{is critical to}} <b>use</b> <b>case</b> based software development. These constraints are needed to effectively compose <b>use</b> <b>case</b> behavior and support verification and validation activities such as simulation and testing. In this paper, we consider the addition of <b>use</b> <b>case</b> description elements to explicitly express sequencing constraints between <b>use</b> <b>cases.</b> We introduce two complementary constructs. One allows to specify which <b>use</b> <b>cases</b> need to precede a <b>use</b> <b>case</b> and how these preceding <b>use</b> <b>cases</b> are synchronized. The second construct allows to specify which <b>use</b> <b>cases</b> are enabled from a <b>use</b> <b>case</b> and how these <b>use</b> <b>cases</b> execute concurrently. We relate the introduced elements to UML activity diagrams and implicit sequencing based on preconditions and postconditions. 1...|$|R
40|$|A <b>Use</b> <b>Case</b> is a {{specification}} of interactions involving a system and external actors of that system. The intuitive, user centered nature of textual <b>use</b> <b>cases</b> {{is one of}} the reasons for the success of the <b>use</b> <b>case</b> approach. A certain level of formalization is however needed to automate <b>use</b> <b>case</b> based system development, including tasks such as model synthesis, verification and validation. In this paper, a formalization of textual <b>use</b> <b>cases</b> is proposed. At the syntactic-level, an UML metamodel and a restricted-form of natural language are defined for <b>use</b> <b>case</b> description. <b>Use</b> <b>cases</b> execution semantics are proposed as a set of Mapping Rules from well-formed <b>use</b> <b>cases</b> to Basic Petri nets. The semantics consider <b>use</b> <b>cases</b> sequencing constraints defined at the syntactic-level. The proposed formalization serves as a basis for state-model synthesis from <b>use</b> <b>cases.</b> UML activity diagrams are generated to capture <b>use</b> <b>cases</b> sequencing and UML StateCharts to capture event flows within <b>use</b> <b>cases...</b>|$|R
40|$|<b>Use</b> <b>cases</b> are {{promising}} vehicles for specifying requirements. However, obtaining well-organized <b>use</b> <b>case</b> models is difficult during software evolution. The thesis proposes {{to address the}} issue by refactoring <b>use</b> <b>case</b> models. Refactoring is a program transformation approach for iterative software development. Its concept is introduced to <b>use</b> <b>case</b> models in Cascaded Refactoring. The thesis introduces major research involved in refactoring <b>use</b> <b>case</b> models. It defines a <b>use</b> <b>case</b> metamodel to formalize <b>use</b> <b>cases.</b> The three-level metamodel covers the environment or context of a <b>use</b> <b>case</b> model, the structure of <b>use</b> <b>cases</b> in terms of episodes, and the event or message passing details of a scenario. The thesis presents a process algebra semantics for the <b>use</b> <b>case</b> model. The episode semantics is provided from the literature. The semantics of a single <b>use</b> <b>case</b> is defined in terms of the episode model. The semantics of the <b>use</b> <b>case</b> model is defined in terms of the individual <b>use</b> <b>cases</b> and their relationships. The thesis identifies a list of properties that need to be preserved during refactoring. It defines fifty-three <b>use</b> <b>case</b> refactorings, which are described using a template covering the refactoring description, arguments, preconditions, postconditions and verification of behavior preservation. The thesis also introduces a tool for <b>use</b> <b>case</b> modeling and refactoring. The tool helps validate the <b>use</b> <b>case</b> metamodel and refactorings on two case studies, which demonstrate that refactoring <b>use</b> <b>case</b> models is feasible and practical. Based on these case studies, the thesis discusses the nature of <b>use</b> <b>case</b> evolution and provides some guidelines for the refactoring process...|$|R
5000|$|<b>Use</b> <b>case</b> {{developers}} {{often find}} it difficult to determine the level of user interface (UI) dependency to incorporate in a <b>use</b> <b>case.</b> While <b>use</b> <b>case</b> theory suggests that UI not be reflected in <b>use</b> <b>cases,</b> it can be awkward to abstract out this aspect of design, as it makes the <b>use</b> <b>cases</b> difficult to visualize. In software engineering, this difficulty is resolved by applying requirements traceability, for example with a traceability matrix. Another approach to associate UI elements with <b>use</b> <b>cases,</b> is to attach a UI design to each step in the <b>use</b> <b>case.</b> This is called a <b>use</b> <b>case</b> storyboard.|$|R
40|$|Abstract. In general, {{diagrams}} {{and text}} are both {{considered to have}} their advantages and disadvantages for the representation of <b>use</b> <b>case</b> models, but this is rarely investigated experimentally. This paper describes a controlled experiment where we compare safety hazard identification by means of misuse <b>cases</b> based on <b>use</b> <b>case</b> diagrams and textual <b>use</b> <b>cases.</b> The experiment participants found <b>use</b> <b>case</b> diagrams and textual <b>use</b> <b>cases</b> equally easy to <b>use.</b> In most <b>cases</b> those who <b>used</b> textual <b>use</b> <b>cases</b> {{were able to identify}} more failure modes or threats. The main reason for this seems to be that <b>use</b> <b>cases</b> encourage analysts to specifically focus on threats related to the functions mentioned in the <b>use</b> <b>case,</b> and textual <b>use</b> <b>cases</b> include more functional details than diagrams. The focus is decided by information in each <b>use</b> <b>case</b> which will thus decide the number of threats identified...|$|R
50|$|A <b>use</b> <b>case</b> {{controller}} {{should be}} used to deal with all system events of a <b>use</b> <b>case,</b> and may be used for more than one <b>use</b> <b>case</b> (for instance, for <b>use</b> <b>cases</b> Create User and Delete User, one can have a single UserController, instead of two separate <b>use</b> <b>case</b> controllers).|$|R
40|$|UML and <b>use</b> <b>case</b> {{modeling}} {{have the}} last few years received much attention. <b>Use</b> <b>cases</b> are <b>used</b> to describe the functional requirements of a system and a <b>use</b> <b>case</b> diagram shows the relationships among <b>use</b> <b>cases</b> and actors within a system. The semantics of <b>use</b> <b>case</b> diagrams are, however, often unclear. The aim of this dissertation is to point out ambiguities and limited expressiveness present in the current <b>use</b> <b>case</b> notation of UML and to indicate in which directions remedies to these deficiencies may be sought. Problems reported by researchers were identified and presented to a set of <b>use</b> <b>case</b> practitioners. Then a proposal of possible improvements of the <b>use</b> <b>case</b> notation, which should reduce the ambiguities and increase the expressiveness in the notation, was developed. To place some measurements on the value the proposal can have in practice, it was also presented to a set of practitioners. The proposal provides a suggestion of how to model various tricky situations in a <b>use</b> <b>case</b> diagram. Furthermore, the dissertation gives insight on how the <b>use</b> <b>case</b> technique is <b>used</b> in practice. Practitioners argue that the <b>use</b> <b>case</b> specifications are more important than the <b>use</b> <b>case</b> diagrams. They also argue that the purpose of <b>use</b> <b>case</b> diagrams is to describe a system's main functionalities and not details, and that as few <b>use</b> <b>case</b> relationships as possible should be <b>used</b> in <b>use</b> <b>case</b> diagrams...|$|R
40|$|Key words: reuse, {{software}} evolution, <b>use</b> <b>case,</b> refactoring tool Abstract: <b>Use</b> <b>cases</b> {{are widely}} <b>used</b> in software engineering. It {{is important to}} improve the understandability and maintainability of <b>use</b> <b>case</b> models. We propose the approach of refactoring <b>use</b> <b>case</b> models. This paper describes a prototype tool for the refactoring process. We introduce the <b>use</b> <b>case</b> metamodel and its XML document type definition (DTD) used in the tool. Based on the Drawlets framework, we implement the functionality for drawing and viewing <b>use</b> <b>case</b> models. We propose the refactoring framework and implement some <b>use</b> <b>case</b> refactorings. Our experience shows that the tool greatly facilitates the process to reorganize <b>use</b> <b>case</b> models. ...|$|R
40|$|<b>Use</b> <b>Cases</b> that {{describe}} possible interactions involving a {{system and its}} environment are increasingly being accepted as effective means for requirements elicitation and analysis. In the current practice, informal definitions of <b>use</b> <b>cases</b> are <b>used</b> and the analysis process is manual. We present UCEd an environment for <b>use</b> <b>cases</b> based requirements engineering. UCEd includes tools for <b>use</b> <b>cases</b> edition {{in conjunction with a}} domain model, <b>use</b> <b>cases</b> integration and <b>use</b> <b>cases</b> simulation. 1...|$|R
40|$|In this lecture {{we cover}} how UML <b>Use</b> <b>Cases</b> can be <b>used</b> for {{requirements}} capture. We {{look at the}} anatomy of a <b>Use</b> <b>Case</b> Description, {{and the way in}} which <b>use</b> <b>cases</b> can be brought together in a <b>use</b> <b>case</b> diagram. We also look at the way that <b>use</b> <b>cases</b> can be derived from problems using noun verb analysis...|$|R
5000|$|To {{calculate}} the UUCW, the <b>use</b> <b>cases</b> must be defined {{and the number}} of transactions for each <b>use</b> <b>case</b> identified. The Online Shopping System <b>use</b> <b>case</b> diagram is depicting that nine <b>use</b> <b>cases</b> exist for the system. Assuming 2 of these <b>use</b> <b>cases</b> are simple, 3 are average and 4 are complex, the calculation for UUCW is as follows: ...|$|R
3000|$|<b>Use</b> <b>Case</b> Specification - In the <b>use</b> <b>case</b> specification, {{the team}} {{described}} the <b>use</b> <b>cases</b> considering the different execution flows; [...]...|$|R
40|$|Abstract. Correctly written <b>use</b> <b>cases</b> {{can be an}} {{important}} artifact for describing how a software system should behave. <b>Use</b> <b>cases</b> should be informal enough to permit anyone in a software project to understand them, in particular the customer (often lacking a formal background). One consequence of adopting <b>use</b> <b>cases</b> to, for example, MDA (Model Driven Architecture) can be an increasing level of formalism, which can severely limit understanding of <b>use</b> <b>cases.</b> Also, too few guidelines for how to write <b>use</b> <b>cases</b> make them both hard to write and understand. Finding the right level of formalism is the topic of this paper. We suggest a new way of writing the action steps of <b>use</b> <b>cases</b> by introducing action blocks. The introduction of action blocks makes <b>use</b> <b>cases</b> more formal, but still understandable. In addition, action blocks supports the creation of contracts for system operations. In this paper we also argue that treating system operations as <b>use</b> <b>cases</b> is a misuse of <b>use</b> <b>cases</b> system operations and <b>use</b> <b>cases</b> should be separate artifacts. One should be able to obtain several system operations from a <b>use</b> <b>case,</b> otherwise there is no dialog (process) between actors and <b>use</b> <b>cases.</b> We believe that having a clear distinction between <b>use</b> <b>cases</b> and contracts will improve the quality of both...|$|R
3000|$|Step identifier: The <b>use</b> <b>case</b> {{template}} <b>uses</b> {{the step}} identifier of the <b>use</b> <b>case</b> to describe variants in <b>use</b> <b>case</b> scenarios; [...]...|$|R
40|$|This {{report is}} the first {{one of a series of}} reports {{establishing}} different <b>use</b> <b>cases.</b> Thus, this report is divided into a first section that outlines the methodology on how different <b>use</b> <b>cases</b> are established and a second part that describes some first initial <b>use</b> <b>cases.</b> All <b>use</b> <b>cases</b> will go through a consolidation process. Further <b>use</b> <b>cases</b> will emerge during the lifetime of the project and existing <b>use</b> <b>cases</b> will be amplified by different methods...|$|R
40|$|This paper {{describes}} how refactoring {{as a concept}} can be broadened to apply to <b>use</b> <b>case</b> models. A metamodel for <b>use</b> <b>case</b> modeling is described in detail, which represents our perspec- tive on <b>use</b> <b>case</b> formalization. This metamodel allows us to define several categories of <b>use</b> <b>case</b> refactorings that help us discover and organize <b>use</b> <b>case</b> refactorings. A list of current refactorings is given. Finally, we illustrate the concept of <b>use</b> <b>case</b> refactorings with a simple example...|$|R
50|$|<b>Use</b> <b>case</b> {{analysis}} usually starts {{by drawing}} <b>use</b> <b>case</b> diagrams. For agile development, a requirement model of many UML diagrams depicting <b>use</b> <b>cases</b> plus some textual descriptions, notes or <b>use</b> <b>case</b> briefs {{would be very}} lightweight and just enough for small or easy project use. As good complements to <b>use</b> <b>case</b> texts, the visual diagram representations of <b>use</b> <b>cases</b> are also effective facilitating tools for the better understanding, communication and design of complex system behavioral requirements.|$|R
40|$|<b>Use</b> <b>case</b> models {{capture and}} {{describe}} the functional requirements of a software system. A <b>use</b> <b>case</b> driven development process, where a <b>use</b> <b>case</b> model is the principal basis for constructing an object-oriented design, is recommended when applying UML. There are, however, some problems with <b>use</b> <b>case</b> driven development processes and alternative ways of applying a <b>use</b> <b>case</b> model have been proposed. One alternative is to apply the <b>use</b> <b>case</b> model in a responsibility-driven process {{as a means to}} validate the design model. We wish to study how a <b>use</b> <b>case</b> model best can be applied in an object-oriented development process and have conducted a pilot experiment with 26 students as subjects to compare a <b>use</b> <b>case</b> driven process against...|$|R
40|$|Abstract. <b>Use</b> <b>Cases</b> have {{achieved}} wide {{use as a}} specification tool for observable behavior of systems. However, {{there is still much}} controversy, inconsistent use, and free-flowing interpretations of <b>use</b> <b>case</b> models, in fact, not even experts widely recognized in the community agree on the semantics of concepts. Consequently, <b>use</b> <b>case</b> models are dangerously ambiguous, and there is an unnecessary divergence of practice. The purpose of the workshop was to identify and characterize some sources of ambiguity. It gathered specialists from academia and industry involved in modeling <b>use</b> <b>cases</b> to exchange ideas and proposals, with an eye to both clear definition and practical application. Some presented topics were discussed in-depth (the UML metamodel for <b>use</b> <b>cases,</b> <b>use</b> <b>case</b> instances, <b>use</b> <b>cases</b> in MDD/MDA, <b>use</b> <b>case</b> model vs. conceptual model, and tools for <b>use</b> <b>cases</b> specification), while others were left as open issues for future research. We hope our suggestions will be useful to improve the metamodel of <b>use</b> <b>cases,</b> and stimulate further research to reach a stronger coupling between the <b>use</b> <b>case</b> model and other static, behavioral and architectural models. ...|$|R
40|$|<b>Use</b> <b>Cases</b> that {{describe}} possible interactions involving a {{system and its}} environment are increasingly being accepted as effective means for functional requirements elicitation and analysis. In the current practice, informal definitions of <b>use</b> <b>cases</b> are <b>used</b> and the analysis process is manual. In this paper, we present an approach supported by a tool for <b>use</b> <b>cases</b> based requirements engineering. Our approach includes <b>use</b> <b>cases</b> formalization, a restricted form of natural language for <b>use</b> <b>cases</b> description, and the derivation of an executable specification {{as well as a}} simulation environment from <b>use</b> <b>cases.</b> Key words: <b>Use</b> <b>cases,</b> domain modeling, UML, requirements engineering, prototypin...|$|R
40|$|<b>Use</b> <b>case</b> driven {{approach}} is a method of object oriented software engineering (OOSE) developed by Jacobson et al (1992). The requirement model of the <b>use</b> <b>case</b> driven approach software system is defined by a collection of <b>use</b> <b>cases,</b> problem domain descriptions and user interfaces. Extension is an important type of association between <b>use</b> <b>cases.</b> Extension means that a <b>use</b> <b>case</b> that represents the major or basic course of events can be naturally extended with one or several other <b>use</b> <b>cases</b> that represent rare or exceptional courses of events. A difficulty for OOSE to transform the <b>use</b> <b>cases</b> with extension associations into the design and implementation model {{of the system is}} that most programming Languages, such as C++, Smalltalk and Java, do not have features to support the extension association. The current implementation of an extension association still relies on the basic course <b>use</b> <b>case</b> to initiate the extension <b>use</b> <b>cases.</b> This thesis presents a programming technique to overcome the difficulty described above. It supports the integration of a major course <b>use</b> <b>case</b> and its extension <b>use</b> <b>cases.</b> Based on this technique, a mechanism extension construct invocation is proposed to directly support the extension association between <b>use</b> <b>cases.</b> The extension statement and probing clause allow an extension <b>use</b> <b>case</b> to automatically respond to any extension request from a basic course <b>use</b> <b>case.</b> This mechanism reduces the responsibility of a method that represents a basic course <b>use</b> <b>case</b> with extension statements. The probing clause added to a method that represents an extension <b>use</b> <b>case</b> can automatically respond to any extension request from a basic course <b>use</b> <b>case.</b> Paper copy at Leddy Library: Theses 2 ̆ 6 Major Papers - Basement, West Bldg. / Call Number: Thesis 1998. A 5. Source: Masters Abstracts International, Volume: 39 - 02, page: 0523. Adviser: Liwu Li. Thesis (M. Sc.) [...] University of Windsor (Canada), 1998...|$|R
40|$|Abstract—Use case {{refactoring}} {{is one of}} {{the recent}} software engineering techniques that aimed at synthesising and refining <b>use</b> <b>case</b> models. Two new types of <b>use</b> <b>case</b> refactoring are proposed in this paper. First, behavioural refactorings aimed at synthesising the presentation and understanding of the described services. Second, structural refactorings aimed at refining and simplifying the different relationships between the following pairs: (1) concrete and abstract <b>use</b> <b>cases,</b> and (2) <b>use</b> <b>cases</b> and actors. The application of the proposed refactorings on a real <b>use</b> <b>case</b> model showed that the advantages of <b>use</b> <b>case</b> refactorings are not limited to the target <b>use</b> <b>case</b> models only, but on their relationsips with other software engineering artefacts. These include the facilitation of the extraction and utilisation of (1) <b>use</b> <b>case</b> patterns, (2) software metrics, and (3) software cost estimates from <b>use</b> <b>case</b> models. Further work is being carried out to automate the process of <b>use</b> <b>case</b> refactoring and integrate it with the underlying software development process...|$|R
