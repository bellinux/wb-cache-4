4|77|Public
5000|$|... #Caption: An <b>update</b> <b>anomaly.</b> Employee 519 {{is shown}} as having {{different}} addresses on different records.|$|E
5000|$|<b>Update</b> <b>anomaly.</b> The same {{information}} can be expressed on multiple rows; therefore updates to the relation may result in logical inconsistencies. For example, each record in an [...] "Employees' Skills" [...] relation might contain an Employee ID, Employee Address, and Skill; thus a change of address for a particular employee {{may need to be}} applied to multiple records (one for each skill). If the update is only partially successful - the employee's address is updated on some records but not others - then the relation is left in an inconsistent state. Specifically, the relation provides conflicting answers {{to the question of what}} this particular employee's address is. This phenomenon is known as an <b>update</b> <b>anomaly.</b>|$|E
40|$|Copy-Paste-Change (CPC) [1] is a {{framework}} for copy and paste clone 1 tracking and <b>update</b> <b>anomaly</b> 2 warnings within the Eclipse IDE. CPC represents the first step towards an integrated and feature rich clone tracking environment which increases the general awareness of clones in a software system and provides notifications and warnings about potential clone related errors. It is our hope that CPC will provide in-depth data about the day to day copy and paste habits of pro-grammers in real environments which can help to im-prove our overall understanding of the ‘Micro-process of Software Development’, the small day to day ac-tivities of a developer. CPC is written in Java 1. 5 and is licensed un-der the GPL. It can be obtained fro...|$|E
50|$|<b>Update</b> <b>anomalies</b> cannot {{occur in}} these tables, because unlike before, Winner {{is now a}} primary key in the second table, thus {{allowing}} only one value for Date of Birth for each Winner.|$|R
40|$|This paper takes a {{first step}} towards the design and {{normalization}} theory for XML documents. We show that, like relational databases, XML documents may contain redundant information, and may be prone to <b>update</b> <b>anomalies.</b> Furthermore, such problems are caused by certain functional dependencies among paths in the document. Our goal {{is to find a}} way of converting an arbitrary DTD into a well-designed one, that avoids these problems. We first introduce the concept of a functional dependency for XML, and define its semantics via a relational representation of XML. We then define an XML normal form, XNF, that avoids <b>update</b> <b>anomalies</b> and redundancies. We study its properties and show that it generalizes BCNF and a normal form for nested relations when those are appropriately coded as XML documents. Finally, we present a lossless algorithm for converting any DTD into one in XNF...|$|R
40|$|This paper takes a rst {{step towards}} {{the design and}} {{normalization}} theory for XML documents. We show that, like relational databases, XML documents may contain redundant information, and may be prone to <b>update</b> <b>anomalies.</b> Furthermore, such problems are caused by certain functional dependencies among paths in the document. Our goal is to nd a way of converting an arbitrary DTD into a well-designed one, that avoids these problems. We rst introduce {{the concept of a}} functional dependency for XML, and de ne its semantics via a relational representation of XML. We then de ne an XML normal form, XNF, that avoids <b>update</b> <b>anomalies</b> and redundancies. We study its properties and show that it generalizes BCNF and a normal form for nested relations called NNF-FD when those are appropriately coded as XML documents. Finally, we present a lossless algorithm for converting any DTD into one in XN...|$|R
40|$|JSON (JavaScript Object Notation) is a {{lightweight}} data-interchange format for the Internet. JSON {{is built on}} two structures: (1) a collection of name/value pairs and (2) an ordered list of values ([URL] Because of this simple approach, JSON is {{easy to use and}} {{it has the potential to}} be the data interchange format of choice for the Internet. Similar to XML, JSON schemas allow nested structures to model hierarchical data. As data interchange over the Internet increases exponentially due to cloud computing or otherwise, redundancy free JSON data are an attractive form of communication because they improve the quality of data communication through eliminating <b>update</b> <b>anomaly.</b> Nested Normal Form, a normal form for hierarchical data, is a precise characterization of redundancy. A nested table, or a hierarchical schema, is in Nested Normal Form if and only if it is free of redundancy caused by multivalued and functional dependencies. Using Nested Normal Form as a guide, this paper introduces a JSON schema design methodology that begins with UML use case diagrams, communication diagrams and class diagrams that model a system under study. Based on the use cases’ execution frequencies and the data passed between involved parties in the communication diagrams, the proposed methodology selects classes from the class diagrams to be the roots of JSON scheme trees and repeatedly adds classes from the class diagram to the scheme trees as long as the schemas satisfy Nested Normal Form. This process continues until all of the classes in the class diagram have been added to some JSON scheme trees...|$|E
40|$|Semistructured data is {{becoming}} increasingly important for web applications {{with the development of}} XML and related technologies. Designing a "good" semistructured database is crucial to prevent data redundancy, inconsistency and undesirable <b>updating</b> <b>anomalies.</b> However, unlike relational databases, there is no normalization theory to facilitate the design of good semistructured databases. In this paper, we introduce the notion of a semistructured schema and identify the various anomalies that may occur in such a schema. A Normal Form for Semistructured Schemata, NF-SS, is proposed. A semistructured schema in NF-SS guarantees minimal redundancy and hence no undesirable <b>updating</b> <b>anomalies</b> for the associated semistructured databases. Furthermore, a semistructured schema in NF-SS gives a more reasonable representation of real world semantics. We develop an iterative algorithm based on a set of heuristic rules to restructure a semistructured schema into a normal form. These design methods also provide insights into the normalization task for semistructured databases...|$|R
40|$|Modern {{database}} schemata {{are often}} large and complex, {{and a single}} user typically is afforded only limited access through a window, known as a view. The problem of supporting updates systematically through such views {{has long been known}} to be a difficult problem. Traditionally, the approach has been to limit the allowed updates to those which avoid or substantially limit so-called <b>update</b> <b>anomalies...</b>|$|R
40|$|In {{this paper}} we first survey various {{examples}} for anomalies {{given in the}} literature [1, 3, 8]. We discuss the formalizations and relate them {{to each other and}} the examples. We give arguments that show that decomposition of a relation scheme can help in getting rid of deletion/insertion anomalies and can fail in getting rid of <b>update</b> <b>anomalies</b> in the decomposed case...|$|R
40|$|Semistructured {{data has}} become {{prevalent}} {{with the growth}} of the Internet. The data is usually stored in a database system or in a specialized repository. Many information providers have presented their databases on the web as semistructured data, while others are developing repositories for new applications. Designing a "good" semistructured database is important to prevent data redundancy and <b>updating</b> <b>anomalies...</b>|$|R
40|$|Abstract. Specifications of XML {{documents}} typically {{consist of}} typing information (e. g., a DTD), and integrity constraints. Just like relational schema specifications, not all are good – some {{are prone to}} redundancies and <b>update</b> <b>anomalies.</b> In the relational world we have a well-developed theory of data design (also known as normalization). A few definitions of XML normal forms have been proposed, but the main question is why a particular design is good. In the XML world, we still lack universally accepted query languages such as relational algebra, or update languages that let us reason about storage redundancies, lossless decompositions, and <b>update</b> <b>anomalies.</b> A better approach, therefore, is {{to come up with}} notions of good design based on the intrinsic properties of the model itself. We present such an approach, based on Shannon’s information theory, and show how it applies to relational normal forms as well as to XML design, for both native and relational storage. ...|$|R
40|$|Functional {{dependencies}} (FDs) {{and inclusion}} dependencies (INDs) {{are the most}} fundamental integrity constraints that arise in practice in relational databases. In this paper we {{address the issue of}} normalisation in the presence of FDs and INDs and in particular the semantic justification for Inclusion Dependency Normal Form (IDNF), a normal form which combines Boyce-Codd normal form with the restriction on the INDs that they be noncircular and keybased. We motivate and formalise three goals of database design in the presence of FDs and INDs: non interaction between FDs and INDs, elimination of redundancy and <b>update</b> <b>anomalies,</b> and preservation of entity integrity. We show that, as for FDs, in the presence of INDs being free of redundancy is equivalent to being free of <b>update</b> <b>anomalies.</b> Then, for each of these properties we derive equivalent syntactic conditions on the database design. Individually, each of these syntactic conditions is weaker than IDNF and the restriction that an FD not [...] ...|$|R
40|$|Semistructured {{data has}} become {{prevalent}} {{with the growth}} of the Internet. The development of new web applications that require efficient design and maintenance of large amounts of data makes it increasingly important to design "good" semistructured databases to prevent data redundancy and <b>updating</b> <b>anomalies.</b> However, it is not easy, even impossible, for current semistructured data models to capture the semantics traditionally needed for designing databases. In this paper, we show how an Object-Relationship-Attribute model for SemStructured data (ORA-SS) can facilitate the design of "good" semistructured databases. This is accomplished via the normalization of ORA-SS. An XML DTD or Schema generated from a normal form ORA-SS schema diagram has no undesirable redundancy, and thus no <b>updating</b> <b>anomalies</b> for the complying semistructured databases. The general design methodology and detailed steps for converting an ORA-SS schema diagram into a normal form ORA-SS schema diagram are presented. These steps can also be used as guidelines for designing semistructured databases using the ORA-SS model...|$|R
5000|$|A {{complex data}} model can involve {{hundreds}} of related tables. A renowned computer scientist, Edgar F. Codd, created a systematic method to decompose and organize relational databases. Codd's steps for organizing database tables and their keys is called database normalization, which avoids certain hidden database design errors (delete <b>anomalies</b> or <b>update</b> <b>anomalies).</b> In real life {{the process of}} database normalization ends up breaking tables into {{a larger number of}} smaller tables.|$|R
40|$|In {{the present}} Database World, the {{effectiveness}} of query processing and query optimization on any database is based on how the data redundancy is controlled and getting rid of different kind of <b>update</b> <b>anomalies</b> in other to minimize resource usage. That is, trying to reduce the total execution time of the query. This work considered a typical herbarium databse. It is established that the query time for the normalized relation {{is less than the}} un-normalized relation...|$|R
40|$|In {{this paper}} we study {{the problem of}} schema design and {{normalization}} in XML databases model. We show that, like relational databases, XML documents may contain redundant information, and this redundancy may cause <b>update</b> <b>anomalies.</b> Furthermore, such problems are caused by certain functional dependencies among paths in the document. Based on our research works, in which we presented the functional dependencies and normal forms of XML Schema, we present the decomposition algorithm for converting any XML Schema into normalized one, that satisfies X-BCNF...|$|R
40|$|Abstract: Normalization and {{functional}} dependency are most fundamental part in relational database. The normalization rules {{are designed to}} prevent <b>update</b> <b>anomalies</b> and data inconsistencies. The normal form defines in relation database theory represent the guidelines for record design. The guidelines corresponding to first through fifth normal form are presented. Normalization process depends on the single analytical tool called as functional dependency. The concept of functional dependency is useful in design and analysis of relational database. By applying the functional dependencies to relational database we can represent the relation in various normal forms...|$|R
40|$|The {{management}} of the integrity of intelligent systems relies on techniques to integrate the components and to manage {{the integrity of the}} knowledge-based systems components. A unified methodology integrates knowledge-based systems components with database components. Constraints are used to manage the integrity of knowledge. One class of knowledge constraints protect the integrity of knowledge bases during maintenance by preventing the introduction of <b>update</b> <b>anomalies.</b> Another class of knowledge constraints contributes to the efficiency of the maintenance procedure. The efficiency of the maintenance procedure is increased further if the knowledge in the knowledge base has been normalised...|$|R
40|$|Abstract: Many {{methods for}} mapping XML to {{relations}} {{have been proposed}} without considering the semantics of XML data before. But the semantics {{is very important to}} design schemas for storage, optimize queries, and check <b>update</b> <b>anomalies,</b> etc. In the presence of XML FDs which are specified over DTDs, this paper presents a method based on the hybrid inlining to map XML to relations for storage. The constraints which are represented by FDs, as well as the content and the structure, are preserved at the same time. Much storage redundancy can be reduced through using this method. Furthermore, this paper proves that those relations mapped from XML are all in Third Normal Form (3 NF) ...|$|R
40|$|Designing a well-structured XML {{document}} {{is important for}} the sake of readability and maint ainabilit y. More importantly, this will avoid data redundancies and <b>update</b> <b>anomalies</b> when maintaining a large quantity of XML based documents. In this paper, we propose a method to improve XML structural design by adopting graphical notations for Document Type Definitions (GN-DTD), which is used to describe the structure of an XML document at the schema level. Multiples levels of normal forms for GN-DTD are proposed on the basis of conceptual model approaches and theories of normalization. The normalization rules are applied to transform a poorly designed XML document into a well- designed based on normalized GN-DTD, which is illustrated through examples...|$|R
40|$|The current schema design {{theories}} {{assume that}} a database may {{be regarded as a}} single relation. From the practical point of view, this is hardly acceptable. However, if a relation is allowed to have unspecified items, any database can be represented as a partial relation. Since the normalization theory is defined with respect to relations, it needs to be extended so that it may become applicable to partial relations. As extensions of dependencies, natural dependencies are defined. They are axiomatized, and the set of axioms is proved its completeness. The schema design based on natural dependencies solves not only the problems caused by a universal relation assumption but also the <b>update</b> <b>anomalies</b> caused by decomposition of a database...|$|R
40|$|In this dissertation, {{we take a}} {{first step}} towards the design and {{normalization}} theory for XML documents. We start by noticing that while in the relational world the criteria for being well designed are very intuitive, they become more obscure when one moves to XML. Thus, our first contribution {{is to provide a}} tool for testing when a condition on a database design, specified as a normal form, corresponds to a good design. We use techniques of information theory, and define a measure of information content of elements in a database with respect to a set of constraints. This measure can be used in different data models, in particular, we use it in the relational model to provide information-theoretic justification for well-known normal forms and for normalization algorithms. As our second contribution we introduce languages for XML data dependencies, that will be used later as the source of semantic information in the design of XML databases. Since inconsistent XML specifications may arise in practice because of the interaction be-tween these dependencies and the constraint imposed by XML schemas (DTDs), our next contribution is to pinpoint the complexity of checking consistency of XML specifications. We then show that XML documents may contain redundant information, and may be prone to <b>update</b> <b>anomalies.</b> Thus, our final contribution is to define an XML normal form, XNF, that avoids <b>update</b> <b>anomalies</b> and redundancies. We study its properties, and show that it generalizes BCNF and that it can be justified by our information-theoretic measure. We present an algorithm for converting any XML schema into an equivalent one in XNF, and we use our information-theoretic measure to justify this algorithm. ii...|$|R
40|$|Code clones convey {{important}} {{information about a}} software system’s design and implementation. Several tools have been proposed to detect code clones. However, mostly the focus {{so far has been}} on fragments of duplicated code. In our studies, we observed that certain configurations of duplicated code fragments may signify some higher level patterns of similarities (usually, the result of cloning design solutions). Such higher level similarities often represented some domain or design concepts, comprising much bigger parts of a program (e. g., patterns of collaborating components) than just code fragments. Recognizing higher level similarities can have significant value for program understanding, evolution (by reducing the risk of <b>update</b> <b>anomalies),</b> reuse (higher level similarities often are big enough to form attractive candidates for reusable solutions), and possible simplification of...|$|R
40|$|In {{this study}} we have studied {{the problem of how}} to extend the {{concepts}} of Functional Dependency (FD) and normalization in relational databases to include the eXtensible Markup Language (XML) model. We shown that, like relational databases, XML documents may contain redundant information and this redundancy may cause <b>update</b> <b>anomalies.</b> Furthermore, such problems are caused by certain functional dependencies among paths in the document. Our goal is to find a way for converting an arbitrary XML Schema to a well-designed one, that avoids these problems. We introduced new definitions of FD and normal forms of XML Schema (X- 1 NF, X- 2 NF, X- 3 NF and X-BCNF). We shown that our normal forms are necessary and sufficient to ensure all conforming XML documents have no redundancies...|$|R
40|$|Service-oriented {{architectures}} {{often have}} the goal to integrate various systems {{of one or}} more organizations in a flexible way to be able to quickly react on business changes. Integration based only on services, however, falls short in reaching this goal because the application-specific business object models of multiple external systems (especially legacy systems) need to be integrated into the service-oriented system. When multiple business object models must be integrated into one system, serious data integration issues might arise. Examples of such problems are incompatible data definitions, inconsistent data across the enterprise, data redundancy, and <b>update</b> <b>anomalies.</b> We present patterns that address these issues and describe how to integrate the application-specific business object models of various external systems into a consistent process-driven and service-oriented architecture. 1...|$|R
40|$|This paper {{demonstrates}} {{the use of}} Bernstein algorithm for vertical normalization to 3 NF using synthesis. The aim of the paper is to provide an algorithm for database normalization and present a set of steps which minimize redundancy {{in order to increase}} the database management efficiency, and specify tests and algorithms for testing and proving the reversibility (i. e., proving that the normalization did not cause loss of information). Using Bernstein algorithm steps, the paper gives examples of vertical normalization to 3 NF through synthesis and proposes a test and an algorithm to demonstrate decomposition reversibility. This paper also sets out to explain that the reasons for generating normal forms are to facilitate data search, eliminate data redundancy as well as delete, insert and <b>update</b> <b>anomalies</b> and explain how anomalies develop using examples...|$|R
40|$|XML has a tree-structured data model, {{which is}} used to uniformly {{represent}} structured as well as semi-structured data, and also en-able concise query specication in XQuery, via the use of its XPath (twig) patterns. This in turn can leverage the recently developed technology of structural join algorithms to evaluate the query ef-ciently. In this paper, we identify a fundamental tension in XML data modeling: (i) data represented as deep trees (which can make effective use of twig patterns) are often un-normalized, leading to <b>update</b> <b>anomalies,</b> while (ii) normalized data tends to be shallow, resulting in heavy use of expensive value-based joins in queries. Our solution to this data modeling problem is a novel multi-colored trees (MCT) logical data model, which is an evolutionary extension of the XML data model, and permits trees with multi-colored nodes to signify their participation in multiple hierarchies...|$|R
40|$|Abstract: In {{this study}} we have studied {{the problem of how}} to extend the {{concepts}} of Functional Dependency (FD) and normalization in relational databases to include the eXtensible Markup Language (XML) model. We shown that, like relational databases, XML documents may contain redundant information and this redundancy may cause <b>update</b> <b>anomalies.</b> Furthermore, such problems are caused by certain functional dependencies among paths in the document. Our goal is to find a way for converting an arbitrary XML Schema to a well-designed one, that avoids these problems. We introduced new definitions of FD and normal forms of XML Schema (X- 1 NF, X- 2 NF, X- 3 NF and X-BCNF). We shown that our normal forms are necessary and sufficient to ensure all conforming XML documents have no redundancies. Key words: XML model, database design, functional dependencies, normal form...|$|R
40|$|XML has a tree-structured data model, {{which is}} used to uniformly {{represent}} structured as well as semi-structured data, and also enable concise query specification in XQuery, via the use of its XPath (twig) patterns. This in turn can leverage the recently developed technology of structural join algorithms to evaluate the query efficiently. In this paper, we identify a fundamental tension in XML data modeling: (i) data represented as deep trees (which can make effective use of twig patterns) are often un-normalized, leading to <b>update</b> <b>anomalies,</b> while (ii) normalized data tends to be shallow, resulting in heavy use of expensive value-based joins in queries. Our solution to this data modeling problem is a novel multicolored trees (MCT) logical data model, which is an evolutionary extension of the XML data model, and permits trees with multicolored nodes to signify their participation in multiple hierarchies. This adds significant semantic structure to individual data nodes...|$|R
40|$|XML schema {{design has}} two {{opposing}} goals: elimination of <b>update</b> <b>anomalies</b> {{requires that the}} schema be as normalized as possible; yet higher query performance and simpler query expression are often obtained {{through the use of}} schemas that permit redundancy. In this paper, we show that the recently proposed MCT data model, which extends XML by adding colors, can be used to address this dichotomy effectively. Specifically, we formalize the intuition of anomaly avoidance in MCT using notions of node normal and edge normal forms, and the goal of efficient query processing using notions of association recoverability and direct recoverability. We develop algorithms for transforming design specifications given as ER diagrams into MCT schemas that are in a node or edge normal form and satisfy association or direct recoverability. Experimental results using a wide variety of ER diagrams validate the benefits of our design methodology. ...|$|R
40|$|Databases were {{introduced}} to remove redundancy from conventional file systems to encourage sharing of information. The same idea is extended in this study to support sharing for continuous media data types (i. e., video and audio). Sharing in conventional databases results in <b>update</b> <b>anomalies</b> when information is modified. With presentations (movies) sharing clips (sequence of frames), continuous display becomes challenging as well. To ensure a continuous display, a system should retrieve data at a pre-specified rate. Otherwise, a display might suffer from disruptions or delays, termed hiccups. To ensure a continuous display using a multi-disk hardware platform, a video object is striped {{into a number of}} subobjects. The system enforces a regular schedule on retrieval of each subobject by controlling the placement of the subobjects across the disks. Now if different presentations share subobjects, each presentation will enforce its own restrictions on the placement of the data. This migh [...] ...|$|R
40|$|In many cases, {{classical}} databases need to {{be extended}} in order to represent and manipulate uncertain and imprecise information. In a fuzzy relational data model where attribute values are represented by possibility distributions and domains are associated with closeness relations, the problems of <b>update</b> <b>anomalies</b> and data redundancy may still exist. This paper aims to extend the normalization theory of the classical relational data model so as to provide theoretical guidelines for fuzzy relational database design. Based upon the notion of fuzzy functional dependency (FFD), a number of concepts such as relation keys and normal forms are generalized. As a result, q-keys, Fuzzy First Normal Form (F 1 NF), q-Fuzzy Second Normal Form (q-F 2 NF), q-Fuzzy Third Normal Form (q-F 3 NF), and q-Fuzzy Boyce-Codd Normal Form (q-FBCNF) have been formulated. Finally, dependency-preserving and lossless-join decompositions into q-F 3 NFs are discussed. status: publishe...|$|R
40|$|In {{a poorly}} {{designed}} conceptual database schema {{based on an}} object-oriented model, redundant information {{can be found in}} class definitions. This redundant information is very harmful to the data sharing, data consistency, and data integrity. By examining the relationships among the attributes of a class, we have defined an existence dependency relationship which is similar to the functional dependency relationship in relational database theory. Based on the relationship, we introduce the class normalization concept and three desired class normal forms for the design of object-oriented databases. In this paper, we report our initial finding and show by examples that this concept can help a database designer to identify redundant information in a conceptual database schema and to remove <b>update</b> <b>anomalies</b> caused by this redundancy. 1. INTRODUCTION Methodologies for the design of object-oriented databases (OODBs) have been studied since the emergence of this new technology. However, mos [...] ...|$|R
40|$|Semi-structured {{data has}} become {{prevalent}} {{with the growth}} of the Internet and other on-line information repositories. Many organizational databases are presented on the web as semi-structured data. Designing a "good" semi-structured database is increasingly crucial to prevent data redundancy, inconsistency and <b>updating</b> <b>anomalies.</b> In this paper, we define a semi-structured schema graph and identify the various anomalies that may occur in the graph. A normal form for semistructured schema graph, S 3 -NF, is proposed. We present two approaches to design S 3 -NF database, namely, restructuring by decomposition and the ER approach. The first approach consists of a set of rules to decompose a semi-structured schema graph into S 3 -NF. The second approach uses the ER model to remove anomalies at the semantic level. 1 Introduction The growth of the Internet and other on-line information repositories has greatly simplified the access to numerous sources of information/data, especially [...] ...|$|R
40|$|AbstractHaving a {{database}} design that avoids redundant information and <b>update</b> <b>anomalies</b> {{is the main}} goal of normalization techniques. Ideally, data as well as constraints should be preserved. However, {{this is not always}} achievable: while BCNF eliminates all redundancies, it may not preserve constraints, and 3 NF, which achieves dependency preservation, may not always eliminate all redundancies. Our first goal is to investigate how much redundancy 3 NF tolerates in order to achieve dependency preservation. We apply an information-theoretic measure and show that only prime attributes admit redundant information in 3 NF, but their information content may be arbitrarily low. Then we study the possibility of achieving both redundancy elimination and dependency preservation by a hierarchical representation of relational data in XML. We provide a characterization of cases when an XML normal form called XNF guarantees both. Finally, we deal with dependency preservation in XML and show that like in the relational case, normalizing XML documents to achieve non-redundant data can result in losing constraints...|$|R
