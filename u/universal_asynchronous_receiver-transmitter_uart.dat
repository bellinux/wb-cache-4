2|116|Public
40|$|The work {{presented}} in this paper is part of a Surrey Space Centre research project that aims {{to reduce the size of}} an on-board computer to a single chip facilitating further miniaturisation of small satellites. The paper is concerned with a communication system, specifically designed to meet the needs of a single-chip onboard computer - a simplified yet reliable and automated standalone alternative software implementation of the Consultative Committee of Space Data Systems (CCSDS) protocol communicating with a standard <b>universal</b> <b>asynchronous</b> <b>receiver-transmitter</b> (<b>UART)</b> peripheral. Details of the design and implementation stages of a CCSDS package coded in the language C are given. A thin hardware layer is described which translates the asynchronous UART stream into a CCSDS compliant synchronous stream. Synthesis results targeted at Actel FPGAs are presented taking into account single event upset tolerant coding styles...|$|E
40|$|External {{devices such}} as modems and other {{computers}} need to communicate serially. In order to provide this communication, a universal asynchronous receivertransmitter (UARn can provide an asynchronous serial data communication with I/O outputs {{devices such as}} keyboard, mouse or keypad. It can transmit serial data on over it's transmit line (TxD) and receive serial data over it's receive line (RxD). This project describes a <b>universal</b> <b>asynchronous</b> <b>receiver-transmitter</b> (<b>UART)</b> design. It is design from Very High Speed Integrated Circuit Hardware Description Language (VHDL) description, and then to Field Programmable Gate Array (FPGA) implementation. VHDL is used to provide a simple way of design entry through behavioral description. This project covers VHDL integration issue involved in the flow from high-level description to a fully simulated and synthesized. FPGA University Program Educational Board (UP 2) is used to achieve fast prototype build and logic circuit verification. Then analysis the features of other existing UART technology design...|$|E
40|$|The general {{objective}} of this project is to establish communication between a FPGA and a commercial piezo controller in order to govern a piezoelectric actuator for quick orientation and polarization stabilization of a laser beam. The control orientation and polarization stabilization of the laser beam, referred as Alice Phase Intensity, {{is part of the}} Fast project beam steering with full polarization control using a galvanometric optical scanner and polarization controller, manufactured by ICFO, Institute of Photonic Sciences. The main tasks of the project will be to think out, design and manufacture an electronic circuit that includes a CPLD to communicate between the Alice system FPGA and the actuator controller (MPD- 001 - 4 X). The circuit will also have the possibility to connect two additional devices as well as a <b>UART</b> (<b>Universal</b> <b>Asynchronous</b> <b>Receiver-Transmitter)</b> via a USB connection. This circuit will be referred to as Additional IO UART. The communication protocol between the CPLD and FPGA will be also addressed. The document is divided into different chapters. The first chapter explains the driver orientation and polarization of the laser. In the second chapter we review the general features of CPLDs and in particular the XC 2 C 128 - 7 VVQ 100 C from CoolRunner -II family model. The third chapter describes the design criteria of the the electronic circuit and manufacture of the PCB. The fourth chapter explains the Protocol created to establish communication between the different devices. Finally, chapter five presents simulations and tests as well as the conclusions that are drawn from the project...|$|R
5000|$|<b>Universal</b> <b>asynchronous</b> receiver/transmitter (UART) {{communications}} controller chip ...|$|R
5000|$|Hardware {{abstraction}} layer {{with support}} for CPU time, analog-to-digital converter (ADC), digital-to-analog converter (DAC), general-purpose input/output (GPIO), Inter-Integrated Circuit (I²C), pulse-width modulation (PWM), serial port, Serial Peripheral Interface Bus (SPI), <b>universal</b> <b>asynchronous</b> receiver/transmitter (UART).|$|R
50|$|A Universal Synchronous/Asynchronous Receiver/Transmitter (USART) {{is a type}} of {{a serial}} {{interface}} device that can be programmed to communicate asynchronously or synchronously. See <b>Universal</b> <b>asynchronous</b> receiver/transmitter (UART) {{for a discussion of the}} asynchronous capabilities of these devices.|$|R
50|$|The {{transmission}} {{frames are}} based on <b>universal</b> <b>asynchronous</b> receiver/transmitter (UART) frames.This allowed the protocol to be implemented using microcontrollers featuring a standard UART module. For low transmission rates, also a software-based implementation without a hardware-supported UART is possible.|$|R
50|$|A <b>Universal</b> <b>Asynchronous</b> Receiver/Transmitter (UART) block {{makes it}} {{possible}} to receive and transmit data over a serial line with very little load on the CPU. Dedicated on-chip hardware also often includes capabilities to communicate with other devices (chips) in digital formats such as Inter-Integrated Circuit (I²C), Serial Peripheral Interface (SPI), Universal Serial Bus (USB), and Ethernet.|$|R
40|$|This paper {{concentrates}} {{on the design of}} <b>Universal</b> <b>Asynchronous</b> Receiver and Transmitter (UART) using VHDL. A UART is a full duplex receiver/transmitter. During the genuine industrial production, sometimes we demand to simply integrate core part rather than full functionality of the UART. <b>Universal</b> <b>Asynchronous</b> Receiver Transmitter is a kind of serial communication protocol. In parallel communication the cost as well as complexity of the system increases due to simultaneous transmission of data bits on multiple wires. UART includes three modules which are received, the baud rate generator and transmitter. The UART design with Very High Description Language can be integrated into the Field Programmable Gate Aray to achieve reliable, compact & stable data transmission. It’s significant for the design of System on Chip (SOC). In the result and simulation part, this paper will focus on check the receive data with error free & baud rate generation at different frequencies...|$|R
40|$|Abstract−This paper {{details the}} design and {{implementation}} of SoC's UART-SPI converter. The UART-SPI converter provides usage for the <b>universal</b> <b>asynchronous</b> receiver/transmitter (UART) to serial peripheral converter (SPI). This converter {{can be used to}} communicate to SPI slave devices from a PC with UART port. The converter consists of three blocks: the UART converter, the UART-to SPI interfacing block and the SPI Master converter...|$|R
5000|$|Complexity: Parallel data links {{are easily}} {{implemented}} in hardware, making them a logical choice. Creating a parallel port {{in a computer}} system is relatively simple, requiring only a latch to copy data onto a data bus. In contrast, most serial communication must first be converted back into parallel form by a <b>universal</b> <b>asynchronous</b> receiver/transmitter (UART) before they may be directly connected to a data bus.|$|R
40|$|Abstract—This paper {{describes}} {{the design of}} <b>Universal</b> <b>Asynchronous</b> Receiver and Transmitter (UART) using VHDL. A UART is a full duplex receiver/transmitter. It is the microchip with programming that controls a computer's interface to its attached serial devices. It handles the conversion between serial and parallel data. It is {{the most widely used}} serial data communication circuit ever. Whole process of serial transmission is based upon the principle of shift register...|$|R
40|$|ABSTRACT: This paper {{details the}} design and {{implementation}} of SoC’s UART-SPI interface. The UART-SPI interface provides usage for the <b>universal</b> <b>asynchronous</b> receiver/transmitter (UART) to serial peripheral interface (SPI). This interface {{can be used to}} communicate to SPI slave devices from a PC with UART port. The interface consists of three blocks: the UART interface, the UART-SPI interfacing block and the SPI Master interface and slave is interface with master...|$|R
50|$|The <b>universal</b> <b>asynchronous</b> receiver/transmitter (UART) takes bytes of {{data and}} transmits the {{individual}} bits in a sequential fashion. At the destination, a second UART re-assembles the bits into complete bytes. Each UART contains a shift register, which is the fundamental method of conversion between serial and parallel forms. Serial transmission of digital information (bits) through a single wire or other medium is less costly than parallel transmission through multiple wires.|$|R
40|$|UART (<b>Universal</b> <b>Asynchronous</b> Receiver Transmitter) is {{used for}} serial communication. It {{is used for}} long {{distance}} and low cost process for transfer of data between pc and its devices. In general a UART operated with specific baud rate. To meet the complex communication demands it is not sufficient. To overcome this difficulty a multi channel UART is proposed in this paper. And the whole design is simulated with modelsim and synthesized with Xilinx softwar...|$|R
5000|$|The 8250 UART (<b>universal</b> <b>asynchronous</b> receiver/transmitter) is an {{integrated}} circuit designed for implementing the interface for serial communications. The part was originally manufactured by the National Semiconductor Corporation. It was {{commonly used in}} PCs and related equipment such as printers or modems. The 8250 included an on-chip programmable bit rate generator, allowing use for both common and special-purpose bit rates which could be accurately derived from an arbitrary crystal oscillator reference frequency.|$|R
5000|$|The 16550 UART (<b>universal</b> <b>asynchronous</b> receiver/transmitter) is an {{integrated}} circuit designed for implementing the interface for serial communications. The corrected -A version {{was released in}} 1987 by National Semiconductor. [...] It is frequently used to implement the serial port for IBM PC compatible personal computers, where it is often connected to an RS-232 interface for modems, serial mice, printers, and similar peripherals. It was the first serial chip used in the IBM PS/2 line, which were introduced in 1987.|$|R
40|$|Abstract — This paper {{describes}} {{the design of}} UART (<b>universal</b> <b>asynchronous</b> receiver transmitter) based on VHDL. As UART is consider as a low speed, low cost data exchange between computer and peripherals. [1]. To overcome the problem of low speed data transmission, a 16 bit UART is proposed in this paper. It works on 9600 bps baud rate. This will result in increased the speed of UART. Whole design is simulated with Xilinx ISE 8. 2 i software and results are completely consistent with UART protocol...|$|R
40|$|AbstractIn {{traditional}} <b>universal</b> <b>asynchronous</b> receiver transmitter (UART) controller, {{the data}} transmission is inefficient {{and the data}} bus utilization ratio is low. A novel design is provided to solve these problems. The architecture {{of the system is}} introduced, the flow charts of data processing as well as the implementation state machine are also presented in detail. This paper is concluded by comparing the performance of this design, which is realized on field programmable gate array (FPGA) using Verilog hardware description language (HDL), with other traditional UART controllers...|$|R
5000|$|A <b>universal</b> <b>asynchronous</b> receiver/transmitter (UART [...] ) is a {{computer}} hardware device for asynchronous serial communication in which the data format and transmission speeds are configurable. The electric signaling levels and methods are handled by a driver circuit external to the UART.A UART is usually an individual (or part of an) integrated circuit (IC) used for serial communications over {{a computer}} or peripheral device serial port. UARTs are now commonly included in microcontrollers. A related device, the Universal Synchronous/Asynchronous Receiver/Transmitter (USART) also supports synchronous operation.|$|R
40|$|Abstract: This paper {{entitled}} “DESIGNING PARALLEL BUSUSING <b>UNIVERSAL</b> <b>ASYNCHRONOUS</b> RECEIVER TRANSMITTER ” {{is designed}} {{to the core of}} a UART interface module, which includes both receive and transmit modules, and the command parser. This paper will be a viable solution to design parallel buses with the help of UART. In the test bench, there is a RFM(register file model) to which we write/read back data from just to check our design. The txt file issues serial inputs to the core and the core outputs parallel data and address in the form of bus. This bus is connected to our RFM (register file model) instantiated in the test bench along with the design. This makes easy to retrieve parallel data from serial input. The base of the paper is to use microcontroller along with other components to interface with the physical world. In contrast, most serial communication must first be converted back into parallel form by a <b>universal</b> <b>asynchronous</b> receiver/transmitter (UART) before they may be directly connected to a data bus. Both Transmissions (Parallel and Serial) are used to connect peripheral devices and enable us to communicate with these devices. The UART core described here is designed using VHDL and implemented on Xilinx Vertex FPGA. Keywords- VHDL, RFM, UART, FPGA. I...|$|R
40|$|This paper {{entitled}} “DESIGNING PARALLEL BUSUSING <b>UNIVERSAL</b> <b>ASYNCHRONOUS</b> RECEIVER TRANSMITTER” {{is designed}} {{to the core of}} a UART interface module, which includes both receive and transmit modules, and the command parser. This paper will be a viable solution to design parallel buses with the help of UART. In the test bench, there is a RFM(register file model) to which we write/read back data from just to check our design. The txt file issues serial inputs to the core and the core outputs parallel data and address in the form of bus. This bus is connected to our RFM (register file model) instantiated in the test bench along with the design. This makes easy to retrieve parallel data from serial input. The base of the paper is to use microcontroller along with other components to interface with the physical world. In contrast, most serial communication must first be converted back into parallel form by a <b>universal</b> <b>asynchronous</b> receiver/transmitter (UART) before they may be directly connected to a data bus. Both Transmissions (Parallel and Serial) are used to connect peripheral devices and enable us to communicate with these devices. The UART core described here is designed using VHDL and implemented on Xilinx Vertex FPGA...|$|R
40|$|UART (<b>Universal</b> <b>Asynchronous</b> Receiver Transmitter) {{is a kind}} {{of serial}} {{communication}} protocol; mostly used for short-distance, low speed, low-cost data exchange between computer and peripherals. During the actual industrial production, sometimes we do not need the full functionality of UART, but simply integrate its core part. UART includes three kernel modules which are the baud rate generator, receiver and transmitter. The UART implemented with VHDL language and simulated using XILINX ISE 12. 1 to achieve compact, stable and reliable data transmission. It’s significant for the design of SOC. The simulation results are completely consistent...|$|R
40|$|UART (<b>Universal</b> <b>Asynchronous</b> Receiver Transmitter) is broadly used in {{embedded}} {{communication system}} {{because of its}} programmable ability and high stability in working. A UART communication interface system is {{presented in this paper}} used Verilog HDL language. In this system, baud rate of each UART is configured through the external bus, and parity bit is added in UART communication protocol {{in order to reduce the}} error rate. The whole design is simulated and verified by Modelsim, and synthesized and Placement and routing by Quartus. The FPGA-based experimental results show that the proposed system is a good candidate with accuracy and reliability...|$|R
40|$|ABSTRACT- This paper {{presents}} the design andimplementation method of a <b>Universal</b> <b>Asynchronous</b> Receiver Transmitter (UART) as a widely used {{serial communication protocol}} using Verilog Hardware Descriptional Language (HDL). In order to achieve the needs of latest complex communication system demands, a UART controller has been designed using FIFO (First In First Out) buffer technique for asynchronous serial data transmission between systems. Also, this reduces the delay, synchronisation error between sub-systems and provides a reliable, high performance logic solution for complex systems. The simulation and synthesis {{has been carried out}} using Modelsim DE 6. 5 (inc. Mentor Graphics) ...|$|R
40|$|The simple UART (<b>Universal</b> <b>Asynchronous</b> Receiver and Transmitter) {{encoding}} {{is used in}} two novel fieldbus protocols for real-time systems, the Local Interconnect Network (LIN) and the Time-Triggered Protocol for SAE class A applications (TTP/A). These protocols use a time-triggered communication {{schedule to}} achieve a predictable timing behavior. The employment of standard components like a standard UART reduces costs, but the issues of clock drift, send jitter, and the adjustability of the send frequency have to be considered. This paper examines common timing problems with standard UARTs and imprecise oscillators and presents a calculation of upper bounds for the timeliness of UART driven communications...|$|R
5000|$|The W65C134S {{consists}} of a W65C02S (Static) Central Processing Unit (CPU), 4096 bytes of Read Only Memory (ROM), 192 bytes of Random Access Memory (RAM), two 16 bit timers, a low power Serial Interface Bus (SIB) configured as a token passing Local Area Network, <b>Universal</b> <b>Asynchronous</b> Receiver and Transmitter (UART) with baud rate timer, one 16-bit [...] "Monitor [...] Watch-Dog Timer" [...] with [...] "restart" [...] interrupt, twenty-two priority encoded interrupts, ICE Interface, Real-Time clock features including Time of Day (ToD) clock, Bus Control Register (BCR) for external memory bus control, interface circuitry for peripheral devices, and many low power features.|$|R
25|$|PCBoard {{supported}} the 16C550 UARTS (<b>universal</b> <b>asynchronous</b> receiver transmitter), such as 16550 UART ("Fifo"), 16554 UART and 16650 UART, {{which made it}} possible to run multiple nodes of the BBS on a single (multitasking) computer using either using IBM OS/2 or the DOS multitasking tool DESQview in combination with the memory manager QEMM. Some sysops tried to run PCBoard on the (then) new Windows 95 operating system by Microsoft and reported mixed results. Stability was critical for a BBS, which was usually running 24/7, and the early version of the Microsoft 32-bit operating system lacked it. Windows 95 was never officially supported by CDC.|$|R
40|$|UART- <b>Universal</b> <b>Asynchronous</b> Receiver Transmitter, {{generally}} it is {{used for}} better transmission of serial data that is it either transmit or receives data serially {{with the help of}} shift register. It consist frame format, one start bit (usually low), 5 - 8 data bit, one optional parity bit and one stop bit (opposite polarity of start bit). Asynchronous means by using start and stop bit be transmit data, there is no need of sending (PAD) that is ASCII (SYN) for synchronizing transmitter and receiver. It transmit 9600 to 38400 bps for transmitting data bit. Whole process of serial transmission is based upon the principle of shift register...|$|R
40|$|Abstract:- In {{the earlier}} era of {{electronics}} the UART (<b>Universal</b> <b>asynchronous</b> receiver/transmitter) {{played a major}} role in data transmission. This UART IP CORE provides serial communication capabilities,which allow communication with modems or other external devices. Thiscore is designed to be maximally compatible with industry standard designs[4]. Thekey features of this design are WISHBONE INTERFACE WITH 8 -BIT OR 32 -BIT selectable data bus modes. Debug interface in 32 -bit data bus mode. Registerlevel and functionalcompatibility. FIFO operation. The design is verified using VMM based on system verilog. The test bench is written with regression test cases in order to acquire maximum functional coverage. Keywords:- UART,VMM,FIFO,WISHBONE INTERFACE...|$|R
40|$|Abstract: System level {{verification}} with scalable and reusable components {{provides a}} solution {{and to develop}} a complete environment with constrained random testing functional, coverage and assertions. This paper details the design and implementation of SoC’s UART-SPI Interface. The UART-SPI interface provides usage for the <b>universal</b> <b>asynchronous</b> receiver/transmitter (UART) to serial peripheral interface (SPI). The SPI bus is assort synchronized serial peripheral interface, it causes MCU to carry on the communication with each kind of peripheral by the serial mode to exchange the information [...] This paper introduces the procedure of delivering the information from CC 2430 with wireless transceiver function interface to the C 8051 F 120 by serial peripherals interface...|$|R
40|$|Abstract—UART (<b>Universal</b> <b>Asynchronous</b> Receiver Transmitter) {{is a kind}} {{of serial}} {{communication}} protocol; mostly used for short-distance, low speed, low-cost data exchange between computer and peripherals. During the actual industrial production, sometimes we do not need the full functionality of UART, but simply integrate its core part. UART includes three kernel modules which are the baud rate generator, receiver and transmitter. The UART implemented with VHDL language can be integrated into the FPGA to achieve compact, stable and reliable data transmission. It’s significant for the design of SOC. The simulation results with Quartus II are completely consistent with the UART protocol. Keywords- UART; asynchronous serial communication; VHDL; Quartus II; simulation 1...|$|R
40|$|In {{the earlier}} era of {{electronics}} the UART (<b>Universal</b> <b>asynchronous</b> receiver/transmitter) {{played a major}} role in data transmission. This UART IP CORE provides serial communication capabilities, which allow communication with modems or other external devices. This core is designed to be maximally compatible with industry standard designs[4]. The key features of this design are WISHBONE INTERFACE WITH 8 -BIT OR 32 -BIT selectable data bus modes. Debug interface in 32 -bit data bus mode. Register level and functional compatibility. FIFO operation. The design is verified using UVM methodology. The test bench is written with regression test cases in order to acquire maximum functional coverage...|$|R
50|$|PCBoard {{supported}} the 16C550 UARTS (<b>universal</b> <b>asynchronous</b> receiver transmitter), such as 16550 UART ("Fifo"), 16554 UART and 16650 UART, {{which made it}} possible to run multiple nodes of the BBS on a single (multitasking) computer using either using IBM OS/2 or the DOS multitasking tool DESQview in combination with the memory manager QEMM. Some sysops tried to run PCBoard on the (then) new Windows 95 operating system by Microsoft and reported mixed results. Stability was critical for a BBS, which was usually running 24/7, and the early version of the Microsoft 32-bit operating system lacked it. Windows 95 was never officially supported by CDC.|$|R
5000|$|The W65C265S {{consists}} of a W65C816S (Static) Central Processing Unit (CPU), 8 kB of Read Only Memory (ROM), 576 bytes of Random Access Memory (RAM), Processor defined cache under software control, eight 16-bit timers with maskable interrupts, high performance interrupt-driven Parallel Interface Bus (PIB), four <b>Universal</b> <b>Asynchronous</b> Receivers and Transmitters (UART) with baud rate timers, Monitor [...] "Watch Dog" [...] Timer with [...] "restart" [...] interrupt, twenty-nine priority encoded interrupts, Built-in Emulation features, Time of Day (ToD) clock features, Twin Tone Generators (TGx), Bus Control Register (BCR) for external memory bus control, interface circuitry for peripheral devices, ABORT input for low cost virtual memory interface, and many low power features.|$|R
40|$|Abstract—This {{paper is}} {{proposed}} {{to develop a}} low cost system which provides solution to the existing automotive control issues. This system has two main principle components namely Vehicle to Vehicle Collision Avoidance Unit (VVCAU) is used to avoid crashing between vehicles and Black Box (BB) records the relevant details about a vehicle such as Engine Temperature, Distance from obstacle, Speed of vehicle, Brake status, CO 2 Content, Alcohol content, Accident Direction, trip Time and Date. The design selects ARM 7 (LPC 2148) as embedded controller, UART (<b>Universal</b> <b>Asynchronous</b> Receiver Transmitter) is the common peripheral found on microcontrollers widely used for communication with the external devices and systems, I 2 C (Inter-Integrated Circuit) for on-board communication, Rea...|$|R
