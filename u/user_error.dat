187|731|Public
25|$|The {{battery and}} drive unit are covered {{for eight years}} or 125,000 miles (200,000km in metric countries) for the 60kWh base model, or eight years and {{unlimited}} distance for all 70 and 85kWh models. The unconditional battery warranty covers everything except deliberate damage, even including <b>user</b> <b>error.</b> However, loss of battery capacity over time or usage is not covered under warranty.|$|E
500|$|In Major League Baseball, {{the pitcher}} {{is unable to}} move around the pitcher's mound and many are also able to perform the feat of [...] pitches. The ball's physics have been called into question, with the ball {{stopping}} on a dime after three or less bounces. The game's camera system does not function properly and, when a ball is hit, the outfield camera follows the ball looking upwards, {{making it impossible for}} the game player to see where their fielders are. The ball can also be thrown and get stuck in the well between the stands and the field on an overthrow of a baseman and cause inside the park home runs, which would not happen within a real game (in that case a ground rule double and/or error would be scored instead). Another bug allows players to go into the stands past the wall with the ball if they enter at certain points in foul territory. Each baseman is also controlled individually, allowing for <b>user</b> <b>error</b> in certain situations where a running baseman will be called out if the baseman ahead of them remains at their last base if the player fails to advance them.|$|E
2500|$|... {{elimination}} of glycemic excursions due to <b>user</b> <b>error</b> (such as forgetting to bolus in conventional pump therapy), ...|$|E
5000|$|Expected <b>user</b> <b>errors</b> in {{identifying}} risky situations (this study); ...|$|R
40|$|Abstract. Systematic <b>user</b> <b>errors</b> {{commonly}} {{occur in}} the use of inter-active systems. We describe a formal reusable user model implemented in higher-order logic {{that can be used for}} machine-assisted reasoning about <b>user</b> <b>errors.</b> The core of this model is a series of non-deterministic guarded temporal rules. We consider how this approach allows errors of various specic kinds to be detected by proving a single theorem about a device. We illustrate the approach using a simple case study. ...|$|R
40|$|System and <b>user</b> <b>errors</b> are an {{inevitable}} part of using libraries 2 ̆ 7 online resources. Encountering these errors {{as well as}} any accompanying error messages lead to significant pain points in user experience. This presentation will describe libraries can combat these pain points by conducting a tandem availability-usability study to identify common system and <b>user</b> <b>errors</b> and develop various work-arounds ranging from tool tips to error page customization (where possible) to ameliorate the frustration involved with encountering these errors...|$|R
2500|$|Because hidden {{services}} , {{connection to}} a hidden service is encrypted end-to-end and not subject to eavesdropping. There are, however, security issues involving Tor hidden services. For example, services that are reachable through Tor hidden services and the public Internet are susceptible to correlation attacks and thus not perfectly hidden. Other pitfalls include misconfigured services (e.g. identifying information included by default in web server error responses), uptime and downtime statistics, intersection attacks, and <b>user</b> <b>error.</b> The open source OnionScan program, written by independent security researcher Sarah Jamie Lewis, comprehensively examines hidden services for numerous [...] flaws and vulnerabilities.|$|E
2500|$|Most {{oscilloscopes}} {{allow for}} probe attenuation factors, displaying the effective sensitivity at the probe tip. Historically, some auto-sensing circuitry used indicator lamps behind translucent {{windows in the}} panel to illuminate {{different parts of the}} sensitivity scale. To do so, the probe connectors (modified BNCs) had an extra contact to define the probe's attenuation. (A certain value of resistor, connected to ground, [...] "encodes" [...] the attenuation.) Because probes wear out, and because the auto-sensing circuitry is not compatible between different makes of oscilloscope, auto-sensing probe scaling is not foolproof. Likewise, manually setting the probe attenuation is prone to <b>user</b> <b>error</b> and it is a common mistake to have the probe scaling set incorrectly; resultant voltage readings can then be wrong by a factor of 10.|$|E
2500|$|ZFS also {{includes}} a mechanism for snapshots and replication, including snapshot cloning; the former is described by the FreeBSD documentation {{as one of its}} [...] "most powerful features", having features that [...] "even other file systems with snapshot functionality lack". Very large numbers of snapshots can be taken, without degrading performance, allowing snapshots to be used prior to risky system operations and software changes, or an entire production ("live") file system to be fully snapshotted several times an hour, in order to mitigate data loss due to <b>user</b> <b>error</b> or malicious activity. Snapshots can be rolled back [...] "live" [...] or the file system at previous points in time viewed, even on very large file systems, leading to [...] "tremendous" [...] savings in comparison to formal backup and restore processes, or cloned [...] "on the spot" [...] to form new independent file systems.|$|E
30|$|Concerning the <b>user</b> <b>errors</b> a wrong {{operational}} application by {{the user}} outweigh far with 80 % followed by incorrect cleaning and sterilization with 10 %.|$|R
40|$|The Project 54 system {{integrates}} multiple {{electronic devices}} in police cruisers {{into a single}} system with a speech user interface (SUI). The system has been deployed in over 240 cruisers {{in the state of}} New Hampshire. We collected over 49, 000 samples of speech commands, along with the corresponding SUI responses, from 27 officers using the Project 54 system during their everyday work. We found that the system recognized officer utterances around 85 % of the time. About one third of recognition errors were due to speech recognizer errors and about two thirds were due to <b>user</b> <b>errors.</b> Three types of <b>user</b> <b>errors</b> were identified: issuing a command that is not valid in any context of the SUI (54 % of <b>user</b> <b>errors),</b> issuing a command that is valid in some context but not in the current one (34 %) and operating the push-to-talk button incorrectly (12 %). 1...|$|R
40|$|Although number entry {{appears to}} be a trivial task, <b>user</b> <b>errors</b> are still common and could be a result of poorly {{engineered}} interaction with the devices. We are challenging the design of universal number entry systems by looking at cases where <b>user</b> <b>errors</b> are frequently made. The telephone is used as a platform to compare input devices for number entry where we can look for speed and accuracy trade-offs between direct and indirect inputs. We will focus on the knob, button, and touchscreen and hope to find guidelines for when each is appropriate to use in a number entry system...|$|R
2500|$|Coding: Since {{test strips}} may vary from batch to batch, some models require {{the user to}} {{manually}} enter in a code found on the vial of test strips or on a chip {{that comes with the}} test strip. By entering the coding or chip into the glucose meter, the meter will be calibrated to that batch of test strips. However, if this process is carried out incorrectly, the meter reading can be up to 4 mmol/L (72 mg/dL) inaccurate. The implications of an incorrectly coded meter can be serious for patients actively managing their diabetes. This may place patients at increased risk of hypoglycemia. [...] Alternatively, some test strips contain the code information in the strip; others have a microchip in the vial of strips that can be inserted into the meter. [...] These last two methods reduce the possibility of <b>user</b> <b>error.</b> [...] One Touch has standardized their test strips around a single code number, so that, once set, {{there is no need to}} further change the code in their older meters, and in some of their newer meters, there is no way to change the code.|$|E
2500|$|On February 9, 2010, Toyota {{announced}} a voluntary global recall of third generation 2010 Prius models manufactured {{from the current}} model's introduction through late January. Affected models, including 133,000 Prius vehicles in the U.S. and 52,000 in Europe, are to receive an anti-lock brake software update to fix brake response over rough roads, following reports of delayed braking response on certain surface conditions. Apple co-founder and Prius collector Steve Wozniak was also quoted by media outlets regarding a possible cruise control issue {{on one of his}} several Priuses, where the steps for [...] "upping the speed" [...] using the Dynamic Radar Cruise Control system allegedly caused unintended acceleration. Wozniak later maintained that he was misquoted, but did have an individual vehicle and customer service issue, while auto journalists and other Prius drivers suggested <b>user</b> <b>error.</b> On March 8, 2010, a publicized incident of alleged Prius acceleration in San Diego was later suspected to be a hoax or not repeatable. The manufacturer shared that 713,000 Prius in North America, 997,000 in Japan, another 130,000 in Europe and the rest in other regions are being recalled.|$|E
5000|$|<b>User</b> <b>Error,</b> random discussions {{featuring}} hosts Chris Fisher, Noah Chelliah, and [...] "The Beard".|$|E
40|$|Service Oriented Architectures (SOA) enable dynamic {{integration}} of Web Services (WS) {{to accomplish a}} user’s need. As such, they are sensitive to <b>user</b> <b>errors.</b> This article presents a framework for mitigating the risks of <b>user</b> <b>errors</b> due {{to changes in the}} service delivery context. The underlying methodology incorporates usability in the design, testing, deployment and operation of dynamic collaborative WS, so that the error-prone elements of the User Interface (UI) are identified and eliminated. The methodology incorporates Statistical Process Control (SPC) of Web Service Indices (WSI), obtained by a Decision Support system for User Interface Design (DSUID), in which the users are elements of the control loop...|$|R
30|$|Conclusion: QDOSE is a {{versatile}} stand-alone, user-friendly, vendor-neutral dosimetry tool. It offers flexibility allowing for patient-specific dosimetry {{in a variety}} of clinical settings complemented with a streamlined workflow guidance saving the user time and reducing <b>user</b> <b>errors.</b>|$|R
40|$|Abstract. Reliability of an {{interactive}} system depends on users {{as well as}} the device implementation. <b>User</b> <b>errors</b> can result in catastrophic sys-tem failure. However, work from the field of cognitive science shows that systems can be designed so as to completely eliminate whole classes of <b>user</b> <b>errors.</b> This means that <b>user</b> <b>errors</b> should also fall within the re-mit of verification methods. In this paper we demonstrate how the HOL theorem prover [7] can be used to detect and prove the absence of the family of errors known as order errors. This is done by taking account of the goals and knowledge of users. We provide an explicit generic user model which embodies theory from the cognitive sciences about the way people are known to act. The user model describes action based on user communication goals. These are goals that a user adopts based on their knowledge of the task they must perform to achieve their goals. We use a simple example of a vending machine to demonstrate the approach. We prove that a user does achieve their goal for a particular design of machine. In doing so we demonstrate that communication goal based errors cannot occur. ...|$|R
5000|$|... {{elimination}} of glycemic excursions due to <b>user</b> <b>error</b> (such as forgetting to bolus in conventional pump therapy), ...|$|E
5000|$|Constraints {{and content}} rules may be {{associated}} with [...] "plain-English" [...] validation error messages, allowing translation of numeric Schematron error codes into meaningful <b>user</b> <b>error</b> messages.|$|E
50|$|In addition, <b>user</b> <b>error,</b> {{equipment}} abuse, no problem/fault found occurrences must {{be tracked}} to assist risk management personnel {{in determining whether}} additional clinical staff training must be performed.|$|E
40|$|Database backups have {{traditionally}} been used as the primary mechanism to recover from hardware and <b>user</b> <b>errors.</b> High availability solutions maintain redundant copies of data {{that can be used}} to recover from most failures except <b>user</b> or application <b>errors.</b> Database backups are neither space nor time efficient for recovering from <b>user</b> <b>errors</b> which typically occur in the recent past and affect a small portion of the database. Moreover periodic full backups impact user workload and increase storage costs. In this paper we present a scheme that can be used for both <b>user</b> and application <b>error</b> recovery starting from the current state and rewinding the database back in time using the transaction log. While we provide a consistent view of the entire database as of a point in time in the past, the actual prior versions are produced only for data that is accessed. We make the as of data accessible to arbitrary point in time queries by integrating with the database snapshot feature in Microsoft SQL Server. 1...|$|R
40|$|Previous {{techniques}} used for design of subsonic wind tunnels have been improved and combined in computer program. Program is applicable to compressible flow through, most closed-, or open throated, single-, double-, or non-return wind tunnels or ducts. Program is selfchecking and selfprotecting, thus minimizing undetected and wasteful <b>user</b> <b>errors...</b>|$|R
50|$|Regular data backups are an {{important}} asset to have when trying to recover after a data loss event, {{but they do not}} prevent <b>user</b> <b>errors</b> or system failures. As such, a data backup plan needs to be established and run in unison with a disaster recovery plan in order to lower risk.|$|R
5000|$|A {{systemic}} {{problem is}} a problem due to issues inherent in the overall system,rather than due to a specific, individual, isolated factor. Contrast with pilot error, <b>user</b> <b>error,</b> or [...]|$|E
5000|$|Less {{opportunity}} for <b>user</b> <b>error.</b> Since a user {{does not have}} full control over the files on the server, there is less {{opportunity for}} them to, for example, change the mode of a private file to be world-readable.|$|E
50|$|Based on a {{standard}} called CP-01-2000, developed by the American National Standards Institute and Security Industry Association, {{the new generation of}} keypad control panels takes aim at <b>user</b> <b>error</b> by building in extra precautions that minimize unwarranted dispatch of emergency responders.|$|E
40|$|Controlled user {{testing of}} the {{dialogue}} component of spoken language dialogue systems (SLDSs) has a natural focus on the detection, analysis and repair of dialogue design problems. Not only dialogue designers and their systems commit <b>errors,</b> however. <b>Users</b> do so as well. Improvement of dialogue interaction {{is not only a}} matter of reducing the number and severity of dialogue design problems but also of preventing the occurrence of avoidable <b>user</b> <b>errors.</b> Based on a controlled user test of the dialogue component of an implemented SLDS, the paper takes a systematic look at the dialogue <b>errors</b> made by <b>users</b> in the test corpus. A typology of <b>user</b> <b>errors</b> in spoken human-machine dialogue is presented and discussed, and potentially important dialogue design advice derived {{from the fact that the}} notion of a `user error' turns out to be one that must be handled with care...|$|R
40|$|We {{focus on}} {{developing}} {{an account of}} <b>user</b> behavior under <b>error</b> conditions, working with annotated data from real human-machine mixed initiative dialogs. In particular, we examine categories of <b>error</b> perception, <b>user</b> behavior under <b>error,</b> effect of <b>user</b> strategies on <b>error</b> recovery, {{and the role of}} <b>user</b> initiative in <b>error</b> situations. A conditional probability model smoothed by weighted ASR error rate is proposed. Results show that <b>users</b> discovering <b>errors</b> through implicit confirmations are less likely {{to get back on track}} (or succeed) and take a longer time in doing so than other forms of error discovery such as system reject and reprompts. Further successful user error-recovery strategies included more rephrasing, less contradicting, and a tendency to terminate error episodes (cancel and startover) than to attempt at repairing a chain of errors...|$|R
40|$|Understanding the {{cognitive}} {{aspects of human}} error will increase the usability of user interfaces. It is important to study {{the cognitive}} aspects of human error because many disasters {{have been attributed to}} operator errors. Creating usable interfaces that reduce the likelihood of error will save industries {{a great deal of money}} and may even save human lives. A greater understanding of human errors can be obtained by examining the psychological basis of errors, the methods used to study errors, some of the problems associated with studying errors and different types of errors. Next, the current research findings can then be applied to user interfaces to reduce the probability of <b>user</b> <b>errors.</b> Then, a web survey system, phpESP, will be analyzed based on the guidelines for reducing human <b>error</b> in <b>user</b> interfaces. The analysis of the survey system can server as a guide to help designers reduce potential <b>user</b> <b>errors...</b>|$|R
50|$|Robustness: {{how well}} a program anticipates {{problems}} due to errors (not bugs). This includes situations such as incorrect, inappropriate or corrupt data, unavailability of needed resources such as memory, operating system services and network connections, <b>user</b> <b>error,</b> and unexpected power outages.|$|E
50|$|Beyond {{financial}} concerns {{there are}} a number of legal and ethical dilemmas created by increasing EMR use, including the risk of medical malpractice due to <b>user</b> <b>error,</b> server glitches that result in the EMR not being accessible, and increased vulnerability to hackers.|$|E
50|$|In alpine skiing, {{for every}} 1000 people skiing in a day, on average {{between two and}} four will require medical attention. Knee {{injuries}} account for 33 percent of injuries. Most accidents {{are the result of}} <b>user</b> <b>error</b> leading to an isolated fall.|$|E
40|$|For {{administration}} and planning of green areas and {{park in the}} municipality of Frederikssund, the GIS department has optimized digitizing and use of data, using PostgreSQL/ PostGIS with QGIS as frontend. The instructor will present the possibilities for combining database functionality and QGIS frontend. How can non-GIS specialists use such a system, and how to eliminate <b>user</b> <b>errors</b> with such setu...|$|R
40|$|This paper {{introduces}} {{an extended}} hierarchical task analysis (HTA) methodology devised {{to evaluate and}} compare user interfaces on volumetric infusion pumps. The pumps were studied along the dimensions of overall usability and propensity for generating human error. With HTA as our framework, we analyzed six pumps {{on a variety of}} common tasks using Norman’s Action theory. The introduced method of evaluation divides the problem space between the external world of the device interface and the user’s internal cognitive world, allowing for predictions of potential <b>user</b> <b>errors</b> at the human-device level. In this paper, one detailed analysis is provided as an example, comparing two different pumps on two separate tasks. The results demonstrate the inherent variation, often the cause of usage errors, found with infusion pumps being used in hospitals today. The reported methodology is a useful tool for evaluating human performance and predicting potential <b>user</b> <b>errors</b> with infusion pumps and other simple medical devices...|$|R
40|$|AbstractEffective {{debugging}} of ontologies is {{an important}} prerequisite for their broad application, especially in areas that rely on everyday users to create and maintain knowledge bases, such as the Semantic Web. In such systems ontologies capture formalized vocabularies of terms shared by its users. However in many cases users have different local views of the domain, i. e. of {{the context in which}} a given term is used. Inappropriate usage of terms together with natural complications when formulating and understanding logical descriptions may result in faulty ontologies. Recent ontology debugging approaches use diagnosis methods to identify causes of the faults. In most debugging scenarios these methods return many alternative diagnoses, thus placing the burden of fault localization on the user. This paper demonstrates how the target diagnosis can be identified by performing a sequence of observations, that is, by querying an oracle about entailments of the target ontology. To identify the best query we propose two query selection strategies: a simple “split-in-half” strategy and an entropy-based strategy. The latter allows knowledge about typical <b>user</b> <b>errors</b> to be exploited to minimize the number of queries. Our evaluation showed that the entropy-based method significantly reduces the number of required queries compared to the “split-in-half” approach. We experimented with different probability distributions of <b>user</b> <b>errors</b> and different qualities of the apriori probabilities. Our measurements demonstrated the superiority of entropy-based query selection even in cases where all fault probabilities are equal, i. e. where no information about typical <b>user</b> <b>errors</b> is available...|$|R
