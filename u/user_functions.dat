73|1358|Public
25|$|The state {{machines}} {{can also be}} built to provide additional <b>user</b> <b>functions,</b> for instance spread-spectrum clocking and voltage controlled frequency trimming.|$|E
50|$|The {{language}} {{can be extended}} by adding <b>user</b> <b>functions</b> written in Proteus or DLLs created in C/C++.|$|E
50|$|Apache Flink, an {{open-source}} parallel {{data processing}} platform has implemented PACTs. Flink {{allows users to}} specify <b>user</b> <b>functions</b> with annotations.|$|E
50|$|DEF FN {{allows the}} {{definition}} of a <b>user</b> <b>function</b> in BASIC which can be named and referred in the program. FNEND is placed after the last statement in a function.|$|R
5000|$|... mXparser {{delivers}} functionalities such as: basic calculations, built-in constants and functions, numerical calculus operations, iterated operators, {{user defined}} constants, <b>user</b> defined <b>functions,</b> <b>user</b> defined recursion.|$|R
50|$|Input Contracts {{split the}} input data of a PACT into {{independently}} processable subsets that are handed to the <b>user</b> <b>function</b> of the PACT. Input Contracts vary {{in the number}} of data inputs and the way how independent subsets are generated.|$|R
50|$|The state {{machines}} {{can also be}} built to provide additional <b>user</b> <b>functions,</b> for instance spread-spectrum clocking and voltage controlled frequency trimming.|$|E
5000|$|Any MBASIC {{programs}} that {{made use of}} [...] and , and of machine code <b>user</b> <b>functions,</b> were not portable between machines without modifications.|$|E
50|$|Users {{have access}} to the Platinnetz Blog, which keeps them up to date on <b>user</b> <b>functions</b> and {{articles}} that are particularly of interest to Best Agers.|$|E
40|$|In {{interference}} coupled wireless systems, {{where it}} is not possible to "orthogonalize" all the users in the system, we characterize the impact of interference coupling on the convexity of certain utility functions and problems. We introduce a general class of competitive <b>user</b> utility <b>functions</b> and natural competitive <b>user</b> utility <b>functions.</b> We further introduce the signal-to-interference based utility functions, which are based on physical layer parameters in wireless systems. We prove the conditions, which when satisfied result in a competitive <b>user</b> utility <b>function</b> being a signal-to-interference ratio based utility function. We further show that there exists no natural competitive <b>user</b> utility <b>function,</b> which is convex or concave. Furthermore, we show that a sum of weighted combination of natural competitive <b>user</b> utility <b>functions</b> is not convex or concave. Such functions are commonly encountered in wireless communication systems, e. g. rate or MMSE as a function of signal-to-interference ratio. We show that such rate maximization or MMSE minimization problems are not convex programs under our specified conditions...|$|R
40|$|This report {{describes}} the Fluent <b>User</b> Defined <b>Function</b> WindCube_comp_sim used to interrogate FLUENT a Fluent data set by simulating {{the operation of}} a LeoSphere Windcube LiDAR. The <b>user</b> defined <b>function</b> is contained in the program lidar. c (version 1. 06) which has been written in the C programming language. This report contains a listing of the <b>user</b> defined <b>function,</b> describes its method of operation and presents a validation of the analysis process. The report also includes {{a description of the}} output data file formats...|$|R
50|$|Apache Hive defines, in {{addition}} to the regular <b>user</b> defined <b>functions</b> (UDF), also <b>user</b> defined aggregate <b>functions</b> (UDAF) and table-generating functions (UDTF). Hive enables developers to create their own custom functions with Java.|$|R
5000|$|The PACT {{programming}} model {{encourages a}} more modular programming style. Although {{the number of}} <b>user</b> <b>functions</b> is usually higher, they are more fine-grain and focus on specific problems. Hence, interweaving of functionality which is common for MapReduce jobs can be avoided.|$|E
50|$|Vue {{does not}} allow the {{definition}} of <b>user</b> <b>functions,</b> recursion, or looping constructs but does offer conditional if-then expressions within a probe action block. The lightweight nature of ProbeVue prohibits a Vue script from defining expensive looping or extensive branching operations that could degrade performance.|$|E
5000|$|UBASIC has line numbers. It {{does not}} use {{indentation}} to control structure. It has subroutines and <b>user</b> <b>functions</b> with passed parameters and local variables. Parameters can be passed by value or by name. <b>User</b> <b>functions</b> and subroutines may be passed as parameters. It has limited labels. It has various options for conditional functions. Users can indent as much as needed or not at all, and can have as much structure as wanted or spaghetti code. It {{is a mistake to}} consider UBASIC as [...] "not modern" [...] (as might be inferred by a reader of articles that confuse indentation with structure and don't favor line numbers). Having line numbers allows easy jumping to an intermediate point in a routine, which can sometimes save duplicating lines.|$|E
50|$|Apache Drill 1.9 added dynamic <b>user</b> defined <b>functions.</b>|$|R
5000|$|Grid calculator: combine grids through <b>user</b> defined <b>functions.</b>|$|R
40|$|To permit on-line {{control of}} {{experiments}} with an existing high-level interpreter language, this 3 -argument <b>user</b> <b>function</b> enables {{operation of the}} I/O bus, clock, and timed relays to be synchronized to external events. It also supports on-line files and machine language programs in high memory fields. Source type: Prin...|$|R
50|$|In telecommunications, a user is a person, organization, {{or other}} entity that employs the {{services}} provided by a telecommunication system, or by an information processing system, for transfer of information.A <b>user</b> <b>functions</b> as a source or final destination of user information, or both. A user {{may also be the}} subscriber, i.e. the customer paying for the service.|$|E
50|$|The stHrt layered {{browsing}} {{and change}} <b>user</b> <b>functions</b> {{are unique to}} such services. Layered Browsing creates a layer {{on top of the}} start page giving users the ability to surf the web without having to leave their homepage bringing new efficiencies to the web browsing experience. Efficiencies gained are similar to that of tab browsing. The Change User feature also bring unique efficiencies to such start pages by allowing a single computer to be shared by multiple members who can easy switch between homepages without a complex login procedure.|$|E
50|$|SQL Anywhere can be run on Windows, Windows CE, Mac OS X, {{and various}} UNIX platforms, {{including}} Linux, AIX, HP-UX and Solaris. Database files {{are independent of}} the operating system, allowing them to be copied between supported platforms. The product provides several standard interfaces (ODBC, JDBC, and ADO.NET) {{and a number of}} special interfaces such as PHP and Perl. The engine supports stored procedures, <b>user</b> <b>functions</b> (using Watcom SQL, T-SQL, Java, or C/C++), triggers, referential integrity, row-level locking, replication, high availability, proxy tables, and events (scheduled and system events). Strong encryption is supported for both database files and client-server communication.|$|E
3000|$|... at {{any time}} slot. A <b>user's</b> <b>function</b> for the {{probability}} of a successful packet transmission at fixed data rates depends on the transmission scheme (modulation and coding) being used and can be represented by a sigmoidal-like function of their power allocation for various modulation schemes [18]. Therefore, a user [...]...|$|R
2500|$|<b>User</b> defined <b>functions</b> {{are created}} using the {{following}} two built-in ...|$|R
5000|$|They {{can not use}} <b>User</b> Defined <b>Functions</b> or Stored Procedures.|$|R
5000|$|A new multimedia, and {{significantly}} updated, {{version of the}} English Talking Glossary of Genetics was released by the National Human Genome Research Institute in October, 2009. An identical update of the Spanish-language version was released in October, 2011. In September, 2011, an iPhone App of the English Talking Glossary was released by NHGRI and made available as a free download in the Apple App store. The App version contains all 3-D animations, high quality illustrations, the [...] "Test Your Gene IQ" [...] quiz, and similar <b>user</b> <b>functions</b> such as [...] "Suggest a Term" [...] and [...] "Mail This Term to a Friend." ...|$|E
50|$|The Yoix {{language}} is not an object oriented language, but makes use of over 165 object types that provide access {{to most of the}} standard Java classes. Because the Yoix interpreter is built entirely using Java technology, it means that Yoix applications are cross-platform, GUI-capable and both network and thread friendly, yet Yoix developers find themselves insulated from the more complex and error-prone parts of coding the same functionality directly in Java. It does not use reflection to access Java functionality and thus adds value by not only simplifying access to that functionality, but also improving application reliability by coding through both Java glitches and complicated Java features one-time, behind-the-scenes. The Yoix language includes safe pointers, addressing, declarations, and global and local variables. In addition to supporting native <b>user</b> <b>functions,</b> users can add their own builtin functions written in Java.|$|E
5000|$|The above {{function}} SEGMENTAREA {{works as}} expected if the parameters are scalars or single-element arrays, {{but not if}} they are multiple-element arrays since the condition ends up being based on a single element of the SIGN array - on the other hand, the user function could be modified to correctly handle vectorized arguments. Operation can sometimes be unpredictable since APL defines that computers with vector-processing capabilities should parallelise and may reorder array operations {{as far as possible}} - therefore, test and debug <b>user</b> <b>functions</b> particularly if they will be used with vector or even matrix arguments. This affects not only explicit application of a custom function to arrays, but also its use anywhere that a dyadic function may reasonably be used such as in generation of a table of results: 90 180 270 ¯90 ∘.SEGMENTAREA 1 ¯2 40 0 00 0 00 0 00 0 0 ...|$|E
5000|$|A {{function}} {{point is}} a [...] "unit of measurement" [...] to express the amount of business functionality an information system (as a product) provides to a <b>user.</b> <b>Function</b> points are used to compute a functional size measurement (FSM) of software. The cost (in dollars or hours) of a single unit is calculated from past projects.|$|R
50|$|Note (4): In Drizzle the <b>user</b> codes <b>functions</b> and {{procedures}} in C++.|$|R
30|$|Withall (2007) {{presents}} a catalog with thirty-seven requirements patterns organized in eight domains (fundamental, information, data entity, <b>user</b> <b>function,</b> performance, flexibility, access control and business). Each pattern addresses a specific functionality of these domains, but some patterns share and integrate information. Most patterns {{meet the specification}} of non-functional and technical requirements, {{some of which are}} also for functional requirements.|$|R
50|$|Operating {{systems are}} {{designed}} with {{one or the other}} of these two facilities, but not both. First, assume that a user process wishes to invoke a particular target system function. For the system call approach, the user process uses the trap instruction. The idea is that the system call should appear to be an ordinary procedure call to the application program; the OS provides a library of <b>user</b> <b>functions</b> with names corresponding to each actual system call. Each of these stub functions contains a trap to the OS function. When the application program calls the stub, it executes the trap instruction, which switches the CPU to kernel mode, and then branches (indirectly through an OS table), to the entry point of the function which is to be invoked. When the function completes, it switches the processor to user mode and then returns control to the user process; thus simulating a normal procedure return.|$|E
40|$|We {{present a}} {{prototype}} system aimed at providing spoken dialogue support for complex procedures aboard the International Space Station. The system allows navigation one line {{at a time}} or in larger steps. Other <b>user</b> <b>functions</b> include issuing spoken corrections, requesting images and diagrams, recording voice notes and spoken alarms, and controlling audio vol- ume...|$|E
40|$|In {{this paper}} {{presents}} the basic <b>user</b> <b>functions</b> development results, which are implemented in task solution in theoretical and applied mechanics {{with the use of}} functional programming possibilities offered by the computer system Mathematica. Examples of implementation of the above mentioned functions in task solution on kinematics of a point in curve-wave orthogonal coordinates...|$|E
40|$|The New <b>User</b> <b>Function</b> {{plan for}} {{identifying}} beneficial uses of space is described. Critical {{issues such as}} funding, manpower, and protection of user proprietary rights are discussed along with common barriers which impede {{the development of a}} user community. Studies for developing methodologies of identifying new users and uses of the space transportation system are included...|$|R
50|$|Optionally, {{the user}} code can be {{annotated}} with additional information. These annotations disclose some {{information on the}} behavior of the black-box <b>user</b> <b>function.</b> The PACT Compiler can utilize the information to obtain more efficient execution plans. However, while a missing annotation will not change the result of the execution, an incorrect Output Contract produces wrong results.|$|R
5000|$|Graphical <b>user</b> {{interface}}—This <b>function</b> enables <b>user</b> GUI interface to seamlessly {{talk to the}} camera(s) ...|$|R
