88|740|Public
2500|$|... {{literary}} works: {{comprising the}} title, form, {{and nature of}} each of the literary codes represented by the <b>user</b> <b>command</b> codes ...|$|E
2500|$|... all OpenRes <b>user</b> <b>command</b> codes ("compilation") - {{this was}} an {{alternate}} legal basis to allege that eRes commands are identical to or similar to OpenRes commands ...|$|E
2500|$|CP/M 2.2 had no sub-directories in {{the file}} structure, but {{provided}} 16 numbered user areas to organize files on a disk. To change user one had to simply type [...] "User X" [...] at the command prompt, X being {{the number of the}} user wanted; security was non-existent and not believed to be necessary. The user area concept was to make the single-user version of CP/M somewhat compatible with multi-user MP/M systems. A common patch for the CP/M and derivative operating systems was to make one user area accessible to the user independent of the currently set user area. A <b>USER</b> <b>command</b> allowed the user area to be changed to any area from 0 to 15. User 0 was the default. If one changed to another user, such as USER 1, the material saved on the disk for this user would only be available to USER 1; USER 2 {{would not be able to}} see it or access it. However, files stored in the USER 0 area were accessible to all other users; their location was specified with a prefatory path, since the files of USER 0 were only visible to someone logged in as USER 0. The user area feature arguably had little utility on small floppy disks, but it was useful for organizing files on machines with hard drives. The intent of the feature was to ease use of the same computer for different tasks. For example, a secretary could do data entry, then, after switching USER areas, another employee could use the machine to do billing without their files intermixing.|$|E
5000|$|Typical <b>user</b> <b>commands</b> {{available}} to the Berkeley print system are: ...|$|R
5000|$|Typical <b>user</b> <b>commands</b> {{available}} to the System V printing system are: ...|$|R
5000|$|<b>Command</b> window - <b>user</b> <b>commands</b> (using {{the same}} or similar syntax as DEBUG.COM and symdeb) could be entered here.|$|R
5000|$|... {{literary}} works: {{comprising the}} title, form, {{and nature of}} each of the literary codes represented by the <b>user</b> <b>command</b> codes ...|$|E
5000|$|... all OpenRes <b>user</b> <b>command</b> codes ("compilation") - {{this was}} an {{alternate}} legal basis to allege that eRes commands are identical to or similar to OpenRes commands ...|$|E
5000|$|MontaVista Integration Platformbased on BitBake, {{analogous}} to make, which analyzes {{a set of}} directives and then builds a task dependency tree to satisfy a <b>user</b> <b>command.</b> BitBake then executes the defined tasks to completion.|$|E
5000|$|...q, quick format, {{show only}} names {{and the number}} of all users logged on, {{disables}} all other options; equivalent to <b>users</b> <b>command</b> line utility ...|$|R
5000|$|The view is {{a passive}} {{interface}} that displays data (the model) and routes <b>user</b> <b>commands</b> (events) to the presenter to act upon that data.|$|R
50|$|User {{authentication}} {{is controlled}} by the Perforce system administrator. Password strength is configurable; ticket-based authentication can be configured as well. Triggers (custom scripts or programs that run at predefined events) can be set on many but not all Perforce <b>user</b> <b>commands</b> and used to extend user authentication (with LDAP or SSO, for example), to block or allow <b>user</b> <b>commands,</b> and to constrain or normalize file modifications. Triggers are run by the Perforce server and {{do not have access to}} client machines or workspaces.|$|R
50|$|In computing, kill pill {{is a term}} {{given to}} {{mechanisms}} and technologies designed to render systems useless either by <b>user</b> <b>command,</b> or under a predefined set of circumstances. Kill pill technology is most commonly used to disable lost or stolen devices for security purposes, but {{can also be used}} for the enforcement of rules and contractual obligations.|$|E
50|$|The Berkeley {{printing}} system {{is one of}} several standard architectures for printing on the Unix platform. It originated in 2.10BSD, and is used in BSD derivatives such as FreeBSD, NetBSD, OpenBSD, and DragonFly BSD. A system running this print architecture could traditionally be identified by the use of the <b>user</b> <b>command</b> lpr as the primary interface to the print system, as opposed to the System V {{printing system}} lp command.|$|E
50|$|The {{standard}} <b>user</b> <b>command</b> {{line and}} scripting interface is the POSIX shell, {{an extension of}} the Bourne Shell based on an early version of the Korn Shell. Other user-level programs, services and utilities include awk, echo, ed, vi, and hundreds of others. Required program-level services include basic I/O (file, terminal, and network) services. A test suite accompanies the standard. It is called PCTS or the POSIX Certification Test Suite.|$|E
5000|$|Package {{managers}} {{are charged with}} the task of finding, installing, maintaining or uninstalling software packages upon the <b>user's</b> <b>command.</b> Typical functions of a package management system include: ...|$|R
5000|$|... provide {{enhanced}} interactivity such as navigating and selecting content {{elements to}} be played, making queries into the content elements, reacting to <b>user</b> <b>commands</b> and changes, providing annotations, etc.; ...|$|R
40|$|Making robot {{technology}} {{accessible to}} general endusers promises numerous benefits for {{all aspects of}} life. However, it also poses many challenges by requiring increasingly autonomous operation and the capability to interact with users that are generally not skilled robot operators. This paper presents an approach to variable autonomy that integrates <b>user</b> <b>commands</b> at varying levels of abstraction into an autonomous reinforcement learning component to permit faster policy acquisition and to modify robot behavior based on the preferences of the <b>user.</b> <b>User</b> <b>commands</b> are used here as training input {{as well as to}} modify the reward structure of the learning component. Safety of the mechanism is ensured in the underlying control substrate as well as by an interface layer that suppresses inconsistent <b>user</b> <b>commands.</b> To illustrate the applicability of the presented approach, it is employed in a set of navigation experiments on a mobile and a walking robot {{in the context of the}} MavHome project...|$|R
5000|$|Hubs may {{send out}} user {{commands}} to clients. These commands are only raw protocol commands {{and are used}} mostly for making a particular task simpler. For example, the hub cannot send a <b>user</b> <b>command</b> that will trigger the default browser to visit a website. It can, however, add the command [...] "+rules" [...] (where '+' indicates to the hub that it's a command - this may vary) to display the hub's rules.|$|E
5000|$|The {{printing}} subsystem of UNIX System V is one {{of several}} standardized systems for printing on Unix, and is typical of commercial System V-based Unix versions such as Solaris and SCO OpenServer. A system running this print architecture could traditionally be identified by the use of the <b>user</b> <b>command</b> [...] as the primary interface to the print system, as opposed to the BSD [...] command (though some systems provide [...] as an alias to [...] ).|$|E
50|$|FTP login {{utilizes}} {{a normal}} username and password scheme for granting access. The username {{is sent to}} the server using the <b>USER</b> <b>command,</b> and the password is sent using the PASS command. If the information provided by the client is accepted by the server, the server will send a greeting to the client and the session will commence. If the server supports it, users may log in without providing login credentials, but the same server may authorize only limited access for such sessions.|$|E
40|$|Modeling <b>user’s</b> <b>commands</b> using ontologies In this paper, we tackle Natural Language (NL) command {{interpretation}} for artificial agents. Our architecture {{relies on}} a logical modeling of the <b>user’s</b> <b>command</b> to enhance the semantic interpretation. This allows us to catch the relations between terms in the user sentence. We present our approach based on a surface syntactic analysis. We first define our surface analysis algorithm, based on {{the recognition of the}} ontology relation in a command to build its logical model. Lastly, we briefly show how our model can be used for semantic interpretation of the command. ...|$|R
40|$|Includes bibliographical {{references}} (pages 64 - 64) Creating {{tools and}} devices to provide ways to give independence to {{persons with disabilities}} is important. Everyone should {{have an opportunity to}} live as independently as possible and have a life filled with their own decisions and choices. Utilizing devices can alleviate some of the challenges for persons with limited mobility. In this case, a fuzzy logic controller was developed to dynamically control and interpret <b>user</b> <b>commands</b> to the motors of a powered wheelchair. This would assists the user into navigating their surroundings employing <b>user</b> <b>commands</b> via electroencephalography (EEG) signals, facial movements, and vocal inputs. Human subjects participated in a study. In this particular investigation, the results are from individuals with no physical and cognitive disabilities. Subjects that participated utilized the <b>user</b> <b>commands</b> mentioned previously in order to maneuver through an obstacle course to meet a particular objective. The course was completed using different modes of motion control: a manual mode, a hybrid mode, and a hybrid mode combined with the fuzzy logic controller. The manual mode was used as a baseline as there is no machine intervention from path planning algorithms or fuzzy logic interpretation. These different modes were compared based on successfulness of completion, time duration to complete the objective, number of collisions encountered, and distances travelled but not be limited to these comparison in results. Using the results from the study, the <b>user</b> <b>commands</b> and controller were evaluated and rated on various criteria...|$|R
5000|$|The entire [...] "Undo/Redo" [...] {{history of}} <b>user</b> <b>commands</b> {{in a picture}} editing program, for example, when written to a file, {{constitutes}} a journal capable of recovering the state of an edited pictures {{at any point in}} time.|$|R
50|$|Excel {{became the}} first {{spreadsheet}} to allow the user to define the appearance of spreadsheets (fonts, character attributes and cell appearance). It also introduced intelligent cell recomputation, where only cells dependent on the cell being modified are updated (previous spreadsheet programs recomputed everything all the time or waited for a specific <b>user</b> <b>command).</b> Excel introduced auto-fill, the ability to drag and expand the selection box to automatically copy cell or row contents to adjacent cells or rows, adjusting the copies intelligently by automatically incrementing cell references or contents. Excel also introduced extensive graphing capabilities.|$|E
50|$|Another {{approach}} {{used in some}} graphical games with programming elements is to present the player with a command line interface to issue orders via a domain-specific language to direct objects within the game, allowing the player to reissue commands as the situation changes rather than crafting a pre-made program. Games like Quadrilateral Cowboy and Duskers have the <b>user</b> <b>command</b> several small robotic creatures in tandem through the language of code to reach a certain goal. Hackmud presents the player with a simulated mainframe interface through which they issue commands to progress forward.|$|E
5000|$|Some text editors {{are small}} and simple, while others offer broad and complex functions. For example, Unix and Unix-like {{operating}} systems have the pico editor (or a variant), but many also include the vi and Emacs editors. Microsoft Windows systems come with the simple Notepad, though many people - especially programmers - prefer other [...] with more features. Under Apple Macintosh's classic Mac OS there was the native SimpleText, which was replaced in Mac OS X by TextEdit, which combines features of a text editor with those typical of a word processor such as rulers, margins and multiple font selection. These features are not available simultaneously, but must be switched by <b>user</b> <b>command,</b> or through the program automatically determining the file type.|$|E
40|$|Computer program {{provides}} natural-language process control from IBM PC or compatible computer. Sets up process-control system that either runs without operator or run by {{workers who have}} limited programming skills. Includes three smaller programs. Two of them, written in FORTRAN 77, record data and control research processes. Third program, written in Pascal, generates FORTRAN subroutines used by other two programs to identify <b>user</b> <b>commands</b> with device-driving routines written by user. Also includes set of input data allowing user to define <b>user</b> <b>commands</b> to be executed by computer. Requires personal computer operating under MS-DOS with suitable hardware interfaces to all controlled devices. Also requires FORTRAN 77 compiler and device drivers written by user...|$|R
40|$|This {{document}} {{describes the}} Vaxnews utility for the manager point of view. The general <b>user</b> <b>commands</b> {{are described in}} 'Vaxnews version 3. 12 : user manual'SIGLEAvailable at INIST (FR), Document Supply Service, under shelf-number : RP 12210 / INIST-CNRS - Institut de l'Information Scientifique et TechniqueFRFranc...|$|R
50|$|The {{function}} of VAL is to regulate and control a robot system by following <b>user</b> <b>commands</b> or instructions. In {{addition to being}} a compact stand-alone system, VAL has been designed to be highly interactive to minimize programing time, and to provide as many programming aids as possible.|$|R
5000|$|Unix was {{selected}} as the basis for a standard system interface partly because it was [...] "manufacturer-neutral." [...] However, several major versions of Unix existed—so there was a need to develop a common denominator system. The POSIX specifications for Unix-like operating systems originally consisted of a single document for the core programming interface, but eventually grew to 19 separate documents (POSIX.1, POSIX.2, etc.). [...] The standardized <b>user</b> <b>command</b> line and scripting interface were based on the UNIX System V shell. Many user-level programs, services, and utilities (including awk, echo, ed) were also standardized, along with required program-level services (including basic I/O: file, terminal, and network). POSIX also defines a standard threading library API which is supported by most modern operating systems. In 2008, most parts of POSIX were combined into a single standard (IEEE Std 1003.1-2008, also known as POSIX.1-2008).|$|E
5000|$|Genera also {{featured}} {{the most extensive}} networking interoperability software seen to that point. A local area network system called Chaosnet had been invented for the Lisp Machine (predating the commercial availability of Ethernet). The Symbolics system supported Chaosnet, but also {{had one of the}} first TCP/IP implementations. It also supported DECnet and IBM's SNA network protocols. A Dialnet protocol used phone lines and modems. Genera would, using hints from its distributed [...] "namespace" [...] database (somewhat similar to DNS, but more comprehensive, like parts of Xerox's Grapevine), automatically select the best protocol combination to use when connecting to network service. An application program (or a <b>user</b> <b>command)</b> would only specify the name of the host and the desired service. For example, a host name and a request for [...] "Terminal Connection" [...] might yield a connection over TCP/IP using the Telnet protocol (although there were many other possibilities). Likewise, requesting a file operation (such as a Copy File command) might pick NFS, FTP, NFILE (the Symbolics network file access protocol), or one of several others, and it might execute the request over TCP/IP, Chaosnet, or whatever other network was most suitable.|$|E
5000|$|CP/M 2.2 had no sub-directories in {{the file}} structure, but {{provided}} 16 numbered user areas to organize files on a disk. To change user one had to simply type [...] "User X" [...] at the command prompt, X being {{the number of the}} user wanted; security was non-existent and not believed to be necessary. The user area concept was to make the single-user version of CP/M somewhat compatible with multi-user MP/M systems. A common patch for the CP/M and derivative operating systems was to make one user area accessible to the user independent of the currently set user area. A <b>USER</b> <b>command</b> allowed the user area to be changed to any area from 0 to 15. User 0 was the default. If one changed to another user, such as USER 1, the material saved on the disk for this user would only be available to USER 1; USER 2 {{would not be able to}} see it or access it. However, files stored in the USER 0 area were accessible to all other users; their location was specified with a prefatory path, since the files of USER 0 were only visible to someone logged in as USER 0. The user area feature arguably had little utility on small floppy disks, but it was useful for organizing files on machines with hard drives. The intent of the feature was to ease use of the same computer for different tasks. For example, a secretary could do data entry, then, after switching USER areas, another employee could use the machine to do billing without their files intermixing.|$|E
5000|$|... • The Explosive Ordnance Disposal (EOD) robot {{simulator}} {{developed by}} the European Aeronautic Defence and Space Company (EADS) for training purposes. EADS uses Vortex to model the physical behaviour of the robot as it maneuvers in its simulated environment, interacting with other objects while processing <b>user</b> <b>commands.</b>|$|R
50|$|With the XploRe Quantlet Client {{users were}} able to run XploRe as Java applet in a web browser. The applet sent the <b>user</b> <b>commands</b> via a TCP/IP based {{communication}} protocol to the XploRe Quantlet Server, which computed the necessary results and sent {{them back to the}} client.|$|R
50|$|These {{programs}} {{support the}} line printer daemon protocol, so that other machines {{on a network}} can submit jobs to a print queue on a machine running the Berkeley printing system, and so that the Berkeley printing system <b>user</b> <b>commands</b> can submit jobs to machines that support that protocol.|$|R
