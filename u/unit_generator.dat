30|531|Public
50|$|Unit {{generators}} {{form the}} building blocks for designing synthesis and signal processing algorithms in software. For example, a simple <b>unit</b> <b>generator</b> called OSC could generate a sinusoidal waveform of a specific frequency (given as an input or argument to the function or class that represents the <b>unit</b> <b>generator).</b> ENV could be a <b>unit</b> <b>generator</b> that delineates a breakpoint function. Thus ENV {{could be used to}} drive the amplitude envelope of the oscillator OSC through the equation OSC*ENV. Unit generators often use predefined arrays of values for their functions (which are filled with waveforms or other shapes by calling a specific generator function).|$|E
50|$|The <b>unit</b> <b>generator</b> {{theory of}} sound {{synthesis}} was first developed and implemented by Max Mathews {{and his colleagues}} at Bell Labs in the 1950s.|$|E
5000|$|One notable {{difference}} between Nyquist and more traditional MUSIC-N languages is that Nyquist does not segregate synthesis functions (see <b>unit</b> <b>generator)</b> from [...] "scoring" [...] functions. For example Csound is actually two languages, one for creating [...] "orchestras" [...] {{the other for}} writing [...] "scores". With Nyquist these two domains are combined.|$|E
40|$|The ChucK {{programming}} language lacks straightforward mechanisms for extension beyond its built-in programming and processing facilities. Chugens {{address this issue}} by allowing programmers to live-code new <b>unit</b> <b>generators</b> in ChucK in real-time. Chubgraphs also allow new <b>unit</b> <b>generators</b> {{to be built in}} ChucK, by defining specific arrangements of existing <b>unit</b> <b>generators.</b> ChuGins allow a wide array of high-performance <b>unit</b> <b>generators</b> and general functionality to be exposed in ChucK by providing a dynamic binding between ChucK and native C/C++-based compiled code. Performance and code analysis shows that the most suitable approach for extending ChucK is situation-dependent. 1...|$|R
50|$|On 1 September 2014, {{the current}} two <b>unit</b> <b>generators</b> were decommissioned.|$|R
40|$|Our team {{realized}} that a need existed for a music programming interface in the Minim audio library of the Processing programming environment. The audience for this new interface would be the novice programmer interested in using music {{as part of the}} learning experience, though the interface should also be complex enough to benefit experienced artist-programmers. We collected many ideas from currently available music programming languages and libraries to design and create the new capabilities in Minim. The basic mechanisms include chained <b>unit</b> <b>generators,</b> instruments, and notes. In general, one “patches ” <b>unit</b> <b>generators</b> (for example, oscillators, delays, and envelopes) together in order to create synthesis algorithms. These algorithms can then either create continuous sound, or be used in instruments to play notes with specific start time and duration. We have written a base set of <b>unit</b> <b>generators</b> to enable a wide variety of synthesis options, and the capabilities of the <b>unit</b> <b>generators,</b> instruments, and Processing allow {{for a wide range of}} composition techniques...|$|R
50|$|Studies from EMG {{recordings}} {{have indicated}} that reciprocal inhibition between hip-related interneurons in the CPG for the scratch reflex is not necessary for the production and maintenance of the hip-flexor rhythm that is {{a key part of}} the scratch reflex. This research further supports the findings on switch and hybrid movements, which suggest a modular organization of <b>unit</b> <b>generator</b> CPGs used in combination to achieve a task.|$|E
50|$|The only {{locomotives}} {{built for}} British Railways at the works, were the twenty BR Class 28 diesel electrics during 1958-59, and the experimental 25kV AC locomotive E1000 {{which was built}} by converting the gas turbine locomotive E18100. Work commenced in January 1958 when E18100 was brought to Bowesfield Works from storage at Dukinfield Works. The conversion of E18100 involved {{the removal of the}} gas turbine <b>unit,</b> <b>generator</b> and the middle traction motor from each bogie, which changed the locomotive from a Co-Co to an A1A-A1A wheel arrangement. The necessary electrical equipment such as the transformer, mercury arc rectifiers and pantograph etc. was installed, with the work completed by October 1958.|$|E
40|$|This article {{presents}} a new framework for <b>unit</b> <b>generator</b> development for Csound, supporting a full object-oriented programming approach. It introduces {{the concept of}} unit generators and opcodes, and its centrality with regards to music programming languages in general, and Csound in specific. The layout of an opcode {{from the perspective of}} the Csound C-language API is presented, with some outline code examples. This is followed by a discussion which places the <b>unit</b> <b>generator</b> within the object-oriented paradigm and the motivation for a full C++ programming support, which is provided by the Csound Plugin Opcode Framework (CPOF). The design of CPOF is then explored in detail, supported by several opcode examples. The article concludes by discussing two key applications of object-orientation and their respective instances in the Csound code base...|$|E
50|$|NTN Wälzlager in Erkrath, Germany {{produces}} precision bearings for gear <b>units,</b> <b>generators</b> and rotor shafts.|$|R
50|$|<b>Unit</b> <b>generators</b> (or ugens) are {{the basic}} formal units in many MUSIC-N-style {{computer}} music programming languages. They are sometimes called opcodes (particularly in Csound), though this expression is not accurate in {{that these are not}} machine-level instructions.|$|R
50|$|Developed {{over many}} years, it {{currently}} has nearly 1700 <b>unit</b> <b>generators.</b> One of its greatest strengths {{is that it}} is completely modular and extensible by the user. Csound is closely related to the underlying language for the Structured Audio extensions to MPEG-4, SAOL.|$|R
40|$|PV Stoch is a phase vocoder (PV) <b>unit</b> <b>generator</b> (UGen) for SuperCollider. Its {{objective}} is {{the exploration of}} meth-ods used in “non-standard synthesis”, especially in Dynamic Stochastic Synthesis (Xenakis), in another domain. In con-trast to their original conception, the methods are applied in the frequency domain. This paper discusses some of the compositional motivations and considerations behind the ap-proach, it gives {{a description of the}} actual synthesis method and its implementation, as well as a summary of the results and conclusions drawn. ...|$|E
40|$|A {{stochastic}} model for {{visual evoked response}} generation is proposed based on a compound neurological generator approach. Participation of individual generators is stochastically modelled in a physiologically realistic manner that captures the inherent variability in latencies and amplitudes associated with the component phases of the response. The model is invertible such that decomposition of real responses to reveal individual <b>unit</b> <b>generator</b> participation is possible and suggests that conventional averaging techniques may provide a truer picture of the visual evoked response than previously thought...|$|E
40|$|We {{describe}} a <b>unit</b> <b>generator</b> based audio synthesis programming environment written in pure Java. The environment {{is based on}} a foundation structure consisting of a small number of Java interfaces and abstract classes, and a potentially unlimited number classes and implementing a single method. Filter-graphs, sometimes called “patches”, are created by linking together unit generators in arbitrary complex graph structures. Patches can be rendered in real-time with special unit generators that communicate with the audio hardware, which we have implemented using the JavaSound API. 1...|$|E
50|$|The {{fire unit}} {{consists}} of: measuring radar, 1-3 radio collars, 4 launchers, command car, trolley and several <b>units</b> (<b>generators).</b> Trolley, command car, tracking device and aggregates were individually housed on single-axle trailers, the measuring radar and missile launchers on each two-axle trailers.|$|R
40|$|This paper {{presents}} a cross-platform C++ programming environment designed for rapid prototyping of music synthesis and audio processing programs. The Synthesis ToolKit offers {{an array of}} <b>unit</b> <b>generators</b> for filtering, input/output, etc., as well as examples of new and classic synthesis and effects algorithms for research, teaching, performance, and composition purposes. ...|$|R
50|$|The SC Server {{application}} {{supports a}} simple C plugin API {{making it easy}} to write efficient sound algorithms (<b>unit</b> <b>generators),</b> which can then be combined into graphs of calculations. Because all external control in the server happens via OSC, it is possible to use it with other languages or applications.|$|R
40|$|This paper {{shows the}} results of an {{investigation}} performed with a nonlinear model of a power <b>unit</b> <b>generator,</b> composed of rotor and oil-film journal bearings, whose purpose is to simulate a subsynchronous whirling of the shaft. This study has shown that abnormal changes in the machine-train alignment were able to force the journal average position to move to a critical area of the bearing where destabilizing forces may be generated. The rotor system sensitivity to oil-whip phenomena due to changes in the machine alignment has been investigated. Comparisons between experimental data and numerical results are shown...|$|E
40|$|The Inquiry Page is a {{web site}} for {{collaborative}} curriculum development. It supports a range of activities in which educators are encouraged to investigate, create, discuss, and reflect. Teachers inquire through their access to resources on teaching and learning, including quotes about inquiry teaching, articles, project links, curriculum units, and content resources. They communicate with other teachers through various online communication media. They construct their own versions of curricula using an online inquiry <b>unit</b> <b>generator.</b> They express themselves through these units and through sharing both literal and textual photos of their classrooms. published or submitted for publicationis peer reviewe...|$|E
40|$|ChucK re-factors {{the idea}} of a {{computer}} music language into three orthogonal basis components: <b>unit</b> <b>generator</b> connections that are data-flow only, globally consistent ”first-class ” time control, and sample-synchronous concurrency. The syntax, semantic, and usage have been discussed in previous works. The focus and contributions of this paper are (1) to examine the philosophies and decisions in the language design (2) to describe ChucK’s implementation and runtime model, and (3) to outline potential applications enabled by this framework. We present an experiment in designing a computer music language ”from scratch ” and show how things work. We hope these ideas may provides an interesting reference for future computer music systems. 1...|$|E
50|$|Founded {{in early}} 2008, EcoMotors is an American company {{developing}} and commercializing an opposed-piston opposed-cylinder (OPOC) engine {{for use in}} cars, light trucks, commercial vehicles, aerospace, marine, agriculture, auxiliary power <b>units,</b> <b>generators,</b> etc. This engine was promoted to significantly improve fuel efficiency, and substantially reduce production costs when compared to convententional internal combustion engines.|$|R
40|$|Let K {{be a real}} {{quadratic}} field. For certain K with sufficiently small discriminant {{we produce}} explicit <b>unit</b> <b>generators</b> for specific ray class fields of K using a numerical method that arose {{in the study of}} complete sets of equiangular lines in C^d (known in quantum information as symmetric informationally complete measurements or SICs). The construction in low dimensions suggests a general recipe for producing <b>unit</b> <b>generators</b> in infinite towers of ray class fields above arbitrary K and we summarise this in a conjecture. Such explicit generators are notoriously difficult to find, so this recipe may be of some interest. In a forthcoming paper we shall publish promising results of numerical comparisons between the logarithms of these canonical units and the values of L-functions associated to the extensions, following the programme laid out in the Stark Conjectures. Comment: 10 pages. Comments welcome. v 2 improved presentation and minor typos fixe...|$|R
40|$|This paper {{describes}} {{a collection of}} roughly 60 (as of May, 1996) classes in C++, designed for the rapid creation and connection of music synthesis and audio processing systems. Primary {{attention has been paid}} to cross-platform functionality, ease of use, instructional code examples, and real-time control. The types of objects can be divided into three categories: 1) basic audio sample sources and manipulators called <b>unit</b> <b>generators,</b> 2) musical instrument and audio signal processing algorithms built from <b>unit</b> <b>generators,</b> and 3) control signal and user interface handlers. Instrument synthesis algorithms include additive (Fourier) synthesis, subtractive synthesis, frequency modulation synthesis of various topologies, modal (resonant filter) synthesis, and a variety of physical models including stringed and wind instruments. 1 The C++ Synthesis Toolkit: Motivations The Synthesis Toolkit in C++ includes many new algorithms and instruments, but it is also a port of most of the algorithms and musica...|$|R
40|$|In {{this paper}} {{we present a}} {{modified}} version of the Hyperbolic Tangent Activation Function as a learning <b>unit</b> <b>generator</b> for neural networks. The function uses an integer calibration constant as an approximation to the Euler number, e, based on a quadratic Real Number Formula (RNF) algorithm and an adaptive normalization constraint on the input activations to avoid the vanishing gradient. We demonstrate the effectiveness of the proposed modification using a hypothetical and real world dataset and show that lower run-times can be achieved by learning algorithms using this function leading to improved speed-ups and learning accuracies during training. Comment: 22 pages, 12 figures, 3 tables; Submitted for Publicatio...|$|E
40|$|Presented at the 7 th International Conference on Auditory Display (ICAD), Espoo, Finland, July 29 -August 1, 2001. We {{describe}} a <b>unit</b> <b>generator</b> based audio synthesis programming environment written in pure Java. The environment {{is based on}} a foundation structure consisting of a small number of Java interfaces and abstract classes, and a potentially unlimited number of unit generators, which are created by extending the abstract classes and implementing a single method. Filter-graphs, sometimes called ``patches'', are created by linking together unit generators in arbitrary complex graph structures. Patches can be rendered in real-time with special unit generators that communicate with the audio hardware, which we have implemented using the JavaSound API...|$|E
40|$|Abstract [...] Ethernet {{communication}} devices, such as adapter, hub, {{bridge and}} switch, all follow IEEE 802. 3 standard protocol. We have designed and implemented an integrated 10 / 100 Mbps Ethernet MAC (Medium Access Control) mechanism. The MAC unit {{is used to}} handle receive/transmit processes of network packet stream. To meet the requirement of different communication devices, we design an automatic MAC <b>unit</b> <b>generator.</b> Users can select the desired number of MAC units through parametric environment setup. To verify the application of MAC unit, we provide a 10 / 100 Mbps layer- 2 switch simulator and an automatic test pattern generator. The FPGA demo system reveals {{the validity of the}} MAC unit...|$|E
50|$|API Sanity Checker is an {{automatic}} <b>unit</b> test <b>generator</b> for C/C++ shared libraries.|$|R
5000|$|... #Caption: Interior of Coteau Creek {{powerhouse}} during 2013 rewind of <b>Unit</b> 2 <b>generator.</b>|$|R
5000|$|Meteorite and {{radiation}} defence screens {{can also be}} used in a defensive capacity. The Bergman anti-gravity forcefield is the ultimate defence measure, but it cannot be used without advance notice; its power requirements are enormous and the main <b>unit</b> <b>generators</b> must be supplemented with power generators stripped from all servicable Eagles for the shield to function for any length of time.|$|R
40|$|A live {{demonstration}} of the real-time sonification of a complex numerical calculation of a computational fluid dynamics (CFD) simulation is to be performed. The CFD process is implemented in a Java programming environment using JSyn [1] as the sound synthesis tool. A FM Formant Instrument (3 oscillators) is used as the main <b>unit</b> <b>generator</b> (a total of 26 instruments are used to represent computational cells in the domain). All parameters of the instruments, together with the envelopes of each sound event, are mapped directly from the computational process in real time. The computational process is iterative in nature, hence the listener experiences the unfolding of lengthy “phrases ” which pan {{from left to right}} and represent the “marching ” of the solver through the computational domain. 1...|$|E
40|$|EBBO) for Economic Load Dispatch (ELD) {{problems}} in power system {{in order to}} obtain optimal economic dispatch with minimum generation cost. Approach: A viable methodology has been implemented for a 20 <b>unit</b> <b>generator</b> system to minimize the fuel cost function considering the transmission loss and system operating limit constraints and is compared with other approaches such as BBO, Lambda Iteration and Hopfield Model. Results: Proposed algorithm has been applied to ELD problems for verifying its feasibility and the comparison of results are tabulated and pictorial visualization for convergence of EBBO is represented. Conclusion: Comparing with the other existing techniques, the EBBO gives better result by considering the quality of the solution obtained. This method could be an alternative approach for solving the ELD {{problems in}} practical power system...|$|E
40|$|Problem statement: Implementation of an Effective Biogeography Based Algorithm (EBBO) for Economic Load Dispatch (ELD) {{problems}} in power system {{in order to}} obtain optimal economic dispatch with minimum generation cost. Approach: A viable methodology has been implemented for a 20 <b>unit</b> <b>generator</b> system to minimize the fuel cost function considering the transmission loss and system operating limit constraints and is compared with other approaches such as BBO, Lambda Iteration and Hopfield Model. Results: Proposed algorithm has been applied to ELD problems for verifying its feasibility and the comparison of results are tabulated and pictorial visualization for convergence of EBBO is represented. Conclusion: Comparing with the other existing techniques, the EBBO gives better result by considering the quality of the solution obtained. This method could be an alternative approach for solving the ELD {{problems in}} practical power system...|$|E
40|$|In {{the context}} of {{building}} musical instruments using computers, mapping control data to sound generation has been discussed for decades. Yet unlike the standard <b>unit</b> <b>generators</b> for synthesis and effects, there is no standard catalog of mapping methods. The Mapping Library for Pd is a fledgling library of mapping primitives {{with the aim of}} cataloging existing mapping methods. Also included are techniques for conditioning sensor data to make it usable in {{the context of}} instrument design. As {{part of the process of}} generating a catalog of fundamental building blocks for mapping, we are creating a software library of mapping methods based on both research and real world projects. The ultimate goal is to derive a set of <b>unit</b> <b>generators</b> for mapping, plotting out the most basic building blocks for creating instrument mappings. This paper presents some foundations and recent exploration related to shaping curves and physical modeling functions. 0. 1 Keywords instrument building, mapping, physical modeling, shaping curves, sensor data 1...|$|R
50|$|In 2014, Northrop Grumman {{was chosen}} as the prime {{designer}} and manufacturer of the turbine <b>generator</b> <b>units.</b> Turbine <b>generators</b> convert mechanical energy from the steam turbines into electrical energy. The electrical energy is then used for powering onboard systems as well as for propulsion via electric motor.|$|R
5000|$|... jMusic has a data {{structure}} {{that is based}} on a musical score metaphor, and consists of a hierarchy of notes, phrases, parts and score. jMusic also has a sound synthesis architecture and [...] "instruments" [...] can be created from a chain of [...] "audio objects" [...] (similar to <b>unit</b> <b>generators</b> in other languages). A jMusic score can be rendered with jMusic instruments to an audio file.|$|R
