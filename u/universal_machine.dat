293|3180|Public
5|$|The Army {{decided that}} an {{individual}} machine gun, lighter than the M60, but with more firepower than the M16, would be advantageous; troops {{would no longer have}} to rely on rifles for automatic fire. Through the 1960s, the introduction of a machine gun into the infantry squad was examined in various studies. While there was a brief flirtation with the concept of a flechette- or dart-firing <b>Universal</b> <b>Machine</b> Gun during one study, most light machine gun experiments concentrated on the Stoner 63 light machine gun, a modular weapon that could be easily modified for different purposes. The Stoner63 LMG saw combat for a brief period in Vietnam with the Marine Corps, and later on a wider scale with the U.S. Navy SEALs.|$|E
25|$|Binary lambda {{calculus}} – A version of {{lambda calculus}} with binary I/O, a binary encoding of terms, and a designated <b>universal</b> <b>machine.</b>|$|E
25|$|The on-line {{version of}} Turing's paper has these {{corrections}} in an addendum; however, corrections to the <b>Universal</b> <b>Machine</b> {{must be found}} in an analysis provided by Emil Post.|$|E
40|$|We present <b>universal</b> Turing <b>{{machines}}</b> with state-symbol {{pairs of}} (5, 5), (6, 4), (9, 3) and (15, 2). These machines simulate our new variant of tag system, the bi-tag system {{and are the}} smallest known single-tape <b>universal</b> Turing <b>machines</b> with 5, 4, 3 and 2 -symbols, respectively. Our 5 -symbol machine uses {{the same number of}} instructions (22) as the smallest known <b>universal</b> Turing <b>machine</b> by Rogozhin. Also, all of the <b>universal</b> <b>machines</b> we present here simulate Turing machines in polynomial time...|$|R
40|$|AbstractThe main {{topics of}} the present work are <b>universal</b> <b>machines</b> for plain and prefix-free {{description}} complexity and their domains. It is characterised when an r. e.  set W is the domain of a <b>universal</b> plain <b>machine</b> {{in terms of the}} description complexity of the spectrum function sW mapping each non-negative integer n to the number of all strings of length n in W; furthermore, a characterisation of the same style is given for supersets of domains of <b>universal</b> plain <b>machines.</b> Similarly the prefix-free sets which are domains or supersets of domains of <b>universal</b> prefix-free <b>machines</b> are characterised. Furthermore, it is shown that the halting probability ΩV of an r. e.  prefix-free set V containing the domain of a <b>universal</b> prefix-free <b>machine</b> is Martin-Löf random, while V may not be the domain of any <b>universal</b> prefix-free <b>machine</b> itself. Based on these investigations, the question whether every domain of a <b>universal</b> plain <b>machine</b> is the superset of the domain of some <b>universal</b> prefix-free <b>machine</b> is discussed. A negative answer to this question had been presented at CiE 2010 by Mikhail Andreev, Ilya Razenshteyn and Alexander Shen, while this paper was under review...|$|R
40|$|We present {{deterministic}} {{polynomial time}} <b>universal</b> Turing <b>machines</b> with statesymbol pairs of (3, 11), (5, 7), (6, 6), (7, 5) and (8, 4). These are the smallest known <b>universal</b> Turing <b>machines</b> that simulate Turing machines in polynomial time. Key words: universality, small <b>universal</b> Turing <b>machine,</b> computational complexity, polynomial time. ...|$|R
25|$|Specifically, in its {{original}} form the third proof is badly marred by technical errors. And even after Bernays' suggestions and Turing's corrections, errors remained {{in the description of}} the <b>universal</b> <b>machine.</b> And confusingly, since Turing was unable to correct his original paper, some text within the body harks to Turing's flawed first effort.|$|E
25|$|Turing then {{describes}} (rather loosely) {{the algorithm}} (method) {{to be followed}} by a machine he calls H. Machine H contains within it the decision-machine D (thus D is a “subroutine” of H). Machine H’s algorithm is expressed in H’s table of instructions, or perhaps in H’s Standard Description on tape and united with the <b>universal</b> <b>machine</b> U; Turing does not specify this.|$|E
25|$|In the following, we have {{to remind}} {{ourselves}} {{that every one of}} Turing’s “computing machines” is a binary-number generator/creator that begins work on “blank tape”. Properly constructed, it always cranks away ad infinitum, but its instructions are always finite. In Turing’s proofs, Turing’s tape had a “left end” but extended right ad infinitum. For sake of example below we will assume that the “machine” is not a <b>Universal</b> <b>machine,</b> but rather the simpler “dedicated machine” with the instructions in the Table.|$|E
40|$|Abstract. We {{present a}} number of time-efficient small <b>universal</b> Turing <b>machines.</b> We show that there exists {{deterministic}} polynomial time <b>universal</b> Turing <b>machines</b> with state-symbol products of (3, 11), (5, 7), (6, 6), (7, 5) and (8, 4). These machines are the smallest known <b>universal</b> Turing <b>machines</b> that simulate TMs in polynomial time. ...|$|R
50|$|A <b>universal</b> Turing <b>machine</b> can {{calculate}} any recursive function, decide any recursive language, and accept any recursively enumerable language. According to the Church-Turing thesis, the problems solvable by a <b>universal</b> Turing <b>machine</b> are exactly those problems solvable by an algorithm or an effective method of computation, for any reasonable definition of those terms. For these reasons, a <b>universal</b> Turing <b>machine</b> {{serves as a}} standard against which to compare computational systems, and a system that can simulate a <b>universal</b> Turing <b>machine</b> is called Turing complete.|$|R
50|$|L. Blum, M. Shub and S. Smale, On {{a theory}} of {{computation}} and complexity over the real numbers: NP-completeness, recursive functions and <b>universal</b> <b>machines,</b> Bulletin of the American Mathematical Society, July 1989.|$|R
2500|$|This {{agrees with}} his {{example in the}} book (there will be a blank between each letter and number). <b>Universal</b> <b>machine</b> U uses the {{alternate}} blank squares as places to put [...] "pointers".|$|E
2500|$|... 5 m-configuration — the {{instruction}}-identifier, {{either a}} symbol in the instruction table, or {{a string of}} symbols representing the instruction- number on the tape of the <b>universal</b> <b>machine</b> (e.g. [...] "DAAAAA = #5") ...|$|E
2500|$|... "The paper started attractively, {{but soon}} plunged (in typical Turing manner) into {{a thicket of}} obscure German Gothic type {{in order to develop}} his {{instruction}} table for the <b>universal</b> <b>machine.</b> The last people to give it a glance would be the applied mathematicians who had to resort to practical computation..." [...] (Hodges p. 124) ...|$|E
40|$|Abstract. We present small {{polynomial}} time <b>universal</b> Turing <b>machines</b> with state-symbol pairs of (5, 5), (6, 4), (9, 3) and (18, 2). These machines simulate our new variant of tag system, the bi-tag system {{and are the}} smallest known <b>universal</b> Turing <b>machines</b> with 5, 4, 3 and 2 -symbols respectively. Our 5 -symbol machine uses {{the same number of}} instructions (22) as the smallest known <b>universal</b> Turing <b>machine</b> by Rogozhin. ...|$|R
40|$|Abstract. In 1975, Chaitin {{introduced}} his celebrated Omega number, the halting {{probability of a}} <b>universal</b> Chaitin <b>machine,</b> a <b>universal</b> Turing <b>machine</b> with a prefix-free domain. The Omega number’s bits are algorithmically random—there is no reason the bits should be the way they are, if we define “reason ” to be a computable explanation smaller than the data itself. Since that time, only two explicit <b>universal</b> Chaitin <b>machines</b> have been proposed, both by Chaitin himself. Concrete algorithmic information theory involves the study of particular <b>universal</b> Turing <b>machines,</b> about which one can state theorems with specific numerical bounds, rather than include terms like O(1). We present several new tiny Chaitin machines (those with a prefix-free domain) suitable {{for the study of}} concrete algorithmic information theory. One of the machines, which we call Keraia, is a binary encoding of lambda calculus based on a curried lambda operator. Source code is included in the appendices. We also give an algorithm for restricting the domain of blank-endmarker machines to a prefix-free domain over an alphabet that does not include the endmarker; this allows one to take many <b>universal</b> Turing <b>machines</b> and construct <b>universal</b> Chaitin <b>machines</b> from them. 1...|$|R
40|$|In the 1960 s Gisbert Hasenjaeger built Turing Machines from {{electromechanical}} relays and uniselectors. Recently, Glaschick reverse {{engineered the}} program {{of one of these}} machines and found that it is a <b>universal</b> Turing <b>machine.</b> In fact, its program uses only four states and two symbols, making it a very small <b>universal</b> Turing <b>machine.</b> (The machine has three tapes {{and a number of other}} features that are important to keep in mind when comparing it to other small <b>universal</b> <b>machines.)</b> Hasenjaeger’s machine simulates Hao Wang’s B machines, which were proved universal by Wang. Unfortunately, Wang’s original simulation algorithm suffers from an exponential slowdown when simulating Turing machines. Hence, via this simulation, Hasenjaeger’s machine also has an exponential slowdown when simulating Turing machines. In this work, we give a new efficient simulation algorithm for Wang’s B machines by showing that they simulate Turing machines with only a polynomial slowdown. As a second result, we find that Hasenjaeger’s machine also efficiently simulates Turing machines in polynomial time. Thus, Hasenjaeger’s machine is both small and fast. In another application of our result, we show that Hooper’s small <b>universal</b> Turing <b>machine</b> simulates Turing machines in polynomial time, an exponential improvement...|$|R
2500|$|... 5 m-configuration — the {{instruction}}-identifier, {{either a}} symbol in the instruction table, or {{a string of}} symbols representing the instruction's number on the tape of the <b>universal</b> <b>machine</b> (e.g. [...] "DAAAAA = instruction #5"). In Turing's S.D the m-configuration appears twice in each instruction, the left-most string is the [...] "current instruction"; the right-most string is the next instruction.|$|E
2500|$|Turing {{always left}} {{alternate}} squares blank so his machine could place a symbol {{to the left}} of a figure (or a letter if the machine is the <b>universal</b> <b>machine</b> and the scanned square is actually in the “program”). In our little example we will forego this and just put symbols ( [...] ) around the scanned symbol, as follows: ...|$|E
2500|$|Turing has {{previously}} demonstrated in his commentary that all [...] "computing machines — machines that compute a number as 1s and 0s forever — {{can be written}} as an S.D on the tape of the “universal machine” U. Most of his work leading up to his first proof is spent demonstrating that a <b>universal</b> <b>machine</b> truly exists, i.e.|$|E
40|$|AbstractThis paper {{represents}} {{the materials used}} in automobile interior parts, testing of automobile interior parts, Design & Development of Special <b>Universal</b> testing <b>machine.</b> To test the stiffness of interior parts of automobile at different point”s <b>universal</b> testing <b>machine</b> is required. Now days automobile aesthetic is become the key factor to attract the customers. Automobile interior aesthetic is improved by using different parts having curvature surfaces. In this case the special <b>universal</b> testing <b>machine</b> is required to test the stiffness of parts having curvature surfaces...|$|R
50|$|Universality probabilities {{are very}} {{related to the}} Chaitin constant, which is the halting {{probability}} of a <b>universal</b> prefix-free <b>machine.</b> In a sense, they are complementary to the halting probabilities of <b>universal</b> <b>machines</b> relative to the third iteration of the halting problem. In particular, the universality probability {{can be seen as}} the non-halting probability of a machine with oracle the third iteration of the halting problem. Vice versa, the non-halting probability of any prefix-free machine with this highly non-computable oracle is the universality probability of some prefix-free machine.|$|R
50|$|<b>Universal</b> {{measuring}} <b>machine</b> measures geometric {{locations for}} inspecting tolerances.|$|R
2500|$|First clue: [...] "Let us put the {{description}} of M into the first standard form of §6". Section 6 describes the very specific [...] "encoding" [...] of machine M on the tape of a [...] "universal machine" [...] U. This requires the reader to know some idiosyncrasies of Turing's <b>universal</b> <b>machine</b> U and the encoding scheme.|$|E
2500|$|In {{the course}} of {{describing}} <b>universal</b> <b>machine</b> U, Turing has demonstrated that a machine’s S.D (string of letters similar to a “program”) {{can be converted to}} an integer (base 8) and visa versa. Any number N (in base 8) can be converted to an S.D with the following replacements: 1 by A, 2 by C, 3 by D, 4 by L, 5 by R, 6 by N, 7 by semicolon [...] ";".|$|E
2500|$|... (i) The <b>universal</b> <b>machine</b> {{is a set}} of [...] "universal" [...] {{instructions}} that reside in an [...] "instruction table". Separate from this, on U's tape, a [...] "computing machine" [...] M will reside as [...] "M-code". The universal table of instructions can print on the tape the symbols A, C, D, 0, 1, u, v, w, x, y, z, : [...] The various machines M can print these symbols only indirectly by commanding U to print them.|$|E
5000|$|Computerized <b>Universal</b> Testing <b>Machine</b> for {{static testing}} of {{implants}} ...|$|R
5000|$|... #Caption: Brown & Sharpe's {{groundbreaking}} <b>universal</b> milling <b>machine,</b> 1861 ...|$|R
5000|$|Harold Zinkin (1922-2004), {{inventor}} of the <b>Universal</b> Gym <b>Machine</b> ...|$|R
2500|$|In {{computer}} science, simulation {{has some}} specialized meanings: Alan Turing {{used the term}} [...] "simulation" [...] to refer to {{what happens when a}} <b>universal</b> <b>machine</b> executes a state transition table (in modern terminology, a computer runs a program) that describes the state transitions, inputs and outputs of a subject discrete-state machine. [...] The computer simulates the subject machine. Accordingly, in theoretical computer science the term simulation is a relation between state transition systems, useful in the study of operational semantics.|$|E
2500|$|In 1969 Victor Scheinman at Stanford University {{invented the}} Stanford arm, an all-electric, 6-axis {{articulated}} robot designed to permit an arm solution. This allowed it accurately to follow arbitrary paths {{in space and}} widened the potential use of the robot to more sophisticated applications such as assembly and welding. Scheinman then designed a second arm for the MIT AI Lab, called the [...] "MIT arm." [...] Scheinman, after receiving a fellowship from Unimation to develop his designs, sold those designs to Unimation who further developed them with support from General Motors and later marketed it as the Programmable <b>Universal</b> <b>Machine</b> for Assembly (PUMA).|$|E
2500|$|H {{increments}} N = 13473 and converts [...] "13473" [...] to symbol string ADRLD. If sub-machine D deems ADLRD unsatisfactory, then H {{leaves the}} tally-record R at 5. H will increment the number N to 13474 and proceed onward. On the other hand, if D deems [...] ADRLD satisfactory then H will increment R to 6. H will convert N (again) into ADLRD [...] and “run” it using the <b>universal</b> <b>machine</b> U until this machine-under-test (U [...] "running" [...] ADRLD) prints its 6th “figure” i.e. 1 or 0. H will print this 6th number (e.g. “0”) in the “output” region of its tape (e.g. B’ = “.100110”).|$|E
5000|$|R. Herken (1995); <b>Universal</b> Turing <b>Machine,</b> Springer-Verlag 2nd Edition.|$|R
5000|$|... #Subtitle level 2: <b>Universal</b> Bending <b>Machines</b> - Modular Construction ...|$|R
40|$|This {{bachelor}} thesis {{deals with}} the design of toy technology according to the model for small batch production. Due to the small batch production criterion, production will be realized on <b>universal</b> <b>machines.</b> In addition, documentation, technological production procedures and assembly procedure will be made. Finally, technical-economic evaluation will be carried out...|$|R
