25|1189|Public
50|$|Note {{that users}} {{need not be}} able to log into a system or{{application}}. The <b>user</b> <b>object</b> may be a record in an HR application oran entry in a phone book system, which the user cannot log into butwhich nonetheless represents the user.|$|E
5000|$|In {{addition}} the <b>user</b> <b>object</b> exists {{within a}} cluster, allowing suitably authorised users to view {{all the data}} corresponding to a user in their cluster. This would allow a year co-ordinator to see all a student's results across all their classes without having to own or be a tutor in every single class that the student is taking ...|$|E
5000|$|Organizational units do not {{each have}} a {{separate}} namespace; e.g. user accounts with an identical username (sAMAccountName) in separate OUs within a domain are not allowed, such as [...] "fred.staff-ou.domain" [...] and [...] "fred.student-ou.domain", where [...] "staff-ou" [...] and [...] "student-ou" [...] are the OUs. This is because sAMAccountName, a <b>user</b> <b>object</b> attribute, must be unique within the domain. However, two users in different OUs can have the same Common Name (CN), the name under which they are stored in the directory itself.|$|E
5000|$|The {{ability to}} {{construct}} <b>user</b> <b>objects</b> that inherit {{from the system}} classes ...|$|R
50|$|People are {{represented}} by <b>user</b> <b>objects</b> or login accountson different systems and applications.|$|R
5000|$|More: Named Queries (pm.newNamedQuery), FetchPlan, Sequence, Delete by Query, {{multiple}} <b>User</b> <b>Objects</b> on PM ...|$|R
30|$|User: symbol u is {{used for}} <b>user</b> <b>object.</b>|$|E
30|$|Location privacy {{with the}} {{enforcement}} of security policies has been a topic of research for some time [13, 18, 19]. Security policies of persons, objects or places, can be made dependent on several location privacy primitives (geographical area, time interval, historical access, etc.) [3, 30]. Each of these aspects can be combined to form a <b>user,</b> <b>object</b> or place, security policy.|$|E
40|$|The {{approach}} {{described here}} allows using membership function to represent imprecise and uncertain knowledge by learning in Fuzzy Semantic Networks. This representation {{has a great}} practical interest due to the possibility to realize on the one hand, the construction of this membership function from a simple value expressing the degree of interpretation of an Object or a Goal as compared to an other {{and on the other}} hand, the adjustment of the membership function during the apprenticeship. We show, how to use these membership functions to represent the interpretation of an Object (respectively of a Goal) user as compared to an system Object (respectively to a Goal). We also show the possibility to make decision for each representation of an <b>user</b> <b>Object</b> compared to a system Object. This decision is taken by determining decision coefficient calculates according to the nucleus of the membership function of the <b>user</b> <b>Object...</b>|$|E
50|$|SekChek for Exchange {{analyses}} Exchange organisations, Storage groups, Databases, Exchange servers and mail-enabled <b>user</b> <b>objects.</b>|$|R
5000|$|An {{internal}} database, {{that tracks}} <b>user</b> <b>objects</b> {{and other data}} from integrated systems and applications.|$|R
5000|$|Automatically {{deactivate}} <b>user</b> <b>objects</b> for <b>users,</b> such as contractors, whose scheduled {{termination date}} has passed.|$|R
40|$|This paper {{considers}} how through dialogue {{the relationship}} between architectural design and disability can yield opportunities instead of constraints. Two cases drawn from ongoing ethnographic design research show possibilities and the potential of dialogue for design practice and design research. Dialogue is said to amplify silent realities—things that exist either in <b>user,</b> <b>object,</b> or use, but that stay unaccounted for. However, following {{the discussion of the}} cases, it is deemed necessary to extend the notion of dialogue from conversation to embodied skill. status: publishe...|$|E
40|$|At {{handover}} between {{base stations}} in Long Term Evolution (LTE), data is forwarded {{from a source}} eNB to a target eNB. The mechanism for handling the packet forwarding is specified in Third Generation Partnership Project (3 GPP) Release 8 specifications. The goal of the thesis is to analyse, evaluate and improve the packet forwarding mechanism. The techniques {{to reduce the amount}} of forwarded data in the downlink will be studied as a part of the thesis. Such enhancements include modifications to the Radio Link Control (RLC) protocol, as well as improved interactions with other layers, most notably Packet Data Convergence Protocol (PDCP) and Radio Resource Control (RRC). Performance criteria considered for evaluating these techniques include the PDCP buffer size at the source eNB, uplink RLC status load and <b>user</b> <b>object</b> bit rate. The thesis recommends the LTE network to poll the UE more frequently during the ongoing handover scenarios, compared to the case when handover is not ongoing. This allows the source eNB to be as up to date to the UE reception state as possible, and thus reduces the number of unacknowledged PDCP SDUs to he forwarded to the target eNB. Based on the simulation results, this proposed technique proves to be the most efficient in terms of lower PDCP buffer size at the source eNB, lower uplink RLC status load and higher <b>user</b> <b>object</b> bit rate...|$|E
40|$|Context {{modeling}} {{has attracted}} increasing attention {{due to the}} prevalence of context-aware applications within smart environments. Whilst upper-level context ontologies exist for use within smart environments, none offer a single generalized model covering all high-level elements that exist across all types of smart environments. This paper presents an upper-level context ontology for smart environments which aims to incorporate all factors deemed important for context in smart environments. Specifically, the proposed model considers key factors that include <b>User,</b> <b>Object,</b> Location, Application, Event, Natural Element and Temporal. The model is able to represent daily routines encompassing both open-world and closed-world activities and this is presented in a short vignette...|$|E
5000|$|Changes {{experienced}} by {{users in the}} physical world must be reflected by <b>user</b> <b>objects</b> on systems and applications.|$|R
50|$|Virtuoso stores all its {{information}} about all <b>user</b> <b>objects</b> {{in the database}} in the system catalog tables designated by db.dba*.|$|R
5000|$|User {{provisioning}} {{systems are}} intended to help organizations streamlineuser lifecycle processes so that updates to <b>user</b> <b>objects</b> on their systemsand applications can be made: ...|$|R
40|$|Contextual {{information}} within smart environments varies greatly. Whilst upper-level ontologies for {{contextual information}} relating to smart environments have been previously proposed, they have typically only been applicable to specific domains. As such, {{a wide range of}} entity names are used, overlooking other important relevant entities. This paper presents a conceptualisation and generation of an upper-level ontology,which encompasses the key factors, deemed important for context within smart environments. These factors include <b>User,</b> <b>Object,</b> Location, Natural Element, Application, Event and Temporal. The use of the model to support high-level context generation is also discussed {{in the form of an}} indicative short vignette (an envisaged smart environment) accompanied with the results from a real smart environment implementation (intelligent meeting room) ...|$|E
40|$|This paper {{presents}} a previously unpublished Attic lekythos and discusses visual ambiguity as an intentional drawing style {{used by a}} vase painter who conceptualised the many possible relationships between pot and <b>user,</b> <b>object</b> and subject. The Gela Painter endowed this hastily manufactured and decorated lekythos with visual effects that drew the viewer into an inherently ambivalent motif: a mounting Dionysos. This motif, like other Dionysian themes, had a vogue in late Archaic times but did not necessarily invoke chthonic associations. It {{had the potential to}} be consumed in diverse contexts, including religious festivals, by a wide range of audiences. Such images were not given to the viewer fully through visual perception but through interpretation...|$|E
40|$|We {{present a}} method that using only an uncalibrated camera allows the capture of object {{geometry}} and appearance, and then at a later stage registration and AR overlay into a new scene. Using only image information first a coarse object geometry is obtained using structure-from-motion, then a dynamic, view dependent texture is estimated {{to account for the}} differences between the reprojected coarse model and the training images. In AR rendering, the object structure is interactively aligned in one frame by the <b>user,</b> <b>object</b> and scene structure is registered, and rendered in subsequent frames by a virtual scene camera, with parameters estimated from real-time visual tracking. Using the same viewing geometry for both object acquisition, registration, and rendering ensures consistency and minimizes errors...|$|E
30|$|Access Control {{policies}} {{enforce the}} requirements of users and owners of places regarding the disclosure of location information. Such policies can be associated to <b>users,</b> <b>objects</b> or places.|$|R
5000|$|Monitor an HR {{application}} and automatically deactivate <b>users</b> <b>objects</b> on other systems and applications when an employee records either disappears or is marked as inactive in the HR database.|$|R
5000|$|More securely—to {{reduce the}} risk of system {{compromise}} due to <b>user</b> <b>objects</b> that have outlived their usefulness, due to inappropriate security entitlements and due to easily guessed or otherwise compromised passwords.|$|R
40|$|The {{purpose of}} this project is to design a {{computer}} program to help children understand a strategy for changing vantage points within an imagined space and gain knowledge of how spatial transformations work. The developed software, called Viewpoints, presents a virtual three-dimensional environment to be explored and modified by the <b>user.</b> <b>Object</b> and camera manipulations are illustrated through animation. Furthermore, the program was designed to have an intuitive interface and be easy to access. This should allow the software?s target audience of children {{to focus on the}} spatial orientation and spatial visualization aspects. A small study evaluated the software in terms of content, instructional design, technical quality, student use, and instructor use. The study provided valuable feedback on how to improve Viewpoints in the future. Information gathered suggests the issue of speed should be addressed and supplemental materials should be added...|$|E
40|$|In 2006, NASA Ames Research Center's (ARC) Intelligent Systems Division, and NASA Johnson Space Centers (JSC) Mission Operations Directorate (MOD) began a {{collaboration}} to move user applications for JSC's mission control center {{to a new}} software architecture, intended to replace the existing user applications being used for the Space Shuttle and the International Space Station. It must also carry NASA/JSC mission operations forward to the future, meeting the needs for NASA's exploration programs beyond low Earth orbit. Key requirements for the new architecture, called Mission Control Technologies (MCT) are that end users {{must be able to}} compose and build their own software displays without the need for programming, or direct support and approval from a platform services organization. Developers must be able to build MCT components using industry standard languages and tools. Each component of MCT must be interoperable with other components, regardless of what organization develops them. For platform service providers and MOD management, MCT must be cost effective, maintainable and evolvable. MCT software is built from components that are presented to users as composable user objects. A <b>user</b> <b>object</b> is an entity that represents a domain object such as a telemetry point, a command, a timeline, an activity, or a step in a procedure. User objects may be composed and reused, for example a telemetry point may be used in a traditional monitoring display, and that same telemetry <b>user</b> <b>object</b> may be composed into a procedure step. In either display, that same telemetry point may be shown in different views, such as a plot, an alpha numeric, or a meta-data view and those views may be changed live and in place. MCT presents users with a single unified user environment that contains all the objects required to perform applicable flight controller tasks, thus users do not have to use multiple applications, the traditional boundaries that exist between multiple heterogeneous applications disappear, leaving open the possibility of new operations concepts that are not constrained by the traditional applications paradigm...|$|E
40|$|Abstract—Modern {{automation}} systems architectures {{which include}} several subsystems for which an adequate burden sharing is required. These subsystems {{must work together}} to fulfil the tasks imposed by the common function, given by the business purpose to be fulfilled. These subsystems or components, in order to perform these tasks, must communicate with each other, this being the critical function of the architecture of such a system. This article presents a MCIP (Monitoring and Control of the Industrial Processes) client application which allows the monitoring {{and control of the}} industrial processes and which is object-oriented. As a novelty, the paper presents the architecture of the <b>user</b> <b>object,</b> which is actually a wrapper that allows the connection to Communication Standard Interface bus, the characteristics of the IIoT (Industrial Internet of Things) object and the correspondence between a server’s address space and the address space of MCIP. Keywords—SCADA; OPC DA; OPC. NET; OPC UA; DD...|$|E
50|$|<b>User</b> <b>objects</b> are {{generally}} connected {{to other parts}} of a system orapplication through security entitlements. On most systems, this isdone by placing a user into one or more security groups, where users ofeach group are granted some security rights.|$|R
40|$|This paper {{presents}} {{a method to}} measure the similarity between different fuzzy concepts in order to optimize Semantic networks. The problem approached is the minimization {{of the time of}} research and identification of <b>user's</b> <b>Objects</b> and Goals. Indeed, it concerns to determine to each instant the totality of Objects (respectively Goals) among which one can identify rapidly the most satisfactory for the <b>user's</b> <b>Object</b> and Goal. Alone Objects and most similar Goals to Objects and researched Goals of the viewpoint of attribute values will be processed, what will avoid the analysis of all Objects and system Goals far of needs of the user. Comment: 14 th International Conference on Systems Science. Wroclaw, Poland, 200...|$|R
50|$|Originally, {{the entire}} stretch of beach was {{clothing}} optional, however {{there have been}} some complaints from <b>users</b> <b>objecting</b> to the nudity going back to the 1980s. These complaints were largely from parents who visited the lighthouse and were surprised by the nudity on the beach.|$|R
40|$|Abstract. With the {{continuously}} {{growing number}} of distributed and heterogeneous IT systems there {{is the need for}} structured and efficient identity management (IdM) processes. This implies that new users are created once and then the information is distributed to all applicable software systems same as if changes on existing user objects occur. The central issue {{is that there is no}} generally accepted standard for handling this information distribution because each system has its own internal representation of this data. Our approach is to give a semantic definition of the digital user objects ’ attributes to ease the mapping process of an abstract <b>user</b> <b>object</b> to the concrete instantiation of each software system. Therefore we created an ontology to define the mapping of users ’ attributes and an architecture which enables the semantic integration of identity data repositories. Our solution has been tested and tried in an implementation case study. ...|$|E
40|$|This {{apparatus}} and method for applying a linerless label {{to an end}} user product includes a device with a printer for printing on a face surface of a linerless label, and a release coat applicator for applying a release coat to the face surface of the label; another device including an unwinder unit (103) to unwind a roll of printed linerless label; a belt (108); a glue applicator (102) for applying glue to the belt; a nip roller (106) for contacting and applying pressure to the face surface of the linerless label such that the glue on the belt transfers to the back surface of the linerless label; at least one slitting knife 105) positioned downstream the belt and a rewinder unit (104) positioned downstream the slitting knife; and a third device which die cuts and applies the linerless label to an end <b>user</b> <b>object...</b>|$|E
40|$|We {{have created}} a {{prototype}} World Wide Web (WWW) front end to an OODBMS, LINCKS. LINCKS is a multi <b>user</b> <b>object</b> store with support for composite objects, database histories, multiple views, information sharing by linking, and parallel editing notification. The prototype generates HTML documents on the fly from information pieces in the database. A document's logical structure is described by a simple grammar, as well as where in the database the {{different parts of the}} logical structure should be retrieved. We can use LINCKS for tracking owner, source, and creation date of information pieces and documents. Instead of using "copy-and-paste" for information duplication, we are using links to the real source and thus maintain trace-ability. Moreover, by applying different views to the same document root object we are able to provide: abstract; table of contents (of different levels); a chapter, a section, or a subsection; the full article; with or without footnotes; or any combin [...] ...|$|E
50|$|User {{provisioning}} {{refers to}} the creation, maintenance and deactivation of <b>user</b> <b>objects</b> and <b>user</b> attributes, as they exist {{in one or more}} systems, directories or applications, in response to automated or interactive business processes. User provisioning software may include {{one or more of the}} following processes: change propagation, self-service workflow, consolidated user administration, delegated user administration, and federated change control. <b>User</b> <b>objects</b> may represent employees, contractors, vendors, partners, customers or other recipients of a service. Services may include electronic mail, inclusion in a published user directory, access to a database, access to a network or mainframe, etc. User provisioning is a type of identity management software, particularly useful within organizations, where users may be represented by multiple objects on multiple systems and multiple instances.|$|R
25|$|Anti-spyware {{programs}} often report Web advertisers' HTTP cookies, {{the small}} text files that track browsing activity, as spyware. While {{they are not}} always inherently malicious, many <b>users</b> <b>object</b> to third parties using space on their personal computers for their business purposes, and many anti-spyware programs offer to remove them.|$|R
50|$|Interface Builder {{provides}} palettes, or collections, of <b>user</b> interface <b>objects</b> to an Objective-C developer. These <b>user</b> interface <b>objects</b> contain {{items like}} text fields, data tables, sliders, and pop-up menus. Interface Builder's palettes are completely extensible, meaning any developer can develop new objects and add palettes to Interface Builder.|$|R
