27|1730|Public
25|$|Certain {{anti-virus}} products fake their <b>user</b> <b>agent</b> <b>string</b> {{to appear}} to be popular browsers. This is done to trick attack sites that might display clean content to the scanner, but not to the browser. The Register reported in June 2008 that traffic from AVG Linkscanner, using an IE6 <b>user</b> <b>agent</b> <b>string,</b> outstripped human link clicks by nearly 10 to 1.|$|E
25|$|Websites {{often include}} code to detect browser version {{to adjust the}} page design sent {{according}} to the <b>user</b> <b>agent</b> <b>string</b> received. This may mean that less-popular browsers are not sent complex content (even though {{they might be able}} to deal with it correctly) or, in extreme cases, refused all content. Thus, various browsers have a feature to cloak or spoof their identification to force certain server-side content.|$|E
2500|$|Internet Explorer 11's <b>user</b> <b>agent</b> <b>string</b> now {{identifies}} the agent as [...] "Trident" [...] (the underlying layout engine) instead of [...] "MSIE". It also announces compatibility with Gecko (the layout engine of Firefox).|$|E
5000|$|Some {{web sites}} do not {{recognise}} the browsers' <b>user</b> <b>agent</b> <b>strings</b> {{and refuse to}} work properly. As a workaround, Iceweasel 3.5.5 adds a [...] "like Firefox x.x.x" [...] string to the User-Agent.|$|R
5000|$|Bots {{sometimes}} declare {{who they}} are (using <b>user</b> <b>agent</b> <b>strings)</b> and can be blocked on that basis using robots.txt; 'googlebot' is an example. Other bots make no distinction between themselves and a human using a browser.|$|R
25|$|Default <b>user</b> <b>agent</b> <b>strings</b> of most browsers have {{pieces of}} strings {{from one or}} more other browsers, so that if the browser is unknown to a website, it can be {{identified}} as one of those. For example, Safari has not only “Mozilla/5.0”, but also “KHTML” (from which Safari’s WebKit was forked) and “Gecko” (the engine of Firefox).|$|R
2500|$|Occasionally {{websites}} {{are written}} {{in such a way}} that they effectively block certain browsers. [...] One common reason for this is that the website has been tested to work with only a limited number of browsers, and so the site owners enforce that only tested browsers are allowed to view the content, while all other browsers are sent a [...] "failure" [...] message, and instruction to use another browser. [...] Many of the untested browsers may still be otherwise capable of rendering the content. [...] Sophisticated users who are aware of this may then [...] "spoof" [...] the <b>user</b> <b>agent</b> <b>string</b> in order to gain access to the site.|$|E
5000|$|IceCat {{also has}} {{functionality}} {{to set a}} different <b>user</b> <b>agent</b> <b>string</b> each for different domains in [...] For example, setting a non-mobile <b>user</b> <b>agent</b> <b>string</b> for a desired domain would make it possible in Android to visit a non-mobile version of a website.|$|E
5000|$|The ApacheBench <b>User</b> <b>Agent</b> <b>string</b> is the following:ApacheBench/MAJOR.MINOR ...|$|E
2500|$|Due to {{technical}} improvements of the browser, the Internet Explorer developer team {{decided to change}} the <b>user</b> <b>agent</b> (UA) <b>string.</b> The Mozilla/4.0 token was changed to Mozilla/5.0 to match the <b>user</b> <b>agent</b> <b>strings</b> of other recent browsers and to indicate that Internet Explorer 9 is more interoperable than previous versions. The Trident/4.0 token was likewise changed to Trident/5.0. Because long, extended UA strings cause compatibility issues, Internet Explorer 9's default UA string does not include [...]NET identifiers or other [...] "pre-platform" [...] and [...] "post-platform" [...] tokens that were sent by previous versions of the browser. The extended string is still available to websites via the browser's [...]userAgent property, and is sent when a web page is displayed in compatibility mode.|$|R
5000|$|Since many {{websites}} {{recognized and}} blocked Xunlei via <b>user</b> <b>agent</b> (UA) <b>string,</b> Xunlei {{began to use}} common browsers' UA as camouflage. The default UA is: [...] or [...] However, if Xunlei determines it is blocked from a website, it will automatically change UA to imitate other browsers, such as: ...|$|R
50|$|Adding the <b>user</b> <b>agent’s</b> contact {{information}} to the registered {{contact information}} has many advantages. As the SBC {{does not have to}} keep local registration information this solution is simple to implement and does not require memory for keeping the information. Further, requests destined to the <b>user</b> <b>agent</b> do not necessarily have to traverse the SBC that has processed the <b>user</b> <b>agent’s</b> registration messages. Any SBC that can reach the <b>user</b> <b>agent</b> can correctly route messages destined to the <b>user</b> <b>agent</b> based on the information included in the SIP request. This advantage applies, however, only in some cases. In case the NAT used in front of the <b>user</b> <b>agent</b> accepts traffic only from the IP addresses which the <b>user</b> <b>agent</b> has contacted previously then only the SBC that has processed the <b>user</b> <b>agent’s</b> REGISTER requests will be able to contact the <b>user</b> <b>agent.</b>|$|R
5000|$|Certain {{anti-virus}} products fake their <b>user</b> <b>agent</b> <b>string</b> {{to appear}} to be popular browsers. This is done to trick attack sites that might display clean content to the scanner, but not to the browser. The Register reported in June 2008 that traffic from AVG Linkscanner, using an IE6 <b>user</b> <b>agent</b> <b>string,</b> outstripped human link clicks by nearly 10 to 1.|$|E
5000|$|Internet Explorer 10 {{has a new}} <b>user</b> <b>agent</b> <b>string</b> {{which has}} the {{following}} general format: ...|$|E
50|$|Other HTTP client programs, like {{download}} {{managers and}} offline browsers, often {{have the ability}} to change the <b>user</b> <b>agent</b> <b>string.</b>|$|E
5000|$|When a web {{application}} issues HSTS Policy to <b>user</b> <b>agents,</b> conformant <b>user</b> <b>agents</b> behave as follows: ...|$|R
50|$|Developed by the <b>User</b> <b>Agent</b> Accessibility Guidelines Working Group, the UAAG 1.0 {{became a}} W3C Recommendation on 17 December 2002. The UAAG {{is a set}} of {{guidelines}} for <b>user</b> <b>agent</b> developers (such as web browsers and media players) aimed at making the <b>user</b> <b>agent</b> accessible to <b>users</b> with disabilities. Techniques for <b>User</b> <b>Agent</b> Accessibility Guidelines 1.0 was published as a W3C Note on the same day; it provides techniques for satisfying the checkpoints defined in UAAG 1.0.Working group members also produced other supporting documents, including initial notes on How to evaluate a <b>user</b> <b>agent</b> for conformance to UAAG 1.0; this document was not formally approved by the working group.No <b>user</b> <b>agents</b> have been reported as fully conforming to UAAG 1.0.|$|R
50|$|The <b>User</b> <b>Agent</b> Accessibility Guideline Working Group {{develops}} guidelines, {{techniques and}} other documents to promote the accessibility of user agents: browsers and plug-ins.The working group consists mainly of organizations that develop <b>user</b> <b>agents,</b> researchers, and other accessibility experts.UAWG published <b>User</b> <b>Agent</b> Accessibility Guidelines (UAAG) 2.0 in December 2015. Supporting documentation includes: UAAG 2.0 Reference and UAAG Mobile Examples. The working group published <b>User</b> <b>Agent</b> Accessibility Guidelines 1.0 (UAAG 1.0) as a W3C Recommendation in 2002.|$|R
5000|$|Internet Explorer 11's <b>user</b> <b>agent</b> <b>string</b> now {{identifies}} the agent as [...] "Trident" [...] (the underlying layout engine) instead of [...] "MSIE". It also announces compatibility with Gecko (the layout engine of Firefox).|$|E
50|$|The {{web server}} {{communicates}} {{with the client}} using a communication protocol known as HTTP, or Hypertext Transfer Protocol, which specifies that the client send the server information about the browser being used to view the web site in a <b>user</b> <b>agent</b> <b>string.</b>|$|E
5000|$|Mediabot is {{the name}} given to the web crawler that Google uses to crawl webpages for {{purposes}} of analysing the content so Google AdSense can serve contextually relevant advertising to the page. Mediabot identifies itself with the <b>user</b> <b>agent</b> <b>string</b> [...] "Mediapartners-Google/2.1".|$|E
5000|$|To {{summarize}} {{how this}} works, when a <b>user</b> <b>agent</b> submits {{a request to}} a server, the <b>user</b> <b>agent</b> informs the server what media types it understands with ratings of how well it understands them. More precisely, the <b>user</b> <b>agent</b> provides an [...] HTTP header that lists acceptable media types and associated quality factors. The server is then able to supply the version of the resource that best fits the <b>user</b> <b>agent's</b> needs.|$|R
40|$|Capabilities {{of major}} Japanese <b>user</b> <b>agents,</b> three screen readers and one voice browser, were {{investigated}} {{with the following}} test files: W 3 C UAAG 1. 0 Test Suite for HTML 4. 01, an accessible PDF file, an accessible Flash file, and test files which test Japanese specific issues. Using the UAAG 1. 0 Test Suite, 20 out of 48 Priority 1 checkpoints were met by all <b>user</b> <b>agents,</b> while all of the <b>user</b> <b>agents</b> failed to meet 11 of the checkpoints. Test results of all test files were assigned into three categories: capabilities satisfied by almost all <b>user</b> <b>agents,</b> capabilities not satisfied {{by any of the}} <b>user</b> <b>agents,</b> and capabilities that were satisfied by some of the <b>user</b> <b>agents</b> only. The test results indicated that 1) two major Japanese <b>user</b> <b>agents</b> do not have enough functions to navigate through a Web page using the structure information of the content, and 2) none of the <b>user</b> <b>agents</b> have enough functions to control multimedia and timedependent interactions. These results provide an objective evidence to define the Japanese baseline, a set of technologies that a <b>user</b> <b>agent</b> is assumed to support, which is required in the WCAG 2. 0 working draft. Accessibility responsibility between Web content and <b>user</b> <b>agents</b> is also determined by the current survey. Categories and Subject Descriptors K. 4. 2 [Social Issues]: Assistive technologies for persons with disabilities, H. 5. 2 [User Interfaces]: Evaluation/methodology...|$|R
30|$|The Require header {{defined in}} SIP {{can be used}} for <b>User</b> <b>Agent</b> Clients (UACs) to {{indicate}} <b>user</b> <b>agent</b> servers the options expected.|$|R
5000|$|... "The <b>User</b> <b>Agent</b> <b>String</b> for Internet Explorer 5 is static {{except for}} the third field which depends on the Operating System and the {{processor}} you are using. Here are some common configurations and the user agent strings generated by Internet Explorer on these platforms:" ...|$|E
5000|$|... "The KIN uses a {{proprietary}} browser made {{specifically for the}} KIN. No other browsers can be used or downloaded. Silverlight {{was used for the}} creation of the KIN studio, not the browser." [...] The browser identified itself as [...] "IEMobile 6.12." [...] The full <b>user</b> <b>agent</b> <b>string</b> was: ...|$|E
50|$|Microsoft {{has also}} {{been the target of}} 'catch-up' versioning, with the Netscape browsers {{skipping}} version 5 to 6, in line with Microsoft's Internet Explorer, but also because the Mozilla application suite inherited version 5 in its <b>user</b> <b>agent</b> <b>string</b> during pre-1.0 development and Netscape 6.x was built upon Mozilla's code base.|$|E
25|$|Developed by the <b>User</b> <b>Agent</b> Accessibility Guidelines Working Group, the UAAG 1.0 {{became a}} W3C Recommendation on 17 December 2002. The UAAG {{is a set}} of {{guidelines}} for <b>user</b> <b>agent</b> developers (such as web browsers and media players) aimed at making the <b>user</b> <b>agent</b> accessible to <b>users</b> with disabilities. Techniques for <b>User</b> <b>Agent</b> Accessibility Guidelines 1.0 was published as a W3C Note on the same day; it provides techniques for satisfying the checkpoints defined in UAAG 1.0.|$|R
50|$|The network {{elements}} {{that use the}} Session Initiation Protocol for communication are called SIP <b>user</b> <b>agents.</b> Each <b>user</b> <b>agent</b> (UA) performs the function of a <b>user</b> <b>agent</b> client (UAC) when it is requesting a service function, and that of a <b>user</b> <b>agent</b> server (UAS) when responding to a request. Thus, any two SIP endpoints may in principle operate without any intervening SIP infrastructure. However, for network operational reasons, for provisioning public services to users, and for directory services, SIP defines several specific types of network server elements. Each of these service elements also communicates within the client-server model implemented in <b>user</b> <b>agent</b> clients and servers.|$|R
40|$|We {{describe}} {{the architecture of}} an interactive, "believable" agent with personality, called <b>user</b> <b>agent,</b> which can act {{on behalf of a}} user in various multi-user game contexts, when she is not online. In a first step, information about the personality of the user is obtained from a questionnaire and then, in a second step, integrated in the reactive system of the <b>user</b> <b>agent,</b> part of which implements a primitive affective system. <b>User</b> <b>agents</b> can interact with their users through a simple a#ective natural language generation system (SARGS), which is integrated in the deliberative system of the <b>user</b> <b>agent</b> and can recount what happened to the <b>user</b> <b>agent</b> in the game while the user was not present...|$|R
50|$|The iPhone was {{formally}} released on June 29, 2007. It includes {{a version of}} Safari {{based on the same}} WebKit rendering engine as the desktop version, but with a modified feature set better suited for a mobile device. The version number of Safari as reported in its <b>user</b> <b>agent</b> <b>string</b> is 3.0, in line with the contemporary desktop versions of Safari.|$|E
5000|$|The User-Agent string {{format is}} {{currently}} specified by section 5.5.3 of HTTP/1.1 Semantics and Content. The {{format of the}} User-Agent string in HTTP {{is a list of}} product tokens (keywords) with optional comments. For example, if a user's product were called WikiBrowser, their <b>user</b> <b>agent</b> <b>string</b> might be WikiBrowser/1.0 Gecko/1.0. The [...] "most important" [...] product component is listed first.|$|E
50|$|Websites {{often include}} code to detect browser version {{to adjust the}} page design sent {{according}} to the <b>user</b> <b>agent</b> <b>string</b> received. This may mean that less-popular browsers are not sent complex content (even though {{they might be able}} to deal with it correctly) or, in extreme cases, refused all content. Thus, various browsers have a feature to cloak or spoof their identification to force certain server-side content.|$|E
50|$|The {{following}} sections demonstrate how a request using the XMLHttpRequest object functions within a conforming <b>user</b> <b>agent</b> {{based on the}} W3C Working Draft. As the W3C standard for the XMLHttpRequest object is still a draft, <b>user</b> <b>agents</b> may not abide by all the functionings of the W3C definition and {{any of the following}} is subject to change. Extreme care should be taken into consideration when scripting with the XMLHttpRequest object across multiple <b>user</b> <b>agents.</b> This article will try to list the inconsistencies between the major <b>user</b> <b>agents.</b>|$|R
50|$|The HTML5 {{specification}} {{does not}} specify which {{video and audio}} formats browsers should support. <b>User</b> <b>agents</b> are free to support any video formats they feel are appropriate, but content authors cannot assume that any video will be accessible by all complying <b>user</b> <b>agents,</b> since <b>user</b> <b>agents</b> have no minimal set of video and audio formats to support.|$|R
50|$|VoIP {{telephone}} companies can, as an option, support pbxnsip as a <b>user</b> <b>agent</b> or trunked connection with SIP trunking protocols along with ATAs and other software <b>user</b> <b>agents.</b>|$|R
