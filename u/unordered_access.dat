4|1|Public
50|$|Direct3D 11.3 {{shipped in}} July 2015 with Windows 10; it {{includes}} minor rendering features from Direct3D 12, {{while keeping the}} overall structure of the Direct3D 11.x API. Direct3D 11.3 introduces Shader Model 5.1, optional Shader Specified Stencil Reference Value, Typed <b>Unordered</b> <b>Access</b> View Loads, Rasterizer Ordered Views (ROVs), optional Standard Swizzle, optional Default Texture Mapping, Conservative Rasterization(out of three tiers), optional Unified Memory Access (UMA) support, and additional Tiled Resources(tier 2)(Volume tiled resources).|$|E
50|$|For <b>unordered</b> <b>access</b> {{as defined}} in the java.util.Map interface, the java.util.concurrent.ConcurrentHashMap {{implements}} java.util.concurrent.ConcurrentMap. The mechanism is a hash access to a hash table with lists of entries, each entry holding a key, a value, the hash, and a next reference. Previous to Java 8, there were multiple locks each serializing access to a 'segment' of the table. In Java 8, native synchronization is used on {{the heads of the}} lists themselves, and the lists can mutate into small trees when they threaten to grow too large due to unfortunate hash collisions. Also, Java 8 uses the compare-and-set primitive optimistically to place the initial heads in the table, which is very fast. Performance is O(n) but there are delays occasionally when rehashing is necessary. After the hash table expands, it never shrinks, possibly leading to a memory 'leak' after entries are removed.|$|E
5000|$|Direct3D 12 {{introduces}} a revamped resource binding model, allowing explicit control of memory. Abstract resource [...] "view" [...] objects which allowed random read/write access are now represented by resource descriptors, which are allocated using memory heaps and tables. This model is supported on majority of existing desktop GPU architectures and requires WDDM 2.0 drivers. Supported hardware {{is divided into}} three Resource Binding tiers, which define maximum numbers of descriptors {{that can be used for}} CBV (constant buffer view), SRV (shader resource view) and UAV (<b>unordered</b> <b>access</b> view); CBVs and SRVs per pipeline stage; UAVs for all pipeline stages; samplers per stage; and the number of SRV descriptor tables. Tier 3 hardware such as AMD GCN and, Intel Skylake has no limitations, allowing fully bindless resources only limited by the size of the descriptor heap, while Tier 1 (Nvidia Fermi, Intel Haswell/Broadwell) and Tier 2 (Nvidia Kepler/Maxwell) hardware impose some limits on the number of descriptors ("views") that can be used simultaneously. Additionally, buffers and textures can mixed together in the same resource heap only on hardware supporting Resource Heap Tier 2, while Tier 1 hardware requires separate memory heaps for buffers, textures, and render-target and depth stencil surfaces. Resource binding tier 1 and resource heap tier 1 are required for all supporting hardware.|$|E
5000|$|In {{computer}} science, tuples come in many forms. In dynamically typed languages, such as Lisp, {{lists are}} commonly used as tuples. Most typed functional programming languages implement tuples directly as product types, tightly associated with algebraic data types, pattern matching, and destructuring assignment. Many programming languages offer an alternative to tuples, known as record types, featuring <b>unordered</b> elements <b>accessed</b> by label. A few programming languages combine ordered tuple product types and unordered record types into a single construct, as in C structs. Relational databases may formally identify their [...] rows (records) as tuples.|$|R
5000|$|The new API {{features}} shader tracing and HLSL compiler enhancements, {{support for}} minimum precision HLSL scalar data types, [...] UAVs (<b>Unordered</b> <b>Access</b> Views) at every pipeline stage, target-independent rasterization (TIR), option to map SRVs of dynamic buffers with NO_OVERWRITE, shader processing of video resources, option to use logical operations in a render target, option to bind a subrange of a constant buffer to a shader and retrieve it, option to create larger constant buffers than a shader can access, option to discard resources and resource views, option to change subresources with new copy options, option {{to force the}} sample count to create a rasterizer state, option to clear {{all or part of}} a resource view, option to use Direct3D in Session 0 processes, option to specify user clip planes in HLSL on feature level 9 and higher, support for shadow buffer on feature level 9, support for video playback, extended support for shared Texture2D resources, and on-the-fly swapping between Direct3D 10 and 11 contexts and feature levels. Direct3D 11.1 includes new feature level 11_1, which brings minor updates to the shader language, such as larger constant buffers and optional double-precision instructions, as well as improved blending modes and mandatory support for 16-bit colour formats to improve the performance of entry-level GPUs such as Intel HD Graphics. WARP has been updated to support feature level 11_1.|$|E

