0|2848|Public
3000|$|... k 2, both orders work well. We herein choose Case 1 as default. To let {{the users}} in a cluster know the {{detection}} order, the BS can <b>use</b> the <b>flag</b> <b>bit</b> to inform HR and LR users.|$|R
40|$|Updates to the IPv 6 Multicast Addressing Architecture draft-ietf- 6 man-multicast-addr-arch-update- 01 This {{document}} updates the IPv 6 {{multicast addressing}} architecture by defining the 17 - 20 reserved <b>bits</b> as generic <b>flag</b> <b>bits.</b> The document provides also some clarifications {{related to the}} <b>use</b> of these <b>flag</b> <b>bits...</b>|$|R
50|$|The Change Journal {{describes}} {{the changes that}} took place <b>using</b> <b>bit</b> <b>flags</b> (e.g. USN_REASON_DATA_OVERWRITE), therefore {{it does not include}} all the data or details associated with the change. For this reason the Change Journal cannot be used to undo operations on files within NTFS.|$|R
40|$|In this paper, {{we propose}} a novel cache {{consistency}} maintenance scheme, called ######## ### #### ##### ##### ########### ### ### (SACCS), for mobile environments. It {{relies on the}} following three key features: (1) <b>Use</b> of <b>flag</b> <b>bits</b> at server and MU's cache to maintain cache consistency; (2) Use of an identifier (ID) for each entry in MU's cache after its invalidation {{in order to maximize}} the broadcast bandwidth efficiency; (3) Rendering all valid entries of MU's cache to ######### ##### when it wakes up. These three features make the SACCS a highly scalable algorithm with minimum database management overhead. Comprehensive simulation results show that the performance of SACCS is superior to those of existing algorithms...|$|R
5000|$|The {{memory of}} the IBM 1620 is {{organized}} into 6-bit addressable digits, the usual 8, 4, 2, 1 plus F, <b>used</b> as a <b>flag</b> <b>bit</b> and C, an odd parity check bit. BCD alphamerics are encoded using digit pairs, with the [...] "zone" [...] in the even-addressed digit and the [...] "digit" [...] in the odd-addressed digit, the [...] "zone" [...] being related to the 12, 11, and 0 [...] "zone punches" [...] as in the 1400 series. Input/Output translation hardware converted between the internal digit pairs and the external standard 6-bit BCD codes.|$|R
40|$|In the literature, there exit {{two types}} of cache {{consistency}} maintenance algorithms for mobile computing environments: stateless and stateful. In a stateless approach, the server is unaware of the cache contents at a mobile user (MU). Even though stateless approaches employ simple database management schemes, they lack scalability and ability to support user disconnectedness and mobility. On the other hand, a stateful approach is scalable for large database systems {{at the cost of}} nontrivial overhead due to server database management. In this paper, we propose a novel algorithm, called Scalable Asynchronous Cache Consistency Scheme (SACCS), which inherits the positive features of both stateless and stateful approaches. SACCS provides a weak cache consistency for unreliable communication (e. g., wireless mobile) environments with small stale cache hit probability. It is also a highly scalable algorithm with minimum database management overhead. The properties are accomplished through the <b>use</b> of <b>flag</b> <b>bits</b> at the server cache (SC) and MU cache (MUC), an identifier (ID) in MUC for each entry after its invalidation, and estimated time-to-live (TTL) for each cached entry, as well as rendering of all valid entries of MUC to uncertain state when an MU wakes up. The stale cache hit probability is analyzed and also simulated under the Rayleigh fading model of error-prone wireless channels...|$|R
50|$|Currently, 3 of the 4 <b>flag</b> <b>bits</b> in the flg {{field are}} defined; the most-significant <b>flag</b> <b>bit</b> is {{reserved}} for future use.|$|R
50|$|Currently, 3 of the 4 <b>flag</b> <b>bits</b> in the <b>flags</b> field (ff1) are defined; the most-significant <b>flag</b> <b>bit</b> is {{reserved}} for future use. The other three flags are known as R, P and T.|$|R
40|$|In the literature, there exit {{two types}} of cache {{consistency}} maintenance algorithms for mobile com-puting environments: stateless and stateful. In a 	 approach, the server is unaware of the cache contents at a mobile user (MU). Even though stateless approaches employ simple database manage-ment, they lack in scalability and ability to support user disconnectedness and mobility. On the other hand, a 	 approach is scalable for large database systems {{at the cost of}} nontrivial overhead due to server database management. In this paper, we propose a novel cache consistency maintenance al-gorithm, called 	 ff flfiffi 	! "#%$ &!$&') (ffi"* 01 (SACCS), which inherits the positive features of both stateless and stateful approaches. SACCS provides a weak cache consistency for unreliable communication environments (e. g., wireless mobile) with small stale cache hit proba-bility. Specifically, the main features of SACCS include: (1) <b>Use</b> of <b>flag</b> <b>bits</b> at server and MU cache (MUC); (2) Use of an identifier (ID) in MUC for each entry after its invalidation; (3) Rendering of all valid entries of MUC to an *! # 2 	- 3 4 	 when an MU wakes up; and (4) Use of estimated time-to-live (TTL) for each cached entry. These four key features make the SACCS a highly scalable algorithm with minimum database management overhead. An analytical model is developed to estimate the upper bound on the stale cache hit probability. Comprehensive simulation results show that the performance of SACCS is superior to other existing stateful and stateless algorithms in both - 3 5 and 04 67 - cell mobile environments...|$|R
5000|$|The process starts when a security-aware {{resolver}} {{sets the}} [...] "DO" [...] ("DNSSEC OK") <b>flag</b> <b>bit</b> in a DNS query. Since the DO bit {{is in the}} extended <b>flag</b> <b>bits</b> defined by EDNS, all DNSSEC transactions must support EDNS. EDNS support is also needed {{to allow for the}} much larger packet sizes that DNSSEC transactions require.|$|R
50|$|With PVRTC2 {{there are}} six {{different}} variables stored to one block: Modulation data (32 <b>bits),</b> modulation <b>flag</b> (1 <b>bit),</b> color B (14 <b>bits),</b> hard transition <b>flag</b> (1 <b>bit),</b> color A (15 <b>bits)</b> and opacity <b>flag</b> (1 <b>bit).</b>|$|R
50|$|With PVRTC {{there are}} six {{different}} variables stored in each block: Modulation data (32 <b>bits),</b> punch-through alpha <b>flag</b> (1 <b>bit),</b> color A (15 bits), color A opaque <b>flag</b> (1 <b>bit),</b> color B (14 bits) and color B opaque <b>flag</b> (1 <b>bit).</b>|$|R
5000|$|Memory was {{accessed}} two decimal digits at {{the same}} time (even-odd digit pair for numeric data or one alphameric character for text data). Each decimal digit was 6 bits, composed of an odd parity Check <b>bit,</b> a <b>Flag</b> <b>bit,</b> and four BCD bits for the value of the digit in the following format: C F 8 4 2 1The <b>Flag</b> <b>bit</b> had several uses: ...|$|R
25|$|The {{original}} IEEE 754 standard, however, {{failed to}} recommend operations to handle such sets of arithmetic exception <b>flag</b> <b>bits.</b> So while these were implemented in hardware, initially programming language implementations typically {{did not provide}} a means to access them (apart from assembler). Over time some programming language standards (e.g., C99/C11 and Fortran) have been updated to specify methods to access and change status <b>flag</b> <b>bits.</b> The 2008 version of the IEEE 754 standard now specifies a few operations for accessing and handling the arithmetic <b>flag</b> <b>bits.</b> The programming model {{is based on a}} single thread of execution and use of them by multiple threads has to be handled by a means outside of the standard (e.g. C11 specifies that the flags have thread-local storage).|$|R
5000|$|The core's Status {{register}} has Carry and Zero <b>flag</b> <b>bits.</b> Overflow and Negative, {{usually found}} in other cores, are not present.|$|R
5000|$|The {{processor}} maintains internal <b>flag</b> <b>bits</b> (a status register), which {{indicate the}} results of arithmetic and logical instructions. The flags are: ...|$|R
5000|$|Suppose {{that the}} status-byte 103 (decimal) is returned, and {{that within the}} status-byte we want to check the 5th <b>flag</b> <b>bit.</b> The <b>flag</b> of {{interest}} (literal bit-position 6) is the 5th one - so the mask-byte will be [...] ANDing the status-byte 103 ( [...] in binary) with the mask-byte 32 ( [...] in binary) evaluates to 32, our original mask-byte, which means the <b>flag</b> <b>bit</b> is set; alternatively, if the flag-bit had not been set, this operation would have evaluated to 0.|$|R
40|$|The QoS of Mobile Ad hoc Network {{is mostly}} {{affected}} by the congestion at any intermediate node in a selected routing path. In this paper, we propose a congestion avoidance basedload balanced routing scheme for mobile ad hoc network. Each node keeps track {{of the number of}} data packets transmitted byhim as well as the data packets transmitted by its one hop neighboring nodes along with their <b>flag</b> <b>bit</b> status for the currenttime interval. The proposed approach is attempts to avoid thecongestion of a node by selecting the disjoint paths. This is achieved by setting a <b>flag</b> <b>bit</b> with the time limit TTL, at the node. On exceeding of this value, the <b>flag</b> <b>bit</b> is reset. By this approach we have attempted to limit the flooding and congestionof the node along with effective balancing of the traffic load...|$|R
40|$|Abstractâ€”A mobile ad hoc network (MANET) is an {{infrastructure}} less distributed network without any central control {{in which each}} node jointly participate for routing. Topology of the network is not fixed and varies dynamically with time. Routing in such {{an infrastructure}} less network is still a challenging task. In this {{paper we propose a}} novel load balanced routing for mobile ad hoc network. In this approach load is defined as the number bytes of packets transmitted by the node and the number of nodes from which it is currently receiving the data packets. Route is constructed in on demand fashion. In our approach there is a provision for handling the data collision occurred by interference by selecting the disjoint paths. For each node contributing in routing a <b>flag</b> <b>bit</b> is set with the time limit TTL once the time limit exceeds this value <b>flag</b> <b>bit</b> is reset. By this <b>flag</b> <b>bit</b> we are able to monitor the data collisions occurred due to interference of the data packets. Each node keeps track of the number of data packets transmitted by him as well as the data packets transmitted by its one hop neighboring nodes along with their <b>flag</b> <b>bit</b> status for the current time interval, by limited broadcasts of hello messages. For relaying the route request the <b>flag</b> <b>bits</b> of neighboring nodes must be at reset status. By this approach we are able to enhance the performance of DSR routing algorithm for larger extent. Keywords-control information, interference, load balanced routing, route coupling. I...|$|R
50|$|IF (Interrupt Flag) is {{a system}} <b>flag</b> <b>bit</b> in the x86 architecture's FLAGS register, which determines {{whether or not the}} CPU will handle {{maskable}} hardware interrupts.|$|R
5000|$|... : 8-bit {{accumulator}} (A) and <b>flag</b> <b>bits</b> (F) carry, zero, minus, parity/overflow, half-carry (used for BCD), and an Add/Subtract flag (usually called N) {{also for}} BCD ...|$|R
50|$|Identifiers in {{the symbol}} table were {{represented}} in a 50-character alphabet, allowing a 36-bit word to represent 6 alphanumeric characters plus 2 <b>flag</b> <b>bits,</b> because 506 < 234.|$|R
5000|$|They {{were placed}} into special ROM cards that {{provided}} {{a few words of}} read/write memory, accessed indirectly {{through the use of a}} thirteenth <b>flag</b> <b>bit</b> in each ROM word.|$|R
50|$|In {{computer}} science a segmented scan is modification of a prefix sum {{with an equal}} sized array of <b>flag</b> <b>bits</b> to denote segment boundaries on which the scan should be performed.|$|R
50|$|An {{instruction}} cache requires only one <b>flag</b> <b>bit</b> per cache row entry: a valid bit. The valid bit indicates {{whether or not}} a cache block has been loaded with valid data.|$|R
50|$|Each {{audio sample}} (of up to 24 bits) is {{combined}} with four <b>flag</b> <b>bits</b> and a synchronisation preamble which is four time slots long to make a subframe of 32 time slots.|$|R
50|$|The Wordmark, by contrast, {{is not a}} BCD character. Rather, it is a <b>flag</b> <b>bit</b> <b>used</b> to {{mark the}} end of a word on some {{variable}} word length computers such as the IBM 1401.|$|R
50|$|The {{data block}} (cache line) {{contains}} the actual data fetched {{from the main}} memory. The tag contains (part of) {{the address of the}} actual data fetched from the main memory. The <b>flag</b> <b>bits</b> are discussed below.|$|R
50|$|A status register, flag register, or {{condition}} code register {{is a collection}} of status <b>flag</b> <b>bits</b> for a processor. An example is the FLAGS register of the x86 architecture or flags in a program status word (PSW) register.|$|R
40|$|A system {{compresses}} image blocks via successive hierarchical {{stages and}} motion encoders which employ caches updated by stack replacement algorithms. Initially, a background detector compares the present image block with a corresponding previously encoded image block and if similar, the background detector terminates the encoding procedure by setting a <b>flag</b> <b>bit.</b> Otherwise, the image block is decomposed into smaller present image subblocks. The smaller present image subblocks are each {{compared with a}} corresponding previously encoded image subblock of comparable size within the present image block. When a present image subblock {{is similar to a}} corresponding previously encoded image subblock, then the procedure is terminated by setting a <b>flag</b> <b>bit.</b> Alternatively, the present image subblock is forwarded to a motion encoder where it is compared with displaced image subblocks, which are formed by displacing previously encoded image subblocks by motion vectors that are stored in a cache, to derive a first distortion vector. When the first distortion vector is below a first threshold TM, the procedure is terminated and the present image subblock is encoded by setting <b>flag</b> <b>bit</b> and a cache index corresponding to the first distortion vector. Alternatively, the present image subblock is passed to a block matching encoder where it is compared with other previously encoded image subblocks to derive a second distortion vector. When the second distortion vector is below a second threshold Tm, the procedure is terminated by setting a <b>flag</b> <b>bit,</b> by generating the second distortion vector, and by updating the cache. Georgia Tech Research Corporatio...|$|R
5000|$|The name [...] "SQUOZE" [...] was {{borrowed}} from the scheme used in the SHARE 709 operating system for representing object code symbols; it packed six characters of a 50-character alphabet plus two additional <b>flag</b> <b>bits</b> into one 36-bit word.|$|R
50|$|The bytes that {{comprise}} the Apple II high-resolution screen buffer contain seven visible bits (each corresponding directly to a pixel) and a <b>flag</b> <b>bit</b> <b>used</b> to select between purple/green or blue/orange colour sets. Each pixel, since it is represented by a single bit, is either on or off; there are no bits within the pixel itself for specifying colour or brightness. Colour is instead created as an artifact of the NTSC colour encoding scheme, determined by horizontal position: pixels with even horizontal coordinates are always purple (or blue, if the <b>flag</b> <b>bit</b> is set), and odd pixels are always green (or orange). Two lit pixels {{next to each other}} are always white, regardless of whether the pair is even/odd or odd/even, and irrespective {{of the value of the}} <b>flag</b> <b>bit.</b> The foregoing is only an approximation of the true interplay of the digital and analog behavior of the Apple's video output circuits on one hand, and the properties of real NTSC monitors on the other hand. However, this approximation is what most programmers of the time would have in mind while working with the Apple's high-resolution mode.|$|R
50|$|The two least-significant-bits of {{the second}} nibble of the first octet of the {{hexadecimal}} representation (i.e., the two least significant bits of the first octet) of the OUI are reserved as <b>flag</b> <b>bits</b> for some protocols (e.g., 'M' bit and 'X' <b>bit),</b> <b>flags</b> to indicate whether the address {{is part of an}} individual (unicast) or group (multicast) address block (e.g., Individual / Group / G bit or Unicast / Multicast / M <b>bit),</b> <b>flags</b> to indicate whether an address is universally or locally administered (e.g., Universal / Local / L bit), etc., and should not contain the values 1,2,3,5,6,7,9,a, b,d, e, or f, unless these values reflect the true meaning of these <b>flag</b> <b>bits</b> - if the organization that owns the OUI does set one of these bits when creating an identifier, then the value {{of the second}} nibble of the first octet changes accordingly in representations of the OUI (e.g., if the hexadecimal value of the second nibble of the first octet is 'C' and the least-significant-bit is set, then the value becomes 'D').|$|R
5000|$|Usage: Describes, with a {{collection}} of <b>flag</b> <b>bits,</b> how the resource will be used by the application. These flags dictate which resources are used in dynamic or static access patterns. Static resource values don't change after being loaded, whereas dynamic resource values may be modified.|$|R
50|$|In the {{original}} B5000, a <b>flag</b> <b>bit</b> in each control or numeric word was {{set aside to}} identify the word as a control word or numeric word. This was partially a security mechanism to stop programs {{from being able to}} corrupt control words on the stack.|$|R
50|$|The {{meaning of}} various <b>flag</b> <b>bits</b> (such as S=1 enables setting the {{condition}} codes) {{is identical to}} the ARM instruction set. The load/store multiple instruction can only access half of the register set, depending on the H bit. If H=0, the 16 bits indicate R0-R15; if H=1, R16-R31.|$|R
