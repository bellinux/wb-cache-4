42|10000|Public
50|$|In {{addition}} to functional requirements captured in a <b>use</b> <b>case</b> <b>description,</b> an analyst may include such non-functional requirements as response time, learnability, etc.|$|E
50|$|There are two {{different}} ways of describing a misuse case textual; one is embedded in a <b>use</b> <b>case</b> <b>description</b> template - where you add an extra description field called Threats. This is the field where you fill in your misuse case steps (and alternate steps). This {{is referred to as}} the lightweight mode of describing a misuse case.|$|E
50|$|Below is {{a sample}} use case written with a slightly-modified {{version of the}} Cockburn-style template. Note {{that there are no}} buttons, controls, forms, or any other UI {{elements}} and operations in the basic <b>use</b> <b>case</b> <b>description,</b> where only user goals, subgoals or intentions are expressed in every step of the basic flow or extensions. This practice makes the requirement specification clearer, and maximizes the flexibility of the design and implementations.|$|E
3000|$|... (EC 3) {{the study}} {{does not contain}} a {{template}} for textual <b>use</b> <b>cases</b> <b>description</b> with focus on an SPL; and [...]...|$|R
30|$|In the literature, {{there have}} been {{different}} proposals for templates for textual <b>use</b> <b>case</b> <b>descriptions</b> of Software Product Lines, such as (Gallina and Guelfi 2007; Gomaa 2004; Oliveira et al. 2013). Other studies have compared some of these templates (Bonifácio and Borba 2009; Santos et al. 2013). However, {{to the best of}} our knowledge, there has not been a systematic effort to collect and summarize the existing templates for textual <b>use</b> <b>case</b> <b>descriptions</b> in the SPL paradigm and there is no empirical assessment of the SPL use cases’ comprehensibility provided by these <b>use</b> <b>case</b> templates.|$|R
40|$|Abstract <b>Use</b> <b>cases</b> are {{the main}} {{requirements}} vehicle of the UML and are used widely to specify systems. Hence, the need to write clear and accurate <b>use</b> <b>case</b> <b>descriptions</b> has a significant impact for many practitioners. However, many have pointed to weaknesses in the support offered to those writing <b>use</b> <b>cases,</b> {{and a number of}} authors advocate the use of rules in the composition and structuring of <b>use</b> <b>case</b> <b>descriptions.</b> These rules constrain the user, by only allowing certain grammatical constructions, typically guiding the structure or the style of the description For example, the CREWS research project pioneered <b>Use</b> <b>Case</b> Authoring Guidelines, suggesting that the adoption of such guidelines improved resulting <b>use</b> <b>case</b> <b>descriptions.</b> Replication of CREWS studies appeared to confirm the view that <b>use</b> <b>case</b> <b>descriptions</b> were improved through the application of guideline sets, but also noted that learning such rules presented a significant overhead. Hence, a leaner set of guidelines (the CP rules) was developed. This paper describes empirical work to assess the utility of these two sets of writing guidelines (CREWS and CP). In particular, descriptions are assessed against a set of established criteria—a <b>use</b> <b>case</b> quality <b>description</b> checklist, which the authors described in a previous paper. Our findings suggest that the leaner set of guidelines performs at least as well in terms of their ability to produce clear and accurate (comprehensible) descriptions. Hence, that a tractable set of rules may prove applicable to the industrial context, which could lead to effective validation of <b>use</b> <b>cases...</b>|$|R
5000|$|The {{other way}} of {{describing}} a misuse case, is by using a separate template for this purpose only. It is suggested to inherit some of the field from <b>use</b> <b>case</b> <b>description</b> (Name, Summary, Author and Date). It also adapts the fields Basic path and Alternative path, where they now describe the paths of the misuse cases instead of the use cases. In addition to there, it is proposed to use several other fields too: ...|$|E
40|$|A Use Case is a {{specification}} of interactions involving a system and external actors of that system. The capability for use case modeling has been integrated to the Unified Modeling Language (UML) since its inception. However, use cases are only defined at an abstract level, as the UML Specification does not discuss <b>use</b> <b>case</b> <b>description</b> in text form. In this paper, we propose an abstract syntax for textual <b>use</b> <b>case</b> <b>description</b> as a meta-model {{extension of the}} UML Specification. This meta-model is based on elements commonly found in use case templates. The meta-model also includes OCL constraints for ensuring consistency with the UML specification...|$|E
40|$|In this lecture {{we cover}} how UML Use Cases {{can be used}} for {{requirements}} capture. We look at the anatomy of a <b>Use</b> <b>Case</b> <b>Description,</b> {{and the way in which}} use cases can be brought together in a use case diagram. We also look at the way that use cases can be derived from problems using noun verb analysis...|$|E
40|$|Upon {{completion}} {{of this section}} of the course, you should be able to: – Describe the Unified Process and explain and differentiate each of its phases and disciplines – Be able to conceive and realize the models and artifacts presented in this section on small- to medium-sized examples, and in particular, you should be able to: • Derive functional requirements from natural language statements (and have an understanding of what is meant by non-functional requirements) • Produce <b>use</b> <b>case</b> <b>descriptions</b> from problem/vision statements • Refine <b>use</b> <b>case</b> <b>descriptions</b> into System Sequenc...|$|R
40|$|In this paper, {{we present}} a {{metamodel}} for textual <b>use</b> <b>case</b> <b>descriptions,</b> structurally conforming to the UML, to specify the behavior of <b>use</b> <b>cases</b> in a flow-oriented manner. While being primarily targeted at supporting requirements engineers in creating consistent <b>use</b> <b>case</b> models, the metamodel defines a textual representation of <b>use</b> <b>case</b> behavior that is easily understandable for readers, who are unaware of the underlying metamodel. Hence, the known benefits of natural language <b>use</b> <b>case</b> <b>descriptions</b> are preserved. Being formalized, consistency between UML-based <b>use</b> <b>case</b> representations and their textual descriptions can be automatically ensured. With NaUTiluS {{we present a}}n extensible, Eclipse-based toolkit, which offers integrated UML <b>use</b> <b>case</b> modeling support, as well as editing capabilities for their textual descriptions...|$|R
30|$|Presenting a {{controlled}} experiment, following the guide of Wohlin et al. (2000), conducted to evaluate {{what kind of}} template better favors the comprehension of SPL variabilities specified in textual <b>use</b> <b>case</b> <b>descriptions.</b>|$|R
40|$|In {{software}} industry, {{there are}} tremendous number of software requirements documents in effect of large scale of software development. These collections of software requirements documents can be reused {{in order to}} cut off the development time and reduce the cost. There is a need to retrieve one or more of those documents which is suitable with the user’s specifications for the new software development. So, if we can retrieve many similar software requirements to a new project, development process will be less costly and less error because the retrieved software requirements can be tailored to the new case with fewer modifications. This paper presents a methodology to retrieve software requirements documents using structured base of <b>use</b> <b>case</b> <b>description</b> semantic similarity computation. Each element of query <b>use</b> <b>case</b> <b>description</b> will be calculated with the <b>use</b> <b>case</b> <b>description</b> in the collections or repository. The semantic similarity score is used to rank the use case in the collections and to retrieve the requirement documents {{to be used in the}} new software project development. We introduce a semantic similarity computation approach as a substitute of term frequency and keyword approach. We validate the usefulness of our method through the experiment using 20 cases. Three experiment scenarios are presented to investigate the ideal threshold value, the retrieval result differences with previous approach and to find out the effect of various combinations of structural query to the retrieval result...|$|E
30|$|The {{independent}} variables (representing the inputs or causes) {{of the experimental}} study were the template of textual <b>use</b> <b>case</b> <b>description,</b> the use cases’ examples, and the questionnaires. The use case templates used in this experiment were: i) Bragança and Machado (Tags structure), ii) Eriksson et al. (Step Identifier structure), iii) Gomaa (Specific Section structure), and iv) Bonifácio and Borba (Advice Use Case structure).|$|E
40|$|This {{document}} {{has been}} written as a BBMRI-ERIC <b>use</b> <b>case</b> <b>description</b> for Research Data Alliance (RDA) Data Fabric IG (DFIG). References to existing RDA work are minimized on purpose, as it focuses on description of the use case itself. The structure of section complies with the RDA DFIG. The document {{is intended to be}} published by RDA among other use cases...|$|E
40|$|In this {{document}} we describe <b>use</b> <b>cases</b> {{and its role}} in the software development process. There is no precise semantics of <b>use</b> <b>cases.</b> <b>Use</b> <b>case</b> <b>descriptions</b> can be formalized with control flowgraphs. Based on this formalization, the use of the standard technique of sequence charts can be improved, in particular for the uses relation and the extend relation between <b>use</b> <b>cases...</b>|$|R
40|$|Summary: This {{deliverable}} describes Web-enabled public showcases {{for public}} dissemination and {{presentation of the}} project. The showcase is built around publicly available, Web-based CODE prototypes. The purpose of each prototype is briefly described followed by typical <b>use</b> <b>case</b> <b>descriptions</b> demonstrated along a typical <b>use</b> <b>case...</b>|$|R
40|$|The Unified Modelling Language (UML) is {{a visual}} {{approach}} to the analysis and design of object-oriented computer systems. However, {{when it comes to}} specifying requirements through <b>use</b> <b>case</b> <b>descriptions</b> we see two weaknesses in the current approach. The descriptions are textual (the success and acceptance of UML is largely due to its visual nature) and the group process for acquiring descriptions can result in a small number of stakeholders having their views represented. To address these issues the RECOCASE methodology captures <b>use</b> <b>case</b> <b>descriptions</b> from multiple viewpoints and automatically generates a visualisation of the individual and shared viewpoints to assist identification and resolution of conflicts. This paper briefly describes the approach and results from various initial evaluation studies. 1...|$|R
30|$|However, it will {{be checked}} if information, which was {{required}} to be added in ARIS might be suitable to be collected already during the <b>Use</b> <b>Case</b> <b>description,</b> as this would not impose to much additional effort for the Use Case writer, but could help to ease the ARIS workflow. If such kind of information is identified, a proposal to enhance IEC 62559 accordingly will be created.|$|E
40|$|Use {{cases are}} often {{perceived}} {{as an integral part}} of an objectoriented approach to software development, yet despite claims that objects fall naturally from the <b>use</b> <b>case</b> <b>description</b> [1], detailed guidance on moving towards design is rather limited. This paper outlines an approach which helps to tease out information necessary for design, that helps discover design classes which are often hidden, implicit or assumed...|$|E
30|$|At first, it is {{important}} to highlight that this mapping study focused on how to describe SPL variability within the <b>use</b> <b>case</b> <b>description.</b> Therefore, approaches to describe variability based on include/extend relationships (e.g. Bragança and Machado (2006)) or activity diagrams (e.g. Yu et al. (2014)), for example, were not taken into account in this study. Moreover, works not using the use cases for the capture of SPL variabilities were not considered (e.g. Zhou et al. (2014)).|$|E
5000|$|... #Caption: <b>Use</b> <b>Case</b> Analysis <b>Description</b> of Video Store example ...|$|R
30|$|Since one {{limitation}} of the conducted controlled experiment {{was the size of}} the <b>use</b> <b>case</b> <b>descriptions,</b> which has just two or three variations, we believe that an interesting future work is the replication of this experiment with more complex <b>use</b> <b>cases.</b> Also, {{it would be interesting to}} apply the other SPL <b>use</b> <b>case</b> templates and to use them in theindustry.|$|R
50|$|A {{principal}} {{distinction of}} ICONIX is {{its use of}} robustness analysis, a method for bridging the gap between analysis and design. Robustness analysis reduces the ambiguity in <b>use</b> <b>case</b> <b>descriptions,</b> by ensuring that they are written {{in the context of}} an accompanying domain model. This process makes the <b>use</b> <b>cases</b> much easier to design, test and estimate.|$|R
40|$|Abstract Use cases have, {{for some}} years, been a popular {{approach}} to specification, {{as part of}} the Unified Modelling Language (UML). However, a number of authors have pointed to weaknesses with the approach, particularly in terms of the support offered to the writer of the <b>use</b> <b>case</b> <b>description.</b> This paper describes a <b>Use</b> <b>Case</b> <b>Description</b> Quality Checklist that acts as a check {{on the quality of the}} written description. The checklist is derived from theories of text comprehension, taken from the Discourse Processing community. The checklist approach has a number of benefits. First, the approach can be used to derive, or examine further, use case guidelines. That is, by considering whether such guidelines are likely to result in desirable qualities within the resulting description, one is able to make an informed judgement about the utility of those guidelines. Second, one can test for the desirable quality features in existing descriptions, thus enabling empirical validation. Third, as a minimum, the quality features can themselves be used as a checklist for the examination, and revision, of use case descriptions. To demonstrate applicability, the paper reports upon the use, and success, of the approach on an industrial case study...|$|E
30|$|The {{use case}} {{template}} {{identified in the}} Bragança and Machado‘s paper (Bragança and Machado 2005) specifies the variation points through OPT and ALT tags. Using these tags, any text fragment of the textual <b>use</b> <b>case</b> <b>description</b> may be variant and this is explicitly marked by pairs of the XML-like tags <variant> and </variant>. An interesting feature of this template {{is the presence of}} questions related to the variation points that are used to guide the instantiation of the product use cases.|$|E
40|$|Use {{cases are}} a popular means of {{requirements}} engineering for object-oriented systems. However, {{there is a}} lack of guidance on the contents and position of use cases in the overall software development process. In the paper we identify four levels of information to be included in the <b>use</b> <b>case</b> <b>description,</b> based on existing methods in requirements specification and human-computer-interaction. This gives methodical guidance for the developmentofuse cases and also for the integration of use cases and the analysis object model...|$|E
40|$|In {{this article}} a {{lightweight}} formalism based on events is introduced for <b>use</b> <b>case</b> <b>descriptions.</b> The behaviour of <b>use</b> <b>cases</b> is described precisely {{and used to}} check for equivalence of <b>use</b> <b>cases.</b> The definitions also allow the developer to explore various possible restructuring of <b>use</b> <b>cases.</b> A prototype system, based on the formal definitions, enabling the development team to analyse the descriptions has also been developed. ...|$|R
40|$|Our {{approach}} aims {{at helping}} to produce adequate requirements, both clear and precise enough {{so as to}} provide a sound basis to the overall development. Our idea here is to nd a way to combine both advantages of <b>use</b> <b>cases</b> and of formal speci cations. We present a technique for improving <b>use</b> <b>case</b> based requirements, <b>using</b> the formally grounded development of the requirements speci cation, and that results both in an improved requirements capture, and in a requirement validation. The formally grounded requirements speci cation is written in a " notation, using both diagrams and text, with a formal counterpart (written in the Casl and Casl-Ltl languages). Being formally grounded, our method is systematic, and it yields further questions on the system that will be reected in the improved <b>use</b> <b>case</b> <b>descriptions.</b> The resulting <b>use</b> <b>case</b> <b>descriptions</b> are of high quality, more systematic, more precise, and its corresponding formally grounded speci cation is available. We illustrate our approach on part of the Auction System case study...|$|R
40|$|This section {{provides}} {{the reader with}} more details {{in the form of}} <b>Use</b> <b>Cases</b> on stakeholder <b>use</b> of the IEA. The <b>Use</b> <b>Case</b> <b>descriptions</b> below are notional or illustrative. In some cases they represent present approaches to potential use of the IEA. In other cases they are “recommended” approaches for use of the IEA. As managers begin the process of interacting with the enterpris...|$|R
30|$|However, it is {{not enough}} to only manage {{variability}} among whole use cases; it must also be possible to specify variant behavior within use case descriptions (Erikssona et al. 2004). This variability can be specified through variation points, and optional and alternative use cases (Fant et al. 2013). Therefore, the template used for textual use cases in the SPL paradigm should allow the specification of “small variations” (Gomaa 2004) (fine-grained variation), which can affect just one or two lines in the <b>use</b> <b>case</b> <b>description.</b>|$|E
40|$|Abstract—The {{focus of}} this paper is to {{introduce}} a theory based on a wide-spreading model of Use Cases (UCs). The pervasive benefits of UCs in the computer systems and software’s developments have motivated the UCs formalization needing. Also, the definition of UCs through <b>Use</b> <b>Case</b> <b>Description</b> Markup Language (UCDML) is enabled the XML technology explotation in order to suggest the powerful ways for the creation, usage, distribution, and maintenance of UCs. Consequently, we present the UCDML formalization, an XML definition language, to support the UC-based requirements engineering...|$|E
40|$|This {{thesis is}} {{concerned}} of automating {{the translation of}} the narrative description of use cases into sequence diagrams in the object-oriented analysis. We propose an architecture for a semi-automatic translation system that can translate descriptions of use cases to descriptions of sequence diagrams. The system is based on patterns of sentences in a natural language like English. We present a set of syntactic patterns to guide developers in writing recognizable sentences in use case descriptions {{and a set of}} naming rules to guide the system in constructing message names for the generated sequence diagram. We also present a technique for a user of the system to intervene the system translation so that special cases can be processed in a specified way. The sentences in a narrative <b>use</b> <b>case</b> <b>description</b> are converted to a set of message units, which can be used to compose a sequence diagram in UML. A parser does the conversion. A catalog is used to record information derived from the <b>use</b> <b>case</b> <b>description.</b> It also records specific translation decisions made by a user of the system. Paper copy at Leddy Library: Theses 2 ̆ 6 Major Papers - Basement, West Bldg. / Call Number: Thesis 1998. L 436. Source: Masters Abstracts International, Volume: 40 - 03, page: 0724. Adviser: Liwu Li. Thesis (M. Sc.) [...] University of Windsor (Canada), 1998...|$|E
40|$|The control-flow {{for five}} kinds of <b>use</b> <b>cases</b> is analysed: for common <b>use</b> <b>cases,</b> variant <b>use</b> <b>cases,</b> {{component}} <b>use</b> <b>cases,</b> specialised <b>use</b> <b>cases</b> and for ordered <b>use</b> <b>cases.</b> The control-flow semantics of <b>use</b> <b>cases</b> - {{and of the}} uses-relation, the extends-relation and the precedes-relation between <b>use</b> <b>cases</b> - is {{described in terms of}} flowgraphs. Sequence diagrams of <b>use</b> <b>cases</b> are refined to capture the control-flow adequately. Guidelines are given for <b>use</b> <b>case</b> <b>descriptions</b> to attain a well-defined flow of control...|$|R
30|$|After {{removing}} duplicate studies, {{and reading}} title and abstract {{of all the}} 2394 papers according to Step 2, {{the result was a}} set of 101 potentially relevant studies. In the third step, we read the full paper and selected those which have a textual <b>use</b> <b>case</b> template for an SPL with a focus on describing SPL variabilities within the <b>use</b> <b>cases</b> <b>description.</b> The result was a set of 23 papers.|$|R
40|$|The {{effective}} {{analysis and}} specification of requirements {{is critical in}} software development. Faults in the requirements may have {{significant impact on the}} quality of the software system. <b>Use</b> <b>cases</b> describe and analyze requirements in many current Object Oriented (OO) development methodologies, and can serve as a means for developers to communicate with different stakeholders. However, issues concerning <b>use</b> <b>case</b> format and level of detail are unclear and debatable. This study uses theories from cognitive psychology on how humans understand text and diagrams to investigate the effect of <b>use</b> <b>case</b> model format on end user understanding. An experiment to assess the performance of novices when <b>using</b> different <b>use</b> <b>case</b> formats indicated that for tasks that required only surface understanding of the <b>use</b> <b>case</b> model, the provision of diagrams along with the textual <b>use</b> <b>case</b> <b>descriptions</b> significantly improved comprehension performance in both familiar and unfamiliar application domains. However, the author found no statistically significant difference in performance between simple and detailed diagrams, suggesting that the provision of simple diagrams along with textual <b>use</b> <b>case</b> <b>descriptions</b> might be sufficient to support the negotiation and communication on system requirements between novice end-users and system analysts...|$|R
