14|20|Public
50|$|Some modern browsers {{no longer}} support <b>URL</b> <b>encoding</b> of basic access credentials.|$|E
5000|$|Percent-encoding, {{also known}} as <b>URL</b> <b>encoding,</b> is a {{mechanism}} for encoding information in a Uniform Resource Identifier (URI) under certain circumstances. Although it is known as <b>URL</b> <b>encoding</b> it is, in fact, used more generally within the main Uniform Resource Identifier (URI) set, which includes both Uniform Resource Locator (URL) and Uniform Resource Name (URN). As such, it is also used {{in the preparation of}} data of the [...] media type, as is often used in the submission of HTML form data in HTTP requests.|$|E
5000|$|XmlHttpRequest (in Elm's Http.send) {{requires}} server side authorization headers [...] for Http GET {{and extra}} [...] for Http POST. <b>Url</b> <b>encoding</b> of requests is implemented in a third-party library named elm_CodecURI.|$|E
30|$|Make {{sure all}} {{parameters}} are properly <b>URL</b> <b>encoded.</b>|$|R
5000|$|... magnet:? xl = in Bytes & dn = name (<b>URL</b> <b>encoded)</b> & xt = urn: tree: tiger: TTH ...|$|R
50|$|<b>URLs</b> <b>encoded</b> in {{two-dimensional}} barcodes such as QR code {{are often}} shortened by a URL shortener {{in order to}} reduce the printed area of the code, or allow printing at lower density in order to improve scanning reliability.|$|R
50|$|Styling {{is not as}} good as CSS, <b>url</b> <b>encoding</b> {{requires}} a third party library, but the language works fairly well. It seems more geared to build game UI's but with some extra work can do ajax web forms as well.|$|E
50|$|The first {{revision}} {{of a process}} definition expression language was called Workflow Process Definition Language (WPDL) {{which was published in}} 1998. This process meta-model contained all the key concepts required to support workflow automation expressed using <b>URL</b> <b>Encoding.</b> Interoperability demonstrations were held to confirm the usefulness of this language as a way to communicate process models.|$|E
5000|$|This kind of <b>URL</b> <b>encoding</b> {{is not a}} {{national}} standard, but rather a system used by the domain name registrar ThaiURL.com. It {{is one of many}} localized naming schemes that predate standardisation of Internationalized domain names (IDNA); at the moment the two systems appear to coexist. The ccTLD name registrar for [...]th, thnic.net, supports IDNA; ThaiURL registers [...]com names.|$|E
5000|$|A result {{excluding}} padding can {{be included}} in a <b>URL</b> without <b>encoding</b> any characters.|$|R
5000|$|Using {{standard}} Base64 in <b>URL</b> requires <b>encoding</b> of , [...] and [...] characters into special percent-encoded hexadecimal sequences ( [...] becomes , [...] becomes [...] and [...] becomes [...] ), {{which makes}} the string unnecessarily longer.|$|R
5000|$|A blog {{might have}} a <b>URL</b> that <b>encodes</b> the dates of each entry: It can be altered like this: which also allows the user to change the URL to see all postings {{available}} in December, simply by removing the text encoding the day '19', as though navigating [...] "up" [...] a directory: ...|$|R
5000|$|When a {{web browser}} sends a POST request from a web form element, the default Internet media type is [...] "application/x-www-form-urlencoded". This is a format for {{encoding}} key-value pairs with possibly duplicate keys. Each key-value pair is separated by an '&' character, and each key is separated from its value by an '=' character. Keys and values are both escaped by replacing spaces with the '+' character and then using <b>URL</b> <b>encoding</b> on all other non-alphanumeric characters.|$|E
5000|$|Some {{characters}} {{cannot be}} part of a URL (for example, the space) and some other characters have a special meaning in a URL: for example, the character [...] can be used to further specify a subsection (or fragment) of a document. In HTML forms, the character [...] is used to separate a name from a value. The URI generic syntax uses <b>URL</b> <b>encoding</b> to deal with this problem, while HTML forms make some additional substitutions rather than applying percent encoding for all such characters. SPACE is encoded as [...] or [...] "".HTML 5 specifies the following transformation for submitting HTML forms with the [...] "get" [...] method to a web server:* Characters that cannot be converted to the correct charset are replaced with HTML numeric character references* SPACE is encoded as [...] or * Letters (- and -), numbers (-) and the characters ,, and [...] are left as-is* All other characters are encoded as [...] hex representation with any non-ASCII characters first encoded as UTF-8 (or other specified encoding)The octet corresponding to the tilde ("") is permitted in query strings by RFC3986 but required to be percent-encoded in HTML forms to [...] "".The encoding of SPACE as [...] and the selection of [...] "as-is" [...] characters distinguishes this encoding from RFC 3986.|$|E
30|$|Intercept {{the request}} as the CM, receive all cookies, and {{redirect}} {{to the target}} <b>URL</b> <b>encoding</b> the cookies as request parameters.|$|E
40|$|Phishing is a {{criminal}} scheme to steal the user‟s personal data and other credential information. It is a fraud that acquires victim‟s confidential information such as password, bank account detail, credit card number, financial username and password etc. and later it can be misuse by attacker. In this research paper, we proposed a new anti-phishing algorithm, which we call ObURL Detection Algorithm. The ObURL Detection Algorithm used to detect the URL Obfuscation Phishing attacks and it provides the multilayer security over the internet fraud. The ObURL Detection Algorithm can detect the hyperlink, content of hyperlink‟s destination URL, iFrame in email, input form, input form in iFrame source URL, iFrame within iFrame, and after all that multiple tests will be perform such as DNS Test, IP address Test, <b>URL</b> <b>Encode</b> Test, Shorten <b>URL</b> Test, Black and Whitelist Test, URL pattern matching Test On that collected data. Our experiments verified that ObURL Detection Algorithm is effective to detect both known and unknown URL Obfuscation phishing attacks...|$|R
50|$|Semacodes are {{primarily}} aimed at being used with cellular phones which have built-in cameras, to quickly capture a Web site address {{for use in}} the phone's web browser. Semacodes are in fact DataMatrix <b>encoded</b> <b>URLs.</b>|$|R
5000|$|The {{first part}} of the file is an e-mail header. The second part is {{normally}} encoded HTML. Subsequent parts are additional resources identified by their original <b>URLs</b> and <b>encoded</b> in base64. This format is sometimes referred to as MHT, after the suffix [...]mht given to such files by default when created by Microsoft Word, Internet Explorer, or Opera. MHTML is a proposed open standard, circulated in a revised edition in 1999 as RFC 2557.|$|R
40|$|We {{believe that}} storing web {{annotations}} on annotation servers limits the widespread adoption of web annotation technology. Instead {{of relying on}} annotation servers, we propose to encode annotations as an extended URL. Because they follow the standard <b>URL</b> <b>encoding,</b> these extended URLs can be readily used and embedded in Web documents. We then envision specific search engines that {{would be able to}} index these extended URLs and provide interesting new services...|$|E
30|$|We did {{not perform}} language-specific {{preprocessing}} techniques such as word stemming, stop word removal, or case folding, since other researchers found that such techniques tend to hurt spam-filtering accuracy [22, 38, 51]. However, we use an e-mail-specific preprocessing before the classification task. In this way, we employ the Jaakko Hyvattis normalizemime. 5 This program converts the character set to UTF- 8, decoding Base 64, Quoted-Printable and <b>URL</b> <b>encoding</b> and adding warn tokens in case of encoding errors. It also appends a copy of HTML/XML message bodies with most tags removed, decodes HTML entities and limits the size of attached binary files.|$|E
40|$|Abstract—SQL {{injection}} on web applications is a {{very popular}} kind of attack. There are mechanisms such as intrusion detection systems in order to detect this attack. These strategies often rely on techniques implemented at high layers of the application but do not consider {{the low level of}} system calls. The problem of only considering the high level perspective is that an attacker can circumvent the detection tools using certain techniques such as <b>URL</b> <b>encoding.</b> One technique currently used for detecting low-level attacks on privileged processes is the tracing of system calls. System calls act as a single gate to the Operating System (OS) kernel; they allow catching the critical data at an appropriate level of detail. Our basic assumption is that any type of application, be it a system service, utility program or Web application, “speaks ” the language of system calls when having a conversation with the OS kernel. At this level we can see the actual attack while it is happening. We conduct an experiment in order to demonstrate the suitability of system call analysis for detecting SQL injection. We are able to detect the attack. Therefore we conclude that system calls are not only powerful in detecting low-level attacks but that they also enable us to detect high-level attacks such as SQL injection...|$|E
5000|$|Though the [...] {{element is}} {{deprecated}} and most browsers no longer support or render it, {{there are still}} some vestiges of indexed search in existence. For example, this {{is the source of the}} special handling of plus sign, '' within browser <b>URL</b> percent <b>encoding</b> (which today, with the deprecation of indexed search, is all but redundant with [...] ). Also some web servers supporting CGI (e.g., Apache) will process the query string into command line arguments if it does not contain an equals sign, '' (as per section 4.4 of CGI 1.1). Some CGI scripts still depend on and use this historic behavior for URLs embedded in HTML.|$|R
40|$|This paper {{describes}} the OpenLSD framework combining multicast-based, peer-to-peer network service discovery with physical location awareness. A number of useful services {{based on the}} framework are described. The concepts of virtual locations and digital proxies for physical services are introduced and used together with a physically based scope mechanism (aura and nimbus). A simple extensible <b>URL</b> scheme for <b>encoding</b> physical or semantic location is also presented...|$|R
25|$|Contextual output encoding/escaping {{could be}} used as the primary defense {{mechanism}} to stop XSS attacks. There are several escaping schemes that can be used depending on where the untrusted string needs to be placed within an HTML document including HTML entity encoding, JavaScript escaping, CSS escaping, and <b>URL</b> (or percent) <b>encoding.</b> Most web applications that do not need to accept rich data can use escaping to largely eliminate the risk of XSS attacks in a fairly straightforward manner.|$|R
40|$|ABSTRACT Context: With {{growing number}} of online businesses, Search Engine Optimization (SEO) has become vital to {{capitalize}} a business because SEO is key factor for marketing an online business. SEO is the process to optimize a website so that it ranks well on Search Engine Result Pages (SERPs). Dynamic websites are commonly used for e-commerce because they are easier to update and expand; however they are subjected to indexing related problems. Objectives: This research aims to examine and address dynamic websites indexing related issues. To achieve {{aims and objectives of}} this research I intend to explore dynamic websites indexing considerations, investigate SEO tools to carry SEO campaign in three major search engines (Google, Yahoo and Bing), experiment SEO techniques, and determine to what extent dynamic websites can be made search engine friendly on these major search engines. Methods: In this research, detailed literature survey is performed to evaluate existing knowledge for SEO for dynamic websites. Further empirical experiments are conducted to address dynamic websites indexing problems; and to evaluate SEO techniques used in empirical experiments. Results: It is found that all major search engines, including Google, cannot fully index dynamic websites. I used some SEO techniques which I explored during this study to help dynamic webpage(s) get indexed in major search engines. The experiment results reflect the effectiveness of SEO techniques including <b>URL</b> <b>encoding</b> /friendly URLs on major search engines. Conclusions: I conclude that, dynamic websites are subjected to indexing related problems and require additional SEO efforts to appear in SERPs. Not all SEO techniques are equally effective on all search engines to improve indexing of dynamic webpage(s). Each implemented SEO technique has different impression on major search engines (Google, Yahoo, Bing, Ask, and AOL). As, the encoded URLs technique is effective on all major search engines. However, Yahoo and Bing prefer friendly URLs over typical URLs with parameters. Therefore, presentation of dynamic URL could be quite paying if it is needed to index dynamic website on search engines other than Google...|$|E
5000|$|Application layer {{protocols}} like HTTP {{allow for}} multiple encodings of data which are {{interpreted as the}} same value. For example, the string [...] "cgi-bin" [...] in a <b>URL</b> can be <b>encoded</b> as [...] "%63%67%69%2d%62%69%6e" [...] (i.e., in hexadecimal). A web server will view these as the same string and act on them accordingly. An IDS {{must be aware of}} all of the possible encodings that its end hosts accept in order to match network traffic to known-malicious signatures.|$|R
5000|$|This may be {{contrasted with}} a Uniform Resource Locator (<b>URL),</b> which may <b>encode</b> within the {{identifier}} such {{attributes of the}} resource as the protocol {{to be used to}} access the server holding the resource, the server host name and port number, and perhaps even location specifics such as the name of a file in the server file system containing the resource. In the Handle System, these specifics are not encoded in the handle, but are found in the metadata to which the handle is bound.|$|R
40|$|The RNA 3 D Structure-to-Multiple Sequence Align-ment Server (R 3 D- 2 -MSA) {{is a new}} {{web service}} that {{seamlessly}} links RNA three-dimensional (3 D) struc-tures to high-quality RNA multiple sequence align-ments (MSAs) from diverse biological sources. In this first release, R 3 D- 2 -MSA provides manual and programmatic access to curated, representative ri-bosomal RNA sequence alignments from bacterial, archaeal, eukaryal and organellar ribosomes, us-ing nucleotide numbers from representative atomic-resolution 3 D structures. A web-based front end is available for manual entry and an Application Pro-gram Interface for programmatic access. Users can specify up to five ranges of nucleotides and 50 nu-cleotide positions per range. The R 3 D- 2 -MSA server maps these ranges to the appropriate columns of the corresponding MSA and returns {{the contents of the}} columns, either for display in a web browser or in JSON format for subsequent programmatic use. The browser output page provides a 3 D interactive display of the query, a full list of sequence variants with taxonomic information and a statistical sum-mary of distinct sequence variants found. The out-put can be filtered and sorted in the browser. Pre-vious user queries can be viewed at any time by resubmitting the output <b>URL,</b> which <b>encodes</b> the search and re-generates the results. The service is freely available with no login requirement a...|$|R
50|$|QR codes {{have become}} common in {{consumer}} advertising. Typically, a smartphone {{is used as}} a QR code scanner, displaying the code and converting it to some useful form (such as a standard URL for a website, thereby obviating the need for a user to type it into a web browser).QR code has become a focus of advertising strategy, since it provides a way to access a brand's website more quickly than by manually entering a URL. Beyond mere convenience to the consumer, the importance of this capability is that it increases the conversion rate (the chance that contact with the advertisement will convert to a sale), by coaxing interested prospects further down the conversion funnel with little delay or effort, bringing the viewer to the advertiser's website immediately, where a longer and more targeted sales pitch may lose the viewer's interest.Although initially used to track parts in vehicle manufacturing, QR codes are used over a much wider range of applications, including commercial tracking, entertainment and transport ticketing, product and loyalty marketing (examples: mobile couponing where a company's discounted and percent discount can be captured using a QR code decoder which is a mobile app, or storing a company's information such as address and related information alongside its alpha-numeric text data {{as can be seen in}} Yellow Pages directory), and in-store product labeling. It can also be used in storing personal information for use by organizations. An example of this is Philippines National Bureau of Investigation (NBI) where NBI clearances now come with a QR code. Many of these applications target mobile-phone users (via mobile tagging). Users may receive text, add a vCard contact to their device, open a URI, or compose an e-mail or text message after scanning QR codes. They can generate and print their own QR codes for others to scan and use by visiting one of several pay or free QR code-generating sites or apps. Google had an API, now deprecated, to generate QR codes, and apps for scanning QR codes can be found on nearly all smartphone devices.QR codes storing addresses and URLs may appear in magazines, on signs, on buses, on business cards, or on almost any object about which users might want information. Users with a camera phone equipped with the correct reader application can scan the image of the QR code to display text, contact information, connect to a wireless network, or open a web page in the telephone's browser. This act of linking from physical world objects is termed hardlinking or object hyperlinking. QR codes also may be linked to a location to track where a code has been scanned. Either the application that scans the QR code retrieves the geo information by using GPS and cell tower triangulation (aGPS) or the <b>URL</b> <b>encoded</b> in the QR code itself is associated with a location.|$|R
40|$|We {{present a}} novel {{user-interface}} and distributed imaging system for controlling robotic web-cameras via a wireless cellular phone. A user scrolls an image canvas {{to select a}} new live picture. The cellular phone application (a Java MIDlet) sends a <b>URL</b> request, which <b>encodes</b> the new pan/tilt/optical-zoom of a live picture, to a web-camera server. The user downloads a new live picture centered on the user's new viewpoint. The web-camera server mediates requests from users, by time-sharing control of the physical robotic hardware. By processing a queue of user requests at different pan/tilt/zoom locations, the server can capture a single photograph for each user. While one user downloads a new live image, the robotic camera moves to capture images and service other independent user requests. The end-toend system enables each user to independently steer the robotic camera, viewing live snapshot pictures from a cellular phone...|$|R
40|$|Enabling {{screens and}} cameras to {{communicate}} has been attract-ing growing interests. The idea is simple: information is encoded into a visual frame shown on a screen, and any camera-equipped device {{can turn to}} the screen and immediately fetch the informa-tion. Operating on the visible light spectrum band, screen-camera communication is free of electromagnetic interference, offering a promising out-of-band communication alternative for short-range information acquiring. The most popular example is QR code [1], where information (typically a <b>URL)</b> is <b>encoded</b> into a 2 D barcode. Recent research endeavors have led to innovative barcode designs to boost data rate or to enhance reliability. These efforts are exciting, however they commonly require dis-playing visible coded images, which interfere with the content the screen is playing and create unpleasant viewing experiences. In this work, we seek approaches to enabling unobtrusive screen-camera communication, which allows the screen to concurrently fulfill a dual role: displaying content and communication. Ultimately, we envision a screen-camera communication system that transmits and receives dynamic data in real time, while ensuring communication occurs unobtrusively regardless of the content the screen is display-ing — let it be an image, a movie, a video clip, a web page, a game interface, or any other app window. As the user interacts with the screen and switches the content, the communication sustains. Hence, communication is truly realized as an additional function-ality for the screen, without placing any constraints on the screen’s original functionality (displaying content). Existing designs on un-obtrusive screen-camera communication, however, are limited to screen content in a standalone file (e. g., image, video) and fail to support arbitrary content on the screen, which can be generated on the fly with user interactions...|$|R
40|$|Frequent {{users of}} social {{services}} such as Twitter are now familiar {{with the use of}} URL shortening services to produce compressed versions of actionable URLs. Although the typical user motivation for these is often taken to be convenience – particularly in the matter of reducing the amount of space taken by a link during a tweet, these shortening services are also used for various other purposes, including the collection of analytics for marketing purposes. In this poster we present the initial findings from our analysis of 350, 000 tweets from Twitter on a subject close to the hearts of many ASIS&T conference attendees – the TSA (transport security administration). These tweets, gathered over a period of six weeks, primarily collect together reactions to a number of events and announcements of both positively and negatively nature, and as such, contain a large number of <b>encoded</b> <b>URLs.</b> We show the result of back-tracking URLs to their origin, demonstrating that it is now commonplace for URLs to be redirected through more than one redirection service. From analysis of the shortening services used we demonstrate that the majority of shortened URLs make use of one of {{a very small number of}} services, although these may be identified via an alias. Finally, we discuss the implications of these findings, both in terms of preservation and our ability to access the context of older Twitter conversations, and in terms of the implications for developers of user applications or content analysis platforms...|$|R

