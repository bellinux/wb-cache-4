0|1752|Public
50|$|Adding the <b>user</b> <b>agent’s</b> contact {{information}} to the registered {{contact information}} has many advantages. As the SBC {{does not have to}} keep local registration information this solution is simple to implement and does not require memory for keeping the information. Further, requests destined to the <b>user</b> <b>agent</b> do not necessarily have to traverse the SBC that has processed the <b>user</b> <b>agent’s</b> registration messages. Any SBC that can reach the <b>user</b> <b>agent</b> can correctly route messages destined to the <b>user</b> <b>agent</b> based on the information included in the SIP request. This advantage applies, however, only in some cases. In case the NAT used in front of the <b>user</b> <b>agent</b> accepts traffic only from the IP addresses which the <b>user</b> <b>agent</b> has contacted previously then only the SBC that has processed the <b>user</b> <b>agent’s</b> REGISTER requests will be able to contact the <b>user</b> <b>agent.</b>|$|R
5000|$|When a web {{application}} issues HSTS Policy to <b>user</b> <b>agents,</b> conformant <b>user</b> <b>agents</b> behave as follows: ...|$|R
50|$|Developed by the <b>User</b> <b>Agent</b> Accessibility Guidelines Working Group, the UAAG 1.0 {{became a}} W3C Recommendation on 17 December 2002. The UAAG {{is a set}} of {{guidelines}} for <b>user</b> <b>agent</b> developers (such as web browsers and media players) aimed at making the <b>user</b> <b>agent</b> accessible to <b>users</b> with disabilities. Techniques for <b>User</b> <b>Agent</b> Accessibility Guidelines 1.0 was published as a W3C Note on the same day; it provides techniques for satisfying the checkpoints defined in UAAG 1.0.Working group members also produced other supporting documents, including initial notes on How to evaluate a <b>user</b> <b>agent</b> for conformance to UAAG 1.0; this document was not formally approved by the working group.No <b>user</b> <b>agents</b> have been reported as fully conforming to UAAG 1.0.|$|R
50|$|The <b>User</b> <b>Agent</b> Accessibility Guideline Working Group {{develops}} guidelines, {{techniques and}} other documents to promote the accessibility of user agents: browsers and plug-ins.The working group consists mainly of organizations that develop <b>user</b> <b>agents,</b> researchers, and other accessibility experts.UAWG published <b>User</b> <b>Agent</b> Accessibility Guidelines (UAAG) 2.0 in December 2015. Supporting documentation includes: UAAG 2.0 Reference and UAAG Mobile Examples. The working group published <b>User</b> <b>Agent</b> Accessibility Guidelines 1.0 (UAAG 1.0) as a W3C Recommendation in 2002.|$|R
5000|$|To {{summarize}} {{how this}} works, when a <b>user</b> <b>agent</b> submits {{a request to}} a server, the <b>user</b> <b>agent</b> informs the server what media types it understands with ratings of how well it understands them. More precisely, the <b>user</b> <b>agent</b> provides an [...] HTTP header that lists acceptable media types and associated quality factors. The server is then able to supply the version of the resource that best fits the <b>user</b> <b>agent's</b> needs.|$|R
40|$|Capabilities {{of major}} Japanese <b>user</b> <b>agents,</b> three screen readers and one voice browser, were {{investigated}} {{with the following}} test files: W 3 C UAAG 1. 0 Test Suite for HTML 4. 01, an accessible PDF file, an accessible Flash file, and test files which test Japanese specific issues. Using the UAAG 1. 0 Test Suite, 20 out of 48 Priority 1 checkpoints were met by all <b>user</b> <b>agents,</b> while all of the <b>user</b> <b>agents</b> failed to meet 11 of the checkpoints. Test results of all test files were assigned into three categories: capabilities satisfied by almost all <b>user</b> <b>agents,</b> capabilities not satisfied {{by any of the}} <b>user</b> <b>agents,</b> and capabilities that were satisfied by some of the <b>user</b> <b>agents</b> only. The test results indicated that 1) two major Japanese <b>user</b> <b>agents</b> do not have enough functions to navigate through a Web page using the structure information of the content, and 2) none of the <b>user</b> <b>agents</b> have enough functions to control multimedia and timedependent interactions. These results provide an objective evidence to define the Japanese baseline, a set of technologies that a <b>user</b> <b>agent</b> is assumed to support, which is required in the WCAG 2. 0 working draft. Accessibility responsibility between Web content and <b>user</b> <b>agents</b> is also determined by the current survey. Categories and Subject Descriptors K. 4. 2 [Social Issues]: Assistive technologies for persons with disabilities, H. 5. 2 [User Interfaces]: Evaluation/methodology...|$|R
30|$|The Require header {{defined in}} SIP {{can be used}} for <b>User</b> <b>Agent</b> Clients (UACs) to {{indicate}} <b>user</b> <b>agent</b> servers the options expected.|$|R
25|$|Developed by the <b>User</b> <b>Agent</b> Accessibility Guidelines Working Group, the UAAG 1.0 {{became a}} W3C Recommendation on 17 December 2002. The UAAG {{is a set}} of {{guidelines}} for <b>user</b> <b>agent</b> developers (such as web browsers and media players) aimed at making the <b>user</b> <b>agent</b> accessible to <b>users</b> with disabilities. Techniques for <b>User</b> <b>Agent</b> Accessibility Guidelines 1.0 was published as a W3C Note on the same day; it provides techniques for satisfying the checkpoints defined in UAAG 1.0.|$|R
50|$|The network {{elements}} {{that use the}} Session Initiation Protocol for communication are called SIP <b>user</b> <b>agents.</b> Each <b>user</b> <b>agent</b> (UA) performs the function of a <b>user</b> <b>agent</b> client (UAC) when it is requesting a service function, and that of a <b>user</b> <b>agent</b> server (UAS) when responding to a request. Thus, any two SIP endpoints may in principle operate without any intervening SIP infrastructure. However, for network operational reasons, for provisioning public services to users, and for directory services, SIP defines several specific types of network server elements. Each of these service elements also communicates within the client-server model implemented in <b>user</b> <b>agent</b> clients and servers.|$|R
40|$|We {{describe}} {{the architecture of}} an interactive, "believable" agent with personality, called <b>user</b> <b>agent,</b> which can act {{on behalf of a}} user in various multi-user game contexts, when she is not online. In a first step, information about the personality of the user is obtained from a questionnaire and then, in a second step, integrated in the reactive system of the <b>user</b> <b>agent,</b> part of which implements a primitive affective system. <b>User</b> <b>agents</b> can interact with their users through a simple a#ective natural language generation system (SARGS), which is integrated in the deliberative system of the <b>user</b> <b>agent</b> and can recount what happened to the <b>user</b> <b>agent</b> in the game while the user was not present...|$|R
50|$|The {{following}} sections demonstrate how a request using the XMLHttpRequest object functions within a conforming <b>user</b> <b>agent</b> {{based on the}} W3C Working Draft. As the W3C standard for the XMLHttpRequest object is still a draft, <b>user</b> <b>agents</b> may not abide by all the functionings of the W3C definition and {{any of the following}} is subject to change. Extreme care should be taken into consideration when scripting with the XMLHttpRequest object across multiple <b>user</b> <b>agents.</b> This article will try to list the inconsistencies between the major <b>user</b> <b>agents.</b>|$|R
50|$|The HTML5 {{specification}} {{does not}} specify which {{video and audio}} formats browsers should support. <b>User</b> <b>agents</b> are free to support any video formats they feel are appropriate, but content authors cannot assume that any video will be accessible by all complying <b>user</b> <b>agents,</b> since <b>user</b> <b>agents</b> have no minimal set of video and audio formats to support.|$|R
50|$|VoIP {{telephone}} companies can, as an option, support pbxnsip as a <b>user</b> <b>agent</b> or trunked connection with SIP trunking protocols along with ATAs and other software <b>user</b> <b>agents.</b>|$|R
50|$|Separation of {{concerns}} allows the document {{to be presented}} by different <b>user</b> <b>agents</b> according to their purposes and abilities. For example, a <b>user</b> <b>agent</b> can select an appropriate style sheet to present a document by displaying on a monitor, printing on paper, or to determine speech characteristics in an audio-only <b>user</b> <b>agent.</b> The structural and semantic functions of the markup remain identical in each case.|$|R
40|$|Multimedia {{wireless}} networks often employ {{network based}} <b>user</b> <b>agents</b> as proxies for mobile users. In this paper, we consider a fundamental {{question in the}} design of these networks: should the <b>user</b> <b>agents</b> migrate and if so, what are good <b>user</b> <b>agent</b> migration policies? We first introduce a general framework for malysing <b>user</b> <b>agent</b> migration policies. We then highlight, through analysis and simulation, the numerous parameters and tradeoffs that dictate the design oj migration policies. Finally, we identify two simple threshold-based policies that deliver very good perforirnance over a wide range of system parameters and ~configurations. IKeywords: Wireless Network...|$|R
5000|$|The UDP tracker {{protocol}} has no {{field to}} represent the <b>user</b> <b>agent,</b> as the HTTP protocol has. However, the convention to encode the <b>user</b> <b>agent</b> and version inside the peer_id field still applies.|$|R
5000|$|Globally Routable <b>User</b> <b>Agent</b> URI:Globally Routable <b>User</b> <b>Agent</b> URI (GRUU) is an {{identity}} that identifies a unique combination of IMPU and UE instance. There {{are two types}} of GRUU: Public-GRUU (P-GRUU) and Temporary GRUU (T-GRUU).|$|R
50|$|In the IMS it is {{possible}} for a user to have multiple terminals (e.g. a mobile phone, a computer) or application instances (e.g. video telephony, instant messaging, voice mail) that are identified with the same public identity (i.e. SIP URI). Therefore, a mechanism is needed in order to route requests to the desired device or application. That is what a Globally Routable <b>User</b> <b>Agent</b> URI (GRU) is: a URI that identifies a specific <b>user</b> <b>agent</b> instance (i.e. terminal or application instance) and it does it globally (i.e. it is valid to route messages to that <b>user</b> <b>agent</b> from any other <b>user</b> <b>agent</b> on the Internet).|$|R
30|$|Examples of {{community}} cloud in E-commerce are used {{based on an}} application of tourist services, which will be shared {{among a number of}} users with similar interests and requirements. Three agent’s organizations are considered in this application, presented as follow: <b>user</b> <b>agent’s</b> organization, broker agent’s organization and provider <b>agent’s</b> organization. <b>User</b> <b>agent’s</b> organization: <b>user</b> <b>agents,</b> model clients looking for tourist services and information about booking of hotels, flights, trains and boats. <b>User</b> <b>agent’s</b> organization interacts with broker agents organization by sending services and information requirement. Provider agent’s organization: provider agents, model clouds federation as hotels, airlines, trains and boats companies, etc. Provider agent’s organization interacts with broker agent’s organization by sending services and information requirement. Broker agents organization: broker agents, assume mediating role between <b>user</b> <b>agents</b> and provider agents, our focus will be on the organization of broker agents and its emergent behavioral aspect.|$|R
2500|$|UAWG {{published}} <b>User</b> <b>Agent</b> Accessibility Guidelines (UAAG) 2.0 in December 2015. [...] Supporting documentation includes: UAAG 2.0 Reference and UAAG Mobile Examples. [...] The {{working group}} published <b>User</b> <b>Agent</b> Accessibility Guidelines 1.0 (UAAG 1.0) as a W3C Recommendation in 2002.|$|R
50|$|A {{web browser}} {{is an example}} of a <b>user</b> <b>agent</b> (UA). Other types of <b>user</b> <b>agent</b> include the {{indexing}} software used by search providers (web crawlers), voice browsers, mobile apps, and other software that accesses, consumes, or displays web content.|$|R
40|$|The Session Initiation Protocol (SIP) [1] is a {{signaling}} protocol {{used to set}} up and tear down multimedia sessions between two endpoints over the Internet. The endpoints are called <b>user</b> agents: <b>user</b> <b>agent</b> client (UAC) initiates a new session to a <b>user</b> <b>agent</b> server (UAS) by sending an INVITE request. The UAS responds with zero or more provisional response such as " 180 Ringing " and one final response such as " 200 OK " or " 486 Busy Here". There are also intermediaries that route requests for <b>user</b> <b>agents</b> called proxy servers. Figure 1 shows the basic setup of two <b>user</b> <b>agents</b> and two proxy servers in an arrangement known as the “SIP trapezoid”...|$|R
40|$|Abstract—With the {{development}} of e-commerce, the client-side security {{becomes more and more}} important. In order to assure that the transactions behave as what users expect, be aware of and approved, a trusted e-commerce <b>user</b> <b>agent</b> based on USB Key and Java Card platform is designed and implemented in this paper. E-commerce providers can develop and load <b>user</b> <b>agent</b> applets on this framework to execute authentication and establish secure channel between server and client, etc. At fist, design principles are given based on analysis of known attacks today. Secondly, the software architecture and security features of this <b>user</b> <b>agent</b> are discussed in detail, which includes how to implement HTTP server, CGI, security agent framework and applet load on USB Key. Thirdly, SSL application scenarios based on <b>user</b> <b>agent</b> and security analysis shows that this scheme can effectively improve the client-side security in e-commerce. At last, advantages of this <b>user</b> <b>agent</b> and what to do further are given in conclusion and future work...|$|R
40|$|In this paper, {{we present}} testing {{scenarios}} for reliable transmission of provisional responses in SIP <b>user</b> <b>agent.</b> Several test scenarios for different functionalities of SIP <b>user</b> <b>agent</b> {{have been presented}} by European Telecommunications Standards Institute (ETSI). However, no scenarios have been given for reliable transmission of provisional responses. Scenarios in this paper are got from the finite state machines designed in the paper for both SIP <b>user</b> <b>agent</b> server and <b>user</b> <b>agent</b> client. State machines are designed according to the behavior of SIP <b>user</b> <b>agent</b> client and server. These behaviors are observed from the functionalities and conditions adopted from accredited RFCs and standards of SIP protocol. A major characteristic of this set of scenarios {{is that it is}} optimum in terms of the number, since the designed state machines are minimal in terms of the states. Finally, these tests are executable in a real lab environment as are to be executed in Iran Telecommunication Research Center (ITRC) 's Next Generation Network (NGN) Pilot lab...|$|R
50|$|Direct users {{connect to}} ATS Message Servers {{by means of}} ATS Message <b>User</b> <b>Agents.</b> An ATS Message <b>User</b> <b>Agent</b> {{supporting}} the Extended level of service will usethe Basic level of service to allow communication with users who only support the Basic ATSMHS.|$|R
5000|$|IceCat {{also has}} {{functionality}} {{to set a}} different <b>user</b> <b>agent</b> string each for different domains in [...] For example, setting a non-mobile <b>user</b> <b>agent</b> string for a desired domain would make it possible in Android to visit a non-mobile version of a website.|$|R
5000|$|The HSTS Policy is communicated by {{the server}} to the <b>user</b> <b>agent</b> via an HTTPS {{response}} header field named [...] "". HSTS Policy specifies {{a period of}} time during which the <b>user</b> <b>agent</b> should only access the server in a secure fashion.|$|R
50|$|A {{registrar}} is a SIP endpoint {{that provides}} a location service. It accepts REGISTER requests, recording the address and other parameters from the <b>user</b> <b>agent.</b> For subsequent requests it provides an essential means to locate possible communication peers on the network. The location service links one or more IP addresses to the SIP URI of the registering <b>agent.</b> Multiple <b>user</b> <b>agents</b> may register for the same URI, {{with the result that}} all registered <b>user</b> <b>agents</b> receive the calls to the URI.|$|R
5000|$|... "The <b>User</b> <b>Agent</b> String for Internet Explorer 5 is static {{except for}} the third field which depends on the Operating System and the {{processor}} you are using. Here are some common configurations and the <b>user</b> <b>agent</b> strings generated by Internet Explorer on these platforms:" ...|$|R
40|$|Wireless {{networks}} often employ network-based <b>user</b> <b>agents</b> as proxies for mobile users. In this paper, {{we consider}} the fundamental problem of designing migration policies for these <b>user</b> <b>agents.</b> We first introduce a general framework for analyzing <b>user</b> <b>agent</b> migration policies and then highlight, through analysis and simulation, the numerous parameters and tradeoffs that dictate the design of migration policies. We evaluate these policies {{in the context of}} both homogeneous and heterogeneous networks, and in the presence and absence of processing overheads due to migration. Finally, we identify two simple threshold-based policies that deliver very good performance over a wide range of system parameters and configurations. To our knowledge, this is the first paper to propose and evaluate policies for migration of <b>user</b> <b>agents.</b> ...|$|R
50|$|In case a <b>user</b> <b>agent</b> {{is located}} behind a NAT {{then it will}} use a private IP address as its contact address in the contact and via headers {{as well as the}} SDP part. This {{information}} would then be useless for anyone trying to contact this <b>user</b> <b>agent</b> from the public Internet. There are different NAT traversal solutions such as STUN, TURN and ICE. Which solution to use depends on the behavior of the NAT and the call scenario. When using an SBC to solve the NAT traversal issues the most common approach for SBC is to act as the public interface of the <b>user</b> <b>agents.</b> This is achieved by replacing the <b>user</b> <b>agent’s</b> contact information with those of the SBC.|$|R
40|$|HTML 5 {{supports}} media {{resources with}} multiple embedded media tracks[1] and text tracks[2]. In {{the case of}} multiple media tracks, the <b>user</b> <b>agent</b> creates the AudioTrackList and VideoTrackList objects that contain audio and video tracks in the media resource. The HTML 5 specification does not define how the <b>user</b> <b>agent</b> creates these objects from the media resource. In the case of text tracks, a media-resource-specific text track can be created from data found in the media resource[3] where the HTML 5 specification states “When a media resource contains data that the <b>user</b> <b>agent</b> recognizes and supports as being equivalent to a text track…”. Again, the HTML 5 specification does not define how the <b>user</b> <b>agent</b> does this- [3] suggests “Set the new text track's kind, label, and language based on the semantics of the relevant data, {{as defined by the}} relevant specification ” (emphasis by the author). If multiple media tracks and text tracks are to be recognized by <b>user</b> <b>agents</b> in a standard manner, specifications need to be created that define how this is done. Various media delivery formats are in use today, e. g. WebM[4][5], Ogg[5], MPEG- 2 transport stream[6], MPEG- 4 file format[7], HTTP Live Streaming[8] and Smooth Streaming[9]. New delivery format specifications are nearing completion, e. g. MPEG DASH[10]. How tracks are recognized by <b>user</b> <b>agents</b> can be expected to differ by delivery format. The phrase “TV Services ” refers to some specific use cases of multiple media tracks and text tracks that many commercial video providers would like supported in <b>user</b> <b>agents.</b> How a <b>user</b> <b>agent</b> recognizes the track or tracks “TV Services ” can also be expected to differ by the specific “TV Service”. An example of the scope of the specification(s) for how <b>user</b> <b>agents</b> recognize multiple media and text tracks for a set of media delivery formats and TV Services is shown in Table 1. MPEG- 2 T...|$|R
50|$|By {{using the}} <b>user</b> <b>agent</b> {{capabilities}} extension, <b>user</b> <b>agents</b> (terminals) can describe {{themselves when they}} register so that others can search for them according to their caller preferences extension headers. For this purpose, they list their capabilities in the Contact header field of the REGISTER message.|$|R
50|$|Composite Capability/Preference Profiles (CC/PP) is a {{specification}} {{for defining}} capabilities and preferences (also known as 'delivery context') of <b>user</b> <b>agents.</b> CC/PP is a vocabulary {{extension of the}} Resource Description Framework (RDF). Delivery context {{can be used to}} guide the process of tailoring content for a <b>user</b> <b>agent.</b>|$|R
40|$|Context {{awareness}} {{is an important}} aspect of pervasive and ubiquitous computing. By utilizing contextual information gathered from the environment, applications can adapt to the user 9 ̆ 2 s specific situation. In this thesis, user context is used to automatically discover multimedia devices and services that can be used by a mobile Session Initiation Protocol (SIP) <b>user</b> <b>agent.</b> The location of the user is captured using various sensing technologies to allow users of our SIP <b>user</b> <b>agent</b> to interact with network attached projectors, speakers, and cameras in a home and office environment. In order to determine the location of the user, we have developed and evaluated a context aggregation framework that gathers and analyzes contextual information from various sources such as passive infrared sensors, infrared beacons, light intensity, and temperature sensors. Once the location of the user is determined, the Service Location Protocol (SLP) is used to search for services. For this purpose, we have implemented a mobile SLP <b>user</b> <b>agent</b> and integrated it with an existing SIP <b>user</b> <b>agent.</b> The resulting mobile SIP <b>user</b> <b>agent</b> is able to dynamically utilize multimedia devices around it without requiring the user to do any manual configuration. This thesis also addressed the challenge of building trust relationship between the <b>user</b> <b>agent</b> and the multimedia services. We propose a mechanism which enables the <b>user</b> <b>agent</b> authenticate service advertisements before starting to redirect media streams. The measurements we have performed indicate that the proposed context aggregation framework provides more accurate location determination when additional sensors are incorporated. Furthermore, the performance measurements indicate that the delay incurred by introducing context awareness to the SIP <b>user</b> <b>agent</b> is acceptable for a small deployment such as home and office environment. In order to realize large scale deployments, future investigations are recommended to further improve the performance of the framework. Keywords: SIP, context-awareness, service discovery, trust establishmen...|$|R
5000|$|Customisable <b>User</b> <b>Agent</b> (Firefox, Internet Explorer, Safari, Chrome) ...|$|R
