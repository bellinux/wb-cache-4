130|10000|Public
25|$|The common {{source of}} the C3 alkenes for the {{alkylation}} is made available from the gas recovery <b>unit</b> <b>processing</b> the effluents of the Fluid catalytic cracking Unit. Isobutane is partly made available from the Catalytic reforming and from the Atmospheric distillation, although {{the proportion of the}} isobutane produced in a refinery is rarely sufficient to run the unit at full capacity and additional isobutane needs therefore to be brought to the refinery. The economics of the international and local market of gasolines dictates the spread that a buyer need to pay for isobutane compared to standard commercial butane.|$|E
50|$|<b>Unit</b> <b>{{processing}}</b> is {{the basic}} processing in chemical engineering. Together with unit operations it forms the main principle of the varied chemical industries. Each genre of <b>unit</b> <b>processing</b> follows the same chemical law much as each genre of unit operations follows the same physical law.|$|E
5000|$|Chemical {{engineering}} <b>unit</b> <b>processing</b> {{consists of}} the following important processes: ...|$|E
40|$|Current {{generations of}} {{graphics}} <b>processing</b> <b>units</b> {{have turned into}} highly parallel devices with general computing capabilities. Thus, graphics <b>processing</b> <b>units</b> may be utilized, for example, to solve time dependent partial differential equations by the Fourier split operator method. In this contribution, we demonstrate that graphics <b>processing</b> <b>units</b> are capable to calculate fast Fourier transforms much more efficiently than traditional central <b>processing</b> <b>units.</b> Thus, graphics <b>processing</b> <b>units</b> render efficient implementations of the Fourier split operator method possible. Performance gains of more than {{an order of magnitude}} as compared to implementations for traditional central <b>processing</b> <b>units</b> are reached in the solution of the time dependent Schr√∂dinger equation and the time dependent Dirac equation...|$|R
50|$|Originally {{introduced}} by embedded {{systems such as}} the Cell Broadband Engine, sharing system memory directly between multiple system actors makes heterogeneous computing more mainstream. Heterogeneous computing itself refers to systems that contain multiple <b>processing</b> <b>units</b> central <b>processing</b> <b>units</b> (CPUs), graphics <b>processing</b> <b>units</b> (GPUs), digital signal processors (DSPs), or any type of application-specific integrated circuits (ASICs). The system architecture allows any accelerator, for instance a graphics processor, to operate at the same processing level as the system's CPU.|$|R
40|$|In this paper, we have modeled a {{production}} line consisting of an arbitrary number of <b>processing</b> <b>units</b> {{arranged in a}} series. Each of the <b>processing</b> <b>units</b> has multi-server facility. Arrivals at the first <b>processing</b> <b>unit</b> are according to Poisson distribution and service times {{at each of the}} <b>processing</b> <b>units</b> are exponentially distributed. At each of the <b>processing</b> <b>units,</b> the authors have taken into account immediate feedback and the rejection possibility. Taking into account the stationary behavior of queues in series, the solution for infinite queuing space have been found in the product form. Considering the processing cost at each of the <b>processing</b> <b>units,</b> the average loss to the system due to rejection, caused by ill processing at various <b>processing</b> <b>units,</b> is obtained...|$|R
5000|$|J3||: 3-machines {{job shop}} with <b>unit</b> <b>processing</b> times, {{minimizing}} maximum completion time.|$|E
5000|$|... 461st Army Air Force Base <b>Unit</b> (<b>Processing</b> In); 1 June 1944-10 November 1945 ...|$|E
5000|$|G. Mosheiov and D. Oron. (2004). Due-window {{assignment}} with <b>unit</b> <b>processing</b> time jobs. Naval Research Logistics, pp. 1005-1017.|$|E
5000|$|Wildcat Realizm series - {{consists}} of Vertex/Scalability <b>Units</b> (VSU), Visual <b>Processing</b> <b>Units</b> (VPU) ...|$|R
50|$|Google {{has stated}} that it uses Tensor <b>processing</b> <b>unit</b> ASICs for <b>processing</b> RankBrain requests.|$|R
5000|$|... 1 integer unit, 1 {{floating}} point <b>unit,</b> no branch <b>processing</b> <b>unit,</b> 1 load/store unit ...|$|R
5000|$|G. Mosheiov and U. Yovel. (2006). Minimizing {{weighted}} earliness-tardiness and due-date cost with <b>unit</b> <b>processing</b> time jobs. European Journal of Operational Research, 172, pp. 528-544.|$|E
50|$|Chemical {{engineering}} unit operations and chemical engineering <b>unit</b> <b>processing</b> form the main principles {{of all kinds}} of chemical industries and are the foundation of designs of chemical plants, factories, and equipment used.|$|E
5000|$|The {{amount of}} {{catalyst}} circulating between the regenerator and the reactor amounts to about 5 kg per kg of feedstock, which {{is equivalent to}} about 4.66 kg per litre of feedstock. Thus, an FCC <b>unit</b> <b>processing</b> [...] will circulate about 55.900 tonnes per day of catalyst.|$|E
5000|$|... pGPU (physical {{graphics}} <b>processing</b> <b>unit)</b> is a graphics <b>processing</b> <b>unit,</b> {{as opposed}} to virtual graphics <b>processing</b> <b>unit</b> (vGPU). pGPU and vGPU terms are often used to distinguish modes of operating of server graphics virtualization solutions, such as Nvidia GRID.|$|R
50|$|The <b>unit's</b> <b>processing</b> {{ability is}} related to the vibration, {{requiring}} care to the design of the structural and support elements. An inadequate structural design is unable to stabilize the unit producing excess vibrations, leading to higher deflection or reducing effectiveness.|$|R
5000|$|The POWERx'plorer {{was based}} on 8 <b>processing</b> <b>units</b> {{arranged}} in a 2D mesh. Each <b>processing</b> <b>unit</b> had ...|$|R
50|$|MCP {{libraries}} {{provide a}} way of sharing data and code between processes. The article on Burroughs large systems looks at the way dependent processes could be asynchronously run so that many processes could share common data (with the mechanisms to provide synchronized update). Such a family of related processes had to be written as a single program <b>unit,</b> <b>processing</b> procedures at higher lex levels as the asynchronous processes, which could still access global variables and other variables at lower lex levels.|$|E
50|$|The common {{source of}} the C3 alkenes for the {{alkylation}} is made available from the gas recovery <b>unit</b> <b>processing</b> the effluents of the Fluid catalytic cracking Unit. Isobutane is partly made available from the Catalytic reforming and from the Atmospheric distillation, although {{the proportion of the}} isobutane produced in a refinery is rarely sufficient to run the unit at full capacity and additional isobutane needs therefore to be brought to the refinery. The economics of the international and local market of gasolines dictates the spread that a buyer need to pay for isobutane compared to standard commercial butane.|$|E
5000|$|In 1937, Sun Oil began {{operation}} of a new Houdry <b>unit</b> <b>processing</b> [...] in their Marcus Hook refinery in Pennsylvania. The Houdry process at that time used reactors with a fixed bed of catalyst and was a semi-batch operation involving multiple reactors {{with some of the}} reactors in operation while other reactors were in various stages of regenerating the catalyst. Motor-driven valves were used to switch the reactors between online operation and offline regeneration and a cycle timer managed the switching. Almost 50 percent of the cracked product was gasoline as compared with about 25 percent from the thermal cracking processes.|$|E
5|$|The two {{projects}} {{also differ}} significantly in their computing power and host diversity. Averaging about 6,650 teraFLOPS from a host base of central <b>processing</b> <b>units</b> (CPUs), graphics <b>processing</b> <b>units</b> (GPUs), and PS3s, Folding@home has nearly 108 times more computing power than Rosetta@home.|$|R
40|$|There is a {{great need}} of {{reducing}} human effort in each and every span of industrial engineering. The paper deals in a robotic arm that fetches objects from a conveyor belt and does some dedicated work say packing the objects in the same color of packaging as that of object or segregating the objects {{on the basis of}} color or geometry. An overhead camera is mounted perpendicular to the belt at some specified height which would be sending recorded images to the <b>processing</b> <b>unit</b> and <b>processing</b> <b>unit</b> would be instructing the robotic arm to pick up some objects. The <b>processing</b> <b>unit</b> uses image <b>processing</b> to instruct the arm...|$|R
40|$|Disclosed herein are {{communication}} systems, methods, {{and devices}} for providing communications based on visual markers. An exemplary communication system can include an image receipt <b>unit,</b> an image <b>processing</b> <b>unit,</b> a context <b>processing</b> <b>unit,</b> and an audio output device. The image receipt unit can receive {{an image of}} a surrounding area. The image <b>processing</b> <b>unit</b> can extract visual markers from the image. The context <b>processing</b> <b>unit</b> can identify an environmental context based on the visual markers. The communication system can then map the environmental context to a set of potential communication outputs. The communication system can receive a selection of a potential communication output from the user, and the audio output device can audibly output the selected communication output. Georgia Tech Research Corporatio...|$|R
50|$|For the {{software}} array controller encryption, a software array controller driver directs data into individual host bus adapters. In the diagram on the right, {{there are multiple}} host bus adapters with hardware encryption units used for better performance requirements. In contrast, this type of encryption can be implemented with only 1 host bus adapter connected to a network of multiple hard drives and would still function. Performance will definitely be reduced since there will only be one encryption <b>unit</b> <b>processing</b> data. Key management will be done much like the internal array controller encryption mentioned before with the Key Management Client implemented as a service within the Host Computer.|$|E
5000|$|Vuforia {{provides}} Application Programming Interfaces (API) in C++, Java, Objective-C++(a language {{utilizing a}} combination of C++ and Objective-C syntax), and the [...]Net languages through an extension to the Unity game engine. In this way, the SDK supports both native development for iOS and Android while also enabling the development of AR applications in Unity that are easily portable to both platforms. AR applications developed using Vuforia are therefore compatible with {{a broad range of}} mobile devices including the iPhone, iPad, and Android phones and tablets running Android OS version 2.2 or greater and an ARMv6 or 7 processor with FPU (Floating Point <b>Unit)</b> <b>processing</b> capabilities.|$|E
5000|$|The {{next major}} {{step was to}} develop a {{continuous}} process rather than the semi-batch Houdry process. That step was implemented by advent of the moving-bed process known as the Thermofor Catalytic Cracking (TCC) process which used a bucket conveyor-elevator to move the catalyst from the regeneration kiln to the separate reactor section. A small semicommercial demonstration TCC unit was built in Socony-Vacuum's Paulsboro refinery in 1941 and operated successfully, producing [...] Then a full-scale commercial TCC <b>unit</b> <b>processing</b> [...] began operation in 1943 at the Beaumont, Texas refinery of Magnolia Oil Company, an affiliate of Socony-Vacuum. By the end of World War II in 1945, the processing capacity of the TCC units in operation was about [...]|$|E
50|$|Each <b>processing</b> <b>unit</b> was an {{independent}} one-board microcomputer. Motorola's microprocessor MC68020 (25MHz) {{was used as}} the CPU.The local memory was 4MBytes with 100ns 1Mbit DRAM.The QCDPAX utilized LSI Logic's floating-point <b>processing</b> <b>unit</b> L64133 onthe market. L64133 had peak performance of the 33MFLOPS.The floating-point <b>processing</b> <b>unit</b> controller, newly developed by the gate array, was alsoutilized to derive the performance from the FPU by controlling the direct memory accessbetween the data memory and floating-point <b>processing</b> <b>unit.</b>|$|R
40|$|We are {{considering}} the following assignment problem. A finite set T of tasks th, h= 1, [...] .,n, {{has to be}} assigned to a finite set P of <b>processing</b> <b>units</b> pj, j= 1, [...] .,m. Each task th has to be assigned to exactly one <b>processing</b> <b>unit,</b> however, more than one <b>processing</b> <b>unit</b> is able to process th. Each task th has, moreover, a different ‚Äúpreference ‚Äù for being assigned to a particular <b>processing</b> <b>unit...</b>|$|R
40|$|The {{influence}} of multi-core central <b>processing</b> <b>units</b> and graphics <b>processing</b> <b>units</b> on several algebraic multigrid methods is investigated in this work. Different performance metrics traditionally employed for algebraic multigrid are re-considered and reevaluated on these novel computing archi-tectures. Our benchmark {{results show that}} {{with the use of}} graphics <b>processing</b> <b>units</b> for the solver phase, it is crucial to keep algebraic multigrid setup low, even if this leads to a higher number of solver iterations. 1...|$|R
30|$|<b>Unit</b> <b>processing</b> {{time for}} {{operation}} o of product p.|$|E
40|$|Abstract. This paper {{studies the}} {{complexity}} variations of scheduling problems in di erent machine environments when replacing operations with arbitrary processing {{times by the}} chains of operations with <b>unit</b> <b>processing</b> times. Special {{attention is paid to}} polynomial-time algorithms for chain-like precedence-constrained problems with <b>unit</b> <b>processing</b> times and transformations of their solutions to each other. Due to the small size, the problems of this type cannot be solved in polynomial time by the algorithms solving in polynomial time their extensions with tree-like or general precedence constraints. There are also considered reductions of preemptive problems with arbitrary processing times to nonpreemptive problems with <b>unit</b> <b>processing</b> times in cross or equal machine environments involving parallel machines, a ow shop andanopenshop. The complexity status of several problems that were open before is clari ed. 1...|$|E
40|$|This paper {{studies the}} {{complexity}} variations of scheduling problems in different machine environments when replacing operations with arbitrary processing {{times by the}} chains of operations with <b>unit</b> <b>processing</b> times. Special {{attention is paid to}} polynomial-time algorithms for chain-like precedence-constrained problems with <b>unit</b> <b>processing</b> times and transformations of their solutions to each other. Due to the small size, the problems of this type cannot be solved in polynomial time by the algorithms solving in polynomial time their extensions with tree-like or general precedence constraints. There are also considered reductions of preemptive problems with arbitrary processing times to nonpreemptive problems with <b>unit</b> <b>processing</b> times in cross or equal machine environments involving parallel machines, a flow shop and an open shop. The complexity status of several problems that were open before is clarified. 1. Introduction Recent papers devoted to unit-time flow-shop, open-shop and job [...] ...|$|E
5000|$|... #Caption: A {{part of an}} IBM T42 laptop motherboard. CPU: Central <b>processing</b> <b>unit.</b> NB: Northbridge. GPU: Graphics <b>processing</b> <b>unit.</b> SB: Southbridge.|$|R
50|$|General Purpose {{graphics}} <b>processing</b> <b>unit</b> (GPU, GPGPU) <b>processing</b> is {{one area}} in which Perl can be compared with compiled languages in performance.|$|R
40|$|This paper {{presents}} {{the implementation of}} Advance encryption (AES) algorithm using parallel computing. Most of the research for improving performance of AES is based on hardware implementation. This paper {{presents the}} parallel implementation of AES using JPPF (Java Parallel Programming Framework) which provides flexibility & performance improvement in terms of speed-up. In this implementation there are two approaches data parallelism and control parallelism. In Data parallelism, xn plain text is taken where x is 128 bits and n is any integer. Further xn data will be divided into n parts and each part will be send to independent <b>processing</b> <b>units.</b> Value of n can be increased depending on <b>processing</b> <b>units</b> available. In control parallelism, four round functions of AES Subbyte, ShiftRow, Mixcolumn. AddroundKey are divided into two independent parts for which structure of round functions has been modified. These two independent parts are assigned to different <b>processing</b> <b>units</b> and these <b>processing</b> <b>units</b> will exchange their intermediate result for further processing. Finally, results are conducted on single <b>processing</b> <b>unit</b> and multiple <b>processing</b> <b>units</b> on different sets of 256 bits of data and the performance analysis shows improvement in terms of execution time...|$|R
