57|4|Public
25|$|Ungrounded NEMA 1 plugs {{are still}} popularly used by {{manufacturers}} of small appliances and electronic devices {{because of the}} design's low cost and compact size, and they are <b>upward</b> <b>compatible</b> with modern grounded NEMA 5 receptacles. Standards permit ungrounded plugs where the appliance does not require grounding due to low risk of leakage current, such as on double-insulated devices.|$|E
2500|$|The {{situation}} for the knight and iron general, which promote to pieces that do not keep their old moves, is unclear. Since {{there could be a}} reason to defer their promotion, it is possible that they receive a second chance to promote at the far rank on a non-capture, as in chu shogi. (In chu shogi, this provision applies to pawns, which are not completely <b>upward</b> <b>compatible</b> with the gold generals they promote to because of the rules against trading lions.) This second chance, if it exists, can likewise be declined, leaving the knight or iron general as an immobile [...] "dead piece" [...] (死に駒). However, this is uncertain, because it is not clear when the rule of pawn promotion was added to chu shogi (before or after the invention of tenjiku shogi), and because the Edo-era sources have numerous lacunae in the rules for the variants other than [...] sho shogi and chu shogi.|$|E
50|$|The FX-603P was <b>upward</b> <b>compatible</b> to the FX-602P could load FX-602P {{programs}} from Compact Cassette.|$|E
30|$|In our study, the {{posterior}} fossa syndrome occurs in cases operated via transvermian approach with small vermian incision not extended much <b>upward.</b> This is <b>compatible</b> {{with the work}} of Riva and Giorgi that suggest that cerebellar mutism is secondary to edema in the deep cerebellar nuclei and {{may be related to the}} manipulation of the vermis [10].|$|R
40|$|Abstract — In this paper, {{we discuss}} our {{solution}} for providing computing and communication services for secured dynamic coalition applications in a distributed heterogeneous environment. Our technology includes the following: (1) We use both host-based and network-based middlewares. The host-based middleware is {{a segment of}} code inserted into protocol stack of hosts while the network-based middleware is realized by special devices inserted in various locations of the network. Middlewares in the system cooperate to achieve the mission objectives. (2) We take a compilation-based approach. The middlewares are equipped with code that is generated by our policy-compiler, that consolidates various application requirements (e. g., camouflaging, encryption, real-time, fault-tolerance, intrusion detection, firewall, resource mapping, etc) and produces a code that integrates all the requirements and compliments functions already provided by hosts and network. There are several advantages with our approach: (1) Middlewares provide transparent services to applications and make our solution both <b>upward</b> and downward <b>compatible.</b> Thus, our technology can be easily deployed with the current computing and communication infrastructure. (2) Our solution is highly efficient. By using the policy compiler to integrate the application requirements, the middlewares provide necessary but not redundant functions with the minimum overhead. As a result, our technology is scalable {{and can be used}} in a large system...|$|R
40|$|The aim of {{this thesis}} is to {{investigate}} the Colombian-Lebanese community in Bogota, and specifically the identities of a particular group of Colombian-Lebanese. I explore the role of ethnicity {{in the construction of}} their identities, through the concepts of space, performance and community. The Colombian-Lebanese community has a particular position within Bogota society as part of Bogota’s elite. This privileged position means the Colombian-Lebanese community is a confident group that does not have to endure the negative aspects of ethnic labelling that other less privileged communities may have to sustain. Most of the Colombian-Lebanese participants in this study have been successfully upwardly socially mobile whilst keeping a connection with their ethnic community. At the same time, less upwardly mobile descendants of Lebanese immigrants are more likely to completely assimilate into Colombian society, or if they are recent Muslim immigrants, maintain their religious identity but their ethnic identity is likely to gradually dilute. By adopting an ethnographic approach, with an emphasis on interviews and participant observation, I focus on the Colombian-Lebanese organisations that work within this ethnic community, including a social club, a Maronite parish, a charitable organisation, and a cultural association. I analyse a number of activities and events organised by the Colombian-Lebanese, observing the locations where these take place, their participation in the events, as well as how identity is performed within them. There have been few studies of the Colombian-Lebanese in Colombia, most of those focussing on the history of migration and settlement. This thesis aims to address this by adding a contemporary view of the Colombian-Lebanese in Bogota. Moreover, it contributes to the growing literature on migrant communities investigating whether <b>upward</b> mobility is <b>compatible</b> with ethnic identification. I argue that social status is as important to Colombian-Lebanese identity as ethnicity, and that the two combine in order to belong to the organisations that work within the community. The social positioning of the Colombian-Lebanese in Bogota’s society positively influences their relationship with their ethnic identity, which they can choose deliberately when and where to perform...|$|R
5000|$|... the logic-based {{extension}} {{should be}} <b>upward</b> <b>compatible</b> with a future extension that will support constraint programming ...|$|E
50|$|The 8259A {{provides}} additional functionality {{compared to}} the 8259 (in particular buffered mode and level-triggered mode) and is <b>upward</b> <b>compatible</b> with it.|$|E
5000|$|In December 2014 ISO {{published}} {{the first edition}} of a new major Application Protocol, AP 242 Managed model based 3d engineering, that combined and replaced the following previous APs in an <b>upward</b> <b>compatible</b> way: ...|$|E
40|$|Latinos are {{dropping}} {{out of high school}} at rates much higher than that of other racial or cultural groups. Many Latino students, however, are trying to achieve academic success through their participation in specially-designed programs such as Upward Bound. A program that is funded by the federal government, Upward Bound aims to increase the rate at which socioeconomically disadvantaged students and students placed at risk for failure complete high school and enroll in and graduate from college. In Connecticut, {{a large portion of the}} Upward Bound program, which is merged with the state-funded ConnCAP program, occurs during the summer Each summer after the ninth, tenth, and eleventh grades, approximately one hundred Upward Bound/ConnCAP students from four Connecticut cities spend six weeks living on the University of Connecticut 2 ̆ 7 s campus. There, they participate in a rigorous program designed to advance their academic skills in literature, composition, foreign languages, science, and mathematics (Upward Bound/ConnCAP, 2003). ^ During the 2008 summer program at the University of Connecticut, I investigated the experiences and perceptions of eight Latino students and graduates of the program through a series of three semi-structured interviews (Seidman, 2006). Some questions that were explored include how the students and graduates perceive or did perceive the effects of their participation in the Upward Bound/ConnCAP summer program in relation to their success in high school and their preparation and planning for college and their futures. I also asked the students and graduates to identify the components of the Upward Bound/ConnCAP summer program that they believe are the most effective for achieving school success and college attendance. ^ I simultaneously performed data collection and analysis, using the constant comparative method (Glaser 2 ̆ 6 Strauss, 1967). Interviews were coded within the framework of Role-Identity Theory and the theory of Accommodation without Assimilation. Findings suggest that aside from the academic portion, many participants perceive social aspects of the Upward Bound/ConnCAP summer program as helping them achieve success. It is also shown that many participants 2 ̆ 7 activities outside of <b>Upward</b> Bound/ConnCAP are <b>compatible</b> with the ideals and goals set forth by the program and are perceived as helpful in reaching those goals. ...|$|R
50|$|PPDS has {{different}} levels of functions that are all <b>upward</b> <b>compatible.</b> Although many laser or inkjet printers do not support PPDS, those that support binary printer languages still use the ESC syntax, which include Printer Command Language versions 1 to 5 and the Epson ESC/P command set.|$|E
5000|$|... is <b>upward</b> <b>compatible</b> with : that is, for all {{transitions}} [...] (by this we mean [...] ) {{and for all}} [...] {{such that}} , there exists [...] such that [...] (that is, [...] can be reached from [...] by a sequence of zero or more transitions) and [...]|$|E
5000|$|After Honeywell {{discontinued}} {{production of}} Sigma hardware — Xerox had sold {{most of the}} rights to Honeywell in July, 1975 — several companies produced or announced clone systems. The Telefile T-85, introduced in 1979, was an <b>upward</b> <b>compatible</b> drop-in replacement for 32-bit Sigmas. Ilene Industries Data Systems announced the MOD 9000, a Sigma 9 clone with an incompatible I/O architecture. Realtime Computer Equipment, Inc. designed the RCE-9, an <b>upward</b> <b>compatible</b> drop-in replacement that could also use IBM peripherals. [...] The Modutest Mod 9 was redesigned and built by Gene Zeitler (President), Lothar Mueller (Senior VP) and Ed Drapell, is 100% hardware and software compatibility with the Sigma 9. It was manufactured and sold to Telefile, Utah Power and Light, Minnesota Power, Taiwan Power and Ohio College Library Center (OCLC).|$|E
5000|$|... 802.1ad is <b>upward</b> <b>compatible</b> with 802.1Q. Although 802.1ad {{is limited}} to two tags, there is no ceiling on the {{standard}} limiting a single frame to more than two tags, allowing for growth in the protocol. In practice Service Provider topologies often anticipate and utilize frames having more than two tags.|$|E
50|$|Ungrounded NEMA 1 plugs {{are still}} popularly used by {{manufacturers}} of small appliances and electronic devices {{because of the}} design's low cost and compact size, and they are <b>upward</b> <b>compatible</b> with modern grounded NEMA 5 receptacles. Standards permit ungrounded plugs where the appliance does not require grounding due to low risk of leakage current, such as on double-insulated devices.|$|E
50|$|The SuperH {{processor}} core family was first developed by Hitachi {{in the early}} 1990s.Hitachi has developed a complete group of <b>upward</b> <b>compatible</b> instruction set CPU cores. The SH-1 and the SH-2 {{were used in the}} Sega Saturn and Sega 32X. These cores have 16-bit instructions for better code density than 32-bit instructions, which was a great benefit at the time, due to the high cost of main memory.|$|E
5000|$|A well-structured {{system is}} a {{transition}} system [...] with state set [...] made up from a finite control state set , a data values set , furnished with a decidable pre-order [...] which is extended to states by , which is well-structured as defined above ( [...] is monotonic, i.e. <b>upward</b> <b>compatible,</b> with respect to [...] ) and in addition has a computable set of minima for the set of predecessors of any upward closed subset of [...]|$|E
50|$|It is {{the most}} widely used legacy {{character}} encoding in Korea on all three major platforms (Unix-like OS, Windows and Mac), but its use has been very slowly decreasing as UTF-8 gains popularity, especially on Linux and Mac OS X. It is usually referred to as Wansung (완성) in Republic of Korea. The default Korean codepage for Windows (code page 949) is a proprietary, but <b>upward</b> <b>compatible</b> extension of EUC-KR referred to as Unified Hangeul Code (통합 완성형, Tonghab Wansunghyung). Mac Korean used in classic Mac OS is also compatible with EUC-KR.|$|E
5000|$|A byte count can be {{followed}} by a suffix to specify a multiple of that count; in this case an omitted integer is understood to be 1. A bare size letter, or one followed by , specifies a multiple using powers of 1024. A size letter followed by [...] specifies powers of 1000 instead. For example, [...] and [...] are equivalent to , whereas [...] is equivalent to [...] This notation is <b>upward</b> <b>compatible</b> with the SI prefixes for decimal multiples and with the IEC 60027-2 prefixes for binary multiples.|$|E
50|$|The Intel 8259 is a Programmable Interrupt Controller (PIC) {{designed}} for the Intel 8085 and Intel 8086 microprocessors. The initial part was 8259, a later A suffix version was <b>upward</b> <b>compatible</b> and usable with the 8086 or 8088 processor. The 8259 combines multiple interrupt input sources into a single interrupt output to the host microprocessor, extending the interrupt levels available in a system beyond {{the one or two}} levels found on the processor chip. The 8259A was the interrupt controller for the ISA bus in the original IBM PC and IBM PC AT.|$|E
5000|$|The Cortex-M0 / M0+ / M1 {{implement}} the ARMv6-M architecture, the Cortex-M3 implements the ARMv7-M architecture, and the Cortex-M4 / M7 implements the ARMv7E-M architecture. [...] The architectures are binary instruction <b>upward</b> <b>compatible</b> from ARMv6-M to ARMv7-M to ARMv7E-M. Binary instructions {{available for the}} Cortex-M0 / M0+ / M1 can execute without modification on the Cortex-M3 / M4 / M7. Binary instructions available for the Cortex-M3 can execute without modification on the Cortex-M4 / M7 / M33. [...] Only Thumb-1 and Thumb-2 instruction sets are supported in Cortex-M architectures, but the legacy 32-bit ARM instruction set isn't supported.|$|E
50|$|The MODCOMP IV was an <b>upward</b> <b>compatible</b> 32-bit {{machine with}} a paged memory {{management}} unit introduced in 1974.The minimum memoryconfiguration was 32 kilobytes, expandable to 512 kilobytes,with access times of 500 to 800 nanoseconds (varying because of memory interleaving). The machine had 240 general purpose registers, addressable as 16 banks of 15 registers. The MMU contained 1024 address mapping registers, arranged as 4 page tables of 256 pages each (some of these page tables could be further subdivided if address spaces smaller than 128 kilobytes were needed). Fields of the Program Status Doubleword were used to select the current active register bank and page table. The machine had a two-stage pipelined CPU, and a floating point unit.|$|E
50|$|The 8086 was {{designed}} to be backward-compatible with the 8080 in the sense that 8080 assembly language could be mapped on to the 8086 architecture using a special assembler. Existing 8080 assembly source code (albeit no executable code) was thereby made <b>upward</b> <b>compatible</b> with the new 8086 to a degree. In contrast, the 432 had no software compatibility or migration requirements. The architects had total freedom to do a novel design from scratch, using whatever techniques they guessed would be best for large-scale systems and software. They applied fashionable computer science concepts from universities, particularly capability machines, object-oriented programming, high-level CISC machines, Ada, and densely encoded instructions. This ambitious mix of novel features made the chip larger and more complex. The chip's complexity limited the clock speed and lengthened the design schedule.|$|E
50|$|Internally, the 9S08 {{instruction}} set is <b>upward</b> <b>compatible</b> with the 6805, {{with the addition}} of stack indexed addressing modes. (Instructions using the SP register have opcodes prefixed with the byte 0x9E). It has a single eight-bit accumulator, A, one eight-bit index register, X, or one sixteen-bit index registers, HX (formed from the combination of H and X registers), a condition code register, a 16-bit stack pointer, and a program counter. For compatibility with the 6805 which does not have an H register, the most significant byte of the HX register, H, is cleared during reset, and H is the only register not stacked automatically when entering any ISR (Interrupt Service Routine). Some instructions treat the H and X registers as a combined 16-bit HX register. Unlike the 6805, the stack can be placed anywhere in memory using appropriate instructions.|$|E
50|$|Internally, the HC11 {{instruction}} set is <b>upward</b> <b>compatible</b> with the 6800, {{with the addition}} of a Y index register. (Instructions using the Y register have opcodes prefixed with the byte 0x18). It has two eight-bit accumulators, A and B, two sixteen-bit index registers, X and Y, a condition code register, a 16-bit stack pointer, and a program counter. In addition, there is an 8 x 8-bit multiply (A x B), with full 16-bit result, and Fractional/Integer 16-bit by 16-bit Divide instructions. A range of 16-bit instructions treat the A and B registers as a combined 16-bit D register for comparison (X and Y registers may also be compared to 16-bit memory operands), addition, subtraction and shift operations, or can add the B accumulator to the X or Y index registers. Bit test operations have also been added, performing a logical AND function between operands, setting the correct conditions codes, but not modifying the operands.|$|E
5000|$|All {{that changed}} with the {{announcement}} of the System/360 (S/360) in April, 1964. The System/360 was a single series of compatible models for both commercial and scientific use. The number [...] "360" [...] suggested a [...] "360 degree," [...] or [...] "all-around" [...] computer system. System/360 incorporated features which had previously been present on only either the commercial line (such as decimal arithmetic and byte addressing) or the engineering and scientific line (such as floating point arithmetic). Some of the arithmetic units and addressing features were optional on some models of the System/360. However, models were <b>upward</b> <b>compatible</b> and most were also downward compatible. The System/360 was also the first computer in wide use to include dedicated hardware provisions for the use of operating systems. Among these were supervisor and application mode programs and instructions, as well as built-in memory protection facilities. Hardware memory protection was provided to protect the operating system from the user programs (tasks) and the user tasks from each other. The new machine also had a larger address space than the older mainframes, 24 bits addressing 8-bit bytes vs. a typical 18 bits addressing 36-bit words.|$|E
50|$|The MC6801 was a single-chip {{microcomputer}} with a 6802 CPU with 128 bytes of RAM, a 2 KB ROM, a 16-bit timer, 31 programmable parallel I/O lines, and a serial port. It could {{also use the}} I/O lines as data and address buses to connect to standard M6800 peripherals. The 6801 would execute 6800 code but it had ten additional instructions and the execution time of key instructions was reduced. The two 8-bit accumulators could act as a single 16-bit accumulator for double precision addition, subtraction and multiplication. It was initially designed for automotive use with General Motors as the lead customer. The first application was a trip computer for the 1978 Cadillac Seville. This 35,000 transistor chip was too expensive for wide-scale adoption in automobiles so a reduced function MC6805 {{single-chip microcomputer}} was designed. The MC6809 was the most advanced 8-bit microprocessor Motorola produced. It had a new instruction set that {{was similar to the}} 6800 but abandoned op-code compatibility for improved performance and high-level language support; the two were software compatible in that assemblers could (and generally did) generate code which was equivalent to 6800 opcodes the 6809 did not directly emulate. In that sense, the 6809 was <b>upward</b> <b>compatible</b> with the 6800. The 6809 had many 16-bit operations, including the first 8-bit multiply instruction (generating a 16 bit product) in a microprocessor, two 16-bit index registers and stack pointers, and full support for both position independent (object code could run wherever it was loaded in memory) and reentrant (object code could be written to be reused by other routines), these last features previously seen only in much larger machines such as IBM 360 mainframes.|$|E
5000|$|Lisp Machines, Inc. {{sold its}} first LISP machines, {{designed}} at MIT, as the LMI-CADR. After {{a series of}} internal battles, Symbolics began selling the CADR from the MIT Lab as the LM-2. Symbolics had been hindered by Noftsker's promise to give Greenblatt a year's head start, and by severe delays in procuring venture capital. Symbolics still had the major advantage that while none of the AI Lab hackers had gone to work for Greenblatt, a solid 14 had signed onto Symbolics. There were two AI Lab people who choose not to be employed by either: Richard Stallman and Marvin Minsky. Symbolics ended up producing around 100 LM-2s, each of which sold for $70,000. Both companies developed second-generation products based on the CADR: the Symbolics 3600 and the LMI-LAMBDA (of which LMI managed to sell around 200). The 3600, which shipped a year late, expanded on the CADR by widening the machine word to 36-bits, expanding the address space to 28-bits, and adding hardware to accelerate certain common functions that were implemented in microcode on the CADR. The LMI-LAMBDA, which came out {{a year after the}} 3600, in 1983, was mostly <b>upward</b> <b>compatible</b> with the CADR (source CADR microcode fragments could be reassembled), but there were improvements in instruction fetch and other hardware differences including use of a multiplier chip and a faster logic family and cache memory. The LAMBDA's processor cards were designed to work in a NuBus based engineering workstation, which had been originated by Steve Ward's group at MIT, and, through a separate chain of events, was being developed by Western Digital Corporation. This allowed the popular LAMBDA [...] "2x2" [...] configuration whereby two machines shared one infrastructure, with considerable savings. Texas Instruments (TI) joined the fray by investing in LMI after it ran out of money, purchasing and relocating the NUBUS engineering workstation unit from Western Digital, licensing the LMI-LAMBDA design and later producing its own variant, the TI Explorer.|$|E
30|$|Hardware: the {{computer}} with CPU (i 5 2.3  GHz or <b>upward</b> <b>compatible</b> CPU), memory (8  GB DDR 3 {{or more than}} 8  GB), graphics card (2  GB or more than 2  GB).|$|E
40|$|Parallel Pascal is an {{extended}} {{version of the}} conventional serial Pascal programming language which includes a convenient syntax for specifying array operations. It is <b>upward</b> <b>compatible</b> with standard Pascal and involves {{only a small number}} of carefully chosen new features. Parallel Pascal was developed to reduce the semantic gap between standard Pascal and a large range of highly parallel computers. Two important design goals of Parallel Pascal were efficiency and portability. Portability is particularly difficult to achieve since different parallel computers frequently have very different capabilities...|$|E
40|$|LOCUS Is a {{distributed}} {{operating system}} which supports transparent {{access to data}} through a network wide fllesystem, permits automatic replication of storaget supports transparent distributed process execution, supplies a number of high reliability functions such as nested transactions, and is <b>upward</b> <b>compatible</b> with Unix. Partitioned operation of subnetl and their dynamic merge is also supported. The system has been operational {{for about two years}} at UCLA and extensive experience In its use has been obtained. The complete system architecture is outlined in this paper, and that experience is summarized. ...|$|E
40|$|The 68 HC 12 is {{the latest}} family of Motorola 8 -bit microcontrollers. It is <b>upward</b> <b>compatible</b> from the 68 HC 11 (at the source code level but not the object code level) but {{contains}} many new instructions and addressing modes which considerably enhance its speed and code efficiency. This paper describes {{the implementation of a}} subroutine-threaded Forth called WHYP on the MC 68 HC 812 A 4 and MC 68 HC 912 B 32 parts. An example of using two MC 68 HC 912 B 32 microcontrollers to simulate an engine controller will be described...|$|E
40|$|We {{present a}} new mechanism-oriented memory model called Commit-Reconcile & Fences (CRF) and define it us� ing {{algebraic}} rules. Many existing memory models {{can be described}} as restricted versions of CRF. The model has been designed so that it is both easy for architects to implement, and stable enough to serve as a target machine interface for compilers of high-level languages. The CRF model ex� poses a semantic notion of caches (saches), and decomposes load and store instructions into finer-grain operations. We sketch how to integrate CRF into modern microprocessors and outline an adaptive coherence protocol to implement CRF in distributed shared-memory systems. CRF offers an <b>upward</b> <b>compatible</b> way to design next generation computer systems...|$|E
40|$|Interlisp {{began with}} an {{implementation}} of the Lisp programming language for the PDP-l at Bolt. Beranek and Newman in 1966. It was followed in 1967 by 940 lisp. an <b>upward</b> <b>compatible</b> implementation for the SDS- 940 computer. 940 Lisp was the first Lisp system to demonstrate the feasibility of using software paging techniques and a large vinual memory {{in conjunction with a}} list-processing system [Bobrow & ( [...] - Murphy. 1967]. 940 Lisp was patterned after the Lisp 1. 5 plementation for crss at MIT. with several ") !lew facilities added to take advantage of its timeshared. on-line environment. DWIM. the Do-What-I Mean error correction facility, was introduced into this system in 1968 by Warren Teitelman rreitelman...|$|E
40|$|This first (long delayed) LISP Bulletin {{contains}} {{samples of}} most of those types of items which the editor feels are relevant to this publication. These include announcements of new (i. e. not previously announced here) implementations of LISP!or closely related) systems; quick tricks in LISP; abstracts o. LISP related papers; short writeups and listings of useful programs; and longer articles on problems of general interest to the entire LISP community. Printing- of these last articles in the Bulletin does not interfere with later publications in formal journals or books. Short write-ups of new features added to LISP are of interest, preferably <b>upward</b> <b>compatible</b> with LISP 1. 5, {{especially if they are}} illustrated by programming examples...|$|E
40|$|If past {{versions}} of XML documents are retained, {{what of the}} various integrity constraints defined in XML Schema on those documents? This paper describes how to interpret such constraints as sequenced constraints, applicable at each point in time. We also consider how to add new variants that apply across time, so-called non-sequenced constraints. Our approach supports temporal documents that vary over both valid and transaction time, whose schema can vary over transaction time. We do this by replacing the schema with a (possibly time-varying) temporal schema and replacing the document with a temporal document, {{both of which are}} <b>upward</b> <b>compatible</b> with conventional XML and with conventional tools like XMLLINT, which we have extended to support the temporal constraints introduced here...|$|E
