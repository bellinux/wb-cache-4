4|10000|Public
50|$|The AGS <b>User</b> <b>interface</b> <b>unit</b> {{was named}} DEDA (Data Entry and Display Assembly). Its {{function}} was entry and readout {{of data from}} the AGS. Some of the system's functionality was built into DEDA unlike the DSKY used by AGC.|$|E
40|$|Abstract: On Windows {{platform}} implemented BAM (Bi-directional Associative Memory) {{neural network}} simulator is presented. The realization {{in two parts}} – main and <b>user</b> (<b>interface)</b> <b>unit</b> allows using it in the student education and {{as well as a}} part of other software applications, using this kind of neural network. Keywords: Neural Network, Bi-directional Associative Memory (BAM), Simulato...|$|E
40|$|Abstract: Numerator {{systems are}} widely used in various elds, sorting, and {{structures}} to ensure regular functioning. They are used today {{in places such as}} banks and hospitals to minimize the time spent waiting in a queue, and various studies have been undertaken to achieve eciency in the workplace. At the beginning of these studies, numerator systems, which have been integrated into the short message service (SMS) application, have been used eciently. With this application, to supply the required information to the user in the fastest way, a numerator system is developed by utilizing radio frequency communications and the SMS message structure. The application system in this study includes hardware and software sections. The hardware section is designed using a keypad, microcontroller, and liquid crystal display as the <b>user</b> <b>interface</b> <b>unit,</b> and it also consists of a power supply feeding the system. The software section consists of the microcontrollers ' required software to control and operate the system, software for the elements used as the <b>user</b> <b>interface</b> <b>unit,</b> and the menu program software that the users will notice...|$|E
50|$|The <b>User</b> <b>Interfaces</b> <b>Unit,</b> {{previously}} {{known as}} the Multimedia Development Lab, provides web development services to the Libraries and partners both at UNT and other communities. The unit focuses {{on the needs of}} users—usability, accessibility, information architecture, content strategy, design, CMS architecture, and resource discovery.|$|R
40|$|Abstract:- The mobile {{communication}} handset {{system can be}} divided into three units of consuming battery power, which are data receiving, data processing, and the <b>user</b> <b>interface</b> <b>units.</b> Among other things, one of the power-efficient mechanisms is to make the data processing and the <b>user</b> <b>interface</b> <b>units</b> stay on the sleep state while the data receiving unit is waiting for packets from wireless network. We study two wake-up schemes: the threshold and the vacation schemes to conserve power. To take account of traffic burstiness, we consider three traffic models: the Poisson Process, the Interrupted Poisson Process (IPP), and the 2 -state Markov Modulated Poisson Process (MMPP). Analytical models are considered to evaluate two wake-up schemes under three different traffic models. The performance measures of interest are the switch-on rate, the packet dropping probability, and the waiting time...|$|R
40|$|Successful {{accumulation}} {{of knowledge is}} critically dependent {{on the ability to}} verify and replicate every part of a scientific conduct. However, such principles are difficult to enact when researchers continue to resort on ad hoc workflows resulting in a poorly maintained code base. Based on a critical examination of the needs of neuroscience and psychology community, I introduce psychopy_ext, a unifying framework that seamlessly integrates experiment building, analysis and manuscript preparation by choosing reasonable defaults and implementing relatively rigid patterns of workflow. This structure allows automation of multiple tasks, such as automatic <b>user</b> <b>interfaces,</b> <b>unit</b> testing, stimulus control analyses, single-command access to descriptive statistics, and publication quality plotting. Taken together, psychopy_ext opens an exciting possibility for faster, more robust code development and collaboration for researchers...|$|R
40|$|Many of the {{existing}} website evaluation methods and criteria for evaluating website quality {{are not able to}} sufficiently assess the performance and quality of a website, and most of them focus on usability and accessibility. This thesis aims at proposing the website quality metrics and methods to measure the website interface and reputation quality factors. The evaluation metrics has a framework which {{can be viewed as a}} hierarchical tree with three levels. The first level is composed of five quality characteristics: Aesthetics, Ease of Use, Multimedia, Rich Content and Reputation. The second level breaks down the first level quality characteristics into sub-characteristics and the third level further breaks down the second level sub-characteristics into measurable criteria. This thesis is particularly concerned with two major quality characteristics: Aesthetics and Reputation, and also the several website measurable criteria (indicators) that now apply to almost all live websites. A website evaluation tool is provided by this study to measure website quality automatically. It includes a traversal unit, parsing unit, data metrics unit and <b>user</b> <b>interface</b> <b>unit.</b> Also some effective algorithms are used in each unit: data crawler, recursive, parser and data transmission. According to relative issues in previous research about website evaluation metrics, there are only a few of them that use same methods as this study to completely measure the website metrics, and highlight the entire website quality scores that meet the users’ requirements...|$|E
50|$|At the Geneva Motor Show, Apple {{demonstrated}} CarPlay {{which provides}} an iOS-like <b>user</b> <b>interface</b> to head <b>units</b> in compatible vehicles. Once configured by the automaker, QNX can {{be programmed to}} handoff its display and certain functionality to an Apple CarPlay device.|$|R
40|$|Abstract—The model-based {{approach}} to <b>user</b> <b>interface</b> design relies on developing separate models capturing various aspects about users, tasks, application domain, presentation and dialog structures. This paper presents a task modeling approach for <b>user</b> <b>interface</b> design and aims at exploring mappings between task, domain and presentation models. The basic idea of our {{approach is to}} identify typical configurations in task and domain models and to investigate how they relate each other. A special emphasis is put on applicationspecific functions and mappings between domain objects and operational task structures. In this respect, we will address two layers in task decomposition: a functional (planning) layer and an operational layer. Keywords—task modeling, <b>user</b> <b>interface</b> design, <b>unit</b> tasks, basic tasks, operational task model. I...|$|R
40|$|An {{apparatus}} {{for providing}} weather information onboard an aircraft includes a processor unit and a graphical <b>user</b> <b>interface.</b> The processor <b>unit</b> processes weather information {{after it is}} received onboard the aircraft from a ground-based source, and the graphical <b>user</b> <b>interface</b> provides a graphical presentation of the weather information to a user onboard the aircraft. Preferably, the graphical <b>user</b> <b>interface</b> includes one or more user-selectable options for graphically displaying {{at least one of}} convection information, turbulence information, icing information, weather satellite information, SIGMET information, significant weather prognosis information, and winds aloft information...|$|R
5000|$|The reviewer, {{who participated}} in the Gulf War and {{experienced}} wargamer and computer wargamer, stated that [...] "Based on the program as released, I could not begin {{to figure out what to}} do or how to do it. Clearly, there is something wrong with this picture". He criticized the documentation, <b>user</b> <b>interface,</b> unrealistic <b>unit</b> strength, and lack of options such as military intelligence, logistics, or most close air support. The reviewer stated that Patriot was [...] "the first civilian wargame ever published which could be used immediately in the military for a CPX (Command Post Exercise). And this is part of the problem"; while with many novel features, he wrote; [...] "the lack of a meaningful game dooms the remainder to oblivion".|$|R
5000|$|Covers the Eastern Front of the Second World War, {{including}} {{fighting in}} Finland, the Soviet Union, Germany, Romania, Hungary, Yugoslavia, Berlin and the Baltic States from June 1941 to May 1945. Barbarossa to Berlin shows various improvements over its predecessor {{in the fields}} of graphics and <b>user</b> <b>interface.</b> Infantry <b>units</b> have new commands available and explosions are now bitmaps. Interface is more sophisticated; commands like [...] "crawl" [...] and [...] "sneak" [...] from Beyond Overlord are now transformed into a single [...] "sneak" [...] command. The old [...] "ambush marker" [...] is replaced with a more elegant solution: [...] "covered arc" [...] and [...] "covered arc (armor only)". By clicking this command you can define a field of fire so that units will fire only when enemy targets of a certain type come within a certain range or arc of fire.|$|R
40|$|Object-oriented {{programming}} {{is presented as}} a paradigm for developing interactive systems for computer animation. Object types, evolved conceptually from graphics turtles, are implemented to provide the animator with familiar metaphors for the specification of motion in three-dimensional space. The intention is to create objects that can represent actors, cameras, and decor that the user can direct and animate in a relatively intuitive manner. Vector and turtle objects support the actors, which respond to messages to orient, accelerate and draw themselves on the screen. The MacApp object libraries are used to implement the standard Macintosh <b>user</b> <b>interface</b> and a <b>unit</b> is developed which implements vectors, actors and three-dimensional graphics turtles as obects. The object-oriented approach encourages a conceptual consistency in the external and internal interfaces and is intended to facilitate the development of extensible characters and tools through the cooperative efforts of animators and programmers...|$|R
40|$|International Telemetering Conference Proceedings / October 20 - 23, 2003 / Riviera Hotel and Convention Center, Las Vegas, NevadaThis paper {{outlines}} the GPS data acquisition of two PCM encoders. The {{design of the}} first PCM Encoder uses an embedded GPS Receiver module, the Thales G 12 - HDMA receiver. The G 12 Receiver has been integrated into the electronics of the PCM Encoder to provide a seamless tool for the Telemetry Engineer to acquire GPS position and time data with the sensor data acquired from the PCM Encoder. The second telemetry encoder discussed in this paper adds the GPS Interface Module for the Time Space Position Unit (TSPI) currently under development at Herley Industries. The TSPI Unit will also be integrated with the PCM Encoder tools to create a seamless <b>user</b> <b>interface.</b> The TSPI <b>unit</b> is available in both the “Low Dynamic (JTU-I) ” and the “High Dynamic” (JTU-II) ...|$|R
5000|$|... "For example, {{a system}} {{described}} in U.S. Pat. No. 6,409,602 {{is known as}} a casino game system of this sort. This system comprises a server and a plurality of clients, and the server can execute a plurality of game programs. Each client can access the plurality of game programs that the server executes, and a game image created by the accessed game program is displayed on a display unit of the client. Thereafter, a player can play a game from the game program being executed by the server by performing the game operation to the client. A typical conventional casino game system comprises a plurality of independent game devices, and each game device independently executes a game program. According to the system described in U.S. Pat. No. 6,409,602, most of the functions that each game device in this typical conventional casino game system is equipped with can be centralized in the server. In this way, each client only needs to be equipped with minimum functions, i.e. <b>user</b> <b>interfaces</b> (display <b>unit</b> and operation accepting unit) and a communication function that enables communication with the server. This dramatically reduces the costs for both hardware and software in the entire casino game system.""CASINO GAME SYSTEM AND CASINO GAME TERMINAL THAT CAN BE USED THEREIN", United States Patent Application 20070213134, [...] "Background of the Invention" [...] section.|$|R
50|$|UsiXML (<b>USer</b> <b>Interface</b> eXtensible Markup Language) is an XML-based {{specification}} language for <b>user</b> <b>interface</b> design. It supports {{the description of}} UI for multiple contexts of use such as Character <b>User</b> <b>Interfaces</b> (CUIs), Graphical <b>User</b> <b>Interfaces</b> (GUIs), Auditory <b>User</b> <b>Interfaces,</b> and Multimodal <b>User</b> <b>Interfaces.</b>|$|R
40|$|We address current {{research}} concerning patterns dedicated to enable higher reusability during the automated development of GUI systems. <b>User</b> <b>interface</b> patterns are promising artifacts for improvements in this regard. Both general models for abstractions of graphical <b>user</b> <b>interfaces</b> and <b>user</b> <b>interface</b> pattern based {{concepts such as}} potential notations and model-based processes are considered. On that basis, the present limitations and potentials surrounding <b>user</b> <b>interface</b> patterns are to be investigated. We elaborate what theoretical implications emerge from <b>user</b> <b>interface</b> patterns applied for reuse and automation within <b>user</b> <b>interface</b> transformation steps. For this purpose, formal descriptions of <b>user</b> <b>interface</b> patterns are necessary. We analyze {{the capabilities of the}} mature XML-based <b>user</b> <b>interface</b> description languages UIML and UsiXML to express <b>user</b> <b>interface</b> patterns. Additionally, we experimentally investigate and analyze strengths and weaknesses of two general transformation approaches to derive practical implications of <b>user</b> <b>interface</b> patterns. As a result, we develop suggestions on how to apply positive effects of <b>user</b> <b>interface</b> patterns for the development of pattern-based graphical <b>user</b> <b>interfaces...</b>|$|R
40|$|This paper {{discusses}} supportive <b>user</b> <b>interfaces</b> as {{a special}} kind of distributed <b>user</b> <b>interfaces.</b> It introduces tangible objects as elements of a supportive <b>user</b> <b>interface</b> and discusses the role of metaphors. Furthermore, the role of supportive <b>user</b> <b>interfaces</b> for implementing the usability criteria of task migratability in smart environments is discussed. Some challenges are identified and the combination of tangible <b>user</b> <b>interfaces</b> and graphical <b>user</b> <b>interfaces</b> is suggested...|$|R
40|$|Abstract — We address current {{research}} concerning patterns dedicated to enable higher reusability during the automated development of GUI systems. <b>User</b> <b>interface</b> patterns are promising artifacts for improvements in this regard. Both general models for abstractions of graphical <b>user</b> <b>interfaces</b> and <b>user</b> <b>interface</b> pattern based {{concepts such as}} potential notations and model-based processes are considered. On that basis, the present limitations and potentials surrounding <b>user</b> <b>interface</b> patterns are to be investigated. We elaborate what theoretical implications emerge from <b>user</b> <b>interface</b> patterns applied for reuse and automation within <b>user</b> <b>interface</b> transformation steps. For this purpose, formal descriptions of <b>user</b> <b>interface</b> patterns are necessary. We analyze {{the capabilities of the}} mature XML-based <b>user</b> <b>interface</b> description languages UIML and UsiXML to express <b>user</b> <b>interface</b> patterns. Additionally, we experimentally investigate and analyze strengths and weaknesses of two general transformation approaches to derive practical implications of <b>user</b> <b>interface</b> patterns. As a result, we develop suggestions on how to apply positive effects of <b>user</b> <b>interface</b> patterns for the development of pattern-based graphical <b>user</b> <b>interfaces...</b>|$|R
40|$|The {{advent of}} {{wireless}} technology {{along with other}} communication techniques has helped in making electronic commerce very popular. A modern forward looking product {{is the one that}} aids the comfort, convenience and efficiency in everyday life. In this paper, we discuss an innovative concept of RFID Based Smart Shopping and Billing. The key idea here is to assist a person in everyday shopping in terms of reduced time spent while purchasing a product. The main goal is to provide a technology oriented, low-cost, easily scalable, and rugged system for aiding shopping in person. The developed system comprises of Cart location detection unit (CLDU), Server Communication <b>unit</b> (SCU), <b>User</b> <b>Interface</b> and display <b>unit</b> (UIDU) and Billing and Inventory management unit (BIMU). CLDU is used to smartly locate the position of shopping cart inside the shopping market to help in obtaining relevant product information. SCU will help in establishing and maintaining the connection of the shopping cart with the main server. UIDU will provide the customer with <b>user</b> <b>interface</b> and BIMU deals with the billing and inventory management in collaboration with the SCU. These units are integrated into a smart enclosed system and are tested to satisfy the functionality. The smart shopping cart will help shorten the checkout lines thereby helping the customers at retail stores. The customers will be able to scan the items themselves and the LCD screen on the shopping cart will keep updating the total. This {{will turn out to be}} very beneficial for the retail stores as more people will enjoy the shopping experience and come more often to shop...|$|R
40|$|In {{this paper}} we {{investigate}} {{what is needed}} to make <b>user</b> <b>interface</b> builders incrementally refinable. The need for dedicated <b>user</b> <b>interface</b> builders is motivated by drawing a parallel with programming language design and object-oriented application frameworks. We show that reflection techniques borrowed from the programming language community can be successfully applied to make <b>user</b> <b>interface</b> builders incrementally refinable. KEY WORDS: <b>User</b> <b>Interfaces,</b> <b>User</b> <b>Interface</b> Builder, Object-oriented Framework, Reflection. 1. Introduction Graphical <b>user</b> <b>interfaces</b> for workstation applications are inherently difficult to build. To help programmers create such interfaces, tools are being developed. Those tools range from tool kits (libraries providing primitive building blocks for managing simple widgets, sometimes machine dependent) to <b>user</b> <b>interface</b> management systems (application frameworks and <b>user</b> <b>interface</b> builders supporting higher level <b>user</b> <b>interface</b> concepts). The major goal of tho [...] ...|$|R
40|$|We {{have applied}} {{interaction}} acts, an abstract user-service interaction specification, to speech <b>user</b> <b>interfaces</b> to investigate {{how well it}} lends itself to {{a new type of}} <b>user</b> <b>interface.</b> We used interaction acts to generate VoiceXML-based speech <b>user</b> <b>interface,</b> and identified two main issues connected to the differences between graphical <b>user</b> <b>interfaces</b> and speech <b>user</b> <b>interfaces.</b> The first issue concerns the structure of the <b>user</b> <b>interface.</b> Generating speech <b>user</b> <b>interfaces</b> and GUIs from the same underlying structure easily results in a too hierarchical and difficult to use speech <b>user</b> <b>interface.</b> The second issue is user input. Interpreting spoken user input is fundamentally different from user input in GUIs. We have shown {{that it is possible to}} generate speech <b>user</b> <b>interfaces</b> based on. A small user study supports the results. ...|$|R
40|$|This {{bachelor}} {{thesis is}} focused on design and execution of <b>user</b> <b>interface</b> of mobile applications for the Windows Phone operating system. The main objective is to extend the MMSP methodology by the support of mobile applications' <b>user</b> <b>interface</b> design. Another objective is to compare <b>user</b> <b>interface</b> of the major mobile operating systems (Anroid and iOS) with Windows Phone, and thus to identify advantages of Windows Phone <b>user</b> <b>interface</b> for ordinary <b>users.</b> The thesis is divided as follows: the first part describes <b>user</b> <b>interface</b> of the major mobile operating systems and identifies advantages of the Windows Phone operating system for ordinary users by comparing it {{with the rest of}} the major operating systems. The thesis further deals with execution of the MMSP methodology. Firstly, the methodology is extended by the task of mobile application <b>user</b> <b>interface</b> design. This describes the principles of <b>user</b> <b>interface</b> design. Furthermore, the role of the mobile application <b>user</b> <b>interface</b> designer, who is responsible for the design of <b>user</b> <b>interface</b> is defined. The thesis describes the possibilities of Windows Phone <b>user</b> <b>interface</b> applications, so that they are comprehensible to the <b>user</b> <b>interface</b> designers. Moreover, the thesis evaluates the application support of <b>user</b> <b>interface</b> application creation for Windows Phone, in the last chapter. The thesis extends the MMSP methodology, in a way that it supports <b>user</b> <b>interface</b> design. The thesis also creates a comprehensive summary of Windows Phone <b>user</b> <b>interface</b> and its operating elements, which has not been available in Czech until now...|$|R
40|$|M. Com. (Informatics) In {{this study}} {{the issue on}} <b>User</b> <b>Interface</b> Management Systems (UIMSs) is addressed. Specific {{attention}} {{is given to the}} design principles regarding development of <b>user</b> <b>interface</b> management systems that allow the creation of graphical <b>user</b> <b>interfaces</b> for existing text-oriented command-line applications. As an introduction the concept of <b>user</b> <b>interface</b> management systems is discussed and a working and formal definition is derived. Thereafter a survey is discussed concerning <b>user</b> <b>interface</b> tools. A <b>user</b> <b>interface</b> management system architecture is proposed; planning, design and development aspects of <b>user</b> <b>interface</b> management systems are addressed, and the effect of human factors in the design of a <b>user</b> <b>interface</b> management system is discussed. Attention is also given to various interaction and dialogue models [...] ...|$|R
5000|$|UIML (<b>User</b> <b>Interface</b> Markup Language) is an XML-based <b>user</b> <b>interface</b> markup {{language}} for defining <b>user</b> <b>interfaces</b> on computers.Basically UIML tries {{to reduce the}} work needed to develop <b>user</b> <b>interfaces.</b> It allows you to describe the <b>user</b> <b>interface</b> in declarative terms (i.e. as text) and abstract it. Abstracting means that you don't exactly specify how the <b>user</b> <b>interface</b> is going to look, but rather what elements are to be shown, and how should they behave. For example, to describe a message window, you could write: ...|$|R
40|$|<b>User</b> <b>interfaces</b> often {{account for}} a {{majority}} of application code and defects. High quality <b>user</b> <b>interfaces</b> come with equally high development costs ? lower than the cost of multitudes of users coping with low quality <b>user</b> <b>interfaces,</b> but higher than the mild frustration experienced by any individual user. Thus, the economics of software lead to a situation where barely passable <b>user</b> <b>interfaces</b> abound. That most <b>user</b> <b>interface</b> code comes from bespoke attempts to implement vague human interface guidelines is a leading cause of high cost and low quality. This thesis introduces a novel formalism for <b>user</b> <b>interfaces</b> based on ordered constraint systems. Using explicit models for the values and relationships in a <b>user</b> <b>interface,</b> several reusable algorithms are defined for rich <b>user</b> <b>interface</b> behaviors, including value propagation, dataflow visualization, pinning, scripting, command activation, widget enablement, and context-sensitive help. Developers can leverage provably correct implementations of such desirable features for free, raising the quality of <b>user</b> <b>interfaces</b> while lowering their production cost. Some of these behaviors have been implemented in a JavaScript framework, Hot-Drink, for web <b>user</b> <b>interfaces,</b> and a C++ framework, Adam, for desktop <b>user</b> <b>interfaces.</b> Experiments have demonstrated higher developer productivity, fewer lines of code, fewer defects, and fewer components when compared to conventional <b>user</b> <b>interface</b> frameworks...|$|R
40|$|Most present HCI design {{patterns}} and pattern languages {{are based on}} the traditional <b>user</b> <b>interfaces,</b> i. e., the graphical <b>user</b> <b>interfaces.</b> However, with growing popularity of computers, <b>user</b> <b>interfaces</b> for HCI are being integrated in more and more application domains. Today, large amount of <b>user</b> <b>interfaces</b> go beyond the desktop metaphor, which results in complexity and diversity in <b>user</b> <b>interface</b> design. To aid designing these <b>user</b> <b>interfaces,</b> I am involved in using and developing the related HCI {{design patterns}} and pattern languages. In this paper, through the practice of developing <b>user</b> <b>interfaces</b> for control a model robot, I conclude that application domain patterns are also critical to an HCI pattern language...|$|R
40|$|Part 2 : Late Breaking ResultsInternational audienceCurrent <b>user</b> <b>interface</b> {{modeling}} languages usually {{focus on}} modeling a single <b>user</b> <b>interface</b> {{and have a}} fixed set of <b>user</b> <b>interface</b> components; adding another <b>user</b> <b>interface</b> component requires {{an extension of the}} language. In this paper we present CASSIS, a concise language that supports creation of <b>user</b> <b>interface</b> components using models instead of language extensions. It also allows the specification of design-time and runtime <b>user</b> <b>interface</b> variations. The support for variations has been used to generate constraints for custom <b>user</b> <b>interface</b> components, to specify design patterns and design decisions. CASSIS has been used in several projects including a multi-disciplinary applied research project...|$|R
40|$|GUI builder {{tools are}} widely used in {{practice}} to develop the <b>user</b> <b>interface</b> of software systems. Typically they are visual programming tools that support direct-manipulative assembling of the <b>user</b> <b>interface</b> components. We have developed the tool GuiBuilder to facilitate model-driven development of graphical and multimedia <b>user</b> <b>interfaces.</b> <b>User</b> <b>interface</b> developers can model {{the structure of the}} <b>user</b> <b>interface</b> with compositional presentation diagrams and its behaviour with hierarchical statechart diagrams. GuiBuilder then supports the transformation of the model to Java, i. e., the generation of a working <b>user</b> <b>interface</b> and the simulation of the modelled behaviour. Interactive sessions with the <b>user</b> <b>interface</b> can be recorded and replayed...|$|R
5000|$|Text-based <b>user</b> <b>interface</b> (TUI), {{also called}} textual <b>user</b> <b>interface</b> or {{terminal}} <b>user</b> <b>interface,</b> is a retronym coined sometime after {{the invention of}} graphical <b>user</b> <b>interfaces.</b> TUIs display computer graphics in text mode. An advanced TUI may, like GUIs, use the entire screen area and accept mouse and other inputs.|$|R
40|$|Abstract. Currently, it is {{difficult}} for a designer to create <b>user</b> <b>interfaces</b> that are of high aesthetic quality for a continuously growing range of devices with varied screen sizes. Most existing approaches use abstractions that only support form based <b>user</b> <b>interfaces.</b> These <b>user</b> <b>interfaces</b> may be usable but are of low aesthetic quality. In this paper, we present a technique to design adaptive graphical <b>user</b> <b>interfaces</b> by example (i. e. <b>user</b> <b>interfaces</b> that can adapt to the target platform, the user, etc.), which can produce <b>user</b> <b>interfaces</b> of high aesthetic quality while reducing the development cost inherent to manual approaches. Designing adaptive <b>user</b> <b>interfaces</b> by example could lead to a new generation of design tools that put adaptive <b>user</b> <b>interface</b> development within reach of designers as well as developers...|$|R
40|$|Abstract: An energy {{simulation}} tool {{is a tool}} {{to predict}} the energy consumption of a building. Today there are many energy simulation tools in the market. However, architects find that the existing energy simulation tools do not meet their needs. One thing that does not meet their need is the <b>user</b> <b>interface.</b> In relation to that, we carried out a <b>user</b> <b>interface</b> survey to know which <b>user</b> <b>interface</b> is preferred by architects. We found that architects prefer visual <b>user</b> <b>interface</b> (<b>user</b> <b>interface</b> that uses image) than textual <b>user</b> <b>interface</b> (<b>user</b> <b>interface</b> that merely uses text). In inputting value, they prefer to input it using drag-and-drop style rather than typing using keyboard. We also find that architects {{do not like to}} input too many values in the <b>user</b> <b>interface...</b>|$|R
40|$|Abstract. Constructing {{multi-device}} interfaces still presents major challenges, {{despite all}} {{efforts of the}} industry and several academic initiatives to develop usable solutions. One approach which is finding its way into general use, is XML-based <b>User</b> <b>Interface</b> descriptions to generate suitable <b>User</b> <b>Interfaces</b> for embedded systems and mobile computing devices. Another important solution is Model-based <b>User</b> <b>Interface</b> design, which evolved into a very suitable but academic approach for designing multi-device interfaces. We introduce a framework, Dygimes, which uses XML-based <b>User</b> <b>Interface</b> descriptions in combination with selected models, to generate <b>User</b> <b>Interfaces</b> for different kinds of devices at runtime. With this framework task specifications are combined with XMLbased <b>User</b> <b>Interface</b> building blocks to generate <b>User</b> <b>Interfaces</b> that can adapt to the context of use. The design of the <b>User</b> <b>Interface</b> and {{the implementation of the}} application code can be separated, while smooth integration of the functionality and the <b>User</b> <b>Interface</b> is supported. The resulting interface is location independent: it can migrate over devices while invoking functionality using standard protocols. ...|$|R
40|$|Declarative {{models can}} provide {{abstract}} descriptions of <b>user</b> <b>interfaces.</b> Therefore, {{it is desirable}} to use declarative models for designing <b>user</b> <b>interfaces</b> since complex details of the <b>user</b> <b>interfaces</b> can be avoided at the design time. However, declarative models are usually not able to describe all aspects required to generate <b>user</b> <b>interfaces...</b>|$|R
40|$|This report gives {{a survey}} of <b>user</b> <b>interface</b> {{languages}} and formal representations of <b>user</b> <b>interfaces.</b> The following aspects of <b>User</b> <b>Interface</b> Languages are considered: expressiveness; readability; evaluation (is it possible to evaluate the ergonomic and functional quality of the <b>user</b> <b>interface</b> from the representation); manipulation; compilation/interpretation; possibility to include knowledge representation...|$|R
40|$|This {{bachelor}} thesis {{deals with}} the problem of <b>user</b> <b>interface</b> design. The goal of this thesis is to introduce the concept of the <b>user</b> <b>interface,</b> its types and terms of <b>user</b> <b>interface</b> including defining basic needs of the user related to this interface. Furthermore, this thesis introduce to reader concept of Human Computer Interaction and presents the basic rules and procedures of creating the <b>user</b> <b>interface.</b> These rules and procedures are in practical part applied to the specific <b>user</b> <b>interface</b> design of web application for benchmarking comparison of particular regions tourism strategies. Final result of this bachelor thesis is specific tested <b>user</b> <b>interface</b> on which bases are submitted final recommendations for creating ideal <b>user</b> <b>interface</b> for this application...|$|R
