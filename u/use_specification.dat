29|5706|Public
25|$|The {{product of}} the {{polymerization}} process is unmodified PVC. Before PVC can be made into finished products, it always requires conversion into a compound by the incorporation of additives (but not necessarily all of the following) such as heat stabilizers, UV stabilizers, plasticizers, processing aids, impact modifiers, thermal modifiers, fillers, flame retardants, biocides, blowing agents and smoke suppressors, and, optionally, pigments. The choice of additives used for the PVC finished product {{is controlled by the}} cost performance requirements of the end <b>use</b> <b>specification</b> (underground pipe, window frames, intravenous tubing and flooring all have very different ingredients to suit their performance requirements). Previously, polychlorinated biphenyls (PCBs) were added to certain PVC products as flame retardants and stabilizers.|$|E
5000|$|In {{software}} development, products which compete {{often will}} <b>use</b> <b>specification</b> lists of competitive products to add features, presuming {{that they must}} provide all {{of the features of}} the competitive product, plus add additional functionality. This can lead to [...] "feature creep" [...] in which it is considered necessary to add all of a competitor's features whether or not customers will use them.|$|E
50|$|The {{product of}} the {{polymerization}} process is unmodified PVC. Before PVC can be made into finished products, it always requires conversion into a compound by the incorporation of additives (but not necessarily all of the following) such as heat stabilizers, UV stabilizers, plasticizers, processing aids, impact modifiers, thermal modifiers, fillers, flame retardants, biocides, blowing agents and smoke suppressors, and, optionally, pigments. The choice of additives used for the PVC finished product {{is controlled by the}} cost performance requirements of the end <b>use</b> <b>specification</b> (underground pipe, window frames, intravenous tubing and flooring all have very different ingredients to suit their performance requirements). Previously, polychlorinated biphenyls (PCBs) were added to certain PVC products as flame retardants and stabilizers.|$|E
5000|$|Food {{additives}} (general standard including authorized <b>uses,</b> <b>specifications</b> {{for food}} grade chemicals) ...|$|R
3000|$|<b>Use</b> Case <b>Specification</b> - In the <b>use</b> case <b>specification,</b> {{the team}} {{described}} the use cases considering the different execution flows; [...]...|$|R
40|$|Traditional static {{checkers}} {{are limited}} to detecting simple anomalies since they have no information regarding {{the intent of the}} code. Program verifiers are too expensive for nearly all applications. This thesis investigates the possibilities of <b>using</b> <b>specifications</b> to do lightweight static checks to detect inconsistencies between specifications and implementations. A tool, LCLint, was developed to do static checks on C source code <b>using</b> LCL <b>specifications.</b> It is similar to traditional lint, except it <b>uses</b> information in <b>specifications</b> to do more powerful checks. Some typical problems detected by LCLint include violations of abstraction barriers and modifications of caller-visible state that are inconsistent with the <b>specification.</b> Experience <b>using</b> LCLint to check a specified program and to understand and maintain a program with no specifications illustrate some applications of LCLint and suggest future directions for <b>using</b> <b>specifications</b> to check source code...|$|R
40|$|This poster explores {{how we can}} <b>use</b> <b>Specification</b> and Description Language (SDL) to {{represent}} environmental models. From the different phases of a simulation model con-struction, the formalization phase, sometimes is missed. This phase is {{needed in order to}} understand the model before any implementation...|$|E
40|$|Challenge – Coordinate {{regional}} team of 35 people – Selected {{a technical}} lead to coordinate and manage specification development – True Virtual Team • Met some through Video Teleconference • Never met all {{face to face}} Virtual Private Networking (VPN) – Not successfully implemented • USBR Security issues Army Knowledge Online (AKO) – Virtual team capability • USBR didn’t want to <b>use.</b> <b>Specification</b> Development – Different master guide specifications & section format...|$|E
40|$|Abstract. The Object Constraint Language (OCL) {{is often}} used for {{behavioral}} specification of software components. One current problem in specifying behavioral aspects {{comes from the fact}} that editing OCL constraints manually is time consuming and error-prone. To simplify constraint definition we propose to <b>use</b> <b>specification</b> patterns for which OCL constraints can be generated automatically. In this paper we outline this solution proposal and develop a way how to formally describe such specification patterns on which a library of reusable OCL specifications is based...|$|E
50|$|The {{oldest and}} most widely <b>used</b> <b>specification</b> for hot black oxide is MIL-DTL-13924, which covers four classes of {{processes}} for different substrates. Alternate specifications include AMS 2485, ASTM D769, and ISO 11408.|$|R
5000|$|To prove formal {{properties}} on the code. <b>Using</b> <b>specifications</b> {{written in}} ANSI/ISO C Specification Language enables it to ensure {{properties of the}} code for any possible behavior. Frama-C handles floating point numbers.|$|R
40|$|The <b>use</b> of <b>specification</b> as an {{integral}} part of design and implementation is accepted as part of most design methodologies. However, specification techniques differ in the degree of formalism they offer. For example, VDM [7] and Z [8] are both mathematically based formal specification languages, but IDEF 1 X [3, 10] is a semi-formal graphical method. The goal of <b>using</b> <b>specification</b> may also differ. I...|$|R
40|$|Abstract. Compositional plug-and-play-like reuse of black-box {{components}} re-quires sophisticated {{techniques to}} specify the components. One current problem in specifying behavioral aspects {{comes from the fact}} that editing OCL con-straints manually is time consuming and error-prone. To simplify constraint definition we propose to <b>use</b> <b>specification</b> patterns for which OCL constraints can be generated automatically. As a first step we identify a list of patterns that frequently occur in behavioral specifications. These patterns are described in detail using a special description scheme and specification examples...|$|E
30|$|Table 8 in the Appendix {{reports the}} bivariate probit first-stage {{results for the}} effect of our {{instruments}} on remittances. The instrument coefficients are consistently significant and positive across all specifications. We confirm {{the existence of an}} endogenous relationship between remittance reception and schooling via Wald’s tests for ρ= 0, where we reject the null hypothesis of no error correlation. We <b>use</b> <b>specification</b> three for all two-stage specifications, as it includes all instruments and controls, and its estimates provide a lower bound for the effect of remittances on school enrollment.|$|E
40|$|Abstract. A full {{representation}} of a simulation model encompasses {{the behavior of the}} elements that define the model, the definition of the probability distributions that define the delays of the events that control the model, the experimental framework needed for execution, and the graphical {{representation of}} certain model elements. This paper aims to <b>use</b> <b>specification</b> and description language to achieve a full model representation by adding two extensions to the language, which allows for a complete and unambiguous definition of a discrete simulation model that is similar to a common discrete operations research simulation tool...|$|E
40|$|Contracts and assertions are {{accepted}} {{as an important}} method for improving software reliability. However, existing systems do not provide clean ways to describe conditions based on memory shape. We present a method for elegantly specifying memory shape invariants <b>using</b> <b>specifications</b> in linear logic and then dynamically verifying these <b>specifications</b> <b>using</b> the linear logic programming language LolliMon...|$|R
50|$|Computer {{languages}} are object languages of the metalanguage {{in which their}} specification is written. In computer science this {{is referred to as}} the specification language. Backus-Naur form was one of the earliest <b>used</b> <b>specification</b> languages.|$|R
40|$|An {{approach}} for guiding {{the construction of}} <b>use</b> case <b>specifications</b> is presented. A <b>use</b> case <b>specification</b> comprises contextual information of the use case, its change history, the complete graph of possible pathways, attached requirements and open issues. The proposed approach delivers a <b>use</b> case <b>specification</b> as an unambiguous natural language text. This is done by a stepwise and guided process which progressively transforms initial and partial natural language descriptions of scenarios into well structured, integrated <b>use</b> case <b>specifications.</b> The basis of the approach {{is a set of}} linguistic patterns and linguistic structures. The former constitutes the deep structure of the <b>use</b> case <b>specification</b> whereas the latter corresponds to the surface structures. The paper presents the use case model, the linguistic basis and the guided process along with the associated guidelines and support rules. The process is illustrated with the automated teller machine (ATM) case study...|$|R
40|$|In this research, {{we present}} a {{lightweight}} approach to identify the impact of requirement changes at the specification level. We <b>use</b> <b>specification</b> information included in Use Case Maps to analyze {{the potential impact of}} requirement changes on a system. We propose dependency definitions and algorithms to identify Use Case Map scenario and component relationships. Also, techniques for ripple effect analysis at the scenario, component and element levels of abstraction are presented. Further, we present our tool that implements the proposed approaches showing the possibility of automation. A simple case study makes use of this tool to analyze an existing Use Case Map to show the information that is returned by our approach and its applicability in change impact analysis...|$|E
40|$|The final {{publication}} {{is available}} at Springer via [URL] ISO 9241 - 210 standard provides a framework for human-centred design (HCD) activities comprising the four stages: context of <b>use,</b> <b>specification</b> of user and organisational requirements, design solutions, and evaluation against requirements. Other parts of the 9241 standard cover user interface design and usability. This paper uses the HCD framework to emphasise user experience (UX) design and methods used to help create good user experiences. It also relates the framework to an agile software development environment. It is concluded that the flexible and iterative nature of ISO 9241 - 210 makes it a good basis for both user experience design and an agile development process...|$|E
40|$|In this poster we {{show how}} to <b>use</b> <b>Specification</b> and Description Language (SDL) to {{represent}} cellular automata models. To achieve {{that we use}} a generalization of the common cellular automata, named m:n-$CA^k$. Also we add some extension to SDL language to simplify the representation of these automata. Thanks to SDL and m:n-$CA^k$ {{the behavior of the}} cellular automata model can be defined in a graphical way allowing the complete and unambiguous description of the simulation model that uses it. SDL is a modern object oriented language that allows the definition of distributed systems. It has focused on the modeling of reactive, state/event driven systems, and has been standardized by the International Telecommunications Union (ITU) in the Z. 100. Postprint (published version...|$|E
5|$|Colhoun {{was one of}} 111 s {{built by}} the United States Navy between 1917 and 1919. She, along with 25 of her sisters, were {{constructed}} at Fore River Shipyard shipyards in Quincy, Massachusetts <b>using</b> <b>specifications</b> and detail designs drawn up by Bethlehem Steel.|$|R
50|$|Some {{implementations}} may <b>use</b> different <b>specifications.</b>|$|R
5|$|Blakely {{was one of}} 111 Wickes-class destroyers {{built by}} the United States Navy between 1917 and 1919. She, along with 20 of her sisters, were {{constructed}} at William Cramp and Sons shipyards in Philadelphia <b>using</b> <b>specifications</b> and detail designs drawn up by Bath Iron Works.|$|R
40|$|To {{overcome}} the inflexibility {{of the traditional}} CASE (Computer Aided Software Engineering) tools, meta-CASE tools, or CASE shells had been proposed. Instead of using a fixed, or built-in method for presenting a software specification, CASE shells <b>use</b> <b>specification</b> or development methods which are separately defined. Metaview is a CASE shell in which various software development methods can be defined using the EARA (Entity, Aggregate, Relationship, Attribute) model. The model {{is based on the}} Entity-Relationship data model, but incorporates such important extensions like specialization (subtyping), aggregation and a limited version of generalization. These advanced features are needed to adequately reflect the sophisticated nature of software development methods. This paper presents a formal definition of the model. Keywords CASE shell, meta-modeling, Entity-Relationship model, aggregation, software development method, software development environment, metasystem, Metaview system. C [...] ...|$|E
40|$|Abstract-User Software Engineering is a {{methodology}} for the speci-fication {{and implementation of}} interactive information systems. An early step in the methodology {{is the creation of}} a formal executable description of the user interaction with the system, based onaugmented state transition diagrams. This paper shows the derivation of the, USE transition diagrams based on perceived shortcomings of the "pure" state transition diagram approach. In this way, the features of the <b>USE</b> <b>specification</b> notation are gradually presented and illustrated. The paper shows both the graphical notation and the textual equivalent of the notation, and briefly describes the automated tools that support direct execution of the specification. This specification is easily encoded in a machine-processable form to create an executable form of the computer-human interaction. Index Terms-Executable specifications, interactive information sys-tems, rapid prototyping, software development methodology, transition diagrams, user interfaces, User Software Engineenng. I...|$|E
40|$|Numerous design {{environments for}} signal {{processing}} <b>use</b> <b>specification</b> languages with semantics {{closely related to}} Synchronous Dataflow (SDF), a restricted form of dataflow that has proven efficient for describing and compiling multirate signal processing algorithms. In SDF, as in other forms of dataflow, a program is specified {{as a set of}} computations and a set of data-dependencies between these computations. This allows a compiler freedom to explore different ways to sequence the computations, and to evaluate the associated tradeoffs, such as those involving throughput, code size, and buffering requirements. To guide the scheduling process, compilers may apply some form of "clustering", in which multiple computations are grouped together according to different criteria. In this paper, we develop clustering techniques to synthesize minimum code size implementations of SDF programs, and we extend these to incorporate existing heuristics for minimizing the amount memory required for buffe [...] ...|$|E
5|$|Chew {{was one of}} 111 Wickes-class destroyers {{built by}} the United States Navy between 1917 and 1919. She, along with seven of her sisters, were {{constructed}} at Union Iron Works shipyards in San Francisco, California <b>using</b> <b>specifications</b> and detail designs drawn up by Bethlehem Steel.|$|R
50|$|Blakely {{was one of}} 111 Wickes-class destroyers {{built by}} the United States Navy between 1917 and 1919. She, along with 20 of her sisters, were {{constructed}} at William Cramp and Sons shipyards in Philadelphia <b>using</b> <b>specifications</b> and detail designs drawn up by Bath Iron Works.|$|R
50|$|Chew {{was one of}} 111 Wickes-class destroyers {{built by}} the United States Navy between 1917 and 1919. She, along with seven of her sisters, were {{constructed}} at Union Iron Works shipyards in San Francisco, California <b>using</b> <b>specifications</b> and detail designs drawn up by Bethlehem Steel.|$|R
40|$|Formal {{languages}} {{become important}} tools since allows the {{complete understanding of}} the model and helps in its implementation. However only few simulation tools allow an automatic execution of a simulation model based in a formalization of the system. Specification and Description Language is a modern object oriented graphical formal language that allows the definition of distributed systems. It {{has focused on the}} modeling of reactive, state/event driven systems, and has been standardized by the International Telecommunications Union (ITU) in the Z. 100. Since it is a graphical formalism simplifies the understanding of the model. In this paper we show how we can <b>use</b> <b>Specification</b> and Description Language to represent a discrete simulation model. We propose a solution, implemented in SDLPS, regarding to how manage the time in Specification and Description Language. Also, we show how SDLPS infrastructure allows a distribute simulation of the models...|$|E
40|$|In {{this paper}} we explore how we can <b>use</b> <b>Specification</b> and Description Language, to {{represent}} simulation models that make an intensive use of geographical information, like environmental simulation models. The purpose is to perform a complete unambiguous, graphical and formal representation of a wildfire simulation model. Specification and Description Language is a modern object oriented language that al- lows the definition of distributed systems. It {{has focused on the}} modeling of reactive, state/event driven systems, and has been standardized by the International Telecommunications Union (ITU) in the Z. 100. Thanks to the graphical representation of the simulation model, the interaction between the experts that usually come from different areas is simplified. Also, due to the unambiguous and modular nature of the language, all the details of the model can be validated by personnel that do not necessarily are used with programming languages or simulation infrastructures. Peer ReviewedPostprint (published version...|$|E
40|$|The formal {{languages}} {{become important}} tools since they allow the {{complete understanding of}} the model and help in its implementation. However only a few simulation tools allow an automatic execution of a simulation model based in a formalization of the system. Specification and Description Language is a modern object oriented graphical formal language that allows the definition of distributed systems. It {{has focused on the}} modeling of reactive, state/event driven systems, and has been standardized by the International Telecommunications Union (ITU) in the Z. 100. Since it is a graphical formalism simplifies the understanding of the model. In this paper we show how we can <b>use</b> <b>Specification</b> and Description Language to represent a discrete simulation model. We propose a solution, implemented in SDLPS, regarding how to manage the time in Specification and Description Language. Also, we show how SDLPS infrastructure allows a distribute simulation of the models. Postprint (published version...|$|E
5000|$|A {{description}} is constructed <b>using</b> some <b>specification</b> (...) {{as given by}} the programmer and an identification or learning process for the parameters not completely specified by the <b>specification,</b> <b>using</b> a data set (...) [...]|$|R
5|$|Breese {{was one of}} 111 Wickes-class destroyers {{built by}} the United States Navy between 1917 and 1919. She, along with ten of her sisters, were {{constructed}} at Newport News Shipbuilding shipyards in Newport News, Virginia <b>using</b> <b>specifications</b> and detail designs drawn up by Bath Iron Works.|$|R
5|$|Leary {{was one of}} 111 Wickes-class destroyers {{built by}} the United States Navy between 1917 and 1919. She, along with nine of her sisters, were {{constructed}} at New York Shipbuilding Corporation shipyards in Camden, New Jersey <b>using</b> <b>specifications</b> and detail designs drawn up by Bethlehem Steel.|$|R
