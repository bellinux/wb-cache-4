5|10000|Public
2500|$|Theodor Holm [...] "Ted" [...] Nelson (born 1937) is an American {{sociologist}} and [...] philosopher. In 1960 {{he founded}} Project Xanadu {{with the goal}} of creating a computer network with a simple <b>user</b> <b>interface.</b> <b>Project</b> Xanadu was to be a worldwide electronic publishing system using hypertext linking that would have created a universal library. In 1963 he coined the terms [...] "hypertext" [...] and [...] "hypermedia". In 1974 he wrote and published two books in one, Computer Lib/Dream Machines, that has been hailed as [...] "the most important book in the history of new media." [...] Sadly, his grand ideas from the 1960s and 1970s never became completed projects.|$|E
50|$|GumTree {{was first}} {{started as a}} small {{graphical}} <b>user</b> <b>interface</b> <b>project</b> to fulfill the IT requirement for the Neutron Beam Instrument Project (NBIP) at ANSTO. Later in the year, the GumTree project has been approved to go open source for international collaboration.|$|E
40|$|Two {{implemented}} {{versions of}} a compound digraph algorithm using an object-oriented approach are shown {{for use in the}} field of automatic drawing of electrical circuit diagrams. One is a test version with minimal user interface, the other a full-fledged editor part of a graphical <b>user</b> <b>interface</b> <b>project</b> currently under development. Orthogonal drawing of edges and interactive implosion and explosion of compound vertices are key features of the application...|$|E
5000|$|... #Caption: An {{example of}} a vector-based window, found in a privately funded vector-based {{graphical}} <b>user</b> <b>interface</b> research <b>project.</b>|$|R
5000|$|Carnegie-Mellon University, Post-Graduate Courses in Software Design, Creation & Maintenance, <b>User</b> <b>Interfaces,</b> Software <b>Project</b> Management, Formal Methods, Human Factors, Operating Systems & Entrepreneurship.|$|R
50|$|On September 12-17, 2013, at the 2013 IBC Conference in Amsterdam, Nagra {{introduced}} a Ultra HD <b>User</b> <b>Interface</b> called <b>Project</b> Ultra based on HTML5, which works with OpenTV 5.|$|R
40|$|Includes bibliographical {{references}} (p. 51 - 52) Software {{project management}} requires the project manager (here after, PM) {{to be able}} to manage project scope and resources within a certain time (schedule) and budget (cost constraints). A software project requires interaction between multiple users within the software organization and this is possible through the use of different project management tools. Apart from the leadership qualities of the PM, a project management tool also contributes heavily {{to the success of the}} project. The lack of a common user interface in the existing web based project management tools leads to issues like time overhead, lack of instant resource allocation and lack of cross compatibility on multiple browsers. A survey was undertaken to account for the multiple user and common user interface software project management tools in the market. The need for a new project management tool stems from the observation that the existing common <b>user</b> <b>interface</b> <b>project</b> management tools are expensive and have limited features. Therefore it is hypothesized that the ability to create a new project management tool with a common user interface should contribute substantially to instant resource allocation by providing an efficient search capability mechanism to the PM. For this project, a new project management tool was designed, tested and evaluated for four scenarios (defect capture, defect management, project status management and security). It is concluded that the new project management tool is an efficient, low cost tool that is compatible over a wide range of browsers...|$|E
40|$|Usability work is {{problematic}} in {{open source software}} development on many levels. There is often no documentation or explicit research of user goals to drive design, no user experience vision to direct development, no usability testing, and typically no resources allocated for usability work. No usability practitioners are usually employed, and doing usability work is hard due to the community value system being focused on concrete results. An attitude of “code is cheap” leads to a tendency to skip user research, design and validation before implementation. However, developers in open source communities do get feedback from actual users. Also, software development work is iterative, as recommended in user-centered design, so there is some foundation to base usability efforts on. This thesis builds on {{a review of the}} observations made about usability in open source literature. It is followed by presentation of the Quiz <b>user</b> <b>interface</b> <b>project</b> in the Moodle virtual learning environment project. I introduced needs of a user group of the already existing Quiz module, which had not been considered previously, into the design of the user interface. I carried out interviews of users and stakeholders, and iteratively designed the user interface using prototypes, usability testing, and community feedback, in each phase of the project. The results of this project are integrated in Moodle 2. 0. As main results, I present observations of {{the current state of the}} usability engineering of the Moodle project, followed by proposals for directions to take in the project, as well as in open source projects in general. The aim of these proposals is to help make the usability body of knowledge an active and permanent source of insight in development, while keeping open source projects accessible and attractive to volunteer developers. I suggest ways to engage the community in usability work and propose increasing usage of low-fidelity usability testing in development. I then discuss how working circumstances of usability practitioners could be improved and propose various tactics to learn about users in an open source context. Asiasanat:Usability, software development, user experience, user-centered design, user research, open source software, community, virtual learning environmen...|$|E
50|$|The {{framework}} supports data binding, event handling, validation {{and includes}} a NetBeans plug-in for interactive creation of the <b>user</b> <b>interface.</b> The <b>project</b> also features some innovative features such as an implementation of the new synth Look and Feel using SVG plus an interactive layout manager using guidelines.|$|R
40|$|The {{goal of this}} work, is {{to design}} and create an <b>user</b> <b>interface</b> for <b>project</b> similar to Couchsurfing with special {{interest}} in musicians. A part of this work, is analysis of existing solutions with similar purpose, discussion of common issues with web <b>user</b> <b>interfaces,</b> blueprint of such product, selection comparison of available technologies and partial implementation of product itself, including feedback from testing sample of consumers...|$|R
50|$|Looking Glass {{is similar}} to the TaskGallery {{prototype}} from Microsoft Research and the open source Croquet project based on Squeak in terms of allowance for the user to manipulate applications (including existing 2D applications) in a 3D space. However, user interaction models of TaskGallery and Croquet are based on Virtual Reality-like experience where the user moves inside the 3D space to perform tasks, whereas Looking Glass retains the operational model of today's desktop (i.e. no walking around inside the 3D space) and uses 3D effects selectively where they are thought to be effective. Also, these three are similar as they are meant to work on adapted or enhanced versions of existing desktops rather than re-designing the entire graphical <b>user</b> <b>interface</b> from scratch, an approach taken by many Zooming <b>User</b> <b>Interface</b> <b>projects</b> such as the one created by Jef Raskin.|$|R
40|$|The Chimera <b>User</b> <b>Interface</b> (Chimui) <b>project</b> {{involved}} {{applying a}} task-centered design methodology {{to solve the}} problem of searching and visualizing the complex hypermedia structures of Chimera in a concise, crisp, and easily understandable way. As described on the Chimera homepage, Chimera is &quot;an infrastructure which provides open hypermedia services to client applications. &quot; This means that Chimera i...|$|R
50|$|UCBLogo {{has only}} a {{rudimentary}} graphical <b>user</b> <b>interface,</b> so several <b>projects</b> exist that provide a better interface. MSWLogo and its successor FMSLogo, for Microsoft Windows, are commonly used in schools in the United Kingdom and Australia.|$|R
50|$|Following {{the release}} of this information, the {{graphical}} <b>user</b> <b>interface</b> (GUI) <b>project</b> StaxRip released an update to their presets that incorporates the DivX Plus HD settings as default, which will transcode an array of video inputs to an MKV file with AAC audio and H.264 video within the DivX Plus HD profile. Another GUI project to implement a DivX Plus preset using x264 is RipBot264.|$|R
5000|$|... dotProject was {{originally}} developed by Will Ezell at dotmarketing, Inc. {{to be an}} open source replacement for Microsoft Project, using a very similar <b>user</b> <b>interface</b> but including <b>project</b> management functionality. Begun in 2000, the project was moved to Sourceforge in October 2001.|$|R
40|$|Over {{the last}} 10 years, the CMU <b>User</b> <b>Interface</b> Software <b>Project</b> has been {{investigating}} prototype-based programming in two large-scale systems: Garnet in Lisp and Amulet in C++. The goal of these systems is to provide {{an effective way to}} prototype and implement <b>user</b> <b>interface</b> software. In addition to using a prototype-instance object model, these systems also use constraints to tie objects' values together, and new models for input and output. The result is a significantly different style of programming than conventional class-based object systems, and even than other prototype-based systems...|$|R
50|$|TARGET 3001! {{collects}} several features {{under one}} <b>user</b> <b>interface</b> (MDI). All <b>project</b> information {{is stored in}} one file to avoid redundancy and version conflicts. Design begins {{with the creation of}} a schematic diagram and usually ends with the layout of a PCB (or chip).|$|R
40|$|Many large {{universities}} {{have the luxury}} of well-developed computer science and software engineering programs that include team projects at several levels, from group work in an introductory data structures or software engineering course through a multi-course team project for an external client. In this paper, we will discuss our computer systems management curriculum that exposes students to large software engineering (analysis, design, programming, and <b>user</b> <b>interface)</b> <b>projects</b> within the time and budget constraints of a typical small college program. In the curriculum, we have two courses where students do full group design and analysis projects, Database Design and Systems Analysis. Other courses emphasize specific aspects of the software engineering process that tend to be impossible to experience in a limitedterm project. Finally, we have a capstone course where students use all that they have learned to develop systems on their own. Students are responsible for all phases of the capstone project, from recruiting a client and specifying the project through delivery, documentation, and client evaluation. 1...|$|R
40|$|We present several gaze-enhanced {{scrolling}} techniques {{developed as}} part of continuing work in the GUIDe (Gaze-enhanced <b>User</b> <b>Interface</b> Design) <b>project.</b> This effort explores how gaze information can be effectively used as input that augments keyboard and mouse. The techniques presented below use gaze both as a primary input and as an augmented input {{in order to enhance}} scrolling and panning techniques. We also introduce the use of off-screen gaze-actuated buttons which can be used for document navigation and control...|$|R
50|$|Vue.js (commonly {{referred}} to as Vue; pronounced , like view) is an open-source progressive JavaScript framework for building <b>user</b> <b>interfaces.</b> Integration into <b>projects</b> that use other JavaScript libraries is made easy with Vue because {{it is designed to}} be incrementally adoptable. Vue can also function as a web application framework capable of powering advanced single-page applications.|$|R
40|$|Mobile radios have a manufacturer-provided manual <b>user</b> <b>interface</b> {{that allows}} {{changing}} radio channels using buttons. There {{is also a}} display on the faceplate of the radio {{that is used to}} visually verify channel selection. The objective {{of this study was to}} compare the influence of the manual <b>user</b> <b>interface</b> and the <b>Project</b> 54 speech <b>user</b> <b>interface</b> (SUI) on drivers’ performance while interacting with a mobile radio. In experiments conducted with a driving simulator we found that operating the manual <b>user</b> <b>interface</b> degraded driving performance significantly, while using the SUI did not...|$|R
50|$|The HCIL is an {{interdisciplinary}} lab with {{faculty and students}} from Information Studies, Computer Science, Education, English, Business, and Psychology. Current work includes new approaches to information visualization, interfaces for digital libraries, multimedia resources for learning communities, and zooming <b>user</b> <b>interface</b> (ZUIs). HCIL pioneered technology design methods with and for children, mobile and pen-based computing, and instruments for evaluating <b>user</b> <b>interface</b> technologies. Its <b>projects</b> are showcased at the annual Human-Computer Interaction Lab Symposium.|$|R
5000|$|The <b>user</b> <b>interface</b> had a <b>Project</b> {{window for}} organising clips into bins, a Sequence {{window with a}} {{multi-track}} timeline for arranging clips into a program using three-point editing, and Source and Program monitor windows. A finished program could either be exported as a QuickTime movie or written back to DV tape using the [...] "print to video" [...] command.|$|R
40|$|Anvil is a {{tool for}} the {{annotation}} of audiovisual material containing multimodal dialogue. Annotation takes place on freely definable, multiple layers (tracks) by inserting time-anchored elements that hold a number of typed attribute-value pairs. Higher-level elements (suprasegmental) consist of a sequence of elements. Attributes contain symbols or cross-level links to arbitrary other elements. Anvil is highly generic (usable with different annotation schemes), platform-independent, XMLbased and fitted with an intuitive graphical <b>user</b> <b>interface.</b> For <b>project</b> integration, Anvil offers the import of speech transcription and export of text and table data for further statistical processing...|$|R
40|$|The aim of {{this project}} is to perform the study of a driver for {{controlling}} computer monitor using VGA port. The driver is based on FPGA {{which is used to}} generate VGA signals. The main purpose of the project is to design a hardware core for gate array which can be used as part of some complex FPGA design to provide a comfortable <b>user</b> <b>interface.</b> The <b>project</b> describes {{the main part of the}} VGA driver – module for generating control signals and module for displaying text information that is sent from a PC via serial port interface...|$|R
40|$|A mobile application's <b>user</b> <b>interface</b> {{is one of}} {{the most}} basic things users expect to work well in a mobile application. Still, many {{applications}} today struggle with creating a good and <b>user</b> friendly <b>user</b> <b>interface.</b> In this <b>project</b> a system simulator was developed as part of a future application, and the mobile <b>user</b> <b>interface</b> of that application was prototyped. An evaluation of the designed prototypes was carried out which resulted in a few guidelines to creating a "good" <b>user</b> <b>interface.</b> Also, the possibility of developing a simulator for a research instrument without any background knowledge or expertise in the area was discussed and investigated...|$|R
50|$|Turbomilk — Russian {{graphic design}} company founded in Samara on December 1, 2002. Turbomilk {{is engaged in}} graphic design and <b>user</b> <b>interface</b> design. The founders of the company are {{freelance}} designers who decided on combining their creative efforts using the co-working model. Originally, the company became well-known as the name behind the blog about icons, <b>user</b> <b>interface</b> design and <b>project</b> management compiled by the employees of the company. Since 2008, Turbomilk is the organizer of 404fest — the conference of web developers from Russia and CIS countries.|$|R
40|$|The Web Evolution study [2] {{investigates the}} issues {{affecting}} the web <b>user</b> <b>interface</b> through understanding {{the evolution of}} the web. A Web robot [1] was used to capture data for the study. This re-port provides instructions for using the code, and for customising the code for future work. Human Centred Web 2 Web Evolution The Web Evolution project is investigating into the issues that cause the lag between the introduction of standards and recommendations and when they were adopted by the developers. We will focus on the relationship between these issues, especially those involving the web <b>user</b> <b>interface.</b> This <b>project</b> will identify trends, and provide us with graphs demonstrating how the web has been evolving over the past ten years. By understanding these evolutionary trends we can inform and predict web development in the future...|$|R
40|$|This paper makes a {{case for}} {{exploring}} the feasibility of utilizing the advanced graphics and sound systems of contemporary gaming engines to promote architecturally relevant work. Gaming engines, while developed largely for the PC entertainment industry, have vast potential for application in architecture. This paper will explore the depth of this potential and will outline work demonstrating the advantages and the limitations of this technology. The supporting research and observations examine the technology and reveal its potential usefulness as an instructional or depictive authoring tool. Game engines were selected that had appropriate graphical prowess, but were customizable as to allow the removal of game-specific features (to create a “professional” <b>user</b> <b>interface).</b> <b>Projects</b> were authored that expressed complex building details using the engine for visual depiction. The details, which included constructional components, structural assemblies, or simple design nuances, were modeled with 3 D geometry and realistically textured and lighted. The game engine allowed one user or many remote simultaneous users in the virtual environment to interactively explore the presentation in real time. Scripts were developed to encourage end-users to interactively disassemble or reassemble building components as desired. Audile and/or text-based information regarding the assembly sequence were provided by exploiting the game interface features. Furthermore, interactive object scaling was provided to facilitate analysis of component relationships...|$|R
40|$|The GeoSim Interface Library (GIL) is a small, {{easy to use}} set of {{functions}} for building a graphical <b>user</b> <b>interface.</b> It was originally designed to support the <b>user</b> <b>interface</b> needs of <b>Project</b> GeoSim, a computer-aided education project for introductory geography classes. The original design for GIL was driven {{by the need to}} develop easy to use software that was portable to a variety of computing environments. It was used by a team of programmers engaged in rapid prototyping and frequent change to their <b>user</b> <b>interfaces.</b> GIL is freely available via anonymous FTP, gopher or Mosaic (or any other World Wide Web client) from geosim. cs. vt. edu, url [URL]...|$|R
40|$|The {{impact of}} device {{independent}} authoring on software engineering manifests itself mainly at the middleware level. Until recently middleware platforms were targeted at vertical coverage of specific scenarios. Consumer devices with integrated Internet-access {{are becoming more}} popular and their diversity grows with their market penetration and with {{the extension of the}} mobile communication infrastructure. This requires software architectures that are capable of supporting horizontal coverage {{of a wide range of}} devices and scenarios. This paper presents the Multi <b>User</b> <b>Interface,</b> Single Application <b>project.</b> It provides a feasable approach for multiplatform support through the introduction of an adaptable and abstract interaction-oriented <b>user</b> <b>interface</b> language...|$|R
40|$|In this paper, the METAREF {{project is}} presented. It {{consists}} in an application that allows University {{students to read}} bibliographic references and comment on them. Metadata techniques are used to store the information that the students provide and {{the design of the}} application is based on the HTTP protocol. Thus, the application runs like a web service and any web browser can act as <b>user</b> <b>interface.</b> The <b>project</b> is also concerned about the students’ learning process. In this sense, the passive role that students take, relying only on their notes for passing their exams, is analysed, and how METAREF can help them, by encouraging them to take a more active role, consulting and commenting on the references the lecturers propose...|$|R
40|$|Almost every {{computer}} software system {{is bound to}} be reengineered for at least maintenance purposes at some point and hence reengineering is as important as any other phase in a system's lifecycle. It is important that both the original development method and the reengineering approach are chosen to minimise maintenance costs. Since users often discover that they want features in their system that they have seen in another system, reusability and understandability of the produced code are also important to minimise maintenance. In this report I investigate what reengineering methods have proven to be the best, concentrating on <b>user</b> <b>interface</b> reengineering for a simulation system. This means that reengineering strategies used will be those most suitable for simulation and <b>user</b> <b>interface</b> heavy <b>projects.</b> This means that both formal and informal methods have been reviewed as well as automatic and manual methods. This report will show that manual reengineering using an incremental devel [...] ...|$|R
40|$|During {{the last}} decade, Visuo-Haptic Augmented Reality (VHAR) systems have emerged that enable users {{to see and}} touch digital {{information}} that {{is embedded in the}} real world. They pose unique problems to developers, including the need for precise augmentations, accurate colocation of haptic devices, and efficient concurrent processing of multiple, realtime sensor inputs to achieve low latency. We think that this complexity {{is one of the main}} reasons, why VHAR technology has only been used in few <b>user</b> <b>interface</b> research <b>projects.</b> The proposed project's main objective is to pioneer the development of a widely applicable VHAR runtime environment, which meets the requirements of realtime, low latency operation with precise co-location, haptic interaction with deformable bodies, and realistic rendering, while reducing the overall cost and complexity for developers. A further objective is to evaluate the benefits of VHAR <b>user</b> <b>interfaces</b> with a focus on medical training applications, so that creators of future medical simulators or other haptic applications recognize the potential of VHAR...|$|R
40|$|Currently, we are {{involved}} in a number of projects that tackle the issues of dynamic <b>user</b> <b>interface</b> adaptation, adaptive software behaviour with focus on resource constrained environments, and the adaptation of multi-media based communication services towards the heterogeneous network infrastructures and device capabilities in beyond 3 G wireless networks. In the <b>user</b> <b>interface</b> adaptation <b>project,</b> we focused on the device independent representation and adaptation of web application UIs. The project was conducted together with SAP Global Research & Innovation. Based on the findings of our research, we have successfully developed the Dialog Description Language (DDL, [1]) that allows device independent authoring of web content based on the single source approach. It supports semantic adaptation through inline meta-information provided at authoring time. A modular adaptation engine applies semantic and syntactic transformations to DDL dialogs to generate device-specific dialog representations at runtime. The experience and knowledge we gained in this project also influenced the EU FP 5 CONSENSUS [2] project. Within this project a Rende...|$|R
40|$|This book is {{concerned}} with the development of human factorsinputs to software design. The aim is to create products whichmatch the requirements and characteristics of users and whichoffer usable <b>user</b> <b>interfaces.</b> The HUFIT <b>project</b> - Human Factorsin Information Technology - was carried out within the EuropeanStrategic Programme for Research and Development in InformationTechnology (ESPRIT) with the objective of enhancing the qualityof software design within the European Community. The variety ofactivities undertaken to achieve this goal are reflected in thisbook. It describes human factors kno...|$|R
