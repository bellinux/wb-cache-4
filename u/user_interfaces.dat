10000|10000|Public
5|$|Graphical <b>user</b> <b>interfaces</b> (GUIs) may be {{developed}} using Perl. For example, Perl/Tk and WxPerl {{are commonly used}} to enable user interaction with Perl scripts. Such interaction may be synchronous or asynchronous, using callbacks to update the GUI.|$|E
5|$|It is {{possible}} to run graphical <b>user</b> <b>interfaces</b> on older or low-end systems, but the installation of window managers instead of desktop environments is recommended, as desktop environments are more resource-intensive. Requirements for individual software vary widely and must be considered, {{with those of the}} base operating environment.|$|E
5|$|The data {{division}} is split into six sections which declare different items: the file section, for file records; the working-storage section, for static variables; the local-storage section, for automatic variables; the linkage section, for parameters {{and the return}} value; the report section and the screen section, for text-based <b>user</b> <b>interfaces.</b>|$|E
40|$|This {{bachelor}} {{thesis is}} focused on design and execution of <b>user</b> <b>interface</b> of mobile applications for the Windows Phone operating system. The main objective is to extend the MMSP methodology by the support of mobile applications' <b>user</b> <b>interface</b> design. Another objective is to compare <b>user</b> <b>interface</b> of the major mobile operating systems (Anroid and iOS) with Windows Phone, and thus to identify advantages of Windows Phone <b>user</b> <b>interface</b> for ordinary <b>users.</b> The thesis is divided as follows: the first part describes <b>user</b> <b>interface</b> of the major mobile operating systems and identifies advantages of the Windows Phone operating system for ordinary users by comparing it {{with the rest of}} the major operating systems. The thesis further deals with execution of the MMSP methodology. Firstly, the methodology is extended by the task of mobile application <b>user</b> <b>interface</b> design. This describes the principles of <b>user</b> <b>interface</b> design. Furthermore, the role of the mobile application <b>user</b> <b>interface</b> designer, who is responsible for the design of <b>user</b> <b>interface</b> is defined. The thesis describes the possibilities of Windows Phone <b>user</b> <b>interface</b> applications, so that they are comprehensible to the <b>user</b> <b>interface</b> designers. Moreover, the thesis evaluates the application support of <b>user</b> <b>interface</b> application creation for Windows Phone, in the last chapter. The thesis extends the MMSP methodology, in a way that it supports <b>user</b> <b>interface</b> design. The thesis also creates a comprehensive summary of Windows Phone <b>user</b> <b>interface</b> and its operating elements, which has not been available in Czech until now...|$|R
40|$|Part 2 : Late Breaking ResultsInternational audienceCurrent <b>user</b> <b>interface</b> {{modeling}} languages usually {{focus on}} modeling a single <b>user</b> <b>interface</b> {{and have a}} fixed set of <b>user</b> <b>interface</b> components; adding another <b>user</b> <b>interface</b> component requires {{an extension of the}} language. In this paper we present CASSIS, a concise language that supports creation of <b>user</b> <b>interface</b> components using models instead of language extensions. It also allows the specification of design-time and runtime <b>user</b> <b>interface</b> variations. The support for variations has been used to generate constraints for custom <b>user</b> <b>interface</b> components, to specify design patterns and design decisions. CASSIS has been used in several projects including a multi-disciplinary applied research project...|$|R
40|$|Abstract: An energy {{simulation}} tool {{is a tool}} {{to predict}} the energy consumption of a building. Today there are many energy simulation tools in the market. However, architects find that the existing energy simulation tools do not meet their needs. One thing that does not meet their need is the <b>user</b> <b>interface.</b> In relation to that, we carried out a <b>user</b> <b>interface</b> survey to know which <b>user</b> <b>interface</b> is preferred by architects. We found that architects prefer visual <b>user</b> <b>interface</b> (<b>user</b> <b>interface</b> that uses image) than textual <b>user</b> <b>interface</b> (<b>user</b> <b>interface</b> that merely uses text). In inputting value, they prefer to input it using drag-and-drop style rather than typing using keyboard. We also find that architects {{do not like to}} input too many values in the <b>user</b> <b>interface...</b>|$|R
5|$|As {{computers}} {{offered more}} advanced <b>user</b> <b>interfaces,</b> such as windows and point-and-click menus, many traditional roguelikes were modified to include support for having multiple windows. This was useful {{to not only}} show the character-based dungeon, but details on the character's inventory, the monster they were in battle with, and other status messages, in separate windows. Having access to multiple windows also allowed having menus to complete more complex commands.|$|E
5|$|Despite NeXT's limited {{commercial}} success, {{the company}} had a wide-ranging impact on the computer industry. Object-oriented programming and graphical <b>user</b> <b>interfaces</b> became more common after the 1988 release of the NeXTcube and NeXTSTEP, when other companies started to emulate NeXT's object-oriented system. Apple started the Taligent project in 1989, {{with the goal of}} building a NeXT-like operating system for the Macintosh, with collaboration from Hewlett-Packard and IBM.|$|E
5|$|Despite {{the lack}} of a {{graphical}} controller interface in the standard (non-server) Mac OS X distribution, it is possible to set up an Xgrid controller via the command line tools xgridctl and xgrid. Once the Xgrid controller daemon is running, administration of the grid with Apple's Xgrid Admin tool is possible. Some applications, such as VisualHub, provided Xgrid controller capability through their <b>user</b> <b>interfaces.</b>|$|E
40|$|This {{bachelor}} thesis {{deals with}} the problem of <b>user</b> <b>interface</b> design. The goal of this thesis is to introduce the concept of the <b>user</b> <b>interface,</b> its types and terms of <b>user</b> <b>interface</b> including defining basic needs of the user related to this interface. Furthermore, this thesis introduce to reader concept of Human Computer Interaction and presents the basic rules and procedures of creating the <b>user</b> <b>interface.</b> These rules and procedures are in practical part applied to the specific <b>user</b> <b>interface</b> design of web application for benchmarking comparison of particular regions tourism strategies. Final result of this bachelor thesis is specific tested <b>user</b> <b>interface</b> on which bases are submitted final recommendations for creating ideal <b>user</b> <b>interface</b> for this application...|$|R
40|$|<b>User</b> <b>interface</b> {{modeling}} {{is a well}} accepted {{approach to}} handle increasing <b>user</b> <b>interface</b> complexity. The approach {{presented in this paper}} utilizes <b>user</b> <b>interface</b> models at runtime to provide a basis for <b>user</b> <b>interface</b> distribution and synchronization. Task and domain model synchronize workflow and dynamic content across devices and modalities. A cooking assistant serves as example application to demonstrate multimodality and distribution. Additionally a debugger allows the inspection of the underlying <b>user</b> <b>interface</b> models at runtime...|$|R
40|$|The {{notion of}} {{interactive}} multi-media systems is introduced. A {{brief review of}} <b>user</b> <b>interface</b> management systems is given and the ISA Dialog Manager with its main features is presented. Possible architectures for the extension of <b>user</b> <b>interface</b> management systems towards multimedia <b>user</b> <b>interface</b> management systems are discussed. The current implementation status of the Multimedia Builder, {{an extension of the}} ISA Dialog Manager and its future directions are outlined. The Multex system — a multimedia <b>user</b> <b>interface</b> management system based on the DIAMANT <b>user</b> <b>interface</b> management system is discusses as example of a multi-modal <b>user</b> <b>interface</b> management system...|$|R
5|$|Developed by Liverpudlian Sony Studio Liverpool (formerly {{known as}} Psygnosis), {{production}} of Wipeout Pure started in August 2003 and lasted until early 2005. Throughout development, the team created entirely new <b>user</b> <b>interfaces</b> and other algorithms which sped up {{the development process}} {{in time for the}} PlayStation Portable's launch in March 2005. The game received positive reviews from critics upon release. Reviewers unanimously praised the graphics, track designs and general aesthetics; however, some noticed occasional framerate fluctuations.|$|E
5|$|Within a {{few years}} all of Delrina's major market focuses—fax and form software—would be {{overtaken}} or superseded by email, e-commerce and the Internet. Daily planning software remains a niche market, and the immersive 3D environment used for creating multimedia presentations has (so far) fallen by the wayside in favour of more traditional <b>user</b> <b>interfaces.</b> Symantec ended support for its final WinFax PRO product in June 2006.|$|E
5|$|CCSR at the University of Surrey is the UK's {{largest and}} most {{well-known}} academic research centre in Mobile and Satellite Communication Systems and historically it has a unique research approach on both satellite as well as terrestrial mobile communication systems. The research activities within the group encompass all levels of communication systems, from antennas & propagation, air interfaces, PHY, MAC, networking layer up to the service support platforms and distributed applications and <b>user</b> <b>interfaces.</b> It is a major participant in European Union Information Science and Technology (IST) projects.|$|E
5000|$|... #Subtitle level 3: 1985: SAA <b>User</b> <b>Interface</b> or Text-Based <b>User</b> <b>Interface</b> ...|$|R
40|$|The Rational Unified Process (RUP) is a {{use case}} driven {{iterative}} software engineering process <b>User</b> <b>Interface</b> design within the RUP involves <b>user</b> <b>interface</b> modelling and <b>user</b> <b>interface</b> prototyping. This paper describes two support artefacts- extended tabular use cases and UI element clusters- which provide {{a bridge between}} these two activities. They provide support for 'flow of events' storyboarding, the clustering of <b>user</b> <b>interface</b> elements and identification of UML boundary classes, and the initial sketching of <b>user</b> <b>interface</b> prototypes...|$|R
40|$|An easy-to -use <b>user</b> <b>interface</b> was {{implemented}} {{in a highly}} automated regression analysis tool. The <b>user</b> <b>interface</b> was developed from the start to run on computers that use the Windows, Macintosh, Linux, or UNIX operating system. Many <b>user</b> <b>interface</b> features were specifically designed such that a novice or inexperienced user can apply the regression analysis tool with confidence. Therefore, the <b>user</b> <b>interface</b> s design minimizes interactive input from the user. In addition, reasonable default combinations are assigned to those analysis settings that influence {{the outcome of the}} regression analysis. These default combinations will lead to a successful regression analysis result for most experimental data sets. The <b>user</b> <b>interface</b> comes in two versions. The text <b>user</b> <b>interface</b> version is used for the ongoing development of the regression analysis tool. The official release of the regression analysis tool, on the other hand, has a graphical <b>user</b> <b>interface</b> that is more efficient to use. This graphical <b>user</b> <b>interface</b> displays all input file names, output file names, and analysis settings for a specific software application mode on a single screen which makes it easier to generate reliable analysis results and to perform input parameter studies. An object-oriented approach was used {{for the development of the}} graphical <b>user</b> <b>interface.</b> This choice keeps future software maintenance costs to a reasonable limit. Examples of both the text <b>user</b> <b>interface</b> and graphical <b>user</b> <b>interface</b> are discussed in order to illustrate the <b>user</b> <b>interface</b> s overall design approach...|$|R
5|$|Douglas Carl Engelbart (January 30, 1925– July 2, 2013) was an American {{engineer}} and inventor, {{and an early}} computer and Internet pioneer. He {{is best known for}} his work on founding the field of human–computer interaction, particularly while at his Augmentation Research Center Lab in SRI International, which resulted in creation of the computer mouse, and the development of hypertext, networked computers, and precursors to graphical <b>user</b> <b>interfaces.</b> These were demonstrated at The Mother of All Demos in 1968. Engelbart's Law, the observation that the intrinsic rate of human performance is exponential, is named after him.|$|E
5|$|To promote {{comfortable}} and accurate shooting from {{a standing position}} match air pistols must have fast lock times, shoot practically recoilless and vibration free and exhibit minimal movement and balance shifts during discharge. The pistol must {{also be able to}} be tailored by adjustable <b>user</b> <b>interfaces</b> and various accessories to individual shooters personal preferences. Combined with appropriate match pellets the pistol has to produce a consistent 10 ring performance, so a non maximal result during the initial phase {{can be attributed to the}} participant.|$|E
5|$|When Rovio {{began writing}} new {{versions}} of the game for other devices, new issues came to light. As the team began working on a version for Android systems, they observed {{the large number of}} configurations of device types and {{versions of the}} Android software. The number of combinations of software version, processor speed and even <b>user</b> <b>interfaces</b> was significantly larger than that for the iOS version. Ultimately, the team settled on a minimum set of requirements, even though that left nearly 30 types of Android phones unable to run the game, including some newly released phones. It was released on October 15, 2010. One month after the initial release on Android, Rovio Mobile began designing a lite version of the game for these other devices.|$|E
50|$|DASL {{is unique}} among modern {{application}} programming languages {{in its ability}} to generate a modern graphic <b>user</b> <b>interface</b> for an application without requiring the programmer to define the <b>user</b> <b>interface</b> explicitly. Using simple annotations, the programmer can modify the <b>user</b> <b>interface</b> that is produced by DASL. Using code generator plugins, the programmer can extend DASL to generate a specific desired <b>user</b> <b>interface.</b>|$|R
40|$|The final <b>user</b> <b>interface</b> of an {{information}} {{system could be}} reverse engineered according to a Model-Driven Engineering perspective to multiple levels of abstraction, either independently of each other or simultaneously depending on the designer’s goals: concrete <b>user</b> <b>interface</b> (which is independent of the <b>user</b> <b>interface</b> toolkit), abstract <b>user</b> <b>interface</b> (which is independent of any interaction modality), and “task and concepts ” (which is independent of any particular implementation). To support the <b>user</b> <b>interface</b> reverse engineering from the code level to any model level, a set of derivation rules have been implemented in ReversiXML. To support the <b>user</b> <b>interface</b> reverse engineering from any model to any other level, graph grammars have been implemented in TransformiXML. A graph grammar consists of graph transformation rules, called productions, that accept as input a graph representation of the <b>user</b> <b>interface</b> to be reengineered, apply the transformation, and obtain a result that can be further exploited to re-create a new <b>user</b> <b>interface.</b> 1...|$|R
5000|$|Principles of <b>user</b> <b>interface</b> design: {{these are}} seven {{principles}} of <b>user</b> <b>interface</b> design {{that may be}} considered {{at any time during}} the design of a <b>user</b> <b>interface</b> in any order: tolerance, simplicity, visibility, affordance, consistency, structure and feedback.|$|R
5|$|In 2010, the Kinect was {{released}} by Microsoft as a 3D scanner/webcam hybrid peripheral device which provides full-body detection of Xbox 360 players and hands-free control of the <b>user</b> <b>interfaces</b> of video games and other software on the console. This was later modified by Oliver Kreylos of University of California, Davis {{in a series of}} YouTube videos which showed him combining the Kinect with a PC-based virtual camera. Because the Kinect is capable of detecting a full range of depth (through computer stereo vision and Structured light) within a captured scene, Kreylos demonstrated the capacity of the Kinect and the virtual camera to allow free-viewpoint navigation of the range of depth, although the camera could only allow a video capture of the scene as shown {{to the front of the}} Kinect, resulting in fields of black, empty space where the camera was unable to capture video within the field of depth. Later, Kreylos demonstrated a further elaboration on the modification by combining the video streams of two Kinects in order to further enhance the video capture within the view of the virtual camera. Kreylos' developments using the Kinect were covered among the works of others in the Kinect hacking and homebrew community in a New York Times article.|$|E
5|$|Marco Pesenti Gritti, the {{initiator}} of Galeon, {{originally developed}} Epiphany in 2002 as a fork of Galeon. The fork occurred {{because of the}} divergent aims of Gritti {{and the rest of}} Galeon development team about new features. While Gritti regarded Galeon's monolithic design and the number of user-configurable features as factors limiting Galeon's maintainability and user base expansion, the rest of the Galeon developers wanted to see more features added. At the same time the GNOME project created the GNOME human interface guidelines, which promoted simplification of <b>user</b> <b>interfaces.</b> As Galeon was oriented towards power users, most developers saw the implementation of those guidelines as unacceptable. As a result, Gritti created a new browser based on Galeon's codebase, with most of the non-mission-critical features removed. He intended Epiphany to comply fully with the GNOME human interface guidelines, with a very simple user-interface. As such, Epiphany does not have its own theme settings and uses GNOME's settings, which are specified in the GNOME Control Center.|$|E
25|$|The {{ability to}} track a person's {{movements}} and determine what gestures {{they may be}} performing can be achieved through various tools. The kinetic <b>user</b> <b>interfaces</b> (KUIs) are an emerging type of <b>user</b> <b>interfaces</b> that allow users to interact with computing devices through the motion of objects and bodies. Examples of KUIs include tangible <b>user</b> <b>interfaces</b> and motion-aware games such as Wii and Microsoft's Kinect,and other interactive projects.|$|E
5000|$|Graphical <b>user</b> <b>interface</b> testing. A testing {{framework}} that generates <b>user</b> <b>interface</b> {{events such as}} keystrokes and mouse clicks, and observes the changes that result in the <b>user</b> <b>interface,</b> to validate that the observable behavior {{of the program is}} correct.|$|R
40|$|Abstract. <b>User</b> <b>Interface</b> Patterns are not {{sufficiently}} explored at the Conceptual phase. Work in area of <b>User</b> <b>Interface</b> patterns is predominantly done at design phase {{but not enough}} work is dedicated to analysis patterns. This paper shows different examples of abstract <b>user</b> <b>interface</b> patterns and explores the impact of such patterns in the software lifecycle. Conceptual <b>User</b> <b>Interface</b> Patterns {{can be used for}} direct specification of device independent interfaces that can be refined using UI design patterns, or moreover, used to automatically obtain prototypes of the <b>user</b> <b>interface</b> specified in several devices. ...|$|R
40|$|Because of {{drastically}} {{increasing use of}} touchscreen devices {{the need}} for development of their <b>user</b> <b>interface</b> has increased accordingly. Graphical <b>user</b> <b>interface</b> is the main means of communication with the device. Hence, its development has become absolutely vital. The main goal of such development is simplicity, which enables less adept users to use these screens. The main topic of this thesis {{is the development of}} graphical <b>user</b> <b>interface</b> from <b>user</b> demands to finished <b>user</b> <b>interface.</b> Emphasis is put on testing mockups and the live version of the <b>user</b> <b>interface</b> with final <b>users.</b> All processes are documented with examples from practice. The approach for the development of an <b>user</b> <b>interface,</b> which I described in this thesis, has been used {{in the development of a}} graphical <b>user</b> <b>interface</b> for touch screens for an application, that is in use in medical institutions...|$|R
25|$|Graphical <b>user</b> <b>interfaces</b> {{exist for}} sudo, notably kdesudo, and gksudo. Other <b>user</b> <b>interfaces</b> are not {{directly}} built on sudo, but provide similar temporary privilege elevation for administrative purposes, such as User Account Control in Microsoft Windows and Mac OS X Authorization Services.|$|E
25|$|Gesture {{recognition}} {{can be seen}} as a way {{for computers}} to begin to understand human body language, thus building a richer bridge between machines and humans than primitive text <b>user</b> <b>interfaces</b> or even GUIs (graphical <b>user</b> <b>interfaces),</b> which still limit the majority of input to keyboard and mouse.|$|E
25|$|Feedback is also {{a useful}} design {{principle}} for designing <b>user</b> <b>interfaces.</b>|$|E
40|$|<b>User</b> <b>interface</b> {{specification}} {{languages are}} concerned with describing the requirements for the structure of dialogue between an interactive system and its users. The central objective for a <b>user</b> <b>interface</b> specification language is to provide the ability to construct and maintain specifications which establish {{a wide range of}} perspectives and facilitate analysis. This paper presents a number of characteristics possessed by various <b>user</b> <b>interface</b> specification languages in order to achieve this aim. 1 Introduction <b>User</b> <b>interface</b> specification languages {{are concerned with}} describing the requirements for the structure of dialogue between an interactive system and its users. In addition, a <b>user</b> <b>interface</b> specification enables developers to verify that any required constraints are maintained, and to analyse various aspects related to the usability of a <b>user</b> <b>interface.</b> A significant number of approaches to <b>user</b> <b>interface</b> specification have accumulated over the past ten years. These approaches [...] ...|$|R
5000|$|<b>User</b> <b>interface</b> - Eclipse based <b>user</b> <b>interface</b> {{that lets}} the user take a {{snapshot}} and analyze it ...|$|R
40|$|Full screen captions/subtitles Audio {{description}} (video description) Keyboard accessible <b>user</b> <b>interface</b> Screen reader accessible <b>user</b> <b>interface</b> Screen magnifier accessible <b>user</b> <b>interface</b> Access {{to content}} for users who are deaf-blind And possibly… Ability to pause video when loaded Shortcuts to important functions Visual appea...|$|R
