24|133|Public
50|$|Files are {{accessed}} by applications in Windows by using file handles. These file handles can be explored with the Process Explorer utility. This utility {{can also be}} used to force-close handles without needing to terminate the application holding them. This can cause an undefined behavior, since the program will receive an <b>unexpected</b> <b>error</b> when using the force-closed handle and may even operate on an unexpected file since the handle number may be recycled.|$|E
50|$|Business {{applications}} {{can fail}} when an <b>unexpected</b> <b>error</b> occurs. This error could occur {{due to a}} data error (an unexpected data input or a wrong data input), an environment error (an in frastructure related error), a programming error, a human error or a work flow error. When a business application fails one needs to fix the business application error {{as soon as possible}} so that the business users can resume their work. This work of resolving business application errors is known as business application support.|$|E
5000|$|Built upon {{previous}} versions, with updated {{statistics for}} current players, ICC 13 also included new features: [...] "All-Time Greats" [...] in which players can assemble teams of great cricketers from different eras; [...] "Classic England vs. Australia" [...] in which players can replay {{one of five}} classic test matches from the England / Australia rivalry; international on-line, enabling players to engage in international Test, ODI and T20 matches. Various graphical and interface upgrades were also introduced, {{as well as the}} ability to pick opposition teams in custom series. It was released on 29 June 2013, a day later than planned following the discovery of an <b>unexpected</b> <b>error.</b>|$|E
5000|$|It should handle <b>unexpected</b> <b>errors</b> and {{continue}} processing {{and maintain the}} appropriate audit logs ...|$|R
5000|$|Error-trapping, {{allowing}} BASIC {{programs to}} handle <b>unexpected</b> <b>errors</b> {{by means of}} a subroutine written in BASIC ...|$|R
40|$|Computer algebra {{systems are}} a great help for {{mathematical}} research but sometimes <b>unexpected</b> <b>errors</b> in the software can also badly affect it. As an example, we show how we have detected an error of Mathematica computing determinants of matrices of integer numbers: not only it computes the determinants wrongly, but also it produces different results if one evaluates the same determinant twice. Comment: 4 page...|$|R
50|$|Applying patches to {{firmware}} poses special challenges, as it often involves the provisioning of totally new firmware images, rather than applying only the differences {{from the previous}} version. The patch usually consists of a firmware image in form of binary data, together with a supplier-provided special program that replaces the previous version with the new version; a motherboard BIOS update {{is an example of}} a common firmware patch. Any <b>unexpected</b> <b>error</b> or interruption during the update, such as a power outage, may render the motherboard unusable. It is possible for motherboard manufacturers to put safeguards in place to prevent serious damage; for example, the update procedure could make and keep a backup of the firmware to use in case it determines that the primary copy is corrupt (usually through the use of a checksum, such as a CRC).|$|E
5000|$|In late 2008 Yankovic {{started to}} explore the digital {{distribution}} of his songs. On October 7, 2008, Yankovic planned to release a parody of [...] "Whatever You Like" [...] from artist T.I., which Yankovic said he {{had come up with}} two weeks before. Yankovic said that the benefit of digital distribution is that [...] "I do not have to wait around while my songs get old and dated—I can get them out on the Internet almost immediately." [...] On October 7, 2008, the planned release date, an <b>unexpected</b> <b>error</b> left [...] "Whatever You Like" [...] out of the iTunes new release list. Jon [...] "Bermuda" [...] Schwartz, Yankovic's drummer and webmaster, posted this message: [...] "Apparently there was a glitch at iTunes last night and Al's new single—'Whatever You Like'—did not debut {{with the rest of the}} new releases. We're being told that they're working on the problem and (hopefully!!) it will be up later today." [...] The song then became available.|$|E
40|$|Two level system {{checkout}} {{in which}} first level satisfies continuous monitoring requirements and second level provides fault isolation to satisfy maintenance requirements, provides self-checking capability for monitoring system and enables recovery from <b>unexpected</b> <b>error</b> or failure interruptions. System must perform operational duties of navigation, control, and experimentation...|$|E
5000|$|One {{issue is}} how {{exceptions}} behave when they propagate outside of transactions. In [...] "Composable Memory Transactions", the authors decided that this should abort the transaction, since exceptions normally indicate <b>unexpected</b> <b>errors</b> in Concurrent Haskell, but that the exception could retain information allocated by and read during the transaction for diagnostic purposes. They stress that other design decisions may be reasonable in other settings.|$|R
40|$|The human {{decision-making}} task {{is modeled}} with fuzzy sets and the Kalman filter updates {{to the state}} vector are weighted using fuzzy functions. Results of the study show {{that the use of}} fuzzy set models gives results comparable to those requiring human assistance, e. g. lock on to false targets, and better results when the problem is caused by noise and/or bias, or <b>unexpected</b> <b>errors</b> in the state vector at initial acquisition...|$|R
40|$|Practical Maya Programming with Python"" is a {{practical}} tutorial packed with plenty of examples and sample projects which guides you through building reusable, independent modules and handling <b>unexpected</b> <b>errors.</b> If you are a developer looking to build a powerful system using Python and Maya's capabilities, then this book is for you. Practical Maya Programming with Python is perfect for intermediate users with basic experience in Python and Maya who want to better their knowledge and skills...|$|R
40|$|Well {{designed}} watchdog timers fire {{off every}} day, quietly saving systems and lives without the esteem offered to human heroes. ”- Jack Ganssle. No piece of software, save the very smallest, is free from bugs. The application could {{get stuck in}} endless loops. <b>Unexpected</b> <b>error</b> codes could cause seriou...|$|E
40|$|Accessing {{data from}} {{databases}} such as Oracle and SQL Server {{has become an}} increasingly common requirement for SAS® programmers. SAS offers powerful and flexible capabilities for accessing such data, and many aspects of this process are quite straightforward, especially when LIBNAME engines are used. However, {{there are a number}} of traps that lurk for the unwary that can potentially produce <b>unexpected</b> <b>error</b> messages, incorrect output, or frantic calls from your normally-friendly Database Administrator. This paper highlights some of the most common traps and explains how to avoid them...|$|E
30|$|The {{simulation}} model was developed using the block-cantered geometry option, {{which has the}} shape of flat-lying “sugar-cubes” arranged in a three-dimensional volume comprising one geological layer with ten columns of cells in the lateral direction and one column of cells in the transverse direction (i.e., 10 [*]×[*] 1 [*]×[*] 1). A rectangular core block is presented in Fig.  4. The main reason for using this geometry is because block-cantered grids tend to be geometrically simpler, thus helping to avoid any <b>unexpected</b> <b>error</b> and confusion when designing the ECLIPSE simulation file. However, this geometry is still considered highly reliable in representing real field conditions while providing precise results in reservoir simulations.|$|E
5000|$|The name [...] "Paamayim Nekudotayim" [...] was {{introduced}} in the Israeli-developed Zend Engine 0.5 used in PHP 3. Although it has been confusing too many developers who do not speak Hebrew, it is still being used in PHP 7, as in this sample error message:$ php -r ::Parse error: syntax <b>error,</b> <b>unexpected</b> T_PAAMAYIM_NEKUDOTAYIMA similar <b>error</b> can also occur where no scope resolution operator is present. For example, attempting to check whether a constant is empty (...) triggers this error:$ php -r 'define("foo", [...] "bar"); if (empty(foo)) echo [...] "empty";'Parse error: syntax <b>error,</b> <b>unexpected</b> ')', expecting T_PAAMAYIM_NEKUDOTAYIMAs of PHP 5.4, error messages concerning the scope resolution operator still include this name, but have clarified its meaning somewhat:$ php -r ::Parse error: syntax <b>error,</b> <b>unexpected</b> '::' (T_PAAMAYIM_NEKUDOTAYIM)There are other less obvious ways to trigger the error, for example by attempting to use the following invalid PHP expression:$ php -r static const $a=1Parse error: syntax <b>error,</b> <b>unexpected</b> end of file, expecting :: (T_PAAMAYIM_NEKUDOTAYIM) ...|$|R
3000|$|... in DEP phase automatically. In other words, the <b>unexpected</b> {{estimation}} <b>error</b> {{will not}} propagate because the calibration of the estimator will be reset {{when the train}} stops at the next station.|$|R
5000|$|Tales of the <b>Unexpected</b> episode Clerical <b>Error</b> (1983) - as Paul Standing ...|$|R
30|$|Although Web {{services}} {{are increasingly being}} used in complex business-critical systems, assessing the robustness of services implementations (and comparing the robustness of alternative solutions) is still a difficult task. This paper proposes a practical approach to test the robustness of Web services code. Our approach {{is based on a}} set of robustness tests (including malicious inputs) that allows discovering programming and design problems. Robustness is characterized according to the following failure modes: correct (behavior is robust), crash (abnormal termination of the execution), and error (an <b>unexpected</b> <b>error</b> code is returned by the server). These failure modes are complemented with a detailed classification of the observed service behavior that may help understanding the source of the failures (i.e., defects).|$|E
40|$|The {{successful}} {{delivery of}} the Mars Exploration Rover (MER) landers to well with in the boundaries of their surface target areas in January of 2004 {{was the culmination of}} years of orbit determination analysis. The process began with a careful consideration of the filter parameters used for pre-launch covariance studies, and continued with the refinement of the filter after launch based on operational experience. At the same time, tools were developed to run a plethora of variations around the nominal filter and anlyze the results in ways that had never been previously attempted for an interplanetary mission. In addition to the achieved sub-kilometer Mars B plane orbit determination knowledge, the filter strategy and process responded to <b>unexpected</b> <b>error</b> sources by both detecting them and proving robust. All these facets of the MER orbit determination filter strategy are described in this paper...|$|E
30|$|Source {{localization}} techniques may aid {{in identifying}} presumed locations of component generation, {{but were not}} performed {{in the current study}}. While the FN has considerable support for ACC generation, the P 3 waveform generated in the current study might have a different generator and reflect a different cortical process. While the current study was originally designed to stabilize within-task affect variation, affective measurements did not occur throughout the task. Use of pre-post affect measurement and periodic visual analog scales allowed for some information concerning overall affect variation; no affect responses were assessed on a trial-by-trial basis. Thus, participants may have experienced within task affect responsivity to consistent wins and unexpected losses, which stabilized prior to the visual analog assessment. Similarly, the current paradigm revealed some overall reduction in positive affect that although supports the lack of positive affect induced by the task, also suggests that our results include <b>unexpected</b> <b>error</b> from the affect variation.|$|E
30|$|To {{estimate}} the wall parameters, some {{methods have been}} developed {{and they can be}} roughly classified into three main categories. The first one using multiple measurements with diverse array structures or at different standoff distances is complicated and hard to implement in reality [10, 11]. The second one refers to the autofocusing techniques, which use iterative optimization schemes and thus are computationally expensive and time consuming [12, 13]. The last one searching the parameters by maximizing the correlation between the simulated radar return derived from a pre-established parametric model, and the real radar return may have <b>unexpected</b> <b>errors</b> since the model may not exactly coincide with the actual environment [14].|$|R
40|$|Model-based {{development}} is a software development method in which models are created before source code is written. Although the method is effective, we have to modify models when we face evolution such as change of platforms. These modifications crosscut over many places in the models, and tend to cause <b>unexpected</b> <b>errors.</b> In order to tackle this problem, we propose a method for model evolution using model transformations based on aspect orientation, a mechanism that modularizes crosscutting concerns. A modeler can extend model transformation rules by defining new aspects {{in the process of}} modeling. In this paper, we demonstrate the effectiveness of aspect orientation in terms of model evolution...|$|R
40|$|Abstract: The {{multimodal}} featuring fusion {{for natural}} human-computer interaction involves complex intelligent architectures facing <b>unexpected</b> <b>errors</b> and mistakes made by users. These architectures should react to events that occur simultaneously with eventual redundancy from different input media. In this paper, intelligent agent based generic architectures for multimedia multimodal dialog protocols are proposed. Global agents are decomposed into their relevant components. Each element is modeled separately using timed Colored Petri networks. The elementary models are then linked together {{to obtain the}} full architecture. Hence, maintainability, understandability and the modification of the architecture are facilitated. For validation purpose, the proposed multi-agent architectures are applied on a practical example...|$|R
30|$|The {{analysis}} {{starts with}} the identification of a SOAP envelope (1) in the service response (i.e., we verify if the response follows the general format of the SOAP protocol). When not present (e.g., a plain HTTP reply is received instead) it may indicate {{that there is some}} kind of problem (e.g., a server incorrectly configured) that is preventing the Web service to process the SOAP request, but, as a solid conclusion cannot be drawn, we discard the response from the analysis. The next step is to verify if a SOAP Fault (which holds errors and status information) is present (2). If not, another type of message indicating an error (3) may be present (e.g., an application specific error message). If it is a regular response it is marked as Correct. On the other hand, if it is an error message that indicates an <b>unexpected</b> <b>error</b> (4) (e.g., database error when a database-related fault has been injected) the response is marked as an Error. If the error is expectable, the response is marked as Correct.|$|E
40|$|In {{message passing}} programs, once a process terminates with an <b>unexpected</b> <b>error,</b> the {{terminated}} process can propagate the error {{to the rest}} of processes through communication dependencies, resulting in a program failure. Therefore, to locate faults, developers must identify the group of processes involved in the original error and faulty processes that activate faults. This paper presents a novel debugging tool, named MPI-PreDebugger (MPI-PD), for localizing faulty processes in message passing programs. MPI-PD automatically distinguishes the original and the propagated errors by checking communication errors during program execution. If MPI-PD observes any communication errors, it backtraces communication dependencies and points out potential faulty processes in a timeline view. We also introduce three case studies, in which MPI-PD has been shown to play the key role in their debugging. From these studies, we believe that MPI-PD helps developers to locate faults and allows them to concentrate in correcting their programs. Comment: In M. Ronsse, K. De Bosschere (eds), proceedings of the Fifth International Workshop on Automated Debugging (AADEBUG 2003), September 2003, Ghent. cs. SE/ 030902...|$|E
40|$|Software {{errors are}} {{frequently}} {{responsible for the}} limited availability of Internet Services, loss of data, and many security compromises. Self-healing using rescue points (RPs) is a mechanism {{that can be used}} to recover software from unforeseen errors until a more permanent remedy, like a patch or update, is available. We present REASSURE, a self-contained mechanism for recovering from such errors using RPs. Essentially, RPs are existing code locations that handle certain anticipated errors in the target application, usually by returning an error code. REASSURE enables the use of these locations to also handle unexpected faults. This is achieved by rolling back execution to a RP when a fault occurs, returning a valid error code, and enabling the application to gracefully handle the <b>unexpected</b> <b>error</b> itself. REASSURE can be applied on already running applications, while disabling and removing it is equally facile. We tested REASSURE with various applications, including the MySQL and Apache servers, and show that it allows them to successfully recover from errors, while incurring moderate overhead between 1 % and 115 %. We also show that even under very adverse conditions, like their continuous bombardment with errors, REASSURE protected applications remain operational...|$|E
40|$|Abstract—Sliding-mode {{observers}} (SMOs) offer {{a promising}} solution for sensorless control of interior permanent magnet synchronous machines (IPMSMs) {{due to their}} excellent robustness to system structure and parameter uncertainty. However, in practical applications, it is challenging for an SMO to achieve a perfect estimation for the back electromagnetic force (EMF) using a finite or relatively lower sampling frequency, especially for high-speed applications. Phase shift, magnitude variation, and heavy noise in the estimated back EMF will cause <b>unexpected</b> <b>errors</b> in rotor position extraction. Thus, advanced rotor position extraction methods are needed to obtain position information from the estimated back EMF. This paper proposes a novel estimated speed feedback algorithm to work togethe...|$|R
40|$|This paper {{focuses on}} a survey of secure {{firmware}} update in the Internet of Things, design and description of safe and secure bootloader implementation on RFID UHF reader, encryption with AES-CCM and versioning with use of external backup flash memory device. In the case of problems with HW compatibility or other <b>unexpected</b> <b>errors</b> with new FW version, {{it is possible to}} downgrade to previous FW image, including the factory image. Authentication is provided by the UHF RFID service tag used to extract unique initialization vector of the encryption algorithm for each update session. The results show slower update speed with this new upgrade method of approximately 27...|$|R
5000|$|... <b>unexpected</b> {{termination}} or <b>errors</b> in a plug-in application {{will not}} be detrimental to the platform; ...|$|R
40|$|Automated {{assembly}} systems often {{stop their}} operation {{due to the}} unexpected failures occurred during their assembly process. Since these large-scale systems are composed of many parameters, it is dif®cult to anticipate all possible types of errors with their likelihood of occurrence. Several systems were developed in the literature, focussing on on-line diagnosing and recovery of the assembly process in an intelligent manner based on the predicted error scenarios. However, these systems do not cover all of the possible errors and they are de®cient {{in dealing with the}} <b>unexpected</b> <b>error</b> situations. The proposed approach uses Monte Carlo simulation of the assembly process with the 3 -D model of the assembly line to predict the possible errors in an off-line manner. After that, these predicted errors are diagnosed and recovered using Bayesian reasoning and genetic algorithms. Several case studies are performed on single-station and multi-station assembly systems and the results are discussed. It is expected that with this new approach, errors can be diagnosed and recovered accurately and costly downtimes of robotic assembly systems will be reduced. Keywords: Off-line programming, genetic algorithms, robotic assembly systems, virtual factories, error diagnosis and recovery 1...|$|E
40|$|Abstract. Software {{errors are}} {{frequently}} {{responsible for the}} limited availability of Internet Services, loss of data, and many security compromises. Self-healing using rescue points (RPs) is a mechanism {{that can be used}} to recover software from unforeseen errors until a more permanent remedy, like a patch or update, is available. We present RE-ASSURE, a self-contained mechanism for recovering from such errors using RPs. Essentially, RPs are existing code locations that handle certain anticipated errors in the target application, usually by returning an error code. REASSURE enables the use of these locations to also handle unexpected faults. This is achieved by rolling back execution to a RP when a fault occurs, returning a valid error code, and enabling the application to gracefully handle the <b>unexpected</b> <b>error</b> itself. REAS-SURE can be applied on already running applications, while disabling and removing it is equally facile. We tested REASSURE with various applications, including the MySQL and Apache servers, and show that it allows them to successfully recover from errors, while incurring moderate overhead between 1 % and 115 %. We also show that even under very adverse conditions, like their continuous bombardment with errors, REASSURE protected applications remain operational. ...|$|E
40|$|The {{successful}} {{delivery of}} the Mars Exploration Rover (MER) landers to well {{within the boundaries of}} their surface target areas in January of 2004 was the culmination of years of orbit determination analysis. The process began with a careful consideration of the filter parameters used for pre-launch covariance studies, and continued with the refinement of the filter after launch based on operational experience. At the same time, tools were developed to run a plethora of variations around the nominal filter and analyze the results in ways that had never been previously attempted for an interplanetary mission. In addition to achieving sub-kilometer Mars-relative orbit determination knowledge, the filter strategy and process detected <b>unexpected</b> <b>error</b> sources, {{while at the same time}} proving robust by indicating the correct solution. Consequently, MER orbit determination set a new standard for interplanetary navigation. Nomenclature ΔV = delta velocity ΔDOR = delta-Differential One-way Range, an angular measurement made using VLBI techniques VLBI = Very Long Baseline Interferometry nrad = nanoradians nsec = nanosecond, about 30 cm at the speed of light B•R = component of B-vector (hyperbolic miss vector) along R axis B•T = component of B-vector (hyperbolic miss vector) along T axis I...|$|E
40|$|We {{report on}} {{an effort to}} develop methodologies for formal {{verification}} of parts of the Multi-Purpose Daemon (MPD) parallel process management system. MPD is a distributed collection of communicating processes. While the individual components of the collection execute simple algorithms, their interaction leads to <b>unexpected</b> <b>errors</b> {{that are difficult to}} uncover by conventional means. Two verification approaches are discussed here: the standard model checking approach using the software model checker SPIN and the nonstandard use of a general-purpose first-order resolution-style theorem prover OTTER to conduct the traditional state space exploration. We compare modeling methodology and analyze performance and scalability of the two methods with respect to verification of MPD. Comment: 12 pages, 3 figures, 1 tabl...|$|R
30|$|The {{multimodal}} fusion {{for natural}} human-computer interaction involves complex intelligent architectures which {{are subject to}} the <b>unexpected</b> <b>errors</b> and mistakes of users. These architectures should react to events occurring simultaneously, and possibly redundantly, from different input media. In this paper, intelligent agent-based generic architectures for multimedia multimodal dialog protocols are proposed. Global agents are decomposed into their relevant components. Each element is modeled separately. The elementary models are then linked together to obtain the full architecture. The generic components of the application are then monitored by an agent-based expert system which can then perform dynamic changes in reconfiguration, adaptation, and evolution at the architectural level. For validation purposes, the proposed multiagent architectures and their dynamic reconfiguration are applied to practical examples, including a W 3 C application.|$|R
30|$|The {{statistical}} {{consistency of}} uncertainties {{in all the}} sensor measurements and estimates are critical in our application. In practice, repeated measurements could also lead to a covariance matrix P that is too small (Julier and Uhlmann 2001), such as high-density data from SfM-MVS. As x and P {{can be used to}} predict the elevation and uncertainty of the whole landform, an overly optimistic P can easily cause <b>unexpected</b> <b>errors</b> in the prediction. For instance, few erroneous points in x with small variances would dominate the prediction and generate a bias in a neighborhood. Overly optimistic P also would prevent x from being updated with other sensors. Additional steps will be taken in future work to guarantee the consistency of P.|$|R
