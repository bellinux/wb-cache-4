0|2869|Public
50|$|There is <b>an</b> <b>OO</b> Gauge {{model railway}} {{in the station}} building.|$|R
50|$|Bachmann Branchline are {{producing}} <b>an</b> <b>OO</b> scale {{model of the}} class in two variations.|$|R
50|$|His hobbies include model railways, {{and he has}} <b>an</b> <b>OO</b> gauge layout {{installed}} in his loft.|$|R
50|$|In 2005 Bachmann {{produced}} <b>an</b> <b>OO</b> gauge {{model of}} Kinlet Hall in GWR green with crest.|$|R
5000|$|Maintainability - this is <b>an</b> <b>OO</b> feature which applies {{more for}} SM because the objects will need {{least amount of}} maintenance.|$|R
50|$|Tri-ang {{produced}} <b>an</b> <b>OO</b> Gauge {{model of}} the locomotive in BR Green and BR Black although this was by modern standard under-detailed being produced in the 1960s, but Bachmann announced <b>a</b> brand new <b>OO</b> gauge model in February 2009.|$|R
50|$|In October 2015, the British {{model railway}} brand Hornby Railways {{announced}} that it would make <b>a</b> <b>OO</b> gauge model of the Pecket W4.|$|R
50|$|Bachmann {{have since}} {{increased}} {{the size of}} the Farish range, by duplicating models introduced to the Bachmann OO range: the detail investigation and pre-production of an original railway vehicle is more detailed for <b>an</b> <b>OO</b> scale model, while for production into N scale there is a simply a down-scaling of most components for production. Hence normally, <b>an</b> <b>OO</b> scale Bachmann Branchline model is followed between 6 months to a year later by an Nscale Graham Farish model - with the Voyager diesel set being an example.|$|R
50|$|Hornby {{produced}} <b>a</b> <b>OO</b> gauge ready-to-run Class 29 in {{the late}} 1970s in BR green and blue liveries. Jouef produced an HO-gauge ready-to-run Class 29 in 1975.|$|R
50|$|Here's {{an example}} of the same thing done in an object-orientedstyle. The {{advantage}} of <b>an</b> <b>OO</b> module is that each object can be configuredindependently from other objects.|$|R
40|$|This article aims {{to propose}} an {{approach}} to formalize this process. This method {{is based on the}} use of linguistic information from informal specifications. This information is composed of words which, in turn, denote elements of <b>an</b> <b>OO</b> modeling, such as classes, properties, etc. These words have a particular meaning, and their use in the modeling is usually related with that meaning. So, the objective is to analyze this information from the semantic and syntactic viewpoint and extract, by means of a formal procedure, the components of <b>an</b> <b>OO</b> system. Thi...|$|R
50|$|In June 2016 it was {{announced}} <b>a</b> <b>OO</b> gauge model produced by Bachmann would be produced in collaboration with Kernow Model Rail, the model is expected for release in summer 2017.|$|R
5000|$|Stoemp is {{pronounced}} , {{and in some}} dialects [...] It is a typical word of Brabantian dialects, in which, as in standard Dutch, oe {{is pronounced}} as <b>an</b> <b>oo</b> between boot and hook.|$|R
5000|$|Model-Glue is <b>an</b> <b>OO</b> web {{framework}} {{based on}} the MVC design pattern. Its goal is to simplify development of OO ColdFusion applications. It is released under the Apache Software License 2.0 (ASL2.0) ...|$|R
40|$|Dynamic {{data flow}} {{analysis}} is a testing technique {{that has been}} successfully used for many procedural programming languages. However, for Object-Oriented (OO) programs, previous investigations have still followed a data-oriented approach {{to keep track of}} the state information for various data elements. This paper proposes <b>an</b> <b>OO</b> approach to perform dynamic data flow analysis for OO programs. In this approach, a meta-model of <b>an</b> <b>OO</b> programpsilas runtime structure is constructed to manage the data flow analysis for the program. An implementation of the model for the Java language is presented, illustrating the practicality and effectiveness of this innovative approach...|$|R
50|$|<b>A</b> <b>OO</b> gauge {{model of}} 43106 is {{produced}} by Bachmann Branchline, who also produce many other models of the Class 4, {{as well as the}} LMS Ivatt Class 2 2-6-0 and LMS Ivatt Class 2 2-6-2T.|$|R
5000|$|<b>A</b> <b>OO</b> gauge {{model of}} the Class 3F was {{produced}} by Tri-ang during the 1960s and production continued after the company's acquisition of Hornby Railways. Hornby continue to produce a model for their [...] "Railroad" [...] range.|$|R
40|$|In this paper, {{we present}} a federated query {{processing}} approach to evaluate queries on <b>an</b> Object-Oriented (<b>OO)</b> federated database. This approach has been designed and implemented in the OO-Myriad project, which is <b>an</b> <b>OO</b> extension to the Myriad FDBS researchmyriad: 94. Since data integration is performed as part of federated query processing, we have proposed outerjoin, outer-difference and generalized attribute derivation operations together with the traditional relational operations, {{to be used for}} integration purposes. To define <b>an</b> <b>OO</b> federated database as a virtual view on multiple OO export databases, we adopt a database mapping strategy that systematically derives each of the class extents, deep class extents and relationships of the federated database using an operator tree consisting of the integration operations. By augmenting federated database queries with this algebraic mapping information, query execution plans can be generated. Based on the original Myriad query processing framework, we have realized the proposed OO federated query processing approach in the OO-Myriad prototype...|$|R
40|$|Abstactâ€”In {{order to}} study the impact of using object {{oriented}} (<b>OO)</b> techniques, <b>a</b> real-time micro-kernel, its application programming interface, and several power electronic control applications are being redesigned using <b>an</b> <b>OO</b> approach. The design, implemented in C++, of the kernel is presented and explored. I...|$|R
40|$|Machine Lourdes Tajes-Martnez, Fernando lvarez-Garca, Marin Daz-Fondn, Daro lvarez-Gutirrez, Juan Manuel Cueva-Lovelle Department of Computer Science, University of Oviedo {lourdes, falvarez, fondon, darioa, cueva}@pinon. ccu. uniovi. es Abstract. The {{design of}} an {{object-oriented}} operating system (OOOS) involves {{the design of}} a model that governs the objects method execution. In this paper we show {{the design of a}}n OOOS based in <b>an</b> <b>OO</b> abstract machine: specifically, the design of the computational model. We propose the adoption of an active object model and we think reflectivity is a helpful tool to achieve <b>a</b> flexible <b>OO</b> computational system...|$|R
40|$|Object-oriented (OO) {{frameworks}} {{are known}} to provide tremendous benefits with respect to software reuse. Developers construct new applications through framework instantiation, which, in general, does not require understanding {{the implementation of the}} framework classes and methods. In prior work, we developed <b>an</b> <b>OO</b> middleware framework, called SzumoFrame, which supports the development and long-term maintenance of multi-threaded but strictly exclusive systems. While using Alloy to analyze models of programs that instantiate SzumoFrame, we discovered how to construct a reusable Alloy specification of SzumoFrame that can be customized with application-specific detail {{in a manner that is}} akin to the instantiation of <b>an</b> <b>OO</b> framework. The strong symmetry between this Alloy framework and SzumoFrame simplifies the construction of specifications and allows application developers to analyze candidate designs before committing to code...|$|R
5000|$|... <b>an</b> {{object-oriented}} (<b>OO)</b> application layer, {{including several}} [...] "kits" ...|$|R
40|$|The paper {{focuses on}} an {{implementation}} of concept abduction with an Object-oriented Database Management System (OODBMS). OWL-DL Knowledge Bases have been translated to <b>an</b> <b>OO</b> version to enable standard and nonstandard inference services as queries over a DB suitable for handheld devices. The framework has been implemented and tested: early experiments are reported. ...|$|R
40|$|This {{thesis is}} about how to start <b>an</b> Object-Oriented (<b>OO)</b> system {{development}} process. The research problem may be translated like this: "Does {{it make sense to}} postpone the drawing of the system boundary in an object-oriented system development process?" In the process of working out {{a solution to the problem}} described, we studied how the Unified Process (UP) recommends to start <b>an</b> <b>OO</b> system development process. UP is a well-known development process, which starts by identifying functional requirements by means of use cases. This may lead to setting up a fixed system boundary very early in the development process. In this thesis, we suggest <b>an</b> <b>OO</b> framework for how to avoid setting up a fixed system boundary early in the development process. The focus should be on how objects collaborate, regardless of what may be perceived as real world tasks and computerized tasks. Some objects may even be split into one part belonging to the real world, and another part belonging to the computerized system. By postponing the distribution of knowledge and responsibility between real world tasks and the computerized system, we are able to design <b>OO</b> models on <b>a</b> higher abstraction level. The objects inside our system should not be regarded as part of <b>an</b> <b>OO</b> model of the "real world", but as computerized enhancements to objects in the real world. Only after we have decided upon how knowledge and responsibility should be distributed between the two parts, we know where to draw the system boundary. The OO framework presented in this thesis may be applied to any OO development process, where we want to delay the drawing of the system boundary...|$|R
40|$|Conventional <b>OO</b> methodologies havetoprovide <b>a</b> well-de#ned Component -based {{development}} #CBD# {{process by}} which the community of software engineers could properly derive executable software components from requirements in a systematic way. The movetoward CBD requires existing OO conceptual modeling approaches to be reconsidered. In this paper we present a proposal to support CBD in <b>an</b> <b>OO</b> Method based on <b>a</b> formal <b>OO</b> model. The key element of this proposal resides on the concept of execution model. The execution model de#nes a model and an architecture that provides a pattern to generate software components from OO conceptual models...|$|R
5|$|Hornby produce <b>a</b> super-detailed <b>OO</b> gauge {{model of}} the Schools Class.|$|R
40|$|AbstractUnderstanding plant {{development}} and architecture has been {{aided by the}} phytomer concept. The phytomer, usually considered a vegetative unit of a leaf, node, internode, axillary bud, and occasionally nodal roots, has been extended to the inflorescence with units repeated within and among shoots. For many reasons including insufficient knowledge of phytomer dynamics or specific modelling objectives, crop models may not fully incorporate phytomer concepts. For instance, commonly, some phytomers are aggregated into a single component such as an inflorescence component. Continuing {{development and}} maturing of object-oriented (OO) design provides opportunities for better representing phytomer concepts in crop models and integrating approaches using varying scales of resolution. Use of the structural Composite Design Pattern (CDP) in <b>an</b> <b>OO</b> plant design facilitates combining scales {{with a mixture of}} single and aggregated phytomers for different components. This paper uses winter wheat (Triticum aestivum L.) to (1) illustrate building the entire plant canopy by the appearance, growth, and death of phytomer units, (2) translate this botanical abstraction into <b>an</b> <b>OO</b> design using the CDP, (3) use the CDP to facilitate a mixture of scales, and (4) present results of a proof-of-concept prototype, CANON, named because the interplay of repeating phytomers is analogous to the repeating melodies of a canon musical composition. CANON implements the phytomer concept of an entire canopy (both vegetative and reproductive phytomers) into <b>an</b> <b>OO</b> design using the CDP. This pattern facilitated the combination of simulation scales from individual reproductive phytomers to an aggregated inflorescence. Quantification of phytomer concepts for winter wheat was primarily derived from the SHOOTGRO model, {{with the addition of a}} simple aggregated inflorescence sub-model derived from the APSIM model. The CANON prototype was able to simulate the appearance, growth, and senescence of phytomers on individual shoots of the plant comprising the plant canopy. Importantly, CANON was able to incorporate legacy code with a lower scale of resolution than the phytomer. CANON demonstrates <b>an</b> <b>OO</b> design to simulate plant canopy development and growth from the sub-phytomer to whole-plant level, allowing flexibility in meeting different model objectives and available knowledge of processes...|$|R
5000|$|Tcl: called Mk4tcl, with <b>an</b> {{optional}} <b>OO</b> {{binding on}} top called Oomk.|$|R
50|$|A {{ready to}} run model in 00 gauge was {{available}} from TechCad design based on a hand finished resin shell and powered by a Mashima motor. It was then available from TechCad as a kit, but TechCad have since ceased trading. Since 2010 Heljan have produced <b>an</b> <b>OO</b> gauge ready-to-run model {{in a variety of}} liveries.|$|R
40|$|Abstract. This paper gives a brief {{description}} of the KeY system, a tool written as part of the ongoing KeY project 1, which is aimed at bridging the gap between (<b>a)</b> <b>OO</b> software engineering methods and tools and (b) deductive verification. The KeY system consists of a commercial CASE tool enhanced with functionality for formal specification and deductive verification. ...|$|R
40|$|Factory [3] Figure 7 hypermediacontext object, {{representing}} the system configuration path hypermedia context activate(anchor) determineResolver(anchor) resolveToDocument(anchor) createDocument(docSpec) resolveToDocSpec(anchor) anchor edit() resolveToAnchor(anchor) createAnchor(anchSpec) resolveToAnchorSpec(anchor) This single hypermedia context object provides the framework hot spot in which <b>an</b> <b>OO</b> programmer can tailor the system configuration without altering {{the rest of}} the system. Thus, the third guideline addresses the extensibility requirement...|$|R
40|$|This paper gives a brief {{description}} of the KeY system, a tool written as part of the ongoing KeY project 1, which is aimed at bridging the gap between (<b>a)</b> <b>OO</b> software engineering methods and tools and (b) deductive verification. The KeY system consists of a commercial CASE tool enhanced with functionality for formal specification and deductive verification. ...|$|R
5000|$|Hornby {{released}} <b>a</b> <b>OO</b> gauge {{model of}} Great Northern as built in early LNER style apple green livery with black framework, and original tender with [...] "LNER 1470N" [...] written on both sides. L.H Loveless & Co also released an O gauge model of Great Northern {{in its original}} GNR Apple Green Livery with a brown chassis and framework.|$|R
5000|$|The {{quality of}} the {{respective}} API implementations varies considerably. The C++ library is simply a wrapper providing <b>an</b> <b>OO</b> view over the C implementation. Likewise the Java and [...]NET implementations wrap the C++ implementation. This has led to memory management issues with the [...]NET implementation (though not with the COM Interop version which is considerably more cumbersome).|$|R
40|$|OO-Method is <b>an</b> <b>OO</b> Methodology that blends the use {{of formal}} {{specification}} systems with conventional OO methodologies based on practice. In contrast to other approaches in this field ([Jun 95,Esd 93]), a set of graphical models provided by the methodology allows analysts to introduce the relevant system information to obtain the conceptual model through a requirements collection phase, so that <b>an</b> <b>OO</b> formal specification in Oasis ([Pas 92, Pas 95 - 1]), can be generated at any time. This formal specification acts as a high-level system repository. Furthermore, a software prototype which is functionally equivalent to the Oasis specification is also generated in an automated way. This is achieved by defining an execution model which gives the pattern for obtaining a concrete implementation in a declarative or an imperative software development environment (depending on the user choice). The methodology {{is supported by a}} CASE workbench...|$|R
5000|$|... #Caption: This {{map shows}} the {{locations}} of the ten UC campuses and the national laboratories associated with <b>UC.</b> <b>A</b> third national laboratory associated with UC is in Los Alamos, New Mexico.|$|R
