92|589|Public
5|$|Valve added Steam Guard {{functionality}} to the Steam {{client in}} March 2011 {{to protect against}} the hijacking of accounts via phishing schemes, one of the largest support issues Valve had at the time. Steam Guard was advertised {{to take advantage of the}} identity protection provided by Intel's second-generation Core processors and compatible motherboard hardware, which allows users to lock their account to a specific computer. Once locked, activity by that account on other computers must first be approved by the user on the locked computer. Support APIs for Steam Guard are available to third-party developers through Steamworks. Steam Guard also offers two-factor, risk-based authentication that uses a one-time <b>verification</b> <b>code</b> sent to a verified email address associated with the Steam account; this was later expanded to include two-factor authentication through the Steam mobile application, known as Steam Guard Mobile Authenticator. If Steam Guard is enabled, the <b>verification</b> <b>code</b> is sent each time the account is used from an unknown machine.|$|E
25|$|Eventually, Conrad {{appears to}} Nicholas and apologizes, {{claiming}} that he, too, {{has come under}} attack by CRS. With {{no one else to}} turn to, Nicholas finds Christine's home. He soon discovers that she is a CRS employee and that her apartment was staged. Christine tells Nicholas that they are being watched. Nicholas attacks a camera, and armed CRS troops begin to swarm the house and fire upon them. Nicholas and Christine are forced to flee. Christine tells Nicholas that CRS has drained his financial accounts by using the psychological tests to guess his passwords. In a panic, Nicholas calls his bank and gives a <b>verification</b> <b>code</b> to check his account balance—zero. Just as he begins to trust Christine, he realizes she has drugged him. As he loses consciousness, she admits that she is actually part of the scam and that he made a fatal mistake by giving up his <b>verification</b> <b>code.</b>|$|E
500|$|There {{were two}} {{intended}} promotions {{associated with the}} original Apogee release, {{both of which were}} cancelled. A pushable wall maze led to a sign reading [...] "Call Apogee and say Aardwolf"; it was intended that the first person to find the sign and carry out its instructions would win a prize, but the quick creation of level editors and cheat programs for the game soon after release led id and Apogee to give up on the idea. Additionally, after completing an episode the player is given a three-letter code in addition to their total score and time. This code was intended to be a <b>verification</b> <b>code</b> as part of a high-score contest, but the sudden prevalence of editor programs resulted in the cancellation of the contest without ever being formally announced.|$|E
40|$|Most work in l w-density parity-check codes {{focuses on}} bit-l 7 el errors. In this paper, we {{introduce}} and anal yze <b>verification</b> <b>codes,</b> which are simpl l ow-density parity-check codes specificali designed to manipul te data in packet-sized units. AlH 0 ugh <b>verification</b> <b>codes</b> requirel argeal phabets, so that codes over n packets require#(lr n) bits per packet, in practice they function wel l for packet sizes as smal l as thirty-two bits. <b>Verification</b> <b>codes</b> requireonl llre time for both encoding and decoding and succeed with high probabil; y under random errors. We describe how toutil 8] code scrambling {{in this setting}} to extend our high probabil] y resul] beyond channel with random errors to channel with errors controlC# by an obl]C#]# adversary. We present specific codes that asymptoticalF perform as wel or better than the worst-case bounds for Reed-Sol omon <b>codes.</b> <b>Verification</b> <b>codes</b> therefore provide significant advantages in speed and computational complC 08 y, particul r l for applH 0 tions that naturalF handl data in packet-sized units. These codes may al] proveuseful as an outer code for future code constructions. ...|$|R
50|$|Heavy {{criticism}} {{has also been}} launched at the factory-level keys the system uses to provide unique <b>verification</b> <b>codes</b> for the product. Since these secret keys are stored on company and government servers, abuse of privileges on this level would allow criminals to generate additional codes, which {{would appear to be}} genuine to the system.|$|R
40|$|PCR {{is a very}} {{diffused}} {{technique to}} amplify nucleic sequences by means of specific primers, that are continuously developed and published on international journals. Sometimes transcription mistakes can occur and erroneous primer sequences can be published, resulting in unexpected results if experiments are replicated. Although primers are relatively short, a rapid system for checking the correctness of the transcribed sequences could mitigate this problem. <b>Verification</b> <b>codes</b> are already used in other disciplines to guarantee the correctness of codified information. In this work an algorithm has been defined and the related software tool developed to fill this gap. A generic algorithm based on the ASCII coding of characters and their position within the sequence has been defined to generate a specific code {{on the basis of}} the sequence composition. Configuration parameters such as amount of characters and coding syntax have been left open for modification and personalisation. Microsoft Visual Studio 2005 has been used to compile “DelioCode” (Descriptive Literal Oligonucleotides Code), a Windows application featuring the algorithm and available on the web for download. The default algorithm has been used to verify the correctness of several sequences by testing casual primers with induced mistakes and primers published sequentially by different authors. All induced mistakes were detected by comparing the <b>verification</b> <b>codes.</b> On the basis of DelioCode, some typos have been found in primers sequences published in peer reviewed journals, and PCR repetition with these wrong primer sequences did not result in DNA amplification. The DelioCode programme is a tool for rapidly generating a unique code on the basis of a specific sequence. The shortness of the performed <b>verification</b> <b>codes</b> allows a rapid comparison among the sequences to find the common mistakes. This is useful every time researchers need to check the correctness of specific sequences, such as when sequences are transcribed from published articles or when oligonucleotidic primers are orderable by compilation of on-line forms. The diffusion of the <b>verification</b> <b>codes</b> generated by the programme would avoid typing mistakes in the transcription and would allow to save time in old-fashioned manual double-checking. The generation of specific codes for every primer could be evaluated to create a freeware “verified primer sequences bank”, where scientists could find rapidly specific primers already tested and published...|$|R
2500|$|... is {{not stored}} {{anywhere}} on disk. In contrast to Intel x86 processors, the Motorola 680x0 processors {{as used in}} Atari machines use a big-endian memory representation and therefore a big-endian representation must be assumed when calculating the checksum. As a consequence of this, for checksum <b>verification</b> <b>code</b> running on x86 machines, pairs of bytes must be swapped before the 16-bit addition.|$|E
5000|$|A card {{security}} code (CSC; {{also called}} card verification data CVD or a card verification number, card verification value CVV, card verification value code, card <b>verification</b> <b>code</b> CVC, <b>verification</b> <b>code</b> or V code, card code verification, or signature panel code SPC) is a security feature for [...] "card not present" [...] payment card transactions instituted {{to reduce the}} incidence of credit card fraud.|$|E
50|$|Each pinma has a <b>verification</b> <b>code</b> that is {{used when}} a {{customer}} do the anti-counterfeiting checking.|$|E
40|$|For {{codes that}} solve {{nonlinear}} partial differential equations (PDEs), powerful methodologies already exist for <b>verification</b> of <b>codes,</b> <b>verification</b> of calculations, and validation (V 2 V). If computational {{scientists and engineers}} are serious about these issues, they will take the responsibility and the relatively little extra effort to design (or modify) their codes so that independent users can confirm V 2 V...|$|R
40|$|As {{scientific}} codes {{become more}} complex and involve larger numbers of developers and algorithms, chances for algorithmic implementation mistakes increase. In this environment, <b>code</b> <b>verification</b> becomes essential to building confidence in the code implementation. This paper will present first results of a new <b>code</b> <b>verification</b> effort within LLNL's B Division. In particular, we will show results of <b>code</b> <b>verification</b> of the LLNL ASC ARES code on the test problems: Su Olson non-equilibrium radiation diffusion, Sod shock tube, Sedov point blast modeled with shock hydrodynamics, and Noh implosion...|$|R
5000|$|Lack of {{peer review}} prohibits {{external}} security <b>code</b> <b>verification.</b>|$|R
5000|$|Do not retain {{full track}} data, card <b>verification</b> <b>code</b> or value (CAV2, CID, CVC2, CVV2), or PIN block data.|$|E
5000|$|Discretionary data — {{may include}} Pin Verification Key Indicator (PVKI, 1 character), PIN Verification Value (PVV, 4 characters), Card Verification Value or Card <b>Verification</b> <b>Code</b> (CVV or CVC, 3 characters) ...|$|E
50|$|A card {{security}} code (CSC) (also termed card <b>verification</b> <b>code</b> (CVC) and card verification value (CVV/CVV2)) is {{also associated}} with the virtual credit card; as in standard credit cards, a CVV is used in virtual credit cards to establish card ownership by the buyer and to authorize transactions.|$|E
40|$|Abstract — Recently, authenticating {{users with}} the help of their friends (i. e., trustee-based social authentication) {{has been shown to be}} a {{promising}} backup authentication mechanism. A user in this system is associated with a few trustees that were selected from the user’s friends. When the user wants to regain access to the account, the service provider sends different <b>verification</b> <b>codes</b> to the user’s trustees. The user must obtain at least k (i. e., recovery threshold) <b>verification</b> <b>codes</b> from the trustees before being directed to reset his or her password. In this paper, we provide the first systematic study about the security of trustee-based social authentications. In particular, we first introduce a novel framework of attacks, which we call forest fire attacks. In these attacks, an attacker initially obtains a small number of compromised users, and then the attacker iteratively attacks the rest of users by exploiting trustee-based social authentications. Then, we construct a probabilistic model to formalize the threats of forest fire attacks and their costs for attackers. Moreover, we introduce various defense strategies. Finally, we apply our framework to extensively evaluate various concrete attack and defense strategies using three real-world social network datasets. Our results have strong implications for the design of more secure trustee-based social authentications. Index Terms — Social authentication, security model, backup authentication...|$|R
40|$|A {{procedure}} for <b>code</b> <b>Verification</b> by the Method of Manufactured Solutions (MMS) is presented. Although the procedure requires {{a certain amount}} of creativity and skill, we show that MMS can be applied to a variety of engineering codes which numerically solve partial differential equations. This is illustrated by detailed examples from computational fluid dynamics. The strength of the MMS procedure is that it can identify any coding mistake that affects the order-of-accuracy of the numerical method. A set of examples which use a blind-test protocol demonstrates the kinds of coding mistakes that can (and cannot) be exposed via the MMS <b>code</b> <b>Verification</b> procedure. The principle advantage of the MMS procedure over traditional methods of <b>code</b> <b>Verification</b> is that <b>code</b> capabilities are tested in full generality. The procedure thus results in a high degree of confidence that all coding mistakes which prevent the equations from being solved correctly have been identified...|$|R
40|$|Abstract—Recently, trustee-based social authentication, i. e., authenticating {{users with}} the help of their friends, {{has been shown to be}} a {{promising}} backup authentication mechanism [5, 9, 10, 33]. A user in such a system is associated with a few (e. g., 5) trustees selected from the user’s friends by either the user or the service provider. When the user wants to regain access to the account, the service provider sends different <b>verification</b> <b>codes</b> to the accounts held by his or her trustees. The user must obtain at least k (i. e., recovery threshold) <b>verification</b> <b>codes</b> from the trustees and present them to the service provider before being directed to reset his or her password. In this paper, we provide the first systematic study about the security of trustee-based social authentications. Specifically, we first introduce a novel framework of attacks, which we call forest fire attacks. In these attacks, an attacker initially obtains a small number of compromised users, and then the attacker iteratively attacks the rest of users by exploiting trustee-based social authen-tications. Then, we construct a probabilistic model to formalize the threats of forest fire attacks and their costs for attackers. Moreover, we introduce various defense strategies. Finally, we apply our framework to extensively evaluate various attack and defense strategies using three real-world social network datasets. Our results have strong implications for the design of more secure trustee-based social authentications. I...|$|R
50|$|The perf {{subsystem}} of Linux kernels from 2.6.37 up to 3.8.8 and RHEL6 kernel 2.6.32 {{contained a}} security vulnerability (CVE-2013-2094), which was exploited to gain root privileges {{by a local}} user. The problem was due to an incorrect type being used (32-bit int instead of 64-bit) in the event_id <b>verification</b> <b>code</b> path.|$|E
5000|$|If a {{consumer}} registers over the phone, in writing, or in person an identity <b>verification</b> <b>code</b> IVC is issued to enable {{access to the}} e-Health record online for the first time. After this first log, or post 30 days from issuance the IVC becomes obsolete. There are four steps in the registration process: ...|$|E
50|$|ITRV {{can now be}} {{verified}} online Using Aadhaar Card or Electronic <b>Verification</b> <b>Code</b> (EVC). The EVC can be generated either via One Time Password sent to email and registered mobile number (if income is less than INR 5 Lakhs) or via Net Banking. After online verification Income Tax Assesses {{is not required to}} send ITRV to Bangalore CPC.|$|E
50|$|Later in 2005, StrikeIron {{released}} {{more of its}} own Web {{services like}} sales tax and SMS solutions. The product portfolio continued to grow in 2006 {{with the addition of}} email <b>verification,</b> zip <b>code</b> information, and financial data services.|$|R
40|$|In {{order to}} solve the existed {{problems}} of dynamic integrity measurement method, a dynamic integrity measurement model based on Memory Paging Mechanism is proposed in this paper. The model takes memory pages of executable subjects as measurement objects. When the pages are scheduled into memory, the measurement points are inserted, the pages are measured, and their integrities are verified. The model is able to insure the integrity and trust of each executable page and assure that {{the integrity of the}} whole executable subjects is not destroyed. To verify this model, XEN hypercall mechanism is used to acquire executable subjects’ pages scheduled into memory, and the integrity measurement and <b>verification</b> <b>codes</b> are put into hypercall handler. Accordingly, dynamic integrity measurement to executable subjects is implemented...|$|R
40|$|Confidentiality {{and data}} {{authenticity}} {{are two basic}} concepts in security. The first guarantees secrecy of a message, while the latter protects its integrity. This paper examines the use of encryption to secure software static analysis and tampering attacks. We present the concept of code encryption, which offers confidentiality, and a method to create code dependencies that implicitly protect integrity. For the latter we propose several dependency schemes based on a static call graph which allow runtime code decryption simultaneous with <b>code</b> <b>verification.</b> If <b>code</b> is modified statically or dynamically, it will result in incorrect decryption of other code, producing a corrupted executable. ...|$|R
50|$|Some {{applications}} link to new sections, {{while other}} settings {{stay within the}} page. The user also has access, from the dashboard, to special settings. Two-step verification {{is an example of}} this, which requires a <b>verification</b> <b>code</b> to be entered that is sent to the user’s phone when logging into a new machine and every-time cookies are cleaned.|$|E
50|$|Eventually, Conrad {{appears to}} Nicholas and apologizes, {{claiming}} that he, too, {{has come under}} attack by CRS. With {{no one else to}} turn to, Nicholas finds Christine's home. He soon discovers that she is a CRS employee and that her apartment was staged. Christine tells Nicholas that they are being watched. Nicholas attacks a camera, and armed CRS troops begin to swarm the house and fire upon them. Nicholas and Christine are forced to flee. Christine tells Nicholas that CRS has drained his financial accounts by using the psychological tests to guess his passwords. In a panic, Nicholas calls his bank and gives a <b>verification</b> <b>code</b> to check his account balance—zero. Just as he begins to trust Christine, he realizes she has drugged him. As he loses consciousness, she admits that she is actually part of the scam and that he made a fatal mistake by giving up his <b>verification</b> <b>code.</b>|$|E
5000|$|A new mode - [...] "Challenge" [...] mode - was introduced. In Challenge mode, {{players were}} given a lap around Spa-Francorchamps in Jenson Button's Benetton B201. Players who {{achieved}} a fast lap time {{were given a}} <b>verification</b> <b>code,</b> and were {{given the opportunity to}} post their winning times on the Internet to compare their times to other people's if they have an account.|$|E
5000|$|Software construction: The {{detailed}} {{creation of}} working, meaningful software {{through a combination}} of <b>coding,</b> <b>verification,</b> unit testing, integration testing, and debugging.|$|R
40|$|Guided wave theory (GWT) is welt-established. There {{are many}} {{canonical}} structures with mathematical exact solutions {{which are used}} in teaching {{as well as in}} model validation, data <b>verification</b> and <b>code</b> accreditation. This invited paper reviews guided wave theory and presents short Matlab scripts and interesting virtual propagation toots...|$|R
40|$|Existing code update {{protocols}} target {{efficiency and}} assume correct behavior from participating sensor nodes. This work aims for the progressive, resource sensitive <b>verification</b> of <b>code</b> updates in sensor networks {{to ensure that}} unauthorized updates from malicious nodes are not propagated, while correct updates continue to be efficiently disseminated...|$|R
50|$|Skype {{offers a}} feature {{allowing}} users {{to set the}} caller ID for outgoing calls to telephone numbers. Set-up verification involves sending an SMS text message to a selected mobile phone number, then typing that <b>verification</b> <b>code</b> into a web form. Since most regular home and business telephones cannot receive text messages, this feature is only available to owners of mobile phones.|$|E
50|$|Valve added Steam Guard {{functionality}} to the Steam {{client in}} March 2011 {{to protect against}} the hijacking of accounts via phishing schemes, one of the largest support issues Valve had at the time. Steam Guard was advertised {{to take advantage of the}} identity protection provided by Intel's second-generation Core processors and compatible motherboard hardware, which allows users to lock their account to a specific computer. Once locked, activity by that account on other computers must first be approved by the user on the locked computer. Support APIs for Steam Guard are available to third-party developers through Steamworks. Steam Guard also offers two-factor, risk-based authentication that uses a one-time <b>verification</b> <b>code</b> sent to a verified email address associated with the Steam account; this was later expanded to include two-factor authentication through the Steam mobile application, known as Steam Guard Mobile Authenticator. If Steam Guard is enabled, the <b>verification</b> <b>code</b> is sent each time the account is used from an unknown machine.|$|E
50|$|TextSecure {{required}} that the user had a phone number for verification. The number {{did not have to}} be the same as on the device's SIM card; it could also be a VoIP number or a landline as long as the user could receive the <b>verification</b> <b>code</b> and have a separate device to set-up the software. A number could only be registered to one device at a time.|$|E
30|$|Code verification: the <b>code</b> <b>verification</b> step is used {{to verify}} the {{automated}} generated code {{in order to ensure}} that it satisfies the Event-B model.|$|R
40|$|There are {{procedures}} and methods for <b>verification</b> of <b>coding</b> algebra and for validations of models and calculations {{that are in}} use in the aerospace computational fluid dynamics (CFD) community. These methods would be efficacious if used by the glacier dynamics modeling community. This paper {{is a presentation of}} some of those methods, and how they might be applied to uncertainty management supporting <b>code</b> <b>verification</b> and model validation for glacier dynamics. The similarities and differences between their use in CFD analysis and the proposed application of these methods to glacier modeling are discussed. After establishing sources of uncertainty and methods for <b>code</b> <b>verification,</b> the paper looks at a representative sampling of verification and validation efforts that are underway in the glacier modeling community, and establishes a context for these within an overall solution quality assessment. Finally, a vision of a new information architecture and interactive scientific interface is introduced and advocated. By example, this Integrated Science Exploration Environment is proposed for exploring and managing sources of uncertainty in glacier modeling codes and methods, and for supportin...|$|R
40|$|Modeling and {{simulation}} in electromagnetic engineering are discussed. Fundamental {{terms and}} concepts, and challenges in model validation and <b>verification</b> and <b>code</b> calibration are reviewed. Time- and frequency-domain models are developed and calibrated. Typical calibration scenarios are presented where tests and comparisons against analytical {{as well as}} numerical models are done. IEEE Electromagnetic Compatibility Societ...|$|R
