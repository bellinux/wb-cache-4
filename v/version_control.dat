1587|777|Public
5|$|The <b>version</b> <b>control</b> system {{contains}} {{a complete list}} of changes.|$|E
5|$|Being a {{derivative}} of FreeBSD, DragonFly has inherited an easy-to-use integrated build {{system that can}} rebuild the entire base system from source {{with only a few}} commands. The DragonFly developers use the Git <b>version</b> <b>control</b> system to manage changes to the DragonFly source code. Unlike its parent FreeBSD, DragonFly has both stable and unstable releases in a single source tree, due to a smaller developer base.|$|E
5|$|Bodo Moeller and Adam Langley of Google {{prepared}} the fix for Heartbleed. The resulting patch {{was added to}} Red Hat's issue tracker on March 21, 2014. Stephen N. Henson applied the fix to OpenSSL's <b>version</b> <b>control</b> system on 7 April. The first fixed version, 1.0.1g, was released on the same day. , 309,197 public web servers remained vulnerable.|$|E
5000|$|Automatic <b>versions</b> <b>control</b> {{of system}} objects - The Softwell Maker IDE {{automatically}} ...|$|R
5000|$|Dartabase ModelServerside Database {{migration}} {{for simple}} <b>version</b> <b>controlled</b> database structure manipulation currently supporting MySQL/PGSQL inspired by Ruby on Rails Modelnow console and GUI (build in Polymer 1.0) ...|$|R
50|$|Wireless DNC is {{also used}} in place of {{hard-wired}} <b>versions.</b> <b>Controls</b> of this type are very widely used in industries with significant sheet metal fabrication, such as the automotive, appliance, and aerospace industries.|$|R
5|$|Several {{projects}} work {{to extend}} Plan 9, including 9atom and 9front. These forks augment Plan 9 with additional hardware drivers and software, including an improved {{version of the}} Upas e-mail system, the go compiler, Mercurial <b>version</b> <b>control</b> system support, and other programs. Plan 9 was ported to the Raspberry Pi single-board computer. The Harvey project attempts to replace the custom Plan 9 C compiler with GCC, to leverage modern development tools such as GitHub and Coverity and speed up development.|$|E
5|$|The Witness {{uses its}} own engine {{developed}} by Blow and his team, which took {{a significant portion}} of the development time. Blow was insistent on using his own game engine instead of an existing solution such as Unity, as he would be able to fully control every element of a game engine that he created himself. As a compact game world compared to open-world games, the whole of the island of The Witness was treated as one zone, simplifying the gameplay and engine development. This presented a secondary challenge to the team as to concurrently work on the project, they needed to find a means to allow multiple developers to edit areas without resorting to using locking on their <b>version</b> <b>control</b> system as well as being able to work without being connected to a central server. Blow and his team developed an unconventional means of serializing the game world into text files that would have revision control while at the same time making it easy for individuals to discover conflicting edits. They also converted the 10,000-some entities in the game world into their own individual files for tracking to further reduce conflict between edits. Other features of this system including using defined control points for terrain elements to automatically recalculate seamless connections between them within the game's rendering engine, and a built-in world editor within the game engine to easily access existing serialized elements and create new ones.|$|E
25|$|<b>Version</b> <b>control</b> of a document, {{permitting}} {{reconstruction of}} its evolution.|$|E
50|$|Kenai.com's {{services}} included <b>version</b> <b>controlled</b> {{source code}} repositories (Mercurial, Subversion, Git), team wikis, a download area to host documents, an integrated team member IM chat, issue tracking (JIRA, Bugzilla), forums, mailing lists, and webhooks for selected events.|$|R
50|$|ASAM {{provides}} the work infrastructure {{for the project}} team, i.e. an issue tracking system, a file repository and <b>versioning</b> <b>control</b> system, means for remote conferencing, process descriptions and guidelines, document templates and the support through the staff of its head office.|$|R
5000|$|Several <b>versions</b> of <b>control</b> {{systems have}} been used, including: ...|$|R
25|$|Git's {{design was}} {{inspired}} by BitKeeper and Monotone. Git was originally designed as a low-level <b>version</b> <b>control</b> system engine on top of which others could write front ends, such as Cogito or StGIT. The core Git project has since become a complete <b>version</b> <b>control</b> system that is usable directly. While strongly influenced by BitKeeper, Torvalds deliberately avoided conventional approaches, leading to a unique design.|$|E
25|$|Many new and {{existing}} Ruby libraries are hosted on GitHub, {{a service that}} offers <b>version</b> <b>control</b> repository hosting for Git.|$|E
25|$|These {{criteria}} eliminated every then-extant <b>version</b> <b>control</b> system except Monotone. Performance considerations excluded it, too. So {{immediately after}} the 2.6.12-rc2 Linux kernel development release, Torvalds set out to write his own system.|$|E
50|$|Redshift is a {{group of}} {{educational}} planetarium and astronomy software packages that allow the user to observe the sky from a range of dates, print off data based on the observations and (in some <b>versions)</b> <b>control</b> a telescope, created by Maris Multimedia. It runs on PC with Microsoft Windows, Mac OS X and iOS.|$|R
40|$|Unlike static {{documents}}, <b>version</b> <b>controlled</b> {{documents are}} continuously edited {{by one or}} more authors. Such collaborative revision process makes traditional modeling and visualization techniques inappropriate. In this paper we propose a new representation based on local spacetime smoothing that captures important revision patterns. We demonstrate the applicability of our framework using experiments on synthetic and real-world data. ...|$|R
5000|$|The {{unreleased}} Xbox 360 {{version of}} Crimson Dragon originally required the Kinect sensor to play; however the released Xbox One <b>version</b> <b>controls</b> using the gamepad using a dual analog set up. The game features six types of dragons, over 100 skills, and three-player online co-op. [...] Dragons can be leveled up by feeding them food earned during missions.|$|R
25|$|As {{with most}} other {{distributed}} <b>version</b> <b>control</b> systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version tracking abilities, independent of network access or a central server.|$|E
25|$|The Workbench is a {{graphical}} {{user interface}} (GUI) and integrated development environment (IDE) for all IRI software products, built on Eclipse™. The Workbench is a free, optional place to design, run, and manage data connections, metadata, and jobs, and to use third-party plug-ins for business intelligence, data modeling, <b>version</b> <b>control,</b> etc.|$|E
25|$|Efficient {{handling}} of large projects: Torvalds has described Git {{as being very}} fast and scalable, and performance tests done by Mozilla showed it was {{an order of magnitude}} faster than some <b>version</b> <b>control</b> systems, and fetching version history from a locally stored repository can be one hundred times faster than fetching it from the remote server.|$|E
5000|$|<b>Version</b> and <b>control</b> {{over the}} {{documents}} and the contents - reused or not.|$|R
5000|$|The [...] "slip" [...] {{opinion is}} the second version of an opinion. It {{is sent to the}} printer later in the day on which the [...] "bench" [...] opinion is {{released}} by the Court. Each slip opinion has the same elements as the bench opinion—majority or plurality opinion, concurrences or dissents, and a prefatory syllabus—but may contain corrections not appearing in the bench opinion.Caution: These electronic opinions may contain computer-generated errors or other deviations from the official printed slip opinion pamphlets. Moreover, a slip opinion is replaced within a few months by a paginated version of the case in the preliminary print, and—one year after the issuance of that print—by {{the final version of the}} case in a U. S. Reports bound volume. In case of discrepancies between the print and electronic versions of a slip opinion, the print <b>version</b> <b>controls.</b> In case of discrepancies between the slip opinion and any later official version of the opinion, the later <b>version</b> <b>controls.</b>|$|R
40|$|We use {{the concept}} of {{promises}} to develop a service oriented abstraction of the primitive operations that make an autonomic computer system. Convergent behaviour {{does not depend on}} centralized control. We summarize necessary and sufficient conditions for maintaining a convergently enforced policy without sacrificing autonomy of decision, and we discuss whether the idea of <b>versioning</b> <b>control</b> or “rollback” is compatible with an autonomic framework...|$|R
25|$|As Git is a {{distributed}} <b>version</b> <b>control</b> system, {{it can be}} used as {{a server}} out of the box. Dedicated Git server software helps, amongst other features, to add access control, display the contents of a Git repository via the web, and help managing multiple repositories. Remote file store and shell access: A Git repository can be cloned to a shared file system, and accessed by other persons. It can also be accessed via remote shell just by having the Git software installed and allowing a user to log in.|$|E
25|$|With digital publishing, Fiztpatrick {{envisions a}} shift in the {{accepted}} conception of authorship from a solitary enterprise with a definite endpoint {{in the creation of the}} text to one of writing within a community as part of an ongoing process. This change is a result of the capabilities of word processing, which allows for the swift and simple revision of text, and the digital networking, which enables linking, reader commentary, and <b>version</b> <b>control.</b> By releasing text to be read and commented upon online authorship becomes ongoing, process-oriented work taking place in a community of interested readers.|$|E
25|$|The AGC {{also had}} a {{sophisticated}} software interpreter, developed by the MIT Instrumentation Laboratory, that implemented a virtual machine with more complex and capable pseudo-instructions than the native AGC. These instructions simplified the navigational programs. Interpreted code, which featured double precision trigonometric, scalar and vector arithmetic (16 and 24-bit), even an MXV (matrix × vector) instruction, could be mixed with native AGC code. While the execution time of the pseudo-instructions was increased (due {{to the need to}} interpret these instructions at runtime) the interpreter provided many more instructions than AGC natively supported and the memory requirements were much lower than in the case of adding these instructions to the AGC native language which would require additional memory built into the computer (at that time the memory capacity was very expensive). The average pseudo-instruction required about 24 ms to execute. The assembler and <b>version</b> <b>control</b> system, named YUL for an early prototype Christmas Computer, enforced proper transitions between native and interpreted code.|$|E
5000|$|Panavia Tornado - all <b>versions</b> (engine <b>controls,</b> {{high lift}} control unit, {{flap and slat}} actuation, nozzle control) ...|$|R
5000|$|In all <b>versions,</b> players <b>control</b> Gomez Addams as he {{attempts}} to rescue {{other members of the}} Addams family.|$|R
40|$|For a {{beginning}} SAS R ○ user, {{there are several}} resources available for learning how to write efficient programs, but few for how to organize program files, data sets, and related files. This {{is very important for}} many reasons such as: knowing where to find everything, avoiding duplicating efforts, and maintaining <b>version</b> <b>controls.</b> This paper presents ideas for organizing these files, along with some short but useful pieces of code...|$|R
2500|$|Subversion uses a {{centralized}} revision control model. Ben Collins-Sussman, {{one of the}} designers of Subversion, believes a centralised model would help prevent [...] "insecure programmers" [...] from hiding their work from other team members. [...] Some users of <b>version</b> <b>control</b> systems see the centralised model as detrimental; famously, Linus Torvalds attacked Subversion's model and its developers.|$|E
2500|$|Although Torvalds {{believes}} [...] "open {{source is}} the only right way to do software", he also {{has said that he}} uses the [...] "best tool for the job", even if that includes proprietary software. He was criticized for his use and alleged advocacy of the proprietary BitKeeper software for <b>version</b> <b>control</b> in the Linux kernel. Torvalds subsequently wrote a free-software replacement for BitKeeper called Git.|$|E
2500|$|Git (...) is a <b>version</b> <b>control</b> {{system for}} {{tracking}} changes in computer files and coordinating work on those files among multiple people. It is primarily used for source code management in software development, {{but it can}} be used to keep track of changes in any set of files. As a distributed revision control system it is aimed at speed, data integrity, and support for distributed, non-linear workflows.|$|E
40|$|Technical notes (technotes) {{are a new}} {{documentation}} {{medium for}} LSST Data Management (DM) staff to publish stand-alone documents that are native to the web. Technotes are written in reStructuredText, <b>version</b> <b>controlled</b> on GitHub, built with the same stack as DM's software documentation, and made universally citeable with digital object identifiers (DOIs) provided through Zenodo. DM team members can create a new technote today by following the instructions at [URL]...|$|R
50|$|Dual <b>control</b> <b>version.</b>|$|R
5000|$|Multiverse Is a Java 1.6+ based Software Transactional Memory (STM) {{implementation}} {{that uses}} Multi <b>Version</b> Concurrency <b>Control</b> (MVCC) as concurrency control mechanism.|$|R
