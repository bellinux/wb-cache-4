2810|510|Public
25|$|In general, a <b>verifier</b> {{does not}} have to be {{polynomial}}-time. However, for L to be in NP, there must be a <b>verifier</b> that runs in polynomial time.|$|E
25|$|This {{standard}} {{defines the}} measuring accuracy of a barcode <b>verifier.</b>|$|E
25|$|Compared with a reader, a <b>verifier</b> {{measures}} a barcode's {{optical characteristics}} to international and industry standards. The measurement must be repeatable and consistent. Doing so requires constant {{conditions such as}} distance, illumination angle, sensor angle and <b>verifier</b> aperture. Based on the verification results, the production process can be adjusted to print higher quality barcodes that will scan down the supply chain.|$|E
50|$|<b>Verifiers</b> {{should not}} require {{passwords}} {{to be changed}} arbitrarily (e.g., periodically). However, <b>verifiers</b> shall force a change if {{there is evidence of}} compromise of the password.|$|R
40|$|We {{introduce}} a novel cryptographic paradigm of broadcast authentication with "preferred" <b>verifiers</b> (BAP). With BAP, the message source explicitly targets {{a set of}} one or more <b>verifiers.</b> For an attacker, forging authentication data of a source, for purposes of fooling preferred <b>verifiers</b> may be substantially more di#cult than fooling other (non-preferred) <b>verifiers.</b> We investigate broadcast authentication (BA) with hashed random pre-loaded subsets (HARPS), which caters for such a distinction. HARPS, provides for e#cient broadcast authentication, with and without preferred <b>verifiers.</b> We argue that BA using HARPS has some very desirable features that make it well suited for securing ad hoc routing protocols. We also briefly discuss some applications of the novel paradigm of BAP in the context of ad hoc routing protocols...|$|R
40|$|Abstract A {{scheme for}} {{anonymous}} tag based anonymous credentials is enhanced. Different from existing zero knowledge proof based anonymous credential schemes that require numbers of challenges and responses between <b>verifiers</b> and credential holders, the anonymous tag based scheme requires only {{small number of}} challenges and responses between <b>verifiers</b> and credential holders. This is because the scheme in this paper can be easily made sound even in environments where <b>verifiers</b> also may behave dishonestly. However, the original scheme has probabilistic features, i. e. <b>verifiers</b> must generate dummy fake challenges; therefore overheads for managing anonymous systems cannot be reduced to the minimum. The enhanced anonymous tag based scheme excludes these probabilistic features from interactions between <b>verifiers</b> and credential holders. The scheme also corrects several design errors included in the original scheme...|$|R
25|$|A Turing {{machine that}} decides LR {{is called a}} <b>verifier</b> for L and a y such that (x, y) ∈ R is called a {{certificate}} of membership of x in L.|$|E
25|$|The MM II missile was {{deployed}} with a D-37C disk computer. Autonetics also programmed functional simulators and {{the code}} inserter <b>verifier</b> {{that was used}} at Wing headquarters to generate and test the flight program codes {{to go into the}} airborne computer.|$|E
25|$|This trick can be generalized: {{there are}} many maps where if the colors of some regions are {{selected}} beforehand, it becomes impossible to color the remaining regions without exceeding four colors. A casual <b>verifier</b> of the counterexample may not think to change the colors of these regions, so that the counterexample will appear as though it is valid.|$|E
50|$|Additional Verification {{can take}} 3 to 5 {{government}} work days. This step involves USCIS Immigration Status <b>Verifiers</b> making more sophisticated queries to various databases (including DHS systems and DOJ's EOIR system), {{to locate the}} applicant's records. Status <b>Verifiers</b> have read-only access to information contained in many other systems through the Person Centric Query System. Once the Status <b>Verifiers</b> have completed their search, the information is returned electronically to the caseworker through the SAVE interface.|$|R
40|$|Independent Environmental Impact Assessment (EIA) {{follow-up}} <b>verifiers</b> such as monitoring agencies, checkers, {{supervisors and}} control officers are active on various construction sites across the world. There are, however, differing {{views on the}} value that these <b>verifiers</b> add and very limited learning in EIA has been drawn from independent <b>verifiers.</b> This paper aims to appraise how {{and to what extent}} independent EIA follow-up <b>verifiers</b> add value in major construction projects in the developing country context of South Africa. A framework for appraising the role of independent <b>verifiers</b> was established and four South African case studies were examined through a mixture of site visits, project document analysis, and interviews. Appraisal results were documented in the performance areas of: planning, doing, checking, acting, public participating and integration with other programs. The results indicate that independent <b>verifiers</b> add most value to major construction projects when involved with screening EIA requirements of new projects, allocation of financial and human resources, checking legal compliance, influencing implementation, reporting conformance results, community and stakeholder engagement, integration with self-responsibility programs such as environmental management systems (EMS), and controlling records. It was apparent that <b>verifiers</b> could be more creatively utilized in pre-construction preparation, providing feedback of knowledge into assessment of new projects, giving input to the planning and design phase of projects, and performance evaluation. The study confirms the benefits of proponent and regulator follow-up, specifically in having independent <b>verifiers</b> that disclose information, facilitate discussion among stakeholders, are adaptable and proactive, aid in the integration of EIA with other programs, and instill trust in EIA enforcement by conformance evaluation. Overall, the study provides insight on how to harness the learning opportunities arising from EIA follow-up through the appointment of independent <b>verifiers...</b>|$|R
50|$|The {{distinction}} between interactive and in-between <b>verifiers</b> {{is not a}} sharp one. For example,Bedrock strives for {{a high degree of}} automation, in what it terms mostly-automatic verification, whereVerifast sometimes requires annotations that resemble the tactics (little programs) used in interactive <b>verifiers.</b>|$|R
25|$|Based on the {{definition}} alone {{it is not}} obvious that NP-complete problems exist; however, a trivial and contrived NP-complete problem can be formulated as follows: given {{a description of a}} Turing machine M guaranteed to halt in polynomial time, does there exist a polynomial-size input that M will accept? It is in NP because (given an input) it is simple to check whether M accepts the input by simulating M; it is NP-complete because the <b>verifier</b> for any particular instance of a problem in NP can be encoded as a polynomial-time machine M that takes the solution to be verified as input. Then {{the question of whether the}} instance is a yes or no instance is determined by whether a valid input exists.|$|E
2500|$|A barcode <b>verifier</b> {{works the}} way a reader does, but instead of simply {{decoding}} a barcode, a <b>verifier</b> performs a series of tests. For linear barcodes these tests are: ...|$|E
2500|$|NP can {{be defined}} {{similarly}} using nondeterministic Turing machines (the traditional way). However, a modern approach to define NP {{is to use the}} concept of certificate and <b>verifier.</b> Formally, NP is defined as the set of languages over a finite alphabet that have a <b>verifier</b> that runs in polynomial time, where the notion of [...] "verifier" [...] is defined as follows.|$|E
50|$|<b>Verifiers</b> {{shall not}} permit the {{subscriber}} to store a “hint” that is accessible to an unauthenticated claimant, and <b>verifiers</b> shall not prompt subscribers to use specific types of information (e.g., “What {{was the name of}} your first pet?”) when choosing passwords.|$|R
40|$|A multisignature {{scheme for}} {{specified}} group of <b>verifiers</b> needs {{a group of}} signers’ cooperation to sign a message to a specified group of <b>verifiers</b> that must cooperate to check the signature’s validity later. Recently, Zhang et al. proposed a new multisignature scheme for specified group of <b>verifiers.</b> However, we find that Zhang et al. ’s scheme cannot prevent a dishonest clerk of signing group from changing the signing message to another message of his choice while he is cooperating with the signers to produce a multisignature. Therefore, their scheme is insecure...|$|R
5000|$|Annex VII: Environmental <b>verifier’s</b> {{declaration}} on verification {{and validation}} activities ...|$|R
2500|$|SYSKEY: used {{to encrypt}} the cached domain <b>verifier</b> and the {{password}} hashes {{stored in the}} SAM ...|$|E
2500|$|The related area of {{automated}} proof verification uses {{computer programs}} {{to check that}} human-created proofs are correct. [...] Unlike complicated automated theorem provers, verification systems may be small enough that their correctness can be checked both by hand and through automated software verification. This validation of the proof <b>verifier</b> is needed to give confidence that any derivation labeled as [...] "correct" [...] is actually correct.|$|E
2500|$|The site {{originally}} {{started with}} the posting of chat logs to shame people who engaged in sexual chats with purported children. Some members of the site allegedly went further by harassing the targets of their chats in real life, {{as well as their}} friends, neighbors, employers, and family. After a falling-out over a vitriolic chat log with a phone <b>verifier</b> in 2004, Fencepost was dismissed from the site. [...] "Xavier became much more oriented toward getting pedophiles arrested rather than just making them complete social pariahs in their neighborhood," [...] says Fencepost.|$|E
5000|$|... {{to provide}} views on {{compliance}} to help <b>verifiers</b> make decisions ...|$|R
40|$|Abstract: In {{the field}} of annotation-based source code level program {{verification}} for Java-like languages, separation-logic based <b>verifiers</b> offer a promising alterna-tive to classic JML based <b>verifiers</b> such as ESC/Java 2, the Mobius tool or Spec#. Researchers have demonstrated the advantages of separation logic based verifica-tion by showing that it is feasible to verify very challenging (though very small) sample code, such as design patterns, or highly concurrent code. However, there is little experience in using this new breed of <b>verifiers</b> on real code. In this paper we report on our experience of verifying several thousands of lines of Java Card code using VeriFast, one of the state-of-the-art separation logic based <b>verifiers.</b> We quantify annotation overhead, verification performance, and impact on code quality (number of bugs found). Finally, our experiments suggest a number of potential improvements to the VeriFast tool...|$|R
5000|$|... #Subtitle level 2: Post-WW II IBM keypunches and <b>verifiers</b> for 80-column cards ...|$|R
6000|$|... 240. This pilgrim, {{you are to}} notice, is put by Dante in the orb of justice, as a just servant; the Emperor Justinian {{being the}} image of a just ruler. Justinian's law-making turned out well for England; but the good romeo's match-making ended ill for it; and for Borne, and Naples also. For Beatrice of Provence {{resolved}} to be a queen like her three sisters, and was the prompting spirit of Charles's expedition to Italy. She was crowned with him, Queen of Apulia and Sicily, {{on the day of the}} Epiphany, 1265; she and her husband bringing gifts that day of magical power enough; and Charles, as soon as the feast of coronation was over, set out to give battle to Manfred and his Saracens. [...] "And this Charles," [...] says Villani, [...] "was wise, and of sane counsel; and of prowess in arms, and fierce, and much feared and redoubted by all the kings in the world;--magnanimous and of high purposes; fearless in the carrying forth of every great enterprise; firm in every adversity; a <b>verifier</b> of his every word; speaking little,--doing much; and scarcely ever laughed, and then but a little; sincere, and without flaw, as a religious and catholic person; stern in justice, and fierce in look; tall and nervous in person, olive coloured, and with a large nose, and well he appeared a royal majesty more than other men. Much he watched, and little he slept; and used to say that so much time as one slept, one lost; generous to his men-at-arms, but covetous to acquire land, signory, and coin, come how it would, to furnish his enterprises and wars: in courtiers, servants of pleasure, or jocular persons, he delighted never." ...|$|E
50|$|In {{computational}} complexity theory, {{the class}} QIP, {{which stands for}} Quantum Interactive Polynomial time, is the quantum computing analogue of the classical complexity class IP, which is the set of problems solvable by an interactive proof system with a polynomial-time <b>verifier</b> and one computationally unbounded prover. Informally, IP is the set of languages for which a computationally unbounded prover can convince a polynomial-time <b>verifier</b> to accept when the input is in the language (with high probability) and cannot convince the <b>verifier</b> to accept when the input {{is not in the}} language (again, with high probability). In other words, the prover and <b>verifier</b> may interact for polynomially many rounds, and if the input is in the language the <b>verifier</b> should accept with probability greater than 2/3, and if the input is not in the language, the <b>verifier</b> should be reject with probability greater than 2/3. In IP, the <b>verifier</b> is like a BPP machine. In QIP, the communication between the prover and <b>verifier</b> is quantum, and the <b>verifier</b> can perform quantum computation. In this case the <b>verifier</b> is like a BQP machine.|$|E
5000|$|A {{designated}} <b>verifier</b> signature is {{a signature}} scheme in which signatures {{can only be}} verified by a single, designated <b>verifier,</b> designated {{as part of the}} signature creation. Designated <b>verifier</b> signatures were first proposed in 1996 by Jakobsson Markus, Kazue Sako, and Russell Impagliazzo. [...] Proposed as a way to combine authentication and off-the-record messages, designated <b>verifier</b> signatures allow authenticated, private conversations to take place.|$|E
40|$|In this paper, {{we propose}} quantum position-verification schemes {{where all the}} {{channels}} are untrusted except {{the position of the}} prover and distant reference stations of <b>verifiers.</b> We review and analyze the existing QPV schemes containing some pre-shared data between the prover and <b>verifiers.</b> Most of these schemes are based on non-cryptographic assumptions, that is, quantum/classical channels between the <b>verifiers</b> are secure. It seems impractical in the environment fully controlled by adversaries and would lead to security compromise in practical implementations. However, our proposed formulism for quantum position-verification is more robust, secure and according to the standard assumptions of cryptography. Furthermore, once the position of the prover is verified, our schemes establish secret keys in parallel and can be used for authentication and secret communication between the prover and <b>verifiers.</b> Comment: 12 pages, 4 figure: final version with few corrections of symbols in equation 3. 1 - 3. 3 and A. ...|$|R
40|$|Recently, {{the problem}} of secure position-verification has been {{extensively}} analyzed in a formal notion where distant <b>verifiers</b> send encrypted challenge along with the decryption information to the prover. However, currently {{it is known that}} all the existing position-verification scheme are insecure and secure positioning is impossible. We propose here a different notion for position-verification where distant <b>verifiers</b> determine the actions of the prover through non-local correlations generated by local measurements at the provers site. The proposed scheme guarantees secure positioning even if the <b>verifiers</b> do not have any pre-shared data with the prover, position is the only credential of the prover. Our proposed scheme is secure in general and evades known quantum attacks based on instantaneous non-local computations in particular. The scheme enables <b>verifiers</b> to identify dishonest provers with very high probability, where n is the number of entangled pairs used. Comment: 7 pages, added two figures and revised the schem...|$|R
25|$|Barcode <b>verifiers</b> should {{comply with}} the ISO/IEC 15426-1 (linear) or ISO/IEC 15426-2 (2D).|$|R
5000|$|The <b>Verifier</b> {{refers to}} a {{proprietary}} fuel gauge technology, used for advanced measurement of heating oil in residential and commercial tanks ranging from 1,000 - 20,000 gallons. First developed in 2005, by U.S. Energy Group’s Jerry Pindus, <b>Verifier</b> technology was granted Patent Approval 11/095,914 as “The <b>Verifier</b> Digital Fuel Gauge” from The United States Patent and Trademark Office on September 21, 2007. [...] The <b>Verifier</b> is also ETL SEMKO certified.|$|E
50|$|In any {{authenticated}} on-line transaction, the <b>verifier</b> is {{the party}} that verifies that the claimant has possession {{and control of the}} token that verifies his or her identity. A claimant authenticates his or her identity to a <b>verifier</b> by the use of a token and an authentication protocol. This is called Proof of Possession (PoP). Many PoP protocols are designed so that a <b>verifier,</b> with no knowledge of the token before the authentication protocol run, learns nothing about the token from the run. The <b>verifier</b> and CSP may be the same entity, the <b>verifier</b> and relying party may be the same entity or they may all three be separate entities. It is undesirable for verifiers to learn shared secrets unless they {{are a part of the}} same entity as the CSP that registered the tokens. Where the <b>verifier</b> and the relying party are separate entities, the <b>verifier</b> must convey the result of the authentication protocol to the relying party. The object created by the <b>verifier</b> to convey this result is called an assertion.|$|E
50|$|The IBM 056 was the <b>verifier</b> {{companion}} to the 024 Card Punch and 026 Printing Card Punch. The <b>verifier</b> {{was similar to}} the 026 keypunch except for a red error lens in the machine cover lower center. The <b>verifier</b> operator entered exactly the same data as the keypunch operator and the <b>verifier</b> machine then checked to see if the punched data matched. Successfully verified cards had a small notch punched on the right hand edge.|$|E
5000|$|Credibility: {{the proper}} {{implementation}} of EMAS is assessed by qualified and independent environmental <b>verifiers.</b>|$|R
40|$|Following {{an early}} work of Dwork and Stockmeyer on {{interactive}} proof systems whose <b>verifiers</b> are two-way probabilistic finite automata, the authors initiated in 2004 {{a study on}} the computational power of quantum interactive proof systems whose <b>verifiers</b> are particularly limited to quantum finite automata. As a follow-up to the authors' early journal publication [J. Comput. System Sci., vol. 75, pp. 255 - 269, 2009], we further investigate the quantum nature of interactions between provers and <b>verifiers</b> by studying how various restrictions on quantum interactive proof systems affect the language recognition power of the proof systems. In particular, we examine three intriguing restrictions that (i) provers always behave in a classical fashion, (ii) <b>verifiers</b> always reveal to provers the information on next moves, and (iii) the number of interactions between provers and <b>verifiers</b> is bounded. Comment: A 4, 10 pt, 2 figures, 20 pages. This paper is a complete version of the second half part of the extended abstract appearing in the Proc. of CIAA 2004, LNCS vol. 3317, pp. 225 - 236. A complete version of the first half had already appeared in JCSS, 2009. (*) Please note that there is a substantial text overlap with arXiv:quant-ph/ 0410040 as explained as abov...|$|R
50|$|From {{its third}} series, she has {{appeared}} on Duck Quacks Don't Echo {{as one of the}} <b>verifiers.</b>|$|R
