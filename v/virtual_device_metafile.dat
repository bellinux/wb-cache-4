0|772|Public
50|$|<b>Virtual</b> <b>devices</b> {{may also}} {{operate in a}} non-virtualized environment. For example, a virtual network adapter is used with a virtual private network, while a <b>virtual</b> disk <b>device</b> is used with iSCSI. A good example for <b>virtual</b> <b>device</b> drivers can be Daemon Tools.|$|R
5000|$|High reliability. IRF {{provides}} both link and node redundancy. An IRF <b>virtual</b> <b>device</b> comprises multiple member {{devices that}} operate in 1:N redundancy: the master runs, manages and maintains the IRF <b>virtual</b> <b>device,</b> whereas the slaves process services {{as well as}} functioning as the backups. As soon as the master fails, the IRF <b>virtual</b> <b>device</b> immediately elects a new master to prevent service interruption. In addition, you can aggregate both IRF links of members and the links between the IRF <b>virtual</b> <b>device</b> and its upper or lower layer devices.|$|R
40|$|Virtual prototypes are {{increasingly}} used in device/driver co-development and co-validation to enable early driver development and reduce product time-to-market. However, drivers developed over virtual prototypes {{often do not}} work readily on silicon devices, since silicon devices often {{do not conform to}} virtual prototypes. Therefore, it is important to detect the inconsistences between silicon <b>devices</b> and <b>virtual</b> prototypes. We present an approach to post-silicon conformance checking of a hardware <b>device</b> with its <b>virtual</b> prototype, i. e., a <b>virtual</b> <b>device.</b> The conformance between the silicon and <b>virtual</b> <b>devices</b> is defined over their interface states. This approach symbolically executes the <b>virtual</b> <b>device</b> with the same driver request sequence to the silicon device, and checks if the interface states of the silicon and <b>virtual</b> <b>devices</b> are consistent. Inconsistencies detected indicate potential errors in either the silicon <b>device</b> or the <b>virtual</b> <b>device.</b> We have evaluated our approach on three network adapters and their <b>virtual</b> <b>devices,</b> and found 15 inconsistencies exposing 15 real bugs in total from the silicon and <b>virtual</b> <b>devices.</b> The results demonstrate that our approach is useful and efficient in facilitating device/driver covalidation at the post-silicon stage...|$|R
5000|$|Low cost. The IRF {{technology}} {{creates an}} IRF <b>virtual</b> <b>device</b> from multiple low-end devices, {{and thus the}} IRF <b>virtual</b> <b>device</b> has a higher port density and bandwidth and costs lower than using high-end devices.|$|R
5000|$|<b>Virtual</b> <b>devices</b> can {{be added}} or removed dynamically. The number of <b>virtual</b> <b>devices</b> allowed in {{supported}} configurations depends on the release. Versions after 4.3 support up to 256 when accelerated virtual I/Os are used.|$|R
40|$|Abstract—Device {{drivers are}} a {{principal}} source of failures in computer systems. Therefore, improving driver reliability greatly improves overall system reliability. However, driver development largely has {{to wait until}} a first stable version of the device becomes available. This dependency often leaves not enough time for driver validation. Recently, virtual machines and <b>virtual</b> <b>devices</b> have {{found their way into}} early driver development and validation. <b>Virtual</b> <b>devices</b> enable driver development even before real devices become available and bring complete observability and traceability that evade real devices. We present an approach to static analysis of <b>virtual</b> <b>devices</b> which is central to achieving observability and traceability. This approach exercises the device model of a <b>virtual</b> <b>device</b> by symbolic execution. Based on the result of symbolic execution, a concrete test case is generated for each path through the device model, which has been exercised. We have applied this approach to <b>virtual</b> <b>devices</b> of five network adapters. The results show that this approach is feasible, efficient, and useful. Keywords-Static analysis, <b>virtual</b> <b>device,</b> symbolic execution, test generation I...|$|R
50|$|Simplified {{topology}} and streamlined management. An IRF <b>virtual</b> <b>device</b> {{appears as}} a node on the network. You can log into it by connecting to any port of any member to manage {{all members of the}} IRF <b>virtual</b> <b>device.</b>|$|R
5000|$|Diversified functions. IRF {{provides}} all features {{supported by}} a switch, such as IPv4, IPv6, MPLS, security features, OAA cards, high availability, which can run effectively and stably on the IRF <b>virtual</b> <b>device,</b> and thus expands the application of IRF <b>virtual</b> <b>devices.</b>|$|R
5000|$|Windows 95 was {{designed}} to be maximally compatible with existing MS-DOS and 16-bit Windows programs and device drivers, while offering a more stable and better performing system. The Windows 95 architecture is an evolution of Windows for Workgroups' 386 enhanced mode. The lowest level of the operating system consists {{of a large number of}} <b>virtual</b> <b>device</b> drivers (VxDs) running in 32-bit protected mode and one or more virtual DOS machines running in virtual 8086 mode. The <b>virtual</b> <b>device</b> drivers are responsible for handling physical devices (such as video and network cards), emulating <b>virtual</b> <b>devices</b> used by the virtual machines or providing various system services. The three most important <b>virtual</b> <b>device</b> drivers are: ...|$|R
40|$|Abstract—The dynamic {{composition}} of networked appliances, or <b>virtual</b> <b>devices,</b> enables users to generate complex, strong, and specific systems. Current MANET-based composition schemes use service discovery mechanisms {{that depend on}} periodic service advertising by controlled broadcast, resulting in the unnecessary depletion of node resources. The assumption that, once generated, a <b>virtual</b> <b>device</b> is to remain static is false; the device should gracefully degrade and upgrade along with the conditions in the user’s environment, particularly the network’s current performance requirements. Presently, schemes for infrastructure-less <b>virtual</b> <b>device</b> composition and management do not consider this adaptation. We present a distributed constraint satisfaction problem (distCSP) for <b>virtual</b> <b>device</b> composition in MANETs that addresses these issues together with simulations that show its effectiveness and efficiency. Index Terms—Pervasive computing, multimedia applications, algorithm/protocol design and analysis, mobile environments, constrain...|$|R
40|$|Abstract. Componentbased {{development}} has reusability, maintainability and scalability characteristics. This paper presents a design application components {{which in the}} <b>virtual</b> <b>device</b> emulation software development, the definition of <b>virtual</b> <b>device</b> emulation component, betweenclass structural design and component interaction mechanisms {{of the program in}} the application of the proposed training system and achieved good results...|$|R
50|$|<b>Virtual</b> <b>device</b> drivers {{represent}} a particular variant of device drivers. They {{are used to}} emulate a hardware device, particularly in virtualization environments, for example when a DOS program is run on a Microsoft Windows computer or when a guest operating system is run on, for example, a Xen host. Instead of enabling the guest operating system to dialog with hardware, <b>virtual</b> <b>device</b> drivers take the opposite role and emulates a piece of hardware, so that the guest operating system and its drivers running inside a virtual machine can have the illusion of accessing real hardware. Attempts by the guest operating system to access the hardware are routed to the <b>virtual</b> <b>device</b> driver in the host operating system as e.g., function calls. The <b>virtual</b> <b>device</b> driver can also send simulated processor-level events like interrupts into the virtual machine.|$|R
40|$|Autonomy is an {{effective}} approach to cracking some hard nuts in an intelligent system. In this study on intelligent home network, the focus {{is placed on the}} implementation of autonomy of a device. For this reason, some related concepts such as <b>Virtual</b> <b>Device</b> are introduced in this study. Consisting of a family of function agents and possessing the ability for auto-configuration, auto-announcement, auto-service discovery and so on, a <b>virtual</b> <b>device</b> interacts with users or surrounding devices on behalf of the physical one. Based on the <b>virtual</b> <b>device,</b> the autonomy of a device as well as the entire home network is implemented...|$|R
5000|$|... #Subtitle level 2: Conventions {{of names}} and typical {{behaviour}} of <b>virtual</b> <b>devices</b> ...|$|R
40|$|This paper {{describes}} a {{design and implementation}} of the HNCP-UPnP bridge using a <b>virtual</b> <b>device.</b> HNCP net-worked devices targeted to white goods are allowed to be controlled and monitored by UPnP Control Point. The bridge provides automated creation of a UPnP <b>virtual</b> <b>device</b> and message conversion. The developed system enables in-tegration of a heterogeneous home network. 1...|$|R
25|$|Child {{partitions}} do {{not have}} direct access to hardware resources, but instead have a virtual view of the resources, in terms of <b>virtual</b> <b>devices.</b> Any request to the <b>virtual</b> <b>devices</b> is redirected via the VMBus to the devices in the parent partition, which will manage the requests. The VMBus is a logical channel which enables inter-partition communication. The response is also redirected via the VMBus. If the devices in the parent partition are also <b>virtual</b> <b>devices,</b> it will be redirected further until it reaches the parent partition, where it will {{gain access to the}} physical devices. Parent partitions run a Virtualization Service Provider (VSP), which connects to the VMBus and handles device access requests from child partitions. Child partition <b>virtual</b> <b>devices</b> internally run a Virtualization Service Client (VSC), which redirect the request to VSPs in the parent partition via the VMBus. This entire process is transparent to the guest OS.|$|R
50|$|There {{are several}} {{variants}} of <b>virtual</b> <b>device</b> drivers, such as VxDs, VLMs, VDDs.|$|R
5000|$|VDI - <b>Virtual</b> <b>Device</b> Interface (screen drivers only, {{other drivers}} loaded using GDOS) ...|$|R
30|$|Although {{not shown}} in the illustration, the {{infrastructure}} can trigger recontextualization in response to any event, not just migration. This enables the infrastructure to update {{the contents of the}} <b>virtual</b> <b>device</b> by generating new context data and detaching and re-attaching the <b>virtual</b> <b>device.</b> Using this construct, infrastructure specific settings can be changed during runtime at the convenience of the provider.|$|R
40|$|The way of {{creation}} of real behavior of <b>virtual</b> Ethernet <b>device</b> for opera-tion of power load by IP networks, using software products LabView and Builder C ++ is considered. As a <b>virtual</b> Ethernet <b>device</b> IP-dimmer is presented, which operates five active loads of 220 volt. The power {{part of the}} device is fulfilled on the simistors the operation of which is {{carried out by the}} microcontroller. The <b>virtual</b> <b>device</b> and the program of its operation contain network UDP-socket component – the main interface between the device (server) and program support (client). For visual mapping {{of the state of the}} <b>virtual</b> <b>device</b> work the voltmeters, the indicator of power change on loads and the window of IP-packages reception are entered in addition. The program part of the client and the server has the unit of time saving of all transferring and accepting commands accordingly. Thus, there is a possibility not only to observe the functioning of the <b>virtual</b> <b>device,</b> but also to spend a calculus of its operation...|$|R
40|$|Pervasive {{computing}} {{implies the}} invisibility {{of the technology}} involved in providing ubiquity, such that technology is integrated into the environment and non-intrusive. In such a manner, computing and networking resources become diffused into physical environments, enabling users to exploit their provided functionalities such that functionality is distributed, enabling it to be controlled, monitored, managed, and extended beyond what it was initially designed to do. Moreover, computer awareness moves towards user-centricity, whereby systems seamlessly adapt to the characteristics, preferences, and current situations of users and their respective surrounding environments. Users exploit such functionalities {{in the form of}} a <b>virtual</b> <b>device,</b> whereby a collection of heterogeneous devices in the vicinity of the user are behaving as one single homogeneous device for the benefit of the user in solving some given task. This dissertation investigates the problem of dynamic composition and management of <b>virtual</b> <b>devices</b> for ad hoc multimedia service delivery and proposes an autonomous policy driven framework for <b>virtual</b> <b>device</b> management. The framework consists of a hierarchical structure of distributed elements, including autonomic elements, all working towards the self-management of <b>virtual</b> <b>devices.</b> The research presented in this dissertation addresses the functionalities of these components. More specifically, contributions are made towards the autonomous management of <b>virtual</b> <b>devices,</b> moving away from infrastructure based schemes with heavy user involvement to decentralized and zero touch (i. e., no user involvement) solutions. In doing so, the components and methodology behind a policy-driven autonomous framework for the dynamic discovery, selection, and composition of multimodal multi-device services are presented. The framework operates in an ad hoc network setting and introduces a Service Overlay Network (SON) based definition of a <b>virtual</b> <b>device.</b> Furthermore, device and service discovery, composition, integration, and adaptation schemes are designed for Mobile Ad hoc Network Environments (MANETs) enabling users to generate, on-the-fly, complex strong specific systems, embedding in a distributed manner, QoS models providing compositions that form the best possible <b>virtual</b> <b>device</b> at the time of need. Experimental studies are presented to demonstrate the performance of the proposed schemes...|$|R
40|$|This {{part of the}} {{standard}} describes {{the functions of the}} Computer Graphics Interface concerned with <b>Virtual</b> <b>Device</b> coordinate space and error control. The functionality incorporated in this part is concerned with the management of the graphics image and the interrealtionship of the graphical and non-graphical parts of the interface. The functionality described in this Part pertains to all graphics <b>Virtual</b> <b>Devices</b> (input, output, or input/output) ...|$|R
5000|$|Comprehensive product support. An IRF <b>virtual</b> <b>device</b> can {{be created}} from box-type devices or chassis-type {{distributed}} devices.|$|R
3000|$|... rs {{represents}} the user {{demand for the}} <b>virtual</b> <b>device</b> resource ability in the description: rs = dA(ds 1).|$|R
40|$|The Mobile Operating System Substrate (MOSS) is a {{new system}} {{architecture}} for wireless mobile computing being developed at Harvard. MOSS provides highly efficient, robust and flexible <b>virtual</b> <b>device</b> access over wireless media. MOSS services provide mobile access to such resources as disks, CD ROM drives, displays, wired network interfaces, and audio and video devices. MOSS services are composed of virtual circuits and <b>virtual</b> <b>devices.</b> <b>Virtual</b> circuits (VCs) on wireless media support the spectrum of quality -of-service (QoS) levels required to cover {{a broad range of}} application requirements. <b>Virtual</b> <b>devices</b> implement resource access using VCs as their communication substrate. The tight coupling of network code and device implementations makes it possible to apply device-specific semantics to communications resource management problems. MOSS will enable mobile software systems to adapt dynamically to the rapidly changing computing and communications environment created by mobility. 1. I [...] ...|$|R
5000|$|A layer that abstracts {{multiple}} devices, thereby {{providing a}} single <b>virtual</b> <b>device</b> (e.g. Linux kernel's md and OpenBSD's softraid) ...|$|R
5000|$|Remote Mounting of <b>Virtual</b> <b>Devices</b> such as CD/DVD drive, USB Flash Drives, ISO / Disk {{images and}} Diskette drive ...|$|R
5000|$|A general {{mechanism}} for implementing <b>virtual</b> <b>devices</b> in software running in user processes (which were called [...] "jobs" [...] in ITS).|$|R
40|$|Abstract. This paper {{presents}} two <b>virtual</b> <b>devices</b> made {{to determine}} {{the behavior of the}} bullet before, during impact and after the collision using different materials. First device was based on a pendulum and second was made with springs. The idea of making these <b>virtual</b> <b>devices</b> was to transform the kinetic energy of the projectile before the collision in a potential energy after impact. The difference between these two types of energies was going to deformations phenomena...|$|R
50|$|A mirror {{driver is}} a display driver for a <b>virtual</b> <b>device</b> that mirrors the drawing {{operations}} {{of one or}} more additional physical display devices.|$|R
2500|$|Device {{drivers in}} Windows 9x can be <b>virtual</b> <b>device</b> drivers or (starting with Windows 98) WDM drivers. VxDs usually have the {{filename}} extension [...]vxd or [...]386, whereas WDM compatible drivers usually use the extension [...]sys. The 32-bit VxD message server (msgsrv32) {{is a program}} that is able to load <b>virtual</b> <b>device</b> drivers (VxDs) at startup and then handle communication with the drivers. Additionally, the message server performs several background functions, including loading the Windows shell (such as Explorer.exe or Progman.exe).|$|R
40|$|Digital's PATHWORKS for DOS version 4. 1 {{personal}} computer integration software includes two network <b>virtual</b> <b>device</b> drivers for the Microsoft Windows environment. These drivers allow Windows applications {{operating in a}} protected processor mode and standard DOS applications in a virtual machine to concurrently access services designed to run in real mode under the DOS operating system. The network <b>virtual</b> <b>device</b> drivers, available only in Microsoft Windows enhanced mode, manage DECnet and NetBIOS operations and permit the full use of these interfaces. ...|$|R
5000|$|Device {{drivers in}} Windows 9x can be <b>virtual</b> <b>device</b> drivers or (starting with Windows 98) WDM drivers. VxDs usually have the {{filename}} extension [...]vxd or [...]386, whereas WDM compatible drivers usually use the extension [...]sys. The 32-bit VxD message server (msgsrv32) {{is a program}} that is able to load <b>virtual</b> <b>device</b> drivers (VxDs) at startup and then handle communication with the drivers. Additionally, the message server performs several background functions, including loading the Windows shell (such as Explorer.exe or Progman.exe).|$|R
30|$|With the {{requirements}} in mind, we have considered several approaches for mechanisms that would support recontextualization [6]. An approach using dynamic <b>virtual</b> <b>device</b> mounting {{is found to}} be the most promising solution for recontextualization due to inherent interoperability and support in all major operating systems. Dynamic <b>virtual</b> <b>device</b> mounting is based on dynamically mounting virtual media containing newly generated content in a running VM via the reuse of existing hypervisor interfaces and procedures. Interoperability is achieved by reusing existing drivers for removable media such as USB disks or CD-ROM drives. Recontextualization can be detected by the guest OS by reacting to events triggered when new USB or CD-ROM media is available. The ability to manage <b>virtual</b> <b>devices</b> is also offered by the libvirt API [34], inferring that there is fundamental support for these operations in most major hypervisors.|$|R
40|$|Abstract. In this paper, {{we propose}} a {{simulator}} for facilitating reliable and inexpensive development of ubiquitous applications where each application software controls {{a lot of}} information appliances based on the state of external environment, user’s contexts and preferences. The proposed simulator realistically reproduces behavior of application software on <b>virtual</b> <b>devices</b> in a <b>virtual</b> 3 D space. For this purpose, the simulator provides functions to facilitate deployment of <b>virtual</b> <b>devices</b> in a 3 D space, simulates communication among the devices from MAC level to application level, and reproduces the change of physical quantities (e. g., temperature) caused by devices (e. g., air conditioners). Also, we keep software portability between <b>virtual</b> <b>devices</b> and real devices. As the most prominent function of the simulator, we provide a systematic and visual testing method for testing whether a given application software satisfies specified requirements. ...|$|R
50|$|Virtual Machine Manager (VMM32.VXD): Responsible for memory management, event handling, {{interrupt}} handling, {{loading and}} initializing <b>virtual</b> <b>device</b> drivers, creating new virtual machines and thread scheduling.|$|R
