0|3636|Public
50|$|<b>Value</b> <b>types</b> : <b>Value</b> <b>types</b> {{directly}} contain their data, and {{instances of}} <b>value</b> <b>types</b> are either allocated on the stack or allocated inline in a structure. <b>Value</b> <b>types</b> can be built-in (implemented by the runtime), user-defined, or enumerations.|$|R
5000|$|The circuit files contain five <b>types</b> of <b>statements,</b> some {{of which}} are optional. The <b>statement</b> <b>types</b> are: ...|$|R
50|$|Programming {{languages}} {{that distinguish}} between <b>value</b> <b>types</b> and reference types typically offer a mechanism, called boxing, to wrap {{some or all}} of their <b>value</b> <b>types</b> in reference types. This permits the use of <b>value</b> <b>types</b> in contexts expecting reference types. The converse process (to unwrap the <b>value</b> <b>type)</b> is known as unboxing.|$|R
40|$|The Sketchpad system {{makes it}} {{possible}} for a man and a computer to converse rapidly through the medium of line drawings. Heretofore, most interaction between man and computers has been slowed down by the need to reduce all communication to written statements that can be typed, in the past, we have been writing letters to rather than conferring with our computers, for many types of communication, such as describing the shape of a mechanical part or the connections of an electrical circuit, <b>typed</b> <b>statements</b> can prove cumbersome. The Sketchpad system, by eliminating <b>typed</b> <b>statements</b> (except for legends) in favor of line drawings, opens up a new area of man-machine communication...|$|R
5000|$|<b>Value</b> <b>types</b> do {{not include}} {{constraints}} on how their values are stored. E.g., the type [...] in the example above does not determine byte order, alignment, or even the number of 8-bit bytes used to store the 16 bits of the <b>value</b> <b>type's</b> representation. Since the <b>values</b> underpinning <b>value</b> <b>types</b> are not stored, <b>value</b> <b>types</b> also {{do not include}} a notion of mutation. A type that does determine constraints for storage in random-access memory is often called an object type.|$|R
500|$|Instances of <b>value</b> <b>types</b> do {{not have}} {{referential}} identity nor referential comparison semantics - equality and inequality comparisons for <b>value</b> <b>types</b> compare the actual data values within the instances, unless the corresponding operators are overloaded. <b>Value</b> <b>types</b> are derived from , always have a default value, and can always be created and copied. Some other limitations on <b>value</b> <b>types</b> are that they cannot derive from each other (but can implement interfaces) and cannot have an explicit default (parameterless) constructor. Examples of <b>value</b> <b>types</b> are all primitive types, such as [...] (a signed 32-bit integer), [...] (a 32-bit IEEE floating-point number), [...] (a 16-bit Unicode code unit), and [...] (identifies a specific point in time with nanosecond precision). Other examples are [...] (enumerations) and [...] (user defined structures).|$|R
50|$|Swift also {{differs from}} Objective-C in its usage and {{encouragement}} of <b>value</b> <b>types</b> instead of reference types. Most {{types in the}} Swift standard library are <b>value</b> <b>types</b> and they are copied by reference, whereas classes and closures are reference types and passed by reference. Because <b>value</b> <b>types</b> are copied when passed around, they are deallocated automatically with the reference that created them.|$|R
5000|$|In Java, C# and VB [...]NET the {{constructor}} creates {{objects in}} a special memory structure calledheap for reference <b>types.</b> <b>Value</b> <b>types</b> (such as int, double etc.), are created in a sequential structure called stack.VB [...]NET and C# allow use of new to create objects of <b>value</b> <b>types.</b> However, in those languages even use of new for <b>value</b> <b>types</b> creates objects only on stack.|$|R
40|$|The {{purpose of}} this study was to explore gender and faculty {{differences}} in the importance attributed to particular <b>value</b> <b>types.</b> Rokeach <b>value</b> survey was administered to total (740) students from different departments of Faculty of Economics and Administrative Science and Faculty of Education at Dokuz Eylül University. Three <b>value</b> <b>types</b> were obtained from factor analysis: tradition, universalism and hedonism. Results indicated that female students attributed more importance to three <b>value</b> <b>types</b> than male students did; male students attributed more importance to feminine values than masculine values. Faculty differences were not found in the importance attributed to three <b>value</b> <b>types...</b>|$|R
40|$|In this {{research}} paper The Beta Extreme <b>Value</b> <b>Type</b> (III) distribution which is developed by Zafar and Aleem (2007) is considered and parameters are estimated by using {{moments of the}} Beta-Extreme <b>Value</b> (<b>Type</b> III) Distribution when the parameters ‘m’ & ‘n’ are real and moments of the Beta-Extreme <b>Value</b> (<b>Type</b> III) Distribution when the parameters ‘m��� & ‘n’ are integers and then a Comparison between rth moments about origin when parameters are ‘m’ & ‘n’ are real and when parameters are ‘m’ & ‘n’ are integers. At the end second method, method of Maximum Likelihood is used to estimate the unknown parameters of the Beta Extreme <b>Value</b> <b>Type</b> (III) distribution...|$|R
40|$|We prove {{a generic}} {{vanishing}} <b>type</b> <b>statement</b> in positive characteristic {{and apply it}} to prove positive characteristic versions of Kawamata's theorems: a characterization of smooth varieties birational to ordinary abelian varieties and the surjectivity of the Albanese map when the Frobenius stable Kodaira dimension is zero...|$|R
50|$|The ASK {{statement}} prompts on {{the attached}} teleprinter for input, while the <b>TYPE</b> <b>statement</b> outputs {{text on the}} teleprinter. Multiple items can be output to the teleprinter by appending each item after a comma. An exclamation mark (!) causes a linefeed and carriage return to be sent.|$|R
50|$|Unlike C# and C++, Java has {{no support}} for custom <b>value</b> <b>types</b> at the {{language}} level. Every custom type is a reference type, and therefore has identity and reference semantics, though extending support for custom <b>value</b> <b>types</b> is being considered.|$|R
25|$|Instances of <b>value</b> <b>types</b> reside on the stack, i.e. {{they are}} bound to their {{variable}}s. If you declare a variable for a <b>value</b> <b>type</b> the memory gets allocated directly. If the variable gets out of scope the object is destroyed with it.|$|R
5000|$|In OCaml, {{immutable}} characters, immutable integer numbers, mutable floating-point numbers, immutable tuples, immutable enumerations —including immutable units, immutable booleans, immutable lists, immutable optionals—, immutable {{exceptions are}} immutable formatting strings are <b>value</b> <b>types,</b> while arrays, immutable strings, byte strings and dictionaries—including references—are <b>value</b> <b>types.,</b> ...|$|R
50|$|Because <b>value</b> <b>types</b> have no {{notion of}} a null value {{and can be used}} in arrays without initialization, they always come with an {{implicit}} default constructor that essentially fills the struct memory space with zeroes. The programmer can only define additional constructors with one or more arguments. <b>Value</b> <b>types</b> do not have virtual method tables, and because of that (and the fixed memory footprint), they are implicitly sealed. However, <b>value</b> <b>types</b> can (and frequently do) implement interfaces. For example, the built-in integer types implement several interfaces.|$|R
5000|$|<b>Value</b> <b>Types</b> are envisaged as [...] "Codes like a class, {{works like}} an int!" [...] Synchronization and {{inheritance}} would be excluded for <b>Value</b> <b>Types.</b> These {{would no longer}} require object identity and associated memory/ pointer overheads, though {{would be able to}} assume a 'boxed' form for compatibility.|$|R
40|$|In this paper, we {{consider}} integal operators dened by kernel functions. It {{is well known}} the boundedness of such kind of operators as Shur Lemma <b>type</b> <b>statements.</b> But, the norm of operators was estimated by two integrals of kernel function. We obtain estimation of operators norm by one integral of kernel function. 1...|$|R
40|$|The article {{presents}} the results of a research work aimed at assessing the comprehension of values (the structure of <b>value</b> <b>types</b> and the relations of conflict an compatibility among <b>value</b> <b>types)</b> by chosen samples (N = 446) of adolescents from four different areas (Prekmurje, Slovenian Coast, Italian Trieste and Gorizia, Klagenfurt). Our goal was the assessment of any similarities between results of our study and results obtained by Schwartz as well as the assessment of any similarities between values of adolescents from chosen areas. Results show that (i) in general, there is a substantial match between the location of values per each <b>value</b> <b>type</b> found by Schwartz and the one uncovered by our research, (ii) the number of empirically formed <b>value</b> <b>types</b> does not vary when compared areas share a common social structure, and (iii) empirically found relations of conflict and compatibility between <b>value</b> <b>types</b> from Trieste and Gorizia, Klagenfurt and Slovenian Coast do not differ from each other, while they do differ from the ones found in the sample from Prekmurje...|$|R
50|$|In {{computer}} science, {{the term}} <b>value</b> <b>type</b> {{is commonly used}} to refer to one of two kinds of data types: <b>types</b> of <b>values</b> or <b>types</b> of objects with deep copy semantics.|$|R
5000|$|Nullable <b>value</b> <b>types</b> (denoted by a {{question}} mark, e.g. [...] ) which add [...] {{to the set}} of allowed values for any <b>value</b> <b>type.</b> This provides improved interaction with SQL databases, which can have nullable columns of types corresponding to C# primitive types: an SQL [...] column type directly translates to the C# [...]|$|R
5000|$|Java lacks {{compound}} <b>value</b> <b>types,</b> such as structs in C, {{bundles of}} data that are manipulated directly instead of indirectly via references. <b>Value</b> <b>types</b> can offer significant performance improvements and memory savings in some cases. [...] A typical example is Java's HashMap, which is internally implemented as an array of HashMap.Entry objects. [...] Because Java lacks <b>value</b> <b>types,</b> this array is actually an array of references (pointers) to Entry objects, which in turn contains references to key and value objects. Looking up something in the map requires inefficient double indirection. If Entry were a <b>value</b> <b>type,</b> the array could store pairs of key and value references directly, eliminating the first indirection, increasing locality and reducing memory usage and heap fragmentation. If Java further supported generic primitive types, primitive keys and values could be stored in the array directly, removing the second indirection.|$|R
50|$|Moses and his {{supporters}} considered the book to be overwhelmingly biased against him, {{to the point that}} Moses put out a 23-page <b>typed</b> <b>statement</b> challenging some of its assertions (he claimed he never used the anti-Italian slurs the book attributes to him about Fiorello La Guardia, for instance) and what {{his supporters}} saw as a record of unprecedented accomplishment.|$|R
40|$|Computer {{mediated}} conferencing (CMC) {{has been}} widely viewed as a valuable forum for providing opportunities for interaction among learners in a distance education setting. Interaction in distance contexts; however, is not well under-stood, {{and it has been}} argued that social markers are cued in online communica-tions and that gender influences interaction processes and participation. Earlier research has identified two discourse types, epistolary and expository, that have been associated with gender. This study examined the discourse patterns and styles of 37 women and 27 men involved in a graduate course that used computer conferencing. Predicted patterns of discourse were found; women tended to use more epistolary or aligned <b>type</b> <b>statements,</b> and men tended to use more ex-pository <b>type</b> <b>statements.</b> An investigation of satisfaction, commitment, and pur-pose for interaction indicated that level of satisfaction with interactions was similar, but evidence of gender-related purposive differences and a higher par-ticipation rate for men were found...|$|R
40|$|Does {{extrinsic}} motivation inhibit or foster creativity? Whereas previous researchers {{examined the effects}} of externally controlled {{extrinsic motivation}} on creativity, we focus on the effects of self-determined extrinsic motivation arising from one's personally held core values. In this study, we present a theoretical argument which predicts that (a) creative behavior is fostered by certain <b>value</b> <b>types,</b> inhibited by other <b>value</b> <b>types,</b> and holistically related to the total integrative-dynamic pattern of <b>value</b> <b>types</b> identified by Schwartz (1994), and (b) creative performance is synergistically promoted by the interaction between the Self-Direction <b>value</b> <b>type</b> and intrinsic motivational orientation. These hypotheses were tested in a study of 248 undergraduates whose value priorities and intrinsic motivational orientation were measured by self-report and whose creative performance was assessed across multiple tasks in the verbal, artistic, and mathematical domains. All predictions were supported. Copyright © 2007 by Lawrence Erlbaum Associates, Inc...|$|R
50|$|The {{official}} {{interpretation of}} this section details what <b>types</b> of <b>statements</b> are acceptable.|$|R
5000|$|Hibernate {{supports}} the mapping of custom <b>value</b> <b>types.</b> This makes the following scenarios possible: ...|$|R
5000|$|Corresponding to {{the three}} <b>types</b> of <b>statements,</b> there are three types of SAML queries: ...|$|R
50|$|C# {{allows the}} {{programmer}} to create user-defined <b>value</b> <b>types,</b> using the struct keyword. Unlike classes {{and like the}} standard primitives, such <b>value</b> <b>types</b> are passed and assigned by value rather than by reference. They can also {{be part of an}} object (either as a field or boxed), or stored in an array without the memory indirection that normally exists for class types.|$|R
40|$|Abstract. We prove a Siegel <b>type</b> <b>statement</b> for finitely {{generated}} φ-submodules of Ga under {{the action of}} a Drinfeld module φ. This provides a positive {{answer to a question}} we asked in a previous paper. We also prove an analog for Drinfeld modules of a theorem of Silverman for nonconstant rational maps of P 1 over a number field. 1...|$|R
50|$|Apart {{from the}} {{built-in}} primitive types, Java {{does not include}} the concept of <b>value</b> <b>types.</b>|$|R
5000|$|The {{programmer}} {{must remember}} which item goes in which position in every <b>type</b> of <b>statement.</b>|$|R
40|$|Let p=(p_ 1, [...] .,p_r) be {{a system}} of r polynomials with integer {{coefficients}} of degree d in n variables x=(x_ 1, [...] .,x_n). For a given r-tuple of integers, say s, a general local to global <b>type</b> <b>statement</b> is shown via classical Hardy-Littlewood type methods which provides sufficient conditions for the solubility of p(x) =s {{under the condition that}} each of the x_i's is prime...|$|R
50|$|System: Defines {{the void}} <b>type,</b> a return <b>value</b> <b>type</b> for {{a method that}} does not return a value.|$|R
40|$|Includes abstract. Includes bibliographical {{references}} (leaves 45 - 47). The aim of {{this study}} is to determine whether the Schwartz universal <b>value</b> <b>types</b> are the same for South African students compared to other international studies. A total of 136 students completed the Schwartz Values Survey across three academic study years. The survey reports respondent values and the extent of their religiosity on a Likert-scale. The measure for internal consistency reliability for eight of the ten motivational <b>value</b> <b>types</b> is good, with poor reliability scores for Stimulation and Security. No statistically significant difference presents across the student academic years. The motivational <b>value</b> <b>type</b> Tradition is consistent with a high degree of religiosity. Hedonism is consistent with a low degree of religiosity...|$|R
5000|$|As a {{separate}} structured semantic information (such as coded <b>value</b> <b>types)</b> {{with a set}} of spatial and/or temporal coordinates ...|$|R
