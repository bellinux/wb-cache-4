29|34|Public
50|$|OneLogin {{regularly}} performs penetration {{tests and}} network scans, anti-phishing programs, and runs a bug bounty program and <b>vulnerability</b> <b>disclosure</b> program.|$|E
50|$|In May 2014, Moussouris {{was named}} the Chief Policy Officer at HackerOne, a <b>vulnerability</b> <b>disclosure</b> company based in San Francisco, California. In this role, Moussouris is {{responsible}} for the company's <b>vulnerability</b> <b>disclosure</b> philosophy, and works promote and legitimize security research among organizations, legislators and policy makers. In March 2016, Moussouris was directly involved in creating the Department of Defense's first bug bounty program for hackers, to be organized and vetted by HackerOne.|$|E
5000|$|Wysopal was {{instrumental}} in developing industry guidelines for responsible disclosure of software vulnerabilities. He was a contributor to RFPolicy, the first <b>vulnerability</b> <b>disclosure</b> policy. Together with Steve Christey of MITRE he proposed an IETF RFC titled [...] "Responsible <b>Vulnerability</b> <b>Disclosure</b> Process" [...] in 2002. The process was eventually rejected by the IETF as not within their purview but the process did become the foundation for Organization for Internet Safety, an industry group bringing together software vendors and security researchers {{of which he was}} a founder. In 2001 he founded the non-profit full disclosure mailing list VulnWatch for which was moderator. In 2003 he testified before a United States House of Representatives subcommittee on the topic of vulnerability research and disclosure.|$|E
5000|$|... #Subtitle level 2: Infusion {{pump system}} {{firmware}} <b>vulnerability</b> <b>disclosures</b> ...|$|R
5000|$|However, the {{challenges}} faced in <b>vulnerability</b> <b>disclosures</b> and Incident response by the affected organisations prompted Murthy {{to look at}} the root cause of the issue. Eventually, the foundation was renamed to Information Sharing and Analysis Center (ISAC) after a few months.|$|R
30|$|IBM {{reports in}} Force Threat Intelligence Index 2017 [28], that 2016, {{is the year}} of the mega breach with more than 4 billion records leaked, more than the {{combined}} total of 2014 and 2015 where the numbers of <b>vulnerability</b> <b>disclosures</b> recorded the highest number: 10, 197 vulnerabilities, where the web application <b>vulnerability</b> <b>disclosures</b> made up 22 % of the total. The top attack types are: XSS, Physical access, Brute force, Misconfig, Malvertising, Watering hole, Phishing, SQLi, DDoS, Malware, Heartbleed, and Undisclosed. The industries most frequently breached in 2016 were: Information and communications, Government, Media and entertainment, Financial Services and Professional services. IBM indicates that in 2016 are reported more than 54 million security events, 1019 attacks and 93 security incidents, in monitored client environments. But in 2016 is redefined the meaning of the term “mega breach.” which consists of an incident that results in the leakage of massive data with notable publicly disclosed incidents [28].|$|R
50|$|Bugtraq {{was created}} on November 5, 1993 by Scott Chasin in {{response}} to the perceived failings of the existing Internet security infrastructure of the time, particularly CERT. Bugtraq's policy was to publish vulnerabilities, regardless of vendor response, as part of the full disclosure movement of <b>vulnerability</b> <b>disclosure.</b>|$|E
50|$|In October of {{the same}} year, the DoD {{developed}} a <b>Vulnerability</b> <b>Disclosure</b> Policy (VDP), {{the first of its}} kind created for the U.S. government. The policy outlines the conditions under which hackers may legally explore front-facing programs for security vulnerabilities. The first use of the VDP launched as part of the Hack the Army initiative, which was also the first time this branch of the US military welcomed hackers to find and report security flaws in its systems.|$|E
5000|$|Responsible {{disclosure}} {{fails to}} satisfy security researchers who {{expect to be}} financially compensated, while reporting vulnerabilities to the vendor with the expectation of compensation might be viewed as extortion. While a market for vulnerabilities has developed, vulnerability commercialization remains a hotly debated topic tied {{to the concept of}} <b>vulnerability</b> <b>disclosure.</b> Today, the two primary players in the commercial vulnerability market are iDefense, which started their vulnerability contributor program (VCP) in 2003, and TippingPoint, with their zero-day initiative (ZDI) started in 2005. These organisations follow the responsible disclosure process with the material bought. Between March 2003 and December 2007 an average 7.5% of the vulnerabilities affecting Microsoft and Apple were processed by either VCP or ZDI. [...] Independent firms financially supporting responsible disclosure by paying bug bounties include Facebook, Google, Mozilla, and Barracuda Networks.|$|E
40|$|Reviewing {{literature}} on open source and closed source security {{reveals that the}} discussion is often determined by biased attitudes toward one of these development styles. The discussion specifically lacks appropriate metrics, methodology and hard data. This paper contributes to solving this problem by analyzing and comparing published vulnerabilities of eight open source software and nine closed source software packages, {{all of which are}} widely deployed. Thereby, it provides an extensive empirical analysis of vulnerabilities in terms of mean time between <b>vulnerability</b> <b>disclosures,</b> the development of disclosure over time, and the severity of vulnerabilities, and allows for validating models provided in the literature. The investigation reveals that (a) the mean time between <b>vulnerability</b> <b>disclosures</b> was lower for open source software in half of the cases, while the other cases show no differences, (b) in contrast to literature assumption, 14 out of 17 software packages showed a significant linear or piecewise linear correlation between time and the number of published vulnerabilities, and (c) regarding the severity of vulnerabilities, {{no significant differences were found}} between open source and closed source...|$|R
40|$|International audienceOver time, {{hardware}} designs have constantly {{grown in}} complexity and modern platforms involve multiple interconnected hardware components. During the last decade, several <b>vulnerability</b> <b>disclosures</b> have proven that trust in hardware can be misplaced. In this article, we give a formal definition of Hardware-based Security Enforcement (HSE) mechanisms, {{a class of}} security enforcement mechanisms such that a software component relies on the underlying hardware platform {{to enforce a security}} policy. We then model a subset of a x 86 -based hardware platform specifications and we prove the soundness of a realistic HSE mechanism within this model using Coq, a proof assistant system...|$|R
2500|$|Hash <b>disclosure</b> <b>vulnerabilities</b> in Quakenbush Windows NT Password Appraiser, Jan 1999 ...|$|R
50|$|Responsible {{disclosure}} is {{a computer}} security term describing a <b>vulnerability</b> <b>disclosure</b> model. It is like full disclosure, with the addition that all stakeholders agree to allow {{a period of time}} for the vulnerability to be patched before publishing the details. Developers of hardware and software often require time and resources to repair their mistakes. Hackers and computer security scientists have the opinion that it is their social responsibility to make the public aware of vulnerabilities with a high impact. Hiding these problems could cause a feeling of false security. To avoid this, the involved parties join forces and agree on a period of time for repairing the vulnerability and preventing any future damage. Depending on the potential impact of the vulnerability, the expected time needed for an emergency fix or workaround to be developed and applied and other factors, this period may vary between a few days and several months. It is easier to patch software by using the Internet as a distribution channel.|$|E
40|$|Vulnerabilities in {{information}} systems {{have always been}} the Achilles heel of digital security. Ransomware-campaigns such as WannaCry and (Not) Petya highlighted the global and multidimensional nature of vulnerabilities and showed how substantial the impact of these could be for many aspects of the daily life. <b>Vulnerability</b> <b>disclosure</b> is a valuable instrument to report and solve these vulnerabilities to increase the security of information systems and prevent such events from happening. However, EU’s legal landscape for <b>vulnerability</b> <b>disclosure</b> is fragmented, and vulnerability researchers have to deal with legal uncertainty. Therefore, this thesis focuses on how the EU can increase the resilience of its cyber ecosystem through stimulating <b>vulnerability</b> <b>disclosure.</b> The purpose of this study will be to describe the different policy instruments the EU may use to stimulate coordinated <b>vulnerability</b> <b>disclosure</b> and prescribe which ones would be most valuable for increasing the EU’s cyber resilience. Coordinated <b>vulnerability</b> <b>disclosure</b> refers to the approach of disclosing vulnerabilities in the security of information systems in a controlled and responsible manner. This thesis will combine an analysis of primary and secondary sources – using technical and non-technical perspectives to bring these two worlds closer together to develop effective cybersecurity policies. To provide a deeper understanding of how the EU could construct a resilient cyber ecosystem: insight on cybersecurity, the resilience of ecosystems and security governance will be combined. Concluding, it is recommended that the EU uses a mix of regulatory instruments making optimal use of the expertise of the private sector to stimulate coordinated <b>vulnerability</b> <b>disclosure.</b> The outcomes are timely because in September 2017 a new EU Cyberstrategy will be presented...|$|E
40|$|Abstract: Vulnerability {{is one of}} the {{key factors}} that cause {{security}} incidents and has become a major international threat to network security. Vulnerability is a weakness which allows an attacker to reduce a system's information assurance. <b>Vulnerability</b> <b>disclosure</b> or the disclosure of a vulnerability is the revelation of a vulnerability to the public at large. Previous work like Common Vulnerabilities and Exposures (CVE) offered to manage vulnerability. However, it had significant disadvantages in coverage and regional differences. The mechanisms of <b>vulnerability</b> <b>disclosure</b> in non-English speaking countries are less developed than the ones in English-speaking countries. International Vulnerability Database Alliance (IVDA) is proposed as an alliance model which consists of security organizations from different countries. IVDA provides an open channel for security organizations to share their efforts across the world. The evaluation of IVDA shows that the international alliance is rational and effective in <b>vulnerability</b> <b>disclosure...</b>|$|E
40|$|We report {{preliminary}} results on analyzing a large dataset of over 35 billion alerts recorded over a 5 year period by Hewlett-Packard (HP) TippingPoint Intrusion Prevention System (IPS) devices located in over 1, 000 customer networks worldwide. This dataset provides a rich view {{into the nature}} of attacks, both external and internal, across diverse networks. This paper presents our initial findings. For example, (i) while most customers are among the early victims {{of only a handful of}} attacks, a few customers are early victims of a large number of attacks, (ii) vendor <b>vulnerability</b> <b>disclosures</b> sometimes lead to a surge in exploit attempts, and (iii) even after a decade, some worms such as Slammer show very significant spikes in their activity and infection rates...|$|R
5000|$|Elias Levy (also {{known as}} Aleph One) was the {{moderator}} of [...] "Bugtraq", a full <b>disclosure</b> <b>vulnerability</b> mailing list, from May 14, 1996 until October 15, 2001.|$|R
40|$|The {{impressive}} {{prevalence of}} Internet has contributed {{a lot to}} the collection and analysis of personal data, thus posting threats to people’s privacy. This research aims at understanding the antecedents and consequences of privacy concerns within online purchase context by an empirical study based on 113 Chinese online users of young or middle age. Consumers’ perceived <b>vulnerability</b> to <b>disclosure,</b> perceived control over the content and ways of disclosure, and previous experience of online shopping were proposed as three antecedents of privacy concerns online. And the impacts of privacy concerns on consumers’ willingness to disclosure under online purchase circumstances as well as the moderating role of trust towards the websites were examined. The findings of this research suggest that the higher consumers’ perceived <b>vulnerability</b> to <b>disclosure</b> online, the stronger their privacy concerns would be. Contrarily, perceived control over the manner and prior online shopping experience are both negatively related to consumers’ privacy concerns. The examination on the relationships between privacy concerns, trust, and disclosure intentions indicate that when faced with an untrustworthy shopping website, consumers with higher privacy concerns would be less willing to disclose information to the website than consumers with lower privacy concerns would be. Further discussion and business implication on the findings were expatiated in the end of the study...|$|R
40|$|Software <b>vulnerability</b> <b>disclosure</b> {{has become}} a {{critical}} area of concern for policy-makers. Traditionally, Computer Emergency Response Team (CERT) has been acting as an infomediary between benign identifiers (who report vulnerability information voluntarily) and software users. After verifying a reported vulnerability, the infomediary [...] CERT [...] sends out a public "advisory" so that users can safeguard their systems against potential exploits. Of late, firms such as iDefense have been implementing a different market-based approach for <b>vulnerability</b> <b>disclosure</b> where the "market-based" infomediary provides monetary rewards to identifiers for each vulnerability disclosed to it. The infomediary shares this information with its client base. Using this information, clients protect themselves against attacks that exploit those specific vulnerabilities...|$|E
40|$|<b>Vulnerability</b> <b>disclosure</b> {{is an area}} {{of public}} policy that has been subject to {{considerable}} debate, particularly between proponents of full and instant disclosure, and those of limited or no disclosure. This paper is an attempt to empirically test the impact of vulnerability information disclosure and availability of patches on attackers ’ tendency to exploit vulnerabilities on one hand and on the vendors ’ tendency to release patches on the other. Our results suggest that while vendors are quick to respond to instant disclosure, <b>vulnerability</b> <b>disclosure</b> also increases the frequency of attacks. However, the frequency of attacks decreases over time. We also find that open source vendors patch more quickly than closed source vendors and that large vendors are more responsive...|$|E
40|$|Software <b>vulnerability</b> <b>disclosure</b> {{has become}} a {{critical}} area of concern for policymakers. Traditionally, a Computer Emergency Response Team (CERT) acts as an infomediary between benign identifiers (who voluntarily report vulnerability information) and software users. After verifying a reported vulnerability, CERT sends out a public advisory so that users can safeguard their systems against potential exploits. Lately, firms such as iDefense have been implementing a new market-based approach for vulnerability information. The market-based infomediary provides monetary rewards to identifiers for each vulnerability reported. The infomediary then shares this information with its client base. Using this information, clients protect themselves against potential attacks that exploit those specific vulnerabilities. The key question addressed in our paper is whether movement toward such a market-based mechanism for <b>vulnerability</b> <b>disclosure</b> leads to a better social outcome. Our analysis demonstrates that an active unregulated market-based mechanism for vulnerabilities almost always underperforms a passive CERT-type mechanism. This counterintuitive result is attributed to the market-based infomediary's incentive to leak the vulnerability information inappropriately. If a profit-maximizing firm {{is not allowed to}} (or chooses not to) leak vulnerability information, we find that social welfare improves. Even a regulated market-based mechanism performs better than a CERT-type one, but only under certain conditions. Finally, we extend our analysis and show that a proposed mechanism [...] -federally funded social planner [...] -always performs better than a market-based mechanism. information security, software vulnerabilities, <b>vulnerability</b> <b>disclosure,</b> game theory, public policy...|$|E
2500|$|The Mozilla Foundation {{offers a}} [...] "bug bounty" [...] (US$3,000 to US$7,500 cash reward) to {{researchers}} who discover severe security holes in Firefox. Official guidelines for handling security <b>vulnerabilities</b> discourage early <b>disclosure</b> of <b>vulnerabilities</b> {{so as not}} to give potential attackers an advantage in creating exploits.|$|R
40|$|The use of {{information}} technologies in control systems poses additional potential threats due to the frequent <b>disclosure</b> of software <b>vulnerabilities.</b> The management {{of information}} security involves a series of policy-making on the <b>vulnerability</b> discovery, <b>disclosure,</b> patch development and patching. In this paper, we use a system approach to devise a model to understand the interdependencies of these decision processes. In more details, we establish a theoretical framework for making patching decision for control systems, {{taking into account the}} requirement of functionability of control systems. We illustrate our results with numerical simulations and show that the optimal operation period of control systems given the currently estimated attack rate is roughly around a half a month...|$|R
40|$|Bugs in the {{authorisation}} {{logic of}} web applications can expose {{the data of}} one user to another. Such data <b>disclosure</b> <b>vulnerabilities</b> are common - they {{can be caused by}} a single omitted access control check in the application. We make the observation that, while the implementation of the authorisation logic is complex and therefore error-prone, most web applications only use simple access control models, in which each piece of data is accessible by a user or a group of users. This makes it possible to validate the correct operation of the authorisation logic externally, based on the observed data in HTTP traffic to and from an application. We describe FlowWatcher, an HTTP proxy that mitigates data <b>disclosure</b> <b>vulnerabilities</b> in unmodified web applications. Flow-Watcher monitors HTTP traffic and shadows part of an applications access control state based on a rule-based specification of the user-data-access (UDA) policy. The UDA policy states the intended data ownership and how it changes based on observed HTTP requests. FlowWatcher detects violations of the UDA policy by tracking data items that are likely to be unique across HTTP requests and responses of different users. We evaluate a prototype implementation of FlowWatcher as a plug-in for the Nginx reverse proxy and show that, with short UDA policies, it can mitigate CVE bugs in six popular web applications...|$|R
40|$|Software <b>vulnerability</b> <b>disclosure</b> has {{generated}} intense interest and debate. In particular, {{there have been}} arguments made both in opposition to and in favor of alternatives such as full and instant disclosure and limited or no disclosure. An important consideration in this debate is {{the behavior of the}} software vendor. Does <b>vulnerability</b> <b>disclosure</b> policy have an effect on patch release behavior of software vendors? This paper compiles a unique data set from CERT/CC and Security Focus databases to answer this question. Our results suggest that early disclosure has significant positive impact on the vendor patching speed. Open source vendors patch more quickly than closed source vendors and severe vulnerabilities are patched faster. We also find that vendors respond slower to vulnerabilities not disclosed by CERT/CC. This might reflect unmeasured differences in the severity and importance of vulnerabilities. It might also reflect the stronger lines of communication between CERT/CC and vendors, and the value of the vulnerability analysis by CERT/CC. We also find that vendors are more responsible after the 9 / 11 event...|$|E
40|$|Due to {{the rapid}} {{evolution}} of technology, IT software has become incredibly complex. However the human factor still has {{a very important role}} on the application of it, since people are responsible to create software. Consequently, software vulnerabilities represent inevitable drawbacks, found to cost extremely large amounts of money to the companies. “Heartbleed” is a recently discovered vulnerability with no prior investigation that answers questions about the impact it has to the companies affected. This paper focuses on the impact of it on the market value of the companies who participated in the <b>vulnerability</b> <b>disclosure</b> process {{with the help of an}} event study methodology. Furthermore our analysis investigates if there is a different affection to the value of the company based on the roles those companies had in the process. Our results suggest that the market did not punish the companies about the existence of vulnerability. However the general negative reaction of the market to the incident reflects the importance of a strategic <b>vulnerability</b> <b>disclosure</b> plan for such cases...|$|E
40|$|Criminals proofed {{repeatedly}} {{to be very}} fast adopters of new technologyThe last two decades saw an incredible rise in importance of information systems for the economy and for society [...] accompanied by increased interest {{in the way in}} which vulnerability information is managed and tradedinformation about security vulnerabilities has become a valuable assetVulnerability commercialization remains a contentious issue (linked to the concept of <b>vulnerability</b> <b>disclosure)</b> However, a market for vulnerabilities & exploits has developed, and is explodingVulnerabilities are abundan...|$|E
40|$|Researchers in {{the area}} of {{information}} security have mainly been concerned with tools, techniques and policies that firms can use to protect themselves against security breaches. However, information security is as much about security software as it is about secure software. Software is not secure when it has defects or flaws which can be exploited by hackers to cause attacks such as unauthorized intrusion or denial of service attacks. Any public announcement about a software defect is termed as ‘vulnerability disclosure’. Although research in software economics have studied firms’ incentive to improve overall quality, there have been no studies to show that software vendors have an incentive to invest in building more secure software. In this paper, we use the event study methodology to examine the role that financial markets play in determining software vendors’ incentives to build more secure software. We collect data from leading national newspapers and industry sources like CERT by searching for reports on published software vulnerabilities. We show that <b>vulnerability</b> <b>disclosures</b> lead to a negative and significant change in market value for a software vendor. On average, a vendor loses around 0. 6 % value in stock price when a vulnerability is reported. This is equivalent to a loss in market capitalization values of $ 0. 86 billion per vulnerability announcement. To provide further insight, we use the information content of the disclosure announcement to classify vulnerabilities into various types. We find that the change in stock price is more negative if the vendor fails to provide a patch at the time of <b>disclosure.</b> Moreover, <b>vulnerabilities</b> which cause a confidentiality related breach cause a greater decline in the market value for a vendor than the vulnerabilities which cause non-confidentiality related breaches. Also, more severe flaws have a significantly greater impact than flaws with low or moderate severity. Finally, we find that the markets do not punish a software vendor more severely if a third party discovers a flaw in its product than if the vendor itself discovers the flaw. Our analysis provides many interesting implications for software vendors as well as policy makers...|$|R
50|$|This {{argument}} presupposes that vulnerability {{discovery is}} a mutually exclusive event, {{that only one}} person can discover a vulnerability. There are many examples of vulnerabilities being discovered simultaneously, often being exploited in secrecy before discovery by other researchers. While there may exist users who cannot benefit from <b>vulnerability</b> information, full <b>disclosure</b> advocates believe this demonstrates a contempt for the intelligence of end users. While it's true that some users cannot benefit from vulnerability information, if they're concerned with the security of their networks {{they are in a}} position to hire an expert to assist them as you would hire a mechanic to help with a car.|$|R
40|$|Abstract — Most of {{the attacks}} on {{computer}} systems are due {{to the presence of}} vulnerabilities in software. Recent trends show that number of newly discovered vulnerabilities still continue to be significant. Studies have also shown that the time gap between the <b>vulnerability</b> public <b>disclosure</b> and the release of an automated exploit is getting smaller. Therefore, assessing vulnerabilities exploitability risk is critical as it aids decision-makers prioritize among vulnerabilities, allocate resources, and choose between alternatives. Several methods have recently been proposed in the literature to deal with this challenge. However, these methods are either subjective, requires human involvement in assessing exploitability, or do not scale. In this research, our aim is to first identify vulnerability exploitation risk problem. Then, we introduce a novel vulnerability exploitability metric based on software structure properties viz. : attack entry points, vulnerability location, presence of dangerous system calls, and reachability. Based on our preliminary results, reachability and the presence of dangerous system calls appear to be a good indicator of exploitability. Next, we propose using the suggested metric as feature to construct a model using machine learning techniques for automatically predicting the risk of vulnerability exploitation. To build a vulnerability exploitation model, we propose using Support Vector Machines (SVMs). Once the predictor is built, given unseen vulnerable function and their exploitability features the model can predict whether the given function is exploitable or not...|$|R
40|$|Network Intrusion Detection Systems (NIDS) monitor {{network traffic}} looking for {{attempts}} to compromise {{the security of}} the system they protect. Signature-based NIDS rely on a set of known attack patterns to match malicious traffic. Accordingly, they are unable to detect a specific attack until a specific signature for the corresponding vulnerability is created, tested, released and deployed. Although vital, the delay in the updating process of these systems has not been studied in depth. This paper presents a comprehensive statistical analysis of this delay in relation to the <b>vulnerability</b> <b>disclosure</b> time, the updates of vulnerability detection systems (VDS), the software patching releases and the publication of exploits. The widely deployed NIDS Snort and its detection signatures release dates have been used. Results show that signature updates are typically available later than software patching releases. Moreover, Snort rules are generally released within the first 100 days from the <b>vulnerability</b> <b>disclosure</b> and most of the times exploits and the corresponding NIDS rules are published with little difference. Implications of these results are drawn in the context of security policy definition. This study can be easily kept up to date due to the methodology used. Publicad...|$|E
40|$|Software <b>vulnerability</b> <b>disclosure</b> {{has been}} a {{critical}} area of concern for policy makers. Traditionally, benign identifiers who report vulnerability information and users of the software. After verifying a reported vulnerability, the infomediary [...] CERT [...] sends out a public "advisory" to inform software users about it. In this traditional mechanism, reporting vulnerabilities is voluntary with no explicit monetary gains to benign identifiers. Of late, firms such as iDefense have been proposing a different market-based mechanism. In this market-based mechanism, the infomediary rewards identifiers for each vulnerability disclosed to it. The infomediary then shares this information with its clients who are users of this software. Using this information, clients can protect themselves against attacks that exploit those specific vulnerabilities...|$|E
40|$|Practical {{computer}} (in) {{security is}} largely {{driven by the}} existence of and knowledge about vulnerabilities, which can be exploited to breach security mechanisms. Although the discussion on details of responsible <b>vulnerability</b> <b>disclosure</b> is controversial, there {{is a sort of}} consensus that better information sharing is socially beneficial. In the recent years we observe the emerging of “vulnerability markets ” as means to stimulate exchange of information. However, this term subsumes a broad range of different concepts, which are prone to confusion. This paper provides a first attempt to structure the field by (1) proposing a terminology for distinct concepts and (2) defining criteria to allow for a better comparability between different approaches. An application of this framework on four market types shows notable differences between the approaches...|$|E
40|$|Cryptography {{has become}} an {{indispensable}} mechanism for securing systems, communications and applications. While offering strong protection, cryptography makes the assumption that cryptographic keys are kept absolutely secret. In general this assumption {{is very difficult to}} guarantee in real life because computers may be compromised relatively easily. In this paper we investigate a class of attacks, which exploit memory <b>disclosure</b> <b>vulnerabilities</b> to expose cryptographic keys. We demonstrate that the threat is real by formulating an attack that exposed the private key of an OpenSSH server within 1 minute, and exposed the private key of an Apache HTTP server within 5 minutes. We propose a set of techniques to address such attacks. Experimental results show that our techniques are efficient (i. e., imposing no performance penalty) and effective — unless a large portion of allocated memory is disclosed...|$|R
40|$|Abstract — In {{computers}} security terms, vulnerability is {{a flaw in}} {{the computer}} system due to a bug or weakness in software, security policy and/or overall system configuration. Vulnerabilities are recognized if they are exploited by attackers using a tool to allow system violation. Unfortunately, {{there is no one}} standard for vulnerability reporting to date, and the debate continues between supporters of full discloser, non-discloser and responsible disclosure. We follow the responsible disclosure definition outlined by Shepherd, by reporting the issue to the vendor first and give a month to the vendor to establish a meaningful connection or provide a suitable fix [1]. Otherwise, go public with full disclosure. In this paper we discuss techniques to exploit a weakness in Yahoo messenger client. We successfully build a Trojan, called Caruso, which basically allows the attacker {{to gain access to the}} victim’s Yahoo account without the need to crack the password. Index Terms—Vulnerability <b>disclosure,</b> <b>vulnerabilities,</b> exploits, Trojans, Yahoo messenger...|$|R
40|$|Return-oriented {{programming}} (ROP) {{has become}} the primary exploitation technique for system compromise {{in the presence of}} non-executable page protections. ROP exploits are facilitated mainly by the lack of complete address space randomization coverage or the pres-ence of memory <b>disclosure</b> <b>vulnerabilities,</b> necessitating additional ROP-specific mitigations. Existing defenses against ROP exploits either require source code or symbolic debugging information, or impose a significant runtime overhead, which limits their applicability for the protection of third-party applications. We propose two novel techniques to prevent ROP exploits on third-party applications without requiring their source code or debug symbols, {{while at the same time}} incurring a minimal performance overhead. Their effectiveness is based on breaking an invariant of ROP attacks: knowledge of the code layout, and a common characteristic: unrestricted use of indirect branches. When combined, they still retain their applicability and efficiency, while maximizing the protection coverage against ROP. The first technique, in-place code randomization, uses narrow-scope code transforma-tions that can be applied statically, without changing the location of basic blocks, allowin...|$|R
