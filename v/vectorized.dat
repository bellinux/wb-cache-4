1099|0|Public
25|$|Most {{operations}} on the GPU {{operate in a}} <b>vectorized</b> fashion: one operation can be performed on up to four values at once. For example, if one color , G1, B1> is to be modulated by another color , G2, B2>, the GPU can produce the resulting color *R2, G1*G2, B1*B2> in one operation. This functionality is useful in graphics because almost every basic data type is a vector (either 2-, 3-, or 4-dimensional). Examples include vertices, colors, normal vectors, and texture coordinates. Many other applications can put this to good use, and because of their higher performance, vector instructions, termed single instruction, multiple data (SIMD), have long been available on CPUs.|$|E
2500|$|Programs {{that create}} <b>vectorized</b> {{functions}} for programs in higher-level languages such as C. [...] In the higher-level language this is sometimes aided by compiler intrinsic functions which map directly to SIMD mnemonics, but nevertheless {{result in a}} one-to-one assembly conversion specific for the given vector processor.|$|E
2500|$|The PPE is the Power Architecture based, dual issue in-order two-way multithreaded core with 23-stages {{pipeline}} {{acting as}} the controller for the eight SPEs, which handle most of the computational workload. PPE has limited out of order execution capabilities, it can perform loads out of order and has delayed execution pipelines. [...] The PPE will work with conventional operating systems due to its similarity to other 64-bit PowerPC processors, while the SPEs are designed for <b>vectorized</b> floating point code execution. The PPE contains a 64 KiB level 1 cache (32 KiB instruction and a 32 KiB data) and a 512 KiB Level 2 cache. The size of a cache line is 128 bytes. Additionally, IBM has included an AltiVec(VMX) unit which is fully pipelined for single precision floating point (Altivec 1 does not support double precision floating-point vectors.), 32-bit Fixed Point Unit (FXU) with 64-bit register file per thread, Load and Store Unit (LSU), 64-bit Floating-Point Unit (FPU) , Branch Unit (BRU) and Branch Execution Unit(BXU).|$|E
5000|$|Eighteen of {{the twenty}} {{original}} Maxwell's equations can be <b>vectorized</b> into 6 equations. Each <b>vectorized</b> equation represents 3 original equations in component form. Including {{the other two}} equations, in modern vector notation, they can form a set of eight equations. They are listed below: ...|$|E
50|$|Self-dependence by scalars can be <b>vectorized</b> by {{variable}} elimination.|$|E
5000|$|For {{computational}} convenience, this expression can be <b>vectorized</b> as ...|$|E
50|$|Cyclic {{dependencies}} must {{be processed}} {{independently of the}} <b>vectorized</b> instructions.|$|E
5000|$|... #Caption: The {{photograph}} at left <b>vectorized</b> with RaveGrid, 1.64 MB ...|$|E
5000|$|In mathematics, {{especially}} in linear algebra and matrix theory, the commutation matrix {{is used for}} transforming the <b>vectorized</b> form of a matrix into the <b>vectorized</b> form of its transpose. Specifically, the commutation matrix K(m,n) is the mn × mn matrix which, for any m × n matrix A, transforms vec(A) into vec(AT): ...|$|E
5000|$|... #Caption: <b>Vectorized</b> {{drawings}} of an 1876 {{sketch of the}} Nassak Diamond.|$|E
5000|$|Nearest Neighbor Search - Iterative Python {{algorithm}} and <b>vectorized</b> NumPy version ...|$|E
50|$|In earlier versions, Nautilus {{included}} original <b>vectorized</b> icons {{designed by}} Susan Kare.|$|E
5000|$|... #Caption: Same {{photograph}} <b>vectorized</b> with AutoTrace in the Delineate GUI, 677 KB ...|$|E
5000|$|The natural {{conjugate}} prior {{using the}} <b>vectorized</b> variable [...] {{is of the}} form: ...|$|E
50|$|In {{geographic}} information systems (GIS) satellite or aerial images are <b>vectorized</b> to create maps.|$|E
50|$|In {{graphic design}} and photography, {{graphics}} can be <b>vectorized</b> for easier usage and resizing.|$|E
5000|$|An {{efficient}} <b>vectorized</b> Gaussian integral package allowing high {{angular momentum}} basis functions and general contractions.|$|E
5000|$|... #Caption: <b>Vectorized</b> two-color (black & white) {{variant of}} the {{signature}} of Christopher Columbus, 19 kB ...|$|E
5000|$|In {{the common}} {{case of an}} {{incompressible}} Newtonian fluid, the Stokes equations take the (<b>vectorized)</b> form: ...|$|E
5000|$|... #Caption: Same {{photograph}} <b>vectorized</b> with Inkscape's [...] "Trace Bitmap" [...] function, {{based on}} potrace, 1.05 MB ...|$|E
50|$|Intel's MMX, SSE, AVX and Power Architecture's AltiVec and ARM's NEON {{instruction}} sets {{support such}} <b>vectorized</b> loops.|$|E
5000|$|Loop(s): All <b>vectorized</b> (or not) loops, {{separated}} by SCCs clusters {{in order of}} appearance in the original code.|$|E
50|$|For example, {{consider}} a program fragment containing three statement groups inside a loop: (SCC1+SCC2), SCC3 and SCC4, in that order, {{in which only}} the second group (SCC3) can be <b>vectorized.</b> The final program will then contain three loops, one for each group, with only the middle one <b>vectorized.</b> The optimizer cannot join the first with the last without violating statement execution order, which would invalidate the necessary guarantees.|$|E
5000|$|<b>Vectorized</b> index {{operations}} are also supported. As an example, even = x(2::2); odd = x(::2);is how one would use Fortran to create arrays from the even and odd entries of an array. Another common use of <b>vectorized</b> indices is a filtering operation. Consider a clipping {{operation of a}} sine wave where amplitudes larger than 0.5 are to be set to 0.5. Using S-Lang, {{this can be done}} by ...|$|E
5000|$|AVX-512 Conflict Detection Instructions (CDI) {{efficient}} {{conflict detection}} {{to allow more}} loops to be <b>vectorized,</b> supported by Knights Landing ...|$|E
5000|$|Some array {{programming}} languages include <b>vectorized</b> {{expressions and}} matrix operations as non-ASCII formulas, mixed with conventional control structures. Examples are: ...|$|E
5000|$|Multilinear {{subspace}} {{learning is}} {{an approach to}} dimensionality reduction. [...] Dimensionality reduction can be performed on a data tensor whose observations have been <b>vectorized</b> and organized into a data tensor, or whose observations are matrices that are concatenated into a data tensor. [...] Here are some examples of data tensors whose observations are <b>vectorized</b> or whose observations are matrices concatenated into data tensor images (2D/3D), video sequences (3D/4D), and hyperspectral cubes (3D/4D).|$|E
5000|$|Advisor [...] "Survey" [...] feature {{which helps}} to vectorize scalar {{part of the}} code or improve {{performance}} of already <b>vectorized</b> loops.|$|E
50|$|Instruction {{sets are}} architecture-specific: some {{processors}} lack SIMD instructions entirely, so programmers must provide non-vectorized implementations (or different <b>vectorized</b> implementations) for them.|$|E
5000|$|AVX-512 Conflict Detection Instructions (CD) {{efficient}} {{conflict detection}} {{to allow more}} loops to be <b>vectorized,</b> supported by Knights Landing and Skylake X ...|$|E
5000|$|The [...] {{function}} is automatically <b>vectorized.</b> For instance:> ifelse (c (0, 2) < 1, [...] "true", [...] "false")1 [...] "true" [...] "false" ...|$|E
5000|$|... 1843: fax machine: a scanning, rasterized, digital {{replacement}} for the <b>vectorized,</b> analog telautograph."The Secret Life of the Fax Machine" [...] by Tim Hunkin ...|$|E
50|$|In {{computer-aided}} design (CAD) drawings (blueprints etc.) are scanned, <b>vectorized</b> and written as CAD files {{in a process}} called paper-to-CAD conversion or drawing conversion.|$|E
50|$|Many {{constraints}} {{prevent or}} hinder vectorization. Loop dependence analysis identifies loops {{that can be}} <b>vectorized,</b> relying on the data dependence of the instructions inside loops.|$|E
50|$|Future {{versions}} of the Python interface will add support for passing data via NumPy types (and therefore support <b>vectorized</b> operations), and present a more Pythonic interface.|$|E
50|$|A {{command-line}} compiler reads SequenceL {{code and}} generates highly parallelized, <b>vectorized,</b> C++, and optionally OpenCL, {{which must be}} linked with the SequenceL runtime library to execute.|$|E
