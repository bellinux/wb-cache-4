10000|10000|Public
5|$|Delhi is {{included}} in India's seismic zone-IV, indicating its <b>vulnerability</b> to major earthquakes.|$|E
5|$|A {{security}} <b>vulnerability</b> {{was reported}} on April 7, 2007, by Nitesh Dhanjani and Rujith. Since Twitter used {{the phone number}} of the sender of an SMS message as authentication, malicious users could update someone else's status page by using SMS spoofing. The <b>vulnerability</b> could be used if the spoofer knew the phone number registered to their victim's account. Within {{a few weeks of}} this discovery, Twitter introduced an optional personal identification number (PIN) that its users could use to authenticate their SMS-originating messages.|$|E
5|$|According to the Bureau of Indian Standards, {{the town}} falls under seismic zone 3, in {{a scale of}} 2 to 5 (in order of {{increasing}} <b>vulnerability</b> to earthquakes).|$|E
50|$|OpenSSL publishes 9 <b>vulnerabilities</b> and {{released}} version 1.0.1i fixing the <b>vulnerabilities.</b> LibreSSL releases version 2.0.5 fixing the 6 <b>vulnerabilities</b> that {{were also found}} in LibreSSL.|$|R
30|$|Similar to the {{inevitable}} software <b>vulnerabilities,</b> hardware <b>vulnerabilities</b> broadly exist as well. Unsafe hardware architecture and complex production processes are two main factors of hardware <b>vulnerabilities.</b>|$|R
5000|$|HP Application Security Center {{solutions}} helped {{find and}} fix security <b>vulnerabilities</b> for web applications throughout the application software development lifecycle (SDLC). By catching security <b>vulnerabilities</b> {{early in the}} application development lifecycle, organizations could reduce web attacks and <b>vulnerabilities</b> in their web applications. While some security <b>vulnerabilities</b> may exist in the web server or application infrastructure, at least 80 percent of those <b>vulnerabilities</b> existed in the web application itself.|$|R
5|$|Differences in <b>vulnerability</b> to lead-induced {{neurological}} damage {{between males and}} females have also been found, but some studies have found males to be at greater risk, while others have found females to be.|$|E
5|$|In July 2017 the {{critical}} WiFi <b>vulnerability</b> BroadPwn affecting many iOS devices, including the iPad 2 was published. It allows an attacker to remotely {{take control of}} all affected devices within WiFi range without any user interaction. Since iOS 9 is in its end of life the iPad 2 won't receive a security patch for this <b>vulnerability,</b> making it dangerous to use them further.|$|E
5|$|Some MacBooks are {{affected}} by the iSeeYou <b>vulnerability,</b> potentially allowing their iSight cameras to record the user without the user's knowledge.|$|E
50|$|Security bug (security defect) is a {{narrower}} concept: there are <b>vulnerabilities</b> {{that are not}} related to software: hardware, site, personnel <b>vulnerabilities</b> are examples of <b>vulnerabilities</b> that are not software security bugs.|$|R
40|$|Software {{applications}} and systems are {{the backbone of}} most services in our lives, which makes software security a critical concern to users and organizations. Achieving the maximum level of security is crucial when developing software applications. To achieve such security, software developers {{must be aware of}} the potential security <b>vulnerabilities</b> within the software programming languages they use. Many programming languages suffer from major security <b>vulnerabilities</b> such as C and C++, which are known for buffer overflow <b>vulnerabilities.</b> Java on the other hand is known for its immunity against such traditional security <b>vulnerabilities.</b> Even though Java provides a higher level of security than other programming languages, it still suffers from potential security <b>vulnerabilities.</b> This document illustrates some of the potential security <b>vulnerabilities</b> within the Java software execution environment. Security <b>vulnerabilities</b> are illustrated through sample code and discussions. The document also proposes mitigations for the corresponding security <b>vulnerabilities...</b>|$|R
40|$|Since early 70 s, {{software}} <b>vulnerabilities</b> {{have been}} classified and measured for various purposes including software assurance. Out of many software <b>vulnerabilities,</b> C <b>vulnerabilities</b> {{are the most}} common subject discussed, classified and measured. However, there are still gaps in those early works as C <b>vulnerabilities</b> still exist and reported by various security advisors. The most common and highly ranked is C overflow <b>vulnerabilities.</b> Therefore, we propose this taxonomy, which classified all existing overflow <b>vulnerabilities</b> including four <b>vulnerabilities</b> that have never been classified before. We also provide a guideline to identified and avoid these <b>vulnerabilities</b> from source code perspective. We ensure our taxonomy is constructed to meet the characteristics of well-defined taxonomy. We also evaluate our taxonomy by classifying various software security advisories and reports using our taxonomy. As a result, our taxonomy is complete and comprehensive, and hence, is a valuable reference to be used as part of software assurance processes...|$|R
5|$|The {{publication}} of proof-of-concept attack code is common among academic researchers and <b>vulnerability</b> researchers.|$|E
5|$|The ram finally {{fell out}} of favour in the 1880s, as the same effect could be {{achieved}} with a torpedo, with less <b>vulnerability</b> to quick-firing guns.|$|E
5|$|<b>Vulnerability</b> Protection: Updates {{daily to}} stop cybercriminals from using {{vulnerabilities}} in applications and other software to sneak threats onto your computer.|$|E
40|$|Abstract. Access control <b>vulnerabilities</b> can be {{disastrous}} in Web appli-cations. The <b>vulnerabilities</b> might be introduced when developers set up unsafe policies in design phase or inconsistently implement safe policies. Attackers {{take advantage of}} the <b>vulnerabilities</b> to obtain the authority of administrator and the sensitive information of another user. Hence, the early detection of access control <b>vulnerabilities</b> is very important. This paper proposes a dynamic analysis that automatically detects ac-cess control <b>vulnerabilities</b> in web applications. Given a web site and authorities, accessible URLs for each authority are collected by crawling the web site, and then a chosen subset of the URLs are tested to check whether or not access control <b>vulnerabilities</b> exist for the given author-ity. We implemented the idea, experimented it with some selected web applications, and found some real access-control <b>vulnerabilities...</b>|$|R
50|$|OpenSSL publishes seven <b>vulnerabilities.</b> and {{releases}} versions 1.0.1n and 1.0.2b with fixes for the <b>vulnerabilities.</b> LibreSSL confirms {{that three of}} these <b>vulnerabilities</b> apply to LibreSSL as well and one is still under review, releases 2.1.7 and 2.2.0.|$|R
40|$|Abstract—Most web {{applications}} contain security <b>vulnerabilities</b> {{that result}} in high rate of SQL injection and crosssite scripting attacks present-day. The most of <b>vulnerabilities</b> {{is the result of}} improper or none input validation by web application. The Tainted Mode approach is widely used for detection of such <b>vulnerabilities.</b> This paper presents the implementation of Tainted Mode approach to finding security <b>vulnerabilities</b> for Python technology...|$|R
5|$|After the {{disaster}} caused by Hurricane Mitch, {{countries around the}} world donated significant aid, totaling $6.3billion (1998USD). Throughout Central America, which was recovering from an economic crisis that occurred in 1996, many wished to continue the growth of the infrastructure and economy. In addition, after witnessing the <b>vulnerability</b> to hurricanes, the affected governments endeavored to prevent such a disaster from occurring again.|$|E
5|$|As {{the plant}} grows, it will sprout leaves; these both {{increase}} {{the growth rate}} and increase its <b>vulnerability</b> to the insects. Once the plant reaches a predetermined height, the player {{will be able to}} advance to the next level. A life will be deducted whenever the plant dies or the player makes contact with an insect.|$|E
5|$|Gomułka felt {{proud and}} secure {{after the new}} treaty with West Germany, his {{milestone}} political achievement. It signified a lasting trend in Poland's international policy: extricating the country from the disproportional dependence on Russia, and compensating the security <b>vulnerability</b> by building good relations with Germany.|$|E
40|$|Many <b>vulnerabilities</b> in today’s {{software}} {{products are}} rehashes of past <b>vulnerabilities.</b> Developers are often unaware of past problems {{or they are}} unable to keep track of <b>vulnerabilities</b> that others have reported and solved. Interestingly, this is not because of a scarcity of information. In fact, a plethora of information about past <b>vulnerabilities</b> is available to developers. Most software development projects dedicate some effort to documenting, tracking, and studying reported <b>vulnerabilities.</b> This information is recorded in project repositories, such as change logs in source code version control systems...|$|R
50|$|Securing coding is the {{practice}} of developing computer software {{in a way that}} guards against the accidental introduction of security <b>vulnerabilities.</b> Defects, bugs and logic flaws are consistently the primary cause of commonly exploited software <b>vulnerabilities.</b> Through the analysis of thousands of reported <b>vulnerabilities,</b> security professionals have discovered that most <b>vulnerabilities</b> stem from {{a relatively small number of}} common software programming errors. By identifying the insecure coding practices that lead to these errors and educating developers on secure alternatives, organizations can take proactive steps to help significantly reduce or eliminate <b>vulnerabilities</b> in software before deployment.|$|R
40|$|Software {{security}} <b>vulnerabilities</b> {{are discovered}} on an almost daily basis and have caused substantial damage. It {{is vital to}} be able to detect and resolve them as early as possible. One of early detection approaches is to consult with the prior known <b>vulnerabilities</b> and corresponding patches. With the hypothesis that recurring software <b>vulnerabilities</b> are due to software reuse, we conducted an empirical study on several databases for security <b>vulnerabilities</b> and found several recurring and similar software security <b>vulnerabilities</b> occurring in different software systems. Most of recurring <b>vulnerabilities</b> occur in the systems that reuse source code, share libraries/APIs or reuse at a higher level of abstraction (e. g. algorithms, protocols, or specifications). The finding suggests that one could effectively detect and resolve some unreported <b>vulnerabilities</b> in one software system by consulting the prior known and reported <b>vulnerabilities</b> in the other systems that reuse/share source code, libraries/APIs, or specifications. To help developers with this task, we developed SecureSync, a supporting tool to automatically detect recurring software <b>vulnerabilities</b> in different systems that share source code or libraries, which are the most frequent types of recurring <b>vulnerabilities.</b> SecureSync is designed to work with a semi-automatically built knowledge base of the prior known/reported <b>vulnerabilities,</b> including the corresponding systems, libraries, and vulnerable and patched code. To help developers check and fix the vulnerable code, SecureSync also provides some suggestions such as adding missed function calls, adding checking of an input/output of a function call, replacing the operators in an expression, etc. We conducted an evaluation on 60 <b>vulnerabilities</b> of with the totals of 176 releases in 119 open-source software systems. The result shows that SecureSync is able to detect recurring <b>vulnerabilities</b> with high accuracy and to identify several vulnerable code locations that are not yet reported or fixed even in mature systems...|$|R
5|$|However, {{despite their}} <b>vulnerability,</b> some women in rural Malawi {{believe that they}} do, to a certain extent, have {{control over their own}} health and well-being. They tell their husbands that the HIV/AIDS {{epidemic}} has made sexual infidelity extremely dangerous and encourage them to refrain from engaging in extramarital sexual contact. In addition, many women are convinced that, by appealing to the <b>vulnerability</b> of their children (who will probably be orphaned if their parents contract HIV), they can convince their husbands to use condoms consistently during extramarital sexual encounters. Other women seek support from their friends and family members when they believe that their husbands' unsafe behaviors are putting their lives at risk. Finally, as a last resort, women might warn their husbands that they will visit the ankhoswe, or traditional marriage counselor, and demand divorce if their husbands refuse to remain faithful and actively prevent the transmission of the disease.|$|E
5|$|In 1981, it was {{believed}} the B-1 could be in operation before the ATB, covering the transitional period between the B-52's increasing <b>vulnerability</b> and the ATB's introduction. Reagan decided the best solution was to procure both the B-1 and ATB, and on 2 October 1981 he announced that 100 B-1s were to be ordered to fill the LRCA role.|$|E
5|$|In August 2014, it {{was made}} public that the Heartbleed <b>vulnerability</b> enabled hackers to steal {{security}} keys from Community Health Systems, the second-biggest for-profit U.S. hospital chain in the United States, compromising the confidentiality of 4.5 million patient records. The breach happened a week after Heartbleed was first made public.|$|E
40|$|Malicious Input through Buffer Overflow (MiBO) <b>vulnerabilities</b> play {{important}} roles in cyber security. To identify MiBO <b>vulnerabilities,</b> white-box testing approaches analyze instructions in all possible execution paths. Black-box testing approaches try to trigger MiBO <b>vulnerabilities</b> using different inputs. However, only limited coverage can be achieved: the identified MiBO <b>vulnerabilities,</b> when being "hit" by a test input, must cause exceptions (e. g., crashes). Type information could help to catch the non-crash MiBO <b>vulnerabilities,</b> but such information is not contained in binary code. In this paper, we present a white-box fuzzing method to detect non-crash MiBO <b>vulnerabilities.</b> Without source code, we dynamically discover likely memory layouts to help the fuzzing process. This is very challenging since memory addresses and layouts keep changing with the running of software. In different executions with different inputs, the layouts may also change. To address these challenges, we selectively analyze memory operations to identify memory layouts. If a buffer border identified from the memory layout is exceeded, an error will be reported. The fuzzing results will {{be compared with the}} layout for future input generation, which greatly increases the opportunity to expose MiBO <b>vulnerabilities.</b> We implemented a prototype called ArtFuzz and performed several evaluations. ArtFuzz discovered 23 real MiBO <b>vulnerabilities</b> (including 8 zero-day MiBO <b>vulnerabilities)</b> in nine applications. Malicious Input through Buffer Overflow (MiBO) <b>vulnerabilities</b> play {{important roles}} in cyber security. To identify MiBO <b>vulnerabilities,</b> white-box testing approaches analyze instructions in all possible execution paths. Black-box testing approaches try to trigger MiBO <b>vulnerabilities</b> using different inputs. However, only limited coverage can be achieved: the identified MiBO <b>vulnerabilities,</b> when being "hit" by a test input, must cause exceptions (e. g., crashes). Type information could help to catch the non-crash MiBO <b>vulnerabilities,</b> but such information is not contained in binary code. In this paper, we present a white-box fuzzing method to detect non-crash MiBO <b>vulnerabilities.</b> Without source code, we dynamically discover likely memory layouts to help the fuzzing process. This is very challenging since memory addresses and layouts keep changing with the running of software. In different executions with different inputs, the layouts may also change. To address these challenges, we selectively analyze memory operations to identify memory layouts. If a buffer border identified from the memory layout is exceeded, an error will be reported. The fuzzing results will be compared with the layout for future input generation, which greatly increases the opportunity to expose MiBO <b>vulnerabilities.</b> We implemented a prototype called ArtFuzz and performed several evaluations. ArtFuzz discovered 23 real MiBO <b>vulnerabilities</b> (including 8 zero-day MiBO <b>vulnerabilities)</b> in nine applications...|$|R
40|$|We examine <b>vulnerabilities</b> {{of several}} {{reliable}} multicast protocols. The various mechanisms employed by these protocols to provide reliability can present <b>vulnerabilities.</b> We show {{how some of}} these <b>vulnerabilities</b> can be exploited in denial-of-service attacks, and discuss potential mechanisms for withstanding such attacks...|$|R
40|$|Many {{studies have}} {{reported}} concurrent relationships between depressive symptoms and various personality, cognitive, and personality-cognitive <b>vulnerabilities,</b> but the degree of overlap among these <b>vulnerabilities</b> is unclear. Moreover, whereas most investigations of these <b>vulnerabilities</b> have focused on depression, their possible relationships with anxiety have not been adequately examined. The present study included 550 high school juniors and examined the cross-sectional relationships among neuroticism, negative inferential style, dysfunctional attitudes, sociotropy, and autonomy, {{with a wide range}} of anxiety and depressive symptoms, as well as the incremental validity of these different putative <b>vulnerabilities</b> when examined simultaneously. Correlational analyses revealed that all five <b>vulnerabilities</b> were significantly related to symptoms of both anxiety and depression. Whereas neuroticism accounted for significant unique variance in all symptom outcomes, individual cognitive and personality-cognitive <b>vulnerabilities</b> accounted for small and only sometimes statistically significant variance across outcomes. Importantly, however, for most outcomes the majority of symptom variance was accounted for by shared aspects of the <b>vulnerabilities</b> rather than unique aspects. Implications of these results for understanding cognitive and personality-cognitive <b>vulnerabilities</b> to depression and anxiety are discussed. Full Tex...|$|R
5|$|In a 2013 {{analysis}} of over 170,000 website defacements, published by Zone-H, {{the most frequently}} (53%) used technique was exploitation of file inclusion <b>vulnerability,</b> mostly related to insecure usage of the PHP functions include, require, and allow_url_fopen.|$|E
5|$|On 10 November 2015, Microsoft {{released}} a security update to mitigate a security <b>vulnerability</b> in BitLocker that allowed authentication to be bypassed by employing a malicious Kerberos key distribution center, if the attacker had physical {{access to the}} machine, the machine was part of domain and had no PIN or USB protection.|$|E
5|$|Only {{two of the}} disc's 11 tracks {{attempt a}} genuine {{expression}} of <b>vulnerability.</b> Just one, 'Blank Page,' finds her looking inside and taking some blame. It's a pretty song, if one that blatantly rides Adele's coattails. Not only does 'Page' employ the same piano/voice arrangement as that star's 'Someone Like You,' Aguilera apes the precise length of Adele's notes.|$|E
40|$|The {{primary goal}} of the Individual Plant Examination (IPE) Program was for licensees to {{identify}} plant-unique <b>vulnerabilities</b> and actions to address these <b>vulnerabilities.</b> A review of these <b>vulnerabilities</b> and plant improvements that were identified in the IPEs was performed {{as part of the}} IPE Insights Program sponsored by the U. S. Nuclear Regulatory Commission (NRC). The purpose of this effort was to characterize the identified <b>vulnerabilities</b> and the impact of suggested plant improvements. No specific definition for {open_quotes}vulnerability{close_quotes} was provided in NRC Generic Letter 88 - 20 or in the subsequent NRC IPE submittal guidance documented in NUREG- 1335. Thus licensees were left to use their own definitions. Only 20 % of the plants explicitly stated that they had <b>vulnerabilities.</b> However, most licensees identified other plant improvements to address issues not explicitly classified as <b>vulnerabilities,</b> but pertaining to areas in which overall plant safety could potentially be increased. The various definitions of {open_quotes}vulnerability{close_quotes} used by the licensees, explicitly identified <b>vulnerabilities,</b> proposed plant improvements to address these <b>vulnerabilities,</b> and other plant improvements are summarized and discussed...|$|R
40|$|Since 2002, over 10 % {{of total}} cyber <b>vulnerabilities</b> were SQL {{injection}} <b>vulnerabilities.</b> Since most developers are not experienced software security practitioners, {{a solution for}} correctly fixing SQL injection <b>vulnerabilities</b> that does not require security expertise is desirable. In this paper, we propose an automated method for removing SQL injection <b>vulnerabilities</b> from Java code by converting plain text SQL statements into prepared statements. Prepared statements restrict the way that input can affect {{the execution of the}} statement. An automated solution allows developers to remove SQL injection <b>vulnerabilities</b> by replacing vulnerable code with generated secure code. In a formative case study, we tested our automated fix generation algorithm on five toy Java programs which contained seeded SQL injection <b>vulnerabilities</b> and a set of object traceability issues. The results of our case study show that our technique was able remove SQL injection <b>vulnerabilities</b> in five different statement configurations. 1...|$|R
40|$|The {{number of}} {{reported}} web application <b>vulnerabilities</b> is increasing dramatically. The {{most of the}} <b>vulnerabilities</b> result from improper input validation. This paper presents extensions to the Tainted Mode Model (TMM) which allows inter module <b>vulnerabilities</b> detection. Besides, this paper presents {{a new approach to}} vulnerabilit...|$|R
