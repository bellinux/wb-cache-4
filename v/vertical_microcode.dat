7|1|Public
50|$|As {{transistors}} became cheaper, horizontal microcode came {{to dominate}} the design of CPUs using microcode, with <b>vertical</b> <b>microcode</b> being used less often.|$|E
50|$|In <b>vertical</b> <b>microcode,</b> each {{microinstruction}} {{is significantly}} encoded that is, the bit fields generally pass through intermediate combinatory logic that, in turn, generates the actual control and sequencing signals for internal CPU elements (ALU, registers, etc.). This {{is in contrast}} with horizontal microcode, in which the bit fields themselves either directly produce the control and sequencing signals or are only minimally encoded. Consequently, <b>vertical</b> <b>microcode</b> requires smaller instruction lengths and less storage, but requires more time to decode, resulting in a slower CPU clock.|$|E
50|$|The early {{machines}} in the series (including the 2116) were direct-execution machines but the 2100 and later machines were microprogrammed. The 2100 offered a writable control store allowing the user to extend and change the <b>vertical</b> <b>microcode.</b>|$|E
50|$|When both <b>vertical</b> and {{horizontal}} <b>microcode</b> are used, the horizontal microcode may {{be referred to}} as nanocode or picocode.|$|R
50|$|Microcode can be {{characterized}} as horizontal or vertical, referring primarily to whether each microinstruction controls CPU elements with little or no decoding (horizontal microcode) or requires extensive decoding by combinatorial logic before doing so (<b>vertical</b> <b>microcode).</b> Consequently, each horizontal microinstruction is wider (contains more bits) and occupies more storage space than a vertical microinstruction.|$|E
50|$|Many RISC and VLIW {{processors}} {{are designed}} to execute every instruction (as {{long as it is}} in the cache) in a single cycle. This is very similar to the way CPUs with microcode execute one microinstruction per cycle. VLIW processors have instructions that behave similarly to very wide horizontal microcode, although typically without such fine-grained control over the hardware as provided by microcode. RISC instructions are sometimes similar to the narrow <b>vertical</b> <b>microcode.</b>|$|E
50|$|Some <b>vertical</b> <b>microcode</b> is {{just the}} {{assembly}} language of a simple conventional computer that is emulating a more complex computer. Some processors, such as DEC Alpha processors and the CMOS microprocessors on later IBM System/390 mainframes and z/Architecture mainframes, have PALcode (the term used on Alpha processors) or millicode (the term used on IBM mainframe microprocessors). This {{is a form of}} machine code, with access to special registers and other hardware resources not available to regular machine code, used to implement some instructions and other functions, such as page table walks on Alpha processors.|$|E
40|$|A proven {{method of}} obtaining high {{performance}} for Prolog programs is to first translate them into the instruction set of Warrenâ€™s Abstract Machine, or W-code [l]. From that point, there are several models of execution available. This paper describes one of them:- the compilation of W-code directly into the <b>vertical</b> <b>microcode</b> of a general purpose host processor, the NCR/ 32 - 000. The result is the fastest functioning Prolog system known to the authors. We describe the implementation, provide benchmark measurements, and analyze our results. 1...|$|E

