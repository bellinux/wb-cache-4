0|10000|Public
30|$|The study <b>of</b> {{economic}} <b>dispatch</b> {{dates back}} to the 1920 s. The spatial and temporal distribution variation of load demand is the prime cause <b>of</b> economic <b>dispatch.</b> The goal <b>of</b> <b>dispatch</b> is the advanced decision-making for base-point generations of units and configuration of spinning reserves based on load forecast. From classical economic dispatch centering on the concepts of incremental cost, incremental loss and hydro-coal conversion equivalent in the mid and late of 1950 s [1], to the optimal power flow considering network security in the 1960 s [2], thence to the theories <b>of</b> <b>dispatch</b> and control which emphasizing the coordination <b>of</b> <b>dispatch</b> and automatic generation control (AGC) in the 1980 s [3, 4], the study <b>of</b> economic <b>dispatch</b> has been relatively mature in theory and practice.|$|R
5000|$|<b>Verification</b> <b>of</b> Mortgage (VOM) or <b>Verification</b> <b>of</b> Payment (VOP) ...|$|R
5000|$|In The Best <b>of</b> <b>Dispatch,</b> a book {{containing}} {{guitar and}} voice transcriptions <b>of</b> selected <b>Dispatch</b> songs, Chad Urmston describes [...] "The General": ...|$|R
40|$|A {{deductive}} {{approach to}} <b>verification</b> <b>of</b> telecommunication systems written in C is proposed. The approach {{is based on}} the extension of C by declarative statements and on reduction <b>of</b> <b>verification</b> <b>of</b> parallel communicating components of these systems to separate <b>verification</b> <b>of</b> components written in this extension. An example <b>of</b> <b>verification</b> <b>of</b> a data link protocol is considered. </p...|$|R
40|$|This {{thesis is}} {{dedicated}} to the automatic and formal <b>verification</b> <b>of</b> the heap propertiesofobjectorientedprograms. Programverificationisthecheckthat a given program satisfies given properties. Program verification is called formal if both the semantics of the specifications and the program execution are defined formally as mathematical entities. The verification is called automatic if it is performed automatically without interaction or with limited interaction with a user. Our approach is targeted towards the <b>verification</b> <b>of</b> the preservation of heap-topological properties. It is also aimed towards the <b>verification</b> <b>of</b> the effects and the frame properties of the program statements. Automatic <b>verification</b> <b>of</b> heap structures is crucial for the <b>verification</b> <b>of</b> multi-object invariants, the <b>verification</b> <b>of</b> concurrent programs (e. g., absence of race conditions and deadlocks), software engineering (e. g., enabling encapsulation and modular development, handlingdesign patterns), and the <b>verification</b> <b>of</b> security properties (e. g., isolation) ...|$|R
40|$|ISBN: 0444893679 The {{application}} of BDD-based proof methods {{to the formal}} <b>verification</b> <b>of</b> HDL constructs is discussed. Applications include the <b>verification</b> <b>of</b> combinational circuits specified by means <b>of</b> vector-expressions, the <b>verification</b> <b>of</b> the logic of processors, the equivalence-roof of synchronous finite-state machines, and symbolic model-checking...|$|R
5000|$|<b>Verification</b> <b>of</b> program {{evaluation}} processes of university programs in Quebec through its Commission <b>of</b> <b>verification</b> <b>of</b> {{program evaluation}} (CVEP) ...|$|R
40|$|We {{establish}} {{conditions under}} which the experimental <b>verification</b> <b>of</b> quantum error-correcting behavior against a linear set of error operators suffices for the <b>verification</b> <b>of</b> noiseless subsystems of an error algebra contained in. From a practical standpoint, our results imply that the <b>verification</b> <b>of</b> a noiseless subsystem need not require the explicit <b>verification</b> <b>of</b> noiseless behavior for all possible initial states of the syndrome subsystem. Comment: 6 pages, no figures, REVTeX 4 styl...|$|R
30|$|The <b>verification</b> <b>of</b> {{this step}} follows {{the same pattern}} as in the <b>verification</b> <b>of</b> Step  4 in the proof of Theorem  3.1.|$|R
30|$|The {{time and}} cost <b>of</b> <b>dispatching</b> the vehicle are known.|$|R
40|$|The {{following}} {{topics are}} covered in viewgraph form: (1) introduction to clock synchronization protocols; (2) a schematic formulation of clock synchronization; (3) the interactive convergence algorithm; (4) <b>verification</b> <b>of</b> Schneider's formulation; (5) <b>verification</b> <b>of</b> interactive convergence; (6) a hardware-oriented clock synchronization protocol; (7) <b>verification</b> <b>of</b> Infis/Moore's protocol; and (8) the EHDM specification/verification environment...|$|R
5000|$|Chad Urmston, Class of 1994, singer-songwriter <b>of</b> <b>Dispatch</b> and State Radio ...|$|R
5000|$|Fossil fuels {{are capable}} <b>of</b> <b>dispatching</b> {{electricity}} whenever there is demand.|$|R
5000|$|... #Subtitle level 2: Cost <b>of</b> <b>dispatching</b> {{payments}} to 120 crore citizens ...|$|R
5000|$|Cremers' {{publications}} cover security, cryptography, ISO standards, automated <b>verification</b> <b>of</b> security protocols, {{and formal}} methods. His thesis was entitled [...] "Scyther - Semantics and <b>Verification</b> <b>of</b> Security Protocols", and was supervised by Sjouke Mauw and Erik de Vink. Also published with Sjouke Mauw is their book [...] "Operational Semantics and <b>Verification</b> <b>of</b> Security Protocols".|$|R
40|$|Description of PID and PSD {{controllers}} structures. <b>Verification</b> <b>of</b> {{function of}} heterogeneous structures of PSD controllers on typicall transfer functions. Respones to changes of input value. Effect of change of sampling period on PSD cotrollers. <b>Verification</b> <b>of</b> influence of derivative part of PS-D and S-PD controllers...|$|R
40|$|Covering arrays [...] . is a {{test suite}} [...] for <b>verification</b> <b>of</b> {{interactions}} between components. N. Francetic ́ (Monash) CARLs September 22, 2014. Covering arrays [...] . {{is a test}} suite [...] for <b>verification</b> <b>of</b> interactions between components. N. Francetic ́ (Monash) CARLs September 22, 2014. Covering arrays [...] . is a test suite [...] for <b>verification</b> <b>of</b> interactions between components...|$|R
40|$|Since many {{applications}} require the <b>verification</b> <b>of</b> large sets of signatures, {{it is sometimes}} advantageous to perform a simultaneous <b>verification</b> instead <b>of</b> checking each signature individually. The simultaneous processing, called batching, must be provably equivalent to the sequential <b>verification</b> <b>of</b> all signatures...|$|R
30|$|Dispatched MAs is {{the number}} <b>of</b> <b>dispatched</b> MAs to gather data from CHs.|$|R
30|$|Using {{the results}} of Lemma 1, we can replace <b>verification</b> <b>of</b> {{positive}} definiteness of matrix S_ 4 by <b>verification</b> <b>of</b> positive definiteness of two matrices of lower dimensionality.|$|R
30|$|Hence, batch_j is the {{selection}} order <b>of</b> <b>dispatch</b> <b>of</b> {{a batch of}} request. Also, the arrow “→” points to the I/O queue from which the batch is selected.|$|R
40|$|In {{this paper}} we propose a {{methodology}} for the deductive <b>verification</b> <b>of</b> outof -order scheduling algorithms. A `top-down' scheme for the systematic definition of system invariants is defined. The complementary use of predicted values, auxiliary fields storing a <b>dispatch</b> time prediction <b>of</b> an instruction's value, is proposed as a means of further simplifying the <b>verification</b> <b>of</b> systems in this class. We illustrate the use of the `top-down' methodology and predicted values in the <b>verification</b> <b>of</b> three out-of-order scheduling algorithms, including a detailed discussion <b>of</b> the <b>verification</b> <b>of</b> a model based on the Mips R 10000...|$|R
40|$|In this paper, {{the effects}} <b>of</b> <b>dispatching</b> rules on the {{scheduling}} performance of job-shops with different flexibility levels are analyzed. Four different flexibility levels are defined for operations. Five dispatching rules are evaluated according to mean tardiness as the performance {{criteria for the}} scheduling system. Performance variations <b>of</b> <b>dispatching</b> rules among different machine flexibility levels are determined and statistically analyzed. It is found out after detailed analysis that the effect <b>of</b> <b>dispatching</b> rule selection on job shop performance weakens as the job shop flexibility increases. This important finding {{should be taken into}} account while designing scheduling systems for job shops that are flexible. Flexible job shop scheduling Dispatching rules Flexibility Optimization...|$|R
30|$|Transducers {{installation}} and check (in particular, <b>verification</b> <b>of</b> verticality {{because of the}} only Z-displacement monitoring); connection to control unit and <b>verification</b> <b>of</b> the correct operating of the measuring system.|$|R
5000|$|Citizenship. Subject {{must be a}} U.S. citizen. Independent <b>verification</b> <b>of</b> {{citizenship}} received {{directly from}} appropriate registration authority. For foreign-born immediate family members, <b>verification</b> <b>of</b> citizenship or legal status is also required.|$|R
40|$|A {{number of}} methodologies for verifying systems and {{computer}} based tools that assist users in verifying their systems were developed. These tools {{were applied to}} verify in part the SIFT ultrareliable aircraft computer. Topics covered included: STP theorem prover; design <b>verification</b> <b>of</b> SIFT; high level language code verification; assembly language level verification; numerical algorithm verification; <b>verification</b> <b>of</b> flight control programs; and <b>verification</b> <b>of</b> hardware logic...|$|R
40|$|No. 3 revised {{was issued}} Dec. 1, 1903, as Bureau {{circular}} no. 1, with title: <b>Verification</b> <b>of</b> standards and measuring instruments. No. 2 revised was issued Dec. 1, 1903, as Bureau circular no. 2, with title: <b>Verification</b> <b>of</b> metal tapes. 1. Announcement of organization. January 1, 1902. [...] 2. The <b>verification</b> <b>of</b> tapes. May 1, 1902. [...] 3. The <b>verification</b> <b>of</b> standards and standard measuring instruments. June 1, 1903. [...] 4. Table of equivalents of the customary and metric weights and measures. 1 st ed. 1903. Mode of access: Internet. grad: No. 1 - 3 lackin...|$|R
40|$|Abstract: There are {{two main}} streams for the <b>verification</b> <b>of</b> digital systems: Theorem proving methods such as term {{rewriting}} are used for the <b>verification</b> <b>of</b> data oriented systems, and model checking of temporal logics is usually used for the <b>verification</b> <b>of</b> control dominated systems. While theorem proving is an inherently interactive verification method, model checking is performed automatically. In this paper, we investigate for the <b>verification</b> <b>of</b> algorithms for computing the discrete cosine transform by means of term rewriting and model checking. We show {{the advantages and disadvantages}} of both approaches at different abstraction levels of the design. ...|$|R
40|$|The present paper {{deals with}} the <b>verification</b> <b>of</b> a {{numerical}} simulation technique of fluid-structure interaction (FSI) problems. The configuration of the task consists of viscous incompressible fluid around an elastic cylindrical thin-walled structure where the external flow is fully turbulent (Reynolds numbers Re= 1. 2 • 107). The verification {{is divided into three}} stages: 1) <b>verification</b> <b>of</b> the mechanical finite element model, 2) <b>verification</b> <b>of</b> the fluid finite volume model and 3) <b>verification</b> <b>of</b> the Fluid-Structure interaction model. Within the stage 1 the comparison of the obtained results with the full-scale measurements and the results of the alternative numerical simulations are presented below...|$|R
50|$|Keoland is also {{protected}} by the independent Knights of the Watch and the Knights <b>of</b> <b>Dispatch.</b>|$|R
5000|$|... 17 March 1980 - Commencement <b>of</b> <b>dispatching</b> milk to Mother Dairy Delhi through rail milk tanker.|$|R
40|$|Abstract: the {{technological}} innovation management method <b>of</b> <b>dispatching</b> department in power supply enterprises is researched and practiced. Based on {{the technological}} innovation activities <b>of</b> <b>dispatching</b> department in power supply enterprises, {{the realization of}} building a harmonious team through activity carriers such as tackling hard-nut problems in science and technology, QC activity, thesis writing and patent application, etc. in technological innovation activities is researched and practiced. ...|$|R
40|$|An arrival process (N(t), 0 = or t = or T) {{is to be}} {{dispatched}} one or {{more times}} in the time interval (0,T). The problem {{is to determine the}} optimal number <b>of</b> <b>dispatches</b> K given there are n available and to determine sequentially the epochs <b>of</b> <b>dispatch</b> tau sub 1, [...] ., tau sub K. There are two trade off costs c sub w and c sub d, which are respectively the cost per unit time of a waiting customer and the cost <b>of</b> <b>dispatching</b> a single unit. A general result is found which gives one optimal tau sub 1, [...] ., tau sub K for fixed K (i. e. the K-optimal policy) under certain regularity conditions. This is used to obtain suboptimal policies for multiple <b>dispatching</b> <b>of</b> a Poisson process and single <b>dispatching</b> <b>of</b> a birth-death process. Applications to problems in transportation, repair facilities and insect-control are indicated. (Author) [URL]...|$|R
40|$|We {{review a}} number <b>of</b> {{temporal}} <b>verification</b> techniques for reactive systems using modularity and abstraction. Their use allows the <b>verification</b> <b>of</b> larger systems, and the incremental <b>verification</b> <b>of</b> systems {{as they are}} developed and refined. In particular, we show how deductive verification tools, and the combination of finite-state model checking and abstraction, allow the <b>verification</b> <b>of</b> infinite-state systems featuring data types commonly used in software specifications, including real-time and hybrid systems...|$|R
40|$|<b>Verification</b> <b>of</b> {{embedded}} systems {{is a challenge}} due to the tight combination of hardware and software. We present an approach on the automatic <b>verification</b> <b>of</b> embedded system applications for the operating system Contiki using a standard bounded model checking tool for software. By using an operating system a higher abstraction level to hardware is possible. Our approach is therefore easily applicable for the <b>verification</b> <b>of</b> different hardware platforms...|$|R
40|$|In {{this paper}} we propose a {{methodology}} for the compositional <b>verification</b> <b>of</b> IP-block based designs. We will focus on the reasoning <b>of</b> the compositional <b>verification</b> <b>of</b> the IP based design and on the issue of what interface behavior should be provided with an IP block to make the verification feasible. The proposed approach will be illustrated on the compositional <b>verification</b> <b>of</b> an ATM bit error monitor (BERMON) system...|$|R
