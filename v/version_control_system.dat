388|10000|Public
5|$|The <b>version</b> <b>control</b> <b>system</b> {{contains}} {{a complete list}} of changes.|$|E
5|$|Being a {{derivative}} of FreeBSD, DragonFly has inherited an easy-to-use integrated build {{system that can}} rebuild the entire base system from source {{with only a few}} commands. The DragonFly developers use the Git <b>version</b> <b>control</b> <b>system</b> to manage changes to the DragonFly source code. Unlike its parent FreeBSD, DragonFly has both stable and unstable releases in a single source tree, due to a smaller developer base.|$|E
5|$|Bodo Moeller and Adam Langley of Google {{prepared}} the fix for Heartbleed. The resulting patch {{was added to}} Red Hat's issue tracker on March 21, 2014. Stephen N. Henson applied the fix to OpenSSL's <b>version</b> <b>control</b> <b>system</b> on 7 April. The first fixed version, 1.0.1g, was released on the same day. , 309,197 public web servers remained vulnerable.|$|E
5000|$|Qt Creator is {{integrated}} {{with a set}} of tools, such as <b>version</b> <b>control</b> <b>systems</b> and Qt Simulator. The following <b>version</b> <b>control</b> <b>systems</b> are supported: ...|$|R
40|$|Traditional {{centralized}} <b>Version</b> <b>Control</b> <b>Systems</b> (VCS) as e. g. CVS and SVN, {{which were}} used since the 1980 ’s in al-most every company, are facing competition {{by a new}} ap-proach to source code management. Distributed <b>Version</b> <b>Control</b> <b>Systems</b> like Bazaar, Darcs, Mecurial and Git are changing the way repositories are stored and distributed by representing {{a new and more}} contemporary mindset. Today Distributed <b>Version</b> <b>Control</b> <b>Systems</b> have therefore become very popular in the open-source community with many de-velopers using them. This paper aims to show the requirements, advantages and disadvantages of Distributed <b>Version</b> <b>Control</b> <b>Systems</b> and discusses the differences to Centralized <b>Version</b> <b>Control</b> <b>Systems</b> us the software Git as an example. The document shows and explains the functionality of the system and takes a look under the hood by not focusing {{on the use of the}} tool, but by rather analyzing how the tool handles its tasks. 1...|$|R
5000|$|<b>Version</b> <b>control</b> - update from or commit {{directly}} to upstream <b>version</b> <b>control</b> <b>systems</b> ...|$|R
5|$|Several {{projects}} work {{to extend}} Plan 9, including 9atom and 9front. These forks augment Plan 9 with additional hardware drivers and software, including an improved {{version of the}} Upas e-mail system, the go compiler, Mercurial <b>version</b> <b>control</b> <b>system</b> support, and other programs. Plan 9 was ported to the Raspberry Pi single-board computer. The Harvey project attempts to replace the custom Plan 9 C compiler with GCC, to leverage modern development tools such as GitHub and Coverity and speed up development.|$|E
5|$|The Witness {{uses its}} own engine {{developed}} by Blow and his team, which took {{a significant portion}} of the development time. Blow was insistent on using his own game engine instead of an existing solution such as Unity, as he would be able to fully control every element of a game engine that he created himself. As a compact game world compared to open-world games, the whole of the island of The Witness was treated as one zone, simplifying the gameplay and engine development. This presented a secondary challenge to the team as to concurrently work on the project, they needed to find a means to allow multiple developers to edit areas without resorting to using locking on their <b>version</b> <b>control</b> <b>system</b> as well as being able to work without being connected to a central server. Blow and his team developed an unconventional means of serializing the game world into text files that would have revision control while at the same time making it easy for individuals to discover conflicting edits. They also converted the 10,000-some entities in the game world into their own individual files for tracking to further reduce conflict between edits. Other features of this system including using defined control points for terrain elements to automatically recalculate seamless connections between them within the game's rendering engine, and a built-in world editor within the game engine to easily access existing serialized elements and create new ones.|$|E
25|$|Git's {{design was}} {{inspired}} by BitKeeper and Monotone. Git was originally designed as a low-level <b>version</b> <b>control</b> <b>system</b> engine on top of which others could write front ends, such as Cogito or StGIT. The core Git project has since become a complete <b>version</b> <b>control</b> <b>system</b> that is usable directly. While strongly influenced by BitKeeper, Torvalds deliberately avoided conventional approaches, leading to a unique design.|$|E
40|$|Distributed <b>version</b> <b>control</b> <b>systems</b> (DVCSs) are {{effective}} tools for managing source code and other artifacts produced by software projects with multiple contributors. This article describes DVCSs and compares them with traditional centralized <b>version</b> <b>control</b> <b>systems,</b> then describes extending the DVCS model {{to improve the}} exchange of library metadata...|$|R
40|$|<b>Version</b> <b>control</b> is an {{important}} tool for safekeeping of data and collaboration between colleagues. These days, new distributed <b>version</b> <b>control</b> <b>systems</b> are growing increasingly popular as successors to centralized systems like CVS and Subversion. Graphical user interfaces (GUIs) {{make it easier to}} interact with <b>version</b> <b>control</b> <b>systems,</b> but GUIs for distributed systems are still few and less mature than those available for centralized systems. The purpose of this thesis was to propose specific GUI ideas to make distributed systems more accessible. To accomplish this, existing <b>version</b> <b>control</b> <b>systems</b> and GUIs were examined. A usage survey was conducted with 20 participants consisting of software engineers. Participants were asked to score various aspects of <b>version</b> <b>control</b> <b>systems</b> according to usage frequency and usage difficulty. These scores were combined into an index of each aspect's "unusability" and thus its need of improvement. The primary problems identified were committing, inspecting the working set, inspecting history and synchronizing. In response, a commit helper, a repository visualizer and a favorite repositories list were proposed, along with several smaller suggestions. These proposals should constitute a good starting point for developing GUIs for distributed <b>version</b> <b>control</b> <b>systems...</b>|$|R
40|$|In this paper, one of {{the most}} {{important}} phases of Software development that is versioning, which is done through <b>version</b> <b>control</b> <b>systems,</b> is being presented. The current methodologies used in distributed version management, some aspects needed in the working of <b>Version</b> <b>Control</b> <b>Systems,</b> the prior work that is done in this field of technology are discussed. A proposed algorithmic approach for knowing the dependency of linkages of classes, interfaces and methods in object-oriented technology amid versions of a program is also presented. The aim of this approach is to decrease errors and inaccuracies during the phase of software development in distributed <b>version</b> <b>control</b> <b>systems...</b>|$|R
25|$|These {{criteria}} eliminated every then-extant <b>version</b> <b>control</b> <b>system</b> except Monotone. Performance considerations excluded it, too. So {{immediately after}} the 2.6.12-rc2 Linux kernel development release, Torvalds set out to write his own system.|$|E
25|$|As Git is a {{distributed}} <b>version</b> <b>control</b> <b>system,</b> {{it can be}} used as {{a server}} out of the box. Dedicated Git server software helps, amongst other features, to add access control, display the contents of a Git repository via the web, and help managing multiple repositories. Remote file store and shell access: A Git repository can be cloned to a shared file system, and accessed by other persons. It can also be accessed via remote shell just by having the Git software installed and allowing a user to log in.|$|E
25|$|The AGC {{also had}} a {{sophisticated}} software interpreter, developed by the MIT Instrumentation Laboratory, that implemented a virtual machine with more complex and capable pseudo-instructions than the native AGC. These instructions simplified the navigational programs. Interpreted code, which featured double precision trigonometric, scalar and vector arithmetic (16 and 24-bit), even an MXV (matrix × vector) instruction, could be mixed with native AGC code. While the execution time of the pseudo-instructions was increased (due {{to the need to}} interpret these instructions at runtime) the interpreter provided many more instructions than AGC natively supported and the memory requirements were much lower than in the case of adding these instructions to the AGC native language which would require additional memory built into the computer (at that time the memory capacity was very expensive). The average pseudo-instruction required about 24 ms to execute. The assembler and <b>version</b> <b>control</b> <b>system,</b> named YUL for an early prototype Christmas Computer, enforced proper transitions between native and interpreted code.|$|E
5000|$|Code: {{source code}} hosting, with {{support for the}} Bazaar and Git <b>version</b> <b>control</b> <b>systems.</b>|$|R
50|$|Technical writers {{often use}} content {{management}} <b>systems</b> and <b>version</b> <b>control</b> <b>systems</b> {{to manage their}} work.|$|R
5000|$|DVCS proponents {{point to}} several {{advantages}} of distributed <b>version</b> <b>control</b> <b>systems</b> over the traditional centralised model: ...|$|R
2500|$|Git (...) is a <b>version</b> <b>control</b> <b>system</b> for {{tracking}} changes in computer files and coordinating work on those files among multiple people. It is primarily used for source code management in software development, {{but it can}} be used to keep track of changes in any set of files. As a distributed revision control system it is aimed at speed, data integrity, and support for distributed, non-linear workflows.|$|E
2500|$|Git {{development}} {{began in}} April 2005, after many developers of the Linux kernel gave up access to BitKeeper, a proprietary source control management (SCM) system {{that they had}} formerly used to maintain the project. The copyright holder of BitKeeper, Larry McVoy, had withdrawn free use of the product after claiming that Andrew Tridgell had reverse-engineered the BitKeeper protocols. (The same incident would also spur the creation of another <b>version</b> <b>control</b> <b>system,</b> Mercurial.) ...|$|E
2500|$|... "Wolf fence" [...] algorithm: Edward Gauss {{described}} this simple but very useful and now famous algorithm in a 1982 article for communications of the ACM as follows: [...] "There's one wolf in Alaska; {{how do you}} find it? First build a fence {{down the middle of the}} state, wait for the wolf to howl, determine which side of the fence it is on. Repeat process on that side only, until you get to the point where you can see the wolf." [...] This is implemented e.g. in the Git <b>version</b> <b>control</b> <b>system</b> as the command git bisect, which uses the above algorithm to determine which commit introduced a particular bug.|$|E
40|$|Abstract—Classic {{centralized}} <b>Version</b> <b>Control</b> <b>Systems</b> {{have proven}} {{that they can}} accelerate and simplify the software development process, but one must also consider distributed systems in this analysis. What features can distributed <b>Version</b> <b>Control</b> <b>Systems</b> offer and why are they interesting? This paper describes the general concepts of the centralized and the distributed approaches, how Concurrent Versions System, Subversion and Git implement these concepts. I...|$|R
5000|$|The Subversion and CVS <b>version</b> <b>control</b> <b>systems,</b> {{which use}} zlib to {{compress}} traffic {{to and from}} remote repositories.|$|R
5000|$|MetaEdit+ 5.5 was {{released}} in February 2017, adding versioning and integration with <b>Version</b> <b>Control</b> <b>Systems</b> like Git and SVN.|$|R
2500|$|On 13 November 2013, Microsoft {{announced}} {{the release of}} a software as a service offering of Visual Studio on Microsoft Azure platform; at the time, Microsoft called it Visual Studio Online. Previously announced as Team Foundation Services, it expands over Team Foundation Server by making it available on the Internet and implementing a rolling release model. Customers could use Azure portal to subscribe to Visual Studio Online. Subscribers receive a hosted Git-compatible <b>version</b> <b>control</b> <b>system,</b> a load-testing service, a telemetry service and an in-browser code editor codenamed [...] "Monaco". During the [...] developer event on 18 November 2015, Microsoft announced that the service name is changed to Visual Studio Team Services.|$|E
5000|$|JEDI <b>Version</b> <b>Control</b> <b>System</b> (JVCS): a <b>version</b> <b>control</b> <b>system</b> {{completely}} {{written in}} Delphi.|$|E
50|$|QVCS (Quma <b>Version</b> <b>Control</b> <b>System)</b> is {{a family}} of <b>version</b> <b>control</b> <b>system</b> {{products}} historically published by Quma Software, Inc.|$|E
40|$|Today modern {{software}} development {{is not possible}} {{without the aid of}} tools like <b>version</b> <b>control</b> <b>systems,</b> bug tracking systems or instruments that ensure the compliance with code conventions. Unfortunately, all of these tools “live in their own world”, are only loosely coupled and do not interact with each other. RepoGuard addresses this problem by linking <b>version</b> <b>control</b> <b>systems</b> to other {{software development}} tools. It is implemented as an extension to several <b>version</b> <b>control</b> <b>systems</b> and provides interfaces to integrate other tools. The use of RepoGuard allows maximum control and validation of all committed resources before they are permanently stored. Additionally, RepoGuard provides communication channels in order to inform all relevant stakeholders about the failure or success of the process. Overall, RepoGuard provides simple but effective means to guarantee software quality standards in distributed development processes...|$|R
5000|$|Change : A change (or diff, or delta) {{represents}} a specific modification to a document under <b>version</b> <b>control.</b> The granularity of the modification considered a change varies between <b>version</b> <b>control</b> <b>systems.</b>|$|R
40|$|Abstract. The {{collaborative}} {{development of}} web ontologies {{is an important}} topic being actively researched. In this paper, we present a set of tools that facilitate collaborative development of web ontologies using distributed <b>version</b> <b>control</b> <b>systems.</b> The main purpose of these tools is to replace inefficient built-in diff and three-way merge tools, which rely on text representation rather than on ontology structure. Being based on popular distributed <b>version</b> <b>control</b> <b>systems,</b> owl 2 vcs can be easily integrated into popular issue trackers...|$|R
5000|$|One {{well-known}} {{example of}} a system based on optimistic replication is the CVS <b>version</b> <b>control</b> <b>system,</b> or any other <b>version</b> <b>control</b> <b>system</b> which uses the copy-modify-merge paradigm. CVS covers {{each of the five}} elements: ...|$|E
5000|$|Collaborative workspace, {{document}} management and <b>version</b> <b>control</b> <b>system</b> ...|$|E
5000|$|Is {{managed by}} a <b>version</b> <b>control</b> <b>system</b> that {{supports}} branching ...|$|E
50|$|Meld {{allows you}} to compare files, directories, and <b>version</b> <b>controlled</b> repositories. It {{provides}} two- and three-way comparison of both files and directories, and supports many <b>version</b> <b>control</b> <b>systems</b> including Git, Mercurial, Baazar, CVS and Subversion.|$|R
50|$|<b>Version</b> <b>control</b> <b>systems</b> {{integration}} (Git (including specific GitHub features), Subversion, Mercurial, Perforce, CVS, TFS) {{allowing you}} to perform actions (commit, merge, diff, etc.) right from the IDE.|$|R
40|$|Abstract. <b>Version</b> <b>control</b> <b>systems</b> allow a {{group of}} people to work {{together}} on a set of documents over a network by merging their changes into the same source repository. The existing <b>version</b> <b>control</b> <b>systems</b> offer limited support concerning conflict resolution and tracking of user activity. In this paper we propose a customisable operational transformation merging approach for hierarchical documents that offers the possibility to specify and resolve the conflicts at different granularity levels. Our proposed approach also achieves better efficiency compared to existing approaches for merging documents with linear structures. ...|$|R
