32|355|Public
5000|$|A 16-bit big-endian <b>value</b> <b>encoding</b> the {{compressed}} size minus one ...|$|E
5000|$|A 16-bit big-endian <b>value</b> <b>encoding</b> the low 16-bits of the {{uncompressed}} size minus one ...|$|E
50|$|Card Verifiable Certificates (CVC) are digital {{certificates}} {{that are designed}} to be processed by devices with limited computing power such as smart cards.This is achieved by using simple TLV (Tag Length <b>Value)</b> <b>encoding</b> with fixed fields. Fixed fields means that each field in the certificate is of fixed, or maximum, length and each field comes in a well defined order. This makes parsing easy, in contrast to asn.1 parsing which requires more processing and has to keep fields in memory while parsing nested content.|$|E
5000|$|The {{character}} of the text to <b>encode</b> are hexadecimal <b>values</b> <b>encoded</b> as reversed BCD ...|$|R
5000|$|Every {{data to be}} {{launched}} on the bus must have a unique <b>encoded</b> <b>value</b> and every <b>encoded</b> <b>value</b> must uniquely decode to the same original value.|$|R
5000|$|... dUT1 {{varies from}} −4 to +4. Positive <b>values</b> are <b>encoded</b> by double pulses during seconds 21-24 of each minute. Negative <b>values</b> are <b>encoded</b> during seconds 31-34.|$|R
5000|$|Slight {{variations}} of OEM have evolved across different Stanford projects. In Lore, labels are actually on parent-child [...] "links" [...] rather than objects. For example, if an OEM object has multiple parents, different parent objects may use different labels to identify that object. An atomic <b>value</b> <b>encoding</b> a person's name might {{be included in}} one complex object using the label [...] "Author" [...] and in another complex object using the label [...] "Editor." [...] In C3, additional attributes are required for each object to annotate the changes to the object that have occurred over time [...]|$|E
40|$|There is a main {{difference}} between a program which is interpreted by an interpreter written in a strongly-typed language and a compiled version. Such an interpreter usually uses a universal domain for the values it manipulates. A <b>value</b> <b>encoding</b> is necessary. A compiled program works directly on values. A layer of interpretation for value representation is inserted. On the other hand, a way to derive automatically a compiler from an interpreter {{is to use a}} partial evaluator applied to the interpreter and the interpreted program. This leads to a problem when we want that this technique removes all the layer of interpretation because <b>value</b> <b>encoding</b> must disappear. It is not the case for conventional partial evaluator. This paper proposes to introduce a new domain for partial evaluators called alternative values and a new algorithm of specialization (based on events) which can solve this problem of removing <b>value</b> <b>encoding.</b> We conclude by reporting a successful specialization [...] ...|$|E
40|$|This paper aims {{to propose}} a new {{selection}} procedure for real <b>value</b> <b>encoding</b> problem, specifically for shrimp diet problem. This new selection is a hybrid between two well-known selection procedure; roulette wheel selection and binary tournament selection. Shrimp diet problem is investigated to understand the hard constraints and the soft constraints involved. The comparison between other existing selections is also described for evaluation purposes. The result shows that roulette-tournament selection is better in terms of number of feasible solutions achieved and thus suitable for real <b>value</b> <b>encoding</b> problem. However, the combination with other crossover or mutation might be investigated {{to find the most}} suited combination that can obtain better best so far solution...|$|E
5000|$|A {{diagnostics}} {{engine that}} continually (at millisecond speeds) compares the “as-is” values {{coming from the}} data acquisition system to the “as-designed” <b>values</b> <b>encoded</b> in the CAD model.|$|R
50|$|In telecommunications, PWM {{is a form}} {{of signal}} {{modulation}} where the widths of the pulses correspond to specific data <b>values</b> <b>encoded</b> at one end and decoded at the other.|$|R
50|$|The Data Count word is an 8-bit <b>value,</b> <b>encoded</b> in {{the same}} fashion as the DID, which {{indicates}} how many user data words are to follow. It can range from 0 to 255.|$|R
30|$|Crossover {{operator}} {{represents the}} mating between chromosomes. In the auto-scaling problem, a crossover operation represents how the selected sets of the configuration parameters are combined {{to create a}} new set of the configuration parameters. The type and implementation of the crossover and the mutation operators depend on the encoding of the individuals. In our case, the <b>value</b> <b>encoding</b> is used. The crossover types for the <b>value</b> <b>encoding</b> are: Single-point crossover; Two-point crossover; Uniform crossover; and Arithmetic crossover. In the auto-scaling problem, there are some limitations on the values of the genes. For instance, the lower threshold (thrL) should always be less than the upper threshold (thrU). Since the gene values depend on each other, using the single-point or the two-point crossover methods can produce an invalid offspring. Therefore, the uniform crossover method [28] is used in this paper {{to create a new}} generation.|$|E
30|$|Mutation {{operator}} {{introduces the}} random modifications {{in the genes}} of the chromosomes. The purpose of the mutation operator is to maintain the diversity in the population and avoid a premature convergence. For the <b>value</b> <b>encoding,</b> the mutation operator is implemented by adding a small number to the randomly selected genes. In the auto-scaling problem domain one of the genes (i.e., a configuration parameter) is randomly picked and its value is altered.|$|E
40|$|In the Capacitated Open Pit Mining Problem, we {{consider}} the sequential extraction of blocks {{in order to maximize}} the total discounted profit under an extraction capacity during each period of the horizon. We propose a formulation closely related to the Resource-Constrained Project Scheduling Problem (RCPSP) where the genotype representation of the solution is based on a priority <b>value</b> <b>encoding.</b> We use a GRASP procedure to generate an initial population (swarm) evolving according to a Particle Swarm Procedure to search the feasible domain of the representations. Numerical results are introduced to analyse the impact of the different parameters of the procedures...|$|E
50|$|Plant {{species have}} {{different}} variations {{based on their}} reflectance values. It is an important tool for plant classification. The reflectance <b>value</b> <b>encodes</b> information about the leaf size and shape. For each of the measuring points a reflectance value between 0 and 1 are determined.|$|R
40|$|Abstract. In IDEAs, the {{probability}} distribution of {{a selection of}} solutions is estimated each generation. From this probability distribution, new solutions are drawn. Through {{the probability}} distribution, various relations between problem variables can be exploited to achieve efficient optimization. For permutation optimization, only real valued probability distributions have been applied to a real <b>valued</b> <b>encoding</b> of permutations. In this paper, we present two approaches to estimating marginal product factorized probability distributions {{in the space of}} permutations directly. The estimated probability distribution is used to identify crossover positions in a real <b>valued</b> <b>encoding</b> of permutations. The resulting evolutionary algorithm (EA) is capable of more efficient scalable optimization of deceptive permutation problems of a bounded order of difficulty than when real valued probability distributions are used. ...|$|R
50|$|To {{make the}} {{encoding}} and decoding algorithms simple, no attempt {{has been made}} to prevent some <b>encoded</b> <b>values</b> from <b>encoding</b> inadmissible Unicode values: however, these should be checked for and detected during decoding.|$|R
40|$|Parameter <b>Value</b> <b>Encoding</b> in iCalendar and vCard This {{specification}} updates {{the data}} formats for iCalendar (RFC 5545) and vCard (RFC 6350) to allow parameter values to include certain characters forbidden by the existing specifications. Status of This Memo This is an Internet Standards Track document. This document {{is a product}} of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 5741. Information about the current status of this document, any errata, and how to provide feedback on it may be obtained a...|$|E
40|$|Loss aversion and {{reference}} dependence are 2 keystones of behavioral theories of choice, but {{little is known}} about their underlying cognitive processes. We suggest an additional account for loss aversion that supplements the current account of the <b>value</b> <b>encoding</b> of attributes as gains or losses relative to a reference point, introducing a value construction account. Value construction suggests that loss aversion results from biased evaluations during information search and comparison processes. We develop hypotheses that identify the influence of both accounts and examine process-tracing data for evidence. Our data suggest that loss aversion {{is the result of the}} initial direct encoding of losses that leads to the subsequent process of directional comparisons distorting attribute valuations and the final choic...|$|E
40|$|In {{this paper}} we use genetic {{algorithms}} (GA) {{to deal with}} the Resource-Constrained Project Scheduling Problem (RCPSP). We introduce a prior-ity <b>value</b> <b>encoding</b> (representation) to implement the GA for RCPSP. First, we follow up the approach of Alcaraz and Maroto [1] to introduce an addi-tional component in the encoding to indicate the scheduling mode (forward or backward) used to generate the corresponding schedule. Furthermore, the numerical results indicate that our methods is slightly better as far as so-lution quality is concerned and requires smaller solution time than the GA method proposed by Alcaraz and Maroto in [1] where an activity list encoding is used. Key words: genetic algorithm, resource-constrained project scheduling, metaheuristic. ...|$|E
5000|$|An ASN.1 type has {{a set of}} {{abstract}} <b>values.</b> <b>Encoding</b> rules specify the representation of these abstract values {{as a series of}} bits. There are applications in which special encodings, different from those obtainable through any of the standard sets of ASN.1 encoding rules, are required.|$|R
5000|$|For signed zoned decimal values, the {{rightmost}} (least significant) zone nibble {{holds the}} sign digit, {{which is the}} same set of values that are used for signed packed decimal numbers (see above). Thus a zoned decimal <b>value</b> <b>encoded</b> as the hex bytes F1 F2 D3 represents the signed decimal value −123: ...|$|R
2500|$|... {{cells are}} the leading bytes for a {{sequence}} of multiple bytes, the length shown at the left edge of the row. The text shows the Unicode blocks encoded by sequences starting with this byte, and the hexadecimal code point shown in the cell is the lowest character <b>value</b> <b>encoded</b> using that leading byte.|$|R
40|$|Abstract — Design of {{portable}} consumer electronic {{devices such as}} mobile phones, video game and other embedded systems are increasingly demanding low power consumption to maximize the battery life, reduce weight and increase reliability. These types of power sensitive devices are equipped with microprocessors as the processing elements and memories as the storage units. With current {{complementary metal oxide semiconductor}} technology a large portion of power consumption is consumed as dynamic power. Bus encoding techniques for low power consumption have been studied {{in the last couple of}} decades. Which includes Frequent <b>Value</b> <b>Encoding</b> method, Bus Invert Coding method and Gray Encoding Method. But these techniques could not become the part of Computer architecture because data profile based analysis was not done and delay based analysis was not done. So these techniques are not compatible to incorporate in the computer architecture. The contribution of our work is to design a methodology for optimizing CMOS circuits to incorporate the bus codec techniques by doing the delay based analysis...|$|E
40|$|We propose VAriable Length <b>Value</b> <b>Encoding</b> (VALVE) {{technique}} {{to reduce the}} power consumption in the off-chip data buses. While past {{research has focused on}} encoding fixed length data values to reduce the transition activity in the data buses, our proposed scheme is capable of detecting and encoding variable length bit patterns in the data values. VALVE also does not require prior knowledge of input data and uses just one external control signal We evaluate our proposed scheme using a large spectrum of benchmarks and we achieve an energy reduction of 58 % on an average and up to 75 % on some benchmarks. We also analyze the performance penalty incurred due to the codec delay, which is found to be 0. 45 % of the total program execution time. We find that VALVE requires a minimal area of 0. 0486 mm 2, which can be easily implemented with in a memory controller. 1...|$|E
40|$|Abstract. Power {{consumption}} {{becomes an}} important issue for modern processors. The off-chip buses consume considerable amount of total power [9, 7]. One effective way to reduce power {{is to reduce the}} overall bus switching activities since they are proportional to the power. Up till now, the most effective technique in reducing the switching activities on the data buses is Frequent <b>Value</b> <b>Encoding</b> (FVE) that exploits abundant frequent value locality on the off-chip data buses. In this paper, we propose a technique that exploits more value locality that was overlooked by the FVE. We found that a significant amount of non-frequent values, not captured by the FVE, share common highordered bits. Therefore, we propose to extend the current FVE scheme to take bit-wise frequent values into consideration. On average, our technique reduces 48 % switching activity. The average energy saving we achieved is 44. 8 %, which is 8 % better than the FVE 1...|$|E
30|$|User-input <b>values</b> <b>encoded</b> at client-side: We {{have assumed}} that the values used as sample data to detect user-input actions {{are going to be}} {{observed}} in the request generated after performing the action (Section 3.5). If the RIA applies some transformations on the input data before submitting it to the server, this can cause problems for the proposed technique. For example in C 6, once a user selects a true/false value from a select element, the selected <b>value</b> is <b>encoded</b> as numerical <b>values</b> of 0 / 1. To alleviate this problem, our technique can be improved in the following way.|$|R
50|$|A multi-keygen is a keygen {{that offers}} key {{generation}} for multiple software applications. Multi-keygens are sometimes released over singular keygens if {{a series of}} products requires the same algorithm for generating product keys. In this case, only a single <b>value</b> <b>encoded</b> within the key has to be changed in order to target a different product.|$|R
40|$|In IDEAs, the {{probability}} distribution of {{a selection of}} solutions is estimated each generation. From this probability distribution, new solutions are drawn. Through {{the probability}} distribution, various relations between problem variables can be exploited to achieve e#cient optimization. For permutation optimization, only real valued probability distributions have been applied to a real <b>valued</b> <b>encoding</b> of permutations...|$|R
40|$|The ventral {{striatum}} (VS), {{like its}} cortical afferents, is {{closely associated with}} processing of rewards, but the relative contributions of striatal and cortical reward systems remains un-clear. Most theories posit distinct roles for these structures, despite their similarities. We compared responses of VS neurons to those of ventromedial prefrontal cortex (vmPFC) Area 14 neurons, recorded in a risky choice task. Five major response patterns observed in vmPFC were also observed in VS: (1) offer <b>value</b> <b>encoding,</b> (2) value difference encoding, (3) preferential encoding of chosen relative to unchosen value, (4) a correlation between re-sidual variance in responses and choices, and (5) prominent encoding of outcomes. We did observe some differences as well; in particular, preferential encoding of the chosen option was stronger and started earlier in VS than in vmPFC. Nonetheless, the close match be-tween vmPFC and VS suggests that cortex and its striatal targets make overlapping contri-butions to economic choice. Author Summary The neural calculations underlying reward-based choice are closely associated with a net...|$|E
40|$|Abstract. The {{increasing}} {{popularity of}} XML Web services motivates us to examine {{if it is}} feasible to substitute one vendor service for another when using a Web-based application, assuming that these services are “derived from ” a common base. If such substitution were possible, end users could use the same application {{with a variety of}} back-end vendor services, and the vendors themselves could compete on price, quality, availability, etc. Interoperability with substituted services is non-trivial, however, and four types of incompatibilities may arise during such interoperation – structural, <b>value,</b> <b>encoding</b> and semantic. We address these incompatibilities three-fold: (1) static and dynamic analysis tools to infer whether an application is compatible with a substituted service, (2) semiautomatically generated middleware components called cross-stubs that actually resolve incompatibilities and enable interoperation with substituted services, and (3) a lightweight mechanism called multi-option types to enable applications to be written from the ground up in an interoperation-friendly manner. Using real applications and services as examples, we both demonstrate and evaluate our tools and techniques for enabling interoperation with substituted services. ...|$|E
40|$|As {{improvements}} in per-transistor speed and energy effi-ciency diminish, radical departures from conventional ap-proaches are becoming critical {{to improving the}} performance and energy efficiency of general-purpose processors. We propose a solution—from circuit to compiler—that enables general-purpose use of limited-precision, analog hardware to accelerate “approximable ” code—code that can tolerate imprecise execution. We utilize an algorithmic transformation that automatically converts approximable regions of code from a von Neumann model to an “analog ” neural model. We out-line the challenges of taking an analog approach, including restricted-range <b>value</b> <b>encoding,</b> limited precision in computa-tion, circuit inaccuracies, noise, and constraints on supported topologies. We address these limitations {{with a combination of}} circuit techniques, a hardware/software interface, neural-network training techniques, and compiler support. Analog neural acceleration provides whole application speedup of 3. 7 × and energy savings of 6. 3 × with quality loss less than 10 % for all except one benchmark. These results show that using limited-precision analog circuits for code acceleration, through a neural approach, is both feasible and beneficial over a range of approximation-tolerant, emerging applica-tions including financial analysis, signal processing, robotics, 3 D gaming, compression, and image processing. 1...|$|E
50|$|A graph is {{primarily}} used to show relationships among data and portrays <b>values</b> <b>encoded</b> as visual objects (e.g., lines, bars, or points). Numerical values are displayed within an area delineated {{by one or}} more axes. These axes provide scales (quantitative and categorical) used to label and assign values to the visual objects. Many graphs are also referred to as charts.|$|R
50|$|In the 15th century, the Inca Empire had {{a unique}} way to record census information. The Incas {{did not have any}} written {{language}} but recorded information collected during censuses and other numeric information as well as non-numeric data on quipus, strings from llama or alpaca hair or cotton cords with numeric and other <b>values</b> <b>encoded</b> by knots in a base-10 positional system.|$|R
50|$|The DBN is {{only valid}} if the DID is 80 hex or greater. It is (optionally) used to {{identify}} multiple packets of the same type within a field; each subsequent packet of the indicated type has a DBN which is one higher than the previous packet, wrapping around as necessary. The DBN is an 8-bit <b>value,</b> <b>encoded</b> {{in the same fashion}} as the SDID.|$|R
