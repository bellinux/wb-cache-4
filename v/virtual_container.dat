30|73|Public
50|$|Administrative unit (AU) pointer: Points to the {{location}} of the J1 byte in the payload (the first byte in the <b>virtual</b> <b>container).</b>|$|E
50|$|A {{software}} development folder or file {{is a physical}} or <b>virtual</b> <b>container</b> for software project artifacts, including: requirements, plans, designs, source code, test plans and results, problem reports, reviews, notes, and other artifacts of the development process.|$|E
5000|$|Docker is a {{tool that}} can package an {{application}} and its dependencies in a <b>virtual</b> <b>container</b> that can run on any Linux server. This helps enable flexibility and portability on where the application can run, whether on premises, public cloud, private cloud, bare metal, etc.|$|E
40|$|Abstract—In cloud computing, <b>virtual</b> <b>containers</b> on {{physical}} resources are provisioned to requesting users. Resource providers may pack as many containers as possible onto {{each of their}} physical machines, or may pack specific types and quantities of <b>virtual</b> <b>containers</b> based on user or system QoS objectives. Such elastic provisioning schemes for resource sharing may present major challenges to scientific parallel applications that require task synchronization during execution. Such elastic schemes may also inadvertently lower utilization of computing resources. In this paper, we describe the elasticity constraint effect and ripple effect that cause a negative impact to application response time and system utilization. We quantify the impact using real workload traces through simulation. Then, we demonstrate that some resource scheduling techniques can be effective in mitigating the impacts. We find that a tradeoff is needed among the elasticity of <b>virtual</b> <b>containers,</b> the complexity of scheduling algorithms, and the response time of applications. General Terms: scheduling, virtualization, parallel application I...|$|R
40|$|This {{interactive}} tour introduces {{younger students}} to common household products that may contain pesticides or toxic substances. Each 'room' {{in the house}} features <b>virtual</b> <b>containers</b> which students can click on to see information about the uses and potential hazards of the products. Educational levels: Primary elementary, Intermediate elementary, Middle school...|$|R
30|$|The main aim of {{this article}} is to present a next {{generation}} cloud computing model based on a holistic organization of resources in a <b>virtual</b> infrastructure <b>container.</b> The proposed framework optimises the provisioning of resources, automates the coordination of activities in a <b>virtual</b> service <b>container,</b> and efficiently allocates task to the resources provisioned as part of the container.|$|R
50|$|The <b>Virtual</b> <b>Container</b> is {{not located}} rigidly {{in the frame}} but can move around freely in the payload section. The pointer {{indicates}} {{the position of the}} first byte of the VC (which is always the first byte of the POH). This allows a VC received in the multiplexer to be matched to a pre-specified frame phase of the STM-4.|$|E
50|$|The first 36 bytes of each row of a frame (with the {{exception}} of row 16) contain a Section OverHead. The first 36 bytes of row 16 contain the AU pointer (payload address). The field consisting of 261X36 bytes is for payload transmission (The STM payload {{is known as the}} <b>Virtual</b> <b>Container</b> (VC) and consists of the actual payload, known as the Container (C) and additional overhead known as Path Over Head (POH), for path related information).|$|E
50|$|The backend {{execution}} hosts {{that support}} Maxwell can operate with conventional Unix systems, Xen virtual machines, and {{a form of}} virtualization based on OpenVZ. For each system, a VNC server is pre-started for every session. When OpenVZ is used, that VNC server is started inside of a <b>virtual</b> <b>container.</b> Processes running in that container cannot see other processes on the physical system, see the CPU load imposed by other users, dominate {{the resources of the}} physical machine, or make outbound network connections. By selectively overriding the restrictions imposed by OpenVZ, it is possible to synthesize a fully private environment for each application session that the user can use remotely.|$|E
40|$|This paper {{develops}} {{an analytical}} {{model for the}} multiplexing of Asynchronous Transfer Mode (ATM) connections onto the Synchronous Digital Hierarchy (SDH) <b>Virtual</b> <b>Containers</b> over an unidirectional self-healing ring. The proposed algorithm can produce a near optimal solution in pseudo-polynomial time and {{may be used in}} the ATM management entity for the real time allocation of capacity to ATM connections. (STM) services in real time. On the other hand, the algorithm can also be used at the SDH level to provide a (near) optimal capacity allocation to higher level management functions such as ATM. This paper provides an analytical model for the ATM concentrator. This concentrator is located {{at the edge of the}} SDH ring network (according to the CAAS architecture) and will attempt to multiplex as many of ATM connections onto the SDH <b>Virtual</b> <b>Containers</b> as possible. The SDH management, in turn, tries to allocate the shared capacity of the ring to the ATM layer requests so that a particular d [...] ...|$|R
40|$|One of {{the most}} {{important}} goals of data-center management is to reduce cost through efficient use of resources. Virtualization techniques provide the opportunity of carving individual physical servers into multiple <b>virtual</b> <b>containers</b> that can be run and managed separately. A key challenge that comes with virtualization is the simultaneous on-demand provisioning of shared resources to <b>virtual</b> <b>containers</b> and the management of their capacities to meet service quality targets at the least cost. This paper proposes a two-level resource management system with local controllers at the virtual-container level and a global controller at the resource-pool level. Autonomic resource allocation is realized through the interaction of the local and global controllers. A novelty of the controller designs is their use of fuzzy logic to efficiently and robustly deal with the complexity of the virtualized data center and the uncertainties of the dynamically changing workloads. Experimental results obtained through a prototype implementation demonstrate that, for the scenarios under consideration, the proposed resource management system can significantly reduce resource consumption while still achieving application performance targets. 1...|$|R
5000|$|The Heroku network {{runs the}} customer's apps in <b>virtual</b> <b>containers</b> which execute on a {{reliable}} runtime environment, heroku calls these containers Dynos. These Dynos can run code written in Node, Ruby, PHP, Go, Scala, Python, Java, Clojure. Heroku also provides custom buildpacks {{with which the}} developer can deploy apps in any other language. Heroku lets the developer scale the app instantly just by either {{increasing the number of}} dyno or by changing the type of dyno the app runs in.|$|R
50|$|SDH {{differs from}} Plesiochronous Digital Hierarchy (PDH) {{in that the}} exact rates {{that are used to}} {{transport}} the data on SONET/SDH are tightly synchronized across the entire network, using atomic clocks. This synchronization system allows entire inter-country networks to operate synchronously, greatly reducing the amount of buffering required between elements in the network.Both SONET and SDH can be used to encapsulate earlier digital transmission standards, such as the PDH standard, or they can be used to directly support either Asynchronous Transfer Mode (ATM) or so-called packet over SONET/SDH (POS) networking. Therefore, it is inaccurate to think of SDH or SONET as communications protocols in and of themselves; they are generic, all-purpose transport containers for moving both voice and data. The basic format of a SONET/SDH signal allows it to carry many different services in its <b>virtual</b> <b>container</b> (VC), because it is bandwidth-flexible.|$|E
30|$|Adapt to the {{changing}} capacity availability in the <b>virtual</b> <b>container</b> in a holistic manner.|$|E
40|$|Transportation {{of empty}} {{containers}} by trucks moving {{to and from}} container terminals {{is a source of}} inefficiency in intermodal freight transportation. Reducing unnecessary movement of empty containers by facilitating collaboration between shippers of outbound containers (exporters) and receivers of inbound containers (importers) could help improve efficiency. A <b>Virtual</b> <b>Container</b> Yard is an internet based system containing information on container movements for the purpose of matching container importing and exporting needs and minimizing unnecessary empty container kilometers travelled. In this paper, the <b>Virtual</b> <b>Container</b> Yard concept, applied to the Vaughan CP intermodal terminal, is analyzed to demonstrate the potential effect on vehicle kilometers travelled. Container movement data were obtained from the Ministry of Transportation of Ontario’s Commercial Vehicle Survey, and a linear program was formulated and solved to determine optimal matching of inbound and outbound containers to minimize empty container movements. It was determined that implementing a <b>Virtual</b> <b>Container</b> Yard could reduce the vehicle kilometers travelled to and from the Vaughan CP rail terminal by almost 40 % assuming full collaboration between all importers and exporters. While the prospect of full collaboration may be optimistic, there is potential for significant decreases in vehicle kilometers travelled, and the practicality of implementing the <b>virtual</b> <b>container</b> yard concept at rail intermodal terminals should be further explored...|$|E
30|$|The {{next section}} {{describes}} our proposed framework for a <b>virtual</b> infrastructure <b>container</b> {{as well as}} the functionalities and actors coordinated to realise the vCAAS model.|$|R
50|$|A {{software}} appliance can be {{packaged in}} a virtual machine format as a virtual appliance, allowing it to be run within a <b>virtual</b> machine <b>container.</b>|$|R
50|$|Carried {{within the}} {{information}} payload, {{which has its}} own frame structure of nine rows and 261 columns, are administrative units identified by pointers. Also within the administrative unit are one or more <b>virtual</b> <b>containers</b> (VCs). VCs contain path overhead and VC payload. The first column is for path overhead; it is followed by the payload container, which can itself carry other containers. Administrative units can have any phase alignment within the STM frame, and this alignment is indicated by the pointer in row four.|$|R
30|$|The <b>virtual</b> <b>container</b> {{presented}} in this work is enabled with Markov Chain learning and prediction that allows the container to manage itself using previous observations from job execution traces. We use the automation capability to estimate initial VMs’ capacity without the intervention of a user.|$|E
40|$|Technologies like Jini offer {{spontaneous}} {{discovery and}} utilization of services. Container technology (e. g., Enterprise Java Beans) allows the transparent {{adaptation of the}} application logic at deployment time. These two approaches tackle different {{sides of the same}} problem: how to cope in a flexible manner with dynamic changes in the environment where the application runs. Combining the two approaches leads to a <b>virtual</b> <b>container</b> service infrastructure in which services or functionality extensions can be dynamically added to or removed from an application as needed. This is particular important nowadays given the increasing pervasiveness of wireless and ad-hoc networks as well as peer-to-peer interaction. In this paper we discuss how this can be done in the context of Java. The system we present effectively and efficiently transforms a Java spontaneous network into a <b>virtual</b> <b>container</b> for services and extensions, thereby providing the advantages of both approaches in a single platform. As a test case, we use this infrastructure to implement important data management functionality: transactional interaction, access control, and container managed persistence, and show how it can be used in an ad-hoc network environment...|$|E
30|$|Our {{proposal}} is a self-service container model {{inspired by the}} concept of a biological cell [13] on the premise that nature has successfully managed complexity. This new approach aims to address the challenges of using cloud services for large scale data analysis. Our approach assumes VMs interact and complement each other to perform tasks. In vCAAS, each vCell is isolated from other tenants in the datacentre and the owner controls the entire components of the service cell from a simple template via a service console. The <b>virtual</b> <b>container</b> model provides a portable infrastructure platform for deploying self-contained and self-service IAAS.|$|E
50|$|Link Capacity Adjustment Scheme or LCAS is {{a method}} to {{dynamically}} increase or decrease the bandwidth of <b>virtual</b> concatenated <b>containers.</b> The LCAS protocol is specified in ITU-T G.7042.|$|R
50|$|A virtual {{appliance}} {{could be built}} using either a standard virtual machine format such as Open Virtualization Format (OVF), or a format specific to a particular <b>virtual</b> machine <b>container</b> (for example, VMware, VirtualBox, or Amazon EC2).|$|R
5000|$|Fractional lambda {{switching}} (FλS) [...] leverages on time-driven switching (TDS) {{to realize}} sub-lambda switching in highly scalable dynamic optical networking, which requires minimum (possibly optical) buffers. Fractional lambda switching implies switching fractions of optical channels {{as opposed to}} whole lambda switching where whole optical channels are the switching unit. In this context, TDS has the same general objectives as optical burst switching and optical packet switching: realizing all-optical networks with high wavelength utilization. TDS operation is based on time frames (TFs) that {{can be viewed as}} <b>virtual</b> <b>containers</b> for multiple IP packets that are switched at every TDS switch based on and coordinated by the UTC (coordinated universal time) signal implementing pipeline forwarding. In the context of optical networks, synchronous virtual pipes SVPs typical of pipeline forwarding are called fractional lambda pipes (FλPs).|$|R
30|$|This article {{presents}} a container-based model of cloud computing where all resources (virtual machines, storage, and interconnecting networks) and the logic to manage these resources are packaged in a <b>virtual</b> <b>container</b> and delivered to users. We {{refer to this}} model as Virtual Cells-As-A-Service (vCAAS) and each container as a vCell. The paper proposes a strategy similar to the research in [10, 11]. vCAAS is an IAAS/PAAS model enabled with application specific resource management functionalities such as provisioning, job allocation, and holistic optimization [12]. The functionalities are created from {{platform as a service}} (PAAS). The resources are then consumed as an IAAS service similar to the Biolinux virtual instance.|$|E
40|$|At {{the core}} of the MPEG- 21 Multimedia Framework is the concept of the Digital Item, a <b>virtual</b> <b>container</b> for a {{hierarchical}} structure of metadata and resources. This paper considers the Digital Item Declaration Language (DIDL), gives examples of its usage, and discusses how it is used to integrate other parts of MPEG- 21. The paper then discusses how Digital Item Identification integrates with the DIDL to allow MPEG- 21 to utilize standard identifiers from many application spaces. Finally, an alternative, compressed form of the XML Digital Item Declaration is described. This uses schema-based compression to significantly reduce the size of these XML documents...|$|E
40|$|Telecommunications and Information Technology Research Institute. At {{the core}} of the MPEG- 21 Multimedia Framework is the concept of the Digital Item, a <b>virtual</b> <b>container</b> for a {{hierarchical}} structure of metadata and resources. This paper considers the Digital Item Declaration Language (DIDL), gives examples of its usage, and discusses how it is used to integrate other parts of MPEG- 21. The paper then discusses how Digital Item Identification integrates with the DIDL to allow MPEG- 21 to utilize standard identifiers from many application spaces. Finally, an alternative, compressed form of the XML Digital Item Declaration is described. This uses schema-based compression to significantly reduce the size of these XML documents...|$|E
40|$|Abstract—Resource {{provisioning}} for N-tier web {{applications in}} Clouds is non-trivial due {{to at least}} two reasons. First, there is an inherent optimization conflict between cost of resources and Service Level Agreement (SLA) compliance. Second, the resource demands of the multiple tiers can be different from each other, and varying along with the time. Resources have to be allocated to multiple (<b>virtual)</b> <b>containers</b> to minimize {{the total amount of}} resources while meeting the end-to-end performance requirements for the application. In this paper we address these two challenges through the combination of the resource controllers on both application and container levels. On the application level, a decision maker (i. e., an adaptive feedback controller) determines the total budget of the resources that are required for the application to meet SLA requirements as the workload varies. On the container level, a second controlle...|$|R
40|$|Backbone. The {{method for}} {{computing}} the help matrix of merging the small packages of discrete flows during solving the optimization of packings problem in multicommodity networks with {{restrictions on the}} period of delivery {{or the number of}} merges of flows is proposed. On the basis of the proved statements, efficient computing algorithms for determining the nodes of merge and merged flows {{with the use of the}} help matrix for all pairs in a network are developed. Algorithms may be used inside the basic optimization schemes for calculating the time of delivery of flows to the destination and checking for the appropriate restrictions during solving the various optimization problems of packings on transport networks, and also during the design and analysis of message transfers in <b>virtual</b> <b>containers</b> in the state-of-the-art trunk data networks such as Backboneackbone...|$|R
40|$|A {{molecule}} {{traveling in}} a realistic propagation environment can experience stochastic interactions with other molecules {{and the environment}} boundary. The statistical behavior of some isolated phenomena, such as dilute unbounded molecular diffusion, are well understood. However, the coupling of multiple interactions can impede closed-form analysis, such that simulations are required to determine the statistics. This paper compares the statistics of molecular reaction-diffusion simulation models {{from the perspective of}} molecular communication systems. Microscopic methods track the location and state of every molecule, whereas mesoscopic methods partition the environment into <b>virtual</b> <b>containers</b> that hold molecules. The properties of each model are described and compared with a hybrid of both models. Simulation results also assess the accuracy of Poisson and Gaussian approximations of the underlying Binomial statistics. Comment: 6 pages, 1 table, 10 figures. Submitted to the 2 nd ACM International Conference on Nanoscale Computing and Communication (ACM NANOCOM 2015) on May 16, 201...|$|R
40|$|Abstract – SDH {{possess an}} {{international}} standard networking principle. It is synchronous by nature so {{name of the}} hierarchy is taken from multiplexing method. The evolution of this system improving the economy of operability and reliability of a digital network SDH evolution meets the requirement of the customer {{with respect to the}} different band width requirements and different services. SDH standard defines the transmission rate developed to 155. 52 mbps. In multiplexing process payloads are layered in to lower order and higher order <b>virtual</b> <b>container,</b> each including a range of over head functions for management and error monitoring. frame has a repeative structure and consists of nine equal length segment. Each segment in STM- 1 possess the information structure. The flexibility of SDH can be used to best advantage by introducing a network topology...|$|E
40|$|Next {{generation}} {{cloud computing}} architecture is envisioned {{to be built}} on advanced self-serviced and converged infrastructure with high adaptability. As a result, {{there is a growing}} interest on cloud value added services. Platform and brokering services enable functionalities to address these challenges. This paper identifies the ecosystem in a converged cloud computing model that binds together infrastructure and platform service in a common market place. In the model, resources are organized in a <b>virtual</b> <b>container</b> and delivered to users in a holistic manner. Our work presents a business model in which additional value is created from the interaction and transactions of various virtual service actors. Results obtained from experiment conducted on private cloud shows the strength of our model in increasing the aggregate revenue and achieving a stable response time. © 2013 Infonomics Society...|$|E
40|$|SDH {{possess an}} {{international}} standard networking principle. It is synchronous by nature so {{name of the}} hierarchy is taken from multiplexing method. The evolution of this system improving the economy of operability and reliability of a digital network SDH evolution meets the requirement of the customer {{with respect to the}} different band width requirements and different services. SDH standard defines the transmission rate developed to 155. 52 mbps. In multiplexing process payloads are layered in to lower order and higher order <b>virtual</b> <b>container,</b> each including a range of over head functions for management and error monitoring. frame has a repeative structure and consists of nine equal length segment. Each segment in STM- 1 possess the information structure. The flexibility of SDH can be used to best advantage by introducing a network topology...|$|E
40|$|Abstract—Today’s {{enterprise}} {{data centers}} are shifting towards a utility computing model where many business critical applications {{share a common}} pool of infrastructure resources that offer capacity on demand. Management of such a pool requires having a control system that can dynamically allocate resources to applications in real time. Although this is possible by use of virtualization technologies, capacity overhead or actuation delay may occur due to frequent re-scheduling in the virtualization layer. This paper evaluates the overhead of a dynamic allocation scheme in both system capacity and application-level performance relative to static allocation. We conducted experiments with <b>virtual</b> <b>containers</b> built using Xen and OpenVZ technologies for hosting both computational and transactional workloads. We present {{the results of the}} experiments as well as plausible explanations for them. We also describe implications and guidelines for feedback controller design in a dynamic allocation system based on our observations. I...|$|R
50|$|The Link Capacity Adjustment Scheme (LCAS) {{allows for}} {{dynamically}} changing the bandwidth via dynamic <b>virtual</b> concatenation, multiplexing <b>containers</b> {{based on the}} short-term bandwidth needs in the network.|$|R
40|$|Several recent {{standards}} address <b>virtual</b> <b>containers</b> {{for rich}} multimedia content: collections of media with metadata describing {{the relationships between}} them and providing an immersive user experience. While these standards - which include MPEG- 21 and TVAnytime - provide numerous tools for interacting with rich media objects, they do not {{provide a framework for}} streaming or delivery of such content. This paper presents the bitstream binding language (BBL), a format-independent tool that describes how multimedia content and metadata may be bound into delivery formats. Using a BBL description, a generic processor can map rich content (an MPEG- 21 digital item, for example) into a streaming or static delivery format. BBL provides a universal syntax for fragmentation and packetization of both XML and binary data, and allows new content and metadata formats to be delivered without requiring the addition of new software to the delivery infrastructure. Following its development by the authors, BBL was adopted by MPEG as Part 18 of the MPEG- 21 Multimedia Framework...|$|R
