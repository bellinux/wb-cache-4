0|1651|Public
50|$|There are 4 <b>Check</b> <b>points</b> {{along the}} route. Each <b>Check</b> <b>Point</b> is manned by Medical Assistants & a coordinator. All {{participants}} are checked through these <b>Check</b> <b>Points</b> {{which are in}} radio contact with the Start/Finish Area Manager.|$|R
50|$|A {{user defined}} flight route can be {{overlaid}} onto the map to help visualise Notams of concern or to help plot an alternative route around them. The route waypoints {{can be made}} {{of a combination of}} latitude and longitude coordinates, <b>VOR,</b> NDB, <b>aerodromes</b> or British Gliding Association waypoints.|$|R
5000|$|<b>Check</b> <b>Point</b> Gaia (a <b>Check</b> <b>Point</b> Linux distribution, unifying IPSO and SecurePlatform into {{a single}} {{operating}} system); ...|$|R
5000|$|<b>Check</b> <b>Point</b> SecurePlatform (a <b>Check</b> <b>Point</b> Linux {{distribution}} {{based on}} Red Hat Enterprise Linux, often called SPLAT); ...|$|R
50|$|In 1998, <b>Check</b> <b>Point</b> {{established}} {{a partnership with}} Nokia, bundling <b>Check</b> <b>Point's</b> Software with Nokia's computer Network Security Appliances.|$|R
25|$|In 1998 <b>Check</b> <b>Point</b> {{established}} {{a partnership with}} Nokia, which bundled <b>Check</b> <b>Point's</b> Software with Nokia's computer Network Security Appliances.|$|R
50|$|Relations between <b>Check</b> <b>Point</b> and the SofaWare founders went sour {{after the}} company {{acquisition}} in 2002. In 2004 Etay Bogner, co-founder of SofaWare, sought court approval to file a shareholder derivative suit, claiming <b>Check</b> <b>Point</b> was not transferring funds to SofaWare as required for its use of SofaWare's products and technology. His derivative suit was ultimately successful, and <b>Check</b> <b>Point</b> was ordered to pay SofaWare 13 million shekels for breach of contract.In 2006 the Tel Aviv District Court Judge ruled that Bogner SofaWare could sue <b>Check</b> <b>Point</b> by proxy for $5.1 million in alleged damage to SofaWare. Bogner claimed that <b>Check</b> <b>Point,</b> which owned 60% of Sofaware, had behaved belligerently, and withheld monies due for use of SofaWare technology and products <b>Check</b> <b>Point</b> appealed the ruling, but lost.|$|R
5000|$|Effective {{firewall}} load-balancing (in {{conjunction with}} <b>Check</b> <b>Point</b> sychronization), derived from Network Alchemy clustering technology, predating and still independently developed from <b>Check</b> <b>Points</b> ClusterXL.|$|R
5000|$|Shwed is {{the chief}} {{executive}} officer and director of <b>Check</b> <b>Point.</b> He previously served as president of <b>Check</b> <b>Point</b> and chairman of the board.|$|R
5000|$|Firewall Flows {{for putting}} <b>Check</b> <b>Point</b> {{security}} rule implementation into the dedicated network processor circuitry on-the-fly (though {{this is now}} largely evolved into <b>Check</b> <b>Point's</b> SecureXL) ...|$|R
25|$|In 2006 the Tel Aviv District Court Judge {{ruled that}} Bogner SofaWare could sue <b>Check</b> <b>Point</b> by proxy for $5.1 million in alleged damage to SofaWare. Bogner claimed that <b>Check</b> <b>Point,</b> which owned 60% of Sofaware, had behaved belligerently, and {{withheld}} monies due {{for use of}} SofaWare technology and products <b>Check</b> <b>Point</b> appealed the ruling, but lost.|$|R
2500|$|The {{deciding}} factor is availability of nitrogens and storage of energy rich compounds at the deciding <b>point</b> called <b>check</b> <b>point.</b> This <b>check</b> <b>point</b> is called G1 cyclin or CG1.|$|R
50|$|<b>Check</b> <b>Point</b> GO {{uses the}} {{software}} {{installed on the}} host PC to run applications such as Microsoft Word and Microsoft Excel, but the userâ€™s documents remain secure in the <b>Check</b> <b>Point</b> GO environment - a virtual workspace that runs parallel to the host environment. All file and registry input/output calls for the secure application inside <b>Check</b> <b>Point</b> GO are redirected to the flash drive.|$|R
25|$|Relations between <b>Check</b> <b>Point</b> and the SofaWare founders went sour {{after the}} company {{acquisition}} in 2002. In 2004 Etay Bogner, co-founder of SofaWare, sought court approval to file a shareholder derivative suit, claiming <b>Check</b> <b>Point</b> was not transferring funds to SofaWare as required for its use of SofaWare's products and technology. His derivative suit was ultimately successful, and <b>Check</b> <b>Point</b> was ordered to pay SofaWare 13 million shekels for breach of contract.|$|R
40|$|Memory <b>check</b> <b>pointing</b> is {{a pivotal}} {{technique}} in systems reliability, with applications ranging from crash recovery to replay debugging. Unfortunately, many traditional memory <b>check</b> <b>pointing</b> use-cases require high-frequency checkpoints, something for which existing application-level solutions are not well-suited. The {{problem is that}} they incur either substantial run-time performance overhead, or poor memory usage guarantees. As a result, their application in practice is hampered. This paper presents Lightweight Memory <b>Check</b> <b>pointing</b> (LMC), a new user-level memory <b>check</b> <b>pointing</b> technique that combines low performance overhead with strong memory usage guarantees for high <b>check</b> <b>pointing</b> frequencies. To this end, LMC relies on compiler-based instrumentation to shadow the entire memory address space of the running program and incrementally checkpoint modified memory bytes in a LMC-maintained shadow state. Our evaluation on popular server applications demonstrates the viability of our approach in practice, confirming that LMC imposes low performance overhead with strictly bounded memory usage at runtime...|$|R
50|$|Firefly {{appeared}} as a Kreon in the 2013 G.I. Joe Kre-O toy line {{as part of the}} <b>Check</b> <b>Point</b> Alpha playset. The set includes <b>Check</b> <b>Point</b> Alpha, manned by Law & Order, and a Cobra motorcycle piloted by Firefly.|$|R
50|$|In {{the third}} stage, the riders reached the first <b>check</b> <b>point</b> one hour late, {{after they had}} taken the wrong route and rode 30 km in the wrong direction. The race was then stopped and {{restarted}} from the first <b>check</b> <b>point.</b>|$|R
50|$|Law & Order {{appeared}} as a Kreon in the 2013 G.I. Joe Kre-O toy line {{as part of the}} <b>Check</b> <b>Point</b> Alpha playset. The set includes <b>Check</b> <b>Point</b> Alpha, manned by Law & Order, and a Cobra motorcycle piloted by Firefly.|$|R
40|$|Abstract- This paper {{deals with}} the {{overview}} of decentralized <b>check</b> <b>pointing</b> using QOS in MOG. <b>Check</b> <b>pointing</b> is more crucial in MOG systems than in their conventional wired counter parts due to host mobility. Dynamically, less reliable wireless links frequent disconnections and variation in mobile systems. The algorithms and protocols than we can take an adaptive protocol to reduce the overhead and leasing mechanism is for storage but have a problem that can overcome by synchronous snapshot algorithm {{is that we have}} rollback/recovery algorithm but have low communication, and storage overhead. The mutable checkpoints should be minimized. If we talk about a large scale super computing system with coordinated <b>check</b> <b>pointing</b> and rollback recovery. We have work fraction is relatively low correlated failures must be taken in to account. We can also see an NP-Complete problem, so these all problems can overcome by using an algorithm said to be as Reliability Driven (ReD). With ReD an MH simply sends its <b>check</b> <b>pointed</b> data to one selected neighboring MH, and also serves as a stable point of storage for <b>check</b> <b>pointed</b> data received from a single approved neighboring MH. Here ReD works to maximize the probability of <b>check</b> <b>pointed</b> data recovery during job execution. So we are going to implement one of them as NP-Complete problem can be solved by this we can see in future as Overview of Decentralized <b>Check</b> <b>pointing</b> Using QOS in MOG...|$|R
5000|$|<b>Check</b> <b>Point</b> Software Technologies (Identity Awareness Blade); ...|$|R
5000|$|Administration of Border <b>check</b> <b>points,</b> Population and Immigration ...|$|R
50|$|When <b>Check</b> <b>Point</b> GO is {{inserted}} into the USB port of any PC, the user is presented with a login screen. Upon successful login, a new explorer.exe instance is started in the <b>Check</b> <b>Point</b> GO Secure Workspace. All subsequent processes are started as child processes of this new explorer.|$|R
40|$|In this paper, we have {{presented}} an efficient non-blocking coordinated <b>check</b> <b>pointing</b> algorithm for distributed systems. It produces a consistent set of checkpoints, without the overhead of taking temporary checkpoints; the algorithm also {{makes sure that}} only few processes {{are required to take}} checkpoints in its any execution; it uses very few control messages and the participating processes are interrupted fewer number of times when compared to some noted related works. The two most important criteria are non-blocking and minimum number of checkpoints. Cao-Singhal showed in their algorithm {{that it is impossible to}} design minimum process non-blocking algorithm but it is not desirable in mobile environment that underlying computation will be blocked whenever a <b>check</b> <b>pointing</b> algorithm invoked. If the <b>check</b> <b>pointing</b> scheme is blocking then the performance of the system will be highly affected by the frequent initiation of <b>check</b> <b>pointing</b> algorithm. We must try to minimize the blocking time while keeping the number of checkpoints minimum. So, the proposed scheme concentrate to minimize this overhead by combining coordinated <b>check</b> <b>pointing</b> with minimum blocking time...|$|R
40|$|There is {{an active}} {{landslide}} on the area of Podkraj near Velenje cemetery. The movement is shown with moved and inclined supporting walls of the cemetery. There are also apparent cracks {{in some parts of}} the wall. <b>Check</b> <b>points</b> were placed in November 2009 on determinated places of the wall. Since then Informatics service, department Prostorska informatika of Komunalno podjetje Velenje are implementing measurements and monitoring possible changes of <b>check</b> <b>point</b> position. In this dissertation we are addressing the improvement of the local geodetic network. The area was remeasured with more recent instruments. The measurements were priory processed and readjusted. We determined local levels for all reference and <b>check</b> <b>point</b> and coordinates in the national coordinate system with the belonging accuracies. We also estimated the accuracy of all the results. We calculated <b>check</b> <b>point</b> displacements on the basis of current and our measurements and demonstrated it on graph charts. The dissertation also provides with suggestions to improve stabilization of <b>check</b> <b>points,</b> methods of measurements, data processing and coordinate calculation...|$|R
5000|$|Highly Dangerous (1950) .... Officer At Station <b>Check</b> <b>Point</b> (uncredited) ...|$|R
50|$|Through conquest-style battles, players obtain {{points by}} killing enemies, {{accomplishing}} team goals, and capturing <b>check</b> <b>points.</b> Points {{and a variety}} of power-ups can be used to further upgrade unit abilities.|$|R
5000|$|... #Caption: Stop â€” <b>check</b> <b>point</b> (e.g. police <b>check,</b> e.g. customs) ...|$|R
50|$|In 2009, <b>Check</b> <b>Point</b> {{acquired}} Nokia's {{network security}} business unit.|$|R
5000|$|Gendarmerieposten (GP), {{frontier}} {{control post}} (GÃœP) and <b>check</b> <b>points</b> (Greko) ...|$|R
5000|$|... #Caption: A {{security}} <b>check</b> <b>point</b> at the Ankara Central Station ...|$|R
5000|$|D.100 is a {{west to east}} state road in Turkey. It {{starts at}} KapÄ±kule, the Bulgarian border <b>check</b> <b>point,</b> and ends in GÃ¼rbulak, the Iranian border <b>check</b> <b>point.</b> Since it runs {{all the way from}} west to east it crosses most of the north to south state roads {{including}} , , [...] and [...]|$|R
50|$|Trade routes, {{particularly}} {{in the area of}} <b>check</b> <b>points,</b> were accompanied on both sides by landwehrs. In addition to protecting travellers from ambushes, these landwehrs {{on either side of the}} route were mainly used to channel the flow of traffic and effectively prevent people bypassing or avoiding <b>check</b> <b>points</b> and customs posts.|$|R
40|$|It {{is known}} that <b>check</b> <b>pointing</b> and {{rollback}} recovery are widely used techniques that allow a distributed computing to progress {{in spite of a}} failure. There are two fundamental approaches for <b>check</b> <b>pointing</b> and recovery. One is asynchronous approach, process take their checkpoints independently. So, taking checkpoints is very simple but due to absence of a recent consistent global checkpoint which may cause a rollback of computation. Synchronous <b>check</b> <b>pointing</b> approach assumes that a single process other than the application process invokes the <b>check</b> <b>pointing</b> algorithm periodically to determine a consistent global checkpoint. Various flavors of these two techniques, their mechanisms, advantages and drawbacks have been discussed in detail. Besides an exhaustive study of the implementation issues are also included. Lastly, some open issues have been addressed and certain solutions have been proposed by the author...|$|R
40|$|This paper {{introduces}} {{a new strategy}} for the mitigation of risk due to hazardous material transportation on a road network. We propose to assign to each vehicle a compulsory <b>check</b> <b>point</b> to be crossed along the orgin destination trip. The authority locates k <b>check</b> <b>points</b> on the network and assigns one <b>check</b> <b>point</b> to each vehicle. Drivers will travel along the minimum cost itinerary which complies with the obligation. As the authority is risk driven and drivers are cost driven, we have to solve a bilevel optimization problem. We present computational results on literature benchmarcks that show {{the effectiveness of the}} method...|$|R
50|$|HummingBad is Android malware, {{discovered}} by <b>Check</b> <b>Point</b> in February 2016.|$|R
5000|$|Setting roadblocks and <b>check</b> <b>points,</b> media censorship, {{intensive}} {{patrol and}} others.|$|R
