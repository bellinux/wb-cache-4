10000|317|Public
5|$|Active and cheerful, the Russian Toy was {{originally}} bred {{both as an}} anti-rat dog and a watch dog. The second quality is still active in the breed, {{and they can be}} <b>very</b> vocal. They can become quite attached to their family, regardless of the ages of the family members. Russian Toys are usually <b>very</b> reserved with strangers, but <b>very</b> loyal to their owners, always ready to protect them from any perceived danger.|$|E
5|$|Although skull {{proportions}} varied, abelisaurid skulls {{were generally}} <b>very</b> tall and <b>very</b> short in length. In Carnotaurus, for example, the skull {{was nearly as}} tall as it was long. The premaxilla in abelisaurids was <b>very</b> tall, so {{the front of the}} snout was blunt, not tapered as seen in many other theropods.|$|E
5|$|Although <b>very</b> popular, few prints {{have survived}} and {{impressions}} of the first edition are <b>very</b> rare. A fine example was sold at Christie's New York in 2013 for $866,500, setting a new auction record for the artist.|$|E
40|$|Abstract. The current denition of the Java Bytecode <b>Verier,</b> {{as well as}} the {{proposals}} to formalize it, do not include any check about consis-tency of critical sections (those between monitorenter and monitorexit instructions). So code is run, even if critical sections are corrupted. In this paper we isolate a sublanguage of the Java Virtual Machine with thread creation and mutual exclusion. For this subset we dene a se-mantics and a formal <b>verier</b> that enforces basic properties of threads and critical sections. The <b>verier</b> integrates well with previous formal-izations of the Java Bytecode <b>Verier.</b> Our analysis of critical sections reveals the presence of bugs in the current compilers from Sun and IBM. ...|$|R
40|$|We {{present a}} formal {{executable}} specification of two crucial JavaCard platform components, namely the Java Card Virtual Machine (JCVM) and the ByteCode <b>Verier</b> (BCV). Moreover, we relate both components by giving a {{proof of correctness}} of the ByteCode <b>Verier.</b> Both formalisations and proofs have been machined-checked using the proof assistant Coq...|$|R
50|$|Victor <b>Verier,</b> {{indicted in}} Essex County, January, 1919, {{for the murder}} of Elizabeth <b>Verier</b> in Lawrence, Massachusetts, December 14, 1918. On October 24, 1919, the {{defendant}} was adjudged insane and was committed to Bridgewater State Hospital until further order of the court. The case was in charge of District Attorney Henry G. Wells.|$|R
5|$|And we are <b>very,</b> <b>very</b> proud.|$|E
5|$|Because of the <b>very</b> brief {{nature of}} the Spanish {{occupation}} of the city, <b>very</b> few European artefacts were found. Those few pieces that were found consisted of forged iron crossbow bolts.|$|E
5|$|Bulkers are {{segregated}} {{into six}} major size categories: small, handysize, handymax, panamax, capesize, and <b>very</b> large. <b>Very</b> large bulk and ore carriers {{fall into the}} capesize category but are often considered separately.|$|E
40|$|Introduction The {{concept of}} an {{interactive}} proof protocol for deciding language membership providing zero knowledge to the proof <b>verier</b> was introduced by Goldwasser, Micali and Racko [4]. Informally, an interactive proof protocol is zero-knowledge if interacting with the prover does not provide any additional knowledge to the <b>verier</b> (apart possibly from {{the validity of the}} language membership assertion being proven), regardless of the strategy used by the <b>verier</b> in interacting with the prover. In other words, the zero-knowledge property of an interactive proof system is a property of the prover 1 that is measured against all " <b>verier</b> strategies aimed at extracting additional knowledge from the interaction. The hard task in presenting a formal denition for zero-knowledge is quantifying what constitutes an in knowledge" resulting from an interaction. In the model of Goldwasser, Micali and Racko,...|$|R
40|$|In this paper, we {{describe}} a proof-of-concept {{implementation of the}} probabilistically checkable proof of proximity (PCPP) system described by Ben-Sasson and Sudan in [BSS 05]. In particular, we implement a PCPP prover and <b>verier</b> for Reed-Solomon codes; the prover converts an evaluation of a polynomial on a linear set into a valid PCPP, while the <b>verier</b> queries the evaluation and the PCPP to check that the evaluation is close to a Reed-Solomon codeword. We prove tight bounds on the various parameters associated with the prover and <b>verier</b> and describe some interesting programmatic issues that arise during their implementation. ...|$|R
40|$|We {{consider}} approximate PCPs for multidimensional bin-packing problems. In par-ticular, we {{show how}} a <b>verier</b> {{can be quickly}} convinced that a set of multidimensional blocks can be packed into {{a small number of}} bins. The running time of the <b>verier</b> is bounded by O(log d n) where n is the number of blocks and d is the dimension...|$|R
5|$|C# is {{intended}} to be suitable for writing applications for both hosted and embedded systems, ranging from the <b>very</b> large that use sophisticated operating systems, down to the <b>very</b> small having dedicated functions.|$|E
5|$|Gill Sans rapidly became <b>very</b> popular. Its {{success was}} aided by Monotype's {{sophisticated}} marketing, led by Gill's supporter (and sometime lover) Beatrice Warde, {{and due to}} its practicality and availability for machine composition in a <b>very</b> wide range of sizes and weights.|$|E
5|$|I {{wanted it}} to be almost like a photo album, so every single scene is kind of like a picture that you're kind of looking into our relationship. So it is a 1920s vibe, it's black and white, <b>very</b> high fashion—you know, you'll see me <b>very</b> dapper in 1920s, Frank Sinatra-ish. So you'll see the cars from that era, you'll {{definitely}} feel the vibe of the house having that 1920s vibe as well. So it's <b>very</b> different and <b>very</b> intimate, and it's not a lot of dancing—it's more personal.|$|E
40|$|Refereed {{games are}} {{interactive}} proof systems with two competing provers: one {{that tries to}} convince the <b>verier</b> to accept and another that tries to convince the <b>verier</b> to reject. In quantum refereed games, the provers and <b>verier</b> may perform quantum computations and exchange quantum messages. One may consider games with a bounded or un-bounded number of rounds of messages between the <b>verier</b> and provers. In this paper, we prove classical upper bounds {{on the power of}} both one-round and many-round quantum refer-eed games. In particular, we use semidenite programming to show that many-round quantum refereed games are con-tained in NEXP. It then follows from the symmetric nature of these games that they are also contained in coNEXP. We also show that one-round quantum refereed games are con-tained in EXP by supplying a separation oracle for use with the ellipsoid method for convex feasibility. 1...|$|R
40|$|Abstract. This paper {{proposes a}} {{designated}} <b>verier</b> signature {{scheme based on}} the Schnorr signature and the Zheng signcryption schemes. One {{of the advantages of}} the new scheme compared with all previously pro-posed schemes is that it achieves the designated <b>verier</b> " prop-erty without encrypting any part of the signatures. This is because the designated verier's secret key is involved in the verication phase. An-other advantage of the proposed scheme is the low communication and computational cost. Generating a signature requires only one modular exponentiation, while this amount is two for the verication. Also, a sig-nature in our scheme is more than four times shorter than those of known designated <b>verier</b> schemes...|$|R
40|$|The current denition of the Java Bytecode <b>Verier,</b> {{as well as}} the {{proposals}} to formalize it, do not include any check about consistency of critical sections (those between monitorenter and monitorexit instructions). So code is run, even if critical sections are corrupted. In this paper we isolate a sublanguage of the Java Virtual Machine with thread creation and mutual exclusion. For this subset we dene a semantics and a formal <b>verier</b> that enforces basic properties of threads and critical sections. The <b>verier</b> integrates well with previous formalizations of the Java Bytecode <b>Verier.</b> Our analysis of critical sections reveals the presence of bugs in the current compilers from Sun and IBM. 1 Introduction The Java Programming Language is compiled into an intermediate language, called (Java) bytecode. The bytecode is then interpreted by the Java Virtual Machine (JVM, in the following) [1]. Most of the portability of the Java language relies on the fact that JVM's have been [...] ...|$|R
5|$|I'm {{really happy}} to do this. I feel rejuvenated by it, I feel excited again. You're <b>very</b> much alive, you're <b>very</b> much in the moment, so I feel I'm really living.|$|E
5|$|In {{regards to}} {{composing}} {{the song and}} its lyrical meaning, Allen noted that, Mark's got a <b>very</b> good ear. He's <b>very</b> relaxed {{in the studio and}} <b>very</b> thoughtful. There's not really any pressure working there, because he's got his own studio so he doesn't have time constraints.|$|E
5|$|Jerry's form {{has been}} impressively {{consistent}} {{over the past}} few seasons, he has maintained excellent fitness levels and will once again be a <b>very</b> valuable player for us next season. He is a <b>very</b> good professional who is always on the training field. That is why his career has lasted as long as it has. Jerry is a <b>very</b> good influence on the dressing room as well and I'm delighted that he will be staying with us.|$|E
60|$|FERIA. Nay, Madam, nay! {{he sends}} his <b>veriest</b> love, And says, {{he will come}} quickly.|$|R
40|$|We {{present a}} weaker {{variant of the}} PCP Theorem that admits a signicantly easier proof. In this variant the prover only has n t time to compute each bit of his answer, for an arbitray but xed {{constant}} t, in contrast to being all powerful. We show that 3 SAT is accepted by a polynomial-time probabilistic <b>verier</b> that queries a nite number of bits from a polynomially long proof string. If a boolean formula of length n is satisable, then the <b>verier</b> accepts with probability 1. If is not satisable, then {{the probability that a}} n t -bounded prover can fool the <b>verier</b> is at most 1 / 2. The main technical tools used in the proof are the " part of the PCP Theorem in which the <b>verier</b> reads nitely many bits from an exponentially long proof string, and the construction of a pseudo-random generator from a one-way permutation. 1 Introduction The PCP Theorem {{is one of the most}} important results in computer science. It gives an astonishing interactive proof protocol for any [...] ...|$|R
5000|$|Wise men {{behaved like}} stark fools, and good and honest men like the <b>veriest</b> fourbs (fraudsters) that ever {{came out of}} Newgate.|$|R
5|$|Lanthanum has {{no known}} {{biological}} role in humans. The element is <b>very</b> poorly absorbed after oral administration and when injected its elimination is <b>very</b> slow. Lanthanum carbonate (Fosrenol) was approved as a phosphate binder to absorb excess phosphate {{in cases of}} end stage renal disease.|$|E
5|$|Lead {{is removed}} from the body <b>very</b> slowly, mainly through urine. Smaller amounts of lead are also {{eliminated}} through the feces, and <b>very</b> small amounts in hair, nails, and sweat.|$|E
5|$|Me <b>very</b> {{sorry for}} my sins.|$|E
6000|$|... "the <b>veriest</b> tyrant," [...] said Byron, [...] "that ever governed Fashion's fools, [...] and {{compelled}} them {{to shake}} their caps and bells as she willed it." ...|$|R
6000|$|... "Santa Ana!" [...] said Faquita, shrugging her shoulders. [...] "She {{did what}} the <b>veriest</b> muchacha would have done. When he had gone, {{she sat down}} and cried." ...|$|R
6000|$|Stung by {{his cold}} and snaky eye, I roused myself at length To say [...] "At least I do defy The <b>veriest</b> sceptic to deny That union is strength!" ...|$|R
5|$|Monument 158 has a <b>very</b> late date, in AD 904, at the <b>very</b> {{end of the}} Classic Period. It {{was erected}} {{during the reign of}} Ruler 10.|$|E
5|$|Multifurca: agaricoid; caps zonate (also {{visible in}} cut through trama); gills {{regularly}} forked; only M. furcata exuding latex; spore print orange; spores <b>very</b> small; microscopical trama and hymenium features <b>very</b> variable.|$|E
5|$|Nemerteans are <b>very</b> unusual animals.|$|E
40|$|Abstract. The paper {{addresses}} {{the problem of}} bad signature identi-cation in batch verication of digital signatures. The number of generic tests necessary to identify all bad signatures in a batch instance, is {{used to measure the}} eciency of veriers. The divide-and-conquer veri-er DCV (x; n) is dened. The <b>verier</b> identies all bad signatures in a batch instance x of the length n by repeatedly splitting the input into sub-instances. Its properties are investigated. In particular, probability distributions for the number of generic tests necessary to identify one, two and three bad signatures, are derived. The average numbers of GT tests necessary to identify bad signatures ranging from 1 to 16 are ob-tained from computer simulation. Further, a Hamming <b>verier</b> (HV) is de ned which allows to identify a single bad signature in a batch of the length n = 2 k 1 using k+ 2 tests. HV is generalised into the two-layer Hamming <b>verier</b> (2 HV). Given a batch instance of the length 2 k 2, the 2 HV <b>verier</b> identies a single bad signature using k + 2 tests and two bad signatures in expense of 3 k+ 3 tests. The work is concluded by comments about a general model for verication codes identifying t bad signatures and the design of veriers using combinatorial structures. ...|$|R
60|$|On {{the smaller}} ships of the service, {{those which are}} not fitted with {{electric}} lighting, <b>Very’s</b> night signals are used. This set includes the implements for firing and recharging the signals.|$|R
6000|$|They {{change with}} place, they shift with race; [...] and, in the <b>veriest</b> span of Time, Each Vice has worn a Virtues crown; [...] all Good was banned as Sin or Crime: ...|$|R
