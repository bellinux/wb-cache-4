2|5|Public
50|$|A {{number of}} {{solutions}} {{have been proposed}} to increase VLANâ€™s scalability. A first proposal, called Q-in-Q, also known as Provider Bridge, <b>VLAN</b> <b>stacking</b> or tag stacking, allows service providers to insert an additional VLAN tag (referred to as provider VLAN) in the Ethernet frame {{in order to identify}} the service, resulting in a unique 24-bit length label. While this solution enables one, in theory, to identify up to 16 million services (4094 * 4094), in reality, one provider VLAN is dedicated to one customer, and therefore the number of supported customers is still limited to 4094.|$|E
5000|$|Scalability: In a {{properly}} designed Ethernet VLAN network, each switched path can have 4094 single tag VLANs. Some aggregation and core switches can classify traffic by two VLANs using IEEE 802.1ad <b>VLAN</b> <b>stacking,</b> so with such aggregation devices properly {{placed in the}} center of a network, end segments and rings of single tag devices can receive only the traffic that they need. When using MPLS, Ethernet VLANs have local meaning only (like Frame Relay PVC). Same scalability considerations apply to the MAC addresses where in a pure Layer 2 Ethernet MAN all MAC addresses are being shared across the network, although this issue can be managed by smart network design and choosing switches with MAC tables sufficient for the size of network segments.|$|E
5000|$|IEEE 802.1ad, an Ethernet {{networking}} standard, {{also known}} as provider bridging, <b>Stacked</b> <b>VLANs,</b> or simply QinQ.|$|R
5000|$|IEEE 802.1ad is an Ethernet {{networking}} standard informally {{known as}} QinQ {{and is an}} amendment to IEEE standard IEEE 802.1Q-1998. The technique {{is also known as}} provider bridging, <b>Stacked</b> <b>VLANs,</b> or simply QinQ or Q-in-Q. [...] "Q-in-Q" [...] can for supported devices apply to C-tag stacking on C-tag (Ethernet Type = 0x8100) but this has limited application in the modern methodology of network routing.|$|R
40|$|Virtualized network {{infrastructures}} {{are currently}} deployed in both research and commercial contexts. The {{complexity of the}} virtualization layer varies greatly in different deployments, ranging from cloud computing environments, to carrier Ethernet applications using <b>stacked</b> <b>VLANs,</b> to networking testbeds. In all of these cases, there are many users sharing the resources of one provider, where each user expects their resources to be isolated from all other users. Our {{work in this area}} is focused on network testbeds. In particular, we present the design of the latest version of the Open Network Laboratory (ONL) testbed. This redesign generalizes the underlying infrastructure to support resource extensibility and heterogeneity at a fundamental level. New types of resources (e. g., multicore PCs, FPGAs, network processors, etc) can be added to the testbed without modifying any testbed infrastructure software. Resource types can also be extended to support multiple distinct sets of functionality (e. g., an FPGA might act as a router, a switch, or a traffic generator). Moreover, users can dynamically add new resource extensions without any modification to the existing infrastructure [...] Read complete abstract on page 2...|$|R
40|$|Abstract: Virtualized network {{infrastructures}} {{are currently}} deployed in both research and commercial contexts. The {{complexity of the}} virtualization layer varies greatly in different deployments, ranging from cloud computing environments, to carrier Ethernet applications using <b>stacked</b> <b>VLANs,</b> to networking testbeds. In all of these cases, there are many users sharing the resources of one provider, where each user expects their resources to be isolated from all other users. Our {{work in this area}} is focused on network testbeds. In particular, we present the design of the latest version of the Open Network Laboratory (ONL) testbed. This redesign generalizes the underlying infrastructure to support resource extensibility and heterogeneity at a fundamental level. New types of resources (e. g., multicore PCs, FPGAs, network processors, etc) can be added to the testbed without modifying any testbed infrastructure software. Resource types can also be extended to support multiple distinct sets of functionality (e. g., an FPGA might act as a router, a switch, or a traffic generator). Moreover, users can dynamically add new resource extensions without any modification to the existing infrastructure...|$|R
40|$|The current {{practice}} of shaping subscriber traffic using a token bucket filter by Internet service providers {{may result in}} a severe waste of network resources in shared access networks; except {{for a short period of}} time proportional to the size of a token bucket, it cannot allocate excess bandwidth among active subscribers even when there are only a few active subscribers. To better utilize the network resources in shared access networks, therefore, we recently proposed and analyzed the performance of access traffic control schemes, which can allocate excess bandwidth among active subscribers proportional to their token generation rates. Also, to exploit the excess bandwidth allocation enabled by the proposed traffic control schemes, we have been studying flexible yet practical service plans under a hybrid traffic control architecture, which are attractive to both an Internet service provider and its subscribers in terms of revenue and quality of service. In this paper we report the current status of our modeling of the hybrid traffic control schemes and service plans with OMNeT++/INET-HNRL based on IEEE standard 802. 1 Q <b>stacked</b> <b>VLANs.</b> Comment: Published in: A. Foerster, V. Vesely, A. Virdis, M. Kirsche (Eds.), Proc. of the 3 rd OMNeT++ Community Summit, Brno University of Technology - Czech Republic - September 15 - 16, 201...|$|R

