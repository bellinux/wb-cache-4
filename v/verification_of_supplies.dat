0|10000|Public
40|$|Introduction This {{deliverable}} {{presents the}} results achieved within task 3. 2. 1 during SYRF's first year of operation. According to the project program[21], the deliverable consists of four different types of results: ffl Developing an interface to the workbench in NP-Tools, NP Technology's verification toolbox; ffl Support for expressing properties and requirements in synchronous systems; ffl Improving the Stalmarck method for analysis of synchronous systems; ffl System <b>verification</b> <b>of</b> <b>supplied</b> cases. In Section 2 we describe the Stalmarck method and the improvements made to its implementation. In Section 3 we describe the developed support for expressing properties and requirements. In Section 4 we describe the developed workbench interface. In Section 5 we describe the status <b>of</b> the system <b>verification</b> <b>of</b> the <b>supplied</b> case studies. 2 Improvements of the Stalmarck Method The Stalmarck method i...|$|R
40|$|AbstractTo {{verify the}} {{compatibility}} of interaction of enterprises {{on the supply}} chain, the verification method and design <b>of</b> a <b>supply</b> chain interaction model based on Pi-calculus is presented. First, the interaction view is {{used to describe the}} interaction structure between enterprises on the supply chain; second, the formalization modeling for the interaction structure <b>of</b> <b>supply</b> chain was conducted based on Pi-calculus; third, with the deduction capabilities of Pi-calculus, deduction and verification on the established model is conducted; and finally, to confirm the verification method, the Mobility Workbench (MWB) is applied to present the <b>verification</b> process <b>of</b> <b>supply</b> chain compatibility. According to the results, the method can effectively test the compatibility <b>of</b> <b>supply</b> chain...|$|R
40|$|This {{procedure}} {{establishes a}} system for performing testing in the Six-Degree-Of-Freedom Dynamic Test System (SDTS). Testing includes development and <b>verification</b> testing <b>of</b> customer <b>supplied</b> Test Articles (TAs) and other testing requirements, as requested. This procedure applies to all SDTS testing operations and equipment. The procedure {{provides an overview of}} testing performed in the SDTS including test identification requirements, test planning and procedure development, test and performance inspection, test data analysis, and test report generation...|$|R
40|$|Monitoring {{agencies}} {{often use}} computer based equipment to control instruments and {{to collect data}} at sites that are being monitored under international safeguards or other cooperative monitoring agreements. In order for this data {{to be used as}} an independent <b>verification</b> <b>of</b> data <b>supplied</b> by the host at the facility, the software used must be trusted by the monitoring agency. The monitoring party must be sure that the software has not be altered to give results that could lead to erroneous conclusions about nuclear materials inventories or other operating conditions at the site. The host might also want to verify that the software being used is the software that has been previously inspected in order to be assured that only data that is allowed under the agreement is being collected. A description of a method to provide this verification using keyed has functions and how the proposed method overcomes possible vulnerabilities in methods currently in use such as loading the software from trusted disks is presented. The use of public key data authentication for this purpose is also discussed...|$|R
40|$|This study shown {{possibilities}} of Rapid Prototyping techniques (RP) and metal casting simulation software (MCSS), including non inertial reference systems. RP and MCSS {{have been used}} in order to design and produce essential elements for artificial heart. Additionally it has been shown {{possibilities of}} Fused Deposition Modeling (FDM) technique and DodJet technology using prototyped elements of rotodynamic pump. MAGMASOFT® software allowed to verify the cast kit heart valves model. Optical scanner Atos III enabled size <b>verification</b> <b>of</b> experimental elements <b>supplied</b> by rapid prototyping together with metal casting elements. Due to the selection of ceramic materials and assessment of molten metal – ceramic reactivity at high temperatures together with pattern materials selection model it was possible to design, manufacture a ceramic mould for titanium based alloys. The casting structure modification has been carried out by means of high isostatic pressure technique (HIP). The quality assessment of the casting materials has been performed using X-ray fluorescence (XRF), ARL 4460 Optical Emission Spectrometer, metallographic techniques and X-ray computed tomography...|$|R
40|$|The aim of {{this thesis}} is to explain the {{principle}} of automatic disconnection <b>of</b> <b>supply,</b> {{which is one of}} the basic protective measures for security assurance in electric installations of low voltage according to the new issue of Czech Technical Standard (ČSN 33 2000 - 4 - 41 ed. 2). Furthermore, the relevant clauses of the Czech Technical Standard in the new and previous issues are compared, with focus on the problem of automatic disconnection <b>of</b> <b>supply</b> in basic types of distribution networks. In agreement with theoretical conclusions, a project <b>of</b> electric energy <b>supply</b> system is proposed in the practical part of the thesis. Special attention is paid to showing the methods <b>of</b> modeling and <b>verification</b> <b>of</b> conditions for automatic disconnection <b>of</b> <b>supply,</b> with using control calculations in the SICHR program. Finally, the fulfillment of the conditions for automatic disconnection <b>of</b> <b>supply</b> is verified by revising the electrical supply system...|$|R
40|$|An {{important}} feature of object-oriented programming languages is the ability todynamically instantiate user-defined container data structures such as lists, trees,and hash tables. Programs implement such data structures using references todynamically allocated objects, which allows data structures to store unboundednumbers of objects, but makes reasoning about programs more difficult. Reasoningabout object-oriented programs with complex data structures is simplified if datastructure operations are specified in terms of abstract sets of objects associatedwith each data structure. For example, an insertion into a data structure in thisapproach becomes simply an insertion into a dynamically changing set-valued fieldof an object, {{as opposed to a}} manipulation of a dynamically linked structure linkedto the object. In this paper we explore reasoning techniques for programs that manipulate datastructures specified using set-valued abstract fields associated with container objects. We compare the expressive power and the complexity of specification languagesbased on 1) decidable prefix vocabulary classes of first-order logic, 2) twovariablelogic with counting, and 3) Nelson-Oppen combinations of multisortedtheories. Such specification logics can be used for <b>verification</b> <b>of</b> object-orientedprograms with <b>supplied</b> invariants. Moreover, by selecting an appropriate subsetof properties expressible in such logic, the decision procedures for these logics yieldautomated computation of lattice operations in abstract interpretation domain, aswell as automated computation of abstract program semantics...|$|R
5000|$|<b>Verification</b> <b>of</b> Mortgage (VOM) or <b>Verification</b> <b>of</b> Payment (VOP) ...|$|R
40|$|A {{deductive}} {{approach to}} <b>verification</b> <b>of</b> telecommunication systems written in C is proposed. The approach {{is based on}} the extension of C by declarative statements and on reduction <b>of</b> <b>verification</b> <b>of</b> parallel communicating components of these systems to separate <b>verification</b> <b>of</b> components written in this extension. An example <b>of</b> <b>verification</b> <b>of</b> a data link protocol is considered. </p...|$|R
40|$|This {{thesis is}} {{dedicated}} to the automatic and formal <b>verification</b> <b>of</b> the heap propertiesofobjectorientedprograms. Programverificationisthecheckthat a given program satisfies given properties. Program verification is called formal if both the semantics of the specifications and the program execution are defined formally as mathematical entities. The verification is called automatic if it is performed automatically without interaction or with limited interaction with a user. Our approach is targeted towards the <b>verification</b> <b>of</b> the preservation of heap-topological properties. It is also aimed towards the <b>verification</b> <b>of</b> the effects and the frame properties of the program statements. Automatic <b>verification</b> <b>of</b> heap structures is crucial for the <b>verification</b> <b>of</b> multi-object invariants, the <b>verification</b> <b>of</b> concurrent programs (e. g., absence of race conditions and deadlocks), software engineering (e. g., enabling encapsulation and modular development, handlingdesign patterns), and the <b>verification</b> <b>of</b> security properties (e. g., isolation) ...|$|R
40|$|ISBN: 0444893679 The {{application}} of BDD-based proof methods {{to the formal}} <b>verification</b> <b>of</b> HDL constructs is discussed. Applications include the <b>verification</b> <b>of</b> combinational circuits specified by means <b>of</b> vector-expressions, the <b>verification</b> <b>of</b> the logic of processors, the equivalence-roof of synchronous finite-state machines, and symbolic model-checking...|$|R
5000|$|<b>Verification</b> <b>of</b> program {{evaluation}} processes of university programs in Quebec through its Commission <b>of</b> <b>verification</b> <b>of</b> {{program evaluation}} (CVEP) ...|$|R
40|$|We {{establish}} {{conditions under}} which the experimental <b>verification</b> <b>of</b> quantum error-correcting behavior against a linear set of error operators suffices for the <b>verification</b> <b>of</b> noiseless subsystems of an error algebra contained in. From a practical standpoint, our results imply that the <b>verification</b> <b>of</b> a noiseless subsystem need not require the explicit <b>verification</b> <b>of</b> noiseless behavior for all possible initial states of the syndrome subsystem. Comment: 6 pages, no figures, REVTeX 4 styl...|$|R
40|$|This paper {{describes}} a self-timed static RAM. A single bit RAM {{is described in}} the design language Synchronized Transitions and using the verification tools supporting this language, it is shown that the design is speed-independent. Furthermore, a transistor level implementation of the design is presented. I. Introduction This paper presents the design and formal <b>verification</b> <b>of</b> a self-timed static RAM. The RAM is designed for robust operation at a wide range <b>of</b> <b>supply</b> voltages and is intended for low-power applications. The paper summarizes the design, but the main {{emphasis is on the}} formal <b>verification</b> <b>of</b> speed-independence. The design is intended for relatively small specialized RAM. A different approach is needed for large general purpose RAM designs. The characteristic property of a speed-independent circuit is that its behavior does not rely on the delays of its components (gates). Such circuits are robust to data and parameter variations. The speed-independence may have sign [...] ...|$|R
30|$|The <b>verification</b> <b>of</b> {{this step}} follows {{the same pattern}} as in the <b>verification</b> <b>of</b> Step  4 in the proof of Theorem  3.1.|$|R
40|$|The {{following}} {{topics are}} covered in viewgraph form: (1) introduction to clock synchronization protocols; (2) a schematic formulation of clock synchronization; (3) the interactive convergence algorithm; (4) <b>verification</b> <b>of</b> Schneider's formulation; (5) <b>verification</b> <b>of</b> interactive convergence; (6) a hardware-oriented clock synchronization protocol; (7) <b>verification</b> <b>of</b> Infis/Moore's protocol; and (8) the EHDM specification/verification environment...|$|R
5000|$|Cremers' {{publications}} cover security, cryptography, ISO standards, automated <b>verification</b> <b>of</b> security protocols, {{and formal}} methods. His thesis was entitled [...] "Scyther - Semantics and <b>Verification</b> <b>of</b> Security Protocols", and was supervised by Sjouke Mauw and Erik de Vink. Also published with Sjouke Mauw is their book [...] "Operational Semantics and <b>Verification</b> <b>of</b> Security Protocols".|$|R
40|$|Several issues {{concerning}} the envisaged SIS 100 resonant extraction at GSI {{can be resolved}} with a simulation-lead approach for which a particle tracking code was developed. Applications to date have included: design and testing <b>of</b> data <b>supply</b> algorithms for the accelerator control system; requirements analysis for the power converter ripple in the quadrupoles forming the doublet focusing; and <b>verification</b> <b>of</b> the RF Knock-Out exciter’s performance...|$|R
40|$|The labor {{discusses}} experimental <b>verification</b> <b>of</b> {{the dielectric}} properties of pulsed stress slot insulation Isonom NMN. During the pulse stress is investigated in particular {{component of a}} complex permittivity depending on frequency and temperature during the electrical stress {{in the form of}} pulses of different intensities <b>of</b> electric field <b>supplied...</b>|$|R
40|$|Description of PID and PSD {{controllers}} structures. <b>Verification</b> <b>of</b> {{function of}} heterogeneous structures of PSD controllers on typicall transfer functions. Respones to changes of input value. Effect of change of sampling period on PSD cotrollers. <b>Verification</b> <b>of</b> influence of derivative part of PS-D and S-PD controllers...|$|R
40|$|Covering arrays [...] . is a {{test suite}} [...] for <b>verification</b> <b>of</b> {{interactions}} between components. N. Francetic ́ (Monash) CARLs September 22, 2014. Covering arrays [...] . {{is a test}} suite [...] for <b>verification</b> <b>of</b> interactions between components. N. Francetic ́ (Monash) CARLs September 22, 2014. Covering arrays [...] . is a test suite [...] for <b>verification</b> <b>of</b> interactions between components...|$|R
40|$|Since many {{applications}} require the <b>verification</b> <b>of</b> large sets of signatures, {{it is sometimes}} advantageous to perform a simultaneous <b>verification</b> instead <b>of</b> checking each signature individually. The simultaneous processing, called batching, must be provably equivalent to the sequential <b>verification</b> <b>of</b> all signatures...|$|R
30|$|Using {{the results}} of Lemma 1, we can replace <b>verification</b> <b>of</b> {{positive}} definiteness of matrix S_ 4 by <b>verification</b> <b>of</b> positive definiteness of two matrices of lower dimensionality.|$|R
40|$|In {{this paper}} we propose a {{methodology}} for the deductive <b>verification</b> <b>of</b> outof -order scheduling algorithms. A `top-down' scheme for the systematic definition of system invariants is defined. The complementary use of predicted values, auxiliary fields storing a dispatch time prediction of an instruction's value, is proposed as a means of further simplifying the <b>verification</b> <b>of</b> systems in this class. We illustrate the use of the `top-down' methodology and predicted values in the <b>verification</b> <b>of</b> three out-of-order scheduling algorithms, including a detailed discussion <b>of</b> the <b>verification</b> <b>of</b> a model based on the Mips R 10000...|$|R
30|$|Transducers {{installation}} and check (in particular, <b>verification</b> <b>of</b> verticality {{because of the}} only Z-displacement monitoring); connection to control unit and <b>verification</b> <b>of</b> the correct operating of the measuring system.|$|R
5000|$|Citizenship. Subject {{must be a}} U.S. citizen. Independent <b>verification</b> <b>of</b> {{citizenship}} received {{directly from}} appropriate registration authority. For foreign-born immediate family members, <b>verification</b> <b>of</b> citizenship or legal status is also required.|$|R
40|$|A {{number of}} methodologies for verifying systems and {{computer}} based tools that assist users in verifying their systems were developed. These tools {{were applied to}} verify in part the SIFT ultrareliable aircraft computer. Topics covered included: STP theorem prover; design <b>verification</b> <b>of</b> SIFT; high level language code verification; assembly language level verification; numerical algorithm verification; <b>verification</b> <b>of</b> flight control programs; and <b>verification</b> <b>of</b> hardware logic...|$|R
40|$|No. 3 revised {{was issued}} Dec. 1, 1903, as Bureau {{circular}} no. 1, with title: <b>Verification</b> <b>of</b> standards and measuring instruments. No. 2 revised was issued Dec. 1, 1903, as Bureau circular no. 2, with title: <b>Verification</b> <b>of</b> metal tapes. 1. Announcement of organization. January 1, 1902. [...] 2. The <b>verification</b> <b>of</b> tapes. May 1, 1902. [...] 3. The <b>verification</b> <b>of</b> standards and standard measuring instruments. June 1, 1903. [...] 4. Table of equivalents of the customary and metric weights and measures. 1 st ed. 1903. Mode of access: Internet. grad: No. 1 - 3 lackin...|$|R
40|$|Abstract: There are {{two main}} streams for the <b>verification</b> <b>of</b> digital systems: Theorem proving methods such as term {{rewriting}} are used for the <b>verification</b> <b>of</b> data oriented systems, and model checking of temporal logics is usually used for the <b>verification</b> <b>of</b> control dominated systems. While theorem proving is an inherently interactive verification method, model checking is performed automatically. In this paper, we investigate for the <b>verification</b> <b>of</b> algorithms for computing the discrete cosine transform by means of term rewriting and model checking. We show {{the advantages and disadvantages}} of both approaches at different abstraction levels of the design. ...|$|R
40|$|The present paper {{deals with}} the <b>verification</b> <b>of</b> a {{numerical}} simulation technique of fluid-structure interaction (FSI) problems. The configuration of the task consists of viscous incompressible fluid around an elastic cylindrical thin-walled structure where the external flow is fully turbulent (Reynolds numbers Re= 1. 2 • 107). The verification {{is divided into three}} stages: 1) <b>verification</b> <b>of</b> the mechanical finite element model, 2) <b>verification</b> <b>of</b> the fluid finite volume model and 3) <b>verification</b> <b>of</b> the Fluid-Structure interaction model. Within the stage 1 the comparison of the obtained results with the full-scale measurements and the results of the alternative numerical simulations are presented below...|$|R
40|$|We {{review a}} number <b>of</b> {{temporal}} <b>verification</b> techniques for reactive systems using modularity and abstraction. Their use allows the <b>verification</b> <b>of</b> larger systems, and the incremental <b>verification</b> <b>of</b> systems {{as they are}} developed and refined. In particular, we show how deductive verification tools, and the combination of finite-state model checking and abstraction, allow the <b>verification</b> <b>of</b> infinite-state systems featuring data types commonly used in software specifications, including real-time and hybrid systems...|$|R
40|$|<b>Verification</b> <b>of</b> {{embedded}} systems {{is a challenge}} due to the tight combination of hardware and software. We present an approach on the automatic <b>verification</b> <b>of</b> embedded system applications for the operating system Contiki using a standard bounded model checking tool for software. By using an operating system a higher abstraction level to hardware is possible. Our approach is therefore easily applicable for the <b>verification</b> <b>of</b> different hardware platforms...|$|R
40|$|In {{this paper}} we propose a {{methodology}} for the compositional <b>verification</b> <b>of</b> IP-block based designs. We will focus on the reasoning <b>of</b> the compositional <b>verification</b> <b>of</b> the IP based design and on the issue of what interface behavior should be provided with an IP block to make the verification feasible. The proposed approach will be illustrated on the compositional <b>verification</b> <b>of</b> an ATM bit error monitor (BERMON) system...|$|R
40|$|The <b>verification</b> <b>of</b> {{functionality}} ofthe input/output logic properties often composes {{the majority}} of software requirements analysis [12]. Automated theorem provers (ATPs) such as SRI's Prototype Verification System (PVS) have been successfully used in the formal <b>verification</b> <b>of</b> functional properties. However, such functional methods are not readily applicable to the <b>verification</b> <b>of</b> the real-time software requirements. The thesis continues the research summarized in [13], focusing on extending functional verification methods to the <b>verification</b> <b>of</b> real-time control properties {{through the development of}} a PVS library for the specification and <b>verification</b> <b>of</b> real-time control system. More specifically, we extend the PVS "Clocks" and "Held For" theories originally defined in [4] and [13], and refine the PVS Real-Time method (PVS-RT) outlined in [13]. New developments of the thesis include the definition of strong clock induction and several lemmas regarding real-time properties. These definitions, whe...|$|R
40|$|Despite many {{advances}} that enable {{the application of}} model checking techniques to the <b>verification</b> <b>of</b> large systems, the state-explosion problem remains the main challenge for scalability. Composi-tional verification addresses this challenge by decomposing the <b>verification</b> <b>of</b> a large system into the <b>verification</b> <b>of</b> its components. Recent techniques use learning-based approaches to automate com-positional verification based on the assume-guarantee style reasoning. However, these techniques are only applicable to finite-state systems. In this work, we propose a new framework that interleaves abstraction and learning to perform automated compositional <b>verification</b> <b>of</b> infinite-state systems. We also discuss the role of learning and abstraction in the related context of interface generation for infinite-state components. ...|$|R
40|$|We {{propose a}} model of group {{processes}} that accords a key role to the <b>verification</b> <b>of</b> people’s self-views (thoughts and feelings about the self). This approach partially incorporates past work on self-categorization (under the rubric <b>of</b> <b>verification</b> <b>of</b> social self-views) and introduces a new set <b>of</b> processes (the <b>verification</b> <b>of</b> personal selfviews) to the groups literature. Conceptual analysis and recent empirical evidence suggest the self-verification framework offers a novel perspective on finding value in diversity...|$|R
