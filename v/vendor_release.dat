0|93|Public
50|$|Various {{video card}} <b>vendors</b> <b>released</b> their own {{accelerated}} boards, each {{with their own}} instruction set for GPU operations. The OpenGL Architecture Review Board (ARB) was formed in 1992, in part to establish standards for the GPU industry.|$|R
50|$|In 2011, handset <b>vendors</b> <b>released</b> {{more than}} 40 NFC-enabled {{handsets}} with the Android mobile operating system. The iPhone 6 {{line is the}} first set of handsets from Apple to support NFC. BlackBerry devices support NFC using BlackBerry Tag on devices running BlackBerry OS 7.0 and greater.|$|R
50|$|Aftermarket <b>vendors</b> also <b>released</b> {{modifications}} to upgrade mainboard memory and permit installation of an Intel 8087 math coprocessor.|$|R
25|$|Many {{third-party}} {{anti-virus software}} <b>vendors</b> have <b>released</b> detection updates to their products and {{claim to be}} able to remove the worm.|$|R
5000|$|Third-party {{software}} <b>vendors</b> have <b>released</b> many applets. Although it {{is impossible}} to mention all of them, some of them are listed here: ...|$|R
5000|$|Sercos III is {{the third}} {{generation}} of the Sercos interface, a globally standardized open digital interface for the communication between industrial controls, motion devices, input/output devices (I/O), and Standard Ethernet nodes. Sercos III merges the hard real-time aspects of the Sercos interface with Ethernet. It is based upon and conforms to the Ethernet standard (IEEE 802.3 & ISO/IEC 8802-3). Work began on Sercos III in 2003, with <b>vendors</b> <b>releasing</b> first products supporting it in 2005. [...] In addition to the standard Sercos features cited under the Sercos interface general description, Sercos III also provides: ...|$|R
25|$|Signature updates for {{a number}} of network {{scanning}} applications are now available including NMap and Nessus. In addition, several commercial <b>vendors</b> have <b>released</b> dedicated scanners, namely eEye and McAfee.|$|R
40|$|Software {{vulnerabilities}} are a {{major problem}} for organizations and society given how pervasive the use of computers and the Internet and networks has become. Computers, the Internet and networks in general are underpinned by operating system software and, increasingly, software applications are integrated with the Internet. In this increasingly complex environment hackers and attackers are more likely to take advantage of software vulnerabilities and exploit operating system software and application software. These software exploitations can result in huge losses to businesses which are highly reliant on computerized systems. Software vendors are responsible for securing these vulnerabilities through software patching. This study examines the effect of the level of criticality of software vulnerabilities, type of software vendor and type of software on the software vendors‘ response time in releasing software patches once software vendors have been informed of vulnerabilities in their software. The main theoretical support for this study is software security disclosure theory and an economic model of software security investment. These theories provide a framework for understanding how open source versus proprietary software vendors respond with patches to software vulnerabilities depending on the level of criticality of the software vulnerability and the type of software. Empirical data was collected from four related software vulnerability databases: SecurityFocus, Open Source Vulnerability Database, National Vulnerability Database and Secunia. These four software vulnerability databases contain archival data about software vulnerabilities which has been rigorously collected and screened. This research focuses on software vulnerabilities that have been recently reported in these software vulnerability databases from 2008 to 2010. To test the hypothesised relationships in the proposed research model, multiple regression analysis is used as the main statistical tool. Analysis of the archival data confirms that software <b>vendors</b> <b>release</b> patches for software vulnerabilities with a medium level of criticality in a shorter response time than software vulnerabilities with low and high levels of criticality once the vendor has been informed of the software vulnerability. Open source <b>vendors</b> <b>release</b> patches for open source software vulnerabilities 39 % quicker than proprietary source <b>vendors</b> <b>release</b> patches for proprietary software. Patches for operating system software vulnerabilities are released 8 % slower than patches for application software vulnerabilities. This study contributes to the existing knowledge and theory by investigating how the different levels of criticality of software vulnerabilities, the differences between open and proprietary source software vendors and the difference between operating system software and application software impact on the response time of software <b>vendors</b> in <b>releasing</b> patches once the software vendor is informed of software vulnerabilities. The findings of this study also establish that responsible disclosure is a more effective mechanism than full disclosure for determining the response time of software vendors. This study contributes to practice by providing an enhanced understanding of the software vulnerability landscape and the complex process of software vendors‘ patching behaviour. ...|$|R
40|$|CERN {{relies on}} OPC Server {{implementations}} from 3 rd party device vendors {{to provide a}} software interface to their respective hardware. Each time a <b>vendor</b> <b>releases</b> a new OPC Server version it is regression tested internally to verify that existing functionality has not been inadvertently broken {{during the process of}} adding new features. In addition bugs and problems must be communicated to the vendors in a reliable and portable way. This presentation covers the automated test approach used at CERN to cover both cases: Scripts are written in a domain specific language specifically created for describing OPC tests and executed by a custom software engine driving the OPC Server implementation...|$|R
5000|$|Lowery {{worked on}} Rob Zombies 2006 album Educated Horses, co-writing {{eight out of}} eleven tracks with Zombie. When he left Loser, Lowery took up the role of Rob Zombie guitarist as a {{permanent}} gig. “Rob is the best I have worked with. Hes great. We {{have a great time}} on stage together. It has been the single greatest experience I have had working with someone, hands down." [...] John is also the guitarist on Robs latest albums, Hellbilly Deluxe 2, released February 2, 2010, Venomous Rat Regeneration <b>Vendor,</b> <b>released</b> April 23, 2013, and The Electric Warlock Acid Witch Satanic Orgy Celebration Dispenser, released April 29, 2016.|$|R
5000|$|Various keynote speeches by FDA {{insiders}} {{early in}} the 21st century (in addition to high-profile audit findings focusing on computer system compliance) resulted in many companies scrambling to mount a defense against rule enforcement that they were procedurally and technologically unprepared for. Many software and instrumentation <b>vendors</b> <b>released</b> Part 11 [...] "compliant" [...] updates that were either incomplete or insufficient to fully comply with the rule. Complaints about the wasting of critical resources, non-value added aspects, in addition to confusion within the drug, medical device, biotech/biologic and other industries about the true scope and enforcement aspects of Part 11 resulted in the FDA release of: ...|$|R
40|$|As mobile devices become {{increasingly}} smarter and more powerful, so too must the engineering of their software. User-interface-driven system testing {{of these devices}} is gaining popularity, with each <b>vendor</b> <b>releasing</b> some automation tool. However, these tools are inappropriate for amateur programmers, an increasing portion of app developers. MobiGUITAR (Mobile GUI Testing Framework) provides automated GUI-driven testing of Android apps. It's based on observation, extraction, and abstraction of GUI widgets' run-time state. The abstraction is a scalable state machine model that, together with test coverage criteria, provides a way to automatically generate test cases. When applied to four open-source Android apps, MobiGUITAR automatically generated and executed 7, 711 test cases and reported 10 new bugs. Some bugs were Android-specific, stemming from the event- and activity-driven nature of Android...|$|R
40|$|Engineering is {{responsible}} for ensuring this document is necessary, reflects actual practice, and supports the organization. Purpose The Data Center Services (DCS) Software Version Support Policy establishes software product version standards to ensure the security, reliability and supportability of software in use by its customers. The DCS policy is to support currently installed software versions and prior versions only when vendor support is maintained within the current software contracts, and it is determined feasible to do so within the existing service rates. Scope This Policy applies to managed platforms hosted at DCS facilities and will enable better management of critical software resources. Policy The Software Version Support Policy recognizes there are continuous changes in software product versions. As <b>vendors</b> <b>release</b> new versions of software, the DCS will implement updates into production based {{on a variety of}} business and operational factors, including but not limite...|$|R
50|$|As of 2014, most {{equipment}} <b>vendors</b> have <b>released</b> {{two versions}} of their radio units: one dedicated to the lower band and another one dedicated to the upper band. A notable alternative is provided by Alcatel-Lucent - their RRH2x40-07APT-4R radio unit covers the entire band 28 (45 MHz) within a single radio unit thus negating the need of sourcing two different radio unit variants.|$|R
40|$|Web {{services}} provide {{platform independent}} communication through an XML-based standard family. The major software <b>vendors</b> <b>released</b> their own SOA products implementing these standards. However, {{the configuration of}} the WS- * protocols differs from product to product. Matching these configurations between different products can be a tedious task. In addition, security protocols are complicated to configure, especially if access control is also required. Although the XACML standard aims to solve this problem, its rules and policies described in XML are not user friendly, and XACML has little support in the major SOA products. Therefore, we have developed a platform independent metamodel for describing distributed systems of web services. From models described in this metamodel the platform specific configurations and program code can be gen-erated for the various SOA products, increasing the productiv-ity of the development. This article introduces an access con-trol extension to this metamodel. Keywords web services · WS- * standards · SAML · claims-based identity · metamodeling...|$|R
5000|$|IBM {{released}} the IBM Personal Computer in 1981 and included {{a variant of}} the Centronics interface— only IBM logo printers (rebranded from Epson) could be used with the IBM PC. [...] IBM standardized the parallel cable with a DB25F connector on the PC side and the 36-pin Centronics connector on the printer side. <b>Vendors</b> soon <b>released</b> printers compatible with both standard Centronics and the IBM implementation.|$|R
50|$|Irfan's {{next film}} Ponge Ezhu Manohara, a village drama genre set in 1990s where {{he plays the}} role of a milk <b>vendor</b> got <b>released</b> in February 2015. Like his other films this too had poor {{reception}} from the audience and critics alike, ending up sinking without much trace at the box office. He has finished shooting for an action-thriller based subject titled Ru, where he portrays a role an aspiring actor.|$|R
50|$|Libranet {{released}} version 3.0, {{which received}} good reviews, {{but the market}} had changed for desktop distributions. Various other commercial <b>vendors</b> had <b>released</b> free versions of their distributions, such as SUSE, which released OpenSUSE, and Red Hat, which released Fedora. Whereas Libranet sold their distribution, and then gave free extensive support, many distributors chose to give away their distribution and sell support, and/or sell proprietary software enhancements to the distribution.|$|R
40|$|Every time a browser <b>vendor</b> <b>releases</b> a patch for a {{critical}} vulnerability, the popular news media publishes {{a slew of}} negative press article detailing the security holes that have been announced in the product. Users who read these articles often decide {{to switch to a}} “safer ” browser. The negative press associated with security patch releases has a number of unhealthy effects on the industry. We challenge the conventional wisdom of the current browser security evaluation paradigm: that browsers that receive infrequent security patches are safer than browsers that receive frequent patches, that browsers with a lower bug count are safer, and that reducing browser vulnerabilities is the only path that a browser vendor can follow to improve security. We argue that patch deployment matters vastly more than patch frequency, that bug count fails to take into account differences in severity and vendor reporting methodologies, and that the security features that matter most are ignored by negative news articles. We propose methods for evaluating browser security that take into account new industry best practices such as silent patch deployment and sandboxing. ...|$|R
40|$|The {{security}} of the client side of a web application relies on browser features such as cookies, the same-origin policy and HTTPS. As the client side grows increasingly powerful and sophisticated, browser vendors have stepped up their offering of security mechanisms which can be leveraged to protect it. These are often introduced experimentally and informally and, as adoption increases, gradually become standardised (e. g., CSP, CORS and HSTS). Considering the diverse landscape of browser <b>vendors,</b> <b>releases,</b> and customised versions for mobile and embedded devices, there is a compelling need for a systematic assessment of browser security. We present BrowserAudit, a tool for testing that a deployed browser enforces the guarantees implied by the main standardised and experimental security mechanisms. It includes more than 400 fully-automated tests that exercise {{a broad range of}} security features, helping web users, application developers and security researchers to make an informed security assessment of a deployed browser. We validate BrowserAudit by discovering both fresh and known security-related bugs in major browsers. Copyright is held by the owner/author(s) ...|$|R
5000|$|Interspersed {{with the}} first-person-shooter levels are several light cycle races. As {{seen in the}} movie, these races are {{actually}} arena duels in which each light cycle attempts to destroy its opponents by driving them into its jetwall. The arenas contain 'improvements' (such as speed zones that affect the cycles' speed), more complex layouts with walls and other artifacts (instead of the [...] "empty box" [...] {{as seen in the}} movie), and power-ups that can be collected during races. In addition to Tron's regular light cycle, Jet can also gain access to the super light cycle that sports a more modern design and offers more speed. Tron 2.0 initially required the player to win the light cycle races in order to advance the campaign. Consumer feedback revealed that many felt the computer-controlled light cyclers were impossibly precise in their controls (turning at speeds a human could not, or boxing themselves in,for example), forcing players to wait for the enemy light cycles to destroy themselves. As a result, the <b>vendor</b> <b>released</b> a patch eliminating this rule.|$|R
40|$|BLAS is a {{fundamental}} math library in scientific computing. Thus, each CPU <b>vendor</b> <b>releases</b> optimized BLAS library for its own CPU. Loongson CPU series are developed by the Institute of Computing Technology, Chinese Academy of Sciences. In 2010, it released Loongson 3 CPU series. This paper introduces the open source BLAS library OpenBLAS, which is forked on GotoBLAS 2 - 1. 13 BSD version. BLAS Level 3 functions of OpenBLAS is optimized on Loongson 3 A quad cores CPU. In sequential optimizations, blocking, hand coding assembly kernel, Loongson 3 A special instructions and reordering instructions are utilized. The performance of BLAS Level 3 subroutines exceeded GotoBLAS and ATLAS by about 75 % and 17 %. Meanwhile, it exceeded GotoBLAS and ATLAS by about 103 % and 36 % in double precision functions. In parallel multi-threads optimization, this study used interleaved data buffer layout to avoid shared L 2 Cache conflictions among multi-threads. OpenBLAS achieved 3. 47 speedups on quad cores. In 4 threads, the performance of OpenBLAS BLAS Level 3 functions exceeded GotoBLAS and ATLAS by about 69 % and 34 %, 89 % and 55 % in double precision functions. © 2011 Journal of Software. BLAS is {{a fundamental}} math library in scientific computing. Thus, each CPU <b>vendor</b> <b>releases</b> optimized BLAS library for its own CPU. Loongson CPU series are developed by the Institute of Computing Technology, Chinese Academy of Sciences. In 2010, it released Loongson 3 CPU series. This paper introduces the open source BLAS library OpenBLAS, which is forked on GotoBLAS 2 - 1. 13 BSD version. BLAS Level 3 functions of OpenBLAS is optimized on Loongson 3 A quad cores CPU. In sequential optimizations, blocking, hand coding assembly kernel, Loongson 3 A special instructions and reordering instructions are utilized. The performance of BLAS Level 3 subroutines exceeded GotoBLAS and ATLAS by about 75 % and 17 %. Meanwhile, it exceeded GotoBLAS and ATLAS by about 103 % and 36 % in double precision functions. In parallel multi-threads optimization, this study used interleaved data buffer layout to avoid shared L 2 Cache conflictions among multi-threads. OpenBLAS achieved 3. 47 speedups on quad cores. In 4 threads, the performance of OpenBLAS BLAS Level 3 functions exceeded GotoBLAS and ATLAS by about 69 % and 34 %, 89 % and 55 % in double precision functions. © 2011 Journal of Software...|$|R
40|$|Modern network {{interfaces}} demand {{highly intelligent}} traffic management {{in addition to}} the basic requirement of wire speed packet forwarding. Several <b>vendors</b> are <b>releasing</b> network processors in order to handle these demands. Network workloads can be classified into data plane and control plane workloads, however most network processors are optimized for data plane. Also, existing benchmark suites for network processors primarily contain data plane workloads, which perform packet processing for a forwarding function...|$|R
50|$|In 2014, {{companies}} {{used the}} benefits from the cloud hosting milestone to transfer HR functionality on mobile devices. Ever since, popular <b>vendors</b> have been <b>releasing</b> special Android and iPad/iPhone applications {{to meet the needs}} of all teams and businesses.|$|R
50|$|In total, the <b>vendor</b> has <b>released</b> 25 {{security}} patches (aka SAP Security Notes). One of {{the most}} notorious vulnerabilities was closed among the set of fixes released in March 2017. The vulnerability in the SAP GUI client for Windows allows remote code execution. Also, researchers who identified the security issues pointed out that the vulnerability allows an attacker to download ransomware on the SAP server that would be automatically installed on every workstation within a company.|$|R
40|$|As {{is pretty}} well known, a {{framework}} {{is one of}} the most desirable products for the reusability today. Many software <b>vendors</b> have <b>released</b> their own frameworks to solidify their position in the platform market. And from the developer's perspective, frameworks can be utilized as useful tools for productivity improvement. These days, frameworks are becoming a valuable asset of software companies. This paper describes not only solutions to the problems which are encountered in framework development, but also important factors to be considered...|$|R
5|$|Starting {{from around}} 2012 {{the use of}} {{ransomware}} scams has grown internationally. in June 2013, <b>vendor</b> McAfee <b>released</b> data showing that it had collected {{more than double the}} number of samples of ransomware that quarter than it had in the same quarter of the previous year. CryptoLocker was particularly successful, procuring an estimated US $3 million before it was taken down by authorities, and CryptoWall was estimated by the US Federal Bureau of Investigation (FBI) to have accrued over US $18m by June 2015.|$|R
2500|$|Not all {{potential}} users of web templates have the willingness {{and ability to}} hire developers to design a system for their needs. Additionally, some may wish to use the web but have limited or no technical proficiency. For these reasons, a number of developers and <b>vendors</b> have <b>released</b> web templates specifically for reuse by non-technical people. Although web template reusability is also important for even highly skilled and technically experienced developers, it is especially critical to those who rely on simplicity and [...] "ready-made" [...] web solutions.|$|R
50|$|Starting {{from around}} 2012 {{the use of}} {{ransomware}} scams has grown internationally. in June 2013, <b>vendor</b> McAfee <b>released</b> data showing that it had collected {{more than double the}} number of samples of ransomware that quarter than it had in the same quarter of the previous year. CryptoLocker was particularly successful, procuring an estimated US $3 million before it was taken down by authorities, and CryptoWall was estimated by the US Federal Bureau of Investigation (FBI) to have accrued over US $18m by June 2015.|$|R
5000|$|Not all {{potential}} users of web templates have the willingness {{and ability to}} hire developers to design a system for their needs. Additionally, some may wish to use the web but have limited or no technical proficiency. For these reasons, a number of developers and <b>vendors</b> have <b>released</b> web templates specifically for reuse by non-technical people. Although web template reusability is also important for even highly skilled and technically experienced developers, it is especially critical to those who rely on simplicity and [...] "ready-made" [...] web solutions.|$|R
40|$|Recently, a new {{attack for}} {{poisoning}} the cache of Recursive DNS (RDNS) resolvers was discovered and {{revealed to the}} public. In response, major DNS <b>vendors</b> <b>released</b> a patch to their software. However, the released patch does not completely protect DNS servers from cache poisoning attacks {{in a number of}} practical scenarios. DNSSEC seems to offer a definitive solution to the vulnerabilities of the DNS protocol, but unfortunately DNSSEC has not yet been widely deployed. In this paper, we propose Wild-card SECure DNS (WSEC DNS), a novel solution to DNS cache poisoning attacks. WSEC DNS relies on existing properties of the DNS protocol and is based on wild-card domain names. We show that WSEC DNS is able to decrease the probability of success of cache poisoning attacks by several orders of magnitude. That is, with WSEC DNS in place, an attacker has to persistently run a cache poisoning attack for years, before having a non-negligible chance of success. Furthermore, WSEC DNS offers complete backward compatibility to DNS servers that may for any reason decide not to implement it, therefore allowing an incremental large-scale deployment. Contrary to DNSSEC, WSEC DNS is deployable immediately because it does not have the technical and political problems that have so far hampered a large-scale deployment of DNSSEC...|$|R
5000|$|Non-disclosure {{agreement}} (NDA): It {{is quite}} normal to request vendors {{to sign an}} NDA prior to engaging with them. This protects the organisation where sensitive information is shared with multiple potential <b>vendors</b> ahead of <b>releasing</b> detailed requirements which often point to strategic decisions a firm has taken.|$|R
40|$|In {{the past}} {{two or three years}} most major PKI {{technology}} <b>vendors</b> have <b>released</b> products which allow digital certificate holders with "soft certificates " to have their private keys stored at a central server and uploaded when needed to their local machine. This allows users to "roam " from one machine to another without having to manually manage the export and import of their keys onto temporary media like diskettes. Thus users gain much of the portability and usability advantages of hardware key media like smartcards an [...] . Copyright SANS Institut...|$|R
50|$|The Web Notification Service (WNS) {{is one of}} the {{implementation}} specifications for the Pub/Sub model. Regardless of the model, URL format is used and specified in the WFS specification. At this time there are no open-standard implementations of WNSs. <b>Vendors</b> plan to <b>release</b> implementations once the standard has been ratified.|$|R
40|$|We empirically {{estimate}} {{the effect of}} competition on ex-post quality in software markets by exploiting variation in number of vendors that share a common flaw or common vulnerabilities. We distinguish between two effects: the direct competition effect when vendors in the same market share a vulnerability, and the indirect effect, which operates through the increased disclosure threat and affects all vendors whose products share a vulnerability, {{whether or not they}} compete in the same product market. Using time to patch release as our measure of quality, we find that the direct effect of competition is similar in magnitude to that of indirect effect: one additional competitor lowers expected patching times by 5 % or about 8 days due to direct effect; one additional vendor sharing a vulnerability resulting in patching times falling by 5 % on an average or about 8 days due to the indirect effect. Products with more users get patched quicker as well. A 10 % increase in end users is associated with <b>vendors</b> <b>releasing</b> patch earlier by about 1. 4 %. Our results show that, ex-post product quality in software markets is not only conditioned by rivals that operate in the same product market, but by also nonrivals, that share the same common flaw. Our results also support the notion that increased competition, directly and indirectly, leads to faster patching times and improved consumer welfare...|$|R
40|$|Ever {{increasing}} numbers of software development products are being built using Commercial Off The Shelf (COTS) components to reduce costs, risks and cycle time. Integrating COTS components into a product involves designing and writing "glue code", and then testing {{to ensure that the}} new component operates correctly and compatibly with other parts of the product (custom code and other COTS components). The glue code must often be revised and retested each time a <b>vendor</b> <b>releases</b> {{a new version of the}} COTS component. The project thus incurs rework costs, in addition to the original license costs. This paper discusses the primary parameters that affect the costs associated with analyzing, modifying and retesting parts of the overall product each time a new version of a COTS component is <b>released</b> by a <b>vendor.</b> We describe a simple model for estimating COTS volatility costs. The model parameters include the total number of modules in the system, the number of expected releases, and the scope and complexity of the interactions affected by a new version of a component. (Our model does not address the increase of the modification costs with time, although we suggest two approaches for handling this.) Although a validated and calibrated model still remains to be defined, the present work does identify guidelines for using COTS components that will reduce the costs associated with COTS volatility. These guidelines will help managers and engineers choose designs and COTS components in ways that reduce project cost and risk. Stutzk...|$|R
