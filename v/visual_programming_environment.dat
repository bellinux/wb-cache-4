183|8960|Public
2500|$|ArcGIS 9 was {{released}} in May 2004, which included ArcGIS Server and ArcGIS Engine for developers. The ArcGIS 9 release includes a geoprocessing environment that allows execution of traditional GIS processing tools (such as clipping, overlay, and spatial analysis) interactively or from any scripting language that supports COM standards. [...] Although {{the most popular of}} these is Python, others have been used, especially Perl and VBScript. [...] ArcGIS 9 includes a <b>visual</b> <b>programming</b> <b>environment,</b> similar to ERDAS IMAGINE's Model Maker (released in 1994, v8.0.2). The Esri version is called ModelBuilder and as does the ERDAS IMAGINE version allows users to graphically link geoprocessing tools into new tools called models. [...] These models can be executed directly or exported to scripting languages which can then execute in batch mode (launched from a command line), or they can undergo further editing to add branching or looping.|$|E
5000|$|WireFusion, <b>visual</b> <b>programming</b> <b>environment</b> for {{creating}} interactive 3D web presentations ...|$|E
5000|$|TurtleBots: TurtleBots {{provides}} a <b>visual</b> <b>programming</b> <b>environment</b> oriented to blocks.|$|E
40|$|The {{goal of a}} {{parallel}} program is stated as to reduce the execution time regarding the fastest sequential program solving the same problem. Parallel programming is growing due to {{the widespread use of}} network of workstations in high performance computing. MPI has become the standard for implementing message-based parallel programs in distributed -memory computing environments. On the other side, <b>visual</b> <b>programming</b> <b>environments</b> try to make easier the task of developing applications. Delphi constitutes {{one of the most popular}} <b>visual</b> <b>programming</b> <b>environments</b> nowadays in the Windows operating system environment. In this paper we present MPI-Delphi, an implementation of MPI for writing parallel applications using Delphi. We explain how MPI-Delphi has been derived, how it has been used in a cluster of workstations with a mixture of Windows and Linux operating systems, and what MPI-Delphi is suitable for. Keywords: Cluster computing, parallel <b>programming</b> <b>environment,</b> <b>visual</b> <b>programming,</b> MPI-D [...] ...|$|R
40|$|Introduction In {{this paper}} we {{describe}} MViews, {{a model and}} framework for supporting the construction of <b>visual</b> <b>programming</b> <b>environments.</b> MViews includes a multiple view with consistency model and free interchange between textual and graphical modes of <b>programming.</b> <b>Visual</b> <b>programming</b> <b>environments</b> for particular tasks, such as object-oriented programming, are constructed by specialising MViews classes. The advantages of MViews for visual language implementation include its representation of programs and program views as graphs. This allows graph-based languages, typical of visual languages [2], to be represented naturally and graph-based semantics to be represented in the same manner. For multi-view editing, the text/graphics consistency model produces a novel and flexible method for integrating high-level graphical programming and low-level textual programming. The use of a reusable object-oriented framework, rather than an environment generator, produces a very flexible set o...|$|R
50|$|VPLs may {{be further}} classified, {{according}} to the type and extent of visual expression used, into icon-based languages, form-based languages, and diagram languages. <b>Visual</b> <b>programming</b> <b>environments</b> provide graphical or iconic elements which can be manipulated by users in an interactive way according to some specific spatial grammar for program construction.|$|R
5000|$|... stromx - An {{open source}} <b>visual</b> <b>programming</b> <b>environment</b> focused on machine vision.|$|E
5000|$|Max (software), <b>visual</b> <b>programming</b> <b>environment</b> for {{building}} interactive, real-time music and multimedia applications ...|$|E
5000|$|Reaktor - <b>visual</b> <b>programming</b> <b>environment</b> for sampling, {{granular}} sampling, sequencing and modular synthesis ...|$|E
5000|$|... #Caption: PSIBER <b>visual</b> PostScript <b>programming</b> <b>environment</b> for NeWS, with tabbed windows around {{objects on}} and off the stack.|$|R
40|$|To {{accommodate}} {{the growth of}} the software industry, programming languages are getting increasingly easy to use. The latest trend in the simplification of the software development process is the usage of <b>visual</b> <b>programming</b> <b>environments.</b> To make <b>visual</b> <b>programming</b> effective, the graph-like representation of the source code must be clearly arranged. This thesis details some of the difficulties in automatic layout generation and proposes an interface as well as two different implementations of automatic layout generators to integrate into the VWorkflows <b>visual</b> <b>programming</b> framework...|$|R
40|$|A new {{generation}} of innovative, highly <b>visual</b> children’s <b>programming</b> <b>environments</b> is under development. In this paper, we consider the instructional requirements for chil-dren learning to <b>program</b> in a <b>visual</b> <b>environment.</b> Based on our year-long experience using Apple Computer’s Kid-Sim/Cocoa prototype [2] {{and the results of}} a year-end as-sessment, we conclude that the children failed to grasp many aspects of the program operation. The children read-ily mastered drawing and animating characters in imaginary worlds, but struggled to achieve more complex behaviors. Lack of explicit instruction on program functionality hin-dered these children in their attempts to create more so-phisticated science programs. We explore the prospects for more effective instruction and suggest some guidelines for designing <b>visual</b> <b>programming</b> <b>environments...</b>|$|R
5000|$|Watcom {{acquired}} by Powersoft in 1993; Watcom SQL shipped with their <b>visual</b> <b>programming</b> <b>environment</b> PowerBuilder ...|$|E
5000|$|OpenMusic is an {{object-oriented}} <b>visual</b> <b>programming</b> <b>environment</b> {{based on}} Common Lisp, used in Computer assisted composition.|$|E
50|$|ThingLab is a <b>visual</b> <b>programming</b> <b>environment</b> {{implemented}} in Smalltalk and designed at Xerox PARC by Alan Borning.|$|E
40|$|We {{propose a}} series of {{features}} for the graphical user interface (GUI) of the COmputational MOdule Integrator (COMODI) [1][2]. In view of the special requirements that a COMODI type of framework for scientic computing imposes and inspiring from existing solutions that provide advanced graphical <b>visual</b> <b>programming</b> <b>environments,</b> we identify those elements and associated behaviors {{that will have to}} nd their way into the rst release of COMODI. ...|$|R
50|$|There {{cannot be}} a simple {{interface}} to a complex system (Here complexity is informally measured as number of menu options). This is {{a variation on the}} law of requisite variety which states that variety in a system should be at least as great as that found in its environment. Complex systems such as <b>visual</b> <b>programming</b> <b>environments</b> or CASE tools therefore cannot have simple interfaces.|$|R
5000|$|... #Caption: <b>Visual</b> IoT/Robotics <b>Programming</b> Language <b>Environment</b> LOGO ...|$|R
5000|$|PWGL is a {{sophisticated}} <b>visual</b> <b>programming</b> <b>environment</b> based on Common Lisp, used in Computer assisted composition and sound synthesis.|$|E
50|$|From 1989-1994, Dr. Chapman was the {{president}} of Echo Canyon Software in Boston, which produced the first <b>visual</b> <b>programming</b> <b>environment</b> for Windows, before Microsoft introduced Visual Basic.|$|E
50|$|OpenMusic (OM) is an {{object-oriented}} <b>visual</b> <b>programming</b> <b>environment</b> for {{musical composition}} based on Common Lisp.It {{may also be}} used as an all-purpose visual interface to Lisp programming.|$|E
5000|$|VIPLE Tutorial: <b>Visual</b> IoT/Robotics <b>Programming</b> Language <b>Environment,</b> GitBook ...|$|R
40|$|AbstractA {{compiler-compiler}} {{for visual}} languages is presented. It {{has been designed}} {{as a framework for}} building <b>visual</b> <b>programming</b> <b>environments</b> that translate schemas into textual representation as well as into programs representing the deep meaning of schemas. The deep semantics is implemented by applying attribute grammars to schema languages; attribute dependencies are implemented as methods of Java classes. Unlike compiler-compilers of textual languages, {{a large part of the}} framework is needed for support of interactive usage of a visual language...|$|R
5000|$|Rosson {{currently}} co-directs Penn State's CSCL Lab {{with her}} husband, John Carroll. She is {{a founding member}} of the End Users Shaping Effective Software(EUSES) Consortium, which focuses on issues and techniques related to end-user software engineering. Her other research interests include community informatics, environments and tools for object-oriented programming and design, and <b>visual</b> <b>programming</b> <b>environments.</b> She has also done work related to scenario-based design and minimalism [...] Rosson and Carroll co-developed the task-artifact framework for design.|$|R
5000|$|Orange (software) - Integrates PCA in its <b>visual</b> <b>programming</b> <b>environment.</b> PCA {{displays}} a scree plot (degree of explained variance) where user can interactively select {{the number of}} principal components.|$|E
5000|$|The [...] "visual languages" [...] (Visual Basic, Visual C#, Visual J#, etc.) of the Microsoft Visual Studio IDE are not visual {{programming}} languages. All of these languages are textual and not graphical. The MS Visual Studio is a <b>visual</b> <b>programming</b> <b>environment,</b> however.|$|E
5000|$|... center …a hosted {{service that}} lets you remix feeds and create new data mashups in a <b>visual</b> <b>programming</b> <b>environment.</b> The name of the service pays tribute to Unix pipes, which {{make it easy to}} chain simple {{utilities}} together on the command line.|$|E
50|$|ASU VIPLE is a <b>Visual</b> IoT/Robotics <b>Programming</b> Language <b>Environment</b> {{developed}} at Arizona State University.|$|R
40|$|This paper reports direct {{experience}} with two commercial, widely used <b>visual</b> <b>programming</b> <b>environments.</b> While {{neither of these}} systems is object oriented, the tools have transformed the development process and indicate a direction for visual object oriented tools to proceed. This paper reports on real world applications of visual tools that have exposed a perhaps unexpected effect of the systems development environment: The most dramatic gains in productivity are attributed to the communication among the customer, developer and computer that are facilitated by the visual syntax of the tools. If a similar level of communications support can be achieved in the <b>visual</b> object oriented <b>programming</b> <b>environment,</b> even greater productivity gains then now available can be expected. In our environment of test and measurement, <b>visual</b> <b>programming</b> currently provides productivity improvements of from four to ten times compared to conventional text-based programming. Two specific projects are discussed. The first is an application created {{as the result of}} parallel development between a <b>visual</b> <b>programming</b> team and a text-based (’C’) programming team. The second application involved ground test and characterization of two aspects of a large space-based instrument. These examples were selected from over forty projects completed using these tools...|$|R
40|$|In {{this thesis}} we present the <b>programming</b> <b>environment</b> Kodu Game Lab, which is {{intended}} for primary school pupils in learning introductory programming. With this <b>programming</b> <b>environment</b> pupils learn the basics of programming and algorithmic thinking. We performed an empirical study {{with the aim of}} checking the adequacy of the environment for introduction to programming. We also presented Kodu Game Lab to pupils in the third triad in selected primary school. Pupils with making their own games and animations, through problem-based learning, learn basic programming concepts such as objects, variables, and conditional sentences. <b>Visual</b> <b>programming</b> languages are getting more and more popular for the beginnings of programming. To pupils are easier to understand, since they are programming with the manipulation of visual objects. So they can gradually get used to the complexity of programming and algorithmic thinking. <b>Visual</b> <b>programming</b> <b>environments</b> provide not only learning but also having fun. In the <b>visual</b> <b>programming</b> pupils also do not need any knowledge of programming language syntax. Therefore, we summarize some of their general features and characteristics, before we focused on Kodu Game Lab. ...|$|R
5000|$|... “Aghves” is a <b>visual</b> <b>programming</b> <b>environment</b> and a toolkit, {{that lets}} kids make games, {{animated}} stories, interactive art, {{as well as}} share their creations with others on the Net. It is enhanced with modules that support sensors, motors, and robots. The underlying program is an adaptation of the Scratch environment.|$|E
50|$|The {{hardware}} and software roots of the Mindstorms Robotics Invention System kit {{go back to the}} programmable brick created at the MIT Media Lab. This brick was programmed in Brick Logo. The first <b>visual</b> <b>programming</b> <b>environment</b> was called LEGOsheets, since it was created by the University of Colorado in 1994 based on AgentSheets.|$|E
50|$|For PHP, the Zend Development Environment {{provides}} numerous debugging {{tools and}} provides a rich feature-set to make PHP development easier. WebORB Integration Server for PHP {{can be used to}} integrate PHP classes and data with any web client. It includes developer productivity tools and APIs for remoting, messaging and data management. Tools such as Hammerkit abstract PHP into a <b>visual</b> <b>programming</b> <b>environment</b> and utilise component-based software methods to accelerate development.|$|E
5000|$|... "VIPLE: <b>Visual</b> IoT/Robotics <b>Programming</b> Language <b>Environment</b> for Computer Science Education" [...] , IPDPS Workshops 2016: 963-971 PDF and Presentation PPT ...|$|R
40|$|An {{important}} step {{in the design of}} visuallanguages is the specification of the graphical objects and the composition rules for constructing feasible visual sentences. The presence of different typologies of visuallanguages, each with specific graphical and structural characteristics, yields the need to have models and tools that unify the design steps for different types of visuallanguages. To this aim, in this paper we present a formal framework of visuallanguage classes. Each class characterizes a family of visuallanguages based upon the nature of their graphical objects and composition rules. The framework has been embedded in the VisualLanguage Compiler–Compiler (VLCC), a graphical system for the automatic generation of <b>visual</b> <b>programming</b> <b>environments...</b>|$|R
40|$|Computer {{programming}} {{is a powerful}} exploratory design tool. A simple algorithm can produce results of unexpected complexity, variety, and appeal. By mimicking evolution in nature, rich global states are gradually developed over time by iteration of elementary local rules. Fractal images and life-game simulations are two well known examples. This paper presents a pattern-generating application based on the walking turtle metaphor. The turtle has an intelligence of its own, can be randomly disturbed or directed interactively by the user. Several snapshots are shown of amazingly diverse patterns left by the turtle walking in various modes. Advantages of object-oriented <b>visual</b> <b>programming</b> <b>environments</b> for rapid application development are discussed...|$|R
