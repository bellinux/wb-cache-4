281|219|Public
5|$|Darwin, {{the core}} of Apple macOS, {{includes}} a <b>virtual</b> <b>file</b> system and network stack derived from the FreeBSD <b>virtual</b> <b>file</b> system and network stack, and components of its userspace are also FreeBSD-derived.|$|E
5|$|According to {{developer}} Matthew Dillon, {{progress is}} being made to provide both device input/output (I/O) and <b>virtual</b> <b>file</b> system (VFS) messaging capabilities that will enable the remainder of the project goals to be met. The new infrastructure will allow many parts of the kernel to be migrated out into userspace; here they will be more easily debugged as they will be smaller, isolated programs, instead of being small parts entwined in a larger chunk of code. Additionally, the migration of select kernel code into userspace has the benefit of making the system more robust; if a userspace driver crashes, it will not crash the kernel.|$|E
25|$|Many support <b>virtual</b> <b>file</b> systems (VFS) such as viewing {{compressed}} archives, {{or working}} with files via an FTP connection.|$|E
5000|$|... sysfs is a pseudo {{file system}} {{provided}} by the Linux kernel that exports information about various kernel subsystems, hardware devices, and associated device drivers from the kernel's device model to user space through <b>virtual</b> <b>files.</b> [...] In addition to providing information about various devices and kernel subsystems, exported <b>virtual</b> <b>files</b> are also used for their configuring.|$|R
5000|$|Bass, L. lenbass. (2016, July 30). <b>Virtual</b> Machine <b>file.</b> Retrieved from http://presentationtube.com/watch/?v=Kr5HPhduAXj ...|$|R
5000|$|Manage and {{conveniently}} access {{your data}} in a <b>virtual</b> tree-like <b>file</b> system ...|$|R
25|$|Since February 2017, Microsoft {{has been}} in the process of {{migrating}} Microsoft Windows development to Git, migrating from Perforce. In order to handle the size of the Windows source code tree, Microsoft was required to develop customizations to the software, including Git <b>Virtual</b> <b>File</b> System (GVFS), a system which allows cloned repositories to use placeholders whose contents are downloaded only once a file is accessed.|$|E
25|$|As {{the number}} of {{independent}} processors in a supercomputer increases, the way they access data in the file system and how they share and access secondary storage resources becomes prominent. Over the years a number of systems for distributed file management were developed, e.g., the IBM General Parallel File System, BeeGFS, the Parallel <b>Virtual</b> <b>File</b> System, Hadoop, etc. A number of supercomputers on the TOP100 list such as the Tianhe-I use Linux's Lustre file system.|$|E
25|$|While many simpler {{operating}} systems support a {{limited range of}} options for accessing storage systems, {{operating systems}} like UNIX and Linux support a technology known as a <b>virtual</b> <b>file</b> system or VFS. An operating system such as UNIX supports {{a wide array of}} storage devices, regardless of their design or file systems, allowing them to be accessed through a common application programming interface (API). This makes it unnecessary for programs to have any knowledge about the device they are accessing. A VFS allows the operating system to provide programs with access to an unlimited number of devices with an infinite variety of file systems installed on them, through the use of specific device drivers and file system drivers.|$|E
5000|$|Block Optimization Support: Intelligent {{skipping}} of unused blocks {{within a}} <b>virtual</b> disk <b>file</b> ...|$|R
3000|$|Front-end {{measurement}} module synchronizes measurement {{policy of}} <b>virtual</b> machine <b>files</b> from the Security Management Server [...]...|$|R
5000|$|VMware VMFS (<b>Virtual</b> Machine <b>File</b> System) is VMware, Inc.'s {{clustered}} file system {{used by the}} company's flagship server virtualization suite, vSphere. It was developed to store virtual machine disk images, including snapshots. Multiple servers can read/write the same filesystem simultaneously while individual <b>virtual</b> machine <b>files</b> are locked. VMFS volumes can be logically [...] "grown" [...] (non-destructively increased in size) by spanning multiple VMFS volumes together.|$|R
2500|$|The {{kernel of}} Darwin is XNU, a hybrid kernel which uses OSFMK 7.3 (Open Software Foundation Mach Kernel) from the OSF. (Apple {{does not use}} Mach as a {{microkernel}} {{but as part of}} a hybrid kernel), various elements of BSD (including the process model, network stack, and <b>virtual</b> <b>file</b> system), and an object-oriented device driver API called I/O Kit. [...] The hybrid kernel design leverages the flexibility of a microkernel and the performance of a monolithic kernel.|$|E
50|$|GVFS (abbreviation for Git <b>Virtual</b> <b>File</b> System) is Microsoft's <b>virtual</b> <b>file</b> system {{designed}} to make working with huge Git repositories manageable.|$|E
50|$|Darwin, {{the core}} of Apple macOS, {{includes}} a <b>virtual</b> <b>file</b> system and network stack derived from the FreeBSD <b>virtual</b> <b>file</b> system and network stack, and components of its userspace are also FreeBSD-derived.|$|E
25|$|Older {{versions}} of Virtual PC (v5.0 or earlier) {{may have the}} hard disk formatted after creating the <b>Virtual</b> Hard Disk <b>file.</b> Newer versions must partition and format the <b>Virtual</b> Hard Disk <b>file</b> manually.|$|R
25|$|From 2001 to 2005, SAIC was {{the primary}} {{contractor}} for the FBI's unsuccessful <b>Virtual</b> Case <b>File</b> project.|$|R
5000|$|Virtual mode: The mapped disk is {{presented}} {{as if it is}} a logical volume, or a <b>virtual</b> disk <b>file,</b> to the guest operating system and its real hardware characteristics are hidden. In this mode, file locking provides data protection through isolation for concurrent updates; the copy on write operation enables snapshots. Virtual mode also offers portability across storage hardware because it presents the consistent behavior as a <b>virtual</b> disk <b>file.</b>|$|R
50|$|The primary {{benefit for}} this type of file system is that it is {{centralized}} and easy to remove. A single-file <b>virtual</b> <b>file</b> system may include all the basic features expected of any file system (virtual or otherwise), but access to the internal structure of these file systems is often limited to programs specifically written {{to make use of the}} single-file <b>virtual</b> <b>file</b> system (instead of implementation through a driver allowing universal access). Another major drawback is that performance is relatively low when compared to other <b>virtual</b> <b>file</b> systems. Low performance is mostly due to the cost of shuffling virtual files when data is written or deleted from the <b>virtual</b> <b>file</b> system.|$|E
50|$|Other Unix <b>virtual</b> <b>file</b> systems {{include the}} File System Switch in System V Release 3, the Generic File System in Ultrix, and the VFS in Linux. In OS/2 and Microsoft Windows, the <b>virtual</b> <b>file</b> system {{mechanism}} {{is called the}} Installable File System.|$|E
5000|$|OrangeFS (Clemson University, Omnibond Systems), {{formerly}} Parallel <b>Virtual</b> <b>File</b> System ...|$|E
5000|$|Btrfs, XFS, and ext4 are all {{supported}} <b>file</b> {{systems for}} <b>virtual</b> disk <b>files</b> {{used with the}} “vdisk_fileio” device handler.|$|R
5000|$|An ftrace-enabled Linux kernel {{is built}} by {{enabling}} the [...] kernel configuration option. The entire runtime interaction with ftrace is performed through readable and writable <b>virtual</b> <b>files</b> {{contained in a}} specifically mounted debugfs file system; as a result, ftrace requires no specialized userspace utilities to operate. [...] However, there are additional userspace utilities that provide more advanced features for data recording, analysis and visualization; examples of such utilities are trace-cmd and KernelShark.|$|R
3000|$|Generate {{measurement}} list {{of files}} {{based on the}} measurement policy of <b>virtual</b> machine <b>files</b> (including file name and measure frequency) [...]...|$|R
5000|$|Parallel <b>Virtual</b> <b>File</b> System (Clemson University, Argonne National Laboratory, Ohio Supercomputer Center) ...|$|E
5000|$|... #Subtitle level 2: Linux host kernel <b>virtual</b> <b>file</b> {{systems and}} {{configuration}} files ...|$|E
50|$|Configfs is a RAM-based <b>virtual</b> <b>file</b> system {{provided}} by the 2.6 Linux kernel.|$|E
5000|$|VMFSDriver: It enables {{read-only}} access to files and folders on partitions formatted in the <b>Virtual</b> Machine <b>File</b> System (VMFS) by VMware.|$|R
50|$|Creates <b>virtual</b> memory paging <b>files.</b>|$|R
40|$|The Desert {{software}} engineering environment is {{a suite of}} tools developed to enhance programmer productivity through increased tool integration. It introduces an inexpensive form of data integration to provide additional tool capabilities and information sharing among tools, uses a common editor to give high-quality semantic feedback and to integrate different types of software artifacts, and builds <b>virtual</b> <b>files</b> on demand to address specific tasks. All this is done in an open and extensible environment capable of handling large software systems. 1...|$|R
5000|$|Parallel <b>Virtual</b> <b>File</b> System (PVFS) - A {{parallel}} {{file system}} for HPC clusters.|$|E
5000|$|Stream - a <b>virtual</b> <b>file</b> which {{occupies}} {{a number of}} sectors within the CFBF ...|$|E
5000|$|Built-in user {{database}} {{consisting of}} XML files describing the user and <b>Virtual</b> <b>File</b> System access.|$|E
5000|$|In the Berkeley Software Distribution (BSD) and its descendants, kernfs is a pseudo {{file system}} that {{provides}} access to information on the currently running kernel. The file system itself and its content are dynamically generated when the operating system is booted, and the kernfs is often mounted at the [...] directory. [...] As {{a result of its}} nature, kernfs does not consist of actual files on a storage device, allowing instead processes to retrieve system information by accessing <b>virtual</b> <b>files.</b>|$|R
50|$|Servers are Helios {{processes}} that implement the General Server Protocol, typically {{with the support}} of the server library. The server protocol is conceptually similar to the Unix VFS API, and more closely to Plan 9's 9P. It requires that servers represent their resources as files, with standardised open/read/write/close-style operations. Similar to facilities such as /proc in Plan 9 and other Unix-like operating systems, resources such as files, I/O devices, users, and processes are all represented as <b>virtual</b> <b>files</b> in the namespace served by their managing process.|$|R
40|$|This paper {{presents}} {{conception of}} <b>virtual</b> shared <b>files</b> (VSF) as paradigm of parallel components interaction. Metaphor of <b>virtual</b> shared <b>files</b> space ensures {{a compromise between}} flexibility of explicit message passing and transparency of shared memory model. VSF are based on ordinary I/O notion and look like matrixes and ordinary files for application programmers. The most essential design issues are: all operations are applied to a file as a whole; operations remotely changing the content of file are prohibited; memory is explicitly allocated by user what is essential for massively-parallel computers...|$|R
