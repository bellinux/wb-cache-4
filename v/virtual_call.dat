52|1583|Public
5000|$|In telecommunication, a <b>virtual</b> <b>call</b> capability, {{sometimes}} called a <b>virtual</b> <b>call</b> facility, is a service feature in which: ...|$|E
5000|$|Level 3 Reset packets, which re-initializes {{the flow}} on a <b>virtual</b> <b>call</b> (but does not break the <b>virtual</b> <b>call).</b>|$|E
5000|$|Poliphone, {{system that}} turns {{smartphones}} into a decentralized <b>virtual</b> <b>call</b> center.|$|E
5000|$|... {{multi-access}} DTEs {{may have}} several <b>virtual</b> <b>calls</b> in progress {{at the same}} time.|$|R
5000|$|Restart packet, which clears {{down all}} <b>virtual</b> <b>calls</b> {{on the data}} link and resets all {{permanent}} virtual circuits on the data link.|$|R
5000|$|X.25 {{supports}} {{two types}} of <b>virtual</b> circuits, <b>virtual</b> <b>calls</b> (VC) and permanent virtual circuits (PVC). <b>Virtual</b> <b>calls</b> are established on an as-needed basis. For example, a VC is established when a call is placed and torn down after the call is complete. VCs are established through a call establishment and clearing procedure. On the other hand, permanent virtual circuits are preconfigured into the network. [...] PVCs are seldom torn down and thus provide a dedicated connection between end points.|$|R
50|$|<b>Virtual</b> <b>call</b> centre {{technology}} {{allows people}} to work from home, instead of in a traditional, centralised, call centre location, which increasingly allows people with physical or other disabilities that prevent them from leaving the house, to work. The only required equipment is Internet access and a workstation. The companies are preferring <b>Virtual</b> <b>Call</b> Centre services due to cost advantage. Companies can start their call centre business immediately without installing the basic infrastructure like Dialer, ACD and IVRS.|$|E
50|$|A virtual method table (VMT), virtual {{function}} table, <b>virtual</b> <b>call</b> table, dispatch table, vtable, or vftable is {{a mechanism}} {{used in a}} programming language to support dynamic dispatch (or run-time method binding).|$|E
5000|$|California Casualty’s {{home office}} {{is located in}} San Mateo, California. The company {{operates}} three <b>virtual</b> <b>call</b> centers. The Colorado Springs, Colorado location opened in 1994. The call center in Leawood, Kansas opened in 1993. The center in Glendale, Arizona opened in 1999.|$|E
5000|$|X.25 {{provides}} both <b>virtual</b> <b>calls</b> and PVCs, {{although not}} all X.25 service providers or DTE implementations support PVCs as their use was much less common than SVCs ...|$|R
5000|$|Packet layer: This layer {{defined a}} packet-layer {{protocol}} for exchanging control and user data packets {{to form a}} packet-switching network based on <b>virtual</b> <b>calls,</b> according to the Packet Layer Protocol.|$|R
40|$|The {{direct costs}} of <b>virtual</b> {{function}} <b>calls</b> in object-oriented programs is a runtime overhead incurred {{by the number}} of operations required to compute a target function address and the time to perform these operations. We present two techniques: i) Predicated VFT Loading and ii) Predicated Class Testing that use an Explicit Parallel Instruction Computing (EPIC) architectural feature known as predication, to reduce the direct cost of <b>virtual</b> function <b>calls.</b> These techniques employ predication to conditionally perform cost-saving transformations to the original dispatch sequence of a <b>virtual</b> function <b>call</b> {{in order to reduce the}} memory latency associated with these calls, or to transform the <b>virtual</b> function <b>calls</b> into statically-bound function calls. Predicated VFT loading is based on the possibility that the same virtual function table (VFT) will be shared between several <b>virtual</b> function <b>calls,</b> and whereby exploits this possibility by interleaving the function calls for objects whose ty [...] ...|$|R
50|$|A {{permanent}} {{virtual circuit}} (PVC) is a virtual circuit established for repeated/continuous use between the same DTE. In a PVC, the long-term association {{is identical to the}} data transfer phase of a <b>virtual</b> <b>call.</b> Permanent virtual circuits eliminate the need for repeated call set-up and clearing.|$|E
50|$|Salespeople: Use voice-based {{marketing}} automation {{to capture}} and respond to phone leads. They often set up a <b>virtual</b> <b>call</b> center to manage, route, and record inbound sales calls. Sales teams also use the voice broadcasting and SMS messaging components to automate the communication of information and to process orders.|$|E
50|$|Davinci Virtual, LLC is a {{multinational}} corporation that provides <b>virtual</b> <b>call</b> communication services, meeting rooms, and virtual office to businesses and independent entrepreneurs. Founded in 2006, Davinci Virtual has provided outsourced workplace strategy solutions to over 45,000 companies and entrepreneurs throughout the U.S., Canada, Europe, Central America, Asia and Australia.|$|E
40|$|We have {{designed}} and implemented an optimizing source-tosource C++ compiler {{that reduces the}} frequency of <b>virtual</b> function <b>calls.</b> Our prototype implementation demonstrates the value of OO-specific optimization for C++. Despite some limitations of our system, and despite the low frequency of <b>virtual</b> function <b>calls</b> {{in some of the}} programs, optimization improves the performance of a suite of large C++ applications totalling over 90, 000 lines of code by a median of 18 % over the original programs and reduces the number of <b>virtual</b> function <b>calls</b> by a median factor of five. For more call-intensive versions of the same programs, performance improved by a median of 26 % and the number of <b>virtual</b> <b>calls</b> dropped by a factor of 17. 5. Our measurements indicate that inlining barely increases code size, and that for most programs, the instruction cache miss ratio does not increase significantly. 1 Introduction Object-oriented programming languages confer many benefits, including abstrac [...] ...|$|R
50|$|Francis Charig and Chris Hinsley founded Tao Group in 1992. In {{the same}} year, the company {{released}} {{the first generation}} of its <b>virtual</b> machine, <b>called</b> <b>Virtual</b> Processor (VP). In 1998, Tao Group released the second generation, VP2.|$|R
5000|$|An {{electron}} quickly emits and reabsorbs a <b>virtual</b> photon, <b>called</b> a self-energy.|$|R
50|$|By {{supporting}} {{a variety of}} traditional and VoIP telephony services, Asterisk allows deployers to build telephone systems, or migrate existing systems to new technologies. Some sites are using Asterisk to replace proprietary PBXes, others provide additional features, such as voice mail or voice response menus, or <b>virtual</b> <b>call</b> shops, or to reduce cost by carrying long-distance calls over the Internet (toll bypass).|$|E
5000|$|LiveOps uses a {{distributed}} network {{of people to}} run a [...] "Cloud Call Center", a <b>virtual</b> <b>call</b> center or contact center: contracted workers can answer calls and provide other call center facilities {{without the need for}} the physical building or equipment of a traditional call center. The Red Cross utilized this system successfully during Hurricane Katrina in 2005, to process 17,000+ calls without having to open or hire staff for a call center.|$|E
50|$|Support professionals: Use voice-based {{marketing}} automation {{to provide}} phone-based customer service using a <b>virtual</b> <b>call</b> center to handle support calls. The software enables agents {{to work from}} any location and receive and transfer calls using any phone type. Support teams often use the IVR technology component to answer incoming calls, provide answers to routine inquiries, conduct surveys, and route callers who need {{to speak to a}} live person to the correct agent or group of agents.|$|E
5000|$|The X.25 {{model was}} based on the {{traditional}} telephony concept of establishing reliable circuits through a shared network, but using software to create [...] "virtual calls" [...] through the network. These calls interconnect [...] "data terminal equipment" [...] (DTE) providing endpoints to users, which looked like point-to-point connections. Each endpoint can establish many separate <b>virtual</b> <b>calls</b> to different endpoints.|$|R
50|$|The Dutch {{central bank}} is {{experimenting with a}} bitcoin-based <b>virtual</b> {{currency}} <b>called</b> “DNBCoin”.|$|R
5000|$|... late binding, because <b>virtual</b> {{function}} <b>calls</b> are {{not bound}} {{until the time}} of invocation; ...|$|R
5000|$|A <b>virtual</b> <b>call</b> {{requires}} {{at least}} an extra indexed dereference, and sometimes a [...] "fixup" [...] addition, compared to a non-virtual call, which is simply a jump to a compiled-in pointer. Therefore, calling virtual functions is inherently slower than calling non-virtual functions. An experiment done in 1996 indicates that approximately 6-13% of execution time is spent simply dispatching to the correct function, though the overhead can {{be as high as}} 50%. The cost of virtual functions may not be so high on modern [...] architectures due to much larger caches and better branch prediction.|$|E
50|$|In <b>virtual</b> <b>call</b> centre model, {{the call}} centre {{operator}} pays a monthly or annual fee to a vendor that hosts the call centre telephony equipment in their own data centre. In this model, the operator does not own, operate or host the equipment that the call centre runs on. Agents connect to the vendor's equipment through traditional PSTN telephone lines, or over voice over IP. Calls to and from prospects or contacts originate from or terminate at the vendor's data centre, {{rather than at the}} {{call centre operator}}'s premises. The vendor's telephony equipment then connects the calls to the call centre operator's agents.|$|E
50|$|The {{system can}} do global code {{optimizations}} (e.g. inlining of library functions) without losing {{the advantages of}} dynamic linking and without the overheads inherent to static compilers and linkers. Specifically, when doing global inline substitutions, a static compilation process may need run-time checks and ensure that a <b>virtual</b> <b>call</b> would occur if the actual class of the object overrides the inlined method, and boundary condition checks on array accesses {{may need to be}} processed within loops. With just-in-time compilation in many cases this processing can be moved out of loops, often giving large increases of speed.|$|E
50|$|More {{advanced}} automatic {{meter reading}} (AMR) systems can provide outage detection and restoration capability and thus serve as <b>virtual</b> <b>calls</b> indicating customers who are without power. However, unique characteristics of AMR systems such as the additional system loading {{and the potential for}} false positives requires that additional rules and filter logic must be added to the OMS to support this integration.|$|R
25|$|On October 30, 2014, Goldman Sachs filed {{a patent}} {{application}} for a <b>virtual</b> currency <b>called</b> SETLCoin.|$|R
5000|$|Hitachi {{designed}} a private network system for sale as a turnkey package to multi-national organizations. In {{addition to providing}} X.25 packet switching, message switching software was also included. Messages were buffered at the nodes adjacent to the sending and receiving terminals. Switched <b>virtual</b> <b>calls</b> were not supported, but {{through the use of}} [...] "logical ports" [...] an originating terminal could have a menu of pre-defined destination terminals.|$|R
50|$|ARPANET and SITA HLN became {{operational}} in 1969. Before {{the introduction}} of X.25 in 1973, about twenty different network technologies had been developed. Two fundamental differences involved the division of functions and tasks between the hosts {{at the edge of}} the network and the network core. In the datagram system, the hosts have the responsibility to ensure orderly delivery of packets. The User Datagram Protocol (UDP) is an example of a datagram protocol. In the <b>virtual</b> <b>call</b> system, the network guarantees sequenced delivery of data to the host. This results in a simpler host interface with less functionality than in the datagram model. The X.25 protocol suite uses this network type.|$|E
50|$|Tymnet was an {{international}} data communications network headquartered in Cupertino, California that used <b>virtual</b> <b>call</b> packet switched technology and X.25, SNA/SDLC, ASCII and BSC interfaces to connect host computers (servers) at thousands of large companies, educational institutions, and government agencies. Users typically connected via dial-up connections or dedicated asynchronous connections. The business {{consisted of a}} large public network that supported dial-up users and a private network business that allowed government agencies and large companies (mostly banks and airlines) {{to build their own}} dedicated networks. The private networks were often connected via gateways to the public network to reach locations not on the private network. Tymnet was also connected to dozens of other public networks in the United States and internationally via X.25/X.75 gateways.|$|E
5000|$|One DTE-DCE {{interface}} to an X.25 {{network has}} {{a maximum of}} 4095 logical channels on which it is allowed to establish virtual calls and permanent virtual circuits, although networks {{are not expected to}} support a full 4095 virtual circuits. For identifying the channel to which a packet is associated, each packet contains a 12 bit logical channel identifier made up of an 8-bit logical channel number and a 4-bit logical channel group number. [...] Logical channel identifiers remain assigned to a virtual circuit {{for the duration of the}} connection. [...] Logical channel identifiers identify a specific logical channel between the DTE (subscriber appliance) and the DCE (network), and only has local significance on the link between the subscriber and the network. The other end of the connection at the remote DTE is likely to have assigned a different logical channel identifier. The range of possible logical channels is split into 4 groups: channels assigned to permanent virtual circuits, assigned to incoming virtual calls, two-way (incoming or outgoing) virtual calls, and outgoing virtual calls. [...] (Directions refer to the direction of <b>virtual</b> <b>call</b> initiation as viewed by the DTE they all carry data in both directions.) The ranges allowed a subscriber to be configured to handle significantly differing numbers of calls in each direction while reserving some channels for calls in one direction. All International networks are required to implement support for permanent virtual circuits, two-way logical channels and one-way logical channels outgoing; one-way logical channels incoming is an additional optional facility. [...] DTE-DCE interfaces are not required to support more than one logical channel. [...] Logical channel identifier zero will not be assigned to a permanent virtual circuit or <b>virtual</b> <b>call.</b> [...] The logical channel identifier of zero is used for packets which don't relate to a specific virtual circuit (e.g. packet layer restart, registration, and diagnostic packets).|$|E
5000|$|BeOS {{includes}} an implementation of <b>virtual</b> desktops <b>called</b> [...] "Workspaces". Up to 32 different Workspaces are supported.|$|R
5000|$|The SIAL {{programs}} are executed by a MPMD parallel <b>virtual</b> machine <b>called</b> the super instruction processor or SIP.|$|R
5000|$|The largest is {{an online}} <b>virtual</b> {{community}} <b>called</b> Jipmernet where alumni {{from all over}} the globe are active participants.|$|R
