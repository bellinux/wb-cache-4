329|10000|Public
5|$|SpaceChem was ported to the iPad in October 2011, using touch {{controls}} {{instead of}} mouse and keyboard {{to manipulate the}} visual program. An Android port was released in July 2012. Both mobile platforms include most of the full game excluding the defense puzzles. The sandbox mode was added {{at the request of}} a player who was trying to explore SpaceChem computational abilities. Alongside the sandbox mode, Zactronics offered a contest for the most interesting sandbox creation. This same user was able to demonstrate a brainfuck interpreter within SpaceChem, claiming that the <b>visual</b> <b>programming</b> <b>language</b> was Turing complete. Barth has mentioned the possibility of a sequel in an interview with IndieGamer.|$|E
25|$|The <b>visual</b> <b>programming</b> <b>language</b> Max, {{released}} by Cycling '74, offers a JavaScript model of its environment {{for use by}} developers. It allows users to reduce visual clutter by using an object for a task rather than many.|$|E
25|$|In 2011 Dynamo was {{released}} in beta form allowing first glimpses of directly programming the behavior of hosted components through a drag and drop node interface. This {{is similar to the}} way the <b>visual</b> <b>programming</b> <b>language</b> Grasshopper 3d works on objects in Rhinoceros 3D.|$|E
40|$|This article {{describes}} emerging research into how <b>visual</b> <b>programming</b> <b>languages</b> {{may lead to}} and even require {{the development of new}} software engineering support paradigms. Keywords: <b>visual</b> <b>programming</b> <b>languages,</b> software engineering, end-user programming, end-user software engineering, Forms/ 3. 1. Introduction <b>Visual</b> <b>programming</b> <b>languages</b> (VPLs) are becoming increasingly common in several domains. For example, <b>visual</b> <b>programming</b> <b>languages</b> or sublanguages are becoming the most common way to do some kinds of GUI programming, are becoming the most common way of specifying visualization graphics depicting scientific data, and are also starting to appear as macro generators for end-user applications. However, despite the increase in the use of VPLs for these and other programming tasks, there has been almost no attention to software engineering support mechanisms when working in these <b>languages.</b> <b>Visual</b> <b>programming</b> is programming in whic...|$|R
50|$|The {{following}} {{contains a}} list of <b>visual</b> <b>programming</b> <b>languages.</b>|$|R
40|$|The {{paper is}} devoted to the {{analysis}} of state of the art in <b>visual</b> parallel <b>programming</b> <b>languages.</b> The brief history of this domain is described. The diagrammatic imagery of visual languages is analyzed. Limitations of the diagrammatic approach are revealed. The additional type of <b>visual</b> parallel <b>programming</b> <b>languages</b> (action language) is described. Some problems of perception of visualization for parallel computing are considered. Some approaches to the evaluation of <b>visual</b> <b>programming</b> <b>languages</b> are suggested...|$|R
500|$|SpaceChem is an indie puzzle game {{developed}} by Zachtronics Industries, based on principles of automation and chemical bonding. In the game, the player is tasked to produce {{one or more}} specific chemical molecules via an assembly line by programming two remote manipulators (called [...] "waldos" [...] in the game) that interact with atoms and molecules through a <b>visual</b> <b>programming</b> <b>language.</b> SpaceChem was the developer's first foray into a commercial title {{after a number of}} free Flash-based browser games that feature similar puzzle-based assembly problems.|$|E
5000|$|... #Caption: Primitives in the <b>visual</b> <b>programming</b> <b>language</b> DRAKON ...|$|E
5000|$|TouchDesigner, <b>visual</b> <b>programming</b> <b>language</b> for {{real-time}} {{multimedia content}} ...|$|E
30|$|The paper {{concludes with}} a {{discussion}} of the strengths and limitations of <b>visual</b> <b>programming</b> <b>languages</b> in the BIM context.|$|R
5000|$|The Deutsch {{limit is}} an aphorism about the {{information}} density of <b>visual</b> <b>programming</b> <b>languages</b> originated by L Peter Deutsch that states: ...|$|R
50|$|The AmigaBasic {{created by}} Microsoft, CanDO, and then Amiga Vision {{inspired}} Microsoft itself to {{an approach to}} <b>Visual</b> <b>programming</b> with their line of <b>Visual</b> <b>programming</b> <b>languages,</b> such as <b>Visual</b> Basic and others.|$|R
5000|$|Microsoft <b>Visual</b> <b>Programming</b> <b>Language,</b> or MVPL, is {{a visual}} {{programming}} and dataflow programming language developed by Microsoft for the Microsoft Robotics Studio. The Microsoft <b>Visual</b> <b>Programming</b> <b>Language</b> is distinguished from other Microsoft programming languages such as Visual Basic and C#, {{as it is}} the only Microsoft language that is a true <b>visual</b> <b>programming</b> <b>language.</b> Microsoft has utilized the term [...] "Visual" [...] in its previous programming products to reflect that a large degree of development in these languages can be performed by [...] "dragging and dropping" [...] in a traditional wysiwyg fashion.|$|E
5000|$|CryEngine has a node-based <b>visual</b> <b>programming</b> <b>language</b> called FlowGraph.|$|E
5000|$|CiMPLE, <b>Visual</b> <b>Programming</b> <b>Language</b> by ThinkLABs for {{teaching}} robotics ...|$|E
50|$|According to {{a review}} by , formal {{treatment}} of composition underlies validation of component assembly in <b>visual</b> <b>programming</b> <b>languages</b> like IBM's <b>Visual</b> Age for the Java language.|$|R
50|$|He is {{also the}} author of several Request for Comments (RFCs), The Eight Fallacies of Distributed Computing, and {{originated}} the Deutsch limit adage about <b>visual</b> <b>programming</b> <b>languages.</b>|$|R
40|$|VisPro is a {{general-purpose}} {{visual language}} generation {{system based on}} Reserved Graph Grammar (RGG). It can express {{a wide range of}} diagrammatic <b>visual</b> <b>programming</b> <b>languages</b> (VPLs). This paper presents a global layout approach used in the VisPro system. Our approach is grammar-based graph drawing, in which layout rules are embedded in the productions of RGG. Thus, the RGG formalism serves both the visual language grammar and the layout grammar. This approach is appropriate and feasible enough for graph drawing in the area of <b>visual</b> <b>programming</b> <b>languages</b> based on reserved graph grammars...|$|R
5000|$|Minibloq, <b>visual</b> <b>programming</b> <b>language</b> for {{robotics}} and Arduino compatible boards ...|$|E
5000|$|ROBO Pro, a <b>visual</b> <b>programming</b> <b>language</b> for the fischertechnik {{robotics}} kit ...|$|E
5000|$|Unreal Engine 4 has a node-based <b>visual</b> <b>programming</b> <b>language</b> called Blueprints.|$|E
50|$|Contrary to Max-like <b>visual</b> <b>programming</b> <b>languages</b> {{where the}} user does manual connections, FAUST {{primitives}} are assembled in block diagrams {{by using a}} set of high-level block diagram composition operations.|$|R
40|$|Over {{the past}} ten years, {{frequent}} increases in computer processing speed and graphics display capabilities have made possible {{a great deal of}} research and experimentation in the field of <b>visual</b> <b>programming</b> <b>languages.</b> A variety of different design methodologies have arisen from these research efforts, and numerous <b>visual</b> <b>programming</b> systems have been developed to address both specific application areas, such as user interface design and physical simulation, and more general programming tasks. We present a survey of the field of <b>visual</b> <b>programming</b> <b>languages</b> beginning with an historical overview of some of the pioneering efforts in the field. In addition, we present different classifications of <b>visual</b> <b>programming</b> <b>languages,</b> touch on implementation and design issues, and discuss efforts to formalize the theoretical basis for visual languages. We also discuss and examine a variety of the more important projects in the field over the last few years. 0 The authors can be reached at: fmdownes,maratbg@CS. Berkeley. EDU. An on-line version of this paper {{can be found on the}} WWW page: [URL] 1...|$|R
5000|$|The [...] "visual {{languages}}" [...] (Visual Basic, Visual C#, Visual J#, etc.) of the Microsoft Visual Studio IDE are not <b>visual</b> <b>programming</b> <b>languages.</b> All {{of these}} languages are textual and not graphical. The MS Visual Studio is a <b>visual</b> <b>programming</b> environment, however.|$|R
5000|$|Bubble, a <b>visual</b> <b>programming</b> <b>language</b> {{to build}} production-ready web {{applications}} without code ...|$|E
5000|$|DRAKON, an {{algorithmic}} <b>visual</b> <b>programming</b> <b>language</b> {{developed for}} the Buran space project.|$|E
5000|$|NXT-G, a <b>visual</b> <b>programming</b> <b>language</b> for the Lego Mindstorms NXT {{robotics}} kit ...|$|E
5000|$|Stefano (or Esteban) Levialdi Ghiron (1936 - 2015) {{has been}} a full {{professor}} at the Sapienza University of Rome. [...] His research areas included <b>visual</b> <b>programming</b> <b>languages,</b> image processing, pattern recognition, and human-computer interaction.|$|R
50|$|There {{are several}} {{applications}} and <b>visual</b> <b>programming</b> <b>languages</b> that use flowcharts to represent and execute programs. Generally these {{are used as}} teaching tools for beginner students. Examples include Flowgorithm, Raptor. LARP, Visual Logic, and VisiRule.|$|R
5000|$|... #Caption: <b>Visual</b> IoT/Robotics <b>Programming</b> <b>Language</b> Environment LOGO ...|$|R
5000|$|Cassandra-vision - A <b>Visual</b> <b>programming</b> <b>language</b> with OpenCV {{support and}} C++ {{extension}} API ...|$|E
5000|$|... #Caption: An example {{program in}} the <b>visual</b> <b>programming</b> <b>language</b> DRAKON, {{containing}} 50 primitives ...|$|E
5000|$|Hopscotch, a <b>visual</b> <b>programming</b> <b>language</b> for mobile {{touchscreen}} devices (available on the iPad).|$|E
5000|$|VIPLE Tutorial: <b>Visual</b> IoT/Robotics <b>Programming</b> <b>Language</b> Environment, GitBook ...|$|R
40|$|Graduation date: 1998 <b>Visual</b> <b>programming</b> <b>languages</b> employ <b>visual</b> {{representation}} to make programming {{easier and}} make programs more reliable and more accessible. <b>Visual</b> <b>program</b> testing becomes increasingly important {{as more and}} more <b>visual</b> <b>programming</b> <b>languages</b> and <b>visual</b> <b>programming</b> environments come into real use. In this work, we focus on one important class of <b>visual</b> <b>programming</b> languages: form-based <b>visual</b> <b>programming</b> <b>languages.</b> This class of languages includes electronic spreadsheets and a variety of research systems that have had a substantial impact on end-user computing. Research shows that form-based <b>visual</b> <b>programs</b> often contain faults, but that their creators often have unwarranted confidence in the reliability of their programs. Despite this evidence, we find no discussion in the research literature of techniques for testing or assessing the reliability of form-based <b>visual</b> <b>programs.</b> This lack will hinder the real use of <b>visual</b> <b>programming</b> <b>languages.</b> Our work addresses the lack of testing methodologies for form-based <b>visual</b> <b>programs.</b> In this document, we first examine differences between the form-based and imperative programming paradigms, discuss effects these differences have on methodologies for testing form-based programs, and analyze challenges and opportunities for form-based program testing. We then present several criteria for measuring test adequacy for form-based programs, and illustrate their application. We show that an analogue to the traditional "all-uses" dataflow test adequacy criterion is well suited for testing form-based visual programs: it provides important error-detection ability, and can be applied more easily to form-based programs than to imperative programs. Finally, we present a testing methodology that we have developed for form-based <b>visual</b> <b>programs.</b> To accommodate the evaluation model used with these programs, and the interactive process by which they are created, our methodology is validation-driven and incremental. To accommodate the user base of these languages, we provide an interface to the methodology that does not require an understanding of testing theory. We discuss our implementation of this methodology, its time costs, the mapping from our approach to the user interface, and empirical results achieved in its use...|$|R
50|$|Various <b>visual</b> <b>programming</b> <b>languages</b> {{have also}} been {{developed}} {{with the intent to}} resolve readability concerns by adopting non-traditional approaches to code structure and display. Integrated development environments (IDEs) aim to integrate all such help. Techniques like Code refactoring can enhance readability.|$|R
