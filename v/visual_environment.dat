1350|1350|Public
5|$|Vision is an {{important}} sensory system for most species of fish. Fish eyes {{are similar to those}} of terrestrial vertebrates like birds and mammals, but have a more spherical lens. Their retinas generally have both rods and cones (for scotopic and photopic vision), and most species have colour vision. Some fish can see ultraviolet and some can see polarized light. Amongst jawless fish, the lamprey has well-developed eyes, while the hagfish has only primitive eyespots. Fish vision shows adaptation to their <b>visual</b> <b>environment,</b> for example deep sea fishes have eyes suited to the dark environment.|$|E
25|$|Normally eye {{development}} is largely genetically controlled, {{but it has}} been shown that the <b>visual</b> <b>environment</b> is an important factor in determining ocular development. Some research suggests that some cases of myopia may be inherited from one's parents.|$|E
25|$|Changes in the {{schedule}} or environment, delusions, hallucinations, misperceptions, and sleep problems also may trigger behavior changes. It {{can help people}} with DLB to encourage exercise, simplify the <b>visual</b> <b>environment,</b> stick to a routine, and avoid asking too much (or too little) of them. Speaking slowly and sticking to essential information improves communication. The potential for visual misperception and hallucinations, {{in addition to the}} risk of abrupt and dramatic swings in cognition and motor impairment, should put families on alert to the dangers of driving with DLB.|$|E
5000|$|Worsening {{dizziness}} {{with experience}} of complex <b>visual</b> <b>environments</b> such as {{walking through a}} grocery store ...|$|R
40|$|Building <b>environments</b> {{that use}} <b>visual</b> {{techniques}} (<b>visual</b> <b>environments)</b> is still expensive in labour. In this paper we present an object-oriented framework for compound documents, called HotDoc, {{that can be}} used for building <b>visual</b> <b>environments</b> rapidly. We give an example by describing a user interface for an extended spreadsheet environment called Simple. We focus on spatial composition control which is supported in HotDoc by layout policies...|$|R
40|$|Improving the novice’s {{experience}} with programming {{has been an}} important research topic for some time. The high attrition rate of CS majors continues to be a problem. Incoming majors are being exposed to programming but many are driven away from the field. As a way to engage novices with programming, many CS departments have adopted <b>visual</b> <b>environments.</b> However, not all novices are taught to program using <b>visual</b> <b>environments.</b> Typically, students are introduced to programming through either a visual or command line environment at the beginning stages of a CS curriculum. The features in standard command line environments are not as assistive to programmers as <b>visual</b> <b>environments.</b> Novices must learn both language syntax and semantics while navigating the file system and compilation tools. On the other hand, <b>visual</b> <b>environments</b> with highly assistive features could constrict a novice to learn a fixed set of foundational programming skills that exclude exposure to syntax checking, compilation and file systems. Novices will eventually need to move to a less assistive environment to round out their skill set. The objective of this research was to determine if certain environments are more appropriate for teaching novices how to program, based on their respective levels of feature assistance. There are anecdotally based motivations for using either tools with low assistive features like command line environments (promotes acquisition of useful mental models) or tools with moderate to high assistive features like <b>visual</b> <b>environments</b> (engages novices while programming). Unfortunately, no systematic study exists that supports either supposition. ii...|$|R
25|$|The SDK {{includes}} a comprehensive set of development tools, including a debugger, software libraries, a handset emulator based on QEMU, documentation, sample code, and tutorials. Initially, Google's supported {{integrated development environment}} (IDE) was Eclipse using the Android Development Tools (ADT) plugin; in December 2014, Google released Android Studio, based on IntelliJ IDEA, as its primary IDE for Android application development. Other development tools are available, including a native development kit (NDK) for applications or extensions in C or C++, Google App Inventor, a <b>visual</b> <b>environment</b> for novice programmers, and various cross platform mobile web applications frameworks. In January 2014, Google unveiled an framework based on Apache Cordova for porting Chrome HTML5 web applications to Android, wrapped in a native application shell.|$|E
25|$|In May 2014, Instagram {{had over}} 200 million users. The user {{engagement}} rate of Instagram was 15 {{times higher than}} of Facebook and 25 times {{higher than that of}} Twitter. According to Scott Galloway, the founder of L2 and a professor of marketing at New York University's Stern School of Business, latest studies estimate that 93% of prestige brands have an active presence on Instagram and include it in their marketing mix. When it comes to brands and businesses, Instagram's goal is to help companies to reach their respective audiences through captivating imagery in a rich, <b>visual</b> <b>environment.</b> Moreover, Instagram provides a platform where user and company can communicate publicly and directly, making itself an ideal platform for companies to connect with their current and potential customers.|$|E
25|$|Traffic {{exiting the}} {{roundabout}} comes from one direction, rather than three, simplifying the pedestrian's <b>visual</b> <b>environment.</b> Traffic moves slowly {{enough to allow}} visual engagement with pedestrians, encouraging deference towards them. Other benefits include reduced driver confusion associated with perpendicular junctions and reduced queuing associated with traffic lights. They allow U-turns within the normal flow of traffic, which often are not possible at other forms of junction. Moreover, since vehicles on average spend less time idling at roundabouts than at signalled intersections, using a roundabout potentially leads to less pollution. Also, when entering vehicles only need to give way, they do not always perform a full stop. As a result, by keeping {{a part of their}} momentum, the engine will produce less work to regain the initial speed, resulting in lower emissions. Additionally, slow moving traffic in roundabouts makes less noise than traffic that must stop and start, speed up and brake.|$|E
40|$|Insects can {{remember}} {{and return to}} a place of interest using the surrounding visual cues. In previous experiments, we showed that crickets could home to an invisible cool spot in a hot environment. They did so most effectively with a natural scene surround, though they were also able to home with distinct landmarks or blank walls. Homing was not successful, however, when visual cues were removed through a dark control. Here, we compare six different models of visual homing using the same <b>visual</b> <b>environments.</b> Only models deemed biologically plausible for use by insects were implemented. The average landmark vector model and first order differential optic flow are unable to home better than chance in {{at least one of the}} <b>visual</b> <b>environments.</b> Second order differential optic flow and GradDescent on image differences can home better than chance in all <b>visual</b> <b>environments,</b> and best in the natural scene environment, but do not quantitatively match the distributions of the cricket data. Two models—centre of mass average landmark vector and RunDown on image differences—could produce the same pattern of results as observed for crickets. Both the models performed best using simple binary images and were robust to changes in resolution and image smoothin...|$|R
40|$|Cantata is a <b>visual</b> {{programming}} <b>environment</b> {{within the}} Khoros system. Cantata contains many features not typically found in <b>visual</b> programming <b>environments</b> such as <b>visual</b> hierarchy, iteration, control structures, expression-basedparameters and program encapsulation. This paper presents {{an overview of}} Cantata and these features. ...|$|R
40|$|Workshop {{practices}} in architecture schools are increasingly incorporating alternative collaborative work in <b>visual</b> <b>environments</b> that facilitate the dissemination and knowledge management. This requires defining strategies and applications using appropriate technologies {{in order to}} identify, create, organize, store and share, both academic practices and research results...|$|R
2500|$|In current practice, ed {{is rarely}} used {{interactive}}ly, but does find use in some shell scripts. [...] For interactive use, ed was subsumed by the sam, vi and Emacs editors in the 1980s. ed {{can be found}} on virtually every version of Unix and Linux available, and as such is useful for people who have to work with multiple versions of Unix. On Unix-based operating systems, some utilities like SQL*Plus run ed as the editor if the EDITOR and <b>VISUAL</b> <b>environment</b> variables are not defined. If something goes wrong, ed is sometimes the only editor available. This is often the only time when it is used interactively.|$|E
2500|$|Every {{computer}} {{that is to}} be operated by an individual requires a user interface. The user interface is usually referred to as a shell and is essential if human interaction is to be supported. [...] The user interface views the directory structure and requests services from the operating system that will acquire data from input hardware devices, such as a keyboard, mouse or credit card reader, and requests operating system services to display prompts, status messages and such on output hardware devices, such as a video monitor or printer. The two most common forms of a user interface have historically been the command-line interface, where computer commands are typed out line-by-line, and the graphical user interface, where a <b>visual</b> <b>environment</b> (most commonly a WIMP) is present.|$|E
2500|$|These {{parts are}} the {{sustained}} and transient visual processing systems. [...] The sustained system {{is responsible for}} fine detail such as word and letter recognition and {{is very important in}} encoding words in their correct order. The transient system is responsible for controlling eye movements, and processing the larger <b>visual</b> <b>environment</b> around us. When these two processes do not work in synchronization this can cause reading disabilities. This has been tested by having children with and without reading disabilities perform on tasks related to the transient systems, where the children with reading disabilities did very poorly. It has also been found in postmortem examinations of the brains of people with reading disabilities that they have fewer neurons and connections in the areas representing the transient visual systems. [...] However there is debate over whether this is the only reason for reading disabilities, scotopic sensitivity syndrome, deficits in verbal memory and orthographic knowledge are other proposed factors.|$|E
40|$|The {{purpose of}} this {{research}} effort is to design a generic architecture for collaborative haptic, audio, <b>visual</b> <b>environments</b> (C-HAVE). We aim to develop a heterogeneous scalable architecture for large collaborative haptics environments where a number of potential users participate with different kinds of haptic devices...|$|R
40|$|When {{working with}} {{diagrams}} in <b>visual</b> <b>environments</b> like graphical diagram editors, diagrams {{have to be}} represented by an internal model. Graphs and hypergraphs are well-known concepts for such internal models. This paper shows how hypergraphs can be uniformly used {{for a wide range}} of different diagram types where hyperedges are used to represent diagram components as well as spatial relationships between components. This paper also proposes a procedure for translating diagrams into their hypergraph model, i. e., a graphical scanner, and a procedure to check the hypergraph against a hypergraph grammar defining the diagrams' syntax, i. e., a parsing procedure. Such procedures are necessary to make use of such a hypergraph model in <b>visual</b> <b>environments</b> that support free-hand editing where the user can modify diagrams arbitrarily...|$|R
40|$|Abstract Insects can {{remember}} {{and return to}} a place of interest using the surrounding visual cues. In previous experiments we showed that crickets could home to an invisible cool spot in a hot environment, and that they did so most e ectively with a natural scene surround, though they were also able to home with distinct landmarks or blank walls. Here we compare six di erent models of visual homing with the same <b>visual</b> <b>environments</b> used for testing the crickets. Only models deemed biologically plausible for use by insects were implemented. The Average Landmark Vector model and First Order Di erential Optic Flow are unable to home better than chance in {{at least one of the}} <b>visual</b> <b>environments.</b> Second Order Di erential Optic Flow and Gradient Descent on image di erences can home better than chance in all <b>visual</b> <b>environments,</b> and best in the natural scene environment, but do not quantitatively match the distributions of the cricket data. Two models- Centre of Mass Average Landmark Vector, and Run Down on image differences- could produce the same pattern of results as observed for crickets. Both performed best using simple binary images, and were robust to changes in resolution and image smoothing. ...|$|R
5000|$|... #Article: Dialogue-Assisted <b>Visual</b> <b>Environment</b> for Geoinformation ...|$|E
50|$|Debugging {{is often}} done with IDEs like Eclipse, Visual Studio, Xcode, Kdevelop, NetBeans and Code::Blocks. Standalone debuggers like GDB are also used, and these often provide {{less of a}} <b>visual</b> <b>environment,</b> usually using a command line. Some text editors such as Emacs allow GDB to be invoked through them, to provide a <b>visual</b> <b>environment.</b>|$|E
5000|$|It {{provides}} a <b>visual</b> <b>environment</b> {{to design and}} test artificial neural networks.|$|E
40|$|This paper {{outlines}} DIAPLAN, {{a visual}} rule-based programming language and {{environment that is}} based on the computational model of graph transformation. Thanks to its genericity, DIAPLAN can generate <b>visual</b> <b>environments</b> with no restriction on their visual representation, and also supports object-oriented programming since its graphs are hierarchically structured. 1...|$|R
40|$|As noted {{almost a}} decade ago, HCI (Human-Computer Interaction) aspects of <b>visual</b> {{language}} <b>environments</b> are under-developed. This remains a fact, {{in spite of the}} central role played by user interfaces in the acceptance and usability of visual languages. We introduce ZVTM, a toolkit aimed at promoting the development of HCI aspects of <b>visual</b> <b>environments</b> by making the creation of interactive structured graphical editors easier, while favoring the rapid integration of novel interaction techniques such as zoomable user interfaces, distortion lenses, superimposed layers, and alternate scrolling and pointing methods. 1...|$|R
5000|$|Interactive {{distributed}} <b>visual</b> simulation <b>environment</b> and 3D {{virtual worlds}} ...|$|R
5000|$|A {{scanning}} saccade is triggered endogenously for {{the purpose}} of exploring the <b>visual</b> <b>environment.</b>|$|E
50|$|Potts, J. D. S. (1966). Australian outrage: {{the decay}} of a <b>visual</b> <b>environment.</b> Ure Smith.|$|E
5000|$|BlockCanvas: <b>Visual</b> <b>environment</b> for {{creating}} simulation experiments, where function and data are separated using CodeTools.|$|E
5000|$|... #Caption: Robotino inside Microsoft Robotic Studio's <b>Visual</b> Simulation <b>Environment</b> ...|$|R
5000|$|WireFusion, <b>visual</b> {{programming}} <b>environment</b> {{for creating}} interactive 3D web presentations ...|$|R
5000|$|TurtleBots: TurtleBots {{provides}} a <b>visual</b> programming <b>environment</b> oriented to blocks.|$|R
5000|$|Environmental Manipulation - Changing the <b>visual</b> <b>environment,</b> adding or {{removing}} mirrors, signposting, unlocking {{doors and}} other environmental manipulations such as group living.|$|E
50|$|Orientation maps in monkeys are {{innately}} determined at birth. Like {{other parts}} of the brain, the visual cortex goes through a critical period where the <b>visual</b> <b>environment</b> can change the orientation maps due to its plastic nature during this period. Visual deprivation during this period will cause a deterioration of these innate connections. Also if the <b>visual</b> <b>environment</b> is confined to only vertical or horizontal lines during this critical period the distribution of the preferred orientation of cells in the striate cortex become abnormal. This is probably due to cells maturing their preferred orientation to that of {{the most common type of}} visual stimulus.|$|E
5000|$|For example, simple {{cells in}} the visual cortex of the {{domestic}} cat (Felis catus), respond to edges—a feature which {{is more likely to}} occur in objects and organisms in the environment. By contrast, the background of a natural <b>visual</b> <b>environment</b> tends to be noisy—emphasizing high spatial frequencies but lacking in extended edges. Responding selectively to an extended edge—either a bright line on a dark background, or the reverse—highlights objects that are near or very large. Edge detectors are useful to a cat, because edges do not occur often in the background [...] "noise" [...] of the <b>visual</b> <b>environment,</b> which is of little consequence to the animal.|$|E
40|$|Cantata is a <b>visual</b> {{programming}} <b>environment</b> {{within the}} Khoros system. Cantata contains many features not typically found in <b>visual</b> programming <b>environments</b> such as <b>visual</b> hierarchy, iteration, control structures, expression-based parameters and program encapsulation. This paper presents {{an overview of}} Cantata and these features. 1 Introduction Khoros is a software integration and development environment which includes a suite of software development tools along with an extensive collection of image processing, data manipulation, matrix processing, and scientific visualization applications [1]. The use of a graphically expressed data flow <b>visual</b> programming <b>environment</b> called Cantata within the Khoros system allows users to easily bring together these numerous applications and have them work together as a cohesive whole. <b>Visual</b> programming <b>environments</b> provide graphical or iconic elements which can be interactively manipulated according to some specific spatial grammar for program cons [...] ...|$|R
40|$|This paper {{presents}} a new computational framework for modelling visual-object based attention and attention-driven eye movements within an integrated {{system in a}} biologically inspired approach. Attention operates at multiple levels of visual selection by space, feature, object and group depending {{on the nature of}} targets and visual tasks. Attentional shifts and gaze shifts are constructed upon their common process circuits and control mechanisms but also separated from their different function roles, working together to fulfil flexible visual selection tasks in complicated <b>visual</b> <b>environments.</b> The framework integrates the important aspects of human visual attention and eye movements resulting in sophisticated performance in complicated natural scenes. The proposed approach aims at exploring a useful visual selection system for computer vision, especially for usage in cluttered natural <b>visual</b> <b>environments.</b> Key words: Visual-object based competition, space-based attention, object-based attention, group-based attention, foveated imaging, attention-driven ey...|$|R
5000|$|... #Caption: An iRobot Create robot inside Microsoft Robotic Studio's <b>Visual</b> Simulation <b>Environment</b> ...|$|R
