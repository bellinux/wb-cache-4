66|10000|Public
50|$|The {{purpose of}} the CADP toolkit is to {{facilitate}} the design of reliable systems by use of formal description techniques together with software tools for simulation, rapid application development, <b>verification,</b> <b>and</b> <b>test</b> generation.|$|E
50|$|Level 4: {{multinational}} {{collaboration of}} large and adaptive systems. A crowdsourcing website {{at this level}} may contain domain-oriented crowdsourcing with ontology, reasoning, and annotation; automated cross <b>verification</b> <b>and</b> <b>test</b> generation processes; automated configuration of crowdsourcing platform; and may restructure the platform as SaaS with tenant customization.|$|E
5000|$|OPEN/CAESAR is {{a generic}} {{software}} environment for developing tools that explore graphs {{on the fly}} (for instance, simulation, <b>verification,</b> <b>and</b> <b>test</b> generation tools). Such tools can be developed independently of any particular high level language. In this respect, OPEN/CAESAR plays {{a central role in}} CADP by connecting language-oriented tools with model-oriented tools. OPEN/CAESAR consists of a set of 16 code libraries with their programming interfaces, such as: ...|$|E
40|$|This {{dissertation}} {{develops a}} {{modeling and simulation}} methodology for design, <b>verification,</b> <b>and</b> <b>testing</b> (DVT) power supply system using a virtual prototype. The virtual prototype is implemented before the hardware prototyping to detect most of the design errors and circuit deficiencies {{that occur in the}} later stage of a standard hardware design <b>verification</b> <b>and</b> <b>testing</b> procedure. The design iterations and product cost are reduced significantly by using this approach...|$|R
2500|$|... (NB. A {{compendium}} of non-intuitive behaviors of floating point on popular architectures, with implications for program <b>verification</b> <b>and</b> <b>testing.)</b> ...|$|R
40|$|Abstract. Models are {{considered}} an essential step in capturing system behavior and simplifying the analysis required to check or {{improve the quality}} of software. <b>Verification</b> <b>and</b> <b>testing</b> of websites requires effective modelling techniques that address the specific challenges of web applications (WAs). In this study we survey 21 different modelling methods used in website <b>verification</b> <b>and</b> <b>testing.</b> Based on our survey, a categorization, comparison and evaluation for such models and methods is provided. ...|$|R
40|$|Implementation of {{fault testing}} {{environment}} for embeded cores-based digital circuits is a challenging endeavor. The subject thesis aims developing techniques in design <b>verification</b> <b>and</b> <b>test</b> architecture utilizing well-known concepts of {{hardware and software}} co-design. There are available methods to ensure correct functionality, in both hardware and software, for embeded cores-based systems {{but one of the}} most used and acceptable approaches to realize this is through the use of design for testability. Specifically, applications of built-in self-test (BIST) methodology in testing embeded cores are considered in the thesis, with specific implementations being targeted towards ISCAS 85 combinational benchmark circuits. Experimental results provided in the thesis prove the validity and importance of the approaches proposed for the design <b>verification</b> <b>and</b> <b>test</b> based on hardware and software co-design concepts utilizing Altera MAX Plus II simulation environment...|$|E
40|$|The {{standard}} {{extends the}} capability of the IEEE 1149. 1 standard to include AC-coupled and/or differential nets. These nets are predominant in new, multi-gigabit serial technology. This paper will present a short overview of the 1149. 6 standard and the issues that it addresses. The paper will then discuss design, <b>verification</b> <b>and</b> <b>test</b> considerations that {{must be dealt with}} when implementing 1149. 6 logic on a component or a board. Since 1149. 6 addresses a problem that is in part analog in nature, there are several new issues that must be dealt with which are not covered in previous 1149 based standards. The paper discusses the nature of these issues and their impact on design, <b>verification</b> <b>and</b> <b>test.</b> The paper is intended to be tutorial, providing tips and techniques to allow the user to quickly understand and implement an 1149. 6 based design. ...|$|E
40|$|Abstract — Design, <b>Verification</b> <b>and</b> <b>Test</b> of {{integrated}} circuits {{with millions of}} gates put strong requirements on design time, test volume, test application time, test speed and diagnostic resolution. In this paper, an overview is given on the common aspects of these tasks and how they interact. Diagnosis techniques may be used after manufacturing, for chip characterization and field return analysis, and even for rapid prototyping. I...|$|E
40|$|This work {{extends to}} the switch level the <b>verification</b> <b>and</b> <b>testing</b> {{techniques}} based upon boolean satisfiability (SAT), so that SAT-based methodologies {{can be applied to}} circuits that cannot be well described at the gate level. The main achieved goal was to define a boolean model describing switch-level circuit operations as a SAT problem instance, to be applied to combinational equivalence checking <b>and</b> bridging-fault <b>test</b> generation. Results are provided for a set of combinational CMOS circuits, showing the feasibility of SAT-based <b>verification</b> <b>and</b> <b>testing</b> of switch-level circuits...|$|R
50|$|Yannakakis {{is known}} for his {{contributions}} to computer science in the areas of computational complexity theory, database theory, computer aided <b>verification</b> <b>and</b> <b>testing,</b> <b>and</b> algorithmic graph theory.|$|R
40|$|Abstract – This paper {{presents}} an integrated approach to <b>verification</b> <b>and</b> <b>testing</b> automation of UML projects. It consists of automatic model creation from UML specifications {{in the formal}} language of basic protocols, model’s verification by the means of VRS technology <b>and</b> automatic <b>tests</b> generation in TTCN language using TAT. The actuality of this task arises from necessity of software functionality’s correctness checking, including <b>verification</b> <b>and</b> <b>testing,</b> but there is lack of industrial technologies which allow integrating these two activities. Results of the developed approach piloting are also described. I...|$|R
40|$|The MUST (Multipurpose User-oriented Software Technology) {{program is}} being {{developed}} to cut the cost of producing research flight software through a system of software support tools. An integrated verification and testing capability was designed as part of MUST. Documentation, <b>verification</b> <b>and</b> <b>test</b> options are provided with special attention on real-time, multiprocessing issues. The needs of the entire software production cycle were considered, with effective management and reduced lifecycle costs as foremost goals...|$|E
40|$|We {{report on}} an ongoing project that {{addresses}} the use of explicit state model checking technology {{in the design of}} railroad interlocking systems. We discuss our modeling approach, the requirements on the use of formal methods as specified in the pertinent CENELEC standards, and the use of explicit state model checking in requirements <b>verification</b> <b>and</b> <b>test</b> case generation. In the context of test case generation we also illustrate the use of heuristic search strategies in model checking...|$|E
40|$|Abstract. The {{article is}} {{concerned}} with an approach to model based test development for large software systems. The approach presented {{is a part of}} UniTesK test development technology, which is developed on the background of 10 -year experience of ISP RAS in <b>verification</b> <b>and</b> <b>test</b> development for complex industrial software [1]. The article states that the well-known software engineering principles underlying the approach and aimed at coping with complexity makes possible its application in software projects of real-life size and complexity. ...|$|E
40|$|Models are {{considered}} an essential step in capturing different system behaviors and simplifying the analysis required to check or {{improve the quality}} of software. <b>Verification</b> <b>and</b> <b>testing</b> of web software requires effective modeling techniques that address the specific challenges of web applications. In this study we survey 24 different modeling methods used in website <b>verification</b> <b>and</b> <b>testing.</b> Based on a short catalogue of desirable properties of web applications that require analysis, two different views of the methods are presented: a general categorization by modeling level, and a detailed comparison based on property coverage...|$|R
40|$|Simulation {{modeling}} {{in systems}} biology embarks on discrete event simulation only for cases of small cardinalities of entities and uses continuous simulation otherwise. Modern modeling environments like Bio-PEPA support {{both types of}} simulation within a single modeling formalism. Developing models for complex dynamic phenomena is not trivial in practice <b>and</b> requires careful <b>verification</b> <b>and</b> <b>testing.</b> In this paper, we describe relevant steps in the <b>verification</b> <b>and</b> <b>testing</b> of a TNFα-mediated NF-κB signal transduction pathway model and discuss to what extent automated techniques help a practitioner to derive a suitable model. ...|$|R
40|$|Pre-fabrication design <b>verification</b> <b>and</b> post-fabrication chip <b>testing</b> are two {{important}} {{stages in the}} product realization process. These two stages consume {{a large part of}} resources in the form of time, money, and engineering effort during the process [1]. Therefore, it is important {{to take into account the}} design verification (such as through formal <b>verification)</b> effort <b>and</b> chip <b>testing</b> effort when we design a system. This paper analyzes the impact on formal <b>verification</b> effort <b>and</b> <b>testing</b> effort due to adding different fault tolerance mechanisms to baseline systems. By comparing the experimental results of different designs, we conclude that re-execution (time redundancy) is the most efficient mechanism when considering formal <b>verification</b> <b>and</b> <b>testing</b> efforts together, followed by parity code, dual modular redundancy (DMR), and triple modular redundancy (TMR). We also present the ratio of verification effort to testing effort to assist designers in their trade-off analysis when deciding how to allocate their budget between formal <b>verification</b> <b>and</b> <b>testing.</b> Particularly, we find even for a designated fault tolerance mechanism, some small change in structure can lead to dramatic changes in the efforts. These findings have implications for practical industrial production...|$|R
40|$|Abstract Spectral {{information}} {{can be used for}} many CAD system tasks including synthesis, <b>verification</b> <b>and</b> <b>test</b> vector generation. AND/OR graphs are also useful for representing functions in CAD systems since they can offer advantages with respect to storage and representation of incompletely specified relations. We analyze the problem of extracting spectral information from AND/OR graphs. It is shown that spectral information may be calculated directly from output probabilities and a method for extracting output probabilities from AND/OR graphs is described with experimental results provided. ...|$|E
40|$|Abstract — Extended Finite State Machines (EFSMs) {{have been}} {{proposed}} to model control oriented systems. A version of this, with the data portion modeled by Presburger arithmetic, {{has been used in}} formal <b>verification</b> <b>and</b> <b>test</b> pattern generation. This paper proposes a general logic minimization scheme using don’t care derived from both control and data path. It consists of methods to transfer don’t cares through the data path and to generate logic don’t cares from the data path using quantifier-free Presburger inequalities. Potential applications are discussed and preliminary results validate the scheme on reasonable examples. I...|$|E
40|$|We {{report on}} an ongoing project 1 that {{addresses}} the use of explicit state model checking technology {{in the design of}} railroad interlocking systems. We discuss our modeling approach, the requirements on the use of formal methods as specified in the pertinent CENELEC standards, and the use of explicit state model checking in requirements <b>verification</b> <b>and</b> <b>test</b> case generation. In the context of test case generation we also illustrate the use of heuristic search strategies in model checking. I. CASE STUDY We consider the design of a generic Track Segment Oc...|$|E
5000|$|High-level {{protocol}} descriptions {{written in}} the ISO language LOTOS. The toolbox contains two compilers (CAESAR and CAESAR.ADT) that translate LOTOS descriptions into C code {{to be used for}} simulation, <b>verification,</b> <b>and</b> <b>testing</b> purposes.|$|R
40|$|Abstract. <b>Verification</b> <b>and</b> {{compliance}} <b>testing</b> {{are required}} if agents {{are to be}} delegated responsibility for legally binding contracts, for example in electronic markets. This paper describes a general agent communication framework which allows several different notions of <b>verification</b> <b>and</b> compliance <b>testing</b> to be described. In particular we consider what type of verification or testing may be possible depending on the information which may be available (agent internals, observable behaviour, normative specifications) and the semantic definition of the communication language. We use this framework to identify the types of languages which will permit <b>verification</b> <b>and</b> <b>testing</b> in open systems where agents’ internals are kept private. This analysis gives some ideas about how compliance might be enforced in an open system. ...|$|R
50|$|On the {{developer}} side, legitimate software and service providers can have independent <b>verification</b> <b>and</b> <b>testing</b> of their source code. On {{the information technology}} side, companies can aggregate common threats, patterns, and security solutions {{to a variety of}} security issues.|$|R
40|$|Abstract. This paper investigates specification, <b>verification</b> <b>and</b> <b>test</b> {{generation}} for synchronous and asynchronous circuits. The {{approach is}} called DILL (Digital Logic in LOTOS). DILL models are discussed for synchronous and asynchronous circuits. Relations for (strong) conformance are defined for verifying a design specification against a high-level specification. An algorithm is also outlined for generating and applying implementation tests {{based on a}} specification. Tools {{have been developed for}} automated test generation and verification of conformance between an implementation and its specification. The approach is illustrated with various benchmark circuits as case studies...|$|E
40|$|Abstract—The {{design of}} 3 -dimensional {{integrated}} circuits requires new specialized tools, methods and flows. Whereas some tools {{are on the}} market and some design flows for standard ICs are extended to handle die stacking and through-silicon vias, much R&D has still to address relevant and crucial problems. We can roughly classify design problems and tools into three categories: i) synthesis of 3 D structures, ii) analysis, <b>verification</b> <b>and</b> <b>test</b> support, and iii) thermal management. We briefly survey methods and tools addressing these problems. Index Terms— 3 D placement, 3 D routing, Network on Chip, GALS, signal integrity, power integrity, thermal management. I...|$|E
40|$|Abstract. Program {{verification}} {{is concerned}} with proving that a program is correct and adheres to a given specification. Testing a program, in contrast, means {{to search for a}} witness that the program is incorrect. In the present paper, we use a program logic for Java to prove the incorrectness of programs. We show that this approach, carried out in a sequent calculus for dynamic logic, creates a connection between calculi and proof procedures for program <b>verification</b> <b>and</b> <b>test</b> data generation procedures. Starting with a program logic enables to find more general and more complicated counterexamples for the correctness of programs...|$|E
40|$|This diploma thesis {{consist of}} {{overview}} for position measuring methods and is mainly focused on design of non-standard inductive and incremental sensor. Specifications of those sensors {{is based on}} requirements set by MESING company. Also contains <b>verification</b> <b>and</b> <b>testing</b> measurement of completed sensor...|$|R
40|$|Abstract. Happen-before causal {{partial order}} {{relations}} {{have been widely}} used in concurrent program <b>verification</b> <b>and</b> <b>testing.</b> In this paper, we present a parametric approach to happen-before causal partial orders. All existing variants of happen-before relations can be obtained as instances of the parametric framework for particular properties on the partial orders. A novel causal partial order, called sliced causality, is defined also as an instance of the parametric framework, which loosens the obvious but strict happens-before relation by considering static and dynamic dependence information about the program. Sliced causality has been implemented in a concurrent runtime verification tool for Java, named jPredictor, and the evaluation results show that sliced causality can significantly improve the capability of concurrent <b>verification</b> <b>and</b> <b>testing</b> on multi-threaded Java programs. ...|$|R
40|$|This is the {{critical}} design review for the Telepresence/Telerobotic Technology for Children with Disabilities Project by team I. - C. E. E. (Innovative Connectivity Ensuring Education). This report details our telepresence system design for our client (Nathan Stilts) including design choices/justification, <b>testing</b> <b>verification</b> <b>and</b> procedures, and chosen components for implementation. There are seven chapters in total starting with introductory/background information followed by hardware <b>and</b> software design, <b>verification,</b> <b>and</b> <b>testing</b> <b>and</b> concludes with {{the current status of}} the project and what future work may need to be included...|$|R
40|$|AbstractDeveloping time-critical systems {{requires}} expressive, rigorous, {{easy to use}} notations {{to describe}} the time-related features of the systems, {{in a way that}} is formal enough to support and automate activities like property <b>verification</b> <b>and</b> <b>test</b> case generation. We propose a dual-language approach provided with a descriptive formalism for specifying the properties of a system and its components in addition to the typical UML (and UML-RT) diagrams. This description consists of a formula of a new logic, called OTL (Object Temporal Logic), which is an extension of OCL. The approach is applied to a case study derived from the authors' industrial experiences...|$|E
40|$|Program {{verification}} {{is concerned}} with proving that a program is correct and adheres to a given specification. Testing a program, in contrast, means {{to search for a}} witness that the program is incorrect. In the present paper, we use a program logic for Java to prove the incorrectness of programs. We show that this approach, carried out in a sequent calculus for dynamic logic, creates a connection between calculi and proof procedures for program <b>verification</b> <b>and</b> <b>test</b> data generation procedures. In comparison, starting with a program logic enables to find more general and more complicated counterexamples for the correctness of programs...|$|E
40|$|We discuss our {{experience}} obtained during the PROFIsafe <b>verification</b> <b>and</b> <b>test</b> case generation project at Siemens Corporate Technology. In this project, a formal {{analysis of the}} PROFIsafe protocol for failsafe communication has been carried out, using the VALID Toolset. A formal model based on finite state machines has been obtained from the UML specification of the protocol. This model has been analysed with formal verification techniques, and several important properties have been proven. Based on the verified model, a set of test cases for the automatic execution of conformance tests has been derived. The paper points out important aspects and problems occurring during the modelling and verification of real industrial applications...|$|E
40|$|The {{contribution}} {{addresses the}} problem of formal specification, <b>verification</b> <b>and</b> <b>testing</b> of software for reactive systems. A new testing algorithm is presented, its advantages and drawbacks are discussed, and topics for further research are identified. Available from STL Prague, CZ / NTK - National Technical LibrarySIGLECZCzech Republi...|$|R
40|$|Goals: Introduction to the {{concepts}} and techniques of VLSI (Very Large Scale Integration) design <b>verification</b> <b>and</b> <b>testing,</b> details of test economy, fault modeling and simulation, defects, Automatic Test Pattern Generation (ATPG), design for testability, Scan and Boundary scan architectures, built-in self-test (BIST) <b>and</b> current-based <b>testing.</b> Tools are used (in homeworks and projects) fo...|$|R
40|$|This thesis {{focuses on}} {{verification}} of Intrusion Detection System and its IPv 6 support extension. Here are described posibilities of SystemVerilog for verification, choosen <b>verification</b> methodology, pros <b>and</b> cons of different <b>verification</b> <b>and</b> <b>testing</b> approaches. Here is designed structure of verification of key parts of Intrusion Detection System. The {{key component of}} verification system is Packet Generator...|$|R
