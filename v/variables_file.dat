5|141|Public
40|$|Telescope MAGIC I has {{recently}} been extended to a stereoscopic system by adding a second 17 m telescope, MAGIC-II. One of the major improvements of the second telescope is an improved camera. The Camera Control Program {{is embedded in the}} telescope control software as an independent subsystem. The Camera Control Program is an effective software to monitor and control the camera values and their settings and is written in the visual programming language LabVIEW. The two main parts, the Central <b>Variables</b> <b>File,</b> which stores all information of the pixel and other camera parameters, and the Comm Control Routine, which controls changes in possible settings, provide a reliable operation. A safety routine protects the camera from misuse by accidental commands, from bad weather conditions and from hardware errors by automatic reactions. Keywords: MAGIC-II Camera Slow-Contro...|$|E
40|$|The Imaging Atmospheric Cherenkov Telescope MAGIC I has {{recently}} been extended to a stereoscopic system by adding a second 17 m telescope, MAGIC-II. One of the major improvements of the second telescope is an improved camera. The Camera Control Program {{is embedded in the}} telescope control software as an independent subsystem. The Camera Control Program is an effective software to monitor and control the camera values and their settings and is written in the visual programming language LabVIEW. The two main parts, the Central <b>Variables</b> <b>File,</b> which stores all information of the pixel and other camera parameters, and the Comm Control Routine, which controls changes in possible settings, provide a reliable operation. A safety routine protects the camera from misuse by accidental commands, from bad weather conditions and from hardware errors by automatic reactions. Comment: Contribution to the 31 st ICRC, Lodz, Poland, July 200...|$|E
40|$|So {{far there}} exists very little support to specify and to control {{execution}} {{of a large number}} of experiments on distributed and parallel architectures. This paper describes ZEN, a directive-based language for the specification of arbitrarily complex program executions by varying problem, system, or machine parameters for parallel and distributed applications. ZEN introduces directives to substitute strings and to insert assignment statements inside arbitrary files, such as program, input, script, or makefiles. The programmer thus can invoke experiments for arbitrary value ranges of any problem parameter, including program <b>variables,</b> <b>file</b> names, compiler options, target machines, machine sizes, scheduling strategies, data distributions, etc. The number of experiments can be controlled through ZEN constraint directives. Finally, the programmer may request a large set of performance metrics to be computed for any code region of interest. The scope of ZEN directives can be restricted to arbitrary file or code regions. We have implemented a prototype tool for automatic experiment management that is based on ZEN. We will report results for performance analysis of an ocean simulation application and for parameter study of a computational finance code...|$|E
5000|$|<b>Variable</b> and <b>file</b> based {{access to}} the {{resources}} in the device ...|$|R
25|$|Sharp APL was {{available}} from I. P. Sharp Associates, first on a timesharing {{basis in the}} 1960s, and later as a program product starting around 1979. Sharp APL was an advanced APL implementation with many language extensions, such as packages (the ability to put one or more objects into a single <b>variable),</b> <b>file</b> system, nested arrays, and shared variables.|$|R
5000|$|The 64-bit offset format was {{introduced}} in version 3.6.0, and it supports larger <b>variable</b> and <b>file</b> sizes.|$|R
40|$|Performance-oriented code development, {{software}} testing, {{performance analysis}} and parameter studies for distributed and parallel systems commonly require {{to conduct a}} large number of executions. Every execution of an application {{can be viewed as a}} scientific experiment. So far there exists very little support to specify and to control execution of {{a large number of}} experiments. Various problems must be addressed, such as which input files to read, where to store program's output, what performance metrics to measure and what range of problem parameters to observe. This paper describes ZEN, a directivebased language to support automatic experiment management for a wide variety of parallel and distributed architectures. It is used to specify arbitrarily complex program executions in the context of performance analysis and tuning, parameter studies, and software testing. ZEN introduces directives to substitute strings and insert assignment statements inside arbitrary files, such as program, input, script, or makefiles. This enables the programmer to invoke experiments for arbitrary value ranges of any problem parameter, including program <b>variables,</b> <b>file</b> names, compiler options, target machines, machine sizes, scheduling strategies, data distributions, etc. The number of experiments can be controlled through ZEN constraint directives. Finally, the programmer may request a large set of performance metrics to be computed for any code region of interest. The scope of ZEN directives can be restricted to arbitrary file or code regions...|$|E
40|$|Abstract {{copyright}} UK Data Service {{and data}} collection copyright owner. The general objectives of this, the second Scottish House Condition Survey are: to enable physical quality of Scotland's housing stock to be monitored at a national level; the contribute {{to our understanding of}} factors which influence the physical condition of the housing stock; to describe the socio-economic characteristics of the households and link the characteristics of both dwelling and occupants. Specific objectives introduced related to establishing the thermal efficiency of the stock {{and the extent to which}} dwellings are accessible to people with impaired mobility. In February 2000, new data files were added and the User Guide updated for the second edition of this study. The changes included: addition of summaries of individual benefit showing which data is imputed and which supplied by respondent, addition of summaries of income source showing which data is imputed and which supplied by respondent, and additional variables relating to housing needs. The dwelling disrepair variables have been updated. Also, a key was added to the longitudinal element to enable a link between the 1991 and 1996 SCHS studies, and a sub-sample of the physical data has been re-collected. The introductory documentation was also updated and contains information on the newly deposited and updated data. For the third edition of the study (July 2002), the Physical Derived <b>Variables</b> <b>file</b> p 96 eder 5. por was replaced, and two new data files, marketvalue. por (Market Valuation Study data) and p 96 eder 7. por (Fuel Poverty data) added to the dataset. The documentation was also updated accordingly. Main Topics : Physical Survey: dwelling description; characterisitcs of common block; locality; amenities; services and fittings; repairs required/defects and residual life of building components; thermal efficiency; whether dwelling conformed with barrier free standards; whether dwelling met the statutory Tolerable Standard. Socio-economic Interview: household composition; tenure; employment details; income and housing costs; satisfaction with present housing; impact of damp and condensation on household; heating arrangements and fuel costs; repairs and improvement works undertaken and cost and quality; existence of, and requirements for, housing adaptation; housing mobility and aspirations; neighbourhood environment...|$|E
40|$|The data {{structure}} is year-by-year family <b>variables</b> <b>files</b> and a 21 -year compilation of the individual-level variables. With this structure we implement a three-step procedure {{to generate the}} subsamples of the PSID {{that were used in}} the analysis. Step 1 : For each year from the individual file we choose all the male heads of PSID families that are between 23 and 60 of age who responded in that year. 2 The individual-level information is then merged with the family variables associated with this head. This results in 21 yearly Family-Individual <b>variable</b> <b>files,</b> and the numbers of surviving observations (by year) are listed in column (3) of Table A. 1. Step 2 : We combine these 21 yearly files into one file and impose the restriction that only those individuals with three or more continuous observations are retained. Given the timing of variables, we need three consecutive years to obtain the variables necessary for one firstdifference observation in the regression. The effect of this restriction on observations by year is 1 This appendix will be made available at the authors web sites. 2 The age restriction varied depending on the wave of the PSID being considered. In the early years we restricted th...|$|R
5000|$|<b>Variable</b> Diameter Propeller, <b>filed</b> Oct.24, 1962, issued April, 1964 ...|$|R
5000|$|Inline variables, {{which allows}} the {{definition}} of <b>variables</b> in header <b>files</b> ...|$|R
5000|$|The Home Health Visits files (released {{annually}} in August) - This file contains one record for each {{time that a}} certified home health medical practitioner visits a sampled individual. In addition to the standard event <b>file</b> <b>variables,</b> this <b>file</b> contains information about the home health medical provider's credentials and skills, {{the length of the}} visit, and the type(s) of care received. This file includes medical visits by hospice providers, which are generally paid for home-based care through the Medicare Hospice benefit.|$|R
30|$|Dataset of 32 {{molecules}} {{was divided}} into training (24 compounds) and test (8 compounds) set by SE method having dissimilarities values of 7.9 with pEC 50 activity field as dependent variable and various 3 D descriptors calculated for the compounds as independent <b>variables</b> (Additional <b>file</b> 2).|$|R
3000|$|... 21 Summary {{statistics}} of all <b>variables</b> in Additional <b>file</b> 1. See also Additional file 1 {{for the construction}} and definitions of these variables.|$|R
50|$|In this example, the {{variable}} Global_Variable {{is defined in}} File 1. In order to utilize the same <b>variable</b> in <b>File</b> 2, it must be declared. Regardless {{of the number of}} <b>files,</b> a global <b>variable</b> is only defined once, however, it must be declared in any file outside of the one containing the definition.|$|R
40|$|Syntax Trees and {{entity-relationship}} tuples (similar to RSF facts). RSF {{facts are}} presented {{in the form of}} tuples such as, function calls function, function references <b>variable,</b> <b>file</b> includes library [5]. In the second phase, user-defined queries provide a hypothesis about the system's assumed architecture. A pattern matching engine is used for finding the optimal variable instantiation for a given AQL query, generating thus a concrete architecture. Therefore, the query represents, in an abstract way, design concepts corresponding to a "macroscopic design pattern". For example, a query may focus on obtaining an optimal arrangement of the functions, types, and variables in the modules that conform to the user specified descriptions. The optimal arrangement is obtained with respect to the evidences gathered from the source code using Data Mining techniques. The proposed approach focuses on facilitating partial matching, a situation that is frequent in practice and has been addressed in [...] ...|$|R
5000|$|The NWS, {{through a}} variety of sub-organizations, issues {{different}} forecast products to users, including the general public. Although, throughout history, text forecasts have been the means of product dissemination, the NWS has been using more forecast products of a digital, gridded, image or other modern format. Each of the 122 Weather Forecast Offices (WFOs) send their graphical forecasts to a national server to be compiled in the National Digital Forecast Database (NDFD). The NDFD is a collection of common weather observations used by organizations and the public, including precipitation amount, temperature, and cloud cover among other parameters. In addition to viewing gridded weather data via the internet, users can download and use the individual grids using a [...] "GRIB2 decoder" [...] which can output data as shapefiles, netCDF, GrADS, float files, and comma separated <b>variable</b> <b>files.</b> Specific points in the digital database can be accessed using an XML SOAP service.|$|R
3000|$|... max) {{evaluates the}} {{difference}} between the lowest and the highest value of each variable from the beginning of mechanical ventilation, that is D 1, till D 6 in VAP patients and non-infected controls. Of the studied <b>variables</b> (Additional <b>file</b> 1), only CRP, CRP ratio and MR-proADM were significantly different between groups (p <  0.001, p <  0.001, p =  0.01, respectively). The Δ [...]...|$|R
40|$|A {{computer}} program called dsn config converter automates {{what had been}} a manual process for updating the multimission adaptation file (multi. aaf) used by a multiple-mission-command-sequence-generating process comprised of a combination of the AUTOGEN and APGEN programs mentioned in the immediately preceding article. The program converts the dsn_config. cvf file that provides DSN (Deep Space Network) antenna configuration code mappings from a context <b>variable</b> <b>file</b> (CVF) format used {{in another part of the}} command generation process to an APGEN activity file (AAF) format used by AUTOGEN and APGEN. Whereas previously, the information in the dsn_config. cvf file was manually encoded into the multi. aaf file, now the program automatically generates a dsn_config. aaf file from the dsn_config. cvf file. As part of this development effort the multi. aaf file was adapted to use the new dsn_config. aaf representations. Through this automation a tedious error-prone step has now been replaced by a quick and robust step...|$|R
40|$|Advertisement HIV AIDS in televison very {{effective}} too supply news persuasive to audience whose watching advertisement, advertisement having positive influence to audience via massage {{what they have}}s, message and news what they have gives awarness to audience about HIV AIDS. By cause, how much the influence of display advertisement of HIV AIDS in television to responses of studenys about prevention HIV AIDS Cause effect on rush of presentesion HIV AIDS can explain therical with using theory S­O­R. Pass through advertisement accepted by audience verry influence to response student the object onrush, after looking a view some indicators frequency, appearance, cognitive, affective, behavioral. Metode researce uding is survey with explanation. Meaning of researce explain too porpuses generalision sample to other population, and explain influence one variable to another <b>variable.</b> <b>File</b> has been collecting from quisioner and document. Analisis is regretion simple linier. Looking from result of score analisis coefisien correlation about 0, 736 apparently advertisement have influence to response student with 54, 1...|$|R
40|$|Recently, {{there has}} been an effort to specify an IEEE {{standard}} for portable operating systems for open systems, called POSIX. One part of it, the POSIX 1003. 4 a threads extension (Pthreads for short) [12], describes the interface for light-weight threads that rely on shared memory and have a smaller context frame than processes. This paper describes and evaluates the design and implementation of a library of Pthreads calls that is solely based on UNIX. It shows that a library implementation is feasible and can result in good performance. This work can also be used as a comparison of the performance of other implementations, or as a prototyping, testing, and debugging system in the regular UNIX environment. Finally, some problems with the Pthreads standard are identified. Introduction Light-weight threads are independent threads of control within a regular process that share global data (global <b>variables,</b> <b>files,</b> etc.) but maintain their own stack, local variables, and program counter. [...] ...|$|R
5000|$|The C {{language}} {{does not}} have a [...] keyword. However, variables declared outside a function have [...] "file scope," [...] meaning they are visible within the <b>file.</b> <b>Variables</b> declared with <b>file</b> scope are visible between their declaration {{and the end of the}} compilation unit ( [...] file) (unless shadowed by a like-named object in a nearer scope, such as a local variable); and they implicitly have external linkage and are thus visible to not only the [...] file or compilation unit containing their declarations but also to every other compilation unit that is linked to form the complete program. Note that not specifying [...] is the same as specifying : the default is external linkage. External linkage, however, is not sufficient for such a variable's use in other files: for a compilation unit to correctly access such a global variable, it will need to know its type. This is accomplished by declaring the <b>variable</b> in each <b>file</b> using the [...] keyword. (It will be declared in each file but may be defined in only one.) Such [...] declarations are often placed in a shared header file, since it is common practice for all [...]c files in a project to include at least one [...] file: the standard header file [...] is an example, making the [...] variable accessible to all modules in a project. Where this global access mechanism is judged problematic, it can be disabled using the [...] keyword which restricts a <b>variable</b> to <b>file</b> scope, and will cause attempts to import it with [...] to raise a compilation (or linking) error.|$|R
5000|$|As of version 2.7.1, Free Pascal {{implemented}} basic ISO Pascal mode, {{though many}} {{things such as}} [...] and [...] procedure and <b>file</b> buffer <b>variable</b> concept for <b>file</b> handling were still absent.|$|R
50|$|With one record per {{household}} in the sample, this file mainly contains descriptors {{necessary to determine}} the number of individuals and families within each sampled household, and allows researchers to link families or other unrelated individuals captured in any of the other Core files based on household of residence (using the HHX <b>variable).</b> This <b>file</b> also contains basic information on non-response and a household-level final weight.|$|R
30|$|The Granger {{causality}} test {{based on}} the VECM is {{used to determine the}} short and long run causal relationships among the <b>variables.</b> Additional <b>file</b> 4 : Table S 4 shows the Granger causality test results {{based on the}} VECM. The Wald F-test results show the significance of the short run causal effects, while the significance of the coefficient of the error correction term [ect (− 1)] indicates the long run causal effect.|$|R
50|$|In the past, many {{hardware}} and software players could not decode <b>variable</b> bitrate <b>files</b> properly, partly because the various VBR encoders used were not well developed. This resulted in common use of CBR over VBR {{for the sake of}} compatibility. As of December 2006, devices that support only CBR encoded files are largely obsolete, as the vast majority of modern portable music devices and software support VBR encoded files.|$|R
50|$|Several {{variables}} are provided, {{to be used}} in the command as placeholders for the values from each <b>file.</b> <b>Variables</b> are technically not required, but must be used if the command is to vary for each file.|$|R
5000|$|Typically a {{web page}} using DCSS {{is set up}} in three files. A file that holds the CSS <b>variables,</b> a [...]php <b>file</b> that echos the CSS content and the web page where the CSS is needed.|$|R
25|$|Typing a TAB {{character}} on the command line causes Octave {{to attempt to}} complete <b>variable,</b> function, and <b>file</b> names (similar to Bash's tab completion). Octave uses the text before the cursor as the initial portion of the name to complete.|$|R
5000|$|... v3.04: This {{unofficial}} version, named [...] "The Developers Cut", adds {{several new}} {{features such as}} large SD card support, and proper support for bookmarks with VBR (<b>Variable</b> Bitrate) [...]mp3 <b>files.</b> There are no known issues with this version. See external links section below.|$|R
5000|$|A set of {{standard}} objects which must exist in every device, on which operations like read, write, event signaling etc. can be executed. Virtual manufacturing device (VMD) {{is the main}} object and all other objects like <b>variables,</b> domains, journals, <b>files</b> etc. comes under VMD.|$|R
5000|$|The IBM i Control Language (CL) is a {{scripting}} language for the IBM's IBM i platform (previously called OS/400 when running on AS/400 systems) bearing a {{resemblance to the}} IBM Job Control Language and consisting of an ever-expanding set of command objects (*CMD) used to invoke traditional AS/400 programs and/or get help on what those programs do. CL {{can also be used}} to create CL programs (congruent to shell scripts) where there are additional commands that provide program-like functionality (IF/ELSE, <b>variable</b> declaration, <b>file</b> input, etc.) ...|$|R
25|$|Upon {{leaving the}} using-block, the {{compiler}} guarantees that the stm object is released, effectively binding the <b>variable</b> to the <b>file</b> stream while abstracting {{from the side}} effects of initializing and releasing the file. Python's with statement and Ruby's block argument to File.open are used to similar effect.|$|R
50|$|The PortableApps.com Launcher (also {{known as}} PAL) {{is used to}} make {{applications}} portable by handling path redirection, environment <b>variable</b> changes, <b>file</b> and directory movement, configuration file path updates and similar changes, as configured.The PortableApps.com Launcher allows software to be made portable without the need to write custom code or make changes to the base application. While some of the software packages released on PortableApps.com currently still contain their own custom launchers, the PortableApps.com Launcher is used in all new apps released. The installers are made with Nullsoft Scriptable Install System.|$|R
40|$|PRAM is a probabilistic, perturbative {{method for}} {{disclosure}} protection of categorical <b>variables</b> in microdata <b>files.</b> If PRAM {{is to be}} applied, several issues should be carefully considered. The microdata file will usually contain a specific structure, e. g., a hierarchical structure when all members of a household {{are present in the}} data file...|$|R
30|$|At baseline, a {{first set}} of {{measurements}} was performed, including hemodynamic and tissue oxygenation <b>variables</b> (Additional <b>file</b> 1 : Supplementary material), arterial lactate level, ∆PCO 2, ∆ContCO 2 /∆ContO 2 ratio, and ∆PCO 2 /∆ContO 2 ratio. A 500  mL of colloid solution (4  % human serum albumin, Vialebex®; LFB) was infused to the patient over 15  min via a specific venous line. Immediately after VE, {{a second set of}} measurement was recorded, including the same hemodynamic and tissue oxygenation variables. Ventilation parameters and doses of norepinephrine, dobutamine, and sedation drugs were kept constant during the VE.|$|R
