8623|4164|Public
5|$|Parrot a <b>virtual</b> <b>machine</b> {{designed}} to run dynamic languages efficiently; Pipp transforms the PHP source code into the Parrot intermediate representation, {{which is then}} translated into the Parrot's bytecode and executed by the <b>virtual</b> <b>machine.</b>|$|E
5|$|Developments in AspectJ have {{revealed}} {{the potential to}} incorporate just-in-time compilation into the execution of aspect-oriented code to address performance demands. At run-time, an aspect weaver could translate aspects in a more efficient manner than traditional, static weaving approaches. Using AspectJ on a Java <b>Virtual</b> <b>Machine,</b> dynamic weaving of aspects at run-time {{has been shown to}} improve code performance by 26%. While some implementations of just-in-time virtual machines implement this capability through a new <b>virtual</b> <b>machine,</b> some implementations can be designed to use features that already exist in current virtual machines. The requirement of a new <b>virtual</b> <b>machine</b> is contrary to one of the original design goals of AspectJ.|$|E
5|$|In 2013, MoarVM (“Metamodel On A Runtime”), a C language-based <b>virtual</b> <b>machine</b> {{designed}} {{primarily for}} Rakudo was announced.|$|E
5000|$|... "Improving cloud {{computing}} <b>virtual</b> <b>machines</b> balancing through hosts and <b>virtual</b> <b>machines</b> similarities" [...] in 2017.|$|R
5000|$|Full {{support for}} {{converting}} existing non-shielded Generation 2 <b>virtual</b> <b>machines</b> to shielded <b>virtual</b> <b>machines,</b> including automated disk encryption ...|$|R
50|$|Both system <b>virtual</b> <b>machines</b> {{and process}} <b>virtual</b> <b>machines</b> {{date to the}} 1960s, and {{continue}} to be areas of active development.|$|R
5|$|Jython compiles into Java byte code, {{which can}} then be {{executed}} by every Java <b>virtual</b> <b>machine</b> implementation. This also {{enables the use of}} Java class library functions from the Python program.|$|E
5|$|To {{accomplish}} just-in-time weaving, {{a change}} to the <b>virtual</b> <b>machine</b> that executes the compiled bytecode is necessary. A proposed solution for AspectJ uses a layered approach which builds upon the existing Java <b>Virtual</b> <b>Machine</b> to add support for join point management and callbacks to a Dynamic Aspect-Oriented Programming Engine. An alternative implementation uses a weaving engine that uses breakpoints to halt execution at the pointcut, select an appropriate method, embed it into the application, and continue. The use of breakpoints in this manner {{has been shown to}} reduce performance due to {{a very large number of}} context switches.|$|E
5|$|HipHop <b>Virtual</b> <b>Machine</b> (HHVM) {{developed}} at Facebook and available as open source, it converts PHP code into a high-level bytecode (commonly {{known as an}} intermediate language), which is then translated into x86-64 machine code dynamically at runtime by a just-in-time (JIT) compiler, resulting in up to 6× performance improvements.|$|E
25|$|Integration of the {{different}} <b>virtual</b> <b>machines</b> {{is provided by the}} Application Viewer, which provides an illusion for the user that applications execute natively on the desktop, while in fact they are hosted (and isolated) in different <b>virtual</b> <b>machines.</b> Qubes integrates all these <b>virtual</b> <b>machines</b> onto one common desktop environment.|$|R
5000|$|Hot add {{and remove}} for network {{adapters}} (for generation 2 <b>virtual</b> <b>machines)</b> and memory (for generation 1 and generation 2 <b>virtual</b> <b>machines)</b> ...|$|R
30|$|If the {{provider}} has not mapped enough <b>virtual</b> <b>machines</b> to meet demand, {{it will start}} <b>virtual</b> <b>machines</b> where they will fit using the first-fit algorithm.|$|R
5|$|PONIE is {{an acronym}} for Perl On New Internal Engine. The PONIE Project existed from 2003 until 2006 and {{was to be a}} bridge between Perl 5 and Perl 6. It was an effort to rewrite the Perl 5 {{interpreter}} to run on Parrot, the Perl 6 <b>virtual</b> <b>machine.</b> The goal was to ensure the future of the millions of lines of Perl 5 code at thousands of companies around the world.|$|E
5|$|The main Python implementation, named CPython, {{is written}} in C, meeting the C89 standard, with several select C99 features. It compiles Python {{programs}} into intermediate bytecode, which is executed by the <b>virtual</b> <b>machine.</b> CPython is distributed with a large standard library written {{in a mixture of}} C and Python. It is available in versions for many platforms, including Windows and most modern Unix-like systems. CPython was intended from almost its very conception to be cross-platform.|$|E
5|$|On {{the other}} hand, {{extraterrestrial}} civilizations with malicious intent could send {{information that could}} enable human civilization to destroy itself, such as powerful computer viruses or {{information on how to}} make extremely potent weapons that humans would not yet be able to use responsibly. While the motives for such an action are unknown, it would require minimal energy use {{on the part of the}} extraterrestrials. According to Musso, however, computer viruses in particular will be nearly impossible unless extraterrestrials possess detailed knowledge of human computer architectures, which would only happen if a human message sent to the stars were protected with little thought to security. Even a <b>virtual</b> <b>machine</b> on which extraterrestrials could run computer programs could be designed specifically for the purpose, bearing little relation to computer systems commonly used on Earth. In addition, humans could send messages to extraterrestrials detailing that they do not want access to the Encyclopædia Galactica until they have reached a suitable level of technological advancement, thus mitigating harmful impacts of extraterrestrial technology.|$|E
30|$|Each user tenant has two <b>virtual</b> <b>machines,</b> two volumes, two virtual Layer- 2 networks, and one virtual router. Two <b>virtual</b> <b>machines</b> {{have the}} same DBMS software.|$|R
30|$|Layered <b>virtual</b> <b>machines</b> [5] {{can be used}} {{to solve}} the {{maintenance}} problem of dormant <b>virtual</b> <b>machines.</b> These machines are split up in different layers, such as a common base layer, containing a base system with some commonly required libraries and tools, an user layer containing specific applications required by the user and potentially other layers. Besides benefits when it comes to storage and transfer of those <b>virtual</b> <b>machines,</b> considering shared layers that need to be stored and transferred only once and reused by many <b>virtual</b> <b>machines,</b> this architecture also helps with the problem of keeping machines up-to-date. Because a base layer is shared by many <b>virtual</b> <b>machines,</b> updating the base layer will affect all <b>virtual</b> <b>machines</b> built on top. Although not the complete software stack is affected by those updates, {{some of the most important}} parts of the system (e.g., the SSH libraries, which were affected by a serious bug in the Debian implementation back in 2008 [19]) can be fixed this way.|$|R
50|$|VMware Server {{has fewer}} {{features}} than VMware ESX, software available for purchase, but can create, edit, and play <b>virtual</b> <b>machines.</b> It uses a client-server model, allowing remote access to <b>virtual</b> <b>machines,</b> {{at the cost}} of some graphical performance (and 3D support). It can run <b>virtual</b> <b>machines</b> created by other VMware products and by Microsoft Virtual PC.|$|R
25|$|The {{initial release}} of Windows XP in 2001 did not ship with a Java <b>virtual</b> <b>machine,</b> {{because of the}} {{settlement}} with Sun. The settlement required {{people who wanted to}} run Java Applets in Internet Explorer to download and install either the standard Sun Java <b>virtual</b> <b>machine,</b> or to download a copy of the Microsoft Java <b>virtual</b> <b>machine.</b>|$|E
25|$|Parallels Desktop for Mac is a {{hardware}} emulation virtualization software, using hypervisor technology that works by mapping the host computer’s hardware resources {{directly to the}} virtual machine’s resources. Each <b>virtual</b> <b>machine</b> thus operates identically to a standalone computer, with virtually all the resources of a physical computer. Because all guest virtual machines use the same hardware drivers irrespective of the actual hardware on the host computer, <b>virtual</b> <b>machine</b> instances are highly portable between computers. For example, a running <b>virtual</b> <b>machine</b> can be stopped, copied to another physical computer, and restarted.|$|E
25|$|Set an {{expiration}} {{date to the}} <b>virtual</b> <b>machine.</b>|$|E
50|$|Additionally, <b>virtual</b> <b>machines</b> {{based in}} VirtualBox are made {{available}} by Ensembl Genomes. This <b>virtual</b> <b>machines</b> are pre-configured {{and can be}} set to browse any domain of Ensembl Genomes.|$|R
50|$|Windows Server 2008 R2 with SP1 {{has been}} tested for up to twelve <b>virtual</b> <b>machines</b> per GPU, {{for a total of}} twenty-four <b>virtual</b> <b>machines</b> on two {{physical}} GPUs.|$|R
5000|$|<b>Virtual</b> <b>machines,</b> {{infrastructure}} as {{a service}} (IaaS) allowing users to launch general-purpose Microsoft Windows and Linux <b>virtual</b> <b>machines,</b> as well as preconfigured machine images for popular software packages.|$|R
25|$|Older {{operating}} systems are supported with <b>Virtual</b> <b>Machine</b> additions.|$|E
25|$|The {{ability to}} use select voice {{commands}} to remotely control the <b>virtual</b> <b>machine.</b>|$|E
25|$|The core {{components}} {{include the}} C# compiler, the <b>virtual</b> <b>machine</b> for the Common Language Infrastructure and the core class libraries. These components {{are based on}} the Ecma-334 and Ecma-335 standards, allowing Mono to provide a standards compliant, free and open-source CLI <b>virtual</b> <b>machine.</b> Microsoft issued a statement that covers both standards under their Community Promise license.|$|E
30|$|Researchers {{have already}} {{confirmed}} the great characteristics of virtualization technologies from the security perspective. The most notable characteristic is {{a feature that}} ensures isolation between <b>virtual</b> <b>machines</b> that are run concurrently on the same physical system [4], and {{the isolation of the}} hypervisor responsible for managing the <b>virtual</b> <b>machines</b> from the virtualized operating systems. The perfect isolation of the <b>virtual</b> <b>machines</b> and the hypervisor managing them provides a secure framework in which the security system continues to run correctly even when numerous malicious codes exist in the <b>virtual</b> <b>machines.</b>|$|R
5000|$|QVD-L7R: Level 7 router. In {{charge to}} balance the {{connections}} from the QVD-Client to the <b>Virtual</b> <b>Machines</b> and the responsibility for login user before they went into their <b>Virtual</b> <b>Machines.</b>|$|R
30|$|Spoofing. The system cannot detect {{identity}} spoofing in <b>virtual</b> <b>machines.</b> If someone {{pretends to}} be a genuine customer C by using remote control malware and commits crimes in <b>virtual</b> <b>machines,</b> the LogDrive framework cannot identify the person who commits crimes over the Internet. The customer C is responsible for preventing identity spoofing by employing strict authentication mechanisms and regular software updates on the <b>virtual</b> <b>machines.</b>|$|R
25|$|In 2006, native {{symmetric}} multiprocessing support {{was added to}} the runtime system and <b>virtual</b> <b>machine.</b>|$|E
25|$|JRuby, a Java {{implementation}} {{that runs}} on the Java <b>virtual</b> <b>machine.</b> JRuby currently targets Ruby 2.3.|$|E
25|$|Elixir: a functional, concurrent, {{general-purpose}} {{programming language}} {{that runs on}} the Erlang <b>Virtual</b> <b>Machine</b> (BEAM).|$|E
50|$|QVD can run <b>virtual</b> <b>machines</b> using KVM or LXC. KVM {{allows for}} a {{complete}} isolation between the host and the guest <b>virtual</b> <b>machines.</b> LXC on the other hand, runs the <b>virtual</b> <b>machined</b> inside isolated containers inside the host. That greatly reduces the CPU and memory requirements per user session as the kernel is able to share resources (i.e. disk buffers) between the containers more effectively.|$|R
5000|$|Converter, enables {{users to}} create VMware ESX Server- or Workstation-compatible <b>virtual</b> <b>machines</b> from either {{physical}} <b>machines</b> or from <b>virtual</b> <b>machines</b> made by other virtualization products. Converter replaces the VMware [...] "P2V Assistant" [...] and [...] "Importer" [...] products — P2V Assistant allowed users to convert physical <b>machines</b> into <b>virtual</b> machines; and Importer allowed {{the import of}} <b>virtual</b> <b>machines</b> from other products into VMware Workstation.|$|R
30|$|A daemon is used {{to provide}} some automation. All <b>virtual</b> <b>machines</b> can be checked for updates {{automatically}} at regular intervals. As described above, this frequently updates the cached repository databases and caches the results for all <b>virtual</b> <b>machines.</b> Queries using the API or the command line interface can then be served from the cache, requiring almost no time (only a file has to be read). The daemon also allows to notify users by email about outdated packages in their <b>virtual</b> <b>machines.</b> Additionally, the daemon can be configured to send emails {{about the status of}} all <b>virtual</b> <b>machines</b> to administrators.|$|R
