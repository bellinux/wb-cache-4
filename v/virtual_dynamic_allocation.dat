0|4219|Public
40|$|We present Path-Diverse In-Order Routing (PDIOR), an {{oblivious}} routing method which guarantees network-level inorder delivery for multi-path routing. Based on Exclusive <b>Dynamic</b> <b>Virtual</b> Channel <b>Allocation</b> (EDVCA), {{which allows}} single-path efficient inorder delivery with <b>dynamic</b> <b>virtual</b> channel <b>allocation,</b> PDIOR extends the same guarantees to routing schemes where each flow may be routed via {{more than one}} path. As with EDVCA, PDIOR avoids the overheads inherent in reordering packets at the destination core, and requires only minor, inexpensive changes to traditional oblivious router architectures: for example, an implementation of PDIOR on 8 × 8 mesh network with 4 VCs per port requires 492 bytes of memory per node, while inorder packet delivery in a comparable conventional network may requires tens to hundreds of kilobytes of reorder buffer memory at each node. 1...|$|R
40|$|Network {{virtualisation}} is {{a promising}} technique {{for a better}} future Internet by allowing for network resource sharing. However, resource sharing requires that virtual nodes and links be embedded onto substrate nodes and links (virtual network embedding), and thereafter the allocated resources dynamically managed throughout the lifetime of the <b>virtual</b> network (<b>dynamic</b> resource <b>allocation).</b> Since the constrained virtual network embedding problem is NP–Hard, many existing approaches are not only static, but also make simplifying assumptions, most of which would not apply in practical environments. This PhD research proposes improvements to both virtual network embedding and <b>dynamic</b> resource <b>allocation.</b> The objective is to achieve an efficient utilisation of physical network resources. To this end, we propose a path generation-based approach for a one-shot, unsplittable flow virtual network embedding, and a reinforcement learning-based <b>dynamic</b> <b>allocation</b> of substrate network resources. Peer ReviewedPostprint (published version...|$|R
40|$|Part 2 : Ph. D. Student Workshop — Management of Virtualized Network Resources and FunctionsInternational audienceNetwork {{virtualisation}} is {{a promising}} technique {{for a better}} future Internet by allowing for network resource sharing. However, resource sharing requires that virtual nodes and links be embedded onto substrate nodes and links (virtual network embedding), and thereafter the allocated resources dynamically managed throughout the lifetime of the <b>virtual</b> network (<b>dynamic</b> resource <b>allocation).</b> Since the constrained virtual network embedding problem is NP–Hard, many existing approaches are not only static, but also make simplifying assumptions, most of which would not apply in practical environments. This PhD research proposes improvements to both virtual network embedding and <b>dynamic</b> resource <b>allocation.</b> The objective is to achieve an efficient utilisation of physical network resources. To this end, we propose a path generation-based approach for a one-shot, unsplittable flow virtual network embedding, and a reinforcement learning-based <b>dynamic</b> <b>allocation</b> of substrate network resources...|$|R
40|$|Most {{virtual channel}} routers have {{multiple}} virtual channels {{to mitigate the}} effects of head-of-line blocking. When there are more flows than virtual channels at a link, packets or flows must compete for channels, either in a dynamic way at each link or by static assignment computed before transmission starts. In this paper, we present methods that statically allocate channels to flows at each link when oblivious routing is used, and ensure deadlock freedom for arbitrary minimal routes when two or more virtual channels are available. We then experimentally explore the performance trade-offs of static and <b>dynamic</b> <b>virtual</b> channel <b>allocation</b> for various oblivious routing methods, including DOR, ROMM, Valiant and a novel bandwidth-sensitive oblivious routing scheme (BSORM). Through judicious separation of flows, static allocation schemes often exceed the performance of <b>dynamic</b> <b>allocation</b> schemes...|$|R
40|$|Abstract. Network {{virtualisation}} is {{a promising}} technique {{for a better}} future Internet by allowing for network resource sharing. However, re-source sharing requires that virtual nodes and links be embedded onto substrate nodes and links (virtual network embedding), and thereafter the allocated resources dynamically managed throughout the lifetime of the <b>virtual</b> network (<b>dynamic</b> resource <b>allocation).</b> Since the con-strained virtual network embedding problem is NP–Hard, many existing approaches are not only static, but also propose heuristics by making simplifying assumptions, most of which would not apply in practical en-vironments. This PhD research proposes improvements to both virtual network embedding and <b>dynamic</b> resource <b>allocation.</b> The objective is to achieve an efficient utilisation of physical network resources. To this end, we propose a path generation-based approach for a one-shot, unsplittable flow virtual network embedding, and a reinforcement learning-based dy-namic allocation of substrate network resources...|$|R
40|$|C++ based {{verification}} methodologies are now {{emerging as}} the preferred method for SOC design. However most of the verification involving the C++ models are simulation based. The challenge of using C++ for sequential equivalence checking comes from two aspects (1) Language constructs such as pointers, polymorphism, <b>virtual</b> methods, <b>dynamic</b> memory <b>allocation,</b> <b>dynamic</b> loop bounds, floating points pose difficulty in creating a model suitable for equivalence checking (2) The memory and runtime required for creating models suitable for equivalence checking from practical C++ designs is huge. In this paper we describe techniques for constructing verification models from C++ designs containing a very rich set of language constructs. The flow is built {{keeping in mind that}} formal methods are inherently capacity constrained but need to be applied to large C++ designs to have practical value...|$|R
40|$|Cataloged from PDF {{version of}} article. Thesis (M. S.) : Bilkent University, Department of Computer Engineering, İhsan Doğramacı Bilkent University, 2018. Includes bibliographical {{references}} (leaves 51 - 54). With tremendous increase in Internet capacity and services, {{the demand for}} cloud computing has also grown enormously. This enormous demand for cloud based data storage and processing forces cloud providers to optimize their platforms and facilities. Reducing energy consumption while maintaining service level agreements (SLAs) {{is one of the}} most important issues in this optimization effort. <b>Dynamic</b> <b>virtual</b> machine <b>allocation</b> and migration is one of the techniques to achieve this goal. This technique requires constant measurement and prediction of usage of machine resources to trigger migrations at right times. In this thesis, we present a <b>dynamic</b> <b>virtual</b> machine <b>allocation</b> and migration method utilizing CPU usage prediction to improve energy efficiency while maintaining agreed quality of service levels in cloud datacenters. Our proposed method, called LRAPS, tries to estimate short-term CPU utilization of hosts based on their utilization history. This estimation is then used to detect overloaded and underloaded hosts as part of live migration process. If a host is overloaded, some of the VMs running on that host are migrated to other hosts to avoid SLA violations; if a host is underloaded, all of the VMs in that host are tried to be migrated to other machines so that the host can be powered off. We did extensive simulation experiments using CloudSim to evaluate the efficiency and effectiveness of our proposed method. Our simulation experiments show that our method is feasible to apply and can signi cantly reduce power consumption and SLA violations in cloud systems. by Gökalp Ural. M. S...|$|R
40|$|To {{address the}} {{increasing}} demand for reliability in on-chip networks, we proposed a novel Reliability Aware Virtual channel (RAVC) NoC router micro-architecture that enables both <b>dynamic</b> <b>virtual</b> channel <b>allocations</b> and the rational sharing among the buffers of different input channels. In particular, {{in the case of}} failure in routers, the virtual channels of routers surrounding the faulty routers can be totally recaptured and reassigned to other input ports. Moreover, our proposed RAVC router isolates the faulty router from occupying network bandwidth. Experimental result shows that proposed micro-architecture provides 7. 1 % and 3. 1 % average latency decrease under uniform and transpose traffic pattern. Considering the existence of failures in routers of on-chip network, RAVC provides 28 % and 16 % decrease in the average packet latency under the uniform and transpose traffic pattern respectively...|$|R
40|$|In-order packet delivery, a {{critical}} abstraction for many higher-level protocols, can severely limit the performance potential in low-latency networks (common, for example, in network-on-chip designs with many cores). While basic variants of dimension-order routing guarantee in-order delivery, improving performance by adding multiple dynamically allocated virtual channels or using other routing schemes compromises this guarantee. Although {{this can be}} addressed by reordering out-of-order packets at the destination core, such schemes incur significant overheads, and, in the worst case, raise the specter of deadlock or require expensive retransmission. We present Exclusive Dynamic VCA, an oblivious virtual channel allocation scheme which combines the performance advantages of <b>dynamic</b> <b>virtual</b> <b>allocation</b> with in-network, deadlock-free in-order delivery. At the same time, our scheme reduces head-of-line blocking, often significantly improving throughput compared to equivalent baseline (out-of-order) dimension-order routing when multiple virtual channels are used, and so may be desirable even when in-order delivery is not required. Implementation requires only minor, inexpensive changes to traditional oblivious dimension-order router architectures, more than offset by the removal of packet reorder buffers and logic. 1...|$|R
40|$|Abstract — In this paper, a forecasting-based <b>dynamic</b> <b>virtual</b> channel <b>allocation</b> {{technique}} {{for reducing the}} power consumption of network on chips is introduced. Based on the network traffic as well as past link and total virtual channel utilizations, the technique dynamically forecasts the number of virtual channels that should be active. It {{is based on an}} exponential smoothing forecasting method that filters out short-term traffic fluctuations. In this technique, for low (high) traffic loads, a small (large) number of VCs are allocated to the corresponding input channel. To assess the efficacy of the proposed method, the network on chip has been simulated using uniform, transpose, hotspot, NED, and realistic GSM voice codec traffic profiles. Simulation results show that up to a 35 % reduction in the buffer power consumption and up to 20 % savings in the overall router power consumption may be achieved. The area and power dissipation overheads of the technique are negligible...|$|R
40|$|In this paper, {{we present}} a dynamic power {{management}} technique for optimizing the use of virtual channels in network on chips. The technique which is called <b>dynamic</b> <b>virtual</b> channels <b>allocation</b> (DVCA) makes use of the traffic conditions and past buffer utilization to dynamically forecast the number of virtual channels that should be active. In this technique, for low (high) traffic loads, a small (large) number of VCs are allocated to the corresponding input channel. This provides us {{with the ability to}} reduce the power consumption of the router while maintaining the data communication rate. To assess the efficacy of the proposed method, the network on chip has been simulated using several traffic profiles. The simulation results show that up to 35 % reduction in the buffer power consumption and up to 20 % savings in the overall router power consumption may be achieved. Finally, the area and power overheads of the technique are negligible. 1...|$|R
40|$|Most routers in on-chip {{interconnection}} networks (OCINs) have multiple virtual channels (VCs) {{to mitigate the}} effects of head-of-line blocking. Multiple VCs necessitate VC allocation schemes since packets or flows must compete for channels when there are more flows than virtual channels at a link. Conventional <b>dynamic</b> VC <b>allocation,</b> however, raises two critical issues. First, it still suffers from {{a fair amount of}} head-of-line blocking since all flows can be assigned to any VC within a link. Moreover, <b>dynamic</b> VC <b>allocation</b> compromises the guarantee of in-order delivery even when used with basic variants of dimension-ordered routing, requiring large reorder buffers at the destination core or, alternatively, expensive retransmission logic. In this thesis, we present two virtual channel allocation schemes to address these problems: Static Virtual Channel <b>Allocation</b> and Exclusive <b>Dynamic</b> <b>Virtual</b> Channel <b>Allocation</b> (EDVCA). Static VC allocation assigns channels to flows by precomputation when oblivious routing is used, and ensures deadlock freedom for arbitrary minimal routes when two or more VCs are available. EDVCA, on the other hand, is done at runtime, not requiring knowledge of traffic patterns or routes in advance. We demonstrate that both static VCA and EDVCA guarantee in-order packet delivery under single path routing, and furthermore, that they both outperform <b>dynamic</b> VC <b>allocation</b> (out-of-order) by effectively reducing head-of-line blocking. We also introduce a novel bandwidth-sensitive oblivious routing scheme (BSORM), which is deadlock-free through appropriate static VC allocation. Implementation for these schemes requires only minor, inexpensive changes to traditional oblivious dimension-ordered router architectures, more than offset by the removal of packet reorder buffers and logic. by Keun Sup Shim. Thesis (S. M.) [...] Massachusetts Institute of Technology, Dept. of Electrical Engineering and Computer Science, 2010. Includes bibliographical references (p. 63 - 67) ...|$|R
40|$|An {{integrated}} system approach to <b>dynamic</b> resource <b>allocation</b> is proposed. Some {{of the problems}} in <b>dynamic</b> resource <b>allocation</b> and the relationship of these problems to system structures are examined. A general <b>dynamic</b> resource <b>allocation</b> scheme is presented. A hierarchial system architecture which dynamically maps between processor structure and programs at multiple levels of instantiations is described. Simulation experiments were conducted to study <b>dynamic</b> resource <b>allocation</b> on the proposed system. Preliminary evaluation based on simple <b>dynamic</b> resource <b>allocation</b> algorithms indicates that with the proposed system approach, the complexity of dynamic resource management could be significantly reduced while achieving reasonable effective <b>dynamic</b> resource <b>allocation...</b>|$|R
5000|$|ISO/IEC TR 24731-2:2010, on library {{extensions}} {{to support}} <b>dynamic</b> <b>allocation</b> functions ...|$|R
5000|$|... vmps {{helps with}} the <b>dynamic</b> <b>allocation</b> of vlan across the network.|$|R
40|$|This paper {{makes two}} contributions. First, we {{introduce}} {{a model for}} evaluating the performance of data allocation and replication algorithms in distributed databases. The model is comprehensive {{in the sense that}} it accounts for I/O cost, for communication cost, and for limits on the minimumnumber of copies of the object (to ensure availability). The second contribution of this paper is the introduction and analysis of an algorithm for automatic <b>dynamic</b> <b>allocation</b> of replicas to processors. Using the new model, we compare the performance of the traditional read-one-write-all static allocation algorithm, to the performance of the <b>dynamic</b> <b>allocation</b> algorithm. As a result, we obtain the relationship between the communication cost and I/O cost for which static allocation is superior to <b>dynamic</b> <b>allocation,</b> and the relationships for which <b>dynamic</b> <b>allocation</b> is superior. 1. Introduction 1. 1 Motivation We are presently moving towards a distributed, wholly interconnected information environm [...] ...|$|R
5000|$|Memory <b>allocation</b> {{services}} for <b>dynamic</b> <b>allocation</b> and freeing of fixed-size or variable-size memory blocks.|$|R
40|$|In many {{application}} environments {{there is}} a need to able to allocate resources dynamically. The occam programming language has no concept of such <b>dynamic</b> <b>allocation.</b> This paper shows how <b>dynamic</b> <b>allocation</b> can be incorporated into occam without sacrificing the benefits which are obtained using static allocation strategies. This capability has been achieved by a simple extension to occam 3 to include a TASK mechanism which is defined using existing occam 3 features. The main component of the dynamic mechanism is a library which manages the allocation and de-allocation of tasks. The paper includes an example showing how the <b>dynamic</b> <b>allocation</b> mechanism is employed. 1. Introduction The occam programming language is inherently a static language that does not permit the <b>dynamic</b> <b>allocation</b> of data structures and/or processes. From the philosophical point, where real-time systems are concerned, this is a justifiable position. However, from other viewpoints this position is less tenable. The a [...] ...|$|R
50|$|Linking {{can be done}} in {{two ways}} using <b>dynamic</b> <b>allocation</b> and using array index linking.|$|R
3000|$|... reaches an {{acceptable}} value, after {{finding a new}} <b>dynamic</b> <b>allocation</b> of the vector E which satisfies the new constraint.|$|R
50|$|In 1992, Katehakis {{was awarded}} the Wolfowitz Prize for “introducing <b>dynamic</b> <b>allocation</b> in survey {{sampling}} for the first time”.|$|R
5000|$|Enables both memory {{profiling}} {{to assess}} memory usage and <b>dynamic</b> <b>allocation</b> leaks and CPU profiling to assess thread conflicts.|$|R
5000|$|<b>Dynamic</b> <b>allocation</b> in survey sampling, with Z. Govindarajulu in [...] "American Journal of Mathematical and Management Sciences", Vol. 11 (3), 1991.|$|R
40|$|<b>Dynamic</b> storage <b>allocation</b> is an {{important}} part of a large class of computer programs written in C and C��. High-performance algorithms for <b>dynamic</b> storage <b>allocation</b> have been, and will continue to be, of considerable interest. This paper presents detailed measurements of the cost of <b>dynamic</b> storage <b>allocation</b> in 11 diverse C and C� � programs using five very different <b>dynamic</b> storage <b>allocation</b> implementations, including a conservative garbage collection algorithm. Four of the allocator implementations measured are publicly available on the Internet. A number of the programs used in these measurements are also available on the Internet to facilitate further research in <b>dynamic</b> storage <b>allocation.</b> Finally, the data presented in this paper is an abbreviated version of more extensive statistics that are also publicly available on the Internet. key words: Garbage collection <b>Dynamic</b> storage <b>allocation</b> Performance evaluation Conservative collection Dynamic memory managemen...|$|R
40|$|<b>Dynamic</b> <b>allocation</b> of {{participants}} to treatments {{in a clinical}} trial has been an alternative to randomization for nearly 35 years. Design-adaptive allocation is a particularly flexible kind of <b>dynamic</b> <b>allocation.</b> Every investigation of <b>dynamic</b> <b>allocation</b> methods has shown that they improve balance of prognostic factors across treatment groups, {{but there have been}} lingering doubts about their influence on the validity of statistical inferences. Here we report the results of a simulation study focused on this and similar issues. Overall, it is found that there are no statistical reasons, in the situations studied, to prefer randomization to design-adaptive allocation. Specifically, {{there is no evidence of}} bias, the number {{of participants}} wasted by randomization in small studies is not trivial, and when the aim is to place bounds on the prediction of population benefits, randomization is quite substantially less efficient than design-adaptive allocation. A new, adjusted permutation estimate of the standard deviation of the regression estimator under design-adaptive allocation is shown to be an unbiased estimate of the true sampling standard deviation, resolving a long-standing problem with <b>dynamic</b> <b>allocations.</b> These results are shown in situations with varying numbers of balancing factors, different treatment and covariate effects, different covariate distributions, and in the presence of a small number of outliers. ...|$|R
40|$|Internet {{data centers}} host {{multiple}} Web applications on shared hardware resources. These data centers are typically provisioned {{to meet the}} expected peak demands of the hosted applications based on normal time-of-day effects. Such an over-provisioning approach is not robust to flash crowd scenarios, where the load increase of some hosted applications {{is much higher than}} their expected peak loads. In such scenarios, data centers can utilize their resources better by employing <b>dynamic</b> resource <b>allocation.</b> In this paper, we present a prototype data center implementation that we use to study the effectiveness of <b>dynamic</b> resource <b>allocation</b> for handling flash crowds with different characteristics. This prototype implements a multi-tiered server architecture along with mechanisms for monitoring, load detection, load balancing and <b>dynamic</b> <b>allocation.</b> Our experiments with this prototype show that a carefully designed <b>dynamic</b> <b>allocation</b> scheme can be effective for handling flash crowds. We show that in order to handle very sharp growth in loads, a <b>dynamic</b> <b>allocation</b> scheme must be either extremely responsive or employ low overhead mechanisms such as using hot spare servers. On the other hand, gradually increasing flash crowds can be handled equally well with larger overheads and slower reaction times. We also show that even in the presence of large allocation overhead, it is possible to achieve the same application performance by either allocating multiple servers simultaneously or allocating a few servers often. Using our results, we conclude that even without large-scale over-provisioning, it is possible to effectively handle flash crowd conditions using a <b>dynamic</b> <b>allocation</b> scheme that responds quickly to workload changes, and that can mask large allocation ove [...] ...|$|R
40|$|Abstract. Many {{distributed}} protocols arising in on-line {{load balancing}} and <b>dynamic</b> resource <b>allocation</b> can be modeled by <b>dynamic</b> <b>allocation</b> processes {{related to the}} “balls into bin ” problems. Traditionally {{the main focus of}} the research on <b>dynamic</b> <b>allocation</b> processes is on verifying whether a given process is stable, and, if so, on analyzing its behavior in the limit (i. e., after sufficiently many steps). Once we know that the process is stable and we know its behavior in the limit, it is natural to analyze its recovery time, which is the time needed by the process to recover from any arbitrarily bad situation and to arrive very closely to a stable (i. e., a typical) state. This investigation is important to provide assurance that even if at some stage the process has reached a highly undesirable state, we can predict with high confidence its behavior after the estimated recovery time. In this paper we present a general framework to study the recovery time of discrete-time <b>dynamic</b> <b>allocation</b> processes. We model allocation processes by suitably chosen ergodic Markov chains. For a given Markov chain we apply path coupling arguments to bound its convergence rate to the stationary distribution, whic...|$|R
40|$|In this contribution, a {{cognitive}} radio scenario is considered, where a secondary user (SU) cooperative network {{is allowed to}} transmit concurrently with a primary user (PU), provided that the resulting average interference power at the PU receiver is kept below a certain threshold. The SU network uses a selection amplify-and-forward protocol. An optimum and a lowcomplexity suboptimum <b>dynamic</b> energy <b>allocation</b> strategy are proposed, that minimize the link outage probability between the source node and the destination node of the SU network under an average interference power constraint. Because the interference channels from the SU nodes to the PU are affected by fast fading, the realistic assumption is made that each SU node {{has access to the}} root mean-square value (rather than the instantaneous value) of the gain of its own interference channel to the PU. We show that both <b>dynamic</b> <b>allocation</b> strategies considerably outperform the optimum static allocation strategy, and that the low-complexity <b>dynamic</b> <b>allocation</b> performs nearly as well as the optimum <b>dynamic</b> <b>allocation.</b> Finally, we confirm that our dynamic algorithms show a significant performance improvement as compared to the optimal dynamic algorithm under a peak interference power constraint...|$|R
30|$|Because {{in several}} cases the average {{utilization}} is very low the <b>dynamic</b> <b>allocation</b> of the buffer levels can reduce costs keeping {{the same level of}} throughput of the production line.|$|R
50|$|Dynamic {{video memory}} {{technology}} (DVMT) allows <b>dynamic</b> <b>allocation</b> of system memory {{for use as}} video memory to ensure the most efficient use of available resources for maximum 2D/3D graphics performance.|$|R
5000|$|Some {{platforms}} provide library calls {{which allow}} run-time <b>dynamic</b> <b>allocation</b> from the C stack {{rather than the}} heap (e.g. [...] ). This memory is automatically freed when the calling function ends.|$|R
50|$|Custom {{programs}} can access VSAM datasets through Data Definition (DD) statements in Job Control Language (JCL), via <b>dynamic</b> <b>allocation</b> or in online regions {{such as in}} Customer Information Control System (CICS).|$|R
5000|$|Fortran {{provides}} <b>dynamic</b> <b>allocation</b> of storage; {{it relies}} on a heap storage mechanism (and replaces another use of [...] ). An example for establishing a work array for a whole program is ...|$|R
5000|$|C <b>dynamic</b> memory <b>allocation</b> {{refers to}} {{performing}} manual memory management for <b>dynamic</b> memory <b>allocation</b> in the C programming language via {{a group of}} functions in the C standard library, namely , , [...] and [...]|$|R
25|$|Seizing {{an entry}} from a pre-allocated array is faster than using <b>dynamic</b> memory <b>allocation</b> for each node, since <b>dynamic</b> memory <b>allocation</b> {{typically}} requires {{a search for}} a free memory block of the desired size.|$|R
50|$|The tool is {{tailored}} towards safety-critical embedded code: source {{programs are}} assumed not to contain <b>dynamic</b> <b>allocation</b> (malloc); specific analysis techniques {{are used for}} common control theory constructs (filters, rate limiters...) and floating-point numbers.|$|R
