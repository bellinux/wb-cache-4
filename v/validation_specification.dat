6|205|Public
40|$|Abstract—We {{describe}} a formalisation of {{a subset of}} Executable UML (xUML) in the process algebraic specification language mCRL 2. This formalisation includes class diagrams with class generalisations and state machines with send and change events. The choice of these xUML constructs is dictated by their use in the modelling of railway interlocking systems. The long term goal is to verify safety properties of interlockings modelled in xUML using the mCRL 2 and LTSmin toolsets. Initial verification of an interlocking toy example has demonstrated that the safety properties of model instances depend crucially on the run-to-completion assumptions made. Keywords-Software verification and <b>validation,</b> <b>Specification</b> languages I...|$|E
40|$|We {{describe}} the functional description for the OPTIMAL Arrival Management Tools. As input to this document the procedure {{definitions and requirements}} from OPTIMAL WP 2, the operational concept from OPTIMAL WP 1, and the preliminary specifications for ground functions from OPTIMAL WP 5. 1 are used. The functional description includes {{the construction of the}} logical model, which is an abstract description of what the Arrival Management Tools must do. Furthermore, a detailed specification of the tool requirements is given, which mainly consists of functional requirements. The output of the functional description document will be an input to the OPTIMAL WP 6. 1 <b>Validation</b> <b>Specification,</b> and to the OPTIMAL WP 5. 4 Development and Verification Tasks. ...|$|E
40|$|This paper {{describes}} the formalization and {{validation of the}} Radio Link Protocol (RLP 1) {{and the effect of}} the validation on its standardization. RLP 1, which was recently standardized by the Telecommunications Industry Association (TIA) working group, TR 45. 3. 2 (TDMA Cellular Systems Data Services Working Group), appears to be the first protocol that was standardized using a formal language, namely SDL, and validated before publication. The validation strategy used for RLP 1 is discussed, along with some observations on the requirements of industrial strength validation tools to aid the standardization process. This paper also discusses the use of SDL as a language for specifying standards, noting some of its advantages, disadvantages, and shortcomings. It then argues that a suite of accepted formal notations is necessary to formalize the many different parts of a protocol standard. Keywords: protocol <b>validation,</b> <b>specification,</b> formal methods, SDL, Promela/SPIN, radio link protocol, stan [...] ...|$|E
5000|$|Validator: A {{syntactic}} and semantic validator provides on-the-fly <b>validation</b> of <b>specifications</b> entered (or imported) by {{the user}} with respect to JSIDL syntax and semantics is integrated into the GUI.|$|R
40|$|Rapport de contrat. The {{european}} standard EN 50170 for industrial Fieldbus recognises three different communication systems. A common open platform will {{significantly reduce the}} costs for development, integration and use of automation systems. The main objectives of NOAH are : the specification of Harmonized field Device application and communication interface The <b>validation</b> of <b>specifications</b> through a pilot implementation...|$|R
40|$|Although formal {{specification}} techniques are very useful in software development, {{the acquisition of}} {{formal specification}}s is a difficult task. This paper presents the formal specification language LFC, {{which is designed to}} facilitate the acquisition and <b>validation</b> of formal <b>specifications.</b> LFC uses context-free languages for syntactic aspect and relies on a new kind of recursive functions, i. e. recursive functions on context-free languages, for semantic aspect of <b>specifications.</b> Construction and <b>validation</b> of LFC <b>specifications</b> are machine-aided. The basic ideas behind LFC, the main aspects of LFC, and the use of LFC and illustrative examples are described...|$|R
40|$|International audienceOne concern when {{building}} application by assembling {{software components}} is to validate component interactions, e. g., {{to ensure that}} components exchange compatible messages. This validation requires examining data values that are only known at runtime. In current practice, this validation is often performed manually at the code level, i. e., architects need to insert validation code into the application code. This situation makes the interaction validation costly. Moreover, few platforms provide sufficient tools for supporting this validation. As a solution, we propose CALICO, a model-based framework for runtime interaction validation. CALICO enables architects to specify validation concerns in the application model. It automatically propagates this specification to application code so that component interactions in the application can be checked at runtime. Based on the detected errors, CALICO allows architects to revisit the design to fix the detected errors, and then to repeat the runtime validation in an iterative process. This paper focuses on {{the integration of tools}} in CALICO, for linking between <b>validation</b> <b>specification</b> at design time and validation realization at runtime. Moreover, we show how to extend CALICO to support multiple platforms with small development effort...|$|E
40|$|This paper {{presents}} {{an overview of}} the Possum specification animation system and its integration into the Cogito Methodology and Toolset. Possum allows interpretation (or animation) of specifications written in Sum, the specification language of Cogito, or specifications written in Z. The functionality of Possum is illustrated by some simple examples. The ways in which Possum may be used to aid in the construction and analysis of requirements specifications are described. We distinguish two potential uses for Possum and illustrate each of these with an example. The first is the use of Possum for specification verification, where the analysis of properties of specifications by the specification designer is emphasised. The second is the use for <b>specification</b> <b>validation,</b> where the <b>specification</b> is ch [...] ...|$|R
40|$|Abstract: This paper {{proposes a}} {{development}} process for interactive systems based both on verification and validation methods. Our approach is formal and use {{at first the}} B Method. We show in this paper how formal B specifications {{can be derived from}} informal requirements in the informal notation UAN. Then, these B specifications are validated using the data oriented specification language EXPRESS. Several scenarios can be tested against these EXPRESS specifications. Key words: B Method, EXPRESS, UAN, interaction properties, verification, <b>validation,</b> formal <b>specification</b> of interactive systems...|$|R
40|$|This paper {{argues that}} a user's manual makes an excellent, if not the best, {{software}} requirements specification. It discusses several lessons learned from experiences writing user's manuals as requirements specifications. Keywords: ambiguity, requirements analysis, requirements elicitation, requirements <b>validation,</b> requirements, scenarios, <b>specification,</b> test cases; use cases, user's manual...|$|R
40|$|This Viewpoint {{describes}} {{some lessons}} about requirements engineering I learned while being a customer {{in a house}} remodeling. The main lesson {{is the importance of}} the customer insisting on following a full requirements engineering process, including goal identification, requirements elicitation, analysis, and <b>specification,</b> and <b>validation</b> of the <b>specification...</b>|$|R
40|$|Abstraction of {{specifications}} is {{a method}} of making verification and <b>validation</b> of <b>specifications</b> and implementations more tractable. This paper considers the special case where the abstraction is defined by eliding input or output variables in state based specifications - in particular, conditions for such abstractions to be sound and complete {{with respect to a}} refinement semantics. Output abstractions turn out to be unconditionally sound, and combinations of output abstractions are complete in certain circumstances. Concrete results are developed in the state-based notation Z, and then considered in the underlying semantic framework and for similar languages...|$|R
40|$|This paper {{described}} the first {{end to end}} application of a novel light weight formal <b>specification,</b> <b>validation,</b> and verification technique. The technique is novel is two aspects. First, it uses an intuitive, familiar, and diagrammatic notation for formal specification, a notation that being Turing equivalent and supports the capture of real-life requirements. Second, the technique includes a computer aided approach for validating the correctness of requirements early in the development process, allowing sufficient time for the correction of ambiguous and underspecified requirements. In the verification phase the technique is based on off-line verification using log-files. This approach scales well and is applicable to almost every mission critical system, including real-time systems. The paper describes the application of this technique towards the <b>specification,</b> <b>validation,</b> and verification of the Pad Abort subsystem of NASA's Orion mission...|$|R
40|$|This paper describes, in outline, our {{experiences}} in structuring and presenting formal requirements specifications, {{and in particular}} the insights gained from an action research study undertaken within the Western Australian state government. The overall aim of the project was to evaluate and enhance an information systems development method, known as FOOM (Formal Object Oriented Method). FOOM was synthesised from research into: • the object oriented approach • mathematically formal specific ation languages • socio-organisational contextual analysis. The paper focuses on a study of the communication between the specifier and the client— principally on the problems associated with specification validation—and the effect this had on the structure of a FOOM requirements specification document. The result of the study described was a specification structure which allows precise communication both between developers/designers and the less mathematically sophisticated users of the system. While the focus of the research was <b>validation</b> of <b>specifications</b> written in the formal specification language Object-Z [10], we argue that the results of our analysis are of importance in the elicitation, refinement and <b>validation</b> of requirements <b>specifications</b> whenever a formal modelling approach is to be adopted. ...|$|R
40|$|What is an algorithm? The {{interest}} in this foundational problem is not only theoretical; applications include <b>specification,</b> <b>validation</b> and verification of software and hardware systems. We describe the quest to understand and define the notion of algorithm. We start with the Church-Turing thesis and contrast Church's and Turing's approaches, and we finish with some recent investigations...|$|R
40|$|When formal {{modelling}} is done we must validate {{both the}} model and the assumptions. Formal techniques tend {{to concentrate on the}} former. We examine how fault injection (specification mutation) and model checking can help address the latter, in particular, the effects of failure. We find that, in contrast with software testing, "equivalent mutants" are valuable for <b>specification</b> <b>validation...</b>|$|R
50|$|B. MANUFACTURE1. Manufacture(s)2. Description of Manufacturing Process and Process Controla) Flow Chart of Manufacturing Processb) Synthetic Route of Manufacturing Processc) Manufacturing Method.3. Control of Materiala) List of Materials.b) Specification {{and routine}} {{tests of the}} Raw Materials.4. Control of Critical Steps and Intermediates.a) Critical Steps.b) Process <b>Validation</b> and/or evaluation.5. <b>Specifications</b> and Test method for the Intermediates.6. Manufacturing Process Development.|$|R
40|$|The {{quality of}} {{conceptual}} models heavily {{depends on the}} successfull stakeholder involvement in the requirements engineering process. In this way, the <b>validation</b> of system <b>specifications</b> {{is a very important}} task when developing software because it allows developers to be sure they are building the right product. Scenarios are widely used in industry to support requirements elicitation and validation...|$|R
50|$|Requirements {{engineering}} and software architecture {{can be seen}} as complementary approaches: while software architecture targets the 'solution space' or the 'how', requirements engineering addresses the 'problem space' or the 'what'. Requirements engineering entails the elicitation, negotiation, <b>specification,</b> <b>validation,</b> documentation and management of requirements. Both requirements {{engineering and}} software architecture revolve around stakeholder concerns, needs and wishes.|$|R
40|$|One of the {{important}} issues {{in the application of}} formal notations in software development is the <b>validation</b> of formal <b>specifications</b> against the informal customer requirements. Animation has been proposed as one of the techniques for achieving this goal. This paper describes an approach to animating objectoriented model-based formal specifications as well as a research prototype of an animation tool, the Z ++ Animator, for animating specifications written in the object-oriented specification language Z ++. Implemented in Prolog, the tool handles inheritance, object identity, invariant and precondition checks, both the logical and the sequential method composition, and nondeterminism. It offers a solution to the mutable state problem. An approach to animating concurrent and real-time behavior is also presented. The merits of applying the Z ++ Animator for the <b>validation</b> of formal <b>specifications</b> are illustrated using a case study. Animation is shown to be helpful in gaining the i [...] ...|$|R
40|$|Benchmarking methods, and in {{particular}} Data Envelopment Analysis (DEA), have be-come well-established and informative tools for economic regulation. DEA is now rou-tinely used by European regulators to set reasonable revenue caps for energy transmis-sion and distribution system operators. The application of benchmarking in regulation, however, requires specific steps in terms of data <b>validation,</b> model <b>specification</b> and outlier detection that are not systematically documented in open publications, leading to discussions about regulatory stability and economic feasibility of these techniques. In this paper, we review the modern foundations for frontier-based regulation and we discuss its actual use in several jurisdictions. Keywords: DEA, agency theory, regulation, energy networks...|$|R
40|$|This paper {{outlines}} a specification {{system for}} process control software, named ESPRESO, which was {{developed at the}} Nuclear Research Center, Karlsruhe, West Germany. ESPRESO is based on some new ideas, which are combined with elements taken from other systems. ESPRESO consists {{of a set of}} concepts, a specification language, a tool for the management, evaluation and <b>validation</b> of <b>specifications,</b> and the method how to use the system. Language, tool, and method are carefully adapted to the concepts. The primary aim was to demonstrate some features of a specification system which are currently not available, rather than to provide a new tool for the software market...|$|R
40|$|Abstract—This paper {{addresses}} {{the design of}} reactive real-time embedded systems. Such systems are often heterogeneous in implementation technologies and design styles, for example by combining hardware ASICs with embedded software. The concurrent design process for such embedded systems involves solving the <b>specification,</b> <b>validation,</b> and synthesis problems. We review the variety of approaches to these problems that have been taken. I...|$|R
40|$|This report {{presents}} {{the process and}} results of a formal computer-aided <b>Specification,</b> <b>Validation</b> and Verification (SV&V) of two mission and safety critical projects: the Brazilian Satellite Launcher flight software, and the Department of Defense's Multifunctional Information Distribution System (MIDS) controller. The <b>Specification,</b> <b>Validation,</b> and Verification (SV&V) process begins with a system requirement analysis and Natural Language (NL) specification. UML statechart-formal specification assertions are then created using the StateRover SV&V specification environment; these assertions formally capture the NL requirements. The assertions are validated against the NL and cognitive requirements using JUnit-based testing within the StateRover SV&V environment. Finally, Runtime Verification (RV) is performed on the target system under test (SUT). The RV phase is based on log files created by automatically instrumenting source code files, building and executing them on the VxWorks-based target thereby creating log files, importing resulting log files into the StateRover SV&V environment and executing them as JUnit tests against the assertions. Graduate School of Operational and Information Science...|$|R
40|$|TLA (the Temporal Logic of Actions) is {{a linear}} {{temporal}} logic for specifying and reasoning about reactive systems. The {{purpose of this}} paper is to develop an animator and a model checker, both based on a subset of TLA, and illustrates how we can combine these tools to validate TLA <b>specifications.</b> Introduction <b>Validation</b> of formal <b>specifications</b> is the process of comparing the formal model of requirements (called formal specification) against the customer needs. It fulfills two rles: the customer must be convinced that all requirements are fully recorded. On the other hand, the designer must be able to use the requirements to produce a structure around which formal reasoning and an implementation can be developed. In formal methods, validating formal specifications is achieved by a number of techniques including mainly proof and animation (execution). Therefore, the machine assistance in the <b>validation</b> of formal <b>specifications</b> traditionally comes with two forms: animation 1 a [...] ...|$|R
40|$|Arguably {{the most}} {{important}} task in creation of software is user requirement specification. Accurate requirement specification allows avoidance of errors in late stages of software development. This is extremely important in critical systems, where even vague error can cause great financial losses or even human victims. One of {{the methods used for}} precise user requirement specification is use of formal specifications. Formal specification is a mathematical method for describing of software or hardware, which might be suitable for system realization. Nevertheless, the construction of formal specifications does not guarantee the correctness of specification. For this reason formal <b>specification</b> <b>validation</b> is necessary. In this paper methods of formal <b>specification</b> <b>validation</b> are discussed. Two most popular methods of formal <b>specification</b> <b>validation</b> are reachable state graph analysis and invariant checking. Reachable state graph analysis consists of graph generation and graph analysis. Graphs can be analyzed for dead-ends, closed loops, state reach ability checking, coordinate restriction checking or invariant checking. Traditional reachable graph generation algorithm uses unanalyzed states queue to produce reachable state graph. Each step single state is analyzed and depending on results new vertex or edge is added to state graph. An improvement to the algorithm to consider is usage of parallel programming to process multiple states simultaneously. This allows increasing the speed of algorithm execution, since multiple states will be processed in time just one state was processed. Experiments with single channel processing systems showed, that usage of parallel reachable state generation algorithm for solution of this problem increased analysis performance by up to 35 %, depending on number of states...|$|R
40|$|Abstract- This {{paper is}} {{concerned}} with the correct <b>specification</b> and <b>validation</b> of temporal behaviors in a Service-Oriented Architecture based system-of-systems. It presents a new formalism, called Message Sequence Chart Assertions (MSC-Assertions), for the specification of global system behaviors, and describes a <b>specification</b> <b>validation</b> technique using scenario simulation based on the JUnit Test Framework. We also describe the armorplating of system-of-systems using runtime execution monitoring of MSC-Assertions...|$|R
40|$|In this paper, {{we present}} the formal {{transformation}} of Timed Input/Output Automata into simulation models, {{expressed in the}} DEVS formalism. This transformation takes place in an approach of a <b>validation</b> of high-level <b>specifications</b> by simulation. The validation {{is based on the}} simulation of a coupled model built with the system to be controlled and the control specifications. An example of this approach is given in the paper. ...|$|R
40|$|In {{the high}} level {{synthesis}} not only {{the implementation of the}} specified algorithm but also the implementation of the correct interface behaviour is essential for the proper work. This paper shows a methodology to specify the interface part of a VHDL process considering different abstraction levels. This specification is synthesized in accordance with the simulation semantics allowing the <b>validation</b> of the <b>specification</b> and the synthesis result...|$|R
40|$|This {{paper is}} {{concerned}} with the correct <b>specification</b> and <b>validation</b> of temporal behaviors in a Service-Oriented Architecture based system-of-systems. It presents a new formalism, called Message Sequence Chart Assertions (MSC-Assertions), for the specification of global system behaviors, and describes a <b>specification</b> <b>validation</b> technique using scenario simulation based on the JUnit Test Framework. We also describe the armorplating of system-of-systems using runtime execution monitoring of MSC-Assertions...|$|R
50|$|The {{multi-domain}} simulation {{environment may}} be used in early development stages for <b>validation</b> of executable <b>specifications</b> at application/mission level and perform architectural optimization at overall system level. MLDesigner can be used to design missions, systems, integrated circuits, reconfigurable electronics and miscellaneous other products. It can be applied for modeling, simulation and optimization of automotive, avionics and space systems, satellite communication systems and organizational, production, and development processes.|$|R
40|$|International audienceThe SACRES {{project is}} dealing with the {{development}} of new design methodologies and associated tools for safety critical embedded systems. Emphasis is put on formal techniques for modular verification of the specifications, distributed code generation, and generated code <b>validation</b> against <b>specifications.</b> This is allowed by using a single formal model which is that of the DC+ format, which provides a common semantic framework for all tools as well as end user specification formalisms. Modular and distributed code generation is the main subject of this paper. Distributed code generation aims at reducing the dependency of the design with respect to the target architecture. Modularity helps reuse of existing designs, and makes it possible to address much larger systems...|$|R
40|$|ISBN: 1581139470 TheoSim is a {{symbolic}} verification tool that fills {{the gap between}} the simulation of test cases, and the use of theorem provers, for the <b>validation</b> of initial <b>specifications,</b> and the exploration of the very first design steps of digital integrated systems. The principles of Theosim are presented, followed by its application to the verification of the first design step of a state-of-the-art network on chip architecture...|$|R
40|$|The main phases during {{requirements}} engineering include the elicitation, <b>specification,</b> <b>validation,</b> {{and management of}} requirements {{in order to understand}} what the system must do. In the age of distributed and collaborative work, suitable tools and concepts are needed to support requirements activities in this context. Based on requirements derived from basic practices of the ReqMan framework, we will introduce first solution concepts for a wiki-based requirements management tool. ...|$|R
40|$|Gaining and {{simulation}} mean {{different things}} to different people. Currently there exist separate schools of individuals working on interrelated but basically different areas. Each has its own special goals and terminology. Yet there is a sufficient overlap among them {{that it is important to}} clarify the common and different interests and terminology. The general topic of gaming is ripe for an examination to see to what extent there exists a basic methodology and theory of gaming. This paper addresses itself, in part, to this problem. Different types of games and different purposes are discussed. It is stressed that there is not one validation problem but many <b>validation</b> and <b>specification</b> problems which must be addressed if professional standards are to be attained. ...|$|R
40|$|This thesis aims to {{evaluate}} the effectiveness of a formal language (Finite State Process) automated verification tool (Labelled Transition System Analyser) at finding and resolving errors in design models of software. FSP is used to model the Lift Problem from a <b>specification</b> refined by <b>validation.</b> The <b>specification</b> is mapped to a finite state domain and tested for errors - in the mapping, in the understanding of the initial requirements, in the accuracy of the initial requirements, and in the concurrency properties of the identified co-operating entities. Exposition of errors refines (validates) the initial description, and drives their resolution giving rise to an evolutionary corrected model; upon exit of iterative analysis this is mapped to UML behavioural diagrams forming Implementation Specifications...|$|R
