5|6348|Public
50|$|This {{is used by}} some sensor vendors {{to specify}} the serial number or other unique {{identifier}} for the sensor or AP that captured the packet. The is a <b>variable</b> <b>length</b> <b>field.</b>|$|E
5000|$|Data : A <b>variable</b> <b>length</b> <b>field</b> of 0 or more bytes, {{the maximum}} {{allowable}} size depending on ring speed containing MAC management data or upper layer information. Maximum length of 4500 bytes.|$|E
50|$|Operands {{referenced}} by the A-address and B-address were: {{a single}} memory location, a <b>variable</b> <b>length</b> <b>field,</b> or a variable length record. Variable length fields were addressed at their low-order (highest-addressed) position, their length {{defined by a}} word mark set at their high-order (lowest-addressed) position. When an operation such as addition was performed, the processor began at the low-order position of the two fields and worked {{its way to the}} high-order, just as a person would when adding with pencil and paper.|$|E
5000|$|Database {{implementations}} typically store <b>variable</b> <b>length</b> <b>fields</b> in ways such as ...|$|R
50|$|An OpenWebNet {{message is}} {{structured}} with <b>variable</b> <b>length</b> <b>fields</b> separated {{by the special}} character '*' and closed by '##'.|$|R
50|$|The only {{limit on}} the <b>length</b> of such <b>fields</b> was the {{available}} memory. Instructions applicable to <b>variable</b> <b>length</b> <b>fields</b> included: Add, Subtract, Multiply, Divide, Compare, Move Characters to A or B Word Mark, Move Characters and Edit. One or more adjacent <b>variable</b> <b>length</b> <b>fields</b> could make up a <b>variable</b> <b>length</b> record. A <b>variable</b> <b>length</b> record was addressed at its high-order position, its length defined by a group-mark character with a word mark or a record-mark character in its low-order position. The instruction Move Characters Record or Group Mark {{could be used to}} assemble a block of records. A <b>variable</b> <b>length</b> record, or block of records, to be written to magnetic tape was addressed at its high-order position, its length defined by a group-mark character with a word mark immediately following its low-order position.|$|R
50|$|A <b>variable</b> <b>length</b> <b>field</b> is {{not always}} the same {{physical}} size. Such fields are nearly always used for text fields that can be large, or fields that vary greatlyin length. For example, a bibliographical database like PubMed has many small fields suchas publication date and author name, but also has abstracts, which vary greatly in length. Reserving a fixed-length field of some length would be inefficient because it would enforce amaximum length on abstracts, and because space would be wasted in most records (particularly if many articles lacked abstracts entirely).|$|E
40|$|A bit layout is a {{sequence}} of fields of certain bit lengths that specifies how to interpret a serial stream, e. g., the MP 3 audio format. A layout with variable length fields needs to include meta-information to help the parser interpret unambiguously {{the rest of the}} stream; e. g. a field providing the length of a following <b>variable</b> <b>length</b> <b>field.</b> If no such information is available, then the layout is ambiguous. I present a linear-time algorithm to determine whether a layout is ambiguous or not by modelling the behaviour of a serial parser reading the stream as forward chaining reasoning on a collection of Horn clauses. Comment: In Proceedings HCVS 2016, arXiv: 1607. 0403...|$|E
5000|$|... a pointer to data in {{some other}} location, such as a URI, a file offset (and perhaps length), or a key {{identifying}} a record in some special place. This typically speeds up processes that don't need {{the contents of the}} <b>variable</b> <b>length</b> <b>field(s),</b> but slows processes that do.|$|R
40|$|Transfer files between processes. ■ Minimal {{overhead}} (no security) ■ Designed for UDP, although {{could be}} used with many transport protocols. ■ Easy to implement ■ Small- possible to include in firmware ■ Often used to bootstrap workstations and network devices. Read Request 01 filename 0 mode 0 2 byte opcode network byte order null terminated ascii string containing name of file null terminated ascii string containing transfer mode <b>variable</b> <b>length</b> <b>fields!</b> Write Request 02 filename 0 mode 0 2 byte opcode network byte order null terminated ascii string containing name of file null terminated ascii string containing transfer mode <b>variable</b> <b>length</b> <b>fields!</b> TFTP Acknowledgment 2 byte opcode network byte order 04 block # 2 byte block number network byte order TFTP Data Packet 03 block # data 0 to 512 bytes 2 byte opcode network byte order 2 byte block number network byte order all data packets have 512 bytes except the last one. TFTP Error Packet 05 errcode errstring 2 byte opcode network byte order 2 byte error code network byte order null terminated ascii error strin...|$|R
40|$|An IBM 360 / 50 {{computer}} and magnetic tape {{are used in}} a new univer- sity library to produce a map catalogue by area and up to six subiects for each map. Cataloguing is by non-professional staff using the Library of Congress "G, schedule. Author, title, and publisher are in <b>variable</b> <b>length</b> <b>fields,</b> and codes are seldom used for input or interpretation. Ma- chine searches by area, subjects, author, publisher, scale, pro-;ection, date and language can be carried out...|$|R
40|$|Although files with <b>variable</b> <b>length</b> {{records are}} very {{frequent}} in actual databases due to <b>variable</b> <b>length</b> <b>fields,</b> missing attribute values, multiple values of an attribute and compression, {{little has been}} reported in the literature about file structures appropriate for <b>variable</b> <b>length</b> records. In this paper we describe and analyze several overflow handling techniques for the case when records are of <b>variable</b> <b>length.</b> We develop analytic models that take into account <b>variable</b> <b>length</b> records and study the performance in the context of indexed sequential (ISAM) files. We also propose a new overflow handling technique and show that it provides an incremental reorganization capability appropriate for handling <b>variable</b> <b>length</b> records. Analytic results demonstrate that its performance is better than the performance of previous methods, The overflow handling techniques and the analytic methods developed in this paper are also applicable to other file structures with <b>variable</b> <b>length</b> records that require overtlow handling...|$|R
40|$|The {{reference}} information files at several UCLA libraries were merged {{and prepared for}} conversion to machine-readable form under a Council on Library Resources grant. The database structure was conceived using the following factors: data elements, field indexes, syndetic structure, and the possible future sharing of files with the Los Angeles Public Library. Information was entered into a microcomputer using Inmagic, a sophisticated text management systerm that includes among its features Boolean searching, extensive indexing capabilities, and <b>variable</b> <b>length</b> <b>fields.</b> Future implementation of Infofile will depend on funding, but may include translation into ORION, the UCLA online catalog...|$|R
5000|$|The DataBlitz Relational Manager is a C++ {{class library}} {{interface}} to a relational system with SQL support limited to definition statements. Schema information {{is stored in}} tables, and can be queried using the relational API itself. Indices may be created on arbitrary subsets of the attributes in a table. Referential integrity is supported (foreign key constraints), as are null values, date and time attribute types, and <b>variable</b> <b>length</b> <b>fields.</b> Navigation is supported throughiterators over a single table. A conjunctive query may be specified for the iterator, and automatic index selection is performed. Both fine-grained and multi-granularity locking strategies are used for high concurrency without incurring too much overhead. Also, locks obtained by iterators avoid the [...] "phantom" [...] anomaly...|$|R
40|$|Based on an {{empirical}} study {{of more than}} 10, 000 lines of program text written in a GOTO-less language, a machine architecture specifically designed for structured programs is proposed. Since assignment, CALL, RETURN, and IF statements together account for 93 percent of all executable statements, special care is given to ensure that these statements can be implemented efficiently. A highly compact instruction encoding scheme is presented, which can reduce program size by a factor of 3. Unlike a Huffman code, which utilizes <b>variable</b> <b>length</b> <b>fields,</b> this method uses only fixed length (1 -byte) opcode and address fields. The most frequent instructions consist of a single 1 -byte field. As a consequence, instruction decoding time is minimized, and the machine is efficient with respect to both space and time. © 1978, ACM. All rights reserved...|$|R
5000|$|<b>Variable</b> <b>length</b> {{data was}} handled {{with the aid}} of {{specially}} designated characters. The ISS or Item Separator Symbol, octal 74, usually represented as [...] "●" [...] was used to separate <b>variable</b> <b>length</b> data <b>fields.</b> Octal 75 [...] "<" [...] and 76 [...] ">" [...] identified the start and end of a data message, Octal 777777 was by custom and practice used to identify End of File. So data such as names and addresses could be punched onto paper tape for data input as (for example) ...|$|R
50|$|An INP {{database}} {{may contain}} up to 100K records {{of up to}} 1024 characters (expandable). Up to ten database indexes are allowed. They are btrees {{of no more than}} three levels. Databases must contain fixed length records, but some utilities handle <b>variable</b> <b>length,</b> delimited <b>field</b> records. A newline (RETURN) character {{at the end of each}} record makes INP databases accessible to the entire array of Unix utilities, including editors, sort, grep, awk, etc.|$|R
50|$|STDF is {{a binary}} format, {{but can be}} {{converted}} either to an ASCII format known as ATDF or to a tab delimited text file. Decoding the STDF <b>variable</b> <b>length</b> binary <b>field</b> data format to extract ASCII text is non-trivial as it involves a detailed comprehension of the STDF specification, the current (2007) version 4 specification being over 100 pages in length. Software tools exist for processing STDF generated files and performing statistical analysis on a population of tested devices.|$|R
50|$|While above flags {{indicate}} that values are appended into <b>variable</b> <b>length</b> optional <b>fields,</b> {{they are not}} just simply written out. For example, PTS (and DTS) is expanded from 33 bits to 5 bytes (40 bits). If only PTS is present, this is done by catenating 0010b, most significant 3 bits from PTS, 1, following next 15 bits, 1, rest 15 bits and 1. If both PTS and DTS are present, first 4 bits are 0011 and first 4 bits for DTS are 0001. Other appended bytes have similar but different encoding.|$|R
50|$|The term byte {{was coined}} by Werner Buchholz in June 1956, {{during the early}} design phase for the IBM Stretch computer, which had {{addressing}} to the bit and <b>variable</b> <b>field</b> <b>length</b> (VFL) instructions with a byte size encoded in the instruction.It is a deliberate respelling of bite to avoid accidental mutation to bit.|$|R
5000|$|IBM's 1964 System/360 {{introduced}} {{their new}} self-formatting variable-length record format for their S/360 mainframes wherein each record had an optional <b>variable</b> <b>length</b> key <b>field</b> and a <b>variable</b> <b>length</b> data <b>field.</b> IBM mainframe disk, drum and mass storage devices, called direct access storage devices (DASD) are addressed using a six byte seek address for seek commands and a five byte CCHHR for search count commands. OS/360 and other S/360 operating systems used an 8-byte address structured as MBBCCHHR (Extent (M)-Bin (BB)-Cylinder (CC)-Head (HH)-Record (R), which {{was capable of}} storing records of varying size, up to 255 such records per track, with the zeroth record (R0) being reserved for certain error correction information, such as [...] "skip defects"). In addition to data, records could also contain a key. The length of the key, like {{the length of the}} data, was specified by the application writing the record. In addition to addressing records by number, it was possible to search disks by key, using the underlying count key data (CKD) structure. The term [...] "fixed-block architecture" [...] was created by IBM in 1979 to distinguish this format from its variable-length record format. Fixed-block architecture was adopted for a few mainframe HDDs produced by IBM beginning in the 1970s, and contemporary DASD systems continue to support 3310 and 3370 compatibility. MVS continues to require CKD DASD, although by the 1990s all new IBM HDDs used fixed sectors internally. IBM's various FBA disks had block sizes of 100 or 200 characters, and 270,366, 512, 1024, 2048, or 4096 bytes.|$|R
50|$|The OPT pseudo-record {{provides}} {{space for}} up to 16 flags and it extends the space for the response code. The overall size of the UDP packet and the version number (at present 0) are contained in the OPT record. A <b>variable</b> <b>length</b> data <b>field</b> allows further information to be registered in future versions of the protocol. The original DNS protocol provided two label types, which are defined by the first two bits in DNS packets (RFC 1035): 00 (standard label) and 11 (compressed label). EDNS introduces the label type 01 as extended label. The lower 6 bits of the first byte {{may be used to}} define up to 63 new extended labels.|$|R
40|$|We {{study the}} {{continuum}} {{limit of the}} $ 2 D$ U(1) [...] Higgs model with <b>variable</b> scalar <b>field</b> <b>length,</b> which is qualitatively different from the fixed length case. Our simulations concentrate on the scaling behaviour of the topological susceptibility, and an instanton-induced confinement mechanism of fractional charges is numerically confirmed. Comment: Talk presented at LATTICE 96 (topology), 3 pages, latex 2 e, 2 Postscript figures, uses packages epsfig and espcrc...|$|R
40|$|Abstract. This paper {{addresses}} personal E-mail filtering {{by casting}} {{it in the}} framework of text classification. Modeled as semi-structured documents, Email messages consist of a set of fields with predefined semantics and a number of <b>variable</b> <b>length</b> free-text <b>fields.</b> While most work on classification either concentrates on structured data or free text, the work in this paper deals with both of them. To perform classification, a naive Bayesian classifier was designed and implemented, and a decision tree based classifier was implemented. The design considerations and implementation issues are discussed. Using a relatively large amount of real personal E-mail data, a comprehensive comparative study was conducted using the two classifiers. The importance of different features is reported. Results of other issues related to building an effective personal E-mail classifier are presented and discussed. It is shown that both classifiers can perform filtering with reasonable accuracy. While the decision tree based classifier outperforms the Bayesian classifier when features and training size are selected optimally for both, a carefully designed naive Bayesian classifier is more robust. ...|$|R
50|$|Additionally, each field may {{be either}} fixed or <b>variable</b> <b>length.</b> If <b>variable,</b> the <b>length</b> of the <b>field</b> will be {{preceded by a}} length indicator.|$|R
50|$|The S/360-67 {{operated}} {{with a basic}} internal {{cycle time}} of 200 nanoseconds and a basic 750 nanosecond magnetic core storage cycle, {{the same as the}} S/360-65. The 200 ns cycle time put the S/360-67 {{in the middle of the}} S/360 line, between the Model 30 at the low end and the Model 195 at the high end. From 1 to 8 bytes (8 data bits and 1 parity bit per byte) could be read or written to processor storage in a single cycle. A 60-bit parallel adder facilitated handling of long fractions in floating-point operations. An 8-bit serial adder enabled simultaneous execution of floating point exponent arithmetic, and also handled decimal arithmetic and <b>variable</b> <b>field</b> <b>length</b> (VFL) instructions.|$|R
40|$|Summary in English. Bibliography: pages 185 - 195. The {{investigation}} into personal indexing systems consists of (a) {{a study of}} the literature and (b) an empirical survey of the indexing needs of academics in the Western Cape. The literature study was used, inter alia, to determine certain ''characteristics" of personal indexing systems. Characteristics are defined as those features of personal indexing systems that are generally agreed upon by most authors and users as mandatory to ensure effective utilisation of such systems. These characteristics are later employed to derive models of personal indexing systems that may have practical applications for academics. The empirical study provides conclusive proof that dissatisfaction with the academic library is not a reason for setting up a personal indexing system and that academics have a need for professional help when they start their own indexing system. Journal articles are of utmost importance in all document collections, but books, conference papers, theses and clippings are also important. The number of documents contained in such systems vary between 200 and 48 800 with an average of 2 492, 76. According to Soper scientists tend to keep their documents at the workplace while humanists tend to keep their documents at home. Social scientists fall between these groups and keep some of their documents at the workplace and some at home. For scientists and social scientists Soper's observations were confirmed. Lack of data made it impossible to come to any conclusion in the case of humanists. The main difference between large indexing systems and personal indexing systems is the number of records. The smaller system can be simpler, but it was not possible, with the data available, to state conclusively that a thesaurus is not necessary. Although the advantages of computerised systems were indicated it is acknowledged that many academics would prefer a manual system. An index on a computer should provide for <b>variable</b> <b>length</b> <b>fields.</b> The researcher comes to the conclusion that a combination of a classification system and free search terms would be the most effective method to use in subject searches. He suggests that the main classes of the Dewey Decimal Classification Scheme may be used as an outline and that for his specialised field of study the user should devise his own scheme...|$|R
40|$|Text Retrieval Systems (TRS) are a {{well-known}} type of {{program in the}} sphere of information and documentation, especially as they are designed for the retrieval of text and cognitive documents. The main characterisitcs can be summarized as follows: they have a flexible record model (<b>variable</b> <b>length</b> <b>fields,</b> multiple value fields, etc.), they facilitate access to logs through reverse indexing, contain a varied set of data-recovery features, and are provided with diverse instruments for terminology control. Some of the best known and prevalent systems are CDS/ISIS, FileMaker, Knosys, and Inmagic DB/Text. Global theories of approach have been developed about them, among which we can highlight that of Sieverts and other Belgian researchers (1991 - 93), authors of a series of very complete and exhaustive articles that describe the characterisitics of these types of programs, elaborating a typology and presenting a very detailed evaluation of some thirty products. Subsequently, William Saffady twice (1995) (2000) realized an updated approach of TRS. In Spain, various diverse works of a global nature have been published, the most recent of which being a monograph by Abadal and Codina (2005) and Directorio español de software para la gestión bibliotecaria, documental y de contenidos (the Spanish software directory for library, document and content management) (2003), which contains descriptive data of 135 computer programs in the field indicated by its title. At a different level, we can point out the gateway CMS-Spain (www. cms-spain. com), which contains diverse reports and studies of content management programs, among which are included references to text retrieval. TRS have enabled small and medium-sized organisations to be able to create reference-type document databases allowing users of these centres to locate and consult in depth (this refers to books, magazine articles, photographs or other types of documents). Lately, these programs we refer to have commercial computer applications (vulgarly named Web gateways) that alow consultation, from a Web browser, of the databases created with them. This enables them to significantly extend the spectrum of potential users of the databases as it is now unnecesssary to utilise local area networks to share the use of these databases, nor travel to the physical location where they are locate d. The aim of our text is to present precisely the current situation in the market of these applications, to evaluate them, and point to future tendencies. To do this, we will in the first place summarise the basic functions of these Web gateways, and then will evaluate comparatively those which are most widely used in the Spanish market...|$|R
40|$|In this paper, {{we examine}} the {{behavior}} of a <b>variable</b> <b>length</b> GA in a nonstationary problem environment. Results indicate that a <b>variable</b> <b>length</b> GA is better able to adapt to changes than a fixed length GA. Closer examination of the evolutionary dynamics reveals that a <b>variable</b> <b>length</b> GA can in fact take advantage of its <b>variable</b> <b>length</b> representation to exploit good quality building blocks after a change in the problem environment...|$|R
40|$|The Synapsing <b>Variable</b> <b>Length</b> Crossover (SVLC) {{algorithm}} {{provides a}} biologically inspired method for performing meaningful crossover between <b>variable</b> <b>length</b> genomes. In {{addition to providing}} a rationale for <b>variable</b> <b>length</b> crossover it also provides a genotypic similarity metric for <b>variable</b> <b>length</b> genomes enabling standard niche formation techniques {{to be used with}} <b>variable</b> <b>length</b> genomes. Unlike other <b>variable</b> <b>length</b> crossover techniques which consider genomes to be rigid inflexible arrays and where {{some or all of the}} crossover points are randomly selected, the SVLC algorithm considers genomes to be flexible and chooses non-random crossover points based on the common parental sequence similarity. The SVLC Algorithm recurrently "glues" or synapses homogenous genetic sub-sequences together. This is done in such a way that common parental sequences are automatically preserved in the offspring with only the genetic differences being exchanged or removed, independent of the length of such differences. In a <b>variable</b> <b>length</b> test problem the SVLC algorithm is shown to outperform current <b>variable</b> <b>length</b> crossover techniques. The SVLC algorithm is also shown to work in a more realistic robot neural network controller evolution application...|$|R
40|$|Abstract. In this paper, {{we examine}} the {{behavior}} of a <b>variable</b> <b>length</b> GA in a nonstationary problem environment. Results indicate that a <b>variable</b> <b>length</b> GA is better able to adapt to changes than a fixed length GA. Closer examination of the evolutionary dynamics reveals that a <b>variable</b> <b>length</b> GA can in fact take advantage of its <b>variable</b> <b>length</b> representation to exploit good quality building blocks after a change in the problem environment. ...|$|R
40|$|The major {{features}} of the Winisis software are: a) the handling of <b>variable</b> <b>length</b> records, <b>fields</b> and sub fields, thus saving disk space and {{making it possible to}} store greater amounts of information; b) the handling of repeatable fields; c) a data base definition component allowing the user to define the data to be processed for a particular application; d) a data entry component for entering and modifying data through user-created data base specific worksheets; e) an information retrieval component using a powerful search language providing for field-level and proximity search operators, in addition to the traditional and/or/not operators, as well as free-text searching; f) a powerful sort and report generation facility allowing the user to easily create any desired printed products, such as catalogues, indexes, directories, etc.; g) a data interchange function based on the ISO 2709 international standard used by leading data base producers; h) an integrated application programming language (CDS/ISIS Pascal and the ISIS_DLL), allowing the user to tailor the software to specific needs; i) functions allowing the user to build relational data bases, though CDS/ISIS is not based over a relational model; j) powerful hypertext functions allow to design complex user interfaces. A Windows interface between CDS/ISIS and IDAMS, the UNESCO software for statistical analysis, has also been developed. CDS/ISIS for Windows was created as a multi-lingual software, providing integrated facilities for the development of local linguistic versions. Thus, although UNESCO distributes only the English, French and Spanish versions of the package, user-developed versions exist in virtually all languages, including special versions which UNESCO helped in developing, for Arabic, Chinese and Korean. The paper briefly describes: Funcionalities; Context: the ISIS Family; Winisis tomorrow; Handbook for Winisis' instructor...|$|R
40|$|In {{this paper}} we {{describe}} a trellis representation of <b>variable</b> <b>length</b> coded data which {{is capable of}} being used for bit-level or symbol-level maximum a posteriori (MAP) decoding of <b>variable</b> <b>length</b> codes (VLC). A bit-level soft-input/soft-output module is derived and is applied in an iterative decoding structure consisting of an outer <b>variable</b> <b>length</b> code and an inner convolutional code. Due to their inherent redundancy reversible <b>variable</b> <b>length</b> codes (RVLC) yield good results with this system. We present simulation results in terms of symbol error rate performance when the data is transmitted over a fully interleaved Rayleigh fading channel using BPSK modulation. As measure for the symbol error rate the Levenshtein distance is used which regards the self-synchronizing properties of <b>variable</b> <b>length</b> codes better than a simple symbol-by-symbol comparison. 1 Introduction Recently in [2] - [7] several approached have been introduced to improve decoding of <b>variable</b> <b>length</b> codes [...] ...|$|R
40|$|<b>Variable</b> <b>length</b> coding is {{a widely}} used {{technique}} in digital video compression systems. Previous work related to <b>variable</b> <b>length</b> decoders are primarily aimed at high throughput appli-cations, but the increased demand for portable multimedia sys-tems has made power a very important factor. In this paper a data driven <b>variable</b> <b>length</b> decoding algorithm is presented, which exploits the signal statistics of <b>variable</b> <b>length</b> codes to reduce power. It uses fine grain lookup table partitioning based on coldeword frequency. An order magnitude of power reduc-tion is possible compared to conventional parallel decoding scheme with a single lookup table. 1...|$|R
40|$|The {{object of}} the {{bachelor}} thesis {{is to create a}} search concerning questions of the suction piping with <b>variable</b> <b>length.</b> Introduction of the project is devoted to the suction system of the spark ignition engines and the description of each parts. There is further explicated an influence of the suction piping with <b>variable</b> <b>length</b> on torque and performance behaviour and dynamic supercharging utilitazion. The enumaration of used structural design of the suction piping with <b>variable</b> <b>length</b> is presented as well. A great deal of the project is devoted to the specific engines, that use the suction piping with <b>variable</b> <b>length...</b>|$|R
40|$|Biological Crossover {{occurs during}} the early stages of meiosis. During this process the {{chromosomes}} undergoing crossover are synapsed together at a number of homogenous sequence sections, it is within such synapsed sections that crossover occurs. The SVLC (Synapsing <b>Variable</b> <b>Length</b> Crossover) Algorithm recurrently synapses homogenous genetic sequences together in order of length. The genomes are considered to be flexible with crossover only being permitted within the synapsed sections. Consequently, common sequences are automatically preserved with only the genetic differences being exchanged, independent of the length of such differences. In addition to providing a rationale for <b>variable</b> <b>length</b> crossover it also provides a genotypic similarity metric for <b>variable</b> <b>length</b> genomes enabling standard niche formation techniques to be utilised. In a simple <b>variable</b> <b>length</b> test problem the SVLC algorithm outperforms current <b>variable</b> <b>length</b> crossover techniques...|$|R
