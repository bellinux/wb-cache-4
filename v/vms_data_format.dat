0|9202|Public
50|$|Perl <b>VM</b> <b>data</b> {{structures}} are represented internally by typedefs.|$|R
5000|$|A new VM storage scheme {{where all}} <b>VM</b> <b>data</b> {{is stored in}} one single folder to improve VM {{portability}} ...|$|R
5000|$|Virtualization: Contextualization permits, {{at the end}} of VM instantiation, to set or {{override}} <b>VM</b> <b>data</b> having unknown or {{default values}} at the time of creation of the Live CD, typically hostname, IP address, [...]ssh/authorized_keys, ...|$|R
30|$|Data {{confidentiality}} {{before and}} after migration: Data should be encrypted at both source and destination servers.Whenever the attack happens at either guests <b>VM’s</b> <b>data</b> or the host’s data, then the original information not be affected.|$|R
30|$|To date, {{there are}} two {{well-known}} representative <b>data</b> <b>formats</b> for HDR images. One is the OpenEXR floating-point <b>data</b> <b>format</b> [6] {{and the other is}} the RGBE <b>data</b> <b>format</b> [7].|$|R
5000|$|<b>Data</b> <b>format</b> {{management}} as an analytic tool or approach is <b>data</b> <b>format</b> neutral.|$|R
40|$|<b>Data</b> <b>formats</b> play {{a central}} role in {{information}} processing, exchange and storage. Security-related tasks such as the doc-umentation of exploits or format-aware fuzzing of files de-pend on formalized <b>data</b> <b>format</b> knowledge. In this article, we present a model for describing arbitrary <b>data</b> <b>format</b> instances as well as arbitrary <b>data</b> <b>formats</b> as a whole. Using the Bit-stream Segment Graph (BSG) model and the BSG Reasoning approach, we describe a PNG image serving as exploit for Adobe Photoshop CS 2 (CVE- 2007 - 2365). We furthermore show directions how our work can be applied to secure <b>data</b> <b>format</b> design as well as formal security analysis. Index Terms — <b>Data</b> <b>format</b> description, finite bit se-quences, documentation of exploits, formal security valida-tio...|$|R
50|$|From 1997 to 2000, a {{group of}} OTDR {{supplier}} software specialists attempted to resolve problems and inconsistencies {{in what was then}} called the “Bellcore” OTDR <b>Data</b> <b>Format.</b> This group, called the OTDR <b>Data</b> <b>Format</b> Users Group (ODFUG), made progress. Since then, many OTDR developers continued to work with other developers to solve individual interaction problems and enable cross use between manufacturers. In 2011, Telcordia decided to compile industry comments on this <b>data</b> <b>format</b> into one document entitled Optical Time Domain Reflectometer (OTDR) <b>Data</b> <b>Format.</b> This Special Report (SR) summarizes the state of the Bellcore OTDR <b>Data</b> <b>Format,</b> renaming it as the Telcordia OTDR <b>Data</b> <b>Format.</b> The <b>data</b> <b>format</b> is intended for all OTDR-related equipment designed to save trace data and analysis information. Initial implementations require standalone software to be provided by the OTDR supplier to convert existing OTDR trace files to the SR-4731 <b>data</b> <b>format</b> and to convert files from this universal format to a format that is usable by their older OTDRs. This file conversion software can be developed by the hardware supplier, the end user, or a third party. This software also provides backward compatibility of the OTDR <b>data</b> <b>format</b> with existing equipment.|$|R
40|$|Manual {{development}} of format-compliant software components is complex, time-consuming and thus errorprone and expensive, as <b>data</b> <b>formats</b> are defined in semi-formal, textual specifications for human engineers. Existing approaches on a formal description of <b>data</b> <b>formats</b> remain at high-level descriptions {{and fail to}} describe phenomena such as compression or fragmentation that are especially common in Multimedia file formats. As a step-stone towards the description of <b>data</b> <b>formats</b> as a whole, this paper presents Bitstream Segment Graphs as a complete model on <b>data</b> <b>format</b> instances and presents an example PNG where a complete model on <b>data</b> <b>format</b> instances is required...|$|R
40|$|In this paper, file formats like Avro and Parquet are {{compared}} with text formats {{to evaluate the}} performance of the data queries. Different data query patterns have been evaluated. Cloudera’s open-source Apache Hadoop distribution CDH 5. 4 has been chosen for the experiments presented in this article. The results show that compact <b>data</b> <b>formats</b> (Avro and Parquet) take up less storage space when compared with plain text <b>data</b> <b>formats</b> because of binary <b>data</b> <b>format</b> and compression advantage. Furthermore, data queries from the column based <b>data</b> <b>format</b> Parquet are faster when compared with text <b>data</b> <b>formats</b> and Avro...|$|R
40|$|Association rule mining is {{a popular}} {{research}} topic due to many useful applications. The initial task in producing association rule {{is to ensure that}} only suitable <b>data</b> <b>formats</b> are fed into the mining process. Providing a correct <b>data</b> <b>format</b> for association rule mining is an essential and crucial task as wrong data will yield wrong results and interpretations. In this research work, an efficient algorithm for converting relational <b>data</b> <b>format</b> into transactional <b>data</b> <b>format</b> is presented. This transactional <b>data</b> <b>format</b> suited the SAS Enterprise Miner Software for association rule mining technique. The experiments using synthetic and real world data demonstrate the effectiveness of the algorithm...|$|R
30|$|We {{present a}} layered {{approach}} to contextualization that supports different classes of contextualization data available from several sources. The settings are {{made available to}} the VM through virtual devices. Inside each <b>VM</b> <b>data</b> from different classes are layered {{on top of each other}} to create a unified file hierarchy.|$|R
50|$|Note {{there is}} a {{distinction}} between data standards and <b>data</b> <b>formats.</b> A <b>data</b> <b>format</b> like KML, GeoRSS, JSON, XML, CSV, and others describe how to <b>format</b> <b>data</b> to make it machine readable by specific applications. A data standard defines which fields/columns are needed to make raw data usable in these formats. Information in the XOMGL standard can be machine-output {{to any of the}} above listed <b>data</b> <b>formats.</b>|$|R
2500|$|Application binary <b>data</b> <b>formats,</b> such as {{for example}} MATLAB [...]mat files, or the [...]BIL <b>data</b> <b>format,</b> used in topography, are usually endianness-independent. This is {{achieved}} by: ...|$|R
50|$|By ground command, {{one of five}} bit rates, one of four <b>data</b> <b>formats,</b> and one of four {{operating}} modes {{could be}} selected. The five bit rates were 512, 256, 64, 16, and 8 bit/s. Three of the four <b>data</b> <b>formats</b> contained primarily scientific data and consisted of 32 seven-bit words per frame. One scientific <b>data</b> <b>format</b> was for use at the two highest bit rates. Another was for use at the three lowest bit rates. The third contained data from only the radio propagation experiment. The fourth <b>data</b> <b>format</b> contained mainly engineering data.|$|R
40|$|Multimedia <b>data</b> <b>formats</b> axe the {{permanent}} {{representation of a}} multimedia document and thus encode {{the information in that}} document. Users are limited in their expression ultimately by what the <b>data</b> <b>format</b> permits the application to store. Therefore, it behooves the system designer {{to be aware of the}} issues involved in creating and using <b>data</b> <b>formats.</b> This paper sketches some of the user requirements of multimedia, discusses the variety of issues concerning <b>data</b> <b>formats</b> (both common and media specific), and examines a few key formats in use today. Copyright (c) 199...|$|R
5000|$|<b>Data</b> <b>format</b> {{management}} (DFM) is {{the application}} of a systematic approach to the selection and use of the <b>data</b> <b>formats</b> used to encode information for storage on a computer.|$|R
5000|$|Bits 11 to 29 {{contain the}} data. Bit-field, Binary Coded Decimal (BCD), and Binary Number Representation (BNR) are common ARINC 429 <b>data</b> <b>formats.</b> <b>Data</b> <b>formats</b> {{may also be}} mixed.|$|R
2500|$|XML Forms <b>Data</b> <b>Format</b> (XFDF) (external XML Forms <b>Data</b> <b>Format</b> Specification, Version 2.0; {{supported}} since PDF 1.5; it {{replaced the}} [...] "XML" [...] form submission format defined in PDF 1.4) ...|$|R
5000|$|... {{is defined}} an open <b>data</b> <b>format,</b> a <b>data</b> <b>format</b> {{which is made}} public, is {{thoroughly}} documented and neutral {{with regard to the}} technological tools needed to peruse the same data.|$|R
5000|$|XML Forms <b>Data</b> <b>Format</b> (XFDF) (external XML Forms <b>Data</b> <b>Format</b> Specification, Version 2.0; {{supported}} since PDF 1.5; it {{replaced the}} [...] "XML" [...] form submission format defined in PDF 1.4) ...|$|R
40|$|This report {{asserts that}} 16 -bit Digital Signal Processing {{applications}} suffer from dynamic range and noise performance issues. This problem is highly common in complex DSP algorithms and is compounded {{if they are}} programmed in high level languages due to no native compiler support for 16 -bit <b>data</b> <b>formats.</b> A {{solution to this problem}} is achieved by using 16 -bit irregular <b>data</b> <b>formats</b> which show significant improvement over fixed and floating point approaches. First, the <b>data</b> <b>formatting</b> problem for 16 -bit programmable devices are defined and discussed. Existing solutions to the problem is taken into consideration. Then a new class of floating point numbers is obtained from which irregular <b>data</b> <b>formats</b> are derived. Attempts are made to derive format with greater dynamic range and noise performance. Then the irregular <b>data</b> <b>format</b> along with fixed and floating point formats are simulated and analysed for simple DSP applications to make a performance analysis. Finally the <b>data</b> <b>formats</b> under consideration are implemented in a full-fledged Orthogonal Frequency Division Multiplexing model. The inputs and outputs obtained are compared for the percentage of error and final conclusions are drawn. The results indicate that irregular <b>data</b> <b>formats</b> have significant improvement over fixed and floating point formats and 16 -bit DSP applications can be implemented in a more effective way using irregular <b>data</b> <b>formats...</b>|$|R
50|$|A {{debugging}} <b>data</b> <b>format</b> is a {{means of}} storing information about a compiled computer program for use by high-level debuggers. Modern debugging <b>data</b> <b>formats</b> store enough information to allow source-level debugging.|$|R
5000|$|<b>Data</b> <b>format</b> an XML file containing: set of claim type URIs {{as well as}} the (user-defined) {{values of}} these claims, cardImage, a unique cardID, etc. This <b>data</b> <b>format</b> is defined in the ISIP documents.|$|R
40|$|In many applications, such as {{digital signal}} processing, <b>data</b> <b>format</b> {{converters}} {{are used to}} reformat the data transferred between processing modules. In VLSI implementations, these converters consume {{a large portion of}} the available resources. Various methods have been proposed to synthesize <b>data</b> <b>format</b> converter architectures while optimizing the number of registers used to store the data. In this paper, we present a new register allocation scheme which not only minimizes the number of registers, but also minimizes the power consumption in the <b>data</b> <b>format</b> converter. Low power <b>data</b> <b>format</b> converters are synthesized by minimizing the transitions and interconnections between the registers used to store the data. We present both a heuristic and an integer linear programming formulation to solve the allocation problem. Our method shows significant improvement over previous techniques. 1 Introduction <b>Data</b> <b>format</b> converters (DFCs) are used to permute the <b>data</b> from one <b>format</b> to another in [...] ...|$|R
40|$|To reduce {{performance}} degradation from Translation Lookaside Buffer (TLB) misses without {{significant increase in}} TLB size, most modern processors implement TLBs that support multiple pagesizes. For example, Hewlett-Packard's PA- 8000 processor allows 8 hardware pagesizes, in multiples of four, ranging from 4 Kbytes to 64 Mbytes. In implementing multiple pagesize support in HP-UX, we chose to create large pages at page-fault service time. We have a buddy system allocator that provides interfaces for allocating and freeing multiple pagesizes. We maintain the Virtual Memory (<b>VM)</b> <b>data</b> structures such as the pagetable entry, virtual page frame descriptor, and physical page frame descriptor based on the smallest pagesize, and represent a large pagesize {{as a collection of}} these base pagesize structures. In our implementation, VM operations on a large pagesize such as 16 KB are carried out by looping over the 4 KB-based constituent <b>VM</b> <b>data</b> structures. Our system offers significant application per [...] ...|$|R
30|$|For address image recognition, it {{is first}} {{necessary}} {{to extract the}} image frame by video or photographing as an image detection technique. The grayscale process discussed in this study refers to the conversion of images from RGB data to grayscale data. The RGB <b>data</b> <b>format</b> has advantages that other <b>data</b> <b>formats</b> do not have. The <b>data</b> <b>format</b> has clear and clear physical representation and is based on the principle of three primary colors. Therefore, most of the color images are acquired, accessed, and displayed using the RGB <b>data</b> <b>format.</b> However, the RGB <b>data</b> <b>format</b> itself does not distinguish the blackness and brightness information of the image, so in some specific applications such as image analysis and some specific color-based recognition, the RGB format will bring a lot of complexity. This paper uses the weighted average gray scale algorithm [13].|$|R
40|$|VTI, Swedish National Road and Transport Research Institute is an independent, {{research}} institute in the transport sector. Human Behaviour Analysis in the transport system is VTI's most important responsibility. VTI is developing auto driving system, which needs road {{information for the}} simulator. The only <b>data</b> <b>format</b> that the simulator supported is OpenDRIVE <b>data</b> <b>format,</b> unfortunately {{we do not have}} an existing data source which is OpenDRIVE <b>data</b> <b>format.</b> Therefore one needs to convert the other kind of GPS data source to OpenDRIVE <b>data</b> <b>format.</b> Then GPS <b>data</b> from OpenStreetMap has been chosen as the source of this project. What the program needs to do is tracing road that described in OpenStreetMap data and converting map information to OpenDRIVE <b>data</b> <b>format.</b> The result is reasonable and good enough so that VTI could use this way and program to generate OpenDRIVE file that they want...|$|R
40|$|This paper {{documents}} the TRT detector readout scheme. A description is provided {{of the data}} buffers used in the TRT readout chain: the single TRT channel output <b>data</b> <b>format,</b> the DTMROC output <b>data</b> buffer <b>format,</b> the TRT-ROD input FIFO <b>data</b> <b>format,</b> the TRT-ROD output buffer format, and the ROB output buffer <b>data</b> <b>format.</b> Also documented are the current designs for the TRT-ROD zero suppression and data compression schemes. A proposal is presented for ordering the data generated by individual TRT channels suitably for Level- 2 triggering, Level- 3 triggering and offline data processing...|$|R
50|$|In computing, a data {{transformation}} converts {{a set of}} data values from the <b>data</b> <b>format</b> of a source data system into the <b>data</b> <b>format</b> of a destination data system. It is often used in a data warehouse system.|$|R
40|$|Automated {{production}} {{monitoring and}} control system engineering by combining a standardized <b>data</b> <b>format</b> (CAEX) with standardized communication (OPC UA) 501 Automated production {{monitoring and control}} system engineering by combining a standardized <b>data</b> <b>format</b> (CAEX) with standardized communication (OPC UA...|$|R
5000|$|... {{must allow}} {{representation}} of <b>data</b> under different <b>formats,</b> {{at least one}} being an open <b>data</b> <b>format....</b>|$|R
50|$|CF {{originated}} as {{a standard}} for data written in netCDF, but its structure is general {{and it has been}} adapted for use with other <b>data</b> <b>formats.</b> For example, using the CF conventions with Hierarchical <b>Data</b> <b>Format</b> <b>data</b> has been explored.|$|R
50|$|Multipart/report is {{a message}} type that {{contains}} <b>data</b> <b>formatted</b> for a mail server to read. It is split between a text/plain (or some other content/type easily readable) and a message/delivery-status, which contains the <b>data</b> <b>formatted</b> for the mail server to read.|$|R
50|$|DFDL is {{descriptive}} and not prescriptive. DFDL {{is not a}} <b>data</b> <b>format,</b> nor does it impose {{the use of any}} particular <b>data</b> <b>format.</b> Instead it provides a standard way of describing many different kinds of <b>data</b> <b>format.</b> This approach has several advantages. It allows an application author to design an appropriate data representation according to their requirements while describing it in a standard way which can be shared, enabling multiple programs to directly interchange the data.|$|R
40|$|<b>Data</b> <b>formats</b> {{which can}} offer {{a full range of}} {{tradeoffs}} between bit-serial and bit-parallel computation are described. The design of arithmetic operators based on these <b>data</b> <b>formats,</b> especially a digit-serial multiplier, is presented. It is shown that these <b>data</b> <b>formats</b> can combine the advantage of limited interconnection and small chip size of bit-serial computation with the advantage of throughput of parallel computation and that they lead to the most efficient pipelined implementation of the desired function...|$|R
