172|323|Public
5000|$|... ·        Implemented faculty {{development}} and <b>virtual</b> <b>class</b> room projects to enhance quality of technical education.|$|E
50|$|All three {{problems}} could be alleviated by altering the underlying programming language to make factories first-class class members (see also <b>Virtual</b> <b>class).</b>|$|E
5000|$|Executive Education through <b>Virtual</b> <b>Class</b> room {{technology}} has today {{become one of}} the largest revenue earners for premier management institutes in India ...|$|E
50|$|A method with {{an object}} {{argument}} {{has access to}} the object's <b>virtual</b> <b>classes.</b> The method can use the <b>virtual</b> <b>classes</b> of its arguments to create instances and declare variables. <b>Virtual</b> <b>classes</b> of different instances are not compatible.|$|R
50|$|<b>Virtual</b> <b>classes</b> {{solve the}} {{extensibility}} problem of extending data abstraction with new functions and representations. Like <b>virtual</b> functions, <b>virtual</b> <b>classes</b> {{follow the same}} rules of definition, overriding, and reference.|$|R
40|$|This paper {{describes}} how <b>virtual</b> <b>classes</b> can be supported in a vir-tual machine. Main-stream virtual machines {{such as the}} Java Vir-tual Machine and the. NET platform dominate the world today, and many languages are being executed on these virtual machines even though their embodied design choices conflict with the design choices of the virtual machine. For instance, there is a non-trivial mismatch between the main-stream virtual machines mentioned above and dynamically typed languages. One language concept that creates an even greater mismatch is <b>virtual</b> <b>classes,</b> in particular be-cause fully general support for <b>virtual</b> <b>classes</b> requires generation of new classes at run-time by mixin composition. Languages like CaesarJ and Object Teams can express <b>virtual</b> <b>classes</b> restricted to the subset that does not require run-time generation of classes, be-cause of the restrictions imposed by the Java Virtual Machine. We have chosen to support <b>virtual</b> <b>classes</b> by implementing a special-ized virtual machine, and this paper {{describes how}} this virtual ma-chine supports <b>virtual</b> <b>classes</b> with full generality...|$|R
5000|$|This is conceptually {{equivalent}} to defining the following C++ class:class SomeClass : public ISomeInterface { .....};where ISomeInterface is a C++ pure <b>virtual</b> <b>class.</b>|$|E
50|$|A {{run time}} {{instance}} type {{of the outer}} class object not only decides on the polymorphic type of its own type object, but also on a whole family tree of <b>virtual</b> <b>class</b> members.|$|E
50|$|In {{object-oriented}} programming, a <b>virtual</b> <b>class</b> is a nested inner class whose {{functions and}} member variables can be overridden and redefined by subclasses {{of the outer}} class. Virtual classes are analogous to virtual functions.|$|E
40|$|It {{is obvious}} that {{object-oriented}} deductive databases are particularly suited to support <b>virtual</b> <b>classes</b> and object views. In this paper we represent classes and objects as modules in a deductive database and propose a way to handle inheritance and late binding that also applies to <b>virtual</b> <b>classes.</b> Our model covers not only specializing but also generalizing <b>virtual</b> <b>classes.</b> 1 1 Introduction It is widely accepted that views are essential in object-oriented databases [1] and researchers agree that the view concept of relational databases must be extended [3]. More specifically, [29] emphasizes that dynamic subclasses and class migration are essential modelling concepts. It {{is obvious that}} object-oriented deductive databases are particularly suited to support <b>virtual</b> <b>classes</b> and object views. In this paper we adopt the view of a class or object as a deductive database module and propose a way to handle inheritance and late binding also for <b>virtual</b> <b>classes.</b> Our model covers not only [...] ...|$|R
50|$|Miramonte High School once {{participated in}} the Virtual High School Consortium, a {{response}} to the problems of distance education which allowed courses to be taught over the internet. Students could participate in these <b>virtual</b> <b>classes</b> from on-site internet access, or from a home connection. No classes are currently being provided as <b>virtual</b> <b>classes.</b>|$|R
40|$|This study aims to {{investigate}} {{the effects of the}} traditional learning, blended learning and <b>virtual</b> <b>classes</b> learning on university students’ achievement and attitudes. 34 male students studying at the English Language Program, Qassim University were divided randomly into three groups, (blended learning, traditional learning, or <b>virtual</b> <b>classes</b> learning). Results indicate that there are significant differences among the instructional approaches in the achievement test scores in favor of blended learning. In addition, the results show significant differences in students’ attitudes in favor of blended learning. Key words: Blended learning; Traditional learning; <b>Virtual</b> <b>classes</b> learning; Saudi students’ achievement; Attitudes; E-learning</p...|$|R
5000|$|The {{run time}} {{type of a}} <b>virtual</b> <b>class</b> depends on the run time type of an object of the outer class. (Just like the run time type of an object decides which virtual {{function}} should be used.) ...|$|E
5000|$|For example, a {{base class}} [...] {{could have a}} <b>virtual</b> <b>class</b> [...] Subclass [...] would {{implement}} [...] differently than the subclass , but the programmer can call any methods in the virtual inner class [...] on any class [...] object, and get the [...] implementation of that specific derived class.class Machine{ void run (...) {} <b>virtual</b> <b>class</b> Parts { };};// The inner class [...] "Parts" [...] of the class [...] "Machine" [...] may return the number of wheels the machine has.class Car: public Machine{ void run (...) { [...] cout << [...] "The car is running." [...] << endl; [...] } class Parts { int get_Wheels (...) { cout << [...] "A car has 4 wheels." [...] << endl; return 4; } string get_Fuel_Type (...) { cout << [...] "A car uses gasoline for fuel." [...] << endl; return [...] "gasoline"; } };};Any object of class type [...] can be accessed the same way. The programmer can ask {{for the number of}} wheels (by calling [...] ), without needing to know what kind of machine it is, how many wheels that machine has, or all the possible types of machines there are. Functions like [...] can be added to the <b>virtual</b> <b>class</b> [...] by the derived class [...]|$|E
50|$|Presently, Dr.K.Ramasamy is {{the member}} of Board of Indian Council of Agricultural Research (ICAR), NAAS University Ranking Committee ICAR Accreditation Committee, ICAR Academic Infrastructure Committee, <b>Virtual</b> <b>Class</b> Rooms (VCR) for Higher Agricultural Education across NARES {{committee}} and, Online Learning System (including MOOC) committee at the National level.|$|E
50|$|A {{structure}} of <b>virtual</b> <b>classes,</b> including mechanisms for automatic score gathering and processing.|$|R
40|$|<b>Virtual</b> <b>classes,</b> {{which were}} first used in Beta [MMP 89], have {{recently}} been suggested by Thorup [Tho 97] as an extension to Java to support genericity. While <b>virtual</b> <b>classes</b> are a convenient mechanism to support simultaneous modification of mutually recursive classes, they rely on dynamic type checking for type safety. We suggest a variant which has similar expressiveness as <b>virtual</b> <b>classes,</b> but supports safe static type checking. To ease the comparison with earlier work we express our construct as an addition to Java, though similar constructs may be added {{to a variety of}} object-oriented languages. For example, this proposal can also be seen as a statically type-safe alternative to Eiffel's "anchored types". 1 Introduction Thorup [Tho 97] recently suggested adding virtual types to Java in order to support genericity with a convenient and natural syntax. This construct, which is based on the <b>virtual</b> <b>classes</b> of Beta [MMP 89], provides expressiveness similar to that of type parameters. We i [...] ...|$|R
5000|$|<b>Virtual</b> <b>classes</b> of the moduli {{space of}} stable quotients (over [...] ) by Pandharipande and Pixton.|$|R
5000|$|In {{his book}} Unleashing the Collective Phantoms, the theorist Brian Holmes {{said of the}} AAA: [...] "The ideas sound fantastic, but the stakes are real: imagining a {{political}} subject within the <b>virtual</b> <b>class,</b> and therefore, within the economy of cultural production and intellectual property that had paralyzed the poetics of resistance." ...|$|E
5000|$|... <b>virtual</b> <b>class</b> Memory; virtual {{function}} bit 31:0 read(bit 31:0 addr); endfunction virtual function void write(bit 31:0 addr, bit 31:0 data); endfunctionendclassclass SRAM #(parameter AWIDTH=10) extends Memory; bit 31:0 mem 1<<AWIDTH; virtual function bit 31:0 read(bit 31:0 addr); return memaddr; endfunction virtual function void write(bit 31:0 addr, bit 31:0 data); memaddr = data; endfunctionendclass ...|$|E
5000|$|Quran and Etrat Organization {{believes}} {{that the only way}} to strengthen understanding about Shia knowledge is the academic method through a well-organized educational institute.Hence, Quran and Etrat Organization is ready to announce the establishment of Quran and Etrat Internet University from September 2003. The goal of this university is to provide eLearning and Internet classes (<b>virtual</b> <b>class)</b> with the following directions: ...|$|E
40|$|<b>Virtual</b> <b>classes,</b> {{similar to}} Java inner classes in their lexical placement, may be {{extended}} in subclasses of the enclosing class enabling us to defer {{the definition of}} reference types. The term dependent types describes how types can depend {{on the value of}} expressions. <b>Virtual</b> <b>classes</b> and dependent types are means by which we can achieve family or collaboration oriented programming. Previous work has sought implementations for this programming approach but only very recent papers have attempted to produce a formal calculus. Moreover, it is far from clear whether these calculi are minimal in their support for <b>virtual</b> <b>classes</b> and dependent types. We provide an outsourcing report, suitable for a fourth year computing student...|$|R
50|$|Information {{networks}} for pedagogic proposals. <b>Virtual</b> <b>classes.</b> Discussion forae. Integration philosophy at national, iberoamerican and international levels.|$|R
30|$|Students and {{teachers}} could {{interact with each}} other during non office hours and thus take benefit of <b>virtual</b> <b>classes.</b>|$|R
5000|$|The local {{facilitator}} {{works as}} {{the link between}} the <b>virtual</b> <b>class</b> of students in the audiovisual recording and the real participants. A 2006 UNESCO review of Yes I Can notes, [...] "The role of facilitators has received both recognition and criticism". [...] The report notes their strong social commitment, but notes problems in terms of the consistency of teaching skills amongst relatively untrained people.|$|E
50|$|When a {{derived class}} {{inherits}} from a base class, it must define or override the virtual inner classes it {{inherited from the}} base class. An object of the child class may be referred to by a reference or pointer of the parent class type or the child class type. When the reference or pointer invoke the virtual inner classes, the derived class's implementation will be called if the object is of the derived class type. The type of the outer class determines the run time of the inner <b>virtual</b> <b>class.</b>|$|E
5000|$|An {{example of}} a {{university}} that maintains a tight schedule is the Virtual Global University (VGU) in Germany. VGU offers a graduate program [...] "International Master of Business Informatics" [...] (MBI)—a master program in information technology and management that takes an average of four semesters to complete (for full-time students). Each course has a lecture or a <b>virtual</b> <b>class</b> meeting every week. Afterwards, students get a homework assignment; for example, they have to solve an exercise, elaborate on some problem, discuss a case study, or take a test. Lecturers give them immediate feedback, and one week later, the same happens again.|$|E
40|$|A natural Gromov-Witten <b>virtual</b> {{fundamental}} <b>class</b> We {{prove that}} the Gromov-Witten moduli space of a compact symplectic manifold carries a unique <b>virtual</b> fundamental <b>class</b> that satisfies certain naturality conditions. The theorem also applies to moduli spaces of relative J-holomorphic maps. The <b>virtual</b> fundamental <b>class</b> is constructed using only Gromov-type perturbations by introducing stabilizing divisors and systematically applying the naturality conditions. ...|$|R
40|$|<b>Virtual</b> <b>classes</b> allow nested {{classes to}} be refined in subclasses. In this way nested classes {{can be seen}} as {{dependent}} abstractions of the objects of the enclosing classes. Expressing dependency via nesting, however, has two limitations: Abstractions that depend on more than one object cannot be modeled and a class must know all classes that depend on its objects. This paper presents dependent classes, a generalization of <b>virtual</b> <b>classes</b> that expresses similar semantics by parameterization rather than by nesting. This increases expressivity of class variations as well as the flexibility of their modularization. Besides, dependent classes complement multimethods in scenarios where multi-dispatched abstractions rather than multi-dispatched methods are needed. They {{can also be used to}} express more precise signatures of multimethods and even extend their dispatch semantics. We present a formal semantics of dependent classes and a machine-checked type soundness proof in Isabelle/HOL [29], the first of this kind for a language with <b>virtual</b> <b>classes</b> and path-dependent types...|$|R
50|$|Some {{of these}} schools have survived by diversifying their {{academic}} offerings. For example, including face-to-face courses as well as <b>virtual</b> <b>classes</b> in business administration, medical technology, medical billing & coding, and even offering advanced/graduate-level degrees.|$|R
5000|$|The idea of {{a virtual}} {{university}} as an institution that used computers and telecommunications instead of buildings and transport to bring students and teachers together for university courses {{was first published in}} works like [...] "De-Schooling Society" [...] by Ivan Illich that introduced the concept of the use of computer networks as switchboards for learning, in 1970. In 1971 George Kasey, a media(activist)ethicist, delivered a series of lectures on [...] "the Philosophy of Communications De-Design" [...] under the sponsorship of Phil Jacklin PhD, professor at University of California San Jose, a member of [...] "The (San Francisco)Bay Area Committee for Open Media and Public Access." [...] The lectures contained the theoretical outlines for use of telecommunications and media for de-schooling and de-design of mainstream education and an alternative Virtual Free University system. By 1972 George Kasey established [...] "Media Free Times - periodical Multimedia Random Sampling of Anarchic Communications Art" [...] a prototype for remote learning with the use of [...] "multi-media periodicals," [...] that are now commonly referred to as [...] "web pages". In 1995 by John Tiffin and Lalita Rajasingham in their book [...] "In Search Of the Virtual Class: Education in an Information Society" [...] (London and New York, Routledge). It was based on a joint research project at Victoria University of Wellington that ran from 1986-1996. Called the <b>virtual</b> <b>class</b> laboratory it used dedicated telecommunication systems {{to make it possible for}} students to attend class virtually or physically and was at first supported by a number of telecommunication organisations. Its purpose was to seek the critical factors in using ICT for university level education. In 1992 the <b>virtual</b> <b>class</b> lab moved onto the Internet.|$|E
50|$|To {{solve the}} problem, Russell {{developed}} his type theory from 1903 to 1908, which allowed {{only a very}} much restricted use of class terms. In the long term she not prevailed but, but more comfortable and more powerful, 1907 initiated by Ernst Zermelo set theory. Not a class logic in the narrower sense, but {{in its present form}} (ZF or NBG) because it does not axiomatize the class term, but used only in practice as a useful notation. Willard Van Orman Quine described a set theory New Foundations (NF) in 1937, oriented not at Cantor, or Zermelo-Fraenkel, but on the theory of types. In 1940 Quine advanced NF to Mathematical Logic (ML). Since the antinomy of Burali-Forti was derived in the first version of ML, Quine clarified ML, retaining the widespread use of classes, and took up a proposal by Hao Wang introducing in 1963 in his theory of {x|A(x)} as a <b>virtual</b> <b>class,</b> so that classes are although not yet full-fledged terms, but sub-terms in defined contexts.|$|E
5000|$|In {{order to}} be effective, {{learning}} institutions must see computers and associated technology as {{an essential part of}} the student. In other words, technology must be seen as cognitive prosthetics. [...] The core concept of distance education is that the real world becomes the learning environment; in this environment, the purpose of the instructor is to help facilitate the absorption of knowledge through both real-world and virtual learning experiences. [...] Historically, one of the obstacles to distance education is the lack of face to face contact. The use of technology as an integral part of course design has attempted to compensate in both synchronous and asynchronous settings.For delivery of synchronous content, technologies such as videoconferencing and web conferencing are typically used. An example of this is the growing use of Skype and GoToMeeting for <b>virtual</b> <b>class</b> discussions and lectures.For asynchronous content delivery, course designers use a variety of software suites that include various types of interactive elements. Programs such as WebCT, Knowledge Forum, FirstClass, Raptivity and Blackboard Learning System attempt to ameliorate the lack of contact with online discussion forums and bulletin boards.It is essential that a knowledge-building community be allowed to develop in order for the learning to succeed.|$|E
5000|$|Anglo Eastern was {{the first}} {{shipping}} company to launch <b>virtual</b> <b>classes,</b> whereby training is conducted online, over the internet by a remotely located teacher with a webcam. They also conduct online computer-based training over a platform called CMS (Competency Management System) ...|$|R
40|$|Para realizar el proceso de enseñanza-aprendizaje existen múltiples estrategias pedagógicas. En las clases pasivas se transmiten conocimientos y el centro de la clase es el maestro y sus saberes. En las clases activas y en el Aprendizaje Basado en Problemas (ABP) se pretende que los estudiantes descubran y construyan el conocimiento. En el ABP el problema precede al aprendizaje. Las clases virtuales y el blended {{learning}} (clases pasivas y virtuales) funcionan en el fondo también como transmisión del conocimiento. En el presente trabajo se revisan las fortalezas y debilidades de estas distintas modalidades de enseñanza-aprendizaje. Passive, active and <b>virtual</b> <b>classes.</b> Transmitting or constructing knowledge? Many teaching strategies {{have been developed}} to achieve the teaching-learning process. In passive classes knowledge is transmitted and the class is centered in the teacher and his/her knowledge. In active classes and problem-based learning (PBL) the intention is to get students to discover and construct knowledge. In PBL the problem precedes learning. <b>Virtual</b> <b>classes</b> and {{blended learning}} (passive and <b>virtual</b> <b>classes)</b> also in the end function as a transfer of knowledge. This paper reviews {{the strengths and weaknesses of}} these different teaching and learning modalities...|$|R
40|$|Tracking and {{detection}} of objects often require to apply complex models {{to cope with}} the large intra-class variability of the foreground as well as the background class. In this work, we reduce the complexity of a binary classification problem by a context-driven approach. The main idea is to use a hidden multi-class representation to capture multi-modalities in the data finally providing a binary classifier. We introduce <b>virtual</b> <b>classes</b> generated by a contextdriven clustering, which are updated using an active learning strategy. By further using an on-line learner the classifier can easily be adapted to changing environmental conditions. Moreover, by adding additional <b>virtual</b> <b>classes</b> more complex scenarios can be handled. We demonstrate the approach for tracking as well as detection on different scenarios reaching state-of-the-art results. 1...|$|R
