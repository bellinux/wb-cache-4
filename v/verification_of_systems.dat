214|10000|Public
5000|$|The {{town was}} mainly {{founded in the}} 1950s, because of [...] "Robotförsöksplats Norr" [...] (RFN) (Missile Test Area North)/Vidsel Test Range. The range forms part of the Swedish Defence Materiel Administration (FMV) Testing Directorate, which is {{responsible}} for the <b>verification</b> <b>of</b> <b>systems</b> procured for the Swedish Armed Forces.|$|E
40|$|Abstract — This paper {{addresses}} the safety <b>verification</b> <b>of</b> <b>systems</b> with time-delay. It extends the barrier certificate methodology previously proposed for safety <b>verification</b> <b>of</b> <b>systems</b> described by ordinary differential equations to the functional differential equations setting. For verifying {{the safety of}} a time-delay system, a functional of states is used as a barrier certificate. The forms of the functionals resemble the Lyapunov-Razumikhin functions or the Lyapunov-Krasovskii functionals used in stability analysis of time-delay systems. When the description of the system is given in terms of polynomials, such a barrier certificate can be searched using sum of squares programming. I...|$|E
40|$|Abstract. The article {{summarizes}} {{the results of}} the author in the area of automated <b>verification</b> <b>of</b> <b>systems</b> and concurrency theory. These results are concerning the computational complexity of equivalence checking problems. The main aim of the paper is to present intuitive nonformal overview of these results...|$|E
40|$|Abstract — <b>Verification</b> <b>of</b> {{continuous}} <b>systems</b> {{remains one}} <b>of</b> the main obstacles {{in the safety}} <b>verification</b> <b>of</b> hybrid <b>systems.</b> In this paper, by exploiting the structure <b>of</b> linear dynamical <b>systems,</b> we convert the exact safety <b>verification</b> <b>of</b> linear <b>systems</b> with certain eigen-structure as an emptiness problem for a semi-algebraic set. Sum of squares (SOS) decomposition is then employed to check emptiness of the set defined by polynomial equalities and inequalities which can be effectively computed by semidefinite programming. I...|$|R
40|$|One {{approach}} to <b>verification</b> and validation <b>of</b> language processing <b>systems</b> includes the <b>verification</b> <b>of</b> <b>system</b> resources. In general, the grammar {{is a key}} resource in such systems. In this paper we discuss <b>verification</b> <b>of</b> lexicalized tree adjoining grammars (LTAGs) (Joshi and Schabes, 1997) as one instance <b>of</b> a <b>system</b> resource, and as one phase <b>of</b> a larger <b>verification</b> effort. ...|$|R
5000|$|<b>Verification</b> <b>of</b> a <b>system</b> implementation’s {{compliance}} with an architectural description ...|$|R
40|$|Using {{verification}} {{techniques to}} prove the correctness of systems {{is becoming more and}} more important. Especially in the domain of embedded and distributed systems, verifica-tion techniques are increasingly being used for quality assurance today. Model checking is a verification technique that allows the automatic <b>verification</b> <b>of</b> <b>systems</b> with a finite stat...|$|E
40|$|Several {{recent works}} have {{considered}} parameterized verification, i. e. automatic <b>verification</b> <b>of</b> <b>systems</b> consisting of an arbitrary number of finite-state processes organized in a linear array. The {{aim of this}} paper is to extend these works by giving a simple and efficient method to prove safety properties for systems with treelike architectures. A process in the system is a finitestate automaton and a transition is performed jointly by a process and its parent and children processes. The method derives an over-approximation of the induced transition system, which allows the use of finite trees as symbolic representations of infinite sets of configurations. Compared to traditional methods for parameterized <b>verification</b> <b>of</b> <b>systems</b> with tree topologies, our method does not require the manipulation of tree transducers, hence its simplicity and efficiency. We have implemented a prototype which works well on several nontrivial tree-based protocols. ...|$|E
40|$|Abstract. Among the branching-time {{temporal}} logics {{used for}} the specification and <b>verification</b> <b>of</b> <b>systems,</b> CTL +, FCTL and ECTL + are the most notable logics for which the precise computational complexity of model checking is not known. We answer this longstanding open problem and show that model checking these (and some related) logics is ∆ p 2 -complete. ...|$|E
40|$|Abstract. The {{objective}} {{of this paper is}} to show how <b>verification</b> <b>of</b> dense-time <b>systems</b> modeled as timed automata can be effectively performed using untimed verification techniques. In that way, the existing rich infrastructure in algorithms and tools for the <b>verification</b> <b>of</b> untimed <b>systems</b> can be exploited. The paper completes the ideas introduced in [45]...|$|R
40|$|In this paper, {{we present}} an ontology-based {{approach}} to text-to-picture synthesis. Our approach operates with an ontology in the RDF/XML format. This provides loose coupling <b>of</b> the <b>system</b> components, unification <b>of</b> the interacting objects representation and their behaviour, and makes possible <b>verification</b> <b>of</b> <b>system</b> information resources...|$|R
40|$|Abstract. Counterexample-guided {{abstraction}} refinement (CEGAR) {{has been}} en vogue for the automatic <b>verification</b> <b>of</b> very large <b>systems</b> {{in the past}} years. When trying to apply CEGAR to the <b>verification</b> <b>of</b> probabilistic <b>systems,</b> various foundational questions arise. This paper explores them {{in the context of}} predicate abstraction. ...|$|R
40|$|At the {{structural}} level, we analyze possibilities for modular <b>verification</b> <b>of</b> <b>systems</b> consisting of various components which interact. We illustrate these ideas by automatically verifying safety properties {{of a case}} study from the European Train Control System standard, which extends previous examples by comprising a complex track topology with lists of track segments and trains with different routes...|$|E
40|$|This report {{lays the}} {{foundation}} for the analysis of LSMs, and their use in the specification and <b>verification</b> <b>of</b> <b>systems</b> of concurrent processes. The LSM is defined; an equivalence relation is introduced that makes possible polynomial time algorithms for computing equivalence partitions; these algorithms are presented (along with data that shows that some LSMs with 1...|$|E
40|$|We base {{our work}} on a model called {{data-centric}} dynamic system (DCDS) [1], which {{can be seen as}} a framework for modeling and <b>verification</b> <b>of</b> <b>systems</b> where both the process controlling the dynamics and the manipulation of data are equally central. More specifically, a DCDS consists of a data layer and a process layer, interacting as follows...|$|E
40|$|Approaches to the <b>verification</b> <b>of</b> multi-agent <b>systems</b> are {{typically}} {{based on games}} or transition systems {{defined in terms of}} states and actions. However such approaches often ignore a key aspect <b>of</b> multi-agent <b>systems,</b> namely that the agents’ actions require (and sometimes produce) resources. We briefly survey previous work on the <b>verification</b> <b>of</b> multi-agent <b>systems</b> that takes resources into account, and outline some key challenges for future work...|$|R
40|$|<b>Verification</b> <b>of</b> {{embedded}} <b>systems</b> is {{a challenge}} due to the tight combination of hardware and software. We present an approach on the automatic <b>verification</b> <b>of</b> embedded <b>system</b> applications for the operating system Contiki using a standard bounded model checking tool for software. By using an operating system a higher abstraction level to hardware is possible. Our approach is therefore easily applicable for the <b>verification</b> <b>of</b> different hardware platforms...|$|R
40|$|Counterexample-guided {{abstraction}} refinement (CEGAR) {{has been}} en vogue for the automatic <b>verification</b> <b>of</b> very large <b>systems</b> {{in the past}} years. When trying to apply CEGAR to the <b>verification</b> <b>of</b> probabilistic <b>systems,</b> various foundational questions and practical tradeoffs arise. This paper explores them {{in the context of}} predicate abstraction...|$|R
40|$|IOA is a {{high-level}} distributed programming language {{based on the}} formal I/O automaton model for asynchronous concurrent systems. A suite of software tools, called the IOA toolkit, has been designed and partially implemented to facilitate the analysis and <b>verification</b> <b>of</b> <b>systems</b> using techniques supported by the formal model. This paper introduces the IOA simulator which {{is a part of}} the IOA toolkit...|$|E
40|$|Formal {{modeling}} and <b>verification</b> <b>of</b> <b>systems</b> with self-x properties / Matthias Güdemann, Frank Ortmeier and Wolfgang Reif. - In: Autonomic and trusted computing : third international conference, ATC 2006, Wuhan, China, September 3 - 6, 2006; proceedings / Laurence T. Yang [...] . (eds.). - Berlin [u. a. ] : Springer, 2006. - S. 38 - 47. - (Lecture notes in computer science; 4158...|$|E
40|$|McMillan has {{recently}} proposed {{a new technique}} to avoid the state explosion problem in the <b>verification</b> <b>of</b> <b>systems</b> modelled with finite-state Petri nets. The technique requires to construct a finite initial part of the unfolding of the net. McMillan's algorithm for this task may yield initial parts that are larger than necessary (exponentially larger in the worst case). We present a refinement of the algorithm which overcomes this problem. 1 Introduction In a seminal paper [10], McMillan has proposed a new technique to avoid the state explosion problem in the <b>verification</b> <b>of</b> <b>systems</b> modelled with finite-state Petri nets. The technique {{is based on the}} concept of net unfolding, a well known partial order semantics of Petri nets introduced in [12], and later described in more detail in [4] under the name of branching processes. The unfolding of a net is another net, usually infinite but with a simpler structure. McMillan proposes an algorithm {{for the construction of a}} finite initial part [...] ...|$|E
40|$|Introduction............................................................ 3 2. <b>Verification</b> <b>of</b> Navigation <b>System</b> {{using the}} CRL Toolset............... 4 2. 1. Description of the CRL............................................ 4 2. 2. CRL Toolset...................................................... 6 2. 3. Method <b>of</b> <b>Verification..............................................</b> 8 2. 4. Application to the Case Study..................................... 9 3. Logical <b>verification</b> <b>of</b> Navigation <b>System</b> using DYANA Toolset........ 10 3. 1. MM-Spec {{language}} and logical properties of NS behaviour......... 11 3. 1. 1. Distributed program model................... ...|$|R
5000|$|S-TaLiRo: A MATLAB Toolbox for <b>verification</b> <b>of</b> Hybrid <b>Systems</b> {{with respect}} to Temporal Logic Specifications ...|$|R
40|$|Despite many {{advances}} that enable {{the application of}} model checking techniques to the <b>verification</b> <b>of</b> large <b>systems,</b> the state-explosion problem remains the main challenge for scalability. Composi-tional verification addresses this challenge by decomposing the <b>verification</b> <b>of</b> a large <b>system</b> into the <b>verification</b> <b>of</b> its components. Recent techniques use learning-based approaches to automate com-positional verification based on the assume-guarantee style reasoning. However, these techniques are only applicable to finite-state systems. In this work, we propose a new framework that interleaves abstraction and learning to perform automated compositional <b>verification</b> <b>of</b> infinite-state <b>systems.</b> We also discuss the role of learning and abstraction in the related context of interface generation for infinite-state components. ...|$|R
40|$|We {{review a}} number of {{temporal}} verification techniques for reactive systems using modularity and abstraction. Their use allows the verification of larger systems, and the incremental <b>verification</b> <b>of</b> <b>systems</b> as they are developed and refined. In particular, we show how deductive verification tools, and the combination of finite-state model checking and abstraction, allow the verification of infinite-state systems featuring data types commonly used in software specifications, including real-time and hybrid systems...|$|E
40|$|This article {{presents}} a semantic-based environment for reasoning about {{the behavior of}} mobile systems. The verification environment, called HAL, exploits a novel automata-like model that allows finite-state <b>verification</b> <b>of</b> <b>systems</b> specified in the pi-calculus. The HAL system is able to interface with several efficient toolkits (e. g. model-checkers) {{to determine whether or}} not certain properties hold for a given specification. We report experimental results on some case studies...|$|E
40|$|There is {{a growing}} {{awareness}} that tool support is needed to develop high-assurance industry-size software/hardware systems. The aim of these workshops {{was to provide a}} forum of researchers interested in the use and development of tools which support the use of mathematical techniques for the specification, development, analysis and <b>verification</b> <b>of</b> <b>systems.</b> This workshop was the fourth in a series of biennial events devoted to this topic. Th...|$|E
40|$|International audienceinterval {{temporal}} logic (itl) and Petri nets are two well developed formalisms for the specification and analysis <b>of</b> concurrent <b>systems.</b> itl {{allows one to}} specify both the system design and correctness requirements within the same logic based on intervals (sequences of states). As a result, <b>verification</b> <b>of</b> <b>system</b> properties {{can be carried out}} by checking that the formula describing a system implies the formula describing a requirement. Petri nets, on the other hand, have action and local state based semantics which allows for a direct expression of causality aspects in system behaviour. As a result, <b>verification</b> <b>of</b> <b>system</b> properties can be carried out using partial order reductions or invariant based techniques. In this paper, we investigate a basic semantical link between {{temporal logic}}s and compositionally defined Petri nets. In particular, we aim at providing a support for the <b>verification</b> <b>of</b> behavioural properties of Petri nets using methods and techniques developed for itl...|$|R
40|$|This {{publication}} {{consists of}} papers presented at NASA Langley Research Center's fourth workshop {{on the application}} of formal methods to the design and <b>verification</b> <b>of</b> life-critical <b>systems.</b> Topic considered include: Proving properties of accident; modeling and validating SAFER in VDM-SL; requirement analysis <b>of</b> real-time control <b>systems</b> using PVS; a tabular language for system design; automated deductive <b>verification</b> <b>of</b> parallel <b>systems.</b> Also included is a fundamental hardware design in PVS...|$|R
40|$|AVOCS, the {{workshop}} on Automated <b>Verification</b> <b>of</b> Critical <b>Systems,</b> is an annual meeting that brings together researchers and practitioners to exchange new results on tools and techniques for the <b>verification</b> <b>of</b> critical <b>systems.</b> Topics <b>of</b> interest cover all aspects <b>of</b> automated <b>verification,</b> including model checking, theorem proving, abstract interpretation, and refinement pertaining to various types <b>of</b> critical <b>systems</b> (safety-critical, security-critical, business-critical, performance-critical, etc.). Contributions that describe different techniques, or industrial case studies are encouraged...|$|R
40|$|Abstract. The {{systematic}} design, validation, and <b>verification</b> <b>of</b> <b>systems</b> for biomedical {{experiments in}} laboratory and clinical applications are complex {{due to the}} highly stochastic nature of biological systems. This paper presents a platform framework for the modeling of these biological components {{in the context of}} system-level analysis that enables formal validation and verification of biomedical devices. Looking forward, the capabilities of this platform enable the development of more efficient and effective experimental biomedical systems...|$|E
40|$|In {{this paper}} a semantic-based {{environment}} for reasoning about the behaviour of mobile systems is presented. The verification environment, called HAL, exploits a novel automata-like model which allows finite state <b>verification</b> <b>of</b> <b>systems</b> {{specified in the}} pi-calculus. The HAL system is able to interface with several efficient toolkits (e. g. model checkers) {{to determine whether or}} not certain properties hold for a given specification. We report experimental results with some case studie...|$|E
40|$|Process {{orientation}} is {{an approach to}} concurrency that uses concepts of processes and message-passing communication, with whole systems constructed from layered and dynamically evolving networks of communicating processes. The work described in this paper relates to the automatic model generation and <b>verification</b> <b>of</b> <b>systems</b> developed in processoriented languages. We discuss some early applications of this technique to our experimental operating system, RMoX, {{as a means to}} giving a guarantee of correct system behaviour at a range of levels...|$|E
5000|$|UPPAAL, an {{integrated}} tool environment for modeling, validation and <b>verification</b> <b>of</b> real-time <b>systems</b> modeled as networks of timed automata ...|$|R
40|$|Abstract:- We {{present an}} {{algorithm}} for generating Chu space {{models of the}} behaviors of arbitrarily complex non-iterated systems including those with N-type dependencies. The generated Chu space {{can be used for}} <b>verification</b> <b>of</b> <b>system</b> properties. The application of the model generation algorithm is illustrated with a few examples. Key-Words:- concurrency, Chu spaces, system behavior modeling, N-type dependencies...|$|R
5000|$|TrustedGRUB extends GRUB by {{implementing}} <b>verification</b> <b>of</b> the <b>system</b> integrity and boot process security, using the Trusted Platform Module (TPM).|$|R
