339|10000|Public
5000|$|There are two schemes {{predominant}} {{across all}} <b>Virtual</b> <b>Machine</b> <b>Monitor</b> implementations: ...|$|E
5000|$|Applications {{have been}} re-designed to run {{directly}} on a <b>virtual</b> <b>machine</b> <b>monitor.</b>|$|E
50|$|A {{simple and}} generic {{processor}} backdoor {{can be used}} by attackers as a means to privilege escalation to get to privileges equivalent to those of any given running operating system. Also, a non-privileged process of one of the non-privileged invited domain running on top of a <b>virtual</b> <b>machine</b> <b>monitor</b> can get to privileges equivalent to those of the <b>virtual</b> <b>machine</b> <b>monitor.</b>|$|E
5000|$|Over time, {{the line}} between <b>virtual</b> <b>machines,</b> <b>monitors,</b> and {{operating}} systems was blurred: ...|$|R
50|$|Isolation {{in these}} types of systems {{requires}} redundancy. Should {{one part of the}} system fail, a redundant part will need to take its place. Isolation must be failure proof for all types of failures whether they be software or human caused failures. One potential way to isolate parts of a system is using <b>virtual</b> <b>machine</b> <b>monitors</b> such as Xen. <b>Virtual</b> <b>machine</b> <b>monitors</b> allow many <b>virtual</b> <b>machines</b> to run on a physical machine and should there be a problem with one <b>virtual</b> <b>machine</b> it can be restarted without restarting the physical machine, or it can be stopped and another can take its place.|$|R
40|$|Summary. We design, implement, and {{evaluate}} a practical timing-based approach to detect <b>virtual</b> <b>machine</b> <b>monitors</b> (VMMs) without relying on VMM implementation details. The algorithms developed {{in this paper}} are based on fundamental properties of <b>virtual</b> <b>machine</b> <b>monitors</b> rather than easily modified software artifacts. We evaluate our approach against two common VMM implementations on machines with and without hardware support for virtualization {{in a number of}} remote and local experiments. We successfully distinguish between <b>virtual</b> and real <b>machines</b> in all cases even with incomplete information regarding the VMM implementation and hardware configuration of the targeted machine. ...|$|R
5000|$|A {{hard disk}} image is {{interpreted}} by a <b>Virtual</b> <b>Machine</b> <b>Monitor</b> {{as a system}} hard disk drive. IT administrators and software developers administer them through offline operations using built-in or third-party tools. In terms of naming, a hard disk image for a certain <b>Virtual</b> <b>Machine</b> <b>monitor</b> has a specific file type extension, e.g., [...]vmdk for VMware VMDK, [...]vhd for Xen and Microsoft Hyper-V, [...]vdi for Oracle VM VirtualBox, etc..|$|E
5000|$|The Denali {{operating}} system is [...] "an IA-32 <b>virtual</b> <b>machine</b> <b>monitor,</b> {{that allows for}} untrusted services to be run in isolated (protected) domains." ...|$|E
50|$|This made it {{difficult}} to implement a <b>virtual</b> <b>machine</b> <b>monitor</b> for this type of processor. Specific limitations included the inability to trap on some privileged instructions.|$|E
5000|$|<b>Virtual</b> <b>machine</b> <b>monitors</b> (also {{known as}} hypervisors) also often operate on {{mainframes}} and large servers running IBM, HP, and other systems.Server virtualization can provide benefits such as: ...|$|R
5000|$|... "The vMatrix: A Network of <b>Virtual</b> <b>Machine</b> <b>Monitors</b> for Dynamic Content Distribution", Amr A. Awadallah and Mendel Rosenblum, 7th International Workshop on Web Content Caching and Distribution (WCW 2002), Boulder, Colorado, August 2002.|$|R
30|$|Finally, van Cleeff et al. [10] present {{recommendations}} for safer use of virtualization. One of these recommendations is to limit, or even disable, the introspection feature, which allows <b>virtual</b> <b>machine</b> <b>monitors</b> to access data inside <b>virtual</b> <b>machines.</b> While useful, this functionality may be exploited by attackers, {{as previously explained}} on Subsection 2.|$|R
5000|$|... equivalence: {{a program}} running under the <b>virtual</b> <b>machine</b> <b>monitor</b> (VMM) should exhibit a {{behavior}} essentially {{identical to that}} demonstrated when running on an equivalent machine directly ...|$|E
50|$|In {{hardware}}-assisted virtualization, {{the hardware}} provides architectural support that facilitates building a <b>virtual</b> <b>machine</b> <b>monitor</b> and allows guest OSes {{to be run}} in isolation. Hardware-assisted virtualization was first introduced on the IBM System/370 in 1972, for use with VM/370, the first virtual machine operating system.|$|E
50|$|In {{mainframe}} computing a PR/SM (Processor Resource/System Manager) is a type-1 Hypervisor (a <b>virtual</b> <b>machine</b> <b>monitor)</b> {{that allows}} multiple logical partitions to share physical {{resources such as}} CPUs, I/O channels and direct access storage devices (DASD). It is integrated with all IBM System z machines.|$|E
5000|$|... jstat [...] - [...] Java <b>Virtual</b> <b>Machine</b> {{statistics}} <b>monitoring</b> tool (experimental) ...|$|R
40|$|This paper {{tries to}} provide an {{overview}} of virtualization, its relation to emulation and various virtualization techniques used in current <b>virtual</b> <b>machine</b> <b>monitors</b> (VMMs). <b>Virtual</b> <b>machine</b> <b>monitors</b> have various uses; this paper concerns itself with the use of VMMs in providing hardware multiplexing with multiple <b>virtual</b> <b>machines</b> and the support for multiple operating systems executing on these <b>virtual</b> <b>machines.</b> It then compares virtualization as is the current trend in datacenters, with emulators that seem to provide a subset of features that a traditional VMM provides. It then explores the possibility of combining emulators with VMMs to provide for the next generation hypervisor that supports not only simultaneous execution of different operating systems on the same single machine but operating systems built for different architectures on the same underlying machine architecture. To explore this, it compares virtualization as is done in Xen, VMWare and an emulator, QEMU. 1...|$|R
30|$|Over the years, {{different}} methods for instantiating virtual networks have been used. Typical approaches include VLANs (Virtual Local Area Networks) and VPNs (Virtual Private Networks). Recently, <b>Virtual</b> <b>Machine</b> <b>Monitors</b> and programmable networks have been employed to create virtual routers and links over physical devices and communication channels. These approaches are briefly revisited next.|$|R
5000|$|ScaleMP is a {{software}} vendor of a hypervisor, or <b>virtual</b> <b>machine</b> <b>monitor,</b> for high-performance computing applications. The company has its corporate headquarters in Fort Lee, New Jersey, and additional offices in Rosh Ha'ayin, Israel. It {{was founded in}} 2003 by the chief executive officer, Shai Fultheim and Herb Zlotogorski.|$|E
5000|$|Physical mode: In this mode, {{also called}} the pass through mode, the <b>Virtual</b> <b>Machine</b> <b>Monitor</b> {{bypasses}} the I/O virtualization layer and passes all I/O commands directly to the device. All physical characteristics of the underlying hardware {{are exposed to the}} guest operating system. There is no file locking to provide data protection.|$|E
50|$|The {{virtual disk}} can again be {{implemented}} using split or monolithic files, except that storage is allocated on demand. Several <b>Virtual</b> <b>Machine</b> <b>Monitor</b> implementations initialize the storage with zeros before providing {{it to the}} virtual machine that is in operation. The dynamic growth storage scheme is {{also referred to as}} a thin provisioning scheme.|$|E
40|$|Abstract. <b>Virtual</b> <b>Machine</b> <b>Monitors</b> (VMMs) {{are gaining}} {{popularity}} in enterprise environments as a software-based solution for building shared hardware infrastructures via virtualization. In this work, using the Xen VMM, {{we present a}} light weight monitoring system for measuring the CPU usage of different <b>virtual</b> <b>machines</b> including the CPU overhead in the device driver domain caused by I/O processing {{on behalf of a}} particular <b>virtual</b> <b>machine.</b> Our performance study attempts to quantify and analyze this overhead for a set of I/O intensive workloads. ...|$|R
50|$|Like other {{virtualization}} software, Parallels Workstation uses hypervisor technology, {{which is}} a thin software layer between Primary OS and host computer. The hypervisor directly controls some of the host machine's hardware resources and provides an interface to it for both <b>virtual</b> <b>machine</b> <b>monitors</b> and primary OS. This allows virtualization software to reduce overhead. Parallels Workstation's hypervisor also supports hardware virtualization technologies like Intel VT-x and AMD-V.|$|R
40|$|Virtualization {{is a key}} {{enabling}} technology for cloud computing. Many applications deployed in a cloud run in <b>virtual</b> <b>machines.</b> However, profilers based on CPU performance counters do not work well in a virtualized environment. In this paper, we explore the possibilities for achieving performance profiling in <b>virtual</b> <b>machine</b> <b>monitors</b> (VMMs) built on paravirtualization, hardware assistance, and binary translation. We present the design and implementation of performance profiling for a VMM based on the x 86 hardware extensions, with some preliminary experimental results. ...|$|R
50|$|Xen, a <b>virtual</b> <b>machine</b> <b>monitor,</b> can run in HVM ({{hardware}} virtual machine) mode, using Intel VT-x or AMD-V hardware x86 virtualization extensions and ARM Cortex-A7 and Cortex-A15 virtualization extension. This {{means that}} instead of paravirtualized devices, a real set of virtual hardware is exposed to the domU to use real device drivers to talk to.|$|E
50|$|VMI {{tools are}} {{typically}} located outside the virtual machine (e.g., {{in the virtual}} machine monitor)and act by tracking the events (interrupts, memory writes, and so on) or sending the requests to the virtual machine. <b>Virtual</b> <b>machine</b> <b>monitor</b> ususlly provides low-levelinformation like raw bytes of the memory. Converting this low-level view into something meaningful for the user {{is known as the}} semantic gap problem.|$|E
5000|$|System virtual {{machines}} {{are capable of}} virtualizing {{a full set of}} hardware resources, including a processor (or processors), memory and storage resources and peripheral devices. A <b>virtual</b> <b>machine</b> <b>monitor</b> (VMM, also called hypervisor) is the piece of software that provides the abstraction of a virtual machine. There are three properties of interest when analyzing the environment created by a VMM: ...|$|E
40|$|This paper {{proposes a}} novel method of {{achieving}} fast networking in hosted <b>virtual</b> <b>machine</b> (VM) environments. This method, called socket-outsourcing, replaces the socket {{layer in a}} guest operating system (OS) with the socket layer of the host OS. Socket-outsourcing increases network performance by eliminating duplicate message copying in both the host OS and the guest OS. Furthermore, socket-outsourcing significantly enhances inter-VM communication within the same host OS since it enables network packets to bypass the protocol stack in guest OSes. Socketoutsourcing was implemented in two representative operating systems (Linux and NetBSD) and on two <b>virtual</b> <b>machine</b> <b>monitors</b> (Linux KVM and PansyVM). These <b>virtual</b> <b>machine</b> <b>monitors</b> provided support for socket-outsourcing through shard memory, event queues, and VM-specific Remote Procedure Call between a guest OS and a host OS. The experimental results revealed that a guest OS outsourcing the socket layer achieved the same network throughput as a native OS using up to four Gigabit Ethernet links. Moreover, the benchmark results obtained from an N-tier Web application that generated {{a significant amount of}} inter-VM communication indicated that socket-outsourcing improved performance by up to 45 percent compared with conventional hosted VM environments...|$|R
40|$|<b>Virtual</b> <b>machine</b> <b>monitors</b> {{partition}} {{a single}} physical <b>machine</b> into multiple <b>virtual</b> ones. This {{can be useful}} for several important applications, such as running multiple isolated servers on a single machine, testing and debugging software, using possibly malicious software and building honeypots. The widely used IA- 32 architecture does not natively support virtualisation. We compare several state-of-the-art methods used to circumvent this problem. Our comparison includes dynamic binary translation, paravirtualisation, previrtualisation, operating system level partitioning, application <b>virtual</b> <b>machines</b> and the recent “Virtual Machine Extensions ” added t...|$|R
40|$|Abstract—We {{experimentally}} {{investigate the}} mutual influence of application- and platform-level adaptations in a virtualized cluster environment. At the application level, applications can {{adapt to a}} changing execution environment by dynamically ex-changing components {{that enable them to}} trade energy for utility and vice versa. Likewise, at the platform level, <b>virtual</b> <b>machine</b> <b>monitors</b> can migrate <b>virtual</b> <b>machines</b> from one server to another either to consolidate workloads and switch-off underutilized servers or to distribute the workload of overloaded servers. Our experiment quantify impacts of various types of adaptations on QoS, power consumption, and energy-overhead. Keywords—Adaptation, cloud computing, energy-efficient com-puting, virtualization, <b>virtual</b> <b>machines</b> migration, migration costs I...|$|R
50|$|OpenStack Compute (Nova) is a cloud {{computing}} fabric controller, {{which is the}} main part of an IaaS system. It is designed to manage and automate pools of computer resources and can work with widely available virtualization technologies, as well as bare metal and high-performance computing (HPC) configurations. KVM, VMware, and Xen are available choices for hypervisor technology (<b>virtual</b> <b>machine</b> <b>monitor),</b> together with Hyper-V and Linux container technology such as LXC.|$|E
50|$|The Xbox One system software, {{sometimes}} called the Xbox OS, is the operating system for the eighth-generation home video game console, Xbox One. It is a Windows-based operating system using the Hyper-V <b>virtual</b> <b>machine</b> <b>monitor</b> and contains separate operating systems for games and applications that can run on the console. It {{is located on the}} internal HDD for day-to-day usage, while also being duplicated on the internal NAND storage of the console for recovery purposes and factory reset functionality.|$|E
50|$|After TSS/360 was canceled, IBM put {{its primary}} efforts into the Time Sharing Option (TSO), a {{time-sharing}} monitor for OS/360. Several other groups developed less ambitious, more successful time sharing {{systems for the}} S/360-67, notably CP-67 at IBM's Cambridge Scientific Center, an early <b>virtual</b> <b>machine</b> <b>monitor</b> which evolved into VM/370, MTS at the University of Michigan, and ORVYL at Stanford University. IBM also provided the TSS/370 PRPQ as a migration path for existing TSS/360 customers, which went through multiple releases.|$|E
25|$|Improved resume from suspend in <b>virtual</b> <b>machines</b> with {{multiple}} <b>monitors</b> assigned.|$|R
40|$|<b>Virtual</b> <b>machine</b> <b>monitors</b> (VMMs) {{have enjoyed}} a {{resurgence}} in popularity, since VMMs {{can help to}} solve di#cult systems problems like migration, fault tolerance, code sandboxing, intrusion detection, and debugging. Recently, several researchers have proposed novel applications of <b>virtual</b> <b>machine</b> technology, such as Internet Suspend/Resume [25, 31] and transparent OS-level rollback and replay [13]. Unfortunately, current VMMs do not export enough functionality to budding developers of such applications, forcing them either to reverse engineer pieces of a black-box VMM, or to reimplement significant portions of a VMM. In this paper...|$|R
30|$|CB {{built the}} state of the art of the field, defined the {{objectives}} of this research, did the analysis of the current <b>virtual</b> <b>machine</b> <b>monitoring</b> tools and their limitations. He implemented the analysis tool presented in this paper, as well as the experiments. MRD initiated and supervised this research, lead and approved its scientific contribution, provided general input, reviewed the article and issued his approval for the final version. Both authors read and approved the final manuscript.|$|R
