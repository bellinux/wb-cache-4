60|4|Public
25|$|Web 2.0 often uses machine-based {{interactions}} such as REST and SOAP. Servers often expose proprietary Application programming interfaces (API), but standard APIs (for example, for posting to a blog or notifying a blog update) {{have also}} come into use. Most communications <b>through</b> <b>APIs</b> involve XML or JSON payloads. REST APIs, through {{their use of}} self-descriptive messages and hypermedia as the engine of application state, should be self-describing once an entry URI is known. Web Services Description Language (WSDL) is the standard way of publishing a SOAP Application programming interface {{and there are a}} range of Web service specifications.|$|E
5000|$|The Majestic Search Engine's data is {{accessible}} <b>through</b> <b>APIs</b> in JSON and XML formats or via a web interface ...|$|E
50|$|Client {{applications}} {{can access}} the OpenAccess database <b>through</b> <b>APIs</b> in multiple programming languages: C++, C#, Perl, Python, Ruby and Tcl.|$|E
40|$|This dataset {{has been}} {{produced}} during a small sub-project of APIS ([URL] It contains data from 151 annotated biographies of the Austrian Biographical Dictionary. These selection of biographical articles describe {{the life and}} career steps of historians, librarians, teachers etc. These particular texts have been manually annotated <b>through</b> the webapplication <b>APIS.</b> <b>Through</b> these annotations relations between different kinds of entities were established. The result are biographical data {{which can be used}} for network visualization or statistical queries...|$|R
40|$|This paper {{aimed to}} list the {{community}} of floral visitors of Ocimum selloi, indicate the potential pollinators, and their patterns of visitation. The collection of flower visitors {{was carried out in}} 2007, in an anthroposophical area, with analysis of constancy and dominance of taxa. A total of 653 insects was collected, belonging to seven orders; Hymenoptera, with 370 individuals, was the most representative group. Thirty six families were identified, being 12 of Hymenoptera and eight of Diptera the most diverse ones. Apidae was the family which showed the greatest constancy and dominance, especially <b>through</b> the bee <b>Apis</b> mellifera L., 1758 (n = 223), followed by Halictidae (n = 107). Most of the foraging activity was observed between 9 a. m. and 11 a. m. It was found that A. mellifera was the main floral visitor and potential pollinator of O. selloi...|$|R
40|$|Geological and {{geophysical}} {{data from}} the NE Antarctic Peninsula continental shelf are used to reconstruct the glacial history, flow-dynamics and sedimentation of the Antarctic Peninsula Ice Sheet (APIS) along its eastern margin during the Late Quaternary. Ice advanced to the shelf edge during the Last Glacial Maximum (LGM) and deposited a stiff till across the shelf. The presence of highly attenuated bedforms indicates that fast-flowing outlets drained the <b>APIS</b> <b>through</b> cross-shelf troughs to the outer shelf after this ice advance. The bedforms are formed in deformation till in response to deforming bed processes. Deglaciation of Robertson Trough and the troughs of Prince Gustav Channel, Larsen-A and Larsen Inlet was continuous (and possibly rapid) {{on account of the}} absence of ice-margin recessional features. In contrast, grounding-zone wedges across the shelf of Northern Larsen-A and south of Prince Gustav Channel indicate that ice retreat was gradual and was punctuated by stillstands. The transition from a grounded ice sheet to ice shelf conditions was completed before 11 – 12 14 C ka BP on the shelf south of Prince GustavChannel, and is marked across the shelf by a change from subglacial till to a transitional heterogeneous unit dominated by coarse-grained facies. Transitional sediments record mainly sub-ice shelf rain-out and restricted bottom current and sediment-laden plume activity, as well as localised debris flows. Meltwater-derived facies are largely absent indicating that release of meltwater was not significant beneath polar ice shelves, or during deglaciation of the APIS. In the broader context, the colder, eastern side of the APIS was extensive and was drained mainly through fast-flowing outlets (palaeo-ice streams). Therefore, the eastern APIS would have been an important contributor to sediment and iceberg flux to the Weddell Sea Embayment during the LGM and subsequent deglaciation...|$|R
50|$|In April 2013, MuleSoft {{acquired}} ProgrammableWeb, {{a website}} used by developers {{to help build}} web, mobile and other connected applications <b>through</b> <b>APIs.</b>|$|E
5000|$|In 2012, {{the firm}} {{launched}} the Dentrix Developer Program (DDP), a program allowing third party vendors {{to access the}} Dentrix database <b>through</b> <b>APIs.</b> The program has steadily grown since then to include more than 250 vendors {{from all over the}} applications spectrum.|$|E
5000|$|While {{many of the}} platform's {{features}} operate independently, it {{was also}} designed to be compatible with third-party resources, such as MailChimp, Google Drive, and PayPal <b>through</b> <b>APIs.</b> The idea is to [...] "integrate seamlessly with as many relevant Web services as possible".|$|E
40|$|Geophysical and {{geological}} {{data indicate}} that during the last glacial cycle a palaeo-ice stream drained the Antarctic Peninsula Ice Sheet (<b>APIS)</b> <b>through</b> Marguerite Bay {{to the edge of}} the continental shelf via a bathymetric trough (Marguerite Trough). Mega-scale glacial lineations (MSGL) in outer Marguerite Trough are formed in an acoustically transparent sediment unit, consisting of a soft deformation till. The association of MSGL with deformation till indicates that bed deformation occurred beneath the ice stream, and the thickness of the subglacial deforming layer was on the order of several metres. MSGL within outer Marguerite Trough are related to a pre-existing thick sequence of soft sediments on the outer shelf and are inferred to have formed by a combination of subglacial sediment deformation by attenuation from a point source and groove-ploughing. Morphologically, the MSGL differ in several respects from those documented elsewhere and this variation suggests a polygenetic origin for this subglacial landform. An initial advance of the APIS across the Marguerite Bay continental shelf at the LGM deposited a stiff subglacial till. Following this advance, the ice margin within Marguerite Trough retreated 70 – 100 km before stabilising and depositing a grounding zone wedge. An ice stream then developed in the trough and extended to the shelf edge forming a soft deformation till. Development of the ice stream may have been a glacio-dynamic response to regional deglaciation. Subsequent retreat of the Marguerite Trough ice stream was underway by 13, 490 (uncorrected) 14 C years before present. Based on the geophysical and core data, ice-stream retreat appears to have been rapid and it contrasts with reconstructions of palaeo-ice streams from other locations in Antarctica. This implies marked regional variations in Antarctic ice-stream dynamics during Late Quaternary deglaciation. ...|$|R
50|$|Honeybees are {{challenged}} to balance energy consumption and replenishment in {{their pursuit of}} nectar. High thoracic temperatures required for foraging flight pose a thermoregulatory imbalance that honeybees attempt to alleviate by targeting particular viscosities and temperatures of nectar resources. In lower environmental temperatures where energy loss is more pronounced, it has been shown <b>through</b> <b>Apis</b> mellifera scutellata that honeybees seek warmer, less-concentrated and less-viscous nectar, an energetically favorable behavior.|$|E
5000|$|Mailbox {{was limited}} to Gmail and iCloud accounts. It also {{supported}} Yahoo! Mail for three days. Setting up Mailbox required granting the company's servers access to the user's email account, either <b>through</b> <b>APIs</b> (Gmail) or direct access (iCloud). Mailbox's servers repeatedly queried the user's email account to provide push notifications and allowed the application to refresh its content without having {{to run in the}} background for prolonged periods.|$|E
5000|$|... iSocket {{was founded}} in 2008 and is located in San Francisco, California with {{additional}} offices in New York City. In 2011, Google's DoubleClick For Publishers ad server partnered with isocket to bring direct sales into the DFP platform. In October 2011, after the rise of programmatic real-time bidding for remnant display ad inventory <b>through</b> <b>APIs,</b> isocket announced the first API platform for premium inventory. This gave advertisers the ability to find and buy direct, guaranteed advertising through an API for the first time.|$|E
50|$|In 2016, AWS {{comprised}} {{more than}} 70 services spanning {{a wide range}} including computing, storage, networking, database, analytics, application services, deployment, management, mobile, developer tools, and tools for the Internet of Things. The most popular include Amazon Elastic Compute Cloud (EC2) and Amazon Simple Storage Service (S3). Most services are not exposed directly to end users, but instead offer functionality <b>through</b> <b>APIs</b> for developers to use in their applications. Amazon Web Services’ offerings are accessed over HTTP, using the REST architectural style and SOAP protocol.|$|E
5000|$|DronaHQ is an {{enterprise}} mobility platform {{that comes with}} a thick middleware on the backend and a robust thick client as hybrid app. The platform has an inbuilt content management system (CMS), user management, and push notification offered as a service <b>through</b> <b>APIs.</b> The platform allows {{an enterprise}} to scale the app by plugging in HTML5 based hybrid apps which can use its APIs {{to take advantage of the}} native features on mobile as well as backend features of push notification, user management, analytics, etc.|$|E
50|$|In early 2013, Fortinet added {{firewall}} functionality to the Fortigate appliance, {{designed for}} internal networks and relying on special-purpose ASICs. The FortiGate virtual appliance was later {{added to the}} Amazon Web Services in 2014. In April 2016, Fortinet announced the Fortinet Security Fabric, which is intended to allow third-party devices to share information with Fortinet appliances and software <b>through</b> <b>APIs.</b> Initial Fabric-Ready partners include Brocade, Carbon Black, Centrify, Nozomi Networks, Palerra, Pulse Secure, Qualys, Inc., Tufin , UBIqube, VeriSign, Inc., WhiteHat Security and Ziften. Fortinet also introduced the FortiGate 6040E 320Gbit/s firewall, which includes the new CP9 ASIC that takes on some processing tasks from the main CPU, and was used in future FortiGate releases.|$|E
50|$|Web 2.0 often uses machine-based {{interactions}} such as REST and SOAP. Servers often expose proprietary Application programming interfaces (API), but standard APIs (for example, for posting to a blog or notifying a blog update) {{have also}} come into use. Most communications <b>through</b> <b>APIs</b> involve XML or JSON payloads. REST APIs, through {{their use of}} self-descriptive messages and hypermedia as the engine of application state, should be self-describing once an entry URI is known. Web Services Description Language (WSDL) is the standard way of publishing a SOAP Application programming interface {{and there are a}} range of Web service specifications.|$|E
50|$|Samba TV (formerly Flingo) is {{a content}} {{recommendation}} engine within Smart TV apps, co-founded in 2008 by early employees of BitTorrent (company), including Samba’s current CEO, Ashwin Navin. Samba TV develops software for televisions, set-top boxes, smart phones and tablets to enable interactive television through personalization. Through its portfolio of applications and TV platform technologies, Samba TV is built {{directly into the}} TV or set-top box and will recognize onscreen content—live or time-shifted—and make relevant information available to users at their request. <b>Through</b> <b>APIs</b> and SDKs for mobile application software developers, Samba TV is usable on a second screen or the TV itself. Samba TV applications are currently available on over 30 million screens in 118 countries.|$|E
5000|$|Zimki was a pure [...] "pay as you go" [...] code {{execution}} platform {{which enabled}} developers {{to build and}} deploy applications or web services without incurring any start-up costs on a true utility based computing platform. Charging was done on storage used, network traffic and JSOPs (Javascript Operations). It provided a multitenant platform where developers could create entire applications (front and back end through SSJS) by using a single language - Javascript, with all development, billing, monitoring and application control exposed <b>through</b> <b>APIs</b> {{and a range of}} component services from a No-SQL object store to Message Queue services. Furthermore, all functions within Zimki could be exposed as web services and Zimki provided billing analysis down to individual functions.|$|E
5000|$|Public reverse {{geocoding}} {{services are}} becoming increasingly available <b>through</b> <b>APIs</b> and other web services as well as mobile phone applications. These services require manual input of a coordinate, capture from a localization tool (mostly GPS, but also cell tower signals or WiFi traces), or selection of a point on an interactive map; to look up a street address or neighboring places. Examples of these services include the GeoNames reverse geocoding web service which has tools to identify nearest street address, place names, Wikipedia articles, country, county subdivisions, neighborhoods, and other location data from a coordinate. Google has also published a reverse geocoding API which can be adapted for online reverse geocoding tools, which uses the same street reference layer as Google maps.latitude 34.533695. Longitude -11790969 ...|$|E
5000|$|Step 1 Identification: Searching and {{identifying}} the right {{source of information}} for analytical purposes. Step 2 Extraction: Once a reliable and mineable source of social media data are identified, next comes extraction of the data <b>through</b> <b>APIs</b> or manually. Step 3 Cleaning: This step involves removing the unwanted data from the automatically extracted data Step 4 Analyzing: Next, the clean data is analyzed for business insights. Depending on the layer of social media analytics under consideration and the tools and algorithm employed, the steps and approach to take will greatly vary. Step 5 Visualization: Depending {{on the type of}} data, the analysis part will lead to relevant visualizations for effective communication of results. Step 6 Interpretation or Consumption: This step relies on human judgments to interpret valuable knowledge from the visual data. Meaningful interpretation is of particular importance when we are dealing with descriptive analytics that leaves room for different interpretations ...|$|E
5000|$|Cloudify {{uses the}} OASIS TOSCA {{technology}} and {{is written in}} the Python programming language. It is licensed under the Apache License Version 2.0, and its source files can be found and forked on GitHub.Built on a YAML DSL (Domain Specific Language) configuration files called [...] "blueprints" [...] define the application's configurations, services and their tier dependencies. With these Cloudify automates the deployment phases of applications to Cloud computing and Virtualization infrastructure. The blueprints describe how the application interacts with the data center <b>through</b> <b>APIs</b> to execute the defined blueprint configurations. These blueprint files describe the execution plans for the lifecycle of the application for installing, starting, terminating, orchestrating and monitoring the application stack. Cloudify uses the blueprint as input that describes the deployment plan and is responsible for executing it on the cloud environments. The blueprint also employs cloud driver configuration files as well, to describe machines and their images for the chosen cloud, {{making it possible to}} manage the infrastructure as code. For each component it describes the location of your binaries, installation and monitoring configurations. By creating an abstraction layer that isolates the code from the underlying infrastructure, Cloudify is able to support any cloud.|$|E
5000|$|The product uses a push technology. OU Campus can be {{accessed}} via the cloud - also known as {{software as a service}} (SaaS). The underlying platform of OU Campus is developed in Java, and uses XSLT 3.0 for template transformation. OU Campus uses open standards, including XML, HTML, and CSS and is extensible <b>through</b> <b>APIs.</b> As a decoupled system, OU Campus works with any server-side technology (e.g., PHP, ASP, [...]NET, ColdFusion) and for templates uses XHTML/HTML5 and CSS, as well as XML/XSL. [...] The templates are customizable so that developers can create sites using popular web development techniques including Responsive web design to adapt to all screen sizes and devices. OU Campus does not store page content in a database; rather, each page is stored as an XML file on the CMS server. It is compatible with Internet Explorer, Firefox, Google Chrome, and Safari. OU Campus' push technology architecture requires a separate database for some applications that use interactive content such as forms and surveys. These applications can be handled through the Live Delivery Platform (LDP), which provides a server-side module for plug-in application architecture. LDP is accessed and managed through OU Campus.|$|E
40|$|Wearable health {{technologies}} and fitness apps are increasingly interconnected <b>through</b> <b>APIs</b> (application programming interface) through which data from sensors are transferred, translated and interpreted. This paper builds on a close critical {{reading of the}} technical documentation {{of some of the}} most popular fitness APIs (Apple HealthKit, Fitbit, HealthGraph and Withings among others) and aims at establishing an understanding of how human bodies and their activities are conceptualised and measured as data <b>through</b> <b>APIs.</b> Departing from these empirical readings, the paper conceptualises fitness APIs as “health data superstructures” that to various extents render certain self-tracking and body-monitoring practices more feasible than others. Such a conceptualisation is important since it allows for further explorations of the limits and possibilities of how wearable technologies are designed, developed and used in conjunction with other apps and technologies...|$|E
40|$|In this deliverable, {{we present}} the Cupboard system for {{ontology}} publishing, sharing and reuse. This system {{is intended to}} support both ontology engineers and ontology users/practitioners. For the developers of ontologies, it offers a complete infrastructure to host their ontologies in online ontology spaces, providing mechanisms to describe, manage and effectively exploit these ontologies (<b>through</b> <b>APIs).</b> Furthermore, these ontologies are then exposed to the community...|$|E
40|$|Abstract. In this demo, {{we present}} the Cupboard system for {{ontology}} publishing, sharing and reuse. This system {{is intended to}} support both ontology engineers and ontology users/practitioners. For the developers of ontologies, it offers a complete infrastructure to host their ontologies in online ontology spaces, providing mechanisms to describe, manage and effectively exploit these ontologies (<b>through</b> <b>APIs).</b> Furthermore, these ontologies are then exposed to the community, providing users with a complete, friendly environment to find, assess and reuse ontologies. ...|$|E
40|$|Get {{primary and}} {{secondary}} data from the opencare project. 	Primary data refer to the online conversation (posts and comments). 	Secondary data refer to the ethnographic work done on the primary data (annotations and codes, or tags). You can also access these data <b>through</b> <b>APIs.</b> Learn more on data in opencare and get full APIs documentation: [URL] The project is ongoing. A second, more up-to-date version of this dataset will be uploaded onto Zenodo in late 2017...|$|E
30|$|The {{paradigm}} of cloud computing - which is itself based on web technology, programmability <b>through</b> <b>APIs</b> and virtualization - {{is likely to}} play {{a big role in}} future wireless programmable networks. There is already a lot of work on integration of SDN and cloud technology[10]. Future designers of programmable wireless devices will be well-served by exploiting the performance and scalability advantages offered by cloud computing in their designs. Already, there has been significant work in incorporating cloud technology into existing frameworks (as has been discussed in Section 4.4), and this trend looks set to continue well into the future.|$|E
30|$|The {{number of}} open {{specifications}} of middleware systems and middleware services is increasing. Despite their complexity, they are traditionally described <b>through</b> <b>APIs</b> (the operation signatures) and informal prose (the behaviour). This fact {{often leads to}} ambiguities, whilst making difficult {{a better understanding of}} what is actually described. In this paper, we adopt software architecture principles for structuring middleware specifications together with LOTOS for formalising their behaviour. The adoption of software architecture principles makes explicit structural aspects of the middleware. Meanwhile, the formalisation enables us to check behavioural properties of the middleware. In order to illustrate our approach, we present a LOTOS specification of the well-known object-oriented middleware CORBA..|$|E
40|$|Every day, each user {{produces}} {{and shares}} different contents on social networks. While developers can access such data <b>through</b> <b>APIs,</b> end users have less control on such information, since their access is {{mediated by the}} social application features. In order to fill this gap, we introduce FaceMashup, an EUD environment supporting the manipulation of the social network graph. Data types are represented through widgets containing the UI elements used in the social network application, which can be connected with {{each other through the}} drag and drop. We report on a user-test on the FaceMashup prototype, which shows a good acceptance of the environment by end-users...|$|E
40|$|Nowadays, a {{huge amount}} of {{information}} is available in the Linked Open Data (LOD) cloud. This paper reports the use of LOD to enrich mashup plat-forms, which are web tools implementing visual mechanisms to access, compose, modify and use data sources typically available <b>through</b> <b>APIs.</b> Even if many APIs are currently available, it often happens that, due to the specific and diverse end users’ information needs, no data source can satisfy such needs. This limitation may be overcome by introducing a polymorphic data source built upon the LOD datasets. Implementation in a mashup plat-form, as well as benefits of the polymorphic data source, are briefly present-ed. The paper concludes by discussing novel developments of this research...|$|E
40|$|AbstractThe {{number of}} open {{specifications}} of middleware systems and middleware services is increasing. Despite their complexity, they are traditionally described <b>through</b> <b>APIs</b> (the operation signatures) and informal prose (the behaviour). This fact {{often leads to}} ambiguities and makes difficult {{a better understanding of}} what is really described. In this paper, we adopt software architecture principles for structuring middleware together the LOTOS language for formalising their behaviour. The adoption of software architecture principles makes explicit structural aspects of the middleware. Meanwhile, the formalisation enables us to check behavioural properties of the middleware. In order to illustrate our approach, we present a LOTOS specification of the well-known object-oriented middleware CORBA and its transaction service...|$|E
40|$|Modern expert finding {{algorithms}} {{are developed}} {{under the assumption}} that all possible expertise evidence for a person is concentrated in a company that currently employs the person. The evidence that can be acquired outside of an enterprise is traditionally unnoticed. At the same time, the Web is full of personal information which is sufficiently detailed to judge about a person’s skills and knowledge. In this work, we review various sources of expertise evidence outside of an organization and experiment with rankings built on the data acquired from six different sources, accessible <b>through</b> <b>APIs</b> of two major web search engines. We show that these rankings and their combinations are often more realistic and of higher quality than rankings built on organizational data only...|$|E
40|$|The use of {{research}} impact metrics and analytics {{has become an}} integral component to many aspects of institutional assessment. Many platforms currently exist to provide such analytics, both proprietary and open source; however, the functionality of these systems may not always overlap to serve uniquely specific needs. In this paper, I describe a novel web-based platform, named Manifold, that I built to serve custom research impact assessment needs in the University of Minnesota Medical School. Built on a standard LAMP architecture, Manifold automatically pulls publication data for faculty from Scopus <b>through</b> <b>APIs,</b> calculates impact metrics through automated analytics, and dynamically generates report-like profiles that visualize those metrics. Work on this project has resulted in many lessons learned about challenges to sustainability and scalability in developing a system of such magnitude...|$|E
40|$|Social data is the computable data {{footprint}} of user {{participation in}} social media. It is produced through the far-reaching standardization {{of social interaction}} that allows users to perform daily and en masse hyper-stylized activities such as ‘tagging’, ‘following’ or ‘liking’. The data thus produced are piled up and processed. The outputs of these operations (e. g. similarity, popularity or trending scores) are carried back to users {{in the form of}} personalized suggestions, embedded into platform functioning and shared with third parties <b>through</b> <b>APIs</b> and other boundary spanning technologies, reinforcing the process through which social interaction is made the engine of social data production. These conditions set social data apart from data generated through automated technologies of data tracking and recording, and outline the distinct nature of the contribution it makes to the developments associated with big data...|$|E
30|$|A system {{capable of}} sifting through this deluge of real time user {{information}} for mentions of disease occurrence {{has a very}} high chance of detecting outbreaks far quicker than traditional surveillance approaches moreover {{at a fraction of}} the cost due to the fact that process elements like data collection can essentially be kept external to the surveillance process. Most modern social systems allow some form of access to their data <b>through</b> <b>APIs</b> (Application programming interfaces) 1 and barring the costs of API implementation the data is completely free as it is provided by unpaid users motivated by the need to communicate with each other in the form of status updates. In addition social APIs usually provide additional utilities like keyword and location based filtering making a lot easier to obtain fairly dense location specific samples for any topic of interest.|$|E
