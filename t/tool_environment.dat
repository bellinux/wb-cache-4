241|1394|Public
5000|$|TAPAAL, an {{integrated}} <b>tool</b> <b>environment</b> for modeling, validation and verification of Timed-Arc Petri Nets ...|$|E
5000|$|UPPAAL, an {{integrated}} <b>tool</b> <b>environment</b> for modeling, validation and verification of real-time systems modeled as networks of timed automata ...|$|E
5000|$|Roméo, an {{integrated}} <b>tool</b> <b>environment</b> for modeling, simulation and verification of real-time systems modeled as parametric, time and stopwatch Petri nets ...|$|E
40|$|<b>Tool</b> <b>environments</b> {{supporting}} {{the development of}} complex products need to be open and flexible. These requirements cannot be fulfilled in an adequate way by predefined coordination structures and interfaces. Based {{on the notion of}} component–oriented software development this paper presents a framework for open <b>tool</b> <b>environments.</b> Besides the runtime environment this framework provides language support for describing tool interconnections in an implementation–independent manner...|$|R
40|$|<b>Tool</b> <b>environments</b> {{supporting}} {{the development of}} complex products need to be open and flexible. These requirements cannot be fulfilled in an adequate way by predefined coordination structures and interfaces. This paper presents a framework for control integration in open <b>tool</b> <b>environments.</b> The approach {{is based on a}} component model which supports the description of tool interconnections in an abstract implementation–independent manner. ...|$|R
5000|$|Identifiability: Being able to {{identify}} all of the source, <b>tools,</b> <b>environment,</b> and other components {{that make up a}} particular release.|$|R
5000|$|Roméo is an {{integrated}} <b>tool</b> <b>environment</b> for modeling, validation and verification of real-time systems modeled as time Petri Nets [...] or stopwatch Petri Nets, extended with parameters.|$|E
50|$|UPPAAL is an {{integrated}} <b>tool</b> <b>environment</b> for modeling, validation and verification of real-time systems modeled as networks of timed automata, extended with data types (bounded integers, arrays etc.).|$|E
50|$|Considering {{the fact}} that leading ALM vendors are trying to build Integrated ALM {{platform}} around their clients' <b>tool</b> <b>environment,</b> their approaches differ significantly. Following are the three major approaches, their limitations, and advantages.|$|E
40|$|<b>Tool</b> <b>environments</b> {{supporting}} {{the development of}} complex products need to be open and flexible. These requirements cannot be fulfilled in an adequate way by predefined coordination structures and interfaces. Based {{on the notion of}} component [...] oriented software development this paper presents a framework for open <b>tool</b> <b>environments.</b> Besides the runtime environment this framework provides language support for describing tool interconnections in an implementation [...] independent manner. Keywords Tool integration, software composition, configuration language 1 INTRODUCTION The development of complex technical products requires the use of computer based tools. These tools provide services for the user to accomplish his tasks. For efficient use these tools must be integrated. <b>Tool</b> <b>environments</b> provide the required mechanisms for the integration. In order to describe the different dimensions of the integration, one usually identifies three aspects: data, control and presentation integration (Sche [...] ...|$|R
50|$|Social {{learning}} <b>tools</b> <b>environments</b> {{can help}} create connections between learners, teachers and knowledge {{that we are}} going to acquire.The environment can be either formal or informal.|$|R
40|$|<b>Tool</b> <b>environments</b> {{supporting}} {{the development of}} complex products need to be open and flexible. These requirements cannot be fulfilled in an adequate way by predefined coordination structures and interfaces. This paper presents a framework for control integration in open <b>tool</b> <b>environments.</b> The approach {{is based on a}} component model which supports the description of tool interconnections in an abstract implementation [...] independent manner. 1 Introduction The development of complex technical products requires the use of computer based tools. These tools provide services for users to accomplish their tasks. They support the modelling of the shape of a product, the adjustment of parameters or the simulation of load. For efficient use these tools must be integrated. <b>Tool</b> <b>environments</b> provide the required mechanisms for the integration. In order to describe the different dimensions of the integration, one usually identifies three aspects: data, control and presentation integration [1]. Data i [...] ...|$|R
50|$|CoreASM is an {{open source}} project (licensed under Academic Free License version 3.0) {{that focuses on the}} design of a lean {{executable}} ASM (Abstract State Machines) language, in combination with a supporting <b>tool</b> <b>environment</b> for high-level design, experimental validation, and formal verification (where appropriate) of abstract system models.|$|E
50|$|A good {{development}} <b>tool</b> <b>environment</b> {{is important}} to reduce total development time and cost. Users want to debug their application program under conditions that imitate the actual setup of their system. Because of that, the capability to debug a user program in an actual target system is required. This is known as in-circuit debugging. Furthermore, most new MCUs have nonvolatile memory such as flash memory so that programming code on the target system is also required. This is known as in-circuit programming.|$|E
50|$|Homogenization of the <b>tool</b> <b>environment</b> {{through an}} ALM tool - ALM tool chains cover the whole {{life-cycle}} {{of a system}} and manage all artefacts of the development process in a holistic approach. Issue trackers implementing the Volere requirements template have been used successfully in distributed environments. The advantage {{of this approach is}} that the homogenization of artefacts allows to manage and analyze them easily with dedicated tools of the ALM tool. The disadvantage is {{that it is necessary to}} implement the whole ALM tool chain. If introduced, it is difficult to replace specific tools in the tool chain.|$|E
50|$|The {{magazine}} {{is aimed at}} professional architects and other design professionals and enthusiasts with news, design, building technology, design <b>tools,</b> <b>environment,</b> and building culture sections. ArchitectureWeek features cutting-edge designs by leading international architects with high-resolution photos available to subscribers.|$|R
40|$|Abstract. The {{objective}} of this workshop was to discuss current <b>tools</b> and <b>environments</b> for learning object-oriented concepts and to share ideas and experiences about the usage of computer support to teach the basic concepts of object technology. Workshop participants presented current and ongoing research. During the discussions the participants developed a general “package ” of requirements for such <b>tools</b> and <b>environments,</b> which underlying pedagogical approaches could be applied, and how such <b>tools</b> and <b>environments</b> should look like. ...|$|R
40|$|OpenACC is a directive-based {{programming}} {{model for}} highly parallel systems, {{which allows for}} automated generation of portable GPU code. In this tutorial, the programming model is presented with examples, usage of the the associated <b>tools</b> <b>environment</b> is outlined, and strategies for performance optimization are incorporated in prepared programs...|$|R
40|$|Our {{overall goal}} is to ease the parallelization of {{applications}} on distributed-memory parallel processors. Part of our team is implementing parallel kernels common to industrially significant applications using High Performance Fortran (HPF) and the Message Passing Interface (MPI). They are assisted in this activity by a second group developing an integrated <b>tool</b> <b>environment</b> consisting of a parallelization support tool, a parallel debugging tool, and a performance monitor and analyzer. From close interaction {{the design of the}} tools is inherently application-driven: application developers define requirements and evaluate prototypes of the <b>tool</b> <b>environment.</b> This paper describes goals, achievements and perspectives of the project, illustrating with three application kernels how the <b>tool</b> <b>environment</b> assists in the parallelization process: development effort and resulting performance are discussed...|$|E
40|$|The work {{described}} here will convert the LHS program from the TPA environment to the PCSA <b>Tool</b> <b>environment.</b> The TPA environment is a standalone command line environment, and the PCSA <b>Tool</b> <b>environment</b> is a Windows/GUI interactive environment. The flat text input for the LHS {{program will be}} derived from the PCSA Tool dialog box fields. The output of the LHS code will be a flat text file that will be read by the PCSA Tool...|$|E
40|$|Cost {{estimation}} of changes to software systems is often inaccurate {{and implementation of}} changes is time consuming, cost intensive, and error prone. One reason for these problems is that relationships between documentation entities (e. g., between different requirements) are not documented at all or only incompletely. In this paper, we describe a constructive approach to support later changes to software systems. Our approach consists of a traceability technique and a supporting <b>tool</b> <b>environment.</b> The tracing approach describes which traces should be established in which way. The proposed <b>tool</b> <b>environment</b> supports {{the application of the}} guidelines in a concrete development context. The <b>tool</b> <b>environment</b> integrates two existing tools: a requirements management tool (i. e., RequisitePro) and a CASE tool (i. e., Rhapsody). Our approach allows traces to be established, analyzed, and maintained effectively and efficiently...|$|E
40|$|Object {{management}} systems (OMS) {{are central to}} software engineering <b>tools</b> and <b>environments.</b> These systems are responsible for recording and managing the various software artifacts (or objects) produced in the software development process. The way in which software objects are managed has direct impact {{on the degree of}} support provided by the <b>tools</b> and <b>environments.</b> In this paper, we present a comprehensive set of requirements for object management in software engineering <b>tools</b> and <b>environments,</b> analyse some of the major object {{management systems}} in terms of meeting these requirements, and suggest areas for further investigation and improvement. 1 Introduction Software engineering <b>tools</b> and <b>environments</b> assist software developers in carrying out various software development activities and maintaining the software artifacts (also referred to as software documents or software objects) produced in the software development process. Examples of software objects are system specifications, sy [...] ...|$|R
5000|$|... #Subtitle level 3: Computational Research and Engineering Acquisition <b>Tools</b> and <b>Environments</b> ...|$|R
40|$|Software {{engineering}} tools are indispensable for parallel and distributed program development, yet {{the desire to}} combine them to provide enhanced functionality has still to be realised. Existing <b>tool</b> <b>environments</b> integrate a number of tools, but do not achieve interoperability and lack extensibility. Integration of new tools can necessitate the redesign of the whole system. We describe the FIRST tool framework, its initial tool-set, classify different types of tool interaction and describe a variety of tool scenarios which {{are being used to}} investigate tool interoperability. 1 Introduction A variety of software {{engineering tools}} are now available for removing bugs and identifying performance problems, however these tools rely on different compilation options and have no way of interoperating. Integrated <b>tool</b> <b>environments</b> containing several <b>tools</b> do offer some degree of interoperability; they do, however, have the disadvantage that the set of tools provided is fixed and the [...] ...|$|R
40|$|We are {{currently}} developing a portable integrated <b>tool</b> <b>environment</b> for distributed-memory parallel processors (DMPPs) {{as part of}} the Joint CSCS [...] ETH/NEC Collaboration in Parallel Processing. As we design and implement a sequence of tool prototypes these are used and evaluated by a team of application developers. This close interaction allows rapid feedback, as requests from the applicationdevelopers for functionality enhancements can be promptly considered for inclusion in future tool designs and prototypes. Our <b>tool</b> <b>environment</b> consists of an extended High Performance Fortran (HPF) compiler, a performance monitor and analyzer, and a source-level debugger for distributed programs, all sharing a common user-interface. The recently-defined Message Passing Interface (MPI) serves as our low-level machine interface and allows portability independent of the target hardware architecture. The key features of the <b>tool</b> <b>environment</b> comprise HPF language extensions to allow dynamic data distribut [...] ...|$|E
40|$|The Joint CSCS-ETH/NEC Collaboration in Parallel Processing {{comprises}} {{the development of}} an integrated <b>tool</b> <b>environment</b> together with applications and algorithms for distributed memory parallel processors (DMPPs). Tool and application developers interact closely: the requirements of the tools are defined by the needs of the application developers, and once an application requirement becomes {{an integral part of the}} <b>tool</b> <b>environment,</b> the tools ease parallelization of similar applications and whole application classes. Additional features of the project are the use of a standardized DMPP high-level programming language (HPF) and low-level message passing interface (MPI). The <b>tool</b> <b>environment</b> integrates parallelization support, a parallel debugger, and a performance monitor and analyzer. Applications already investigated include some of those currently considered difficult to parallelize on DMPPs. In this paper we summarize the tool and application development efforts and show preliminar [...] ...|$|E
40|$|This paper {{deals with}} {{performance}} evaluation of parallel and distributed systems based on monitoring of concurrent interdependent activities. First a model is introduced for describing the dynamic behavior of computer systems {{in terms of}} events. Then, a distributed hardware/hybrid monitor system based on event driven monitoring and its <b>tool</b> <b>environment</b> SIMPLE are presented. We emphasize the <b>tool</b> <b>environment</b> as a prerequisite for successful performance evaluation. The <b>tool</b> <b>environment</b> for evaluating event traces, which integrates the data access interface TDL/POET {{and a set of}} evaluation tools for processing the data, makes evaluation independent of the monitor device(s) and the object system. It provides a problem oriented way of accessing event traces. 1. Introduction The characteristic feature of parallel and distributed computer systems is that they share load and common resources among several processing nodes in order to increase performance and reliability of the overall syste [...] ...|$|E
40|$|Within the {{creativity}} community, researchers and practitioners have developed and studied various support <b>tools</b> and <b>environments.</b> It {{is important to}} learn from these <b>tools</b> and <b>environments,</b> identifying requirements for improving the future support of creativity in design. In this paper, we focus on support for generating and interacting with external representations to facilitate shared understanding and common ground amongst stakeholders. In considering external representations, we distinguish between artifacts provided by the tools and boundary objects created by the participants. We evaluate {{the use of a}} particular creativity support tool: the Envisionment and Discovery Collaboratory (EDC). From this evaluation we identify requirements for future <b>tools</b> and <b>environments</b> to support creative design...|$|R
40|$|Conventional system architectures, {{development}} processes, and <b>tool</b> <b>environments</b> often produce systems which exceed cost {{expectations and}} are obsolete {{before they are}} fielded. This paper explores {{some of the reasons}} for this and provides recommendations for how we can do better. These recommendations are based on DoD and NASA system developments and on our exploration and development of system/software engineering tools...|$|R
5000|$|Ricky Martin's [...] "Livin' la Vida Loca" [...] (1999) was {{the first}} No. 1 single to be recorded, edited, and mixed fully within the Pro <b>Tools</b> <b>environment,</b> by Charles Dye and Desmond Child. In 2009, Pro Tools was used for {{creating}} the audio for the video games DJ Hero and Guitar Hero, using the modeling plug-in Eleven for the guitar sounds.|$|R
40|$|In {{this paper}} {{we present a}} <b>tool</b> <b>environment</b> for {{automatic}} code generation, in classic C and C++ languages, of signal processing algorithms using Kronecker products algebra formulations. The environment is written as Java applets to be accessed on the internet. In essence, we implement a <b>tool</b> <b>environment</b> based on Java, {{to aid in the}} analysis, design, modification and implementation of multidimensional fast Fourier transform (FFT) algorithms on hardware computational structures. In particular, the environment becomes useful in the FFT algorithm development process, identifying similarities and differences in the mathematical formulation of variants, in Kronecker products form, of FFT algorithms and the associated computational performance analysis...|$|E
40|$|Study of a {{contemporary}} operating {{system and its}} set of tools {{from the perspective of}} software professionals and system administrators. The course analyzes the system components and their interactions, the <b>tool</b> <b>environment,</b> and system administration issues such as configuration, installation, networking, security, and performance tuning...|$|E
40|$|Our {{goal is to}} {{ease the}} parallelization of {{applications}} on distributed-memory parallel processors. Part of our team is implementing parallel kernels common to industrially significant applications using High Performance Fortran (HPF) and the Message Passing Interface (MPI). They are assisted in this activity by a second group developing an integrated <b>tool</b> <b>environment,</b> Annai, consisting of a parallelization support tool, a debugger, and a performance monitor and analyzer. These two groups interact closely, with application developers defining requirements and evaluating prototypes of the <b>tool</b> <b>environment.</b> The Annai environment is unique in providing a suite of generalpurpose tools for scientific application development, encompassing comprehensive support for programming irregular problems and the debugging and tuning of HPF and/or MPI-based parallel programs. Addressing application developer requirements, while making leading-edge technology available in a genuinely-usable form, has [...] ...|$|E
40|$|Software tools {{supporting}} {{the design and}} analysis of complex software-intensive systems are highly desirable, since they enable earlier decision making about system realization. This paper presents a <b>tooling</b> <b>environment</b> that supports the design and performance analysis of time-critical component-based software architectures deployed on complex multiprocessor platforms. The <b>tooling</b> <b>environment</b> contains a set of integrated tools for (a) component storage and retrieval, (b) graphics-based design of software and hardware architectures, (c) performance analysis of the defined architectures and, (d) automated code generation. The cornerstone of the toolkit is a performance analyzer that provides efficient simulation of the designed architectures and enables design-time prediction of key performance properties like response time, data throughout, and usage of hardware resources (processor, memory and bus). For every architecture alternative, the performance predictions can be quickly obtained, thereby enabling a fast and yet broad design space exploration. We demonstrate the efficiency and robustness of this toolkit on a Car Radio Navigation benchmark case...|$|R
40|$|Knowledge {{engineering}} in AI planning {{is the process}} that deals with the acquisition, validation and maintenance of planning domain models, and the selection and optimisation of appropriate planning machinery to work on them. Our aim is to research and develop rigorous methods for the acquisition, maintenance and validation of planning domain models. We aim to provide a <b>tools</b> <b>environment</b> suitable for use by domain experts in addition to {{experts in the field}} of AI planning. In this paper we describe such a method and illustrate it with screen-shots taken from an implemented Graphical Interface for Planning with Objects system called GIPO. The GIPO <b>tools</b> <b>environment</b> has been built to support an object centred approach to planning domain modelling. The principal innovation we present in this paper is a process of specifying domain operators that abstracts away much of the technical detail traditionally required in their specification. Such innovations we believe could ultimately open up the possibility of bringing planning technology to a wider public...|$|R
40|$|Researchers {{as well as}} {{practitioners}} {{agree that}} the quality of a software product relies to a high degree {{on the quality of the}} software process. Therefore recent research efforts in software engineering focus on software process assessment and improvement (SPAI). Numerous approaches like the CMM, Bootstrap, SPICE, AMI were developed. An important factor influencing success and progress of the implementation of a SPAI approach in an organization is its software engineering <b>tools</b> <b>environment.</b> The aim of this paper is to determine a set of criteria concerning the assessment of the suitability of a <b>tools</b> <b>environment</b> for the promotion of CMM-based SPAI. We base our investigations on the 316 CMM Key Practices. We structure them according to the issues they address. For each issues cluster we determine the functionality to be provided and artifacts to be managed by a tool as assessment criteria. The degree of fulfillment of a certain criteria depends on if and how the associated function or [...] ...|$|R
