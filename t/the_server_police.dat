0|10000|Public
5000|$|Homages to Sonny Bonds {{appear in}} two places: {{the name of}} <b>the</b> <b>police</b> <b>server</b> is [...] "SONNY" [...] and [...] "Sonny Bonds" [...] also appears on the high score screens of the two arcade games in the Short Stop Bar (CD version only).|$|R
40|$|We {{consider}} a multi-priority, N-server, Poisson arrival, nonpreemptive queue, motivated by police applications. <b>The</b> number of <b>servers</b> requested by an arrival has a known priority dependent probability distribution. All servers requested by a customer must start service simultaneously; the servers' service times are independent and exponentially distributed with parameter μ, independent of priority, server identity or system state. In {{order to save}} available servers for higher priority customers, arriving customers of each lower priority are deliberately queued whenever <b>the</b> number of <b>servers</b> busy equals or exceeds a given priority-dependent cutoff number. Whenever all higher priority queues are empty, the longest waiting priority i customer will enter service the instant there is a service completion from a state having precisely N i - k + 1 servers busy, where k is <b>the</b> number of <b>servers</b> requested by <b>the</b> customer and N i is <b>the</b> <b>server</b> cutoff number for priority i. The queueing discipline is in a sense HOL by priorities. We derive the priority i waiting time distribution (in transform domain) and other system statistics. Illustrative computational results are given. priority queue, random number of <b>servers,</b> cutoff queue, <b>police,</b> <b>server</b> management...|$|R
5000|$|There {{are about}} 30 websites, such as Uriminzokkiri, {{run by the}} DPRK government. South Korean police have {{identified}} 43 pro-North Korean websites that have foreign-based <b>servers.</b> <b>The</b> <b>police</b> report that these websites encourage hostile attitudes towards South Korea and Western countries, and portray the DPRK in a positive light. According to The Dong-a Ilbo, foreign-based websites include the following: Joseon Tongsin (Korean News Service) and Guk-jeonseon in Japan, Unification Arirang in China, Minjok Tongsin in the United States, and twelve new pro-North Korean websites have launched, including the [...] "Korea Network". In August 2010, BBC News reported that an agency contracted by the North Korean government has fielded an official DPRK YouTube channel, Facebook and Twitter accounts for Uriminzokkiri. Both the Twitter and YouTube accounts are solely in Korean. The BBC reported, [...] "In a recent Twitter post, the North Koreans said the current administration in South Korea was 'a prostitute' of the US", though this wording may be a poor translation into English. Among some of the content on the official website is {{an image of a}} US soldier being followed by two missiles, along with various other cartoons, pictures and text, with largely anti-US and anti-South Korean sentiment. In September 2007 the [...]kp top-level domain was created. It contains websites connected to the North Korean government.|$|R
5000|$|<b>Servers</b> in <b>the</b> UK {{was seized}} by police in June 2005. An {{anonymous}} post on <b>the</b> Bristol Indymedia <b>server,</b> came to <b>police</b> attention for suggesting an [...] "action" [...] against a freight train carrying new cars {{as part of a}} protest against cars and climate change in the run up to that year's Gleneagles G8 summit. The police claimed that the poster broke the law by [...] "incitement to criminal damage", and sought access logs from <b>the</b> <b>server</b> operators. Despite being warned by lawyers that <b>the</b> <b>servers</b> were [...] "journalistic equipment" [...] and subject to special laws, the police proceeded with the seizure {{and a member of the}} Bristol Indymedia group was arrested. Indymedia was supported in this matter by the National Union of Journalists, Liberty and Privacy International, along with others. This incident ended several months later with no charges being brought by the police and the equipment returned.|$|R
5000|$|The client stores <b>the</b> <b>server's</b> {{response}} and sends {{a request for}} the file list of <b>the</b> <b>server's</b> jar file via XML-RPC. <b>The</b> <b>server</b> responds with a list (taken from <b>the</b> <b>server's</b> database).|$|R
50|$|For quota {{management}} the client sends CCR to <b>the</b> <b>server</b> requesting units and reporting consumption. <b>The</b> <b>server</b> grants units and charges the user.For simple debit/credit the client sends a CCR asking <b>the</b> <b>server</b> to credit/debit <b>the</b> user's account.For price inquiries the client ask <b>the</b> <b>server</b> what <b>the</b> {{price for a}} unit is, and <b>the</b> <b>server</b> responds with <b>the</b> price.|$|R
50|$|The basic setup of Address Book Server {{consist of}} clients {{periodically}} synchronising with <b>the</b> <b>server.</b> During synchronisation any changes (or the entire data set) is fetched form <b>the</b> <b>server,</b> then via Sync Services {{compared with the}} local records present on <b>the</b> <b>server.</b> Any differences between the local records and those received form <b>the</b> <b>server</b> are sent back to <b>the</b> <b>server</b> to update <b>the</b> central database.|$|R
30|$|Near {{connection}} round-trip time detection—After every packet sent by {{the client}} to <b>the</b> <b>server,</b> <b>the</b> <b>server</b> responses with an ACK packet to the last host in the connection chain. The last host then automatically sends an ACK packet back to <b>the</b> <b>server.</b> <b>The</b> RTT to the nearest host can then be calculated by investigating the time difference between <b>the</b> <b>server</b> sending <b>the</b> ACK and the client replying with its own ACK back to <b>the</b> <b>server.</b>|$|R
30|$|<b>The</b> {{application}} <b>server</b> {{does not}} communicate directly with users. It only receives requests from <b>the</b> web <b>server.</b> It pulls data required for each analysis from <b>the</b> data <b>server.</b> <b>The</b> data <b>server</b> receives requests from both <b>the</b> application <b>server</b> and <b>the</b> web <b>server.</b> Besides sending data to <b>the</b> application <b>server,</b> it also receives and stores all analysis status data and results. <b>The</b> web <b>server,</b> therefore, retrieves all analysis informations from <b>the</b> data <b>server</b> rather than <b>the</b> application <b>server.</b>|$|R
5000|$|<b>The</b> <b>server</b> usually then sends {{back its}} {{identification}} {{in the form}} of a digital certificate. The certificate contains <b>the</b> <b>server</b> name, <b>the</b> trusted certificate authority (CA) and <b>the</b> <b>server's</b> public encryption key.|$|R
50|$|<b>The</b> <b>server</b> keeps <b>the</b> {{necessary}} {{state in}} memory of the client state of the page. In this way, when any request hits <b>the</b> <b>server</b> (usually user actions), <b>the</b> <b>server</b> sends <b>the</b> appropriate HTML and/or JavaScript with the concrete changes to bring the client to the new desired state (usually adding/deleting/updating a part of the client DOM). At the same time, <b>the</b> state in <b>server</b> is updated. Most of the logic is executed on <b>the</b> <b>server,</b> and HTML is usually also rendered on <b>the</b> <b>server.</b> In some ways, <b>the</b> <b>server</b> simulates a web browser, receiving events and performing delta changes in server state which are automatically propagated to client.|$|R
50|$|<b>Servers</b> are <b>the</b> {{cities where}} you can rumble. Each server has its own color, a {{different}} lay-out, and contains stores and shops. There are no unique stores for different servers, instead stores are constant. Each server also has its own unique music from Blood Music. There are 7 FIRA <b>Servers</b> in total; <b>The</b> Liberties <b>Server,</b> <b>The</b> Strip <b>Server,</b> <b>The</b> Miyako <b>Server,</b> <b>The</b> Dragon <b>Server,</b> <b>The</b> Memphis <b>Server,</b> <b>The</b> Valhalla <b>Server,</b> and <b>the</b> Hide-Park <b>Server.</b> <b>The</b> respective cities are New York, Las Vegas, Tokyo, Hong Kong, Cairo, Stuttgart, and London.|$|R
5000|$|... "The Chat Server" [...] is now run and {{administrated}} by <b>the</b> <b>server</b> operator. <b>The</b> <b>server</b> {{operator controls}} all the day-to-day actions of <b>the</b> <b>server</b> {{and no longer}} requires the Hub to function in {{the case that the}} hub goes down for any reason. If <b>The</b> Chat <b>Server</b> were to go down, however, and the administrator did not declare a new server to jump to, the users would all be kicked off <b>the</b> <b>server</b> {{and that would be the}} end of their chatting experience until <b>the</b> <b>server</b> returned or they chose a different server.|$|R
50|$|<b>The</b> <b>server</b> {{software}} is only supplied with <b>the</b> <b>server</b> versions of Windows.|$|R
30|$|Step 9 – the {{arbitrator}} sends an OK {{message to}} <b>the</b> <b>server.</b> If <b>the</b> <b>server</b> receives an OK message from all n arbitrators, <b>the</b> <b>server</b> continues to <b>the</b> communication phase, otherwise, the algorithm halts.|$|R
50|$|Server Immunity: If after <b>the</b> <b>server</b> throws <b>the</b> {{balls to}} two {{different}} players, both players choose to throw their balls back to <b>the</b> <b>server,</b> and <b>the</b> <b>server</b> {{does not make}} the catch, they aren't charged with an out, and get the chance to serve again. If <b>the</b> <b>server</b> does make <b>the</b> catch, play continues as usual.|$|R
5000|$|The {{current point}} score is {{announced}} orally before each point by the judge, or by <b>the</b> <b>server</b> {{if there is}} no judge. When stating <b>the</b> score, <b>the</b> <b>server's</b> score is stated first. If <b>the</b> <b>server</b> (or <b>the</b> judge) announces the score as [...] "30-love", for example, it means that <b>the</b> <b>server</b> has won two points and the receiver none.|$|R
30|$|To better {{evaluate}} {{the impact of}} our system, we measure both CPU and memory use on <b>the</b> <b>server.</b> <b>The</b> experiments ran with <b>the</b> <b>server</b> deployed on PlanetLab yielded inconclusive results, since during each execution <b>the</b> <b>server</b> node could be running tasks from other virtual machines. Therefore, we present the results from experiments running the N-Gram application that used a local machine as <b>the</b> <b>server.</b>|$|R
5000|$|Information on <b>the</b> <b>server</b> {{expectations}} and capabilities (capability of <b>the</b> <b>server</b> for connection hijacking).|$|R
50|$|When {{a client}} sends back a TCP ACK packet to <b>the</b> <b>server</b> in {{response}} to <b>the</b> <b>servers</b> SYN+ACK packet, <b>the</b> client MUST (according to the TCP spec) use n+1 in the packets Acknowledgement number, where n is the initial sequence number sent by <b>the</b> <b>server.</b> <b>The</b> <b>server</b> then subtracts 1 from the acknowledgement number to reveal the SYN cookie sent to the client.|$|R
5000|$|DDM {{messages}} {{transmitted to}} <b>the</b> <b>Server</b> Communications Manager are passed to <b>the</b> <b>Server</b> Agent on <b>the</b> path {{specified by the}} message, and it forwards the messages to the SRM on the same path. If <b>the</b> <b>Server</b> Agent is interacting with a single client on a single path, this is straightforward. However, <b>the</b> <b>Server</b> Agent can interact with multiple clients on multiple paths.|$|R
50|$|<b>The</b> {{client and}} <b>server</b> {{communicate}} by sending plain-text (ASCII) messages. The client sends requests to <b>the</b> <b>server</b> and <b>the</b> <b>server</b> sends responses.|$|R
25|$|When using session tickets, <b>the</b> TLS <b>server</b> stores its session-specific {{state in}} a session ticket and sends the session ticket to the TLS client for storing. The client resumes a TLS session by sending the session ticket to <b>the</b> <b>server,</b> and <b>the</b> <b>server</b> resumes <b>the</b> TLS session {{according}} to the session-specific state in the ticket. The session ticket is encrypted and authenticated by <b>the</b> <b>server,</b> and <b>the</b> <b>server</b> verifies its validity before using its contents.|$|R
30|$|After {{completing}} the above-stated procedure, {{it was possible}} to place the application and <b>the</b> <b>server</b> part in <b>the</b> VSB PC. To do this it, was necessary to export the application and <b>the</b> <b>server</b> part. <b>The</b> export of <b>the</b> <b>server</b> part was implemented using the Eclipse development environment. In order to place <b>the</b> <b>server</b> part to <b>the</b> Apache Tomcat application <b>server,</b> <b>the</b> option ‘export to a war file’ was selected because this file type supports <b>the</b> aforementioned application <b>server.</b>|$|R
5000|$|Reset <b>the</b> <b>server</b> (in case <b>the</b> <b>server</b> doesn't respond anymore via {{the normal}} network card) ...|$|R
50|$|Microsoft {{has been}} reorganized by Satya Nadella, putting <b>the</b> <b>Server</b> and System Center teams together. Previously, <b>the</b> <b>Server</b> team was more closely {{aligned with the}} Windows client team. The Azure team is also working closely with <b>the</b> <b>Server</b> team.|$|R
5000|$|<b>The</b> <b>server</b> {{attempts}} to compute H(pwd), where pwd is the password supplied. If H(pwd) produces the first password (<b>the</b> one <b>the</b> <b>server</b> has stored), then the authentication is successful. <b>The</b> <b>server</b> will then store pwd {{as the current}} reference.|$|R
5000|$|Service request: A client [...] sends {{a service}} request to <b>the</b> <b>server.</b> If <b>the</b> <b>server</b> load is normal, the client's request is {{serviced}} as usual; if <b>the</b> <b>server</b> is overloaded, then it proceeds {{to the initial}} puzzle generation step.|$|R
5000|$|The local {{operating}} system on <b>the</b> <b>server</b> machine passes <b>the</b> incoming packets to <b>the</b> <b>server</b> stub.|$|R
25|$|<b>The</b> <b>server</b> usually then sends {{back its}} {{identification}} {{in the form}} of a digital certificate. The certificate contains <b>the</b> <b>server</b> name, <b>the</b> trusted certificate authority (CA) that vouches for the authenticity of the certificate, and <b>the</b> <b>server's</b> public encryption key.|$|R
50|$|Administrating <b>the</b> <b>server</b> {{from within}} {{requires}} a user {{to be given}} administrator rights, or can also be done by logging into the SuperUser account. Administrators within <b>the</b> <b>server</b> can add or edit rooms, manage users, and view <b>the</b> <b>server's</b> information.|$|R
5000|$|In active mode, {{the client}} starts {{listening}} for incoming data connections from <b>the</b> <b>server</b> on port M. It sends the FTP command PORT M to inform <b>the</b> <b>server</b> on which port it is listening. <b>The</b> <b>server</b> then initiates a data channel {{to the client}} from its port 20, <b>the</b> FTP <b>server</b> data port.|$|R
40|$|Abstract. The {{purpose of}} this article is to design and {{implement}} a XMPP-Based C/S system in which <b>the</b> <b>server</b> pushes information to the client actively. By realizing the client to connect to <b>the</b> <b>server,</b> client registration, <b>the</b> client to login <b>the</b> <b>server</b> and <b>the</b> <b>server</b> to push messages to client 4 core functions through XMPP, this article accomplished the core of a push system. In addition, the use of uninterrupted heartbeat package maintains a long connection, ensuring the client and <b>the</b> <b>server</b> connection. This article has important significance on future mobile push system research...|$|R
50|$|The {{defender of}} a served {{the ball is}} called <b>the</b> <b>server.</b> <b>The</b> <b>server</b> rolls <b>the</b> object ball {{horizontally}} from the shooter, {{from one side to}} <b>the</b> other. <b>The</b> <b>server</b> must roll <b>the</b> ball on {{the opposite end of the}} table between the first and third dot, from either the left or the right side of the shooter. A mis-serve is any ball rolled by <b>the</b> <b>Server</b> that goes out of the bounds of the first and third dot. Three mis-serves in a row results in a letter for <b>the</b> <b>server.</b>|$|R
30|$|Step 5 – {{the user}} {{forwards}} the message {{received from the}} CA in Step 4 to <b>the</b> <b>server.</b> <b>The</b> message contains the commitment C, the CA’s signatures on the user verification key, and the CA’s signatures on <b>the</b> ToU. <b>The</b> <b>server</b> verifies all <b>the</b> signatures and the ToU. If <b>the</b> <b>server</b> can not verify the signatures, then <b>the</b> <b>server</b> sends an error message and the algorithm halts. Note that the commitment C will be used by <b>the</b> <b>server</b> only {{in case of a}} violation of the ToU in order to check the authenticity of the shares which will be received from the arbitrators.|$|R
5000|$|Puzzle verification: when <b>the</b> <b>server</b> {{receives}} {{a request from}} client [...] with a puzzle answer ( [...] , [...] ) attached, it first checks to see if [...] {{is equal to the}} [...] it computed using the formula for [...] If so, <b>the</b> <b>server</b> computes [...] by repeatedly using the formula for , and verifies that [...] is equal to [...] If both hash values are valid, <b>the</b> <b>server</b> allocates resources to process the client's request. Since <b>the</b> <b>server</b> knows <b>the</b> shared keys , it can compute the chain of hashes [...] without contacting any tour guide. A loose time synchronization between <b>the</b> <b>server</b> and tour guides is required in order to compute the same hash value at <b>the</b> <b>server</b> and tour guides.|$|R
