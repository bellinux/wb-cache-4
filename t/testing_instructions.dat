17|424|Public
5000|$|Taylor Electric Company {{provided}} the [...] "Better Board", including {{floppy disk drive}} interface enhancements, enhancements to PFM, and corrections to the original assembly and <b>testing</b> <b>instructions</b> bundled with the Big Board.|$|E
5000|$|The [...] "Break" [...] {{flag of the}} {{processor}} {{is very different from}} the other flag bits. It has no flag setting, resetting, or <b>testing</b> <b>instructions</b> of its own, and is not affected by the PHP and PLP instructions. It exists only on the stack, where BRK and PHP always write a 1, while IRQ and NMI always write a 0.|$|E
5000|$|A {{few months}} later, Hans Buwalda wrote about a similar {{approach}} he had been using that he called [...] "soap opera testing". Like television soap operas these tests were both exaggerated in activity and condensed in time. The key to both approaches was to avoid step-by-step <b>testing</b> <b>instructions</b> with expected results and instead replaced them with a narrative that gave freedom to the tester while confining {{the scope of the}} test.|$|E
30|$|Pilot <b>test</b> <b>instruction</b> before completion.|$|R
5000|$|<b>TEST</b> <b>{{instructions}}</b> (equivalent to AND instructions without storing the result).|$|R
5000|$|... the <b>TEST</b> <b>{{instruction}}</b> (equivalent to the AND instruction without storing the result).|$|R
5000|$|Rather than showing users a {{rough draft}} and asking, [...] "Do you {{understand}} this?", usability testing involves watching {{people trying to}} use something for its intended purpose. For example, when <b>testing</b> <b>instructions</b> for assembling a toy, the test subjects {{should be given the}} instructions and a box of parts and, rather than being asked to comment on the parts and materials, they are asked to put the toy together. Instruction phrasing, illustration quality, and the toy's design all affect the assembly process.|$|E
50|$|Retrospective {{episodic memory}} is {{the memory of}} moments from the past. It is {{frequently}} used in studies of Alzheimer patients and testing their dementia. A study by Livner et al. (2009) compared {{the effect of the}} disease on both prospective and retrospective memory. In this case the episodic memory being tested was the ability to remember the <b>testing</b> <b>instructions.</b> To test retrospective memory participants were presented with a list of nouns that had been divided into four categories. The results of retrospective memory were divided into three sections: number of categories, number of items remembered and forgetting ratio, in order to look at the three separate process in creating memory (encoding, retrieval, storage). Using their results and knowledge of episodic memory the researchers were able to find a pattern of functional impairments in the brain.|$|E
40|$|This {{document}} {{presents the}} guidelines for anti-ganglioside antibody testing {{that have been developed}} following a consensus process built on questionnaire-based surveys, internet contacts, and discussions at workshops of the sponsoring Italian Association of Neuroimmunology (AINI) congresses. Main clinical information on dysimmune peripheral neuropathies, indications and limits of anti-ganglioside antibody <b>testing,</b> <b>instructions</b> for result interpretation, and an agreed laboratory protocol (Appendix) are reported for the communicative community of neurologists and clinical pathologists...|$|E
40|$|If {{children}} fail {{to understand}} <b>test</b> <b>instructions,</b> measurements of their competence may be unfair and invalid. This is especially relevant for students with special educational needs (SEN) because they face greater challenges in comprehending instructions. Two interventions were designed to facilitate the comprehension of test requirements by presenting intensified instructions and to enhance students’attention by engaging them in physical activity before receiving the <b>test</b> <b>instructions.</b> Three-hundred forty-eight students with SEN aged 8 – 12 years {{were randomly assigned to}} an experimental condition or a control group. Even after controlling for relevant variables (reading speed, basic cognitive skills), students participating in the interventions performed better in a reading test than controls. As hypothesized, the intensified <b>test</b> <b>instructions</b> reduced the number of responses that were not compliant with instructions. In conclusion, this study shows the importance of adapting <b>test</b> <b>instructions</b> for students with SEN, and it proposes interventions that can be implemented in other assessments...|$|R
2500|$|... if = return [...] // if ZF is 0, <b>test</b> <b>instruction</b> {{resulted}} in 0 and MSB is not set.|$|R
5000|$|... (b) Adult {{education}} services, including adult basic education, adult general education, adult secondary education, and General Educational Development <b>test</b> <b>instruction.</b>|$|R
30|$|Children are: (a) age 5 to 12  years inclusive; (b) in GMFCS Levels II or III; (c) able {{to follow}} <b>testing</b> <b>instructions,</b> and {{participate}} in a minimum of 30  min of active PT; (d) able to reliably signal pain, fear and discomfort; (e) have passive range of motion (ROM) of hips and knees within minimum range requirement for Lokomat (hip and knee flexion contracture ≤ 10 °, and knee valgus ≤ 40 °); and (d) able to commit to attendance of twice weekly for eight weeks (to support the primary efficacy analysis).|$|E
40|$|Psychological and neuropsychological {{assessment}} in South Africa currently faces various challenges: most prominent {{is the need}} for appropriately standardised tests. The absence of adequate standardisations and norms currently hampers practitioners ’ confidence in administering tests in South Africa. We aimed to conduct a preliminary standardisation of the Wisconsin Card Sorting Test (WCST) for Setswana-speaking university students. The <b>testing</b> <b>instructions</b> were translated into Setswana and 93 subjects were assessed using a computerised version of the WCST. Regression analysis indicated that gender, age, and level of education had no influence on subjects ’ WCST sub-scores, except fo...|$|E
40|$|Recent {{software}} systems {{contain a}} lot of functions to provide various services. According to this tendency, software testing becomes more difficult than before and cost of testing increases so much, since many test items are required. In this paper, we propose and discuss such a new selective software testing method that is constructed from previous testing method by simplifying testing specification. We have presented, in the previous work, a selective testing method to perform highly efficient software testing. The selective testing method has introduced an idea of functional priority testing and generated test items according to their functional priorities. Important functions with high priorities are tested in detail, and functions with low priorities are tested less intensively. As a result, additional cost for generating <b>testing</b> <b>instructions</b> becomes relatively high. In this paper, {{in order to reduce}} its cost, we change the way of giving information with respect to priorities. The new method gives the priority only rather than generating <b>testing</b> <b>instructions</b> to each test item, which makes the testing method quite simple and results in cost reduction. Except for this change, the new method is essentially the same as the previous method. We applied this new method to actual development of software tool and evaluated its effectiveness. From the result of the application experiment, we confirmed that many crucial faults can be detected by using the proposed method...|$|E
40|$|TIS is an instruction-level {{methodology}} for processor core self-testing that enhances instruction set of a CPU with <b>test</b> <b>instructions.</b> Since the functionality of <b>test</b> <b>instructions</b> {{is the same}} as the NOP instruction, NOP instructions can be replaced with <b>test</b> <b>instructions.</b> Online <b>testing</b> can be accomplished without any performance penalty. TIS tests different parts of the processor and detects stuck-at faults. This method can be employed in offline and online testing of single-cycle, multicycle and pipelined processors. But, TIS is more appropriate for online testing of pipelined architectures in which NOP instructions are frequently executed because of data, control and structural hazards. Running <b>test</b> <b>instructions</b> instead of these NOP instructions, TIS utilizes the time that is otherwise wasted by NOPs. In this article, two different implementations of TIS are presented. One implementation employs a dedicated hardware modules for test vector generation, while the other is a software-based approach that reads test vectors from memory. These two approaches are implemented on a pipelined processor core and their area overheads are compared. To demonstrate the appropriateness of the TIS test technique, several programs are executed and fault coverage results are presented...|$|R
50|$|In the x86 {{assembly}} language, the <b>TEST</b> <b>instruction</b> {{performs a}} bitwise AND on two operands. The flags SF, ZF, PF are modified while {{the result of}} the AND is discarded. The OF and CF flags are set to 0, while AF flag is undefined. There are 9 different opcodes for the <b>TEST</b> <b>instruction</b> depending on the type and size of the operands. It can compare 8-bit, 16-bit, 32-bit or 64-bit values. It can also compare registers, immediate values and register indirect values.|$|R
50|$|FEAST {{tests are}} {{designed}} for beginners with no background in ATC. The <b>tests</b> <b>instructions</b> are very detailed and ensure that everything is explained before the tests start.|$|R
40|$|The {{purpose of}} this study Was to {{investigate}} the effects of hypothesis <b>testing</b> <b>instructions</b> compared to brief instructions on the speed of shift problem solution of grade school age subjects, in order to provide information on the development of hypothesis testing behavior in children and the sampling characteristics of hypothesis testing in these younger subjects. A second purpose was to apply models of analysis suggested by quantitative models of concept Identification to the data from a traditional shift study With children, in order to provide some information regarding the processes which result in concept acquisition. Comparison of post-shift solution rates revealed that the effect of "-he detailed instructions was to decrease the difference between reversal (R) and non-reversal (NR) shifts in the predicted direction, and R shifts were still solved more quickly tha...|$|E
40|$|Abstract. In this paper, I {{describe}} how a cognitive model {{was used as}} a simulated student to help design lessons for training circuit board assemblers. The model was built in the Soar cognitive architecture, and was initially endowed with only an ability to learn instructions and prerequisite knowledge for the task. Five lessons, and a total of 81 instructions for teaching expert assembly were developed by iteratively drafting and <b>testing</b> <b>instructions</b> with the simulated student. The resulting instructions were in a canonical form, so they were embellished to create humanly palatable lessons using qualitative insights from the simulated student’s model of learning from instruction. The constraints imposed by Soar exposed where learning can be difficult for students. During the design process, six types of problems were found and corrected. The paper concludes by reviewing some interesting characteristics of a cognitive architecture-based simulated student...|$|E
40|$|When solving multiple-choice items (MCI) in the {{objective}} tests of achievement (abilities or attainment), respondents use different strategies {{when dealing with}} items which they find to be too difficult to be solved. Some {{studies have shown that}} answering to such items is not dependent only on cognitive factors, but the results are not entirely unisonant about how the individual differences in the structure of personality and intelligence influence the level of guessing proneness. The participants were put in the position to face some MCI in an &# 39;erudition test&# 39; with no correct answer at all. Then, the distinction was made between the subjects who were more and those who were less prone to guess when trying to answer such items. Differences in the structure of personality according to the Big Five model were established. Because of the hypothesised relationship between intellectual abilities and guessing in MCI, general intelligence (g) was also controlled for. The results showed that guessing proneness is one of the personality traits, which should not be neglected in MCI test applications, especially when testing abilities. One of the possibilities to control its influence would be to provide exact <b>testing</b> <b>instructions</b> for all participants...|$|E
40|$|Self-testing {{manufacturing}} defects in a system-on-a-chip (SOC) by running test programs using a programmable core has several potential benefits including, at-speed testing, low DfT overhead due to elimination of dedicated test circuitry and better power and thermal management during testing. However, such a self-test strategy might require a lengthy test program {{and might not}} achieve a high enough fault coverage. We propose a DfT methodology to improve the fault coverage and reduce the test program length, by adding <b>test</b> <b>instructions</b> to an on-chip programmable core such as a microprocessor core. This paper discusses a method of identifying effective <b>test</b> <b>instructions</b> which could result in highest benefits with low area/performance overhead. The experimental results show that with the added <b>test</b> <b>instructions,</b> a complete fault coverage for testable path delay faults can be achieved with a greater than 20 % reduction in the program size and the program runtime, {{as compared to the}} case without instruction-level DfT. 1...|$|R
50|$|DIALANG offers {{separate}} {{test for}} reading, writing, listening, grammatical structures and vocabulary. DIALANG provides <b>test</b> <b>instructions,</b> controls, help pages, explanations, self-assessment statements, test results, feedback and advice in all 14 languages.|$|R
50|$|The test {{is finally}} produced. Trial {{questions}} are included and various {{versions of the}} test are prepared to avoid cheating. The test is printed in booklets that include <b>test</b> <b>instructions</b> and <b>test</b> items.|$|R
40|$|SUMMARY In {{order to}} respond to the active market’s needs for {{software}} with various new functions, the system testing must be completed within a limited period. Additionally, important faults, which are closely related to essential functions for users or the target system, have to be removed, preferably in system testing. Many techniques have been proposed to date for effective software testing. Among them, selective software testing {{is one of the most}} cost effective techniques. However, most of the previous techniques cannot be applied to short-term development and initial development of software with various new functions because much cost is needed for their testing preparation. In this paper, we propose a new method for selective system testing in which priorities assigned to functions play an essential role in the execution of testing. The priorities are determined based on the evaluation results of three metrics for functions: the frequency of use, the complexity of use scenario, and the fault impact to users. Detailed <b>testing</b> <b>instructions</b> are assigned to test items with high priority, and short and ordinal instructions are assigned to those with low priority. The difference in the volume of testing instruction controls the effort of checking test items. As a result of experimental application to actual software testing in a certain company, we have confirmed that the proposed selective system testing can detect both fatal faults related to key functions and critical faults for the system. key words: Software testing, selective testing, prioritization 1...|$|E
40|$|Modern {{synthetic}} gene regulatory networks emerge from iterative design-build-test cycles that encompass the decisions and actions necessary to design, build, and test target genetic systems. Historically, such cycles {{have been performed}} manually, with limited formal problem-definition and progress-tracking. In recent years, researchers have devoted substantial effort to define and automate many sub-problems of these cycles and create systems for data management and documentation that result in useful tools for solving portions of certain workflows. However, biologists generally must still manually transfer information between tools, a process that frequently results in information loss. Furthermore, since each tool applies to a different workflow, tools often will not fit together in a closed-loop and, typically, additional outstanding sub-problems still require manual solutions. This thesis describes an {{attempt to create a}} tool that harnesses many smaller tools to automate a fully closed-loop decision-making process to design, build, and test synthetic biology networks and use the outcomes to inform redesigns. This tool, called Phoenix, inputs a performance-constrained signal-temporal-logic (STL) equation and an abstract genetic-element structural description to specify a design and then returns iterative sets of building and <b>testing</b> <b>instructions.</b> The user executes the instructions and returns the data to Phoenix, which then processes it and uses it to parameterize models for simulation of the behavior of compositional designs. A model-checking algorithm then evaluates these simulations, and returns to the user a new set of instructions for building and testing the next set of constructs. In cases where experimental results disagree with simulations, Phoenix uses grammars to determine where likely points of design failure might have occurred and instructs the building and testing of an intermediate composition to test where failures occurred. A design tree represents the design hierarchy displayed in the user interface where progress can be tracked and electronic datasheets generated to review results. Users can validate the computations performed by Phoenix by using them to create sets of classic and novel temporal {{synthetic gene}}tic regulatory functions in E. coli. 2016 - 12 - 31 T 00 : 00 : 00...|$|E
40|$|Because many errors {{still exist}} in {{information}} systems for organizations, professional companies like CEPO {{are needed for}} testing information systems on their fit to the organization. To do so, one usually applies a testing framework. The existing (CEPO-way) framework {{is the result of}} ten years of experience. The DEMO methodology (Dietz [1]) is a methodology that has proven itself successful in modelling organizations. DEMO is a powerful tool for identifying all important transactions of an organization (as well as communication with external actors). From this point of view, it could be possible to use DEMO as an aid to check the completeness of an information system, i. e. whether it covers the essential business processes. Note that the coverage need not be full; in particular for small and medium-sized enterprises it may be partial. The existing CEPO-way framework is based on the DEMO methodology, but on only one model. In this study two models were added. The new, so-called DEMO-way, framework was discussed and one test case was used to demonstrate the added value. The new framework is supported by a tool that was built by the author, DEMO-way Script Creator (DSC tool). This tool is a valuable addition to the derivation of testing scripts, because the process model as well as the state model can be placed into the scripts with little effort. Several criteria were determined at the start of this study in order to evaluate the use of extra DEMO models in the framework: development time, walkthrough time, understandability, reproduction possibilities and lacking functionality / error detection. Ultimately, the DEMO-way scored better for many of these criteria, especially the detection of lacking functionality / errors in information systems. Although the DEMO testing script encompasses more <b>testing</b> <b>instructions</b> than the CEPO testing script, the testers did not spend more time walking through the scripts, due to more detailed navigation. Therefore, the recommendation is to start using the two extra DEMO models in combination with DSC tool. Electrical Engineering, Mathematics and Computer Scienc...|$|E
40|$|Waste {{pretreatment}} and immobilization {{requires the}} tank waste to be retrieved. Retrieval from tanks may require dilution. This test determines {{the effects of}} dilution on the mass of solids and their composition. This test plan gives <b>test</b> <b>instructions,</b> example data sheets, a waste compatibility review, and a waste stream fact sheet...|$|R
30|$|The three deleted {{items were}} ‘The more I study for an English test, the more {{confused}} I get’ (FLCAS 12); ‘I have less difficulty than average {{college students in}} getting English <b>test</b> <b>instructions</b> straight’ (CTAS 1); ‘During the CET- 4, I {{have the feeling that}} I am not doing well’ (CTAS 12).|$|R
5000|$|Right to {{equitable}} recruitment, admissions, readmissions, <b>testing,</b> education, <b>instruction</b> {{and assessment}} ...|$|R
40|$|This {{incorporates}} the features and bug fixes from the July 18, 2014 sprint. It was deployed to www. betydb. org on August 1, 2014. Major Changes! Administrators {{need to do}} database migrations, update their database. yml file, add the PostGIS extension to their database and possibly install new packages to support PostGIS! In the best case scenario, the following steps should suffice {{to carry out the}} upgrade: Add the PostGIS extension to your PostgreSQL installation if needed. Run psql -d bety -c 'CREATE EXTENSION postgis;' to add PostGIS to your copy of the bety database. (If you aren't yourself a superuser for your PostgreSQL installation, add the -U flag to this command, e. g. -U postgres. Or possibly run using sudo: sudo -u postgres psql [...] ) If you wish to be able to run RSpec tests, also add the PostGIS extension to template 1. (Repeat the above command with "template 1 " in place of "bety".) Modify your config/database. yml file by replacing each "adapter: postgresql" line by "adapter: postgis". Also, if you created a section for the test_js environment, you may eliminate it. This environment is no longer used. Run the bundler to install the new PostGIS-related gems: bundle install (Note: If you have trouble installing the RSpec test-related gems (capybara-webkit in particular can be difficult), you can run the bundler with the [...] without option to skip gems only needed by the test environment: bundle install [...] without test. This is a "remembered" option, and to undo it, you will need to run bundle config [...] delete without. Alternatively, you can simply comment out problem test-related gems in your copy of the Gemfile. For example, if capybara-webkit installation is a problem, simply comment out that line. You will still be able to run RSpec on the tests that don't require it. See the testing wiki at [URL] for details.) Run the database migrations for your development and/or production database: rake db:migrate and/or RAILS_ENV=production rake db:migrate Restart your rails server (or run touch tmp/restart. txt if running under apache). Release Highlights The advanced search page now supports searching trait and yield data by the author or year of the associated citation. The database and Rails software now supports PostGIS. All rspec tests now pass when run in the default testing environment, which now includes capybara-webkit for running Javascript-related tests. The test_js environment is no longer supported. <b>Testing</b> <b>instructions</b> have been greatly simplified. See the testing wiki at [URL] for details. Summary of Changes Database Changes Administrators need to do database migrations! The database version for this release is 20140708232320. The database now uses the PostGIS extension. The the lat, lon, masl, and espg columns have been eliminated from the sites table. Location information is now represented by the new "geometry" column, which has type "geometry", at type only available under PostGIS. New Features Non-administrative users can now edit their own user profile. Minor Improvements The "Sites >>" link has been removed from the Traits and Yields listing pages since it doesn't fit with the usual data-entry workflow. The species view page has been correctly styled to be consistent with other pages of the site and has been greatly simplified. The Sites list page has been updated to be consistent with other list pages, combining the various action controls into a single "Actions" column, and using buttons rather than links for the controls. Associated covariates (if any) are now listed on the trait show page. Unlinking covariates from a trait now works correctly and is much easier. Statistics for traits and yields now appear in a single column in an easy-to-read form on the traits and the yields index pages. Numerous RSpec tests have been added. The feedback tab has been made less obtrusive. Bug Fixes Minor problems causing some of the RSpec tests to fail when run with capybara-webkit enabled have been fixed. All tests now pass when run in the default "test" environment. The Workflows listing page is now viewable. The Methods listing is now viewable by both Administrators and Managers, and the link to the listing does not appear for users with lesser privileges. Status of RSpec Tests All tests now pass when run in the default environment and can be run using the command rspec Complete details for running the rspec tests are on the updated Wiki page at [URL]...|$|E
40|$|Handbook of Food Analytical Chemistry - Water proteins, Enzymes, Lipids, and Carbohydrates gives a good {{overview}} of principles {{in the analysis}} of these important components of food. Advisory comments and recommendations how to carry out the <b>test</b> <b>instructions,</b> which are normally found in other sources, makes the compendium particularly valuable. JRC. D. 8 -Food safety and qualit...|$|R
40|$|New Bulgarian University Library {{gradually}} shifts {{its focus}} toward adopting green technologies {{and resources for}} information literacy. Two new technological trends in education: BYOD (bring your own device) and games and gamification are steadily being recognized and adopted by librarians. A jQuery-generated site for mobile devices is used to gamify students' introduction to information literacy. We seek to achieve: 1. a paperless environment; 2. a dynamic and mobile access to information and feedback; 3. switching from a lecture-based teaching style to a more constructivist approach, and encourage students to build knowledge on their own while pursuing a game-like activity; 4. better interaction with lecturers in subject-based teaching. The <b>test</b> <b>instruction</b> was adopted from a library project at St. Cloud State University. The process of collaboration with campus faculty, during the <b>test</b> <b>instruction</b> presented viable opportunity to introduce paperless pedagogy and gaming, as a legitimate pedagogical practice across disciplines on campus...|$|R
40|$|Directed forgetting and {{prospective}} memory methods were combined to examine {{differences in the}} control of memory access. Between studying two lists of target words, participants were either instructed to forget the first list, or to continue remembering the first list. After study participants performed a lexical decision task with an additional requirement to respond with a designated key to targets from {{one or both of}} the lists. List discrimination performance supported the assumption that contextual representations associated with the two lists are more differentiated following forget instructions. Test instructions which directed participants towards both lists or to particular list(s) were more or less compatible with these contextual representations. Lexical decisions on non-target trials were slower when <b>test</b> <b>instructions</b> were compatible with study contexts compared to when incompatible, indicating that contexts reinstated by <b>test</b> <b>instructions</b> influenced the complexity of memory access. This finding is most compatible with theories of memory which locate an important component of control at the pre-decision stage...|$|R
40|$|Abstract Automated GUI tests {{typically}} {{comprise of}} several test steps that are executed on the GUI before reaching {{a point of}} assertion. Comparing a longer and complex exe-cution of a GUI test to its <b>test</b> <b>instructions</b> for debugging is a laborious task: re-establish the test environment, slow down test execution for human perception, and locate the currently executed test step. Video documentation of GUI tests for debugging purposes is already present in several industry tools. However, it is not optimized for effective documentation of on-screen actions nor synched with the executed <b>test</b> <b>instructions.</b> We present a video-based documentation of automated GUI tests that links the executed <b>test</b> case <b>instruction</b> to the on-screen response of the application under test. Screen recording is optimized for speed and memory consumption while all relevant details are captured. Additional browsing capabilities for easier debugging are introduced. Concepts of aspect-oriented programming are adapted for tracing of pre-compiled test case scripts. Our concepts are evaluated by a working implementation, a series of performance measurements during a technical experiment, and industrial experience from 370 real-world test cases carried out in a large software company. The limits of our implementation regarding video capturing and code tracing are explored with a specialized test frame...|$|R
40|$|Abstract—This paper {{presents}} a high-level automatic <b>test</b> <b>instruction</b> generation (HATIG) technical that allows, {{for the first}} time, to test the scheduling unit of an out-of-order superscalar processor. This technique leverages on existing bounded model checking tools in order to generate software-based self-testing programs from a global EFSM model of the processor under test. The experimental results have demonstrated {{the efficiency of the}} proposed technique...|$|R
