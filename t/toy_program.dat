5|90|Public
50|$|A <b>toy</b> <b>program</b> {{typically}} {{focuses on}} a specific problem, such as computing the Nth term in a sequence, finding the roots of a quadratic equation and testing if a number is prime.|$|E
50|$|A <b>toy</b> <b>program</b> {{is a small}} {{computer}} program typically used for educational purposes. Toy programs are generally of little practical use, although the concepts implemented {{may be useful in}} a much more sophisticated program.|$|E
5000|$|The {{main part}} of the {{security}} type system is the rules. They say how we should decompose our program, and how type verification should be performed. Our <b>toy</b> <b>program</b> consists of a conditional test, and two possible variable assignments. Rules for these two events are defined as follows: ...|$|E
50|$|<b>Toy</b> <b>programs</b> {{are also}} used for a {{developer}} trying out a new programming language, to test all of the language's syntax and coding methods.|$|R
50|$|For a long time, the GNU Compiler Collection {{was shipped}} with a <b>toy</b> <b>programming</b> {{language}} called Treelang which was essentially C without advanced {{features such as}} pointers, arrays, and records.|$|R
5000|$|Lívio Tragtenberg - bass clarinet, <b>toy</b> ukulele, <b>programming,</b> mixing, {{arrangements}} ...|$|R
40|$|A {{suite of}} {{software}} tools is presented for managing a large parallel programming project. The tools were selected recognizing that parallel program development is an iterative process {{and subject to}} mistakes and that software tools can be useful for maintaining source code flexibility and portability, tracking revisions, and analyzing variable usage and loop structure within a program. The tools discussed are: make, cpp, RCS, and FORGE 90. The concept of a <b>toy</b> <b>program</b> is introduced {{as a means for}} experimenting with a simpler version of an application program. Finally, the use of these tools and techniques is demonstrated as part of an optimization and parallelization effort for a scientific application program called ZELIG. A Suite of Software Tools for Managing a Large Parallel Programming Project [...] 1 [...] Introduction The vast majority of all parallel programs in use today are modifications of existing serial programs. Few programs have been written from the outset for a paralle [...] ...|$|E
40|$|Although modern {{computer}} systems process {{increasing amounts of}} sensitive, private, and valuable information, most of today’s operating systems (OSs) fail to protect confidential data against unauthorized disclosure over covert channels. Securing the large code bases of these OSs and checking the secured code {{for the absence of}} covert channels would come at enormous costs. Microkernels significantly reduce the necessarily trusted code. However, cost-efficient, provable confidential-data protection in microkernel-based systems is still challenging. This thesis makes two central contributions to the provable protection of confidential data against disclosure over covert channels: • A budget-enforcing, fixed-priority scheduler that provably eliminates covert timing channels in open microkernel-based systems; and • A sound control-flow-sensitive security type system for low-level operating-system code. To prevent scheduling-related timing channels, the proposed scheduler treats possibly leaking, blocked threads as if they were runnable. When it selects such a thread, it runs a higher classified budget consumer. A characterization of budget-consumer time as a blocking term makes it possible to reuse a large class of existing admission tests to determine whether the proposed scheduler can meet the real-time guarantees of all threads we envisage to run. Compared to contemporary information-flow-secure schedulers, significantly more real-time threads can be admitted for the proposed scheduler. The role of the proposed security type system is to prove those system components free of security policy violating information flows that simultaneously operate on behalf of differently classified clients. In an open microkernel-based system, these are the microkernel and the necessarily trusted multilevel servers. To reduce the complexity of the security type system, C++ operating-system code is translated into a corresponding <b>Toy</b> <b>program,</b> which in turn is complemented with calls to Toy procedures describing the side effects of interactions with the underlying hardware. Toy is a non-deterministic intermediate programming language, which I have designed specifically for this purpose. A universal lattice for shared-memory programs enables the type system to check the resulting Toy code for potentially harmful information flows, even if the security policy of the system is not known {{at the time of the}} analysis. I demonstrate the feasibility of the proposed analysis in three case studies: a virtual-memory access, L 4 inter-process communication and a secure buffer cache. In addition, I prove Osvik’s countermeasure effective against AES cache side-channel attacks. To my best knowledge, this is the first security-type-system-based proof of such a countermeasure. The ability of a security type system to tolerate temporary breaches of confidentiality in lock-protected shared-memory regions turned out to be fundamental for this proof...|$|E
40|$|Students in {{programming}} courses generally write "toy" programs, {{even when}} {{the size of the}} assigned projects is large. Programming assignments are written, superficially tested, graded, and then discarded. This approach to programming pedagogy leaves students unprepared for production programming in the workplace because the gap between writing <b>toy</b> <b>programs</b> and developing reliable software products is enormous...|$|R
50|$|It is not {{required}} that the machine be entirely free of looping capabilities, however, to guarantee halting. If we restrict loops to be of a predictably finite size (like the FOR loop in BASIC), we can express all of the primitive recursive functions (Meyer and Ritchie, 1967). An {{example of such a}} machine is provided by the <b>toy</b> <b>programming</b> language PL-{GOTO} of Brainerd and Landweber (1974).|$|R
40|$|Botnets {{have come}} a long way since their {{inception}} a few decades ago. Originally <b>toy</b> <b>programs</b> written by network hobbyists, modern-day botnets can be used by cyber criminals to steal billions of dollars from users, corporations, and governments. This paper will look at cutting-edge botnet features and detection strategies from over a dozen research papers, supplemented by a few additional sources. With this data, I will then hypothesize what the future of botnets might hold...|$|R
5000|$|E - Lead & {{background}} vocals, electric & acoustic guitars, piano, Hammond B-3, keyboards, harmonica, accordion, drums, percussion, melodica, <b>toy</b> piano, <b>programming</b> ...|$|R
40|$|Abstract Type {{systems for}} {{concurrency}} express vital properties of concurrent and distributed programs, such as deadlock-freeness. These systems {{have grown more}} sophisticated with time, but unfortunately most of them apply to <b>toy</b> <b>programming</b> languages. At {{the other end of}} the spectrum, there is Erlang- an open souce functional and concurrent language with a number of successful commercial applications, but lacking a good type system. Attempts have been made to define a type system for Erlang, but these have ignored its concurrency, distribution and fault-tolerance features...|$|R
40|$|In industry, programmers work {{in groups}} {{to design and}} {{implement}} substantial pieces of software. In contrast, most programs that students write in classes are <b>toy</b> <b>programs</b> involving little or no group work. To address this discrepancy, we have developed a software infrastructure that aims to teach group work skills to students in computer science courses and also enables students to tackle larger and more significant projects. We {{are in the process}} of deploying this infrastructure in a three course sequence at the University of Colorado: Data Structures [...] -Programming Languages [...] -Compiler Construction. ...|$|R
5000|$|Justine Frischmann - vocals, guitar, <b>programming,</b> <b>toy</b> keyboard, {{photography}} ...|$|R
5000|$|In 1991, the GUEA {{was officially}} {{reinstated}} as an Indiana 501 (c)(3) corporation and also gained {{status as a}} Federal 501 (c)(3) agency. Under the direction of Executive Director Jihad T. Muhammad and Board Chairman Donald Thompson, the GUEA evolved into “promoting existing business and attract(ing) new industry to diversify the City of Gary’s economy.” In addition to these activities, Director Muhammad and the GUEA Board established “prime examples of creating economic prosperity for citizens of Gary” through programs such as “the Kids Enrichment Program. Business Loans, Christmas <b>Toys</b> <b>Program,</b> Environmental Job Training and Affiliate Programs: the Incubator/Fifth Avenue Mall and Main Street.” ...|$|R
5000|$|... #Caption: An early promotional photo {{from the}} <b>Toys</b> for Tots <b>program</b> ...|$|R
5000|$|... the <b>Toys</b> for Tots <b>Program</b> and Foundation have {{collected}} and distributed more than 512 million toys.|$|R
5000|$|Toys For Tots - The Marine Corps League {{started and}} runs the <b>Toys</b> for Tots <b>program.</b>|$|R
40|$|Students in {{programming}} courses generally write “toy” {{programs that}} are superficially tested, graded, and then discarded. This approach to teaching programming leaves students unprepared for production programming because the gap between writing <b>toy</b> <b>programs</b> and developing reliable software products is enormous. This paper describes how production programming can be effectively taught to undergraduate students in the classroom. The key to teaching such a course is using Extreme Programming methodology to develop a sustainable open source project with real customers, including the students themselves. Extreme Programming and open source project management are facilitated by a growing collection of free tools such as the JUnit testing framework, the Ant scripting tool, and the SourceForge website for managing open source projects...|$|R
50|$|You Hee-yeol's Sketchbook (Hangul: 유희열의 스케치북) is a South Korean {{music program}} that {{combines}} {{a talk show}} and live music format. It is hosted by You Hee-yeol, also known as his one-man band, <b>Toy.</b> The <b>program</b> has aired since April 24, 2009.|$|R
2500|$|From Chibiusa's first appearance, {{her primary}} tool is the cat-faced rubber ball called Luna-P (alternately called [...] "Lunaball" [...] or [...] "Luna Sphere" [...] in the DiC anime). Luna-P is a {{mechanical}} object strongly resembling Luna, which Chibiusa regards as her closest friend and which acts as her guardian. It {{can be used}} as a communication device, particularly with Sailor Pluto, and can be transformed into other objects Chibiusa may need by use of a special phrase, such as [...] "Luna-P Transform" [...] in the manga, or [...] "Luna-P Kitty Magic" [...] in the anime. While the manga and Crystal depicted her knocking Luna-P away, Black Lady overwrites the <b>toy's</b> <b>programming</b> with the Black Crystal's power to use as a weapon in the original anime.|$|R
5000|$|Rani Sharone - guitars, vocals, upright bass (tracks 7, 13), {{mandolin}} (8), banjo (8, 13), <b>toy</b> piano (8), <b>programming,</b> percussion ...|$|R
25|$|Aircraft {{in fiction}} covers the various {{real-world}} aircraft {{that have made}} significant appearances in fiction over the decades, including in books, films, <b>toys,</b> TV <b>programs,</b> video games, and other media. These appearances spotlight the popularity of different models of aircraft, and showcase the different types for the general public.|$|R
40|$|This {{paper is}} a {{tutorial}} {{on how to}} use a popular physics engine and tie it up to a simple 2 D game. It is structured as a tutorial for creating a simple game that uses the engine and a graphics library. The graphics library being used will be PyGame (which are Python bindings for the popular SDL library originally developed by Loki Entertainment Software) and the physics engine being used will be PyODE (which are Python bindings for the Open Dynamics Engine). A few <b>toy</b> <b>programs</b> will be written and discussed to introduce the components and the bulk of the paper will be the development of a simple game. The game which will be developed is a clone of ‚ÄúThe incredible machine‚Äù (which is a famous game published by Sierra Entertainment in 1992) ...|$|R
5000|$|In February 2006, station {{co-owner}} Mary Pryor {{was awarded}} the Marine Corps League Distinguished Citizen Award for her support of the annual <b>Toys</b> for Kids <b>program.</b> The award by the Heartland Detachment of the Marine Corps League and the Heartland Auxiliary Unit, which sponsor Toys for Kids. (The [...] "Toys for Kids" [...] program is independent of the national <b>Toys</b> for Tots <b>program.)</b> This {{was the first time}} the award had been presented to a civilian in the Brainerd area.|$|R
40|$|In {{this paper}} we {{introduce}} “clipping, ” a new method of syntactic approximation which {{is motivated by}} and {{works in conjunction with}} a sound and decidable denotational model for a given programming language. Like slicing, clipping reduces the size of the source code in preparation for automatic verification; but unlike slicing it is an imprecise but computationally inexpensive algorithm which does not require a whole-program analysis. The technique of clipping can be framed into an iterated refinement cycle to arbitrarily improve its precision. We first present this rather simple idea intuitively with some examples, then work out the technical details {{in the case of an}} Algol-like programming language and a decidable approximation of its gamesemantic model inspired by Hankin and Malacaria’s “lax functor ” approach. We conclude by presenting an experimental model checking tool based on these ideas and some <b>toy</b> <b>programs.</b> 1...|$|R
5|$|Restricted interests: Interests or {{fixations}} {{that are}} abnormal in theme or intensity of focus, such as preoccupation {{with a single}} television <b>program,</b> <b>toy,</b> or game.|$|R
40|$|A {{complete}} axiomatization of a first-order {{temporal logic}} over trace systems is introduced. The proof system contains infinitary rules for temporal operators. In {{order to show}} how these rules work, a <b>toy</b> concurrent <b>program</b> is considered, for which a temporal semantics is provided, and the correctness {{of the program is}} formally proved within our logic. ...|$|R
40|$|AbstractIn modern {{functional}} logic languages like Curry or <b>Toy,</b> <b>programs</b> are possibly non-confluent and non-terminating rewrite systems, defining possibly non-deterministic non-strict functions. Therefore, equational {{reasoning is}} {{not valid for}} deriving properties of such programs. In a previous work we showed how a mapping from CRWL –a well known logical framework for functional logic programming– into logic programming could be in principle used as logical conceptual tool for proving properties of functional logic programs. A severe problem faced in practice is that simple properties, {{even if they do}} not involve non-determinism, require difficult proofs when compared to those obtained using equational specifications and methods. In this work we improve our approach by taking into account determinism of (part of) the considered programs. This results in significant shortenings of proofs when we put in practice our methods using standard systems supporting equational reasoning like, e. g., Isabelle...|$|R
40|$|This {{thesis is}} about {{scalable}} formal verification techniques for software. A verification technique is scalable {{if it is}} able to scale to reasoning about real (rather than synthetic or <b>toy)</b> <b>programs.</b> Scalable verification techniques are essential for practical program verifiers. In this work, we consider three key characteristics of scalability: precision, performance and automation. We explore trade-offs between these factors by developing verification techniques in the context of data-parallel programs, as exemplified by graphics processing unit (GPU) programs (called kernels). This thesis makes three original contributions to the field of program verification: 1. An empirical study of candidate-based invariant generation that explores the trade-offs between precision and performance. An invariant is a property that captures program behaviours by expressing a fact that always holds at a particular program point. The generation of invariants is critical for automatic and precise verification. Over a benchmark suite comprising 356 GPU kernels, we find that candidate-based invariant generation allows precise reasoning for 256 (72...|$|R
50|$|In {{the studio}} he {{produces}} {{various types of}} music under the name Lost <b>Toys,</b> mixing his <b>programming</b> skills with live drums, bass, guitar, keyboards and percussion to give an authentic sound.|$|R
50|$|In 2009, ANSI began {{accepting}} {{applications for}} certification bodies seeking accreditation according to requirements defined under the <b>Toy</b> Safety Certification <b>Program</b> (TSCP) {{as the official}} third-party accreditor of TSCP’s product certification bodies.|$|R
50|$|Shepard races {{motorcycles}} at Buttonwillow Raceway, {{including his}} Ducati Hypermotard 1100S and Suzuki GSX-R1000. He donates {{much of his}} time to the Hollenbeck Youth Center, an after-school program that provides opportunity to at-risk inner-city youth. He has served as their official Master of Ceremonies, along with his friend Tom Arnold, for the Inner-City Games and Hollenbeck Youth Center's Miracle on 1st Street <b>Toy</b> Giveaway <b>Program</b> in East Los Angeles.|$|R
40|$|In this {{position}} paper, {{we present a}} prototype of a visualizer for functional programs. Such programs, whose evaluation model is the reduction of an expression to a value through repeated application of rewriting rules, and which tend to make little or no use of mutable state, are amenable to visualization {{in the same fashion}} as simple mathematical expressions, with which every schoolchild is familiar. We show how such visualizations may be produced for the strict functional language OCaml, by direct interpretation of the abstract syntax tree and appropriate pretty-printing. We describe (and begin to address) the challenges of presenting such program traces in limited space and of identifying their essential elements, so that our methods will one day be practical for more than <b>toy</b> <b>programs.</b> We consider the problems posed by the parts of modern functional programming which are not purely functional such as mutable state, input/output and exceptions. We describe initial work on the use of such visualizations {{to address the problem of}} program debugging, which is our ultimate aim...|$|R
50|$|In December 2010 the {{sorority}} officially {{partnered with}} Stevie Wonder to collect toys for his annual House Full of Benefit Concert. All of the sorority's 850 chapters {{signed on to}} collect <b>toys</b> for the <b>program.</b>|$|R
