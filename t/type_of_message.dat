131|10000|Public
25|$|The {{results of}} a study by Deborah Tolman and her colleagues {{indicated}} that adolescent exposure to sexuality on television in general does not directly affect their sexual behaviors, rather it is the <b>type</b> <b>of</b> <b>message</b> they view that has the most impact. Gender stereotypes enacted in sexual scenes on TV were seen to have a large affect on adolescents. Girls felt they had less control over their sexuality when they saw men objectifying women and not valuing commitment. The study discussed the risk of women internalizing this message and spreading {{the idea that it}} is okay to be weak and answer to men all the time. However, girls who saw women on TV who refuted men’s sexual advances usually felt more comfortable talking about their own sexual needs in their sexual experiences as well as standing up for themselves. They were comfortable setting sexual limits and therefore held more control over their sexuality. Findings for boys were less clear; those who saw dominant and aggressive men actually had less sexual experiences.|$|E
2500|$|Small {{businesses}} {{also use}} {{social networking sites}} as a promotional technique. Businesses can follow individuals social networking site uses in the local area and advertise specials and deals. These can be exclusive and {{in the form of}} [...] "get a free drink with a copy of this tweet". This <b>type</b> <b>of</b> <b>message</b> encourages other locals to follow the business on the sites in order to obtain the promotional deal. In the process, the business is getting seen and promoting itself (brand visibility).|$|E
2500|$|Another {{approach}} {{that can be}} used with some languages involves having different data structures, but all have the initial fields, including the next (and prev if double linked list) references in the same location. [...] After defining separate structures for each type of data, a generic structure can be defined that contains the minimum amount of data shared by all the other structures and contained at the top (beginning) of the structures. [...] Then generic routines can be created that use the minimal structure to perform linked list type operations, but separate routines can then handle the specific data. [...] This approach is often used in message parsing routines, where several types of messages are received, but all start with the same set of fields, usually including a field for message type. [...] The generic routines are used to add new messages to a queue when they are received, and remove them from the queue in order to process the message. [...] The message type field is then used to call the correct routine to process the specific <b>type</b> <b>of</b> <b>message.</b>|$|E
5000|$|Message Type: an 8-bit {{field that}} {{indicates}} the <b>type</b> <b>of</b> GTP <b>message.</b> Different <b>types</b> <b>of</b> <b>messages</b> are defined in 3GPP TS 29.060 section 7.1 ...|$|R
30|$|The {{protocol}} {{uses the}} following <b>types</b> <b>of</b> <b>messages.</b>|$|R
5000|$|I²C defines basic <b>types</b> <b>of</b> <b>messages,</b> each <b>of</b> {{which begins}} with a START and ends with a STOP: ...|$|R
5000|$|<b>Type</b> <b>of</b> <b>message</b> and {{communication}} media which {{can best be}} used to reach the target group ...|$|E
5000|$|Depending on the <b>type</b> <b>of</b> <b>message,</b> WS-SecureConversation either made no {{difference}} or reduced processing time by half in the best case.|$|E
5000|$|Loglevel {{specifies}} the <b>type</b> <b>of</b> <b>message</b> {{being sent}} to the kernel message log. The syntax with loglevel is:printk(KERN_DEBUG [...] "Debug message shown!\n"); ...|$|E
5000|$|The <b>types</b> <b>of</b> <b>messages</b> {{that are}} logged are often less stable through the {{development}} cycle than for event logging.|$|R
5000|$|Java CAPS 6 support three <b>types</b> <b>of</b> <b>messaging</b> servers: * JMS IQ manager(stcms), * Java {{message service}} grid * Java MQ4.1 ...|$|R
5000|$|Message trace can be enabled {{to easily}} {{diagnose}} and view the <b>types</b> <b>of</b> <b>messages</b> {{received from the}} node under the monitoring.|$|R
50|$|Although only Chinese {{characters}} are used, the characters themselves are coloured red, yellow or green {{according to the}} <b>type</b> <b>of</b> <b>message.</b> This and the map displays make it somewhat easier for non-Chinese speakers to understand.|$|E
5000|$|Piggybacking flag: If {{this bit}} {{is set to}} 1 then another GTP-C message with its own header shall be present {{at the end of}} the current message. There are {{restrictions}} as to what <b>type</b> <b>of</b> <b>message</b> can be piggybacked depending on what the toplevel GTP-C message is.|$|E
50|$|This <b>type</b> <b>of</b> <b>message</b> board uses a {{small number}} of {{low-power}} LEDs for illumination. Fluorescent Ink Menu Boards typically have a black background that allows the fluorescent ink to stand out with little illumination. These factors together result in a small power requirement even compared to LED Marquee style message boards.|$|E
5000|$|GSM 03.40 defines 6 <b>types</b> <b>of</b> <b>messages,</b> {{which are}} {{distinguished}} by the message direction and the 2 least significant bits {{in the first}} octet <b>of</b> SM-TP <b>message</b> (the TP-MTI field): ...|$|R
50|$|Different IDoc {{types are}} {{available}} to handle different <b>types</b> <b>of</b> <b>messages.</b> For example, the IDoc format ORDERS01 {{may be used for}} both purchase orders and order confirmations.|$|R
50|$|CM {{has become}} known for their work in the market <b>of</b> hybrid <b>messaging.</b> This <b>type</b> <b>of</b> <b>messaging</b> means that {{customers}} can be contacted using a variety <b>of</b> <b>messaging</b> formats. It allows the sender to contact its customers through more than one messaging format.|$|R
5000|$|A KRPC {{message is}} a single {{dictionary}} with two keys common to every message and additional keys depending on the <b>type</b> <b>of</b> <b>message.</b> Every message has a key [...] "t" [...] with a string value representing a transaction ID. This transaction ID is generated by the querying node and is echoed in the response, so responses may be correlated with multiple queries to the same node. The transaction ID should be encoded as a short string of binary numbers, typically 2 octets are enough as they cover 2^16 outstanding queries. The other key contained in every KRPC message is [...] "y" [...] with a single character value describing the <b>type</b> <b>of</b> <b>message.</b> The value of the [...] "y" [...] key is one of [...] "q" [...] for query, [...] "r" [...] for response, or [...] "e" [...] for error.|$|E
50|$|Rodos uses {{so-called}} Topics {{to enable}} communication between threads and over gateways between different systems. A Topic represents {{a message of}} a certain kind. A thread can publish Topics as well as subscribe to a Topic to receive all messages that belong to a <b>type</b> <b>of</b> <b>message.</b> The message system conforms to the publish-subscribe pattern.|$|E
50|$|Devices {{typically}} {{do not respond}} to every <b>type</b> <b>of</b> <b>message</b> defined by the MIDI specification. The MIDI implementation chart was standardized by the MMA as a way for users to see what specific capabilities an instrument has, and how it responds to messages. A specific MIDI Implementation Chart is usually published for each MIDI device within the device documentation.|$|E
40|$|This study {{involved}} a content analysis <b>of</b> sportsmanship <b>messages</b> that {{a sample of}} coaches, parents, and officials associated with youth athletics provided. Data were collected via highly structured interviews conducted before, after, and during youth soccer games. Results indicated that 9 different <b>types</b> <b>of</b> sportsmanship <b>messages</b> were provided to varying degrees and that the most prevalent <b>types</b> <b>of</b> <b>messages</b> offered were those that concerned enjoyment of the sport, respect and concern for opponents, and respect and concern for team/teammates...|$|R
40|$|This master's thesis in {{the first}} part {{describes}} the AS/ 400 and its message system and concentrates especially on the following areas: predefinition <b>of</b> <b>messages</b> and their storing, <b>types</b> <b>of</b> <b>messages</b> and levels <b>of</b> their importance, work with variables included in message text and ways <b>of</b> sending <b>messages.</b> On the basis <b>of</b> AS/ 400 <b>message</b> system is designed and implemented message log system for the application loggin for Aegis. s. r. o. The analysis <b>of</b> the <b>message</b> log systems is also a part of the work. The syslog and syslog-ngused in UNIX systems are described, concerning <b>types</b> <b>of</b> <b>messages,</b> importance <b>of</b> <b>messages</b> and filtering and storing <b>of</b> <b>messages.</b> It further describes possibilities of application logging based on Java in the specific case of the Log 4 jutility. In the second part thesis describes own log message systems design and implementation...|$|R
30|$|B sends {{a message}} {{encrypted}} with the pre-shared key Kbs to S, which contains identifier A, random Na, identifier B, and random number Nb generated by node B. Node C, D also sends the same <b>type</b> <b>of</b> <b>messages.</b>|$|R
50|$|Events, {{also known}} as remotes, allow a script to respond {{automatically}} when a particular <b>type</b> <b>of</b> <b>message</b> is received from the IRC server, or when a certain action is performed by the user, such as pressing a key or closing a window. Advanced event scripting usually requires knowledge of the IRC protocol, though basic events can usually be written without it.|$|E
50|$|The crowing by {{the crow}} is also {{considered}} an omen or message either that a letter (news) {{will come from}} relatives not heard from for a long time, or that some unexpected guests/visitors will arrive. Experienced oldsters can distinguish the exact <b>type</b> <b>of</b> <b>message</b> {{by the way the}} crow hops, or walks, on the roof, wall, etc. or from the exact tone and style of the crowing.|$|E
5000|$|MRCP uses {{a similar}} style of clear-text {{signaling}} as HTTP {{and many other}} Internet protocols, in which each message contains 3 sections: a first-line, a header and a body. The first line indicates the <b>type</b> <b>of</b> <b>message</b> {{as well as information}} such as response codes. The header contains a number of lines, each in the format [...] The body, whose length is specified by the header, contains the details of the message.|$|E
30|$|In {{order to}} assess participants’ {{engagement}} in the ongoing group email list, we first conducted a frequency analysis, then conducted qualitative coding <b>of</b> the <b>types</b> <b>of</b> <b>messages</b> sent on the list and analyzed the patterns of communication with SNA methods.|$|R
50|$|As an {{extended}} call center management language, combining CCXML call control functionality with computer-telephony integration for call centers that integrate telephone calls with computer screen pops, {{as well as}} other <b>types</b> <b>of</b> <b>message</b> exchange such as chats, instant messaging, etc.|$|R
40|$|This paper {{presents}} {{the design and}} implementation <b>of</b> three <b>types</b> <b>of</b> <b>messaging</b> primitives for the Scalaness programming language. The main idea behind this project was to extend {{the current version of}} Scalaness to include new messaging abstractions. Scalaness is a special purpose variant of Scala for running on the hub of a wireless sensor network. The three <b>types</b> <b>of</b> <b>messages</b> considered here are data reports from nodes to hub via a collection tree, small values sent from hub to nodes, and larger values sent from hub to nodes. These primitives are defined in the abstract, then implemented in Scala, and the necessary specifications for translation from Scalaness command to back end Scala code are made...|$|R
50|$|Turing {{calculated}} {{the scores for}} the number of single repeats in overlaps of so many letters, and the number of bigrams and trigrams. Tetragrams often represented German word in the plaintext and their scores were calculated according to the <b>type</b> <b>of</b> <b>message</b> (from traffic analysis), and even their position within the message. These were tabulated and the relevant values summed by Banburists in assessing pairs of messages to see which were likely to be in depth.|$|E
5000|$|With her firm, {{she works}} with her clients and asks them {{questions}} about their business or service {{in order to develop}} a [...] "mutually satisfactory visual design". She asks clients questions to find out what their style is and find out what <b>type</b> <b>of</b> <b>message</b> they want to get across. [...] She has found that {{it can be hard to}} communicate thoughts and concepts visually. To help transform concepts into images, she asks clients [...] "metaphoric questions".|$|E
5000|$|An ISUP message {{contains}} a fixed header containing the {{circuit identification code}} and the ISUP message type, followed by a mandatory fixed-length parameter part, a mandatory variable-length parameter part, and an optional parameter part that are dependent on the <b>type</b> <b>of</b> <b>message</b> being sent. ISUP messages can be sent using the services of the Message Transfer Part, or, less often, the Signalling Connection Control Part. These messages are transmitted {{in various stages of}} call setup and release. The most common messages are: ...|$|E
40|$|Viterbi is an {{algorithm}} {{for error}} correction in the transmission <b>of</b> <b>messages.</b> It requires coding and decoding {{stages in the}} sender and receiver, respectively. These <b>type</b> <b>of</b> algorithms are very useful for the transmission <b>of</b> a <b>type</b> <b>of</b> <b>messages</b> where some degree of error in the received message is acceptable, such as, voice and video. The coding allows some error detection and correction...|$|R
50|$|It {{has been}} further proved {{that when the}} message {{priority}} relation is empty, boundedness, deadlocks and unspecified reception state can be decided even under the condition {{in which there are}} two or more <b>types</b> <b>of</b> <b>messages</b> in the communication between finite state machines.|$|R
30|$|Furthermore, {{there are}} two <b>types</b> <b>of</b> <b>messages</b> {{transmitted}} among the RPs for the affinity propagation clustering: (1) responsible message r(i, j) which transmits {{the information about the}} clustering center; and (2) availability message a(i, j) which informs the attachment relations between the RPs and clusters.|$|R
