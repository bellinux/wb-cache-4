82|1222|Public
50|$|Oniszczak is a {{graduate}} of University of Toronto, holds a Masters from York University and a bachelor's degree from University of Guelph, Ontario. Before entering the field of Human Computer Interaction, Oniszczak worked as an actor in movies such as Masala and mini-series such as The Lawrenceville Stories and Vocational Counselor. Today he works on novel input methods for computers and portable devices such as the RollPad for cellphone text entry and Unipad a single stroke <b>text</b> <b>entry</b> <b>method</b> with language-based acceleration. He now lives in Mountain View, California with his wife.|$|E
3000|$|As already {{mentioned}} afore, a movement {{model for a}} particular <b>text</b> <b>entry</b> <b>method</b> predicts the total time CT [...]...|$|E
3000|$|... values, {{without the}} need to test a <b>text</b> <b>entry</b> <b>method</b> with real users. We could {{furthermore}} observe the effect of dwelling time on upper-bound text entry speed predictions. The value T [...]...|$|E
40|$|Background. Text-based {{passwords}} {{continue to}} be the primary form of authentication to computer systems. To-day, they are increasingly created and used with mo-bile <b>text</b> <b>entry</b> <b>methods,</b> such as touchscreen qwerty key-boards, in addition to traditional physical keyboards. Aim. This paper aims to answer a foundational ques-tion for usable security: whether <b>text</b> <b>entry</b> <b>methods</b> af-fect password generation and password security. Method. This paper presents results from a between-group study with 63 participants, in which each group generated passwords for multiple virtual accounts using different <b>text</b> <b>entry</b> <b>methods.</b> Participants were also asked to recall their passwords afterwards. Results. One-way ANOVA across groups was per-formed on metrics including password length, amount of different characters, and estimated password secu-rity. The results showed significant effect of <b>text</b> <b>entry</b> <b>methods</b> on the amount of lowercase letters per pass-word across groups (F(2, 60) = 3. 186, p =. 048, Î· 2 p =. 066), and non-significant effect on the password length, amount of uppercase letters, digits or symbols. No sig-nificant result was found for the estimated password se-curity. The result of practical cracking attacks was also similar across groups. Conclusions. <b>Text</b> <b>entry</b> <b>methods</b> have effect on pass-word security. However, the effect is subtler than ex-pected. ...|$|R
40|$|For <b>text</b> <b>entry</b> <b>methods</b> to {{be useful}} they have to deliver high entry rates and low error rates. At {{the same time they}} need to be easy to learn and provide {{effective}} means of correcting mistakes. Intelligent <b>text</b> <b>entry</b> <b>methods</b> combine AI techniques with human-computer interaction (HCI) theory to enable users to enter text as efficiently and effortlessly as possible. Here I sample a selection of such techniques from the research literature and set them into their historical context. I then highlight five challenges for <b>text</b> <b>entry</b> <b>methods</b> that aspire to make an impact in our society: localization, error correction, editor support, feedback, and context of use...|$|R
40|$|We {{present an}} {{evaluation}} of <b>text</b> <b>entry</b> <b>methods</b> for tabletop displays given small display space allocations, an increasingly important design constraint as tabletops become collaborative platforms. Small space is already a requirement of mobile <b>text</b> <b>entry</b> <b>methods,</b> and these can often be easily ported to tabletop settings. The purpose of this work is to determine whether these mobile <b>text</b> <b>entry</b> <b>methods</b> are equally useful for tabletop displays, or whether there are unique aspects of <b>text</b> <b>entry</b> on large, horizontal surfaces that influence design. Our evaluation consists of two studies designed to elicit differences between the mobile and tabletop domains. Results show that standard soft keyboards perform best, even at small space allocations. Furthermore, occlusion-reduction methods like Shift do not yield significant improvements to text entry; we speculate that {{this is due to}} the low ratio of resolution per surface units (i. e., DPI) for current tabletops...|$|R
40|$|Mobile phone {{networks}} are increasingly supporting {{the transmission of}} textual messages between mobile phones and between mobile phones and other services. This paper describes the current <b>text</b> <b>entry</b> <b>method</b> on mobile phones and describes a new <b>text</b> <b>entry</b> <b>method</b> using a single key-press per letter together with a large dictionary of words for disambiguation. This approach, {{which is similar to}} technology recently licensed, independently, to several phone companies, is then extended with automatic word completion. The paper reports the results of initial user tests comparing the text entry methods, analysis of word clashes with the dictionary-based methods and keystroke level modelling of the different input methods...|$|E
40|$|A {{joystick}} <b>text</b> <b>entry</b> <b>method</b> {{for game}} controllers and mobile phones would be valuable, since these devices often have joysticks but no conventional keyboards. But prevalent joystick text entry methods are slow {{because they are}} selection-based. EdgeWrite, a new joystick <b>text</b> <b>entry</b> <b>method,</b> {{is not based on}} selection but on gestures from a unistroke alphabet. Our experiment shows that this new method is faster, leaves fewer errors, and is more satisfying than date stamp and selection keyboard (two prevalent selection-based methods) for novices after minimal practice. For more practiced users, our results show that EdgeWrite is at least 1. 5 times faster than selection keyboard, and 2. 4 times faster than date stamp...|$|E
40|$|Abstract: Text {{entry is}} {{special kind of}} human-computer {{interaction}} in one respect: it is a highly learned activity, and unlike some others {{it needs to be}} so. Writing is not an inborn or trivially acquired skill like pointing and reacting to simple stimuli. Because learning a writing method is expensive, users benefit from using the same method in different situations. We describe an architecture that supports text entry methods that follow the user from device to device. The architecture consists of a server and <b>text</b> <b>entry</b> <b>method</b> implementations that the server downloads from the Internet. <b>Text</b> <b>entry</b> <b>method</b> selection is based on user preference and input device compatibility. We use Java for implementing the text entry methods so that the same code can be run on different platforms. The server is not similarly platform independent. Currently we have implementations fo...|$|E
40|$|<b>Text</b> <b>entry</b> on mobile devices is {{problematic}} because of ever-decreasing device sizes. Dictionary-based keypad <b>text</b> <b>entry</b> <b>methods</b> are relatively effective, but still run into problems of word ambiguity, especially when used with {{small numbers of}} keys. Common <b>text</b> <b>entry</b> disambiguation <b>methods</b> only use word frequency information to resolve conflicts. This paper proposes a new method that also looks at semantic information (distances between word meanings). Simulations show encouraging results, suggesting potential practical applications of this method to mobile devices...|$|R
40|$|A key {{obstacle}} to interactive tabletops becoming as useful as traditional desktop computers {{is the lack}} of efficient <b>text</b> <b>entry</b> <b>methods.</b> We report a quantitative study comparing four different haptic keyboards for interactive tabletops and draw conclusions for future iterations. Author Keywords Interactive tabletop, <b>text</b> <b>entry,</b> passive tangibl...|$|R
40|$|In this paper, {{we mention}} our past and current works in <b>text</b> <b>entry.</b> Since {{more than ten}} years, we have {{explored}} different approaches and proposed different <b>text</b> <b>entry</b> <b>methods.</b> Some are designed for use in mobility and other are specially intended for people with disabilities. Author Keywords <b>Text</b> <b>entry,</b> onscreen keyboard design, motor disabilities, word prediction...|$|R
40|$|Figure 1 : PianoText is a {{proof-of-concept}} that exemplifies how musical expertise can {{be transferred}} to an HCI task. PianoText is a <b>text</b> <b>entry</b> <b>method</b> using the piano keyboard, developed with an algorithm that optimizes the mapping of letters to notes. The algorithm exploits well-practiced motor patterns in piano playing. Copyright is held by the author/owner(s) ...|$|E
40|$|Due to the {{emergence}} of SMS messages, the significance of effective text entry on limited-size keyboards has increased. In this paper, we describe and discuss a new method to enter text more efficiently using a mobile telephone keyboard. This method, which we called HMS, predicts words from a sequence of keystrokes using a dictionary and a function combining bigram frequencies and word length. We implemented the HMS <b>text</b> <b>entry</b> <b>method</b> on a software-simulated mobile telephone keyboard and we compared it to a widely available commercial system. We trained the language model on a corpus of Swedish news and we evaluated the method. Although the training corpus does not reflect the language used in SMS messages, the results show a decrease by 7 to 13 percent in the number of keystrokes needed to enter a text. These figures are very encouraging even though the implementation can be optimized in several ways. The HMS <b>text</b> <b>entry</b> <b>method</b> can easily be transferred to other languages...|$|E
40|$|There {{has been}} a {{substantial}} growth in interest in mobile text entry over recent years, among both researchers and users. Increasingly mobile devices {{are being used to}} perform text-intensive applications, such as text messaging, creating a demand for more efficient and easier to use text entry methods. Unlike for desktop computing, no single, standard mobile <b>text</b> <b>entry</b> <b>method</b> has emerged. The diversity of mobile devices makes it unlikely that this will ever occur. Thus, mobile text entry remains a very open area of research, providing a favourable environment for the development of innovative text entry methods. A necessary part of {{the development of a new}} mobile <b>text</b> <b>entry</b> <b>method</b> is a comparison of its performance with existing methods. Despite being complex and time consuming, empirical evaluations remain the best way to make these comparisons. A review of current best practice for the empirical evaluation of mobile text entry methods is presented, alongside a classification of existing mobile text entry methods. The results of an empirical evaluation of a new mobile phone <b>text</b> <b>entry</b> <b>method</b> called Fastap are reported. The performance of the new method, along with that of the T 9 and multi-press with timeout mobile text entry methods, was measured for the entry of four different types of text and with three different levels of user experience. The Fastap method was found to provide the best immediate usability among the three methods and its performance continued to improve as users gained more experience with it. Fastap also performed strongly in the subjective ratings. The results of the evaluation are very positive for the ongoing development of the Fastap interface. Keywords: Mobile Devices, Text Entry, Fasta...|$|E
40|$|H. 5. 2 [Information {{interfaces}} and presentation]International audienceIn this paper, {{we mention}} our past and current works in <b>text</b> <b>entry.</b> Since {{more than ten}} years, we have explored different approaches and proposed different <b>text</b> <b>entry</b> <b>methods.</b> Some are designed for use in mobility and other are specially intended for people with disabilities...|$|R
3000|$|... {{required}} to enter character j {{preceded by a}} previously entered character i. Since we already defined the minimal number of discrete tilts required for a particular character selection, {{as well as the}} discrete-tilt execution time, we can now provide movement models for the proposed <b>text</b> <b>entry</b> <b>methods.</b>|$|R
30|$|In {{this section}} we {{introduce}} three different <b>text</b> <b>entry</b> <b>methods</b> {{that rely on}} the discrete-tilt concept. The design and interaction are described with special emphasis being on keyboard layouts and corresponding input schemes description. For every interaction method we calculate the number of discrete tilts (input primitives) required to select a given character.|$|R
40|$|We present Input Finger Detection (IFD), a novel {{technique}} for nonvisual touch screen input, and its application, the Perkinput <b>text</b> <b>entry</b> <b>method.</b> With IFD, signals are input into a device with multi-point touches, where each finger represents one bit, either touching the screen or not. Maximum likelihood and tracking algorithms {{are used to}} detect which fingers touch the screen based on user-set reference points. The Perkinput <b>text</b> <b>entry</b> <b>method</b> uses the 6 -bit Braille encoding with audio feedback, enabling one- and two-handed input. A longitudinal evaluation with 8 blind participants who are proficient in Braille showed that one-handed Perkinput was significantly faster and more accurate than iPhoneâs VoiceOver. Furthermore, in a case study to evaluate expert performance, one user reached an average session speed of 17. 56 words per minute (WPM) with an average uncorrected error rate of just 0. 14 % using one hand for input. The same participant reached an average session speed of 38. 0 WPM with two-handed input and an error rate of just 0. 26 %. Her fastest phrase was entered at 52. 4 WPM and no errors...|$|E
40|$|Multi-touch {{surfaces}} and tabletops present new challenges and possibilities for text input. By basing designs on established theoretical models of bimanual interaction, {{it is possible}} to evaluate the best choice of bimanual technique for a novel form of text input. As a first step, we propose an asymmetric bimanual <b>text</b> <b>entry</b> <b>method</b> for the purpose of evaluation. Early results indicate that text entry performance improves more quickly using the novel method, while overall speed is very similar...|$|E
30|$|When {{computing}} time predictions, {{we assume}} that two input strategies can be applied for every proposed discrete-tilt-based text entry method: (i) shortcut usage allowed: if the target character resides in the shortcut set, it will be entered with a single long tilt, and (ii) shortcut usage not allowed: all characters have to be entered using regular discrete tilts only. In such a way {{we are able to}} provide two predictions for the same <b>text</b> <b>entry</b> <b>method,</b> and to accordingly analyze the effects of long tilts.|$|E
40|$|Effective <b>text</b> <b>entry</b> on {{handheld}} devices {{remains a}} significant problem {{in the field of}} mobile computing. On a personal digital assistant (PDA), <b>text</b> <b>entry</b> <b>methods</b> traditionally support input through the motion of a stylus held in the user's dominant hand. In this paper, we present the design of a two-handed software keyboard for a PDA which specifically takes advantage of the thumb in the non-dominant hand. We compare our chorded keyboard design to other stylus-based <b>text</b> <b>entry</b> <b>methods</b> in an evaluation that studies user input in both stationary and mobile settings. Our study shows that users type fastest using the miniqwerty keyboard, and most accurately using our two-handed keyboard. We also discovered a difference in input performance with the mini-qwerty keyboard between stationary and mobile settings. As a user walks, text input speed decreases while error rates and mental workload increases; however, these metrics remain relatively stable in our two-handed technique despite user mobility...|$|R
40|$|<b>Text</b> <b>entry</b> becomes {{increasingly}} complex as devices shrink in size. This paper presents {{the findings of}} a comparison study of two thumbwheel <b>text</b> <b>entry</b> <b>methods</b> for mobile devices. In the first method, the character set (letters, numbers, punctuation) was implemented as a continuous loop. In the second method, characters were arranged in a two-level menu structure. Thumbwheel methods provide a viable and realistic alternative to keyboard, keypad, stylus, or voice <b>text</b> <b>entry</b> on ultra-small mobile devices...|$|R
5|$|Johansen, A. S., Hansen, J. P., Hansen, D. W., Itoh, K., and Mashino, S. 2003. Language {{technology}} in a predictive, restricted on-screen keyboard with dynamic layout for severely disabled people. In Proceedings of the 2003 EACL Workshop on Language Modeling for <b>Text</b> <b>Entry</b> <b>Methods</b> (TextEntry '03). Association for Computational Linguistics, Stroudsburg, PA, USA, 59â66.|$|R
30|$|Our {{future work}} plan {{includes}} several directions. Most importantly, the proposed <b>text</b> <b>entry</b> <b>method</b> prototypes necessitate formal usability testing. We {{expect to get}} a detailed insight into the correlation between theoretical predictions and empirically obtained text entry rates. In addition to efficiency, other usability attributes should be carefully observed as well. E.g., learnability, errors, and satisfaction play important role for overall acceptance of newly proposed methods. Required physical and mental efforts have to be tackled {{in order to get}} a better understanding of ease-of-use constraints.|$|E
40|$|KeyScretch is a {{recently}} proposed <b>text</b> <b>entry</b> <b>method</b> which {{makes use of}} gestures to input frequent word chunks on a menu-augmented soft keyboard. Each gesture is initiated on a key and {{is driven by the}} key surrounding menu. In this paper we present the performance of an instance of the method with a 4 -items menu, specifically designed for the Italian language. The study shows that the method is easy to learn and significantly outperforms the traditional tapping- based method on the QWERTY layout...|$|E
40|$|KeyScretch is a <b>text</b> <b>entry</b> <b>method</b> for mobile devices {{equipped}} with touch-screens, {{based on a}} menu-augmented soft keyboard. It improves the previously studied menubased methods by enabling the interpretation of compound strokes, corresponding to the input of particularly frequent character sequences. Here we describe the design of an application we developed for the Android system, runnable on tablets and smartphones. section briefly describes the KeyScretch method; Section 3 presents {{the design of the}} KeyScretch Android application; finally, Section 4 offers our conclusions and outlines the future work...|$|E
40|$|We {{combine the}} power law of {{learning}} and theoretical upper limit predictions to describe the development of <b>text</b> <b>entry</b> rates from users' first contact to asymptotic expert usage. The combined model makes comparing <b>text</b> <b>entry</b> <b>methods</b> easier. We present {{the rationale for the}} model and two candidate implementations. The first is a simple regression model with a reasonable fit to the data. The second fits measured data better, but is more complicated...|$|R
40|$|<b>Text</b> <b>entry</b> {{is one of}} {{the main}} {{interaction}} tasks in gaze-controlled interfaces. The primary method of eye typing consists of selection of keys from an on-screen virtual keyboard (for a review of gaze-based <b>text</b> <b>entry</b> <b>methods,</b> see Majaranta and RÃ¤ihÃ¤ 2007). The user types by pointing at each character by gaze and dwelling on it for a certain amount of time, using dwell time as an activation command. Typically, only one keystrok...|$|R
40|$|We {{describe}} {{a technique to}} analyse character-level errors in evaluations of <b>text</b> <b>entry</b> <b>methods.</b> Using an algorithm for sequence comparisons, we generate the set of optimal alignments between the presented and transcribed text. Percharacter errors, categorized as insertions, substitutions, or deletions, are obtained by analysing the alignments and applying a weighting factor. A detailed example using a real data set is given...|$|R
40|$|AbstractâText-based {{passwords}} {{continue to}} be the prime form of authentication to computer systems. Today, they are increasingly created and used with mobile text entry methods, such as touchscreens and mobile keyboards, in addition to tra-ditional physical keyboards. This raises a foundational question for usable security: whether text entry methods affect password generation and password security. This paper presents results from a between-group study with 63 participants, in which each group generated passwords for multiple virtual accounts using a different <b>text</b> <b>entry</b> <b>method.</b> Participants were also asked to recall their passwords afterwards. We applied analysis of structures and probabilities, with standard and recent security metrics and also performed cracking attacks on the collected data. The results show a significant effect of text entry methods on passwords. In particular, one of the experimental groups created passwords with significantly more lowercase letters per password than the control group (t(60) = 2. 99, p = 0. 004). The choices for character types in each group were also significantly different (p = 0. 048, FET). Our cracking attacks consequently expose significantly different resistance across groups (p = 0. 031, FET) and <b>text</b> <b>entry</b> <b>method</b> vulnerabilities. Our findings contribute to the understanding of password security in the context of usable interfaces. I...|$|E
40|$|There {{has been}} a {{substantial}} growth in interest in mobile text entry over recent years, among both researchers and users. Increasingly mobile devices {{are being used to}} perform text-intensive applications, such as text messaging, creating a demand for more efficient and easier to use text entry methods. Unlike for desktop computing, no single standard mobile <b>text</b> <b>entry</b> <b>method</b> has emerged. The diversity of mobile devices makes it unlikely that this will occur in the near future. Thus, mobile text entry remains a very open area of research, providing a fertile environment for the development of innovative text entry methods. A necessary part of {{the development of a new}} mobile <b>text</b> <b>entry</b> <b>method</b> is a comparison of its performance with existing ones. A review of current best practice for the qualitative and empirical evaluation of mobile text entry methods is presented, alongside a classification of existing mobile text entry methods and the various ways to optimise text entry. A mobile interface that uses a scroll wheel will then be designed together with a predictive text algorithm by combining or improving the various techniques that will be examined by this literature review for improved text entry. Empirical tests will then be conducted to test the hypothesis that the new interface has a faster text entry input rate compared to the traditional Multi-Tap keypad...|$|E
40|$|We present PianoText, a <b>text</b> <b>entry</b> <b>method</b> {{based on}} a piano {{keyboard}} with an optimized mapping between notes and chords of music to letters of the English language. PianoText exemplies the idea of transferring musical expertise to a text entry task by computationally searching for mappings between frequent motor patterns while considering their n-gram frequency distributions and respecting constraints aecting the playability of music. In the Interactivity session, audience members with piano skills can transcribe text with PianoText, and a trained pianist will show that it allows him to generate text at speeds close to that of professional QWERTY-typists...|$|E
40|$|KSPC is {{the number}} of keystrokes, on average, to {{generate}} each character of text in a given language using a given <b>text</b> <b>entry</b> technique. We systematically describe the calculation of KSPC and provide examples across a variety of <b>text</b> <b>entry</b> techniques. Values for English range from about 10 for methods using only cursor keys and a SELECT key to about 0. 5 for word prediction techniques. It is demonstrated that KSPC is useful for a priori analyses, thereby supporting the characterisation and comparison of <b>text</b> <b>entry</b> <b>methods</b> before labour-intensive implementations and evaluations...|$|R
30|$|The {{paper is}} {{structured}} as follows. In Related work section we describe existing tilt-based <b>text</b> <b>entry</b> solutions that {{usually do not}} use the QWERTY layout, and/or rely on continuous application feedback. Pitch and Roll as input primitives for mobile devices section introduces the tilt-based concept which supports an interaction less relying on visual feedback; here we define Pitch and Roll movement sequences as discrete-tilt input primitives for mobile devices. In Discrete-tilt Pitch and Roll based <b>text</b> <b>entry</b> <b>methods</b> section we apply the proposed input commands on <b>text</b> <b>entry</b> in the mobile, by introducing three different <b>text</b> <b>entry</b> <b>methods</b> that utilize both QWERTY-based keyboard layouts and discrete-tilt-based strategies for character selection. Modeling upper-bound <b>text</b> <b>entry</b> speeds section deals with the proposed methods, targeting error-free interaction and expert-level input efficiency. We describe the used modeling methodology which consists of: (i) user experiment which is conducted to determine the time of discrete-tilt execution, (ii) movement models able to predict the total time required to enter a particular character, (iii) a constructed linguistic model for the English language that provides a matrix of digraph probabilities, and (iv) calculated predictions for discrete-tilt-based <b>text</b> <b>entry</b> speeds. In Discussion section we evaluate the proposed designs {{with respect to the}} predictions hence obtained, and discuss the model limitations. The last section offers a brief recapitulation, including the outline of our future research plan.|$|R
30|$|SL modeled the {{proposed}} <b>text</b> <b>entry</b> <b>methods,</b> programmed the respective prototypes, calculated digraph probabilities, organized the user testing experiment, {{and wrote a}} preliminary version of the paper. VG has formed the main research idea and has provided substantial guidance {{for the development of}} the models. MK participated in the design of the user testing experiment and helped with statistical analysis. All authors read and approved the final manuscript.|$|R
