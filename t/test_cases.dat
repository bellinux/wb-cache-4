10000|10000|Public
5|$|Michelle Cedillo v. Secretary of Health and Human Services, {{also known}} as the omnibus autism {{proceeding}} (OAP), was a court case involving the family of Michelle Cedillo, an autistic girl whose parents sued the United States government because they believed that her autism was caused by her receipt of both the measles-mumps-and-rubella vaccine ({{also known as}} the MMR vaccine) and thimerosal-containing vaccines. The omnibus proceeding required the petitioners to present three <b>test</b> <b>cases</b> for each proposed mechanism by which vaccines had, according to them, caused their children's autism; Michelle was the first such case for the MMR-and-thimerosal hypothesis.|$|E
5|$|Mansfield {{ordered a}} hearing for 22 January 1772. Following an adjournment, {{the case was}} not heard until 7 February 1772. In the meantime, the case had {{attracted}} {{a great deal of}} attention in the press, and members of the public were forthcoming with donations to fund lawyers for both sides of the argument. An activist layman, Granville Sharp, who continually sought <b>test</b> <b>cases</b> against the legal justifications for slavery, was Somersett's real backer. When the case was heard, no fewer than five advocates appeared for the slave, speaking at three separate hearings between February and May. These lawyers included William Davy SL, John Glynn SL, James Mansfield and Francis Hargrave, who was later to become a noted barrister based on his work in this case. Charles Stewart was represented by John Dunning and James Wallace.|$|E
5|$|Oneida I and Oneida II were litigated as <b>test</b> <b>cases</b> by both sides; the Oneidas {{suit against}} the {{counties}} for 200 years of damages was stayed pending its resolution. After settlement efforts, that suit resumed in 2000. In a similar suit by a different tribe, the Second Circuit adopted {{the view of the}} four dissenting Oneida II justices in Cayuga Indian Nation of New York v. Pataki (2005). The same laches defense defeated the larger Oneida claim. The Oneida and the United States petitioned the Supreme Court for certiorari on May 16, 2011. The Court denied certiorari on October 17, with Justices Ginsburg and Sotomayor dissenting from the denial.|$|E
40|$|Given some <b>test</b> <b>case,</b> {{a program}} fails. Which {{circumstances}} of the <b>test</b> <b>case</b> {{are responsible for the}} particular failure? The Delta Debugging algorithm generalizes and simplifies some failing <b>test</b> <b>case</b> to a minimal <b>test</b> <b>case</b> that still produces the failure; it also isolates the difference between a passing and a failing <b>test</b> <b>case...</b>|$|R
40|$|In the {{research}} on automatic generation of <b>testing</b> <b>cases,</b> there are different execution paths under drivers of different <b>testing</b> <b>cases.</b> The probability of these paths being executed is also different. For paths which are easy to be executed, more redundant <b>testing</b> <b>case</b> tend to be generated; But only fewer <b>testing</b> <b>cases</b> are generated for the control paths which are hard to be executed. Genetic algorithm {{can be used to}} instruct the automatic generation of <b>testing</b> <b>cases.</b> For the former paths, it can restrict the generation of these kinds of <b>testing</b> <b>cases.</b> On the contrary, the algorithm will encourage the generation of such <b>testing</b> <b>cases</b> as much as possible. So based on the study on the technology of path-oriented <b>testing</b> <b>case</b> automatic generation, the genetic algorithm is adopted to construct the process of automatic generation. According to the triggering path during the dynamic execution of program, the generated <b>testing</b> <b>cases</b> are separated into different equivalence class. The number of <b>testing</b> <b>case</b> is adjusted dynamicly by the fitness corresponding to the paths. The method can create a certain number of <b>testing</b> <b>cases</b> for each execution path to ensure the sufficiency. It also reduces redundant <b>testing</b> <b>cases</b> so it is an effective method for automatic generation of <b>testing</b> <b>cases...</b>|$|R
40|$|Software {{testing has}} {{valuable}} and important place in software development life cycle. It {{is used to}} identify the quality and good performance of software. For the software testing phases we have to need the proper <b>test</b> <b>case.</b> Test case may be generated manually and automatically. Generating <b>test</b> <b>case</b> manually will take more time and cost. Automatic <b>test</b> <b>case</b> generation will reduce time and cost. This paper combine review on <b>test</b> <b>case</b> generation systems, object oriented, and procedure oriented and component based development and agent oriented system. This paper also gives the overview on the techniques {{which is used to}} generate the <b>test</b> <b>case.</b> Keywords <b>test</b> <b>case</b> generation, techniques, specification based, sketc...|$|R
25|$|The {{selection}} of classes typically follows {{the principle of}} equivalence partitioning for abstract <b>test</b> <b>cases</b> and boundary-value analysis for concrete <b>test</b> <b>cases.</b>|$|E
25|$|It {{supports}} UML activity diagram, component diagram, (logical) class diagram, sequence diagram, and {{use case}} diagram. Visual Studio Ultimate 2010 also includes Test Impact Analysis which provides hints on which <b>test</b> <b>cases</b> are impacted by {{modifications to the}} source code, without actually running the <b>test</b> <b>cases.</b> This speeds up testing by avoiding running unnecessary <b>test</b> <b>cases.</b>|$|E
25|$|For the statistics, {{there are}} 30 {{possible}} <b>test</b> <b>cases</b> in total (2 privileges * 3 operations * 5 access methods). For minimum coverage, 5 <b>test</b> <b>cases</b> are sufficient, {{as there are}} 5 access methods (and access method is the classification with {{the highest number of}} disjoint classes).|$|E
40|$|This paper {{describes}} the blind-test CFD {{activity of the}} EU 6 th Framework project GOAHEAD. This blind-test activity {{has been used to}} evaluate and assess the helicopter CFD codes which are today in use in Europe and to scrutinize the wind-tunnel test conditions with respect to the expected flow phenomena prior to the wind-tunnel test campaign. Results are presented for an isolated fuselage <b>test</b> <b>case,</b> a low-speed (pitch-up) <b>test</b> <b>case,</b> a cruise <b>test</b> <b>case,</b> a high-speed tail-shake <b>test</b> <b>case</b> and a highly-load rotor (dynamic-stall) <b>test</b> <b>case...</b>|$|R
40|$|Previous {{work has}} treated <b>test</b> <b>case</b> {{selection}} {{as a single}} objective optimisation problem. This paper introduces the concept of Pareto efficiency to <b>test</b> <b>case</b> selection. The Pareto efficient approach takes multiple objectives such as code coverage, past fault-detection history and execution cost, and constructs a group of non-dominating, equivalently optimal <b>test</b> <b>case</b> subsets. The paper describes {{the potential benefits of}} Pareto efficient multi-objective <b>test</b> <b>case</b> selection, illustrating with empirical studies of two and three objective formulations...|$|R
40|$|Given some <b>test</b> <b>case,</b> {{a program}} fails. Which {{circumstances}} of the <b>test</b> <b>case</b> {{are responsible for the}} particular failure? The Delta Debugging algorithm generalizes and simplifies some failing <b>test</b> <b>case</b> to a minimal <b>test</b> <b>case</b> that still produces the failure; it also isolates the difference between a working and a failing <b>test</b> <b>case.</b> In a case study, the Mozilla web browser crashed after 95 user actions. Our prototype implementation automatically simplified the input to 3 relevant user actions. Likewise, it simplified 896 lines of HTML to the single line that caused the failure. The case study required 139 automated test runs, or 35 minutes on a 500 MHz PC. 1...|$|R
25|$|Combination of {{different}} classes from all classifications into <b>test</b> <b>cases.</b>|$|E
25|$|In {{addition}} to atomic <b>test</b> <b>cases,</b> test sequences containing several test steps can be specified.|$|E
25|$|In certain {{particular}} <b>test</b> <b>cases,</b> other similarity parameters must be satisfied, such as e.g. Froude number.|$|E
3000|$|... (i= 1,...,d) start fuzzing {{the binary}} {{performing}} <b>test</b> <b>case</b> generation, quality evaluation, adaptation of diffusivity, and <b>test</b> <b>case</b> update {{as described in}} Section 5.|$|R
3000|$|General <b>test</b> <b>case</b> {{prioritization}} - <b>test</b> <b>case</b> prioritization {{is applied}} {{any time in}} the software development process, even in the initial testing activities; [...]...|$|R
40|$|Nowadays, {{software}} test {{is one of}} {{the most}} important activities that software’s quality will be certified by it. Test operation includes program’s implement on <b>test</b> <b>case</b> set and comparison of results with expected one. Manual <b>test</b> <b>case</b> for operation <b>test</b> program and error detect is time consuming with insufficient precision and complicated coverage of program, so, the use of algorithms in automatic <b>test</b> <b>case</b> generation has been considered. Meta-heuristic algorithms are known tools which are optimized and used in <b>test</b> <b>case</b> generation. Most of complicated matters need a lot of possible states assessment in order to reach the valid answer. With the proper answer, <b>test</b> <b>case</b> optimization and meta-heuristic algorithms play a constructive role. In this paper we would compare methods and their traits, and the software <b>test</b> <b>case</b> generation methods based on meta-heuristic algorithms with their description...|$|R
25|$|The {{selection}} of <b>test</b> <b>cases</b> originally was a manual task {{to be performed}} by the test engineer.|$|E
25|$|New users tend {{to include}} too many (esp. irrelevant) test aspects {{resulting}} {{in too many}} <b>test</b> <b>cases.</b>|$|E
25|$|The {{minimum number}} of <b>test</b> <b>cases</b> {{is the number of}} classes in the {{classification}} with the most containing classes.|$|E
5000|$|An {{executable}} {{script is}} needed for each <b>test</b> <b>case.</b> It should be written according to <b>test</b> <b>case</b> description which defines the PDU sequence and verification points.|$|R
3000|$|... <b>test</b> <b>case</b> {{and then}} is broken in t-tuples (line 8) {{according}} to the parameters interactions that have Φ other than 0. For example, the <b>test</b> <b>case</b> τ [...]...|$|R
40|$|Abstract—Given some <b>test</b> <b>case,</b> {{a program}} fails. Which {{circumstances}} of the <b>test</b> <b>case</b> {{are responsible for the}} particular failure? The Delta Debugging algorithm generalizes and simplifies the failing <b>test</b> <b>case</b> to a minimal <b>test</b> <b>case</b> that still produces the failure. It also isolates the difference between a passing and a failing <b>test</b> <b>case.</b> In a case study, the Mozilla web browser crashed after 95 user actions. Our prototype implementation automatically simplified the input to three relevant user actions. Likewise, it simplified 896 lines of HTML to the single line that caused the failure. The case study required 139 automated test runs or 35 minutes on a 500 MHz PC. Index Terms—Automated debugging, debugging aids, testing tools, combinatorial testing, diagnostics, tracing. æ...|$|R
25|$|Cases {{of swine}} flu have been {{reported}} in India, with over 31,156 positive <b>test</b> <b>cases</b> and 1,841 deaths up to March 2015.|$|E
25|$|Stephen Kos, 1984, Interim Relief in the International Court: New Zealand and the Nuclear <b>Test</b> <b>Cases,</b> Victoria University Wellington Law Review.|$|E
25|$|The {{maximum number}} of <b>test</b> <b>cases</b> is the Cartesian product of all classes of all classifications in the tree, quickly {{resulting}} in large numbers for realistic test problems.|$|E
3000|$|... where j= 1,…, 4 {{corresponds}} to a model in a <b>test</b> <b>case.</b> A <b>test</b> <b>case</b> contains four models: one model before outlier removal and three after different outlier removal methods applied.|$|R
3000|$|... all. Then, the fuzzer {{enters the}} loop of <b>test</b> <b>case</b> generation, quality evaluation, {{adaptation}} of diffusivity, and <b>test</b> <b>case</b> update. The first step within the loop (referred to as Last (X [...]...|$|R
40|$|This paper {{presents}} a new <b>test</b> <b>case</b> generation method based on formal system specifications in SDL. The test {{purpose of a}} specific <b>test</b> <b>case</b> is specified formally by one or many Message Sequence Charts (MSCs). Based on the test purpose and the system specification a complete <b>test</b> <b>case</b> can be generated automatically in the TTCN format, including preamble, postamble and test body with all test verdicts...|$|R
25|$|Does an {{algorithm}} do {{what its}} author {{wants it to}} do? A few <b>test</b> <b>cases</b> usually suffice to confirm core functionality. One source uses 3009 and 884. Knuth suggested 40902, 24140. Another interesting case is the two relatively prime numbers 14157 and 5950.|$|E
25|$|In {{order to}} ensure that {{meaningful}} regression analysis can be conducted throughout a software development lifecycle process, any exception handling testing should be highly automated, and the <b>test</b> <b>cases</b> must be generated in a scientific, repeatable fashion. Several commercially available systems exist that perform such testing.|$|E
25|$|A key {{component}} of the Turkification process was the policy of massive population resettlement - {{a result of the}} 1934 law on resettlement. This policy targeted the region of Dersim as one of its first <b>test</b> <b>cases,</b> and it had disastrous consequences for the local population.|$|E
40|$|Keywords:status reduction, <b>test</b> <b>case</b> generation, {{predicate}} abstraction, {{equivalence class}} Abstract. Due {{to the large}} number of status transition of large scale software system, an efficient <b>test</b> <b>case</b> generation method based on predicate abstraction is proposed aiming to the problem of status space explosion. The reduced abstract status is solved via mapping the status sets between the real status and abstract status, and then generated the reduced <b>test</b> <b>case</b> based on the transition of the status. The experimental results show that this method can reduce the status of the real model in a high efficient, and generate a smaller set of <b>test</b> <b>case...</b>|$|R
40|$|Abstract—A typical {{approach}} {{utilized for}} automated <b>test</b> <b>case</b> generation {{is to create}} a model of the implementation under test. Extended Finite State Machine (EFSM) is among the most popular models for model-based testing. However, automated <b>test</b> <b>case</b> generation on EFSM models is still a challenge task {{as a result of the}} fact that an EFSM model may contain infeasible paths. In this article we present a novel approach that combines static analysis and dynamic analysis techniques to address the problems of path infeasibility in the process of <b>test</b> <b>case</b> generation on EFSM models. A metric is presented for the purpose of finding a path subset that has few paths, long path length and goodness feasibility to meet adequacy coverage criteria. In addition, we develop an executable model to obtain run-time information feedback and introduce the Scatter Search into <b>test</b> <b>case</b> generation. Based on the executable model, the expected outputs associated with test data are also collected for construction of test oracles automatically. The experimental results show that our approach has good effectiveness for <b>test</b> <b>case</b> generation on EFSM models, and the method that combines static analysis and dynamic analysis can speed up the process of <b>test</b> <b>case</b> generation greatly. Keywords- <b>test</b> <b>case</b> generation, EFSM model-based testing, executable model, path feasibility analysis, test oracle I...|$|R
30|$|During {{each test}} Statistics-component {{of the test}} client {{measured}} throughput within a 2  s interval (based on received latency reports), which was saved into a measurement file after completion of a test. The throughput measurements were averaged to get an overall average throughput in a <b>test</b> <b>case.</b> A <b>test</b> <b>case</b> was executed three times in each test configuration. The final throughput is an average of the <b>test</b> <b>case</b> iterations.|$|R
