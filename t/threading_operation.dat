4|92|Public
40|$|Normally in {{circular}} rolling machine, the {{stud bolt}} is threaded in one side at a time. In {{order to improve}} the production cycle of circular rolling machine, {{we are going to}} redesign the existing die setup, in which simultaneously to make thread in both sides of stud bolt. The stud bolt to be manufactured has two varying shank diameter, which cannot be balanced while <b>threading</b> <b>operation</b> in normal machine setup. So this new experimental setup gives a balanced rolling operation and hence improves productivity of the machine in making stud bolt...|$|E
40|$|To make {{wave power}} more {{competitive}} {{on the market}} Uppsala University leads projects that examine how to accomplish better efficiency in the production. One of these projects is described in this report and examines whether {{it is possible to}} make the production of dovetails more efficient by using an industry robot of type ABB IRB 6000 S 3 M 91. This project is using an already presented working method, from a previous project, which involves that the robot picks up the dovetail and moves against fixed cutting machines where the dovetail will be drilled, threaded and milled. Drilling and threading are the sub operations that will be examined in this project where experiments are made with the presented working method and with equipment from Uppsala University. Experiments show whether it is possible to drill the holes in the dovetail within specifications by using the specific robot and the presented working method. The <b>threading</b> <b>operation</b> is examined theoretically if it is possible to accomplish by using the same working method. A tool for the robot is constructed so that the robot can pick up the dovetail and hold it though all the cutting operations. The functions of the tool are evaluated. In this project a working station for drilling and threading is also presented with external fixtures that are adjusted to fit the designs of the used dovetails. Using the specific robot and the presented working method in the experiment, a result within the specifications could be obtained in the processing rate. In the terms of time the result was not within desired limits, although the time of the process with the experiment setup could be reduced. It is reasonable to use the same working method for the <b>threading</b> <b>operation.</b> The prototype of the tool for the robot was able to pick up the dovetail and take the different working positions; however the tool should be tested in operation with external fixtures for further evaluation. ...|$|E
40|$|We {{present a}} new {{function}} that operates on Fundamental matrices across {{a sequence of}} views. The operation, we call "threading", connects two consecutive Fundamental matrices using the Trilinear tensor as the connecting thread. The <b>threading</b> <b>operation</b> guarantees that consecutive camera matrices are consistent with a unique 3 D model, without ever recovering a 3 D model. Applications include recovery of camera ego-motion from a sequence of views, image stabilization (plane stabilization) across a sequence, and multi-view image-based rendering. 1 Introduction Consider the problem of recovering the (uncalibrated) camera trajectory from an extended sequence of images. Since the introduction of multi-linear forms across three or more views (see Appendix) {{there have been several}} attempts to put together a coherent algebraic framework that would produce a sequence of camera matrices that are consistent with the same 3 D (projective) world [25, 4, 23]. The consistency requirement arises from the [...] ...|$|E
5000|$|... {{supports}} basic IMAP SEARCH/SORT and <b>THREAD</b> <b>operations</b> (can filter {{the list}} to display “related messages”).|$|R
5000|$|Context switch {{times and}} other <b>thread</b> <b>operations</b> {{are free and}} have {{no impact on the}} model ...|$|R
40|$|Variations {{in cutting}} forces were {{investigated}} experimentally depending on infeed angles and cutting {{areas in the}} external threading on a CNC turning centre. For this purpose, AISI 1050 workpiece material, 16 ERM AG 60 IC 908 cutting tool, and SER 2525 M 16 tool holder were used. External <b>threading</b> <b>operations</b> were performed using 0 ◦, 14. 5 ◦, 15 ◦, 27. 5 ◦, and 30 ◦ infeed angles while the cutting speed was held constant at 100 m/min for the experiments. Experimental {{results showed that the}} infeed angle and cutting area had significant effects on the main cutting force and the radial force components were considerable in <b>threading</b> <b>operations</b> in terms of energy consumption. In addition, the optimum infeed angle was 30 ◦ in the external <b>threading</b> <b>operations</b> in terms of cutting forces...|$|R
40|$|The complex {{correlation}} {{structure of}} a collection of orthologous DNA sequences is uniquely captured by the "ancestral recombination graph" (ARG), a complete record of coalescence and recombination events {{in the history of the}} sample. However, existing methods for ARG inference are computationally intensive, highly approximate, or limited to small numbers of sequences, and, as a consequence, explicit ARG inference is rarely used in applied population genomics. Here, we introduce a new algorithm for ARG inference that is efficient enough to apply to dozens of complete mammalian genomes. The key idea of our approach is to sample an ARG of [Formula: see text] chromosomes conditional on an ARG of [Formula: see text] chromosomes, an operation we call "threading. " Using techniques based on hidden Markov models, we can perform this <b>threading</b> <b>operation</b> exactly, up to the assumptions of the sequentially Markov coalescent and a discretization of time. An extension allows for threading of subtrees instead of individual sequences. Repeated application of these threading operations results in highly efficient Markov chain Monte Carlo samplers for ARGs. We have implemented these methods in a computer program called ARGweaver. Experiments with simulated data indicate that ARGweaver converges rapidly to the posterior distribution over ARGs and is effective in recovering various features of the ARG for dozens of sequences generated under realistic parameters for human populations. In applications of ARGweaver to 54 human genome sequences from Complete Genomics, we find clear signatures of natural selection, including regions of unusually ancient ancestry associated with balancing selection and reductions in allele age in sites under directional selection. The patterns we observe near protein-coding genes are consistent with a primary influence from background selection rather than hitchhiking, although we cannot rule out a contribution from recurrent selective sweeps...|$|E
40|$|AbstractThe {{modulated}} {{tool path}} (MTP) chip breaking {{process has been}} modified to improve chip management capabilities and to prevent large chip nest accumulations commonly encountered in <b>threading</b> <b>operations.</b> The use of MTP to create segmented chips requires a different approach for <b>threading</b> <b>operations</b> than for normal MTP turning operations, although the fundamental principal is the same. The primary difference between MTP for threading and for straight turning is that the part surface that the tool repeatedly engages and disengages, during the modulation process, is the thread root rather than the cut face. The threading MTP part program developed in this paper is capable of machining a thread with the desired lead, depth, undercut angle, and taper angle while also producing segmented chips...|$|R
40|$|We {{present the}} design and {{implementation}} of Arachne, a threads system that can be interfaced with a communications library for multi-threaded distributed computations. In particular, Arachne supports thread migration between heterogeneous platforms, with dynamic stack size management and recursive thread functions. Arachne is efficient, flexible and portable [...] - it is based entirely on C and C++. To facilitate heterogeneous <b>thread</b> <b>operations,</b> we have added three keywords to the C++ language. The Arachne preprocessor takes as input code written in that language, and outputs C++ code, suitable for compilation with a conventional C++ compiler. The Arachne runtime system manages all threads during program execution. We present some performance measurements on the costs of basic <b>thread</b> <b>operations</b> and <b>thread</b> migration in Arachne, and compare these to costs in other threads systems. Keywords: heterogeneous thread migration, user-level threads, compile-time code transformations, C++ Supporte [...] ...|$|R
5000|$|... <b>threading</b> <b>operations</b> include a)all {{types of}} {{external}} and internal thread forms using a single point tool also taper threads, double start threads, multi start threads, worms as used in worm wheel reduction boxes, leadscrew with single or multistart threads. b) {{by the use of}} threading boxes fitted with 4 form tools, up to 2" [...] diameter threads but it is possible to find larger boxes than this.|$|R
40|$|Bulk of {{the final}} covers {{material}} after midterm Memory management, file systems, advanced topics Some material on <b>threads,</b> synchronization <b>Thread</b> <b>operations,</b> semaphores Based upon lecture material, homeworks, and project I will use at least one question from this review on the exam Closed book, one 8. 5 ”x 11 ” sheet of notes Again, please, do not cheat Cheating has been a minimum, would like {{to keep it that}} wa...|$|R
50|$|In a {{multiprocessor}} system executing a single {{set of instructions}} (SIMD), data parallelism is achieved when each processor performs the same task on different pieces of distributed data. In some situations, a single execution <b>thread</b> controls <b>operations</b> on all pieces of data. In others, different <b>threads</b> control the <b>operation,</b> but they execute the same code.|$|R
5000|$|Synchronization elision. If {{an object}} {{is found to}} be {{accessible}} from one <b>thread</b> only, <b>operations</b> on the object can be performed without synchronization.|$|R
40|$|Parallel servers for I/O and compute {{intensive}} {{continuous media}} applications {{are difficult to}} develop. A server application comprises many threads located in different address spaces as well as files striped over multiple disks located on different computers. The present contribution describes {{the construction of a}} continuous media server, the 4 D beating heart slice server, based on a computer-aided parallelization tool (CAP) and on a library of parallel file system components enabling the combination of pipelined parallel disk access and processing operations. Thanks to CAP, the presented archictecture is concisely described as a set of <b>threads,</b> <b>operations</b> located within the threads and flow of data and parameters (tokens) between operations. Continuous media applications are supported by allowin...|$|R
40|$|Lightweight threads are {{becoming}} increasingly useful in supporting parallelism and asynchronous events in applications and language implementations. Traditionally, lightweight threads are supported only within the single address space of a process, or in shared memory environments with multiple processes. We introduce and describe the design of Chant, a runtime system supporting lightweight threads in a distributed memory environment. In addition to communication between any two threads in the system, Chant provides support for remote service requests, remote <b>thread</b> <b>operations,</b> and collective communication between thread groups called ropes. Chant provides the first implementation of lightweight threads for a distributed memory platform whose design incorporates existing standards for lightweight threads and interprocess communication. This paper details the issues that arise in extending a standard threads package to support distributed memory execution, and the solutions tha [...] ...|$|R
40|$|Abstract We {{have built}} a {{portable}} platform for running Standard ML of New Jersey programs on multiprocessors. It {{can be used to}} implement user-level thread packages for multiprocessors within the ML language with first-class continuations. The platform supports experimentation with different thread scheduling policies and synchronization constructs. It has been used to construct a Modula- 3 style thread package and a version of Concurrent ML, and has been ported to three different multiprocessors running variants of Unix. This paper describes the platform's design, implementation, and performance. 1 Introduction Many concurrent and parallel computations can be expressed elegantly and efficiently using collections of lightweight threads. Both kernel-level and user-level thread packages have become a common part of computing environments. User-level packages can offer substantially better performance than kernel facilities, because <b>thread</b> <b>operations</b> do not require expensive system calls [2, 15, 23]...|$|R
40|$|To {{cope with}} the growing design {{complexity}} and time-to-market pressure, today’s designs are based on programmable processors and intellectual properties (IPs). According to this trend, many FPGA providers are now announcing new configurable devices that integrate one or more processors on an array of configurable logic blocks (CLBs) as their future products [1]. However, the devices are not sufficient to accommodate the features required in embedded system design [2]. In addition to fast processing, the processor must deal {{with a number of}} tasks to execute many <b>threaded</b> <b>operations</b> and control peripheral operations. As the operations are overlapped in execution, the processor should be equipped with fast task-switching capability. In addition, the logic array must be designed considering IP-based designs. As the conventional FPGA architecture is based on a flattened array of logic blocks, IPs are intermingled at the time of placement an...|$|R
5000|$|For many applications, mutual {{exclusion}} is not enough. <b>Threads</b> attempting an <b>operation</b> {{may need to}} wait until some condition [...] holds true. A busy waiting loop ...|$|R
40|$|Abstract — CollabCAD is an {{indigenous}} 3 D CAD/CAM software system for collaborative design {{and development of}} Industrial Designs for strategic use. This work is for CAM module of the indigenous software, in which the development of post-processor is the task that is accomplished. The CAD model is created in CollabCAD and the required tool path was produced in a generic format known as Cutter Location (CL) data. Then it is converted by an application program called “PSG CollabCAD Post processor (PCP) ” into the form suitable for the machine tool. CNC machining operations that include drilling, boring and <b>threading</b> <b>operations</b> were considered for post-processing. The CNC program generated by the PCP 2. 1 was verified using Fanuc- 32 i control’s tool path simulation and by machining a test piece in a CNC machining centre. Keywords-CL data, CollabCAD, PCP 2. 1, FANUC – 32 i I...|$|R
40|$|We {{describe}} {{the design of}} an efficient and portable threads system that supports multi-threaded distributed computations on heterogeneous networks. The system enables threads to migrate between processes that run on different hardware platforms. We present a complete implementation of the design in ANSI C++. This implementation consists of a code preprocessor and a runtime library, and supports applications developed in C or C++. The runtime environment is capable of supporting tens {{to hundreds of thousands}} of threads. We also present some performance measurements on the costs of basic <b>thread</b> <b>operations</b> and <b>thread</b> migration. 1 Introduction Threads enable cheap and highly effective forms of system- and user-level concurrency in software executions. Despite programming complexities induced by concurrency, it is our experience that the potential benefits of threads amply justify the extra care required in their use. The creation and manipulation of user-space threads is cheap; a thread [...] ...|$|R
25|$|Placing thin spacers {{between the}} hub {{shoulder}} and the cog. This is recommended {{in the case}} of a freewheel-threaded hub, which has sufficiently deep <b>threads</b> for this <b>operation.</b>|$|R
40|$|Object-Z is an {{extension}} to the Z language designed to facilitate specification in an object-oriented style. It is an excellent tool for modelling data and operations, but its object semantics are single <b>threaded,</b> <b>operations</b> are atomic, and object control logic is defined implicitly. This {{makes it difficult to}} use Object-Z to capture the behaviour of concurrent real-time reactive systems. On the other hand, Timed CSP is good at modelling real-time concurrent behaviour, but has little support for modelling the state of a complex system. This paper describes the semantics of TCOZ, a language blended from Object-Z and Timed CSP. The semantic model adopted is the infinite timed failures model of Timed CSP, extended to include initial state and update events for modelling operations on internal state. 1 Introduction Convergence: The choice of a formal method or tool is no longer controversial: formal methods are chosen in relation to their purpose and they are increasingly used in effectiv [...] ...|$|R
40|$|AbstractThe paper {{presents}} {{the evaluation of}} the drillability characteristics of the Ti 6 Al 4 V titanium alloy produced through the Additive Manufacturing (AM) technology called Direct Metal Laser Sintering (DMLS). Holes of 1. 6 mm diameter were drilled on a 5 -axis high-precision micro-milling machine under dry cutting conditions at varying cutting speed and feed rate. A specific measurement procedure was developed to quantify and compare the most representative geometrical features (diameter and perpendicularity) of the machined holes as well as the quantification of burrs. The influence of the AM material on the geometrical quality of high precision holes is discussed, taking into account the requirements of the following <b>threading</b> <b>operations.</b> Finally, <b>thread</b> milling experiments were carried out to prove the threading feasibility and performances based on the previous drilling experiments. From the results within the tested range of cutting conditions, the lowest values of the cutting speed and feed rate seem to be the best trade-off for achieving the required hole quality...|$|R
40|$|Abstract:- This paper {{presents}} the parallel multicore Sobel edge algorithm which parallelizes the traditional sequential Sobel edge detection algorithm on a parallel multicore platform. The current advancement of multicore architecture can be utilized by the parallel programming paradigm when {{focuses on the}} <b>thread</b> <b>operations.</b> The CPUs/cores provide more processing resource to be used but often not fully utilized to its utmost potential. In this paper, the performance of multicore architectures, combined with the parallel communication software named Message Passing Interface (MPI), on the application of Sobel Edge detector algorithm is implemented on various thread processing is performed and analyzed. The test is being done on ten different images with each image tested in the varying size of 1 Kx 1 K, 2 Kx 2 K, and 3 Kx 3 K pixels. The significant performance increment is discovered {{due to the fact}} that the CPU is being fully utilized. This proves that the current hardware is far more underutilized than one would expect...|$|R
40|$|In August 2003, Canadian and {{international}} media broke news of <b>Operation</b> <b>Thread,</b> {{executed by the}} Canadian state security apparatus to apprehend 23 South-Asian Muslim members of a “possible Al-Qaeda sleeper cell” in the Greater Toronto Area. After exposing the suspects to domestic {{and international}} opprobrium, the state security apparatus conceded that the allegations of terrorism were unfounded. Using material from the National Post and The Globe and Mail, this paper interrogates the mass mediation of <b>Operation</b> <b>Thread</b> as a case of racial profiling situated in a moral panic over “Islamic terrorism” that was created by {{a section of the}} Canadian news media and the state security apparatus. Particularly, it shows that the media contested the discourse of the state security apparatus, thus reflecting the contested nature of news as a social power resource. However, there is still a need for the media to be more critical when dealing with cases such as <b>Operation</b> <b>Thread</b> that are informed by racial profiling post September 11...|$|R
40|$|The paper {{presents}} {{the evaluation of}} the drillability characteristics of the Ti 6 Al 4 V titanium alloy produced through the Additive Manufacturing (AM) technology called Direct Metal Laser Sintering (DMLS). Holes of 1. 6 mm diameter were drilled on a 5 -axis high-precision micro-milling machine under dry cutting conditions at varying cutting speed and feed rate. A specific measurement procedure was developed to quantify and compare the most representative geometrical features (diameter and perpendicularity) of the machined holes as well as the quantification of burrs. The influence of the AM material on the geometrical quality of high precision holes is discussed, taking into account the requirements of the following <b>threading</b> <b>operations.</b> Finally, <b>thread</b> milling experiments were carried out to prove the threading feasibility and performances based on the previous drilling experiments. From the results within the tested range of cutting conditions, the lowest values of the cutting speed and feed rate seem to be the best trade-off for achieving the required hole quality...|$|R
40|$|The draft {{standard}} Threads Extension to the POSIX Portable Operating System Interface provides an {{application program interface}} to services supporting the creation and execution of multiple threads of control sharing the address space and file descriptors of a single POSIX process. This paper reports {{on the progress of}} an effort to test the compatibility of POSIX threads and Ada by implementing Ada tasking using the proposed standard POSIX <b>threads</b> <b>operations.</b> 1 Introduction The POSIX/Ada Real-Time (PART) 1 project has two main objectives: to accelerate development of standard Ada language bindings for the POSIX Realtime Extension [3] and Threads Extension [7]; to determine whether these interfaces are a suitable basis for the implementation of Ada tasking, by building a prototype Ada runtime system (RTS) using them. The second of these goals is intended to provide feedback to the IEEE Pthreads working group. Rationale contained in Draft 5 of Pthreads makes it clear that it is inte [...] ...|$|R
40|$|International audienceWe propose an {{abstraction}} {{to alleviate the}} difficulty of programming with threads. This abstraction is not directly usable by application programmers. Instead, application-visible behavior is defined through a semantical plugin, and invoked via a language or library that uses the plugin. The main benefit is that parallel language runtimes become simpler to implement, because they use sequential algorithms for the parallel semantics. This is possible because the abstraction makes available a virtual time in which events in different program time-lines are sequentialized. The parallel semantics relate events in different time-lines via relating the sequentialized versions within the virtual time-line. We have implemented the abstraction in user-space and demonstrate its low overhead and quickness to implement a runtime on three sets of parallelism constructs: rendez-vous style send and receive; Cilk style spawn and sync, which have similar performance to Cilk 5. 4; and mutex and condition variable constructs from pthreads, which have 80 x lower overhead than Linux <b>thread</b> <b>operations.</b> Development time averaged around two days per set, versus an expected duration of weeks to modify a thread-based runtime system...|$|R
40|$|Lightweight threads are {{becoming}} increasingly useful in supporting parallelism and asynchronous control structures in applications and language implementations. However, lightweight thread packages traditionally support only shared memory synchronization and communication primitives, limiting their use in distributed memory environments. We introduce {{the design of a}} runtime interface, called Chant, that supports lightweight threads with the capability of communication using both point-to-point and remote service request primitives, built from standard message passing libraries. This is accomplished by extending the POSIX pthreads interface with global thread identifiers, global <b>thread</b> <b>operations,</b> and message passing primitives. This paper introduces the Chant interface and describes the runtime issues in providing an efficient, portable implementation of such an interface. In particular, we present performance results of the initial portion of our runtime system: point-to-point message passing among threads. We examine the issue of thread scheduling in the presence of polling for messages, and measure the overhead incurred when using this interface as opposed to using the underlying communication layer directly. We show that our design can accommodate various polling methods, depending on the level of support present in the underlying thread system, and imposes little overhead in point-to-point message passing over the existing communication layer...|$|R
50|$|An {{example is}} string <b>threading,</b> in which <b>operations</b> are {{identified}} by strings, usually looked-up by a hash table. This {{was used in}} Charles H. Moore's earliest Forth implementations and in the University of Illinois's experimental hardware-interpreted computer language. It is also used in Bashforth.|$|R
30|$|In summary, in this section, we {{have built}} on our recent {{developments}} on PCZ implementation [7] and incorporated additional design optimizations to further improve performance. The new design optimizations discussed here include minimizing the rate of data transfers, enhancing coalesced access of GM, optimized utilization of SM, and enhanced GPU utilization by reducing <b>thread</b> granularity (<b>operation</b> complexity). The result is a simpler architecture with reduced bottlenecks and elimination of a dominant sequential loop. Collectively, these optimizations result in significant further improvement in throughput and latency.|$|R
40|$|Abstract: Ultrasonic phased arrays use {{multiple}} {{elements and}} electronic time delays to create beams by constructive and destructive interference. The phased array beams can be steered, scanned and focused electronically. As such, phased arrays offer advantages for the inspection of complex geometries. An additional advantage of phased arrays is {{the capability to}} create a complete image of the part to inspect from a single probe position and to conduct signal analysis for automating the inspection. Time of flight and amplitude data from all the inspected volume can be analysed, treated and compared with a reference data set for generating a GO- NOGO result. The case of interest consists of inspecting internal threads on an aluminum part. Certain parts are mistakenly threaded twice with a random angle of error between the two <b>threading</b> <b>operations.</b> Beyond a certain angle, the threads are weak and the parts must be rejected. A phased-array instrument performs an electronic scan using a 64 -element probe, 15 -element apertures, and 100 focal laws distanced by 0. 5 mm. As the angle of error increases, the signal amplitude {{from the tip of}} threads diminishes while it increases from the thread bottom. On each side of the threads are distinct mechanical characteristics (reference points) that allow locating precisely the position o...|$|R
40|$|Concurrency and {{distribution}} in {{a programming language}} are simple to deal with {{when they are not}} mixed with stateful <b>operations.</b> <b>Threads</b> and processes can communicate with dataflowvariables, whichmakes synchronization implicit. The multiparadigm programming language Oz provides such a model, together with a fine integration of stateful entities...|$|R
40|$|Abstract. This paper {{presents}} an expressive specification and verifica-tion framework for ensuring deadlock freedom of shared-memory con-current programs that manipulate locks. We introduce a novel delayed lockset checking technique to guarantee deadlock freedom of programs with interactions between <b>thread</b> and lock <b>operations.</b> With disjunctive formulae, we highlight how an abstraction based on precise lockset can be supported in our framework. By combining our technique with locklevels, we form a unified formalism for ensuring deadlock freedom from (1) dou-ble lock acquisition, (2) interactions between <b>thread</b> and lock <b>operations,</b> and (3) unordered locking. The proposed framework is general, {{and can be}} integrated with existing specification logics such as separation logic. Specifically, we have implemented this framework into a prototype tool, called ParaHIP, to automatically verify deadlock freedom and correct-ness of concurrent programs against user-supplied specifications...|$|R
40|$|Conventional <b>threading</b> <b>operations</b> involve two {{distinct}} machining processes: drilling and threading. Therefore, {{it is time}} consuming for the tools must be changed and the workpiece has to be moved to another machine. This paper presents {{an analysis of the}} combined process (drilling followed by threading) using a single tool for both operations: the tap-milling tool. Before presenting the methodology used to evaluate this hybrid tool, the ODS (operating deflection shapes) basics is shortly described. ODS and finite element modeling (FEM) were used during this research to optimize the process aiming to achieve higher stable machining conditions and increasing the tool life. Both methods allowed the determination of the natural frequencies and displacements of the machining center and optimize the workpiece fixture system. The results showed that there is an excellent correlation between the dynamic stability of the machining center-tool holder and the tool life, avoiding a tool premature catastrophic failure. Nevertheless, evidence showed that the tool is very sensitive to work conditions. Undoubtedly, the use of ODS and FEM eliminate empiric decisions concerning the optimization of machining conditions and increase drastically the tool life. After the ODS and FEM studies, it was possible to optimize the process and work material fixture system and machine more than 30, 000 threaded holes without reaching the tool life limit and catastrophic fail...|$|R
40|$|The FEniCS Project is {{a widely}} used, {{open-source}} problem solving environment for partial differential equations that allows users to specify equations in mathematical sym-bolic form via a domain-specific language, and solve them using the finite element method. The FEniCS Problem solving environment provides C++ and Python interfaces, and re-lies on automated code generation to reconcile expressive input with high performance. Because of the generic nature of the software, many different scientific problems are being addressed using FEniCS/DOLFIN, including geodynamics, heat flow, elasticity, electro-magnetics, flow in porous media, Navier–Stokes equations and acoustics. The key aims of this project were to enhance the applicability and usability of DOLFIN, the core finite element library in the FEniCS Project, on parallel architectures. DOLFIN already supported fully distributed computation via MPI, but lacked some important infrastructure for enabling large scale parallel computation. This included a lack of (i) scalable parallel I/O and (ii) parallel mesh refinement. In addition, (iii) DOLFIN did not support <b>threaded</b> <b>operations</b> in combination with MPI. Implementation of the three afore-mentioned points formed the objectives of this project. All three objectives have been realised and exceeded, and the computer code developed is publicly available. Outcomes of this project are either already in a release of DOLFIN or are in development reposito-ries and {{will be included in}} the next release, and are already being used in a number of research projects, including projects supported by UK research councils...|$|R
