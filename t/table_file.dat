39|409|Public
25|$|RowGen is {{designed}} to generate test data in production <b>table,</b> <b>file,</b> and report formats for prototype database population, compliance, outsourcing, and application prototyping projects. RowGen's GUI parses data models to define table layouts and relationships so database test sets are structurally and referentially correct. RowGen can also transform and format test data during its generation.|$|E
25|$|Cron {{is driven}} by a crontab (cron <b>table)</b> <b>file,</b> a {{configuration}} file that specifies shell commands to run periodically on a given schedule. The crontab files are stored where the lists of jobs and other instructions to the cron daemon are kept. Users can have their own individual crontab files and often there is a system-wide crontab file (usually in /etc or a subdirectory of /etc) that only system administrators can edit.|$|E
5000|$|The Compiled Grammar <b>Table</b> <b>file</b> is used {{to store}} table {{information}} generated by the Builder.|$|E
50|$|If both {{such systems}} (<b>file</b> <b>table,</b> and <b>file</b> data) {{were capable of}} being {{addressed}} as a single entity (i.e. using virtual nodes in a cluster), then growth into such a system could be easily controlled simply by deciding which uses the grid member would be responsible (<b>file</b> <b>table</b> and <b>file</b> lookups, and/or file data).|$|R
50|$|A {{component}} is something required {{to execute a}} stereotype function. Examples of stereotypes in components include executables, documents, database <b>tables,</b> <b>files,</b> and library files.|$|R
5000|$|Useful {{functions}} {{that use the}} class database are: void write(database &db); //write the database structure into a file friend void read(database &db); //read the database structure from a file friend void del(database &db); //delete the database and its <b>tables</b> <b>files</b> friend void print(database &db); //print the database on the screen ...|$|R
50|$|Export (DBF): Specifies {{whether the}} product support {{exporting}} (saving) selected rows to a dBase <b>Table</b> <b>file.</b>|$|E
5000|$|... many {{input-output}} chemical file formats, including simplified molecular-input line-entry system (SMILES), Chemical Markup Language (CML), {{and chemical}} <b>table</b> <b>file</b> (MDL) ...|$|E
5000|$|... #Caption: Red (A), Green (B), Blue (C) 16 bit Look Up <b>Table</b> <b>file</b> sample. (Lines 14 to 65524 not shown) ...|$|E
5000|$|Obeying a user-provided <b>table</b> of <b>file</b> {{descriptions}} {{to emphasize}} or ignore.|$|R
25|$|FieldShield is a CoSort {{spin-off}} {{designed to}} protect data privacy. The software protects personally identifiable information and other private data at the field or record level within database <b>tables,</b> <b>files</b> and other sources subject to data spill. Privacy functions include AES encryption, data masking, and pseudonymization. Job details can be audited from a log file in XML format.|$|R
5000|$|Snapshots can {{be useful}} for backing up self-consistent {{versions}} of volatile data such as <b>table</b> <b>files</b> from a busy database, or for rolling back large changes (such as an operating system upgrade) in a single operation. Snapshots have a similar effect as rendering storage quiescent, and {{are similar to the}} shadow copy (VSS) service in Microsoft Windows.|$|R
5000|$|He is {{credited}} with designing and implementing the 8-bit File Allocation <b>Table</b> <b>file</b> system for the NCR 8200 data-entry terminal and Microsoft's Standalone Disk BASIC-80 in 1977.|$|E
50|$|Chemical <b>table</b> <b>file</b> (CT File) is {{a family}} of text-based {{chemical}} file formats that describe molecules and chemical reactions. One format, for example, lists each atom in a molecule, the x-y-z coordinates of that atom, and the bonds among the atoms.|$|E
50|$|Once the LALR and DFA parse {{tables are}} {{successfully}} constructed, the Builder can save this data into a Compiled Grammar <b>Table</b> <b>file.</b> This allows {{the information to}} be reopened later by the Builder or used {{in one of the}} Engines. Currently, the Builder component is only available for Windows 32-bit operating systems.|$|E
5000|$|... index.sqlite {{which is}} a SQLite {{database}} containing two <b>tables</b> - <b>files</b> and thumbnails.|$|R
5000|$|... #Caption: File {{descriptors}} for {{a single}} process, <b>file</b> <b>table</b> and inode table. Note that multiple file descriptors can refer to the same <b>file</b> <b>table</b> entry (e.g., {{as a result of}} the dup system call and that multiple <b>file</b> <b>table</b> entries can in turn refer to the same inode (if it has been opened multiple times; the table is still simplified because it represents inodes by file names, even though an inode can have multiple names). File descriptor 3 does not refer to anything in the <b>file</b> <b>table,</b> signifying that it has been closed.|$|R
5000|$|In some cases, {{data on a}} {{hard disk}} drive can be {{unreadable}} due to damage to the partition <b>table</b> or <b>file</b> system, or to (intermittent) media errors. In {{the majority of these}} cases, at least a portion of the original data can be recovered by repairing the damaged partition <b>table</b> or <b>file</b> system using specialized data recovery software such as Testdisk; software like dd rescue can image media despite intermittent errors, and image raw data when there is partition <b>table</b> or <b>file</b> system damage. This type of data recovery can be performed by people without expertise in drive hardware as it requires no special physical equipment or access to platters.|$|R
50|$|RowGen is {{designed}} to generate test data in production <b>table,</b> <b>file,</b> and report formats for prototype database population, compliance, outsourcing, and application prototyping projects. RowGen's GUI parses data models to define table layouts and relationships so database test sets are structurally and referentially correct. RowGen can also transform and format test data during its generation.|$|E
5000|$|Once {{the grammar}} is complete, it is {{analyzed}} by the Builder, the LALR and DFA parse tables are constructed, and any ambiguities or {{problems with the}} grammar are reported. Afterwards, the tables are saved to a Compiled Grammar <b>Table</b> <b>file</b> to be used later by a parsing engine. At this point, the GOLD Parser Builder is no longer needed.|$|E
50|$|One of {{the most}} widely used {{industry}} standards are chemical <b>table</b> <b>file</b> formats, like the Structure Data Format (SDF) files. They are text files that adhere to a strict format for representing multiple chemical structure records and associated data fields. The format was originally developed and published by Molecular Design Limited (MDL). MOL is another file format from MDL. It is documented in Chapter 4 of CTfile Formats.|$|E
5000|$|It {{should be}} able to look up large <b>tables</b> or <b>files</b> for {{reference}} information ...|$|R
5000|$|IO.SYS must be {{the first}} file stored in the FAT {{directory}} <b>table</b> for <b>files.</b>|$|R
30|$|All these <b>tables</b> and <b>files</b> are {{publicly}} available and {{presented at the}} end of Planteâ€™s papers.|$|R
5000|$|The fstab (or file systems <b>table)</b> <b>file</b> is {{a system}} {{configuration}} file commonly found at [...] on Unix and Unix-like computer systems. In Linux {{it is part of}} the util-linux package. The fstab file typically lists all available disk partitions and other types of file systems and data sources that are not necessarily disk-based, and indicates how they are to be initialized or otherwise integrated into the larger file system structure.|$|E
5000|$|Cron {{is driven}} by a crontab (cron <b>table)</b> <b>file,</b> a {{configuration}} file that specifies shell commands to run periodically on a given schedule. The crontab files are stored where the lists of jobs and other instructions to the cron daemon are kept. Users can have their own individual crontab files and often there is a system-wide crontab file (usually in [...] or a subdirectory of [...] ) that only system administrators can edit.|$|E
50|$|The {{purpose of}} the BioMarts in Ensembl Genomes is to allow the user to mine and {{download}} tables containing all the genes for a single species, genes in a specific region of a chromosome or genes on one region of a chromosome associated with an InterPro domain. The BioMarts also include filters to refine the data to be extracted and the attributes (Variant ID, Chromosome name, Ensembl ID, location, etc.) that {{will appear in the}} final <b>table</b> <b>file</b> can be selected by the user.|$|E
50|$|The {{following}} <b>tables</b> compare <b>file</b> verification {{software that}} typically use checksums {{to confirm the}} integrity or authenticity of a file.|$|R
5000|$|Useful {{functions}} {{that use the}} class table are: void write(table &t); //write the table structure into a file void read(table &t); //read the table structure from a file friend void del(table &t); //delete the <b>table</b> <b>files,</b> header and data files void print(table &t); //print the table on the screen friend std::ostream &operator<<(std::ostream &o, table &t); //print the table structure int num_row(table &t); //get the number of rows in the data <b>file</b> of the <b>table</b> ...|$|R
5000|$|The MFT {{structure}} supports algorithms which minimize disk fragmentation. A {{directory entry}} {{consists of a}} filename and a [...] "file ID", which is the record number representing the file in the Master <b>File</b> <b>Table.</b> The <b>file</b> ID also contains a reuse count to detect stale references. While this strongly resembles the W_FID of Files-11, other NTFS structures radically differ.|$|R
5000|$|The mtab (contraction of [...] mounted file systems <b>table)</b> <b>file</b> is {{a system}} {{information}} file, commonly found on Unix-like systems. This file lists all currently mounted filesystems along with their initialization options. [...] has {{a lot in common}} with , the distinction being that the latter is a configuration file listing which available filesystems should be mounted on which mount points at boot time, whereas the former lists currently mounted ones, which can include manually mounted ones not listed in fstab. Therefore mtab is usually in a format similar to that of fstab. Most of the time it is possible to directly use lines from [...] in [...]|$|E
50|$|While the {{original}} DIGDAT {{program has been}} left relatively untouched, {{there has been a}} new front-end created that will allow the user to name the input file with something more significant than FOR005.DAT. The new input file format allows the user to place comments in the input file. There have also been hooks placed in the DIGDAT that allow for alternate outputs in addition to {{the original}} output format, which is 132 columns wide and slightly user abusive if you intend to import the data into another application. There is a graphical representation of the aircraft output in AC3D, as well as data table output in XML for the JSBSim and FlightGear projects, as well as a free-format LFI (Linear Function Interpolation) data <b>table</b> <b>file.</b>|$|E
5000|$|... exFAT and {{the rest}} of the FAT family of file systems does not use indexes for file names, unlike NTFS which uses B-trees for file searching. When a file is accessed, the {{directory}} must be sequentially searched until a match is found. For file names shorter than 16 characters in length, one file name record is required but the entire file is represented by three 32-byte directory records. This is called a directory file set, and a 256 MiB sub-directory can hold up to 2,796,202 file sets. (If files have longer names, this number will decrease but this is the maximum based on the minimum three-record file set.) To help improve the sequential searching of the directories (including the root) a hash value of the file name is derived for each file and stored in the directory record. When searching for a file, the file name is first converted to upper case using the upcase <b>table</b> (<b>file</b> names are case insensitive) and then hashed using a proprietary patented algorithm into a 16-bit (2 byte) hash value. Each record in the directory is searched by comparing the hash value. When a match is found, the file names are compared to ensure that the proper file was located in case of hash collisions. This improves performance because only 2 bytes have to be compared for each file. This significantly reduces the CPU cycles because most file names are more than 2 characters (bytes) in size and virtually every comparison is performed on only 2 bytes at a time until the intended file is located.|$|E
50|$|The Job <b>File</b> <b>Table</b> (JFT) is a DOS data {{structure}} in the Program Segment Prefix (PSP). It starts at PSP offset 0x18 and is 20 bytes long. For each open file handle, DOS stores the index into the System <b>File</b> <b>Table</b> (SFT). A <b>file</b> handle that is returned by open, _open and other similar functions is simply an index into the JFT where DOS stored the SFT entry index for the file or device that the program opened.|$|R
30|$|The model calculates {{the impact}} of HR and Bt-transgenic crop {{varieties}} on pesticide use annually from 1996 through 2011, and aggregates results over this 16 -year period. The model is composed of 16 <b>tables</b> [Additional <b>file</b> 1 : <b>Tables</b> S 1 â€“S 16]. Nine additional <b>tables,</b> [Additional <b>file</b> 1 : <b>Tables</b> S 17 â€“S 25] address changes in pesticide use, the spread of resistant weeds, and the quantity of Bt endotoxins produced per hectare by todayâ€™s major corn and cotton Bt traits.|$|R
50|$|First and foremost, a <b>file</b> <b>table</b> {{mechanism}} is necessary. Additionally, the <b>file</b> <b>table</b> must include {{a mechanism for}} locating the (target/destination) file within the grid.Secondly, a mechanism for working with file data must exist. This {{mechanism is}} responsible for making file data available to requests.|$|R
