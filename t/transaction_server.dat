45|75|Public
5000|$|COM+, Microsoft <b>Transaction</b> <b>Server</b> and Distributed Transaction Coordinator ...|$|E
50|$|Recent CICS <b>Transaction</b> <b>Server</b> {{enhancements}} include {{support for}} Web services and Java, Event processing, Atom feeds, and RESTful interfaces. CICS <b>Transaction</b> <b>Server</b> 5.3, which generally became available on December 11, 2015, provides new and enhanced capabilities in three main areas; Service agility, Operational efficiency and Cloud with DevOps.|$|E
50|$|CICS <b>Transaction</b> <b>Server</b> Version 2.1 {{introduced}} {{support for}} Java. CICS <b>Transaction</b> <b>Server</b> Version 2.2 supported the Software Developers Toolkit. CICS provides the same run-time container as IBM's WebSphere product family so EJB applications are portable between CICS and Websphere {{and there is}} common tooling for the development and deployment of EJB applications.|$|E
30|$|CM 3. No blind <b>{{transactions}}.</b> <b>Servers</b> enforce no blind transactions by aborting transactions whose writeset is {{not included}} in their readset.|$|R
5000|$|Recovery after region <b>server,</b> <b>transaction</b> manager, or node failure ...|$|R
5000|$|Note: Outbound from WAS to CICS {{would not}} require API coding. In that case the {{supplied}} BBO$/BBO# link <b>server</b> <b>transactions</b> {{would do that}} processing. Those link <b>server</b> <b>transactions</b> [...] "host a service" [...] using the internal constructs similar to the BBOA1SRV API. Outbound to a batch program would {{require the use of}} the APIs to [...] "host a service." ...|$|R
50|$|Recent CICS <b>Transaction</b> <b>Server</b> {{enhancements}} include {{support for}} a number of modern programming styles.|$|E
5000|$|IBM System z: CICS <b>Transaction</b> <b>Server,</b> IMS, z/OS Batch, UNIX System Services, WebSphere Application Server, z/VSE, Linux ...|$|E
50|$|Several modern technologies, {{including}} Enterprise Java Beans (EJBs) and Microsoft <b>Transaction</b> <b>Server</b> (MTS) fully support {{distributed transaction}} standards.|$|E
40|$|Replication {{is widely}} used in {{application}} server products to tolerate faults. An important challenge is to correctly coordinate replication and transaction execution for stateful application servers. Many current solutions assume that a single client request generates exactly one <b>transaction</b> at the <b>server.</b> However, it is quite common that several client requests are encapsulated within one <b>server</b> <b>transaction</b> or that a single client request can initiate several <b>server</b> <b>transactions.</b> In this paper, we propose a replication tool that is able to handle these variations in request/transaction association. We have integrated our approach into the J 2 EE application server JBoss. Our evaluation using the ECPerf benchmark shows a low overhead of the approach. ...|$|R
50|$|In {{distributed}} <b>transactions,</b> all participating <b>servers</b> must coordinate before commit can be acknowledged. This {{is usually}} {{done by a}} two-phase commit protocol.|$|R
30|$|We {{limit the}} number of element in CT by some value K to reduce the space {{overhead}} of the set of committed <b>transactions</b> on the <b>servers.</b> After the k-th <b>transaction</b> commits and <b>server</b> s inserts tuple 〈 k, up 〉_Σ_f+ 1 into CT, s checks whether CT contains more than K elements. If so, the element of CT with the lowest timestamp is removed. This scheme may force servers to unnecessarily abort transactions due to missing versions in CT. Choosing K must thus be done carefully.|$|R
50|$|The Microsoft <b>Transaction</b> <b>Server</b> is {{considered}} to be the first major application of AOP followed by Enterprise JavaBeans.|$|E
50|$|Although when CICS is mentioned, {{people usually}} mean CICS <b>Transaction</b> <b>Server,</b> the CICS Family {{refers to a}} {{portfolio}} of transaction servers, connectors (called CICS Transaction Gateway) and CICS Tools.|$|E
5000|$|Transaction {{processing}} is a {{style of}} computing that divides work into individual, indivisible operations, called transactions. [...] A transaction processing system (TPS) or <b>transaction</b> <b>server</b> is a software system, or software/hardware combination, that supports transaction processing [...]|$|E
30|$|We {{describe}} two {{mechanisms to}} allow read-only transactions {{to be executed}} by a single server only. One mechanism is based on multiversion databases and does not require updates from committing transactions to be synchronized with on-going read-only transactions at a server; the other mechanism assumes a single-version database but synchronizes the updates of committing transactions with read-only <b>transactions</b> at <b>servers.</b>|$|R
50|$|Passing XML {{through the}} Internet - When an {{application}} passes data over the internet, network bandwidth {{can be a}} major bottleneck, seriously degrading the performance of client applications and limiting the server's power to process requests. Reducing the size of data transferred across the internet reduces {{the time required to}} send or receive the message, and increases the number of <b>transactions</b> a <b>server</b> can process per hour.|$|R
50|$|Also, {{it may not}} be {{the best}} choice for load {{balancing}} on its own, since it merely alternates the order of the address records each time a name server is queried. There is no consideration for <b>transaction</b> time, <b>server</b> load, network congestion, etc. Round robin DNS load balancing works best for services with a large number of uniformly distributed connections to servers of equivalent capacity. Otherwise it just does load distribution.|$|R
5000|$|Burroughs Corporation {{supported}} {{transaction processing}} capabilities in its MCP operating systems using GEMCOS (Generalized Message Control System of 1980). As of 2012 UNISYS ClearPath Enterprise Servers include <b>Transaction</b> <b>Server,</b> [...] "an extremely flexible, high-performance message and application control system." ...|$|E
5000|$|Microsoft's ActiveX, Component Object Model (COM), Microsoft <b>Transaction</b> <b>Server</b> (COM+), Distributed Component Object Model (DCOM), Dynamic Data Exchange (DDE), Object Linking and Embedding (OLE), {{anonymous}} pipes, named pipes, Local Procedure Call, MailSlots, Message loop, MSRPC, [...]NET Remoting, and Windows Communication Foundation (WCF) ...|$|E
50|$|WebTS, the OS 2200 Web <b>Transaction</b> <b>Server,</b> {{is a full}} {{implementation}} of the HTTP and HTTPS protocol stacks. Server scripting using Java applets is supported, but the primary usage of WebTS is its full integration with OS 2200 including all security and transaction processing.|$|E
40|$|This poster {{describes}} how the National Technical Library of Prague carried out a Web <b>server</b> <b>transaction</b> log analysis {{in order to identify}} possible candidates for the new subject headings in the Polythematic Structured Subject Heading System. It describes the log analysis objectives, methods, and results...|$|R
40|$|Although {{there exist}} {{accelerator}} products to increase throughput of encrypted transactions produced by an Internet HTTP server, {{there are no}} current architectures that provide a truly coordinated and scalable solution for Secure Socket Layer (SSL) encrypted communications. This paper presents an architecture that facilitates high volume SSL Internet serving, scaling from thousands to millions of independently active SSL sessions. Reliability, availability, serviceability, and on-line error recovery requirements for such an application are also addressed. Our approach is to offload SSL set-up protocol activity that was traditionally executed by Transaction Engines (and dedicated co-processors), to a scalable array of SSL Handshake Protocol specific servers. This significantly reduces utilization on the Transaction Engines since SSL session set-up is a CPU intensive operation. Additionally, the actual encryption/decryption processing is offloaded as well, to a dedicated and scalable array of In-Line Encryption Engine(s). The In-Line Encryption Engine is architected such that requests and responses flowing {{to and from the}} <b>Transaction</b> <b>Servers</b> are in clear text. A benefit of this arrangement is that Transaction Engines (as well as Web Accelerator Proxies) will retain the ability to cache web objects, while firewalls will retain the ability to perform packet level inspection of all traffic directed to the transaction engines. Such features have been sacrificed in prior SSL implementations. ...|$|R
40|$|Abstract. PADS is a {{declarative}} language {{used to describe}} the syntax and semantic properties of ad hoc data sources such as financial <b>transactions,</b> <b>server</b> logs and scientific data sets. The PADS compiler reads these descriptions and generates a suite of useful data processing tools such as format translators, parsers, printers and even a query engine, all customized to the ad hoc data format in question. Recently, however, to further improve the productivity of programmers that manage ad hoc data sources, we have turned to using PADS as an intermediate language in a system that first infers a PADS description directly from example data and then passes that description to the original compiler for tool generation. A key subproblem in the inference engine is the token ambiguity problem — the problem of determining which substrings in the example data correspond to complex tokens such as dates, URLs, or comments. In order to solve the token ambiguity problem, the paper studies the relative effectiveness of three different statistical models for tokenizing ad hoc data. It also shows how to incorporate these models into a general and effective format inference algorithm. In addition to using a {{declarative language}} (PADS) as a key intermediate form, we have implemented the system as a whole in ML. ...|$|R
5000|$|... {{includes}} Windows NT Server 4.0 SP3, Internet Information Services 3.0, Microsoft SQL Server 6.5, Microsoft SNA Server 4.0, Microsoft SMS 1.2, Microsoft Exchange Server 5.5, Microsoft Proxy Server 2.0, Microsoft Index Server 2.0, Microsoft <b>Transaction</b> <b>Server</b> 2.0, Microsoft Site Server 3.0, Microsoft FrontPage 98, and Visual InterDev 1.0.|$|E
5000|$|... {{includes}} Windows NT Server 4.0 SP4, Internet Information Services 4.0, Microsoft SQL Server 7.0, Microsoft SNA Server 4.0 SP2, Microsoft SMS 2.0, Microsoft Exchange Server 5.5 SP2, Microsoft Proxy Server 2.0, Microsoft Index Server 2.0, Microsoft <b>Transaction</b> <b>Server</b> 2.0, Internet Explorer 5.0, Microsoft FrontPage 2000, and Microsoft Visual InterDev 6.0.|$|E
50|$|CICS <b>Transaction</b> <b>Server</b> first {{introduced}} a native HTTP interface in version 1.2, {{together with a}} Web Bridge technology for wrapping green-screen Terminal based programs with an HTML facade. CICS Web and Document APIs were enhanced in CICS TS V1.3 to enable web-aware applications to be written to interact more effectively with web browsers.|$|E
5000|$|... iSNS Clients: iSNS {{clients are}} part of iSNSP aware storage devices. iSNS clients {{initiate}} <b>transactions</b> with iSNS <b>servers</b> using the iSNSP, register device attribute information in a common Discovery Domain (DD), download information about other registered clients and receive asynchronous notification of events that occur in their DD(s).|$|R
40|$|In {{a typical}} {{client-server}} <b>transaction,</b> the <b>server</b> performsa fast and simple operation, such as fetching a file, querying a database, or running a small script, {{in response to}} a client'srequest. Service providers are generally unwilling to support complex (i. e. resource-intensive) services because ofthe potential for unacceptably high loads on their systems. Thus the following general question: How might we pro-vide complex network services without overly stressing the resources of the service providers?To be more concrete, suppose we would like to implement a complex network service that allows our colleague...|$|R
40|$|IBM’s latest {{hardware}} facilities (Parallel <b>Transaction</b> <b>Servers</b> and the Coupling Facility) {{and software}} (MVS/SP 5 {{with its new}} WLM- Workload Manager) are exciting and promise to offer relief {{in the cost of}} mainframe applications and ease of managing the resources. To gain immediate and valuable use of the new facilities, however, you should start your migration plan early [...] as in NOW! The speaker, who’s been tuning systems since 1965, is looking forward to the changes and provides some hints, tips, recommendations, and just plain common sense in preparing for these new facilities. She’ll look at what to do about service level objectives now, a year or more before moving to the new Workload Manager. (It will take more than a simple conversion of a few IPS parameters!) You can’t prepare too early for the latest release of MVS, so here’s your chance to start. Before you can decide if and when you’re going to move to SP 5, you should consider the benefits and costs, both tangible and intangible. The first sections of this article describe these pros and cons. I’ve recently been asked whether I’d recommend moving to SP 4. 3 or directly to SP 5. 1, and one section provides my answer to that. The majority of sections, however, deal with how to prepare for SP 5, even if you’re stil...|$|R
50|$|TXSeries is a <b>transaction</b> <b>server</b> {{available}} on AIX, Linux x86, Windows Server. It shares similar design principles and some functions with CICS on mainframe. End of 2006 saw a major release of TXSeries V6.1, with DCE and Encina components removed. This brought huge simplification to the product. There {{is also a}} new graphical web-based administration console.|$|E
5000|$|Sun ONE Identity has {{developed}} a solution where companies can use the SAP Internet <b>Transaction</b> <b>Server</b> (ITS 2.0) and SAP Pluggable Authentication Service (PAS) for integration with SAP for single sign-on. This method uses logon tickets for single sign-on and the SAPCRYPTOLIB (SAP encryption library) for SAP server-to-server encryption. Sun's solution utilizes the dynamic libraries (DLL) external authentication method.|$|E
5000|$|Microsoft <b>Transaction</b> <b>Server</b> (MTS) was {{software}} that provided services to Component Object Model (COM) software components, {{to make it}} easier to create large distributed applications. The major services provided by MTS were automated transaction management, instance management (or just-in-time activation) and role-based security. MTS is considered to be the first major software to implement aspect-oriented programming.|$|E
50|$|ODBPP {{implements}} {{a transaction}} control {{that allows for}} process to continue while another is terminated. This unique transaction control allows the continuing process to identify the terminated transaction, recover database integrity and continue mid transaction. It is this ability to terminate transaction at any point that enables real-time <b>transactions</b> implementation by <b>server</b> using the method.|$|R
50|$|The {{services}} in the cluster are replicated and stored {{on a couple of}} machines and each one maintains an image of in-memory data tree and <b>transaction</b> logs. A <b>server</b> is contacted to several client applications and they establish a TCP Link for sending and receiving requests and responses and monitoring the events as well.|$|R
50|$|The jPOS {{framework}} greatly simplifies developers project tasks {{allowing them}} to build customer-focused applications including credit, debit, pre-paid, gift, loyalty card issuing and acquiring platforms, POS/ATM transactions, key management, switching, ISO-8583 load balancers and routers, stand-In processors, sealtime <b>transaction</b> scoring, tokenization <b>servers,</b> ISO-8583 v1987/1993/2003 protocol handlers and simulators, HSM integration and airtime topup among others.|$|R
