5|0|Public
40|$|In this article, {{the problem}} of finding a tight {{estimate}} on the worst-case execution time (WCET) of a real-time program is addressed. The analysis is focused on straight-line code (i. e. code without loops and recursive function calls) which is quite commonly found in synthesised code of hard real-time embedded systems. The analysis exploits the very simple structure of these programs, resulting in a considerable processing time improvement compared to general-case analysis techniques. A comprehensive timing analysis system, called the Program <b>Timing</b> <b>Analyser</b> (PTA), covering low-level aspects (on the assembler instruction level) as well as high-level aspects (on the programming language level) is presented. On one hand the low-level analysis covers all speed-up mechanisms used for modern superscalar processors: pipelining, instruction-level parallelism and caching. It can handle a unified cache as well as separate caches for data and instructions. The pipelined and parallel execution of [...] ...|$|E
40|$|This {{document}} {{describes the}} use of programs that constitute the Worst-case Execution Analyser (hereafter `the analyser'), specified in the Task 4 deliverable, Definition of the Tools[1]. ESTEC/Contract No. 9198 / 90 /NL/SF ESTEC TECHNICAL MANAGER: Mr F. Gomez-Molinero Ã“ York Software Engineering Limited, TABLE OF CONTENTS SECTION TITLE PAGE 1 ADA RULES 1 1. 1 Use of the New Pragma LOOPCOUNT 1 1. 2 Restrictions on Ada 2 2 WCET [...] A COMMAND TO FIND THE WORST-CASE EXECUTION TIME 2 2. 1 File of Known Times 3 2. 2 Output 4 2. 3 Interpretation of Timing and Timing a Smaller Scope 6 3 DIAGNOSTICS 6 3. 1 Warnings 7 3. 2 Fatal Errors 8 3. 3 Internal Errors 9 REFERENCES 10 A FORMAT OF THE. B INTERMEDIATE FILE 11 B FORMAT OF THE. S INTERMEDIATE FILE 1 1. ADA RULES To allow the <b>timing</b> <b>analyser</b> to estimate the time spent in sections of Ada code, some restrictions have been placed on {{the use of}} Ada. You might also need to tell the analyser, via a new pragma, the maximum number of times a loop will loop in [...] ...|$|E
40|$|The Boundary Scan Test {{infrastructure}} is now widely {{implemented in the}} Integrated Circuit market, especially in the microprocessor and Application-Specific Integrated Circuit arena. While the structural test of Printed Circuit Boards has been considered {{the driving force behind}} its broad acceptance, the test community has also addressed the issues of prototype debug and validation. However, the more demanding requirements associated with these issues are not sufficiently covered by the mandatory and optional operating modes described in the IEEE 1149. 1 Standard, especially for debugging problems associated with real-time operation. Previous work has focused on this problem, having resulted in a new set of user-defined optional instructions addressing the use of the BS register to store in real-time a sequence of contiguous vectors, captured at its parallel inputs without / until / after a certain condition is found. In this paper we describe the trade-off between input channels and storage capacity, by proposing a new operating mode where the BS register is used to capture / store an n-bit sequence captured at one single functional pin, thus acting similarly to a onechannel <b>timing</b> <b>analyser.</b> This non-intrusive operating mode may also be used for field diagnosis and other online operations. info:eu-repo/semantics/publishedVersio...|$|E
40|$|A {{versatile}} and efficient computer-aided analysis tool, CUREST, {{has been developed}} {{for the analysis of}} supply currents in CMOS digital circuits. It is based on Nabavi-Lishi's semi-analytical model for computing the current and delay in a CMOS logic gate which, when compared to HSPICE running the level- 3 MOSFET model, is more than three orders of magnitude faster, and accurate to within 10 %. CUREST is built on top of the <b>timing</b> <b>analyser</b> TAMIA and, in particular, uses its circuit parser and its data structure to store the circuit topology and primary input pattern. Extension tests on benchmark circuits containing up to 555 gates, which were analysed with CUREST using thousands of primary input patterns, demonstrate that the current analysis time is in the range of 1 ms per gate per input pattern, using a SUN 4 / 490 workstation with 32 Mb of main memory, running the SUN OS 4. 103 operating system. The peak value of the total supply current, the current rise-time, and the time at which the peak occurs are usually computed to within 10 % of HSPICE. However, appreciable errors often occur in the average current. This is because at the moment {{we do not have a}} good model for dealing with incomplete transitions associated with glitches in a CMOS gate...|$|E
40|$|Due to the {{increasing}} complexity of VLSI systems and time-to-market requirements, efficient design methodologies are needed. Two design methodologies have emerged: the hierarchical design methodology and high-level synthesis. The hierarchical design methodology is employed to establish efficient design management while high-level synthesis is used mainly {{to cope with the}} timeto- market requirements. In this, the needs for efficient and accurate timing analysis have arisen. This dissertation describes an accurate high-level timing analysis framework for performance analysis, which supports hierarchical design methodology and promotes usability by high-level synthesis tasks. For hierarchical design, the timing analysis framework employs a two-phase analysis approach, the timing information preparation phase and the performance analysis phase. In addition, the flexible timing boundary model (FTBM) which can support timing information reuse, is used to represent the timing behaviour of circuit modules {{at all levels of the}} hierarchy. The timing information preparation phase is performed by the hierarchical module timing overlap technique (. HMTOT) which hierarchically composes timing information from modules defined by the FTBM. Once composed, the resultant FTBM provides the timing behaviour of the circuit that can be used in the performance analysis phase for both worst case delay estimation and input/output timing constraint analysis. In high-level synthesis, the HMTOT has been applied to develop the context sensitive in-process <b>timing</b> <b>analyser</b> (CIPTime) to drive high-level synthesis scheduling processes, and the high-level timing analysis technique HighTA. By using the FTBM, both CIPTime and HighTA can perform the analysis at the register transfer (RT) level. The advantages of the CIPTime are demonstrated by the better scheduling results produced from the scheduling technique ContSched that employs the CIPTime to estimate the delays of multicycle and chaining operations. In the HighTA, high-level false path elimination using information such as control/data flow graphs, operation schedules and resource assignments from highlevel synthesis is also included. The HighTA can estimate true path delays in the presence of false paths for the RT datapaths both before and after the actual datapaths are generated...|$|E

