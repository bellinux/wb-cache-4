7|10000|Public
2500|$|In logic, {{the term}} decidable {{refers to the}} {{decision}} problem, {{the question of the}} existence of an effective method for determining membership in a set of formulas, or, more precisely, an algorithm that can and will return a boolean <b>true</b> <b>or</b> <b>false</b> <b>value</b> that is correct (instead of looping indefinitely, crashing, returning [...] "don't know" [...] or returning a wrong answer). Logical systems such as propositional logic are decidable if membership in their set of logically valid formulas (or theorems) can be effectively determined. A theory (set of sentences closed under logical consequence) in a fixed logical system is decidable if there is an effective method for determining whether arbitrary formulas are included in the theory. Many important problems are undecidable, that is, it has been proven that no effective method for determining membership (returning a correct answer after finite, though possibly very long, time in all cases) can exist for them.|$|E
50|$|The basic datatypes {{handled by}} Snowball are strings of characters, signed {{integers}}, and boolean truth values, or more simply strings, integers and booleans. Snowball's characters are either 8-bit wide, or 16-bit, {{depending on the}} mode of use. In particular, both ASCII and 16-bit Unicode are supported. Like the SNOBOL programming language, the flow of control in Snowball is arranged by the implicit use of signals (each statement returns a <b>true</b> <b>or</b> <b>false</b> <b>value),</b> rather than the explicit use of constructs such as if, then, and break found in C and many other programming languages.|$|E
5000|$|In logic, {{the term}} decidable {{refers to the}} {{decision}} problem, {{the question of the}} existence of an effective method for determining membership in a set of formulas, or, more precisely, an algorithm that can and will return a boolean <b>true</b> <b>or</b> <b>false</b> <b>value</b> that is correct (instead of looping indefinitely, crashing, returning [...] "don't know" [...] or returning a wrong answer). Logical systems such as propositional logic are decidable if membership in their set of logically valid formulas (or theorems) can be effectively determined. A theory (set of sentences closed under logical consequence) in a fixed logical system is decidable if there is an effective method for determining whether arbitrary formulas are included in the theory. Many important problems are undecidable, that is, it has been proven that no effective method for determining membership (returning a correct answer after finite, though possibly very long, time in all cases) can exist for them.|$|E
5000|$|Valid keys are: , , [...] Each key {{can be set}} to {{indicate}} <b>true</b> <b>or</b> <b>false</b> <b>values</b> and values are not case sensitive.|$|R
5|$|In {{computer}} science, Putnam {{is known}} for the Davis–Putnam algorithm for the Boolean satisfiability problem (SAT), developed with Martin Davis in 1960. The algorithm finds {{if there is a}} set of <b>true</b> <b>or</b> <b>false</b> <b>values</b> that satisfies a given Boolean expression so that the entire expression becomes true. In 1962, they further refined the algorithm with the help of George Logemann and Donald W. Loveland. It became known as the DPLL algorithm. This algorithm is efficient and still forms the basis of most complete SAT solvers.|$|R
30|$|Fuzzy logic [13] {{is a form}} of many-valued logic, which {{supports}} reasoning that is approximate rather than fixed or exact. Whereas traditional binary sets (in which variables may have <b>true</b> <b>or</b> <b>false</b> <b>values),</b> fuzzy logic variables may have a truth value that ranges in degree between 0 and 1. Fuzzy logic has been extended to handle the concept of partial truth, where the truth value ranges between completely true and completely <b>false.</b> The <b>values</b> of these linguistic variables can be managed using specific functions, such as Trimf, Sigmf, and Gaussmf [16].|$|R
30|$|When this {{condition}} is evaluated, competencies in the user’s model, for the specified user at the insertion point, are retrieved, {{together with the}} list of target competencies for the resource “Essay”. The evaluation of the relation “Near and MoreSpecific” provides a <b>true</b> <b>or</b> <b>false</b> <b>value</b> according to the method exposed in section “Semantic relationships between Competencies”.|$|E
30|$|Fuzzy {{set theory}} was first {{introduced}} by Zadeh (1965) as a method for handling data uncertainty. Unlike the Boolean logic, where variables take only a <b>true</b> <b>or</b> <b>false</b> <b>value</b> (1 or 0), fuzzy logic deals with the degree of truth and variables may have any value between 0 and 1. Capability of fuzzy sets to express gradual transitions from membership to non-membership provides a powerful representation of measurement uncertainties (Klir and Yuan 1995).|$|E
40|$|Boolean algebra, {{the branch}} of {{mathematics}} where variables can assume only <b>true</b> <b>or</b> <b>false</b> <b>value,</b> is the theoretical basis of classical computation. The analogy between Boolean operations and electronic switching circuits, highlighted by Shannon in 1938, paved the way to modern computation based on electronic devices. The grow of computational power of such devices, after an exciting exponential -Moore trend, is nowadays blocked by heat dissipation due to computational tasks, very demanding after the chips miniaturization. Heat is often a detrimental form of energy which increases the systems entropy decreasing the efficiency of logic operations. Here, we propose a physical system able to perform thermal logic operations by reversing the old heat-disorder epitome into a novel heat-order paradigm. We lay the foundations of heat computation by encoding logic state variables in temperature and introducing the thermal counterparts of electronic logic gates. Exploiting quantum effects in thermally biased Josephson junctions (JJs), we propound a possible realization of a functionally complete dissipationless logic. Our architecture ensures high operation stability and robustness with switching frequencies reaching the GHz...|$|E
40|$|Abstract — Fuzzy {{logic is}} a form of many-valued logic or {{probabilistic}} logic; it deals with reasoning that is approximate rather than fixed and exact. Compared to traditional binary sets (where variables may take on <b>true</b> <b>or</b> <b>false</b> <b>values)</b> fuzzy logic variables may have a truth value that ranges in degree between 0 and 1. Fuzzy logic has been extended to handle the concept of partial truth, where the truth value may range between completely true and completely false. In this paper Blood pressure values has been taken as an input and applied using fuzzy algorithm. Finally we are analysing the output values...|$|R
5000|$|This block {{states that}} the element [...] "some_element" [...] must have an {{attribute}} named [...] "has_name". This attribute can only take <b>true</b> <b>or</b> <b>false</b> as <b>values,</b> {{and if it is}} true, the first child element of the element must be [...] "name", which stores text. If [...] "name" [...] {{did not need to be}} the first element, then the choice could be wrapped in an [...] "interleave" [...] element along with other elements. The order of the specification of attributes in RELAX NG has no meaning, so this block need not be the first block in the element definition.|$|R
40|$|Fuzzy {{control is}} based on fuzzy logic. A logical system that is much closer in spirit to human {{thinking}} and natural language than traditional crisp logical systems. The fuzzy logic variables are not described as <b>true</b> <b>or</b> <b>false</b> <b>values.</b> Instead values range in degree between 0 - 1,true-false or yes-no. Fuzzy logic provides {{as a means of}} converting with linguistic control strategy. This strategy rules are based on expert knowledge that is invented by a plant operator or a design egineer. Especially the exposition includes a discussion of fuzzification and defuzzification strategies,the derivation of the database and fuzzy control rules,the definition of fuzzy implication and an analysis of fuzzy reasoning mechanisms. Fuzzy logic is used in machine control widely. Although genetic algoritms and neural networks can perform as well as fuzzy logic in many cases. In the other hand fuzzy logic has advantage that the solution of problem can be formalize terms in that human operators can understand easily so their experience can be used {{in the design of the}} controller. Fuzzy controller is generally nonlinear because it doesn’t have a simple equation like the PID,but also PID control is not convenient in that case of higher-order plants. The fuzzy controllers appear in consumer products. For instance washing mashines,video cameras,underground trains and robots. A fuzzy controller acts or regulates by means of rules in a more or less natural language based on the distinguish feature: fuzzy logic...|$|R
40|$|The primary {{issue in}} mobile search {{is that the}} {{interactions}} among the users and search engines are constrained by the little screen of the cell phones. To give more pertinent results to the users, search engines must able to engender user’s profile, including interest and personalizing the search results according to the user profiles. The proposed personalized mobile search engine is an innovative approach to personalize search query and corresponding search results The Proposed framework takes the assistance of Google's GPS to identify user current location and location-content mining concept to personalize the search query as per query type. And also makes use of the user profile & user interest to alter the user query close to user personal approach to find anything on the world. Proposed system uses Google, yahoo and Bing search engine’s API’s to probe out the personalized query which returns search results. The returned search results are again rearranged in different categories as per earlier click through history of the user. It helps user to get virtually close results from three different search engines. we present our approach to personalizing web search on a mobile device The proposed system perverse the user privacy, which are designated as two privacy parameter <b>true</b> <b>or</b> <b>false</b> <b>value.</b> The Proposed system provided the city travel/tour guide system which was additionally personalized. The proposed system will gather the information from location predicated query that will be identified by location- content mining concept...|$|E
40|$|NASA Engineering's Orion Script Generator (OSG) is {{a program}} {{designed}} to run on Exploration Flight Test One Software. The script generator creates a SuperScript file that, when run, accepts the filename for a listing of Compact Unique Identifiers (CUIs). These CUIs will correspond to different variables on the Orion spacecraft, such as the temperature of a component X, the active or inactive status of another component Y, and so on. OSG will use a linked database to retrieve the value for each CUI, such as " 100 05," "True," and so on. Finally, OSG writes SuperScript code to display each of these variables before outputting the ssi file that allows recipients to view a graphical representation of Orion Flight Test One's status through these variables. This project's main challenge was creating flexible software that accepts and transfers many types of data, from Boolean (<b>true</b> <b>or</b> <b>false)</b> <b>values</b> to "Unsigned Long Long'' values (any number from 0 to 18, 446, 744, 073, 709, 551, 615). We also needed to allow bit manipulation for each variable, requiring us to program functions that could convert any of the multiple types of data into binary code. Throughout the project, we explored different methods to optimize the speed of working with the CUI database and long binary numbers. For example, the program handled extended binary numbers much more efficiently when we stored them as collections of Boolean <b>values</b> (<b>true</b> <b>or</b> <b>false</b> representing 1 <b>or</b> 0) instead of as collections of character strings or numbers. We also strove to make OSG as user-friendly and accommodating of different needs as possible its default behavior is to display a current CUI's maximum value and minimum value with three to five intermediate values in between, all in descending order. Fortunately, users can also add other input on the same lines as each CUI name to request different high values, low values, display options (ascending, sine, and so on), and interval sizes for generating intermediate values. Developing input validation took up quite a bit of time, but OSG's flexibility in the end was worth it...|$|R
40|$|About using {{functions}} to calculate values Functions are predefined formulas that perform calculations by using specific values, called arguments, {{in a particular}} order, or structure. For example, the SUM function adds values or ranges of cells, and the PMT function calculates the loan payments based on an interest rate, {{the length of the}} loan, and the principal amount of the loan. Arguments can be numbers, text, logical <b>values</b> such as <b>TRUE</b> <b>or</b> <b>FALSE,</b> arrays, error <b>values</b> such as #N/A, or cell references. The argument you designate must produce a valid value for that argument. Arguments can also be constants, formulas, or other functions. The structure of a function begins with the function name, followed by an opening parenthesis, the arguments for the function separated by commas, and a closing parenthesis. If the function starts a formula, type an equal sign (=) before the function name. Date and Time NOW() returns serial number of current date and time formats cell to display current date and time TODAY() returns serial number of current date formats cell to display current date YEAR(serial_number) returns year corresponding to date (serial number) MONTH(serial_number) returns month corresponding to date (serial number) DAY(serial_number) returns day corresponding to date (serial number) HOUR(serial_number) returns hour corresponding to date (serial number) MINUTE(serial_number) returns minute corresponding to date (serial number...|$|R
40|$|Abstract. The {{aim of this}} {{research}} is to develop teaching media for mathematics specifically for materials on trigonometry using GUI Matlab. This media can be used as teaching and learning aid for students at senior high school, grade XI in the fir st semester. This intructional media consists of instructions on how to use the media, learning materials, exe rcises and profile. The trigonometry materials which are discussed in this intructional media consist of the sum and difference of two angles. The limitation on the angles that can be used are special angles in the intervval - 360 o ???,??? 360 o. The special angles are 0 o, ? 30 o, ? 45 o, ? 60 o, ? 90 o, ? 120 o, ? 135 o, ? 150 o, ? 180 o, ? 210 o, ? 225 o, ? 240 o, ? 270 o, ? 300 o, ? 315 o, ? 330 o, and ? 360 o. The trigonometry functions such as sinus, cosine and as well as the operation addition (+) and subtraction (-) can be selected by hitting the appropriate butto n. Within each step, there is a check button and a next b utton to check the input <b>true</b> <b>or</b> <b>false.</b> If the <b>value</b> that entered incorrectly then the next step will not displayed and warning box will appear to report the location of error. Users have to fix the error in order to continue t o the next step. Keywords: teaching intructional media, trigonometry, GUI MatlabBanda Ace...|$|R
25|$|<b>True</b> <b>or</b> <b>False</b> - In <b>True</b> <b>or</b> <b>False,</b> {{players have}} to guess if the {{statement}} is <b>true</b> <b>or</b> <b>false.</b>|$|R
5000|$|<b>True</b> <b>or</b> <b>False</b> - {{questions}} {{to which the}} answer is <b>True</b> <b>or</b> <b>False.</b>|$|R
50|$|<b>True</b> <b>or</b> <b>False</b> {{showed a}} {{pre-recorded}} bizarre real-life story, {{and the following}} week revealed whether the story was <b>true</b> <b>or</b> <b>false.</b> In Series 2 viewers could voice their guesses via a phone poll.|$|R
50|$|Statements {{that are}} not {{meaningful}} cannot be expressed as propositions. Every verifiable proposition is meaningful, {{although it may be}} either <b>true</b> <b>or</b> <b>false.</b> Every proposition asserts or denies something, and thus is either <b>true</b> <b>or</b> <b>false.</b>|$|R
5000|$|Ethical cognitivists {{hold that}} ethical {{sentences}} do express propositions: {{that it can}} be <b>true</b> <b>or</b> <b>false,</b> for example, that Mary is a good person, or that stealing and lying are always wrong. Cognitivists believe that these sentences do not just express feelings, as though we were saying, [...] "Hey!" [...] or [...] "Yay for Mary!"; they actually express propositions that can be <b>true</b> <b>or</b> <b>false.</b> Derivatively, a cognitivist or a realist would say that ethical sentences themselves are either <b>true</b> <b>or</b> <b>false.</b> Conversely, if one believes that sentences like [...] "Mary is a good person" [...] cannot be either <b>true</b> <b>or</b> <b>false,</b> then one is a non-cognitivist.|$|R
60|$|Though {{truth and}} {{falsehood}} belong, in propriety of speech, only to PROPOSITIONS: yet IDEAS are oftentimes termed <b>true</b> <b>or</b> <b>false</b> (as what words are {{there that are}} not used with great latitude, and with some deviation from their strict and proper significations?) Though I think that when ideas themselves are termed <b>true</b> <b>or</b> <b>false,</b> {{there is still some}} secret or tacit proposition, which is the foundation of that denomination: as we shall see, if we examine the particular occasions wherein they come to be called <b>true</b> <b>or</b> <b>false.</b> In all which we shall find some kind of affirmation or negation, which is the reason of that denomination. For our ideas, being nothing but bare APPEARANCES, or perceptions in our minds, cannot properly and simply in themselves be said to be <b>true</b> <b>or</b> <b>false,</b> no more than a single name of anything can be said to be <b>true</b> <b>or</b> <b>false.</b>|$|R
2500|$|... {{used the}} Rado graph {{to prove a}} zero–one law for first-order {{statements}} in the logic of graphs. When such a statement is <b>true</b> <b>or</b> <b>false</b> for the Rado graph, it is also <b>true</b> <b>or</b> <b>false</b> (respectively) for almost all finite graphs.|$|R
30|$|This {{level is}} based on <b>true</b> <b>or</b> <b>false</b> problems. Participants hear the spoken {{narration}} and are shown one overall story picture. They must decide if the picture described in the narration is the picture being shown or not by pressing <b>true</b> <b>or</b> <b>false.</b>|$|R
50|$|X=a {{statement}} {{that can be}} <b>true</b> <b>or</b> <b>false.</b>|$|R
500|$|The {{doctrines of}} anekāntavāda and syādavāda are often criticised to denying any certainty, or {{accepting}} incoherent contradictory doctrines. Another argument against it, posited by medieval era Buddhists and Hindus applied the principle on itself, {{that is if}} nothing is definitely <b>true</b> <b>or</b> <b>false,</b> is anekāntavāda <b>true</b> <b>or</b> <b>false?</b> ...|$|R
50|$|In {{computer}} science, a Boolean {{expression is}} an expression in a programming language that produces a Boolean value when evaluated, i.e. one of <b>true</b> <b>or</b> <b>false.</b> A Boolean expression may be composed {{of a combination of}} the Boolean constants <b>true</b> <b>or</b> <b>false,</b> Boolean-typed variables, Boolean-valued operators, and Boolean-valued functions.|$|R
5000|$|The {{doctrines of}} anekāntavāda and syādavāda are often criticised to denying any certainty, or {{accepting}} incoherent contradictory doctrines. Another argument against it, posited by medieval era Buddhists and Hindus applied the principle on itself, {{that is if}} nothing is definitely <b>true</b> <b>or</b> <b>false,</b> is anekāntavāda <b>true</b> <b>or</b> <b>false?</b> ...|$|R
5000|$|Informally, a {{predicate}} is {{a statement}} that may be <b>true</b> <b>or</b> <b>false</b> depending on the values of its variables. [...] It {{can be thought of}} as an operator or function that returns a value that is either <b>true</b> <b>or</b> <b>false.</b> [...] For example, predicates are sometimes used to indicate set membership: when talking about sets, it is sometimes inconvenient or impossible to describe a set by listing all of its elements. Thus, a predicate P(x) will be <b>true</b> <b>or</b> <b>false,</b> depending on whether x belongs to a set.|$|R
50|$|Logical {{equivalence}} {{between two}} propositions {{means that they}} are <b>true</b> together <b>or</b> <b>false</b> together. To prove that contrapositives are logically equivalent, {{we need to understand}} when material implication is <b>true</b> <b>or</b> <b>false.</b>|$|R
25|$|Those {{not known}} to be either <b>true</b> <b>or</b> <b>false.</b>|$|R
2500|$|Situation Ethics: <b>True</b> <b>or</b> <b>False</b> (Minneapolis: Bethany Fellowship, 1972).|$|R
5000|$|Answering <b>true</b> <b>or</b> <b>false</b> {{questions}} from a celebrity look-alike ...|$|R
30|$|In this part, we have <b>true</b> <b>or</b> <b>false</b> problems, with {{participants}} being shown one overall story big picture and three-story piece pictures. They then must decide if the three-story piece pictures {{correspond to the}} same story being shown {{in the big picture}} or not by choosing from <b>true</b> <b>or</b> <b>false</b> buttons.|$|R
50|$|Only {{composite}} {{forms of}} speech can be <b>true</b> <b>or</b> <b>false.</b>|$|R
30|$|Given direct {{observation}} of a region, then F(r) must evaluate to <b>true</b> <b>or</b> <b>false,</b> but without {{direct observation}} of a region, {{we can only}} compute the probability of F(r) being <b>true</b> <b>or</b> <b>false</b> in some way. Note that we say we observe a region whenever we ask the crowd a question about it.|$|R
