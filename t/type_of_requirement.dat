26|10000|Public
5000|$|The {{only thing}} that is fixed and set in stone in an agile project is an {{iteration}} backlog (and, even then, this [...] "can be clarified and re-negotiated... as more is learned."). While the PBI lies in the product backlog, it can be rewritten or even discarded, depending on business, market, technical or any other <b>type</b> <b>of</b> <b>requirement</b> by team members.|$|E
50|$|In {{planning}} for atmospheric re-entry, the landing site is selected in advance. For reusable reentry vehicles, typically a primary site is preferred that {{is closest to}} the launch site {{in order to reduce}} costs and improve launch turnaround time. However, weather near the landing site is a major factor in flight safety. In some seasons, weather at landing sites can change quickly relative to the time necessary to initiate and execute re-entry and safe landing. Due to weather, it is possible the vehicle may have to execute a landing at an alternate site. Furthermore, most airports do not have runways of sufficient length to support the approach landing speed and roll distance required by spacecraft. Few airports exist in the world that can support or be modified to support this <b>type</b> <b>of</b> <b>requirement.</b> Therefore, alternate landing sites are very widely spaced across the U.S. and around the world.|$|E
50|$|While most {{graduate}} programs {{will have a}} similar list of general admission requirements, the importance placed on each <b>type</b> <b>of</b> <b>requirement</b> can vary drastically between graduate schools, departments within schools, and even programs within departments. The best way to determine how a graduate program will weigh admission materials is to ask the person in charge of graduate admissions at the particular program being applied to.Admission to graduate school requires a bachelor's degree. High grades in one's field of study are important—grades outside the field less so. The Graduate Record Examination standardized test is required by almost all graduate schools, while other additional standardised tests (such as the Graduate Management Admission Test (GMAT) and Graduate Record Examination (GRE) Subject Tests) scores may be required by some institutions or programs. In addition, good letters of recommendation from undergraduate instructors are often essential, as strong recommendation letters from mentors or supervisors of undergraduate research experience provide evidence that the applicant can perform research and can handle the rigors of a graduate school education.|$|E
50|$|Guidelines. Following {{organizational}} {{guidelines that}} describe the collection techniques and the <b>types</b> <b>of</b> <b>requirements</b> to be collected. These guidelines are then used consistently across projects.|$|R
5000|$|In {{and around}} the campus are located a number of state and private dorms which {{consider}} all <b>types</b> <b>of</b> <b>requirements</b> <b>of</b> students in terms of accommodation. Each dorm has its own laundry, dining hall and library. The capacity of the dorms is as follows: ...|$|R
50|$|The Worker Protection Standard (WPS) {{identifies}} the <b>type</b> <b>of</b> <b>requirements</b> {{that must be}} satisfied to obtain the proper license needed to purchase and apply restricted use pesticide.|$|R
50|$|For any system, one of {{the first}} tasks of {{reliability}} engineering is to adequately specify the reliability and maintainability requirements allocated from the overall availability needs and, more importantly, derived from proper design failure analysis or preliminary prototype test results. Clear requirements (able to designed to) should constrain the designers from designing particular unreliable items / constructions / interfaces / systems. Setting only availability, reliability, testability, or maintainability targets (e.g., max. failure rates) is not appropriate. This is a broad misunderstanding about Reliability Requirements Engineering. Reliability requirements address the system itself, including test and assessment requirements, and associated tasks and documentation. Reliability requirements are included in the appropriate system or subsystem requirements specifications, test plans, and contract statements. Creation of proper lower-level requirements is critical.Provision of only quantitative minimum targets (e.g., MTBF values or failure rates) is not sufficient for different reasons. One reason is that a full validation (related to correctness and verifiability in time) of a quantitative reliability allocation (requirement spec) on lower levels for complex systems can (often) not be made as a consequence of (1) the fact that the requirements are probabilistic, (2) the extremely high level of uncertainties involved for showing compliance with all these probabilistic requirements, and because (3) reliability is a function of time, and accurate estimates of a (probabilistic) reliability number per item are available only very late in the project, sometimes even after many years of in-service use. Compare this problem with the continuous (re-)balancing of, for example, lower-level-system mass requirements in the development of an aircraft, which is already often a big undertaking. Notice that in this case masses do only differ in terms of only some %, are not a function of time, the data is non-probabilistic and available already in CAD models. In case of reliability, the levels of unreliability (failure rates) may change with factors of decades (multiples of 10) as result of very minor deviations in design, process, or anything else. The information is often not available without huge uncertainties within the development phase. This makes this allocation problem almost impossible to do in a useful, practical, valid manner that does not result in massive over- or under-specification. A pragmatic approach is therefore needed—for example: the use of general levels / classes of quantitative requirements depending only on severity of failure effects. Also, the validation of results is a far more subjective task than for any other <b>type</b> <b>of</b> <b>requirement.</b> (Quantitative) reliability parameters—in terms of MTBF—are by far the most uncertain design parameters in any design.|$|E
30|$|On {{the other}} hand, the {{dedicated}} component {{which offers a}} high degree of isolation can be used to handle business requirements that cannot be easily compensated. Examples of this <b>type</b> <b>of</b> <b>requirement</b> include legal restrictions and the location and configuration of the cloud infrastructure. For instance, a legal requirement can state that the data hosted in one place (e.g., Europe) by a cloud provider cannot be stored elsewhere (e.g., in the USA). An architect would, therefore, have to map this <b>type</b> <b>of</b> <b>requirement</b> to a cloud infrastructure that directly satisfies this.|$|E
40|$|Recently, {{there has}} been a growing {{interest}} in self-adaptive systems. Roadmap papers in this area point to feedback loops as a promising way of operationalizing adaptivity in such systems. In this paper, we define a new <b>type</b> <b>of</b> <b>requirement</b> — called Awareness Requirement — that can refer to other requirements and their success/failures. We propose a way to elicit and formalize such requirements and offer a requirements monitoring framework to support them...|$|E
5000|$|Input {{involves}} different <b>types</b> <b>of</b> <b>requirements,</b> functional specifications, detailed designing of documents, proper source code, security specifications. This is {{the preparation}} stage of white-box testing to layout {{all of the}} basic information.|$|R
40|$|This work {{presents}} a summary {{on the research}} conducted towards {{the development of a}} model to document and to visualize,dynamically, software requirements. The research consisted of analyzing the necessary information focusing on documenting different <b>types</b> <b>of</b> <b>requirements</b> in an efficient way, and how quality factors may be part <b>of</b> those <b>requirements.</b> The research has also considered, the traceability (Aizenbud-Reshef et al, 2006) among the <b>requirements</b> and different <b>types</b> <b>of</b> artifacts developed during a software project. The current solutions for the Requirement Engineering do not possess support for the inclusion or exclusion, of quality factors and elements to describe specific patterns <b>of</b> <b>requirements</b> as the use cases or forms of a certain project. The lack of that support makes the storage model and description <b>of</b> the static <b>requirements</b> difficult; in other words, those solutions hinder the definition <b>of</b> different <b>types</b> <b>of</b> <b>requirements</b> as well as the inclusion of attributes for the quality control <b>of</b> those <b>requirements.</b> The existence <b>of</b> different <b>types</b> <b>of</b> <b>requirements,</b> as well as specific needs about quality are due to the inherent specifications to each project and the different characteristics of the processes used in the organizations during the development of those projects. The study showed that the use of a flexible approach that allows the definition of new patterns <b>of</b> <b>requirement...</b>|$|R
40|$|A unification-based {{approach}} to visualization design provides a uniform way of representing user require-ments, design knowledge, and graphic designs {{as well as}} algorithms for synthesizing graphic presentations. We demonstrate this approach on two <b>types</b> <b>of</b> <b>requirements</b> – structural {{in the form of}} sketches and functional in the form of tasks. With this approach we aim to achieve the following system design goals: expressiveness (the for-malism can express the visualization design problem and its problem-solving algorithms), uniformity (the same formalism can be applied to different generation tasks), efficiency (graphics can be designed in a reasonable amount of time), and extensibility (the system can be extended with new <b>types</b> <b>of</b> <b>requirements,</b> design ele...|$|R
40|$|After briefly {{describing}} how {{the emergence of}} electronic records has brought changes to records management, {{we focus on the}} design and implementation of electronic records management systems, and specifically on the establishment of functional requirements. A number of functional requirements lists are then analysed, with particular attention given to the European MoReq specification. To conclude there is a listing of broad areas in which this <b>type</b> <b>of</b> <b>requirement</b> is being established, as well as a table comparing each one of these lists with MoReq...|$|E
30|$|The {{trade-offs}} between tenant {{isolation and}} business requirements {{is a key}} consideration in architecting the design and deployment of cloud-hosted services. As the degree of isolation increases from top to bottom, the ease and flexibility to implement business requirements that cannot be compensated for at the application level reduces. The shared component, which offers a low degree of isolation, {{can be used to}} handle business requirements that can be compensated at the application level. Examples of such business requirements include performance and availability. The architect can easily modify the application architecture of the GSD tool to address this <b>type</b> <b>of</b> <b>requirement.</b>|$|E
40|$|This {{study was}} {{undertaken}} {{to determine the}} number, type, and requirements of entry-level office positions in Ogden, Utah, banks. Questionnaires {{were taken to the}} participating banks in the Ogden, Utah, banking community. The responding banks indicated that they would consider recent high school graduates to all of the positions studied; however, a majority of the banks preferred to hire females rather than males to to the office positions studied. All of the responding banks required some <b>type</b> <b>of</b> <b>requirement</b> for each of the office entry-level positions, and majority of the banks required a pre-employment test of the applicants. This information was put into table form using numbers and percentages as the means of reporting the data...|$|E
40|$|Abstract—During {{acceptance}} testing {{different areas of}} deliv-ered software system are reviewed. Usually these are function-ality, business domain logic, non-functional characteristics, user interface. Although they {{are related to the}} same particular func-tional area, they are verified separately. This paper presents the concept and the Requirements Driven Software Testing (ReDSeT) tool, which allows for automatic integrated test generation based on different <b>types</b> <b>of</b> <b>requirements.</b> Tests are expressed in newly introduced Test Specification Language (TSL). The basis for func-tional test generation are detailed use case models. Furthermore, by combining different <b>types</b> <b>of</b> <b>requirements,</b> relations between tests are created. The constructed tool acknowledges validity of the presented concept. I...|$|R
5000|$|A {{widely held}} model claims {{that these two}} <b>types</b> <b>of</b> <b>requirements</b> differ only in their level of detail or {{abstraction}} — wherein 'business requirements' are high-level, frequently vague, and decompose into the detailed product, system, or software requirements.|$|R
50|$|The <b>type</b> <b>of</b> <b>requirements</b> {{that relate}} to Performance Engineering are the {{non-functional}} requirements, or NFR. While a functional requirement relates to what business operations are to be performed, a performance related non-functional requirement will relate to how fast that business operation performs under defined circumstances.|$|R
40|$|Abstract. This paper {{describes}} {{research in}} understanding the requirements for complex information systems that are constructed from one or more generic COTS systems. We argue that, in these cases, behavioural requirements are largely defined by the underlying system and {{that the goal of}} the requirements engineering process is to understand the information requirements of system stakeholders. We discuss this notion of information requirements and propose that an understanding of how a socio-technical system is structured in terms of responsibilities is an effective way of discovering this <b>type</b> <b>of</b> <b>requirement.</b> We introduce the idea of responsibility modelling and show, using an example drawn from the domain of emergency planning, how a responsibility model can be used to derive information requirements for a system that coordinates the multiple agencies dealing with an emergency. ...|$|E
40|$|The {{relationship}} between micro-structure and macro-structure of complex systems using information geometry has been dealt by several authors. From this perspective, {{we are going}} to apply it as a geometrical structure connecting both microeconomics and macroeconomics. The results lead us to introduce new modified quantities into both micro-macro economics that enable us to describe the link between them. The importance of such a scheme is to find out -with some accuracy- a new method can be introduced for examining the stability of an economic system. This <b>type</b> <b>of</b> <b>requirement</b> is expressed by examining the stability of the equations of path deviations for some economic systems as described in a statistical manifold. Such a geometization scheme of economic systems is an important step toward identifying risk management factors and so contributes to the growing literature of econophysics. Comment: 12 pages, LaTex fil...|$|E
40|$|Abstract—Nonfunctional Requirements (NFRs) {{have been}} {{frequently}} neglected or forgotten in software design. They {{have been presented}} as a second or even third class <b>type</b> <b>of</b> <b>requirement,</b> frequently hidden inside notes. We tackle this problem by treating NFRs as first class requirements. We present a process to elicit NFRs, analyze their interdependencies, and trace them to functional conceptual models. We focus our attention on conceptual models expressed using UML (Unified Modeling Language). Extensions to UML are proposed to allow NFRs to be expressed. We will show how to integrate NFRs into the Class, Sequence, and Collaboration Diagrams. We will also show how Use Cases and Scenarios {{can be adapted to}} deal with NFRs. This work was used in three case studies and their results suggest that by using our proposal we can improve the quality of the resulting conceptual models. Index Terms—Software design, requirements elicitation, nonfunctional requirements, goal graphs, UML conceptual models. ...|$|E
40|$|Acceptance test {{generation}} {{based on}} detailed use case models Tests performed {{in order to}} verify compliance of a software system with customer expectations cover different areas. Some of them verify the function-ality, other – the business domain logic, the non-functional characteristics or the user interface. Usually they are done separately, but on the same functional areas. This paper presents the concept for the Requirements Driven Software Testing (ReDSeT) tool, which allows for automatic integrated test generation based on different <b>types</b> <b>of</b> <b>requirements.</b> Tests are expressed in newly intro-duced Test Specification Language (TSL). The basis for functional test genera-tion are detailed use case models. Furthermore, by combining different <b>types</b> <b>of</b> <b>requirements,</b> relations between tests are created. The constructed tool acknowledges validity of the presented concept...|$|R
40|$|Abstract. This paper {{presents}} a research framework {{for further research}} within the area <b>of</b> <b>requirements</b> interdependencies. The framework consists of a) an overview <b>of</b> <b>requirements</b> traceability in order properly place requirements interdependencies in context, b) an initial model describing <b>types</b> <b>of</b> <b>requirements</b> interdependencies, and c) {{a discussion of the}} use <b>of</b> <b>requirements</b> interdependencies in various situations and activities within software and systems development. 1...|$|R
40|$|Abstract The {{development}} of next generation Embedded Peer-To-Peer Systems raises {{a number of}} challenging issues for pervasive computing. In this paper we overview {{the objectives of the}} ongoing European SMEPP (Secure Middleware for Embedded Peer-To-Peer) project. In particular we discuss different <b>types</b> <b>of</b> <b>requirements</b> that have been identified in SMEPP...|$|R
40|$|Although Non-Functional Requirements (NFR) {{have been}} present in many {{software}} development methods, they have been faced as a second or even third class <b>type</b> <b>of</b> <b>requirement,</b> frequently hided inside notes and therefore frequently neglected or forgotten. Surprisingly, {{despite the fact that}} nonfunctional requirements (NFR) are among the most expensive and difficult to deal with [5] [12] [3][10], even today {{there are only a few}} works that focus on NFR as first class requirements (e. g. [7][8] [10]. Not so surprisingly, stakeholders' demand for NFR has been continuously increasing. During 2001 edition of ICSE Mantis Chen from ACD System presented the 3 most important aspects for a software in the stakeholders' point of view and the 3 most important one in the developers' point of view. All the 6 were non-functional requirements. This work intends to show how we used the Language Extended Lexicon as a way of supporting initial NFR elicitation...|$|E
40|$|Despite recent {{advances}} in medical technology, AIDS remains a very serious international health threat. Even {{with the presence of}} new drug therapies that have helped to prolong the lives of those who suffer from the disease, scientists have been unable to develop a cure. Consequently education remains the primary weapon available in the war against AIDS. Unfortunately, AIDS education initiatives have found little support in the broadcast community. To renew their licenses, broadcasters are required to act in the public interest— requirement that has traditionally required very little. However, given the threat AIDS presents to society, the FCC should require broadcasters to provide meaningful AIDS-education programming to satisfy their public interest obligation. This <b>type</b> <b>of</b> <b>requirement,</b> if similar in form and style to the Children 2 ̆ 7 s Television Act of 1990, would likely pass constitutional muster. Additionally, such a requirement would prove to be a powerful weapon in the battle {{to stop the spread of}} AIDS...|$|E
30|$|This {{definition}} omits integration requirements {{revolving around}} economic criteria (other than fees for integration courses and tests). These include, for example, demands that immigrants must {{have achieved a}} certain employment record, be self-supporting, or have a certain income level or education. This ‘neo-liberal’ or social-democratic good citizen (e.g. Joppke, 2007 b, p. 248) is a crucial component in policy changes in many family reunification regulations (as it is in changes to residence and naturalization rules). Another crucial aspect of recent family migration policy changes in many European countries is the introduction of stricter age requirements for spousal entry (higher than the legal marriage age for resident spouses) and for entry of children (in Denmark, low enough to allow integration), and blocks to those with domestic violence records. We argue that this <b>type</b> <b>of</b> <b>requirement,</b> though not tracked by Goodman’s civic integration definition (and index) {{is part of the}} larger civic integration trend in requiring newcomers to already have, or have potential to achieve, civic maturity. In Scandinavia this is understood to extend even to specific civic values and norms of family- and work-life related to gender equality and (women’s) individual autonomy.|$|E
40|$|In {{a recent}} study of a product line, we found that the defect reports both (1) {{captured}} new requirements information and (2) implicated undocumented, tacit requirements information in the occurrence of the defects. We report four <b>types</b> <b>of</b> <b>requirements</b> knowledge revealed by software defect reports from integration and system testing for two products in this high-dependability product line. We argue that store-and-retrieve-based requirements management is insufficient to avoid recurrence <b>of</b> these <b>types</b> <b>of</b> defects on upcoming members of the product line. We then propose the use of two mechanisms not traditionally associated with requirements management, one formal and one informal, to improve communication <b>of</b> these <b>types</b> <b>of</b> <b>requirements</b> knowledge to developers of future products in the product line. We show how the two proposed mechanisms, namely feature models extended with assumption specifications (formal) and structured anecdotes of paradigmatic product-line defects (informal), can together improve propagation <b>of</b> the <b>requirements</b> knowledge exposed by these defects to future products in the product line. 1...|$|R
50|$|Requirements are {{typically}} classified into types produced {{at different stages}} in a development progression, with the taxonomy depending on the overall model being used. For example, the following scheme was devised by the International Institute of Business Analysis in their Business Analysis Body of Knowledge (see also FURPS and <b>Types</b> <b>of</b> <b>requirements).</b>|$|R
40|$|Businesses {{started to}} exploit the {{forthcoming}} value from deployment of cloud computing as a new caterpillar paradigm to reach out more diversified customer slices. Although the general concepts they practically focus on are: viability, survivability, adaptability, etc., however, on the ground, {{there is still a}} lack for forming mechanisms to sustain viability with adaptation <b>of</b> new <b>types</b> <b>of</b> <b>requirements</b> that pertain to other un-tackled aspects of the echosystem. Such aspects like social intentionality are of actors and their goals. This paper introduces modern dynamic software programming environment aided with modelling support to achieve operationalization and adaptation of abstract object; goals and their properties as formation <b>of</b> new <b>type</b> <b>of</b> <b>requirements</b> into service based applications distributed over the cloud. This will in turn provide system runtime components to interactively confer to guarantee self-adaptive behaviour with respect to its functional and non-functional characteristics...|$|R
40|$|Self-adaptation {{provides}} a principled {{way to deal}} with change during operation. As more systems with strict goals require self-adaptation, the need for guarantees in self-adaptive systems is becoming a high-priority concern. Designing adaptive software using principles from control theory has been identified as one of the approaches to provide guarantees. However, current solutions can only handle pre-specified requirements either in the form of setpoint values (S-reqs) or values to be optimized (O-reqs). This paper presents SimCA∗ that makes two contributions to control-based self-adaptation: (a) it allows the user to specify a third <b>type</b> <b>of</b> <b>requirement</b> that keeps a value above/below a threshold (T-reqs), and (b) it can deal with requirement sets that change at runtime (i. e., requirements can be adjusted, activated, and deactivated on the fly). SimCA∗ offers robustness to disturbances and {{provides a}}daptation guarantees. We evaluate SimCA∗ for two systems with strict goals from different domains: an underwater vehicle system used for oceanic surveillance, and a tele-assistance system for health care support. The test results demonstrate that SimCA∗ can deal with the three types of requirements (STO-reqs) operating under various types of dynamics and the set of requirements can be changed on the fly...|$|E
40|$|This is {{a conference}} paper from CAiSE 2009 : [URL]. CAiSE Proceedings are {{published}} in the Lecture Notes in Computer Science Series by Springer. This paper was published in Advanced Information Systems Engineering, 21 st International Conference, CAiSE 2009, Amsterdam, The Netherlands, June 8 - 12, 2009, edited by Pascal van Eck, Jaap Gordijn and Roel Wieringa Volume 5565, 2009, DOI: 10. 1007 / 978 - 3 - 642 - 02144 - 2 [URL] paper describes research in understanding the require- ments for complex information systems that are constructed from one or more generic COTS systems. We argue that, in these cases, behavioural requirements are largely de ned by the underlying system and {{that the goal of}} the requirements engineering process is to understand the in- formation requirements of system stakeholders. We discuss this notion of information requirements and propose that an understanding of how a socio-technical system is structured in terms of responsibilities is an e ective way of discovering this <b>type</b> <b>of</b> <b>requirement.</b> We introduce the idea of responsibility modelling and show, using an example drawn from the domain of emergency planning, how a responsibility model can be used to derive information requirements for a system that coordinates the multiple agencies dealing with an emergency...|$|E
40|$|It is {{difficult}} to estimate the percentage of examinees who pass National Teacher Evaluation (NTE) tests because many users of the tests require that examinees pass different combinations of tests or use different passing scores {{for each of the}} tests. This study first develops a taxonomy of state NTE requirements and then computes passing rates for each rype of state requirement for both the examinee group impacted by the requirement and for each self-identified ethnic group. An example is the situation in which states require teacher certification candidates to pass all three Core Battery tests and the Specialty Area test most relevant to their own area of interest. For this <b>type</b> <b>of</b> <b>requirement,</b> the percentage of examinees who pass each test is computed, as well as the percentage of examinees who pass all the required tests. Results show considerable variation in passing rates depending on types of requirement and passing scores, and they demonstrate variation in ethnic differences on passing rates. For blacks, the ratio of examinees to white examinees who pass each requirement is related to the passing scores used and the required tests. Appendix A contains a model to discuss impact on reducing cutoff scores, and Appendix B lists the NTE Specialty Area tests. (Contains 18 tables, 3 tables and 6 figures in Appendix A, and 5 references.) (Author/SLD) Reproductions supplied by EDRS are the best that can be made from the original document...|$|E
40|$|The article {{describes}} the structure <b>of</b> <b>requirements</b> management systems in the form <b>of</b> models <b>of</b> <b>requirements</b> systematization and approach to that systematization, which shows the complex usage of different methodologies {{for the design of}} information systems. The model, which described in detail in the article, need to solve tasks <b>of</b> systematization <b>of</b> <b>requirements</b> arising in the design of information systems. The solution of such problems often associated with the definition and classification of the relationships between different <b>types</b> <b>of</b> <b>requirements...</b>|$|R
40|$|We {{address the}} {{research}} question <b>of</b> transforming dependability <b>requirements</b> into corresponding software architecture constructs, by proposing first that dependability needs {{can be classified}} into three <b>types</b> <b>of</b> <b>requirements</b> and second, an architectural pattern that allows requirements engineers and architects to map dependability requirements into three corresponding <b>types</b> <b>of</b> architectural components. The proposed pattern is general enough to work with existing requirements techniques and existing software architectural styles, including enterprise and product-line architectures...|$|R
40|$|An {{approach}} {{based on}} an integration <b>of</b> <b>requirements</b> breakdown structure and work breakdown structure of the project is proposed. It can complement existing methods of project stakeholders classification with the indicator of resource input, which can be defined in monetary terms. A method <b>of</b> <b>requirements</b> monitoring is proposed, {{which allows you to}} track the <b>requirements</b> <b>of</b> project stakeholders over time according to the actual amount of resources spent by analogy with the earned value method. Proposed indexes are the basis not only for monitoring but for the forecast of the project. The need of creating of a mechanism for getting baseline data taking into account the existence <b>of</b> different <b>types</b> <b>of</b> <b>requirements</b> <b>of</b> project stakeholders is grounded...|$|R
