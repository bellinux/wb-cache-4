29|3434|Public
25|$|Because file {{names have}} to be {{exchanged}} between software environments (think network file <b>transfer,</b> <b>file</b> system storage, backup and file synchronization software, configuration management, data compression and archiving, etc.), {{it is very important}} not to lose file name information between applications. This led to wide adoption of Unicode as a standard for encoding file names, although legacy software might be non-Unicode-aware.|$|E
2500|$|The {{original}} protocol has a <b>transfer</b> <b>file</b> {{size limit}} of 512 bytes/block x 65535 blocks = 32MB. In 1998 this limit {{was extended to}} 65535 bytes/block x 65535 blocks = 4GB by TFTP Blocksize Option RFC 2348. If the defined blocksize produces an IP packet size that exceeds the minimum MTU at any point of the network path, IP fragmentation and reassembly will occur not only adding more overhead but also leading to total transfer failure when the minimalist IP stack implementation in a host's BOOTP or PXE ROM does not (or fails to properly) implement IP fragmentation and reassembly [...] If TFTP packets should be kept within the standard Ethernet MTU (1500), the blocksize value is calculated as 1500 minus headers of TFTP (4 bytes), UDP (8 bytes) and IP (20 bytes) = 1468 bytes/block, this gives a limit of 1468 bytes/block x 65535 blocks = 92MB. Today most servers and clients support block number roll-over (block counter going back to 0 after 65535) which gives an essentially unlimited <b>transfer</b> <b>file</b> size.|$|E
50|$|Because file {{names have}} to be {{exchanged}} between software environments (think network file <b>transfer,</b> <b>file</b> system storage, backup and file synchronization software, configuration management, data compression and archiving, etc.), {{it is very important}} not to lose file name information between applications. This led to wide adoption of Unicode as a standard for encoding file names, although legacy software might be non-Unicode-aware.|$|E
5000|$|Securely <b>transfer</b> <b>files</b> over {{public and}} private {{networks}} using encrypted <b>file</b> <b>transfer</b> protocols.|$|R
5000|$|Some of the ZMODEM packets (e.g. ZACK, ZRPOS) embed a byte-offset {{within the}} <b>transferred</b> <b>file</b> as a 32-bit {{unsigned}} integer. This design limits {{the feasibility of}} ZMODEM to only reliably <b>transfer</b> <b>files</b> that are under 4GB in size.|$|R
5000|$|<b>File</b> <b>Transfer</b> - <b>Transfer</b> <b>files</b> between remote computers, tablets or {{smartphones}} during {{remote support}} sessions ...|$|R
5000|$|The {{original}} protocol has a <b>transfer</b> <b>file</b> {{size limit}} of 512 bytes/block x 65535 blocks = 32 MB. In 1998 this limit {{was extended to}} 65535 bytes/block x 65535 blocks = 4 GB by TFTP Blocksize Option RFC 2348. If the defined blocksize produces an IP packet size that exceeds the minimum MTU at any point of the network path, IP fragmentation and reassembly will occur not only adding more overhead but also leading to total transfer failure when the minimalist IP stack implementation in a host's BOOTP or PXE ROM does not (or fails to properly) implement IP fragmentation and reassembly [...] If TFTP packets should be kept within the standard Ethernet MTU (1500), the blocksize value is calculated as 1500 minus headers of TFTP (4 bytes), UDP (8 bytes) and IP (20 bytes) = 1468 bytes/block, this gives a limit of 1468 bytes/block x 65535 blocks = 92 MB. Today most servers and clients support block number roll-over (block counter going back to 0 after 65535) which gives an essentially unlimited <b>transfer</b> <b>file</b> size.|$|E
50|$|Some input {{parameters}} {{should not be}} changed, like the nodal network relations, the system geometry, {{the thickness of the}} soil layers, and the total porosity, otherwise illogical jumps occur in the water and salt balances. These parameters are also stored in the <b>transfer</b> <b>file,</b> so that any impermissible change is overruled by the transfer data. In some cases of incorrect changes, the program will stop and request the user to adjust the input.|$|E
50|$|The {{program also}} offers the {{possibility}} to follow historic records with annually changing input values (e.g. rainfall, irrigation, cropping rotations), the calculations must be made year by year. If this possibility is chosen, the program creates a <b>transfer</b> <b>file</b> by which the final conditions {{of the previous year}} (e.g. water table and salinity) are automatically used as the initial conditions for the subsequent period. This facility makes it also possible to use various generated rainfall sequences drawn randomly from a known rainfall probability distribution and to obtain a stochastic prediction of the resulting output parameters.|$|E
50|$|<b>File</b> <b>Transfer</b> Consulting has {{partnered with}} Flux {{to provide a}} {{resource}} for designing managed <b>file</b> <b>transfer</b> systems. Flux {{is one of the}} tools that <b>File</b> <b>Transfer</b> Consulting uses to help meet its clients' managed <b>file</b> <b>transfer</b> needs. <b>File</b> <b>Transfer</b> Consulting's staff has developed managed <b>file</b> <b>transfer</b> tools that are used by more than 1,200 enterprises worldwide.|$|R
50|$|Binary Research {{initially}} considered developing {{competitors to}} the <b>file</b> <b>transfer</b> programs Blast and Laplink. The product {{to compete with}} Blast was dropped at an early stage, but a program to <b>transfer</b> <b>files</b> over parallel or serial cables was developed and marketed from 1994 to 1996 under several names, including Beam, UniBeam and LinkWiz. This program was available in DOS, Windows 3.x, OS/2 2.0 and SCO Unix versions, and claimed to <b>transfer</b> <b>files</b> more rapidly than Laplink at that time. Later versions of the program could also <b>transfer</b> <b>files</b> using a network cable.|$|R
50|$|CuteFTP {{is used to}} <b>transfer</b> <b>files</b> between {{computers}} and <b>File</b> <b>Transfer</b> Protocol (FTP) servers to publish web pages, download digital images, music, multi-media files and software, and <b>transfer</b> <b>files</b> of any size or type between home and office. Since 1999, CuteFTP Pro and CuteFTP Mac Pro have also been available alongside CuteFTP Home with free trial periods.|$|R
50|$|It {{comes with}} no {{proprietary}} software. To <b>transfer</b> <b>file</b> to the thump, the user plugs {{it into your}} Windows or Mac OS computer with the included USB 2.0 cord, then drag over AAC, MP3, WMA, or WAV tracks. It works with WMA DRM content but not AAC DRM (songs from the iTunes Music Store). Songs {{can be added to}} folders or as one long list. The Thump will sort correctly tagged songs by artist during playback. The Thump remembers your place when listening and doesn't start each new session {{at the beginning of the}} song list.|$|E
50|$|Back Orifice 2000 was {{designed}} as a back door. The server runs on Windows, and there are clients for Windows, Linux and other operating systems. The server is configured easily with a utility. After configuration, the server needs to be uploaded to the target and then started. Back Orifice 2000 supports file <b>transfer,</b> <b>file</b> execution, logging of keystrokes, and control of connections. There is also an AES plug-in for traffic encryption and an STCPIO plug-in for further obfuscation of the traffic. The first plug-in adds security and the combination of these plug-ins makes it much harder for an IDS to relate the traffic to a back door. More information can be found at http://www.bo2k.com.|$|E
40|$|The {{original}} objective set by LINZ was {{to design}} a modular software package to enable data conversion between the proposed New Zealand <b>Transfer</b> <b>File</b> Format standard for digital cartographic data and other <b>transfer</b> <b>file</b> formats. However it {{was found to be}} more practical to specify the architecture of the geographic interface and apply existing software tools to implement modules within that architecture. A geographic interface is produced by integrating these modules...|$|E
50|$|AirDrop uses TLS {{encryption}} when <b>transferring</b> <b>files.</b>|$|R
50|$|The SSH <b>file</b> <b>transfer</b> {{protocol}} (chronologically {{the second}} of the two protocols abbreviated SFTP) <b>transfers</b> <b>files</b> and has a similar command set for users, but uses the Secure Shell protocol (SSH) to <b>transfer</b> <b>files.</b> Unlike FTP, it encrypts both commands and data, preventing passwords and sensitive information from being transmitted openly over the network. It cannot interoperate with FTP software.|$|R
5000|$|SHAREit {{is a free}} {{application}} to <b>transfer</b> <b>files</b> from a Wi-Fi compatible device to another similar one. Users {{can use it to}} <b>transfer</b> <b>files</b> including photos, videos, music, contacts, apps and any other files. It is a free application from Lenovo that allows Windows, Windows Phone, Android, and iOS devices to <b>transfer</b> <b>files</b> directly by ad-hoc Wi-Fi connections. It is currently available in 39 languages including English, French, Spanish, Russian, Arabic and Chinese. It was first launched In China in June 2012 and known as anyshare. In transfer field, SHAREit competes with Xender, Zapya, Share Apps, SuperBeam.In addition to <b>transferring</b> <b>files,</b> SHAREit’s services also include CONTROL and CLONEit. Shareit's Windows Phone app is now named SHAREit Official and the older app renamed to SHAREit Unofficial which was developed by Paradox. Windows Phone does not have its full version.|$|R
40|$|The {{primary goal}} of this {{technical}} specification is to meet the consolidated environmental data requirements defined by the Federal Facility (FFA) and the Tennessee Oversight Agreement (TOA) as they pertain to NPDES surface water data maintained in Oak Ridge, Tennessee, by the Department of Energy`s Maintenance and Operations (M&O) contractor Martin Marietta Energy Systems and prime contractors to DOE. This technical specification describes the organizational responsibilities for getting NPDES data into OREIS, describes the logical data <b>transfer</b> <b>file</b> required from NPDES, addresses business rules and submission rules, describes the physical data <b>transfer</b> <b>file,</b> addresses configuration control of this technical specification, and addresses required changes to the current OREIS data base structure due {{to the requirements of}} NPDES...|$|E
40|$|Large file {{transfers}} {{have become}} {{common with the}} increasing demand for bandwidth-intensive Internet applications. The transmission control protocol with adaptive delay and loss response algorithm (TCP-ADaLR) was proposed to improve TCP performance {{in the presence of}} large propagation delays and error losses. In this paper, we analyze the effect of <b>transfer</b> <b>file</b> size on the TCP-ADaLR performance in networks with large propagation delays. We employ the file transport protocol (FTP) file download application to evaluate TCP-ADaLR performance for varying file sizes using. We compare the performance of TCP-ADaLR with TCP NewReno and TCP SACK. Simulation results show that TCP-ADaLR mechanism improves TCP performance in cases of large file transfers in lossless networks with large propagation delays. When the file size is larger than 50 MB, TCP-ADaLR improves TCP throughput while the throughput of the TCP NewReno and TCP SACK connections remain unchanged. Furthermore, when <b>transfer</b> <b>file</b> size is 500 MB TCP-ADaLR throughput increases up to 75 % compared to TCP NewReno and TCP SACK...|$|E
40|$|The recent {{proliferation}} of computer networks {{and the resulting}} trend toward networked and distributed data base management systems has influenced significantly the sharing of geographical data. The traditional transfer medium of magnetic tape {{has been replaced by}} data communication networks and an interfacing strategy has been adopted world-wide which revolves around the use of interchange standards such as SDTS 1, NTF 2, and MACDIF 3. The functionality and performance of contemporary geographical information systems will be enhanced through their utilization of the increased connectivity of computers. In this paper we develop a method for modeling the data transfer scenarios which occur in practice. We stress the importance of semantic information and show that its inclusion in a machine readable description of the syntax and semantics of <b>transfer</b> <b>file</b> formats allows practical solutions to be developed for problems that may be anticipated during the modeling process. This information is vital if software is to be generated automatically both for encoding and decoding data to and from the format, and for converting data from one format into another. We describe BQL, a notation for specifying <b>transfer</b> <b>file</b> formats, as an application of our ideas...|$|E
5000|$|<b>File</b> <b>Transfer</b> Protocol (FTP), {{a simple}} network {{protocol}} based on IP, {{allows users to}} <b>transfer</b> <b>files</b> between network hosts. FTPS extends FTP for secure traffic.|$|R
5000|$|Computers may <b>transfer</b> <b>files</b> to {{peripheral}} {{devices such}} as USB flash drives ...|$|R
5000|$|<b>Transfer</b> <b>files</b> in FTP, SFTP, {{encrypted}} FTP such as FTPS and SFTP ...|$|R
40|$|With digital {{recording}} devices {{readily available to}} most people, events are documented and shared on-line in real time by the “person on the street. ” The ease of creation and dissemination belies what archivists know will be the long-term challenges of organizing and preserving collections of born-digital information. While other processes require little modification, the inherent fragility of digital content and the ease of depositing files call for a substantial modification of established procedures. In this article, three University of Louisville archivists discuss their approach to the acquisition, copyright <b>transfer,</b> <b>file</b> naming, selection, description, and preservation of born-digital content donated by the local community to document Louisville’s August 2009 flood...|$|E
40|$|This paper {{describes}} {{a new technique}} for transferring data between computers, the synchronized clipboard. Multiple computers can share a synchronized clipboard for all clipboard operations, so that data copied to the clipboard from one computer, using the standard Copy command, can be pasted directly on another computer using the standard Paste command. Synchronized clipboards are well-suited for a single user moving data among several computers in close proximity. We describe an implementation of synchronized clipboards that works across {{a wide range of}} existing systems, including 3 Com PalmPilots, Microsoft Windows PCs, Unix workstations, and other Java-capable platforms. Our implementation adds no noticeable overhead to local copy and paste operations. KEYWORDS: Synchronized clipboard, network clipboard, data <b>transfer,</b> <b>file</b> transfer, drag-and-drop, pick-and-drop, distributed systems, Java, ubiquitous computing, Pebble...|$|E
30|$|Kandaswamy et al. [16] {{have pointed}} that the {{execution}} of complex workflows with reliability is a challenge in computational grids. They executed 165 complex weather forecasting workflows from the LEAD production portal, {{with a total of}} 869 applications (workflow steps) in them. Without any fault tolerance and recovery strategies, 268 of the total 869 applications failed on the TeraGrid (application failure rate of 30.84  %). Since a workflow consists of several steps, the failure rate on workflow is higher than on application (79.39  %). They reported that applications failed due to a variety of reasons: GridFTP failures during data <b>transfer,</b> <b>file</b> systems problems, file systems running out of disk space due to very large data transfers, connection timeouts from Globus WS-GRAM, compute node crashes, transient downtimes of core grid services.|$|E
5000|$|Many instant {{messaging}} or LAN messenger systems support {{the ability to}} <b>transfer</b> <b>files</b> ...|$|R
50|$|<b>Files</b> <b>transferred</b> over Shell {{protocol}} (FISH) is {{a network}} protocol that uses Secure Shell (SSH) or Remote Shell (RSH) to <b>transfer</b> <b>files</b> between computers and manage remote files.|$|R
40|$|FTP is {{client server}} {{architecture}} based protocol from <b>transferring</b> <b>files</b> over TCP/IP network. It is used with user based password authentication or which anonymous user access. All transmissions are in clear text. User names, passwords, FTP commands and <b>transferred</b> <b>files</b> {{can be read}} by anyone sniffing on the network. FTPS and FTP over IPsec are cost effective methods of securing <b>file</b> <b>transfer</b> communication which provide authentication and encryption functionalities for <b>file</b> <b>transfer</b> communications. But those methods introduce processing overheads, packets overheads and key management delays to different extends. This research paper compares and contrasts the overhead of securing <b>file</b> <b>transfer</b> communication using FTPS and FTP over IPsec in IPv 6 networks...|$|R
40|$|This article {{presents}} the assumptions {{and the issues}} that arise when developing an integrated modelling methodology between a Computational Fluid Dynamics (CFD) software applied to compartment fires and a finite element (FE) software applied to structural systems. In particular, a weak coupling methodology use to simulate a fire exposed structure by modelling the fire development in the compartment, the heat penetration in the structure and the mechanical response is described. The advantages and the disadvantages of such a technique are highlighted compared to a full coupling that conversely takes into account all mutual interactions. This methodology is particularly suitable for relatively thin steel structures in large compartments. Moreover, the need of a standardised <b>transfer</b> <b>file</b> {{in order to get}} the methodology as flexible as possible in term of versatility is emphasized. Peer reviewe...|$|E
40|$|This paper {{describes}} {{a new technique}} for transferring data between computers, the synchronized clipboard. To use a synchronized clipboard, the user selects an item on one computer and invokes the standard Copy command, then selects a target on another computer and invokes the standard Paste command. Synchronized clipboards are well-suited for a single user moving data among several computers in close proximity. We describe an implementation of synchronized clipboards that works across {{a wide range of}} existing systems, including 3 Com PalmPilots, Microsoft Windows PCs, and any Java-capable platforms (such as Unix and Macintosh). Our implementation adds no noticeable overhead to local copy and paste operations. KEYWORDS: Synchronized clipboard, network clipboard, data <b>transfer,</b> <b>file</b> transfer, drag-and-drop, pick-and-drop, distributed systems, ubiquitous computing, Pebbles INTRODUCTION As computing devices proliferate, and more users own and use multiple computers [...] such as desktop com [...] ...|$|E
40|$|Remote real {{laboratories}} {{deal with}} performing real lab experiments remotely via Internet. Recent advances in Internet/web technologies and computer-controlled instrumentation allow net-based techniques {{to be used}} for setting up remote real laboratory access. The goal of our project VITELS 1 (Virtual Internet Telecommunications Laboratory of Switzerland) is to develop a course that provides practical exercises in the area of telecommunications and computer networks to the students. The exercises shall be performed by students remotely and students {{do not need to be}} present in particular laboratory rooms. As regards communication between machines, several levels of complexity must be differentiated. The management and total handling become more complicated according to the kind of desired networks functionality and data exchange. This differentiation is often based on the following functions networks: File <b>transfer</b> (<b>File</b> transfer), Execution of programs on other machines (remote execution), virtua...|$|E
2500|$|Gnomad2, {{which can}} <b>transfer</b> <b>files</b> to ZEN players with an FTP-like {{interface}} for Linux ...|$|R
5000|$|In-built FTP <b>transfers</b> <b>files</b> onto a web server, {{uploading}} {{a website}} to the internet.|$|R
50|$|EFTP (various {{expansions}} of {{this have}} been given, including Easy <b>File</b> <b>Transfer</b> Protocol, Ether <b>File</b> <b>Transfer</b> Protocol, and Experimental <b>File</b> <b>Transfer</b> Protocol) {{was a very}} simple <b>file</b> <b>transfer</b> protocol developed {{as part of the}} PUP protocol suite at Xerox PARC in the late 1970s. It was part of the inspiration for the Trivial <b>File</b> <b>Transfer</b> Protocol (TFTP) in the TCP/IP suite.|$|R
