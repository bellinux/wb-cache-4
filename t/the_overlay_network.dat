388|9315|Public
25|$|Aside from routing, {{there exist}} many {{algorithms}} that exploit {{the structure of}} <b>the</b> <b>overlay</b> <b>network</b> for {{sending a message to}} all nodes, or a subset of nodes, in a DHT. These algorithms are used by applications to do overlay multicast, range queries, or to collect statistics. Two systems that are based on this approach are Structella, which implements flooding and random walks on a Pastry overlay, and DQ-DHT, which implements a dynamic querying search algorithm over a Chord network.|$|E
2500|$|Each node {{maintains}} {{a set of}} links to other nodes (its neighbors or routing table) [...] Together, these links form <b>the</b> <b>overlay</b> <b>network.</b> A node picks its neighbors according to a certain structure, called the network's topology.|$|E
2500|$|Once these {{components}} are in place, a typical {{use of the}} DHT for storage and retrieval might proceed as follows. Suppose the keyspace is the set of 160-bit strings. To index a file with given [...] and [...] in the DHT, the SHA-1 hash of [...] is generated, producing a 160-bit key , and a message [...] is sent to any node participating in the DHT. The message is forwarded from node to node through <b>the</b> <b>overlay</b> <b>network</b> until it reaches the single node responsible for key [...] as specified by the keyspace partitioning. That node then stores the key and the data. Any other client can then retrieve {{the contents of the}} file by again hashing [...] to produce [...] and asking any DHT node to find the data associated with [...] with a message [...] The message will again be routed through the overlay to the node responsible for , which will reply with the stored [...]|$|E
40|$|This {{technical}} report {{consists of the}} current state of <b>the</b> art in <b>overlay</b> <b>networks</b> and dynamic routing with tra c prediction. Introduction to <b>the</b> <b>overlay</b> <b>networks</b> is followed by routing speci cs in <b>overlay</b> <b>networks.</b> Subsequent chapters describe routing metrics and parameters measured in <b>overlay</b> <b>networks.</b> Following chapter introduces time series prediction algorithms and methods. The last chapter brings a description of the further work and the goals of the Ph. D. thesis followed by summary...|$|R
30|$|Monitoring and Control Nodes (MCNs) are HTTP {{clients that}} use the CoAP REST {{interface}} to access resources in the WSNs federated by <b>the</b> RELOAD <b>overlay</b> <b>network.</b> A GW node acts, as a HTTP/CoAP proxy, as the first point of contact for MCNs in <b>the</b> RELOAD <b>overlay</b> <b>network.</b>|$|R
30|$|Then, the {{characteristics}} are computed for <b>the</b> <b>overlay</b> <b>networks</b> resulting from <b>the</b> two global discovery methods, 25 network instances, and TTL with values 1, 2, 3, 4, and 5. No limit is specified for local cache in these tests.|$|R
50|$|To find a node {{already in}} <b>the</b> <b>overlay</b> <b>network,</b> {{bootstrapping}} nodes {{may be used}} to inform the joining node of IP addresses of nodes currently in <b>the</b> <b>overlay</b> <b>network.</b>|$|E
50|$|An {{overlay network}} {{is a virtual}} {{computer}} network that is built {{on top of another}} network. Nodes in <b>the</b> <b>overlay</b> <b>network</b> are connected by virtual or logical links. Each link corresponds to a path, perhaps through many physical links, in the underlying network. The topology of <b>the</b> <b>overlay</b> <b>network</b> may (and often does) differ from that of the underlying one. For example, many peer-to-peer networks are overlay networks. They are organized as nodes of a virtual system of links that run on top of the Internet.|$|E
50|$|If the merge is successful, {{routing tables}} of {{neighboring}} zones' nodes are updated {{to reflect the}} merge. The network will see the subsection of <b>the</b> <b>overlay</b> <b>network</b> as one, single zone after a merge and treat all routing processing with this mindset. To effectuate a take-over, the take-over node updates neighboring zones' nodes' routing tables, so that requests to either zone resolve to the take-over node. And, as such, the network still sees the subsection of <b>the</b> <b>overlay</b> <b>network</b> as two separate zones and treats all routing processing with this mindset.|$|E
40|$|Selfish <b>overlay</b> routing is <b>the</b> {{technique}} {{whereby the}} sender of the packet can specify the route that the packet should take through <b>the</b> <b>network.</b> Selfish <b>overlay</b> routing allow end users to select routes in an egocentic fashion to optimize their own performance without considering the system wide criteria {{which in turn}} cause performance degradation. The main concept behind <b>the</b> selfish <b>overlay</b> <b>network</b> is whenever there is a link failure <b>the</b> <b>overlay</b> nodes in <b>the</b> <b>network</b> will route the packet to their concerned destination. So far <b>the</b> <b>overlay</b> nodes are deployed randomly in the network and it is proved that <b>the</b> <b>overlay</b> nodes are happened to be deployed even {{in the place where}} there is no link failure. The demerit of such deployment of overlay nodes is memory consumption in <b>the</b> Selfish <b>Overlay</b> <b>Network.</b> To overcome such demerits overlay nodes are deployed dynamicaly in selfish <b>overlay</b> <b>network</b> using fuzzy logic and the result was compared with <b>the</b> normal selfish <b>overlay</b> <b>network</b> without fuzzy logic. Simulation results shows that selfish <b>overlay</b> <b>network</b> with <b>overlay</b> nodes deployed using fuzzy logic gives better result than <b>the</b> selfish <b>overlay</b> <b>network</b> with random deployment of overlay nodes. Keywords:Selfish overlay network,Link failure,Fuzzy logic,Overlay Nodes...|$|R
40|$|Abstract — Distributed denial-of-service {{attacks on}} public servers have {{recently}} become more serious. To assure that network services {{will not be}} interrupted, we need faster and more accurate defense mechanisms against malicious traffic, especially SYN floods. But single point defense (ex. firewalls) lack a scalability to catch up the increase of the attack traffic. In this paper, we introduce a distributed defense mechanism using overlay netwoeks. This mechanism detects attacks near the victim servers and alert messages are sent via <b>the</b> <b>overlay</b> <b>networks.</b> Then defense nodes identify legitimate traffic and block malicious ones. The legitimate traffic is protected via <b>the</b> <b>overlay</b> <b>networks.</b> We simulate and verify our proposed method can effectively block malicious traffic and protect legitimate traffic. We also describe the deployment scenario of our defense mechanism...|$|R
40|$|The File Mover [6] is a file {{transfer}} infrastructure, based on <b>the</b> <b>overlay</b> <b>networks</b> paradigm, specifically conceived to provide high-performance {{file transfer}}s for Data Grids. In its current implementation, the File Mover exploits only {{in part the}} potential benefits typical of <b>overlay</b> <b>networks.</b> In this paper we consider three possible extensions of the File Mover, aimed at increasing its performance, that better exploit <b>the</b> characteristics of <b>overlay</b> <b>networks.</b> <b>The</b> performance improvements obtained with these extensions are demonstrated {{by means of a}} set of experiments, in which the performance obtained by an extended version of the File Mover have been compared with those attained by its standard version. ...|$|R
50|$|A {{bootstrapping}} node, {{also known}} as a rendezvous host, is a node in an overlay network that provides initial configuration information to newly joining nodes so that they may successfully join <b>the</b> <b>overlay</b> <b>network.</b>|$|E
5000|$|Each node {{maintains}} {{a set of}} links to other nodes (its neighbors or routing table) [...] Together, these links form <b>the</b> <b>overlay</b> <b>network.</b> A node picks its neighbors according to a certain structure, called the network's topology.|$|E
50|$|Unstructured {{peer-to-peer}} networks do {{not impose}} a particular structure on <b>the</b> <b>overlay</b> <b>network</b> by design, but rather are formed by nodes that randomly form connections to each other. (Gnutella, Gossip, and Kazaa {{are examples of}} unstructured P2P protocols).|$|E
40|$|Abstract. The {{integration}} of multiple automotive subsystems (e. g., powertrain, safety, comfort) {{on a single}} distributed computer system can significantly {{reduce the number of}} Electronic Control Units (ECUs) and networks for in-vehicle electronic systems. The benefits of this integration include reduced hardware cost and reliability improvements due to fewer connectors. However, a major challenge in such an integrated automotive architecture is the management of access to the shared communication resources (i. e., the common network). In order to support a seamless {{integration of}} application subsystems from different vendors and to permit the integration of application subsystems with different criticality levels, a fault in one application subsystem should not have an adverse affect on the resources that are available to other application subsystems. For this reason, we devise a solution for encapsulating the communication activities of application subsystems in this paper. Each application subsystem is provided with a dedicated <b>overlay</b> <b>network</b> on top of an underlying time-triggered <b>network.</b> Such an <b>overlay</b> <b>network</b> has predefined temporal properties (i. e., latencies, bandwidths), which are independent from the communication activities on <b>the</b> <b>overlay</b> <b>networks</b> of other application subsystems. An exemplary configuration of <b>the</b> <b>overlay</b> <b>networks</b> in a prototype implementation demonstrates that <b>the</b> encapsulated <b>overlay</b> <b>networks</b> can handle <b>the</b> communication load of a present day car with the additional time-triggered traffic of future X-by-wire subsystems. ...|$|R
30|$|A Gateway Node (GW) {{acts as a}} peer in <b>the</b> RELOAD <b>overlay</b> <b>network.</b> In addition, <b>the</b> GW acts as a HTTP/CoAP proxy [25]. The {{purpose of}} a HTTP/CoAP proxy is to provide {{interoperability}} between HTTP and CoAP. Thus, as a HTTP/CoAP proxy, the GW provides web applications access to the resources in the WSNs interconnected by <b>the</b> RELOAD <b>overlay</b> <b>network.</b> It also enables CoAP clients to access resources on web servers.|$|R
30|$|In {{order to}} support the {{forwarding}} of messages (e.g., ADD-ENTRY and LOOKUP) in DHT <b>overlay</b> <b>networks,</b> a mesh STA relies on its HWMP instance, setting the appropriate scope (global or local). Most likely, neighbor nodes in <b>the</b> DHT <b>overlay</b> <b>network</b> are several physical hops away. Thus, forwarding of messages between two neighbor nodes in <b>the</b> DHT <b>overlay</b> <b>network</b> is done by forwarding the message from one node to the next along the path between the two DHT nodes in the physical network.|$|R
50|$|Another {{example of}} an overlay network is a {{distributed}} hash table, which maps keys to nodes in the network. In this case, the underlying network is an IP network, and <b>the</b> <b>overlay</b> <b>network</b> is a table (actually a map) indexed by keys.|$|E
5000|$|A {{bootstrapping}} node, {{also known}} as a rendezvous host, is a node in an overlay network that provides initial configuration information to newly joining nodes so that they may successfully join <b>the</b> <b>overlay</b> <b>network.</b> [...] Bootstrapping nodes are predominantly found in decentralized peer-to-peer (P2P) networks because of the dynamically changing identities and configurations of member nodes in these networks.|$|E
5000|$|A trackerless torrent {{dictionary}} {{does not}} have an [...] "announce" [...] key. Instead, a trackerless torrent has a [...] "nodes" [...] key, which functions as a list of Bootstrapping nodes (in case we haven't already joined <b>the</b> <b>overlay</b> <b>network).</b> This key is normally set to the K closest nodes in the torrent generating client's routing table.|$|E
40|$|Abstract <b>Overlay</b> <b>networks</b> achieve new {{functionality}} {{and enhance}} network performance by allowing routing {{to be controlled}} at the appli-cation layer. However, these approaches result in degradations of underlying networks due to the selfish behavior of <b>overlay</b> <b>networks.</b> In this paper, we investigate the stability of virtual network topology (VNT) control under <b>the</b> <b>overlay</b> <b>networks</b> that perform dynamic routing updates. We reveal that the dynamics of routing on <b>overlay</b> <b>networks</b> cause a high fluctuation in the traffic demand, which leads to significant instability of VNT control. To overcome the instability induced by <b>the</b> <b>overlay</b> routing, we introduce three extensions, utilization hysteresis, two-state utilization hysteresis, and filtering, to VNT control. Through simulations, we show that our methods achieve <b>the</b> stability against <b>overlay</b> routing without <b>the</b> loss of the adaptability {{for changes in the}} traffic demand...|$|R
40|$|Nowadays, a {{very useful}} {{platform}} is becoming widely used to deploy new services and applications in <b>the</b> Internet: <b>the</b> <b>overlay</b> <b>networks.</b> These networks create a virtual topology on top of existing ones {{with the purpose of}} providing several different services such as file sharing or content delivery. This survey focuses on diverse research issues concerning <b>overlay</b> <b>networks</b> applicability and management strategies required for emergent network environments. In this way, mobility, security, scalability, dependability and resource constraints are studied with regard to <b>overlay</b> <b>networks.</b> We finally discuss the evolution of these networks in order to satisfy new technological improvements...|$|R
40|$|Abstract — Internet {{heterogeneity}} {{has been}} a major problem in multimedia data delivery. To deal with <b>the</b> problem, <b>overlay</b> proxy <b>networks</b> as well as distributed and composable services across these <b>overlay</b> <b>networks</b> are being deployed. This solution however, implies that <b>the</b> <b>overlay</b> <b>networks</b> must support not only data mul-ticast for data delivery to a group of destinations, but also service multicast (incorporate services in the distribution tree) for seman-tic data transformations {{in order to deal with}} Internet heterogene-ity. This paper presents challenges and solutions for building ser-vice multicast trees. We compare two groups of algorithms, the shortest-service-path-tree (SSPT) algorithm and the longest-match (LM) algorithm. Simulation results show trade-offs between com-plexity and overall tree performance, as well as cost differences when further refinements of the LM approach are considered. I...|$|R
50|$|Tapestry is an {{extensible}} {{infrastructure that}} provides decentralized object location and routing focusing on efficiency and minimizing message latency. This is achieved since Tapestry constructs locally optimal routing tables from initialization and maintains {{them in order}} to reduce routing stretch. Furthermore, Tapestry allows object distribution determination according to the needs of a given application. Similarly Tapestry allows applications to implement multicasting in <b>the</b> <b>overlay</b> <b>network.</b>|$|E
50|$|Aside from routing, {{there exist}} many {{algorithms}} that exploit {{the structure of}} <b>the</b> <b>overlay</b> <b>network</b> for {{sending a message to}} all nodes, or a subset of nodes, in a DHT. These algorithms are used by applications to do overlay multicast, range queries, or to collect statistics. Two systems that are based on this approach are Structella, which implements flooding and random walks on a Pastry overlay, and DQ-DHT, which implements a dynamic querying search algorithm over a Chord network.|$|E
50|$|In another approach, SIP over P2P, the SIP {{location}} {{service is}} replaced by conventional P2P overlay networking approach, such as the OverSim framework.In this model, <b>the</b> <b>overlay</b> <b>network</b> is used for service or node discovery and rendezvous. The search key in such a mechanism is the Uniform Resource Identifier (URI) of a user agent. This URI requires resolution to a particular device or Uniform Resource Locator (URL) that must be performed in real time.P2P-SIP systems may employ structured peer-to-peer approaches, as well as unstructured peer-to-peer architectures.|$|E
50|$|PAST is a large-scale, distributed, {{persistent}} storage {{system based on}} <b>the</b> Pastry peer-to-peer <b>overlay</b> <b>network.</b>|$|R
40|$|Resource {{discovery}} {{systems are}} gaining in importance as {{the diversity and}} variability of shared resources in distributed networked systems increases. A dependable genuinely distributed (’peer-to-peer’) system is proposed, that uses XML description files to construct <b>overlay</b> <b>networks</b> that exhibit small world properties (i. e., a small diameter and a regular structure) and in which similar resources are grouped together. <b>The</b> <b>overlay</b> <b>network’s</b> structure, failure detection and recovery mechanisms, allow the system to converge to a degraded functionality in the advent of failures and to recover swiftly after the failed nodes are repaired or communication is restored...|$|R
40|$|Abstract—Overlay {{networks}} achieve new functionality and en-hance {{network performance}} by allowing routing {{to be controlled}} at the application layer. However, these approaches result in degradations of underlying networks due to the selfish behavior of <b>overlay</b> <b>networks.</b> In this paper, we investigate the stability of virtual network topology (VNT) control under <b>the</b> <b>overlay</b> <b>networks</b> that perform dynamic routing updates. We reveal that the dynamics of routing on <b>overlay</b> <b>networks</b> causes a high fluctuation in the traffic demand matrix, which leads to significant instability of VNT control. To overcome the instability induced by <b>the</b> <b>overlay</b> routing, we introduce hysteresis to the VNT control. Simulation {{results indicate that the}} hysteresis mechanism improves the network stability, but cannot always improve the network performance. We therefore extend the hysteresis mechanism and show that the proposed method improves both the network stability and the performance when the amount of traffic for <b>overlay</b> <b>network</b> is not large. I...|$|R
50|$|Each node is {{assigned}} a unique nodeID uniformly distributed {{in a large}} identifier space. Tapestry uses SHA-1 to produce a 160-bit identifier space represented by a 40 digit hex key.Application specific endpoints GUIDs are similarly assigned unique identifiers. NodeIDs and GUIDs are roughly evenly distributed in <b>the</b> <b>overlay</b> <b>network</b> with each node storing several different IDs. From experiments it is shown that Tapestry efficiency increases with network size, so multiple applications sharing the same overlay network increases efficiency. To differentiate between applications a unique application identifier is used.Tapestry uses best-effort to publish and route objects.|$|E
50|$|HyperCast {{introduces}} {{the concept of}} overlay sockets as endpoints of communication, i.e. a node, in an overlay network. A HyperCast overlay network is simply viewed {{as a collection of}} overlay sockets. Each overlay socket has a logical address and a physical address. The logical address is a unique address that identiﬁes the node in <b>the</b> <b>overlay</b> <b>network</b> as well as to route overlay messages among overlay sockets. The physical address of the overlay socket speciﬁes an address in the underlying network where an overlay socket can send and receive messages.|$|E
50|$|The first {{generation}} of peer-to-peer applications, including Napster, Gnutella, had restricting limitations such as a central directory for Napster and scoped broadcast queries for Gnutella limiting scalability. To address these problems a second generation of P2P applications were developed including Tapestry, Chord, Pastry, and CAN. These overlays implement a basic key-based routing mechanism. This allows for deterministic routing of messages and adaptation to node failures in <b>the</b> <b>overlay</b> <b>network.</b> Of the named networks Pastry {{is very close to}} Tapestry as they both adopt the same routing algorithm by Plaxton et al.|$|E
40|$|Abstract Peer-to-peer <b>overlay</b> <b>networks</b> {{have grown}} {{significantly}} {{in size and}} sophistication over the last years. Meanwhile, distributed hash tables (DHT) provide efficient means to create global scale <b>overlay</b> <b>networks</b> on top of which various applications can be built. Although filesharing still is the most prominent example, other applications are well conceivable. In order to rationally design such applications, {{it is important to}} know (and understand) the properties of <b>the</b> <b>overlay</b> <b>networks</b> as seen from the respective application. This paper reports the results from a two week measurement of the entire Overnet network, the currently most widely deployed DHT-based overlay. We describe both, the design choices that made that measurement feasible and the results from the measurement itself. Besides the basic determination of network size, node availability and node distribution, we found unexpected results for <b>the</b> <b>overlay</b> latency distribution. 1 Description of Overnet and Kademli...|$|R
30|$|In {{the context}} of {{communication}} networks, virtualization started {{with the advent of}} the virtual private networks (VPNs) and virtual local area networks (VLANs). However, Peterson et al. [35] proposed to create virtualized networks to overcome traditional Internet protocol (IP) testbed limitations. This led to the emergence of <b>the</b> <b>overlay</b> <b>networks</b> and PlanetLab [36, 37], which is a virtual testbed network over traditional IP networks. Since then, virtualization has been used as a tool to create distributed experimentation environments. The idea is to design by experimenting, or to do experimentally driven research [38 – 42].|$|R
40|$|Abstract—Various <b>overlay</b> <b>networks</b> {{have been}} {{proposed}} and developed to increase flexibility on networks to address issues of the IP <b>network.</b> However, <b>the</b> existing <b>overlay</b> <b>networks</b> have two problems: 1) the topology of existing overlays is essentially full-mesh tunneling topology, 2) dependence of control plane and data plane. The full-mesh tunneling topology cannot enable <b>the</b> <b>overlay</b> routing for performance improvement of networks. The dependence of them causes complication of operations due to <b>the</b> isolation of <b>overlay</b> <b>networks,</b> and increases development costs. To improve the problems, we propose a new abstraction layer provides a common architecture for data planes of overlay net-works that can deploy overlay routing. Based on the architecture, we design and implement a protocol stack, called ovstack. In this paper, we describe the architecture, design and implementation, then evaluate <b>the</b> performance of <b>overlays</b> including ovstack. <b>The</b> ovstack can contribute to construct more flexible <b>overlay</b> <b>networks</b> on <b>the</b> current networks easily. I...|$|R
