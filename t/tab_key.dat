55|24|Public
25|$|Navigation keys or cursor keys {{include a}} variety of keys which move the cursor to {{different}} positions on the screen. Arrow keys are programmed to move the cursor in a specified direction; page scroll keys, such as the Page Up and Page Down keys, scroll the page up and down. The Home key is used to return the cursor {{to the beginning of}} the line where the cursor is located; the End key puts the cursor at the end of the line. The <b>Tab</b> <b>key</b> advances the cursor to the next tab stop.|$|E
2500|$|When a user {{presses the}} <b>tab</b> <b>key</b> within an {{interactive}} command-shell, Bash automatically uses command line completion to match partly typed program names, filenames and variable names. [...] The Bash command-line completion system is very flexible and customizable, {{and is often}} packaged with functions that complete arguments and filenames for specific programs and tasks.|$|E
2500|$|To {{facilitate}} typewriter use {{in business}} settings, a tab (tabulator) key was {{added in the}} late nineteenth century. Before using the key, the operator had to set mechanical [...] "tab stops", pre-designated locations to which the carriage would advance when the <b>tab</b> <b>key</b> was pressed. This facilitated the typing of columns of numbers, freeing the operator from the need to manually position the carriage. The first models had one tab stop and one tab key; later ones allowed as many stops as desired, and sometimes had multiple tab keys, each of which moved the carriage a different number of spaces ahead of the decimal point (the tab stop), to facilitate the typing of columns with numbers of different length ($1.00, $10.00, $100.00, etc.) ...|$|E
5000|$|The {{required}} {{action for}} window changing {{in most of}} the applications is pressing the Ctrl and the <b>Tab</b> <b>keys</b> in a specific order. Operating systems, however, use the Alt and <b>Tab</b> <b>keys</b> for changing windows.|$|R
5000|$|The {{first version}} {{had only a}} 51-key {{keyboard}} and was missing the CLEAR and <b>TAB</b> <b>keys</b> {{as compared to the}} Tandy TRS-80 Model I.|$|R
50|$|Identified by <b>key</b> <b>tab</b> on {{outer ring}} by pin 5.|$|R
2500|$|An {{orthodox}} {{file manager}} typically has three windows. Two {{of the windows}} are called panels and are positioned symmetrically {{at the top of}} the screen. The third is the command line, which is essentially a minimized command (shell) window that can be expanded to full screen. Only one of the panels is active at a given time. The active panel contains the [...] "file cursor". Panels are resizable and can be hidden. Files in the active panel serve as the source of file operations performed by the manager. For example, files can be copied or moved from the active panel to the location represented in the passive panel. This scheme is most effective for systems in which the keyboard is the primary or sole input device. The active panel shows information about the current working directory and the files that it contains. The passive (inactive) panel shows the content of the same or another directory (the default target for file operations). Users may customize the display of columns that show relevant file information. The active panel and passive panel can be switched (often by pressing the <b>tab</b> <b>key).</b>|$|E
5000|$|Providing {{dialog box}} {{management}} (short-cut keys, <b>tab</b> <b>key</b> processing) ...|$|E
5000|$|... // Configure readline to auto-complete paths {{when the}} <b>tab</b> <b>key</b> is hit. rl_bind_key('\t', rl_complete); ...|$|E
50|$|Identified by <b>key</b> <b>tab</b> on {{outer ring}} between pin 3 and 4.|$|R
50|$|A {{terminal}} emulator provided {{as part of}} the Xfce project, but it can be used in other X Window System environments as well. It supports <b>tabs,</b> customizable <b>key</b> bindings, colors, and window sizes. It was designed to replace GNOME Terminal, which depends on the GNOME libraries. Like GNOME Terminal, {{it is based on the}} VTE library.|$|R
50|$|The tab {{mechanism}} {{came into}} its own as a rapid and consistent way of uniformly indenting {{the first line of}} each paragraph, often a first tab stop at 5 or 6 characters was used for this, far larger than the indentation used when typesetting. For numeric data, however, the logical place for the tab stop is the location of the least significant digit. Tabbing to this location and then pressing the backspace key to back up to the position of the first digit is practical but slow. Various schemes for numeric tabs were proposed. For example, in 1903, Harry Dukes and William Clayton filed for a patent on a tab mechanism with multiple <b>tab</b> <b>keys</b> numbered 1, 10, 100, etc. Pressing 1 was a simple tab. Pressing 10 advanced to the space before the tab, pressing 100 advanced to the position 2 spaces before the tab.|$|R
50|$|The {{addition}} of the <b>TAB</b> <b>key</b> to anchor ranges, instead of just using the period key.|$|E
5000|$|... #Caption: The Caps Lock key on a PC {{keyboard}} with US {{keyboard layout}} (near upper-left corner, below the <b>Tab</b> <b>key)</b> ...|$|E
5000|$|... on the [...] "MyClass" [...] type {{to allow}} the {{developer}} to choose the type, after he pressed the <b>tab</b> <b>key,</b> ...|$|E
50|$|Fish {{does the}} autocorrection upon {{completion}} and autosuggestion. The feature {{is therefore not}} in the way when typing out the whole command and pressing enter, whereas extensive use of the <b>tab</b> and right-arrow <b>keys</b> makes the shell mostly case insensitive.|$|R
50|$|A {{drawback}} to older electric action organs was {{the large amount}} of wiring required for operation. With each stop <b>tab</b> and <b>key</b> being wired, the transmission cable could easily contain several hundred wires. The great number of wires required between the keyboards, the banks of relays and the organ itself, with each solenoid requiring its own signal wire, made the situation worse, especially if a wire was broken (this was particularly true with consoles located on lifts and/or turntables), which made tracing the break very difficult.|$|R
25|$|Chassis punches are {{available}} {{in a number of}} shapes, round being the most common. Other shapes include square, hexagonal, and special shapes for thing such as holes with <b>key</b> <b>tabs</b> and D-sub connectors Special shapes often use bolts that are square or keyed and a separate nut on the punch end to ensure alignment of the punch and die.|$|R
5000|$|... on line 3 {{to allow}} the {{developer}} to continue typing {{the rest of the}} code, after he pressed the <b>tab</b> <b>key.</b>|$|E
5000|$|... on the [...] "myClass" [...] {{variable}} {{to allow the}} developer to rename the local variable, after he pressed the <b>tab</b> <b>key,</b> ...|$|E
50|$|<b>Tab</b> <b>key</b> (abbreviation of {{tabulator}} key or tabular key) on {{a keyboard}} {{is used to}} advance the cursor to the next tab stop.|$|E
5000|$|It {{is notable}} that the Enter key {{has moved to}} a half-length [...] "spacebar" [...] {{position}} alongside the spacebar itself. Each is now used by one thumb alone; left for Enter and right for Space. Also, the <b>Tab</b> and Backspace <b>keys</b> are conveniently and centrally located within the array of letters, as are the comma and period.|$|R
40|$|Includes bibliographical {{references}} (pages 163 - 165) This {{thesis is}} the specification {{and design of}} a portable, full-screen text editor (PED). PED has sufficient text capibilities for the most experienced typist and the most particular programmer. The editor also has the flexibility to be installed for use on any terminal with control and escape keys. The editor capibilities include such features as moving text, copying text, deleting text and changing text [...] all {{with the use of}} cursor control and full-screen display. PED allows scanning a file by moving the window up, down, left, or right, and editing a file by typing changes directly onto the text as it appears in the window. The cursor is positioned by the use of the four ???cursor motion??? keys marked with arrows and by the return and <b>tab</b> <b>keys.</b> In addition, PED provides capabilities used by the experienced typist. Such capabilities include setting of left and right margins and setting and clearing tab stops. Consistent with an electronic typewriter interface, PED will have a displayable columnar ???editor ruler??? as a visual reference for performing these functions. PED is designed for portability. This portability is achieved by designing each task of the editor as a seperate module. It is also important that PED's least portable tasks be isolated as seperate modules. Once these dependent tasks have been isolated, their implementation becomes easier. This makes PED more portable, for use on other computers...|$|R
5000|$|Emacs {{uses the}} [...] "minibuffer," [...] {{normally}} the bottommost line, to present status and request information - the functions that would typically {{be performed by}} dialog boxes in most GUIs. The minibuffer holds information such as text to target in a search or {{the name of a}} file to read or save. When applicable, command line completion is available using the <b>tab</b> and space <b>keys.</b>|$|R
50|$|F3, F4 and F5 {{keys are}} used to switch to playback, capture and all view mode, respectively. <b>Tab</b> <b>key</b> toggles the current view mode circularly.|$|E
50|$|Keyboard for Excel is a {{keyboard}} optimised for Microsoft Excel Mobile with a 10-key number layout for fast data entering and a <b>tab</b> <b>key</b> for easier navigation through tabs.|$|E
5000|$|Some symbols {{have no such}} {{representation}} ( [...] for instance). These can be input with <b>tab</b> <b>key.</b> This keyboard-based entry {{differs from}} other formulae editors, that tend to provide point-an-click menus for this task.|$|E
50|$|SciTE {{is highly}} configurable. Although {{there is no}} {{graphical}} preferences window, settings can be altered by editing plain text configuration files. It is possible to have different settings for each language and project, as well as global or per user options. There are menu options in the standard install to open these files in the editor. These allow {{a high level of}} customization over things like shortcut <b>keys,</b> <b>tabbing,</b> code folding, fonts, and syntax highlighting.|$|R
50|$|In combat, {{the player}} {{character}} has two weapon slots. In {{the right hand}} the player wields their bladed weapons such as a cutlass or a two-handed rifle while in the left hand is the secondary item such as a pistol or non-damaging items like throwing sand to blind opponents or trained wildlife. Weapons can be switched quickly or items like health provisions can be used through a separate <b>tab</b> of hot <b>keys</b> on the PC version. Throwing weapons like spears however requiring aiming with both hands.|$|R
25|$|The {{electro-pneumatic}} {{action was}} invented by Robert Hope-Jones, and {{is considered by many}} to be the single most significant development in pipe organs. Up to the turn of the 20th century, all pipe organs were operated by a tracker, tubular pneumatic, or pneumatic Barker-lever action, where the keys and pedals were physically connected to the pipe valves via wooden trackers, except in the case of tubular pneumatic, where all actions were operated by air pressure. Hope-Jones' electro-pneumatic action eliminated this by using wind pressure, controlled by electric solenoids, to operate the pipe valves, and solenoids and pistons to control and operate the various stop <b>tabs,</b> controls, <b>keys</b> and pedals on the console. This action allowed the console to be physically detached from the organ. All signals from the console were transmitted by an electric cable to an electro-pneumatic relay, and from there to the pipes and effects in the organ chambers.|$|R
50|$|In word {{processing}} and text editing the <b>Tab</b> <b>key</b> will often move the insertion {{point to the}} next tab stop in a table, or may insert the ASCII tab character or many space characters.|$|E
50|$|The {{most common}} {{whitespace}} characters may be typed via the space bar or the <b>tab</b> <b>key.</b> Depending on context, a line-break {{generated by the}} return or enter key may be considered white space as well.|$|E
50|$|As volume grew, more {{efficient}} sorting methods were needed. Approaching the 1940s, two popular methods were Sort-A-Matic and Top <b>Tab</b> <b>Key.</b> Sort-A-Matic involved {{a set of}} metal or leather dividers numbered 00 through 99. Checks would be sorted by hand according to the first two digits. The cheques would be removed, and each stack sorted into the same dividers by {{the third and fourth}} digits. The process was iterated until the cheques were completely sorted. Top <b>Tab</b> <b>Key</b> used a physical mechanism: holes were punched in the top of each cheque representing the values of various digits, and metal keys used to physically move them until sorted.|$|E
40|$|Buttons or <b>tabs</b> are {{function}} <b>keys</b> on {{a computer}} screen that are designed to facilitate users' direct manipulations. One increasingly popular application of the button technique in a GIS environment is weighted map overlays for land suitability assessment. Here, buttons are coded with weighting values to indicate maps' importance to their associations. There are, however, a number of flaws in the existing button designs that can affect the quality of land-suitability assessment. In this paper, we first examine two common problems of redundancy and underrepresentation in button design, and then present a button system that is free from these problems. ...|$|R
50|$|Ball games involve {{taking control}} of a ball and scoring it in the {{opposing}} team's goal. Players cannot fire weapons or warp while carrying the ball, and can only carry the ball for a few seconds. Before the ball timer runs out, they must pass the ball to a teammate (using Ins, <b>Tab,</b> or Ctrl <b>keys),</b> or the ball will shoot out from their ship in a random direction. If a player dies while carrying the ball, the ball is dropped immediately and may {{be picked up by}} anyone. A team wins a game when they achieve a certain number of goals, or the game may be timed, with the highest-scoring team winning when time expires.|$|R
40|$|O-linked N-acetylglucosamine (O-GlcNAc) is an {{essential}} and dynamic post-translational modification found on hundreds of nucleocytoplasmic proteins in metazoa. Although a single enzyme, O-GlcNAc transferase (OGT), generates the entire cytosolic O-GlcNAc proteome, it is not understood how it recognizes its protein substrates, targeting {{only a fraction of}} serines/threonines in the metazoan proteome for glycosylation. We describe a trapped complex of human OGT with the C-terminal domain of <b>TAB</b> 1, a <b>key</b> innate immunity-signalling O-GlcNAc protein, revealing extensive interactions with the tetratricopeptide repeats of OGT. Confirmed by mutagenesis, this interaction suggests that glycosylation substrate specificity is achieved by recognition of a degenerate sequon in the active site combined with an extended conformation C-terminal of the O-GlcNAc target site...|$|R
