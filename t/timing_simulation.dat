124|190|Public
40|$|Abstract — Traditional dynamic {{simulation}} {{with standard}} delay format (SDF) back-annotation cannot be reliably performed on large designs. The large size of SDF files makes the event-driven <b>timing</b> <b>simulation</b> extremely slow {{as it has}} to process an excessive number of events. In order to accelerate gate-level <b>timing</b> <b>simulation</b> we propose an automated fast prediction-based gate-level <b>timing</b> <b>simulation</b> that combines static timing analysis (STA) at the block level with dynamic <b>timing</b> <b>simulation</b> at the I/O interfaces. We demonstrate that the proposed <b>timing</b> <b>simulation</b> can be done earlier in the design cycle in parallel with synthesis. Index Terms — Gate-level timing, static timing analysis, dynamic <b>timing</b> <b>simulation,</b> ASIC, Opencores, RTL, Verilog I...|$|E
40|$|Abstract An {{event-driven}} self-adaptive window {{technique for}} processing feedback problem in waveform relaxation based fast <b>timing</b> <b>simulation</b> is presented. A J-K Flip-Flop and several {{different kinds of}} counters are extensively tested to compare its performance with other methods. Also, its application in both switch level <b>timing</b> <b>simulation</b> and analogldigital mixed mode simulation is discussed...|$|E
40|$|We {{present a}} {{methodology}} for generating black-box timing models for full-custom transistor-level CMOS circuits. Our approach utilizes transistor-level ternary symbolic <b>timing</b> <b>simulation</b> {{to explore the}} input arrival time space and determine the input arrival time windows that result in proper operation. This approach integrates symbolic <b>timing</b> <b>simulation</b> into existing static timing analysis flows and allows automated modelling of the timing behavior of aggressive full-custom circuit design styles. ...|$|E
50|$|Design factors {{affecting}} semiconductor reliability include: voltage derating, power derating, current derating, metastability, logic <b>timing</b> margins (logic <b>simulation),</b> <b>timing</b> analysis, temperature derating, and process control.|$|R
40|$|With a modulo-N {{accumulator}} {{and a set}} {{of reference}} waveforms, a new architecture of high-performance digital frequency synthesizer is devised. The reference waveforms with the same frequency but different phases are passed through a multiplexer to obtain the maximal frequency with an incrementer. A Gray encoder is designed to eliminate the glitch problem. The performance of the synthesizer is illustrated via <b>timing</b> <b>simulations</b> with the TSMC 0. 35 µm cell-based process...|$|R
40|$|Abstract. This paper {{presents}} the AAA methodology and its systemlevel CAD software SynDEx, used {{to optimize the}} implementation of distributed embedded real-time applications, and how coupling this software with the scientific software package and the dynamic systems modeler and simulator Scilab/Scicos, allows to provide a seamless flow which improves the design safety, and decreases the development cycle thanks to functional and <b>timing</b> <b>simulations,</b> as well as automatic code generation. ...|$|R
40|$|Abstract. Meeting {{the timing}} {{requirements}} {{is an important}} constraint imposed on highly integrated circuits, and the verification of timing of a circuit before manufacturing {{is one of the}} critical tasks to be solved by CAD tools. In this paper, we present a novel technique to speed up gate-level <b>timing</b> <b>simulation</b> that is based on Structurally Synthesized Binary Decision Diagrams (SSBDD), which have already found application as an efficient mathematical model to represent digital circuits. The new approach uses path delays instead of gate delays for tree-like subcircuits (macros). Therefore timing waveforms are calculated not for all internal nodes of the gate-level circuit, but only for outputs of macros. The macros are represented by SSBDDs, which enable a fast computation of delays for macros. We show that the speed-up of <b>timing</b> <b>simulation</b> is directly proportional to the average size of macros in the circuit. The new approach to speed up the <b>timing</b> <b>simulation</b> is supported by encouraging experimental results. Key words: <b>timing</b> <b>simulation,</b> binary decision diagrams, delay modelling. 1...|$|E
40|$|A unified and {{consistent}} representation of logic gates at logic and circuit levels is described {{based on the}} subcircuit expansion approach. A dynamic-delay model is proposed for gate-level <b>timing</b> <b>simulation,</b> which includes the effects of nonlinear capacitive loading, input transition time, and multiple-input triggering on the delay. It is shown that the approach provides near circuit-level accuracy with gate-level speed and is useful for accurate <b>timing</b> <b>simulation</b> of digital and mixed-signal VLSI circuits...|$|E
40|$|We {{describe}} a polynomial-time algorithm for min-max <b>timing</b> <b>simulation</b> of combinational circuits. Our algorithm reports conservative bounds on the propagationdelays from each primary input to each gate, {{for use in}} the timing verification of fundamental-mode asynchronous circuits. A new reconvergent fanout analysis technique is presented. Our algorithm produces more accurate results than previous polynomial-time (and some exponential-time) algorithms in the presence of reconvergent fanouts. 1. Introduction <b>Timing</b> <b>simulation</b> is an important tool for highperformance asynchronous circuit design. However, statistical variations in IC processing conditions, operating conditions, etc., result in uncertainties in component delays which need to be taken into consideration when verifying timing-dependent circuit behavior, e. g., hazard-detection in asynchronous circuits. <b>Timing</b> <b>simulation</b> that considers component delays to vary within specified intervals and determines upper and lower bounds on [...] ...|$|E
40|$|Abstract. In this paper, {{modular design}} of multiple-axis motion {{controller}} for CNC using field {{programmable gate array}} (FPGA) technology is studied. The complete control system is implemented by dividing system functions into reconfigurable modules, which have been designed and implemented respectively. The <b>timing</b> <b>simulations</b> have been made to validate the feasibility for the modules. As a result, an incorporated experiment was made to check the entire performance of the controller...|$|R
40|$|This paper {{introduces}} {{the area of}} Cyber-Physical Systems (CPS) and describes the relation to Modelica and Modelica-based tools. Special aspects of CPS applications that should make Modelica well suited for their modeling and simulation are highlighted. Recent Modelica developments facilitating integrated model-based system development applicable to CPS are presented. Especially, it is shown how detailed <b>timing</b> <b>simulations,</b> involving both real-time task scheduling and network communication, are realized in Modelica. A robot example is used to demonstrate the new CPS simulation features...|$|R
40|$|FPGAs) {{are capable}} of {{performing}} complex digital signal processing computations with clock rates of above 100 MHz. This, combined with their low cost and ease of use, make them an ideal technology for pulse timing, and are {{a central part of}} our next generation of electronics for our pre-clinical PET scanner systems. To that end, our laboratory has been developing a pulse timing technique that is based on a digital leading edge discriminator to achieve timing resolution well below the sampling period of the analog to digital converter (ADC). We report our results for <b>timing</b> <b>simulations</b> and initial FPGA implementation. 1...|$|R
40|$|Task {{structuring}} is {{the process}} of determining the individual tasks of a system, leading to the system's description as a task graph. This paper shows that RADHA-RATAN, our rate derivation algorithms, can be used to validate various tradeoffs made during task structuring, making this step timing aware. We show how RADHA-RATAN enables construction of a highlevel timing model of the system leading to a process <b>timing</b> <b>simulation</b> of the entire system. An interesting aspect of process <b>timing</b> <b>simulation</b> is that it provides the ability to observe system level timing behavior based on timing requirements and analysis before an implementation of the tasks has been carried out. Based on task structuring and process <b>timing</b> <b>simulation</b> we propose a codesign methodology by which a system designer can gain insight into the system's timing performance. This approach enables the designer to reduce expensive timing driven design iterations. We have implemented this methodology in the RADHA-RATAN framewo [...] ...|$|E
40|$|International audienceThis paper {{presents}} {{a new approach}} to improve the speed of switch-level <b>timing</b> <b>simulation</b> of MOS digital circuits. High performance is achieved by redefining the concept of event within the event-driven selective-trace paradigm. Unlike conventional techniques, in our approach an event occurs on an input slope change rather than a voltage change, thereby, lessening significantly the number of events to be treated during the simulation. The accuracy of this approach is improved by taking into account temporal proximity of multiple input transitions. Experimental results obtained for several circuits show significant speed-up compared to conventional switch-level <b>timing</b> <b>simulation</b> techniques...|$|E
40|$|This paper {{presents}} {{a technique called}} regionwise quadratic (RWQ) modeling that allows highly accurate MOS models, as well as measured I-V data, {{to be used in}} fast <b>timing</b> <b>simulation.</b> This technique signi cantly increases the accuracy of fast <b>timing</b> <b>simulation</b> while maintaining e ciency by permitting analytical solutions of node equations. A fast timing simulator using these RWQ models has been implemented. Several examples of RWQ modeling are provided, and comparisons of simulation results with SPICE 3 are shown to demonstrate accuracy and e-ciency. Speedups of two to three orders of magnitude for circuits containing up to 2000 transistors are observed. ...|$|E
40|$|The {{computation}} of logic-stage delays is {{a fundamental}} sub-problem for many EDA tasks. Although accurate delays can be obtained via circuit simulation, we must estimate the input assignments that will maximize the delay. With conventional methods, it is not feasible to estimate the delay for all input assignments on large sub-networks, so previous approaches have relied on heuristics. We present a symbolic algorithm that enables efficient computation of the Elmore delay under all input assignments and delay refinement using circuit-simulation. We analyze the Elmore estimate with three metrics using data extracted from symbolic <b>timing</b> <b>simulations</b> of industrial circuits. 1...|$|R
40|$|Analysis of Elmore {{delay in}} {{distributed}} RC tree structures shows {{the influence of}} both tree cost and tree radius on signal delay in VLSI interconnects. We give new and efficient interconnection tree constructions that smoothly combine the minimum cost and the minimum radius objectives, by combining respectively optimal algorithms due to Prim and Dijkstra. Previous "shallow-light" techniques [2, 3, 8, 13] are both less direct and less effective: in practice, our methods achieve uniformly superior cost-radius tradeoffs. Detailed <b>timing</b> <b>simulations</b> {{for a range of}} IC and MCM interconnect technologies show that our wirelength savings yield reduced signal delays when compared to shallow-light or standard minimum spanning tree and Steiner tree routing...|$|R
40|$|A {{symbolic}} waveform simulator {{is proposed}} in this report. The delay of a faulty element {{is treated as}} a variable in the generation of the output waveform. Therefore, many <b>timing</b> <b>simulations</b> with different delay values {{do not have to}} be done to analyze the behavior of the circuit-under-test with the timing fault. The motivation for this work was to investigate delay testing by Output Waveform Analysis, where an accurate representation of the actual waveforms is required, although the simulator can be used for other applications as well (such as power analysis). Output Waveform Analysis will be briefly reviewed, followed by a description of both a simplified and a complete implementation of the waveform simulator, and simulation results...|$|R
40|$|Abstract – Meeting timing {{requirements}} is {{an important}} constraint imposed on highly integrated circuits, and the verification of timing of a circuit before manufacturing {{is one of the}} critical tasks to be solved by CAD tools. In this paper, a new approach and the implementation of several algorithms to speed up gate-level <b>timing</b> <b>simulation</b> are proposed where, instead of gate delays, path delays for tree-like subcircuits (macros) are used. Therefore timing waveforms are calculated not for all internal nodes of the gate-level circuit but only for outputs of macros. The macros are represented by structurally synthesized binary decision diagrams (SSBDD) which enable a fast computation of delays for macros. The new approach to speed up the <b>timing</b> <b>simulation</b> is supported by encouraging experimental results. 1...|$|E
40|$|The {{high speed}} and {{faithfulness}} of state–of–the–art Virtual Machines (VMs) make them the ideal front-end {{for a system}} simulation framework. However, VMs only emulate the functional behavior and just provide the minimal timing for the system to run correctly. In a simulation framework supporting the exploration of different configurations, a timing backend is still necessary to accurately determine {{the performance of the}} simulated target. As it has been extensively researched, sampling is an excellent approach for fast <b>timing</b> <b>simulation.</b> However, existing sampling mechanisms require capturing information for every instruction and memory access. Hence, coupling a standard sampling technique to a VM implies disabling most of the “tricks ” used by a VM to accelerate execution, such as the caching and linking of dynamically compiled code. Without code caching, the performance of a VM is severely impacted. In this paper we present a novel dynamic sampling mechanism that overcomes this problem and enables the use of VMs for <b>timing</b> <b>simulation.</b> By making use of the internal information collected by the VM during functional simulation, we can quickly assess important characteristics of the simulated applications (such as phase changes), and activate or deactivate the <b>timing</b> <b>simulation</b> accordingly. This allows us to run unmodified OS and applications over emulated hardware at near-native speed, yet providing a way to insert timing measurements that yield a final accuracy similar to state–of–the–art sampling methods. 1...|$|E
40|$|Abstract- To {{determine}} {{the quality of}} gate delay tests, Min/Max delay fault simulation must {{determine the}} detectable sizes of faults. In conventional Min/Max <b>timing</b> <b>simulation,</b> correlations at the inputs of reconvergent gates are ignored. This paper shows how correlation information can be used when fanouts reconverge to produce more accurate results. 1...|$|E
40|$|We propose an {{approach}} for timing analysis of software-based embedded computer systems that {{builds on the}} established probabilistic framework of Bayesian networks. We envision {{an approach}} where we take (1) an abstract description of the control flow within a piece of software, and (2) a set of run-time traces, which are combined into a Bayesian network {{that can be seen}} as an interactive timing profile. The obtained profile can be used by the embedded systems engineer not only to obtain a probabilistic estimate of the WCET, but also to run interactive <b>timing</b> <b>simulations,</b> or to automatically identify software configurations that are likely to evoke noteworthy timing behavior, like, e. g., high variances of execution times, and which are therefore candidates for further inspection...|$|R
40|$|OFDM is a multi carrier {{modulation}} technique {{in which the}} carriers are Orthogonal to each others {{as a result of}} which it provides high bandwidth efficiency and multiple carriers share the data among themselves. This paper describes the design and implementation of Enhanced Core Processing Blocks of OFDM Transmitter and Receiver i. e. the FFT and IFFT Blocks that can be easily ported to an FPGA or an ASIC. The methodology used is the 8 -point IFFT/FFT DIF with radix- 2. The design unit consists of a common pass module and multiple path modules for which the <b>timing</b> <b>simulations</b> have been generated using Altera Max plus II. Finally the performance analysis of the implemented system has been done by comparisons with MATLAB Simulations...|$|R
5000|$|In <b>timing</b> based circuit <b>simulation.</b> The data {{is divided}} among {{different}} sub-circuits and parallelism is achieved with orchestration from the tasks.|$|R
40|$|A unified and {{consistent}} representation of logic gates at logic and circuit levels is described {{based on the}} subcircuit expansion approach. A dynamic-delay model is proposed for gate-level <b>timing</b> <b>simulation,</b> which includes the effects of nonlinear capacitive loading, input transition time, and multiple-input triggering on the delay. It is shown that the approach provides near circuit-level accuracy with gate-level speed and is useful for accurate <b>timing</b> <b>simulation</b> of digital and mixed-signal VLSI circuits. Keywords: Multi-level digital-/mixed-signal simulation, circuit partition, dynamic delay 1. Introduction An emerging area of growth, in the overall chip market, is for mixed-signal application-specific integrated circuits (ASIC's). A new generation of mixed-mode simulators has evolved to apply different algorithms to different circuit blocks. However, {{most of them are}} either "glued" (two simulators running concurrently) or "explicit" (the designer must specify which componen [...] ...|$|E
40|$|Abstract. In this paper, {{a special}} {{communication}} conversion system from parallel to serial is implemented by FPGA (Field Programable Gate Array). The designs of the structure, the hardware and the software {{are described in}} detail. And {{the performance of the}} designed system is testified by both <b>timing</b> <b>simulation</b> and experiment, which prove the design to be simple and reliable...|$|E
40|$|This paper {{presents}} {{a course on}} digital design with programmable logic devices (PLDs) which has been held at the University of Hamburg. In this course, the students design several digital circuits of given functionality using AHDL and Alteras MAX+plusII development tool on SUN workstation. For design validation, the VHDL-simulator vhdlsim from Synopsys is used in combination with a tool-set we developped in preparation of the course. This tool-set supports two types of simulation: <b>timing</b> <b>simulation</b> and functional simulation. For <b>timing</b> <b>simulation,</b> the VHDL netlist written by the MAX+plusII compiler is embedded in a testbench ready-to-use with the Synopsys VHDL simulator. For functional simulation, the VHDL model embedded in this testbench is generated directly from the AHDL description, preserving the design hierarchy {{as well as all}} symbolic names for instances, signals and machine states as given by the user. 1 Introduction The programs as described in this paper have been developped [...] ...|$|E
40|$|Abstract — Architecture {{simulation}} for GPGPU kernels {{can take}} {{a significant amount of}} time, especially for large-scale GPGPU kernels. This paper presents TBPoint, an infrastruc-ture based on profiling-based sampling for GPGPU kernels to reduce the cycle-level simulation time. Compared to existing approaches, TBPoint provides a flexible and architecture-independent way to take samples. For the evaluated 12 kernels, the geometric means of sampling errors of TBPoint, Ideal-Simpoint, and random sampling are 0. 47 %, 1. 74 %, and 7. 95 %, respectively, while the geometric means of the total sample size of TBPoint, Ideal-Simpoint, and random sampling are 2. 6 %, 5. 4 %, and 10 %, respectively. TBPoint narrows the speed gap between hardware and GPGPU simulators, enabling more and more large-scale GPGPU kernels to be analyzed using detailed <b>timing</b> <b>simulations.</b> I...|$|R
40|$|An {{interface}} {{technique for}} design {{and analysis of}} digital circuit has been devised and described in this study. Basically logic circuits are of two types, one combinational circuit and other is sequential circuit. Logic simulation usually means finding the transient response {{to a set of}} time-varying inputs. Simulation follows functional or behavioral level design. Behavioural simulation describes logic function and <b>timing.</b> Functional <b>simulation</b> describes the logic function of a system only but ignores the <b>timing.</b> A <b>simulation</b> program for giving output of digital logic circuits is available now-a-days. But, an approach taken here describes an efficient way to analyze both combinational and sequential circuit. To do this an algorithm has been developed. Finally, a program is coded in Turbo C language and tested for test cases to analyze and give output to that logic circuit...|$|R
40|$|We present critical-sink {{routing tree}} (CSRT) constructions which yield {{high-performance}} routing trees by exploiting the critical-path {{information that may}} be available during timing-driven layout. Motivated by analysis of the Elmore delay formula, we propose the CS-Steiner class of heuristics and a "Global Slack Removal" algorithm; these modify traditional Steiner tree constructions to optimize signal delay at identified critical sinks. Extensive <b>timing</b> <b>simulations,</b> using industry IC and MCM technology parameters and a fast simulator based on a 2 -pole distributed RCL delay approximation [29], show that this simple approach affords very significant improvements over existing "performance-driven" routing tree constructions. Next, we observe that all existing routing tree objectives (e. g., minimum-cost Steiner [16] or bounded-radius [5]) are heuristic abstractions of the linear or Elmore delay models. We therefore propose {{a new class of}} efficient Elmore routing tree (ERT) constru [...] ...|$|R
40|$|A good {{verification}} strategy {{should bring}} near the simulation and real functioning environments. In this paper we describe a system-level co-verification strategy {{that uses a}} common flow for functional simulation, <b>timing</b> <b>simulation</b> and functional debug. This last step {{requires the use of}} a BST infrastructure, now widely available on commercial devices, specially on programmable devices with medium / large pin-counts...|$|E
40|$|Abstract. Application of the Internet {{of things}} {{technology}} in intelligent traffic control field {{will improve the}} intelligent traffic control level {{and the level of}} information service. FPGA design consists of design input, comprehensive, functional simulation (simulation), design, <b>timing</b> <b>simulation</b> (simulation), configuration of six steps. The paper presents application of microcontroller FPGA technology in designing intelligent transportation system Internet of things. Experimental result...|$|E
40|$|This paper gives {{a design}} of {{real-time}} Histogram Equalization circuit for enhancement of images using Field Programmable Gate Arrays (FPGAs). This design {{makes use of}} counters {{in conjunction with a}} special decoder designed to compute the histogram statistics and equalization in parallel. The proposed system is fast, simple, and flexible with reasonable development cost. <b>Timing</b> <b>simulation</b> of the proposed system is verified using Altera software package (Quartus) ...|$|E
40|$|A technique, {{utilized}} on the Space Telescope Program, {{and used}} for testing satellite attitude pointing and control systems during the engineering and development phases is presented. The technique verifies the hardware models used in design phase computer simulations, verifies the interface between the flight hardware and flight software, and uncovers hardware/software switching or mode logic problems. The testing is accomplished in two phases: a dynamic hardware simulator phase using hardware electronic simulators and an electronic vehicle motion simulator; and a second real hardware phase utilizing engineering model gyros and reaction wheels on an airbearing table. Both phases use an engineering model of the flight computer, flight algorithms and software, and a breadboard data management and computer hardware interface for <b>timing</b> <b>simulations.</b> The purpose of each test and the test phases are described, and examples of closed loop test results for both attitude hold and maneuvering models are given...|$|R
40|$|We present critical-sink {{routing tree}} (CSRT) constructions which exploit {{available}} critical-path information to yield high-performance routing trees. Our CS-Steiner and "Global Slack Removal" algorithms together modify traditional Steiner tree constructions to optimize signal delay at identified critical sinks. We further propose an iterative Elmore routing tree (ERT) construction which optimizes Elmore delay directly, {{as opposed to}} heuristically abstracting linear or Elmore delay as in previous approaches. Extensive <b>timing</b> <b>simulations</b> on industry IC and MCM interconnect parameters show that our methods yield trees that significantly improve (by averages of up to 67 %) over minimum Steiner routings in terms of delays to identified critical sinks. ERTs also serve as generic high-performance routing trees when no critical sink is specified: for 8 -sink nets in standard IC (MCM) technology, we improve average sink delay by 19 % (62 %) and maximum sink delay by 22 % (52 %) over the mini [...] ...|$|R
40|$|In the past, Field Programmable Gate Array (FPGA) {{circuits}} only {{contained a}} limited amount of logic and operated at a low frequency, but during last decade there has been a tremendous advancement in the fields of FPGAs circuits. Today FPGA are very fast, high density, and low power, suitable for implementing any kind of application. Bidirectional scanning is one of the novel techniques used in television to avoid the retrace or fly back period of the electron beam. This saves power consumed by the beam during retrace period. RTL using Very High Speed Integrated Hardware Description Language (VHDL) is used to implement bidirectional scanning in FPGA. The functional and <b>timing</b> <b>simulations</b> of design are verified using Modelsim Simulator. Integrated software environment (ISE) from Xilinx is used to generate net-list from RTL code. The power consumption of the design is calculated using Xilinx power calculator...|$|R
