11|80|Public
50|$|Explicit {{support for}} <b>top-down</b> <b>programming.</b>|$|E
50|$|In {{order to}} support a <b>top-down</b> <b>programming</b> style ALGOL 68RS {{provided}} the here and context facilities.|$|E
50|$|Computer {{animator}} Craig Reynolds similarly used three {{simple rules}} to create recognizable flocking behaviour {{in a computer}} program in 1987 to animate groups of boids. With no <b>top-down</b> <b>programming</b> at all, the boids produced lifelike solutions to evading obstacles placed in their path. Computer animation has {{continued to be a}} key commercial driver of alife research as the creators of movies attempt to find more realistic and inexpensive ways to animate natural forms such as plant life, animal movement, hair growth, and complicated organic textures.|$|E
40|$|Language {{supports}} {{design and}} documentation of complex software. Included are: design and documentation language for expressing design concepts; processor that produces intelligble documentation based on design specifications; and methodology for using language and processor to create well-structured <b>top-down</b> <b>programs</b> and documentation. Processor {{is written in}} SIMSCRIPT 11. 5 programming language for use on UNIVAC, IBM, and CDC machines...|$|R
40|$|This paper studies <b>top-down</b> <b>program</b> {{development}} {{techniques for}} BulkSynchronous Parallelism. In that context a specification formalism Logs, for `the Logic of Global Synchrony', {{has been proposed}} for the specification and high-level development of BSP designs. This paper extends the use of Logs to provide support {{for the protection of}} local variables in BSP programs, thus completing the link between specifications and programs...|$|R
30|$|Ironically, many of Xi’s {{policies}} look increasingly {{similar to}} Putin’s. Russia under Vladimir Putin remains excessively focused on control and promoting the state sector. There {{has been far}} less learning. Bottom-up development is not only more effective, but also less expensive than <b>top-down</b> <b>programs.</b> Large state programs invite corruption, and failure entails high costs. Small, bottom-up projects may have a high failure rate, but the costs of any individual failure are far less.|$|R
50|$|Top-down {{design was}} {{promoted}} in the 1970s by IBM researchers Harlan Mills and Niklaus Wirth. Mills developed structured programming concepts for practical use and tested {{them in a}} 1969 project to automate the New York Times morgue index. The engineering and management success of this project led {{to the spread of}} the top-down approach through IBM {{and the rest of the}} computer industry. Among other achievements, Niklaus Wirth, the developer of Pascal programming language, wrote the influential paper Program Development by Stepwise Refinement. Since Niklaus Wirth went on to develop languages such as Modula and Oberon (where one could define a module before knowing about the entire program specification), one can infer that <b>top-down</b> <b>programming</b> was not strictly what he promoted. Top-down methods were favored in software engineering until the late 1980s, and object-oriented programming assisted in demonstrating the idea that both aspects of top-down and bottom-up programming could be utilized.|$|E
40|$|Taking the {{programming}} paradigm with the cycle invariant {{as a base}} notion there for a ground cycle paradigm, in a more general setting here these things are considered. Epistemological aspects with reference to Rene Descartes methods of reasoning are considered. Particularly analogy between Descartes method of specification and <b>top-down</b> <b>programming</b> is considered. A general principle of reconstruction in epistemology is suggested and discussed, firstly specifying it within programming and then trying it to generalize to whatever else. Submitted as a paper in philosophy for doctoral studies...|$|E
40|$|<b>Top-down</b> <b>programming</b> is {{procedural}} programming style, which design begins by defining the solution {{at the highest}} level of functionality and breaking it down further and further into small routines that can be easily documented and coded. The main aim of this paper is a revisiting of the generic top down programming approach in solving and implementation of an efficient algorithm. we went into these research because programming is traditionally taught using bottom up approach where details of syntax and implementation of data structure are the predominant concept. The top down approach proposed focuses instead on understanding the abstractions represented by the classical data structures without regard to their physical implementation. This paper discusses the benefits of this approach and how it is used in an object oriented world...|$|E
50|$|It was {{de facto}} a <b>top-down</b> reform <b>program</b> that {{required}} a handful of most influential high-ranking political figures of Vietnam in mid-1980s.|$|R
40|$|Fortran {{continues}} to be taught as a first programming language in many engineering curriculums. Two teaching approaches are predominant: the conventional approach and the preprocessor approach. The latter introduces the concepts of structured programming by using an augmented version of Fortran which is translated into standard Fortran IV by a special preprocessor program. A third approach has been successfully used at the University of Santa Clara. It emphasizes the inherent block structure of the subprogram facility of standard Fortran {{as the key to}} <b>top-down</b> <b>program</b> implementation...|$|R
40|$|Understanding {{packages}} is {{an important}} activity in the reengineering of large object-oriented systems. The relationships between packages and their contained classes can affect the cost of modifying the system. The main problem of this task is to quickly grasp {{the structure of a}} package and how it interacts {{with the rest of the}} system. In this paper we present a <b>top-down</b> <b>program</b> comprehension strategy based on polymetric views, radar charts, and software metrics. We illustrate this approach on two applications and show how we can retrieve the important characteristics of packages...|$|R
40|$|The Hindley/Milner {{polymorphic}} type {{system has}} been adopted in many programming languages because it provides the convenience of programming languages like Lisp along with the correctness guarantees that come with static type-checking. However, programming environments for such languages are still not as flexible as those for Lisp. In particular, the style of incremental, top-down program development possible in Lisp is precluded because the type inference system is usually formulated as a "batch system" that must examine definitions before their uses. This may require {{large parts of the}} program to be recompiled when a small editing change is performed. In this paper, we attempt {{to strike a balance between}} the apparently conflicting goals of incremental, <b>top-down</b> <b>programming</b> flexibility and static type-checking. We present an incremental typing mechanism in which top-level phrases can be compiled one by one, in any order, and repeatedly (due to editing). We show that the incremental ty [...] ...|$|E
40|$|AbstractAccording to the European Commission, Europe {{spent some}} € 6 bn (US$ 7 bn) on space last year, with 90 % {{of this on}} {{civilian}} programmes, whereas the United States spent $ 36 bn, split equally between civil and military spending. However, Europe spends less than $ 1 bn yearly on space science. The shifting of responsibility for space to a European level will ultimately benefit science, as present funding is too fragmented. Integration of space within military, environmental and other EU policy sectors {{will result in a}} funding boost for space research, it is predicted. But in changing the system, scientists are concerned that the European Commission may usurp ESA in running the science. Scientist like ESA’s bottom-up approach with its track record of backing investigator-driven proposals based on scientific excellence, but they are very wary of the commission’s legendary bureaucracy and <b>top-down</b> <b>programming</b> of research areas. This is a short news story only. Visit www. three-fives. com for the latest advanced semiconductor industry news...|$|E
40|$|We {{compare the}} {{structural}} complexity of various classes of structured programs. To achieve this we concentrate on a notion called “reducibility”. Loosely speaking, given {{two classes of}} programs C 1 and C 2, we say that C 1 is reducible to C 2 (C 1 ≤wC 2) {{if and only if}} for every program P in C 1, there is a program in C 2 that computes the same function as P and uses the same primitive actions and predicates as P. If C 1 is reducible to C 2, but C 2 is not reducible to C 1, then we say that C 1 <wC 2. We explore this notion of reducibility for several classes of programs. These include: D-charts and BJn-charts, which are programs based on the DO-WHILE construct, a familiar construct in the literature on structured programs; REn-charts, GREn-charts and DREn-charts, which are programs constructed using a continuously repeating block of code with exit statements, similar to the REPEAT-EXIT construct of BLISS; TDn-charts, which are programs based on control structures arising from <b>top-down</b> <b>programming.</b> Several results on these classes of programs are proved here. These results includeo(a) BJn-charts <w BJn+ 1 -charts, and ∪n≥ 1 BJn-charts <w RE 1 -charts;(b) REn-charts <w REn+ 1 -charts, GREn-charts <w GREn+ 1 -charts, DREn-charts <w GREn+ 2 -charts;(c) TDn-charts ≤w RE 3 n-charts. In addition, it is shown that an arbitrary program P is reducible to a D-chart if and only if P does not contain a loop with two distinct exits. The paper concludes by suggesting various open problems...|$|E
40|$|The {{purpose of}} this paper is to examine and {{evaluate}} the top-down and bottom-up leadership development programs focused on human capital that improve the performance of a company. This study reports on the external <b>top-down</b> leadership development <b>program</b> supported by a consulting company and the internal participatory action research of the bottom-up program. The sickness rate and the lost time incident failure rate decreased and the ideas produced for cost savings improved, leading to increased earnings during the <b>top-down</b> <b>program.</b> The estimated cost savings potential of the bottom-up program was 3. 8 million euro based on the cost savings of meeting habits, maintenance practices and the way of working in production. The results of this study are useful for those who plan and evaluate leadership development and human capital productivity consultation programs to improve the performance of a company...|$|R
50|$|Both {{top-down}} and bottom-up approaches {{exist in}} public health. There are {{many examples of}} <b>top-down</b> <b>programs,</b> often run by governments or large inter-governmental organizations (IGOs); {{many of these are}} disease-specific or issue-specific, such as HIV control or Smallpox Eradication. Examples of bottom-up programs include many small NGOs set up to improve local access to healthcare. However, a lot of programs seek to combine both approaches; for instance, guinea worm eradication, a single-disease international program currently run by the Carter Center has involved the training of many local volunteers, boosting bottom-up capacity, as have international programs for hygiene, sanitation, and access to primary health-care.|$|R
40|$|This study {{assesses the}} {{potential}} cost-effectiveness of incentive payment programs relative to traditional <b>top-down</b> regulatory <b>programs</b> for biological conservation. We develop site-level {{estimates of the}} opportunity cost and the nonmonetized biological benefits of protecting biodiversity hotspots in Finnish nonindustrial private forests. We then use these estimates to compare and contrast the cost-effectiveness of alternative conservation programs. Our results suggest that incentive payment programs, which tacitly capitalize on landowners’ private knowledge about the opportunity costs of conservation, may be considerably more cost-effective than traditional <b>top-down</b> regulatory <b>programs.</b> biodiversity conservation, incentive payments, cost-effectiveness, opportunity cost, biological benefits, non-industrial private forests...|$|R
40|$|A Master's Thesis. Submitted in partial {{fulfillment}} of the requirements for the award of Master of Philosophy of Loughborough University. A course was designed to teach <b>Top-Down</b> <b>programming</b> to second level students who had no previous computer experience. The purposes of the course were a) {{to enable them to}} become computer literate and b) to develop their problem-solving ability. The course was designed to teach programming in a manner which was independent of any particular programming language or machine. This approach was prompted by dissatisfaction with traditional courses which generally concentrate on the syntax and semantics of a particular programming language, at the expense of developing important underlying concepts. Initially, a review of the history of programming languages was carried out to identify the essential elements of programming. This review found that there was general agreement about the fundamental importance of structure and that it was not necessary to use all of the control constructs contained in the available languages (BASIC, COMAL and PASCAL). Both a mini-language; containing just two control structures, and a diagrammatic representation (structure diagrams) of the mini-language were then designed. The chosen control structures were IF/THEN/ELIF/ELSE for selection and a WHILE loop for iteration. The students were trained to solve problems using the mini-language and structure diagrams and were supplied with translation rules to convert their solutions into COMAL. Translation rules were also drawn up for PASCAL and BASIC. The course was tested with girls aged 15 and 16 years in a Dublin secondary school. These trials showed that the method may be used successfully with students of this age...|$|E
40|$|The main {{theme of}} this thesis is the contradiction between {{discourse}} and practice in health promotion. Many health promoters continue to exert power-over the community through <b>top-down</b> <b>programming</b> whilst {{at the same time}} using an emancipatory discourse. The thesis has addressed this contradiction in three parts. The first part determines how the emancipatroty discourse has evolved and eplores the role of social movements in the development of contemporary health discourses and their influence on the legitimisation of empowerment. Central to this discourse is the empowerment of communities. To understand the role of this concept the thesis provides an interpretation of the different meanings of power and community, and the different levels of analysis of empowerment in the context of health promotion programming. The second part identifies the nature of health programming and the dominance of top-down, and to a much lesser extent, bottom-up approaches. The thesis argues that these two approaches are not, and do not have to be, mutually exclusive. To address this issue the thesis presents a new methodology is situated within a framework developed for the accomodation of empowerment goals within health promotion programmes. The study also identifies the organisational areas of influence on the processs of community empowerment and it is these which are used for the assessment of this concept. Both the framework and the methodology address the contradiction in health promotion by making community empowerment operational within a programme context. The third part of the thesis supports the rationale for the design of the methodology with field work in rural Fijian communities. The findings are presented as a composite case study to highlight the experiences of implementing the methodolgy and the main themes that emerged during the field work. the final chapter of the thesis brings together the central themes of the study and draws from these and 2 ̆ 7 emergent agenda 2 ̆ 7 as a way forward for health promotion research and practice...|$|E
40|$|Graduation date: 2009 In Prek Toal, a poor {{subsistence}} fishing village on Cambodia’s Tonle Sap Lake, the conservation organization Osmose is using ecotourism revenues to finance poverty intervention programs and promote conservation in a threatened ecosystem. This thesis examines local perceptions of tourism {{as a measure}} of Osmose’s success. Limited awareness of tourism and conservation stems from abject poverty and limited opportunities for direct participation in Osmose’s <b>top-down</b> <b>program.</b> Corrupt resource management and a degrading ecosystem threaten economy and life in Prek Toal. This case study illustrates the link between community participation in tourism planning, facilitating a local conservation ethic, and empowering local efforts to fight corruption...|$|R
50|$|Earley's {{algorithm}} is a <b>top-down</b> dynamic <b>programming</b> algorithm. In the following, we use Earley's dot notation: given a production X → αβ, the notation X → α • β represents {{a condition in}} which α has already been parsed and β is expected.|$|R
5000|$|... and [...] {{are useful}} for a <b>top-down</b> style of <b>programming,</b> in {{contrast}} to the bottom-up style implied by traditional library mechanisms.|$|R
40|$|This paper reviews {{numerous}} theoretical {{results on}} control structures and demonstrates their practical examples. This study {{deals with the}} design of run-time support routines by using <b>top-down</b> structured <b>programming</b> technique. A number of examples are given as illustration of this method. In conclusion, structured programming {{has proved to be}} an important methodology for systematic program design and development...|$|R
40|$|To specify and verify {{distributed}} real-time systems, classical Hoare triples are extended with timing primitives and {{the interpretation}} {{is modified to}} be able to specify non-terminating computations. For these modified triples a compositional proof system has been formulated. Compositionality supports <b>top-down</b> <b>program</b> derivation, and by using a dense time domain also hybrid systems with continuous components can be designed. This is illustrated by a process control example of a water level monitoring system. First we prove the correctness of a control strategy in terms of a continuous interface. Next, to obtain a discrete interface, a sensor and an actuator are introduced. Using their specifications only, a suitable specification of the control unit is derived. This reduces the design of the system to the conventional problem of deriving a program according to its specification. Finally the control unit is extended, in a modular way, with error detection features...|$|R
40|$|Data Types E. Marakakis and J. P. Gallagher Department of Computer Science, University of Bristol Queen's Building, University Walk, Bristol BS 8 1 TR, U. K. e-mail: manolis@compsci. bristol. ac. uk, john@compsci. bristol. ac. uk Abstract. This paper {{presents}} {{a set of}} schemata that support stepwise top-down design of logic programs using abstract data types (ADTs). There are thus three main components to this approach: <b>top-down</b> design, <b>program</b> schemata and ADTs, {{all of which are}} already well established notions. Our aim is to combine these ideas in a framework, amenable to support by design tools and allowing the use of existing logic program transformation techniques to optimise the final programs. 1 Introduction and Motivation This paper {{presents a}} set of schemata that support stepwise top-down design of logic programs using abstract data types (ADTs). There are thus three main components to this approach: <b>top-down</b> design, <b>program</b> schemata and ADTs, all of which are already well-established [...] ...|$|R
50|$|Like CRM, MRM {{training}} emphasizes a team {{approach to}} human error reduction using principles {{that seek to}} improve communications, situational awareness, problem solving, decision making, and teamwork. Unlike traditional coercive and hierarchical <b>top-down</b> safety <b>programs,</b> MRM advocates a decentralized, human-centric approach to safety. MRM encourages work teams to communicate vital operational risk and safety information directly and informally, regardless of rank or position, thus permitting rapid response to prevent impending crises.|$|R
40|$|An interactive, <b>top-down</b> {{structured}} <b>program</b> {{design is}} described which produces a general flexible description of totally automatic photometry of emission spectra in an operating {{environment in which}} sample compositions and analysis procedures are low-volume and nonroutine. The use {{of this type of}} programming is illustrated by a project to computerize trace elemental determinations including the automated reading of spectrographic plates produced by a 3. 4 -m Ebert mount spectrograph using a dc-arc in an argon atmosphere...|$|R
40|$|Inner city {{areas are}} often {{significantly}} “under-stored ” (Loukaitou-Sideris 2000), with inadequate opportunities for residents to shop near their homes. More residents are tran-sit dependent in inner cities {{than in the}} general metro area, making them even more con-strained to local choices. But which types of establishments are needed in which locations? Given their isolation from the economic mainstream, marginalized communi-ties may be the least able to provide information regarding development possibilities. Yet they would also be likely to benefit substantially from such knowledge, given that inner city markets {{are the focus of}} less attention than those of economically successful communities. This paper develops methods to bridge this informational gap. Such gaps produce particularly regressive forms of market failure, where economic isolation and stagnation reinforce each other. Business opportunities are likely to exist in the inner city, but pri-vate capital’s focus needs to be reoriented to such possibilities. Public entities may help more by analyzing and providing information than by organizing and implementing <b>top-down</b> <b>programs.</b> Universities may be particularly well suited to bridging informa-tional gaps (Weiler 2000 a). In that spirit, this study represents a further effort in con...|$|R
5000|$|Gordon debated Andrew Morriss, {{one of the}} co-authors of The False Promise of Green Energy, at the Cato Institute on April 21, 2011. [...] Morriss {{argued that}} having <b>top-down</b> {{governmental}} <b>programs</b> manage green energy and green jobs was a flawed concept, driven by misguided economic thinking and bad data. Gordon countered Morriss’ assertions with arguments that the data actually shows otherwise: that government programs (versus free market, competitive forces) have generated new jobs and transformed existing jobs and economic forces.|$|R
40|$|New {{design and}} {{programming}} techniques for shuttle software. Based on previous Apollo experience, recommendations {{are made to}} apply <b>top-down</b> structured <b>programming</b> techniques to shuttle software. New software verification techniques for large software systems are recommended. HAL, the higher order language selected for the shuttle flight code, is discussed and found to be adequate for implementing these techniques. Recommendations are made to apply the workable combination of top-down, bottom-up methods {{in the management of}} shuttle software. Program structuring is discussed relevant to both programming and management techniques...|$|R
40|$|The {{state is}} often {{conceptualized}} as playing an enabling role for economic development, providing public goods, {{such as the}} legal protection of property rights, with {{the political economy of}} reform conceived in terms of bargaining among elites or special interest groups. We document a case which turns this perspective on its head: efficiency-enhancing institutional and behavioral changes arising, not out of a conscious, <b>top-down</b> <b>program</b> of reform, but rather as unintended (and in some respects, unwanted) by-products of state failure. Responses from a survey of North Korean refugees demonstrate that the economy marketized in response to state failure with the onset of famine in the 1990 s and subsequent reforms and retrenchments appear to have had remarkably little impact on at least some significant share of the population. There is strong evidence, however, of powerful social changes, including increasing inequality, corruption, and changed attitudes about the most effective pathways to higher social status and income. These assessments appear to be remarkably uniform across demographic groups. While the survey sample marginally over-weights demographic groups with less favorable assessments of the regime, even counterfactually re-calibrating the sample to match the underlying resident population suggests widespread dissatisfaction with the North Korean regime. Failed states Transition Reform North Korea Refugees...|$|R
40|$|The paper {{describes}} a system supporting production and verification of programs in a structured programming environment. The system {{is based on}} a logical formalism for describing the semantics of the employed programming language and of programs. An interpreter of the formalism is provided which on one hand allows the execution of partially specified programs {{and on the other hand}} is able to prove properties of programs. Thus, at any level of the <b>top-down</b> development, <b>programs</b> can be executed and proved correct. An example of program development is given and discussed...|$|R
50|$|One simple {{solution}} is called memoization: {{each time we}} compute the minimum cost needed to multiply out a specific subsequence, we save it. If we are ever asked to compute it again, we simply give the saved answer, and do not recompute it. Since there are about n2/2 different subsequences, where n {{is the number of}} matrices, the space required to do this is reasonable. It can be shown that this simple trick brings the runtime down to O(n3) from O(2n), which is more than efficient enough for real applications. This is <b>top-down</b> dynamic <b>programming.</b>|$|R
5000|$|Recep Tayyip Erdoğan, a {{conservative}} Turkish politician who {{has held the}} posts of President and Prime Minister, has promoted ayran as a national drink. Speaking at a 2013 WHO Global Alcohol Policy Conference held in İstanbul, Erdoğan contrasted ayran with alcohol, which he claimed was a recent introduction to Turkey. Stating {{that in the early}} years of the modern Turkish republic (c. 1920-1950), alcoholic beverages were [...] "part of the radical <b>top-down</b> modernization <b>program</b> embarked upon by the elites," [...] Erdoğan claimed alcohol was widely promoted during this period even in school textbooks.|$|R
30|$|In this paper, we {{investigate}} {{an approach to}} institutional change that aims to establish open educational practices (OEP) in a university and inculcate the use of open education resources (OER) {{as part of its}} curriculum work and teaching practice. Traditional practices that involve delivering knowledge resources for individualised learning within semester-length units of study are becoming increasingly ill-adapted to the demands of a dynamic and global educational landscape. OER offers a sustainable and equitable alternative to such closed arrangements, with the potential to meet the emerging demands of distributed learning settings. Nevertheless, changing educational practice remains a formidable challenge, and adopting OER is a radical break from legacy institutional practices. Our focus in this paper is on the starting point for embedding OER in curriculum work and teaching practice. We investigate change through emergent initiatives rather than a <b>top-down</b> <b>program</b> at La Trobe University in Australia: we ask what connections are necessary to establish open practices in a university. We trace three instances of OEP in one university that together build capacity in OER. We draw on Bardini’s strategy of bootstrapping, as an iterative and co-adaptive learning process that connects good practices in situ with institutional structures in order to build the groundwork for emergent change. These cases demonstrate how disparate innovations can be connected and re-purposed to establish a network of nascent OEP.|$|R
