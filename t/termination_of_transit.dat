0|10000|Public
25|$|In April 2012, the MBTA Advisory Board {{approved}} major fare increases on all MBTA services, and cutbacks or <b>terminations</b> <b>of</b> some <b>transit</b> routes. In July 2014, fares were increased {{further by}} an average of 5%.|$|R
40|$|In today’s {{turbulent}} economic climate, {{many government}} entities {{are being forced}} to make difficult decisions regarding their spending. In many cases, important programs or services are being cut due to budget deficits. One of the many services that have had its budget drastically reduced has been public transit. Public transit, or transit, plays a vital role in communities. It provides a service that allows people to have access to all aspects vital to their daily life including access to school, jobs, grocery stores, and medical services. Transit in communities not only creates greater accessibility, but it also creates positive impacts on the local economy. This research focuses on C-Tran, a suburban bus transit system in Clayton County Georgia. Due to budget cuts and funding shortfalls, the transit system was completely eliminated on March 31, 2010 by the Clayton County Board of Commissioners. The abrupt <b>termination</b> <b>of</b> the <b>transit</b> system has caused controversy, especially regarding the social impacts it has caused to C-Tran riders that depended on the bus system to provide them with mobility. However, there has been no discussion of the economic impacts <b>of</b> the <b>termination</b> <b>of</b> C-Tran. This study was motivated by the elimination of the C-Tran bus system and seeks to establish a link between transit corridors and property values. The relationship between transit corridors and property values has long been studied. Most of the past studies have focused on rail and have found that in general, proximity to transit results in higher property values. This means that transit creates a positive economic impact on the local community. While there have been many studies conducted on the impacts <b>of</b> <b>transit</b> on property values, including a few on bus rapid transit systems, no studies have been conducted on a suburban bus system...|$|R
40|$|We {{investigate}} <b>termination</b> <b>of</b> rewriting computations {{guided by}} strategy annotations. We show that proofs <b>of</b> <b>termination</b> {{can be obtained}} by proving (innermost) <b>termination</b> <b>of</b> context-sensitive rewriting (CSR). Hence, we investigate how to prove innermost <b>termination</b> <b>of</b> CSR using existing methods for proving <b>termination</b> <b>of</b> CSR...|$|R
40|$|We propose {{automatically}} proving <b>termination</b> <b>of</b> logic {{programs by}} transforming them into term rewrite systems (TRS). We describe such a transformation for which <b>termination</b> <b>of</b> the logic program follows from innermost <b>termination</b> <b>of</b> the TRS, which {{is stronger than}} previous results. Semantic labelling {{turns out to be}} a powerful tool for proving <b>termination</b> <b>of</b> this kind of TRSs: we use it to prove <b>termination</b> <b>of</b> the TRS corresponding to any structural recursive logic program, and also for proving <b>termination</b> <b>of</b> implementations of quick-sort and generation of permutations...|$|R
40|$|The thesis {{deals with}} notice <b>of</b> <b>termination</b> <b>of</b> {{employment}} relationship. It aims {{not only to}} analyse current Czech legislation including existing case law, but also to outline possible proposals of amendments (de lege ferenda considerations). It consists of eight chapters. The first chapter is concerned with general issues of labour law - its concept and function, its role in legal system, its relation to civil law and directory or mandatory nature of labour law rules. The second chapter provides a basic analysis of further ways <b>of</b> <b>termination</b> <b>of</b> employment relationship, which are further legal acts leading to <b>termination</b> <b>of</b> employment (i. e. agreement on <b>termination</b> <b>of</b> employment, instant <b>termination</b> <b>of</b> employment, <b>termination</b> <b>of</b> employment during the probationary period), <b>termination</b> <b>of</b> employment {{on the basis of}} an official decision and <b>termination</b> <b>of</b> employment by legal events. The third chapter to the sixth chapter deals with current Czech legislation regulating notice <b>of</b> <b>termination</b> <b>of</b> employment and with further related issues - prohibition <b>of</b> notice <b>of</b> <b>termination</b> during protective period and exemptions from this prohibition (chapter 4), invalidity <b>of</b> notice <b>of</b> <b>termination</b> (chapter 5) and employer's obligations consequent upon <b>termination</b> <b>of</b> employment (chapter 6). The third chapter mainly [...] ...|$|R
40|$|Includes bibliographical references. Using {{the theory}} of "street-level bureaucrats", this thesis {{examines}} {{the implementation of the}} South African Choice on <b>Termination</b> <b>of</b> Pregnancy Act by exploring nurses' decision-making in <b>termination</b> <b>of</b> pregnancy services. As front-line providers, nurses {{play a critical role in}} the implementation <b>of</b> <b>termination</b> <b>of</b> pregnancy services. Nurses may be required to assist in informing, preparing or counselling women who request a <b>termination</b> <b>of</b> pregnancy and, if appropriately trained, nurses can perform <b>terminations</b> <b>of</b> pregnancy. Research suggests, however, that 15 years after the promulgation of the law, nurses continue to be reluctant to participate in <b>termination</b> <b>of</b> pregnancy services thereby undermining the successful implementation of the Choice on <b>Termination</b> <b>of</b> Pregnancy Act...|$|R
40|$|Static analysis, proceedingsNumerical {{computations}} form {{an essential}} part of almost any real-world program. Traditional approaches to <b>termination</b> <b>of</b> logic programs are restricted to domains isomorphic to N, more recent works study <b>termination</b> <b>of</b> integer computations. <b>Termination</b> <b>of</b> computations involving real numbers is cumbersome and counter-intuitive due to rounding errors and implementation conventions. We present a novel technique that allows us to prove <b>termination</b> <b>of</b> such computations. Our approach extends the previous work on <b>termination</b> <b>of</b> integer computations. status: publishe...|$|R
40|$|Žáčková, K., Immediate <b>termination</b> <b>of</b> an {{employment}} and proposed solutions {{for a particular}} company. Bachelor thesis. Brno: Mendel university, 2014. This thesis will examine the immediate <b>termination</b> <b>of</b> {{an employment}} and the consequences that this form <b>of</b> <b>termination</b> <b>of</b> an employment brings for the company. The first part defines the term employment and immediate <b>termination</b> <b>of</b> an employment and simultaneously describes the situations in which the employee or employer has the right for immediate <b>termination</b> <b>of</b> an employment. Attention is also paid to the validity <b>of</b> <b>termination</b> <b>of</b> an employment and delivery method. The Thesis will also include analysis of specific situations in a particular company in which an immediate <b>termination</b> <b>of</b> an employment had occurred. The analysis will examine several points of view which will include: the reasons and the process <b>of</b> <b>termination</b> <b>of</b> an employment, accordance with the law, assessment of the consequences and possible costs for the company...|$|R
5000|$|The Choice on <b>Termination</b> <b>of</b> Pregnancy Act prohibits {{anyone from}} [...] "preventing the lawful <b>termination</b> <b>of</b> a pregnancy" [...] or [...] "obstructing {{access to a}} {{facility}} for the <b>termination</b> <b>of</b> a pregnancy", imposing a penalty of up to ten years' imprisonment.|$|R
40|$|Abstract. Numerical {{computations}} form {{an essential}} part of almost any real-world program. Traditional approaches to <b>termination</b> <b>of</b> logic programs are restricted to domains isomorphic to (N,>), more recent works study <b>termination</b> <b>of</b> integer computations where the lack of well-foundness of the integers has to be taken into account. <b>Termination</b> <b>of</b> computations involving floating point numbers can be counter-intuitive due to rounding errors and implementation conventions. We present a novel technique that allows us to prove <b>termination</b> <b>of</b> such computations. Our approach extends the previous work on <b>termination</b> <b>of</b> integer computations...|$|R
40|$|Abstract. <b>Termination</b> is one <b>of</b> {{the most}} {{interesting}} problems when dealing with context-sensitive rewrite systems. Although {{there is a good}} number of techniques for proving <b>termination</b> <b>of</b> context-sensitive rewriting (CSR), the dependency pair approach, {{one of the most powerful}} techniques for proving <b>termination</b> <b>of</b> rewriting, has not been investigated in connection with proofs <b>of</b> <b>termination</b> <b>of</b> CSR. In this paper, we show how to use dependency pairs in proofs <b>of</b> <b>termination</b> <b>of</b> CSR. The implementation and practical use of the developed techniques yield a novel and powerful framework which improves the current state-of-the-art of methods for proving <b>termination</b> <b>of</b> CSR...|$|R
5000|$|On <b>termination</b> (i.e. <b>termination</b> <b>of</b> the interest-in-possession, which may, or may not, be the <b>termination</b> <b>of</b> the trust): ...|$|R
40|$|A {{technique}} {{to prove the}} <b>termination</b> <b>of</b> a given term rewriting system (TRS, for short) is presented. We propose tree lifting orderings by which from a given TRS R candidates for the <b>termination</b> <b>of</b> R can be obtained [...] -the <b>termination</b> <b>of</b> (at least) one of these candidates guarantees the <b>termination</b> <b>of</b> R. It should be remarked that for a given finite TRS all its candidates can be computed automatically...|$|R
40|$|Numerical {{computations}} form {{an essential}} part of almost any real-world program. Traditional approaches are restricted domains isomorphic to N, more recent works study <b>termination</b> <b>of</b> integer computations. <b>Termination</b> <b>of</b> computations involving real numbers is cumbersome and counter-intuitive due to rounding errors and implementation conventions. We present a novel technique that allows us to prove <b>termination</b> <b>of</b> such computations. Our approach extends the previous work on <b>termination</b> <b>of</b> integer computations...|$|R
40|$|The instant <b>termination</b> <b>of</b> {{employment}} The {{purpose of}} my thesis is to analyze legal regulations <b>of</b> instant <b>termination</b> <b>of</b> employment, {{as the one}} of the legal form <b>of</b> the <b>termination</b> <b>of</b> employment. This exceptional instrument for the <b>termination</b> <b>of</b> employment can be applied only from serious reasons, stated by Czech labour code. The thesis is composed of ten chapters, each of them dealing with different aspects. The First Chapter attends to the basic questions relating to employment between employer and employee and above all introduces the options for the <b>termination</b> <b>of</b> employment. The Second Chapter presents just the instant <b>termination</b> <b>of</b> employment and consists of two subheads. First of them focuses on legal form <b>of</b> immediate <b>termination</b> <b>of</b> employment in general, second one analyzes legal form of this institute, which anticipates current legal status. Chapter Three concentrates on instant <b>termination</b> <b>of</b> employment by employer, which can be used only from two reasons - employee's final conviction to imprisonment in definite length for commission of a crime and employee's infringement of duties in a gross manner. This chapter is subdivided into parts. The above mentioned reasons are described in the first two parts. Third subhead examines the cases, where the instant <b>termination</b> <b>of</b> employment is excluded [...] ...|$|R
40|$|Introduction. Over 80 {{years the}} anatomy by request of applied {{medicine}} studies a structure <b>of</b> the sensitive <b>terminations</b> <b>of</b> different nerves in heart of mammals. The most in details studied <b>terminations</b> <b>of</b> the wandering nerves. Work purpose. To investigate the afferent <b>terminations</b> <b>of</b> different cardiac nerves...|$|R
40|$|This Note {{discusses}} {{the need for}} a modern international legal regime that would address navigational and environmental safety in the Turkish Straits {{in a manner consistent with}} customary international law <b>of</b> the <b>transit</b> passage through the straits used for international navigation. Part I provides an overview of the recent history of the Turkish Straits and the legal regimes regulating navigation in the Turkish Straits and other straits used for international navigation. Part II explores the positions and arguments of the parties involved in the dispute over the legality of the 1994 Turkish Regulations. Part III proposes that the circumstances surrounding this conflict warrant the <b>termination</b> <b>of</b> the Treaty of Montreux and adoption of the United Nations Convention on the Law of the Sea 22 (2 ̆ 2 UNCLOS 2 ̆ 2) as the binding legal regime of the Turkish Straits. Part III argues that this action will supply contemporary and internationally-accepted rules <b>of</b> <b>transit</b> through the Turkish Straits and will provide an authoritative international tribunal to serve as an independent arbitrator between the parties. This Note concludes that UNCLOS 2 ̆ 7 s regime <b>of</b> <b>transit</b> passage through the Turkish Straits should help to decrease the possibility of confrontation in the region and to address Turkey 2 ̆ 7 s navigational and environmental safety concerns...|$|R
40|$|AbstractLazy {{rewriting}} (LR) {{is intended}} to improve the <b>termination</b> behavior <b>of</b> TRSs. This is attempted by restricting reductions for selected arguments of functions. Similarly, context-sensitive rewriting (CSR) forbids any reduction on those arguments. We show that LR and CSR coincide under certain conditions. On {{the basis of this}} result, we also describe a transformation which permits us to prove <b>termination</b> <b>of</b> LR as <b>termination</b> <b>of</b> CSR for the transformed system. Since {{there are a number of}} different techniques for proving <b>termination</b> <b>of</b> CSR, this provides a formal framework for proving <b>termination</b> <b>of</b> lazy rewriting...|$|R
40|$|Abstract. Innermost {{context-sensitive}} rewriting {{has been}} proved useful for modeling computations of programs of algebraic languages like Maude, OBJ, etc. Furthermore, innermost <b>termination</b> <b>of</b> rewriting is often easier to prove than termination. Thus, under appropriate conditions, a useful strategy for proving <b>termination</b> <b>of</b> rewriting is trying to prove <b>termination</b> <b>of</b> innermost rewriting. This phenomenon has also been investigated for context-sensitive rewriting (CSR). Up to now, only few transformations have been proposed and used to prove <b>termination</b> <b>of</b> innermost CSR. In this paper, we investigate direct methods for proving <b>termination</b> <b>of</b> innermost CSR. We adapt the recently introduced context-sensitive dependency pairs approach to innermost CSR and show {{that they can be}} advantageously used for proving <b>termination</b> <b>of</b> innermost CSR. We have implemented them as part <b>of</b> the <b>termination</b> tool mu-term. ...|$|R
40|$|Bachelor thesis {{concerns}} the <b>termination</b> <b>of</b> employment by the employer. The first chapter generally characterized employment. A {{substantial part of}} the work consists of formal and content requirements of individual ways <b>of</b> <b>termination</b> <b>of</b> emplyment, ie <b>termination</b> <b>of</b> employment during the probationary period, immediate <b>termination</b> <b>of</b> employment and dismissal. In addition work has a separated chapter, which is devoted to the obligation of the employer after <b>termination</b> <b>of</b> employment. Theoretical considerations are interspersed with case law from the area. To compare the observance of the legislation in practice, I devote a chapter to personal experiences of different employers and mention the demands <b>of</b> an invalid <b>termination.</b> In conclusion, I evaluate the regulation <b>of</b> <b>termination</b> <b>of</b> employment at the base of my observations received from employers and presents proposals to improve legislation and recommendations to employers...|$|R
40|$|AbstractA {{methodology}} for proving the <b>termination</b> <b>of</b> well-moded logic programs is developed {{by reducing the}} <b>termination</b> problem <b>of</b> logic programs to that of term rewriting systems. A transformation procedure is presented to derive a term rewriting system from a given well-moded logic program such that the <b>termination</b> <b>of</b> the derived rewrite system implies the <b>termination</b> <b>of</b> the logic program for all well-moded queries under a class of selection rules. This facilitates applicability of a vast source <b>of</b> <b>termination</b> orderings proposed {{in the literature on}} term rewriting, for proving <b>termination</b> <b>of</b> logic programs. The <b>termination</b> <b>of</b> various benchmark programs has been established with this approach. Unlike other mechanizable approaches, the proposed approach does not require any preprocessing and works well, even in the presence of mutual recursion. The transformation has also been implemented as a front end to Rewrite Rule Laboratory (RRL) and has been used in establishing <b>termination</b> <b>of</b> nontrivial Prolog programs such as a prototype compiler for ProCoS, PL 0 language...|$|R
40|$|We {{investigate}} the problem <b>of</b> proving <b>termination</b> <b>of</b> OBJ programs with positive local strategies, i. e., lists of positive (or null) integers {{that are associated}} to the symbols of the signature. We establish conditions that fully characterize this problem as the problem <b>of</b> proving innermost <b>termination</b> <b>of</b> context-sensitive rewriting. Finally, we investigate how to prove innermost <b>termination</b> <b>of</b> context-sensitive rewriting using existing methods for proving <b>termination</b> <b>of</b> context-sensitive rewriting. Keywords: Declarative programming, replacement restrictions, term rewriting, termination. ...|$|R
40|$|<b>Termination</b> <b>of</b> {{membership}} in {{limited liability company}} Abstract The thesis deals with meanings <b>of</b> <b>termination</b> <b>of</b> {{membership in}} limited liability company, namely by (i) transfer of business interest, (ii), {{stepping out of the}} company, (iii) agreement on <b>termination</b> <b>of</b> shareholder's participation in a company, (iv) exclusion of a shareholder, (v) cancellation of shareholder's participation by court, (vi) <b>termination</b> <b>of</b> shareholder's participation due to insolvency proceedings against the shareholder, and (vii) <b>termination</b> <b>of</b> shareholder's participation due to execution towards the shareholder's interest. The thesis further deals with <b>termination</b> <b>of</b> shareholder's participation due to death of the shareholder who is a natural person or winding-up of the shareholder which is a legal entity. After a short foreword follow chapters concerning general issues about the limited liability company as a type of a legal corporation, the rights and obligations of shareholders and the creation and <b>termination</b> <b>of</b> participation in a limited liability company. Chapters dealing with various meanings <b>of</b> <b>termination</b> <b>of</b> shareholder's participation in a limited liability company and a brief conclusion follow. The aim of this thesis is to analyze and clarify some interpretative and application difficulties arising in connection with [...] ...|$|R
40|$|Context-sensitive {{rewriting}} {{is a term}} rewriting strategy used {{to model}} evaluation strategies in functional programming and in programming languages like OBJ. For example, under certain conditions <b>termination</b> <b>of</b> an OBJ program is equivalent to innermost <b>termination</b> <b>of</b> the corresponding context-sensitive rewrite system [Lucas, 2001]. To prove <b>termination</b> <b>of</b> context-sensitive rewriting, several methods have been proposed in the literature which transform context-sensitive rewrite systems into ordinary rewrite systems such that <b>termination</b> <b>of</b> the transformed ordinary system implies <b>termination</b> <b>of</b> the original context-sensitive system. None of these transformation methods is very satisfactory {{when it comes to}} proving innermost termination. We present a simple transformation which is both sound and complete for innermost termination...|$|R
50|$|On 12 February 2014, CRHK {{announced}} immediate <b>termination</b> <b>of</b> {{the employment}} contract with Li. CRHK {{refused to comment}} on the <b>termination</b> <b>of</b> contract.|$|R
40|$|A {{transformational}} {{approach for}} proving <b>termination</b> <b>of</b> parallel logic {{programs such as}} GHC programs is proposed. A transformation from GHC programs to term rewriting systems is developed; it exploits the fact that unications in GHC-resolution correspond to matchings. The <b>termination</b> <b>of</b> a GHC program for a class of queries is implied by the <b>termination</b> <b>of</b> the resulting rewrite system. This approach facilitates the applicability {{of a wide range}} <b>of</b> <b>termination</b> techniques developed for rewrite systems in proving <b>termination</b> <b>of</b> GHC programs. The method consists of three steps: (a) deriving moding information from a given GHC program, (b) transforming the GHC program into a term rewriting system using the moding information, and nally (c) proving <b>termination</b> <b>of</b> the resulting rewrite system. Using this method, the <b>termination</b> <b>of</b> many benchmark GHC programs such as quick-sort, merge-sort, merge, split, fair-split and append, etc., can be proved. 1 Introduction The success of logic programmin [...] ...|$|R
40|$|We {{characterize}} the practically important notion <b>of</b> operational <b>termination</b> <b>of</b> deterministic conditional term rewriting systems (DCTRSs) by context-sensitive <b>termination</b> <b>of</b> a transformed TRS on original terms. Experimental evaluations {{show that this}} new approach yields more power when verifying operational termination than existing ones. Moreover, {{it allows us to}} disprove operational <b>termination</b> <b>of</b> DCTRSs...|$|R
40|$|Abstract. Context-sensitive {{rewriting}} is a {{restriction of}} term rewriting used to model evaluation strategies in functional programming and in programming languages like OBJ. For example, {{under certain conditions}} <b>termination</b> <b>of</b> an OBJ program is equivalent to innermost <b>termination</b> <b>of</b> the corresponding context-sensitive rewrite system [18]. To prove <b>termination</b> <b>of</b> context-sensitive rewriting, several methods have been proposed in the literature which transform context-sensitive rewrite systems into ordinary rewrite systems such that <b>termination</b> <b>of</b> the transformed ordinary system implies <b>termination</b> <b>of</b> the original context-sensitive system. Most of these transformations are not very satisfactory {{when it comes to}} proving innermost termination. We investigate the relationship between termination and innermost <b>termination</b> <b>of</b> context-sensitive rewriting and we examine the applicability of the different transformations for innermost termination proofs. Finally, we present a simple transformation which is both sound and complete for innermost termination. ...|$|R
40|$|Employment, <b>termination</b> <b>of</b> {{employment}}, notice <b>of</b> <b>termination</b> <b>of</b> employment, <b>termination</b> <b>of</b> employment agreement The {{thesis is}} focused, inter alia, on the summary and research of all relevant legal provisions related to employment and <b>termination</b> <b>of</b> employment. It {{also means that}} the scientific method used for the thesis is the analytical one. Quite logically, the thesis is not a mere compilation. There will be also formulated at appropriate points attitudes and opinions of {{the author of the}} thesis related to the issue <b>of</b> <b>termination</b> <b>of</b> employment and the individual ways <b>of</b> <b>termination</b> <b>of</b> employment. In addition to the analytical method, there will be also used the comparative method to compare the existing legal provisions to the former legal provisions. Finally, the attention will be paid to de lege ferenda. The thesis is divided into the introduction and 18 chapters, conclusion and list of references...|$|R
50|$|Bell had {{announced}} <b>termination</b> <b>of</b> its Portable Internet service on February 14, 2012.Rogers {{had announced}} <b>termination</b> <b>of</b> its Portable Internet service on March 1, 2012.|$|R
40|$|Jirmásková, L., <b>Termination</b> <b>of</b> {{the partner}} {{participation}} in a Limited Liability Company. Bachelor thesis. Brno: Mendel University Brno, 2014. Bachelor thesis generally deals with Limited Liability Company, but mainly with the <b>termination</b> <b>of</b> a partner participation in the company. The work is di-vided into two parts, while the literature review describes the company Ltd. and its various ways <b>of</b> <b>termination</b> <b>of</b> a partner under the new legislation, the practical part focuses on the <b>termination</b> <b>of</b> a partner and the impact analyses of the selected company...|$|R
40|$|Abstract. To prove <b>termination</b> <b>of</b> Java Bytecode (JBC) automatically, we {{transform}} JBC to finite termination graphs {{which represent}} all possible runs of the program. Afterwards, the graph {{can be translated}} into “simple ” formalisms like term rewriting and existing tools {{can be used to}} prove <b>termination</b> <b>of</b> the resulting term rewrite system (TRS). In this paper we show that termination graphs indeed capture the semantics of JBC correctly. Hence, <b>termination</b> <b>of</b> the TRS resulting from the termination graph implies <b>termination</b> <b>of</b> the original JBC program. ...|$|R
40|$|Projet EURECAThis paper {{presents}} a completion procedure for proving <b>termination</b> <b>of</b> term rewrite systems. It works as follows. Given a term rewrite system R supposed to terminate and a term rewrite system T used to transform R, the completion builds an auxiliary term rewrite system S, the system transformed of R by T. The <b>termination</b> <b>of</b> S and T {{associated with a}} property called local cooperation implies the <b>termination</b> <b>of</b> R. If the process terminates this provides a mechanical proof <b>of</b> the <b>termination</b> <b>of</b> R...|$|R
40|$|The term meta-programming {{refers to}} the ability of writing {{programs}} that have other programs as data and exploit their semantics. The aim of this paper is presenting a methodology allowing us to perform a correct termination analysis for a broad class of practical meta-interpreters, including negation and performing different tasks during the execution. It is based on combining power of general orderings, used in proving <b>termination</b> <b>of</b> term-rewrite systems and programs, and on the well-known acceptability condition, used in proving <b>termination</b> <b>of</b> logic programs. The methodology establishes a relationship between the ordering needed to prove <b>termination</b> <b>of</b> the interpreted program and the order needed to prove <b>termination</b> <b>of</b> the meta-interpreter together with this interpreted program. If such a relationship is established, <b>termination</b> <b>of</b> one <b>of</b> those implies <b>termination</b> <b>of</b> the other one, i. e., the meta-interpreter improves (preserves) termination. Among the meta-interpreters that are analysed correctly are a proof trees constructing metainterpreter, different kinds of tracers and reasoners...|$|R
40|$|<b>Termination</b> is one <b>of</b> {{the most}} {{interesting}} problems when dealing with context-sensitive rewrite systems. Although {{there is a good}} number of techniques for prov-ing <b>termination</b> <b>of</b> context-sensitive rewriting (CSR), the dependency pair approach, {{one of the most powerful}} techniques for proving <b>termination</b> <b>of</b> rewriting, has not been investigated in connection with proofs <b>of</b> <b>termination</b> <b>of</b> CSR. In this paper, we show how to use dependency pairs in proofs <b>of</b> <b>termination</b> <b>of</b> CSR. The imple-mentation and practical use of the developed techniques yield a novel and powerful framework which improves the current state-of-the-art of methods for proving ter-mination of CSR...|$|R
40|$|Abstract. Basic {{narrowing}} is {{a restricted}} form of narrowing which constrains narrowing steps {{to a set}} of non-blocked (or basic) positions. Basic narrowing has a number of important applications including equational unification in canonical theories. Another application is analyzing <b>termination</b> <b>of</b> narrowing by checking the <b>termination</b> <b>of</b> basic narrowing, as done in pioneering work by Hullot. In this work, we study the modularity <b>of</b> <b>termination</b> <b>of</b> basic narrowing in hierarchical combinations of TRSs, including a generalization of proper extensions with shared subsystem. This provides new algorithmic criteria to prove <b>termination</b> <b>of</b> basic narrowing. ...|$|R
