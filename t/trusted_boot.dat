27|7|Public
5|$|BitLocker is {{a logical}} volume {{encryption}} system. (A volume spans part of a hard disk drive, the whole drive or more than one drive.) When enabled, TPM and BitLocker can ensure {{the integrity of the}} <b>trusted</b> <b>boot</b> path (e.g. BIOS and boot sector), in order to prevent most offline physical attacks and boot sector malware.|$|E
500|$|BitLocker {{and other}} full disk {{encryption}} {{systems can be}} attacked by a rogue boot manager. Once the malicious bootloader captures the secret, it can decrypt the Volume Master Key (VMK), which would then allow access to decrypt or modify any information on an encrypted hard disk. By configuring a TPM to protect the <b>trusted</b> <b>boot</b> pathway, including the BIOS and boot sector, BitLocker can mitigate this threat. (Note that some non-malicious changes to the boot path may cause a Platform Configuration Register check to fail, and thereby generate a false warning.) ...|$|E
50|$|Windows 8 {{introduced}} {{four new}} features to offer security during the startup process: UEFI secure boot, <b>Trusted</b> <b>Boot,</b> Measured Boot and Early Launch Anti-Malware (ELAM).|$|E
40|$|In {{this article}} reveals {{the notion of}} «time slots» (T) that have been {{introduced}} in description of the model and concept of <b>trusted</b> network <b>booting</b> for a thin-client system [1]. The article deals with stages of loading the terminal operating system into workstation memory, starting of workstation switch-on. «Time slot» defines a time (sec.) of execution at each stage in cases of normal operation and insider activity. The article presents methods for the detection and neutralization of such activity by monitoring of values of "time slots"...|$|R
60|$|This, I am well aware, was not {{the quickest}} way to take of obeying the {{directions}} which I had received. But I was resolved to see for myself what new mystification was going on before I <b>trusted</b> Rosanna's <b>boot</b> in the Sergeant's hands. My old notion of screening the girl, if I could, seemed to have come back on me again, at the eleventh hour. This state of feeling (to say nothing of the detective-fever) hurried me off, as soon as I had got the boot, at the nearest approach to a run which a man turned seventy can reasonably hope to make.|$|R
50|$|Until the 1930s, {{the area}} {{now known as}} New Addington was {{farmland}} and woodland in the southeast of the ancient parish of Addington. The farms were called Castle Hill, Addington Lodge and Fisher's Farms.At the time, central Croydon and London more generally had overcrowded slums causing concern to the authorities. In 1935, the First National Housing Trust purchased 569 acres (2.3 km²) of Fisher's Farm {{with the intention of}} erecting a 'Garden Village', with 4,400 houses, shops, two churches, cinema, and village green. The Chairman of the <b>Trust</b> was Charles <b>Boot,</b> hence the earliest part of New Addington is sometimes called The Boot's Estate.|$|R
5000|$|RusBitTech also {{manufactures}} a [...] "soft/hardware <b>trusted</b> <b>boot</b> control module" [...] MAKSIM-M1 ("М643М1") with PCI bus. It prevents {{unauthorized access}} and offers some other raised digital security features. The module, besides Astra Linux, also supports OSes with Linux kernel 2.6.x and 3.x.x, {{as well as}} several Microsoft Windows OSes.|$|E
50|$|BitLocker is {{a logical}} volume {{encryption}} system. (A volume spans part of a hard disk drive, the whole drive or more than one drive.) When enabled, TPM and BitLocker can ensure {{the integrity of the}} <b>trusted</b> <b>boot</b> path (e.g. BIOS and boot sector), in order to prevent most offline physical attacks and boot sector malware.|$|E
50|$|Full disk {{encryption}} applications, such as SecureDoc, dm-crypt {{in modern}} Linux kernels, and BitLocker Drive Encryption in some versions of Microsoft Windows, {{can use this}} technology to protect the keys used to encrypt the computer's hard disks and provide integrity authentication for a <b>trusted</b> <b>boot</b> pathway (for example BIOS, boot sector, etc.) A number of third-party full-disk encryption products also support TPM.|$|E
5000|$|Two {{types of}} attack {{scenarios}} exist {{in which it}} is possible to maliciously take advantage of this bootkit: in the first one, the user is required to launch the bootkit with administrative privileges once the PC has already booted into Windows; in the second one, analogously to hardware keyloggers, a malicious person needs physical access to the user's TrueCrypt-encrypted hard disk: in this context this is needed to modify the user's TrueCrypt MBR with that of the Stoned bootkit and then place the hard disk back on the unknowing user's PC, so that when the user boots the PC and types his/her TrueCrypt password on boot, the [...] "Stoned" [...] bootkit intercepts it thereafter because, from that moment on, the Stoned bootkit is loaded before TrueCrypt's MBR in the boot sequence. The first type of attack can be prevented as usual by good security practices, e.g. avoid running non-trusted executables with administrative privileges. The second one can be successfully neutralized by the user if he/she suspects that the encrypted hard disk might have been physically available to someone he/she does not <b>trust,</b> by <b>booting</b> the encrypted operating system with TrueCrypt's Rescue Disk instead of booting it directly from the hard disk. With the rescue disk, the user can restore TrueCrypt's MBR to the hard disk.|$|R
40|$|Abstract. Information-flow {{policies}} {{can express}} strong security requirements for programs run by distributed parties with {{different levels of}} trust. However, this security is hard to preserve as programs get compiled to distributed systems with (potentially) compromised machines. For instance, many programs involve computations too sensitive to be trusted to any of those machines. Also, many programs are not perfectly secure (non-interferent); as they selectively endorse and declassify information, their relative security becomes harder to preserve. We develop a secure compiler for distributed information flows. To minimize trust assumptions, we rely on cryptographic protection, and we exploit hardware and software mechanisms available on modern architectures, such as secure <b>boots,</b> <b>trusted</b> platform modules, and remote attestation. We present a security model for these mechanisms in an imperative language with dynamic code loading. We define program transformations to generate trusted virtual hosts and to run them on untrusted machines. We obtain confidentiality and integrity theorems under realistic assumptions, showing that the compile...|$|R
40|$|Linux is in {{widespread}} use in embedded devices, but these devices typically lack critical security features found in higher-end Linux systems. They typically {{do not have}} any way to validate their firmware, they do not have hardware roots of trust for <b>trusted</b> or secure <b>boot,</b> they do not have provisions for physical presence, to protect firmware from remote modification, and they do not have secure update. Vendors claim that these features are either too large, or too expensive to fit in their embedded devices. This paper summarizes the recent widespread vulnerabilities and compromises of embedded devices, and shows how the given security features would defeat such attacks. It relates the concepts to the NIST SP 800 guidelines for BIOS measurement and protection, and to the ongoing work on Linux secure boot for higher end devices. It looks at four typical embedded devices, shows how all of these features can be added at zero cost...|$|R
50|$|<b>Trusted</b> <b>Boot</b> is {{a feature}} of Windows boot loader and ensures the {{integrity}} of all Microsoft components loaded into memory, including ELAM, which loads last. ELAM ensures that all third-party boot drivers are trustworthy; they are not loaded if ELAM check fails. ELAM can use either Windows Defender or a third-party compatible antivirus. During the 2011 Build conference in Anaheim, California, Microsoft showed a Windows 8 machine that can prevent an infected USB flash memory from compromising the boot process.|$|E
5000|$|BitLocker {{and other}} full disk {{encryption}} {{systems can be}} attacked by a rogue boot manager. Once the malicious bootloader captures the secret, it can decrypt the Volume Master Key (VMK), which would then allow access to decrypt or modify any information on an encrypted hard disk. By configuring a TPM to protect the <b>trusted</b> <b>boot</b> pathway, including the BIOS and boot sector, BitLocker can mitigate this threat. (Note that some non-malicious changes to the boot path may cause a Platform Configuration Register check to fail, and thereby generate a false warning.) ...|$|E
5000|$|Another case of <b>trusted</b> <b>boot</b> is the One Laptop per Child XO laptop {{which will}} only boot from {{software}} signed {{by a private}} cryptographic key known only to the OLPC non-profit organisation and the respective deployment authorities such as Education Ministries. Laptops distributed directly by the OLPC organisation provide a way to disable the restrictions, by requesting a [...] "developer key" [...] unique to that laptop, over the Internet, waiting 24 hours to receive it, installing it, and running the firmware command [...] "disable-security". However some deployments such as Uruguay deny requests for such keys. The stated goal is to deter mass theft of laptops from children or via distribution channels, by making the laptops refuse to boot, {{making it hard to}} reprogram them so they will boot and delaying the issuance of developer keys to allow time to check whether a key-requesting laptop had been stolen.|$|E
40|$|Abstract. Information-flow {{policies}} {{can express}} strong security requirements for programs run by distributed parties with {{different levels of}} trust. However, this security is hard to preserve as programs get compiled to distributed systems with (potentially) compromised machines. For instance, many programs involve computations too sensitive to be trusted to any of those machines. Also, many programs are not perfectly secure (non-interferent); as they selectively endorse and declassify information, their relative security becomes harder to preserve. We develop a secure compiler for distributed information flows. To minimize trust assumptions, we rely on cryptographic protection, and we exploit hardware and software mechanisms available on modern architectures, such as secure <b>boots,</b> <b>trusted</b> platform modules, and remote attestation. We present a security model for these mechanisms in an imperative language with dynamic code loading. We define program transformations to generate trusted virtual hosts and to run them on untrusted machines. We obtain confidentiality and integrity theorems under realistic assumptions, showing that the compiled distributed system {{is at least as}} secure as the source program. 1 Programming with TPMs When designing or reviewing the security of a system, a first step is to identify its trusted computing base (TCB), that is, the set of components that need to be trusted to achieve a given level of security. For general-purpose networked machines, this set is large and complex; it includes the hardware, an operating system, a runtime environment and their libraries (maybe 10 8 LOCs overall) plus drivers, applications, and dynamically loaded code. This leads to a best-effort approach to security, at odds with formal verification, which provides strong guarantees only for smaller, simpler systems. Minimal TCBs. Modern computer architectures provide hardware support for reducing TCBs and protecting privileged operations. Thus, most computers come bundled with some form of secure coprocessor with a dedicated secure instruction set—for example, most laptops now embed a Trusted Platform Module (TPM) (TCG, 2005) and many high-end processors feature a special late launch functionality (AMD’s Secur...|$|R
30|$|For the {{evaluation}} of <b>trusted</b> <b>boot,</b> two aspects are of primary interest. The first is {{the impact on the}} total boot time that is introduced by measuring the relevant system components. The second aspect is the increase in code size by the addition of TPM support and the SHA 1 hash algorithm that is required for doing measurements. To answer these questions, we prototypically implemented the <b>trusted</b> <b>boot</b> procedure for our TrustCAM platform.|$|E
30|$|Nevertheless, {{a number}} of open issues remain to be {{addressed}} in future work. For <b>trusted</b> <b>boot</b> we use an addition trusted building block as initial root of trust for measurement. Many ARM processors come with on-board security extensions such as ARM TrustZone or TI M-Shield. Potentially, they can be used to implement such a root of trust but both specifications are proprietary and not publicly available. Another direction for future investigations is the Mobile Trusted Module (MTM) [45]. The MTM is specified by the TCG and is a variant of the standard TPM. It adds secure boot functionality which, contrary to <b>trusted</b> <b>boot,</b> not only allows one to measure the system status but also can prevent a system from booting if the software stack was modified.|$|E
40|$|Trusted {{computing}} aims {{to build}} a trusted computing environment for information systems {{with the help of}} secure hardware TPM, which has been proved to be an effective way against network security threats. However, the TPM chips are not yet widely deployed in most computing devices so far, thus limiting the applied scope of trusted computing technology. To solve the problem of lacking trusted hardware in existing computing platform, an alternative security hardware USBKey is introduced in this paper to simulate the basic functions of TPM and a new reverse USBKey-based integrity verification model is proposed to implement the reverse integrity verification of the operating system boot process, which can achieve the effect of <b>trusted</b> <b>boot</b> of the operating system in end systems without TPMs. A Linux operating system booting method based on reverse integrity verification is designed and implemented in this paper, with which the integrity of data and executable files in the operating system are verified and protected during the <b>trusted</b> <b>boot</b> process phase by phase. It implements the <b>trusted</b> <b>boot</b> of operation system without TPM and supports remote attestation of the platform. Enhanced by our method, the flexibility of the trusted computing technology is greatly improved and it is possible for trusted computing to be applied in large-scale computing environment...|$|E
40|$|The {{science-based}} {{approach to}} obtaining integrated assessment of features for hardware-software unites of <b>trusted</b> <b>boot</b> {{based on an}} algorithm of receiving a comprehensive measure to assess the effectiveness of protection against unauthorized access and comparative evaluation methodology by “cost — effectiveness is presented by {{the authors of the}} article...|$|E
40|$|National audienceIn this paper, {{we present}} a concept of a trusted {{computing}} platform aimed for mobile devices. Most of previous works on trusted computing platforms were aimed for computers. The proposed method {{is based on the}} existence of a secure element in the mobile, mobile OS virtualization and <b>trusted</b> <b>boot</b> process. Such a platform is feasible and easy to implement if speciﬁc requirements are respected...|$|E
40|$|In {{this paper}} we {{present the results}} of our {{research}} into security of the Intel ® Trusted Execution Technology, part of the vProTM brand. We describe a practical attack that is capable of bypassing the TXT's <b>trusted</b> <b>boot</b> process, a key building block for Intel's vision of Trusted Computing. As part of the attack we also discuss practical attacks on SMM memory in modern Intel systems...|$|E
40|$|In {{order to}} solve the {{security}} issues of mobile vehicles in the Internet of vehicles, such as identity authentication and integrality verification, we apply the trusted cryptography module (TCM) into the on-vehicle electronic systems. TCM has many security features, such as integrality measurement, integrality report and protected storage, by which the on-vehicle electronic systems achieve a <b>trusted</b> <b>boot</b> process. Data and information of vehicles are encrypted before storage and transmission. The experiments show that with the authorization on the vehicular platform, the TCM will improve the credibility and security of the Internet of Vehicles...|$|E
30|$|Contrary to {{the ideal}} case where ROM code can be modified, for the TrustCAM {{prototype}} we use a slightly different boot procedure. As described in Section 5.1, we rely on a microcontroller {{that acts as a}} trusted building block. It downloads the X-Loader bootloader via UART 3 to the main system. This download is done with 115200 bps which results in a download time of 2.4 [*]s for the 28.5 [*]kB of the X-Loader binary. Compared {{to the ideal}} boot process, the X-Loader binary is not measured and extended into PCR 1. For the prototype system with X-Loader downloaded via the serial connection, the total impact of <b>trusted</b> <b>boot</b> on system boot time of the prototype system is 3.7 [*]s.|$|E
40|$|Trusted {{platforms}} {{have been}} proposed as a promising approach for providing security for wireless sensor nodes platform, particularly, from physical type of attacks. However, implementation of a separate Trusted Platform Module (TPM) chip on the platform is not acceptable {{in the design of}} wireless sensor nodes because it increases the size and total power consumption of the node. Alternative to that is to use embedded microprocessors with built-in security module, which implements functions similar to the TPM, on the embedded processor. However, since the sensor node is a resource constrained platform with limited processing capabilities, it is important to ensure that the computation and energy consumption for running security functions in the microprocessor are at an acceptable rate. In this study, a <b>trusted</b> <b>boot</b> process for sensor node is developed to provide a trusted platform for wireless sensor node. It comprises of first and second level boot process. The purpose of this research is to implement the “trusted boot process” on the embedded microprocessor to provide security on the hardware layer of sensor node. The proposed system involves integration of hardware and software subsystems. The hardware subsystem, utilize ARM 1176 JZF-S Development Board with ICE-JTAG. For the software subsystem, the proposed system will have two levels of boot process; which are first level bootloader, acting as the root of trust of the system and, second level bootloader with security module to check the integrity of the kernel or applications that will run on the platform. The results show that the proposed system is able to provide basic security implementations to support image verification of a sensor node through <b>trusted</b> <b>boot</b> process. A brief energy consumption study is also presented to support the wor...|$|E
40|$|Abstract. This paper {{presents}} a Common Criteria protection profile for high assurance security kernels (HASK-PP) {{based on the}} results and experiences of several (international) projects on design and implementation of trustworthy platforms. Our HASK-PP was motivated by the fact that currently no protection profile is available that appropriately covers trusted computing features such as <b>trusted</b> <b>boot,</b> sealing, and trusted channels (secure channels with inherent attestation). In particular, we show how trusted computing features are modeled in the HASK protection profile without depending on any concrete implementation for these features. Instead, this is left to the definition of the security targets of a an IT product which claims conformance to the HASK-PP. Our HASK protection profile was evaluated and certified at evaluation assurance level five (EAL 5) by the German Federal Office for Information Security (BSI). ...|$|E
40|$|Recent {{investigations}} {{have found a}} massively increasing professionalisation and organization of attacks executed on consumer computing systems. Simultaneously, the systems {{we are trying to}} defend are getting more and more complex and networked, while promising security technologies—such as <b>trusted</b> <b>boot</b> and strong process isolation—appear to have troubles finding their way into mainstream devices. This leads us to the conclusion that we may be forced to accept that the security war is lost for now, and that a considerable portion of all consumer PCs is under control of some organized malicious entity. In this work, we investigate the options left to the defenders in this scenario: Assuming that PC World is under control of a hostile force, how can we (a) survive (i. e., work) in a meaningful way, and (b) destroy the economic value for the attacker without severely damaging our own resources. 1. ...|$|E
40|$|Effectively {{protecting}} the Windows OS is a challenging task, since most implementation details are not publicly known. Windows {{has always been}} the main target of malwares that have exploited numerous bugs and vulnerabilities. Recent <b>trusted</b> <b>boot</b> and additional integrity checks have rendered the Windows OS less vulnerable to kernel-level rootkits. Nevertheless, guest Windows Virtual Machines are becoming an increasingly interesting attack target. In this work we introduce and analyze a novel Hypervisor-Based Introspection System (HyBIS) we developed for protecting Windows OSes from malware and rootkits. The HyBIS architecture is motivated and detailed, while targeted experimental results show its effectiveness. Comparison with related work highlights main HyBIS advantages such as: effective semantic introspection, support for 64 -bit architectures and for latest Windows (8. x and 10), advanced malware disabling capabilities. We believe the research effort reported here will pave the way to further advances in the security of Windows OSes...|$|E
40|$|Part 4 : Operating System and Firmware SecurityInternational audienceEffectively {{protecting}} the WindowsTM OS is a challenging task, since most implementation details are not publicly known. Windows OS {{has always been}} the main target of malware that have exploited numerous bugs and vulnerabilities exposed by its implementations. Recent <b>trusted</b> <b>boot</b> and additional integrity checks have rendered the Windows OS less vulnerable to kernel-level rootkits. Nevertheless, guest Windows Virtual Machines are becoming an increasingly interesting attack target. In this work we introduce and analyze a novel Hypervisor-Based Introspection System (HyBIS) we developed for protecting Windows OSes from malware and rootkits. The HyBIS architecture is motivated and detailed, while targeted experimental results show its effectiveness. Comparison with related work highlights main HyBIS advantages such as: effective semantic introspection, support for 64 -bit architectures and for recent Windows versions (> ≥ win 7), and advanced malware disabling capabilities. We believe the research effort reported here will pave the way to further advances in the security of WindowsTM OSes...|$|E
40|$|This paper {{presents}} an implementation of <b>trusted</b> <b>boot</b> for embedded systems. While in PCs the trusted computing hardware functionality is spread over CPU, memory controller hub (MCH), IO controller hub (ICH) and Trusted Platform Module (TPM), for embedded systems {{it is desirable}} to integrate the whole functionality in one system on chip. Our implementation is a two-processor design with LEON 3 open source soft cores (SPARC V 8 instruction set), coupled over an AHB interface. One of the processors acts as application processor, the other one as 'secure' coprocessor. The application processor is synthesized with a boot ROM as static root of trust for measurement. The 'secure' coprocessor runs TPM frmware and enables the application processor to boot and run different software while sealing corresponding keys and other secrets to the respective software identity (computed as hash value). We evaluate the design in a Virtex 5 FPGA with respect to different measures like resource consumption, code sizes and start times. The 'trusted boot' functionality is realised with a boot time increase of around 25 % for a Linux system...|$|E
40|$|We {{describe}} the current state-of-the-art in Trusted Computing Technologies - focusing mainly on Intel's Trusted Execution Technology (TXT). This document {{is based on}} existing documentation and tests of two existing TXT-based systems: Intel's <b>Trusted</b> <b>Boot</b> and Invisible Things Lab's Qubes OS. We describe what features are lacking in current implementations, describe what a mature system could provide, and present a list of developments to watch. Critical systems perform operation-critical computations on high importance data. In such systems, the inputs, computation steps, and outputs may be highly sensitive. Sensitive components must be protected from both unauthorized release, and unauthorized alteration: Unauthorized users should not access the sensitive input and sensitive output data, nor be able to alter them; the computation contains intermediate data with the same requirements, and executes algorithms that the unauthorized should {{not be able to}} know or alter. Due to various system requirements, such critical systems are frequently built from commercial hardware, employ commercial software, and require network access. These hardware, software, and network system components increase the risk that sensitive input data, computation, and output data may be compromised...|$|E
40|$|Trusted {{computing}} (TC) is {{an emerging}} technology {{to enhance the}} security of various computing platforms by a dedicated secure chip (TPM/TCM), which is widely accepted by both the industrial and academic world. This paper attempts to sketch the evolution of TC from the view of our theoretical and engineering work. In theory, we focus on protocol design and security analysis. We have proposed the first ECDAA protocol scheme based on q-SDH assumption, which highlights {{a new way to}} design direct anonymous attestation scheme. In technical evolution, we discuss the key technologies of trust chain, trusted network connection and TC testing and evaluation. We break through several key technologies such as <b>trusted</b> <b>boot,</b> OS measurement and remote attestation, and implement a TC system from TPM/TCM to network. We also design and implement a testing and evaluation system of TC platform, which is the first one put into practical application in China. Finally, with the rapid development of cloud computing and mobile applications, TC is moving toward some new directions, such as the trust in cloud and mobile environments, new TPM standard, and flexible trust execution environment trust establishment method. Trusted computing (TC) is an emerging technology to enhance the security of various computing platforms by a dedicated secure chip (TPM/TCM), which is widely accepted by both the industrial and academic world. This paper attempts to sketch the evolution of TC from the view of our theoretical and engineering work. In theory, we focus on protocol design and security analysis. We have proposed the first ECDAA protocol scheme based on q-SDH assumption, which highlights a new way to design direct anonymous attestation scheme. In technical evolution, we discuss the key technologies of trust chain, trusted network connection and TC testing and evaluation. We break through several key technologies such as <b>trusted</b> <b>boot,</b> OS measurement and remote attestation, and implement a TC system from TPM/TCM to network. We also design and implement a testing and evaluation system of TC platform, which is the first one put into practical application in China. Finally, with the rapid development of cloud computing and mobile applications, TC is moving toward some new directions, such as the trust in cloud and mobile environments, new TPM standard, and flexible trust execution environment trust establishment method...|$|E
40|$|Abstract. Virtual Private Networks are {{a popular}} {{mechanism}} for building complex network infrastructures. Such infrastructures are usually accompanied by strict administrative restrictions on all VPN endpoints {{to protect the}} perimeter of the VPN. However, enforcement of such restrictions becomes difficult if these endpoints are personal computers used for remote VPN access. Commonly employed measures like anti-virus or software agents fail to defend against unanticipated attacks. The Trusted Computing Group invested significant work into platforms that are capable of secure integrity reporting. However, <b>trusted</b> <b>boot</b> and remote attestation also require a redesign of critical software components to achieve their full potential. In this work, we design and implement a VPN architecture for trusted platforms. We solve the conflict between security and flexibility by implementing a selfcontained VPN service that resides in an isolated area, outside the operating system environment visible to the user. We develop a hardened version of the IPsec architecture and protocols by addressing known security issues and reducing the overall complexity of IPsec and IKEv 2. The resulting prototype provides access control and secure channels for arbitrary local compartments and is also compatible with typical IPsec configurations. We expect our focus on security and reduced complexity to result in much more stable and thus also more trustworthy software. ...|$|E
40|$|This work {{contributes}} technical to {{the field}} of fair exchange protocols by proposing a new way to move safeguarded secrets between cryptographically secure endpoints excluding the possibility of duplication. After a brief introduction and presentation of an overview of the subject matter, the problem areas of creating a way to teleport secrets with the help of tamper-resistant hardware are defined. Objects like the CASTOR (a HSM element), eCoins (the secrets) and a copy-less transportation (the teleportation protocol) are introduced as key elements for the intended solution to build the proposed technical framework. With this in hand, its application could work as central exchange engine in the construction of a Digital Cash environment. Adding an ATM (the eMint) and a trust center (the CA) to the scenario taking the role of an optimistic Trusted Third Party (TTP) provides generatability (minting new eCoins) and revocability (blacklisting existing eCoins and eWallets) to the system. This work describes key elements of the proposed Digital Cash framework named fairCASH with the required accuracy tied and held together by defining assumptions, objectives, properties and specific objects. This then leads to a technological solution for building an electronic payment system based upon transferable eCoins. [chapter 2] Thematically this thesis starts providing a brief state-of-the art overview about how the field of mobile commerce gets involved by shifting more and more business from legacy methods to the Internet based ones. The need of an easy and safe way to endorse this transition with an adequate payment system is shown. The reader will find a first impression of the fairCASH architecture, infrastructure, and capabilities through the explanation of the main elements in its environment: eCoins based upon certificates, eWallets, and teleportation. In a first contribution overall guideline arguments are presented, why technology based developments are best suited to provide the tools for innovations like Digital Cash. The fundamental difference between token based blinding techniques widely used as a mean to protect ePayment systems against multi-spending and the proposed system by discussing the adversarial character for payment system users connected to that property is emphasized. Next, well-chosen system properties illustrating the real needs are presented. Here the interested reader will find a plurality of information around the fair exchange subject, starting with a formal definition. By following the existing literature, {{it is obvious that the}} exchange protocol has to be delayed fair, time lined, and effective to guarantee atomic parallelism. Naming the most important success factors for any Digital Cash system, this thesis goes on in its way to discuss functional must-have key elements including their meaning for a later protocol definition proposal. This chapter will be followed by a brief discussion of the characteristically metrics alongside with a comparison of Digital-Cash- and physical-token-currencies (by providing facts related to the €uro system), and finally a clear and pragmatic scenario definition including commented descriptions of a selection of contemporary (and failed) ePayment systems. The possibility of turning a technology into business is mostly an exciting case. This thesis looks and discusses questions with respect to the central business: • Can fairCASH be the base to offer essential customer value? • Will it be possible to find enough advantages compared to other cash services? • Can such a technology offer a significant level of user satisfaction? Payments are actuated by humans but effected and conducted by technical means. This thesis takes a look onto the technical environment about how the interaction takes place. This includes possible configurations about the eWallet operation methods for device discovery and pairing. The way this is done decides about the ability and performance of such a financial infrastructure for their usage not only on a PoS but also on payment gates for masses. [chapter 3] Next, the underlying formal communication message channel model is introduced, followed by the factual issue of packet loss and the ‘byzantine generals’ undecidability state, which has to be respected in the following. The knowledge of the “position of the value” (ownership) during the transmission under all circumstances is mission critical. Acceptance of the fact to live with an unreliable channel for exchanging messages between Alice and Bob has a great influence on how to deal with atomic commitments, a desired feature in the termination phase of the teleportation protocol. The effect of state inconsistency in two-party communication environments based upon atomic delivery as proposed in literature is reviewed and it is concluded that up today there is no standard way to solve the atomic commitment problem within the fairCASH environment by applying existing methods. [chapter 4] The previous discussion of different privacy levels and their meaning for anonymity concepts including unobservability, untraceability or unlinkability is pointing the way to a “delayed-true two-party fair exchange protocol”. Naming the requirements, this thesis proposes a general and modular definition for protocol assumptions, objectives and properties. Thereafter, a basic notation for the teleportation protocol is put on the table, following the usual methodology in consideration of the specific needs in the presented case. Describing the exchanged protocol messages, a complete definition about their structure and meanings is given. With that detailed step-by-step presentation and exhaustive discussion of all messages including their embedded elements, the reader is invited to follow Alice and Bob by logically stepping through the whole exchange process. Thereafter, the associated protocol states will be discussed and the analysis of achievable fairness, reasons why choosing special decisions in one case and in other cases being constrained by circumstances is presented. This leads to the solution about how to guarantee (by potentially recreating) true fairness through the usage of affidavits, proving a loss of value without exposing the system to new fraud threats, usable for automated reimbursements. Taking a closer look to the performance of the exchange, the forfeiture probability can be determined in the worst case scenario for transactions in the need of fairness recreation to an upper limit of 3 % (never expected to exceed 1 ‰ in practice) based upon the nature of the teleportation protocol itself and the effective pledged Quality of Service (QoS) defined by international standards and recommendations. A calculation of transactions times in different networks based on a previously done estimation of message sizes shows an asymptotic barrier of about one second, introduced by the assumed processing speed of the eWallet. At this instance, it should be pointed out, that data objects are playing an important role in the protocol presented. In combination with the transfer protocol itself, they provide and guarantee the proposed protocol properties including and conforming to an ITU-T X. 509 v 3 based PKI trust architecture. [chapter 5] Forgery and multi-spending are the basic threats to counter in any financial system based on token circulation. A short presentation of the potentially different (technical) risks introduced by such a system is discussed, concluding to the question of possibility “to cheat the fairCASH system without tampering the eWallet”. Goals are discussed as ranking criteria, what needs a protection, and which skills do attackers have. To counter and stabilize the presented fairCASH system, a basic security management model and questions about how to respond to attack scenarios are introduced. To make this more practical, known basic attacks are classified, ordered and grouped into different threat categories. [chapter 6] Protection is the first obligation in an unsafe environment. The degree of protection is crucial to make a system like fairCASH operational or dysfunctional. Given enough time and resources, every protection system can be broken. However, it is good news that the postulation of the requirement for tamper-proved hardware, which we all know does not exist, is not necessary. It is shown that one of the central points of interest is: How long can an eWallet remain in the open market before it gets cracked. This is also a function of the continuous technical (attack) progress in a world where yesterdays technologies become cheap and widely available to today’s attackers. This opens a race in which the manufaction of an eWallet starts on the leading edge position, while continuously dropping down to an imaginary bottom line, reaching the point in time being replaced by a new one including again the up-to-time defense technologies; an ongoing continuing cycle. As rule of thumb, it should be noticed that capabilities of silicon based HSMs should not be overestimated and capabilities of attackers must never be underestimated. It will be a bad design decision using just a few (or a single) system component(s) in a financial environment (e. g. eWallets) as sole barrier, standing between the hacker and the money. Nevertheless, the CASTOR is an essential part of the proposed design philosophy within the fairCASH system introducing countermeasures relating to possible eWallet integrity manipulation attacks. A good tamper-protected hardware with adequately chosen instruments against anticipated attacks joint risk management and safeguards against hypothetical losses on system level is a good starting point. This thesis references existing and introduces some new countermeasures like the presented TRUSTLET concept, contributing to the secure boot paradigm first presented by the AEGIS architecture [9] in combination with the Maze of Knossos first introduced with this thesis. [chapter 7] In the conclusion of this thesis, the main results are compiled, revised and again presented. A small outlook to desirable future activities is formulated. [chapter 8] Additional notes to possible entrapments for the overall fairCASH system are given, even if elements like eWallets and their protocols are well protected. They are followed by remarks to the naming convention of VPN and VPCs (used for the same matter within this thesis). Some basic reasons why smart cards and TPMs are not enough in high secure based application are shown combined with the question why black box security should be avoided. This is closed by reasoning, why future ICT security will be based on secure hardware. A comprehensive presentation of all data objects including key rings used within the system containing private, public and session keys, the use of certificates and CRLs and how this is interwoven with the proposed services accounts for an understanding of the network infrastructure leads to an overall understanding of the reader. Another interesting point is the introduced way of a flexible crypto-regulation readiness through the usage of Capability-Flag-Vectors (see on page 141), making it possible to adapt and obey to national country oriented restrictions for the usage of encryption technology important for cross-boarder communications. This work is concluded by explaining the significance and structure of the data objects used within this thesis, followed by a comprehensive list of tables and references. [chapter 9 and 10] 1. 3 Contribution to the State of the Art Traditionally, the design of a payment systems is closely related to the human habit: Already in a very early state, money became an integral part of mankind’s existence, almost at all locations of discovery of ancient settlement places, detections for natural money were made by historians. Today, we are where our children are called ‘digital natives’, living in a world of networks and embedded computational resources everywhere. One of the first innovative contributions to Digital Cash was done by David Chaum 1990 with his eCash system based upon the blind digital signature protocol paradigm (see on page 39). The appealing logic behind his mathematical invention lead to the construction of ‘blinded coins’, containing the identity of the original owner and being able to reveal it case of multi-spending. The Digital Cash concept of fairCASH mimics the behavior of physical cash. Due to its coin concept, a value transfer between payer and payee is realized by transferring the ownership of the coin. An essential part is the way how this transfer is conducted: Following the cash paradigm, it needs to be done peer-to-peer and offline in a repeatable way. Such a transfer is called teleportation. The main technical problem is to guarantee fairness under all circumstances. The fundamental effect of the Byzantine Generals’ undecidability state issue (see page 57) does not allow conducting such a transfer without a (trusted) third party. This fact seems to contradict the offline attribute of the aspired cash transfer. To the author’s knowledge, there has not been any treatment of this challenging problem, neither in the practical field nor in the literature over the last 10 years. The first part of this thesis is devoted to the study of the phenomenon “cash” from a technical perspective with a small digression describing a hypothetical business case. This is done by looking what is documented in the literature about previous attempts to create electronic payment systems focusing on ones with Digital Cash affinity. Thus, the second part, as the mayor contribution to this work, makes a proposal how to implement the desired teleportation. The result of any untreated Byzantine transfer is either a potential loss, or overspending of the transferred items, in this case the value of the eCoin(s). Taken as a challenge to computational fairness in the field of electronic commerce, the presented solution firstly separates all ‘good’ transfer cases from the failed ones. It should be mentioned that the transfer itself is scaled to a heuristic policy of ‘no profit from any failure’ with the effect to increase the loss probability. These ‘bad’ transfers are post-processed by the local eWallet ‘enjoying’ a ‘controlled annihilation’ of all affected eCoins and the creation of an affidavit for the external arbiter (eMint). This separation causes temporal unfairness to one or even both protocol entities because of the value loss connected to such an action. That is the reason to call this a ‘delayed-true two-party fair exchange’. The loss proofs can be turned into new value (e. g. exchanged against eCoins) in a succession step at any time outside the transfer protocol. This mechanism disconnects the transfer from the necessity of being online. The reimbursement process has to be negotiated with the eMint in the need to be done online. All this can be achieved in an automated and user transparent way. In the last part, an attempt is made to collect, organize and supplement threads, hacker measures and technical countermeasures according to the challenging eWallet construction. Protection guidelines are presented, including the CASTOR approach as system-on-chip containment to deliver the needed grade of security, the <b>trusted</b> <b>boot</b> through TRUSTLETs, the usage of a physical uncloneable function and the introduction of the Maze of Knossos. Taking security as an important decisive feature in the field of value transactions, recommendations are made which methods are best suited to implement cryptographic functionality on eWallets at the current state of technology. Digitale Bargeld-Systeme kombinieren Erkenntnisse aus Kryptografie und eCommerce. Unter solchen Systemen werden finanzielle Rotations-Systeme mit anonym zirkulierenden, serialisierten und authentisierten Bitmuster-Entitäten zur Wertaufbewahrungs- und Zahlungsfunktionalität verstanden. Eine zentrale wirtschaftliche Forderung ist dabei die Umlauffähigkeit, auch bezeichnet als Transferabilität, die „offline“ in direkter Weise geschieht. Dies steht jedoch in scheinbarem Widerspruch zum Problem der Entstehung und Verwendung von Münzkopien, dem „Multi-Spending“. Zur Auflösung dieses Konfliktes verwenden fast alle bisherigen Verfahren das Prinzip der konditionierten Anonymität von Einweg-Token-Systemen, das die Identität des Besitzers zum festen Bestandteil einer jeden derartigen digitalen Münze macht. Grund: Sollte ein solcher eCoin mehrfach verwendet werden, lässt sich die Identität des Besitzers rechtlich eindeutig ermitteln. Probleme einer solchen Lösung sind jedoch die damit verbundenen Konsequenzen bezüglich Anonymität und Transferabilität: Wesentliche Bargeld-Eigenschaften gehen nämlich verloren. Daher lassen sich bis heute physischem Bargeld vorbehaltene Eigenschaften technisch für elektronische Token nicht realisieren. Die Aufgabe der vorliegenden Dissertation bestand in der Entwicklung eines Systemkonzepts für die Mehrweg-Token-System-Alternative, das die meisten Eigenschaften physischen Bargelds in einem digitalen Medium wie dem Internet abbilden kann, insbesondere die essentielle Eigenschaft der unbegrenzten Weitergabe ohne die Inkaufnahme von Abstriche bei der Systemsicherheit. Bargeld-artige Systeme ohne solchen Mehrwert erscheinen aus Anwendersicht wenig attraktiv. Diese Dissertation wagt die These, dass sich die Versprechen des elektronischen Commerce der New Economy ohne die Einlösung der ökonomischen Taxonomiefaktoren eines mobilen, anwenderfreundlichen Bargeld-Systems nicht (optimal) erfüllen lassen. Im Blickpunkt der vorliegenden Dissertation stehen die Voraussetzungen für die konkrete Machbarkeit digitalen Bargeldes mit den Eigenschaften seines physikalischen Pendants unter Verwendung heute verfügbarer Basis-Technologien. Dabei nehmen Fragestellungen der Sicherheit zentrale Positionen ein. Zur Verwirklichung der gewünschten Bargeld-Eigenschaften wurde ein kopierfreies Transfer-Protokoll entwickelt, das die anonyme Übertragung elektronischer Münzen, so genannter eCoins, auf Peer-to-Peer-Basis in Form einer Teleportation ermöglicht: Jeder durch dieses Protokoll veranlasste eCoin-Transfer zeichnet sich dadurch aus, dass Münzen bewegt, aber nicht kopiert werden: Sie verschwinden beim Absender, um dann beim Empfänger wieder zu erscheinen. Vorhandene unikative Eigenschaften bleiben jedoch erhalten. Elektronische Portemonnaies, so genannte eWallets, bilden als Chip-Tresore die Endpunkte der Bargeld-Übertragung und sichern sie physikalisch und kryptografisch gegen Analyse und Manipulation. Dieser ebenfalls in dieser Arbeit vorgestellte Ansatz eines „CAsk for Storage and Transport Of access Restricted secrets” (CASTOR) realisiert das bekannte Prinzip eines „Hardware Security Modules” (HSM) oder „Secure Elements“ (SE) auf neuartige Weise und reduziert so, gemeinsam mit dem Einsatz infrastruktureller PKI-Architekturen, ein komplexes Angriffsszenario auf wenige, beherrschbare Elemente. Dennoch verbleibt eine grundsätzliche Hürde, die als Status- bzw. Bestätigungsproblem in Erscheinung tritt. Dabei handelt es sich um ein algorithmisch nicht lösbares fundamentales „common knowledge“-Paradigma bei verteilten Systemen. Es ist auch als „coordinated attack problem“ bekannt und tritt dann auf, wenn der Übertragungskanal innerhalb eines kritischen Zeitfensters zusammenbricht. Das ist in realen Übertragungssystemen grundsätzlich nicht gänzlich zu vermeiden. Dieses Problem wird als „fair exchange“ Defizit verstanden und ist nicht nur technisch substanziell, sondern auch wirtschaftlich signifikant. Transaktionen in (unterschiedlich regulierten) virtuellen (Rechts-) Räumen müssen jedoch mit allen verfügbaren technischen Mitteln und Methoden die Entstehung von Fairness-Defiziten vermeiden, besonders wenn sie „cross-boarder“ realisiert werden sollen. Das hier vorgestellte Lösungskonzept sieht für diesen Fall die offline durchzuführende gezielte Vernichtung betroffener Münzobjekte vor. Im Gegenzug wird ein kryptografischer Verlustbeweis konstruiert, der zu einem späteren Zeitpunkt jederzeit online wieder gegen neue Münzen eingetauscht werden kann. Systemimmanente Sicherheitsmaßnahmen sorgen für eine missbrauchsfreie Nutzung. Diese Aufteilung zum einen in die offline durchgeführte Münzweitergabe und zum anderen in die online durchzuführende Erstattung fehlerhafter Abbrüche kompensiert den Effekt, der als das Problem der "Byzantinischen Generäle" bekannt ist. Dabei handelt es sich um ein Problem der Übereinkunft, das historisch darin bestand, dass räumlich getrennte Heerführer einstimmig beschließen mussten, ob sie eine feindliche Armee angreifen oder nicht, und die dazu auf hin und her zu schickende Boten angewiesen waren. Dieses Problem ist fundamental und besteht auch in der heutigen Telekommunikation. Der eigentliche Transfer bei fairCASH wird als „delayed-true two-party fair exchange of eCoins for a receipt“ bezeichnet. Zur Verständnis des Bedrohungspotentiales rundet die Darlegung von Hackermethoden und den damit verbundenen technischen Risiken diese Arbeit ab. Den erforderlichen Rahmen bilden dabei ein einfaches Management-Modell zur Konkretisierung von Angriffsszenarien und deren Einschätzung sowie die Klassifizierung bekannter Attacken. Darüber hinaus werden einige – auch neue – Methoden vorgeschlagen, wie ein CASTOR-basiertes Portemonnaie auf Chip-Ebene sicherheitstechnisch mit Gegenmaßnahmen versehen werden könnte, um seine Resistenz gegen Angriffe zu erhöhen...|$|E

