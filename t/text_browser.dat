14|49|Public
50|$|By June 1995, NCF had 43,515 {{registered}} {{users and}} was taking action {{to make use}} of the then new World Wide Web through introduction of the Lynx <b>text</b> <b>browser,</b> among other preparations.|$|E
5000|$|An {{independent}} project, libopenmetaverse, {{offers a}} function library for interacting with Second Life servers. libopenmetaverse {{has been used}} to create non-graphic third party viewers, including SLEEK, a <b>text</b> <b>browser</b> using [...]NET, and Ajaxlife, a text viewer that runs in a web browser.|$|E
5000|$|... @import [...] - [...] Whilst Gecko, WebKit and iCab {{download}} {{all media}} stylesheets immediately, Opera only downloads handheld, print, projection and screen media, {{as well as}} speech if [...] "voice" [...] feature is enabled and TV, on TV devices. <b>Text</b> <b>browser</b> emulation mode is only a user stylesheet, so it does not switch to tty media type. This is consistent with older text browsers, which do not respect any CSS.|$|E
5000|$|Pages {{that work}} well in <b>text</b> <b>browsers</b> (and {{hopefully}} screen readers) ...|$|R
5000|$|... 2. Provide {{support for}} <b>text</b> <b>browsers</b> and {{descriptive}} hyperlinks (links such as [...] "this" [...] and [...] "click here" [...] do not alone convey {{the nature of}} the target link); ...|$|R
5000|$|An {{example of}} munging [...] "" [...] via {{client-side}} scripting would be: [...] var name = 'user'; var at = '@'; var domain = 'example.com'; document.write(name + at + domain); The use {{of images and}} scripts for address obfuscation can cause problems for people using screen readers and users with disabilities,and ignores users of <b>text</b> <b>browsers</b> like lynx and w3m, although being transparent means they don't disadvantage non-English speakers that cannot understand the plain text bound to a single language {{that is part of}} non-transparent munged addresses or instructions that accompany them.|$|R
50|$|A {{visually}} impaired reader using a screen reader such as Orca {{will hear the}} alt text {{in place of the}} image. A <b>text</b> <b>browser</b> such as Lynx will display the alt text instead of the image. A graphical browser typically will display only the image, and will display the alt text only if the user asks it to show the image's properties or has configured the browser not to display images, or if the browser was unable to retrieve or to decode the image.|$|E
50|$|By Christmas 1990, Berners-Lee {{had built}} {{all the tools}} {{necessary}} for a working Web: the HyperText Transfer Protocol (HTTP) 0.9, the HyperText Markup Language (HTML), the first Web browser (named WorldWideWeb, which was also a Web editor), the first HTTP server software (later known as CERN httpd), the first web server (http://info.cern.ch), and the first Web pages that described the project itself. The browser could access Usenet newsgroups and FTP files as well. However, it could run only on the NeXT; Nicola Pellow therefore created a simple <b>text</b> <b>browser,</b> called the Line Mode Browser, that could run on almost any computer. To encourage use within CERN, Bernd Pollermann put the CERN telephone directory on the web — previously users had to log onto the mainframe in order to look up phone numbers.|$|E
40|$|We {{provide a}} dynamic systems {{interpretation}} of the coupling of internal states involved in speed-dependent automatic zooming, and test our implementation on a <b>text</b> <b>browser</b> on a Pocket PC instrumented with an accelerometer. The dynamic systems approach {{to the design of}} such continuous interaction interfaces allows the incorporation of analytical tools and constructive techniques from manual and automatic control theory. We illustrate experimental results of the use of the proposed coupled navigation and zooming interface with classical scroll and zoom alternatives...|$|E
5000|$|... #Caption: Graphic of the <b>text</b> (if your <b>browser's</b> font {{is missing}} some characters), click to enlarge ...|$|R
50|$|When a user clicks on the {{underlined}} <b>text,</b> the <b>browser</b> jumps {{from the}} page on which the link is shown to a page of the website of the US Patent and Trademark Office that has the URL (web address) shown above; http://www.uspto.gov/web/offices/pac/doc/general/index.html.|$|R
5000|$|CGI:IRC {{will work}} in most <b>browsers,</b> {{including}} <b>text</b> based <b>browsers</b> such as Links. To make full use {{of most of the}} available features, a newer version is essential; older browsers will work, but CGI:IRC will use a single windowed interface instead and the names list will not update as quickly.|$|R
40|$|We have {{developed}} an automatic abstract generation system for Japanese expository writings based on rhetorical structure extraction. The system first extracts the rhetorical structure, the compound of the rhetorical relations between sentences, and then cuts out less important parts in the extracted structure to generate an abstract of the desired length. Evaluation of the generated abstract showed that it contains at maximum 74 % {{of the most important}} sentences of the original text. The system is now utilized as a <b>text</b> <b>browser</b> for a prototypical interactive document retrieval system. ...|$|E
40|$|In {{this paper}} we show how two {{standard}} outputs from information extraction (IE) systems [...] named entity annotations and scenario templates [...] {{can be used}} to enhance access to text collections via a standard <b>text</b> <b>browser.</b> We describe how this information is used in a prototype system designed to support information workers' access to a pharmaceutical news archive as part of their "industry watch" function. We also report results of a preliminary, qualitative user evaluation of the system, which while broadly positive indicates further work needs to be done on the interface to make users aware of the increased potential of IE-enhanced text browsers...|$|E
40|$|Speed Dependent Automatic Zooming {{proposed}} by Igarashi and Hinckley {{is a powerful}} tool for document navigation on mobile devices. We show that browsing and targeting can be facilitated by using a model-based sonification approach to generate audio feedback about document structure, in a tilt-controlled SDAZ interface. We implemented this system for a <b>text</b> <b>browser</b> on a Pocket PC instrumented with an accelerometer and headset, and found that audio feedback provided valuable information, supporting intermittent interaction, i. e. allowing movement-based interaction techniques to continue while the user is simultaneously involved with other tasks. This was demonstrated by a blindfolded user successfully locating specified elements in a text file. Additional Keywords and Phrases: Speed dependent automatic zooming, sonification, mobile device...|$|E
50|$|HTML5 Audio is {{a subject}} of the HTML5 specification, {{incorporating}} audio input, playback, and synthesis, as well as speech to <b>text,</b> in the <b>browser.</b>|$|R
50|$|AppGeyser {{has many}} {{options to choose}} from for {{creating}} your app. Some of these options include: flappy game, website, <b>browser,</b> <b>text</b> quest, and scratch game.|$|R
40|$|PDBtool version 1. 0 is an {{interactive}} Unix and X/Motif based computer program for investigating the 3 -dimensional (3 -D) structure of proteins using data {{represented by the}} Protein Data Bank (PDB) format. Major components of PDBtool include a 3 -D structure viewer, <b>text</b> <b>browsers</b> from which to investigate components of the structure under study, and a comprehensive set of geometry checking tools. The object oriented software design provides {{a high level of}} interaction between display windows in an effort to provide a more intuitive level of interaction than possible with existing tools. Examples of using PDBtool are provided to illustrate these capabilities. These include: analyzing the distribution of cysteines in {{a member of the family}} of short chain neurotoxins; for the same protein, analyzing outliers in a Ramachandran plot and their associated isotropic temperature factors; and investigating the distribution of heme groups in human deoxyhemoglobin. A detailed description of PDBtool, [...] ...|$|R
40|$|The dynamic systems {{approach}} {{to the design of}} continuous interaction interfaces allows the designer to use simulations, and analytical tools to analyse the behaviour and stability of the controlled system alone and when it is coupled with a manual control model of user behaviour. This approach also helps designers to calibrate and tune the parameters of the system before the actual implementation, and in response to user feedback. In this work we provide a dynamic systems interpretation of the coupling of internal states involved in speed-dependent automatic zooming, and test our implementation on a <b>text</b> <b>browser</b> on a Pocket PC instrumented with a tilt sensor. We illustrate simulated and experimental results of the use of the proposed coupled navigation and zooming interface using tilt and touch screen inpu...|$|E
40|$|Zooming {{proposed}} by Igarashi and Hinckley {{is a powerful}} tool for document navigation on mobile devices. We show that browsing and targeting can be facilitated by using a model-based sonification approach to generate audio feedback about document structure, in a tilt-controlled SDAZ interface. We implemented this system for a <b>text</b> <b>browser</b> on a Pocket PC instrumented with an accelerometer and headset, and found that audio feedback provided valuable information, supporting intermittent interaction, i. e. allowing movement-based interaction techniques to continue while the user is simultaneously involved with other tasks. This was demonstrated by a blindfolded user successfully locating specified elements in a text file. Overview •  Speed-dependent automatic zooming (SDAZ) on mobile devices is a relatively new navigation technique[1] that unifies rate-based scrolling and zooming to overcome the limitations of typical scrolling interfaces and to prevent extreme visual flow...|$|E
40|$|Speed Dependent Automatic Zooming {{proposed}} by Igarashi and Hinckley {{is a powerful}} tool for document navigation on mobile devices. We show that browsing and targeting can be facilitated by using a model-based sonification approach to generate audio feedback about document structure, in a tilt-controlled SDAZ interface. We implemented this system for a <b>text</b> <b>browser</b> on a Pocket PC instrumented with an accelerometer and headset, and found that audio feedback provided valuable information, supporting intermittent interaction, i. e. allowing movement-based interaction techniques to continue while the user is simultaneously involved with other tasks. This was demonstrated by a blindfolded user successfully locating specified elements in a text file. • Speed-dependent automatic zooming (SDAZ) on mobile devices is a relatively new navigation technique[1] that unifies rate-based scrolling and zooming to overcome the limitations of typical scrolling interfaces and to prevent extreme visual flow. • SDAZ is well suited to implementation on mobile devices instrumented with tilt sensors, which can then be comfortably controlled in a single-handed fashion[1]. • Touch screen position control is a new feature in multimodal SDAZ which lets the user freezes the screen by shaking the PDA and tap the screen to select the target. The system automatically scrolls to the target and gradually zooms in fully. • The significant disadvantage of using motion as input in a handheld device is that it reduces the quality of th...|$|E
50|$|Louis J. Montulli II (best {{known as}} Lou Montulli) is a {{programmer}} who {{is well known}} for his work in producing web browsers. In 1991 and 1992, he co-authored a <b>text</b> web <b>browser</b> called Lynx, with Michael Grobe and Charles Rezac, while he was at the University of Kansas. This web browser {{was one of the first}} available and is still in use today.|$|R
25|$|KU's {{academic}} computing {{department was}} {{an active participant in}} setting up the Internet and is the developer of the early Lynx <b>text</b> based web <b>browser.</b> Lynx provided hypertext browsing and navigation prior to Tim Berners Lee's invention of HTTP and HTML.|$|R
50|$|Very few {{systems support}} these encodings. Microsoft Windows {{does not support}} them, for example. It is usually better to use Unicode for proper {{interchange}} of Armenian <b>text</b> for web <b>browsers</b> and email, since most modern computers do not support ArmSCII by default.|$|R
40|$|The DYNAMO {{project is}} {{concerned}} with the assembly of components of interactive systems. It includes a design method, described in this guidebook, and a set of tools that support it. The DYNAMO design method starts with a declarative model of the assembly expressed using a graphical UML CASE tool. From the declarative model, DYNAMO tools automatically generate C++ wrapper classes that glue the components together. The DYNAMO design method comprises three-phases that refine a conceptual model of a proposed assembly into interrelated components organized into layered mode components. In Phase 0, the environment in which the assembly executes is described in terms of external actors, the assembly itself, the communication among them, and the behavioral properties that the assembly guarantees to maintain. Phase 1 asks the designer to partition the assembly into its constituent components and their relationships, assigning responsibility for external actions and guarantee-maintenance to the components appropriately. Finally, Phase 2 asks the designer to layer the constituents as mode components, where lower-level components communicate status changes upward, and higher-level components make specific service requests of lower-level components. For each phase, the guidebook provide a purpose, a diagrammatic representation that describes the resulting design artifact, a set of steps to create that diagram, and a set of guidelines or design rules for making appropriate design decisions. Each phase is illustrated using the example of a simple <b>text</b> <b>browser</b> assembly. At the end of the document, a glossary of all DYNAMO-related terms is provided...|$|E
5000|$|An online rich-text editor is the {{interface}} for editing rich <b>text</b> within web <b>browsers,</b> which presents the user with a [...] "what-you-see-is-what-you-get" [...] (WYSIWYG) editing area. The {{aim is to}} reduce the effort for users trying to express their formatting directly as valid HTML markup.|$|R
5000|$|International {{characters}} were unsupported. Some e-mail {{that was sent}} with a non-ASCII or non-7/8-bit character set was shown {{in the form of}} text attachments, which had to be saved and then read in a web browser, with the <b>browser's</b> <b>text</b> encoding set for a specified code page.|$|R
25|$|In recent years, {{a number}} of small and largely unstandardized markup {{languages}} have been developed to allow authors to create formatted <b>text</b> via web <b>browsers,</b> for use in wikis and web forums. These are sometimes called lightweight markup languages. Markdown or the markup language used by Wikipedia are examples of such wiki markup.|$|R
50|$|The AAlib {{open source}} library {{provides}} programs and routines {{that specialize in}} translating standard image and video files, such as PNG and WMV, and displaying them {{as a collection of}} ASCII characters. This enables a rudimentary viewing of graphics files on text mode systems, and on <b>text</b> mode web <b>browsers</b> such as Lynx.|$|R
40|$|Designers and {{researchers}} of human-computer interaction need tools that permit the rapid exploration {{and management of}} hypotheses about complex interactions of designs, task conditions, and user strategies. Dynamic programming is introduced as a such a tool {{for the analysis of}} information foraging technologies. The technique is illustrated {{in the context of the}} Scatter/Gather <b>text</b> clustering <b>browser.</b> Hypothetical improvements in <b>browser</b> speed and <b>text</b> clustering are examined in the context of variations in task deadlines and the quality of the document repository. A complex and non-intuitive set of tradeoffs emerge from even this simple space of factors, illustrating the general utility of the approach...|$|R
40|$|Abstract. We present various {{visualizations}} for the Text Re-use {{found among}} texts {{of a collection}} to support answering a broad palette of re-search questions in the humanities. When juxtaposing all texts of a cor-pus in form of tuples, we propose the Text Re-use Grid as a distant reading method that emphasizes text tuples with systematic or repeti-tive Text Re-use. The <b>Text</b> Re-use <b>Browser</b> provides a closer look on the Text Re-use between the two texts of a tuple. Additionally, we present Text Re-use Alignment Visualizations to improve the readability of Text Variant Graphs {{that are used to}} compare various text editions to each other. Finally, we illustrate the benefit of the proposed visualizations with four usage scenarios for various topics in literary criticism...|$|R
50|$|The Lemur Project is a {{collaboration}} between the Center for Intelligent Information Retrieval at the University of Massachusetts Amherst and the Language Technologies Institute at Carnegie Mellon University. It develops the Lemur Toolkit, an open-source (BSD license) software framework for building language modeling and information retrieval software, and the Indri search engine. This toolkit is used for developing search engines, <b>text</b> analysis tools, <b>browser</b> toolbars, and data resources {{in the area of}} IR.|$|R
50|$|The {{increased}} use of mobile devices that include full featured internet browsers and downloadable applications has created a demand for parental controls on these mobile, smart devices. In November 2007, Verizon was the first carrier to offer age-appropriate content filters {{as well as the}} first to offer content-generic content filters recognizing that mobile devices were used to access all manner of content from movies and music to short-code programs and websites. In June 2009, in iPhone OS 3.0, Apple was the first company to provide a built in mechanism on mobile devices to create age brackets for users that would block unwanted applications from being downloaded to the device. There are also applications that allow parents to monitor real time conversations on their children's phone via access to <b>text</b> messages, <b>browser</b> history, and application history. Applications of this sort have created an rising competition in their market.|$|R
40|$|Experiments were {{conducted}} {{to find out the}} best display format for chinese text on WWW pages. One group of subjects was assigned to complete a keyword searching task and another group to finish a reading comprehension task. Essays were displayed on web pages with different font types and line spacing. Subjects' preference of display formats and their psychological functions were tested after that. The study of the correlations between subjects' performance, their preference and their psychological functions shows why people perform differently in handling Chinese <b>text</b> on Web <b>browser.</b> IUPsy...|$|R
40|$|In this paper, {{we study}} the {{relation}} between the user's degree of understanding and his/her eye movements; in an effort to realize a proactive interface that monitors the user and provides a contextual support. The application is a gaze sensitive dictionary that helps the user when reading a <b>text</b> in a <b>browser's</b> window. Not only is the user's gaze analyzed but also the context and thus the difficulty degree of the text being read. The experiment results suggest using regressions as an indicator to trigger the help process along with a context grounding approach...|$|R
40|$|Kyushu University 21 st Century COE Program Development of Dynamic Mathematics with High Functionality九州大学 21 世紀COEプログラム「機能数理学の構築と展開」We {{propose a}} {{mathematical}} knowledge browser which helps people to read mathematical <b>text.</b> In the <b>browser</b> existing printed materials can be scanned and recognized by OCR (Optical Character Recognition). One of technologies {{needed to make}} the browser ideal is a method to extract automatically the logical structures and links like definitions, assertions, equations, proofs, citations from documents after OCR. In view of future development towards this goal, this paper discusses the method to extract the logical structures and links...|$|R
