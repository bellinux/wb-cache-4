34|60|Public
50|$|Typical risk {{analysis}} and evaluation techniques {{adopted by the}} medical device industry include hazard analysis, fault tree analysis (FTA), failure mode and effects analysis (FMEA), hazard and operability study (HAZOP), and risk <b>traceability</b> <b>analysis</b> for ensuring risk controls are implemented and effective (i.e. tracking risks identified to product requirements, design specifications, verification and validation results etc.). FTA analysis requires diagramming software. FMEA analysis can be done using a spreadsheet program. There are also integrated medical device risk management solutions.|$|E
50|$|DO-178 {{requires}} a documented connection (called a trace) between the certification artifacts. For example, a Low Level Requirement (LLR) traces up to a High Level Requirement (HLR). A <b>traceability</b> <b>analysis</b> is {{then used to}} ensure that each requirement is fulfilled by the source code, that each requirement is tested, that each line of source code has a purpose (is connected to a requirement), and so forth. Traceability ensures the system is complete. The rigor and detail of the certification artifacts {{is related to the}} software level.|$|E
40|$|Abstract <b>Traceability</b> <b>analysis</b> is a {{technique}} that enables the verification of software requirements within the software life cycle. Within a context {{where there is a}} lack of common understanding of what must be traced, a number of methods have been proposed to implement software requirements <b>traceability</b> <b>analysis,</b> many of these methods dealing with software requirements expressed in natural language. This paper provides a graphical model to visualize software functional requirements that facilitates identifying functional traceability links. An application of the proposed model is illustrated through a case study taken from a process control system...|$|E
40|$|This paper {{reports on}} human factors data <b>traceability</b> and <b>analysis</b> of the European Community¿s Major Accident Reporting System (MARS). This {{is the main}} EU {{instrument}} to major accident data collection, analysis and dissemination for process industry according to {{the provisions of the}} Seveso II directive. To date, the MARS database counts approximately 700 Seveso-type major events (November 2008). The MARS system is investigated in terms of human factors data and case studies exploring the relevance of human factors in accident events causation and identification issues. The human factors model and taxonomy as it is applied in the MARS system is reviewed. Criteria to enhance <b>traceability</b> and <b>analysis</b> about human related causes are then considered in detail. Finally, certain limitations affecting the system are pointed out. Findings are expected to favour future modelling and research efforts toward further MARS system improvements. JRC. G. 7 -Traceability and vulnerability assessmen...|$|R
5000|$|Spec-TRACER - unified {{requirements}} {{life-cycle management}} application {{designed specifically for}} FPGA and ASIC designs. Facilitates requirements capture, management, <b>analysis,</b> <b>traceability</b> and reporting; integrates with Windows-based HDL design and simulation tools.|$|R
50|$|Depending on the organization's {{expectations}} for software development, Development Testing might include static code analysis, data flow analysis, metrics analysis, peer code reviews, unit testing, code coverage <b>analysis,</b> <b>traceability,</b> and other software verification practices.|$|R
40|$|International audienceThe ModelWriter {{platform}} {{provides a}} generic framework for automated <b>traceability</b> <b>analysis.</b> In this paper, we demonstrate how this framework {{can be used}} to trace the consistency and completeness of technical documents that consist of a set of System Installation Design Principles used by Airbus to ensure the correctness of aircraft system installation. We show in particular, how the platform allows the integration of two types of reasoning: reasoning about the meaning of text using semantic parsing and description logic theorem proving; and reasoning about document structure using first-order relational logic and finite model finding for <b>traceability</b> <b>analysis...</b>|$|E
40|$|Background. Olive oils (OOs) show high {{chemical}} variability due {{to several}} factors of genetic, environmental and anthropic types. Genetic {{and environmental factors}} are responsible for natural compositions and polymorphic diversification resulting in different varietal patterns and phenotypes. Anthropic factors, however, are at the origin of different blends’ preparation leading to normative, labelled or adulterated commercial products. Control of complex OO samples requires their (i) characterization by specific markers; (ii) authentication by fingerprint patterns; and (iii) monitoring by <b>traceability</b> <b>analysis.</b> Methods. These quality control and management aims {{require the use of}} several multivariate statistical tools: specificity highlighting requires ordination methods; authentication checking calls for classification and pattern recognition methods; <b>traceability</b> <b>analysis</b> implies the use of network-based approaches able to separate or extract mixed information and memorized signals from complex matrices. Results. This chapter presents a review of different chemometrics methods applied for the control of OO variability from metabolic and physical-chemical measured characteristics. The different chemometrics methods are illustrated by different study cases on monovarietal and blended OO originated from different countries. Conclusion. Chemometrics tools offer multiple ways for quantitative evaluations and qualitative control of complex chemical variability of OO in relation to several intrinsic and extrinsic factors...|$|E
40|$|<b>Traceability</b> <b>analysis</b> {{is crucial}} to the {{development}} of web-centric systems, particularly those with frequent system changes, fine-grained evolution and maintenance, and high level of requirements uncertainty. A trace model {{at the level of the}} web system architecture is presented in this paper to address the specific challenges of developing webcentric systems. The trace model separates the concerns of different participants in the web development life cycle into perspectives; and classifies each perspective into structure, behaviour and location. Tracing relationships are presented along two dimensions: within perspectives; and among perspectives. Examples of tracing relationships are presented using UML. 1...|$|E
40|$|AbstractTraceability using {{video is}} a new trend {{in the process of}} food or {{agriculture}} related material production. However, in these applications the bandwidth and computation capacity are limited. It is necessary to improve the traditional object detection methods for these applications. In this paper, we present an algorithm combining non-parametric method and frame difference for <b>traceability</b> video <b>analysis.</b> According to the experimental results, the proposed method performance better than the traditional frame difference and GMM...|$|R
40|$|This study {{reports the}} {{findings}} for an analysis using {{the computer program}} NAADSM (North American Animal Disease Spread Model) and a supply-driven social accounting matrix to {{examine the impact of}} a hypothetical foot-and-mouth disease (FMD) outbreak in a relatively isolated part of the United States, Utah, under various levels of livestock <b>traceability.</b> The <b>analysis</b> demonstrates that a significant regional economic impact in Utah would result from an FMD outbreak but that improved levels of traceability would be very important in helping to reduce the negative economic consequences of the outbreak...|$|R
40|$|As the {{standard}} for object-oriented analysis and design, the UML (Unified Modeling Language) metamodel, as well as contemporary CASE (Computer-Aided Software Engineering) tools, must provide adequate and integrated support for all essential aspects of software evolution. This includes version control, <b>traceability,</b> impact <b>analysis,</b> change propagation, inconsistency management, and model refactorings. This chapter focuses on the latter two aspects, and shows how tool support for these aspects can be provided. First, we extend the UML metamodel with support for versioning. Second, we make a classification of the possible inconsistencies of UML design models. Finally, we use the formalism of description logics, a decidable fragment of first-order predicate logic, to express logic rules that can detect and resolv...|$|R
40|$|With {{the growing}} {{popularity}} of complex dynamic activities in manufacturing processes, traceability of the entire life of every product has drawn significant attention especially for food, clinical materials, and similar items. This paper studies the traceability issue in cyber-physical manufacturing systems from a theoretical viewpoint. Petri net models are generalized for formulating dynamic manufacturing processes, based on which a detailed approach for enabling <b>traceability</b> <b>analysis</b> is presented. Models as well as algorithms are carefully designed, which can trace back the lifecycle of a possibly contaminated item. A practical prototype system for supporting traceability is designed, and a real-life case study of a quality control system for bee products is presented to validate the effectiveness of the approach...|$|E
40|$|Abstract: Web system {{specially}} requires {{high level}} maintainability because it needs frequent modifications to solv-ing security {{problems and the}} latest information release. Corresponding between a program and its specifications {{is one of the}} elements of software quality for maintainability. This paper proposed a <b>traceability</b> <b>analysis</b> method between a program and its specifications for the event driven system that permits to formalize the program structure in regular expression considering to the state transition of the event driven system. It also discussed an application method and an example for its application to a HTML document with JavaScript program. As a result it can be checking correspondence between HTML document with JavaScript and its specifications in equations...|$|E
40|$|An {{important}} aspect in SoS is {{the realization of}} the concerns in different systems that work together. Identifying and locating these concerns is important to orchestrate the overall activities and hereby to achieve the overall goal of the SoS. Moreover, concerns in SoS are rarely stable and need to evolve in different ways and different times in accordance with the changing requirements. To manage the SoS and cope with the evolution of concerns it is necessary that the dependency links between the concerns and the system elements can be easily traced. In this paper, we present the different traceability requirements and the corresponding metamodel to support modeling traceability and supporting <b>traceability</b> <b>analysis</b> approaches within the SoS context. </p...|$|E
40|$|The goal of {{this paper}} is to {{emphasize}} the importance of developing complete and unambiguous requirements early in the project cycle (prior to Preliminary Design Phase). Having a complete set of requirements early in the project cycle allows sufficient time to generate a traceability matrix. Requirements <b>traceability</b> and <b>analysis</b> are the key elements in improving verification and validation process, and thus overall software quality. Traceability can be most beneficial when the system changes. If changes are made to high-level requirements it implies that low-level requirements need to be modified. Traceability ensures that requirements are appropriately and efficiently verified at various levels whereas analysis ensures that a rightly interpreted set of requirements is produced...|$|R
40|$|This paper’s goal is {{to assess}} {{the extent to which}} {{producers}} in Developing Countries have coped stricter US food safety regulations. We approach the question by calculating refusals/imports ratios and their trends for a sample of Developing Countries. We conclude there is a learning process in low value added products. food safety, <b>traceability,</b> value chain <b>analysis,</b> trade, Latin America and the Caribbean, Food Consumption/Nutrition/Food Safety, International Development, International Relations/Trade,...|$|R
40|$|High purity salts {{are widely}} applied in several {{analytical}} processes, such as, quality control and {{preparation of the}} calibration curves. The metrological control of the purity of these salts is essential to ensure the <b>traceability</b> of <b>analysis</b> based on them. Typically, the contamination of the high purity salts is present in trace levels and the ion chromatography is the most suitable tool for identification and quantification of these contaminants, providing a study of purity of these salts through a sensitive technique, with direct injection, low volume of sample and without the need of pre-concentration. This paper aims to demonstrate traceability of the determination of bromide as impurity in a potassium chloride sample using a validated analytical method through ion chromatography by conductivity suppressor. 1...|$|R
40|$|In {{order to}} improve SPL {{traceability}} by using design rationale, this chapter introduces the <b>traceability</b> <b>analysis</b> framework (TAF), which, when combined with the AMPLE Traceability Framework, provides extra traceability capabilities for variability management. The TAF is a programmable and extensible framework that aims to support the product line developers to understand the context, evolution and shortcomings in the design {{by means of the}} simulation of the design and the explanation of design rationale. Good expressiveness of the design rationale and the design issues is obtained by making the distinction between model-level semantics and method-level semantics clear and sepatately verifiable. Traceability is based on verifying both semantics, querying the design rationale and querying the model dependencies...|$|E
40|$|Modeled carbon (C) storage {{capacity}} is largely {{determined by the}} C residence time and net primary productivity (NPP). Extensive {{research has been done}} on NPP dynamics but the residence time and their relationships with C storage are much less studied. In this study, we implemented a <b>traceability</b> <b>analysis</b> to understand the modeled C storage and residence time in three land surface models: CSIRO's Atmosphere Biosphere Land Exchange (CABLE) with 9 C pools, Community Land Model (version 3. 5) combined with Carnegie-Ames-Stanford Approach (CLM 3. 5 -CASA) with 12 C pools and Community Land Model (version 4) (CLM 4) with 26 C pools. The globally averaged C storage and residence time was computed at both individual pool and total ecosystem levels. The spatial distribution of total ecosystem C storage and residence time differ greatly among the three models. The CABLE model showed a closer agreement with measured C storage and residence time in plant and soil pools than CLM 3. 5 -CASA and CLM 4. However, CLM 3. 5 -CASA and CLM 4 were close to each other in modeled C storage but not with measured data. CABLE stores more C in root whereas CLM 3. 5 -CASA and CLM 4 store more C in woody pools, partly due to differential NPP allocation in respective pools. The C residence time in individual C pools is greatly different among models, largely because of different transfer coefficient values among pools. CABLE had higher bulk residence time for soil C pools than the other two models. Overall, the <b>traceability</b> <b>analysis</b> used in this study can help fully characterizes the behavior of complex land models...|$|E
40|$|Representations of the {{terrestrial}} carbon cycle in land models {{are becoming increasingly}} complex. It is crucial to develop approaches for critical assessment of the complex model properties {{in order to understand}} key factors contributing to models' performance. In this study, we applied a <b>traceability</b> <b>analysis</b> which decomposes carbon cycle models into traceable components, for two global land models (CABLE and CLM-CASA′) to diagnose the causes of their differences in simulating ecosystem carbon storage capacity. Driven with similar forcing data, CLM-CASA′ predicted [*]∼  31  % larger carbon storage capacity than CABLE. Since ecosystem carbon storage capacity is a product of net primary productivity (NPP) and ecosystem residence time (τ E), the predicted difference in the storage capacity between the two models results from differences in either NPP or τ E or both. Our analysis showed that CLM-CASA′ simulated 37  % higher NPP than CABLE. On the other hand, τ E, which was a function of the baseline carbon residence time (τ ′ E) and environmental effect on carbon residence time, was on average 11  years longer in CABLE than CLM-CASA′. This difference in τ E was mainly caused by longer τ ′ E of woody biomass (23 vs. 14  years in CLM-CASA′), and higher proportion of NPP allocated to woody biomass (23 vs. 16  %). Differences in environmental effects on carbon residence times had smaller influences on differences in ecosystem carbon storage capacities compared to differences in NPP and τ ′ E. Overall, the <b>traceability</b> <b>analysis</b> showed that the major causes of different carbon storage estimations were found to be parameters setting related to carbon input and baseline carbon residence times between two models...|$|E
40|$|The {{assurance}} of data quality {{can be a}} complex process requiring careful planning. The planning process described in this paper uses Data Quality Objectives as the foundation. The described process considers three steps: project requirement identification, definition of the information necessary to answer the questions, and data collection and management. Since sufficient levels of documentation are required at all levels, uncertainty <b>analysis,</b> <b>traceability</b> and custody, data maintenance, and data evaluation and review are also discussed...|$|R
40|$|Firms may {{not succeed}} in {{business}} if strategies are not properly implemented in practice. Every firm needs to know, represent and master its value creation logic, not only {{to stay in business}} but also to keep growing. This paper is about focusing on an important topic in the field of strategic management and economics: value creation. We develop a value creation framework and then use the ArchiMate enterprise architecture modeling standard to model value creation, using a four step method. The output of this method is a new model, the value creation model, which represents value creation by a firm. We demonstrate the use of the method with an example case. Potential uses of the value creation model, including <b>traceability,</b> sensitivity <b>analysis</b> and a networked enterprise architecture, are discussed in detail...|$|R
40|$|Abstract—In this paper, {{we propose}} a robust and {{efficient}} signature scheme for Vehicle-to-Infrastructure communications, called Binary Authentication Tree (BAT). The BAT scheme can effectively eliminate the performance bottleneck when verifying {{a mass of}} signatures within a rigorously required interval, even under adverse scenarios with bogus messages. Given any n received messages with k ≥ 1 bogus ones, the computation cost to verify all these messages only requires approximately (k + 1) · log(n/k) + 4 k − 2 time-consuming pairing operations. The BAT scheme can also be gracefully transplanted to other similar batch signature schemes. In addition, it offers the other conventional security for vehicular networks, such as identity privacy and <b>traceability.</b> Theoretical <b>analysis</b> and simulation results demonstrate the validity and practicality of the BAT scheme. Index Terms—Binary authentication tree, identity-based cryptography, robust, signature, vehicular communication. I...|$|R
40|$|Abstract. Model {{transformation}} approach {{allows us}} to develop automatic and flexible solutions for the software evolution. Application of model transformation concepts was shown for the generic framework for traceability in object-oriented designs. Three transformations within the framework were considered: the input transformation of any model to the internal format, the <b>traceability</b> <b>analysis</b> generating a dependency area for a given model, and the output transformation of the resulting dependency area. They can be realized as model-to-model transformations {{with respect to their}} metamodels and in accordance to the independently specified transformation rules. In the input and output transformations the language and tools of the QVT standard proposed by the OMG were applied. In the remaining transformation, traceability rules were defined as automata with transitions labeled with conditions and actions. ...|$|E
40|$|During iterative, UML-based {{software}} development, various UML diagrams, {{modeling the}} same system {{at different levels of}} abstractions are developed. These models must remain consistent when changes are performed. In this context, we refine the notion of impact analysis and distinguish horizontal impact analysis–that focuses on changes and impacts at one level of abstraction, and vertical impact analysis–that focuses on changes at one level of abstraction and their impacts on another level. Vertical impact analysis requires that some traceability links be established between model elements at the two levels of abstraction. We propose a <b>traceability</b> <b>analysis</b> approach for UML 2. 0 models which is based on a careful formalization of changes to those models, refinements which are composed of those changes, and traceability links corresponding to refinements. We show how actual refinements and corresponding traceabilit...|$|E
40|$|Part 4 : e-Business Process Modeling and Re-engineeringInternational audienceThis paper {{presents}} the traceability metamodel for Business Process Model and Notation (BPMN) and its implementation in Cameo Business Modeler plug-in for MagicDraw. There is no public standard traceability metamodel defined for BPMN yet. We present solutions {{that we have}} already applied in practice: we improve the traceability of BPMN models by defining derived properties that are calculated by a modeling tool on the fly. In contrast to other existing solutions, this approach does not require additional efforts from users for defining and maintaining traceability, and does not overload projects with redundant information. Using this approach, CASE tool developers are able to supplement their tools with <b>traceability</b> <b>analysis</b> means allowing users to access traceability information easier, to check completeness and correctness of BPMN models, and to analyze the impact of changes...|$|E
40|$|This {{document}} {{describes the}} assessment methodologies and assessment criteria {{to be used}} to assess the PCIS architecture documents. Keywords: Software Engineering Framework, PCIS, Assessment, Structured Questionnaires, Fagan Inspection, Risk <b>Analysis,</b> Completeness, <b>Traceability,</b> Scenario <b>Analysis,</b> PCTE. NATO UNCLASSIFIED NATO UNCLASSIFIED This page intentionally empty NATO UNCLASSIFIED 3 of 89 PCIS Programme NATO UNCLASSIFIED FINAL Acknowledgments (1) The work done by the PCIS assessment team was sponsored by NATO under the Special Working Group on Ada Project Support Environments. Work started in September 1992, and was completed in December 1993. (2) Funding from the US DoD (Ada Joint Program Office), UK MoD, NATO Communication and Information Systems Agency (NACISA), French MoD (Direction de l'Electronique et l'Informatique) and Italian MoD is gratefully acknowledged. (3) The following people have contributed to the assessment of the PCIS Framework: Mike BOYER, Audrey CANNING, [...] ...|$|R
40|$|AORE/AOSD aims at {{addressing}} crosscutting {{issues in}} order to improve separation of system components that leads to better understanding for maintenance and evolution process. Initially, these issues were discovered from the crosscutting behavior that initially evolves from the method at implementation stage. However, there are growing needs to achieve possible understanding in crosscutting throughout stages in software development recently. Due to its nature, crosscutting which relates to intersection or mapping of components such as scattering and tangling at various stages may lead to some ambiguities. The aim {{of this paper is to}} evaluate several recent crosscutting AORE/AOSD approaches published in literature with the focus on their contributions to requirements and design crosscutting. The evaluation shows some significant results in understanding the <b>traceability</b> and <b>analysis</b> of requirements and design crosscutting approaches as a basis for improvement to ensure homogeneity in crosscutting-oriented software development and evolution process...|$|R
40|$|Risk {{management}} {{has become a}} central issue in sanitary crises. Agro food firms have devised organizational responses to sanitary risks, usually implying better traceability. European Regulation 178 / 2002 established mandatory traceability. This paper provides a critical appraisal of the European Regulation on <b>traceability.</b> The <b>analysis</b> characterizes the mandatory traceability established and evaluates whether the information provided facilitates the withdrawal of targeted products promised by the European Regulation. It demonstrates the importance of traceability practices and sets out the responsibilities of food business operators as defined in the regulation. This regulation is seen as creating economic incentives for more stringent traceability. The problem of private operators’ coordination in relation to traceability practices is explained {{and the question of}} whether this problem con be solved by the strict application of European Regulation 178 / 2002 id addressed. The limits of the European Regulation in this context are demonstrated and solutions are proposed...|$|R
40|$|Requirements {{traceability}} is {{an essential}} step in ensuring the quality of software {{during the early stages}} of its development life cycle. Requirements tracing usually consists of document parsing, candidate link generation and evaluation and <b>traceability</b> <b>analysis.</b> This paper demonstrates the applicability of Statistical Term Extraction metrics to generate candidate links. It is applied and validated using two data sets and four types of filters two for each data set, 0. 2 and 0. 25 for MODIS, 0 and 0. 05 for CM 1. This method generates requirements traceability matrices between textual requirements artifacts (such as high-level requirements traced to low-level requirements). The proposed method includes ten word frequency metrics divided into three main groups for calculating the frequency of terms. The results show that the proposed method gives better result when compared with the traditional TF-IDF method...|$|E
40|$|A {{requirements}} tracing tool, SuperTrace, {{has been}} used successfully for numerous years to perform requirements analysis on the mission planning software for the Tomahawk Land Attack Missile. The tool is now being enhanced to run in Microsoft Access. This tool facilitates requirements analysis activities such as <b>traceability</b> <b>analysis</b> (are the requirements complete?, are the requirements traceable?), testability analysis, consistency analysis, etc. The resulting requirements data base {{has been used}} throughout the software development lifecycle to analyze each subsequent development artifact (requirements specifications, design documents, source code, test plans, etc.). Test verification matrices are automatically generated by the tool, easing the formal qualification of the final developed system (did the system meet all the original requirements set out for it?). This paper will describe the tool, how {{it is used to}} perform requirements tracing and analysis, lessons learned, and how it has improved productivity and quality of the requirements analysis activities...|$|E
40|$|Organizations {{that develop}} generic {{software}} products, such as ERP or CRM products, and implement them in customers with varying needs, {{are faced with}} the problem of relating each customer requirements to the generic product requirements and characteristics, in a way that accelerates product implementation and supports product evolution decisions. To help attain these goals, we present a requirements documentation approach, comprising a documentation model and a XML and Wiki-based documentation infrastructure. The relationship above mentioned is established mainly via configuration parameters and associated configuration questions. Variability in the requirements and characteristics of the generic product is described based on the configuration parameters. The requirements of each implementation are described by answering the configuration questions and, when needed, by documenting variations to the base requirements and characteristics. Linking and viewing facilities support <b>traceability</b> <b>analysis,</b> instantiation of base requirements and characteristics for actual parameter values, and variability analysis among actual implementations...|$|E
40|$|AbstractSoftware {{documentation}} {{is usually}} expressed in natural languages, which contains much useful information. Therefore, establishing the traceability links between documentation and source code {{can be very}} helpful for software engineering management, such as requirement <b>traceability,</b> impact <b>analysis,</b> and software reuse. Currently, the recovery of traceability links is mostly based on information retrieval techniques, for instance, probabilistic model, vector space model, and latent semantic indexing. Previous work treats both documentation and source code as plain text files, but the quality of retrieved links can be improved by imposing additional structure using that they are software engineering documents. In this paper, we present four enhanced strategies to improve traditional LSI method based on the special characteristics of documentation and source code, namely, source code clustering, identifier classifying, similarity thesaurus, and hierarchical structure enhancement. Experimental {{results show that the}} first three enhanced strategies can increase the precision of retrieved links by 5 %∼ 16 %, while the the fourth strategy is about 13 %...|$|R
40|$|Analysis {{and design}} {{activities}} underpinned by the systems thinking {{are required for}} the design of modern complex sociotechnical systems. Cognitive work analysis is a commonly used analysis framework for understanding complex systems. Although the framework was developed with a view to then using analysis outputs to inform system design, questions about its direct application to design remain. This paper will describe an approach that was developed to support the translation of cognitive work analysis outputs into design-relevant information. The approach was applied to a case study analysis of a public transport ticketing system, with the insights documented during the analysis being used to prepare design materials for a participatory design workshop. The process of identifying design-relevant information from the analysis outputs and applying this to the preparation of design materials was found to be structured and efficient, providing the potential for <b>traceability</b> between <b>analysis</b> and design without constraining the creativity required for design innovation...|$|R
40|$|This paper {{describes}} a development life cycle for telecommunications services emphasising requirements capture, formal specification and validation. The service is developed along the three {{dimensions of the}} methodology: refinement, completeness and formality, aiming for a complete, consistent and formally specified service definition. The described methodology can be integrated into currently existing development life cycles which employ formal methods for service creation. Active support for the proposed life cycle is provided by a novel expert system called Requirements Assistant for Telecommunications Services (RATS) currently under development. It actively helps during requirements acquisition and early analysis, and encourages specification reuse {{with the help of}} a semi-automated negotiation process. The RATS tool advises the service developer during all stages of the service development and on different levels of abstraction, and provides requirements management facilities, like <b>traceability,</b> impact <b>analysis</b> and document generation. Some of the features are illustrated using examples from the Universal Personal Telecommunication (UPT) service...|$|R
