1421|606|Public
5|$|On {{a second}} PDP-1 in the physics department, Daniel L. Murphy wrote the <b>Text</b> <b>Editor</b> and Corrector (TECO) <b>text</b> <b>editor,</b> later used to {{implement}} Emacs.|$|E
5|$|Emacs (<b>text</b> <b>editor)</b> – {{development}} began {{during the}} 1970s at the MIT AI Lab.|$|E
25|$|The <b>text</b> <b>editor</b> UltraEdit uses JavaScript 1.7 as {{internal}} scripting language, introduced with version 13 in 2007.|$|E
5000|$|Text editors: List of <b>text</b> <b>editors,</b> Comparison of <b>text</b> <b>editors</b> ...|$|R
5000|$|This article {{provides}} basic comparisons for common <b>text</b> <b>editors.</b> More feature details for <b>text</b> <b>editors</b> {{are available from}} the [...] and from the individual products' articles. This article may not be up-to-date or necessarily all-inclusive.|$|R
50|$|Please see the {{individual}} products' articles for further information, and comparison of <b>text</b> <b>editors</b> {{for information on}} <b>text</b> <b>editors,</b> and comparison of word processors or information on word processors, {{many of which have}} features to assist with writing HTML.|$|R
25|$|Notepad being a basic <b>text</b> <b>editor,</b> {{advanced}} {{features are}} also missing: syntax coloring, code folding, regular expressions, macros, support of codepages and color schemes.|$|E
25|$|In July 2013, the VisualEditor editing {{interface}} was inaugurated, allowing {{users to}} edit Wikipedia using a WYSIWYG <b>text</b> <b>editor</b> (similar to a word processor) instead of wikimarkup. An editing interface optimised for mobile devices was also released.|$|E
25|$|Later desktop {{publishing}} programs were specifically designed with elaborate pre-formatted layouts for publication, offering only limited options {{for changing the}} layout, while allowing users to import text that was written using a <b>text</b> <b>editor</b> or word processor, or type the text in themselves.|$|E
5|$|Sam and acme are Plan 9's <b>text</b> <b>editors.</b>|$|R
5000|$|Fairfax, a mono-spaced {{intended}} for <b>text</b> <b>editors</b> and terminals.|$|R
5000|$|Many {{integrated}} development environments (IDEs) and <b>text</b> <b>editors</b> support Groovy: ...|$|R
25|$|SVG {{images and}} their {{behaviors}} are defined in XML text files. This {{means that they}} can be searched, indexed, scripted, and compressed. As XML files, SVG images can be created and edited with any <b>text</b> <b>editor,</b> as well as with drawing software.|$|E
25|$|Notepad is {{a simple}} <b>text</b> <b>editor</b> for Microsoft Windows and a basic {{text-editing}} program which enables computer users to create documents. It was first released as a mouse-based MS-DOS program in 1983, and has been included in all versions of Microsoft Windows since Windows 1.0 in 1985.|$|E
25|$|The Second Berkeley Software Distribution (2BSD), {{released}} in May 1979, included updated {{versions of the}} 1BSD software {{as well as two}} new programs by Joy that persist on Unix systems to this day: the vi <b>text</b> <b>editor</b> (a visual version of ex) and the C shell. Some 75 copies of 2BSD were sent out by Bill Joy.|$|E
50|$|Some <b>text</b> <b>editors</b> can edit {{unusually large}} files such as log files or an entire {{database}} {{placed in a}} single file. Simpler <b>text</b> <b>editors</b> may just read files into the computer's main memory. With larger files, {{this may be a}} slow process, and the entire file may not fit. Some <b>text</b> <b>editors</b> do not let the user start editing until this read-in is complete. Editing performance also often suffers in nonspecialized editors, with the editor taking seconds or even minutes to respond to keystrokes or navigation commands. By only storing the visible portion of large files in memory, editing performance improves.|$|R
50|$|In the pico and nano <b>text</b> <b>editors</b> {{shortcut}} scrolls {{one page}} up.|$|R
5000|$|A {{number of}} <b>text</b> <b>editors</b> provide folding capability. Those that do include: ...|$|R
25|$|Stallman was {{responsible}} for contributing many necessary tools, including a <b>text</b> <b>editor</b> (Emacs), compiler (GCC), debugger (GNU Debugger), and a build automator (GNU make). The notable omission was a kernel. In 1990, members of the GNU project began using Carnegie Mellon's Mach microkernel in a project called GNU Hurd, which has yet to achieve the maturity level required for full POSIX compliance.|$|E
25|$|Kahn's {{idea was}} to package all these {{functions}} in an integrated programming toolkit designed to have much better performance and resource utilisation than the usual professional development tools, and charge a low price for a package integrating a custom <b>text</b> <b>editor,</b> compiler, and all functionality need to produce executable programs. The program was sold by direct mail order for $49.95, without going through established sales channels (retailers or resellers).|$|E
25|$|Stallman {{launched}} the GNU Project in September 1983 {{to create a}} Unix-like computer operating system composed entirely of free software. With this, he also {{launched the}} free software movement. He has been the GNU project's lead architect and organizer, and developed a number of pieces of widely used GNU software including, among others, the GNU Compiler Collection, the GNU Debugger and the GNU Emacs <b>text</b> <b>editor.</b> In October 1985 he founded the Free Software Foundation.|$|E
50|$|There is also {{incremental}} reading {{support for}} the <b>text</b> <b>editors</b> Emacs and Yi.|$|R
5000|$|Editra {{supports}} features {{commonly found}} in other programmer-style <b>text</b> <b>editors.</b> It also supports: ...|$|R
2500|$|Editor war – {{the rivalry}} between {{users of the}} Emacs and vi (Vim) <b>text</b> <b>editors</b> ...|$|R
25|$|Word {{processing}} {{added to}} the <b>text</b> <b>editor</b> {{the ability to control}} type style and size, to manage lines (word wrap), to format documents into pages, and to number pages. Functions now taken for granted were added incrementally, sometimes by purchase of independent providers of add-on programs. Spell checking, grammar checking and mail merge were {{some of the most popular}} add-ons for early word processors. Word processors are also capable of hyphenation, and the management and correct positioning of footnotes and endnotes.|$|E
25|$|Notepad accepts {{text from}} the Windows {{clipboard}}. When clipboard data with multiple formats is pasted into Notepad, the program only accepts {{text in the}} CF_TEXT format. This is useful for stripping embedded font type and style codes from formatted text, such as when copying text from a web page and pasting into an email message or other WYSIWYG <b>text</b> <b>editor.</b> Formatted text can be temporarily pasted into Notepad, and then immediately copied again in stripped format to paste into the other program.|$|E
25|$|When {{opened by}} a <b>text</b> <b>editor,</b> human-readable content is {{presented}} to the user. This often consists of the file's plain text visible to the user. Depending on the application, control codes may be rendered either as literal instructions acted upon by the editor, or as visible escape characters that can be edited as plain text. Though there may be plain text in a text file, control characters within the file (especially the end-of-file character) can render the plain text unseen by a particular method.|$|E
50|$|Several <b>text</b> <b>editors</b> use an in-RAM piece table internally, {{including}} the highly influential Bravo.and Abiword.|$|R
5000|$|Editor war - {{the rivalry}} between {{users of the}} Emacs and vi (Vim) <b>text</b> <b>editors</b> ...|$|R
5000|$|Electron {{software}} framework, powering {{applications such}} as the Atom and Visual Studio Code <b>text</b> <b>editors</b> ...|$|R
25|$|The {{critical}} {{code of the}} kernel {{is usually}} loaded into a protected area of memory, which prevents it from being overwritten by applications or other, more minor parts of the operating system. The kernel performs its tasks, such as running processes and handling interrupts, in kernel space. In contrast, everything a user does is in user space: writing text in a <b>text</b> <b>editor,</b> running programs in a GUI, etc. This separation prevents user data and kernel data from interfering {{with each other and}} causing instability and slowness.|$|E
25|$|A common {{feature of}} Unix-like systems, Linux {{includes}} traditional specific-purpose programming languages targeted at scripting, text processing and system configuration and management in general. Linux distributions support shell scripts, awk, sed and make. Many programs {{also have an}} embedded programming language to support configuring or programming themselves. For example, regular expressions are supported in programs like grep and locate, the traditional Unix MTA Sendmail contains its own Turing complete scripting system, and the advanced <b>text</b> <b>editor</b> GNU Emacs is built around a general purpose Lisp interpreter.|$|E
25|$|In the 1960s, Thompson {{also began}} work on regular expressions. Thompson had {{developed}} the CTSS version of the editor QED, which included regular expressions for searching text. QED and Thompson's later editor ed (the standard <b>text</b> <b>editor</b> on Unix) contributed greatly to the eventual popularity of regular expressions, and regular expressions became pervasive in Unix text processing programs. Almost all programs that work with regular expressions today use some variant of Thompson's notation. He also invented Thompson's construction algorithm used for converting regular expression into nondeterministic finite automaton {{in order to make}} expression matching faster.|$|E
50|$|Many <b>text</b> <b>editors</b> {{and word}} {{processors}} perform file comparison {{to highlight the}} changes to a document.|$|R
5000|$|The Programming {{features}} {{section of}} the Comparison of <b>text</b> <b>editors</b> article for more editors that support folding ...|$|R
40|$|In this article, the {{supportive}} {{role that}} mentoring relationships currently do and should {{play in the}} development and careers of <b>text</b> <b>editors</b> is described against the background of the particular circumstances of these service providers in a sector experiencing great organisational and technological changes. This is a group that is much neglected in the literature on mentoring. Since the mentoring of <b>text</b> <b>editors</b> is distinct from other forms of mentoring in a number of key respects, this article draws together what the literature has to say about both conventional and online or distance mentoring as performed in a range of contexts. I consider the application of Knowles’ (1970, 1984) adult learning theory and Bandura’s (1977) self-efficacy mechanisms to be important potential contributors to the success of mentorships, in particular those involving adult <b>text</b> <b>editors.</b> The article also critically analyses how mentoring for <b>text</b> <b>editors</b> can be distinguished from alternative development strategies such as coaching, training, teaching and counselling. It shows that mentoring is fundamentally different from these strategies according to ten criteria, and is better suited to text editors’ need for professional development as a form of lifelong adult e-learning. The lack of any form of assessment of mentees, in particular, is regarded as a weakness of the currently available mentorship programmes aiming to professionalise adult <b>text</b> <b>editors</b> through a process of lifelong learning. </p...|$|R
