923|1811|Public
5|$|For a block {{cellular}} automaton, testing reversibility is also easy: the automaton is reversible if {{and only}} if the <b>transition</b> <b>function</b> on the blocks of the automaton is invertible, and in this case the reverse automaton has the same block structure with the inverse <b>transition</b> <b>function.</b>|$|E
5|$|Any second-order {{automaton}} may {{be transformed}} into a conventional cellular automaton, in which the <b>transition</b> <b>function</b> depends only on the single previous time step, by combining pairs of states from consecutive time steps of the second-order automaton into single states of a conventional cellular automaton.|$|E
5|$|Culik {{begins with}} the {{observation}} that a cellular automaton has an injective <b>transition</b> <b>function</b> {{if and only if}} the <b>transition</b> <b>function</b> is injective on the subsets of configurations that are periodic (repeating the same substring infinitely often in both directions). He defines a nondeterministic finite-state transducer that performs the transition rule of the automaton on periodic strings. This transducer works by remembering the neighborhood of the automaton {{at the start of the}} string and entering an accepting state when that neighborhood concatenated to the end of the input would cause its nondeterministically chosen transitions to be correct. Culik then swaps the input and output of the transducer. The transducer resulting from this swap simulates the inverse dynamics of the given automaton. Finally, Culik applies previously known algorithms to test whether the resulting swapped transducer maps each input to a single output.|$|E
50|$|Then πρ : E → X is a {{fiber bundle}} with fiber F and {{structure}} group G. The <b>transition</b> <b>functions</b> are given by ρ(tij) where tij are the <b>transition</b> <b>functions</b> {{of the principal}} bundle P.|$|R
40|$|Proposal for MSc by Research Aaron Turner This {{proposal}} {{outlines the}} research to be undertaken for {{the degree of}} MSc by research. The research will concentrate on techniques for implementing invariances in the local <b>transition</b> <b>functions</b> of cellular automata based on cells comprising ensembles of associative memories. 2 of 7 Proposal for MSc by Research The proposed area of research {{is the study of}} local <b>transition</b> <b>functions</b> in cellular automata that comprise associative processing units, and computation involving such <b>transition</b> <b>functions</b> in such cellular systems. The study of local <b>transition</b> <b>functions</b> and the development of local <b>transition</b> <b>functions</b> is one of the paths to developing cellular systems to exhibit particular behaviours [2]. The rules at a local level for a particular system may be relatively clear, such as with Conway's Life [2], simple, and easily implemented on conventional computing systems, parallel computing systems, or even specialised hardware. The emphas [...] ...|$|R
5000|$|If {{the bundle}} [...] has {{structure}} group [...] with <b>transition</b> <b>functions</b> [...] (with {{respect to a}} family of local trivializations [...] then the pullback bundle [...] also has structure group [...] The <b>transition</b> <b>functions</b> in [...] are given by ...|$|R
5|$|Designing {{reversible}} {{rules for}} block cellular automata, and {{determining whether a}} given rule is reversible, is easy: for a block cellular automaton to be reversible it is necessary and sufficient that the transformation applied to the individual blocks at {{each step of the}} automaton is itself reversible. When a block cellular automaton is reversible, the time-reversed version of its dynamics can also be described as a block cellular automaton with the same block structure, using a time-reversed sequence of partitions of cells into blocks, and with the <b>transition</b> <b>function</b> for each block being the inverse function of the original rule.|$|E
5|$|The Critters rule is a block {{cellular}} automaton in which, at each step, {{the cells of}} the automaton are partitioned into 2×2 blocks and each block is updated independently of the other blocks. Its <b>transition</b> <b>function</b> flips the state of every cell in a block that does not have exactly two live cells, and in addition rotates by 180° blocks with exactly three live cells. Because this function is invertible, the automaton defined by these rules is a reversible {{cellular automaton}}.|$|E
5|$|As Boykett argues, any {{one-dimensional}} reversible {{cellular automaton}} {{is equivalent to}} an automaton in rectangular form, in which the cells are offset a half unit at each time step, and in which both the forward and reverse evolution of the automaton have neighborhoods with just two cells, the cells a half unit away in each direction. If a reversible automaton has neighborhoods larger than two cells, it can be simulated by a reversible automaton with smaller neighborhoods and more states per cell, in which each cell of the simulating automaton simulates a contiguous block of cells in the simulated automaton. The two axioms of a semicentral bigroupoid are exactly the conditions required on the forward and reverse transition functions of these two-cell neighborhoods to be the reverses of each other. That is, every semicentral bigroupoid defines a reversible cellular automaton in rectangular form, in which the <b>transition</b> <b>function</b> of the automaton uses the operation to combine the two cells of its neighborhood, and in which the operation similarly defines the reverse dynamics of the automaton. Every one-dimensional reversible cellular automaton is equivalent to one in this form.|$|E
2500|$|This is the {{standard}} way differentiable manifolds are defined. If the <b>transition</b> <b>functions</b> of an atlas for a topological manifold preserve the natural differential structure of Rn (that is, if they are diffeomorphisms), the differential structure transfers to the manifold and turns it into a differentiable manifold. [...] Complex manifolds are introduced in an analogous way by requiring that the <b>transition</b> <b>functions</b> of an atlas are holomorphic functions. [...] For symplectic manifolds, the <b>transition</b> <b>functions</b> must be symplectomorphisms.|$|R
2500|$|The <b>transition</b> <b>functions</b> t'ij {{satisfy the}} {{following}} conditions ...|$|R
50|$|The <b>transition</b> <b>functions</b> tij {{satisfy the}} {{following}} conditionsThe third condition applies on triple overlaps Ui ∩ Uj ∩ Uk and {{is called the}} cocycle condition (see Čech cohomology). The importance {{of this is that}} the <b>transition</b> <b>functions</b> determine the fiber bundle (if one assumes the Čech cocycle condition).|$|R
25|$|The sigma {{points are}} {{propagated}} through the <b>transition</b> <b>function</b> f.|$|E
25|$|A Deterministic finite {{automaton}} (DFA) {{can be seen}} as a special kind of NFA, in which for each state and alphabet, the <b>transition</b> <b>function</b> has exactly one state. Thus, it is clear that every formal language that can be recognized by a DFA can be recognized by a NFA.|$|E
25|$|Viewed using calculus, {{the circle}} <b>transition</b> <b>{{function}}</b> T {{is simply a}} function between open intervals, which gives a meaning to the statement that T is differentiable. The transition map T, and all the others, are differentiable on (0, 1); therefore, with this atlas the circle is a differentiable manifold. It is also smooth and analytic because the transition functions have these properties as well.|$|E
50|$|Specifically, given a local trivialization of E with <b>transition</b> <b>functions</b> t, a local trivialization of E {{is given}} by the same open cover of X with <b>transition</b> <b>functions</b> t = (t)&minus;1 (the inverse of the transpose). The dual bundle E is then {{constructed}} using the fiber bundle construction theorem.|$|R
5000|$|Three basic <b>transition</b> <b>functions</b> and {{the name}} of {{resulting}} models are: ...|$|R
5000|$|... {{such that}} for {{overlapping}} pairs [...] the <b>transition</b> <b>functions</b> [...] defined by ...|$|R
25|$|Nondeterministic finite {{automaton}} with ε-moves (NFA-ε) {{is a further}} generalization to NFA. This automaton replaces the <b>transition</b> <b>function</b> with the one that allows the empty string ε as a possible input. The transitions without consuming an input symbol are called ε-transitions. In the state diagrams, they are usually labeled with the Greek letter ε. ε-transitions provide a convenient way of modeling the systems whose current states are not precisely known.|$|E
25|$|As {{noted in}} the preamble, all Riemann surfaces, like all complex manifolds, are {{orientable}} as a real manifold. The reason is that for complex charts f and g with <b>transition</b> <b>function</b> h = f(g1(z)), h {{can be considered as}} a map from an open set of R2 to R2 whose Jacobian in a point z is just the real linear map given by multiplication by the complex number h(z). However, the real determinant of multiplication by a complex number α equals |α|2, so the Jacobian of h has positive determinant. Consequently, the complex atlas is an oriented atlas.|$|E
25|$|Keep a set data {{structure}} of all states which the NFA might currently be in. On {{the consumption of}} an input symbol, unite {{the results of the}} <b>transition</b> <b>function</b> applied to all current states to get the set of next states; if ε-moves are allowed, include all states reachable by such a move (ε-closure). Each step requires at most s2 computations, where s is the number of states of the NFA. On the consumption of the last input symbol, if one of the current states is a final state, the machine accepts the string. A string of length n can be processed in time O(ns2), and space O(s).|$|E
5000|$|... are biholomorphic maps. This is {{equivalent}} to requiring that the <b>transition</b> <b>functions</b> ...|$|R
40|$|The {{purpose of}} this paper is to provide a matrix {{representation}} of global <b>transition</b> <b>functions</b> of so-called Gauss-Seidel type finite celluar automata and their Jordan normal forms. The numbers of fixed points and the maximum length of cycles of these systems are calculated by using Jordan normal forms of the matrix representation of global <b>transition</b> <b>functions...</b>|$|R
25|$|Note {{that the}} {{transformation}} law is second {{order in the}} coordinate <b>transition</b> <b>functions.</b>|$|R
25|$|In words, {{the first}} {{condition}} {{says that the}} machine starts in the start state q0. The second condition says that given each character of string w, the machine will transition {{from state to state}} according to the <b>transition</b> <b>function</b> Δ. The last condition says that the machine accepts w if the last input of w causes the machine to halt in one of the accepting states. In order for w being accepted by M it is not required that every state sequence ends in an accepting state, it is sufficient if one does. Otherwise, i.e. if it is impossible at all to get from q0 to a state from F by following w, it is said that the automaton rejects the string. The set of strings M accepts is the language recognized by M and this language is denoted by L(M).|$|E
500|$|One {{reason to}} study {{reversible}} universal models of computation {{such as the}} billiard-ball model is that they could theoretically lead to actual computer systems that consume very low quantities of energy. According to Landauer's principle, irreversible computational steps require a certain minimal amount of energy per step, but reversible steps can be performed with an amount of energy per step that is arbitrarily close to zero. However, in order to perform computation using less energy than Landauer's bound, {{it is not good}} enough for a cellular automaton to have a <b>transition</b> <b>function</b> that is globally reversible: what is required is that the local computation of the <b>transition</b> <b>function</b> also be done in a reversible way. For instance, reversible block cellular automata are always locally reversible: the behavior of each individual block involves the application of an invertible function with finitely many inputs and outputs. [...] were the first to ask whether every reversible cellular automaton has a locally reversible update rule. [...] showed that for one- and two-dimensional automata the answer is positive, and [...] showed that any reversible cellular automaton could be simulated by a (possibly different) locally reversible cellular automaton. However, the question of whether every reversible <b>transition</b> <b>function</b> is locally reversible remains open for dimensions higher than two.|$|E
500|$|The second-order {{cellular}} automaton technique {{is a method}} of transforming any {{cellular automaton}} into a reversible cellular automaton, invented by Edward Fredkin and first published by several other authors in 1984. In this technique, the state of each cell in the automaton at time [...] is a function both of its neighborhood at time [...] and of its own state at time [...] Specifically, the <b>transition</b> <b>function</b> of the automaton maps each neighborhood at time [...] to a permutation {{on the set of}} states, and then applies that permutation to the state at time [...] The reverse dynamics of the automaton may be computed by mapping each neighborhood to the inverse permutation and proceeding in the same way.|$|E
2500|$|The set of <b>transition</b> <b>functions</b> forms a Čech cocycle in {{the sense}} that ...|$|R
50|$|Note {{that the}} {{transformation}} law is second {{order in the}} coordinate <b>transition</b> <b>functions.</b>|$|R
25|$|These {{are called}} the <b>transition</b> <b>functions</b> (or the {{coordinate}} transformations) of the vector bundle.|$|R
500|$|In {{the case}} of automata with binary-valued states (zero or one), {{there are only two}} {{possible}} permutations on the states (the identity permutation and the permutation that swaps the two states), which may themselves be represented as the exclusive or of a state with a binary value. In this way, any conventional two-valued cellular automaton may be converted to a second-order cellular automaton rule by using the conventional automaton's <b>transition</b> <b>function</b> on the states at time , and then computing the exclusive or of these states with the states at time [...] to determine the states at time [...] However, the behavior of the reversible cellular automaton determined in this way may not bear any resemblance to the behavior of the cellular automaton from which it was defined.|$|E
500|$|... analyze several {{alternative}} {{definitions of}} reversibility for cellular automata. Most of these {{turn out to}} be equivalent either to injectivity or to surjectivity of the <b>transition</b> <b>function</b> of the automaton; however, there is one more alternative that does not match either of these two definitions. It applies to automata such as the Game of Life that have a quiescent or dead state. In such an automaton, one can define a configuration to be [...] "finite" [...] if it has only finitely many non-quiescent cells, and one can consider the class of automata for which every finite configuration has at least one finite predecessor. This class turns out to be distinct from both the surjective and injective automata, and in some subsequent research, automata with this property have been called invertible finite automata.|$|E
500|$|A {{little less}} trivially, {{suppose that the}} cells again form a {{one-dimensional}} array, but that each state is an ordered pair (l,r) consisting of a left part l and a right part r, each drawn from a finite set of possible values. Define a <b>transition</b> <b>function</b> that sets the left part of a cell to be the left part of its left neighbor and the right part of a cell {{to be the right}} part of its right neighbor. [...] That is, if the left neighbor's state is [...] and the right neighbor's state is , the new state of a cell is the result of combining these states using a pairwise operation [...] defined by the equation [...] An example of this construction is given in the illustration, in which the left part is represented graphically as a shape and the right part is represented as a color; in this example, each cell is updated with the shape of its left neighbor and the color of its right neighbor. Then this automaton is reversible: the values {{on the left side of}} each pair migrate rightwards and the values on the right side migrate leftwards, so the prior state of each cell can be recovered by looking for these values in neighboring cells. The operation [...] used to combine pairs of states in this automaton forms an algebraic structure known as a rectangular band.|$|E
25|$|Note {{that the}} {{transformation}} law for 2-jets is second {{order in the}} coordinate <b>transition</b> <b>functions.</b>|$|R
5000|$|Dealing with affine bundles, {{one uses}} only affine bundle {{coordinates}} [...] possessing affine <b>transition</b> <b>functions</b> ...|$|R
5000|$|... where [...] are linear bundle {{coordinates}} on a vector bundle , possessing linear <b>transition</b> <b>functions</b> [...]|$|R
