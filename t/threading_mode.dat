5|43|Public
50|$|The IBM POWER5, {{announced}} in May 2004, comes {{as either a}} dual core dual-chip module (DCM), or quad-core or oct-core multi-chip module (MCM), with each core including a two-thread SMT engine. IBM's implementation is more sophisticated than the previous ones, because it can assign a different priority to the various threads, is more fine-grained, and the SMT engine can be turned on and off dynamically, to better execute those workloads where an SMT processor would not increase performance. This is IBM's second implementation of generally available hardware multithreading. In 2010, IBM released systems based on the POWER7 processor with eight cores with each having four Simultaneous Intelligent Threads. This switches the <b>threading</b> <b>mode</b> between one thread, two threads or four threads depending {{on the number of}} process threads being scheduled at the time. This optimizes the use of the core for minimum response time or maximum throughput. IBM POWER8 has 8 intelligent simultaneous threads per core (SMT8).|$|E
40|$|The {{quest for}} more {{specific}} drugs in antitumor chemotherapy {{led us to}} the design of anthraquinone-peptide conjugates capable of selective recognition of the nucleic acid. We present here the DNA binding characteristics, sequence specificity and geometry of interaction of a pair of enantiomers containing the lysine-glycine dipeptide in the side chains. The D enantiomer binds right handed double stranded DNA more efficiently than the L form under all conditions tested. The source of higher binding affinity is not electrostatic in nature and rests in the more favorable hydrophobic contacts of the D-lysyl side chains in the drug-DNA complex. Both derivatives exhibit preference for alternating GC base sequences and intercalate into DNA in a <b>threading</b> <b>mode</b> as suggested by chiroptical and theoretical studies. The D enantiomer, being a peptidyl derivative that contains a non-natural amino acid, has the considerable advantage of being less susceptible to enzymatic hydrolysis and could therefore represent a lead compound for further development...|$|E
40|$|AbstractBackground: We {{previously}} described a general class of DNA polyintercalators in which 1, 4, 5, 8 -naphthalenetetracarboxylic diimide (NDI) intercalating units are connected via peptide linkers, {{resulting in the}} first known tetrakis- and octakis-intercalators. We showed further that changes {{in the composition of}} the peptide tether result in novel DNA binding site specificities. We now examine in detail the DNA binding mode and sequence specific recognition of Compound 1, an NDI bis-intercalator containing the peptide linker gly-gly-gly-lys. Results: 1 H-NMR structural studies of Compound 1 bound to d(CGGTACCG) 2 confirmed a <b>threading</b> <b>mode</b> of intercalation, with four base pairs between the diimide units. The NMR data, combined with DNAse I footprinting of several analogs, suggest that specificity depends on a combination of steric and electrostatic contacts by the peptide linker in the floor of the major groove. Conclusions: In view of the modular nature and facile synthesis of our NDI-based polyintercalators, such structural knowledge can be used to improve or alter the specificity of the compounds and design longer polyintercalators that recognize correspondingly longer DNA sequences with alternating access to both DNA grooves...|$|E
25|$|Handler mode (ARMv6-M, ARMv7-M, ARMv8-M): A mode {{dedicated}} for {{exception handling}} (except the RESET which are handled in <b>Thread</b> <b>mode).</b> Handler mode always uses MSP {{and works in}} privileged level.|$|R
40|$|Abstract- This paper {{describes}} the multithreaded MiraXT SAT Solver {{which was designed}} to take advantage of current and future shared memory multiprocessor systems. The paper highlights design and implementation details that allow the multiple threads to run and cooperate efficiently. Results show that in single <b>threaded</b> <b>mode,</b> MiraXT compares well to other state of the art solvers on Industrial problems. In <b>threaded</b> <b>mode,</b> it provides cutting edge performance, as speedup is obtained on both SAT and UNSAT instances. I...|$|R
50|$|MediaWiki {{provides}} the even-numbered namespaces for document mode, {{often used for}} articles and other pages such as policy documents, and for each an odd-numbered namespace for discussion, in <b>thread</b> <b>mode.</b>|$|R
40|$|Innovations in today's {{aircraft}} industry are mainly {{driven by the}} desire to increase production and flexibility, while reducing cost and delivering good quality products. Automated riveting has proven capable of reducing assembly time and work in process, achieving quality targets, and increasing flexibility through the minimization of product-specific jigs, fixtures and tooling. This paper describes the layout of the robotic cell for aerospace panel assembly developed at the University of Nottingham. The motivation for this project is to develop a flexible, automated and reconfigurable system for the riveting of aero-structure components based on multi-process workcells and parallel machine technology. The automated riveting process is made possible using a combination of replacing large C-Frame riveters with robots, multi-functional compact end effectors, utlising a multi <b>threading</b> <b>mode</b> of operation for the master controller, offline programming for robots guidance, and photogrammetry cameras for machine vision. Also, the human factor and its influence on this process have not been eliminated, but rather were given more challenging jobs such as process monitoring and offline programming in the attempt to pursue further optimization. The automated riveting process has shown promising results in terms of reliability, repeatability, quality management and reduction of throughput time...|$|E
40|$|Recognition {{of coastal}} {{precipitation}} ++++++++++++++++++++++++++++++++++++ This repository contains source-code for {{the recognition of}} coastal rainfall project. For more details, see the scientific publication `Global recognition and analysis of coastline associated rainfall using objective pattern recognition `_. It includes these modules and configuration files: * Pattern - python module to run apply the pattern recognition * Submit - python module to submit the recognition jobs to a linux cluster * config - configuration file to run the pattern recognition * setup - text file that defines the threshold combinations to create a threshold ensemble Prerequisites ============= `Python 2. 7 Release `_ is needed to run the code. Python packages [...] - Additionally the following python packages must be installed on the system to run the pattern recognition: * `Numpy `_ * `SciPy `_ * `OpenCV `_ * `Netcdf 4 -Python `_ All packages are open source and should be available via the package manager of your OS. To install the packages for Ubuntu 12. 04 and later, and Debian wheezy and later:: apt-get install python-numpy python-scipy python-opencv python-netcdf On Arch 2012. 07. 15 and later:: pacman -S python 2 -numpy python 2 -scipy opencv python 2 -netcdf 4 (via AUR) On Mac OS X 10. 6 and later (via port reposetory system) :: port install py 27 -numpy py 27 -scipy py 27 -netcdf 4 opencv +python 27 Data and format [...] - The code expects ``daily`` rainfall input files in netcdf format. As {{long as it is}} sub-daily the temporal resolution doesn't matter. Also any spatial resolution can be used to run the code. You will also need to supply a land-sea mask in netcdf format. This mask has to have the same spatial resolution as the rainfall estimates and {{is supposed to be a}} 2 D-array (latlon). If you wish to create an ensemble of different threshold setups you might want to take a look into the ``setup`` file. Here all possible threshold combinations are defined. You can change, delete or add definitions. But note that the names of each definition should start with ``config`` followed by a 2 digit integer such as config 01. For the application of the rainfall threshold a climatology of monthly mean rain data is needed. Therefore a multi year monthly mean in a netcdf file should be created form the rainfall data. Note that unit MUST be the same as for the rainfall estimates. For instance we are looking for a monthly average of 3 hly rainfall data and not for a monthly average of daily rainfall data. Building ======== Additional building should not be necessary Usage ===== The pattern recognition can be used in two ways:: * in single <b>threading</b> <b>mode</b> * in multithreading mode via parallel batch system (pbs) Regardless of the mode you are running the code you will have to edit the file config. This file provides all necessary parameters to run the code. The following variables are set: * folder = the directory of the rainfall estimates. The data must have the following structure: ``folder/YYYY/product-YYYY_MM_DD. nc``. If folder is set to ``/srv/data/rain/`` and the rainfall product is called ``Cmoprh`` the data is expected to have the following structure: ``/mnt/data/rain/ 1998 /Cmorph- 1998 _ 01 _ 01. nc`` for the 01. Jan 1998. * head = the leading string of all filenames, usually the rainfall product name * targetdir = the directory where the pattern recognition data is stored * slmfile = the filename of the land-sea mask in netcdf-format * ensemble = should be a threshold setup ensemble be created (boolean) * reso = the spatial resolution of the data in km * area = the threshold that is supposed to be meso-scale usually 500 km but you can change it. * ecce = the threshold for eccentricity (see publication for details) * beam = the threshold for the straight length variation * perc = the threshold for the rain intensity in percentiles * NOTE: If you choose to create a threshold ensemble the variables ecce, beam, prec have no effect. * monmean = netcdf file where a climatology for monthly mean rainfall data is stored. * erase = The pattern detection can operate more successfully when small islands are erased from the slm-data. Should this be done (boolean). Note: tha this feature is available but not very well tested * size = If erase is set to true what is the maximum size of islands that should be deleted (km^ 2) * scale = how many boxes representing the coastal area (boxcounting) * varname = the name of the rainfall variable in the netcdf-file * lon = the name of the longitude variable in the netdf-file * lat = the name of the latitude variable in the netcdf-file * time = the name of the time variable in the netcdf-file * units = the unit of the rainfall estimates * name = your name * institution = the name of your institution The module that reads the configuration is written in a way that you can add any variable you want to the config file. It simply has to have the following structure:: key = value Running in the single mode [...] If you want to run the pattern recognition in single processing mode simply run the Pattern script with the following command line options:: Pattern FirstDate LastDate configXX Where FirstDate is the starting data and LastData the last date. Note that the dates have to be in YYYY-MM-DD format. The config parameter is optional and only used if you want to create a threshold ensemble. the configXX value must be defined in the ``setup`` file. Note: You you are using a config parameter the ``targetdir`` variable is changed accordingly. So if you set ``config 01 `` as config parameter and set ``/srv/data/PatternDetect/`` as targetdir variable ``Config 01 `` will be added to the targetdir string. Examples:: 1) Pattern 1998 - 01 - 01 2012 - 12 - 31 config 13 2) Pattern 1998 - 01 - 01 2012 - 12 - 31 1) Run the pattern recognition between 01. Jan 1998 and 31. Dec 2012 for threshold setup ``config 13 `` as defined in the ``setup`` file. 2) Same as 1) but without a threshold ensemble. For more information run:: Pattern [...] help Running in paralell mode (PBS) [...] It is also possible to send several pattern recognition jobs to a Linux cluster to speed up the process of the recognition. In general there are two scenarios: * distribution of jobs to create a threshold ensemble * distribution of jobs between dates If you choose to create a threshold ensemble and want to distribute the jobs simply run:: submit [...] config=config 01,config 02, [...] .,configNN FirstDate LastDate If you don't want to create a threshold ensemble but yet want to send the job to a Linux cluster simply run:: submit FirstDate LastDate Note the FirstDate and LastDate have the same meaning and format as in running in single mode Please type:: submit [...] help to get more info like the maximum number of jobs that are submitted to the linux cluster. If you want to change the header string of the PBS script or change the submit command (e. g. to llsubmit) please edit the source-code of submit. Header and submit command are defined in the very beginning of the script. Testing ======= Some fake rain data with a land-sea mask is comes with the code. The data is stored in. test in this directory. If you want to test the pattern recognition simply run:: Pattern [...] test Contributing ============ We welcome all types of contributions, from blueprint designs to documentation to testing to deployment scripts. Bugs ==== Bugs should be filed to **martin. bergemann@monash. edu*...|$|E
50|$|In {{document}} mode, {{maintenance of}} the history is left entirely to the wiki software, as opposed to <b>thread</b> <b>mode,</b> where {{the history of a}} discussion is also reflected in the current page.|$|R
50|$|The UML guest {{application}} (a Linux binary ELF) {{was originally}} {{available as a}} patch for some Kernel versions above 2.2.x, and the host with any kernel version above 2.2.x supported it easily in the <b>thread</b> <b>mode</b> (i.e., non-SKAS3).|$|R
2500|$|<b>Thread</b> <b>mode</b> (ARMv6-M, ARMv7-M, ARMv8-M): A mode {{which can}} be {{specified}} as either privileged or unprivileged, while whether Main Stack Pointer (MSP) or Process Stack Pointer (PSP) is used can also be specified in CONTROL register with privileged access. This mode is designed for user tasks in RTOS environment but it's typically used in bare-metal for super-loop.|$|R
40|$|This paper briefly {{describes}} MiraXT, a multithreaded SAT solver {{that was}} designed to take advantage of current and future shared memory multiprocessor systems. The experimental results in [6] show that already in single <b>threaded</b> <b>mode,</b> MiraXT compares well to other state-ofthe-art solvers {{on a wide range of}} industrial problems. In <b>threaded</b> <b>mode,</b> it provides cutting edge performance, as speedup is obtained on both satisfiable and unsatisfiable instances. The paper highlights some of the design and implementation details that allow multiple threads to run and cooperate efficiently. wait times that might result from the remaining locks. Also, each thread has one lock associated with it that is used when the thread requests a new clause from the master clause database. This lock is used to increment its current database position pointer. This pointer keeps track of which clauses the thread has already looked at, and those that can still be added. Figure 1 shows a top level diagram with threads inserting pointers to clauses into the master clause database (represents a pointer to a conflict clause) ...|$|R
5000|$|... funk.y was {{the first}} comment system, built by Andy Hanson, used on the Shack. Comments could be viewed in flat <b>mode</b> or <b>threaded</b> <b>mode</b> {{depending}} on user options. The comments could also be tagged by moderators and [...] "nuked" [...] if they went against the guidelines. A nuked comment would {{be replaced by the}} words [...] "* N U K E D *" [...] and the original poster's name would be replaced by an admin account called Duke Nuked.|$|R
50|$|The {{second major}} {{version of the}} Shacknews comment system, named ja.zz, was used until June 2007.Essentially a {{threaded}} message board, ja.zz was a unique message board written by Sander Pilon for the Shack. Posts could be moderated into one of many categories, which allowed users to filter what categories could be seen. Comments could be viewed in several ways, flat, threaded, or dthread (Dynamic <b>thread)</b> <b>mode</b> which was the most advanced and quickly became the most popular view for the users.|$|R
40|$|This paper briefly {{describes}} MiraXT, a multi-threaded SAT solver {{that was}} designed to take advantage of cur-rent and future shared memory multiprocessor systems. The experimental results in [2] show that already in single-threaded mode, MiraXT compares well to other state-of-the-art solvers {{on a wide range of}} industrial problems. In <b>threaded</b> <b>mode,</b> it provides cutting edge performance, as speedup is obtained on both satisfiable and unsatisfiable in-stances. The paper highlights some of the design and im-plementation details that allow multiple threads to run and cooperate efficiently...|$|R
40|$|Summary: With {{the wide}} {{application}} of next-generation sequencing (NGS) techniques, fast tools for protein similarity search that scale well to large query datasets and large databases are highly desirable. In a previous work, we developed RAPSearch, an algorithm that achieved a ~ 20 – 90 -fold speedup relative to BLAST while still achieving similar levels of sensitivity for short protein fragments derived from NGS data. RAPSearch, however, requires a substantial memory footprint to identify alignment seeds, {{due to its}} use of a suffix array data structure. Here we present RAPSearch 2, a new memory-efficient implementation of the RAPSearch algorithm that uses a collision-free hash table to index a similarity search database. The utilization of an optimized data structure further speeds up the similarity search—another 2 – 3 times. We also implemented multi-threading in RAPSearch 2, and the multi-thread modes achieve significant acceleration (e. g. 3. 5 X for 4 -thread mode). RAPSearch 2 requires up to 2 G memory when running in single <b>thread</b> <b>mode,</b> or up to 3. 5 G memory when running in 4 -thread mode...|$|R
40|$|Abstract: Ferrocenylnaphthalene diimide 1 can bind {{to double}} {{stranded}} DNA (dsDNA) by the <b>threading</b> intercalation <b>mode</b> and the resulting complex was stabilized further by β-cyclodextrin (CD) by forming a supramolecular complex. These complex formation processes were studied by spectroscopic, viscometric, and electrochemical means in the absence or presence of β-CD. Quantitative analysis by quartz crystal microbalance (QCM) and electrochemical experiments strongly suggested a 2 : 1 binding stoichiometry for β-CD to 1 threading-intercalated to the dsDNA-immobilized electrode. Owing to this supramolecular complex formation, electrochemical DNA detection based on 1 was improved considerably...|$|R
40|$|Chip multiprocessors {{have the}} {{potential}} to exploit thread level parallelism, particularly attractive to workloads with high number of threads. Unfortunately, both per-core and overall throughput are significantly impacted by the organization of the lowest level on-chip cache. On-chip caches for CMPs must be able to handle the increased demand and contention of multiple cores. To complicate the problem, cache demand changes dynamically with phases changes, context switches, power saving features, and assignments to asymmetric cores. We propose PDAS, a physically distributed NUCA L 2 cache design with an adaptive sharing mechanism. Each core independently measures its dynamic need. Then, all cache resources are managed to improve utilization, reduce migration, and lower interference. Per-core performance degradation is bounded while overall throughput is optimized, thus qualitatively improving the performance of embedded systems where quality-of-service is important. In single <b>thread</b> <b>mode,</b> PDAS, on average, improves by 26 %, 27 %, and 13 % over Private, Shared, and NUCA caches respectively. This improvement is achieved while reducing internal migrations on average by 82 % as compared to the NUCA. With thread contention, PDAS increases its performance and power advantage over prior work. The average migration reduction over NUCA increases to over 90 %, and average IPC improvements over NUCA are 30 %, 14 %, and 35 % for 2 T, 3 T, and 4 T scenarios...|$|R
40|$|Thread {{migration}} {{is to support}} the movement of threads across machine boundaries in a distributed computing environment. It can improve load balancing and the execution efficiency of multithreaded programs. In this paper, we introduce a new approach that employs the technique of Just-in-Time (JIT) recompilation to support transparent thread migration. With JIT recompilation, the native <b>thread</b> execution <b>mode</b> is preserved, {{and much of the}} space and time overheads of previous solutions based on code instrumentation can be eliminated. The new thread migration system is integrated into the JESSICA 2 distributed JVM. The measured results show that our approach is beneficial to the overall system in supporting the transparent execution of Java applications on clusters. link_to_subscribed_fulltex...|$|R
40|$|Ideas {{and tools}} for {{improving}} the response time of composite shell postbuckling calculations {{by means of the}} finite element (FE) method are presented. While traditional FE tools are able to predict elastic response relatively accurately, they are slow in analysis response time, a situation which becomes far worse if damage phenomena are {{to be included in the}} simulations. This paper describes the B 2000 ++ FE-based tool for postbuckling analysis of composite panlels, one of the objectives of the COCOMAT EC-funded research project. The developments comprise a static nonlinear FE continuation solver with artificial damping, a line search technique {{for improving the}} convergence of the Newton algorithm, and an implicit dynamic nonlinear solver with linear multistep time integration and variable time step size controled by a local time integration error estimation. In addition, an efficient and robust family of elements — specifically, shell elements with assumed natural strain and enhanced assumed strain to reduce locking, automatic selection between five or six degrees of freedom per node and continuity of the shell normal between elements for proper handling of shell intersections and for correct transfer of twisting moments in curved shell models — is described. If the material is linear, the elements feature preintegration through the thickness of linear materials to reduce the cost of evaluating the elements' first and second variations. The solvers and elements are implemented in the B 2000 ++ FE simulation environment, which provides fast sparse linear solvers and FE assemblers running in <b>threaded</b> <b>mode</b> on multicore processors, thus resulting in short analysis response times, particularly for postbuckling analysis of composite panels. Validation of the developments is illustrated...|$|R
40|$|Abstract. A new {{software}} package BC-MPI which allows an MPI application {{to run on}} several clusters with various MPI implementations is presented. It uses vendor MPI implementations for communication inside clusters and exploits the multithreaded MPI <b>THREAD</b> MULTIPLE <b>mode</b> for handling inter-cluster communication in additional threads of the MPI application. Furthermore, a BC-MPI application can be automatically compiled and started by the BeesyCluster middleware. The latter allows users to manage and use cluster accounts via a single BeesyCluster account and WWW or Web Services. The middleware connects to clusters via SSH and does not require any software installation on the clusters. Results of various latency and bandwidth tests for intra and inter-cluster communication are presented for BC-MPI using OpenMPI and LAM/MPI and Infiniband or TCP within clusters...|$|R
40|$|ABSTRACT. Herein, the cyclic voltammetric (CV) {{investigations}} of structurally similar bisnitrocompounds (N 3, N 4, N 5, N 6, having different −CH 2 − spacer length) is presented. CV study offered interesting interactional possibilities of bisnitrocom-pounds with chicken blood ds. DNA at physiological pH 4. 7 and human body temperature, 310 K. The results indicated strong interaction by these symmetric molecules with ds. DNA {{and strength of}} binding is found to depend on length of CH 2 spacer group in their molecular structure. Thermodynamics derived from electrochemical binding parameters also favored the irre-versible interactions. Moreover, <b>threading</b> intercalation <b>mode</b> of binding is suggested based on thermodynamic and kinetic binding parameters extracted from CV studies. Key words: Bisnitrocompounds, ds. DNA binding, Cyclic voltammetry, Threading intercalatio...|$|R
40|$|A {{two-level}} {{model for}} reactive systems programming is introduced in which threads {{linked to the}} same scheduler are run cooperatively and have the possibility {{to escape from the}} scheduler control to run preemptively. We present a type and effect system to enforce a logical separation of the memory which ensures that, when running in preemptive <b>mode,</b> <b>threads</b> do not interfere with those running in cooperative mode. Thus, the atomicity property at the basis of the cooperative model is preserved...|$|R
30|$|There are two {{different}} failure <b>modes</b> (<b>threaded</b> rod tensile fracture and threaded rod pullout fracture) for glued-in rods on connection strength of bamboo glulam. In threaded rod tensile fracture mode, rod necking and tensile fracture of the threaded rod also were found. However, in threaded rod pullout fracture mode, interface shear failure of the bamboo glulam around the anchoring zone of the threaded rod happened. The mechanical performances and the failure modes of the glued-in rod materials are mainly influenced by the inherent base materials.|$|R
40|$|In this paper, we {{identify}} {{some of the}} computational advances that have been contributing to the efficient solution of mixed-integer linear programming (MILP) problems. Recent features added to MILP solvers at the algorithmic level and at the hardware level have been contributing to the increasingly efficient solution of more difficult and larger problems. Therefore, we {{will focus on the}} main advances in terms of hardware, and algorithms in one commercial solver to demonstrate {{the advantages and disadvantages of}} the recent features. Special attention is given to the utilization of multiple <b>threads,</b> parallelization <b>modes,</b> and the integration of heuristics with the branch and cut algorithm. Two problems are used to show the advantages of some of the new options. The results show that while some of the new features may help on the solution of difficult problems, they can also reduce the performance on relatively easy problems. 1...|$|R
50|$|Instead of {{implementing}} a single architecture, Apache provides {{a variety of}} MultiProcessing Modules (MPMs), which allow Apache to run in a process-based, hybrid (process and <b>thread)</b> or event-hybrid <b>mode,</b> to better match the demands of each particular infrastructure. This implies that the choice of correct MPM and the correct configuration is important. Where compromises in performance need to be made, the design of Apache is to reduce latency and increase throughput, relative to simply handling more requests, thus ensuring consistent and reliable processing of requests within reasonable time-frames.|$|R
40|$|Abstract—The Intel Xeon Phi {{coprocessor}} offers high par-allelism on energy-efficient {{hardware to}} minimize energy con-sumption while maintaining performance. Dynamic frequency and voltage scaling is not accessible on the Intel Xeon Phi. Hence, saving energy relies mainly on tuning application performance. One general optimization technique is thread affinity, {{which is an}} important factor in multi-core architectures. This work investigates the effects of varying <b>thread</b> affinity <b>modes</b> and reducing core utilization on energy and execution time for the NASA Advanced Supercomputing Parallel Benchmarks (NPB). Energy measurements are captured using the micsmc utility tool available on Xeon Phi. The measurements are checked against total power captured using Wattsup power meters. The results are compared to the system-default thread affinity and granularity modes. Mostly positive impacts on performance and energy are observed: When executed at the maximum thread count on all unoccupied cores, all the benchmarks but one exhibited energy savings if a specific affinity mode is set. I...|$|R
40|$|Abstract The use of wikis {{to support}} {{collaborative}} writing activities {{has captured the}} attention of second/foreign language researchers (SL/FL). The majority of studies to date have found evidence of positive collaborative behaviours, however some studies have reported inactive and unequal participation, individual ownership of the text, and minimal evidence of collaborative dialogue. Although the important role of the teacher has been reported in contexts such as face- to-face (FTF) and other online contexts, few studies have explored the effect of teachers’ online interventions on student-student (S-S) interaction in the wiki context. Therefore, this thesis fills this gap by exploring teachers’ interventional behaviours, and in particular, how they affect S-S wiki collaboration. A qualitative multiple case study design was conducted with 3 EFL teachers and their students (aged 17 - 18 years) at two Kuwaiti government high schools. Data were collected over a period of 13 weeks. The online discussion that occurred between students via the wiki <b>threaded</b> <b>mode</b> and their writing behaviours, as shown in the edits history were analysed and triangulated with the interview data. Unlike previous research, this study brings together the analysis of the wiki threaded discussion and editing behaviours to understand the process of collaboration. Qualitative Computer Mediated Discourse Analysis (CMDA) suggests that the teachers played an effective role in shaping the way the students interacted. An examination of the teachers’ interventional behaviours suggests that some interventional behaviours promoted S-S collaboration and some hindered it. Behaviours such as establishing a wiki culture of collaboration, reinforcing a sense of wiki community, asking students to engage mutually, being a co-learner and modelling editing behaviour, all seem to promote collaboration. Conversely, direct teacher edits, immediate responses, using an authoritative tone, and asking inactive students to participate may promote participation but not necessarily collaboration. The interview data also suggested that sociocultural issues, such as teachers’ superiority, questionable peer feedback, and individual text-ownership hindered collaboration. Therefore, this thesis argues that even in an online student-centred context such as a wiki, the role of the teacher is critical. Teachers who adopt a non-authoritative and collaborative-orientated intervention are much more effective in promoting S-S collaboration than those who are authoritative and intervene in a non-collaborative way. There is therefore a need for teacher training that raises teachers’ awareness of effective pedagogy regarding the use of wikis...|$|R
40|$|Abstract—Continued CMOS scaling is {{expected}} to make future microprocessors susceptible to transient faults, hard faults, manufacturing defects and process variations causing fault tolerance to become important even for general purpose processors targeted at the commodity market. To mitigate the effect of decreased reliability, a number of fault-tolerant architectures have been proposed that exploit the natural coarse-grained redundancy available in chip multiprocessors (CMPs). These architectures execute a single application using two threads, typically as one leading thread and one trailing thread. Errors are detected by comparing the outputs produced by these two threads. These architectures schedule a single application on two cores or two thread contexts of a CMP. As a result, besides the additional energy consumption and performance overhead that is required to provide fault tolerance, such schemes also impose a throughput loss. Consequently a CMP which is capable of executing 2 n <b>threads</b> in non-redundant <b>mode</b> can only execute half as many (n) <b>threads</b> in fault-tolerant <b>mode.</b> In this paper we propose multiplexed redundant execution (MRE), a low-overhead architectural technique that executes multiple trailing threads on a single processor core. MRE exploits the observation {{that it is possible to}} accelerate the execution of the trailing thread by providing execution assistance from the leading thread. Execution assistance combined with coarse-grained multithreading allows MRE to schedule multiple trailing threads concurrently on a single core with only a small performance penalty. Our results show that MRE increases the throughput of fault-tolerant CMP by 16 % over an ideal dual modular redundant (DMR) architecture. I...|$|R
5000|$|Windows maps {{not only}} {{hardware}} interrupt levels to its internal interrupt table, but also maps software interrupts. The mappings in this table are called Interrupt Request Levels, or IRQLs, {{and a separate}} IRQL is kept for each processor in a multiprocessor system. The IRQL values are specific to the x86, IA64 and AMD64 processor architectures that Windows can run on, though theoretically they can support other CPUs that use a similar interrupt scheme (such as the DEC Alpha and MIPS, which were supported briefly on early versions of Windows). What this essentially means is that APCs (Asychronous procedure calls), user <b>threads</b> and kernel <b>mode</b> operations can be interrupted and the system must run them at an IRQL lower than the thread scheduler (or [...] "dispatcher").|$|R
40|$|We formalise a thread-based {{concurrent}} language {{which makes}} resource control possible. Concurrency {{is based on}} a two-level model: threads are executed cooperatively when linked to a scheduler, and unlinked threads and schedulers are executed preemptively, {{under the control of the}} OS. We present a type and effect system to enforce a logical separation of the memory which ensures that (1) when running in preemptive <b>mode,</b> <b>threads</b> do not interfere with other threads; (2) threads linked to a scheduler do not interfere with threads linked to another scheduler. Thus, we get a concurrency model in which well-typed programs are free from dataraces. The type system also insures that well-typed programs are bounded in memory and in their use of the CPU. Detection of termination of recursive functions and stratification of references in memory are techniques used to get these properties. ...|$|R
50|$|From the programmer's {{point of}} view, RTLinux {{originally}} {{looked like a}} small threaded environment for real-time tasks plus the standard Linux environment for everything else. The real-time operating system was implemented as a loadable kernel module which began by virtualizing guest interrupt control and then started a real-time scheduler. Tasks were assigned static priorities and scheduling was originally purely priority driven. The guest operating system was incorporated as the lowest priority task and essentially acted as the idle task for the real-time system. Real-time tasks ran in kernel mode. Later development of RTLinux adopted the POSIX threads application programming interface (API) and then permitted creation of <b>threads</b> in user <b>mode</b> with real-time <b>threads</b> running inside guest processes. In multiprocessor environments threads were locked to processor cores and {{it was possible to}} prevent the guest thread from running on designated core (effectively reserving cores for only real-time processing).|$|R
40|$|Development of {{mathematical}} model of asynchronous machines in (d, q) coordinate system with {{taking into account}} the saturation of magnetic circuits is performed. In the paper, we used the method of dynamic inductances, which is connected {{with the use of a}} systematic study of motor properties. An analytical model of asynchronous motor magnetic circuit, which is taken into account action of the tangential and radial dynamic inductances is created. On the basis of this the sensor dynamic inductances of rich machine, which was recorded in (d, q) coordinate system of equations of rotor and stator circles of asynchronous motor with the saturation were built. The author suggests to use the method of dynamic inductances at construction of asynchronous engine mathematical model, that allows to take into account the saturation of the main magnetic path for the modes with a wide range of changes in the flow of mutual induction between the stator and the rotor, saturation flow path, the scattering modes that are characterized by large current circuits of the machine, induction, due to processes of saturation, between mutually perpendicular to the contours of the machine, as well as the joint saturation worker thread and <b>threads</b> scattering <b>modes</b> that are characterized by the significant size of the workflow and large values of currents contours of the machine. The mathematical model allows to take into account the change of the magnetic state of asynchronous motor as necessity to build adequate systems of control drives and drivin...|$|R
40|$|The core {{count of}} modern {{processors}} is steadily increasing, forcing programmers {{to use more}} concurrent threads or tasks to effectively use the available hardware. This in turn makes it increasingly challenging to achieve correct and efficient thread synchronization. To support the programmer in this task, IBM introduced hardware transactional memory (TM) and speculative execution (SE) in their Blue Gene/Q system with its 16 -core processor, which permits to run 64 simultaneous hardware <b>threads</b> in SMT <b>mode.</b> TM and SE allow for parallelization when race conditions may happen, however upon their detection the respective parts of the execution are rolled back and re-executed serially. This incurs some overhead and therefore usage must be well justified. In this paper, we describe extensions to the community instrumentation and measurement infrastructure Score-P, allowing developers to instrument, measure, and analyze applications. To our knowledge, {{this is the first}} integrated performance tool framework allowing to analyze TM/SE programs. We demonstrate its usefulness and effectiveness by describing experiments with benchmarks and a real-world application...|$|R
40|$|The {{equipment}} that the payload electronic control box matches the satellite Charge-Coupled Device (CCD) camera must be rigorously tested before {{being put into}} use. The traditional testing process {{is to make it}} with the bulky CCD camera system docking and then to capture a certain image to analyze, this will cause {{a waste of time and}} material. In consideration for the above problems, a simulative CCD camera image resource system is proposed in this paper. The control signal of a simulative CCD camera image resource is usually implemented in the Field Programmable Gate Array (FPGA), thus increasing the complexity of the hardware language, and stability will fall and making post-adjustment is more trouble. This paper presents a system which is controlled based on the host computer software. It makes complex code integrate into the host computer and sets aside a adjust interface to the software in advance, achieving with the FPGA circuit board to send the picture generated by the system cycle together. Sending images, image display and serial communication are usually for a thread in the general simulative CCD camera image resource system, this will inevitably cause some problems that often appear in the process. However, the system utilizes a three-run <b>thread</b> synchronization <b>mode</b> which makes the system more flexible, very easy to adjust. Extensive tests show that the simulative CCD camera image resource system has been running with satisfactory results. So it can replace CCD camera to test the payload electrical control box, which is stable and reliable test for the project and provides a strong support...|$|R
40|$|The diverse {{assemblage}} of organisms associated with Mytilus californianus Conrad (Mollusca: Bivalvia) populations {{is a useful}} tool for examining biogeographic patterns of intertidal species distributions in the Southern California Bight. Mussels, as members of the genus Mytilus are often called, are attached to the underlying substrate and to other mussels by strong byssal <b>threads.</b> This <b>mode</b> of attachment enables mussels to form layered beds up to 20 cm thick (Paine 1976). Sediment, detritus, and debris are trapped in the spaces between mussels, providing food and shelter for a variety of other invertebrates (Reish 1964, Paine 1966, Kanter 1977, Suchanek 1979). This complex association of organisms {{is referred to as the}} Mytilus californianus community. The mussel community is extremely rich, often supporting several hundred species (Kanter 1977, Suchanek 1979); its species richness is rivaled only by that of the Balanus-Endocladia association described by Glynn (1965). Past studies of mussel beds have dealt only with specific questions concerning succession (Hewatt 1937, Reish 1964, Cimberg 1975) and trophic structure (Paine 1966, Kanter 1977). Questions concerning community distribution patterns over major geographic areas have not been addressed. Large-scale investigations of other intertidal communities have concentrated on macro-invertebrates, macrophytes, or both (Dawson 1959, 1965, Nicholson and Cimberg 1971, Littler 1980); the micro-biota occupying interstices in algal turf and mussel beds were generally not considered. The Southern California Bight contains intertidal mussel beds at mainland and offshore island localities. Prior to the Bureau of Land Management's (BLM) Outer Continental Shelf studies initiated in 1975, no detailed investigations into mussel community structure or distribution had been performed in the bight. This paper discusses some of the findings of the third-year (1977 - 1978) BLM program, including: (1) mussel community composition, (2) mussel community species richness, and (3) biogeographic patterns and similarities among mussel communities of the bight...|$|R
