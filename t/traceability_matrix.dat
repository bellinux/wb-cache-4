45|28|Public
5000|$|SV-5a Operational Activity to Systems Function <b>Traceability</b> <b>Matrix</b> ...|$|E
50|$|A <b>traceability</b> <b>matrix</b> is {{generally}} used to link items within the TEMP to items within specifications.|$|E
5000|$|<b>Traceability</b> <b>matrix</b> - A <b>traceability</b> <b>matrix</b> is a table-like {{representation}} that maps artefacts of {{one type}} (e.g., requirements) depicted in columns to artefacts of another type (e.g., source code) depicted in rows. Cells visualize a trace between two artefacts if filled or a non-trace if left empty. The advantage of traceability matrices {{is that all}} links between artefacts are visible at a glance. Filters help {{to reduce the amount}} of displayed information. Traceability matrices are suitable for management tasks. However, in industry projects often consist of thousands of artefacts: the tables could become very large and confusing.|$|E
40|$|INFORMATION RETRIEVAL It is {{important}} to track how a requirement changes throughout the software lifecycle. Each requirement should be validated during {{and at the end}} of each phase of the software lifecycle. It is common to build <b>traceability</b> <b>matrices</b> to demonstrate that requirements are satisfied by the design. <b>Traceability</b> <b>matrices</b> are needed in various tasks in the software development process. Unfortunately, developers and designers do not always build <b>traceability</b> <b>matrices</b> or maintain <b>traceability</b> <b>matrices</b> to the proper level of detail. Therefore, <b>traceability</b> <b>matrices</b> are often built “after-the-fact. ” The generation of <b>traceability</b> <b>matrices</b> is a time consuming, error prone, and mundane process. Most of the times, the <b>traceability</b> <b>matrices</b> are built manually. Consider the case where an analyst is tasked to trace a high level requirement document to a lower level requirement specification. The analyst may have to look through M x N elements, where M and N are the number of high and low level requirements, respectively. There are not many tools available to assist the analysts in tracing unstructured textual artifacts and the very few tools that are available require enormous pre-processing...|$|R
50|$|Documentation {{is about}} the testing of all the {{documents}} created prior and after the testing of software. Any delay in the testing of the document will increase the cost. Some common artifacts about software development and testing can be specified as test cases, test plans, requirements, and <b>traceability</b> <b>matrices.</b>|$|R
50|$|To {{ease the}} {{creation}} of <b>traceability</b> <b>matrices,</b> it is advisable to add the relationships to the source documents for both backward traceability and forward traceability. That way, when an item is changed in one baselined document, {{it is easy to}} see what needs to be changed in the other.|$|R
50|$|A {{requirements}} <b>traceability</b> <b>matrix</b> {{may be used}} {{to check}} if the current project requirements are being met, and to help {{in the creation of a}} request for proposal, software requirements specification, various deliverable documents, and project plan tasks.|$|E
5000|$|Traceability matrix: A <b>traceability</b> <b>matrix</b> is a {{table that}} {{correlates}} requirements or design documents to test documents. It {{is used to}} change tests when related source documents are changed, to select test cases for execution when planning for regression tests by considering requirement coverage.|$|E
50|$|A <b>traceability</b> <b>matrix</b> is a document, {{usually in}} the form of a table, used to assist in {{determining}} the completeness of a relationship by correlating any two baselined documents using a many-to-many relationship comparison. It is often used with high-level requirements (these often consist of marketing requirements) and detailed requirements of the product to the matching parts of high-level design, detailed design, test plan, and test cases.|$|E
40|$|International audienceThe TURTLE toolkit, or TTool for short, {{offers a}} {{real-time}} UML front-end and a user-friendly interface to simulation techniques and formal verification {{techniques such as}} reachability analysis, observer-based analysis and <b>traceability</b> <b>matrices</b> generation. TTool's main strength is the total hiding of formal languages to UML modelers, while offering formal verification capabilitie...|$|R
40|$|Abstract—We posit that swarm {{intelligence}} can {{be applied}} to effectively address requirements engineering problems. Specifically, this paper demonstrates the applicability of swarm intelligence to the requirements tracing problem using a simple ant colony algorithm. The technique has been validated using two real-world datasets from two problem domains. The technique can generate requirements <b>traceability</b> <b>matrices</b> (RTMs) between textual requirements artifacts (high level requirements traced to low level requirements, for example) with equivalent or better accuracy than traditional information retrieval techniques...|$|R
40|$|Our {{research}} group recently discovered that human analysts, {{when asked to}} validate candidate <b>traceability</b> <b>matrices,</b> pro-duce predictably imperfect results, in some cases less accu-rate than the starting candidate matrices. This discovery radically changes {{our understanding of how}} to design a fast, accurate and certifiable tracing process that can be imple-mented as part of software assurance activities. We present our vision for the new approach to achieving this goal. Fur-ther, we posit that human fallibility may impact other soft-ware engineering activities involving decision support tools...|$|R
5000|$|The SV-4a {{documents}} system functional hierarchies {{and system}} functions, {{and the system}} data flows between them. The SV-4 from DoDAF v1.0 is designated as 'SV-4a' in DoDAF v1.5. Although there is a correlation between OV-5 or business-process hierarchies and the system functional hierarchy of SV-4a, it {{need not be a}} one-to-one mapping, hence, the need for the Operational Activity to Systems Function <b>Traceability</b> <b>Matrix</b> (SV-5a), which provides that mapping.|$|E
50|$|Post-Requirements Traceability. Not {{only the}} {{requirements}} themselves should be traced {{but also the}} requirements relationship with all the artefacts associated with it, such as models, analysis results, test cases, test procedures, test results and documentation of all kinds. Even people and user groups associated with requirements should be traceable. Requirements are realized into design artefacts, implementation, and finally, verified. Artefacts tied to the latter stages should {{be traced back to}} the requirements as well. This is typically done via a requirements <b>traceability</b> <b>matrix.</b>|$|E
50|$|In {{order to}} fully test {{that all the}} {{requirements}} of an application are met, there {{must be at least}} two test cases for each requirement: one positive test and one negative test. If a requirement has sub-requirements, each sub-requirement must have at least two test cases. Keeping track of the link between the requirement and the test is frequently done using a <b>traceability</b> <b>matrix.</b> Written test cases should include a description of the functionality to be tested, and the preparation required to ensure that the test can be conducted.|$|E
40|$|TURTLE is a {{real-time}} UML profile {{supported by}} a toolkit which enables application of formal verification techniques to the analysis, design and deployment phases of systems design trajectory. This paper extends the TURTLE methodology with a requirement capture phase. SysML requirement diagrams are introduced. Temporal requirements (TR) are formally expressed using a dedicated language based on Allen’s interval algebra. TRs serve as starting point to automatically synthesize observers and to guide the verification process applied to the TURTLE model of the system. Verification results are automatically collected in <b>traceability</b> <b>matrices.</b> A Hybrid Sport Utility Vehicle serves as example...|$|R
50|$|Common {{visualizations}} for <b>traceability</b> {{information are}} <b>matrices,</b> graphs, lists, and hyperlinks.|$|R
40|$|The {{software}} engineering industry undertakes many activities that require generating and using mappings. Companies develop knowledge bases to capture corporate expertise and possibly proprietary information. Software developers build <b>traceability</b> <b>matrices</b> {{to demonstrate that}} their designs satisfy the requirements. Proposal managers map customers 2 ̆ 7 statements of work to individual sections of companies 2 ̆ 7 proposals to prove compliance. Systems engineers authoring interface specifications record design rationales as they make relevant decisions. We developed an approach to tracing and mapping that aims to use fully automated information retrieval techniques, and we implemented our approach in a tool called RETRO (requirements tracing on target) ...|$|R
5000|$|Use case {{developers}} {{often find}} it difficult to determine the level of user interface (UI) dependency to incorporate in a use case. While use case theory suggests that UI not be reflected in use cases, it can be awkward to abstract out this aspect of design, as it makes the use cases difficult to visualize. In software engineering, this difficulty is resolved by applying requirements traceability, for example with a <b>traceability</b> <b>matrix.</b> Another approach to associate UI elements with use cases, is to attach a UI design to each step in the use case. This is called a use case storyboard.|$|E
50|$|Ideally, the {{software}} must completely satisfy {{the set of}} requirements. From design, each requirement must be addressed in every single document in {{the software}} process. The documents include the HLD, LLD, source codes, unit test cases, integration test cases and the system test cases. In a requirements <b>traceability</b> <b>matrix,</b> the rows will have the requirements. The columns represent each document. Intersecting cells are marked when a document addresses a particular requirement with information related to the requirement ID in the document. Ideally, if every requirement is addressed in every single document, all the individual cells have valid section ids or names filled in. Then we know that every requirement is addressed. If any cells are empty, it represents that a requirement has not been correctly addressed.|$|E
40|$|Requirement <b>traceability</b> <b>matrix</b> is a {{table that}} captures the {{complete}} user and system {{requirement for the}} system. It helps to trace from requirement till testing in order to verify that the requirement is fulfilled. In SCRUM development methodology, requirement <b>traceability</b> <b>matrix</b> is used to capture the linkage of user stories between product backlog and sprint backlog. The linkages between the requirements are retrieved through these two documents. However, unstructured format of both documents do not help in getting the requirement traceability. Thus, requirement traceability has become an issue for SCRUM practitioners especially for system development and maintenance. Therefore, this study will introduce structured format of available artifacts and develop a tracing tool to automatically generate the requirement <b>traceability</b> <b>matrix</b> by keyword searching. Both the documents {{used in this study}} have to be prepared by using the structured format and the proposed traceability tool is able to generate the requirement <b>traceability</b> <b>matrix</b> automatically by keyword searching functionality. The result shows that the introduced structured format is very useful and it has increase the efficiency of retrieving the matrix far better than previous process. There is a significant time saved up to 95 % for generating the requirement <b>traceability</b> <b>matrix</b> using the proposed method and tool. As a conclusion, requirement traceability can be achieved in SCRUM methodology through the proposed structured documentation and the tool developed...|$|E
5000|$|... #Caption: Some produce <b>traceability</b> makers use <b>matrix</b> {{barcodes}} {{to record}} data on specific produce.|$|R
40|$|Abstract We posit that swarm {{intelligence}} can {{be applied}} to effectively address requirements engineering problems. Specifically, this paper demonstrates the applicability of swarm intelligence to the requirements tracing problem using two techniques: a simple swarm algorithm and a pheromone swarm algorithm. The techniques have been validated using two real-world datasets from two problem domains. The simple swarm technique generated require-ments <b>traceability</b> <b>matrices</b> between textual requirements artifacts (high-level requirements traced to low-level requirements, for example). When compared with a baseline information retrieval tracing method, the swarm algorithms showed mixed results. The swarms achieved statistically significantly results on one of the secondary measurements for one dataset compared with the baseline method, lending support for continued investigation into swarms for tracing...|$|R
40|$|The {{continuous}} {{stream of}} requirements changes that often takes place during software development and can create major {{problems in the}} development process. This paper defines a concept we call semantic coupling {{that can be used}} during all the phases of a system specification and design to reduce the impact of changing requirements. Within the general framework of the intent specifications, <b>traceability</b> <b>matrices</b> representing the mappings between different abstraction levels are used to evaluate the sensitivity of a given design to requirement changes. The practicality of using the approach on real software is demonstrated using the specification of the control software for a NASA robot designed to service the heat-resistant tiles on the Space Shuttle...|$|R
3000|$|How can the {{conceptual}} model be utilized effectively to facilitate management of <b>traceability</b> <b>matrix</b> in different project phases by multiple perspectives? [...]...|$|E
40|$|Traceability {{recovery}} is a tedious, error-prone, person-power intensive task, even if aided by automated traceability tools. Human analysts must vet candidate traceability links retrieved by such tools and must often {{go looking for}} links that such tools fail to locate as they build a <b>traceability</b> <b>matrix.</b> This paper examines a research version of the traceability tool REquirements TRacing On target (RETRO) that logs analyst actions. We examine the user logs {{in order to understand}} how analysts work on traceability recovery tasks. Such information is a pre-requisite to understanding how to better design traceability tools to best utilize analyst time while developing a high quality final <b>traceability</b> <b>matrix.</b> Categories and Subject Descriptor...|$|E
40|$|Automated {{test case}} and test driver {{generation}} from a formal model {{is becoming a}} more widely used practice in the smart card area. This innovative approach for validation testing {{makes it possible to}} ensure the functional coverage of the test suite and to automate the production of executable test scripts. This paper presents an approach to automatically produce the <b>Traceability</b> <b>Matrix</b> from requirements to test cases, as part of the test generation process. This approach is embedded in the LEIRIOS Test Generator (LTG) tool, and has been used for several real-life applications in the smart card industry. This paper introduces the approach to annotating the formal model and using it to generate the <b>Traceability</b> <b>Matrix.</b> It also discusses some lessons learnt from our experience using Model-Based Testing for smart card software validation. Copyright 2005 ACM...|$|E
40|$|Requirements {{traceability}} is {{an essential}} step in ensuring the quality of software {{during the early stages}} of its development life cycle. Requirements tracing usually consists of document parsing, candidate link generation and evaluation and traceability analysis. This paper demonstrates the applicability of Statistical Term Extraction metrics to generate candidate links. It is applied and validated using two data sets and four types of filters two for each data set, 0. 2 and 0. 25 for MODIS, 0 and 0. 05 for CM 1. This method generates requirements <b>traceability</b> <b>matrices</b> between textual requirements artifacts (such as high-level requirements traced to low-level requirements). The proposed method includes ten word frequency metrics divided into three main groups for calculating the frequency of terms. The results show that the proposed method gives better result when compared with the traditional TF-IDF method...|$|R
40|$|The {{building}} of <b>traceability</b> <b>matrices</b> by those {{other than the}} original developers is an arduous, error prone, prolonged, and labor intensive task. Thus, after-the-fact requirements tracing is a process where {{the right kind of}} automation can definitely assist an analyst. Recently, a number of researchers have studied the application of various methods, often based on information retrieval after-the-fact tracing. The studies are diverse enough to warrant a means for comparing them easily as well as for determining areas that require further investigation. To that end, we present here an experimental framework for evaluating requirements tracing and traceability studies. Common methods, metrics and measures are described. Recent experimental requirements tracing journal and conference papers are catalogued using the framework. We compare these studies and identify areas for future research. Finally, we provide suggestions on how the field of tracing and traceability research may move to a more mature level...|$|R
40|$|Software {{assurance}} is {{the planned}} and systematic set {{of activities that}} ensures that software processes and products conform to requirements, standards, and procedures. Examples of such activities are the following: code inspections, unit tests, design reviews, performance analyses, construction of <b>traceability</b> <b>matrices,</b> etc. In practice, software development projects have only limited resources (e. g., schedule, budget, and availability of personnel) to cover the entire development effort, of which assurance is but a part. Projects must therefore select judiciously from among the possible assurance activities. At its heart, this {{can be viewed as}} an optimization problem; namely, to determine the allocation of limited resources (time, money, and personnel) to minimize risk or, alternatively, to minimize the resources needed to reduce risk to an acceptable level. The end result of the work reported here is a means to optimize quality-assurance processes used in developing software. This is achieved by combining two prior programs in an innovative manne...|$|R
40|$|Abstract: Automated {{test case}} and test driver {{generation}} from a precise behaviour UML model is an emerging approach for software functional validation. This innovative approach for validation testing {{makes it possible}} to ensure the functional coverage of the test suite and to automate the production of executable test scripts. This paper presents an approach to automatically produce the <b>traceability</b> <b>matrix</b> from requirements to test cases, as part of the test generation process. This approach is embedded in the LEIRIOS Test Designer technology, and has been used for several real-life applications in eTransactions and Enterprise IT areas. This paper introduces the approach to annotating the UML model and using it to generate the <b>traceability</b> <b>matrix.</b> It also discusses some lessons learnt from our experience using requirements traceability as part of a Model-Based Testing process. ...|$|E
40|$|This {{article is}} talking about risk based testing {{approach}} in user acceptance testing UAT (User Acceptance Testing). There are presented definitions of risk and risk based testing. In addition, {{we are talking about}} risks that can appear during UAT and we are describing the process of testing based on risks. We propose some techniques and methods of identifying risks such as using Brainstorming, Delphi method,probability analysis method and others. Also, risk <b>traceability</b> <b>matrix</b> is presented as a method of prioritizing risks...|$|E
40|$|Each {{proposal}} for a NASA mission concept includes a Science <b>Traceability</b> <b>Matrix</b> (STM), intended to show that what is being proposed would contribute to satisfying {{one or more of}} the agency's top-level science goals. But the information traditionally provided cannot be used directly to quantitatively compare anticipated science return. We added numerical elements to NASA's STM and developed a software tool to process the data. We then applied this methodology to evaluate a group of competing concepts for a proposed mission to Saturn's moon, Titan...|$|E
40|$|The {{representation}} of traceability links in requirements knowledge {{is vital to}} improve the general understanding of requirements {{as well as the}} relevance and consequences of relations between requirements artifacts and other artifacts in software engineering. Various visualization techniques have been developed to support the {{representation of}} traceability information, e. g. <b>traceability</b> <b>matrices,</b> graphs and tree structures. However, these techniques do not scale well on large amounts of artifacts and often do not provide additional functionality to present supplementary data. In this paper, we use Sunburst and Netmap visualizations as alternative visualization techniques. These techniques perform well even on large amounts of artifacts and traceability links. Moreover, they provide the ability to present derivative data. An implementation of the visualizations was developed in conjunction with a requirements plugin for the Redmine project management platform. In this paper, the applicability of Sunburst and Netmap visualizations for requirements engineering knowledge is illustrated by applying it to an example project and the results are compared to traditional visualization techniques...|$|R
40|$|The {{generation}} of traceability links or <b>traceability</b> <b>matrices</b> {{is vital to}} many software engineering activities. It is also person-power intensive, time-consuming, error-prone, and lacks tool support. The activities that require traceability information include, {{but are not limited}} to, risk analysis, impact analysis, criticality assessment, test coverage analysis, and verification and validation of software systems. Information Retrieval (IR) techniques have been shown to assist with the automated {{generation of}} traceability links by reducing {{the time it takes to}} generate the traceability mapping. Researchers have applied techniques such as Latent Semantic Indexing (LSI), vector space retrieval, and probabilistic IR and have enjoyed some success. This paper concentrates on examining issues not previously widely studied in the context of traceability: the importance of the vocabulary base used for tracing and the evaluation and assessment of traceability mappings and methods using secondary measures. We examine these areas and perform empirical studies to understand the importance of each to the traceability of software engineering artifacts...|$|R
40|$|Abstract—The {{representation}} of traceability links in require-ments knowledge {{is vital to}} improve the general understanding of requirements {{as well as the}} relevance and consequences of relations between requirements artifacts and other artifacts in software engineering. Various visualization techniques have been developed to support the {{representation of}} traceabil-ity information, e. g. <b>traceability</b> <b>matrices,</b> graphs and tree structures. However, these techniques do not scale well on large amounts of artifacts and often do not provide additional functionality to present supplementary data. In this paper, we use Sunburst and Netmap visualizations as alternative visualization techniques. These techniques perform well even on large amounts of artifacts and traceability links. Moreover, they provide the ability to present derivative data. An implemen-tation of the visualizations was developed in conjunction with a requirements plugin for the Redmine project management platform. In this paper, the applicability of Sunburst and Netmap visualizations for requirements engineering knowledge is illustrated by applying it to an example project and the results are compared to traditional visualization techniques. Keywords-component visualization, requirements, artifacts, knowledge-management I...|$|R
