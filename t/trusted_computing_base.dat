291|7264|Public
25|$|AIX materializes the <b>trusted</b> <b>computing</b> <b>base</b> as an {{optional}} component in its install-time package management system.|$|E
25|$|As stated above, {{trust in}} the <b>trusted</b> <b>computing</b> <b>base</b> is {{required}} to make any progress in ascertaining {{the security of the}} computer system. In other words, the <b>trusted</b> <b>computing</b> <b>base</b> is “trusted” first and foremost {{in the sense that it}} has to be trusted, and not necessarily that it is trustworthy. Real-world operating systems routinely have security-critical bugs discovered in them, which attests of the practical limits of such trust.|$|E
25|$|In other words, <b>trusted</b> <b>computing</b> <b>base</b> (TCB) is a {{combination}} of hardware, software, and controls that work together to form a trusted base to enforce your security policy.|$|E
40|$|Federated {{identity}} and access management {{systems such as}} Shibboleth may symbolize a boost: (i) to bring the efficiency and effectiveness in collaboration for governments, enterprises and academia, and (iii) conserve the home domain user’s identity privacy in a privacy-enhanced fashion. However, the consternation is about {{the absence of a}} <b>trusted</b> <b>computing</b> <b>based</b> mutual <b>trust</b> and security establishment in the Shibboleth infrastructure. The <b>Trusted</b> <b>Computing</b> <b>based</b> mutual attestation notion may assist to add-on the mutual trust and security but raises bidirectional platform privacy concerns. Therefore, to enjoy effectively the federated {{identity and}} resource (service) access by the home and foreign domain organizations it is necessary to provide an access control that may coalesced at least some security, trust and privacy aspects in a cohesive fashion. The objective of the work appearing in this paper is to provide a viable and feasible unified security, trust and privacy framework access control solution for federated identity and access management systems by fusing the Shibboleth authentication and authorization access control with the <b>trusted</b> <b>computing</b> <b>based</b> trustworthy mutual attestation...|$|R
40|$|Insufficiently {{protected}} mobile devices {{present a}} ubiquitous threat. Due to severe hardware constraints, such as limited {{printed circuit board}} area, hardware-based security as proposed by the <b>Trusted</b> <b>Computing</b> Group is usually not part of mobile devices, yet. We present the design and implementation of seTPM, a secure element based TPM, utilizing Java Card technology. seTPM establishes trust in mobile devices by enabling <b>Trusted</b> <b>Computing</b> <b>based</b> integrity measurement services, such as IMA for Linux. Our prototype emulates TPM functionality on a GlobalPlatform secure element, which allows seamless integration into the Trusted Software Stack of Linux-based mobile operating systems like Android. With our work, we provide a solution to run <b>Trusted</b> <b>Computing</b> <b>based</b> security protocols while supplying a similar security level as provided by hardware TPM chips...|$|R
40|$|Reputation and {{recommendation}} {{systems are}} fundamental {{for the formation}} of community market places. Yet, they are easy targets for attacks which disturb a market's equilibrium and are often based on cheap pseudonyms used to submit ratings. We present a method to price ratings using <b>trusted</b> <b>computing,</b> <b>based</b> on pseudonymous tickets...|$|R
25|$|As {{outlined}} by the aforementioned Orange Book, software portions of the <b>trusted</b> <b>computing</b> <b>base</b> need to protect themselves against tampering to be of any effect. This {{is due to the}} von Neumann architecture implemented by virtually all modern computers: since machine code can be processed as just another kind of data, it can be read and overwritten by any program barring special memory management provisions that subsequently have to be treated as part of the TCB. Specifically, the <b>trusted</b> <b>computing</b> <b>base</b> must at least prevent its own software from being written to.|$|E
25|$|The term <b>trusted</b> <b>computing</b> <b>base</b> {{goes back}} to Rushby, who defined it as the {{combination}} of kernel and trusted processes. The latter refers to processes which are allowed to violate the system's access-control rules.|$|E
25|$|The careful {{design and}} {{implementation}} of a system's <b>trusted</b> <b>computing</b> <b>base</b> is paramount to its overall security. Modern operating systems strive {{to reduce the size}} of the TCB so that an exhaustive examination of its code base (by means of manual or computer-assisted software audit or program verification) becomes feasible.|$|E
50|$|In cryptography, {{server-based}} signatures are digital signatures {{in which}} a publicly available server participates in the signature creation process. This {{is in contrast to}} conventional digital signatures that are based on public-key cryptography and public-key infrastructure. With that, they assume that signers use their personal <b>trusted</b> <b>computing</b> <b>bases</b> for generating signatures without any communication with servers.|$|R
40|$|The <b>trusted</b> <b>computing</b> <b>bases</b> (TCBs) of {{applications}} running on today’s commodity operating systems have become extremely large. This paper presents an architecture that allows to build applications {{with a much}} smaller TCB. It {{is based on a}} kernelized architecture and on the reuse of legacy software using trusted wrappers. We discuss the design principles, the architecture and some components, and a number of usage examples. ...|$|R
40|$|As {{the demand}} for system {{virtualization}} grows, so does the need to securely virtualize {{a wider range of}} underlying physical resources which can be shared among multiple guest OSs. Recently, virtualization technology with hardware support has become available on commodity processors and can be utilized {{to reduce the size of}} the <b>Trusting</b> <b>Computing</b> <b>Base</b> (TCB). The design of a secure system requires architects to develop a system architecture that satisfies security policies. In this paper we propose an approach for specifying and verifying a layered assurance scheme for multi-core architectures. ...|$|R
25|$|The <b>trusted</b> <b>computing</b> <b>base</b> (TCB) of a {{computer}} system is the set of all hardware, firmware, and/or software components that are critical to its security, {{in the sense that}} bugs or vulnerabilities occurring inside the TCB might jeopardize the security properties of the entire system. By contrast, parts of {{a computer}} system outside the TCB must not be able to misbehave {{in a way that would}} leak any more privileges than are granted to them in accordance to the security policy.|$|E
25|$|In {{many modern}} CPUs, the {{protection}} of the memory that hosts the TCB is achieved by adding in a specialized piece of hardware called the memory management unit (MMU), which is programmable by the operating system to allow and deny access to specific ranges of the system memory to the programs being run. Of course, the operating system is also able to disallow such programming to the other programs. This technique is called supervisor mode; compared to more crude approaches (such as storing the TCB in ROM, or equivalently, using the Harvard architecture), it has the advantage of allowing the security-critical software to be upgraded in the field, although allowing secure upgrades of the <b>trusted</b> <b>computing</b> <b>base</b> poses bootstrap problems of its own.|$|E
25|$|Systems that don't have a <b>trusted</b> <b>computing</b> <b>base</b> as part {{of their}} design do not provide {{security}} of their own: they are only secure insofar as security is provided to them by external means (e.g. a computer sitting in a locked room without a network connection may be considered secure depending on the policy, regardless of the software it runs). This is because, as David J. Farber et al. put it, n a computer system, the integrity of lower layers is typically treated as axiomatic by higher layers. As far as computer security is concerned, reasoning about the security properties of a computer system requires being able to make sound assumptions about what it can, and more importantly, cannot do; however, barring any reason to believe otherwise, a computer is able to do everything that a general Von Neumann machine can. This obviously includes operations that would be deemed contrary to all but the simplest security policies, such as divulging an email or password that should be kept secret; however, barring special provisions in the architecture of the system, there is no denying that the computer could be programmed to perform these undesirable tasks.|$|E
40|$|Reputation and {{recommendation}} {{systems are}} fundamental {{for the formation}} of community market places. Yet, they are easy targets for attacks which disturb a market's equilibrium and are often based on cheap pseudonyms used to submit ratings. We present a method to price ratings using <b>trusted</b> <b>computing,</b> <b>based</b> on pseudonymous tickets. Comment: Refereed contribution to the 4 th International Workshop for Technical, Economic and Legal Aspects of Business Models for Virtual Goods, December 13 - 15, 2006 on AXMEDIS 2006 in Leeds, England. 5 pages, 3 figures, final versio...|$|R
40|$|A trusted {{platform}} {{is a central}} component in most <b>trusted</b> <b>computing</b> <b>based</b> architectures. It can be constructed {{in many different ways}} and with different configuration settings resulting in different trust-related properties, such as the platform will not expose a secret or delegate a task to a rogue entity. In order to reason about such properties, we propose an abstract model based on CSP in which a {{platform is}} treated as a potentially malicious composition of sub-systems that interact by communicating messages. The model enables instantiation of platforms with varying trust levels and verification against specified properties. The applicability of the model is demonstrated on a trusted grid platform...|$|R
40|$|Web sites fail in {{the worst}} ways. They can reveal private data {{that can never be}} {{retracted}} [60, 72, 78, 79]. Or they can succumb to vandalism, and subsequently show corrupt data to users [27]. Blame can fall on the off-the-shelf software that runs the site (e. g., the operating system, the application libraries, the Web server, etc.), but more frequently (as in the above references), the custom application code is the guilty party. Unfortunately, the custom code behind many Web sites is difficult to secure and audit, due to large and rapidly-changing <b>trusted</b> <b>computing</b> <b>bases</b> (TCBs). A promising approach to reducing TCBs for Web sites is decentralized information flo...|$|R
2500|$|... he {{ability of}} a <b>trusted</b> <b>computing</b> <b>base</b> to enforce {{correctly}} a unified security policy depends on the correctness of the mechanisms within the <b>trusted</b> <b>computing</b> <b>base,</b> the protection of those mechanisms to ensure their correctness, and the correct input of parameters related to the security policy.|$|E
2500|$|These special {{provisions}} that aim at preventing {{certain kinds of}} actions from being executed, in essence, constitute the <b>trusted</b> <b>computing</b> <b>base.</b> For this reason, the Orange Book (still a reference {{on the design of}} secure operating systems [...] ) characterizes the various security assurance levels that it defines mainly in terms of the structure and security features of the TCB.|$|E
5000|$|... he {{ability of}} a <b>trusted</b> <b>computing</b> <b>base</b> to enforce {{correctly}} a unified security policy depends on the correctness of the mechanisms within the <b>trusted</b> <b>computing</b> <b>base,</b> the protection of those mechanisms to ensure their correctness, and the correct input of parameters related to the security policy.|$|E
40|$|Abstract. This paper {{analyzed}} {{functions of}} the network information system <b>based</b> on <b>trusted</b> <b>computing</b> and <b>trusted</b> <b>computing</b> platform <b>based</b> on cloud <b>computing.</b> Raised the propose to expand the application of <b>trusted</b> <b>computing</b> technology to network information system, {{to meet the needs}} of cloud <b>computing</b> of <b>trusted</b> <b>computing,</b> <b>trusted</b> cloud <b>computing,</b> implement the <b>trusted</b> cloud <b>computing.</b> In our design, will take the <b>Trusted</b> <b>Computing</b> Platform (TCP) as the basis of cloud computing system, provide some important security functions to ensure the communication and data security. Finally put forward the implement methods...|$|R
30|$|Third, we plan {{to extend}} our model to Hidden Markov Models (HMM) [32, 33] that {{incorporate}} the temporal aspect of trust, i.e., an agent’s current <b>trust</b> is <b>computed</b> <b>based</b> on its past trust. For the same, we will motivate subjects to provide intermittent trust labels by reading emails.|$|R
40|$|On {{the basis}} of {{comprehensive}} study of <b>trusted</b> <b>computing</b> technology and the threats to 3 G network, the architecture of trusted mobile platform based on mobile trusted module is proposed, and a DAA-based key management and a <b>trusted</b> <b>computing</b> <b>based</b> access mechanism for 3 G network are designed. Furthermore, a predicate logic based formal analysis method is also proposed. With DAA mechanism, user privacy is protected and the bottleneck problem of centralized CA is avoided. The proposed MTM-based trusted access mechanism focuses on not only the authentication of mobile user, but also the healthy status of the mobile user. Therefore, the UMTS network can forbid the unsafe mobile terminals from accessing it, which guarantees {{the security of the}} network from the source. The validity of platform and trusted UMTS access scheme is verified with the proposed formal analysis method. </p...|$|R
50|$|Currently the reincarnation server, {{the process}} server, and the {{microkernel}} {{are part of}} the <b>trusted</b> <b>computing</b> <b>base.</b> If any of them fail, the system crashes. Nevertheless, reducing the <b>trusted</b> <b>computing</b> <b>base</b> from 3-5 million lines of code, as in Linux and Windows systems, to about 20,000 lines greatly enhances system reliability.|$|E
5000|$|... a small <b>trusted</b> <b>computing</b> <b>base</b> (TCB) {{results in}} a high {{security}} system ...|$|E
5000|$|... #Subtitle level 3: Mimic defense doesn’t have {{credibility}} {{problems of}} the <b>Trusted</b> <b>Computing</b> <b>Base</b> (TCB) ...|$|E
40|$|Cloud {{computing}} is a {{new generation}} of technology which is designed to provide the commercial necessities, solve the IT management issues, and run the appropriate applications. Another entry on the list of cloud functions which has been handled internally is Identity Access Management (IAM). Companies encounter IAM as security challenges while adopting more technologies became apparent. Trust Multi-tenancy and <b>trusted</b> <b>computing</b> <b>based</b> on a <b>Trusted</b> Platform Module (TPM) are great technologies for solving the trust and security concerns in the cloud identity environment. Single sign-on (SSO) and OpenID have been released to solve security and privacy problems for cloud identity. This paper proposes the use of <b>trusted</b> <b>computing,</b> Federated Identity Management, and OpenID Web SSO to solve identity theft in the cloud. Besides, this proposed model has been simulated in. Net environment. Security analyzing, simulation, and BLP confidential model are three ways to evaluate and analyze our proposed model...|$|R
30|$|Ker-ONE is a {{lightweight}} micro-kernel that provides para-virtualization on ARM embedded systems. In this work, {{it is seen}} as a simple kernel that may implement several isolated tasks at user level. Since Ker-ONE is very simple, it only provides fundamental functions such as round-robin scheduling, inter-process communication (IPC), and memory management. It ends up with a small <b>trust</b> <b>computing</b> <b>base</b> (TCB) as described in [1]. In the proposed system, multiple adaptive processes run concurrently {{on the top of the}} kernel. Each task may access the DevCfg in order to reconfigure specific hardware blocks in the PL region of the FPGA. Note that all the mechanisms that deal with reconfiguration management are implemented in different isolated tasks: the configuration controller, parameters provider, and hardware updater.|$|R
40|$|Abstract. Developing trusted QoS {{architecture}} {{is important for}} wireless multimedia sensor networks considering various applications with different QoS requirements. First, the diverse multimedia traffic were analyzed and classified based on application requirements, service model, and multimedia coding method in wireless multimedia sensor networks. And the QoS requirements related to the multimedia traffic were also discussed. Then, a trust management framework was designed for cluster-based wireless multimedia sensor networks. The proposed framework {{can be used to}} next-hop selection in secure routing protocol. Finally, trusted QoS architecture was proposed. In the architecture, QoS manager observes and maintains information about QoS factors, and also responsible for QoS scheduling based on different QoS requirements. Trust Manager observes and maintains information about trust factors in WMSNs, and also responsible for <b>trust</b> <b>computing</b> <b>based</b> on different methods of trust factors aggregation...|$|R
50|$|AIX materializes the <b>trusted</b> <b>computing</b> <b>base</b> as an {{optional}} component in its install-time package management system.|$|E
5000|$|Designing with a <b>Trusted</b> <b>Computing</b> <b>Base</b> (TCB) {{architecture}} ensures {{a highly}} secure & reliable system environment ...|$|E
5000|$|Hardware, firmware, and {{software}} {{elements of a}} <b>trusted</b> <b>computing</b> <b>base</b> that implement the reference monitor concept.|$|E
5000|$|In 2010, she and Rafal Wojtczuk {{began working}} on the Qubes OS security-oriented desktop Xen distribution, which {{utilizes}} Fedora Linux. The initial release of Qubes 1.0 was completed by September 3rd, 2012 and is available as a free download. [...] Its main concept is [...] "security by compartmentalization", using domains implemented as lightweight Xen virtual machines to isolate various subsystems. Each compartment {{is referred to as}} a Qube, which operates as a separate hardware level virtual machine. The project refers to itself as [...] "a reasonably secure operating system" [...] and has received endorsements by numerous privacy and security experts. It is fairly unique in its capabilities, having a design informed by research on proven vulnerabilities in the <b>trusted</b> <b>compute</b> <b>base</b> (TCB), that are unaddressed in most common desktop operating systems.|$|R
40|$|Copyright © 2014 Eghbal Ghazizadeh et al. This is an {{open access}} article {{distributed}} under the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited. Cloud computing is {{a new generation of}} technology which is designed to provide the commercial necessities, solve the IT management issues, and run the appropriate applications. Another entry on the list of cloud functions which has been handled internally is Identity Access Management (IAM). Companies encounter IAM as security challenges while adopting more technologies became apparent. Trust Multi-tenancy and <b>trusted</b> <b>computing</b> <b>based</b> on a <b>Trusted</b> Platform Module (TPM) are great technologies for solving the trust and security concerns in the cloud identity environment. Single sign-on (SSO) and OpenID have been released to solve security and privacy problems for cloud identity. This paper proposes the use of <b>trusted</b> <b>computing,</b> Federated IdentityManagement, andOpenIDWeb SSO to solve identity theft in the cloud. Besides, this proposedmodel has been simulated in. Net environment. Security analyzing, simulation, and BLP confidential model are three ways to evaluate and analyze our proposed model. 1...|$|R
40|$|This paper {{presents}} {{the architecture of}} a secure group communication system with the fortress model of trust, where the participants of the group equally trust one another. We consider {{that only a small}} part of the system, a component called the <b>Trusted</b> Timely <b>Computing</b> <b>Base,</b> has to be entirely trusted. All other components can be corrupted. The overall system will tolerate a certain number of faults of its components and remain behaving correctly...|$|R
