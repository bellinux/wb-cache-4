223|550|Public
5|$|Floating point {{numbers are}} also {{stored in a}} platform-specific range. They can be {{specified}} using floating point notation, or two forms of scientific notation. PHP has a native Boolean type {{that is similar to}} the native Boolean types in Java and C++. Using the Boolean <b>type</b> <b>conversion</b> rules, non-zero values are interpreted as true and zero as false, as in Perl and C++.|$|E
500|$|JAS 39B: two-seat {{version of}} the 39A for training, {{specialised}} missions and <b>type</b> <b>conversion.</b> [...] To fit the second crew member and life support systems, the internal cannon and an internal fuel tank were removed and the airframe lengthened 0.66m (2ft 2in).|$|E
500|$|For the 2008–09 [...] "Somewhere Back in Time World Tour", he piloted Iron Maiden's {{chartered}} Boeing 757, dubbed [...] "Ed Force One", specially {{converted to}} carry the band's equipment between continents, which subsequently led to a documentary film, [...] Dickinson flew [...] "Ed Force One" [...] again for [...] "The Final Frontier World Tour" [...] in 2011. [...] For the 2016 The Book of Souls World Tour, the band upgraded to a Boeing 747-400 jumbo jet, which meant that Dickinson had to undertake <b>type</b> <b>conversion</b> to fly the aircraft. In 2014, Dickinson purchased a Fokker Dr.I triplane replica G-CDXR and joined the Great War Display Team, which re-enacts First World War air battles at airshows across the UK.|$|E
5000|$|... #Subtitle level 3: Implicit <b>type</b> <b>conversions</b> and [...] "type punning" ...|$|R
50|$|Binding {{properties}} {{of different types}} can be achieved through <b>Type</b> <b>Conversions.</b>|$|R
50|$|CLU {{does not}} perform {{implicit}} <b>type</b> <b>conversions.</b> In a cluster, the explicit <b>type</b> <b>conversions</b> {{up and down}} change between the abstract type and the representation. There is a universal type any, and a procedure force to check that an object is a certain type. Objects may be mutable or immutable, the latter being base types such as integers, booleans, characters and strings.|$|R
500|$|The French Air Force took {{delivery}} of the first production Jaguar in 1973, one of an eventual 160 single-seat Jaguar As. For <b>type</b> <b>conversion</b> training, France also took 40 of the two-seat Jaguar E. While the Jaguar was capable of carrying a single AN-52 nuclear bomb, the French government did not assign any Jaguars {{for use in the}} Force de frappe, France's strategic nuclear deterrent; this task was carried out by the Dassault Mirage IV, and the later Mirage 2000-N. Nuclear armed Jaguars were instead assigned the [...] "Pre-Strategic" [...] role, to clear a path for the Strategic strike force. The AN-52 nuclear bomb was retired from service in September 1991, when the formerly nuclear-armed squadrons of Escadron de Chasse 7 then concentrated on conventional attack. French Jaguars also performed in the role of Electronic Counter Measures (ECM) aircraft, bearing the Martel anti-radiation missile, capable of staying airborne to suppress enemy defences {{for long periods of time}} through mid air refuelling.|$|E
2500|$|Generics: {{provides}} compile-time (static) type {{safety for}} collections and {{eliminates the need}} for most typecasts (<b>type</b> <b>conversion)</b> (specified by [...] ) ...|$|E
2500|$|Improved JavaScript data <b>type</b> <b>conversion</b> support (AArch64 and AArch32); meaning next {{instruction}} can branch {{depending on}} if conversion to integer was exact (then a flag was set [...] ).|$|E
5000|$|Union types, {{as defined}} in XML Schema, {{may be used in}} <b>type</b> <b>conversions</b> and {{function}} <b>type</b> signatures.|$|R
5|$|All {{versions}} of Perl do automatic data-typing and automatic memory management. The interpreter knows {{the type and}} storage requirements of every data object in the program; it allocates and frees storage for them as necessary using reference counting (so it cannot deallocate circular data structures without manual intervention). Legal <b>type</b> <b>conversions</b> — for example, conversions from number to string — are done automatically at run time; illegal <b>type</b> <b>conversions</b> are fatal errors.|$|R
50|$|Go {{deliberately}} omits certain features {{common in}} other languages, including (implementation) inheritance, generic programming, assertions, pointer arithmetic, and implicit <b>type</b> <b>conversions.</b>|$|R
2500|$|This {{style is}} used instead of {{infinite}} [...] loops to avoid a <b>type</b> <b>conversion</b> warning in some C/C++ compilers. Some programmers prefer the more succinct [...] form over the semantically equivalent but more verbose [...] form.|$|E
2500|$|... "For data {{warehouse}} and data mart applications, CoSort performs source data extraction, data cleansing, sorting, reformatting, data <b>type</b> <b>conversion,</b> aggregation, and indexing, {{all in a}} single pass. Most operational data in commercial and public sector enterprises reside internally in sequential flat files, (relational) database tables, or are imported from data tapes and transmissions generated externally. These historical databases are optimized for ad hoc queries and transactions, rather than for extraction. CoSort accepts multiple input files (large-scale tables or flat-file data dumps), or records streaming through pipes, to perform conditional selection on records for downstream processes." [...] - Dennis Hill, Database Trends Magazine, July 1999 ...|$|E
2500|$|Pilots and {{technical}} personnel begin their {{training at the}} Military Aviation Institute in Yerevan, which was established in 1993. [...] Pilot candidates undertake a basic and primary flying training course which includes 80 hours on the Yak-52 and is followed by 60 hours of jet conversion and advanced training on the L-39. [...] This training is conducted at the airbase at Arzni (sometimes misidentified as Areni), a former Soviet DOSAAF base located [...] northeast of Yerevan. [...] In 2005, the facility also operated a single Yak-18 aerobatic trainer for drop training of paratroopers. [...] A pair of Mi-2 helicopters were also kept available for training helicopter air crews. [...] <b>Type</b> <b>conversion</b> and advanced tactical training are conducted at operational units.|$|E
5000|$|Go enforces {{rules that}} are {{recommendations}} in other languages, for example banning cyclic dependencies, unused variables or imports, and implicit <b>type</b> <b>conversions.</b>|$|R
50|$|Binding {{properties}} with transformations can {{be achieved}} through reducing the transformation function {{to the problem of}} binding properties, and the function can be imaginary consider as <b>Type</b> <b>Conversions.</b>|$|R
40|$|The {{effectiveness}} of traditional type checking in C {{is limited by}} the presence of <b>type</b> <b>conversions</b> using <b>type</b> casts. Because the C standard allows arbitrary <b>type</b> <b>conversions</b> between pointer <b>types,</b> neither C compilers, nor tools such as lint, can guarantee type safety in the presence of such <b>type</b> <b>conversions.</b> In particular, by using casts involving pointers to structures (C structs), a programmer can interpret any memory region to be of any desired type, further compromising C's weak type system. Not only do type casts make program vulnerable to type errors, they hinder program comprehension and maintenance by creating latent dependencies between seemingly independent pieces of code. To address these problems, we have developed a stronger form of type checking for C programs, called physical type checking. Physical type checking takes into account the layout of C struct fields in memory. This paper describes an inference-based physical type checking algorithm and its implementation. Ou [...] ...|$|R
50|$|In C++ <b>type</b> <b>conversion,</b> the static_cast {{operator}} performs {{an explicit}} <b>type</b> <b>conversion.</b>|$|E
50|$|Explicit <b>type</b> <b>conversion</b> is a <b>type</b> <b>conversion</b> {{which is}} {{explicitly}} defined within a program (instead of {{being done by}} a compiler for implicit <b>type</b> <b>conversion).</b> It {{is defined by the}} user in the program.|$|E
50|$|Implicit <b>type</b> <b>conversion</b> complicates {{function}} overloading {{because if}} the types of arguments do not exactly match the signature {{of one of the}} overloaded functions, but can match after <b>type</b> <b>conversion,</b> resolution depends on which <b>type</b> <b>conversion</b> is chosen.|$|E
40|$|With the {{development}} and advancement of information technology is increasinglysophisticated computer {{plays an important role}} in it, let alone a computer equippedwith facilities and infrastructure are growing rapidly. In its activities the computer user can not be separated from the data. The data itselfhas several types of data. To perform the data transfer then we should do first datatype modifiers. In performing data <b>type</b> <b>conversions,</b> many computer users still do notknow the lay and how way of doing data <b>type</b> <b>conversions.</b> With this application, thedata type modifiers can help our customers in terms of computer transfers the datawhich will optimize the time available...|$|R
50|$|In Lua version 5.2 and earlier, all {{arithmetic}} is done using double-precision floating-point arithmetic (explicit {{support for}} single-precision was added in version 5.3). Also, automatic <b>type</b> <b>conversions</b> between doubles and strings are provided (and also between floating-point values and integers since version 5.3).|$|R
2500|$|Generic {{interfaces}} and delegates {{can have}} their type parameters marked as covariant or contravariant, using keywords [...] and , respectively. These declarations are then respected for <b>type</b> <b>conversions,</b> both implicit and explicit, and both compile-time and run-time. For example, the existing interface [...] has been redefined as follows: ...|$|R
50|$|Implicit <b>type</b> <b>conversion,</b> {{also known}} as coercion, is an {{automatic}} <b>type</b> <b>conversion</b> by the compiler. Some programming languages allow compilers to provide coercion; others require it.|$|E
50|$|In Eiffel, {{the setup}} for <b>type</b> <b>conversion</b> is {{included}} in the class code, but then appears to happen as automatically as explicit <b>type</b> <b>conversion</b> in client code. The includes not just assignments but other types of attachments as well, such as argument (parameter) substitution.|$|E
50|$|A {{version that}} accepts an integer input and uses {{implicit}} <b>type</b> <b>conversion.</b>|$|E
40|$|Web {{scripting}} languages, such as PHP and JavaScript, {{provide a}} wide range of dynamic features that make them both flexible and error-prone. In order to prevent bugs in web applications, there is a sore need for powerful static analysis tools. In this paper, we investigate how Abstract Interpretation may be leveraged to provide a precise value analysis providing rich typing information that can be a useful component for such tools. In particular, we define the formal semantics for a core of PHP that illustrates type juggling, the implicit <b>type</b> <b>conversions</b> typical of PHP, and investigate the design of abstract domains and operations that, while still scalable, are expressive enough to cope with type juggling. We believe that our approach can also be applied to other languages with implicit <b>type</b> <b>conversions...</b>|$|R
5000|$|... #Caption: Canadian <b>type</b> 15 <b>conversion</b> HMCS Crescent (DDE 226).|$|R
50|$|Iridite NCP is a non-chromium <b>type</b> of <b>conversion</b> coating for {{aluminium}} substrates.|$|R
5000|$|When <b>type</b> <b>conversion</b> is required, JavaScript {{converts}} , , , or [...] operands as follows: ...|$|E
5000|$|One may [...] "cast" [...] (see <b>type</b> <b>conversion)</b> this pointer to a {{specific}} type: ...|$|E
5000|$|In hacking, typecasting is {{the misuse}} of <b>type</b> <b>conversion</b> to {{temporarily}} change a variable's data type from how it was originally defined. This provides opportunities for hackers since in <b>type</b> <b>conversion</b> after a variable is [...] "typecast" [...] to become a different data type, the compiler will treat that hacked variable as the new data type for that specific operation.|$|E
5000|$|There {{are several}} {{different}} <b>types</b> of <b>conversions</b> aside {{of the usual}} passenger-van-like conversion: ...|$|R
40|$|Ada 2005 Abstract Interface Types {{provide a}} limited and {{practical}} form of multiple inheritance of specifications. In this paper we cover the following {{aspects of their}} implementation in the GNAT compiler: interface <b>type</b> <b>conversions,</b> the layout of variable sized tagged objects with interface progenitors, {{and the use of}} the GNAT compiler for interfacing with C++ classes with compatible inheritance trees...|$|R
40|$|Provides a {{consistent}} interface to the 'Keras' Deep Learning Library directly from within R. 'Keras' provides specifications for describing dense neural networks, convolution neural networks (CNN) and recurrent neural networks (RNN) running {{on top of}} either 'TensorFlow' or 'Theano'. <b>Type</b> <b>conversions</b> between Python and R are automatically handled correctly, even when the default choices would otherwise lead to errors. Includes complete R documentation and many working examples...|$|R
