54|30|Public
5000|$|... #Subtitle level 3: Centrally hosted <b>thick</b> <b>client</b> {{applications}} ...|$|E
5000|$|Frameworks {{for both}} <b>thick</b> <b>client</b> and web-based {{graphical}} user interfaces ...|$|E
5000|$|Access via the {{company-wide}} intranet {{also from}} offices. Via Web (Thin client) or Tcp / Ip (<b>Thick</b> <b>client)</b> ...|$|E
50|$|Better {{multimedia}} performance. <b>Thick</b> <b>clients</b> have {{advantages in}} multimedia-rich applications {{that would be}} bandwidth intensive if fully served. For example, <b>thick</b> <b>clients</b> are well suited for video gaming.|$|R
50|$|UbuntuLTSP, the Linux Terminal Server Project {{implementation}} for Ubuntu, uses Unionfs when PXE booting thin or <b>thick</b> <b>clients.</b>|$|R
50|$|Working offline. <b>Thick</b> <b>clients</b> have {{advantages}} in that a constant {{connection to the}} central server is often not required.|$|R
50|$|Windows/Linux/Mac/iOS/Android/BlackBerry - Supported {{operating}} systems for <b>thick</b> <b>client</b> (native binary application), which provide background data transmission and setting services.|$|E
50|$|The {{disadvantage}} of a <b>thick</b> <b>client</b> {{is in the}} installation and update phases of the applications. Users who want the security, high speed and functionality of a <b>thick</b> <b>client</b> may use Microsoft ClickOnce Technology. This enables the user to install and run a Windows-based smart client application by clicking a link in a web page. The software {{does not need to}} be installed at each user workstation one by one. ClickOnce applications can be self-updating; they can check for newer versions as they become available and automatically replace any updated files.|$|E
5000|$|Initially, WSIPC had {{developed}} their own Enterprise Resource Planning (ERP) application in-house, called WISE, which not only provided a complete SIS, but also information management for both finance and student data. Starting in 2001 WSIPC collaborated with Skyward and, as a result, completely restructured the computing infrastructure at WSIPC, replacing the legacy application offerings with one integrated ERP application provided to WSIPC customers. [...] WSIPC called its ERP application WESPaC (WSIPC Enhanced Skyward Point and Click) which included Skyward's software suite of student, human resources and financial management modules. WESPaC also included Citrix's MetaFrame which provided users with remote access. Skyward eventually converted its <b>thick</b> <b>client</b> student application into a web interface and part of its finance software to have a web front end. The other part of their finance software is still <b>thick</b> <b>client.</b> Therefore, WESPaC has now evolved into two applications, one being a web-based student application and the other being a finance application that is partly web-based and partly <b>thick</b> <b>client.</b> Both of these applications are currently provided by Skyward.|$|E
50|$|Using {{existing}} infrastructure. As {{many people}} now have very fast local PCs, {{they already have}} the infrastructure to run <b>thick</b> <b>clients</b> at no extra cost.|$|R
50|$|The same {{approach}} {{can be used for}} Java web-based applications, since modern Java component-based Web frameworks allow development of client-side logic using the same component approach as <b>thick</b> <b>clients.</b>|$|R
50|$|Cloud {{computing}} architectures {{consist of}} front-end platforms called clients or cloud clients. These clients are servers, fat (or <b>thick)</b> <b>clients,</b> thin clients, zero clients, tablets and mobile devices. These client platforms {{interact with the}} cloud data storage via an application (middleware), via a web browser, or through a virtual session.|$|R
50|$|Lower server requirements. A <b>thick</b> <b>client</b> server {{does not}} require as high a level of {{performance}} as a thin client server (since the thick clients themselves do much of the application processing). This results in drastically cheaper servers.|$|E
50|$|The display {{can take}} the form of a browser based viewer, a {{separate}} applet, plugin or <b>thick</b> <b>client</b> based viewer or even a separate physical machine; the invocation remains the same and is agnostic to the viewer implementation mechanism.|$|E
50|$|An unwired {{enterprise}} {{is an organization}} that extends and supports the use of traditional <b>thick</b> <b>client</b> enterprise applications {{to a variety of}} mobile devices and their users throughout the organization. The abiding characteristic is seamless universal mobile access to critical applications and business data.|$|E
40|$|Cybersecurity {{has become}} a great concern as threats of service interruption, {{unauthorized}} access, stealing and altering of information, and spreading of viruses have become more prevalent and serious. Application layer access control of applications is a critical component in the overall security solution that also includes encryption, firewalls, virtual private networks, antivirus, and intrusion detection. An access control solution, based on an open-source access manager augmented with custom software components, was developed to provide protection to both Web-based and Javabased client and server applications. The DISA Security Service (DISA-SS) provides common access control capabilities for AMMOS software applications {{through a set of}} application programming interfaces (APIs) and network- accessible security services for authentication, single sign-on, authorization checking, and authorization policy management. The OpenAM access management technology designed for Web applications can be extended {{to meet the needs of}} Java <b>thick</b> <b>clients</b> and stand alone servers that are commonly used in the JPL AMMOS environment. The DISA-SS reusable components have greatly reduced the effort for each AMMOS subsystem to develop its own access control strategy. The novelty of this work is that it leverages an open-source access management product that was designed for Webbased applications to provide access control for Java <b>thick</b> <b>clients</b> and Java standalone servers. <b>Thick</b> <b>clients</b> and standalone servers are still commonly used in businesses and government, especially for applications that require rich graphical user interfaces and high-performance visualization that cannot be met by thin clients running on Web browser...|$|R
40|$|The {{emergence}} of mobile cloud computing (MCC) brings benefits to mobile users and cloud providers. However, {{due to the}} inherent limitations of the device such as battery life time, CPU and memory capacity, a mobile thin client device (e. g. smart phones, tablets, iWatch, Google Glass, etc) cannot {{meet the requirements of}} some demanding applications. To alleviate this limitation, the mobile device should cooperate with external resources to increase its performance. Recently, current research approaches have been unable to offer an efficient, seamless computing experience. In this paper, we present a comprehensive thin-thick client collaboration that involves conventional desktop or laptop computers, known as <b>thick</b> <b>clients,</b> by allowing the thin client to borrow resources from <b>thick</b> <b>clients,</b> particularly for optimizing data distribution and utilizing MCC resources to meet Service-Level Agreements, Quality-of-Service requirements and cloud service customers' budget. Our work uses both numerical analysis and simulation to prove that our proposed architecture can improve resource allocation efficiency and achieve better performance than other existing approaches in some cases...|$|R
40|$|With the {{development}} of the Internet culture applications are becoming simpler and simpler, users need less IT knowledge than earlier; from the ‘reader’ status they have reached that of the content creator and editor. In our days, the effects of the web are becoming stronger and stronger— computer-aided work is conventional almost everywhere. The spread of the Internet applications has several reasons: first of all, their accessibility is widespread; second, their use is not limited to only one computer or network on which they have been installed. Also, the quantity of accessible information now and earlier is not even comparable. Not counting the applications which need high broadband or high counting capacity (for example video editing), Internet applications are reaching the functionality of the <b>thick</b> <b>clients</b> associates. The most serious disadvantage of Internet applications – for security reasons — is that the resources of the client computer are not fully accessible or accessible only to a restricted extent. Still <b>thick</b> <b>clients</b> do have some advantages: better multimedia perdormance with more flexibility due to local resources and the possibility for offline working...|$|R
5000|$|CrushFTP 5 {{continued}} {{the evolution of}} the WebInterface with various iterations. It used a [...] flash interface briefly before replacing it with a HTML/AJAX interface. CrushFTPv5 was the last version to still use a <b>thick</b> <b>client</b> Java Swing UI. [...] Version 6 moved to an all web browser UI.|$|E
50|$|SBG further builds {{upon the}} server centric gaming concept with {{technology}} and design principles from thin client computing and online gaming, thus making it {{fundamentally different from}} SSG which employs <b>thick</b> <b>client</b> game terminals that {{have more in common}} with standalone terminals. The development of SBG has been driven by technological advancements and the benefits made possible thereof.|$|E
5000|$|A {{fat client}} (also called heavy, rich or <b>thick</b> <b>client)</b> is a {{computer}} (client) in client-server architecture or networks that typically provides rich functionality independent of the central server. Originally known as just a [...] "client" [...] or [...] "thick client" [...] the name is contrasted to thin client, which describes a computer heavily dependent on a server's applications.|$|E
40|$|Thad Starner’s {{article from}} the January 2002 issue of Computer focuses on {{improving}} the functionality of soft-ware for personal wireless devices [7]. Starner proposes {{a shift from}} thin to <b>thick</b> <b>clients</b> as an easy route to achieving this goal. He argues that if the technology trends continue to evolve as they have done throughout the last decade, wireless devices will have comparable amounts of disk storage, RAM, and CPU power with primar...|$|R
5000|$|Probably the {{thinnest}} clients (sometimes called [...] "Ultra Thin") are remote desktop applications, {{for example the}} X Window System, Citrix products and Microsoft's Terminal Services, which effectively allow applications to run on a centrally-hosted virtual PC and copy keystrokes and screen images between the local PC and the virtual PC. Ironically, these ultra-thin clients are often used to make available complex or data-hungry applications which have been implemented as <b>thick</b> <b>clients</b> but where the true client is hosted very near to the network server.|$|R
40|$|A {{thin client}} {{approach}} to mobile computing pushes as many services {{as possible on}} a remote server. However, as will be shown, technology trends indicate that an easy route to improving thin client functionality is to ``thicken'' the client through addition of disk storage, CPU, and RAM. Thus, thin clients will rapidly become multi-purpose <b>thick</b> <b>clients.</b> With time, users may come to consider their mobile system as their primary general-purpose computing device, with their most used files maintained on the mobile system and with desktop systems used primarily for larger displays, keyboards, and other non-mobile interfaces...|$|R
50|$|Dynamics CRM is a server-client application, which, like Microsoft SharePoint, is {{primarily}} an IIS-based web application which also supports extensive web services interfaces. Clients access Dynamics CRM either {{by using a}} Browser or by a <b>thick</b> <b>client</b> plug-in to Microsoft Outlook. Besides Internet Explorer the Chrome and Firefox browsers are fully supported since Microsoft Dynamics CRM 2011 Update Rollup 12.|$|E
50|$|First {{released}} in 2003, the Geospatial One-Stop (GOS) geoportal was developed {{as part of}} a U.S. e-government initiative. Unlike the NSDI Clearinghouse Network, GOS was built around a centralized metadata catalog database, with an architecture that links users to data providers through a Web-based geoportal. The user of GOS may employ a simple Web browser (thin client) or may interface directly with a GIS (<b>thick</b> <b>client).</b>|$|E
50|$|With the {{development}} of LANs and PCs, the client/server became the dominant application creation model. As a result, the centralized model supported by the office controller fell out of style. Office controller products were withdrawn from the market. Remnants of the idea, with examples such as thin clients and three-layer architectures, did persist with some interest. However the <b>thick</b> <b>client</b> PC model of services was predominant in the 1990s.|$|E
40|$|Abstract: There {{are many}} {{document}} management systems nowadays {{that are very}} sophisticated, efficient, and expensive. Having seen one of them streamline business processes in a complex, integrated environment at my workplace inspired me to build a system that would address basic DMS functionality areas, {{but at the same}} time be significantly simplified. DocumentCenter is a Java-based document management system, a client-server application that utilizes a file system and a MySQL database for data storage. The Server architecturally resembles a single core element of application logic and has multiple pluggable modules to perform various activities. <b>Thick</b> <b>clients</b> provide a basic interface for document search, manipulation, and retrieval...|$|R
40|$|Abstract: 2 ̆ 2 Interest in {{thin clients}} {{is very high}} today because of {{frustration}} with the growing {{total cost of ownership}} of personal computers. Unfortunately, thin clients may not meet the usability goal of crisp interactive response. This paper shows that the adequacy of thin-client computing is highly variable, and depends on both the application and the available network quality. For intensely interactive applications, the tight control of end-to-end network latency required by thin clients may be hard to guarantee at large scale. The paper advocates the concept of stateless <b>thick</b> <b>clients,</b> and describes how they may reduce total cost of ownership while preserving good interactive performance. 2 ̆...|$|R
3000|$|Broad {{network access}} that enables {{heterogeneous}} <b>thick</b> and thin <b>client</b> applications {{to access the}} services; [...]...|$|R
50|$|The {{characteristics}} of the user interface often force the decision on a designer. For instance, a drawing package could choose to download an initial image from a server and allow all edits to be made locally, returning the revised drawing to the server upon completion. This would require a <b>thick</b> <b>client</b> and might be characterised by {{a long time to}} start and stop (while a whole complex drawing was transferred) but quick to edit.|$|E
5000|$|DronaHQ is an {{enterprise}} mobility platform {{that comes with}} a thick middleware on the backend and a robust <b>thick</b> <b>client</b> as hybrid app. The platform has an inbuilt content management system (CMS), user management, and push notification offered as a service through APIs. The platform allows {{an enterprise}} to scale the app by plugging in HTML5 based hybrid apps which can use its APIs {{to take advantage of the}} native features on mobile as well as backend features of push notification, user management, analytics, etc.|$|E
50|$|A fat client, {{also known}} as a rich client or <b>thick</b> <b>client,</b> is a client that {{performs}} the bulk of any data processing operations itself, and does not necessarily rely on the server. The personal computer is a common example of a fat client, because of its relatively large set of features and capabilities and its light reliance upon a server. For example, a computer running a CAD program (such as AutoCAD or CATIA) that ultimately shares the result of its work on a network is a fat client.|$|E
40|$|SORASCS is a service-oriented-plus {{framework}} for distributing and composing workflows composed {{of services and}} <b>thick</b> <b>clients</b> to support data processing, analysis and experimentation. We describe how SORASCS {{can be used to}} support "what-if " reasoning through the design, running, and analysis of the results from a virtual experiment using an HSCB simulation model. Given the experimental specification, SORASCS conducts the experiment using a distributed grid platform, compiles the results, and provides tracking information for the end user. SORASCS enables the user to rapidly move from raw data to analysis to forecasting and back; thus supporting model reuse and sharing. This process is described and an example using a border conflict experiment is shown...|$|R
40|$|This article {{investigates the}} {{transient}} use of free local storage for improving performance in VM-based mobile computing systems implemented as <b>thick</b> <b>clients</b> on host PCs. We {{use the term}} TransientPC systems to refer to these types of systems. The solution we propose, called TransPart, uses the higher-performing local storage of host hardware to speed up performance-critical operations. Our solution constructs a virtual storage device on demand (which we call transient storage) by borrowing free disk blocks from the host’s storage. In this article, we present the design, implementation, and evaluation of a TransPart prototype, which requires no modifications to the software or hardware of a host computer. Experimental results confirm that TransPart offers low overhead and startup cost, while improving user experience...|$|R
40|$|With the {{integration}} of mobile computing and cloud computing, more diverse services can be provided to the users, supporting the mobility feature of mobile computing along {{with the power of}} cloud computing. This new paradigm still faces challenges, especially in terms of performance. When it comes to multimedia data communication, thin clients (such as smart phones and tablets) suffer because of performance and power constraints. Previously done studies have trivially addressed this problem. Therefore, in our paper, we present a framework in which <b>thick</b> <b>clients</b> (laptop or desktop computers) are incorporated into mobile cloud paradigm with attention paid to user mobility. Its objective is to optimize the distribution of multimedia content between the cloud and the thin clients. Our work comes up with both numerical analysis and simulation to justify the validity and the effectiveness of the proposal approach...|$|R
