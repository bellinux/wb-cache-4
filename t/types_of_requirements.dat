138|10000|Public
50|$|Guidelines. Following {{organizational}} {{guidelines that}} describe the collection techniques and the <b>types</b> <b>of</b> <b>requirements</b> to be collected. These guidelines are then used consistently across projects.|$|E
5000|$|Input {{involves}} different <b>types</b> <b>of</b> <b>requirements,</b> functional specifications, detailed designing of documents, proper source code, security specifications. This is {{the preparation}} stage of white-box testing to layout {{all of the}} basic information.|$|E
5000|$|A {{widely held}} model claims {{that these two}} <b>types</b> <b>of</b> <b>requirements</b> differ only in their level of detail or {{abstraction}} — wherein 'business requirements' are high-level, frequently vague, and decompose into the detailed product, system, or software requirements.|$|E
50|$|The Worker Protection Standard (WPS) {{identifies}} the <b>type</b> <b>of</b> <b>requirements</b> {{that must be}} satisfied to obtain the proper license needed to purchase and apply restricted use pesticide.|$|R
30|$|On {{the other}} hand, the {{dedicated}} component {{which offers a}} high degree of isolation can be used to handle business requirements that cannot be easily compensated. Examples <b>of</b> this <b>type</b> <b>of</b> <b>requirement</b> include legal restrictions and the location and configuration of the cloud infrastructure. For instance, a legal requirement can state that the data hosted in one place (e.g., Europe) by a cloud provider cannot be stored elsewhere (e.g., in the USA). An architect would, therefore, have to map this <b>type</b> <b>of</b> <b>requirement</b> to a cloud infrastructure that directly satisfies this.|$|R
50|$|The <b>type</b> <b>of</b> <b>requirements</b> {{that relate}} to Performance Engineering are the {{non-functional}} requirements, or NFR. While a functional requirement relates to what business operations are to be performed, a performance related non-functional requirement will relate to how fast that business operation performs under defined circumstances.|$|R
5000|$|In {{and around}} the campus are located a number of state and private dorms which {{consider}} all <b>types</b> <b>of</b> <b>requirements</b> of students in terms of accommodation. Each dorm has its own laundry, dining hall and library. The capacity of the dorms is as follows: ...|$|E
50|$|Requirements are {{typically}} classified into types produced {{at different stages}} in a development progression, with the taxonomy depending on the overall model being used. For example, the following scheme was devised by the International Institute of Business Analysis in their Business Analysis Body of Knowledge (see also FURPS and <b>Types</b> <b>of</b> <b>requirements).</b>|$|E
5000|$|The Bachelor's {{degree is}} conferred by the {{university}} upon the student’s application when the student has earned the minimum number of credits required for the degree and has met the requirements for the right distribution of the courses. Students must complete at least 132 credits to graduate, including 78 credits in the major.Each student must satisfy three <b>types</b> <b>of</b> <b>requirements</b> for the Bachelor’s degree: ...|$|E
5000|$|The {{only thing}} that is fixed and set in stone in an agile project is an {{iteration}} backlog (and, even then, this [...] "can be clarified and re-negotiated... as more is learned."). While the PBI lies in the product backlog, it can be rewritten or even discarded, depending on business, market, technical or any other <b>type</b> <b>of</b> <b>requirement</b> by team members.|$|R
30|$|Priority is a {{property}} <b>of</b> a <b>requirement</b> that characterizes its {{importance in the}} development. The priorities <b>of</b> <b>requirements</b> {{can be used as}} basis for setting priorities of project tasks. On the other hand, priorities can make the requirement analysis more complex as different stakeholders demand different priorities. The most simple prioritization is dividing requirements into mandatory and nice-to-have <b>type</b> <b>of</b> <b>requirements.</b> Other possibility is to use an integer value that represents the importance <b>of</b> the <b>requirement</b> in relation to other requirement.|$|R
40|$|For {{documenting the}} groundwork pitch <b>of</b> <b>requirements,</b> many <b>types</b> <b>of</b> <b>requirement</b> {{specification}} template are available containing some specific requirement parameter which eventually recites the root requirement for constructing the design, {{but they are}} not good enough to make the template reliable requirement specification. In this paper a reliable requirement specification template has been proposed having some reliable parameter which will assess the reliability <b>of</b> the individual <b>requirement</b> before finalizing the requirement documentation which reflects the reliability <b>of</b> <b>requirements</b> at early stage of software development...|$|R
50|$|The Children’s Internet Protection Act (CIPA) is {{a federal}} law enacted by Congress to address {{concerns}} about access to offensive content over the Internet on school and library computers. CIPA imposed certain <b>types</b> <b>of</b> <b>requirements</b> on any school or library that receives funding under the E-rate program or Library Services and Technology Act (LSTA) grants, which subsidize internet technology and connectivity for schools and libraries. In early 2001, the FCC issued rules implementing CIPA.|$|E
40|$|A unification-based {{approach}} to visualization design provides a uniform way of representing user require-ments, design knowledge, and graphic designs {{as well as}} algorithms for synthesizing graphic presentations. We demonstrate this approach on two <b>types</b> <b>of</b> <b>requirements</b> – structural {{in the form of}} sketches and functional in the form of tasks. With this approach we aim to achieve the following system design goals: expressiveness (the for-malism can express the visualization design problem and its problem-solving algorithms), uniformity (the same formalism can be applied to different generation tasks), efficiency (graphics can be designed in a reasonable amount of time), and extensibility (the system can be extended with new <b>types</b> <b>of</b> <b>requirements,</b> design ele...|$|E
40|$|Abstract—During {{acceptance}} testing {{different areas of}} deliv-ered software system are reviewed. Usually these are function-ality, business domain logic, non-functional characteristics, user interface. Although they {{are related to the}} same particular func-tional area, they are verified separately. This paper presents the concept and the Requirements Driven Software Testing (ReDSeT) tool, which allows for automatic integrated test generation based on different <b>types</b> <b>of</b> <b>requirements.</b> Tests are expressed in newly introduced Test Specification Language (TSL). The basis for func-tional test generation are detailed use case models. Furthermore, by combining different <b>types</b> <b>of</b> <b>requirements,</b> relations between tests are created. The constructed tool acknowledges validity of the presented concept. I...|$|E
40|$|After briefly {{describing}} how {{the emergence of}} electronic records has brought changes to records management, {{we focus on the}} design and implementation of electronic records management systems, and specifically on the establishment <b>of</b> functional <b>requirements.</b> A number <b>of</b> functional <b>requirements</b> lists are then analysed, with particular attention given to the European MoReq specification. To conclude there is a listing of broad areas in which this <b>type</b> <b>of</b> <b>requirement</b> is being established, as well as a table comparing each one of these lists with MoReq...|$|R
40|$|Recently, {{there has}} been a growing {{interest}} in self-adaptive systems. Roadmap papers in this area point to feedback loops as a promising way of operationalizing adaptivity in such systems. In this paper, we define a new <b>type</b> <b>of</b> <b>requirement</b> — called Awareness Requirement — that can refer to other requirements and their success/failures. We propose a way to elicit and formalize such requirements and offer a requirements monitoring framework to support them...|$|R
40|$|This paper {{describes}} a mapping study {{to identify what}} are the existing requirements elicitation available for Computer-Supported Collaboration Work (CSCW) application. This study also points out <b>type</b> <b>of</b> <b>requirements</b> which the developers look for during requirements elicitation. Based on 14 papers that have been refined from the study, the authors look at <b>types</b> <b>of</b> domain involved in CSCW application. This paper also describes potential requirement to support social presence in collaborative application such as in Elearning {{as one of the}} domain in CSCW application...|$|R
40|$|Acceptance test {{generation}} {{based on}} detailed use case models Tests performed {{in order to}} verify compliance of a software system with customer expectations cover different areas. Some of them verify the function-ality, other – the business domain logic, the non-functional characteristics or the user interface. Usually they are done separately, but on the same functional areas. This paper presents the concept for the Requirements Driven Software Testing (ReDSeT) tool, which allows for automatic integrated test generation based on different <b>types</b> <b>of</b> <b>requirements.</b> Tests are expressed in newly intro-duced Test Specification Language (TSL). The basis for functional test genera-tion are detailed use case models. Furthermore, by combining different <b>types</b> <b>of</b> <b>requirements,</b> relations between tests are created. The constructed tool acknowledges validity of the presented concept...|$|E
40|$|This work {{presents}} a summary {{on the research}} conducted towards {{the development of a}} model to document and to visualize,dynamically, software requirements. The research consisted of analyzing the necessary information focusing on documenting different <b>types</b> <b>of</b> <b>requirements</b> in an efficient way, and how quality factors may be part of those requirements. The research has also considered, the traceability (Aizenbud-Reshef et al, 2006) among the requirements and different types of artifacts developed during a software project. The current solutions for the Requirement Engineering do not possess support for the inclusion or exclusion, of quality factors and elements to describe specific patterns of requirements as the use cases or forms of a certain project. The lack of that support makes the storage model and description of the static requirements difficult; in other words, those solutions hinder the definition of different <b>types</b> <b>of</b> <b>requirements</b> as well as the inclusion of attributes for the quality control of those requirements. The existence of different <b>types</b> <b>of</b> <b>requirements,</b> as well as specific needs about quality are due to the inherent specifications to each project and the different characteristics of the processes used in the organizations during the development of those projects. The study showed that the use of a flexible approach that allows the definition of new patterns of requirement...|$|E
40|$|Abstract The {{development}} of next generation Embedded Peer-To-Peer Systems raises {{a number of}} challenging issues for pervasive computing. In this paper we overview {{the objectives of the}} ongoing European SMEPP (Secure Middleware for Embedded Peer-To-Peer) project. In particular we discuss different <b>types</b> <b>of</b> <b>requirements</b> that have been identified in SMEPP...|$|E
30|$|Roher and Richardson (2013) {{suggest the}} {{incorporation}} <b>of</b> sustainability <b>requirement</b> patterns into the requirements engineering process {{in order to}} facilitate RD writing for certain <b>types</b> <b>of</b> sustainability <b>requirements.</b> These patterns are not always addressed in IS.|$|R
40|$|This {{study was}} {{undertaken}} {{to determine the}} number, <b>type,</b> and <b>requirements</b> <b>of</b> entry-level office positions in Ogden, Utah, banks. Questionnaires {{were taken to the}} participating banks in the Ogden, Utah, banking community. The responding banks indicated that they would consider recent high school graduates to all of the positions studied; however, a majority of the banks preferred to hire females rather than males to to the office positions studied. All of the responding banks required some <b>type</b> <b>of</b> <b>requirement</b> for each <b>of</b> the office entry-level positions, and majority of the banks required a pre-employment test of the applicants. This information was put into table form using numbers and percentages as the means of reporting the data...|$|R
5000|$|Hollow Kingpin casters: This <b>type</b> <b>of</b> caster has a {{tubular rivet}} {{that holds the}} caster together. The hole in the rivet can accept a bolt or a {{customized}} stem for any <b>type</b> <b>of</b> mounting <b>requirement.</b>|$|R
40|$|In {{a recent}} study of a product line, we found that the defect reports both (1) {{captured}} new requirements information and (2) implicated undocumented, tacit requirements information in the occurrence of the defects. We report four <b>types</b> <b>of</b> <b>requirements</b> knowledge revealed by software defect reports from integration and system testing for two products in this high-dependability product line. We argue that store-and-retrieve-based requirements management is insufficient to avoid recurrence of these types of defects on upcoming members of the product line. We then propose the use of two mechanisms not traditionally associated with requirements management, one formal and one informal, to improve communication of these <b>types</b> <b>of</b> <b>requirements</b> knowledge to developers of future products in the product line. We show how the two proposed mechanisms, namely feature models extended with assumption specifications (formal) and structured anecdotes of paradigmatic product-line defects (informal), can together improve propagation of the requirements knowledge exposed by these defects to future products in the product line. 1...|$|E
40|$|Abstract. This paper {{presents}} a research framework {{for further research}} within the area of requirements interdependencies. The framework consists of a) an overview of requirements traceability in order properly place requirements interdependencies in context, b) an initial model describing <b>types</b> <b>of</b> <b>requirements</b> interdependencies, and c) {{a discussion of the}} use of requirements interdependencies in various situations and activities within software and systems development. 1...|$|E
40|$|In {{this paper}} we propose an {{approach}} for gathering data to generate user requirements for an artifact under development, {{in this case the}} e-newspaper based on an e-paper solution. Inspired by future workshops, scenario- and mock-up techniques we suggest the da Vinci approach. In addition to describing the approach we also report <b>types</b> <b>of</b> <b>requirements</b> possible to derive. We conclude by discussing experiences from applying the approach in the DigiNews project...|$|E
50|$|Hard {{chromium}} plating {{is subject to}} different <b>types</b> <b>of</b> quality <b>requirements</b> depending on the application; for instance, the plating on hydraulic piston rods are tested for corrosion resistance with a salt spray test.|$|R
40|$|Abstract. Effective {{development}} of nontrivial systems of collaborative information agents requires that an in-depth analysis is made resulting in (1) specification <b>of</b> <b>requirements</b> {{at different levels}} of the system, (2) specification of design structures, and (3) a systematic verification. To support a widespread use of intelligent information agents for the Internet, the challenges are (1) to identify and classify a variety of instances <b>of</b> the different <b>types</b> <b>of</b> reusable (<b>requirement,</b> design and proof) patterns, (2) build libraries of them, and (3) provide corresponding easy-to-use plug-in information agent components to the common user. In a simplified example it is shown which <b>types</b> <b>of</b> reusable <b>requirements</b> patterns, design patterns, and proof patterns can be exploited, and how these patterns relate to each other. ...|$|R
40|$|The diploma thesis {{deals with}} the issue of {{immigration}} {{and its impact on the}} economy in Australia, Great Britain and the United States of America. In the introduction, various migration theories explaining the migration motifs and immigration policies, whose specifics and the <b>type</b> <b>of</b> <b>requirements</b> <b>of</b> the monitored countries sheds the composition of incoming individuals, are discussed. This profile is complemented by the analysis itself, which examines the socio-economic factors of foreign-born population living in the monitored countries. This analysis is carried out by cross-sectional data comparisons, but it monitors the arrival times of individuals, providing an overview within the timeline. In order to determine the impact of immigration on employment and average wages, regression was used, but this effect was in no way proven beyond the impact on average wages in Australia...|$|R
40|$|Specifying {{requirements}} is {{a complex}} task because information can be represented at varying levels of abstraction. This paper looks at two <b>types</b> <b>of</b> <b>requirements</b> abstractions: user story and executable acceptance test. We present how user story and executable acceptance tests are integrated in our project planning tool called Agile Planner with Fit and we argue that translation between information abstractions is an important feature in planning tools. 1...|$|E
40|$|This paper proposes {{requirements}} engineering {{as one of}} many approaches, which have positive influence upon software development. Underestimation of this initial phase has tremendous impact on the whole software development process. Several <b>types</b> <b>of</b> <b>requirements</b> are described and some their difficulties are shown. Then the whole {{requirements engineering}} process is described and some its sub-tasks described. Some interconnections {{to other areas of}} software development are proposed. Finally, formal approach to this subject is mentioned. ...|$|E
40|$|We {{address the}} {{research}} question of transforming dependability requirements into corresponding software architecture constructs, by proposing first that dependability needs {{can be classified}} into three <b>types</b> <b>of</b> <b>requirements</b> and second, an architectural pattern that allows requirements engineers and architects to map dependability requirements into three corresponding types of architectural components. The proposed pattern is general enough to work with existing requirements techniques and existing software architectural styles, including enterprise and product-line architectures...|$|E
40|$|Abstract—In market-driven {{software}} product development, requirements that can potentially {{go into a}} product or a product release represent different kinds <b>of</b> investments. <b>Requirements</b> differ in the <b>type</b> <b>of</b> value that they provide and level of risk associated to investing in them. In this paper we investigate how business risk associated with different requirement types is considered by the decision makers and how it affects requirement selection decisions. The results of the conducted case study indicate that due to lacking methods for handling the requirements business risk, requirements with low level of risk are preferred over other <b>type</b> <b>of</b> <b>requirements</b> such as innovations and architectural improvements. Keywords-requirements selection; market driven software development; value; risk; case study I...|$|R
30|$|The {{trade-offs}} between tenant {{isolation and}} business requirements {{is a key}} consideration in architecting the design and deployment of cloud-hosted services. As the degree of isolation increases from top to bottom, the ease and flexibility to implement business requirements that cannot be compensated for at the application level reduces. The shared component, which offers a low degree of isolation, {{can be used to}} handle business requirements that can be compensated at the application level. Examples <b>of</b> such business <b>requirements</b> include performance and availability. The architect can easily modify the application architecture of the GSD tool to address this <b>type</b> <b>of</b> <b>requirement.</b>|$|R
40|$|It is {{difficult}} to estimate the percentage of examinees who pass National Teacher Evaluation (NTE) tests because many users of the tests require that examinees pass different combinations of tests or use different passing scores {{for each of the}} tests. This study first develops a taxonomy <b>of</b> state NTE <b>requirements</b> and then computes passing rates for each rype <b>of</b> state <b>requirement</b> for both the examinee group impacted by the requirement and for each self-identified ethnic group. An example is the situation in which states require teacher certification candidates to pass all three Core Battery tests and the Specialty Area test most relevant to their own area of interest. For this <b>type</b> <b>of</b> <b>requirement,</b> the percentage <b>of</b> examinees who pass each test is computed, as well as the percentage of examinees who pass all the required tests. Results show considerable variation in passing rates depending on <b>types</b> <b>of</b> <b>requirement</b> and passing scores, and they demonstrate variation in ethnic differences on passing rates. For blacks, the ratio of examinees to white examinees who pass each requirement is related to the passing scores used and the required tests. Appendix A contains a model to discuss impact on reducing cutoff scores, and Appendix B lists the NTE Specialty Area tests. (Contains 18 tables, 3 tables and 6 figures in Appendix A, and 5 references.) (Author/SLD) Reproductions supplied by EDRS are the best that can be made from the original document...|$|R
