15|381|Public
5|$|I-805 {{continues}} northward through San Diego, {{where it}} intersects SR94, the Martin Luther King Jr. Freeway. As the freeway continues through downtown San Diego, it meets SR15, {{the continuation of}} I-15. It then intersects El Cajon Boulevard before passing under the Hazard Memorial Bridge that carries Adams Avenue. The bridge was named after Roscoe Hazard for {{his involvement in the}} construction of several roads and highways in Southern California. I-805 then travels on the Mission Valley Viaduct, a towering reinforced concrete viaduct built in 1972, spanning over Mission Valley and the San Diego River. The viaduct is the <b>top</b> <b>stack</b> of the Jack Schrade Interchange over I-8, which runs along the south side of Mission Valley and crosses underneath the viaduct perpendicularly, and is San Diego County's only symmetrical stack interchange. The San Diego Trolley traffic also runs under the viaduct on the valley floor.|$|E
2500|$|Machine {{transitions}} {{are based}} on the current state and input symbol, and also the current topmost symbol of the stack. [...] Symbols lower in the stack are not visible and have no immediate effect. Machine actions include pushing, popping, or replacing the stack top. [...] A deterministic pushdown automaton has at most one legal transition for the same combination of input symbol, state, and <b>top</b> <b>stack</b> symbol. This is where it differs from the nondeterministic pushdown automaton.|$|E
5000|$|The Volvo C70, its {{retractable}} hardtop {{manufactured by}} Webasto includes a global window switch that allows simultaneous raising or lowering of all windows, and a button to power-activate {{the raising of}} the folded <b>top</b> <b>stack</b> within the trunk to access cargo below.|$|E
50|$|Some simple stack {{machines}} have a {{chip design}} which is fully customized {{all the way}} down to the level of individual registers. The <b>top</b> of <b>stack</b> address register and the N <b>top</b> of <b>stack</b> data buffers are built from separate individual register circuits, with separate adders and ad hoc connections.|$|R
5000|$|LOAD [...] - [...] Load {{the value}} {{given by the}} address (tag 5 or tag 1 word) on the <b>top</b> of <b>stack.</b> [...] - [...] Follow an address chain if necessary.LODT [...] - [...] Load {{transparent}} [...] - [...] load the word referenced by the address on the <b>top</b> of <b>stack</b> ...|$|R
5000|$|LT48 [...] - [...] Load {{following}} {{code word}} onto top of stackLT16 [...] - [...] Set <b>top</b> of <b>stack</b> to following 16 bits in code streamLT8 [...] - [...] Set <b>top</b> of <b>stack</b> to following code syllableZERO [...] - [...] Shortcut for LT48 0ONE [...] - [...] Shortcut for LT48 1 ...|$|R
5000|$|The three-section hardtop assembly, {{manufactured}} by Webasto, raises or lowers in under 30 seconds {{and includes a}} global window switch that allows simultaneous raising or lowering of all windows, and a button to power-activate the raising of the folded <b>top</b> <b>stack</b> within the trunk [...] - [...] specifically to increase access to cargo storage when the top is lowered.|$|E
50|$|Threaded code passes all {{arguments}} on the stack. All return values are returned on the stack. This makes naive implementations slower than calling conventions that keep more values in registers. However, threaded code implementations that cache {{several of the}} <b>top</b> <b>stack</b> values in registers—in particular, the return address—are usually faster than subroutine calling conventions that always push and pop the return address to the stack.|$|E
50|$|The {{remnants}} of the blast furnace are all that remain of Onota. The Bay Furnace Stack Number One is constructed from coursed stone. It was originally 45 feet high, with a closed top, nine-foot boshes, and boilers located at the <b>top.</b> <b>Stack</b> Number Two was an iron shell on columns with 9-1/2-foot boshes. Two sets of six charcoal kilns were located {{two miles from the}} furnace, two miles apart.|$|E
50|$|Stack. Grows {{downwards}} from CurStackBase; SP = A7 {{points to}} <b>top</b> of <b>stack.</b>|$|R
5000|$|III: 4 <b>Top</b> of <b>stack</b> registers, 175 ns {{microinstruction}} {{cycle time}} → 5.7 MHz ...|$|R
5000|$|ADI % Add {{two words}} on <b>top</b> of <b>stack</b> tos := tos + stack | inc(sp) | goto fetch ...|$|R
50|$|Machine {{transitions}} {{are based}} on the current state and input symbol, and also the current topmost symbol of the stack. Symbols lower in the stack are not visible and have no immediate effect. Machine actions include pushing, popping, or replacing the stack top. A deterministic pushdown automaton has at most one legal transition for the same combination of input symbol, state, and <b>top</b> <b>stack</b> symbol. This is where it differs from the nondeterministic pushdown automaton.|$|E
5000|$|In {{precedence}} parsers, {{the right}} end of handles are found {{by comparing the}} precedence level or grammar tightness of the <b>top</b> <b>stack</b> symbols {{to that of the}} lookahead symbol. In the example above, int and id belong to inner grammar levels compared to the statement delimiter. So int and id are both considered to be higher precedence than and should be reduced to something else whenever followed by. There are different varieties of precedence parsers, each with different ways of finding the handle's left end and choosing the correct rule to apply: ...|$|E
5000|$|Initialize: Set ip {{to point}} to the first symbol of w$ Repeat: If $ is {{on the top of the}} stack and ip points to $ then return else Let a be the top {{terminal}} on the stack, and b the symbol pointed to by ip if a <• b or a =• b then push b onto the stack advance ip to the next input symbol else if a •> b then repeat pop the stack until the <b>top</b> <b>stack</b> terminal is related by <• to the terminal most recently popped else error (...) end ...|$|E
5000|$|... 40, 42, 44, 48: Schottky TTL, 4 <b>Top</b> of <b>stack</b> registers, 105 ns {{microinstruction}} {{cycle time}} → 9.5 MHz ...|$|R
5000|$|... 30, 33: Silicon on sapphire, 2 <b>Top</b> of <b>stack</b> registers, 90 ns {{microinstruction}} {{cycle time}} → 11 MHz, instructions take 3-7 cycles ...|$|R
5000|$|BSET [...] - [...] Bit set (bit number {{given by}} {{syllable}} following instruction)DBST [...] - [...] Dynamic bit set (bit number given by contents of B)BRST [...] - [...] Bit reset (bit number given by syllable following instruction)DBRS [...] - [...] Dynamic bit reset (bit number given by contents of B)ISOL [...] - [...] Field isolate (field given in syllables following instruction)DISO [...] - [...] Dynamic field isolate (field given in <b>top</b> of <b>stack</b> words)FLTR [...] - [...] Field transfer (field given in syllables following instruction)DFTR [...] - [...] Dynamic field transfer (field given in <b>top</b> of <b>stack</b> words)INSR [...] - [...] Field insert (field given in syllables following instruction)DINS [...] - [...] Dynamic field insert (field given in <b>top</b> of <b>stack</b> words)CBON [...] - [...] Count binary {{ones in the}} <b>top</b> of <b>stack</b> word (A or AX)SCLF [...] - [...] Scale leftDSLF [...] - [...] Dynamic scale leftSCRT [...] - [...] Scale rightDSRT [...] - [...] Dynamic scale rightSCRS [...] - [...] Scale right saveDSRS [...] - [...] Dynamic scale right saveSCRF [...] - [...] Scale right finalDSRF [...] - [...] Dynamic scale right finalSCRR [...] - [...] Scale right roundDSRR [...] - [...] Dynamic scale right round ...|$|R
50|$|I-805 {{continues}} northward through San Diego, {{where it}} intersects SR 94, the Martin Luther King Jr. Freeway. As the freeway continues through downtown San Diego, it meets SR 15, {{the continuation of}} I-15. It then intersects El Cajon Boulevard before passing under the Hazard Memorial Bridge that carries Adams Avenue. The bridge was named after Roscoe Hazard for {{his involvement in the}} construction of several roads and highways in Southern California. I-805 then travels on the Mission Valley Viaduct, a towering reinforced concrete viaduct built in 1972, spanning over Mission Valley and the San Diego River. The viaduct is the <b>top</b> <b>stack</b> of the Jack Schrade Interchange over I-8, which runs along the south side of Mission Valley and crosses underneath the viaduct perpendicularly, and is San Diego County's only symmetrical stack interchange. The San Diego Trolley traffic also runs under the viaduct on the valley floor.|$|E
40|$|Abstract. The p-shuffle is {{a natural}} {{generalization}} of the dovetail shuffle. It is defined as follows. First, the deck is cut into a <b>top</b> <b>stack</b> and a bottom stack so that {{the distribution of the}} size of the <b>top</b> <b>stack</b> is Binomial (N, p), where N is the total number of cards in the deck. Then, conditional on the outcome of the cut, the two stacks are “riffled ” in such a way that all possible riffles (interleavings) of these two stacks are equally likely. The main result of the paper is an asymptotic (N → ∞) bound on the number of repetitions needed to “randomize ” the deck. 1...|$|E
40|$|The p-shuffle is {{a natural}} {{generalization}} of the dovetail shuffle that is defined as follows. First, the deck is cut into a <b>top</b> <b>stack</b> and a bottom stack so that {{the distribution of the}} size of the <b>top</b> <b>stack</b> is Binomial (N; p), where N is the total number of cards in the deck. Then, conditional on the outcome of the cut, the two stacks are "riffled" in such a way that all possible riffles (interleavings) of these two stacks are equally likely. The main result of the paper is an asymptotic (N ! 1) bound on the number of repetitions needed to "randomize" the deck. 1. Introduction The p-shuffle (or GSR-p shuffles, for Gilbert, Shannon, and Reeds) is a simple and natural generalization of the dovetail (or GSR) shuffle studied in [3] and [1]. For 0 ! p ! 1 and a deck of size N, the p-shuffle is defined as follows: First, "cut" the deck into two stacks in such a way that the cardinality of the <b>top</b> <b>stack</b> has the Binomial (N; p) distribution. Next, "riffle" the two stacks by dropping cards o [...] ...|$|E
5000|$|... 64, 68: ECL, 8 <b>Top</b> of <b>Stack</b> registers, 75 ns {{microinstruction}} {{cycle time}} → 13 MHz, 8KB cache, 60KB WCS, 2 16-bit ALUs ...|$|R
50|$|As {{mentioned}} above, 'p' will {{print the}} <b>top</b> of the <b>stack</b> with a newline after it. 'n' will pop the <b>top</b> of the <b>stack</b> and output {{it without a}} trailing newline. 'f' will dump the entire stack with one entry per line.|$|R
40|$|Figure 1 shows {{a history}} for three threads. Each time line {{corresponds}} to one thread. All the threads {{work on a}} single stack s. The query s. top (i) expects an element i to be on <b>top</b> of <b>stack</b> s. Note that s. top (i) does not remove the top item. The command s. push (i) pushes an element i on <b>top</b> of the <b>stack</b> s...|$|R
40|$|A new {{definition}} of Embedded Push-Down Automata is provided. We prove this {{new definition}} preserves the equivalence with tree adjoining languages and we provide a tabulation framework to execute any automaton in polynomial time {{with respect to}} the length of the input string. 1. Introduction Embedded Push-Down Automata (EPDA) were defined in (Vijay-Shanker, 1988) as an extension of Push-Down Automata that accept exactly the class of Tree Adjoining Languages. They can also be seen as a level- 2 automata in a progression of linear iterated pushdowns involving nested stacks (Weir, 1994). An EPDA consists of a finite state control, an input tape and a stack made up of non-empty stacks containing stack symbols. A transition can consult the state, the input string and the top element of the <b>top</b> <b>stack</b> and then change the state, read a character of the input string and replace the top element by a finite sequence of stack elements to give a new <b>top</b> <b>stack,</b> and new stacks can be placed above and [...] ...|$|E
40|$|A cosmic ray {{test stand}} is being {{constructed}} at Lab 3. The stand {{consists of two}} stacks of steel plates one resting {{on top of the}} other. The <b>top</b> <b>stack</b> is composed of 6 plates of steel making an overall stack size of 34. 5 -inch x 40 -inch x 99 -inch. The bottom stack also has 6 layers of plate making an overall size of approximately 49. 5 -inch x 82 -inch x 99 -inch. The bottom stack is supported with three support legs. See drawing 3823. 000 ME- 900428 for the individual plate orientation. The minimum support leg size and necessary welds between plates are determined...|$|E
30|$|DEX is a register-based machine language, {{as opposed}} to Java byte code, which is stack-based. Each DEX method has its own {{predefined}} number of virtual registers (frequently referred to as “registers”). The Dalvik VM interpreter manages method registers with an internal execution state stack. The current method’s registers are always on the <b>top</b> <b>stack</b> frame [5, 13]. These registers loosely correspond to local variables in the Java method and store primitive types and object references. All computation occurs on registers, therefore values must be loaded from and stored to class fields before use and after use. Note that DEX uses class fields for all long-term storage, unlike hardware register-based machine languages (e.g. x 86), which store values in arbitrary memory locations.|$|E
2500|$|A pushdown {{automaton}} reads a given input string {{from left}} to right. In each step, it chooses a transition by indexing a table by input symbol, current state, and the symbol at the <b>top</b> of the <b>stack.</b> [...] A pushdown automaton can also manipulate the stack, as part of performing a transition. The manipulation can be to push a particular symbol to the <b>top</b> of the <b>stack,</b> or to pop off the <b>top</b> of the <b>stack.</b> The automaton can alternatively ignore the stack, and leave it as it is.|$|R
5000|$|The stack {{register}} to stack register {{format of the}} instructions is usually [...] or , where [...] is equivalent to , and [...] {{is one of the}} 8 stack registers ( [...] , , ..., [...] ). Like the integers, the first operand is both the first source operand and the destination operand. [...] and [...] should be singled out as first swapping the source operands before performing the subtraction or division. The addition, subtraction, multiplication, division, store and comparison instructions include instruction modes that pop the <b>top</b> of the <b>stack</b> after their operation is complete. So, for example, [...] performs the calculation , then removes [...] from the <b>top</b> of <b>stack,</b> thus making what was the result in [...] the <b>top</b> of the <b>stack</b> in [...]|$|R
50|$|As {{an aid to}} {{understanding}} the effect of statement, a short comment is used showing the <b>top</b> of the <b>stack</b> {{before and after the}} statement. The <b>top</b> of the <b>stack</b> is rightmost if there are multiple items. This notation is commonly used in the Forth language, where comments are enclosed in parentheses.|$|R
5000|$|... #Caption: Flight {{through the}} aligned image <b>stack,</b> <b>top</b> view, {{magnified}} section.|$|R
5000|$|An {{accessed}} page {{is moved}} to the <b>top</b> of <b>Stack</b> S and any HIR pages at the stack’s bottom are removed. For example, Graph (b) is produced after page B is accessed on Graph (a).|$|R
2500|$|It {{can use the}} <b>top</b> of the <b>stack</b> {{to decide}} which {{transition}} to take.|$|R
50|$|You {{control a}} stack if your color {{is on the}} <b>top</b> of the <b>stack.</b>|$|R
5000|$|It {{can use the}} <b>top</b> of the <b>stack</b> {{to decide}} which {{transition}} to take.|$|R
50|$|Axiom CMS is an {{open source}} content {{management}} system written on <b>top</b> of Axiom <b>Stack.</b>|$|R
