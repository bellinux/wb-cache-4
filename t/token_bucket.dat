237|31|Public
50|$|The leaky bucket as a meter {{is exactly}} {{equivalent}} to (a mirror image of) the <b>token</b> <b>bucket</b> algorithm, i.e. {{the process of}} adding water to the leaky bucket exactly mirrors that of removing tokens from the <b>token</b> <b>bucket</b> when a conforming packet arrives, the process of leaking {{of water from the}} leaky bucket exactly mirrors that of regularly adding tokens to the <b>token</b> <b>bucket,</b> and the test that the leaky bucket will not overflow is a mirror of the test that the <b>token</b> <b>bucket</b> contains enough tokens and will not 'underflow'. Thus, given equivalent parameters, the two algorithms will see the same traffic as conforming or nonconforming. The leaky bucket as a queue {{can be seen as a}} special case of the leaky bucket as a meter.|$|E
5000|$|The leaky bucket {{algorithm}} is sometimes {{contrasted with the}} <b>token</b> <b>bucket</b> algorithm. However, the above concept of operation for the leaky bucket as a meter may be directly compared with the [...] <b>token</b> <b>bucket</b> algorithm, the description of which is given in that article as the following: ...|$|E
5000|$|... #Subtitle level 3: Comparison {{with the}} <b>token</b> <b>bucket</b> {{algorithm}} ...|$|E
40|$|In {{this paper}} {{we focus on}} the {{behavior}} of the <b>token</b> leaky <b>bucket</b> mechanism with respect to second-order statistics of the departure process under various correlated cell arrival and deterministic token arrival distributions. We derive expressions for the lag-k auto-correlation of the inter-departure times for the <b>token</b> leaky <b>bucket</b> cell departure stream and we produce numerical examples for the lag-k auto-correlation of the <b>token</b> leaky <b>bucket</b> inter-departure times for several different cell arrival distributions exhibiting both positive and negative autocorrelations...|$|R
40|$|In {{this paper}} {{we present a}} traffic {{conditioner}} able to provide fairness between responsive and unresponsive flows originating from the same customer network, using a Fair Two-Rate Three-Color Marker. Its capability for fairness {{is based on the}} use of the FRED fair active buffer algorithm to control the token allocation of the <b>token</b> <b>buckets</b> residing in the traffic conditioner...|$|R
40|$|This paper {{discusses}} the issues {{to consider when}} selecting congestion control scheme for an integrated ground radio and satellite network engaging primarily in transmitting multimedia traffic, and then it proceeds to discuss effects (both positive and negative) of smoothing rendered on the input traffic as a congestion control scheme. We chose traffic shaping by smoothing rendered on the input traffic as the congestion control scheme to use for our mixed ground/satellite network due to the considerations of satellite's long propagation delay, high bandwidth of ground network, and the real-time nature of the traffic. Traffic shaping in our case, involves smoothing and policing the traffic by using the "virtual token buckets" and our original "multi-buckets" (i. e., virtual <b>token</b> <b>buckets</b> plus one additional leaky bucket). The simulation results show {{that in the case}} of congestion, virtual <b>token</b> <b>buckets</b> and multi-buckets algorithms, improve throughput significantly for the ground/satellite [...] ...|$|R
50|$|In the <b>token</b> <b>bucket</b> (TB) {{algorithm}} {{for network}} traffic shaping.|$|E
5000|$|The <b>token</b> <b>bucket</b> {{algorithm}} can be conceptually {{understood as}} follows: ...|$|E
50|$|The <b>token</b> <b>bucket</b> {{algorithm}} is directly comparable {{to one of}} the two versions of the leaky bucket algorithm described in the literature. This comparable version of the leaky bucket is described on the relevant Wikipedia page as the leaky bucket algorithm as a meter. This is a mirror image of the <b>token</b> <b>bucket,</b> in that conforming packets add fluid, equivalent to the tokens removed by a conforming packet in the <b>token</b> <b>bucket</b> algorithm, to a finite capacity bucket, from which this fluid then drains away at a constant rate, equivalent to the process in which tokens are added at a fixed rate.|$|E
30|$|A {{complete}} active queue management (AQM) {{system that}} considers <b>Token</b> <b>Buckets</b> (TBs) as rate limiters to regulate and guarantee a minimum transmission rate for each traffic class {{according to the}} priority levels established by the satellite operator. Here, the queue design considers the bandwidth delay product (BDP) value to dynamically set the queue lengths to enforce bounded delay values for high-priority traffic classes.|$|R
30|$|In this research, we {{employ the}} HTB qdisc[10, 28], which {{performs}} traffic policing. It is proposed {{to support the}} borrowing mechanism by extending features of TBF. HTB employs a number of <b>token</b> <b>buckets</b> arranged in a hierarchy. In the borrowing concept, a parent class can lend its own tokens, which is the bandwidth, to its child classes, when it has some remaining bandwidth. Therefore, the bandwidth utilization can be improved.|$|R
50|$|Conceptually, HTB is an {{arbitrary}} number of <b>token</b> <b>buckets</b> {{arranged in a}} hierarchy. The primary egress queuing discipline on any device {{is known as the}} root qdisc. The root qdisc will contain one class. This single HTB class will be set with two parameters, a rate and a ceil. These values should the same for the top-level class, and will represent the total available bandwidth on the link.|$|R
50|$|On Cisco equipment, both traffic {{policing}} {{and shaping}} are implemented through the <b>token</b> <b>bucket</b> algorithm.|$|E
50|$|TSPECs include <b>token</b> <b>bucket</b> {{algorithm}} parameters. The idea is {{that there}} is a <b>token</b> <b>bucket</b> which slowly fills up with tokens, arriving at a constant rate. Every packet which is sent requires a token, and if there are no tokens, then it cannot be sent. Thus, the rate at which tokens arrive dictates the average rate of traffic flow, while the depth of the bucket dictates how 'bursty' the traffic is allowed to be.|$|E
5000|$|J. Kidambi, D. Ghosal, and B. Mukherjee, [...] "Dynamic <b>Token</b> <b>Bucket</b> (DTB): A Fair Bandwidth Allocation Algo-rithm for High-Speed Networks," [...] Journal of High-Speed Networks, vol. 9, no. 2, pp. 67-87, 2000.|$|E
3000|$|..., {{and serving}} the queue {{according}} to the EXP rule, with WHOL,m(t) denoting the delay of the head-of-line <b>token</b> in <b>bucket</b> m.|$|R
40|$|In {{this paper}} we propose a new {{paradigm}} for a Differential Service (DiffServ) network consisting of two-color marking {{at the edges of the}} network using <b>token</b> <b>buckets</b> coupled with differential treatment in the core. Using fluid-flow modelling, we present existence conditions for tokenbucket rates and differential marking probabilities at the core that result in all edges receiving at least their minimum guaranteed rates. We then present an integrated DiffServ architecture comprising of an active rate management controller at the marking edge and a two-level active queue management controller at the core. The validity of the fluid flow model and performance of this new scheme are verified using ns simulations...|$|R
40|$|We {{present an}} {{end-to-end}} measurement method {{for the detection}} of traffic shaping. Traffic shaping is typically implemented using <b>token</b> <b>buckets,</b> allowing a maximum burst of traffic to be serviced at the peak capacity of the link, while any remaining traffic is serviced at a lower shaping rate. The contribution of this paper is twofold. First, we develop an active end-to-end detection mechanism, referred to as Shaper-Probe, that can infer whether a particular path is subject to traffic shaping, and in that case, estimate the shaper characteristics. Second, we analyze results from a large-scale deployment of ShaperProbe on M-Lab over the last 24 months, detecting traffic shaping in several major ISPs. Our deployment has received more than one million runs so far from 5, 700 ISPs. 1...|$|R
50|$|The {{hierarchical}} <b>token</b> <b>bucket</b> (HTB) is {{a faster}} {{replacement for the}} class-based queueing (CBQ) queuing discipline in Linux. It is useful to limit a client's download/upload rate so that the limited client cannot saturate the total bandwidth.|$|E
50|$|As can be seen, {{these two}} {{descriptions}} are essentially mirror images of one another: one adds {{something to the}} bucket {{on a regular basis}} and takes something away for conforming packets down to a limit of zero; the other takes away regularly and adds for conforming packets up to a limit of the bucket's capacity. So, is an implementation that adds tokens for a conforming packet and removes them at a fixed rate an implementation of the leaky bucket or of the <b>token</b> <b>bucket?</b> Similarly, which algorithm is used in an implementation that removes water for a conforming packet and adds water at a fixed rate? In fact both are effectively the same, i.e. implementations of both the leaky bucket and <b>token</b> <b>bucket,</b> as these are the same basic algorithm described differently. This explains why, given equivalent parameters, the two algorithms will see exactly the same packets as conforming or nonconforming. The differences in the properties and performance of implementations of the leaky and <b>token</b> <b>bucket</b> algorithms thus result entirely from the differences in the implementations, i.e. they do not stem from differences in the underlying algorithms.|$|E
50|$|The leaky bucket as a queue for {{variable}} packet lengths {{can also}} be described as equivalent to a special case of the leaky bucket as a meter. The suggested implementation can, like the fixed length implementation, be seen as traffic shaping function in which the queue is a delay element, rather than the bucket, and the function that services the queue is, in this case, explicitly given as a token bucket: it is decremented for conforming packets and incremented at a fixed rate. Hence, as the leaky bucket as a meter and <b>token</b> <b>bucket</b> are equivalent, the leaky bucket as a queue for variable packet lengths is also a special case of a traffic shaping function using a leaky bucket (or <b>token</b> <b>bucket)</b> as a meter.|$|E
40|$|We {{present a}} dynamic modelfor access control {{mechanism}} used in computer communication network applied to MPEG video transmission over Internet. This modelis different fromthosedeveloped inthe previous works related to this topic. In our model, <b>token</b> <b>buckets</b> supported by data buffersare used to shape incoming traffic and one multiplexor, serving all the token pools, multiplexes all theconforming traffic. The model is governed by a system of discrete nonlinear difference equations. Weuse neural network as the feedback controller which receives at its input (measurable) available information and provides at its output the optimal control. The simulated annealing algorithm isusedto optimize the system performance by adjusting the weights. For illustration, we presentnumerical results which show that the system performance of MPEG video server can be improved by using neural network and simulated annealing approach. </p...|$|R
40|$|Enabling {{wireless}} {{communication between vehicles}} {{is seen as the}} next step towards enhancing road safety. This would allow frequent exchange of messages about the current status of the vehicles or its surroundings to ensure awareness and warn drivers about potential dangers. A major challenge to support such vehicular networks is the performance degradation caused by wireless channel congestion with increasing vehicular densities. This thesis presents an approach to improve the LTE uplink channel congestion problem by regulating message transmissions from the vehicle based on network load. An in-vehicle traffic shaper based on multiple <b>token</b> <b>buckets</b> as well as several application specific enhancements are proposed. Simulation show that the proposed mechanism provides better awareness compared to a pure data rate limiting approach under high vehicular densities as well as high in-vehicle data generation rates...|$|R
40|$|We {{present a}} dynamic model for access control {{mechanism}} used in computer commu-nication network applied to MPEG video transmission over Internet. This model is dif-ferent from those developed in the previous works related to this topic. In our model, <b>token</b> <b>buckets</b> supported by data buffers are used to shape incoming traffic and one mul-tiplexor, serving all the token pools, multiplexes all the conforming traffic. The model is governed by a system of discrete nonlinear difference equations. We use neural network as the feedback controller which receives at its input (measurable) available information and provides at its output the optimal control. The simulated annealing algorithm is used to optimize the system performance by adjusting the weights. For illustration, we present numerical results which show that the system performance of MPEG video server can be improved by using neural network and simulated annealing approach. 1...|$|R
50|$|However, the {{implementation}} of the leaky bucket as a meter (or <b>token</b> <b>bucket)</b> in a traffic shaping function described above is an exact equivalent to the description of the leaky bucket as a queue: the delay element of the meter version is the bucket of the queue version; the bucket of the meter version is the process that services the queue, and the leak is such that the emission interval {{is the same as the}} tick interval. Therefore for fixed length packets, {{the implementation}} of the leaky bucket as a queue is of a special case of a traffic shaping function using a leaky bucket (or <b>token</b> <b>bucket)</b> as a meter in which the limit value, τ, is zero and the process of testing conformance is performed at the lowest possible rate.|$|E
50|$|Hierarchical <b>Token</b> <b>Bucket</b> {{implements}} a classful queuing {{mechanism for}} the linux traffic control system, and provides rate and ceil to allow the user to control the absolute bandwidth to particular classes of traffic as well as indicate the ratio of distribution of bandwidth when extra bandwidth become available(up to ceil).|$|E
5000|$|Implementers of this {{algorithm}} on platforms {{lacking the}} clock resolution necessary {{to add a}} single token to the bucket every [...] seconds {{may want to consider}} an alternative formulation. Given the ability to update the <b>token</b> <b>bucket</b> every S milliseconds, the number of tokens to add every S milliseconds = [...]|$|E
3000|$|... [...]. At {{each time}} slot, queues are served {{according}} to the M-LWDF rule, with WHOL,m(t) denoting the delay of the head-of-line <b>token</b> in <b>bucket</b> m instead of the head-of-line packet delay for queue m. After serving a given queue m, the number of tokens in the corresponding bucket must be reduced by the actual amount of data served.|$|R
40|$|In this paper, {{we develop}} a QoS-aware traffic shaper, which is {{implemented}} in LRMP (Local Resource Management Protocol) of the VGAnet Suite. In {{contrast to the}} conventional traffic shapers, e. g., leaky <b>buckets</b> and <b>token</b> <b>buckets,</b> which simply shape the average rate (and burst) of data transmission without any knowledge of the QoS parameters, e. g., delay jitter and synchronization skew, the QoS-aware traffic shaper cooperating with the connection management and data transfer protocols provides a service for delivering the continuous-media streams with the bandwidth guarantee, jitter control, and skew control {{on top of the}} 100 VG-Any LAN. 1 Introduction Multimedia applications generate large amounts of data that have stringent timing requirements. However, some new high-speed networks, such as Fast Ethernet, are coming without any explicit support for compressed audio/video traffic. They do not include bandwidth reservation mechanisms nor any other mechanisms to bound jitters of streamed [...] ...|$|R
40|$|We present {{end-to-end}} {{measurement methods}} {{for the detection}} of traffic shaping. Traffic shaping is typically implemented using <b>token</b> <b>buckets,</b> allowing a maximum burst of traffic to be serviced at the peak capacity of the link, while any remaining traffic is serviced at a lower shaping rate. The contribution of this paper is threefold. First, we develop an active end-to-end detection mechanism, referred to as ShaperProbe, that can infer whether a particular path is subject to traffic shaping, and in that case, estimate the shaper characteristics. Second, we analyze results from a large-scale deployment of ShaperProbe on M-Lab over the last few months, detecting traffic shaping in several major ISPs. Our deployment has received more than one million users so far from 5, 700 ISPs. Third, we modify the Shaper-Probe detection algorithm {{so that it can be}} applied passively on the traffic of any TCP-based application. We apply this passive method in NDT traces, also collected at M-Lab. Our work is the first to design detection methodologies and to measure traffic shaping deployments in the Internet. 1...|$|R
50|$|At {{least some}} {{implementations}} of the leaky bucket are {{a mirror image}} of the <b>Token</b> <b>Bucket</b> algorithm and will, given equivalent parameters, determine exactly the same sequence of events to conform or not conform to the same limits. However, {{there are at least two}} different descriptions of the leaky bucket that can and have caused confusion.|$|E
50|$|However, {{comparison}} of the leaky bucket and <b>token</b> <b>bucket</b> algorithms shows that they are simply mirror images of one another, one adding bucket content where the other takes it away and taking away bucket content where the other adds it. Hence, given equivalent parameters, implementations of both algorithms will see exactly the same traffic as conforming and non-conforming.|$|E
5000|$|There is an {{interesting}} consequence of seeing the leaky bucket as a queue for variable packet lengths as a specific implementation of the <b>token</b> <b>bucket</b> or leaky bucket as a meter in traffic shaping. This is that the bucket of the meter has a depth, n, and, as is always {{the case with the}} <b>token</b> <b>bucket,</b> this depth determines the burstiness of the output traffic (perhaps in relation to the average or minimum number of tokens required by the packets). Hence, it is possible to quantify the burstiness of the output of this [...] "byte counting" [...] leaky bucket as a meter, unless all packets are of the maximum length when it becomes pointless. However, this ability to define a burstiness for the output is in direct contradiction to the statement that the leaky bucket (as a queue) necessarily gives an output with a rigid rate, no matter how bursty the input.|$|E
40|$|We {{consider}} {{the problem of}} traffic allocation in multipath IP networks. We postulate that the desired equilibrium distribution of network bandwidth is one where every flow acquires a TCP-fair share along each of the routes connecting its ingress and egress. This characterization calls for connection striping at the ingress to balance the load among the available routes. Still, the desired equilibrium is not reachable when flows are allowed to compete freely for bandwidth, in which case, striping is known to reduce the throughput of TCP below the fair share on the least-congested path. Using the fairness properties of TCP congestion control, we prove that under connectionload balancing and ingress [...] egress traffic isolation, multipath networks tend to reach the desired equilibrium at steady-state [...] -despite the interaction among flows within traffic aggregates. The practical value of this result stems from the accuracy with which ingress [...] egress bandwidth allocations can be approximated using <b>token</b> <b>buckets</b> as rate limiters at the ingress routers {{and the availability of}} an efficient method for the accurate estimation of the TCP-fair shares...|$|R
40|$|In this paper, {{we study}} the {{transient}} {{behavior of a}} finite server (representing an ATM switch) which derives its input from a <b>token</b> leaky <b>bucket</b> with renewal cell arrival and deterministic token arrival distributions. We derive expressions for the transient and time averaged state probabilities, and transient and time averaged blocking probabilities for both the leaky bucket and server. We also produce numerical examples of transient and time averaged blocking probabilities for both the leaky bucket and server...|$|R
40|$|Differentiated Services (DiffServ) {{has been}} {{proposed}} by IETF as a scalable QoS solution {{for the next generation}} Internet as an alternative to Integrated Services (IntServ). It has been developed for relatively simple, coarse meth-ods of providing different levels of service for Internet traffic. The main idea is to divide traffic into a small number of classes and allocate resources on a per class basis. The Core of a diffserv network then distinguishes between small number of forwarding classes rather than individual flows as in Integrated Services. Through this project, we have implemented various components of DiffServ like classification, marking, dropping and scheduling. We have further analysed how a DiffServ enabled network behaves under varying load conditions and in terms of real time flows. For the emulation and analysis purpose, we have used VNUML (Virtual Net-work User Mode Linux) tool. For classification purpose, we use multi-trie ap-proach to match IP address according to SLAs (Service Level Agreements) between service provider and cus-tomers. To do marking, we use two rate three colour marker token bucke approach and for scheduling, we em-ploy priority scheduling with flows constrained by <b>token</b> <b>buckets.</b> Through the experiments performed, we come up with following key conclusions: (a) (b) (c) (d) ...|$|R
