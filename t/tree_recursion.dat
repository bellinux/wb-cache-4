5|70|Public
30|$|The {{algorithms}} {{proposed in}} this work are denoted by Tree: Dec. + BT and Tree: Dec. + DP to highlight {{the fact that these}} methods consist of two parts, namely, tree decomposition (Algorithm 1) and <b>tree</b> <b>recursion</b> using dynamic programming (Algorithms 2 or 3). In the case of the backtracking (BT) algorithm, the exponential bound function f_β^*(x) = a_β * 1.25 ^x - 1 is used.|$|E
40|$|Presented {{here are}} an algebra and a logic characterizing the {{complexity}} class NC 1, {{which consists of}} functions computed by uniform families of polynomial size, log depth circuits. In both characterizations, NC 1 functions are regarded as functions from one class of finite relational structures to another. In the algebraic characterization a recursion scheme called upward <b>tree</b> <b>recursion</b> is applied to a class of simple functions. In the logical characterization, first-order logic is augmented by an operator for defining relations by primitive recursion where {{it is assumed that}} every structure has an underlying relation BIT giving the binary representations of integers...|$|E
40|$|The {{computer}} simulation of the membrane bioreactor MBR {{has become the}} research focus of the MBR simulation. In order {{to compensate for the}} defects, for example, long test period, high cost, invisible equipment seal, and so forth, on the basis of conducting in-depth study of the mathematical model of the MBR, combining with neural network theory, this paper proposed a three-dimensional simulation system for MBR wastewater treatment, with fast speed, high efficiency, and good visualization. The system is researched and developed with the hybrid programming of VC++ programming language and OpenGL, with a multifactor linear regression model of affecting MBR membrane fluxes based on neural network, applying modeling method of integer instead of float and quad <b>tree</b> <b>recursion.</b> The experiments show that the three-dimensional simulation system, using the above models and methods, has the inspiration and reference for the future research and application of the MBR simulation technology...|$|E
40|$|We propose {{efficient}} particle smoothing {{methods for}} generalized state-spaces models. Particle smoothing {{is an expensive}} O(N 2) algorithm, where N {{is the number of}} particles. We overcome this problem by integrating dual <b>tree</b> <b>recursions</b> and fast multipole techniques with forward-backward smoothers, a new generalized two-filter smoother and a maximum a posteriori (MAP) smoother. Our experiments show that these improvements can substantially increase the practicality of particle smoothing. 1...|$|R
40|$|We {{establish}} the satisfiability threshold for random k-SAT for all k> k_ 0, with k_ 0 an absolute constant. That is, {{there exists a}} limiting density α_*(k) such that a random k-SAT formula of clause density α is with high probability satisfiable for αα_*. We show that the threshold α_*(k) is given explicitly by the one-step replica symmetry breaking prediction from statistical physics. The proof develops a new analytic method for moment calculations on random graphs, mapping a high-dimensional optimization problem to a more tractable problem of analyzing <b>tree</b> <b>recursions.</b> We believe that our method may apply {{to a range of}} random CSPs in the 1 -RSB universality class...|$|R
40|$|Abstract. In this paper, {{we study}} the {{tightness}} of solutions {{for a family}} of recursion equations. These equations arise naturally in the study of random walks on tree-like structures. Examples include the maximal displacement of branching random walk in one dimension, and the cover time of symmetric simple random walk on regular binary <b>trees.</b> <b>Recursion</b> equations associated with the distribution functions of these quantities have been used to establish weak laws of large numbers. Here, we use these recursion equations to establish the tightness of the corresponding sequences of distribution functions after appropriate centering. We phrase our results in a fairly general context, which we hope will facilitate their application in other settings. 1...|$|R
40|$|The {{course on}} CAAD at the KU Leuven {{is part of}} the course on design {{methodology}} and theory from which it is the most recent and natural extension. Attached to this course a series of assignments has been developed which bring the students in 45 hours to a non-trivial level of acquaintance with CAAD. Our assignments are primarily directed towards practice. They are built on top of AutoCAD to which we have added in-house developments in order to focus on specific pedagogical goals within a very limited time. After a general introduction on Windows (file management) and AutoCAD (basics) students make the following assignments (main pedagogical goals in between brackets). colophon (working with blocks), detail (2 D-drawing, hatching, editing), facade design using a built-in system of proportion (slides, scriptfile), extraction (linking alphanumerical and graphical entities), container (level of detail, icon menus, viewports), surface modelling (modelling 3 D-objects with surfaces), fractal <b>tree</b> (<b>recursion</b> in Autolisp), solid modelling (Leicester engineering building), lighting (integration of drawing and computation of illumination levels), pressure lines in an arc (interactive design of an arc), demos. The paper presents and comments these assignments and shows results from the last 2 years...|$|E
40|$|It {{is known}} that Kirchhoff Matrix Theorem computes the number of {{spanning}} trees in any graph G by taking a determinant; so far, many works derived a recursive function to calculate the complexity of certain families of maps specially Grid map. In this paper we give the major recursive formula that counts the number of spanning trees in the general case of grid graph, then we propose some spanning <b>trees</b> <b>recursions</b> for families of planar graphs called crosses maps such as the cross grid and the cross ocotogonal map by using the spanning tree theorem and we give a new algorithm to count the complexity of some particular maps such as the kite map...|$|R
40|$|A {{remarkable}} connection {{has been}} established for antiferromagnetic 2 -spin systems, including the Ising and hard-core models, showing that the computational complexity of approximating the partition function for graphs with maximum degree D undergoes a phase transition that coincides with the statistical physics uniqueness/non-uniqueness phase transition on the infinite D-regular tree. Despite this clear picture for 2 -spin systems, there is little known for multi-spin systems. We present the first analog of the above inapproximability results for multi-spin systems. The main difficulty in previous inapproximability results was analyzing {{the behavior of the}} model on random D-regular bipartite graphs, which served as the gadget in the reduction. To this end one needs to understand the moments of the partition function. Our key contribution is connecting: (i) induced matrix norms, (ii) maxima of the expectation of the partition function, and (iii) attractive fixed points of the associated <b>tree</b> <b>recursions</b> (belief propagation). The view through matrix norms allows a simple and generic analysis of the second moment for any spin system on random D-regular bipartite graphs. This yields concentration results for any spin system in which one can analyze the maxima of the first moment. The connection to fixed points of the <b>tree</b> <b>recursions</b> enables an analysis of the maxima of the first moment for specific models of interest. For k-colorings we prove that for even k, in the tree non-uniqueness region (which corresponds to k<D) it is NP-hard, unless NP=RP, to approximate the number of colorings for triangle-free D-regular graphs. Our proof extends to the antiferromagnetic Potts model, and, in fact, to every antiferromagnetic model under a mild condition...|$|R
40|$|A brief {{overview}} of some recently active topics in perturbative QCD, including: string-inspired <b>recursion</b> techniques at <b>tree</b> level; <b>recursion</b> approaches and automation of standard techniques for 1 -loop calculations; the status of NNLO jet calculations; and non-trivial structures that appear in higher-order calculations. 1...|$|R
40|$|We generalize the kernel {{method to}} {{equation}} systems {{in which the}} number of unknowns is allowed to exceed the number of equations. With this generalization, we derive the generating functions for several kinds of sequences and generating <b>trees</b> whose <b>recursions</b> are dependent on the parity of the indices...|$|R
40|$|In {{this paper}} we study the {{tightness}} of solutions {{for a family}} of recursion equations. These equations arise naturally in the study of random walks on tree-like structures. Examples include the maximal displacement of a branching random walk in one dimension and the cover time of a symmetric simple random walk on regular binary <b>trees.</b> <b>Recursion</b> equations associated with the distribution functions of these quantities have been used to establish weak laws of large numbers. Here, we use these recursion equations to establish the tightness of the corresponding sequences of distribution functions after appropriate centering. We phrase our results in a fairly general context, which we hope will facilitate their application in other settings. Comment: Published in at [URL] the Annals of Probability ([URL] by the Institute of Mathematical Statistics ([URL]...|$|R
5000|$|PET parser (Platform for Experimentation with {{efficient}} HPSG processing Techniques): an {{open source}} parser which produces HPSG parse <b>trees</b> with Minimal <b>Recursion</b> Semantics (MRS) outputs ...|$|R
50|$|Each {{time the}} <b>recursion</b> <b>tree</b> split in two, {{there is one}} more pair added to the decomposition. So, the {{algorithm}} run-time is in the number of pairs in the final decomposition.|$|R
40|$|Although the {{principles}} behind generic programming are already well understood, {{this style of}} programming is not widespread and examples of applications are rarely found in the literature. This paper addresses this shortage by presenting a new method, based on generic programming, to automatically visualize <b>recursion</b> <b>trees</b> of functions written in Haskell. Crucial to our solution {{is the fact that}} almost any function definition can be automatically factorized into the composition of a fold after an unfold of some intermediate data structure that models its <b>recursion</b> <b>tree.</b> By combining this technique with an existing tool for graphical debugging, and by extensively using Generic Haskell, we achieve a rather concise and elegant solution to this problem. ...|$|R
40|$|Abstract—Higher-order model {{checking}} {{is about}} the model checking of <b>trees</b> generated by <b>recursion</b> schemes. The past fifteen years or so have seen considerable progress in both theory and practice. Advances {{have been made in}} determining the expressive power of recursion schemes and other higher-order families of generators, automata-theoretic characterisations of these generator families, and the algorithmics and semantics of higher-order model checking and allied methods of formal analysis. Because the <b>trees</b> generated by <b>recursion</b> schemes are computation trees of higher-order functional programs, higher-order model checking provides a foundation for model checkers of such programming languages as Haskell, F # and Erlang. This paper aims to give an overview of recent developments in higher-order model checking. I...|$|R
40|$|We give {{a unified}} ("basis free") {{framework}} for the Descartes method for real root isolation of square-free real polynomials. This framework encompasses the usual Descartes' rule of sign method for polynomials in the power basis {{as well as its}} analog in the Bernstein basis. We then give a new bound {{on the size of the}} <b>recursion</b> <b>tree</b> in the Descartes method for polynomials with real coefficients. Applied to polynomials A(X) = ∑_i= 0 ^n a_iX^i with integer coefficients a_i < 2 ^L, this yields a bound of O(n(L + n)) on the size of <b>recursion</b> <b>trees.</b> We show that this bound is tight for L = Ω(n), and we use it to derive the best known bit complexity bound for the integer case...|$|R
40|$|International audienceWe {{consider}} recursion schemes (not {{assumed to}} be homogeneously typed, and hence not necessarily safe) and use them as generators of (possibly infinite) ranked <b>trees.</b> A <b>recursion</b> scheme is essentially a finite typed {deterministic term} rewriting system that generates, when one applies the rewriting rules ad infinitum, an infinite tree, called its value tree. A fundamental question is to provide an equivalent description of the <b>trees</b> generated by <b>recursion</b> schemes by a class of machines. In this paper we answer this open question by introducing collapsible pushdown automata (CPDA), which are an extension of deterministic (higher-order) pushdown automata. A CPDA generates a tree as follows. One considers its transition graph, unfolds it and contracts its silent transitions, which leads to an infinite tree which is finally node labelled thanks to a map from the set of control states of the CPDA to a ranked alphabet. Our contribution is to prove that these two models, higher-order recursion schemes and collapsible pushdown automata, are equi-expressive for generating infinite ranked trees. This is achieved by giving an effective transformations in both directions...|$|R
40|$|DPLL (for Davis, Putnam, Logemann, and Loveland) {{algorithms}} {{form the}} largest family of contemporary algorithms for SAT (the propositional satis ability problem) and {{are widely used}} in applications. The <b>recursion</b> <b>trees</b> of DPLL algorithm executions on unsatis able formulas are equivalent to tree-like resolution proofs. Therefore, lower bounds for tree-like resolution (which are known since 1960 s) apply to them...|$|R
40|$|Our {{algorithm}} is communication optimal – matches the recently proved communication lower bounds [1] – moves asymptotically less data than all existing algorithms • Our implementation is faster – than any classical algorithm can be – than any Strassen implementation {{we are aware}} of • With our algorithm, Strassen’s matrix multiplication is faster than classical – not just computation, but also communication – not just in theory, but also in practice – not just sequentially, but also in parallel • Key parallelization decision is to choose how to compute 7 subproblems – breadth first search ordering or depth first search ordering • Independent decision can be made at each level of <b>recursion</b> <b>tree</b> Breadth First Search (BFS) Step A BFS level of the <b>recursion</b> <b>tree</b> • Runs all 7 multiplies in parallel – each uses P/ 7 processors • Requires 7 / 4 as much extra memory • Requires communication • Reduces future communicatio...|$|R
40|$|Recent inapproximability {{results of}} Sly (2010), {{together}} with an approximation algorithm presented by Weitz (2006) establish a beautiful picture for the computational complexity of approximating the partition function of the hard-core model. Let λ_c(T_Δ) denote the critical activity for the hard-model on the infinite Δ-regular tree. Weitz presented an FPTAS for the partition function when λ 0 such that (unless RP=NP) there is no FPRAS for approximating the partition function on graphs of maximum degree Δ for activities λ satisfying λ_c(T_Δ) <λ<λ_c(T_Δ) +ϵ_Δ. We prove that a similar phenomenon holds for the antiferromagnetic Ising model. Recent results of Li et al. and Sinclair et al. extend Weitz's approach to any 2 -spin model, which includes the antiferromagnetic Ising model, to yield an FPTAS for the partition function for all graphs of constant maximum degree Δ when {{the parameters of the}} model lie in the uniqueness regime of the infinite tree T_Δ. We prove the complementary result that for the antiferrogmanetic Ising model without external field that, unless RP=NP, for all Δ≥ 3, there is no FPRAS for approximating the partition function on graphs of maximum degree Δ when the inverse temperature lies in the non-uniqueness regime of the infinite tree T_Δ. Our results extend to a region of the parameter space for general 2 -spin models. Our proof works by relating certain second moment calculations for random Δ-regular bipartite graphs to the <b>tree</b> <b>recursions</b> used to establish the critical points on the infinite tree. Comment: Journal version (no changes...|$|R
40|$|AbstractA simple {{stochastic}} model of OR-trees is investigated {{in which the}} directional search algorithm has a very high average run time. The optimal algorithms just make the opposite of directional search: they spread their questions over the tree as balanced as possible. This {{is the first time}} that in a nontrivial stochastic <b>recursion</b> <b>tree</b> model the optimality of a nondirectional algorithm with respect to the average run time has been proved...|$|R
40|$|This paper {{describes}} a significant redesign of the introductory {{courses at the}} University of Washington {{that has led to}} increased enrollments, increased student satisfaction and {{an increase in the number}} of women admitted to the CS major. The new courses are still taught in Java, but they represent a return to the basics that were emphasized in the pre-Java era. The biggest changes have occurred in the CS 1 course where we have replaced an “objects early ” curriculum with a more traditional procedural approach using static methods in Java. The new CS 1 course emphasizes problem solving, procedural decomposition and mastery of basic skills (e. g., loops, conditionals and arrays). The new CS 2 course emphasizes data structures, linked lists, binary <b>trees</b> and <b>recursion...</b>|$|R
40|$|A recent line {{of works}} {{established}} a remarkable connection for antiferromagnetic 2 -spin systems, including the Ising and hard-core models, {{showing that the}} computational complexity of approximating the partition function for graphs with maximum degree Δ undergoes a computational transition that coincides with the statistical physics uniqueness/non-uniqueness phase transition on the infinite Δ-regular tree. Despite this clear picture for 2 -spin systems, there is little known for multi-spin systems. We present the first analog of the above inapproximability results for multi-spin systems. The main difficulty in previous inapproximability results was analyzing {{the behavior of the}} model on random Δ-regular bipartite graphs, which served as the gadget in the reduction. To this end one needs to understand the moments of the partition function. Our key contribution is connecting: (i) induced matrix norms, (ii) maxima of the expectation of the partition function, and (iii) attractive fixed points of the associated <b>tree</b> <b>recursions</b> (belief propagation). We thus obtain a generic analysis of the Gibbs distribution of any multi-spin system on random regular bipartite graphs. We also treat in depth the k-colorings and the q-state antiferromagnetic Potts models. Based on these findings, we prove that for Δ constant and even k<Δ, it is NP-hard to approximate within an exponential factor the number of k-colorings on triangle-free Δ-regular graphs. We also prove an analogous statement for the antiferromagnetic Potts model. Our hardness results for these models complement the conjectured regime where the models are believed to have efficient approximation schemes. We systematize the approach to obtain a general theorem for the computational hardness of counting in antiferromagnetic spin systems, which we ultimately use to obtain the inapproximability results for the k-colorings and q-state antiferromagnetic Potts models, as well as (the previously known results for) antiferromagnetic 2 -spin systems. The criterion captures in an appropriate way the statistical physics uniqueness phase transition on the tree. Ph. D...|$|R
40|$|Recent results {{establish}} for 2 -spin antiferromagnetic {{systems that}} the computational complexity of approximating the partition function on graphs of maximum degree D undergoes a phase transition that {{coincides with the}} uniqueness phase transition on the infinite D-regular tree. For the ferromagnetic Potts model we investigate whether analogous hardness results hold. Goldberg and Jerrum showed that approximating the partition function of the ferromagnetic Potts model {{is at least as}} hard as approximating the number of independent sets in bipartite graphs (#BIS-hardness). We improve this hardness result by establishing it for bipartite graphs of maximum degree D. We first present a detailed picture for the phase diagram for the infinite D-regular tree, giving a refined picture of its first-order phase transition and establishing the critical temperature for the coexistence of the disordered and ordered phases. We then prove for all temperatures below this critical temperature that it is #BIS-hard to approximate the partition function on bipartite graphs of maximum degree D. As a corollary, it is #BIS-hard to approximate the number of k-colorings on bipartite graphs of maximum degree D when k <= D/(2 ln D). The #BIS-hardness result for the ferromagnetic Potts model uses random bipartite regular graphs as a gadget in the reduction. The analysis of these random graphs relies on recent connections between the maxima of the expectation of their partition function, attractive fixpoints of the associated <b>tree</b> <b>recursions,</b> and induced matrix norms. We extend these connections to random regular graphs for all ferromagnetic models and establish the Bethe prediction for every ferromagnetic spin system on random regular graphs. We also prove for the ferromagnetic Potts model that the Swendsen-Wang algorithm is torpidly mixing on random D-regular graphs at the critical temperature for large q. Comment: To appear in SIAM J. Computin...|$|R
40|$|The PRP-system is a parallel-programming system {{developed}} by 8 master students. One {{part of the}} system (the preprocessor) needs a complete overhaul because it is not good at managing errors and it is not user-friendly. In addition to this I wish {{to take a look at}} the solutions on a class of recursive problems where <b>recursions</b> <b>tree</b> or interceptions are quite slanting. This will clearly improve the PRP-systems ability to effectively solve such problems. Supervisor: Arne Mau...|$|R
5000|$|Van Emde Boas layout: The layout {{is defined}} recursively. A tree {{with only one}} node is a single node record. If a tree T has two or more nodes, let H0=h(T)/2, let T0 be the tree {{consisting}} of all nodes in T with depth at most H0, and let T1,……., Tk be the subtrees of T rooted at nodes with depth H0+1, numbered from left to right. We denote T0 the top tree and T1,……., Tk the bottom <b>trees</b> of the <b>recursion.</b>|$|R
40|$|Elek and Lippner (2010) {{showed that}} the {{convergence}} of a sequence of bounded-degree graphs implies {{the existence of a}} limit for the proportion of vertices covered by a maximum matching. We provide a characterization of the limiting parameter via a local recursion defined directly on the limit of the graph sequence. Interestingly, the recursion may admit multiple solutions, implying non-trivial long-range dependencies between the covered vertices. We overcome this lack of correlation decay by introducing a perturbative parameter (temperature), which we let progressively go to zero. This allows us to uniquely identify the correct solution. In the important case where the graph limit is a unimodular Galton-Watson <b>tree,</b> the <b>recursion</b> simplifies into a distributional equation that can be solved explicitly, leading to a new asymptotic formula that considerably extends the well-known one by Karp and Sipser for Erdös-Rényi random graphs. Comment: 23 page...|$|R
40|$|We {{show that}} certain heterotic string amplitudes {{are given in}} terms of correlators of the twisted topological (2, 0) SCFT, {{corresponding}} to the internal sector of the N = 1 spacetime supersymmetric background. The genus g topological partition function F g corresponds to a term in the effective action of the form W 2 g, where W is the gauge or gravitational superfield. We study also recursion relations related to holomorphic anomalies, showing that, contrary to the type II case, they involve correlators of anti-chiral superfields. The corresponding terms in the effective action are of the form W 2 gΠn, where Π is a chiral superfield obtained by chiral projection of a general superfield. We observe that {{the structure of the}} recursion relations is that of N = 1 spacetime supersymmetry Ward identity. We give also a solution of the <b>tree</b> level <b>recursion</b> relations and discuss orbifold examples...|$|R
40|$|International audienceElek and Lippner (Proc. Am. Math. Soc. 138 (8), 2939 - 2947, 2010) {{showed that}} the {{convergence}} of a sequence of bounded-degree graphs implies {{the existence of a}} limit for the proportion of vertices covered by a maximum matching. We provide a characterization of the limiting parameter via a local recursion defined directly on the limit of the graph sequence. Interestingly, the recursion may admit multiple solutions, implying non-trivial long-range dependencies between the covered vertices. We overcome this lack of correlation decay by introducing a perturbative parameter (temperature), which we let progressively go to zero. This allows us to uniquely identify the correct solution. In the important case where the graph limit is a unimodular Galton-Watson <b>tree,</b> the <b>recursion</b> simplifies into a distributional equation that can be solved explicitly, leading to a new asymptotic formula that considerably extends the well-known one by Karp and Sipser for Erdős-Rényi random graphs...|$|R
40|$|In {{this work}} we generalize Polya urn schemes with {{possibly}} infinitely many colors {{and extend the}} earlier models described in [4, 5, 7]. We provide a novel and unique approach of representing the observed sequence of colors in terms a branching Markov chain on random <b>recursion</b> <b>tree.</b> This enables us to derive fairly general asymptotic for our urn schemes. We then illustrate through several examples that our method can easily derive the classical results for finite urns, as well as, many new results for infinite color urns. Comment: 17 pages and 5 figure...|$|R
5000|$|Let [...] be {{the lowest}} common {{ancestor}} of [...] and [...] in the split tree and let [...] and [...] be the children of [...] Because of the last assumption, [...] is in the subtree of [...] and [...] in the subtree of [...] A call to [...] is necessarily done in [...] Because, each time there is a <b>recursion,</b> the <b>recursion</b> <b>tree</b> creates two branches that contain all the points of the current recursion call, {{there will be a}} sequence of call to [...] leading to having [...] in [...] and [...] in [...]|$|R
40|$|The elegant {{recursive}} {{definitions of}} data {{structures such as}} lists and <b>trees</b> suggest that <b>recursion</b> {{can be used to}} develop software involving these structures. We show how the careful design and implementation of list and binary tree classes in Java and C++ can make the most of recursion both in client code and in the internal implementation of the classes. We show how our approach provides an effective alternative to the traditional iterative treatment of lists and pointer-based treatment of trees in computer science curricula, and that it promotes recursive thinking in a context where recursion is natural. ...|$|R
50|$|To reason {{about the}} <b>recursion</b> <b>tree</b> let the left child problem be the subproblem in the {{recursive}} call in step 3 {{and the right}} child problem be the subproblem in the recursive call in step 5. Count {{the total number of}} edges in the original problem and all subproblems by counting the number of edges in each left path of the tree. A left path begins at either a right child or the root and includes all nodes reachable through a path of left children. The left paths of a binary tree are shown circled in blue in the diagram on the right.|$|R
40|$|Abstract. This paper explores {{some ideas}} {{concerning}} the time-analysis of functional programs defined by instantiating typical recursion patterns such as folds, unfolds, and hylomorphisms. The concepts {{in this paper}} are illustrated through a rich set of examples in the Haskell programming language. We concentrate on unfolds and folds (also known as anamorphisms and catamorphisms respectively) of recursively defined types, {{as well as the}} more general hylomorphism pattern. For the latter, we use as case-studies two famous sorting algorithms, mergesort and quicksort. Even though time analysis is not compositional, we argue that splitting functions to expose the explicit construction of the <b>recursion</b> <b>tree</b> and its later consumption helps with this analysis. ...|$|R
40|$|Abstract—The parity based {{divide and}} conquer <b>recursion</b> <b>trees</b> are {{introduced}} where the sizes of the tree do not grow monotonically as n grows. These non-monotonic recursive functions called fogk(n) and ˜fogk(n) are strictly less than linear, o(n) but greater than logarithm, Ω(log n). Properties of fogk(n) such as non-monotonicity, upper and lower bounds, etc. are examined and proven. These functions are useful to analyze computational complexities of certain algorithms, especially problems of finding various properties of k-ary {{divide and conquer}} trees or size balanced k-ary trees. Several integer sequences based on the divide and conquer recursive relations are newly discovered as well. Keywords: divide and conquer, Nonmonotonic growth function, Analysis of Algorithms...|$|R
