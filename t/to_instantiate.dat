1091|841|Public
25|$|Qutb's {{political}} philosophy {{has been described}} as an attempt <b>to</b> <b>instantiate</b> a complex and multilayer eschatological vision, partly grounded in the counter-hegemonic re-articulation of the traditional ideal of academic jargon.|$|E
25|$|In summary, a {{template}} is a compile-time parameterized function or class written without {{knowledge of the}} specific arguments used <b>to</b> <b>instantiate</b> it. After instantiation, the resulting code is equivalent to code written specifically for the passed arguments. In this manner, templates provide a way to decouple generic, broadly applicable aspects of functions and classes (encoded in templates) from specific aspects (encoded in template parameters) without sacrificing performance due to abstraction.|$|E
25|$|Qutb's mature {{political}} views always centered on Islam – Islam {{as a complete}} system of morality, justice and governance, whose sharia laws and principles should be the sole basis of governance and everything else in life – though his interpretation of it varied. Qutb's political philosophy {{has been described as}} an attempt <b>to</b> <b>instantiate</b> a complex and multilayer eschatological vision, partly grounded in the counter-hegemonic re-articulation of the traditional ideal of Islamic universalism.|$|E
30|$|The {{number of}} FSL {{channels}} <b>to</b> be <b>instantiated</b> {{can be resolved}} via the following formula for VBSME scaling.|$|R
40|$|Finding {{explanations}} for queries to Description Logics (DL) theories is a non-standard reasoning service originally defined for debugging purposes but recently found useful for answering queries to probabilistic theories. In the latter case, besides the axioms {{that are used}} to entail the query, it is necessary to record also the individuals to which the axioms are applied. We refer, in this case, <b>to</b> <b>instantiated</b> explanations. The system BUNDLE computes the probability of queries to probabilistic ALC knowledge bases by first finding instantiated {{explanations for}} the query and then applying a dynamic programming algorithm. In order to apply BUNDLE to more expressive DLs, such as SHOIN(D) that is at the basis of OWL DL, instantiated explanations must be found. In this paper, we discuss how we extended BUNDLE in order <b>to</b> compute <b>instantiated</b> explanations for SHOIN(D) ...|$|R
50|$|Other {{programming}} languages, such as Objective-C, have class methods, {{which can}} include constructor-type methods, {{but are not}} restricted <b>to</b> merely <b>instantiating</b> objects.|$|R
25|$|The Port Inland Distribution Network {{involves}} new or expanded {{transportation systems}} for redistribution by barge and rail for the shipped goods and containers that are delivered at area ports {{in an effort}} to curtail the use of trucks and their burden on the environment, traffic, and highway systems. The Port Authority of New York and New Jersey (PANYNJ), New Jersey Department of Transportation (NJDOT), and Delaware Valley Regional Planning Commission (DVRPC), are involved in initiatives to review and develop this network. <b>To</b> <b>instantiate</b> PIDN, the PANYNJ signed an agreement November 29, 2003 with the Port of Albany to provide twice weekly barge service. By 2014, the service had been discontinued.|$|E
2500|$|The {{rule for}} {{universal}} quantifiers [...] {{is the only}} non-deterministic rule, as it does not specify which term <b>to</b> <b>instantiate</b> with. [...] Moreover, while the other rules need to be applied only once for each formula and each path the formula is in, this one may require multiple applications. [...] Application of this rule can however be restricted by delaying {{the application of the}} rule until no other rule is applicable and by restricting the application of the rule to ground terms that already appear {{in the path of the}} tableau. The variant of tableaux with unification shown below aims at solving the problem of non-determinism.|$|E
2500|$|C++ {{templates}} enable generic programming. C++ supports function, class, alias {{and variable}} templates. Templates may be parameterized by types, compile-time constants, and other templates. Templates are implemented by instantiation at compile-time. <b>To</b> <b>instantiate</b> a template, compilers substitute specific arguments for a template's parameters {{to generate a}} concrete function or class instance. Some substitutions are not possible; these are eliminated by an overload resolution policy described by the phrase [...] "Substitution failure is not an error" [...] (SFINAE). Templates are a powerful tool {{that can be used}} for generic programming, template metaprogramming, and code optimization, but this power implies a cost. Template use may increase code size, because each template instantiation produces a copy of the template code: one for each set of template arguments, however, this is the same or smaller amount of code that would be generated if the code was written by hand. This is in contrast to run-time generics seen in other languages (e.g., Java) where at compile-time the type is erased and a single template body is preserved.|$|E
40|$|Abstract. Finding {{explanations}} for queries to Description Logics (DL) theories is a non-standard reasoning service originally defined for debugging purposes but recently found useful for answering queries to probabilistic theories. In the latter case, besides the axioms {{that are used}} to entail the query, it is necessary to record also the individuals to which the axioms are applied. We refer, in this case, <b>to</b> <b>instantiated</b> explanations. The system BUNDLE computes the probability of queries to probabilistic ALC knowledge bases by first finding instantiated {{explanations for}} the query and then applying a dynamic programming algorithm. In order to apply BUNDLE to more expressive DLs, such as SHOIN (D) that is at the basis of OWL DL, instantiated explanations must be found. In this paper, we discuss how we extended BUNDLE in order <b>to</b> compute <b>instantiated</b> explanations for SHOIN (D). ...|$|R
30|$|Fully {{software-based}} network functions offering flexibility <b>to</b> architect, <b>instantiate,</b> and reconfigure {{network components}} (at the edge, core, or cloud, {{using the same}} or different addressing space).|$|R
40|$|Reusing HCI design {{knowledge}} shows {{potential in}} allowing practitioners to design based on previously identified concerns. A reuse approach is presented {{that is based}} on claims, design knowledge units encapsulating tradeoffs. Fundamental characteristics of reuse include abstraction, selection, specification, and integration. Claim relationships provide the key <b>to</b> <b>instantiating</b> each of these traits within the claims reuse approach. A claims library is used implement a working model of the reuse process. Studies analyzing various components of this work validate existing efforts and provide impetus for future work...|$|R
50|$|<b>To</b> <b>instantiate</b> {{a generic}} unit, the {{programmer}} passes actual parameters for each formal. The generic instance then behaves {{just like any}} other unit. It is possible <b>to</b> <b>instantiate</b> generic units at run-time, for example inside a loop.|$|E
5000|$|... <b>to</b> <b>instantiate</b> the {{appropriate}} bean {{to perform the}} operation(s).|$|E
5000|$|C++03 {{has this}} syntax to oblige the {{compiler}} <b>to</b> <b>instantiate</b> a template: ...|$|E
5000|$|An MLet (Management applet) is {{a utility}} MBean <b>to</b> load, <b>instantiate</b> and {{register}} MBeans in the MBeanServer from an XML description. The {{format of the}} XML descriptor is: ...|$|R
40|$|Abstract: In {{the current}} paper, we re-examine the {{connection}} between formal argu-mentation and logic programming {{from the perspective of}} semantics. We observe that one particular translation from logic programs <b>to</b> <b>instantiated</b> argumentation (the one described by Wu, Caminada and Gabbay) is able to serve as a basis for describing vari-ous equivalences between logic programming semantics and argumentation semantics. In particular, we are able to provide a formal connection between regular semantics for logic programming and preferred semantics for formal argumentation. We also show that there exist logic programming semantics (L-stable semantics) that cannot be captured by any abstract argumentation semantics...|$|R
50|$|The {{abstract}} {{framework of}} Dung has been <b>instantiated</b> <b>to</b> several particular cases.|$|R
5000|$|... {{which tells}} the {{compiler}} not <b>to</b> <b>instantiate</b> the template in this translation unit.|$|E
5000|$|...You do {{not have}} <b>to</b> <b>instantiate</b> an object before {{you can use the}} function.|$|E
5000|$|Object {{factories}} are used <b>to</b> <b>instantiate</b> objects. Factories allow run-time {{extension of the}} system.|$|E
40|$|Belief-states possess certain {{features}} {{that allow them}} <b>to</b> be <b>instantiated</b> as knowledge-states. In this paper I want to examine these features and ask whether or not other mental states besides belief possess such features. If {{it is the case}} that mental states distinct from belief possess these key features then these mental states may be able <b>to</b> be <b>instantiated</b> as knowledge-states as well. Also, if this is so, then knowledge can exist without beliefs. If knowledge can exist without beliefs then the belief condition of knowledge can be rejected. In this paper I will mount a rejection to the belief condition that follows the above line of reasoning...|$|R
30|$|Requirements: {{presents}} all project requirements; allows {{selection of}} the requirement for editing or deleting; allows the generation of an RD in PDF format; allows the establishment of relationship between the requirements; and provides suggestions of patterns related <b>to</b> the <b>instantiated</b> requirement.|$|R
40|$|We {{consider}} {{the impact of}} the possibility of decryption failures in proofs of security for padding schemes, where these failures are both message and key dependent. We explain that an average case failure analysis is not necessarily su#cient to achieve provable security with existing CCA 2 -secure schemes. On a positive note, we introduce NAEP, an e#cient padding scheme similar to PSS-E designed especially for the NTRU one-way function. We show that with this padding scheme we can prove security in the presence of decryption failures, under certain explicitly stated assumptions. We also discuss the applicability of proofs of security <b>to</b> <b>instantiated</b> cryptosystems in general, introducing a more practical notion of cost to describe the power of an adversary...|$|R
5000|$|Uniqueness questions: A {{uniqueness}} question {{tries to}} uniquely identify an object <b>to</b> <b>instantiate</b> it.|$|E
5000|$|How can {{an object}} be created so that subclasses can redefine which class <b>to</b> <b>instantiate?</b> ...|$|E
5000|$|Using lazy {{initialization}} <b>to</b> <b>instantiate</b> {{the object}} {{the first time}} it is requested (lazy initialization pattern) ...|$|E
40|$|We {{present a}} {{reactive}} agent architecture which incorporates decisiontheoretic notions {{to drive the}} deliberation and meta-deliberation process, and illustrate how this architecture can be exploited to model an agent who reacts <b>to</b> contextually <b>instantiated</b> norms by monitoring for norm instantiation and replanning its current intentions...|$|R
40|$|Much of {{software}} engineering and knowledge engineering has con-centrated on generic languages and methods which {{are supposed to}} be transferable between domains. By contrast, engineers working in real domains usually employ domain-specic methods and terminology which have evolved from their experience in getting the job done. This paper argues that we have paid too little attention <b>to</b> <b>instantiating</b> generic methods <b>to</b> the demands of specic engineering problems. We advocate narrow but deep studies of carefully chosen domains, with the aim of harnessing domain-specic problem descriptions to guide the construction {{of software}} specications. We have a problem, which Jackson neatly expresses in [7]. Software engineering is not a discipline; it is an aspiration, as yet unachieved. Many approaches have been proposed, includ-ing reusable components, formal methods, structured method...|$|R
40|$|Interaction between virtual and {{physical}} worlds {{is an area}} of growing importance as technology increases the amount of virtualization in our lives. However, to-date, most of this work has focused on translating the physical world into a virtual representation, with little attention being paid <b>to</b> <b>instantiating</b> the virtual in the physical world. This paper addresses this latter issue. In particular we examine how a virtual student can be given a presence in a real smart classroom in order to have better interaction with local students within a shared environment. In this 'work-in-progress' (concept) paper, we propose a novel augmented-reality based approach that identifies and synchronises the remote and local environmental states (people and environment) so as to provide a more naturalistic mixed reality shared environment...|$|R
5000|$|Compiler {{internals}} - SML/NJ provides {{access to}} several of the compiler internals, including methods <b>to</b> <b>instantiate</b> and modify the signal table.|$|E
5000|$|This example {{illustrates}} how <b>to</b> <b>instantiate</b> an input factory, create a reader and iterate over {{the elements of}} an XML document.|$|E
5000|$|The AES70 Class Structure {{defines a}} set of classes ("OCA Classes") that devices may use <b>to</b> <b>instantiate</b> OCA objects. There are three kinds of classes: ...|$|E
30|$|A {{configuration}} {{front end}} {{that allows the}} generic app platform <b>to</b> be quickly <b>instantiated</b> according <b>to</b> the specific event/space.|$|R
3000|$|Nagios {{demonstrates}} {{a significant increase}} in monitoring latency as additional hosts are <b>instantiated</b> <b>to</b> meet demand. In Fig. 16 [...]...|$|R
5000|$|Smalltalk {{includes}} the [...] class, {{which can be}} <b>instantiated</b> <b>to</b> use either identity or equality as predicate for inclusion test.|$|R
