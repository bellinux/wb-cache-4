5795|1061|Public
25|$|The {{results of}} the first few {{decades of the twentieth}} century also had an impact upon {{analytic}} philosophy and philosophical logic, particularly from the 1950s onwards, in subjects such as modal logic, <b>temporal</b> <b>logic,</b> deontic logic, and relevance logic.|$|E
25|$|Progress in {{mathematical}} logic {{in the first}} few decades of the twentieth century, particularly arising from the work of Gödel and Tarski, {{had a significant impact on}} analytic philosophy and philosophical logic, particularly from the 1950s onwards, in subjects such as modal logic, <b>temporal</b> <b>logic,</b> deontic logic, and relevance logic.|$|E
25|$|While {{reachability}} {{seems to}} be a good tool to find erroneous states, for practical problems the constructed graph usually has far too many states to calculate. To alleviate this problem, linear <b>temporal</b> <b>logic</b> is usually used in conjunction with the tableau method to prove that such states cannot be reached. LTL uses the semi-decision technique to find if indeed a state can be reached, by finding a set of necessary conditions for the state to be reached then proving that those conditions cannot be satisfied.|$|E
40|$|Propositional {{interval}} <b>temporal</b> <b>logics</b> {{are quite}} expressive <b>temporal</b> <b>logics</b> {{that provide a}} natural framework for representing and reasoning about temporal properties in several areas of computer science. The main objective of the thesis is {{the exploration of the}} boundary area between decidability and undecidability in the field of Interval <b>Temporal</b> <b>Logics.</b> In particular, we focus on the development of original tableau-based decision procedures for propositional interval <b>temporal</b> <b>logics...</b>|$|R
40|$|Abstract. We {{study the}} {{complexity}} of <b>temporal</b> <b>logics</b> over concurrent systems that can be described by Mazurkiewicz traces. We develop a general method {{to prove that the}} uniform satisfiability problem of local <b>temporal</b> <b>logics</b> is in PSPACE. We also demonstrate that this method applies to all known local <b>temporal</b> <b>logics.</b> 1...|$|R
40|$|Abstract <b>Temporal</b> <b>logics</b> of {{knowledge}} {{are useful for}} reasoningabout situations where the knowledge of an agent or component is important, and where change in this knowledge mayoccur over time. Here we use <b>temporal</b> <b>logics</b> {{of knowledge}} to reason about security protocols. We show how to spec-ify part of the Needham-Schroeder protocol using <b>temporal</b> <b>logics</b> of knowledge and prove various properties usinga clausal resolution calculus for this logic. 1...|$|R
500|$|... "A {{logic of}} {{concrete}} time intervals" [...] (1990) concerned <b>temporal</b> <b>logic.</b> This paper accompanied an earlier Aiken Computation Laboratory technical report, [...] "Finite-state analysis of asynchronous circuits with bounded temporal uncertainty", where he first proposed {{the representation of}} an asynchronous circuit, with bounded temporal uncertainty on gate transition events, as a finite-state machine. This paper was the earliest work on the verification of timing properties that modeled time both asynchronously and continuously, neither discretizing time nor imposing a global clock.|$|E
2500|$|While {{the study}} of {{necessity}} and possibility remained important to philosophers, little logical innovation happened until the landmark investigations of Clarence Irving Lewis in 1918, who formulated a family of rival axiomatizations of the alethic modalities. His work unleashed a torrent of new work on the topic, expanding the kinds of modality treated to include deontic logic and epistemic logic. [...] The seminal work of Arthur Prior applied the same formal language to treat <b>temporal</b> <b>logic</b> and {{paved the way for}} the marriage of the two subjects. Saul Kripke discovered (contemporaneously with rivals) his theory of frame semantics, which revolutionized the formal technology available to modal logicians and gave a new graph-theoretic way of looking at modality that has driven many applications in computational linguistics and computer science, such as dynamic logic.|$|E
2500|$|An early {{formal system}} of <b>{{temporal}}</b> <b>logic</b> was studied by Avicenna. Although {{he did not}} develop a real theory of temporal propositions, he did study the relationship between temporalis and the implication. Avicenna's work was further developed by Najm al-Dīn al-Qazwīnī al-Kātibī and became the dominant system of Islamic logic until modern times. Avicennian logic also influenced several early European logicians such as Albertus Magnus and William of Ockham. Avicenna endorsed the law of noncontradiction proposed by Aristotle, that a fact could not be both true and false {{at the same time}} and in the same sense of the terminology used. He stated, [...] "Anyone who denies the law of noncontradiction should be beaten and burned until he admits that to be beaten is not the same as not to be beaten, and to be burned is not the same as not to be burned." ...|$|E
40|$|Abstract. <b>Temporal</b> <b>logics</b> of {{knowledge}} {{are useful for}} reasoningabout situations where the knowledge of an agent or component is important, and where change in this knowledge may occur over time. Here we use <b>temporal</b> <b>logics</b> {{of knowledge}} to reason about the game Cluedo. We show how to specify Cluedo using <b>temporal</b> <b>logics</b> ofknowledge and prove statements about {{the knowledge of the}} players using a clausal resolution calculus for this logic...|$|R
40|$|<b>Temporal</b> <b>logics</b> of {{knowledge}} {{are useful for}} reasoning about situations where the knowledge of an agent or component is important, and where change in this knowledge may occur over time. Here we use <b>temporal</b> <b>logics</b> {{of knowledge}} to reason about security protocols. We show how to specify part of the Needham-Schroeder protocol using <b>temporal</b> <b>logics</b> of knowledge and prove various properties using a clausal resolution calculus for this logic. 1...|$|R
40|$|This paper {{studies the}} {{complexity}} of model check-ing multiagent systems, in particular systems suc-cinctly described by two practical representations: concurrent representation and symbolic representa-tion. The logics we concern include branching time <b>temporal</b> <b>logics</b> and several variants of alternating time <b>temporal</b> <b>logics.</b> ...|$|R
2500|$|So, one {{can think}} of removeFile as a {{function}} that, given a FilePath, returns an IO action; this action will ensure that the world, {{in this case the}} underlying file system, won't have a file named by that FilePath when it gets executed. Here, the IO internal value is of type (...) which means that the caller does not care about any other outcomes. On the other hand, in doesFileExist, the function returns an IO action which wraps a boolean value, True or False; this conceptually represents a new state of the world where the caller knows for certain whether that FilePath is present in the file system or not {{at the time of the}} action is performed. The state of the world managed in this way can be passed from action to action, thus defining a series of actions which will be applied in order as steps of state changes. This process is similar to how a <b>temporal</b> <b>logic</b> represents the passage of time using only declarative propositions. The following example clarifies in detail how this chaining of actions occurs in a program, again using Haskell.|$|E
2500|$|Ibn Sina (Avicenna) (980–1037) was {{the founder}} of Avicennian logic, which {{replaced}} Aristotelian logic as the dominant system of logic in the Islamic world, and also had an important influence on Western medieval writers such as Albertus Magnus. Avicenna wrote on the hypothetical syllogism and on the propositional calculus, which were both part of the Stoic logical tradition. He developed an original [...] "temporally modalized" [...] syllogistic theory, involving <b>temporal</b> <b>logic</b> and modal logic. He also made use of inductive logic, such as the methods of agreement, difference, and concomitant variation which are critical to the scientific method. One of Avicenna's ideas had a particularly important influence on Western logicians such as William of Ockham: Avicenna's word for a meaning or notion (ma'na), was translated by the scholastic logicians as the Latin intentio; in medieval logic and epistemology, this is a sign in the mind that naturally represents a thing. This was crucial {{to the development of}} Ockham's conceptualism: A universal term (e.g., [...] "man") does not signify a thing existing in reality, but rather a sign in the mind (intentio in intellectu) which represents many things in reality; Ockham cites Avicenna's commentary on Metaphysics V in support of this view.|$|E
5000|$|A. N. Prior created modern <b>temporal</b> <b>logic,</b> {{closely related}} to modal logic, in 1957 by adding modal {{operators}} F and P meaning [...] "eventually" [...] and [...] "previously". Vaughan Pratt introduced dynamic logic in 1976. In 1977, Amir Pnueli proposed using <b>temporal</b> <b>logic</b> to formalise the behaviour of continually operating concurrent programs. Flavors of <b>temporal</b> <b>logic</b> include propositional dynamic logic (PDL), propositional linear <b>temporal</b> <b>logic</b> (PLTL), linear <b>temporal</b> <b>logic</b> (LTL), computational tree logic (CTL), Hennessy-Milner logic, and T.|$|E
40|$|The linear-hyper-branching {{spectrum}} of <b>temporal</b> <b>logics</b> Abstract: The family of <b>temporal</b> <b>logics</b> {{has recently been}} extended with logics for the specification of hyperproper-ties, such as noninterference or observational determin-ism. Hyperproperties relatemultiple computation paths of a system by requiring that they satisfy a certain relation-ship, such as an identical valuation of the low-security outputs. Unlike classic <b>temporal</b> <b>logics</b> like LTL or CTL*, which refer to one computation path at a time, <b>temporal</b> <b>logics</b> for hyperproperties like HyperLTL and HyperCTL* can express such relationships by explicitly quantifying over multiple computation paths simultaneously. In this paper, we study the extended {{spectrum of}} temporal log-ics by relating the new logics to the linear-branching spec-trum of process equivalences...|$|R
40|$|Abstract. We {{describe}} an automata-theoretic {{approach to the}} automated checking of truth and validity for <b>temporal</b> <b>logics.</b> The basic idea underlying {{this approach is that}} for any formula we can construct an alternating automaton that accepts precisely the models of the formula. For linear <b>temporal</b> <b>logics</b> the automaton runs on infinite words while for branching <b>temporal</b> <b>logics</b> the automaton runs on infinite trees. The simple combinatorial structures that emerge from the automata-theoretic approach decouple the logical and algorithmic components of truth and validity checking and yield clean and essentially optimal algorithms for both problems. ...|$|R
40|$|This paper {{studies the}} problem of model-checking of {{probabilistic}} automaton and probabilistic one-counter automata against probabilistic branching-time <b>temporal</b> <b>logics</b> (PCTL and PCTL$^*$). We show that it is undecidable for these problems. We first show, by reducing to emptiness problem of probabilistic automata, that the model-checking of probabilistic finite automata against branching-time <b>temporal</b> <b>logics</b> are undecidable. And then, for each probabilistic automata, by constructing a probabilistic one-counter automaton with the same behavior as questioned probabilistic automata the undecidability of model-checking problems against branching-time <b>temporal</b> <b>logics</b> are derived, herein. Comment: Comments are welcom...|$|R
50|$|With Amir Pnueli, he co-authored an {{unfinished}} trilogy of textbooks on <b>temporal</b> <b>logic</b> and verification of reactive systems: The <b>Temporal</b> <b>Logic</b> of Reactive and Concurrent Systems: Specification (Springer-Verlag, 1991), The <b>Temporal</b> <b>Logic</b> of Reactive and Concurrent Systems: Safety (Springer-Verlag, 1995) and The <b>Temporal</b> <b>Logic</b> of Reactive and Concurrent Systems: Progress (unpublished; first three chapters posted at http://theory.stanford.edu/~zm/tvors3.html).|$|E
50|$|In logic, linear <b>temporal</b> <b>logic</b> or linear-time <b>temporal</b> <b>logic</b> (LTL) is a modal <b>temporal</b> <b>logic</b> with {{modalities}} {{referring to}} time. In LTL, one can encode formulae {{about the future}} of paths, e.g., a condition will eventually be true, a condition will be true until another fact becomes true, etc. It is a fragment of the more complex CTL*, which additionally allows branching time and quantifiers. Subsequently LTL is sometimes called propositional <b>temporal</b> <b>logic,</b> abbreviated PTL.Linear <b>temporal</b> <b>logic</b> (LTL) is a fragment of S1S (monadic second-order logic of one successor).|$|E
50|$|<b>Temporal</b> <b>logic</b> {{of actions}} (TLA) is a logic {{developed}} by Leslie Lamport, which combines <b>temporal</b> <b>logic</b> with a logic of actions.It {{is used to}} describe behaviours of concurrent systems.|$|E
40|$|We {{describe}} an automata-theoretic {{approach to the}} automated checking of truth and validity for <b>temporal</b> <b>logics.</b> The basic idea underlying {{this approach is that}} for any formula we can construct an alternating automaton that accepts precisely the models of the formula. For linear <b>temporal</b> <b>logics</b> the automaton runs on infinite words while for branching <b>temporal</b> <b>logics</b> the automaton runs on infinite trees. The simple combinatorial structures that emerge from the automata-theoretic approach decouple the logical and algorithmic components of truth and validity checking and yield clean and essentially optimal algorithms for both problems...|$|R
40|$|Interval <b>temporal</b> <b>logics</b> {{provide a}} general {{framework}} for temporal representation and reasoning, where classical (point-based) linear <b>temporal</b> <b>logics</b> can be recovered as special cases. In this paper, we study {{the effects of}} the addition of an equivalence relation ∼ {{to one of the most}} representative interval <b>temporal</b> <b>logics,</b> namely, the logic ABBbar of Allen’s relations meets, begun by, and begins. We first prove that the satisfiability problem for the resulting logic ABBbarTilde remains decidable over finite linear orders, but it becomes nonprimitive recursive, while decidability is lost over N [...] We also show that decidability over N can be recovered by restricting to a suitable subset of models. Then, we show that ABBbarTilde s expressive enough to define omegaS-regular languages, thus establishing a promising connection between interval <b>temporal</b> <b>logics</b> and extended omega-regular languages...|$|R
40|$|Although data {{values are}} {{available}} in almost every computer system, reasoning about them is a challenging task due to the huge data size or even infinite data domains. <b>Temporal</b> <b>logics</b> are the well-known specification formalisms for reactive and concur-rent systems. Various extensions of <b>temporal</b> <b>logics</b> have been proposed to reason about data values, mostly in the last decade. Among them, one natural idea is to ex-tend <b>temporal</b> <b>logics</b> with variable quantifications ranging over an infinite data domain. Grumberg, Kupferman and Sheinvald initiated the research on this topic recently and obtained several interesting results. However, {{this is still a}} lack of systematic investiga-tions on the theoretical aspects of the variable extensions of <b>temporal</b> <b>logics.</b> Our goal in this paper is to fill this gap. Around this goal, we make the following choices: 1. We consider the variable extensions of two widely used <b>temporal</b> <b>logics,</b> Linear Tem-poral Logic (LTL) and Computation Tree Logic (CTL), and allow arbitrary nestings of variable quantifications with Boolean and temporal operators (the resulting logics are called respectively variable-LTL, in brief VLTL, and variable-CTL, in brief VCTL) ...|$|R
5000|$|In logic, <b>temporal</b> <b>logic</b> is {{any system}} {{of rules and}} {{symbolism}} for representing, and reasoning about, propositions qualified in terms of time. In a <b>temporal</b> <b>logic</b> we can then express statements like [...] "I am always hungry", [...] "I will eventually be hungry", or [...] "I will be hungry until I eat something". <b>Temporal</b> <b>logic</b> is sometimes also {{used to refer to}} tense logic, a particular modal logic-based system of <b>temporal</b> <b>logic</b> introduced by Arthur Prior in the late 1950s, and important results were obtained by Hans Kamp. Subsequently it has been developed further by computer scientists, notably Amir Pnueli, and logicians.|$|E
50|$|Temporal {{description}} logic represents—and allows reasoning about—time dependent {{concepts and}} many {{different approaches to}} this problem exist. For example, a description logic might be combined with a modal <b>temporal</b> <b>logic</b> such as Linear <b>temporal</b> <b>logic.</b>|$|E
5000|$|<b>Temporal</b> <b>logic</b> has {{two kinds}} of {{operators}}: logical operators and modal operators http://plato.stanford.edu/entries/logic-temporal/. Logical operators are usual truth-functional operators (...) [...] The modal operators used in Linear <b>Temporal</b> <b>Logic</b> and Computation Tree Logic are defined as follows.|$|E
40|$|<b>Temporal</b> <b>logics</b> are {{an obvious}} {{high-level}} descriptive companion formalism to dynamical systems which model behavior as deterministic evolution of state over time. A {{wide variety of}} distinct <b>temporal</b> <b>logics</b> applicable to dynamical systems exists, and each candidate has its own pragmatic justification. Here, a systematic approach {{to the construction of}} <b>temporal</b> <b>logics</b> for dynamical systems is proposed: Firstly, it is noted that dynamical systems can be seen as coalgebras in various ways. Secondly, a straightforward standard construction of modal logics out of coalgebras, namely Moss's coalgebraic logic, is applied. Lastly, the resulting systems are characterized with respect to the temporal properties they express...|$|R
40|$|<b>Temporal</b> <b>logics</b> of {{knowledge}} {{are useful for}} reasoning about situations where the knowledge of an agent or component is important, and where change in this knowledge may occur over time. Here we investigate the application of <b>temporal</b> <b>logics</b> {{of knowledge}} to the specification and verification of security protocols. We show how typical assumptions relating to authentication protocols can be specified. We consider verification methods for these logics, in particular, focusing on proofs using clausal resolution. Finally we present experiences from using a resolution based theorem prover applied to security protocols specified in <b>temporal</b> <b>logics</b> of knowledge...|$|R
40|$|We {{provide a}} conceptually simple and {{elementary}} {{proof of the}} exponential suc-cinctness {{gap between the two}} branching time <b>temporal</b> <b>logics</b> CTL+ and CTL. It only uses CTL’s small model property instead of automata- or game-theory and combinatorics as in previous proofs by Wilke and Adler/Immerman. Key words: specification languages, <b>temporal</b> <b>logics,</b> small model property...|$|R
50|$|Pnueli {{researched}} {{the use of}} <b>temporal</b> <b>logic</b> in specifying and reasoning about computer programs, introducing linear <b>temporal</b> <b>logic</b> in 1977. LTL became an important tool for analysis of concurrent programs, easily expressing properties such as mutual exclusion and freedom from deadlock.|$|E
5000|$|Modern <b>temporal</b> <b>logic</b> was {{developed}} by Arthur Prior in 1957, then called tense logic. Although Amir Pnueli {{was the first to}} seriously study the applications of <b>temporal</b> <b>logic</b> to computer science, Prior speculated on its use a decade earlier in 1967: ...|$|E
50|$|Various {{types of}} <b>temporal</b> <b>logic</b> {{can be used}} to help reason about {{concurrent}} systems. Some of these logics, such as linear <b>temporal</b> <b>logic</b> and computational tree logic, allow assertions to be made about the sequences of states that a concurrent system can pass through. Others, such as action computational tree logic, Hennessy-Milner logic, and Lamport's <b>temporal</b> <b>logic</b> of actions, build their assertions from sequences of actions (changes in state). The principal application of these logics is in writing specifications for concurrent systems.|$|E
40|$|This chapter {{considers}} {{theorem proving}} for discrete <b>temporal</b> <b>logics.</b> We {{are interested in}} deciding or at least enumerating the formulas of the logic which are valid, that is, are true in all circumstances. Most of the techniques for temporal theorem-proving have been extensions for methods developed for classical logics but completely novel techniques have also been developed. Initially we concentrate on discrete linear-time <b>temporal</b> <b>logics,</b> describing axiomatic, tableau, automata and resolution based approaches. The application of these approaches to other <b>temporal</b> <b>logics</b> is discussed. 1 Introduction Readers of this handbook will {{be aware of the}} wide variety of useful tasks which require reasoning about time. There are many applications of temporal reasoning tasks to problems of knowledge changing, to planning, to processing natural language, to managing the interchange of information, and to developing complex systems. There are a wide variety of <b>temporal</b> <b>logics</b> available in which s [...] ...|$|R
40|$|Interval <b>temporal</b> <b>logics</b> {{are quite}} {{expressive}} <b>temporal</b> <b>logics,</b> which {{turn out to}} be difficult to deal with in many respects. Even finite satisfiability of simple interval <b>temporal</b> <b>logics</b> presents non-trivial technical issues {{when it comes to the}} implementation of efficient tableaubased decision procedures. We focus our attention on the logic of Allen’s relation meets, a. k. a. Right Propositional Neighborhood Logic (RPNL), interpreted over finite linear orders. Starting from a high-level description of a tableau system, we developed a first working implementation of a decision procedure for RPNL, and we made it accessible from the web. We report and analyze the outcomes of some initial tests...|$|R
40|$|International audienceWe {{continue}} our {{study of the}} complexity of MSO-definable local <b>temporal</b> <b>logics</b> over concurrent systems that can be described by Mazurkiewicz traces. In previous papers, we showed that the satisfiability problem for any such logic is in PSPACE (provided the dependence alphabet is fixed) and remains in PSPACE for all classical local <b>temporal</b> <b>logics</b> even if the dependence alphabet is part of the input. In this paper, we consider the uniform satisfiability problem for arbitrary MSO-definable local <b>temporal</b> <b>logics.</b> For this problem, we prove multi-exponential lower and upper bounds that depend on the number of alternations of set quantifiers present in the chosen MSO-modalities...|$|R
