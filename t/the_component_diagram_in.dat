0|10000|Public
40|$|Software system {{architecture}} represented as shown <b>in</b> <b>the</b> <b>diagram</b> <b>components,</b> described <b>in</b> a unified modeling language UML. This architecture {{allows you to}} receive and process information, {{both internal and external}} systems. And it allows build and receive analytical reports in accordance with the requirements of Russian legislation...|$|R
5000|$|A simplex {{diagram of}} {{hierarchy}} 3 may describe {{a system with}} anywhere from four to eight <b>components.</b> <b>The</b> mobile <b>diagram</b> <b>in</b> (e) shows {{an example of a}} quadruple system with hierarchy 3, consisting of a single distant component orbiting a close binary system, with one of <b>the</b> <b>components</b> of <b>the</b> close binary being an even closer binary.|$|R
30|$|N[*]=[*]χN. Thus, we {{calculate}} the crossover {{curve of the}} disordered phase and an (unspecified) ordered phase {{in terms of the}} normalized Flory-Huggins parameter χN, the relative composition, and the number of teeth in the comb m. By systematically changing the volume fractions of A, B, and C blocks, we can construct <b>the</b> <b>component</b> triangle phase <b>diagrams</b> <b>in</b> <b>the</b> entire range of the copolymer composition.|$|R
40|$|International audienceLiquid-liquid {{extraction}} is {{a crucial}} process for recycling chemistry. In order to reuse and to avoid mining of rare earths, recycling has often to be performed by separating and purifying the rare earths from iron. This known technology relies on ion equilibria in coexisting phases located between binodal tie-lines in the Winsor II regime of a microemulsion with excess brine. Since the systems contain ten <b>components,</b> <b>the</b> phase <b>diagram</b> <b>in</b> seven dimensions must be projected in tetrahedron. The selectivity and differences of free energy of transfer can be determined with good reliability and with reasonable time: days instead of months needed by batch methods. Availability of data with variable composition allows to challenge the very few predictive models based on first principles and evaluating the free energy of transfer terms...|$|R
50|$|Structure {{diagrams}} {{emphasize the}} things that must {{be present in the}} system being modeled. Since structure diagrams represent the structure, they are used extensively in documenting the software architecture of software systems. For example, <b>the</b> <b>component</b> <b>diagram</b> describes how a software system is split up into <b>components</b> and shows <b>the</b> dependencies among these components.|$|R
40|$|In this paper, {{we propose}} a new UML 2. 0 profile to {{describe}} the change of software architectures. The profile introduces a set of stereotypes for modeling the structural and the dy-namic aspect as well as architectural constraints. We adapt <b>the</b> <b>component</b> <b>diagrams</b> metamodel on specific purposes by extending existing metaclasses. The adaptations are defined using stereotypes which are grouped in a profile. The pro-file offers to the architects an intuitive and complete way to specify the software architecture based on visual notations. Categories and Subject Descriptor...|$|R
5000|$|Development view: The {{development}} view {{illustrates a}} system from a programmer's perspective and {{is concerned with}} software management. This view {{is also known as}} the implementation view. It uses <b>the</b> UML <b>Component</b> <b>diagram</b> to describe system <b>components.</b> UML <b>Diagrams</b> used to represent the development view include the Package diagram.|$|R
40|$|In {{this paper}} we propose a generic {{simulation}} model, named XSM, with which researchers can construct standard platforms and evaluate their proposed concurrency control protocols for native XDBMSs. The system environment, the performance metrics, and the protocol rules of various types of XML protocols are all considered by the model. To facilitate the implementation of XSM, the state diagrams, <b>the</b> sequence <b>diagrams,</b> <b>the</b> <b>component</b> <b>diagram,</b> and <b>the</b> class diagram of XSM are depicted using UML 2. 0 notations. We also show a simulation platform constructed from XSM to fairly and comprehensively evaluate the performance of various XML protocols. (C) 2010 Elsevier B. V. All rights reserved...|$|R
50|$|The plantar fascia {{is made up}} of {{predominantly}} longitudinally oriented collagen fibers. There {{are three}} distinct structural components: <b>the</b> medial <b>component,</b> <b>the</b> central <b>component</b> (plantar aponeurosis), and <b>the</b> lateral <b>component</b> (see <b>diagram</b> at right). <b>The</b> central <b>component</b> is <b>the</b> largest and most prominent.|$|R
40|$|Since the {{introduction}} of component-based development (CBD), effective component identification technique {{is known to be}} an important factor for successful CBD projects. As in CORBA Component Model by OMG, a component consists of one or more related objects, carrying out a homogeneous functionality. Most of the CBD methodologies utilize UML as the basic notational convention. Especially <b>the</b> <b>component</b> <b>diagram</b> or its variation is used to depict components. However, current CBD methodologies largely lack of systematic component identification algorithm that can be effectively used to group related use-cases and classes into components. In this paper, we introduce component identification method that considers component coupling, cohesion, dependency, interface, granularity, and architecture. We also provide a case study on a large-scaled real CBD project, in which the proposed method was applied. 1...|$|R
40|$|Abstract- In this paper, {{we present}} a feature-driven {{approach}} for generating pervasive systems architectures. Our approach {{is based on the}} methodology for automatic generation of pervasive systems architectures from a predetermined architectural feature set. A set of pervasive systems architectural features relevant to such kinds of systems was researched, and a mapping between such features and relevant <b>component</b> <b>diagrams</b> was established. Based on the selection of features, an automatically generated architecture is constructed through the aggregation of various kinds of <b>components</b> relevant to <b>the</b> selected features. This effort is a first attempt towards the creation of a configurable reference architecture for pervasive systems, and the subsequent specification of a product line supporting the rapid development of such types of systems. Using the Feature Modeling Plug-in (FMP) with Eclipse and the Visual Paradigm for UML, we developed a program in C # that generates pervasive systems architectures. We used FMP with Eclipse in order to generate a feature model for pervasive systems under design. Visual Paradigm for UML was then used to map the different selected features to <b>component</b> <b>diagrams.</b> <b>The</b> <b>component</b> <b>diagrams</b> were then aggregated using known design patterns to generate the architecture in question. Key words: pervasive, architectural features, reference architecture, component-based architecture. 1...|$|R
5000|$|In the Unified Modeling Language (UML) all {{structure}} diagrams can {{be considered}} cluster diagrams. These structure diagrams emphasize what things {{must be in the}} system being modeled. UML encounters here <b>the</b> Class <b>diagram,</b> <b>Component</b> <b>diagram,</b> Composite structure diagram, Deployment diagram, Object diagram, and the Package diagram.|$|R
40|$|The {{software}} architecture plays essential {{role for the}} development of the complicated software systems and it is important to evaluate the {{software architecture}} efficiency. One way to evaluate the software architecture is to create an executable model from the architecture. Unified Modeling Language (UML) diagrams are used to describe the software architecture. UML has made it easy to use and to evaluate the necessary requirements at the software architecture level. It creates an executable model from these diagrams; yet, since the UML is a standard semi-formal language for describing the software architecture, evaluating the software architecture is not directly possible through it. Furthermore, in order to evaluate the software architecture, one needs to turn the actual model into the formal model. In this study, first we describe the architecture using the UML. Then, some properties of the software architecture are mentioned using the UML sequence diagram, deployment diagram, use case <b>diagram,</b> and <b>component</b> <b>diagram.</b> <b>The</b> necessary information associated with the qualitative characteristic of efficiency will be margined as clichés and labels to these diagrams. The independent and dependent components will be extracted from <b>the</b> <b>component</b> <b>diagram.</b> Finally, <b>the</b> resulted semi-formal model will be mapped into a formal model based on the colored Petri net and finally the evaluation will take place...|$|R
40|$|The {{increased}} number of <b>diagram</b> based questions <b>in</b> higher education has recently attracted researchers to look into marking diagrams automatically. Student diagrammatic solutions are naturally very dissimilar to each others. However, {{it has been observed}} {{that there are a number}} of identical <b>diagram</b> <b>components.</b> This observation forms the basis of our semi–automatic assessment. Identifying identical <b>diagram</b> <b>components</b> <b>in</b> student <b>diagrams</b> needs contextual information about each component. This paper proposes a diagram tool which obtains the contextual information of each component in a conceptual database diagram...|$|R
40|$|This is {{a conference}} paper. The {{increased}} number of <b>diagram</b> based questions <b>in</b> higher education has recently attracted researchers to look into marking diagrams automatically. Student diagrammatic solutions are naturally very dissimilar to each others. However, {{it has been observed}} {{that there are a number}} of identical <b>diagram</b> <b>components.</b> This observation forms the basis of our semi–automatic assessment. Identifying identical <b>diagram</b> <b>components</b> <b>in</b> student <b>diagrams</b> needs contextual information about each component. This paper proposes a diagram tool which obtains the contextual information of each component in a conceptual database diagram...|$|R
40|$|XML {{has emerged}} as a {{standard}} for data exchange over the internet. Relational databases provides a mature technology to store these documents. In this paper we transform ER diagram of relational databases in to DTD of XML documents. We provide an algorithm that translates ER <b>diagram</b> with cycles <b>in</b> to recursive DTDs. This algorithim translates each <b>component</b> of ER <b>diagram</b> <b>in</b> to <b>components</b> of DTDs along with cycles <b>in</b> ER <b>diagram</b> to generate recursive DTD’...|$|R
40|$|The use of {{distributed}} systems is growing more and more, given the advantages that they present, particularly the powerful computational capabilities that they provide. However, one challenge of distributed computing is ensuring that once <b>the</b> different system <b>components</b> are collaborating, their combined behavior {{will result in}} the behavior that was originally intended for the global system, without coordination conflicts. This thesis deals with automating the process of deriving <b>the</b> <b>components</b> behaviors of {{distributed systems}}, starting from the description of that global system, defined as a UML Activity <b>Diagram.</b> <b>The</b> derived <b>component</b> specifications are produced as Activity Diagrams, and provided to the user in a graphical form. <b>The</b> generated <b>components</b> <b>diagrams</b> include <b>the</b> exchange of the necessary coordination messages. We also explain through many test cases the importance and purpose of these coordination messages. Besides, tests were conducted to verify that <b>the</b> obtained <b>components</b> designs correspond to the intended results. Content...|$|R
40|$|During the few last years, several {{approaches}} have been pro-posed to model {{different aspects of}} a Data Warehouse (DW), such as the conceptual model of the DW, {{the design of the}} ETL (Extraction, Transformation, Loading) processes, the derivation of the DW models from the enterprise data mod-els, etc. At the end, a DW has to be deployed to a database environment and that takes many decisions of a physical nature. However, few efforts have been dedicated to the modeling of the physical design (i. e. the physical structures that will host data together with their corresponding imple-mentations) of a DW from the early stages of a DW project. From our previously presented DW engineering process, in this paper we present our proposal for the modeling of the physical design of DWs by using <b>the</b> <b>component</b> <b>diagrams</b> and deployment diagrams of the Unified Modeling Language (UML). Our approach allows the designer to anticipate im-portant physical design decisions that may reduce the overall development time of a DW such as replicating dimension ta-bles, vertical and horizontal partitioning of a fact table, the use of particular servers for certain ETL processes and so on. Moreover, our approach allows the designer to cover all main design phases of DWs, from the conceptual modeling phase until the final implementation, as we show with an example in this paper...|$|R
40|$|In {{preparation}} for the commissioning and operations of SPEAR 3 we developed a number of high-level accelerator control applications. We also developed a test platform that simulates the physics of a storage ring. To any application using EPICS Channel Access protocol it appears as a real storage ring: measurable parameters such as orbits and tunes change {{in response to the}} changes in the accelerator hardware setpoints. BACKGROUND SPEAR 3 synchrotron light source will be commissioned soon at SSRL. New EPICS control system software will make most of the existing high-level applications obsolete. It is challenging to commission a new facility with this many new software applications most of which were never tested on a real machine. Many simple applications such as operator menus, panels, live data and history displays present less of a challenge because they are built using standard EPICS toolkit components and they can be tested against dummy CA servers. Accelerator physics applications that implement measurement functions or control algorithms are inherently more complex and require realistic behavior of the simulated variables in order for the tests to be meaningful. COMPONENTS We developed a platform for testing such accelerator physics applications, the Model Server. Figure 1 shows <b>the</b> <b>component</b> <b>diagram</b> of <b>the</b> Model Server. Portable channel access server A Basic EPICS portable channel access server (PCAS) [1] serves Process Variables (PV's) commonly used by accelerator physics applications...|$|R
40|$|The {{theoretical}} and experimental investigations have been performed. The modern mathematical apparatus {{has been developed}} at {{the creation of the}} economico-mathematical models of the units of the different classes, kinds and types. Created and realized have been the optimization methods of design of the parameters and structure, the new constructions of the units. The new system of indexation has been developed, the new method of design of the optimum capacity of the DZ- 87 scraper bucket with the ball saddle-couple device has been realized. <b>The</b> new <b>component</b> <b>diagrams</b> of <b>the</b> units, increasing the capacity in the individual cases to 180 % and reducing the specific reduced expenditures by 17 to 20 %, have been created. Available from VNTIC / VNTIC - Scientific & Technical Information Centre of RussiaSIGLERURussian Federatio...|$|R
40|$|The corner {{stone of}} a {{language}} development environment is an editor. For programming languages, several code editors are readily available to be integrated in Web applications. However, only few editors exist for diagrammatic languages. Eshu is an extensible <b>diagram</b> editor, embeddable <b>in</b> Web applications that require diagram interaction, such as modeling tools or e-learning environments. Eshu is a JavaScript library with an API that supports its integration with other <b>components,</b> including importing/exporting <b>diagrams</b> <b>in</b> JSON. Eshu was already integrated in a pedagogical environment with automated diagram assessment, configured for extended entity-relationship diagrams, that served as basis for an usability evaluation...|$|R
40|$|The {{system of}} three {{differential}} equations describing the stochastic condensation process under quasi-equilibrium conditions is constructed {{taking into account}} the additive and multiplicative <b>components.</b> <b>The</b> phase <b>diagram</b> of the system states was constructed and analyzed. The domains of the existence of the condensation processes, disassembly of previously deposited material, and the complete evaporation were determined. The distribution density of the concentration of adsorbed atoms was defined...|$|R
50|$|When using a <b>component</b> <b>diagram</b> to show <b>the</b> {{internal}} {{structure of a}} <b>component,</b> <b>the</b> provided and required interfaces of <b>the</b> encompassing <b>component</b> can delegate to the corresponding interfaces of <b>the</b> contained <b>components.</b>|$|R
40|$|UML class {{diagrams}} {{of complex}} software systems are frequently very large, {{making it difficult}} to gain a detailed understanding of <b>the</b> underlying software <b>components</b> within <b>the</b> context of the overall software system. To overcome this limitation, we apply focus + context visualization techniques to an interactive UML browser. We display software components at varying levels of detail according to a dynamic degree of interest function. We then lay out <b>the</b> <b>diagram</b> <b>components</b> to maximize space efficiency while emphasizing <b>the</b> relationships between <b>components.</b> Preliminary results of our work are presented here...|$|R
50|$|The example above {{illustrates}} what {{a typical}} insurance policy administration system might look like. Each of <b>the</b> <b>components</b> depicted <b>in</b> <b>the</b> above <b>diagram</b> may have other <b>component</b> <b>diagrams</b> illustrating its internal structure.|$|R
40|$|Abstract. Diagrams {{that serve}} as a visual input {{facility}} for programming environments have to be translated {{into some kind of}} semantic description. This paper describes such a method which is based on a specification of the translation process. The translation process starts with a diagram, which is simply represented as a collection of atomic <b>diagram</b> <b>components,</b> and it ends up with some data structure as a semantic representation of the diagram. The specification of the translation process mainly consists of two parts: the specification of spatial relationships between atomic <b>diagram</b> <b>components</b> <b>in</b> terms of their numeric parameters (e. g., position, size), and an attributed hypergraph grammar that describes the concrete diagram syntax as well as the rules for generating the semantic representation. ...|$|R
40|$|The oaks (Quereus spp.) on slate, {{limestone}} and peat {{sites in}} Roudsea Wood, North Lancashire, {{were subjected to}} a taxonomic analysis using both the Hybrid Index and Pictorial Scatter Diagram methods. Both methods showed that Quereus petraea (Mattuschka) Liebl. predominates on the slate site, while the oaks on both the limestone and peat sites are very mixed, with a well-developed Q. robur L. <b>component.</b> <b>The</b> Hybrid Index method over-estimated the morphological intermediacy of the trees, while the Pictorial Scatter Diagram method under-estimated <b>the</b> Q. robur <b>component.</b> <b>The</b> scatter <b>diagrams</b> suggested that hybridization and introgression had occurred between Q. petraea and Q. rabur...|$|R
40|$|Many invariants of knots {{rely upon}} {{smoothing}} the knot at its crossings. To compute them, {{it is necessary}} to know how to count the number of connected <b>components</b> <b>the</b> knot <b>diagram</b> is broken into after the smoothing. In this paper, it is shown how to use a modification of a theorem of Zulli together with a modification of the spectral theory of graphs to approach such problems systematically. We give an application to counting subdiagrams of pretzel knots which have one component after oriented and unoriented smoothings...|$|R
40|$|An {{electronic}} {{preference testing}} apparatus is described for measuring taste preference of rodents {{and other small}} animals with solid or liquid foods. The apparatus is designed {{on the principle of}} the two-choice, preference technique. It operates photoelectrically with a sequence of presentations so that whenever a subject eats from a compartmentalized food tray, a standard and a test food are each briefly sampled alone before both foods are presented together (in alternate positions) for preference determination. Preferences are automatically recorded on digital counters. The apparatus is built in two modules (a preference tester and the master control) connected by multiconductor cable. The modular design provides portability and isolation of the animals from <b>the</b> major noise-producing <b>components.</b> <b>Diagrams</b> of <b>the</b> apparatus are given, and test results from a trial that evaluated positional bias and a sucrose-concentration preference experiment are presented to demonstrate its application in research...|$|R
40|$|In {{the course}} of {{building}} Wren, a component-based development environment, we encountered several difficulties {{when we tried to}} use UML <b>component</b> <b>diagrams</b> for modeling software architectures. One, the semantic interpretation of interfaces and dependencies is not clear in all cases. Two, <b>component</b> <b>diagrams</b> lack <b>the</b> expressive power to model unmet requirements. Keywords Component-based software engineering, <b>component</b> <b>diagrams,</b> design methods, software architecture, UML. ...|$|R
40|$|Portable Document Format (PDF) is a page-oriented, {{graphically}} rich format {{based on}} PostScript semantics {{and it is}} also the format interpreted by the Adobe Acrobat viewers. Although each of the pages in a PDF document is an independent graphic object this property does not necessarily extend to <b>the</b> <b>components</b> (headings, <b>diagrams,</b> paragraphs etc.) within a page. This, in turn, makes the manipulation and extraction of graphic objects on a PDF page into a very difficult and uncertain process. The work described here investigates the advantages of a model wherein PDF pages are created from assemblies of COGs (Component Object Graphics) each with a clearly defined graphic state. The relative positioning of COGs on a PDF page is determined by appropriate "spacer" objects and a traversal of the tree of COGs and spacers determines the rendering order. The enhanced revisability of PDF documents within the COG model is discussed, together with the application of the model in those contexts which require easy revisability coupled with the ability to maintain and amend PDF document structure...|$|R
40|$|Background: This project’s {{idea arose}} derived {{of the need}} of the professors of the {{department}} “Computer Languages and Systems and Software Engineering (DLSIIS) ” to develop exams with multiple choice questions in a more productive and comfortable way than the one they are currently using. The goal of this project is to develop an application {{that can be easily}} used by the professors of the DLSIIS when they need to create a new exam. The main problems of the previous creation process were the difficulty in searching for a question that meets some specific conditions in the previous exam files; and the difficulty for editing exams because of the format of the employed text files. Result: The results shown in this document allow the reader to understand how the final application works and how it addresses successfully every customer need. The elements that will help the reader to understand the application are the structure of the application, the design of <b>the</b> different <b>components,</b> <b>diagrams</b> that show <b>the</b> workflow of the application and some selected fragments of code. Conclusions: The goals stated in the application requirements are finally met. In addition, there are some thoughts about the work performed during the development of the application and how it improved the author skills in web development...|$|R
40|$|Computer {{programs}} have to "understand" diagrams if diagrams {{are going to}} be used for communications with or through the computer, i. e., the computer has to be supplied with a method that translates a diagram into an abstract internal representation for further processing. This paper describes such a method that is based on a specification of the translation process. The translation process starts with a diagram, which is simply represented as a collection of atomic <b>diagram</b> <b>components,</b> and it ends up with a hypergraph as a semantic or abstract syntax representation of the diagram. The specification of the translation process mainly consists of two parts: the specification of spatial relationships between atomic <b>diagram</b> <b>components</b> <b>in</b> terms of their numeric parameters (e. g., position, size), and a translation grammar that describes the concrete diagram syntax as well as the rules for generating the semantic or abstract syntax representation. 1. Introduction Diagram languages are formal [...] ...|$|R
40|$|Diagrams {{that serve}} as a visual input {{facility}} for programming environments have to be translated {{into some kind of}} semantic description. This paper describes such a method which is based on a specification of the translation process. The translation process starts with a diagram, which is simply represented as a collection of atomic <b>diagram</b> <b>components,</b> and it ends up with some data structure as a semantic representation of the diagram. The specification of the translation process mainly consists of two parts: the specification of spatial relationships between atomic <b>diagram</b> <b>components</b> <b>in</b> terms of their numeric parameters (e. g., position, size), and an attributed hypergraph grammar that describes the concrete diagram syntax as well as the rules for generating the semantic representation. 1 Introduction In Proc. of the Int'l Workshop on Applications of Graph Transformation with Industrial Relevance (AGTIVE' 99) at Monastery Rolduc, NL, September 1 - 3, 1999. Appears in LNCS, [...] ...|$|R
40|$|AbstractIn {{this paper}} a two-state, two-component, Ising-type model {{is used to}} {{simulate}} the lateral distribution of <b>the</b> <b>components</b> and gel/fluid state acyl chains in dimyristoylphosphatidylcholine/distearoylphosphatidylcholine (DMPC/DSPC) lipid bilayers. The same model {{has been successful in}} calculating the excess heat capacity curves, the fluorescence recovery after photobleaching (FRAP) threshold temperatures, the most frequent center-to-center distances between DSPC clusters, and the fractal dimensions of gel clusters (Sugar, I. P., T. E. Thompson, and R. L. Biltonen, 1999. Biophys. J. 76 : 2099 – 2110). Depending on the temperature and mole fraction the population of the cluster size is either homogeneous or inhomogeneous. In the inhomogeneous population the size of the largest cluster scales with the size of the system, {{while the rest of the}} clusters remain small with increasing system size. In a homogeneous population, however, every cluster remains small with increasing system size. For both compositional and fluid/gel state clusters, threshold temperatures—the so-called percolation threshold temperatures—are determined where change in the type of the population takes place. At a given mole fraction, the number of percolation threshold temperatures can be 0, 1, 2, or 3. By plotting these percolation threshold temperatures on the temperature/mole fraction plane, <b>the</b> <b>diagrams</b> of <b>component</b> and state separation of DMPC/DSPC bilayers are constructed. In agreement with the small-angle neutron scattering measurements, <b>the</b> <b>component</b> separation <b>diagram</b> shows nonrandom lateral distribution of <b>the</b> <b>components</b> not only in the gel-fluid mixed phase region, but also in the pure gel and pure fluid regions. A combined <b>diagram</b> of <b>component</b> and state separation is constructed to characterize the lateral distribution of lipid components and gel/fluid state acyl chains in DMPC/DSPC mixtures. While theoretical phase <b>diagrams</b> of two <b>component</b> mixtures can be constructed only in the case of first-order transitions, state and <b>component</b> separation <b>diagrams</b> can be constructed whether or not the system is involved in first-order transition. The effects of interchain interactions on <b>the</b> <b>component</b> and state separation diagrams are demonstrated on three different models. The influences of state and <b>component</b> separation on <b>the</b> in-plane and off-plane membrane reactions are discussed...|$|R
40|$|Recently a new {{metaphor for}} diagramming, the {{intelligent}} diagram has emerged. This new metaphor {{provides an excellent}} basis for diagram beautification since it automatically collects geometric constraints which capture the semantics of a diagram during diagram construction. By applying visual-language-specific layout rules which impose additional desired constraints on <b>the</b> <b>diagram</b> <b>component</b> placement, we can provide powerful semantics preserving diagram beautification. We have demonstrated the feasibility of this approach by developing a simple extension to the Penguins system which generates beautification rules from a grammatical specification of the visual language and tested the system with three example visual languages: Binary trees, state transition diagrams and mathematical equations...|$|R
