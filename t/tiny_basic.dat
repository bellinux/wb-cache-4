47|8|Public
5|$|Byte {{magazine}} {{published an}} assembly language version of Spacewar in 1977 that {{ran on the}} Altair 8800 and other Intel 8080-based microcomputers using an oscilloscope as the graphical display and a lookup table for orbits, {{as well as a}} three-dimensional variant in 1979 written in <b>Tiny</b> <b>BASIC.</b> More modern recreations of the game for computers have been made as well. An emulated version of the original game, based on the original source code made publicly available by Martin Graetz and running in a JavaScript PDP-1 emulator, was made available to play on the internet in 2012. The only working PDP-1s that are known to exist are kept in the Computer History Museum in Mountain View, California, where demonstrations of the machine are held, which include playing Spacewar.|$|E
2500|$|Jim Warren, {{the editor}} of Dr. Dobbs Journal, {{describes}} how the <b>Tiny</b> <b>BASIC</b> project is an alternative to hobbyist [...] "ripping off" [...] software.|$|E
2500|$|Jim Warren, Homebrew Computer Club Member {{and editor}} of Dr. Dobb's Journal, wrote in the July 1976 ACM Programming Language {{newsletter}} about the successful <b>Tiny</b> <b>BASIC</b> project. The goal was to create BASIC language interpreters for microprocessor based computers. The project had started in late 1975 but the [...] "Open Letter" [...] motivated many hobbyists to participate. Computer clubs and individuals {{from all parts of}} the United States and the world soon created <b>Tiny</b> <b>BASIC</b> interpreters for the Intel 8080, the Motorola 6800 and MOS Technology 6502 processors. The assembly language source code was published or the software was sold for five or ten dollars.|$|E
25|$|SVG <b>Tiny</b> and SVG <b>Basic</b> (the Mobile SVG Profiles) became W3C Recommendations on 14 January 2003. These are {{described}} as profiles of SVG 1.1.|$|R
25|$|The SVG {{specification}} was updated to version 1.1 in 2011. There are two 'Mobile SVG Profiles,' SVG <b>Tiny</b> and SVG <b>Basic,</b> {{meant for}} mobile devices with reduced computational and display capabilities. Scalable Vector Graphics 2 became a W3C Candidate Recommendation on 15 September 2016. SVG 2 incorporates several new features {{in addition to}} those of SVG 1.1 and SVG Tiny 1.2.|$|R
5000|$|Early {{articles}} in Byte were do-it-yourself electronic or software projects to improve small computers. A continuing feature was Ciarcia's Circuit Cellar, {{a column in}} which electronic engineer Steve Ciarcia described small projects to modify or attach to a computer (later spun off to become the magazine Circuit Cellar, focusing on embedded computer applications). Significant {{articles in}} this period included the [...] "Kansas City" [...] standard for data storage on audio tape, insertion of disk drives into S-100 computers, publication of source code for various computer languages (<b>Tiny</b> C, <b>BASIC,</b> assemblers), and coverage of the first microcomputer operating system, CP/M. Byte ran Microsoft's first advertisement, as [...] "Micro-Soft", to sell a BASIC interpreter for 8080-based computers.|$|R
50|$|For some implementations, {{including}} the first <b>Tiny</b> <b>BASIC</b> and Tom Pittman's <b>Tiny</b> <b>BASIC,</b> a virtual machine was used, others such as Palo Alto <b>Tiny</b> <b>BASIC</b> and 6800 <b>Tiny</b> <b>BASIC,</b> were direct interpreters. In a virtual machine implementation, the <b>Tiny</b> <b>BASIC</b> interpreter is itself run on an virtual machine interpreter. The designer's idea to use an application virtual machine goes back to Val Schorre (with META II, 1964) and Glennie (Syntax Machine).|$|E
5000|$|Allison {{published}} {{his work in}} the People's Computer Company newsletter in 1975. The <b>Tiny</b> <b>BASIC</b> contents of the newsletter soon became Dr. Dobb's Journal of <b>Tiny</b> <b>BASIC</b> with a subtitle of [...] "Calisthenics & Orthodontia, Running Light Without Overbyte." [...] By the middle of 1976, <b>Tiny</b> <b>BASIC</b> interpreters were available for the Intel 8080, the Motorola 6800 and MOS Technology 6502 processors. This was a forerunner of the free software community's collaborative development before the internet allowed easy transfer of files, and was an example of a free software project before the free software movement.|$|E
50|$|TBIL is an {{abbreviation}} for <b>Tiny</b> <b>BASIC</b> Interpreter Language.|$|E
5000|$|The {{result was}} a <b>tiny,</b> very <b>basic</b> {{automobile}} two years in planning and development. The three-wheeled Shelter was almost entirely built by hand from sheet steel shaped as necessary. About the only parts not handmade were the speedometer, the Bing carburetor, the Bosch [...] "Dynastart" [...] ignition system, the tires, the windshield and the headlight surrounds, the latter of which were produced by a local cookware manufacturer. The upright, boxy front end was adorned by a vestigial front bumper and [...] "SHELTER" [...] badging while the rear with its single drive wheel was wrapped in curved sheet steel which, {{in the words of}} author Adrienne Kessel, gave the car an almost [...] "Dalek-like appearance." [...] A unique homemade hydroforming process designed by van der Goot was used to form the roof. Water was forced between the halves of a concrete mold, thereby shaping the roof. Van der Goot even built the 228 cc, 6 kW (8 hp) single-cylinder, two-stroke engine by hand, creating its connecting rod out of curved, spot-welded gas pipe. Its light weight and modular design were such that both the engine and its rudimentary three-speed transmission with centrifugal clutch could be swapped out in about five minutes with minimal manpower.|$|R
40|$|This paper {{presents}} TypingRing, a wearable ring {{platform that}} enables text input into computers of different forms, such as PCs, smartphones, tablets, or even wearables with <b>tiny</b> screens. The <b>basic</b> idea of TypingRing {{is to have}} a user wear a ring on his middle finger and let him type on a sur-face – such as a table, a wall, or his lap. The user types as if a standard QWERTY keyboard is lying underneath his hand but is invisible to him. By using the embedded sensors Typ-ingRing determines what key is pressed by the user. Further, the platform provides visual feedback to the user and com-municates with the computing device wirelessly. This pa-per describes the hardware and software prototype of Typin-gRing and provides an in-depth evaluation of the platform. Our evaluation shows that TypingRing is capable of detect-ing and sending key events in real-time with an average ac-curacy of 98. 67 %. In a field study, we let seven users type a paragraph with the ring, and we find that TypingRing yields a reasonable typing speed (e. g., 33 − 50 keys per minute) and their typing speed improves over time...|$|R
40|$|GIS {{applications}} to mobile devices {{are becoming increasingly}} popular, utilizing a diverse range of devices. Many of these devices suffer from serious constrains in three main areas: processor speed, memory space and screen size. This paper presents a new mobile GIS application, based on Mobile SVG (a subset of Scalable Vector Graphics), TinyLineSVG (www. tinyline. com), which is intended for heavily resource constrained hand held devices. This application is a tourism-oriented map application of the Shenzhen territory for mobile phone. This application adopts Mobile SVG (SVG <b>Tiny</b> and SVG <b>Basic)</b> as carrier of map and data, TinyLineSVG as display tool and also SVG parser. Mobile SVG is a subset of SVG. Mobile SVG is suitable for highly restricted mobile devices. Mobile SVG profiles introduce constraints on content, such as attribute types, properties, and user agent behavior, because of the low memory, low CPU power and limited display of mobile devices. TinyLineSVG is a J 2 ME class library for high-performance graphics. TinyLineSVG is J 2 ME SDK intended to expand the graphics capabilities of J 2 ME on mobile devices. The SDK supports the 2 D imaging model. TinyLineSVG parses SVG files and gets data of map then displays the SVG file as a map. This application was designed to perform satisfactorily on devices (mobile phones) with low processor speed, and small memory for the GIS application and GIS data. Memory requirements are kept low by using Mobile SVG The main challenge of satisfactory map drawing speed is addressed through TinyLineSVG that was developed for this application. The paper describes the application's data format-Mobile SVG presents the map drawing tool, and points out the areas for future development. GIS {{applications to}} mobile devices are becoming increasingly popular, utilizing a diverse range of devices. Many of these devices suffer from serious constrains in three main areas: processor speed, memory space and screen size. This paper presents a new mobile GIS application, based on Mobile SVG (a subset of Scalable Vector Graphics), TinyLineSVG (www. tinyline. com), which is intended for heavily resource constrained hand held devices. This application is a tourism-oriented map application of the Shenzhen territory for mobile phone. This application adopts Mobile SVG (SVG <b>Tiny</b> and SVG <b>Basic)</b> as carrier of map and data, TinyLineSVG as display tool and also SVG parser. Mobile SVG is a subset of SVG. Mobile SVG is suitable for highly restricted mobile devices. Mobile SVG profiles introduce constraints on content, such as attribute types, properties, and user agent behavior, because of the low memory, low CPU power and limited display of mobile devices. TinyLineSVG is a J 2 ME class library for high-performance graphics. TinyLineSVG is J 2 ME SDK intended to expand the graphics capabilities of J 2 ME on mobile devices. The SDK supports the 2 D imaging model. TinyLineSVG parses SVG files and gets data of map then displays the SVG file as a map. This application was designed to perform satisfactorily on devices (mobile phones) with low processor speed, and small memory for the GIS application and GIS data. Memory requirements are kept low by using Mobile SVG The main challenge of satisfactory map drawing speed is addressed through TinyLineSVG that was developed for this application. The paper describes the application's data format-Mobile SVG presents the map drawing tool, and points out the areas for future development...|$|R
50|$|PCC {{was one of}} {{the first}} {{organizations}} to recognize the potential of <b>Tiny</b> <b>BASIC</b> in the nascent field of personal computing when it published that language's design specification in their newsletter. This ultimately led to the design of an interpreter that was published in a publication, which they named Dr. Dobb's Journal of <b>Tiny</b> <b>BASIC</b> Calisthenics and Orthodontia, dedicated to <b>Tiny</b> <b>BASIC.</b> The newsletter's title was changed to Dr. Dobb's Journal of Computer Calisthenics & Orthodontia for the second issue; the popular reaction to it eventually led to the long-running computer magazine Dr. Dobb's Journal (DDJ) which continued publication until 2009.|$|E
50|$|<b>Tiny</b> <b>BASIC</b> is a dialect of the BASIC {{programming}} language that can fit into {{as little as}} 2 or 3 KB of memory. This small size made it invaluable {{in the early days}} of s (the mid-1970s), when typical memory size was only 4 - 8 KB. The prevalence of BASIC on the first generation of home computers is an outcome of <b>Tiny</b> <b>BASIC.</b>|$|E
50|$|In some {{implementations}} of <b>Tiny</b> <b>BASIC,</b> {{entering a}} command that divides any number by zero will return 65535.|$|E
50|$|Palo Alto <b>Tiny</b> <b>BASIC</b> was {{the fourth}} version of <b>Tiny</b> <b>BASIC</b> that {{appeared}} in Dr. Dobb's Journal of Computer Calisthenics & Orthodontia, but probably the most influential. It appeared in the May 1976 Vol 1, No. 5 issue, and distinguished itself from other versions of <b>Tiny</b> <b>BASIC</b> through a novel means of abbreviating commands to save memory, and the inclusion of an array variable ("@"). The interpreter occupied 1.77 kilobytes of memory and assumed {{the use of a}} Teletype Machine (TTY) for user input/output. An erratum to the original article appeared in the June/July issue of Dr. Dobb's (Vol. 1, No 6.) This article also included information on adding additional I/O devices, using code for the VDM video display by Processor Technology as an example.|$|E
5000|$|The May 1976 {{issue of}} Dr. Dobbs Journal had Li-Chen Wang's Palo Alto <b>Tiny</b> <b>BASIC</b> for the Intel 8080 microprocessor. The listing {{began with the}} usual title, author's name and date but it also had [...] "@COPYLEFT ALL WRONGS RESERVED". A fellow Homebrew Computer Club member, Roger Rauskolb, {{modified}} and improved Li-Chen Wang's program and this {{was published in the}} December 1976 issue of Interface Age magazine. Roger added his name and preserved the COPYLEFT Notice. Other versions of <b>Tiny</b> <b>BASIC</b> existed, such as the one written by Thomas F. Waitman in 1976 for the Hewlett-Packard HP-2640 and HP-2645 terminals (which used the Intel 8008 and 8080 processors where the 8080 ran the <b>Tiny</b> <b>BASIC</b> interpreter). Thomas F. Waitman wrote articles for the Hewlett-Packard Journal.|$|E
50|$|Dr. Wang {{also wrote}} a STARTREK program in his <b>Tiny</b> <b>BASIC</b> that {{appeared}} in the July, 1976 issue of the People's Computer Company newsletter.|$|E
5000|$|Jim Warren, {{the editor}} of Dr. Dobbs Journal, {{describes}} how the <b>Tiny</b> <b>BASIC</b> project is an alternative to hobbyist [...] "ripping off" [...] software.|$|E
5000|$|Via the counterculture, by the mid-1970s, {{the concept}} had {{influenced}} {{a generation of}} Discordians including the nascent hacker culture. The project to create <b>Tiny</b> <b>BASIC</b> was proposed in Bob Albrecht and Dennis Allison's Dr. Dobb's Journal of <b>Tiny</b> <b>BASIC</b> Calisthenics & Orthodontia, a journal of the Homebrew Computer Club, {{a small group of}} computer hobbyists who began meeting in 1975 around Silicon Valley. The first lines of the source code for <b>Tiny</b> <b>Basic</b> as released in 1976 by Li-Chen Wang stated ‘(ↄ) COPYLEFT ALL WRONGS RESERVED’. In 1984/5 programmer Don Hopkins sent Richard Stallman a letter labeled [...] "Copyleft—all rights reversed". Stallman chose the phrase to identify his free software method of distribution. The relationship between Discordianism and [...] "Kopyleft" [...] remain part of the culture of Discordianism, as explained by the Discordian Rev. Dr. Jon Swabey in his Apocrypha Discordia.|$|E
50|$|The board {{featured}} 3 spare 2K ROM sockets {{that allowed}} for the addition of additional firmware. Popular additions were <b>Tiny</b> <b>BASIC,</b> FORTH, and enhanced versions of PFM.|$|E
50|$|The journal was {{originally}} {{intended to be a}} three-issue xerographed publication. Titled dr. dobb's journal of <b>Tiny</b> <b>BASIC</b> Calisthenics & Orthodontia (with the subtitle Running Light Without Overbyte) it was created to distribute the implementations of <b>Tiny</b> <b>BASIC.</b> The original title was created by Eric Bakalinsky, who did occasional paste-up work for PCC. Dobb's was a contraction of Dennis and Bob. It was at a time when memory was very expensive, so compact coding was important. Microcomputer hobbyists needed to avoid using too many bytes of memory—avoiding overbyte.|$|E
50|$|An {{expansion}} board, OSCOM, {{later became}} available, and included an alphanumeric video display, {{and up to}} 12 kB of memory. A 4 kB <b>Tiny</b> <b>BASIC</b> could be run on this configuration.|$|E
50|$|The {{implementations}} of <b>Tiny</b> <b>Basic</b> {{published in}} Dr. Dobb's Journal in 1975 and onwards were {{another example of}} software being released as free software and being developed collaboratively without any organised push.|$|E
5000|$|Where 8008 BASIC {{required}} 16 kilobytes {{of memory}} and licensed a floating-point package from Datapoint, Allison's proposed design only used integer arithmetic and did not support arrays. The goal was for the program to fit in 2 to 3 kilobytes of memory. The <b>Tiny</b> <b>BASIC</b> contents of the newsletter soon became Dr. Dobb's Journal of <b>Tiny</b> <b>BASIC</b> with a subtitle of [...] "Calisthenics & Orthodontia, Running Light Without Overbyte." [...] Hobbyists began writing BASIC language interpreters for their microprocessor-based home computers and sending the source code to Dr. Dobb's Journal and other magazines to be published. Dick Whipple and John Arnold wrote an interpreter that required only 3K of RAM. By the middle of 1976, <b>Tiny</b> <b>BASIC</b> interpreters were available for the Intel 8080, the Motorola 6800 and MOS Technology 6502 processors. This was a forerunner of the free software community's collaborative development before the internet allowed easy transfer of files, and {{was an example of}} a free software project before the free software movement. Computer hobbyists would exchange paper tapes, cassettes or even retype the files from the printed listings.|$|E
50|$|<b>Tiny</b> <b>BASIC</b> was {{published}} as a type-in program in Dr. Dobb's Journal in 1975, and developed collaboratively (in effect, an early example of open source software, although that particular term {{was not to}} be coined until two decades later).|$|E
50|$|According to Embedded Systems magazine, the Exatron Stringy Floppy uses Manchester encoding, {{achieving}} 14K read-write {{speeds and}} the code controlling {{the device was}} developed by Li-Chen Wang, who also wrote a <b>Tiny</b> <b>BASIC,</b> {{the basis for the}} TRS-80 Model I Level I BASIC.|$|E
5000|$|Although these {{development}} boards {{were not}} designed for hobbyists, they were often bought by them {{because they were the}} earliest cheap microcomputer devices you could buy. They often added all kinds of expansions, such as more memory, a video interface etc. It was very popular to use (or write) an implementation of <b>Tiny</b> <b>Basic.</b> The most popular microprocessor board, the KIM-1, received the most attention from the hobby community, because it was much cheaper than most other development boards, and you could get more software for it (<b>Tiny</b> <b>Basic,</b> games, assemblers), and cheap expansion cards to add more memory or other functionality. More articles were published in magazines like [...] "Kilobaud Microcomputing" [...] that described home-brew software and hardware for the KIM-1 than for other development boards.|$|E
50|$|Dr. Li-Chen Wang (born 1935) is an American {{computer}} engineer, {{best known}} for his Palo Alto <b>Tiny</b> <b>BASIC</b> for Intel 8080-based microcomputers. He {{was a member of the}} Homebrew Computer Club and made significant contributions to the software for early microcomputer systems from Tandy Corporation and Cromemco.|$|E
5000|$|An {{early use}} of the word [...] "copyleft" [...] was in Li-Chen Wang's Palo Alto Tiny BASIC's {{distribution}} notice [...] "@COPYLEFT ALL WRONGS RESERVED" [...] in June 1976, but <b>Tiny</b> <b>BASIC</b> was not distributed under any form of copyleft distribution terms, so the wordplay is the only similarity.|$|E
50|$|The Astrocade also {{included}} a BASIC programming language cartridge {{which was based on}} Li-Chen Wang's <b>Tiny</b> <b>BASIC.</b> Supporting BASIC on the system was difficult, because the display alone used up almost all the available RAM. The solution to this problem was to store the BASIC program code in the video RAM.|$|E
50|$|The {{system can}} be {{programmed}} as {{the target of a}} PC-hosted IDE or through locally hosted programming languages. <b>Tiny</b> <b>BASIC</b> is included with the system, and the FORTH language is also available. Of course, the Hydra can also be programmed in assembler, and in the Propeller's own built-in Spin programming language.|$|E
50|$|A BASIC {{interpreter}} {{could be}} purchased either on cassette tape or {{on a set}} of three 4kB EPROMs. The first 4kB BASIC EPROM replaced the 2kB monitor EPROM supplied with the computer and contained the first 2kB of BASIC, plus the monitor program. The BASIC interpreter was based on <b>Tiny</b> <b>BASIC</b> rewritten and modified by Ron Harris.|$|E
50|$|The {{following}} table gives {{a partial}} list of the commands of the virtual machine in which the first <b>Tiny</b> <b>BASIC</b> interpreter was written. The length of the whole interpreter program was only 120 virtual machine operations. Thus {{the choice of a}} virtual machine approach economized on memory space and implementation effort, although the BASIC programs run thereon were executed somewhat slowly.|$|E
50|$|One of {{the first}} BASICs to appear was <b>Tiny</b> <b>BASIC,</b> a simple BASIC variant {{designed}} by Dennis Allison {{at the urging of}} Bob Albrecht of the Homebrew Computer Club. He had seen BASIC on minicomputers and felt it would be the perfect match for new machines like the MITS Altair 8800. How to design and implement a stripped-down version of an interpreter for the BASIC language was covered in articles by Allison in the first three quarterly issues of the People's Computer Company newsletter published in 1975 and implementations with source code published in Dr. Dobb's Journal of <b>Tiny</b> <b>BASIC</b> Calisthenics & Orthodontia: Running Light Without Overbyte. Versions were written by Li-Chen Wang and Tom Pittman. In 1975 MITS released Altair BASIC, developed by Bill Gates and Paul Allen as the company Micro-Soft, which eventually grew into corporate giant Microsoft. The first Altair version was co-written by Gates, Allen, and Monte Davidoff.|$|E
5000|$|There is {{a viable}} {{alternative}} to the problems raised by Bill Gates in his irate letter to computer hobbyists concerning [...] "ripping off" [...] software. When software is free, or so inexpensive that it's easier to pay for it than to duplicate it, then it won't be [...] "stolen". Jim Warren, July 1976 [...] Jim Warren, Homebrew Computer Club Member and editor of Dr. Dobb's Journal, wrote in the July 1976 ACM Programming Language newsletter about the successful <b>Tiny</b> <b>BASIC</b> project. The goal was to create BASIC language interpreters for microprocessor based computers. The project had started in late 1975 but the [...] "Open Letter" [...] motivated many hobbyists to participate. Computer clubs and individuals {{from all parts of the}} United States and the world soon created <b>Tiny</b> <b>BASIC</b> interpreters for the Intel 8080, the Motorola 6800 and MOS Technology 6502 processors. The assembly language source code was published or the software was sold for five or ten dollars.|$|E
