507|579|Public
25|$|The <b>threat</b> <b>model</b> for OFFICIAL data {{is similar}} to typical large private-sector organisations; it anticipates that {{individual}} hackers, pressure groups, criminals, and investigative journalists might attempt to get information. The <b>threat</b> <b>model</b> does not guarantee protection against very persistent and skilled attacks, for instance by organised crime groups or by foreign governments; these are possible, but normal controls would make them more difficult, and much stronger controls would be disproportionate. People with routine access to OFFICIAL information {{should be subject to}} BPSS screening.|$|E
25|$|In practice, {{since the}} {{specific}} implementation details of proprietary TrustZone implementations {{have not been}} publicly disclosed for review, {{it is unclear what}} level of assurance is provided for a given <b>threat</b> <b>model,</b> but they are not immune from attack.|$|E
2500|$|The {{minimum number}} of bits of entropy needed for a {{password}} depends on the <b>threat</b> <b>model</b> for the given application. [...] If key stretching is not used, passwords with more entropy are needed. [...] RFC 4086, [...] "Randomness Requirements for Security", presents some example threat models and how to calculate the entropy desired for each one. [...] Their answers vary between 29 bits of entropy needed if only online attacks are expected, and up to 128 bits of entropy needed for important cryptographic keys used in applications like encryption where the password or key needs to be secure {{for a long period}} of time and stretching isn't applicable. [...] A 2010 Georgia Tech Research Institute study based on unstretched keys recommended a 12-character random password, but as a minimum length requirement.|$|E
5000|$|Microsoft’s free <b>threat</b> <b>modeling</b> tool - the <b>Threat</b> <b>Modeling</b> Tool (formerly SDL <b>Threat</b> <b>Modeling</b> Tool). This tool also {{utilizes}} the Microsoft <b>threat</b> <b>modeling</b> methodology, is DFD-based, and identifies threats {{based on}} the STRIDE threat classification scheme. It is intended primarily for general use.|$|R
50|$|Conceptually, {{most people}} {{incorporate}} {{some form of}} <b>threat</b> <b>modeling</b> in their daily life and don’t even realize it. Commuters use <b>threat</b> <b>modeling</b> to consider what might go wrong during the morning drive to work and to take preemptive action to avoid possible accidents. Children engage in <b>threat</b> <b>modeling</b> when determining the best path toward an intended goal while avoiding the playground bully. In a more formal sense, <b>threat</b> <b>modeling</b> {{has been used to}} prioritize military defensive preparations since antiquity.|$|R
40|$|Todays {{competitive}} and profit-driven online environment needs a web application {{to be much}} secure as {{it is going to}} be tested in all possible ways by the attackers for any sign of vulnerability which can be converted into a big success for him to gain control to the maximum of the software. In order to produce a secure application, it has to be securely built right from the design phase throughout the software development life cycle. The most effective methodology of implementing this is <b>threat</b> <b>modeling.</b> There have been a lot of improvements and researches on the process of <b>threat</b> <b>modeling</b> and its approaches. Following these, Some tools are developed by some Enterprises to support the process of systematic <b>threat</b> <b>modeling.</b> In this thesis, the most widely accepted process of <b>threat</b> <b>modeling,</b> that has been proposed by Microsoft, is explained along with other approaches for it. Two industrial projects, with the support of Microsoft SDL tool for <b>Threat</b> <b>modeling</b> have been <b>threat</b> <b>modeled</b> and discussed. Towards the end, some modifications to the hybrid approach of <b>threat</b> <b>modeling</b> have been proposed and have been implemented on the open source workbench supporting that approach...|$|R
50|$|This {{taxonomy}} {{has been}} extended into a more comprehensive <b>threat</b> <b>model</b> that allows one to make explicit assumptions on the adversary’s goal, knowledge of the attacked system, capability of manipulating the input data and/or the system components, and on the corresponding (potentially, formally-defined) attack strategy. Details can be found here. Two of the main attack scenarios identified according to this <b>threat</b> <b>model</b> are sketched below.|$|E
50|$|The <b>threat</b> <b>model</b> for OFFICIAL data {{is similar}} to typical large private-sector organisations; it anticipates that {{individual}} hackers, pressure groups, criminals, and investigative journalists might attempt to get information. The <b>threat</b> <b>model</b> does not guarantee protection against very persistent and skilled attacks, for instance by organised crime groups or by foreign governments; these are possible, but normal controls would make them more difficult, and much stronger controls would be disproportionate. People with routine access to OFFICIAL information {{should be subject to}} BPSS screening.|$|E
50|$|The {{focus of}} the Trike {{methodology}} is using threat models as a risk-management tool. Within this framework, threat models are used to satisfy the security auditing process. Threat models {{are based on a}} “requirements model.” The requirements model establishes the stakeholder-defined “acceptable” level of risk assigned to each asset class. Analysis of the requirements model yields a <b>threat</b> <b>model</b> form which threats are enumerated and assigned risk values. The completed <b>threat</b> <b>model</b> is used to construct a risk model based on asset, roles, actions, and calculated risk exposure.|$|E
50|$|Conceptually a <b>threat</b> <b>modeling</b> {{practice}} {{flows from}} a methodology. Numerous <b>threat</b> <b>modeling</b> methodologies {{are available for}} implementation. Based on volume of published online content, the four methodologies discussed below are the most well known.|$|R
30|$|<b>Threat</b> <b>modeling</b> module.|$|R
30|$|<b>Threat</b> <b>modeling</b> is a {{procedure}} to optimize security by identifying objectives and vulnerabilities and then defining counter measures {{to prevent or}} mitigate {{the effects of the}} threats present in the system. There are three approaches to <b>threat</b> <b>modeling</b> - they are attacker centric, software centric and asset centric. Attacker centric <b>threat</b> <b>modeling</b> starts with an attacker and evaluates their goals. Software centric <b>threat</b> <b>modeling</b> starts from the design of a system and attempts to step through a model of the system looking for various attacks against each element of the node. Asset centric <b>threat</b> <b>modeling</b> involves starting from assets entrusted to a system. Since threats associated with the system must be identified, software centric approach is suitable for MBST because the entire system design is to be processed for different types of attacks present in the system. There are different types of <b>threat</b> <b>modeling</b> processes which are used to identify threats and to identify stakeholder's risk. There are two different Microsoft <b>threat</b> <b>modeling</b> processes are STRIDE and DREAD. STRIDE is an acronym of six types of threats; Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service and Elevation of Privilege. It is used to identify both technical and non-technical threats. DREAD stands for Damage, Reproducibility, Exploitability, Affected users and Discoverability. It is used for rating threats and also for quantifying, comparing and prioritizing the amount of risks associated with each threat. There is another <b>threat</b> <b>modeling</b> framework, similar to STRIDE and DREAD, called TRIKE. It is mainly used to reduce stake holder's risk.|$|R
50|$|In practice, {{since the}} {{specific}} implementation details of proprietary TrustZone implementations {{have not been}} publicly disclosed for review, {{it is unclear what}} level of assurance is provided for a given <b>threat</b> <b>model,</b> but they are not immune from attack.|$|E
50|$|The union <b>threat</b> <b>model</b> is one {{of several}} {{explanations}} for industry wage differentials. This Keynesian economics model looks at the role of unions in wage determination. The degree in which union wages exceed non-union member wages is known as union wage premium and some firms seek to prevent unionization in the first instances. Varying costs of union avoidance across sectors will lead some firms to offer supracompetitive wages as pay premiums to workers in exchange for their avoiding unionization. Under the union <b>threat</b> <b>model</b> (Dickens 1986), the ease with which an industry can defeat a union drive has a negative relationship with its wage differential. In other words, inter-industry wage variability should be low where the threat of unionization is low.|$|E
5000|$|IriusRisk offers both a {{community}} and a commercial version of the tool. This tool focus on the creation and maintenance of a live <b>Threat</b> <b>Model</b> through the entire SDLC. It drives the process by using fully customizable questionnaires and Risk Pattern Libraries, and connects with other several different tools (OWASP ZAP, BDD-Security, Threadfix...) to empower automation.|$|E
5000|$|<b>Threat</b> <b>modeling</b> is {{a process}} by which {{potential}} threats can be identified, enumerated, and prioritized - all from a hypothetical attacker’s point of view. The purpose of <b>threat</b> <b>modeling</b> is to provide defenders {{with a systematic analysis}} of the probable attacker’s profile, the most likely attack vectors, and the assets most desired by an attacker. <b>Threat</b> <b>modeling</b> answers the questions “Where are the high-value assets?” “Where am I most vulnerable to attack?” “What are the most relevant threats?” “Is there an attack vector that might go unnoticed?” ...|$|R
40|$|Adam Shostack is {{responsible}} for security development lifecycle <b>threat</b> <b>modeling</b> at Microsoft {{and is one of}} a handful of <b>threat</b> <b>modeling</b> experts in the world. Now, he is sharing his considerable expertise into this unique book. With pages of specific actionable advice, he details how to build better security into the design of systems, software, or services from the outset. You'll explore various <b>threat</b> <b>modeling</b> approaches, find out how to test your designs against threats, and learn effective ways to address threats that have been validated at Microsoft and other top companies. Systems secu...|$|R
50|$|VAST is {{an acronym}} for Visual, Agile, and Simple <b>Threat</b> <b>modeling.</b> The {{underlying}} principle of this methodology is the necessity of scaling the <b>threat</b> <b>modeling</b> process across the infrastructure and entire SDLC, and integrating it seamlessly into an Agile software development methodology. The methodology seeks to provide actionable outputs for {{the unique needs of}} various stakeholders: application architects and developers, cybersecurity personnel, and senior executives. The methodology provides a unique application and infrastructure visualization scheme such that the creation and use of <b>threat</b> <b>models</b> do not require specific security subject matter expertise.|$|R
5000|$|Poul-Henning Kamp {{has criticized}} the <b>threat</b> <b>model</b> for steganographic file systems in his paper on GBDE, observing that in certain coercive situations, {{especially}} where the searched-for information {{is in fact}} not stored in the steganographic file systems, {{it is not possible}} for a subject to [...] "get off the hook" [...] by proving that all keys have been surrendered.|$|E
5000|$|The {{communication}} {{model in}} the bare UC framework is very basic. The messages of a sending party are handed to the adversary who can replace these messages with messages of his own choice that are delivered to the receiving party. This is also the Dolev-Yao <b>threat</b> <b>model.</b> (Based on the computational model all parties are modeled as interactive turing machines) ...|$|E
50|$|Official (Equivalent to US DOD {{classification}} FOUO - For Official Use Only) material {{forms the}} generality of government business, public service delivery and commercial activity. This includes a {{diverse range of}} information, of varying sensitivities, and with differing consequences resulting from compromise or loss. OFFICIAL information must be secured against a <b>threat</b> <b>model</b> that is broadly similar to that faced by a large private company.|$|E
5000|$|... #Subtitle level 2: Generally Accepted IT <b>Threat</b> <b>Modeling</b> Processes ...|$|R
5000|$|... #Subtitle level 2: <b>Threat</b> <b>Modeling</b> Methodologies for IT Purposes ...|$|R
5000|$|The STRIDE {{approach}} to <b>threat</b> <b>modeling</b> {{was introduced in}} 1999 at Microsoft, providing a mnemonic for developers to find 'threats to our products' [...] STRIDE, Patterns and Practices, and Asset/entry point were amongst the <b>threat</b> <b>modeling</b> approaches developed and published by Microsoft. References to [...] "the" [...] Microsoft methodology commonly mean STRIDE.|$|R
50|$|All IT-related threat {{modeling}} processes {{start with}} creating a visual {{representation of the}} application and / or infrastructure being analyzed. The application / infrastructure is decomposed into various elements {{to aid in the}} analysis. Once completed, the visual representation is used to identify and enumerate potential threats. Further analysis of the model regarding risks associated with identified threats, prioritization of threats, and enumeration of the appropriate mitigating controls depends on the methodological basis for the <b>threat</b> <b>model</b> process being utilized.|$|E
50|$|In 1999, Microsoft {{cybersecurity}} professionals Loren Kohnfelder and Praerit Gard applied Schneier’s attack tree {{analysis to}} develop a methodical means to consider potential attacks relevant to the Microsoft Windows development environment. The resultant STRIDE <b>threat</b> <b>model</b> (STRIDE is an acronym for Spoofing identity, Tampering with data, Repudiation, Information disclosure, Denial of service, Elevation of privilege) required security professionals to systematically determine how a potential attacker could utilize any threat categorized by the STRIDE acronym at each node of a Schneier-type attack tree.|$|E
50|$|Information {{technology}} {{risk assessment}} {{can be performed}} by a qualitative or quantitative approach, following different methodologies. One important difference in risk assessments in information security is modifying the <b>threat</b> <b>model</b> {{to account for the}} fact that any adversarial system connected to the Internet has access to threaten any other connected system. Risk assessments may therefore need to be modified to account for the threats from all adversaries, instead of just those with reasonable access as is done in other fields.|$|E
30|$|The {{proposed}} paper uses <b>threat</b> <b>modeling</b> for <b>threat</b> identification in {{system and}} categorizes those threats {{according to their}} categories (STRIDE) like spoofing identify, tampering data, repudiation, information disclosure, denial of service and elevation of privilege (Howard 2003). In proposed framework, new phases of <b>threat</b> <b>modeling</b> were added to fit with aspects and SPNs. <b>Threat</b> <b>modeling</b> offers various benefits such as (1) easier for team members to understand their application in better way; (2) easier to identify faults in system; (3) complex design faults can be identified easily which {{was not able to}} retrieve earlier in easy way.|$|R
40|$|Avoidance and {{discovery}} of security vulnerabilities in information systems and managing enterprises requires awareness of typical risks {{and a good}} understanding of vulnerabilities and threats and their exploitations. Various methods for characterizing, identifying and managing threats have been presented. Bruce Schneier has invented the Attack Trees, Microsoft call their method <b>Threat</b> <b>Modeling</b> and Carnegie Mellon University developed a solution for managing an entire enterprise named OCTAVE (Operationally Critical Threat, Asset, and Vulnerability Evaluation). In this paper we compare the three methods of Attack Trees, <b>Threat</b> <b>Modeling</b> and OCTAVE, and also compare two softwares using Attack Trees and <b>Threat</b> <b>Modeling.</b> 1...|$|R
50|$|The VAST {{methodology}} {{distinguished between}} application <b>threat</b> <b>models</b> (ATM) and operational or infrastructure <b>threat</b> <b>models</b> (OTM).ATMs are built with process flow diagrams (PFD). PFDs {{were developed in}} 2011 {{as a tool to}} allow Agile software development teams to create <b>threat</b> <b>models</b> based on the application design process. Applications are decomposed into their various features or use cases. Each feature is described in terms of the widgets or code building blocks required to build that feature. Features are then connected by communication protocols. The resulting visualization is a map of how a user moves through the various features of an application.|$|R
50|$|The Process for Attack Simulation and Threat Analysis (PASTA) is a seven-step, risk-centric methodology. It {{provides}} a seven-step process for aligning business objectives and technical requirements, {{taking into account}} compliance issues and business analysis. The intent of the method {{is to provide a}} dynamic threat identification, enumeration, and scoring process. Once the <b>threat</b> <b>model</b> is completed security subject matter experts develop a detailed analysis of the identified threats. Finally, appropriate security controls can be enumerated. This methodology is intended to provide an attacker-centric view of the application and infrastructure from which defenders can develop an asset-centric mitigation strategy.|$|E
50|$|In July 2003, the German BKA {{obtained}} a warrant {{to force the}} Dresden Mix operators to log access to a specific web address, which was hosting child pornography. AN.ON then decided to introduce a crime detection function in the server software {{in order to make}} this possible. The feature was made transparent by publishing the changed source code on August 18, 2003, and subsequently criticized by many users. For the Dresden Mix, the feature continues to be part of their software until today. Tracing activities back in the past is still technically not possible for the operators, but anonymity now extends only to the timepoint that a surveillance court order is issued. It was pointed out though that the new feature was covered by the AN.ON <b>threat</b> <b>model</b> and not a security leak by itself.|$|E
5000|$|The {{minimum number}} of bits of entropy needed for a {{password}} depends on the <b>threat</b> <b>model</b> for the given application. If key stretching is not used, passwords with more entropy are needed. RFC 4086, [...] "Randomness Requirements for Security", presents some example threat models and how to calculate the entropy desired for each one. [...] Their answers vary between 29 bits of entropy needed if only online attacks are expected, and up to 128 bits of entropy needed for important cryptographic keys used in applications like encryption where the password or key needs to be secure {{for a long period}} of time and stretching isn't applicable. A 2010 Georgia Tech Research Institute study based on unstretched keys recommended a 12-character random password, but as a minimum length requirement.|$|E
40|$|The main {{objective}} {{of this paper is}} to integrate <b>threat</b> <b>modeling</b> when developing a software application following the Secure Tropos methodology. Secure Tropos is an agent-oriented software development methodology which integrates “security extensions ” into all development phases [2]. <b>Threat</b> <b>modeling</b> is used to identify, document, and mitigate security risks [6], therefore, applying <b>threat</b> <b>modeling</b> when defining the security extensions shall lead to better modeling and increased level of security. After integrating <b>threat</b> <b>modeling</b> into this methodology, security attack scenarios [13] are applied to the models to discuss how the security level of the system has been impacted. Security attack scenarios have been used to test different enhancements made to the Secure Tropos methodology and the Tropos methodology itself [13] [11]. The system modeled using this methodology is an e-Commerce application that will be used to sell handmade products made in Ecuador through the web. The. NET Model-View-Controller framework is used to develop our case study application. Results show that integrating <b>threat</b> <b>modeling</b> in the development process, the level of security of the modeled application has increased. The different actors, goals, tasks, and security constraints that were introduced based on the proposed integration help mitigate different risks and vulnerabilities...|$|R
40|$|Collect and analyse <b>threat</b> <b>models</b> to the Bitcoin {{ecosystem}} and its software. The create misuse case, attack trees, {{and sequence}} diagrams of the threats. Create a malicious client from the gathered <b>threat</b> <b>models.</b> Once {{the development of}} the client is complete, test the client and evaluate its performance. From this, assess the security of the Bitcoin software. </p...|$|R
40|$|Privacy-preservation for {{sensitive}} data {{has become a}} challenging issue in cloud computing. <b>Threat</b> <b>modeling</b> {{as a part of}} requirements engineering in secure software development provides a structured approach for identifying attacks and proposing countermeasures against the exploitation of vulnerabilities in a system. This paper describes an extension of Cloud Privacy <b>Threat</b> <b>Modeling</b> (CPTM) methodology for privacy <b>threat</b> <b>modeling</b> in relation to processing {{sensitive data}} in cloud computing environments. It describes the modeling methodology that involved applying Method Engineering to specify characteristics of a cloud privacy <b>threat</b> <b>modeling</b> methodology, different steps in the proposed methodology and corresponding products. In addition, a case study has been implemented as a proof of concept to demonstrate the usability of the proposed methodology. We believe that the extended methodology facilitates the application of a privacy-preserving cloud software development approach from requirements engineering to design. Comment: arXiv admin note: substantial text overlap with arXiv: 1601. 0150...|$|R
