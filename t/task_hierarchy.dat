66|95|Public
5000|$|This {{hierarchy}} {{is similar}} to that of the <b>task</b> <b>hierarchy</b> and contains: ...|$|E
50|$|Modern {{task list}} {{applications}} may have built-in <b>task</b> <b>hierarchy</b> (tasks {{are composed of}} subtasks which again may contain subtasks), may support multiple methods of filtering and ordering the list of tasks, and may allow one to associate arbitrarily long notes for each task.|$|E
40|$|Abstract. HEXQ is a {{reinforcement}} learning algorithm that discovers hierarchical structure automatically. The generated <b>task</b> <b>hierarchy</b> represents {{the problem at}} different levels of abstraction. In this paper we extend HEXQ with heuristics that automatically approximate the structure of the <b>task</b> <b>hierarchy.</b> Construction, learning and execution time, as well as storage requirements of a <b>task</b> <b>hierarchy</b> may be significantly reduced and traded off against solution quality. ...|$|E
40|$|Sequential {{decision}} tasks present {{many opportunities}} {{for the study of}} transfer learning. A principal one among them is the existence of multiple domains that share the same underlying causal structure for actions. We describe an approach that exploits this shared causal structure to discover a hierarchical task structure in a source domain, which in turn speeds up learning of task execution knowledge in a new target domain. Our approach is theoretically justified and compares favorably to manually-designed <b>task</b> <b>hierarchies</b> in learning efficiency in the target domain. We demonstrate that causally motivated <b>task</b> <b>hierarchies</b> transfer more robustly than other kinds of detailed knowledge that depend on the idiosyncrasies of the source domain and are hence less transferable...|$|R
40|$|This paper {{presents}} X-PRT, a new {{cognitive modeling}} tool supporting activities ranging from interface design to basic cognitive research. X-PRT provides a graphical model development {{environment for the}} CORE constraint-based cognitive modeling engine [7, 13, 21]. X-PRT comprises a novel feature set: (a) it supports the automatic generation of predictive models at multiple skill levels from a single taskspecification, (b) it supports a comprehensive set of modeling activities, and (c) it supports compositional reuse of existing cognitive/perceptual/motor skills by transforming high-level, hierarchical task descriptions into detailed performance predictions. <b>Task</b> <b>hierarchies</b> {{play a central role}} in X-PRT, serving as the organizing construct for task knowledge, the locus for compositionality, and the cognitive structures over which the learning theory is predicated. Empirical evidence supports the role of <b>task</b> <b>hierarchies</b> in routine skill acquisition. Author Keywords user modeling, tools for usability evaluation...|$|R
40|$|This paper {{introduces}} {{an approach}} to automatic basis function construction for Hierarchical Reinforcement Learning (HRL) tasks. We describe some considerations that arise when constructing basis functions for multilevel <b>task</b> <b>hierarchies.</b> We extend previous work on using Laplacian bases for value function approximation to situations where the agent is provided with a multi-level action hierarchy. We experimentally evaluate these techniques on the Taxi domain. 1...|$|R
40|$|Numerous {{attempts}} at codifying examples {{have shown that}} there is no consensus on the semantics of the MasterMind Task Model. To fix this, we are formalizing the semantics of the Task Model and recording assumptions this model places on the other models in the MM architecture. At the outset, we had to choose a formalism in which to express the semantics. Two candidates seemed logical: Petri-Nets[6] and State-Charts [2]. We chose Petri-Nets. This document explains our choice and records the decisions that led up to it. 1 Introduction MasterMind encourages task-centered system design. An artifact of this design is a stored representation of the <b>task</b> <b>hierarchy.</b> Task hierarchies sequence user events with application and presentation method invocation and i/o. The intention is that: 1. we can build a task interpreter that executes the <b>task</b> <b>hierarchy</b> so that designers can prototype their designs, and 2. we can reason about properties of the <b>task</b> <b>hierarchy</b> to implement design critics and cons [...] ...|$|E
40|$|Two {{notions of}} {{optimality}} have been explored in previous work on hierarchical reinforcement learning (HRL) : hierarchical optimality, or the optimal {{policy in the}} space de ned by a <b>task</b> <b>hierarchy,</b> and a weaker local model called recursive optimality. In this paper, we introduce two new average-reward HRL algorithms for nding hierarchically optimal policies...|$|E
40|$|This paper {{presents}} {{an approach to}} enhance interoperability between heteroge-neous ontologies. It consists in adapting the ranking of concepts to the final users and their work context. The computations are based on an upper domain ontology, a <b>task</b> <b>hierarchy</b> and a user profile. As prerequisites, OWL ontologies have to be given, and an articulation ontology has to be built...|$|E
40|$|We {{present an}} algorithm, HI-MAT (Hierarchy Induction via Models And Trajectories), that discovers MAXQ <b>task</b> <b>hierarchies</b> by {{applying}} dynamic Bayesian network models {{to a successful}} trajectory from a source reinforcement learning task. HI-MAT discovers subtasks by analyzing the causal and temporal relationships among the actions in the trajectory. Under appropriate assumptions, HI-MAT induces hierarchies {{that are consistent with}} the observed trajectory and have compact value-function tables employing safe state abstractions. We demonstrate empirically that HI-MAT constructs compact hierarchies that are comparable to manuallyengineered hierarchies and facilitate significant speedup in learning when transferred to a target task. 1...|$|R
40|$|Negotiating a {{software}} development contract {{is a complex}} operation. One needs {{to make decisions about}} many different aspects of what information to provide to possible contractors, who potential collaborators can be and how one wants to negotiate with them. This paper deals with our approach for negotiation support for software development tasks. We created a virtual marketplace that supports contract negotiation between different companies as well as in between a company. In contrast to existing Web based marketplaces, we needed to develop concepts for dealing with complex structures like <b>task</b> <b>hierarchies</b> and also offer more negotiation possibilities...|$|R
40|$|Abstract. Hierarchical {{reinforcement}} learning methods {{have not been}} able to simultaneously abstract and reuse subtasks with discounted value functions. The contribution of this paper is to introduce two completion functions that jointly decompose the value function hierarchically to solve this problem. The significance of this result is that the benefits of hierarchical {{reinforcement learning}} can be extended to discounted value functions and to continuing (infinite horizon) reinforcement learning problems. This paper demonstrates the method with the an algorithm that discovers subtasks automatically. An example is given where the optimum policy requires a subtask never to terminate. Key words: hierarchical reinforcement learning, state abstraction, <b>task</b> <b>hierarchies,</b> decomposition...|$|R
40|$|Two {{notions of}} {{optimality}} have been explored in previous work on hierarchical reinforcement learning (HRL) : hierarchical optimality, or the optimal {{policy in the}} space defined by a <b>task</b> <b>hierarchy,</b> and a weaker local model called recursive optimality. In this paper, we introduce two new average-reward HRL algorithms for finding hierarchically optimal policies. We compare them to our [...] ...|$|E
40|$|International audienceThis paper {{presents}} {{an approach to}} enhance interoperability between heterogeneous ontologies. It consists in adapting the ranking of concepts to the final users and their work context. The computations are based on an upper domain ontology, a <b>task</b> <b>hierarchy</b> and a user profile. As prerequisites, OWL ontologies have to be given, and an articulation ontology has to be built...|$|E
40|$|We {{present a}} new {{framework}} for rapid development of mixed-initiative dialog systems. Using this framework, a developer can author sophisticated dialog systems for multiple channels of interaction by specifying an interaction modality, a rich <b>task</b> <b>hierarchy</b> and task parameters, and domain-specific modules. The framework includes a dialog history that tracks input, output, and results. We present the framework and preliminary results in two application domains. ...|$|E
40|$|The PerformM 21 {{research}} project addressed the Army's need {{to adapt to}} the requirements of operations in the 21 st century. The Incorporating Lessons Learned into the Army Competency Assessment Prototype (Lessons Learned) analyses is a subpart of the PerformM 21 work and is discussed in this report. Specifically, Lessons Learned is concerned with incorporating tasks and knowledges that emerged from recent deployments into the standard Army-wide Common <b>Tasks</b> <b>hierarchy.</b> To this end, a prototype job analysis survey and test blueprint were developed, resulting ina process that is transportable to an operational program. Lessons learned sources were located, and challenges noted with them were discussed (e. g., locating Army-approved doctrine). Finally, new items were developed based on this lessons learned content. These items, with further review and modification, could be used in an operational assessment. " [...] P. i. " 665803 D 730. ""June 2006. "Includes bibliographical references (p. 33). Final report;"The PerformM 21 {{research project}} addressed the Army's need {{to adapt to the}} requirements of operations in the 21 st century. The Incorporating Lessons Learned into the Army Competency Assessment Prototype (Lessons Learned) analyses is a subpart of the PerformM 21 work and is discussed in this report. Specifically, Lessons Learned is concerned with incorporating tasks and knowledges that emerged from recent deployments into the standard Army-wide Common <b>Tasks</b> <b>hierarchy.</b> To this end, a prototype job analysis survey and test blueprint were developed, resulting ina process that is transportable to an operational program. Lessons learned sources were located, and challenges noted with them were discussed (e. g., locating Army-approved doctrine). Finally, new items were developed based on this lessons learned content. These items, with further review and modification, could be used in an operational assessment. " [...] P. i. Sponsored by U. S. Army Research Institute for the Behavioral and Social Sciences. Mode of access: Internet...|$|R
40|$|This paper {{describes}} ActionStreams, {{a system}} for inducing task models from observations of user activity. The model can represent several <b>task</b> structures: <b>hierarchy,</b> variable sequencing, mandatory vs. optional actions, and interleaved sequences. The task models {{can be used for}} just-in-time automation and for guidance in user interface design...|$|R
40|$|The {{problem of}} robot control is {{approached}} from a systems standpoint where a complete control system must include {{all of the}} aspects involved in moving a robot, not just the algorithms in the classic controls literature. The NASA/NBS Standard Reference Model for Telerobot Control System Architecture (NASREM) provides the framework for a complete manipulator control system. It is composed of three hierarchies: task decomposition, world modeling, and sensory processing. The <b>task</b> decomposition <b>hierarchy</b> divides <b>tasks</b> into smaller and smaller subtasks. In order to achieve the desired decomposition, the <b>task</b> decomposition <b>hierarchy</b> must often access information stored in the world modeling hierarchy, which contains a workspace representation, object descriptions, robot models, etc. The sensory processing hierarchy constantly fils the world model with processed sensor information. In the process of buildin...|$|R
40|$|Scaling up {{reinforcement}} learning to large domains requires leveraging the {{structure in the}} domain. Hierarchical {{reinforcement learning}} {{has been one of}} the ways in which the domain structure is exploited to constrain the value function space of the learner, and speed up learning[10, 3, 1]. In the MAXQ framework, for example, a <b>task</b> <b>hierarchy</b> is defined, and a set of relevant features to represent the completion function for each task-subtask pair are given [3], resulting in decomposed subtask-specific value functions that are easier to learn than the global value function. The MAXQ decomposition facilitates learning separate value functions for subtasks. The <b>task</b> <b>hierarchy</b> is represented as a directed acyclic graph. The leaf nodes are the primitive subtasks. Each composite subtask defines a semi-Markov Decision Process (SMDP) with a set of actions (which may include primitive actions or other subtasks), a set of state variables, a termination predicate which defines a set of exit states for the subtask, and a pseudo-reward function defined over the exits. Several researchers have focused on the problem of automatically inducing temporally extended actions and task-subtask hierarchies [4, 7, 8, 9, 2, 11, 6, 5]. Discovering tasksubtas...|$|E
40|$|This paper {{examines}} {{participation in}} female-typed household tasks by husbands in 32 {{countries in the}} 2002 International Social Survey Program. Mokken scaling shows widespread and systematic ordering of married men’s performance of stereotypically female tasks, a hierarchy which is obscured by conventional measures of couples’ task-sharing. The hierarchy {{gives rise to a}} typology of men’s conformity to the social conventions of this <b>task</b> <b>hierarchy.</b> Multilevel, multinomial models test hypotheses on the micro-level predictors of husbands’ pattern of housework participation, as well as expectations for country differences...|$|E
30|$|A <b>task</b> <b>hierarchy</b> is the {{successive}} decomposition of tasks into more specialized ones {{that on the}} lowest level can be performed by an individual or a team (Simon 1962). Markets allocate tasks via the price mechanism. Community participants themselves decide which tasks to take on (Benkler 2002), rather than being assigned tasks from superiors in a hierarchy (Thompson 1967). The ideal forms also differ in who approves the quality of accomplished tasks. Communities practice peer-based quality assurance (Lee and Cole 2003), while managers and customers approves quality in hierarchies and markets, respectively.|$|E
40|$|This paper {{describes}} XFRMLEARN, {{a system}} that learns symbolic behavior specifications to control and improve the continuous sensor-driven navigation behavior of an autonomous mobile robot. The robot is to navigate between a set of predefined locations in an office environment and employs a navigation system consisting of a path planner and a reactive collision avoidance system. XFRMLEARN rationally reconstructs the continuous sensor-driven navigation behavior in terms of <b>task</b> <b>hierarchies</b> by identifying significant structures and commonalities in behaviors. It also constructs a statistical behavior model for typical navigation tasks. The behavior model together with a model of how the collision avoidance module should “perceive ” the environment is used to detect behavior “flaws, ” diagnose them, and revise the plans to improve their performance. The learning method is implemented on an autonomous mobile robot...|$|R
40|$|The {{implementation}} of new control systems {{governed by a}} rational-technical logic often produces contrary responses due to the underlying value and belief structures lodged within prevailing control systems, <b>task</b> and <b>hierarchy.</b> This note empirically examines this discordance {{within the context of}} perceived managerial benefits to ZBB implementation. Several prescriptive implications are offered for the design of systems change...|$|R
40|$|At present, the {{critical}} computations of real-time systems are guaranteed before runtime by performing a worst-case {{analysis of the}} system's timing and resource requirements. The result is that real-time systems are engineered to have spare capacity, under normal operation. A challenge of current research is {{to make use of}} this spare capacity, in order to satisfy requirements for adaptivity in the system. Adaptivity can be implemented by optional computations with firm deadlines, which can be guaranteed at run-time by the use of flexible scheduling. This report assumes that the algorithms which attempt to guarantee optional computations at run-time, actually run on the same processor as the optional and critical computations themselves. The report starts with a brief survey of the complex requirements for adaptivity within real-time systems. Such requirements can include <b>task</b> <b>hierarchies</b> composed of interdependent subtasks each with its own utility. Evidence is cited which indicates th [...] ...|$|R
30|$|In {{order to}} write a {{computer}} programme to solve (in a digital sense) a particular problem, Fig. 2 shows the complete <b>task</b> <b>hierarchy</b> as: entry level skills; problem solving skills; knowledge of (digital) rules, and basic computer literacy. The entry level skills defined here as problem solving skills, include such tasks as: being able to read and redefine the problem, then identifying the data-input, and the (digital)-processing necessary to achieve the data-output. The McKay (2000 a) research concentrated on the problem-solving skills component of Fig. 2 to situate the instructional strategies for writing pseudocode for the algorithm.|$|E
40|$|We {{describe}} the Deep Space Network’s scheduling problem {{based on a}} user requirement language. The problem is difficult to encode by almost all existing planning and scheduling systems. We describe {{how it can be}} mapped into a system that supports metric resources, durative action, simple temporal network constraints, and <b>task</b> <b>hierarchy</b> among other language features. We also describe how we adapted a local search scheduler to generate schedules. However, we argue that the application will best serve the users if local search is combined with systematic search. We describe how an implemented systematic search can be effectively applied to rescheduling...|$|E
40|$|We {{develop a}} {{hierarchical}} approach to planning for partially observable Markov decision processes (POMDPs) {{in which a}} policy is represented as a hierarchical finite-state controller. To provide a foundation for this approach, we discuss some extensions of the POMDP framework {{that allow us to}} formalize the process of abstraction by which a hierarchical controller is constructed. We describe a planning algorithm that uses a programmer-defined <b>task</b> <b>hierarchy</b> to constrain the search space of finite-state controllers, and prove that this algorithm converges to a hierarchical finite-state controller that is ε-optimal in a limited but well-defined sense, related to the concept of recursive optimality...|$|E
40|$|As {{autonomous}} {{software and}} robotic systems (or agents) grow in complexity, they will increasingly need {{to communicate and}} coordinate with each other. These agents will need planned courses of action {{to achieve their goals}} while sharing limited resources. This dissertation addresses the problem of efficiently interleaving planning and coordination for multiple agents. As part of my approach, I represent agents as having <b>hierarchies</b> of <b>tasks</b> that can be decomposed into executable primitive actions. Using <b>task</b> <b>hierarchies,</b> an agent can reason efficiently about its own goals and tasks (and those of others) at multiple levels of abstraction. By exploiting hierarchy, these agents can make planning and coordination decisions while avoiding complex computation involving unnecessary details of their tasks. To reason at abstract levels, agents must be aware of the constraints an abstract task embodies in its potential decompositions. Thus, I provide algorithms that summarize these constraints (represented as propositional state conditions and metric resource usages) for each abstract task in an agent’s library of hierarchical plans. This summar...|$|R
40|$|Middleware {{technologies}} such as CORBA and DCOM have been developed {{as a means of}} tackling heterogeneity and complexity problems inherent in distributed systems. However, more work still need to be done to develop methodologies for the construction of distributed objects. In addition, little {{attention has been paid to}} the development of methodologies for the configuration of computational resources among distributed objects. This paper introduces a resource configuration description language (RCDL) for the specification of the resource management of distributed systems. This language is based on both a resource model and a task model. The former offers various levels of abstraction for resources, resource factories and resource mangers. The latter then provides a fine- and a coarse-grained approach to allocate resources to both application services and middleware services by breaking such services into <b>task</b> <b>hierarchies.</b> Finally, we use reflection as a principled means to obtain a clear separation of concerns between the functional and non-functional behaviour (e. g. resource management) of distributed systems...|$|R
40|$|This chapter {{analyzes}} network positioning in two mafia-type organizations {{belonging to}} the ‘Ndrangheta, a mafia-type criminal organization originating from Calabria. The focus is on strategic and vulnerable positioning within the networks. Results show that <b>task</b> and <b>hierarchy</b> are associated with network centrality, but also with accusation, arrest, and conviction. By contrast, high social status within the networks exhibits limited association with network centrality and the outcomes of criminal proceedings...|$|R
40|$|The {{detailed}} design specifications (as built) for the SEPAC Flight Software are defined. The design includes {{a description of}} the total software system and of each individual module within the system. The design specifications describe the decomposition of the software system into its major components. The system structure is expressed in the following forms: the control-flow hierarchy of the system, the data-flow structure of the system, the <b>task</b> <b>hierarchy,</b> the memory structure, and the software to hardware configuration mapping. The component design description includes details on the following elements: register conventions, module (subroutines) invocaton, module functions, interrupt servicing, data definitions, and database structure...|$|E
40|$|This article {{argues that}} task-specific {{measures}} {{of the division of}} household labor form a gender hierarchy that reflects dimensions of meaning in the organization of household work. We contrast these measures to the commonly used time-share and Likert scale measures, which assume all tasks are interchangeable. Using Guttman scaling, we test the unidimensionality of this <b>task</b> <b>hierarchy.</b> Using odds ratios, we measure relationships between specific tasks, and using logistic regression, we see differences in correlates of husbands’ participation by task and interrelationships among tasks that persist, controlling for gender ideology and socioeconomic factors. This work should encourage development of measures of change in the segregation of household tasks by gender...|$|E
40|$|Substantial {{research}} {{effort has}} been devoted to the design of mobile tourist guides. Although a lot of these guides already provide some naturalness and intelligence in the interaction with users, their user interfaces are mostly object-based. In this article we will argue that, due to the users' limited attention capacity and the great variety of tasks they have to perform on their trips, more emphasis should be put on the integration of tasks within the users' context of activity. Based on the preliminary results of a qualitative user & task analysis, we suggest concrete guidelines and a <b>task</b> <b>hierarchy</b> for a mobile tourist guide UI. status: publishe...|$|E
40|$|Visualisation and {{structuring}} {{of tasks}} in a schedule, from relatively simple {{activities such as}} meeting scheduling to more complex ones such as project planning, has been tra-ditionally supported by timeline representations similar to Gantt charts. Despite their popularity, Gantt charts suf-fer {{from a number of}} shortcomings, including poor repre-sentation of detail and inefficient use of screen real-estate, particularly when a large number of parallel tasks, each of which requiring its own representation space, need to be displayed. We have devised an alternative visualisa-tion, called temporal mosaic, which addresses some of these shortcomings while utilising space more efficiently. We have recently shown that as a static visualisation temporal mo-saics outperform Gantt charts in terms of their ability to convey time-based scheduling information to users engaged in various temporal inference tasks. This paper extends that research by presenting interactive techniques which support creation, and dynamic visualisation of <b>task</b> <b>hierarchies</b> and relationships. These techniques are illustrated through a system for direct manipulation of schedules in both Gantt chart and temporal mosaic formats. 1...|$|R
40|$|The {{knowledge}} theoretic view {{of organization}} of production postulates that ICT, <b>tasks</b> and <b>hierarchies</b> intertwine. Utilizing Occupational Employment Statistics and O*NET data, this study investigates the proposition by exploiting the substantial cross-industry variation in hierarchical forms, which are here captured by spans of control among middle and corporate managers. Information [IT] and communication technologies [CT] are explored separately, and the parsimonious task taxonomy depicts industries in four dimensions: tacit knowledge, cognitive, physical/technical and interaction. The key {{predictions of the}} knowledge hierarchy literature can hence be tested and the findings largely reverberate with theory. First, ICT influences middle and corporate manager spans dissimilarly reflecting technological asymmetries in hierarchies. Higher IT utilization narrows organizations yet CT expands middle management. Second, industry tasks govern organizational outcomes. Cognitive tasks flatten and technical/physical <b>tasks</b> narrow <b>hierarchies.</b> Third, the descriptive evidence suggests that hierarchies are highly non-pyramidal across U. S. industries. Finally, the key insight is that spans in top hierarchy are insular to tasks yet organizations down the middle management reflect the nature of industry. With some exceptions the results are robust to exogenous variation in ICT utilization. ...|$|R
50|$|Gagné {{suggests}} that learning tasks for intellectual {{skills can be}} organized in a hierarchy according to complexity: stimulus recognition, response generation, procedure following, use of terminology, discrimination, concept formation, rule application, and problem solving. The primary significance of the hierarchy is to identify prerequisites that should be completed to facilitate learning at each level. Prerequisites are identified by doing a task analysis of a learning/training <b>task.</b> Learning <b>hierarchies</b> {{provide a basis for}} the sequencing of instruction.|$|R
