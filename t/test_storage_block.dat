0|1152|Public
5000|$|... {{physical}} storage object identifies free <b>storage</b> <b>blocks</b> in memory ...|$|R
50|$|Tracks are {{subdivided}} into blocks (or sectors, pages) (see: <b>Storage</b> <b>block</b> and Virtual page).|$|R
40|$|Abstract—We {{forecast}} that {{proper handling}} of unreliable <b>storage</b> <b>blocks</b> (e. g., “bad block management ” in solid-state drives) will remain critical for future systems built with advanced and emerging memory technologies. This paper {{argues that the}} conventional block retirement and sparing approach—a block is retired {{as soon as it}} shows faulty behavior—is overly conservative and inefficient. We observe that {{it is highly unlikely that}} all faulty bits in a <b>storage</b> <b>block</b> manifest errors. Consequently, we propose data dependent sparing, a relaxed block retirement and sparing approach that recycles faulty <b>storage</b> <b>blocks.</b> At small management cost and with less than 1 % sparing, data dependent sparing achieves the same lifetime as the conventional approach with 20 % sparing...|$|R
5000|$|Storage alignment, which aligns virtual {{filesystem}} <b>blocks</b> with hypervisor <b>storage</b> <b>blocks</b> {{and physical}} disk blocks for improved {{read and write}} performance in virtual environments ...|$|R
40|$|Graduation date: 2010 In {{container}} terminals, {{the efficiency}} of loading operations in a container yard highly depends on the productivity of yard cranes. In loading operation, yard cranes have to pick-up the containers which are stacked in the yard-bays to satisfy the work schedule requirement of quay crane, the equipment for loading and unloading containers to and from a container ship. Therefore, a well managed schedule of yard cranes to pick-up containers has to be considered. This thesis focuses on operating multiple yard cranes among <b>storage</b> <b>blocks,</b> allowing multiple yard cranes over a block of yard-bays. The objective of the pick-up scheduling problem is to minimize the total container handling time, which consists of the traveling distance and the setup time of yard cranes in a container yard. A mixed integer programming model of the pick-up scheduling problem for operating a single yard crane over a <b>storage</b> <b>block</b> has been proposed. The mathematical model has been extended to solve the considered problem for operating multiple yard cranes over <b>storage</b> <b>blocks.</b> It {{is very difficult to}} obtain the optimal solution through the commercially available software. A genetic algorithm has been proposed to solve the pick-up scheduling problem for operating multiple yard cranes over <b>storage</b> <b>blocks.</b> To demonstrate the effectiveness of the proposed GA, a randomly generated set of various problem sizes have been tested. The computational results acquired from the experiments show that the proposed GA is an effective method for solving the pick-up scheduling problem of operating multiple yard cranes over <b>storage</b> <b>blocks</b> during a loading operation in a container yard...|$|R
50|$|NoLimits 2 was {{released}} on 10 January 2014. As well as features from the original simulator, NoLimits 2 also includes transfer tracks, <b>storage</b> <b>blocks,</b> greatly improved graphics and more.|$|R
40|$|In this paper, we {{describe}} techniques which {{can improve the}} performance of dense linear system solution, based on LU, LLT and QR factorizations, on distributed memory multiprocessors, including cluster computers. The {{most important of these}} are refinements of the algorithmic blocking technique which reduce the bulk of its introduced communication startup costs and make the technique superior to <b>storage</b> <b>blocking</b> in terms of communication volume costs. These primarily rely on pipelined communication and the choice of a small <b>storage</b> <b>block</b> size. Two other techniques, optimizing the memory behavior in multiple row swaps, and the coalescing of vector-matrix multiplies in QR, also afford modest improvements in <b>storage</b> <b>blocking</b> and serial performance. Performance results on a 24 node Beowulf cluster with 550 MHz dual SMP Pentium III nodes connected by a COTS switch with 10 Mb/s links, show that algorithmic blocking generally improves performance by 15 – 30 % or more for these computations over a large range of system sizes...|$|R
50|$|OpenStack <b>Block</b> <b>Storage</b> (Cinder) {{provides}} persistent block-level {{storage devices}} {{for use with}} OpenStack compute instances. The <b>block</b> <b>storage</b> system manages the creation, attaching and detaching of the block devices to servers. <b>Block</b> <b>storage</b> volumes are fully integrated into OpenStack Compute and the Dashboard allowing for cloud users to manage their own storage needs. In addition to local Linux server storage, it can use storage platforms including Ceph, CloudByte, Coraid, EMC (ScaleIO, VMAX, VNX and XtremIO), GlusterFS, Hitachi Data Systems, IBM Storage (IBM DS8000, Storwize family, SAN Volume Controller, XIV Storage System, and GPFS), Linux LIO, NetApp, Nexenta, Nimble Storage, Scality, SolidFire, HP (StoreVirtual and 3PAR StoreServ families) and Pure <b>Storage.</b> <b>Block</b> <b>storage</b> is appropriate for performance sensitive scenarios such as database storage, expandable file systems, or providing a server with access to raw <b>block</b> level <b>storage.</b> Snapshot management provides powerful functionality for backing up data stored on <b>block</b> <b>storage</b> volumes. Snapshots can be restored or {{used to create a}} new <b>block</b> <b>storage</b> volume.|$|R
5000|$|Data {{coming in}} is stored into [...] "lining space" [...] before it hits real <b>storage</b> <b>blocks.</b> On SSD disks lining space is {{provided}} using NVRAM {{which is not}} cost efficient.|$|R
40|$|This thesis study {{focuses on}} the savings that can be {{attained}} by adding unequally spaced cross aisles in a rectangular warehouse and the best locations of these cross aisles. Earlier research suggests that adding cross aisles perpendicular to main aisles can bring significant savings with respect to order picking travel distance. In the related literature cross aisles are distributed between <b>storage</b> <b>blocks</b> that are equal in length. In this thesis, the locations of cross aisles will be investigated in detail and evaluated in terms of travel distance and <b>storage</b> space. <b>Storage</b> <b>block</b> lengths between cross aisles are allowed to be different in length. Based on our experiment results, these unequally spaced cross aisle configurations enable more saving on order picking travel distance than equally spaced cross aisles. We have also investigated the issue of possible space savings by using less number of unequally spaced cross aisles compared to equally spaced cross aisles. Our research suggests the same travel distance saving due to equally spaced cross aisles can be achieved with less number of cross aisles (less number of <b>storage</b> <b>blocks)</b> distributed between block lengths (cross aisle spacing) that are unequal in length. Additionally, an interesting pattern {{in terms of the}} lengths of <b>storage</b> <b>blocks</b> between unequally spaced cross aisles is observed. In the configuration of <b>storage</b> <b>blocks</b> that provide maximum travel distance saving, the length of the block in the middle gets wider as order size increases. This pattern is observed for all of the warehouse types investigated in this thesis. Since warehouse design is a strategic problem concerning long-term investment, the results provided within this thesis provide insights in order to decrease the investment costs or increase the efficiency of warehouse operations...|$|R
50|$|File-based {{replication}} is replicating files at {{a logical}} level rather than replicating at the <b>storage</b> <b>block</b> level. There {{are many different}} ways of performing this. Unlike with storage-level replication, the solutions almost exclusively rely on software.|$|R
50|$|Storage {{systems can}} provide either <b>block</b> {{accessed}} <b>storage,</b> or file accessed <b>storage.</b> <b>Block</b> access is typically delivered over Fibre Channel, iSCSI, SAS, FICON or other protocols. File access is often provided using NFS or SMB protocols.|$|R
50|$|Croghan Island Mill is a {{historic}} saw mill complex and concrete dam located near Croghan in Lewis County, New York. The mill complex consists of three blocks; the mill building main <b>block,</b> cold <b>storage</b> <b>block,</b> and office block. The main block is a five-by-three-bay, -story gable-roofed structure sheathed in clapboard, approximately 30 feet by 56 feet in size. The cold <b>storage</b> <b>block</b> is a 1-story, gable-roofed addition to {{the north side of}} the main block. The office block is a -story, shed-roofed addition projecting south of the main block. The complex also includes the wheel house and flume box in a -story ell projecting off the main block. The concrete dam was built in 1906 and has an approximately 2-story drop.|$|R
50|$|Global knives have a {{distinctive}} appearance with black dimples {{present on the}} handle and on one model of their <b>storage</b> <b>block.</b> Contrary to popular belief, Global Knives are made out of 2 pieces of metal and TIG welded together at the handle. With the handle being hollow and filled with sand.|$|R
50|$|The calculators {{includes}} program {{capacity of}} 26 kilobytes. This is divided among <b>storage</b> <b>blocks</b> for programs, statistics, matrices, lists, static and dynamic graphs and their associated settings, functions, recursions, equations, financial data, and variables (all {{of which are}} global). These can be cleared individually or completely in the MEM menu.|$|R
5000|$|Procurement, <b>Testing,</b> <b>Storage</b> and Distribution of Medical Equipments and Instruments to the Tamil Nadu Government Medical Institutions & Hospitals ( [...] Human / Veterinary [...] ) ...|$|R
3000|$|... 6 Memory {{generators}} do {{not allow}} all possible values for memory sizes or for bank boundaries: for instance, a memory generator may yield <b>storage</b> <b>blocks</b> with only a multiple of 16 bytes. Although our framework can take into account such kind of constraints, these tests aim to illustrate the algorithms, so no such constraint is imposed.|$|R
40|$|In this paper, we analyse {{and compare}} the {{techniques}} of algorithmic <b>blocking</b> and (<b>storage</b> <b>blocking</b> with) lookahead for distributed memory LU, LLT and QR factorizations. Concepts and some useful properties of a simplied model of lookahead are explored, including the minimal degree of lookahead required for optimal performance. Issues {{in the implementation of}} lookahead are discussed, which are more involved for the cases of LLT and QR factorizations. It is also explained how hybrid algorithmic blocking and lookahead techniques can be implemented. Implications for parallel linear algebra library design are also discussed. Results are given on the Fujitsu AP 1000 and AP+ multicomputers, which have relatively high communication to computation to speeds. The results indicate that both methods are superior to <b>storage</b> <b>blocking</b> (without lookahead). They also indicate that for such machines, the hybrid method is optimal for smaller matrices, due to savings in communication startups. For larger [...] ...|$|R
40|$|A {{block is}} the basic unit of storage space in {{container}} terminals. This study proposes two methods for optimizing the block size, by considering the throughput requirements of yard cranes (YCs) and the <b>block</b> <b>storage</b> requirements. To estimate the YC performance, cycle-time models of various handling operations of YCs are analytically derived. Two types of container yards are examined: those with blocks that are laid out parallel to the quay and those laid out vertical to the quay. Design of <b>storage</b> <b>blocks</b> Yard cranes Cycle times Container terminals Transportation...|$|R
30|$|Due to {{physical}} limitation of HDDs, {{there have been}} recent efforts to incorporate flash based high-speed, non-volatile secondary memory devices, known as SCMs in data centers. Despite superior random performance of SCMs (or SSDs) over HDDs, replacing disks with SCMs completely for data center deployments doesn’t seem to be feasible economically as well as due to other associated issues discussed briefly in “Secondary <b>storage</b> (<b>block</b> device) characteristics” section [1, 9].|$|R
50|$|Storage in such is {{organised}} as blocks. This emulates {{the type}} of behaviour seen in traditional disk or tape <b>storage.</b> <b>Blocks</b> are identified by an arbitrary and assigned identifier by which they may be stored and retrieved, but this has no obvious meaning in terms of files or documents. A filesystem must be applied {{on top of the}} block-level storage to map 'files' onto a sequence of blocks.|$|R
40|$|Transistors {{consist of}} {{lower number of}} atoms with every {{technology}} generation. Such atoms may be displaced due to the stress caused by high temperature, frequency and current, leading to failures. NBTI (negative bias temperature instability) {{is one of the}} most important sources of failure affecting transistors. NBTI degrades PMOS transistors whenever the voltage at the gate is negative (logic input “ 0 ”). The main consequence is a reduction in the maximum operating frequency and an increase in the minimum supply voltage of storage structures to cope for the degradation. Many PMOS transistors affected by NBTI can be found in both combinational and <b>storage</b> <b>blocks</b> since they observe a “ 0 ” at their gates most of the time. This paper proposes and evaluates the design of Penelope, an NBTI-aware processor. We propose (i) generic strategies to mitigate degradation in both combinational and <b>storage</b> <b>blocks,</b> (ii) specific techniques to protect individual blocks by applying the global strategies, and (iii) a metric to assess the benefits of reduced degradation and the overheads in performance and power...|$|R
5000|$|HP Cloud <b>Block</b> <b>Storage</b> enables {{organizations}} to store data from HP Cloud Compute instances {{for as long}} as needed. HP Cloud <b>Block</b> <b>Storage</b> is ideal for applications requiring frequent read/write access such as web applications.|$|R
40|$|Abstract: The present paper {{discusses}} the implementations of sparse matrix-vector products, which are crucial for high performance solutions of large-scale linear equations, on a PC-Cluster. Three storage formats for sparse matrices compressed row <b>storage,</b> <b>block</b> compressed row <b>storage</b> and sparse <b>block</b> compressed row <b>storage</b> are evaluated. Although using BCRS format reduces the execution time but the improvement {{may be limited}} because of the extra work from filled-in zeros. We show {{that the use of}} SBCRS not only improves the performance significantly but reduces matrix storage also. Keywords: Matrix-vector product, compressed storage formats, sparse matrix data structures, locality of matrix, parallel matrix computation, and block-based compressed storage. ...|$|R
40|$|Dakin's {{solution}} and a chloroxydizer in a hypertonic sodium chloride solution were tested for bacteriological and clinical effectiveness and stability. No real difference in effectiveness was observed {{between the two}} products; however, only the chloroxydizer showed satisfactory stability at 150 days under the <b>test</b> <b>storage</b> conditions...|$|R
40|$|Module {{integrated}} converters (MICs) {{have been}} under rapid development for single-phase grid-tied photovoltaic applications. The capacitive energy storage implementation for the double-line-frequency power variation represents a differentiating factor among existing designs. This paper introduces a new topology that places the energy <b>storage</b> <b>block</b> in a series-connected path with the line interface block. This design provides independent control over the capacitor voltage, soft-switching for all semiconductor devices, and full four-quadrant operation with the grid. The proposed approach is analyzed and experimentally demonstrated...|$|R
40|$|Network on Chip is {{efficient}} on-chip communication architecture for {{system on}} chip architectures. It enables the integration {{of a large number}} of computational and <b>storage</b> <b>blocks</b> on a single chip. The router is the basic element of NoC. The router architecture can be used for building a NoC with standard topology with low latency and high speed. In this paper, we implement and analyze a 3 x 3 mesh network configuration with routers which can support simultaneous routing requests, with blocking and non blocking inputs...|$|R
40|$|Container {{terminals}} {{are essential}} intermodal interfaces {{in the global}} transportation network. Efficient container handling at terminals is important in reducing transportation costs and keeping shipping schedules. In this paper, we study the storage space allocation problem in the storage yards of terminals. This problem is related to all the resources in terminal operations, including quay cranes, yard cranes, storage space, and internal trucks. We solve the problem using a rolling-horizon approach. For each planning horizon, the problem is decomposed into two levels and each level is formulated as a mathematical programming model. At the first level, {{the total number of}} containers to be placed in each <b>storage</b> <b>block</b> in each time period of the planning horizon is set to balance two types of workloads among blocks. The second level determines the number of containers associated with each vessel that constitutes the total number of containers in each block in each period, in order to minimize the total distance to transport the containers between their <b>storage</b> <b>blocks</b> and the vessel berthing locations. Numerical runs show that with short computation time the method significantly reduces the workload imbalance in the yard, avoiding possible bottlenecks in terminal operations. (C) 2003 Elsevier Ltd. All rights reserved...|$|R
5000|$|Specimen {{tracking}} {{that includes}} details about specimen handling, <b>tests,</b> and <b>storage</b> ...|$|R
50|$|The Storwize V7000 Unified {{combines}} two head units running IBM Storwize File Module Software {{with the}} IBM Storwize V7000 <b>block</b> <b>storage</b> system. It {{is described as}} unified storage because it simultaneously implements NAS protocols (such as SMB and NFS) and <b>block</b> <b>storage.</b> It leverages IBM Spectrum Scale software capabilities.|$|R
40|$|NBTI {{is one of}} {{the most}} {{important}} sources of failure affecting transistors. NBTI degrades PMOS transistors whenever the voltage at the gate is negative (logic input “ 0 ”). Memory cells of <b>storage</b> <b>blocks</b> (e. g., register files) observe a “ 0 ” in the input of one of the two inverters at least 50 % of the time. This paper proposes a new memory-cell design for highly-ported structures consisting in a number of NAND gates arranged in a ring-manner that allows reducing the maximum degradation ratio due to NBTI below 50 %. 1...|$|R
50|$|Memory (storage) in System/360 is {{addressed}} {{in terms of}} 8-bit bytes. Various instructions operate on larger units called halfword (2 bytes), fullword (4 bytes), doubleword (8 bytes), quad word (16 bytes) and 2048 byte <b>storage</b> <b>block,</b> specifying the leftmost (lowest address) of the unit. Within a halfword, fullword, doubleword or quadword, low numbered bytes are more significant than high numbered bytes; this is {{sometimes referred to as}} big-endian. Many uses for these units require aligning them on the corresponding boundaries. Within this article the unqualified term word refers to a fullword.|$|R
5000|$|The company carries {{products}} that provide block, parallel file and object <b>storage.</b> <b>Block</b> <b>storage</b> devices store data in chunks {{with a maximum}} fixed length. Parallel file systems spread the data across more than one storage device to provide redundancy and increase performance. Object file systems separate the file metadata information {{from the rest of}} the file data and store them in separate devices. The Lustre and Spectrum Scale file system is an example of a parallel file system and is supported by DDN’s products, and the InfiniBand communications link is supported by some DDN systems.|$|R
5000|$|Subsidence due to {{the fluid}} withdrawal, <b>testing</b> and <b>storage</b> of {{petroleum}} products ...|$|R
30|$|Based on {{comprehensive}} monitoring activities carried {{out during the}} successful <b>test</b> <b>storage</b> the accomplishment of injection measures (see “Assessment of the injection measures”), {{the extension of the}} supply system to a total of five modules (see “Machine selection”) as well as the implementation of the electronic control system (see “Manual vs. full automated operation”) were decided.|$|R
30|$|All {{components}} of the web application share an Azure data platform consisting of an SQL database (structured data tables), Cloud Tables (loosely associated data tables), and Blob <b>Storage</b> (<b>blocks</b> of unstructured data). The application database contains data from over 4  million wells, including well logs, reservoir properties, field measurements, drilling, completion, and production records. The majority of the data is saved in the Blob to reduce cost. Metadata are created and saved in the SQL database to help query and search through Cloud Tables and Blob Storage to find and locate {{a specific type of}} data in a time-efficient manner.|$|R
