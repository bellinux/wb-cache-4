387|2304|Public
5|$|The yearlong {{conversion}} began October 9, 2011. Between October and December, 96 of Jaguar's 200 cabinets, each containing 24 XT5 blades (two 6-core CPUs per node, four nodes per blade), were {{upgraded to}} XK7 blades (one 16-core CPU per node, four nodes per blade) while {{the remainder of}} the machine remained in use. In December, computation was moved to the 96 XK7 cabinets while the remaining 104 cabinets were upgraded to XK7 blades. ORNL's external ESnet connection was upgraded from 10 Gbit/s to 100 Gbit/s and the system interconnect (the network over which CPUs communicate with each other) was updated. The Seastar design used in Jaguar was upgraded to the Gemini interconnect used in Titan which connects the nodes into a direct 3D torus interconnect network. Gemini uses wormhole flow control internally. The system memory was doubled to 584 TiB. 960 of the XK7 nodes (10 cabinets) were fitted with a Fermi based GPU as Kepler GPUs were not then available; these 960 nodes were referred to as TitanDev and used to <b>test</b> <b>code.</b> This first phase of the upgrade increased the peak performance of Jaguar to 3.3 petaFLOPS. Beginning on September 13, 2012, Nvidia K20X GPUs were fitted to all of Jaguar's XK7 compute blades, including the 960 TitanDev nodes. In October, the task was completed and the computer was finally christened Titan.|$|E
25|$|PTC 19.3-1974(R2004): Performance <b>test</b> <b>code</b> for {{temperature}} measurement.|$|E
25|$|The primary {{function}} of this code {{is to be}} a bridge between a text file with a story and the code being tested. Note that the <b>test</b> <b>code</b> has access to the code being tested (in this case an instance of Game) and is very simple in nature. The <b>test</b> <b>code</b> has to be simple, otherwise a developer would end up having to write tests for his tests.|$|E
5000|$|Mock object (used for verifying [...] "indirect output" [...] of the <b>tested</b> <b>code,</b> {{by first}} {{defining}} the expectations before the <b>tested</b> <b>code</b> is executed) ...|$|R
40|$|To {{diagnose}} the vulnerabilities {{of target}} system using a remote penetration test approach needs {{to avoid the}} modification of the security configuration of the target network. So the carrier of <b>test</b> <b>codes</b> needs {{to hide from the}} IDS filter out of our penetrating <b>test</b> <b>codes.</b> Hence, we proposed a polymorphic carrier which carries encrypted <b>test</b> <b>codes</b> and diversified decrypters, and, the proposed carrier is also able to adjust the OP code distribution {{to make it look like}} a normal packet. To make sure whether it can hide from the detection of an intrusion detection system and deliver the <b>test</b> <b>codes</b> to target system, we use simulation to analyze whether IDS such as STRIDE and APE can successfully detect the polymorphic <b>test</b> <b>codes</b> that we created, and whether the created carrier has a 90 % or above possibility of successful execution in target system...|$|R
5000|$|Test spy (used for verifying [...] "indirect output" [...] of the <b>tested</b> <b>code,</b> {{by asserting}} the {{expectations}} afterwards, without having defined the expectations before the <b>tested</b> <b>code</b> is executed ,it help in recording {{information about the}} indirect object created.|$|R
25|$|National and {{international}} test codes {{are used to}} standardize the procedures and definitions used to test IGCC Power Plants. Selection of the <b>test</b> <b>code</b> to be used is an agreement between the purchaser and the manufacturer, and has some significance {{to the design of}} the plant and associated systems. In the United States, The American Society of Mechanical Engineers published the Performance <b>Test</b> <b>Code</b> for IGCC Power Generation Plants (PTC 47) in 2006 which provides procedures for the determination of quantity and quality of fuel gas by its flow rate, temperature, pressure, composition, heating valve, and its content of contaminants.|$|E
25|$|Finally, {{in order}} to run the tests, JBehave {{requires}} some plumbing code that identifies the text files which contain scenarios and which inject dependencies (like instances of Game) into the <b>test</b> <b>code.</b> This plumbing code is not illustrated here, since it is a technical requirement of JBehave and does not relate directly {{to the principle of}} BDD-style testing.|$|E
25|$|On 22 May 1974, {{three years}} after Pakistan's defeat in the 1971 Indo-Pakistani conflict, India carried out its first nuclear <b>test,</b> <b>code</b> named Smiling Buddha, near Pakistan's Eastern Border of Sindh. The nuclear test came as a {{surprise}} and caused a great alarm at the Government of Pakistan. On 19 May 1974, in a news conference, Bhutto stressed that India's nuclear program was designed 'to intimidate Pakistan and establish India's hegemony in the subcontinent'.|$|E
5000|$|Offers {{reports on}} {{duplicated}} code, <b>coding</b> standards, unit <b>tests,</b> <b>code</b> coverage, code complexity, comments, bugs, and security vulnerabilities.|$|R
30|$|We have {{selected}} a <b>testing</b> <b>code</b> value.|$|R
50|$|National and {{international}} <b>test</b> <b>codes</b> {{are used to}} standardize the procedures and definitions used in testing large condensors. In the U.S., ASME publishes several performance <b>test</b> <b>codes</b> on condensers and heat exchangers. These include ASME PTC 12.2-2010, Steam Surface Condensers,and PTC 30.1-2007, Air cooled Steam Condensers.|$|R
2500|$|Amateur radio {{operators}} in the United States must be {{licensed by the}} FCC before transmitting. [...] While the FCC maintains control of the written testing standards, it no longer administers the exams, having delegated that function to private volunteer organizations. No amateur license class still requires examination in Morse code; neither the FCC nor the volunteer organizations still <b>test</b> <b>code</b> skills for amateur licenses (commercial license examiners do <b>test</b> <b>code</b> skills for the Radiotelegraph Operator license).|$|E
2500|$|The Ruby {{official}} distribution {{also includes}} irb, an interactive command-line interpreter {{that can be}} used to <b>test</b> <b>code</b> quickly. The following code fragment represents a sample session using irb: ...|$|E
2500|$|The code has {{a method}} for every type of clause in a scenario. JBehave will {{identify}} which method goes with which clause {{through the use of}} annotations and will call each method in order while running through the scenario. The text in each clause in the scenario is expected to match the template text given in the code for that clause (for example, a Given in a scenario is expected to be followed by a clause of the form [...] "a X by Y game"). JBehave supports the matching of clauses to templates and has built-in support for picking terms out of the template and passing them to methods in the <b>test</b> <b>code</b> as parameters. The <b>test</b> <b>code</b> provides an implementation for each clause type in a scenario which interacts with the code that is being tested and performs a test based on the scenario. In this case: ...|$|E
5000|$|... static {{instrumentation}} {{which is}} done upfront, changing the <b>tested</b> <b>code</b> ...|$|R
5000|$|Additional plant <b>test</b> <b>codes</b> {{may be in}} use locally in some areas: ...|$|R
5000|$|Test stub (used for {{providing}} the <b>tested</b> <b>code</b> with [...] "indirect input") ...|$|R
2500|$|This example shows a {{specification}} in readable language {{embedded in}} executable code. In {{this case a}} choice of the tool is to formalize the specification language into {{the language of the}} <b>test</b> <b>code</b> by adding methods named it and should. Also there is the concept of a specification precondition [...] the before section establishes the preconditions that the specification is based on.|$|E
2500|$|Specification testing tools like RSpec and JDave are {{somewhat}} different in nature from tools like JBehave. Since {{they are seen}} as alternatives to basic unit testing tools like JUnit, these tools tend to favor forgoing the separation of story and testing code and prefer embedding the specification directly in the <b>test</b> <b>code</b> instead. For example, an RSpec test for a hashtable might look like this: ...|$|E
50|$|Test {{methods are}} {{declared}} as such by decorating a unit test method with the TestMethod attribute. The attribute {{is used to}} identify methods that contain unit <b>test</b> <b>code.</b> Best practices state that unit test methods should contain only unit <b>test</b> <b>code.</b>|$|E
40|$|The {{visualization}} of statement coverage (C 0) and branch coverage (C 1) measurement output {{can be used}} in several ways to improve the verification and validation process. The result displays are percentage of a successful <b>tested</b> <b>code</b> and visual information with highlighted in bright green as information of executed lines, bright yellow for statement coverage and dark green The web-based testing tool significantly reduces the time for <b>testing</b> the <b>code</b> and help user to understand the behavior of the <b>tested</b> <b>code...</b>|$|R
50|$|Additionally, Insure++ {{will produce}} Linear Code Sequence and Jump Code Coverage metrics for all <b>tested</b> <b>code.</b>|$|R
40|$|Version 0. 8. 0 Issues {{closed by}} this release here. Important additions: 	Items can be shuffled (in and between blocks) now. 	Timed submit buttons {{allow you to}} specify a minimum time in which to submit. 	Item tables can be {{imported}} straight from Google Docs, reducing the edit-download-upload-cycle previously necessary. Makes collaboration easier. 	A proper test mode 	 		you can now create <b>test</b> <b>codes</b> for runs. They're special in that they enable a bar with specific features (auto-filling forms, skipping {{to the next step}} in the run/ending a pause). 		you can now share <b>test</b> <b>codes</b> for runs before releasing the run to the public 		<b>test</b> <b>codes</b> have names like zanyElephant, which allow you to find them again if you're looking for a specific test case 	 	 	the first semblance of an OAuth 2. 0 API (manual activation needed) 	users can turn off emails from your study for a week or forever if you allow them to...|$|R
5000|$|PTC 19.3-1974(R2004): Performance <b>test</b> <b>code</b> for {{temperature}} measurement.|$|E
5000|$|PTC 19.2-2010 : Performance <b>test</b> <b>code</b> for {{pressure}} measurement.|$|E
5000|$|In ABAP Unit {{tests are}} test methods in {{dedicated}} test classes. A test class may contain several test methods. The optional methods SETUP (...) and TEARDOWN (...) offer {{the possibility to}} manage {{the context of the}} unit tests. Usually test classes are local classes within the program under tests. The domain code and the <b>test</b> <b>code</b> share this way the same life cycle and are always in sync. The <b>test</b> <b>code</b> can exercise the domain code of the program but not vice versa. This restriction is checked by ABAP runtime system and ensures the pattern [...] "no <b>test</b> <b>code</b> in productive code".|$|E
50|$|Code {{integrity}} is a measurement used in software testing. It measures the how high {{is the source}} codes quality when it is {{passed on to the}} QA, and is affected by how extensively the <b>code</b> was unit <b>tested</b> and integration <b>tested.</b> <b>Code</b> {{integrity is}} a combination of code coverage and software quality, and is usually achieved by unit <b>testing</b> your <b>code</b> to reach high code coverage.|$|R
40|$|Abstract — This paper {{deals with}} the {{introducing}} of new unit <b>code</b> <b>testing</b> technique called KRS unit <b>code</b> <b>test,</b> and new test approach called KRS approach, the combination of KRS unit <b>code</b> <b>test</b> and KRS approach is called KRS technique of testing. The {{major part of the}} paper is introducing a new way of unit <b>code</b> <b>testing</b> by clubbing of unit <b>code</b> <b>test</b> and Integration test into one unit. In this testing the main aim is to reduce the errors occur in the code and while integration. While in the KRS test approach we try to increase the efficiency of the testing with the help of KRS unit <b>code</b> <b>test.</b> This new approach is built only by considering the KRS unit <b>code</b> <b>test.</b> I...|$|R
50|$|Depending on the organization's {{expectations}} for software development, Development Testing might include static code analysis, data flow analysis, metrics analysis, peer <b>code</b> reviews, unit <b>testing,</b> <b>code</b> coverage analysis, traceability, and other software verification practices.|$|R
5000|$|Interactive console to {{directly}} <b>test</b> <b>code</b> snippets with local and remote execution ...|$|E
5000|$|ISO 4106 is {{an engine}} net power <b>test</b> <b>code</b> {{intended}} for motorcycles.|$|E
5000|$|ISO 1585 is {{an engine}} net power <b>test</b> <b>code</b> {{intended}} for road vehicles.|$|E
50|$|PragmaDev Tester support TTCN-3 {{international}} standard for testing. The tool can simulate the test {{case against the}} SDL model, or <b>testing</b> <b>code</b> can be generated to run against a real SUT (System Under Test).|$|R
40|$|Sponsoring {{organization}} Title and subtitle Hardware Simulation for Testing IEC 61131 - 3 (Hårdvarusimulering för testning av IEC 61131 - 3) <b>Testing</b> {{of control}} <b>code</b> written in IEC 61131 - 3 {{has long been}} a strenuous manual process. The focus in this master's thesis is on building a simulator of an Alfa Laval separator to enable <b>testing</b> of control <b>code.</b> In this particular case, the control <b>code</b> being <b>tested</b> is written and executed in a soft PLC called TwinCAT. The simulator for <b>testing</b> <b>code</b> is written in C#. When <b>testing</b> <b>code,</b> automated <b>tests</b> are preferred because it enables easy regression testing. For this purpose a testing tool using a customized script language has been developed. Testing with a simulator is also beneficial because errors can be found early in the development process, thus reducing the number of errors left to be found when testing on hardware. Comparison tests show that the simulator performs sufficiently well for <b>testing</b> of control <b>code.</b> Keywords Classification system and/or index terms (if any) Supplementary bibliographical information ISSN and key titl...|$|R
30|$|Different {{software}} quality techniques {{have been developed}} including software <b>testing,</b> <b>code</b> reviews, process improvements, risk management, configuration and change management amongst others. These activities can be executed both manually and automatically {{with the aid of}} specialized tools.|$|R
