5|12|Public
5000|$|Xft2 font {{support with}} anti-aliasing, drop shadows of any size, at any offset and at any direction, <b>text</b> <b>rotation.</b>|$|E
50|$|Advertising {{was also}} introduced, {{something}} {{that did not exist}} during the Sportscope era. The oldies music was replaced by modern stock music during <b>text</b> <b>rotation</b> of sports scores and news. The channel also contained a constantly updated ticker {{at the bottom of the}} screen, providing sports news and scores, as it still does today, per its CRTC licence requirements.|$|E
5000|$|Launched in 1994 as Sportscope, {{the channel}} {{began as a}} network {{focusing}} on providing sports scores, airing in seven Canadian provinces. Sportscope's [...] "programming" [...] consisted solely of an alphanumeric <b>text</b> <b>rotation</b> of sports scores, news, and sports betting information, which aired alongside local and national advertising slides. As it did not include any video content, it did not require a CRTC licence.|$|E
50|$|Transformations of text are {{strategies}} to perform geometric transformations on <b>text</b> (reversals, <b>rotations,</b> etc.), particularly in systems {{that do not}} natively support transformation, such as HTML, seven-segment displays and plain text.|$|R
50|$|As {{part of an}} {{improvement}} feature, Project Naptha started work on it and enabling it to support rotated text. However, this function is only limited only up to about 30 degrees. Any <b>text</b> with <b>rotation</b> of more than 30 degrees may become incapable of being copied or translated.|$|R
50|$|Included in the {{framework}} is support for 19 types of screens, with text, forms, maps, calendars, and more, for building applications. Various themes and styles are also supported so the appearance of each screen can be customized. Navigation created with eMobc can be configured with top, bottom, and sidebar menus. The framework also allows for screen <b>rotation,</b> <b>text</b> to speech, and social network sharing.|$|R
5000|$|Besides {{reading the}} Bible {{and being able}} to {{navigate}} to specific locations, Bible Reader can search the Bible using three different search systems (phrase, set of terms, or boolean search query) and immediately jump to related verses using its cross-reference system (by tapping on the verse number). It includes a bookmark system; bookmarks can be assigned to categories, and each category can highlight verses with different colors. Text notes can be added and associated with verses or bookmarks. Two different documents can be displayed simultaneously in parallel windows, which are then kept in sync (these documents can be different translations or commentaries). It can also perform dictionary lookup on double tap of a word, using the Plucker Plugin Interface (PPI) to other programs. Other features include built-in support for Hebrew and Greek fonts, [...] "snapshots" [...] to store search and navigation settings, auto-scrolling, support for display [...] "skins" [...] and plug-ins and <b>text</b> <b>rotation.</b>|$|E
40|$|Hemianopic reading {{impairment}} is {{a consequence}} of a visual field defect to either the right or the left side and is characterized by an increased reading time and reduced reading performance. Depending {{on the side of the}} visual field defect, reading will be affected differently: Patients suffering from a visual field defect to the right side have noticeable difficulties in reading fluently with slowing. Patients suffering from a visual field defect to the left usually struggle to find the beginning of a line and read more fluently. It was suggested in the literature that changing the reading direction from horizontal to vertical may be a training strategy to reduce reading problems in patients with hemianopia. The aim of the study was to investigate the influence of reading direction on reading speed in patients with left- or right-sided visual field defects and in healthy controls. METHOD In 13 patients with hemianopia and in 13 age-matched controls, reading speed was calculated for texts in standard as well as in clockwise rotated orientation of 90, 180, and 270 °. RESULTS In both groups, <b>text</b> <b>rotation</b> reduced reading speed compared to standard reading. Patients with left-sided hemianopia had the greatest reduction after <b>text</b> <b>rotation.</b> Patients with right-sided hemianopia had the smallest speed reduction in 90 ° vertically rotated texts. CONCLUSIONS <b>Text</b> <b>rotation</b> has different effects in left- or right-sided hemianopia patients. For patients with left-sided heminanopia, rotation of the text may not be a helpful training strategy, for right-sided hemianopia vertical rotation of the text of 90 ° may be a beneficial training strategy to reduce reading deficits...|$|E
40|$|Many {{document}} analysis and OCR systems depend on precise identification of page rotation, {{as well as}} the reliable identification of text lines. This paper presents a new algorithm to address both problems. It uses a branch-and-bound approach to globally optimal line finding and simultaneously models the baseline and the descender line under a Gaussian error/robust least square model. Results of applying the algorithm to documents in the University of Washington Database 2 are presented. Keywords: {{document analysis}}, layout analysis, skew detection, page <b>rotation,</b> <b>text</b> line finding, a#ne transformations 1...|$|R
40|$|We give fast {{filtering}} algorithms for searching a 2 [...] dimensional {{pattern in}} a 2 [...] dimensional <b>text</b> allowing any <b>rotation</b> of the pattern. We consider {{the cases of}} exact and approximate matching under several matching models, improving the previous results. For a text of size n Θ n character and a pattern of size m Θ m characters, the exact matching takes average time =m). If we allow k [...] mismatches of characters, then our best algorithm achieves O(n k=m) average time, for reasonable error levels. For large k, we obtain a O(n log m=m) average time algorithm. We generalize the algorithms for the matching model where the sum of absolute differences between characters is at most k...|$|R
40|$|Geometric Algebra (GA) {{is a new}} {{formulation}} of Clifford Algebra that includes vector analysis without notation changes. Most applications of Ga have been in theoretical physics, but GA {{is also a very}} good analysis tool for engineering. As an example, the authors use GA to study pattern rotation in optical systems with multiple mirror reflections. The common ways to analyze pattern rotations are to use rotation matrices or optical ray trace codes, but these are often inconvenient. The authors use GA to develop a simple expression for pattern rotation that is useful for designing or tolerancing pattern rotations in a multiple mirror optical system by inspection. Pattern rotation is used in many optical engineering systems, but it is not normally covered in optical system engineering <b>texts.</b> Pattern <b>rotation</b> is important in optical systems such as: (1) the 192 beam National ignition Facility (NIF), which uses square laser beams in close packed arrays to cut costs; (2) visual optical systems, which use pattern rotation to present the image to the observer in the appropriate orientation, and (3) the UR 90 unstable ring resonator, which uses pattern rotation to fill a rectangular laser gain region and provide a filled-in laser output beam...|$|R
40|$|We present new {{and faster}} {{algorithms}} {{to search for}} a 2 -dimensional pattern in a 2 -dimensional <b>text</b> allowing any <b>rotation</b> of the pattern. This has applications such as image databases and computational biology. We consider the cases of exact and approximate matching under several matching models, using a combinatorial approach that generalizes string matching techniques. We focus on sequential algorithms, where only the pattern can be preprocessed, as well as on indexed algorithms, where the text is preprocessed and an index built on it. On sequential searching we derive average-case lower bounds and then obtain optimal average-case algorithms for all the matching models. At the same time, these algorithms are worst-case optimal. On indexed searching we obtain search time polylogarithmic on the text size, as well as sublinear time in general for approximate searching...|$|R
5000|$|To {{understand}} why this creates more-easily-compressible data, consider transforming a long English text frequently containing the word [...] "the". Sorting the <b>rotations</b> of this <b>text</b> will group <b>rotations</b> starting with [...] "he [...] " [...] together, {{and the last}} character of that rotation (which is also the character before the [...] "he [...] ") will usually be [...] "t", so {{the result of the}} transform would contain a number of [...] "t" [...] characters along with the perhaps less-common exceptions (such as if it contains [...] "Brahe [...] ") mixed in. So {{it can be seen that}} the success of this transform depends upon one value having a high probability of occurring before a sequence, so that in general it needs fairly long samples (a few kilobytes at least) of appropriate data (such as text).|$|R
40|$|Abstract. We give fast {{filtering}} algorithms {{to search}} for a 2 – dimensional pattern in a 2 –dimensional <b>text</b> allowing any <b>rotation</b> of the pattern. We consider the cases of exact and approximate matching under several matching models, improving the previous results. For a text of size n × n characters and a pattern of size m × m characters, the exact matching takes average time O(n 2 log m/m 2), which is optimal. If we allow k mismatches of characters, then our best algorithm achieves O(n 2 k log m/m 2) average time, for reasonable k values. For large k, we obtain an O(n 2 k 3 / 2 √ log m/m) average time algorithm. We generalize the algorithms for the matching model where the sum of absolute differences between characters is at most k. Finally, we show how to make the algorithms optimal in the worst case, achieving the lower bound Ω(n 2 m 3). ...|$|R
40|$|The {{standard}} anatomical {{texts are}} unanimous {{that the primary}} action ofthe psoas muscle is flexion of the hip joint. At {{the same time it}} is usually credited with some secondary rotary action, although there is less agreement about the direction in which this rotation occurs. Basmajian (1958) reviewed the literature in relation to this long-standing controversy and found opinion to be almost equally divided as to whether the secondary action was one of medial or of lateral rotation at the hip. Most of the English <b>texts</b> favour medial <b>rotation</b> (Grant 1948, Gray 1949, Cunningham 1956, Last 1963). It is usually pointed out that although the posterior and medial location of the lesser trochanter might suggest that the pull of the muscle would result in lateral rotation, the axis of rotation of the femur passes through the head and the condyles of the bone and not along its long axis (Fig. 9) so that it lies medial to the insertion of the tendon. Shortening of the muscle must therefore give rise to medial rotation, although it is unlikely that such movement will be very powerful. Basmajian (1958) attempted to assess the functional role of the iliacus muscle by electromyography but he was FIG. 1 FIG. 2 Radiographs ofthe pelvis ofa child with spina bifida and paralytic dislocation ofthe right hip. Figure 1 -Befor...|$|R
40|$|Software {{programs}} have brought about {{significant changes in}} computer technology. There once {{was a time when}} most software programs were only capable of handling very few typo graphic styles and design applications. Graphic importation wasn 2 ̆ 7 t even heard of. But today, there are numerous software programs that are capable of handling unlimited design styles, such color, <b>text</b> wrapping, <b>rotation,</b> and even graphic importation and exportation. Ami Pro is one of those software programs. Ami Pro is a powerful and 2 ̆ 2 user-friendly 2 ̆ 2 software program that was developed by the Lotus Development Corporation for MS DOS Windows. It is primarily used to serve the people in the professional work environment with clean and attractive office documents. Ami Pro has the designing capabilities of many of its software competitors, however, it is capable of something that it competition isn 2 ̆ 7 t; WYSIWYG (What You See Is What You Get). This means that whatever is seen on the computer screen is what is seen on the printed page. Ami Pro {{is also one of the}} few software programs that provides style sheets of various office documents. Style sheets are pre-defined styles or model templatess of several office documents. Style sheets relieve the user from performing repetitive fomatting steps necessary for creating multiple documents of the same type (e. g., memos). Encompassed within each style sheet are clues that visually identify and describe the various levels of each document 2 ̆ 7 s structure or makeup. Title, subhead, and body of text are a few examples of the different types of elements on a page in a document. These clues are also capable of identifying the many levels of type written office documents, given that each type-written document follows the general structure of a specific office document. The text formatting information (design information), integrated with the clues, is responsible for formatting the different levels of text by correcting improper spacing, punctuation, indention, etc. This information helps to make any Ami Pro office document look 2 ̆ 2 prettier. 2 ̆ 2 All together, style sheets, clues, and design information saves the user valuable time, as well as, improves the document 2 ̆ 7 s overall appearance and legibility. This thesis report discussed the development and significance of the author 2 ̆ 7 s clues and design information, and elaborated on the concept behind the three design styles that the author created for each office style sheet displayed in her collection. It also addressed any successes and failures encountered in her thesis project...|$|R

