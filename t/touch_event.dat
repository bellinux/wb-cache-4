39|197|Public
5000|$|... #Caption: Beckham at the LG Mobile Phone <b>Touch</b> <b>event</b> in 2010.|$|E
5000|$|... #Caption: Blair at the LG Mobile Phone <b>Touch</b> <b>event</b> in May 2010 ...|$|E
50|$|The {{first version}} of Cardboard could fit phones with screens up to , and used magnets as input buttons, which {{required}} a compass sensor in the phone. An updated design released at Google I/O 2015 works with phones up to , and replaces the magnet switch with a conductive lever that triggers a <b>touch</b> <b>event</b> on the phone's screen for better compatibility across devices.|$|E
30|$|To prevent <b>touch</b> <b>events</b> {{generated}} by bot programs for click fraud attacks, the most straightforward defense mechanism is to effectively distinguish such <b>events</b> from human-generated <b>touch</b> <b>events</b> and filter out them. To achieve this goal, we first analyze how Android handles with <b>touch</b> <b>events</b> and then suggest a possible reference implementation {{to filter out}} program-generated <b>touch</b> <b>events</b> according to security policies.|$|R
30|$|Before <b>touch</b> <b>events</b> are {{recorded}} at the Device Input <b>Event</b> files, human-generated <b>touch</b> <b>events</b> are processed through Input Driver while program-generated <b>touch</b> <b>events</b> are handled with the evdev_write {{function in the}} evdev.c file. We can develop a filter for program-generated events with this difference—the evdev_write function should be modified. We can accept or reject program-generated <b>touch</b> <b>events</b> before writing them on Device Input Event files depending on the target program’s security policy defined in its Security Policy files. For example, program-generated <b>touch</b> <b>events</b> on a specific rectangle region (for displaying advertisements) can be ignored during the target program is actively running. We suggest that those files can {{be included in the}} ad network’s SDK library and installed with the program itself together. We expect that the existing architecture can be slightly modified to filter out automatically generated <b>touch</b> <b>events</b> by programs without significant loss in efficiency.|$|R
30|$|This work {{seeks to}} solve the above problem by designing, {{implementing}} and evaluating the first pre-IME defense based on 3 key ideas. The defense should ensure that <b>touch</b> <b>events</b> are intercepted before arriving at the system (Key idea 1). Sensitive <b>touch</b> <b>events</b> are never sent to IME apps (Key idea 2). Insensitive <b>touch</b> <b>events</b> should be replayed (Key idea 3).|$|R
50|$|Surface {{acoustic}} wave (SAW) technology uses ultrasonic waves that {{pass over the}} touchscreen panel. When the panel is touched, {{a portion of the}} wave is absorbed. This change in the ultrasonic waves registers the position of the <b>touch</b> <b>event</b> and sends this information to the controller for processing. Surface {{acoustic wave}} touchscreen panels can be damaged by outside elements. Contaminants on the surface can also interfere with the functionality of the touchscreen.|$|E
5000|$|Due to the 2011 Tōhoku {{earthquake}} and tsunami disaster in Japan, all scheduled promotions for their single were cancelled. However, in May 13, 2011, {{they had an}} event commemorating {{the release of the}} [...] "Shock" [...] single. They visited Tokyo and had a High <b>Touch</b> <b>Event</b> with approximately 8000 people in order to give back to the fans who had bought their album back in March. On May 15, 2011, they went to Osaka and greeted about 6000 fans with a high five event.|$|E
50|$|Introduced in 2002, by 3M, {{this system}} uses sensors {{to detect the}} {{piezoelectricity}} in the glass that occurs due to a touch. Complex algorithms then interpret this information and provide the actual location of the touch. The technology claims to be unaffected by dust and other outside elements, including scratches. Since {{there is no need}} for additional elements on screen, it also claims to provide excellent optical clarity. Also, since mechanical vibrations are used to detect a <b>touch</b> <b>event,</b> any object can be used to generate these events, including fingers and stylus. A downside is that after the initial touch the system cannot detect a motionless finger.|$|E
30|$|Whenever <b>touch</b> <b>events</b> occur, all <b>touch</b> {{coordinates}} {{are stacked}} into the record. If {{there are fewer}} touches than the maximum number, 0 is stacked to fill the record. In the case {{that there are no}} records when the <b>touch</b> <b>events</b> start, it takes approximately 5 ms to stack all recorded 20 records {{in order to make a}} distinction. When 20 records already have been stacked, it takes approximately 1 ms for the calculation. If there are no <b>touch</b> <b>events,</b> the records are not stacked. When no touch points are detected, the stacked records expire.|$|R
50|$|The events {{generated}} using a touchscreen {{are commonly}} referred to as <b>touch</b> <b>events</b> or gestures.|$|R
30|$|Our {{key idea}} {{here is to}} design a replay {{mechanism}} and let IME apps work for non-sensitive keystrokes. We designed a daemon thread named replay executor running in System Server process to replay <b>touch</b> <b>events.</b> If some <b>touch</b> <b>events</b> need to be replayed, the pre-IME Guard puts them in a shared memory and then the Replay Executor reads and replays them. We explain the detail as follows.|$|R
5000|$|In December 3, Boyfriend {{released}} the PV’s for their Japanese ‘double single’ [...] "Dance Dance Dance" [...] and [...] "My Lady". The boys held a high <b>touch</b> <b>event</b> {{in celebration of}} their second single album, ‘Kimi to Dance Dance Dance/My Lady‘, on December 1 and 2 at the Kobe World Hall and the Saitama Super Arena. Boyfriend performed for their 1st solo Japanese concert entitled [...] "Love Communication 2012 ~Xmas Bell~". They held 5 concerts at the Tokyo Dome City Hall from December 22 to 24 {{with a total of}} 12,500 fans in all. KBS Joy released a video teaser for Boyfriend's Hello Baby season 7 released on December 27. The members started shooting for the reality series this December, and the first broadcast is planned for January 4 of 2013 at 11PM KST.|$|E
30|$|Problem statement. How to {{fill the}} three {{security}} holes through providing the following security property: the analysis on whether a <b>touch</b> <b>event</b> is a sensitive keystroke will always access the <b>touch</b> <b>event</b> prior to the execution of any IME app code.|$|E
30|$|In Android system, every {{activity}} or service maintains a thread loop to receive touch events or other input events by an input channel. If the Replay Executor intends to replay a <b>touch</b> <b>event</b> directly, {{it needs to}} maintain the input channels and selects which {{activity or}} service will receive the <b>touch</b> <b>event.</b> The selection is based on not only touch coordinates but also window layouts and the current window focus.|$|E
50|$|Apple didn't {{join this}} working group, and delayed W3C {{recommendation}} of its <b>Touch</b> <b>Events</b> Specification by disclosing patents {{late in the}} recommendation process.|$|R
50|$|To {{promote the}} album VIXX held holding Mini Live & High <b>Touch</b> <b>events</b> in Sapporo, Kobe, Tokyo, Osaka and Fukuoka from January 13, 2016 to January 31, 2016.|$|R
30|$|We {{implemented}} {{a prototype of}} our defense framework to filter out program-generated <b>touch</b> <b>events</b> and tested its effectiveness against click fraud attacks on real mobile devices. We modified the Android operating system 5.1. 1 (i.e., the evdev_write function). To simplify implementation, we used a naive security policy to ignore all <b>touch</b> <b>events</b> generated by programs. We tested its feasibility with a Nexus 5 smartphone running the modified operating system against our own CPC bot implementation and a popular automatic click event generation tool called DummySprite ([URL] on Android. Our prototype implementation successfully prevented their attack attempts without incurring significant performance degradation.|$|R
3000|$|Do offset models improve {{touch input}} {{accuracy}} if given extra information of acceleration or gait phase angle {{prior to the}} <b>touch</b> <b>event?</b> [...]...|$|E
30|$|We {{propose a}} new idea “pre-IME”, which {{guarantees}} that “Is this <b>touch</b> <b>event</b> a sensitive keystroke?” analysis will always access user touch events prior to the execution of any IME app code.|$|E
30|$|Non-keystroke touch events. The above {{evaluation}} is about keystrokes, {{but there are}} also non-keystroke touch events which will be intercepted by IM-Visor. With the display information in secure world, we optimized the secure kernel to prevent trapping in user mode in secure world when a non-keystroke <b>touch</b> <b>event</b> happened, that is, when no keyboard is shown, the secure kernel will return to normal world imediately without trapping into the pre-IME guard. The optimized world switch here is only 27 ms and it will not affect the Android <b>touch</b> <b>event</b> system to distinguish user gesture as the default timeout of a long press in Android is 500 ms.|$|E
30|$|We suggest three {{possible}} defense mechanisms: (1) filtering out program-generated <b>touch</b> <b>events</b> (at client side); (2) identifying click fraud attacks with faked advertisement banners (at client side); and (3) detecting anomalous behaviors generated by click fraud attacks (at server side).|$|R
30|$|In general, it is {{necessary}} to learn prior knowledge about specific event sequences for CPA activities in order to automatically generate those sequences against CPA. Surely, it seems to be trickier than implementing the attacks for CPC consisting of <b>touch</b> <b>events</b> with fixed screen positions.|$|R
5000|$|... (b.) Petitioner was {{entitled}} to an order directing the Government to produce for inspection all written reports of the FBI. agents in its possession, and, when orally made, as recorded by the FBI., <b>touching</b> <b>events</b> and activities as to which they testified at trial.|$|R
30|$|Benefits {{retaining}} issue. As an IME app {{does provide}} convenience and extra benefits, in a pre-IME design, we must retain the value added feature for user apps. The key idea of IM-Visor is to replay a keystroke {{as soon as}} the pre-IME Guard determines it as non-sensitive and let the IMEs work for non-sensitive keystrokes. To achieve this, we design replay executor running in System Server process for replay. Specifically, the Replay Executor gets <b>touch</b> <b>event</b> coordinates from the pre-IME Guard and encapsulates them into Android <b>touch</b> <b>event</b> format, then triggers event subsystem to dispatch events to IME apps. Another issue related to replay is that we must replay non-keystroke touch events for the other apps.|$|E
30|$|The results above {{motivate the}} use of {{acceleration}} information as an additional input to the GP to improve the performance of our offset models for walking users. We investigated two methods of incorporating motion-sensitivity into the basic GP. First, we used the n filtered acceleration values leading up to a <b>touch</b> <b>event</b> as additional inputs. Since {{we found that the}} y signal gave the most reliable way of extracting gait phase, we used only that signal and ignored x and z. We experimented with a range of values of n, and found that models using more than 5 samples did not perform significantly differently from those with 5 samples, and so only report on 5 sample models here. The second approach was to use the y phase angle {{at the time of the}} <b>touch</b> <b>event</b> as an additional input.|$|E
40|$|International audienceA compact {{acquisition}} system developed for a flexible large area monoport tactile surface is presented. This sensor requires a single port connection and avoids complicated matrix {{acquisition system}}. The tactile surface is a coplanar transmission line printed on a flexible large area. Touching the waveguide generates a reflected signal analyzed {{to locate the}} <b>touch</b> <b>event.</b> Theoretical background, design and measurements' results are presented to assess the compact acquisition system precisio...|$|E
30|$|Isolation {{ahead of}} IME Translation Issue. In {{existing}} mobile devices, an IME app {{is the first}} entity to receive user <b>touch</b> <b>events,</b> and then translates keystrokes to text. To achieve a pre-IME design, we must recognize sensitive keystrokes and isolate them before an IME app could access them.|$|R
30|$|SystemServer attacks Recently, some {{vulnerabilities}} {{have been}} discovered to attack System Server (Horn 2014; Huang et al. 2015 b; Ren et al. 2015; Shao et al. 2016). But none of them can achieve a control flow hijacking, so malicious code cannot modify hooks in System Server to stop IM-Visor from intercepting <b>touch</b> <b>events.</b>|$|R
50|$|Sencha Touch {{has eight}} in-built {{transition}} effects including slide over {{or under the}} current element, pop, flip, and cube. It supports common touch gestures built from <b>touch</b> <b>events,</b> which are Web standards but supported only by Android, iOS, and some touch enabled devices. These are tap, double tap, swipe, scroll, and pinch.|$|R
30|$|The {{key point}} is that the Replay Executor only {{receives}} touch events from the pre-IME Guard and then triggers event subsystem to complete the “maintain&selection”. As mentioned in “Android IME, Input Method Framework (IMF) and event subsystem” section, an input dispatch thread in WindowManagerService is responsible for touch events dispatching. In most cases, the input dispatch thread sleeps on an input event queue. When a <b>touch</b> <b>event</b> needs to be dispatched, it wakes up and dequeues an event, then selects an activity or service for dispatching. If we can handle this input event queue and wake up the thread when a replay is needed, we are able to let the event subsystem do the “maintain&selection” work. This is exactly how the Replay Executor works. The context of WindowManagerService provides the event queue of input dispatch thread. The Replay Executor encapsulates non-sensitive keystrokes as required Android <b>touch</b> <b>event</b> format and enqueues them. Then it simply wakes up the dispatch thread to do the rest work for our replay. As a related issue, non-keystroke touch events also can be replayed by this way.|$|E
30|$|To address Challenge 1, we {{leveraged}} Trustzone {{and achieved}} interception ahead of IME translation. The isolation mechanism includes detection of soft keyboards, initialization of STIE (Secure Typed Isolation Environment, <b>touch</b> <b>event</b> processing and keystrokes translation, and sensitiveness analysis. To address Challenge 2, {{we built a}} trusted path for sensitive keystrokes {{to be transferred to}} the user app through creating a new IPC between the commit-proxy and the user app. To address Challenge 3, we proposed a keystroke replay mechanism.|$|E
40|$|This paper proposes an {{acoustic}} multi-touch tactile sensing method. The proposed method {{is based on}} an amplitude disturbed ultrasonic wave diffraction pattern. An A 0 Lamb wave transmitted in a thin finite copper plate is processed to provide tactile information, for one or two fingers. A <b>touch</b> <b>event</b> is localized by identifying the diffraction signals among a database of diffracted Lamb wave references. Statistic models are used to improve the localization reliability. An artificial silicone finger is used in the calibration procedure. This touch interface is evaluated as a 2 -touch interface. International audienceThis paper proposes {{an acoustic}} multi-touch tactile sensing method. The proposed method {{is based on an}} amplitude disturbed ultrasonic wave diffraction pattern. An A 0 Lamb wave transmitted in a thin finite copper plate is processed to provide tactile information, for one or two fingers. A <b>touch</b> <b>event</b> is localized by identifying the diffraction signals among a database of diffracted Lamb wave references. Statistic models are used to improve the localization reliability. An artificial silicone finger is used in the calibration procedure. This touch interface is evaluated as a 2 -touch interface...|$|E
50|$|The 2000 film Hey Ram briefly <b>touches</b> upon <b>events</b> {{related to}} the assassination.|$|R
40|$|Abstract. In {{this project}} {{we present a}} {{framework}} for a multi-touch surface using multiple cameras. With an overhead camera and side-mounted camera we determine the three dimensional coordinates of the fingertips and detect <b>touch</b> <b>events.</b> We interpret these events as hand gestures which can be generalized into commands for manipulating applications. We offer an example application of a multi-touch finger painting program. ...|$|R
30|$|First, we need test if user apps and IME apps can run without crashing. To {{implement}} this, {{we first}} download and install the top 10 IME apps from Android Market. Then {{we use the}} Android automated testing tool MonkeyRunner to download 100 user apps from the Android Market. As the <b>touch</b> <b>events</b> triggered by MonkeyRunner are random, we restrict the screen area where <b>touch</b> <b>events</b> can happen based on the location analysis of edit boxes in many user apps. In this way, MonkeyRunner can trigger more keystrokes. For each IME app, we use MonkeyRunner to install and run these 100 user apps. After experiments, we find only 3 user apps crashed {{and none of the}} 10 IME apps crashed. For the 3 crashed user apps, we manually run them in the development board without IM-Visor, however, they still crashed. So we think these 3 user apps crashed because of their bad compatibilities with our development board.|$|R
