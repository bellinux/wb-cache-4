0|10000|Public
5|$|A classic {{error is}} {{the attempt to}} use the equals {{operator}} = {{in combination with the}} keyword NULL to find rows with Nulls. According to the SQL standard this is an invalid <b>syntax</b> and <b>shall</b> lead to an error message or an exception. But most implementations accept <b>the</b> <b>syntax</b> and evaluate such expressions to UNKNOWN. The consequence is that no rows are found - regardless of whether rows with Nulls exist or not. The proposed way to retrieve rows with Nulls is the use of the predicate IS NULL instead of = NULL.|$|R
50|$|Human readability: DDL <b>shall</b> <b>allow</b> DSs and Ds {{to be read}} by humans.|$|R
5000|$|... <b>the</b> <b>syntax</b> of TinyButStrong tags {{does not}} {{interfere}} with <b>the</b> <b>syntax</b> of <b>the</b> template format ...|$|R
50|$|<b>The</b> <b>syntax</b> given {{above is}} a minimal one. However, <b>the</b> <b>syntax</b> may be {{modified}} in various ways.|$|R
30|$|The Recipe Dashboard <b>shall</b> <b>allow</b> to visualize, edit, add and delete recipes {{available}} for the oven.|$|R
5000|$|<b>The</b> <b>syntax</b> of Mirah {{is largely}} {{the same as}} <b>the</b> <b>syntax</b> of Ruby, but with a few {{modifications}} to support static typing: ...|$|R
50|$|The {{specification}} {{of a language}} will specify <b>the</b> <b>syntax</b> <b>the</b> operators it supports, while languages such as Prolog that support programmer-defined operators require that <b>the</b> <b>syntax</b> be defined by the programmer.|$|R
50|$|At times <b>the</b> <b>syntax</b> of {{comparatives}} matches <b>the</b> <b>syntax</b> of coordination, and {{at other}} times, it must be characterized in terms of subordination.|$|R
30|$|The Dashboard for Maintenance which <b>shall</b> <b>allow</b> to {{visualize}} {{and manage the}} status of various components of the oven.|$|R
30|$|Syntax tree {{generation}} Using the tokens from lexer, the parser subsequently checks {{if these}} tokens {{adhere to the}} grammar rules and validates <b>the</b> <b>syntax.</b> If <b>the</b> <b>syntax</b> is valid, <b>the</b> concrete <b>syntax</b> tree will be generated from the selected rules.|$|R
50|$|Compositional capabilities: DDL <b>shall</b> <b>allow</b> new DSs and Ds to {{be created}} and {{existing}} DSs to be modified or extended.|$|R
40|$|Katalin É. Kiss: <b>The</b> <b>syntax</b> of Hungarian. Cambridge University Press, Cambridge, 2002, 278 pp.; Jacqueline Guéron – Jacqueline Lecarme (eds) : <b>The</b> <b>syntax</b> of time (Current Studies in Linguistics 37). MIT Press, Cambridge MA, 2004, 760 pp.; Ken Safir: <b>The</b> <b>syntax</b> of (in) {{dependence}} (Linguistic Inquiry Monograph 44). MIT Press, Cambridge MA 2002, xvi + 194 pp...|$|R
50|$|If the {{language}} uses <b>the</b> attribute <b>syntax</b> <b>the</b> <b>syntax</b> {{may look like}} this.|$|R
50|$|Consist of schema-agnostic queries {{following}} <b>the</b> <b>syntax</b> of {{a structured}} standard (for example SQL, SPARQL). <b>The</b> <b>syntax</b> and semantics of operators are maintained, while different terminologies are used.|$|R
50|$|While the catena {{concept has}} been applied mainly to <b>the</b> <b>syntax</b> of English, other works are also demonstrating its {{applicability}} to <b>the</b> <b>syntax</b> and morphology of other languages.|$|R
30|$|SRS 30. The tool <b>shall</b> <b>allow</b> the display, or {{method of}} {{presentation}} of the content, to be transformed using [styling mechanisms].|$|R
40|$|<b>The</b> Arden <b>Syntax</b> {{for sharing}} medical {{knowledge}} bases is described. Its current {{focus is on}} knowledge that is represented {{as a set of}} independent modules that can provide therapeutic suggestions, alerts, diagnosis scores, etc. <b>The</b> <b>syntax</b> is based largely upon HELP and the Regenstrief Medical Record System. Each module, called a Medical Logic Module or MLM, is made of slots grouped into maintenance, library, and knowledge categories. <b>The</b> <b>syntax</b> has provisions for querying a clinical database and representing time. Several clinical information systems were analyzed and appear to be compatible with <b>the</b> <b>syntax.</b> <b>The</b> <b>syntax</b> has been tested for syntactic ambiguities using the tools lex and yacc. Four institutions are currently in the process of adopting <b>the</b> Arden <b>Syntax</b> for their decision-support systems...|$|R
5000|$|<b>The</b> <b>syntax</b> {{and overall}} {{concept of the}} Apache Velocity {{templates}} is similar to <b>the</b> <b>syntax</b> of <b>the</b> older WebMacro template engine, which is now also an open source project.|$|R
30|$|SRS 4. The tool <b>shall</b> <b>allow</b> {{the user}} to create a {{personal}} needs and preferences (PNP) description by means of [PNP description].|$|R
50|$|This article {{can only}} give a few very simple {{examples}} on <b>the</b> <b>syntax,</b> for flavour. Linguistic work on <b>the</b> <b>syntax</b> of Taiwanese {{is still a}} (quite nascent) scholarly topic being explored.|$|R
2500|$|<b>The</b> <b>syntax</b> of second-order logic tells which {{expressions}} {{are well}} formed formulas. In addition to <b>the</b> <b>syntax</b> of first-order logic, second-order logic includes many new sorts (sometimes called types) of variables. These are: ...|$|R
5000|$|BNF, or Backus-Naur form, {{describes}} <b>the</b> <b>syntax</b> of [...] "sentences" [...] of {{a language}} and was used for <b>the</b> <b>syntax</b> of Algol 60 by John Backus. The ideas derive from the Context Free Grammar concepts by Noam Chomsky, a linguist. [...] "BNF and its extensions have become standard tools for describing <b>the</b> <b>syntax</b> of programming notations, {{and in many cases}} parts of compilers are generated automatically from a BNF description." ...|$|R
50|$|<b>The</b> <b>syntax</b> of OS JCL {{is similar}} to <b>the</b> <b>syntax</b> of macros in System/360 {{assembly}} language, and would therefore have been familiar to programmers {{at a time when}} many programs were coded in assembly language.|$|R
5000|$|<b>The</b> <b>syntax</b> of {{comparatives}} can closely mirror <b>the</b> <b>syntax</b> of coordination. <b>The</b> {{similarity in}} structure across the following a- and b-sentences illustrates this point. The conjuncts of the coordinate structures are enclosed in square brackets: ...|$|R
50|$|There is {{an upgrade}} ongoing, where bridges replace level {{crossings}} and a bypass of the centre city of Hofuf. This <b>shall</b> <b>allow</b> 200 km/h speed.|$|R
5000|$|<b>The</b> <b>syntax</b> {{definition}} uses <b>the</b> Seed7 Structured <b>Syntax</b> Description (S7SSD). A S7SSD statement like ...|$|R
50|$|<b>The</b> precise <b>syntax</b> {{for regular}} {{expressions}} varies among tools and with context; more detail {{is given in}} <b>the</b> <b>Syntax</b> section.|$|R
5000|$|... lfun : An lfun, or [...] "local function", {{is defined}} by a {{blueprint}} object. (Clones have the same function set as their blueprint.) They are written in LPC. Functions in a given object can call other functions within the same object using <b>the</b> <b>syntax</b> , while functions in other objects are usually called with <b>the</b> <b>syntax</b> [...] Overloaded lfuns defined in objects one is inheriting can be called with <b>the</b> <b>syntax</b> [...] or [...]|$|R
50|$|Ghomeshi {{also does}} {{research}} in theoretical <b>syntax,</b> including <b>the</b> <b>syntax</b> of Persian, and the interfaces with pragmatics and morphology. She is co-editor of a book, with Ileana Paul and Martina Wiltschko, on cross-linguistic universals and variation in <b>the</b> <b>syntax</b> of determiners.|$|R
5000|$|... {{waits for}} the timer t to exceed the value of time before {{reacting}} to it. The value of t is discarded with <b>the</b> <b>syntax</b> :> void, {{but it can be}} assigned to a variable x with <b>the</b> <b>syntax</b> :> int x.|$|R
6000|$|... "But I shall. You cannot {{suppose that}} I <b>shall</b> <b>allow</b> {{such a man}} as that to tamper with my name without noticing it! It is my {{business}} now." ...|$|R
30|$|SRS 5.1. The tool <b>shall</b> <b>allow</b> {{the user}} to {{customise}} it to their personal needs (individualisation), adapting the contents and navigation according to the user group or role.|$|R
40|$|Abstract. This {{document}} describes part of {{an effort}} to achieve in Nuprl a practical reflection of its expression syntax. This reflection is done at the granularity of the operators; in particular, each operator of <b>the</b> <b>syntax</b> is denoted by another operator of <b>the</b> same <b>syntax.</b> Further, <b>the</b> <b>syntax</b> has binding operators, and we organize reflection not around <b>the</b> concrete binding <b>syntax,</b> but instead, around <b>the</b> abstract higher-order <b>syntax.</b> We formulate and prove the correctness of a core rule for inferring well-formedness of instances of operator-denoting operators. ...|$|R
40|$|C program syntax, {{optionally}} annotated with meta-annotations. <b>The</b> <b>syntax</b> of meta-annotations is {{the same}} across all target languages. In each case, <b>the</b> <b>syntax</b> of <b>the</b> basi c metalanguage is <b>the</b> <b>syntax</b> of <b>the</b> language itself, and <b>the</b> <b>syntax</b> of <b>the</b> meta-annotations is <b>the</b> <b>syntax</b> of *. <b>The</b> target language can be any programming or specification language with a formal syntax. 2. By-example Metaprogramming In *, every program written in a target language is a metaprogram unconditionally generating itself. Thus every C program is automatically a C program, and every Prolog program is a Prolog program. Syntactically contained program fragments (for example, declarations, statements, and so on) are also in general metaprograms for themselves. The addition of meta-annotations to a metaprogram attaches the metaprogram to the design database and makes generation of the annotated parts conditional on the facts in the database. The range of affected code dependent on a design condition is denot...|$|R
50|$|Objective-C derives its object syntax from Smalltalk. All of <b>the</b> <b>syntax</b> for non-object-oriented {{operations}} (including primitive variables, pre-processing, expressions, function declarations, {{and function}} calls) are {{identical to those}} of C, while <b>the</b> <b>syntax</b> for object-oriented features is an implementation of Smalltalk-style messaging.|$|R
50|$|<b>The</b> <b>syntax</b> allows pseudo-naming of arguments.|$|R
