9|5|Public
50|$|The Rolls-Royce RB.39 Clyde was Rolls-Royce's first purpose-designed {{turboprop}} {{engine and}} the first turboprop engine to pass its civil and military <b>type-tests.</b>|$|E
40|$|Thesis (M. Sc.) -University of KwaZulu-Natal, Durban, 2004. Low-voltage {{switchgear}} and controlgear assemblies with a rated short-circuit withstand strength above 10 kA, are required, by law, {{to conform}} to the South African standard, SANS 1473 - 1 (Low Voltage Switchgear and Controlgear Assemblies: Part 1 : Typetested, partially type-tested and specially tested assemblies with rated short-circuit withstand strength above lOkA). Standard SANS 1473 - 1 stipulates three categories of assemblies i. e. type-tested, partially type-tested and specially tested assemblies. The specially tested assembly is unique to the South African market, while the other two categories are stipulated in standard SANS IEC 60439 - 1 (Low Voltage Switchgear and Controlgear Assemblies: Part 1 : Type-tested and partially type-tested assemblies), which is internationally accepted in many countries as the applicable low-voltage assembly standard. Standard SANS 1473 - 1 specifies seven <b>type-tests</b> for certification as a type-tested assembly (TTA), but specifies, at most, three <b>type-tests</b> for certification as a specially tested assembly (STA). The underlying purpose of a technical standard is to provide for the safety of people and property, with the purpose of the research being twofold: 1. To investigate if the testing requirements specified for a specially tested assembly (STA), in accordance with standard SANS 1473 - 1, are correctly applied, and do not pose any safety risks. 2. To investigate any safety risks that stem from the fact that four <b>type-tests</b> are excluded for verification as a specially tested assembly (STA), as opposed to the seven type tests required for verification as a type-tested assembly (TTA). The document highlights the technical inadequacies of an assembly that is certified as a STA, in accordance with standard SANS 1473 - 1, and the potential safety risks associated with this type of assembly classification...|$|E
40|$|The diploma {{thesis is}} {{dedicated}} to modern kiosk-type transformer substations PET, that are used when modernizing distribution network. Since such substations are placed on publicly accessible places {{it is really important}} that they are safe for service staff {{as well as for the}} public. Apart from the highest characteristic values stress is put upon the safety. Right construction, functionality and safety is verified using the <b>type-tests</b> as stated in ČSN EN 62271 - 202. In the last part of the thesis there are the methods and procedures of type-testing described...|$|E
5000|$|CE marking is a {{self-certification}} scheme. Retailers sometimes {{refer to}} products as [...] "CE approved", but the mark does not actually signify approval. Certain {{categories of products}} require <b>type-testing</b> by an independent body to ensure conformity with relevant technical standards, but CE marking in itself does not certify {{that this has been}} done.|$|R
50|$|Bristol {{maintained}} the Centaurus from <b>type-testing</b> in 1938 but production {{did not start}} until 1942 owing {{to the need to}} get the Hercules into production and improve the reliability of the entire engine line. Nor was there any real need for the larger engine at this early point in the war, when most military aircraft designs were intended to mount engines around 1,000 hp. The Hercules' approximately 1,500 hp was better suited to the existing airframes.|$|R
40|$|The {{main goal}} of my bachelor's thesis is to descriebe the CAD {{systems that are}} used by {{engineers}} to design the electric switchboard and the electric network. In my thesis I descriebed the main options of these systems. The other thing is which data formats are supported for data export and import. In {{the second part of}} my thesis I'm dealing with designing the electric switchboard and his <b>type-testing.</b> I'm only interested in the thermal and short circuit endurance during the designing part and during the switchboards testing part as well...|$|R
40|$|We present Dependent JavaScript (DJS), a statically typed dialect of the imperative, object-oriented, dynamic language. DJS {{supports}} the particularly challenging {{features such as}} run-time <b>type-tests,</b> higher-order functions, extensible objects, prototype inheritance, and arrays {{through a combination of}} nested refinement types, strong updates to the heap, and heap unrolling to precisely track prototype hierarchies. With our implementation of DJS, we demonstrate that the type system is expressive enough to reason about a variety of tricky idioms found in small examples drawn from several sources, including the popular book JavaScript: The Good Parts and the SunSpider benchmark suite...|$|E
40|$|This paper {{presents}} {{the development of}} a complete mobile fog chamber system, which encompasses the aspects of electronic instrumentation, video recording, fog generation system, high-voltage source, data acquisition system and monitoring instrument. The chamber has all the basic features to conduct <b>type-tests</b> on insulator of ceramic and nonceramic type in an environment of artificially polluted condition. The design and construction of this chamber was simple, effective and efficient. The experience and insight gained in the present work is expected to benefit others. IVAT (Institute of High Voltage and Current) can be considered as resource centre of the subject. 1...|$|E
40|$|International audienceWe {{show how}} modern proof environments {{comprising}} code generators andreflection facilities {{can be used}} for the effective construction of atool for OCL. For this end, we define a UML/OCL meta-model in HOL, ameta-model for Isabelle/HOL in HOL, and a compiling function betweenthem over the vocabulary of the libraries provided by FeatherweightOCL. We use the code generator of Isabelle to generate executable codefor the compiler, which is bound to a USE tool-like syntax integratedin Isabelle/Featherweight OCL. It generates for an arbitrary classmodel an object-oriented datatype theory and proves the relevantproperties for casts, <b>type-tests,</b> constructors and selectorsautomatically...|$|E
50|$|A {{breadboard}} {{or other}} prototype {{version of the}} design for testing against specification may be built. It may involve the making of any alterations to the circuit to achieve compliance. A choice as to a method of construction {{as well as all}} the parts and materials to be used must be made. There is a presentation of component and layout information to draughtspersons, and layout and mechanical engineers, for prototype production. This is followed by the testing or <b>type-testing</b> a number of prototypes to ensure compliance with customer requirements. Usually there is a signing and approval of the final manufacturing drawings and there may be post-design services (obsolescence of components etc.).|$|R
40|$|The {{adaption}} of {{the functional}} characterization of asphalt concrete mixtures by the Dutch authorities, {{led to a}} big necessity in acquiring a fundamental understanding on its properties. In order to achieve this, the long-term project NL-Lab was initiated by InfraQuest in 2012. With the advantage of its longevity and the multiple parties contributing with material, testing and analysing, the knowledge aimed for, is gradually accumulating with the time passing. After 5 years of running, {{a considerable number of}} data have been collected and analysed, leading to many observations, that in turn raised questions and doubts. These doubts are the subject of this research, focusing on the functional characteristics of water sensitivity and permanent deformation. A common problem for both properties regards the production and compaction of <b>type-testing</b> specimens. The practice so far suggests both stages to take place in laboratory conditions. However, there were indications that the performance of the same asphalt mixtures taken from the field instead of the lab, differed. Testing and comparing in terms of water sensitivity and permanent deformation, these indications were indeed repeated. Lab and field specimens did not match in performance in the majority of the tests, suggesting that differences between the two conditions are projected in differences in performance. The second common problem also evolves around the <b>type-testing,</b> this time regarding the test procedure as a whole. It is a highly time and money consuming process that has to be repeated in a trial-and-error manner, until a satisfying mixture in terms of performance is found. The aim of this research was to limit this process as much as possible by replacing it with regression relations. For the water sensitivity test, the relations obtained were of a fairly good predicting quality, and could be eventually used in the preliminary mixture design. The permanent deformation relations however, were at low levels of predictability, due to the test’s high sensitivity in being reproduced and the inconsistent test setups used by the various contractors taking part in the project. Focusing only on water sensitivity, the conditioning protocol described in the current standard, is considered as not very capable of capturing the property it aims for, and that it is conservative in the damage it causes to the mixture. Utilizing two conditioning protocols, MIST and Freeze-Thaw protocol, the standard method indeed was found to be the least damaging of all. With the MIST being the most destructive, at extreme levels in most cases, and the Freeze-Thaw following it, each method’s pros and cons were found. The last aspect tested referred to the friction reduction method used during the permanent deformation test (triaxial cyclic compression). The old and new standard versions both prescribe two different materials, while the requirements for rutting remained unchanged. Testing using these two materials, Teflon and Latex, plus one new, {{it was found that the}} differences in the triaxial test output were major. Consequently, this mismatch means that inconsistent comparisons take place, leading to conclusions on rutting performance not representative of the actual situation. NL-La...|$|R
40|$|Abstract We {{show how}} modern proof environments {{comprising}} code generators and reflection facilities {{can be used}} for the effective construc-tion of a tool for OCL. For this end, we define a UML/OCL meta-model in HOL, a meta-model for Isabelle/HOL in HOL, and a compiling function between them over the vocabulary of the libraries provided by Feather-weight OCL. We use the code generator of Isabelle to generate executable code for the compiler, which is bound to a USE tool-like syntax integrated in Isabelle/Featherweight OCL. It generates for an arbitrary class model an object-oriented datatype theory and proves the relevant properties for casts, <b>type-tests,</b> constructors and selectors automatically...|$|E
40|$|Abstract. In {{this paper}} {{we present a}} new {{technique}} for automatically verifying typing constraints {{in the setting of}} a first-order data processing language with refinement types and dynamic <b>type-tests.</b> We achieve this by translating programs into a standard while language and then using a general-purpose verification tool. Our translation generates assertions in the while program that faithfully represent the sophisticated typing constraints in the original program. We use a generic verification condition generator together with an SMT solver to prove statically that these assertions succeed in all executions. We formalise our translation algorithm using an interactive theorem prover and provide a machine-checkable proof of its soundness. We provide a prototype implementation using Boogie and Z 3 that can already be used to efficiently verify a large number of test programs. ...|$|E
40|$|This thesis {{investigates the}} {{relationship}} between a type system and a general-purpose ver-iϐication tool. We aim to statically verify typing constraints for a ϐirst-order functional lan-guage featuring dynamic <b>type-tests</b> and reϐinement types by translating the code to a stan-dard while language with assertions. Our translation generates assertions {{in such a way that}} they express the same constraints in thewhile program as the typing constraints in the original program. We use a generic veriϐication condition generator together with an SMT solver to prove statically that these assertions succeed in all executions. We formalise our translation algorithmusing an interactive theoremprover andprovide amachine checkable proof of its soundness. Additionally, we provide a prototype implementation using Boogie (a generic veriϐication condition generation back-end) and Z 3 (an efϐicient SMT solver) that can already be used to verify a large number of test programs. Acknowledgements I would like to thank Michael Backes for again letting me write a thesis at his chair. After having successfully completed my Bachelor’s thesis at his chair, I know how much effor...|$|E

