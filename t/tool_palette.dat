22|38|Public
5000|$|... eBeam Workspace - Business {{software}} for presenting, interacting with and sharing meeting content - includes eBeam <b>Tool</b> <b>Palette.</b>|$|E
50|$|Any {{user action}} with the editor can {{generate}} a request. The {{nature of the}} request is understood by the context of invocation. The context {{is determined by the}} EditPart the user interacts with and the active tool. The tool can be any selected entry in a <b>tool</b> <b>palette.</b> The request is handed over to the selected EditPart, which in turn returns a Command.|$|E
5000|$|... eBeam Education Suite - Combines three apps {{including}} eBeam Home {{for organizing}} files, folders, links and apps, eBeam Scrapbook with unlimited digital whiteboards and built-in curriculum resources and teaching tools including real-time whiteboard sharing, and eBeam <b>Tool</b> <b>Palette</b> a floating circular palette for presenting, annotating, screen recording and sharing notes, presentations, images and web pages on a Mac, Windows or Linux computer.|$|E
50|$|JBoss <b>Tools</b> <b>Palette.</b> The JBoss <b>Tools</b> <b>Palette</b> {{contains}} a developer’s project tag libraries and enables inserting tags into a JSP with one click. The <b>Tools</b> <b>Palette</b> supports custom and 3rd party tags.|$|R
40|$|This paper {{describes}} how non [...] speech sounds {{can be used}} to improve the usability of a graphics package. Sound was specifically used to aid problems with <b>tool</b> <b>palettes</b> and finding the current mouse coordinates when drawing. <b>Tool</b> <b>palettes</b> have usability problems because users need to see the information they present but they are often outside the area of visual focus. An experiment was conducted to investigate the effectiveness of adding sound to <b>tool</b> <b>palettes.</b> Earcons were used to indicate the current tool and when tool changes occurred. Results showed a significant {{reduction in the number of}} tasks performed with the wrong tool. Therefore users knew what the current tool was and did not try to perform tasks with the wrong tool. All of this was not at the expense of making the interface any more annoying to us...|$|R
5000|$|The various Glade <b>Tools</b> (<b>palette,</b> editor, etc.) are {{implemented}} as widgets. This allows for easier integration in [...] like Anjuta, {{and makes it}} easier to change the Glade UI.|$|R
5000|$|A <b>tool</b> <b>palette,</b> a {{rectangular}} area, called a palette window, {{of the application}} screen with buttons, icons or another GUI controls available for quick command or symbol access; if the user is able to place it anywhere by moving it through a mouse or similar pointing device, it {{is known as a}} floating palette. A palette for choosing colors can be also a floating palette.|$|E
50|$|First, SAI {{includes}} several tools {{for creating a}} selection, but only the rectangular (rubber band) selection tool shows the transformation options. But {{it does not matter}} how a selection is initially created, selecting the rectangular selection tool will then show the transformation options which will work fine with it. Effectively the 'rectangular selection' tool button (a dotted rectangle in the <b>tool</b> <b>palette)</b> is also the 'make transform tools visible' tool button.|$|E
5000|$|Cooper’s {{dynamically}} installable control facility, {{which became}} famous as the “VBX” interface, was a well-known component of [...] "Ruby". This innovation allowed any 3rd party developer {{to write a}} widget (control) as a DLL, {{put it in the}} Visual Basic directory, and Visual Basic would find it, communicate with it, and present it to the user as a seamless part of the program. The widget would appear in the <b>tool</b> <b>palette</b> and appropriate menus, and users could incorporate it into their Visual Basic applications. The invention of the “VBX” interface created an entire new marketplace for vendors of these “dynamically installable controls.” As a result of Cooper’s work, many new software companies were able to deliver Windows software to market in the 1990s.|$|E
5000|$|... #Caption: Animation of Cobalt's Drafting Assistant, which {{facilitates}} the alignment {{and creation of}} new geometry. Two <b>tool</b> <b>palettes</b> {{can be seen at}} left: the [...] "Tools" [...] palette with wireframe primitives (far left), and the [...] "Solids" [...] palette to its right ...|$|R
40|$|Transparency {{can be used}} to {{increase}} the visibility of a user’s workspace in situations where the space is obscured by floating windows and <b>tool</b> <b>palettes.</b> Dynamic transparency takes this approach further by making components more transparent when the user’s cursor is far away. However, dynamic transparency may make palettes and floating windows more difficult to target. We carried out a study to test the effects of different types of dynamic transparency on targeting performance. We found that although targeting time does increase as targets become more transparent, the increases are small – often less than ten percent. Our study suggests reasonable maximum, minimum, and default transparency levels for designers of dynamic transparency schemes. Key words: interface transparency, dynamic transparency, <b>tool</b> <b>palettes,</b> visual workspaces [...] ...|$|R
40|$|Presented at the 4 th International Conference on Auditory Display (ICAD), Palo Alto, California, November 2 - 5, 1997. This paper {{describes}} an experiment {{to investigate the}} effectiveness of adding sound to <b>tool</b> <b>palettes.</b> Palettes have usability problems because users {{need to see the}} information they present but they are often outside the area of visual focus. We used non-speech sounds called earcons to indicate the current tool and when tool changes occurred so that users could tell what tool they were in wherever they were looking. Results showed a significant {{reduction in the number of}} tasks performed with the wrong tool. Therefore users knew what the current tool was and did not try to perform tasks with the wrong tool. All of this was not at the expense of making the <b>tool</b> <b>palettes</b> any more annoying to use...|$|R
40|$|This paper {{evaluates the}} {{performance}} characteristics of FlowMenu, {{a new type}} of pop-up menu mixing command and direct manipulation [8]. FlowMenu was compared with marking menus [12] on a simple selection task, and with <b>tool</b> <b>palette</b> selection [11] on a task that combined selection with drawing. Our results compared with those in previous experiments [11] indicate that Flowmenu offers as much of an advantage over <b>tool</b> <b>palette</b> selection as does Toolglass [2], a twohanded technique. At the same time, it is not significantly slower than marking menus. Additional results show that selection performance depends on distance around the menu, but not on initial position or direction. These results provide a guide for the design of high-performance menu configurations. Keywords: FlowMenu, marking menu, <b>tool</b> <b>palette,</b> Toolglass, empirical studies...|$|E
40|$|MasterThis thesis proposes both {{algorithmic}} {{foundation and}} practical implementation of an user interface, named haptic <b>tool</b> <b>palette,</b> for multitasking haptic interface of robot simulation {{and develop the}} robot modeling tool, named rBuilder, for modeling haptic tools as robot and virtual environment for robot simulation. Virtual coupling methods is used for haptic rendering and TCP/IP network layer is used for connecting to the remotely located virtual environment. Then, multitasking haptic interface are implemented by applying haptic <b>tool</b> <b>palette</b> system as tool brushes of graphics tools. There are two original contributions of the current approach. The first is that haptic operator can do multiple tasks in the same simulation using only one haptic device by changing haptic tool. The second is that the tool for modeling makes the modeling virtual robot and virtual environment easy. The algorithms are implemented using C++, and its usability has been tested {{through a series of}} simulation examples...|$|E
40|$|This paper {{presents}} {{a review of}} the research surrounding the paper “The Design and Evaluation of a Sonically-Enhanced <b>Tool</b> <b>Palette</b> ” by Brewster and Clarke from ICAD 1997. A historical perspective is given followed by a discussion of how this work has fed into current developments in the area. Categories and Subject Descriptors: H. 5. 2 [User Interfaces]: Auditory (non-speech) feedbac...|$|E
50|$|The windows {{which show}} the history, the <b>tools</b> <b>palette,</b> the {{properties}} of the selected object are around the figure and never above it. These windows are not modal windows {{in the sense that they}} never hide the construction. For example, whenever the user wants to change the color of a polygon, he sees the new color immediately.|$|R
40|$|We {{describe}} local tools, {{a general}} interaction technique that replaces traditional <b>tool</b> <b>palettes.</b> A collection of tools {{sit on the}} worksurface along with the data. Each tool can be picked up (where it replaces the cursor), used, and then put down anywhere on the worksurface. There is a toolbox for organizing the tools. These local tools were implemented in Pad++ as part of KidPad, an application for children. INTRODUCTION Sitting at a desk, many people find that they work with several tools simultaneously. Perhaps they have a pencil, a red pen, a stapler, or some paper clips - all on their worksurface together. This is a very natural way to work, yet most computer interfaces don't support this style of interaction. Rather, traditional computer <b>tool</b> <b>palettes</b> allow only a single tool to be active at a time. In the real world, this would be equivalent to being forced to put away every tool before another could be used. In the Pad++ research group at the University of New Mexico, we have [...] ...|$|R
5000|$|Modern, ease-to-use user {{interface}} with <b>tool</b> and color <b>palettes.</b>|$|R
40|$|The central {{research}} issue {{addressed by}} {{this paper is}} how we can design computer interfaces that better support human attention and better maintain the fluency of work. To accomplish this we propose to use semi-transparent user interface objects. This paper reports on an experimental evaluation which provides both valuable insights into design parameters and suggests a systematic evaluation methodology. For this study, we used a variablytransparent <b>tool</b> <b>palette</b> superimposed over different background content, combining text, wire-frame or line art images, and solid images. The experiment explores the issue of focused attention and interference, by varying both visual distinctiveness and levels of transparency...|$|E
40|$|Icons {{are used}} {{increasingly}} in interfaces {{because they are}} compact "universal" pictographic representations of computer functionality and processing. Animated icons can bring to life symbols representing complete applications or functions within an application, thereby clarifying their meaning, demonstrating their capabilities, and even explaining their method of use. To test this hypothesis, we carried out an iterative design {{of a set of}} animated painting icons that appear in the HyperCard <b>tool</b> <b>palette.</b> The design discipline restricted the animations to 10 to 20 second sequences of 22 x 20 pixel bit maps. User testing was carded out on two interfaces [...] one with the static icons, one with the animated icons. The results showed significant benefit from the animations in clarifying the purpose and functionality of the icons...|$|E
40|$|In this paper, {{we propose}} a multiple-device {{approach}} for sup-porting informal meetings using a digital whiteboard. Tradi-tional digital whiteboard systems often {{suffer from a}} limited capability to enter text and the handling of existing data. The large display surface of the whiteboard also makes traditional GUI design ineffective. Our proposed approach provides a hand-held computer for each participant {{which serves as a}} <b>tool</b> <b>palette</b> and data entry palette for the whiteboard. Just as an oil painter effectively uses a palette in his/her hand, this hand-held device offers an easy way to create a new tex-t/stroke object, to select existing data from a network, to select pen attributes, and to control the whiteboard application. This paper also reports our experience with the digital whiteboard systems using a proposed multi-device architecture...|$|E
40|$|This paper {{describes}} an experiment {{to investigate the}} effectiveness of adding sound to <b>tool</b> <b>palettes.</b> Palette shave usability problems because users {{need to see the}} information they present but they are often outside the area of visual focus. Non-speech sounds called earcons were used to indicate the current tool and tool changes so that users could tell what tool was in use, wherever they were looking. Experimental results showed a significant {{reduction in the number of}} tasks performed with the wrong tool. Users knew what the current tool was and did not try to perform tasks with the wrong one...|$|R
50|$|The workbooks (see below) can be {{exported}} as html files, with {{a restricted}} <b>tools</b> <b>palette</b> (for example, {{leaving only the}} intersection and circle tools lets the pupil make compass-only construction). To create an assignment, the teacher chooses the initial objects, the objects to be created by the pupil, and writes a text explaining {{what is to be}} done. Since 2010, when the pupil has finished the construction and wants to test it, random variations are tested (with a tool called Monkey) and a quality note is attributed to the pupil (actually, a percentage of the good constructions amongst the variations).|$|R
5000|$|In {{the late}} 1980s Claris started a massive upgrade series {{to produce the}} [...] "Pro" [...] line of products. The main change would be to {{integrate}} all of their products with a consistent GUI based on that of FileMaker. This included a common toolbar bar running down {{the left side of}} the screen, and a number of standardized <b>tool</b> <b>palettes.</b> In addition, the Pro series also used common international spelling dictionaries and a thesaurus. The result was a suite of products that all looked and worked the same way, and were able to read and write each other's formats.|$|R
40|$|Nowadays, {{there is}} a growing demand to design user {{interfaces}} that run on many devices. However, existing multi-device design approaches are not suitable for domain experts, whose input can be invaluable to come to a suitable user interface for a specific domain. Existing techniques often require the manipulation of high-level models and transformations which are difficult to interpret and predict by a domain expert without a technical background. We present Meta-GUI-Builders, a new generation of graphical user interface builder tools that allows domain experts to create multi-device GUI designs themselves. These tools automatically adapt their workspace to a specific domain by encapsulating domain-specific elements in the designer's <b>tool</b> <b>palette.</b> Engaging domain experts in a multi-device design approach is a first step towards creating aesthetic user interfaces that can be deployed on many devices, a combination that is hard to achieve with previous approaches...|$|E
40|$|Most users do not {{experience}} {{the same level}} of fluency in their interactions with computers that they do with physical objects in their daily life. We believe that much of this results from the limitations of unimodal interaction. Previous efforts in the haptics literature to remedy those limitations have been creative and numerous, but have failed to produce substantial improvements in human performance. This paper presents a new approach, whereby haptic interaction techniques are designed from scratch, in explicit consideration of {{the strengths and weaknesses of}} the haptic and motor systems. We introduce a haptic alternative to the <b>tool</b> <b>palette,</b> called Pokespace, which follows this approach. Two studies (6 and 12 participants) conducted with Pokespace found no performance improvement over a traditional interface, but showed that participants learned to use the interface proficiently after about 10 minutes, and could do so without visual attention. The studies also suggested several improvements to our design. ACM Classification H 5. 2 [Information interfaces an...|$|E
40|$|Designers of human-computer {{interfaces}} often overlook {{issues of}} affect. An example illustrating {{the importance of}} affective design is the frustration many of us feel when working with a poorly designed computing device. Redesigning such computing interfaces to induce more pleasant user emotional responses would improve the user’s health and productivity. Almost no {{research has been conducted}} to explore affective responses in rendered haptic interfaces. In this paper, we describe results and analysis from two user studies {{as a starting point for}} future systematic evaluation and design of rendered physical controls. Specifically, we compare and contrast self-report and biometric measurement techniques for two common types of haptic interactions. First, we explore the tactility of real textures such as silk, putty, and acrylic. Second, we explore the kinesthetics of physical control renderings such as friction and inertia. We focus on evaluation methodology, on the premise that good affect evaluation and analysis cycles can be a useful element of the interface designer’s <b>tool</b> <b>palette...</b>|$|E
40|$|Currently, {{while there}} is a large {{selection}} of education physics programs available, few present an inclusive approach to physics simulation. Those that do are usually hard to use and/or very expensive to purchase and keep updated. To address this our goal is to develop a low–cost set of modular physics tools using the OpenDoc Framework [1] that are easy to use and customize, allowing both students and educators to set up simulations of various force–based problems. <b>Tool</b> <b>palettes</b> will be modular so that a simulation can be customized for the specific problem, thus hiding unwanted complexity from the student. Also “cameras” can be placed in the system to provide multiple frames of reference when viewing the simulation...|$|R
50|$|The {{painting}} shows a {{time when}} painters took themselves seriously as working artists. The image of Blunck standing in a packed room surrounded by his <b>tools,</b> paintbox, <b>palette</b> and easel, skull and sketchpad, signals that his work is serious, and requires thorough study before execution.|$|R
50|$|Throughout {{his career}} {{and as long as}} he had the strength, Congdon put his entire self into the work, in the smells, the incisions, the {{scrapings}} of medium across the hard board. His use of materials and on the painting’s surface indicate that his early training in sculpture never left him. He applied oil paints on a prepared - often black - board with masonry <b>tools,</b> <b>palette</b> knives, awls and spatulas, as well as large brushes, practically until the end of his life. Finally, in some cases, he would blow gold or silver powder on to the wet paint. In his later years, he forged a singular approach to painting that incorporated the physicality and spontaneity of action painting into forms of figuration and landscape.|$|R
40|$|We {{present a}} new {{technique}} called ‘Tilt Menu ’ for better extending selection capabilities of pen-based interfaces. The Tilt Menu is implemented by using 3 D orientation information of pen devices while performing selection tasks. The Tilt Menu {{has the potential to}} aid traditional onehanded techniques as it simultaneously generates the secondary input (e. g., a command or parameter selection) while drawing/interacting with a pen tip without having to use the second hand or another device. We conduct two experiments to explore the performance of the Tilt Menu. In the first experiment, we analyze the effect of parameters of the Tilt Menu, such as the menu size and orientation of the item, on its usability. Results of the first experiment suggest some design guidelines for the Tilt Menu. In the second experiment, the Tilt Menu is compared to two types of techniques while performing connect-the-dot tasks using freeform drawing mechanism. Results of the second experiment show that the Tilt Menu perform better in comparison to the <b>Tool</b> <b>Palette,</b> and is as good as the Toolglass...|$|E
40|$|We {{present a}} system that augments any unmodified Java {{application}} with an adaptive speech interface. The augmented system learns to associate spoken words and utterances with interface actions such as button clicks. Speech learning is constantly active and searches for correlations between what the user says and does. Training the interface is seamlessly integrated with using the interface. As the user performs normal actions, she may optionally verbally describe what she is doing. By using a phoneme recognizer, the interface is able to quickly learn new speech commands. Speech commands are chosen by the user and can be recognized robustly due to accurate phonetic modelling of the user's utterances and {{the small size of}} the vocabulary learned for a single application. After only a few examples, speech commands can replace mouse clicks. In e#ect, selected interface functions migrate from keyboard and mouse to speech. We demonstrate the usefulness of this approach by augmenting jfig, a drawing application, where speech commands save the user from the distraction of having to use a <b>tool</b> <b>palette...</b>|$|E
40|$|If {{a picture}} is worth 1000 words, then an {{animation}} must be {{worth at least}} 10, 000 words. How can we convert this efficiency in communication {{to the world of}} teaching mathematics? In designing our software package, TEMATH, we have painstakingly designed tools {{that can be used to}} display mathematical concepts using “pictures ” or animations. Additionally, we have developed a friendly, unified interface that makes it easy to use these visualization tools when presenting new mathematical topics in a calculus class. We feel that when an instructor uses technology in a pedagogical manner, it is important to make the technology as invisible as possible so that students can concentrate on the mathematics being taught. The TEMATH interface (see Figure 1) contains four panels: Graph, Work, Report, and Domain & Range. These panels are visible at all times to provide an efficient working environment. All work (function models, data sets, vector fields, …) is saved in the Work panel, all the results of mathematical computations are Figure 1 The TEMATH Interfacerecorded in the Report panel, and all the visualizations take place in the Graph panel. The <b>Tool</b> <b>palette</b> in the Graph panel contains a robust set of visualization tools for exploring concepts in Pre-calculus: Parameter variation in functions, identifying functions, root finding...|$|E
5000|$|The crop tool {{can be used}} {{to select}} a {{particular}} area of an image and discard the portions outside the chosen section. This tool assists in creating a focus point on an image and unnecessary or excess space. Cropping allows enhancement of a photo’s composition while decreasing the file size. The [...] "crop" [...] tool is in the <b>tools</b> <b>palette,</b> which is located {{on the right side of}} the document. By placing the cursor over the image, the user can drag the cursor to the desired area. Once the Enter key is pressed, the area outside the rectangle will be cropped. The area outside the rectangle is the discarded data, which allows for the file size to be decreased. The [...] "crop" [...] tool can alternatively be used to extend the canvas size by clicking and dragging outside the existing image borders.|$|R
40|$|We {{describe}} {{a new type}} of graphical user interface widget, known as a “tracking menu. ” A tracking menu consists of a cluster of graphical buttons, and as with traditional menus, the cursor can be moved within the menu to select and interact with items. However, unlike traditional menus, when the cursor hits the edge of the menu, the menu moves to continue tracking the cursor. Thus, the menu always stays under the cursor and close at hand. In this paper we define the behavior of tracking menus, show unique affordances of the widget, present a variety of examples, and discuss design characteristics. We examine one tracking menu design in detail, reporting on usability studies and our experience integrating the technique into a commercial application for the Tablet PC. While user interface issues on the Tablet PC, such as preventing round trips to <b>tool</b> <b>palettes</b> with the pen, inspired tracking menus, the design also works well with a standard mouse and keyboard configuration...|$|R
5000|$|There {{are a few}} {{settings}} for activating and switching between spaces. A checkbox {{at the bottom of}} the panel allows switching spaces automatically when switching between applications bound to spaces. This is achieved either by clicking on application icons in the dock, or by pressing ⌘ (Command) + Tab, and Spaces will jump directly to the space that the chosen application has been assigned to. A limitation of Spaces lies in the fact that some applications featuring <b>tool</b> <b>palettes</b> and/or multiple open document windows (such as Adobe Creative Suite or Microsoft Office applications) cannot be consistently bound to a specific (numbered) space. In such cases, the [...] "switching" [...] function responds to the most recently active document, regardless of which space it has been opened upon, so it is usually more efficient to avoid assigning such applications to a specific space and to run them unassigned, opening documents in the desired space.|$|R
