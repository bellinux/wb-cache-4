43|10000|Public
50|$|To {{illustrate}} {{the process of}} calculating the UCP, an Online Shopping System will be used. The diagram below depicts <b>the</b> <b>Use</b> <b>Case</b> <b>Diagram</b> for the system to be developed.|$|E
5000|$|The first type of diagram in UML {{that can}} be {{generated}} from an OPM diagram is <b>the</b> <b>Use</b> <b>Case</b> <b>Diagram</b> which is intended for modeling the usage of a system. The main elements comprising <b>the</b> <b>Use</b> <b>Case</b> <b>Diagram</b> are actors and use cases (the entities) along with the relationships (links) among them. Generation of a Use Case Diagram from OPM is therefore based on environmental objects (the actors) and the processes (the use cases) linked to them. Figure 1 {{is an example of}} Use Case Diagram generation of SD0. The figure shows the root OPM diagram (a), the corresponding OPL text (b), and the created Use Case Diagram (c). Figure 2 shows a SD1 level of OPD from the same OPM model (a), and the generated Use Case Diagram (b).|$|E
50|$|It {{seems that}} the {{additional}} diagrams were helpful in answering {{some of the questions}} more than the others. Only one question of eight in each of the cases scored lower when the combined diagrams specification was used. The SysML diagram that seems to have the biggest added value is the Block Definition Diagram (BDD), which specifies system hierarchy and features of blocks like attributes and operations. The relatively high helpfulness of the BDD is evident from both the students'assessment of the contribution of this diagram type and from analysis of the scores in the individual questions in both systems. According to the results of the experiment, <b>the</b> <b>Use</b> <b>Case</b> <b>diagram</b> seems to have the least effect on system comprehension, and this is also in agreement with the students' assessment of <b>the</b> <b>Use</b> <b>Case</b> <b>diagram</b> type contribution. In between are the Activity diagram and the State Machine diagram, which appear to have a positive effect, albeit not as high as the effect of the BDD.|$|E
50|$|The {{purpose of}} <b>the</b> <b>use</b> <b>case</b> <b>diagrams</b> {{is simply to}} provide the high level view {{of the system and}} convey the {{requirements}} in layman's terms for the stakeholders. Additional diagrams and documentation can be used to provide a complete functional and technical view of the system.|$|R
40|$|In {{object-oriented}} design, <b>use</b> <b>cases</b> {{are one of}} {{the important}} but complex components to design. UCD-Generator is a LESSA based application that makes this process more simple and easy. UCD-Generator is an automated system that has vigorous ability to directly interact wit the user. This research paper presents a natural language processing based approach LESSA that is used for automatically understanding the natural language text and extract required information. This information is <b>used</b> to draw <b>the</b> <b>Use</b> <b>Case</b> <b>diagrams.</b> User writes his interface based preferences in simple English in a few paragraphs and the designed system has conspicuous ability to analyze the given script. After compound analysis and extraction of associated information, the designed system actually draws <b>the</b> <b>Use</b> <b>Case</b> class <b>diagrams.</b> Other conventional <b>CASE</b> tools require a complete understanding of the intended business scenario and lot of extra time and efforts from the system analyst during the process of creating, arranging, labeling and finishing <b>the</b> <b>USE</b> <b>Case</b> <b>diagrams.</b> <b>The</b> designed system provides a quick and reliable way to generate <b>Use</b> <b>Case</b> <b>diagrams</b> to save <b>the</b> time and budget of both the user and system analyst...|$|R
40|$|This paper {{describes}} an algorithm to transform business process models into a functional requirements specification, specified in <b>the</b> form of <b>use</b> <b>case</b> <b>diagrams.</b> <b>The</b> benefit {{of such an}} algorithm is that it helps {{to draw up a}} functional requirements specification more quickly, because business process models may be available in an enterprise, while <b>use</b> <b>case</b> <b>diagrams</b> have to be developed by performing interviews. <b>The</b> <b>use</b> <b>case</b> <b>diagrams</b> that result from applying the algorithm, specify a software system that provides automated support for the original business processes. We show this with a case study from practice. KEY WORD...|$|R
50|$|An abuse case diagram {{is created}} {{together}} with a corresponding use case diagram, {{but not in the}} same diagram (different from Misuse case). There is no new terminology or special symbols introduced for abuse case diagrams. They are drawn with the same symbols as a use case diagram.To distinguish between the two, <b>the</b> <b>use</b> <b>case</b> <b>diagram</b> and abuse case diagrams are kept separate, and related. Hence abuse cases do not appear in the use case diagrams and vice versa.|$|E
40|$|UML. ??? ????????? ??????????? ?????? ???????????????? ????? ????????, ? ??? ?? ????????? ? ???????????? ????????, ?? ????????? ?? ????????? ????????? ?????? ??? ???????????? ????? ? ??????. Review {{the problem}} of {{choosing}} optimal functional structure CIS, based on information on all possible functionality of the system in <b>the</b> <b>use</b> <b>case</b> <b>diagram</b> view. To reduce task dimensions using reduction method, and to solve it ? an original algorithm based on the algorithm decision task of maximum flow...|$|E
40|$|Context-aware {{applications}} {{have the}} ability to sense the context of the user and use the sensed context information to make adaptation decision in response to changes in the user’s context. Hence, besides the functional requirements, context-awareness is an important requirement of such applications. Although, <b>the</b> <b>use</b> <b>case</b> <b>diagram</b> of the Unified Modeling Language (UML) is considered as the industrial de-facto standard for modeling the functional requirements of applications, it is insufficient to accurately capture context-awareness requirements. This paper proposes an extension of <b>the</b> <b>use</b> <b>case</b> <b>diagram</b> with new notations to cater for the modeling of context-aware applications. The proposed extension called context-aware use case diagram is more expressive and enables a clear separation of concerns between context-awareness requirements and functional requirements which is helpful during requirements capture and analysis of large scale or complex context-aware applications...|$|E
5000|$|Between the [...] "good" [...] and the [...] "bad" [...] {{case the}} {{language}} {{to represent the}} scenario is common: <b>the</b> <b>use</b> <b>case</b> <b>diagrams</b> are formally included in two modeling languages defined by the OMG: the Unified Modeling Language (UML) and the Systems Modeling Language (SysML), and this <b>use</b> of drawing <b>the</b> agents and misuse cases of the scenario explicitly helps focus attentionon it.|$|R
30|$|It was {{designed}} to meet REQM process area in CMMI. The requirements for the documents should define its purpose and acceptance criteria, such as clearly and properly stated, completely, consistently, uniquely identified, appropriately implement and verifiably. And, all of requirements must define their priority. Furthermore, the contents also should include operational concepts and requirements lists. In our research, <b>the</b> <b>Use</b> <b>case</b> <b>diagrams</b> from SysML were employed to show operation concept to meet the criteria.|$|R
40|$|Abstract:- Building the use-case diagram {{is a very}} {{important}} task since it represents a transition between the requirements and design phases. However, building such diagram is a time consuming process and needs a complete understanding of the requirements. In this paper, we introduce an approach to derive <b>use</b> <b>case</b> <b>diagrams</b> from an event table. This new approach will facilitate and speed the generation process of <b>the</b> <b>use</b> <b>case</b> <b>diagrams.</b> However, this approach will completely depends on the availability of a comprehensive event table which to be built from the available requirements...|$|R
40|$|Due to the {{difficulty}} of recalling the semi-structure form of use case diagram, applying reusing approach to the requirement analysis process has been being concerned as a complex task. Despite of this fact, there are relatively little attentions found in the research community. Therefore, this paper proposes how Case-Based Reasoning (CBR) – an approach solves new problem from recalling experiences, can be effectively applied to support <b>the</b> <b>use</b> <b>case</b> <b>diagram</b> reuse. In this research, the diagram retrieval method is designed to match <b>the</b> <b>use</b> <b>case</b> <b>diagram</b> by considering two dimensions: use case and actor dimension and relationship dimension. However, in order to present the significant accuracy and practicality of the proposed method, a tool and five comparative sets – including four various dimensional weights and one commercial tool were carefully set up to test in an experiment...|$|E
40|$|Abstract: This paper {{establishes}} {{the need to}} create a self learning Knowledge Management System for an academic institution tailored to effectively meet the learning needs {{of the students in the}} current competitive environment. It goes on to propose a specification of this system, with all the major use cases and <b>the</b> <b>use</b> <b>case</b> <b>diagram...</b>|$|E
40|$|UML is a {{standard}} modeling language, which is easy to express, powerful and universal. At the same time, it can support the software development process from the demand analysis. Using UML modeling mechanism, which can be visual representation and construction of system model for all the development process of the application software system based on UML. We design <b>the</b> <b>use</b> <b>case</b> <b>diagram,</b> class diagram, timing diagram, etc...|$|E
5000|$|Due {{to their}} simplistic nature, <b>use</b> <b>case</b> <b>diagrams</b> {{can be a}} good {{communication}} tool for stakeholders. The drawings attempt to mimic the real world and provide a view for the stakeholder to understand how the system is going to be designed. Siau and Lee conducted research to determine if there was a valid situation for <b>use</b> <b>case</b> <b>diagrams</b> at all or if they were unnecessary. What was found was that <b>the</b> <b>use</b> <b>case</b> <b>diagrams</b> conveyed <b>the</b> intent of the system in a more simplified manner to stakeholders and that they were [...] "interpreted more completely than class diagrams".|$|R
40|$|In {{this paper}} we {{introduce}} {{a technique to}} simplify requirements capture. The technique {{can be used to}} derive functional requirements, specified in the form of UML <b>use</b> <b>case</b> <b>diagrams,</b> from existing business process models. Because <b>use</b> <b>case</b> <b>diagrams</b> have to be constructed by performing interviews, and business process models usually are available in a company, <b>use</b> <b>case</b> <b>diagrams</b> can be produced more quickly when derived from business proces models. <b>The</b> <b>use</b> <b>case</b> <b>diagrams</b> that result from applying the technique, specify a software system that provides automated support for the original business processes. We also show how the technique was successfully evaluated in practice. 1...|$|R
40|$|UML and <b>use</b> <b>case</b> {{modeling}} have <b>the</b> {{last few}} years received much attention. <b>Use</b> <b>cases</b> are <b>used</b> to describe <b>the</b> functional requirements of a system and a <b>use</b> <b>case</b> <b>diagram</b> shows <b>the</b> relationships among <b>use</b> <b>cases</b> and actors within a system. <b>The</b> semantics of <b>use</b> <b>case</b> <b>diagrams</b> are, however, often unclear. The aim of this dissertation is to point out ambiguities and limited expressiveness present in <b>the</b> current <b>use</b> <b>case</b> notation of UML and to indicate in which directions remedies to these deficiencies may be sought. Problems reported by researchers were identified and presented {{to a set of}} <b>use</b> <b>case</b> practitioners. Then a proposal of possible improvements of <b>the</b> <b>use</b> <b>case</b> notation, which should reduce the ambiguities and increase the expressiveness in the notation, was developed. To place some measurements on the value the proposal can have in practice, it was also presented to a set of practitioners. The proposal provides a suggestion of how to model various tricky situations in a <b>use</b> <b>case</b> <b>diagram.</b> Furthermore, <b>the</b> dissertation gives insight on how <b>the</b> <b>use</b> <b>case</b> technique is <b>used</b> in practice. Practitioners argue that <b>the</b> <b>use</b> <b>case</b> specifications are more important than <b>the</b> <b>use</b> <b>case</b> <b>diagrams.</b> They also argue that <b>the</b> purpose of <b>use</b> <b>case</b> <b>diagrams</b> is to describe a system's main functionalities and not details, and that as few <b>use</b> <b>case</b> relationships as possible should be <b>used</b> in <b>use</b> <b>case</b> <b>diagrams...</b>|$|R
40|$|Discussion of {{use cases}} and UML often {{focuses on the}} UML use case diagram. Use case {{diagrams}} are contrasted (usually unfavorably) with text use cases. But specification of use cases with UML {{is not limited to}} <b>the</b> <b>use</b> <b>case</b> <b>diagram.</b> In fact UML 2 includes a variety of expressive techniques for specifying a use case. This article looks at UML use cases from the ODP viewpoint, and describes UML use case specification techniques in ODP terms. ...|$|E
40|$|Abstract. The {{new model}} of {{television}} production is based upon: digital formats, the centralized management of media content and associated metadata, non-linear assembly of media elements, high-speed networks, format agnostic distribution and automated processes. An effective software-intensive production system should allow incoming material – text, audio, video and associated metadata – {{to be available to}} all users on the system as soon as it arrives at the production facility. The framework for ingest system’s model in problem space is presented in this paper. During the analyses of new content ingest workflow, behavioural description is modelled by <b>the</b> <b>Use</b> <b>Case</b> <b>diagram...</b>|$|E
40|$|Now, most {{economic}} organizations {{use different}} information systems types {{in order to}} facilitate their activity. There are different methodologies, methods and techniques {{that can be used to}} design information systems. In this paper, I propose to present the advantages of using the object oriented modelling at the information system design of an economic organization. Thus, I have modelled the activity of a photo studio, using Visual Paradigm for UML as a modelling tool. For this purpose, I have identified the use cases for the analyzed system and I have presented <b>the</b> <b>use</b> <b>case</b> <b>diagram.</b> I have, also, realized the system static and dynamic modelling, through the most known UML diagrams...|$|E
40|$|The {{main purpose}} of this paper is to presenthow the Unified Modeling Language (UML) can be used for {{modeling}} industrial embedded systems. By using a car radios production line as a running example, the paper demonstrates the modeling process that can be followed during the analysis phase of complex control applications. In order to guarantee the continuity mapping of the models, the authors propose some guidelines to transform <b>the</b> <b>use</b> <b>case</b> <b>diagrams</b> into a single object diagram, which is one of the main diagrams for the next development phases...|$|R
30|$|Based {{on these}} requirements, we {{developed}} <b>the</b> HCDP <b>use</b> <b>case</b> <b>diagram.</b> After performing these activities, the management {{team of the}} HCDP project and the analysis and design team prioritized together <b>the</b> development of <b>use</b> <b>cases</b> that would be developed in the other Sprints.|$|R
40|$|In this paper, we {{describe}} the software design results of WA-DGNSS reference station that will be constructed in Korea in the near future. Software design of the WRS (Wide area Reference Station) is carried out by applying object oriented software methodology {{in order to provide}} flexibilities: easy of model change (namely ionospheric delay model etc) and system addition (Galileo, GLONASS in addition to GPS etc). Software design results include <b>the</b> <b>use</b> <b>case</b> <b>diagrams</b> for <b>the</b> functions to be executed, the architecture diagram showing components and their relationships, the activity diagrams of behaviors and models among them, and class diagrams describing the attribute and operation...|$|R
40|$|The {{cladding}} part is a {{new type}} of layered heterogeneous material part with three layers of the substrate, the interface and the clad. According to the part unique material composition and structural characteristic, based on the hierarchical modeling method, the software architecture design of the cladding part modeling system was researched. Using UML (Unified Modeling Language) and the software Rational Rose, the use cases, static logic, dynamic logic and physical deployment of the modeling system were described with <b>the</b> <b>use</b> <b>case</b> <b>diagram,</b> class diagrams, communication diagrams, components diagram and deployment diagram. The research results can guide the development process of the cladding part modeling system with high stability and reliability.  </p...|$|E
40|$|Abstract – This paper {{proposes a}} method that uses UML {{diagrams}} as a software development process for analysis and design of web applications. The method uses the most needed diagrams only to analyze system requirements and perform software design {{in a very short}} term. The method starts with a use case diagram to define functional requirements of the system. Workflow diagrams follow to specify flows of activities of those identified requirements in <b>the</b> <b>use</b> <b>case</b> <b>diagram.</b> Class, sequence, and activity diagrams are then used to determine necessary classes, functions, and algorithms that need to be implemented. The method have been applied to two projects and proved its usefulness in web development. Keywords: web application, web development, UML. ...|$|E
30|$|The {{approach}} {{pursued in}} GRASPgfs {{and for the}} design of the eGRASP platform has been as much top-down as bottom-up from leading disciplines such crop genetics, geospatial information modelling and crop modelling. Basically besides strong top-down emphasis on geolocated genetic-trait database (the GeogermplasmDB), and on a workflow modelling (based on OGC WPS and BPMN standard), case studies analysis were used to gather requirements. Mixing these two aspects as well as envisaging direct use of the top-down elements into the bottom-up approach, the UML use case diagram of the required functionalities of the eGRASP platform was obtained (Fig. 2). From the adoption of <b>the</b> <b>use</b> <b>case</b> <b>diagram,</b> disciplinary research took place to refine the case studies with focus on use case matching and potential new developments whilst the computing architecture was design to fit these requirements.|$|E
40|$|The {{main purpose}} of this paper is to present how the Unified Modeling Language (UML) can be used for {{modeling}} industrial embedded systems. By using a car radios production line as a running example, the paper demonstrates the modeling process that can be followed during the analysis phase of complex control applications. In order to guarantee the continuity mapping of the models, the authors propose some guidelines to transform <b>the</b> <b>use</b> <b>case</b> <b>diagrams</b> into a single object diagram, which is one of the main diagrams for the next development phases. Fundação para a Ciência e a Tecnologia - PRAXIS/P/EEI/ 10155 / 1998 - Reconfiguable Embedded Systems : Development Methodologies for Real-Time Application...|$|R
40|$|The main aim of {{this paper}} is to present how the Unified Modeling Language (UML) can be <b>used</b> as <b>the</b> {{notation}} to specify the requirements of an embedded system. By using a relatively small, but real, system (a supervision application) as a running example, the paper illustrates the design flow that can be followed during the analysis phase of complex control applications. To assure the continuous mapping of the models, the authors propose some guidelines to transform <b>the</b> <b>use</b> <b>case</b> <b>diagrams</b> into a single object diagram, which is the main diagram for the next development phases (design and implementation). The Java programming language is used for developing a system's prototype, to allow the system's validation by the customers...|$|R
40|$|The {{main purpose}} of the poster is to present how the Unified Modeling Language (UML) {{can be used for}} {{diagnosing}} and optimizing real industrial production systems. By using a car radios production line as a case study, the poster shows the modeling process that can be followed during the analysis phase of complex control applications. In order to guarantee the continuity mapping of the models, the authors propose some guidelines to transform <b>the</b> <b>use</b> <b>cases</b> <b>diagrams</b> into a single object diagram, which is the main diagram for the next phases of the development. This work has been partially funded by the Portuguese Science & Technology Foundation project PRAXIS/P/EEI/ 10155 / 1998, Recon gurable Embedded Systems: Development Methodologies for Real-Time Application...|$|R
40|$|A primary {{vehicle for}} {{understanding}} the user {{in the context of}} the requirements for a system has been the role. For example, the role is captured through the use of actors in <b>the</b> <b>use</b> <b>case</b> <b>diagram</b> and use case descriptions. Recently, personas have been used in conjunction with scenarios in participatory design to go deeper into examining the different types of people who could play a role. A persona is an archetype of a fictional user representing a specific group of typical users. This paper expands the use of personas to scenario-based requirements engineering. Personas and scenarios are being used together for specifying requirements at Microsoft. The result of this combination has been a more comprehensive understanding of the target customers ' behaviors to drive and refine our scenarios and subsequently our product development. 1...|$|E
40|$|One major {{characteristics}} of Object Oriented Software is the complex dependency {{that exists between}} classes due to three different types of relationships that are inheritance, association and aggregation. Due to these dependencies one major problem arise while integrating and testing the object oriented software {{in order to reduce}} the number of required test stubs and to determine the test order for testing different classes. This paper presents a comparison between different test orders by exploiting a model produced during design stages (e. g. using UML), namely <b>the</b> <b>Use</b> <b>Case</b> <b>Diagram</b> and Class Diagrams. Our goal is to study and compare different test orders. Based on which we will propose efficient test order to reduce the number of stubs as well as time of testing. For the analysis of our proposed method we will take software developed for ATM machine...|$|E
40|$|Abstract. Use case {{diagrams}} are {{the core}} diagrams of the Unified Modeling Language (UML), {{de facto standard}} for software modeling. They are used to visualize relations between the users (Actors) and the functionality of the software system (Use Cases). Galois sub hierarchy (GSH) is a sub-order of the concept lattice that contains only concepts with object or attribute labels. This paper investigates the viability of GSH for visualizing the information contained within use case diagrams. While {{it is possible that}} a GSH diagram is more complex than a use case diagram for certain formal contexts a study of 87 student projects found no such case. On average, use case diagrams had 3. 7 times more graphical elements than corresponding GSH diagrams, demonstrating the viability of GSH as a more compact alternative to <b>the</b> <b>use</b> <b>case</b> <b>diagram.</b> ...|$|E
40|$|UML {{offers a}} very large set of {{constructs}} for each of its diagram types, however many of them seem scarcely used or even their existence is not known. Here, we decided to present a precise view of the usage levels of the constructs of activity and <b>use</b> <b>case</b> <b>diagrams</b> {{by means of a}} document and tool analysis study, covering preliminarily: books, courses, tutorials, and tools about UML. Results of the study show that, among the 47 activity diagrams constructs, a large majority of them seem to be scarcely used, while, only nine result widely used, whereas only two of the nine constructs of <b>the</b> <b>use</b> <b>case</b> <b>diagrams</b> seem scarcely <b>used.</b> This work {{is part of a larger}} project aimed at investigating the usage level of the UML diagrams and their constructs, also by means of a personal opinion survey intended for UML users...|$|R
40|$|Student’s {{parents are}} busy {{at work in}} noon, this makes them hard to observing their child academical progress. The school can only provide {{information}} at noon. The work in developing and implementing this Information System based on internet technology were dedicated {{to solve the problem}} above. Student’s parents can now access the information that provide by the school any time. The information were include the final exam mark, additional activity, financial information. The system were developed <b>using</b> <b>the</b> UML methodologies. Every process happened in the system were captured in <b>the</b> <b>use</b> <b>cases</b> <b>diagram,</b> and class diagram. The system that has been built were tested with input data by the internal side (school) and tested also for usage by the outer side (parents). The result of the testing process reveal that the system were full filled the need of <b>the</b> <b>use...</b>|$|R
40|$|Abstract. The {{objective}} {{of this paper is}} to present an environment for the management of functional and non-functional requirements in systems project, developed <b>using</b> <b>the</b> XML (Extensible Markup Language) standard. This environment receives as inputs two entry structures for software requirements modelling: <b>the</b> UML´s <b>Use</b> <b>Case</b> <b>diagram,</b> which describes functional requirements; and the I * framework <b>used</b> by <b>the</b> Tropos methodology, which defines non-functional requirements. Then, it automatically transforms these structures in a third structure that extends <b>the</b> <b>Use</b> <b>Case</b> definitions with <b>the</b> non-functional requirements and provides management facilities of these extensions to UML´s <b>Use</b> <b>Case</b> <b>diagrams.</b> ...|$|R
