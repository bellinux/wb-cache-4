1|10|Public
40|$|This paper {{introduces}} FLUINT (FLUid INTegrator), {{a general}} fluid system simulation program that works {{in conjunction with}} SINDA ' 85 (Systems Improved Numerical Differencing Analyzer, 1985 version). FLUINT solves arbitrary networks representing internal fluid systems while SINDA ' 85 simultaneously solves traditional thermal networks. This <b>transportable</b> <b>program</b> is intended to provide spacecraft thermal management engineers with the analytic tools needed to simulate single- and two-phase coolant loops. The fundamental concepts for fluid system modeling are described, and methods of modeling complex, hardware-specific components are outlined. Underlying correlations and solution methods are briefly discussed. Example analyses and comparisons to test data are provided...|$|E
40|$|The highly <b>transportable</b> <b>programming</b> system {{designed}} and implemented {{to support the}} development of software for the Space Ultrareliable Modular Computer (SUMC) is described. The SUMC system support software consists of program modules called processors. The initial set of processors consists of the supervisor, the general purpose assembler for SUMC instruction and microcode input, linkage editors, an instruction level simulator, a microcode grid print processor, and user oriented utility programs. A FORTRAN 4 compiler is undergoing development. The design facilitates the addition of new processors with a minimum effort and provides the user quasi host independence on the ground based operational software development computer. Additional capability is provided to accommodate variations in the SUMC architecture without consequent major modifications in the initial processors...|$|R
40|$|We have {{designed}} and implemented autonomous software agents. Autonomous software agents navigate independently through a heterogeneous network. They {{are capable of}} sensing the network configuration, monitoring software conditions, and interacting with other agents. Autonomous agents are implemented as <b>transportable</b> <b>programs,</b> e. g., programs {{that are capable of}} suspending execution, moving to a different machine, and starting from where they left off. We illustrate the intelligent behavior of autonomous agents in the context of distributed information-gathering tasks. Areas: software agents, multi-agent systems Abstract ID A 703 Word Count: 6, 521 Multiple submissions: This paper has not been submitted elsewhere. Acknowledgments: The authors gratefully acknowledge Professor George Cybenko, who is the other third of the Agent Tcl project and has provided constant guidance, feedback and support; Ting Cai, who implemented the mobile computing services; Dawn Lawrie, who implemented the virt [...] ...|$|R
40|$|The {{language}} RATMAC is {{a direct}} descendant {{of one of the}} most successful structured FORTRAN languages, rational FORTRAN, RATFOR. RATMAC has all of the characteristics of RATFOR, but is augmented by a powerful recursive macro processor which is extremely useful in generating <b>transportable</b> FORTRAN <b>programs.</b> A macro is a collection of programming steps which are associated with a keyword. This keyword uniquely identifies the macro, and whenever it appears in a RATMAC program it is replaced by the collection of steps. This primer covers the language's control and decision structures, macros, file inclusion, symbolic constants, and error messages...|$|R
40|$|This grant {{final report}} {{executive}} summary documents a major, long-term program addressing innovative educational {{issues associated with}} the development, administration, evaluation, and widespread distribution of <b>transportable</b> educational <b>programs</b> for scientists and engineers to increase their knowledge of, and facilitate their utilization of automated scientific and technical {{information storage and retrieval}} systems. This educational program is of very broad scope, being targeted at Colleges of Engineering and Colleges of Physical sciences at a large number of colleges and universities throughout the United States. The educational program is designed to incorporate extensive hands-on, interactive usage of the NASA RECON system and is supported by a number of microcomputer-based software systems to facilitate the delivery and usage of the educational course materials developed as part of the program...|$|R
40|$|Developers must {{understand}} a software component or piece of code {{before they can}} reuse it. Software visualisation {{has the potential to}} assist this understanding by visualising the internal structure and behaviour of components. However it is difficult to create visualisations. We create visualisations by test driving reusable components, and store the output in a formal, <b>transportable,</b> and filterable <b>program</b> trace format. Using our intermediary program trace formats, static and dynamic information of a component can be transformed into useful visualisations either at real time or in the future for developers to understand...|$|R
40|$|The {{mission of}} the Far West Consortium for DD&E {{training}} is to design, develop, implement, and evaluate a comprehensive and <b>transportable</b> training <b>program</b> {{to meet the demand}} for trained personnel in educational development, dissemination, and evaluation (DD&E) [...] The program provides both preservice training and continuing education to upgrade those already employed in the field of educational research and development. The content of training has been derived by assessing personnel training needs and conducting task. analyses [...] Training is organized around 8 functional competence areas: (1) planning and design; (2) collection and organization of information and data; (3). communication skills; (4) developmental engineering; (5). evaluation; (6) problem analysis and definition; en dissemination and marketing; and (8) management [...] In-addition to the main report,. a volume of appendices presenting such items as descriptions of competence areas, resumes of professional personnel, and trainee information and 2 attachments presenting the approach to competence assessment and the program of instruction are also included. (Author /ES...|$|R
40|$|Some {{fundamental}} principles for developing computer programs which {{are compatible with}} array-oriented computers are presented. The emphasis is on basic techniques for structuring computer codes which are applicable in FORTRAN and do not require a special programming language or exact a significant penalty on a scalar computer. Researchers who are using numerical techniques to solve problems in engineering can apply these basic principles and thus develop <b>transportable</b> computer <b>programs</b> (in FORTRAN) which contain much vectorizable code. The vector architecture of the ASC is discussed so that the requirements of array processing can be better appreciated. The "vectorization" of a finite-difference viscous shock-layer code is used as an example to illustrate the benefits {{and some of the}} difficulties involved. Increases in computing speed with vectorization are illustrated with results from the viscous shock-layer code and from a finite-element shock tube code. The applicability of these principles was substantiated through running programs on other computers with array-associated computing characteristics, such as the Hewlett-Packard (H-P) 1000 -F...|$|R
40|$|In today’s {{technology}} driven society, {{software is}} becoming increasingly important in more areas of our lives. The domain of software extends beyond the obvious domain of computers, tablets, and mobile phones. Smart devices and the internet-of-things have inspired the integra- tion of digital and computational technology into objects {{that some of us}} would never have guessed could be possible or even necessary. Fridges and freezers connected to social media sites, a toaster activated with a mobile phone, physical buttons for shopping, and verbally asking smart speakers to order a meal to be delivered. This is {{the world we live in}} and it is an exciting time for software engineers and computer scientists. The sheer volume of code that is currently in use has long since outgrown beyond the point of any hope for proper manual maintenance. The rate of which mobile application stores such as Google’s and Apple’s have expanded is astounding. The research presented here aims to shed a light on an emerging field of research, called Genetic Improvement (GI) of software. It is a methodology to change program code to improve existing software. This thesis details a framework for GI that is then applied to explore fitness landscape of bug fixing Python software, reduce execution time in a C ++ program, and integrated into a live system. We show that software is generally not fragile and although fitness landscapes for GI are flat they are not impossible to search in. This conclusion applies equally to bug fixing in small programs as well as execution time improvements. The framework’s application is shown to be <b>transportable</b> between <b>programming</b> languages with minimal effort. Additionally, it can be easily integrated into a system that runs a live web service. The work within this thesis was funded by EPSRC grant EP/J 017515 / 1 through the DAASE project...|$|R
40|$|A {{minor in}} Engineering Communication and Performance is being created at the University of Tennessee in {{conjunction}} with the engage Freshman Engineering Program. This minor provides engineering undergraduate students with formal training and a credential in complementary performance skills necessary for success in today's workplace. This interdisciplinary program is designed to improve the ability of engineering graduates to work on teams, to be effective communicators, to be socially adept, and to be prepared for leadership roles. Five courses compose the minor. Three of these courses are new and custom-prepared for engineering students, while the other two may be selected from a limited list of courses that provide in-depth training on supervision, cultural diversity, and interpersonal interaction. This multi-disciplinary program takes a novel approach in the subject matter presentation and in the method of coaching students to use these skills. In the custom courses, students receive instruction and are placed in mini-practicums. To complete the minor, students participate in a full practicum in a social service setting. This paper discusses assessment; course development; program basis and development; strategies for implementation of this new program; integration between engineering, counseling psychology, and human services; and student, faculty, and industry response to the program. The collaboration between disciplines makes this <b>program</b> <b>transportable</b> to other institutions as it is discipline dependent rather than dependent on individual specialty. Our experience with establishing this collaboration will also be discussed. I...|$|R
40|$|The Systems Improved Numerical Fluids Analysis Code, SINFAC, {{consists}} of additional routines {{added to the}} April 1983 revision of SINDA, a general thermal analyzer program. The purpose of the additional routines is {{to allow for the}} modeling of active heat transfer loops. The modeler can simulate the steady-state and pseudo-transient operations of 16 different heat transfer loop components including radiators, evaporators, condensers, mechanical pumps, reservoirs and many types of valves and fittings. In addition, the program contains a property analysis routine {{that can be used to}} compute the thermodynamic properties of 20 different refrigerants. SINFAC can simulate the response to transient boundary conditions. SINFAC was first developed as a method for computing the steady-state performance of two phase systems. It was then modified using CNFRWD, SINDA's explicit time-integration scheme, to accommodate transient thermal models. However, SINFAC cannot simulate pressure drops due to time-dependent fluid acceleration, transient boil-out, or transient fill-up, except in the accumulator. SINFAC also requires the user to be familiar with SINDA. The solution procedure used by SINFAC is similar to that which an engineer would use to solve a system manually. The solution to a system requires the determination of all of the outlet conditions of each component such as the flow rate, pressure, and enthalpy. To obtain these values, the user first estimates the inlet conditions to the first component of the system, then computes the outlet conditions from the data supplied by the manufacturer of the first component. The user then estimates the temperature at the outlet of the third component and computes the corresponding flow resistance of the second component. With the flow resistance of the second component, the user computes the conditions down stream, namely the inlet conditions of the third. The computations follow for the rest of the system, back to the first component. On the first pass, the user finds that the calculated outlet conditions of the last component do not match the estimated inlet conditions of the first. The user then modifies the estimated inlet conditions of the first component in an attempt to match the calculated values. The user estimated values are called State Variables. The differences between the user estimated values and calculated values are called the Error Variables. The procedure systematically changes the State Variables until all of the Error Variables are less than the user-specified iteration limits. The solution procedure is referred to as SCX. It {{consists of}} two phases, the Systems phase and the Controller phase. The X is to imply experimental. SCX computes each next set of State Variables in two phases. In the first phase, SCX fixes the controller positions and modifies the other State Variables by the Newton-Raphson method. This first phase is the Systems phase. Once the Newton-Raphson method has solved the problem for the fixed controller positions, SCX next calculates new controller positions based on Newton's method while treating each sensor-controller pair independently but allowing all to change in one iteration. This phase is the Controller phase. SINFAC is available by license for a period of ten (10) years to approved licensees. The licenced program product includes the source code for the additional routines to SINDA, the SINDA object code, command procedures, sample data and supporting documentation. Additional documentation may be purchased at the price below. SINFAC was created for use on a DEC VAX under VMS. Source code is written in FORTRAN 77, requires 180 k of memory, and should be fully <b>transportable.</b> The <b>program</b> was developed in 1988...|$|R

