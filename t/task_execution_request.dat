4|2947|Public
40|$|Abstract. In {{this paper}} {{we present a}} {{collection}} of high level workflow activity patterns based on the semantic of specific business functions (e. g., notification, <b>task</b> <b>execution</b> <b>request,</b> approval). In particular we discuss three pattern samples (approval, unidirectional and decision patterns). Moreover we gather {{the results of an}} analysis of their adoption on a wide set of real workflow processes (models). The analyses showed that the patterns are not only enough but also necessary to model all the 190 workflow processes which were subject of the investigation. We also show and discuss specific sequences or combination of patterns which were more often in the workflow processes analyzed. In larger research we apply these patterns as well as the analyses results {{in the development of a}} suite for process modeling and normalization. 1...|$|E
40|$|Abstract: Due {{to their}} {{high level of}} {{abstraction}} and their reusability, workflow patterns are increasingly attracting the interest of both BPM researchers and BPM tool vendors. Frequently, process models can be assembled out {{of a set of}} recurrent business functions (e. g., <b>task</b> <b>execution</b> <b>request,</b> approval, notification), each of them having generic semantics that can be described as activity pattern. To our best knowledge, so far, there has been no extensive work implementing such activity patterns in a process modeling tool. In this paper we present an approach for modeling business processes and workflows. It is based on a suite which, when being implemented in a process modeling tool, allows to design business processes based on well-defined (process) activity patterns. Our suite further provides support for analysing and verifying certain properties of the composed process models (e. g., absence of deadlocks and livelocks). Finally, our approach considers both business processes designed from scratch and processes extracted from legacy systems. 1...|$|E
40|$|Patterns {{increase}} reuse of existent knowledge (e. g., design solutions, source code) within {{organizations and}} help to achieve consistency between applications. Patterns for pro-cess design have received considerable attention by both business analysts and researchers. Several patterns cate-gories have been proposed including patterns for control and data flow, resources, process change and exception handling. Workflow activity patterns, which are within business pro-cesses (e. g., approval, <b>task</b> <b>execution</b> <b>request),</b> however, have not been explored so far. Related to this problem we have proposed a set of workflow activity patterns in the ProWAP project. Each pattern represents a recurrent business func-tion frequently found in business processes. The complete-ness and existence of these patterns is evaluated through an extensive analysis of real process models. We further inves-tigated the frequency of co-occurring activity patterns. In this paper we discuss how to implement activity patterns in Business Process Management based technologies. In par-ticular we describe the main purposes of our BPM activity patterns-based Tool as well as basic requirements related to its development. In addition we provide a discussion on the representation of activity patterns in BPMN 1. 2 in compa-ration to this representation in UML 2. 0...|$|E
5000|$|The agent acquires its {{configuration}} and <b>task</b> <b>execution</b> <b>requests</b> {{from one}} or more JobScheduler master instances and {{does not require a}} DBMS.|$|R
40|$|Task: {{sequential}} {{program and}} its local storage Parallel computation: {{two or more}} tasks executing concurrently Communication channel: link between two tasks over which messages can be sent and received send is nonblocking: sending <b>task</b> resumes <b>execution</b> immediately receive is blocking: receiving <b>task</b> blocks <b>execution</b> until <b>requested</b> message is availabl...|$|R
40|$|Abstract A {{peer-to-peer}} (P 2 P) {{network is}} a complex system whose elements (peer nodes, or simply peers) cooperate to implement scalable distributed ser-vices. From a general point of view, the activities of a P 2 P system are conse-quences of external inputs coming from the environment, and of the internal feedbacks among nodes. The reaction of a peer to direct or indirect inputs from the environment is dictated by its functional structure, which is usually {{defined in terms of}} static rules (protocols) shared among peers. The introduction of artificial evolution mechanisms may improve the effi-ciency of P 2 P networks, with respect to resource consumption, while preserv-ing high performance in response to the environmental needs. In this paper, we propose the Distributed Remodeling Framework (DRF), a general approach for the design of efficient environment-driven peer-to-peer networks. As a case study, we consider an ultra-large-scale storage and computing system whose nodes perform lookups for resources provided by other nodes, to cope with <b>task</b> <b>execution</b> <b>requests</b> that cannot be fulfilled locally. Thanks to the DRF, workload modifications trigger reconfigurations at the level of single peers, from which global system adaptation emerges without centralized control. Keywords Peer-to-peer network · Artificial evolution · Complex adaptive system...|$|R
40|$|Abstract: Recently, {{a variety}} of {{workflow}} patterns was suggested for capturing different aspects in process-aware information systems (PAISs) including control and data flow, resources, process change, and exception handling. All these patterns are highly relevant for implementing PAISs and for designing process modeling languages. However, current patterns provide only a partial {{answer to the question}} which business functions a designer might want to reuse when modeling processes. This paper presents a revised version of a collection of activity patterns to deal with this challenge. Each of them is related to a recurrent business function as it can be frequently found in process models (e. g., <b>task</b> <b>execution</b> <b>request,</b> notification, approval). We describe the identified activity patterns and their variants in detail. The main purpose of our paper is to discuss results from empirical studies, in which we analyzed more than 200 process models in order to evidence the practical relevance of the patterns. This includes a detailed analysis of the context in which activity patterns occur as well the frequency of this occurrence. These empirical findings can be used for the design of more intelligent, pattern-based process modeling tools...|$|E
40|$|A telerobotic <b>task</b> <b>execution</b> {{system is}} {{described}} {{which has been}} developed for space flight applications. The Modular Telerobot <b>Task</b> <b>Execution</b> System (MOTES) provides the remote site <b>task</b> <b>execution</b> capability in a local-remote telerobotic system. The system provides supervised autonomous control, shared control, and teleoperation for a redundant manipulator. The system is capable of nominal <b>task</b> <b>execution</b> as well as monitoring and reflex motion...|$|R
40|$|Knowledge-intensive {{tasks are}} a blind spot for {{business}} process management systems, as these tasks are executed in an unsupervised, highly individual manner. Hence, individual {{experience is not}} disseminated and <b>task</b> <b>execution</b> largely depends on implicit knowledge. In this paper we present a framework, realizing situationspecific and personalized <b>task</b> <b>execution</b> support for knowledgeintensive tasks in business processes. As a core concept we suggest activity scheme: a structure capturing a probabilistic <b>task</b> <b>execution</b> model. Activity schemes seamlessly integrate the organizational business process with the individual <b>task</b> <b>execution</b> process based on personalization and generalization of user interactions in the working applications. Author Keywords Human-computer interaction, <b>task</b> <b>execution</b> support, knowledge work support...|$|R
40|$|A {{telerobot}} <b>task</b> <b>execution</b> {{system is}} proposed {{to provide a}} general parametrizable <b>task</b> <b>execution</b> capability. The system includes communication with the calling system, e. g., a task planning system, and single- and dual-arm sensor-based <b>task</b> <b>execution</b> with monitoring and reflexing. A specific task is described by specifying the parameters to various available <b>task</b> <b>execution</b> modules including trajectory generation, compliance control, teleoperation, monitoring, and sensor fusion. Reflex action is achieved by finding the corresponding reflex action in a reflex table when an execution event has been detected with a monitor...|$|R
40|$|This paper {{introduces}} a formalism to model <b>task</b> <b>execution</b> in distributed computing systems. The proposed formalism, {{based on a}} partial order semantic model, extends standard temporal logic to specify <b>task</b> <b>execution</b> in distributed systems. It allows derivation {{of a set of}} inequalities sufficient to ensure deadline constraints. <b>Task</b> <b>execution</b> in an onboard computer is modeled and verified using the developed formalism. Extensions for task refinement are also presented...|$|R
40|$|Abstract—In cloud systems, it is non-trivial to {{optimize}} <b>task’s</b> <b>execution</b> performance under user’s affordable budget, especially with possible workload prediction errors. Based on an optimal algorithm that can minimize cloud <b>task’s</b> <b>execution</b> length with predicted workload and budget, we theoretically derive the upper bound of the <b>task</b> <b>execution</b> length by {{taking into account}} the possible workload prediction errors. With such a state-of-the-art bound, the worst-case performance of a <b>task</b> <b>execution</b> with a certain workload prediction errors is predictable. On the other hand, we build a close-to-practice cloud prototype over a real cluster environment deployed with 56 virtual machines, and evaluate our solution with differ-ent resource contention degrees. Experiments show that <b>task</b> <b>execution</b> lengths under our solution with estimates of worst-case performance are close to their theoretical ideal values, in both non-competitive situation with adequate resources and the competitive situation with a certain limited available resources. We also observe a fair treatment on the resource allocation among all tasks. I...|$|R
40|$|We {{introduce}} a novel <b>task</b> <b>execution</b> capability that enhances {{the ability of}} in-situ crew members to function independently from Earth by enabling safe and efficient interaction with automated systems. This <b>task</b> <b>execution</b> capability provides the ability to (1) map goal-directed commands from humans into safe, compliant, automated actions, (2) quickly and safely respond to human commands and actions during <b>task</b> <b>execution,</b> and (3) specify complex motions through teaching by demonstration. Our results are applicable to future surface robotic systems, and we have demonstrated these capabilities on JPL's All-Terrain Hex-Limbed Extra-Terrestrial Explorer (ATHLETE) robot...|$|R
40|$|Abstract—This article {{discusses}} different {{dimensions of}} automation in {{the integration of}} multiple, detached, unmanned sensor platforms into a military helicopter scenario. Artificial cognitive units implement parts of human-like knowledge-rich <b>task</b> <b>execution</b> aboard a highly automated vehicle. Artificial cognition, being the method used, allows <b>task</b> <b>execution</b> beyond pre-scripted and predefined instruction sets, utilizing reasoning about the current situation to support goal-driven behaviour during <b>task</b> <b>execution</b> instead. The <b>tasks</b> assigned by the human operator are formulated at an abstraction level that {{might as well be}} used to task human subordinates within a mission. Like human subordinates, the UAV uses its cognitive capabilities to adapt <b>task</b> <b>execution</b> to the currently known situation including knowledge about the task assignments of teammates. Keywords – Task-based guidance; goal-driven behaviour; artificial cognititive units; artificial cognition; level of automation. I...|$|R
40|$|Shared {{control is}} a key {{technology}} for various robotic applications in which a robotic system and a human operator are meant to collaborate efficiently. In order to achieve efficient <b>task</b> <b>execution</b> in shared control, {{it is essential to}} predict the desired behavior for a given situation or context to simplify the control task for the human operator. To do this prediction, we use Learning from Demonstration (LfD), which is a popular approach for transferring human skills to robots. We encode the demonstrated behavior as trajectory distributions and generalize the learned distributions to new situations. The goal {{of this paper is to}} present a shared control framework that uses learned expert distributions to gain more autonomy. Our approach controls the balance between the controller’s autonomy and the human preference based on the distributions of the demonstrated trajectories. Moreover, the learned distributions are autonomously refined from collaborative <b>task</b> <b>executions,</b> resulting in a master-slave system with increasing autonomy that requires less user input with an increasing number of <b>task</b> <b>executions.</b> We experimentally validated that our shared control approach enables efficient <b>task</b> <b>executions.</b> Moreover, the conducted experiments demonstrated that the developed system improves its performances through interactive <b>task</b> <b>executions</b> with our shared control...|$|R
40|$|Abstract. Authorization {{and access}} control is of primary {{importance}} to work-flow healthcare environments. Although task dependencies in the workflow {{give rise to}} the need for a specific ordering of <b>task</b> <b>executions,</b> it is authorization that determines who can execute the various tasks that comprise the workflow and what information can be accessed during <b>task</b> <b>executions.</b> Furthermore, a challenge of workflow security is to enforce the least privilege principle (i. e. users must be allowed to receive the least possible permissions required to per-form a <b>task)</b> throughout workflow <b>execution</b> {{in order to reduce the}} risk of com-promising information integrity during <b>task</b> <b>executions.</b> However, adherence to the least privilege principle often requires the enforcement of dynamic, contex-tual constraints so that authorizations for access to data during <b>task</b> <b>executions</b> are granted to and revoked from users dynamically. This paper discusses an event-based, role-based workflow authorization model and mechanism that ad-dresses this issue. In particular, the model augments the capabilities of tradi-tional role-based access control (RBAC) models by allowing user roles to change dynamically during workflow execution based on the occurrence of specific events, in order to prevent users from acquiring unnecessary privileges during workflow <b>task</b> <b>executions</b> and, hence, synchronizing authorization flow with the progression of the workflow...|$|R
5000|$|Executor {{interface}} decouples <b>task</b> <b>execution</b> from execution method; {{thread pool}} {{is a special}} executor ...|$|R
5000|$|... what {{hierarchies}} {{of agents}} are useful (e.g. <b>task</b> <b>execution</b> agents, scheduling agents, resource providers ...).|$|R
40|$|Abstract — This paper {{proposes a}} method of {{defining}} and analysing robotic tasks using Petri Nets. Both the robot behaviors and environment are modelled using Generalized Stochastic Petri Nets (GSPNs). Each action is modelled separately and composed with others to provide a complete <b>task</b> <b>execution.</b> The use of Petri Nets allows the qualitative and quantitative analysis of the <b>task</b> <b>execution...</b>|$|R
40|$|Abstract—Reducing energy {{consumption}} for high end computing can bring various benefits such as, reduce operating costs, increase system reliability, and environment respect. This paper aims to develop scheduling heuristics and to present application experience for reducing power consumption of parallel tasks in a cluster with the Dynamic Voltage Frequency Scaling (DVFS) technique. In this paper, formal models are presented for precedence-constrained parallel tasks, DVFS enabled clusters, and {{energy consumption}}. This paper studies the slack time for non-critical jobs, extends their execution time {{and reduces the}} energy consumption without increasing the <b>task’s</b> <b>execution</b> time as a whole. Additionally, Green Service Level Agreement is also considered in this paper. By increasing <b>task</b> <b>execution</b> time within an affordable limit, this paper develops scheduling heuristics to reduce energy consumption of a <b>tasks</b> <b>execution</b> and discusses the relationship between energy consumption and <b>task</b> <b>execution</b> time. Models and scheduling heuristics are examined with a simulation study. Test results justify the design and implementation of proposed energy aware scheduling heuristics in the paper...|$|R
40|$|International audienceShared {{control is}} a key {{technology}} for various robotic applications in which a robotic system and a human operator are meant to collaborate efficiently. In order to achieve efficient <b>task</b> <b>execution</b> in shared control, {{it is essential to}} predict the desired behavior for a given situation or context in order to simplify the control task for the human operator. This prediction is obtained by exploiting Learning from Demonstration (LfD), which is a popular approach for transferring human skills to robots. We encode the demonstrated behavior as trajectory distributions and generalize the learned distributions to new situations. The goal {{of this paper is to}} present a shared control framework that uses learned expert distributions to gain more autonomy. Our approach controls the balance between the controller's autonomy and the human preference based on the distributions of the demonstrated trajectories. Moreover, the learned distributions are autonomously refined from col-laborative <b>task</b> <b>executions,</b> resulting in a master-slave system with increasing autonomy that requires less user input with an increasing number of <b>task</b> <b>executions.</b> We experimentally validated that our shared control approach enables efficient <b>task</b> <b>executions.</b> Moreover, the conducted experiments demonstrated that the developed system improves its performances through interactive <b>task</b> <b>executions</b> with our shared control...|$|R
40|$|Compared to {{traditional}} distributed computing like grid system, it is non-trivial to optimize cloud <b>task's</b> <b>execution</b> performance {{due to its}} more constraints like user payment budget and divisible resource demand. In this paper, we analyze in-depth our proposed optimal algorithm minimizing <b>task</b> <b>execution</b> length with divisible resources and payment budget: 1) We derive the upper bound of cloud task length, by taking into account both workload prediction errors and hostload prediction errors. With such state-of-the-art bounds, the worst-case <b>task</b> <b>execution</b> performance is predictable, which can {{improve the quality of}} service in turn. 2) We design a dynamic version for the algorithm to adapt to the load dynamics over <b>task</b> <b>execution</b> progress, further improving the resource utilization. 3) We rigorously build a cloud prototype over a real cluster environment with 56 virtual machines, and evaluate our algorithm with different levels of resource contention. Cloud users in our cloud system are able to compose various tasks based on off-the-shelf web services. Experiments show that <b>task</b> <b>execution</b> lengths under our algorithm are always close to their theoretical optimal values, even in a competitive situation with limited available resources. We also observe a high level of fair treatment on the resource allocation among all tasks...|$|R
5000|$|... #Caption: Fig. 2: Hybrid {{multi-layer}} control architecture for semi-autonomous {{service robots}} with verified <b>task</b> <b>execution.</b>|$|R
5000|$|Vinton Cerf et al., System for Distributed <b>Task</b> <b>Execution</b> June 3, 2003, U.S. Patent 6,574,628 ...|$|R
30|$|Ramezani et al., in [29] {{developed}} Multi-Objective Jswarm (MO-Jswarm) scheduling algorithm {{to determine}} the optimal task distribution over the virtual machines (VMs) attempting to balance between different conflicting objectives including <b>task</b> <b>execution</b> time, <b>task</b> transferring time, and <b>task</b> <b>execution</b> cost. According to the authors the proposed algorithm {{had the ability to}} enhance the QOS and to provide a balanced trade-off between the conflicted objectives.|$|R
40|$|We {{present an}} {{integrated}} approach that provides fault tolerance and dynamic power management for a real-time task executing in an embedded system. Fault tolerance is achieved through an adaptive checkpointing scheme that dynamically adjusts the checkpointing interval during <b>task</b> <b>execution.</b> Adaptive checkpointing is then {{combined with a}} dynamic voltage scaling scheme to achieve power reduction. The resulting energy-aware adaptive checkpointing scheme uses a dynamic voltage scaling criterion that is based {{not only on the}} slack in <b>task</b> <b>execution</b> but also on the occurrences of faults during <b>task</b> <b>execution.</b> Simulation results show that compared to previous methods, the proposed approach significantly reduces power consumption and increases the likelihood of timely task completion in the presence of faults...|$|R
40|$|Applications {{in mobile}} {{manipulation}} require sophisticated motion execution skills {{to address issues}} like redundancy resolution, reactive obstacle avoidance, and transitioning between di#erent motion behaviors. The elastic strip framework is an approach to reactive motion generation providing an integrated solution to these problems. Novel techniques within the elastic strip framework are presented, allowing task-consistent obstacle avoidance and task-consistent motion behavior. General transition criteria and methods are presented, permitting the suspension and resumption of <b>task</b> <b>execution</b> to ensure other desired motion behavior, such as obstacle avoidance. <b>Task</b> <b>execution</b> has to be suspended when kinematic constraints or changes in the environment render task-consistent motion behavior infeasible. <b>Task</b> <b>execution</b> is resumed {{as soon as it}} is consistent with other desired motion behavior...|$|R
40|$|In {{the past}} {{considerable}} {{effort has been}} invested in developing systems which support autonomous <b>task</b> <b>execution</b> of navigation of robots in (partially) unstructured environments. Technological advances resulted in a new application area for robots: the service sector. This paper presents several examples of service robots with different degrees of automation in their <b>task</b> <b>execution.</b> Methods in planning and layout of service robots are addressed. The role of the operator/user-interaction with the system is demonstrated with three examples of prototype service robots. In all examples referencing the robot to the object {{turned out to be}} of crucial importance for accurate <b>task</b> <b>execution.</b> This lead to the use of a new optical measurement system: The Reseau Scanning Camera (RSC) ...|$|R
40|$|We {{have been}} {{studying}} an automatic parallelizing translator for sequential C programs with MPI, which is utilized by users without the knowledge for parallel programming languages and parallel computer architectures. In our parallelizing translator for C programs in the past, dynamic <b>task</b> <b>execution</b> control has been adopted for generated parallel programs, because {{it was difficult to}} analyze the costs of <b>tasks,</b> or <b>execution</b> time before actual execution. On the other hand, the researches on task scheduling technologies and task cost analysis has been evolved concurrently by another research groups in our laboratory and they are cooperating with the automatic parallelizing translator, so in this paper we report the implementation of generating parallel program with static <b>task</b> <b>execution</b> control and a tuning mechanism to reconfigure parallel programs by rescheduling with actual <b>task</b> <b>execution</b> time as <b>task</b> costs...|$|R
40|$|A {{hardware}} and software environment for shared control of telerobot <b>task</b> <b>execution</b> has been implemented. Modes of <b>task</b> <b>execution</b> range from fully teleoperated to fully autonomous as well as shared where hand controller inputs from the human operator are mixed with autonomous system inputs in real time. The objective of the shared control environment is to aid the telerobot operator during <b>task</b> <b>execution</b> by merging real-time operator control from hand controllers with autonomous control to simplify <b>task</b> <b>execution</b> for the operator. The operator is the principal command source and can assign as much autonomy for a task as desired. The shared control hardware environment consists of two PUMA 560 robots, two 6 -axis force reflecting hand controllers, Universal Motor Controllers {{for each of the}} robots and hand controllers, a SUN 4 computer, and VME chassis containing 68020 processors and input/output boards. The operator interface for shared control, the User Macro Interface (UMI), is a menu driven interface to design a task and assign the levels of teleoperated and autonomous control. The operator also sets up the system monitor which checks safety limits during <b>task</b> <b>execution.</b> Cartesian-space degrees of freedom for teleoperated and/or autonomous control inputs are selected within UMI as well as the weightings for the teleoperation and autonmous inputs. These are then used during <b>task</b> <b>execution</b> to determine the mix of teleoperation and autonomous inputs. Some of the autonomous control primitives available to the user are Joint-Guarded-Move, Cartesian-Guarded-Move, Move-To-Touch, Pin-Insertion/Removal, Door/Crank-Turn, Bolt-Turn, and Slide. The operator can execute a task using pure teleoperation or mix control execution from the autonomous primitives with teleoperated inputs. Presently the shared control environment supports single arm <b>task</b> <b>execution.</b> Work is presently underway to provide the shared control environment for dual arm control. Teleoperation during shared control is only Cartesian space control and no force-reflection is provided. Force-reflecting teleoperation and joint space operator inputs are planned extensions to the environment...|$|R
40|$|In {{the past}} decade, the {{limitations}} of models considering fixed (worst case) <b>task</b> <b>execution</b> times have been acknowledged for large application classes within soft real-time systems. A more realistic model considers the <b>tasks</b> having varying <b>execution</b> times with given probability distributions. Considering such a model with specified <b>task</b> <b>execution</b> time probability distribution functions, an important performance indicator {{of the system is}} the expected deadline miss ratio of the tasks and of the task graphs. This article presents an approach for obtaining this indicator in an analytic way. Our goal is to keep the analysis cost low, in terms of required analysis time and memory, while considering as general classes of target application models as possible. The following main assumptions have been made on the applications which are modelled as sets of task graphs: the tasks are periodic, the <b>task</b> <b>execution</b> times have given generalised probability distribution functions, the <b>task</b> <b>execution</b> deadlines are given and arbitrary, the scheduling policy can belong to practically any class of non-preemptive scheduling policies, and a designer supplied maximum number of concurrent instantiations of the same task graph is tolerated in the system. Experiments show the efficiency of the proposed technique for monoprocessor systems...|$|R
40|$|In {{this paper}} {{we present a}} {{behaviour}}-based mobile robot system for <b>task</b> <b>execution.</b> The behaviour model of this system consists {{of a number of}} motion behaviours, including reflexes and voluntary motion behaviours, and knowledge acquisition modules providing supporting information. <b>Execution</b> of a <b>task</b> is regarded as a problem-solving process. A blackboard model is introduced to overcome some shortcomings of the behaviour-based architectures, especially concerning modularity and <b>task</b> <b>execution</b> capability. The concept of attention is introduced in the behaviour control, which is more advantageous than the behaviour control mechanisms presented in the literature. Its introduction results in situation-dependent behaviour coordination. For efficient <b>task</b> <b>execution,</b> environment knowledge is maintained in a memory. Task-achieving behaviour is designed {{to make use of the}} memory when available. status: publishe...|$|R
40|$|In {{planning}} and scheduling domains such as space-based data collection, <b>task</b> <b>execution</b> cost is {{highly dependent on}} system state. Transitioning between states may also be costly. In this paper we consider the problem of scheduling tasks in the case where the cost of executing a task depends upon the state {{in which it is}} executed. To separate out the state-dependent aspects of the question, we examine several simplified versions of the problem in which we consider the interactions of <b>task</b> <b>execution</b> cost and state transition cost without the complications introduced by task dependencies and preconditions. We then describe a solution by exhaustive search. Finally, we outline a promising line of research involving a statistical analysis of the manner in which <b>task</b> <b>execution</b> cost depends on state...|$|R
40|$|The {{aim of this}} Master’s degree {{paper is}} to compose {{information}} system for offering services of <b>tasks</b> <b>execution.</b> The sphere of paper research is the management of personnel hiring service and providing of <b>tasks</b> <b>execution</b> services in UAB DARBO SPRENDIMAI. According to company demands there has been created new information system of providing services for <b>tasks</b> <b>execution,</b> which integrates all till now collected data and computerizes the workplace and functions of UAB DARBO SPRENDIMAI office. The composed program matches indicated specific and not specific requirements and criterion of functionality. It has been tested and, in sequences, the possibilities and variations of program improvement have been foreseen. The consumer interaction documentation, explaining the principles of program running and its usage, has been prepared as well...|$|R
30|$|These two modules {{manage the}} order of the <b>tasks</b> <b>executions</b> and compute the {{processor}} execution time for each one.|$|R
5000|$|Using <b>Task</b> <b>Execution</b> EditoR (STEER), [...] {{embodiments}} {{of multiple}} Semantically Described Services and Service Controls the following applications are possible ...|$|R
