744|2911|Public
5|$|The orbiter {{continued}} to experience recurring problems in 2009, including four spontaneous resets, {{culminating in a}} four-month shut-down of the spacecraft from August to December. While engineers have not determined {{the cause of the}} recurrent resets, they have created new software to help <b>troubleshoot</b> the problem should it recur.|$|E
5|$|AVG TuneUp, {{previously}} called AVG PC Tuneup, and TuneUp Utilities, is {{a utility}} software suite for Microsoft Windows {{designed to help}} manage, maintain, optimize, configure and <b>troubleshoot</b> a computer system. It was produced and developed by TuneUp Software GmbH, headquartered in Darmstadt, Germany, and co-founded by Tibor Schiemann and Christoph Laumann in 1997. In 2011, AVG Technologies acquired TuneUp Software.|$|E
5|$|In 1882, Tivadar Puskás got Tesla {{another job}} in Paris with the Continental Edison Company. Tesla began working {{in what was}} then a brand new industry, {{installing}} indoor incandescent lighting citywide {{in the form of an}} electric power utility. The company had several subdivisions and Tesla worked at the Société Electrique Edison, the division in the Ivry-sur-Seine suburb of Paris in charge of installing the lighting system. There he gained a great deal of practical experience in electrical engineering. Management took notice of his advanced knowledge in engineering and physics and soon had him designing and building improved versions of generating dynamos and motors. They also sent him on to <b>troubleshoot</b> engineering problems at other Edison utilities being built around France and in Germany.|$|E
50|$|<b>Troubleshooting</b> {{can also}} {{take the form of}} a {{systematic}} checklist, <b>troubleshooting</b> procedure, flowchart or table that is made before a problem occurs. Developing <b>troubleshooting</b> procedures in advance allows sufficient thought about the steps to take in <b>troubleshooting</b> and organizing the <b>troubleshooting</b> into the most efficient <b>troubleshooting</b> process. <b>Troubleshooting</b> tables can be computerized to make them more efficient for users.|$|R
40|$|This paper {{describes}} a methodology for aiding {{the learning of}} <b>troubleshooting</b> tasks {{in the course of}} an engineer's work. The approach supports learning in the context of actual, on-the-job <b>troubleshooting</b> and, in addition, supports performance of the <b>troubleshooting</b> task in tandem. This approach has been implemented in a computer tool called WALTS (Workspace for Aiding and Learning <b>Troubleshooting).</b> This method aids learning by helping the learner structure his or her task into the conceptual components necessary for <b>troubleshooting,</b> giving advice about how to proceed, suggesting candidate hypotheses and solutions, and automatically retrieving cognitively relevant media. WALTS includes three major components: a structured dynamic workspace for representing knowledge about the <b>troubleshooting</b> process and the device being diagnosed; an intelligent agent that facilitates the <b>troubleshooting</b> process by offering advice; and an intelligent media retrieval tool that automatically presents candidate hypotheses and solutions, relevant cases, and various other media. WALTS creates resources for future learning and aiding of <b>troubleshooting</b> by storing completed <b>troubleshooting</b> instances in a self-populating database of <b>troubleshooting</b> cases. The methodology described in this paper is partly based on research in problem-based learning, learning by doing, case-based reasoning, intelligent tutoring systems, and the transition from novice to expert. The tool is currently implemented in the domain of remote computer <b>troubleshooting...</b>|$|R
5000|$|Advanced CNC <b>Troubleshooting</b> - Analysis of CNC {{issues and}} <b>troubleshooting</b> {{techniques}} ...|$|R
25|$|The {{most recent}} {{development}} in lighting control is RDM (lighting), or Remote Device Management. This protocol allows for {{communication between the}} lighting controller and fixtures. With RDM, users can <b>troubleshoot,</b> address, configure, and identify fixtures from the RDM enabled lighting desk.|$|E
25|$|Various minor {{accessories}} {{are available}} to fit these hose connectors. These include interstage pressure gauges, which are used to <b>troubleshoot</b> and tune the regulator (not for use underwater), noisemakers, used to attract attention underwater and on the surface, and valves for inflating tires and inflatable boat floats, making the air in a scuba cylinder available for other purposes.|$|E
25|$|A {{multimeter}} can be {{a hand-held}} device useful for basic fault finding and field service work, or a bench instrument which can measure to a very high degree of accuracy. They {{can be used to}} <b>troubleshoot</b> electrical problems in a wide array of industrial and household devices such as electronic equipment, motor controls, domestic appliances, power supplies, and wiring systems.|$|E
5000|$|Mager, R.F. (1983). <b>Troubleshooting</b> the <b>Troubleshooting</b> Course, Or, Debug D'Bugs. Atlanta, GA: The Center for Effective Performance Inc.|$|R
50|$|Protocol analyzers {{are mainly}} used for {{performance}} measurement and <b>troubleshooting.</b> These devices {{connect to the}} network to calculate key performance indicators to monitor the network and speed-up <b>troubleshooting</b> activities.|$|R
40|$|Analysis {{of a real}} case of {{software}} <b>troubleshooting</b> {{made it clear that}} probabilistic models, or Bayesian networks are suitable for modeling software <b>troubleshooting</b> processes in today’s computing environments. As a way to support software <b>troubleshooting</b> by reusing skillful support engineers’ expertise, I propose to use Bayesian networks and probabilistic reasoning for case-based retrieval. The outline of query reformulation using Bayesian network is presented...|$|R
25|$|Technical diving {{encompasses}} multiple {{aspects of}} diving, that typically share lack of {{direct access to}} surface, which {{may be caused by}} physical constraints, like an overhead environment, or physiological, like decompression obligation. In case of emergency, therefore, the diver or diving team must be able to <b>troubleshoot</b> and solve the problem underwater. This requires planning, situational awareness, and redundancy in critical equipment, and is facilitated by skill and experience in appropriate procedures for managing reasonably foreseeable contingencies.|$|E
25|$|Improving engine {{reliability}} {{and ease of}} maintenance is a major objective for the F135. The engine has fewer parts than similar engines, which improves reliability. All line-replaceable components (LRCs) can be removed and replaced {{with a set of}} six common hand tools. The F135's health management system is designed to provide real time data to maintainers on the ground. This allows them to <b>troubleshoot</b> problems and prepare replacement parts before the aircraft returns to base. According to Pratt & Whitney, this data may help drastically reduce troubleshooting and replacement time, as much as 94% over legacy engines.|$|E
25|$|Designing {{systems in}} churches and similar {{religious}} facilities often poses a challenge, because the speakers {{may have to}} be unobtrusive to blend in with antique woodwork and stonework. In some cases, audio designers have designed custom-painted speaker cabinets so that the speakers will blend in with the church architecture. Some church facilities, such as sanctuaries or chapels are long rooms with low ceilings, which means that additional fill-in speakers are needed throughout the room to give good coverage. An additional challenge with church SR systems is that, once installed, they are often operated by amateur volunteers from the congregation, which means that they must be easy to operate and <b>troubleshoot.</b>|$|E
40|$|The goal of decision-theoretic <b>troubleshooting</b> {{is to find}} a {{sequence}} of actions that minimizes the expected cost of repair of a device. If the device is complex then it is convenient to create several Bayesian Networks, each designed to solve a particular problem. At the beginning of a <b>troubleshooting</b> process, it is often necessary to help the user to select the proper model. Complications arise if the user is able to give only a vague description of the problem. In such a case we need to work simultaneously with many <b>troubleshooting</b> models. In this paper we show how models that were originally designed as independent models can be used together while memory space and computational time are kept low. We allow models to be overlapping, i. e., two or more models may contain equivalent <b>troubleshooting</b> steps and/or equivalent problem causes (device faults). We propose a <b>troubleshooting</b> procedure that can be used with many simultaneous models at once. The key that enables us to join the models together is the single fault assumption, which means {{that there is only one}} fault causing a device malfunction at a time. 1 SACSO <b>Troubleshooting</b> Approach We start with a review of the SACSO <b>troubleshooting</b> approach proposed for <b>troubleshooting</b> with a single model. The approach was implemented in the HP BATS troubleshooter [2]. The goal of a <b>troubleshooting</b> task {{is to find a}}nd remove the cause of a device malfunction. In case of a complex device, such as for example a laser printer, it is convenient to create several models each designed to solve a particular problem. All original <b>troubleshooting</b> models M i, i = 1, 2,..., N have similar structure. Each model M i describes relations between a set of repair actions A i, a set of observations O i, and a set of causes C i th [...] ...|$|R
40|$|This paper {{describes}} ecient probabilistic <b>troubleshooting</b> of electro-mechanical devices. We relax two of {{the standard}} requirements made to ensure tractability of this task, by allowing cost structures {{to depend on the}} sequence of actions performed so far (conditional cost) as well as <b>troubleshooting</b> actions to remedy intersecting sets of faults (dependent actions). Heuristics for these two extensions of basic <b>troubleshooting</b> are proposed and evaluated through empirical studies...|$|R
50|$|<b>Troubleshooting</b> {{is carried}} out {{as a result of}} a fault or failure, may result in {{maintenance}} procedures, or emergency workarounds until such time as a maintenance procedure can be carried out. <b>Troubleshooting</b> procedures will involve knowledge databases, guides and process to cover the role of network operations engineers from initial diagnostics to advanced <b>troubleshooting.</b> This stage often involves problem simulation, and is the traditional interface to design.|$|R
25|$|The {{site was}} {{considered}} to be of such high strategic importance that it attracted personal visits from many of the Nazi régime's most elite officers; Heinrich Himmler and SS-Obergruppenführers Hans Kammler and Gottlob Berger visited in September 1943, and Adolf Hitler visited in the spring of 1944. The commander of the site was Major-General Dr Walter Dornberger, leader of Nazi Germany's V-2 rocket program. Wernher von Braun, creator of the V-2, the central figure in Germany's pre-war rocket development program, and post-war director of NASA's Marshall Space Flight Center, worked at the Blizna test site and personally visited the test missile impact areas to <b>troubleshoot</b> any problems discovered during trials.|$|E
25|$|On the station, {{the crews}} {{continued}} to work on transfer operations, and continued work on the water reclamation system. During the Mission Status Briefing, lead ISS Flight Director Ginger Kerrick noted that a sample {{was taken from the}} Water Processor Assembly that contained 10% urine and 90% condensate, and would be returned to the ground with the shuttle. Kerrick noted that if activation of the system continued on schedule, a sample from the potable water dispenser would be taken on flight day eleven. The ground crew continued to <b>troubleshoot</b> the Urine Processor Assembly, looking at whether there is a sensor touching part of the system’s centrifuge as it rotates, which might be causing it to slow down.|$|E
25|$|Rawhide is the {{development}} tree for Fedora. This is {{a copy of a}} complete Fedora distribution where new software is added and tested, before inclusion in a later stable release. As such, Rawhide is often more feature rich than the current stable release. In many cases, the software is made of CVS, Subversion or Git source code snapshots which are often actively developed by programmers. Although Rawhide is targeted at advanced users, testers, and package maintainers, it is capable of being a primary operating system. Users interested in the Rawhide branch often update on a daily basis and help <b>troubleshoot</b> problems. Rawhide users don't have to upgrade between different versions as it follows a rolling release update model.|$|E
40|$|When {{a complex}} {{electromechanical}} system fails, the <b>troubleshooting</b> procedure adopted is often complex and tedious. No standard methods currently exist {{to optimize the}} sequence of steps in a <b>troubleshooting</b> process. The ad hoc methods generally followed are less than optimal methods and can result in high maintenance costs. This paper describes the use of behavioral models and multistage decision-making models in Bayesian networks for representing the <b>troubleshooting</b> process. It discusses advantages in using these methods and the difficulties in implementing them. An approximate method to obtain optimal decision sequence for a <b>troubleshooting</b> process on a complex electromechanical system is also described. 1...|$|R
40|$|A randomized, {{post-test}} only {{control group}} experimental design with a counter-balanced internal replication {{was used to}} determine the effects of thinking aloud pair problem solving (TAPPS) on the <b>troubleshooting</b> performance of college students in a power technology course. The experimental results were stable across two <b>troubleshooting</b> tasks. Students who participated in TAPPS groups were assigned a listening partner and verbalized their thought processes. They were significantly more successful (p <. 05) at <b>troubleshooting</b> engine faults than were students in the work alone control groups. Among students who successfully completed the <b>troubleshooting</b> tasks across both groups, there were no significant differences in time required for completion. These findings indicate that the use of thinking aloud pair problem solving may be an important step in the development of metacognitive skills among students in technological <b>troubleshooting...</b>|$|R
40|$|We {{present an}} {{approach}} to e#ciently generating an inspection strategy for fault diagnosis. We extend the traditional <b>troubleshooting</b> framework to model nonperfect repair actions, and we include questions. Questions are <b>troubleshooting</b> steps that do not aim at repairing the device, but merely are performed to capture information about the failed equipment, and thereby ease the identification and repair of the fault. We show how Vesely and Fussell's measure of component importance extends to this situation, and focus on its applicability to compare <b>troubleshooting</b> steps. We give an approximate algorithm for generating a "good" <b>troubleshooting</b> strategy {{in cases where the}} assumptions underlying Vesely and Fussell's component importance are violated, and discuss how to incorporate questions into this <b>troubleshooting</b> strategy. Finally, we utilize certain properties of the domain to propose a fast calculation scheme...|$|R
25|$|Mosby {{finally got}} the Department of Justice post he wanted as Philander Knox ended his term as {{attorney}} general. It was not with the trust-busting unit, however, but with the Bureau of Insular and Territorial affairs, where Mosby worked (at a low salary of $2,400/year) under his brother-in-law Charles W. Russell from 1904 to 1910. In 1905 President Roosevelt again sent him to Alabama to <b>troubleshoot</b> allegations of irregularities at the Port of Mobile. Next, {{he was sent to}} Oklahoma to investigate charges against U.S. Marshall (and former Rough Rider) Benjamin Colbert. He also secured an indictment of McAlester attorneys George Mansfield, John F. McMurray and Melvin Cornish for misappropriation of Indian Trust funds, but his superior Russell thought the evidence insufficient and ultimately dropped the charges two years later. Meanwhile, Mosby went back to investigate charges of land frauds against Indian minors, and on his return found little to do.|$|E
25|$|Reading {{the control}} yoke {{data from the}} FDR {{revealed}} that the pilots made a crucial error by pulling back on the control yoke throughout the dive with the stick-shaker audible on the CVR from {{the onset of the}} dive. This raised the aircraft's angle of attack, removed all aileron authority, prevented recovery from the roll induced by the rudder, and caused an aerodynamic stall. Because the aircraft had entered a slip, pulling back on the yoke only aggravated the bank angle further. Boeing's test pilots reenacted the fatal dive in both a simulator, as well as a test 737-300 by flying the same parameters on the accident FDR, and found that recovery from a fully deflected rudder at level flight, while at 190 knot crossover speed, was accomplished by turning the wheel to the opposite direction of the roll, and not pulling back on the yoke to regain aileron authority. The NTSB remarked that no airline had ever trained a pilot on the proper recovery technique for the situation experienced by the pilots and that the pilots had just 10 seconds from the onset of the roll to <b>troubleshoot</b> before recovery of the aircraft was impossible. The FDR revealed that after the aircraft stalled, it along with the crew and passengers were subjected up to a 4g load throughout the dive until impact with the ground in an 80 degree nose-down attitude traveling at approximately 300mph under significant sideslip.|$|E
500|$|... a. [...] The Inspector of Target Practice {{had been}} set up so that the Admiralty could have a gunnery officer other than the Director of Naval Ordnance capable to <b>troubleshoot</b> gunnery {{standards}} throughout the Royal Navy, and be of sufficient rank and stature to make their views known. [...] His assistant(s) would be instrumental in observing tests and visiting ships.|$|E
40|$|The {{research}} {{poses the}} question: How can they design manufacturing systems, {{and in particular}} the process control technology, to make <b>troubleshooting</b> easier for the maintenance specialist. To answer the question, researchers focused on understanding how maintenance specialists acquire and use information during <b>troubleshooting</b> and the types of difficulties they encounter in doing this. The approach involved: (1) semi-structured interviews with expert troubleshooters; (2) field-based observation of plant-floor trouble-shooting episodes; and (3) a computer-based experiment to investigate the effects of hierarchical process controller display design on <b>troubleshooting</b> performance. Results include the development of a descriptive model of <b>troubleshooting</b> to use as a tool to help distinguish between different kinds of information utilization and different sources of difficulty. Insights into sources of <b>troubleshooting</b> difficulty are summarized and ways to alleviate sources of difficulty are recommended...|$|R
40|$|Electronic {{resource}} access <b>troubleshooting</b> {{is familiar}} work in most libraries. But the added complexity introduced when a library implements a web-scale discovery service creates a strong need for well-organized, rigorous training to enable <b>troubleshooting</b> staff {{to provide the}} best service possible. This article outlines strategies, tools, and a basic curriculum that librarians can use to both refine their own <b>troubleshooting</b> skills, and systematically introduce those skills to others...|$|R
40|$|<b>Troubleshooting</b> {{is one of}} {{the areas}} where Bayesian Networks are {{successfully}} applied [7]. In the present paper we show that the generally defined <b>troubleshooting</b> task is NP-hard. Heuristic algorithms that find an optimal solutions are described. A method approximating the optimal solution within polynomial time is proposed. Approximations provided by different methods are compared with the optimal solutions. The comparisons are performed on models for <b>troubleshooting</b> of laser printers...|$|R
500|$|Movement by {{the astronauts}} was {{detected}} by the spacecraft's inertial measurement unit and the astronaut's biomedical sensors, and also indicated by increases in oxygen spacesuit flow, and sounds from Grissom's stuck-open microphone. There was no evidence to identify the movement, {{or whether it was}} related to the fire. [...] The stuck microphone was part of a problem with the communications loop connecting the crew, the Operations and Checkout Building, and the Complex 34 blockhouse control room. The poor communications led Grissom to remark: [...] "How {{are we going to get}} to the Moon if we can't talk between two or three buildings?" [...] The simulated countdown was held again at 5:40pm while attempts were made to <b>troubleshoot</b> the communications problem. All countdown functions up to the simulated internal power transfer had been successfully completed by 6:20pm, but at 6:30 the count remained on hold at T minus 10 minutes.|$|E
500|$|Compared to the {{graphical}} changes, {{the artificial}} intelligence (AI) of the computer-controlled characters {{was only slightly}} changed. The justification given was that the team felt the AI worked very well for the first game. All {{they had to do}} was to tweak it a little and fix some bugs. There was, however, a lot of work done in improving the multiplayer portion of the game. For FreeSpace 2, the player's personal computer was assigned a greater role in predicting the possible consequences for other players' actions. This reduced the amount of data needed to be transferred between the computers, which would result in a smoother playing experience. Beta testers were recruited to stress test and <b>troubleshoot</b> the multiplayer mode as well. SquadWar was implemented as an attempt to establish a sense of continuity among the players in the form of a persistent online territorial fight, along with pilot statistics and ladder rankings. Volition hoped this concept would help to establish a strong, online community and build up the game's lifespan. The process of fixing the bugs detected was even publicly published on the game's official website as the [...] "Bug Fix of the Day" [...] feature.|$|E
500|$|Like all Progress spacecraft, M1-5 carried two docking systems, Kurs and TORU. The {{automated}} Kurs {{system was}} the primary docking system, with TORU, which required manual input, as the backup. Because Mir was unmanned {{at the time of}} its docking, and a cosmonaut aboard the station would have been required to perform a TORU docking, or to <b>troubleshoot</b> any other problems during the docking, the Soyuz TM-32 spacecraft was made ready for a flight to Mir should human intervention be required. The Soyuz may also have been launched if the flight control system aboard Mir failed. Cosmonauts Salizhan Sharipov and Pavel Vinogradov were originally scheduled to have been on standby for this mission, with Talgat Musabayev and Yuri Baturin, the crew who eventually flew TM-32 to the International Space Station, as the backup crew. [...] However, in December 2000, they were replaced by Gennady Padalka and Nikolai Budarin, a crew which became known as Expedition Zero. These cosmonauts were chosen because of their training for a similar emergency mission to the International Space Station the previous year, which would have been launched if the Zvezda module had failed to dock. If a manned flight had been launched, controllers would have waited until after it had landed to begin the deorbit of Mir.|$|E
40|$|Abstract — Technical support {{contributes}} 17 % of {{the total}} cost of ownership of today’s desktop PCs [25]. An important element of technical support is <b>troubleshooting</b> misconfigured applications. Misconfiguration <b>troubleshooting</b> is particularly challenging, because configuration information is shared and altered by multiple applications. In this paper, we present a novel <b>troubleshooting</b> system: PeerPressure, which uses statistics from a set of sample machines to diagnose the root-cause misconfigurations on a sick machine. This is in contrast with methods that require manual identification on a healthy machine for diagnosing misconfigurations [30]. The elimination of this manual operation makes a significant step towards automated misconfiguration <b>troubleshooting.</b> In PeerPressure, we introduce a ranking metric for misconfiguration candidates. This metric is based on empirical Bayesian estimation. We have prototyped a PeerPressure <b>troubleshooting</b> system and used a database of 87 machine configuration snapshots to evaluate its performance. With 20 real-world <b>troubleshooting</b> cases, PeerPressure can effectively pinpoint the root-cause misconfigurations for 12 of these cases. For the remaining cases, PeerPressure significantly narrows down the number of root-cause candidates by three orders of magnitude. I...|$|R
40|$|Understanding and <b>troubleshooting</b> {{performance}} {{problems in}} complex software systems is notoriously challenging. This challenge is compounded for software in production for several reasons. To avoid slowing down production systems, analysis and <b>troubleshooting</b> must incur minimal overhead. Further, performance issues in production {{can be both}} rare and non-deterministic, making the issues hard to reproduce. We argue {{that the most important}} reason why <b>troubleshooting</b> performance in production systems is challenging is that current tools only solve half the problem. <b>Troubleshooting</b> a performance anomaly is essentially the process of determining why certain events, such as high latency or resource usage, happened in a system. Unfortunately, most current analysis tools, such as profiler...|$|R
40|$|<b>Troubleshooting</b> {{systems is}} {{integral}} to experimental physics in both research and instructional laboratory settings. The recently adopted AAPT Lab Guidelines identify <b>troubleshooting</b> as an important learning outcome of the undergraduate laboratory curriculum. We investigate students' model-based reasoning on a <b>troubleshooting</b> task using data collected in think-aloud interviews during which pairs of students attempted to diagnose and repair a malfunctioning circuit. Our analysis scheme is informed by the Experimental Modeling Framework, which describes physicists' use of mathematical and conceptual models when reasoning about experimental systems. We show that this framework is a useful lens through which to characterize the <b>troubleshooting</b> process. Comment: 4 pages, 2 figures; Submitted to 2015 PERC Proceeding...|$|R
