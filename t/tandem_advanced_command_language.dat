1|1730|Public
50|$|TACL (the <b>Tandem</b> <b>Advanced</b> <b>Command</b> <b>Language)</b> is the {{scripting}} {{programming language}} used in Tandem Computers. TACL is the shell.|$|E
5000|$|An {{extensible}} shell <b>command</b> <b>language</b> (DIGITAL <b>Command</b> <b>Language)</b> ...|$|R
5000|$|DIGITAL <b>Command</b> <b>Language</b> (DCL) is the {{standard}} <b>command</b> <b>language</b> ...|$|R
5000|$|DIGITAL <b>Command</b> <b>Language</b> (DCL) - Digital <b>Command</b> <b>Language</b> - <b>command</b> line interpreter.|$|R
40|$|This paper studies Natural <b>Command</b> <b>Language</b> dialogues {{from the}} Information State Update {{perspective}} and proposes the specification of Dialogue Moves {{for this type}} of dialogues. First, we describe the properties of Natural <b>Command</b> <b>Languages</b> and Natural <b>Command</b> <b>Language</b> Dialogues. The paper proposes a classification of Dialogue Moves for Natural <b>Command</b> <b>Language</b> Dialogues and applies this moves to a sample dialogue. Finally, we compare Natural <b>Command</b> <b>Language</b> Moves with other Move Coding Schemes. This work has been funded by EU Fifth Framework Project SIRDUS (IST- 1999 - 10516) ...|$|R
50|$|Part 15: (1998) <b>Command</b> <b>language</b> dialoguesThis part {{provides}} {{recommendations for}} the ergonomic design of <b>command</b> <b>languages</b> used in user-computer dialogues. The recommendations cover <b>command</b> <b>language</b> structure and syntax, command representations, input and output considerations, and feedback and help.|$|R
50|$|Quantum Guarded <b>Command</b> <b>Language</b> (qGCL) {{was defined}} by P. Zuliani in his PhD thesis. It is based on Guarded <b>Command</b> <b>Language</b> created by Edsger Dijkstra.|$|R
5000|$|A <b>command</b> <b>{{language}}</b> is {{a language}} for job control in computing. It is a domain-specific and interpreted language; common {{examples of a}} <b>command</b> <b>language</b> are shell or batch programming languages.|$|R
50|$|A Rexx script or {{command is}} {{sometimes}} referred to as an EXEC in a nod to Rexx's role as a replacement for the older EXEC <b>command</b> <b>language</b> on CP/CMS and VM/370 and EXEC 2 <b>command</b> <b>language</b> on VM/SP.|$|R
40|$|This {{tutorial}} {{introduction to}} the IRAF <b>Command</b> <b>Language</b> presents {{an overview of the}} use and features of the language. The discussion is aimed toward the first-time user and describes the execution of tasks from the <b>Command</b> <b>Language.</b> The focus is the <b>Command</b> <b>Language</b> itself; the many packages and tasks that compose the IRAF system and the SDAS packages from STScI are described elsewhere. The emphasis is on using the <b>Command</b> <b>Language</b> to run existing programs, although sections are included that describe the addition of new tasks of one's own making. A quick guide to language features and facilities and to the suite of reduction and analysis packages currently available is provided in the Appendices...|$|R
40|$|The {{design of}} a uniform <b>command</b> <b>language</b> {{to be used in}} a local area network of heterogeneous, {{autonomous}} nodes is considered. After examining the major characteristics of such a network, and after considering the profile of a scientist using the computers on the net as an investigative aid, a set of reasonable requirements for the <b>command</b> <b>language</b> are derived. Taking into account the possible inefficiencies in implementing a guest-layered network operating system and <b>command</b> <b>language</b> on a heterogeneous net, the authors examine <b>command</b> <b>language</b> naming, process/procedure invocation, parameter acquisition, help and response facilities, and other features found in single-node <b>command</b> <b>languages,</b> and conclude that some features may extend simply to the network case, others extend after some restrictions are imposed, and still others require modifications. In addition, it is noted that some requirements considered reasonable (user accounting reports, for example) demand further study before they can be efficiently implemented on a network of the sort described...|$|R
50|$|Software {{is written}} in {{standard}} Fortran-77 and also has an interactive <b>command</b> <b>language</b> that allows the use of Fortran-77 mathematical and character expressions, macros, control flows and parallelization. Standard protocols are also written in this <b>command</b> <b>language</b> and can be modified by user without changing the source code.|$|R
5000|$|... #Subtitle level 3: Implementation for Tool <b>Command</b> <b>Language</b> (Tcl) ...|$|R
5000|$|... #Subtitle level 2: <b>Command</b> <b>language,</b> {{graphical}} {{user interface}} and delivery ...|$|R
50|$|Complete for CCL (Cerner <b>Command</b> <b>Language)</b> is {{provided}} by Cerner Corporation.|$|R
5000|$|Can be {{manipulated}} remotely through XML-based Remote Insight Board <b>Command</b> <b>Language</b> (RIBCL) ...|$|R
5000|$|The <b>command</b> <b>language</b> for VME {{is known}} as SCL (System Control Language).|$|R
5000|$|... use privileged {{options of}} the $SYSTEMSTATUS and other <b>command</b> <b>language</b> {{subsystems}} (CLSs).|$|R
40|$|Because of the {{differences}} in informational needs among medical practices, medical record systems should be flexible. The use of data base management and user-oriented <b>command</b> <b>languages</b> helps to achieve flexibility. The Regenstrief Medical Record System is based upon a data base management system and two user-oriented <b>command</b> <b>languages</b> (the RDB <b>Command</b> <b>Language</b> and CARE). Most batch reports, file maintenance procedures and ad hoc retrievals can be specified by the user by means of these two languages. This means that the user can specify which reports he wants and how they should look. Daily on-line activities are performed by application programs. The data base system also provides flexibility to these programs since the content and format of many of the display screens are defined by statements that are similar to the <b>command</b> <b>language</b> statements and stored within a text file. The Regenstrief Medical Record System now carries records for 60, 000 patients...|$|R
5000|$|<b>Command</b> <b>Language</b> Interface (CLI) - library {{routines}} for parsing VMS {{command line}} parameters ...|$|R
50|$|Since version 8.6, the Tool <b>Command</b> <b>Language</b> {{supports}} coroutines in {{the core}} language.|$|R
5000|$|PCL - Printer <b>Command</b> <b>Language,</b> {{a printer}} control {{protocol}} family designed by Hewlett-Packard ...|$|R
5000|$|A {{straightforward}} <b>command</b> <b>language</b> that is {{the same}} for both terminal and batch jobs.|$|R
5000|$|Louis Pouzin - {{introduced}} the term shell for the <b>command</b> <b>language</b> used in Multics ...|$|R
5000|$|... #Subtitle level 4: 8.6.1 {{version of}} [...] Tcl (Tool <b>Command</b> <b>Language)</b> built from /usr/local/src ...|$|R
40|$|Intelligent wheelchairs (IW) are {{technologies}} that {{can increase the}} autonomy and independence of elderly people and patients suffering from some kind of disability. Nowadays the intelligent wheelchairs and the human-machine studies are very active research areas. This paper presents a methodology and a Data Analysis System (DAS) that provides an adapted <b>command</b> <b>language</b> to an user of the IW. This <b>command</b> <b>language</b> {{is a set of}} input sequences that can be created using inputs from an input device or a combination of the inputs available in a multimodal interface. The results show that there are statistical evidences to affirm that the mean of the evaluation of the DAS generated <b>command</b> <b>language</b> is higher than the mean of the evaluation of the <b>command</b> <b>language</b> recommended by the health specialist (p value = 0. 002) with a sample of 11 cerebral palsy users. This work demonstrates {{that it is possible to}} adapt an intelligent wheelchair interface to the user even when the users present heterogeneous and severe physical constraints...|$|R
5000|$|MTS {{supports}} terminal, batch, and server sessions. [...] All three use {{the same}} <b>command</b> <b>language.</b>|$|R
5000|$|NCAR <b>Command</b> <b>Language</b> (NCL), a {{programming}} language designed for use with climate and model data ...|$|R
3000|$|In editors such as Sam [10] a <b>command</b> <b>language</b> is {{provided}} {{to let the}} user write editing commands. In Clive, the ix editor does not include a <b>command</b> <b>language,</b> but uses plain system commands. This can be done because the I/O framework discussed in this paper permits data to have structure (although the system simply forwards messages without interpreting them, like UNIX would do.) [...]...|$|R
5000|$|... 4DOS Integration - Will {{allow for}} more <b>advanced</b> <b>command</b> {{processing}} {{in the product}} and running DOS based scripts.|$|R
5000|$|Tcl - {{when more}} complex {{programs}} {{need to be}} built, EEM supports Tcl (Tool <b>Command</b> <b>Language)</b> development ...|$|R
5000|$|DCL (Digital <b>Command</b> <b>Language)</b> - Similar to MS-DOS {{commands}} or the Korn shell or C shell on Unix.|$|R
5000|$|<b>Command</b> <b>{{language}},</b> {{a language}} {{used to control}} the tasks of the computer itself, such as starting other programs ...|$|R
5000|$|The NCAR <b>Command</b> <b>Language</b> (NCL) is used {{to analyze}} and {{visualize}} data in netCDF files (among other formats).|$|R
50|$|These {{languages}} {{can be used}} {{directly at}} the command line, but can also automate tasks that would normally be performed manually at the command line. They share this domain—lightweight automation—with scripting <b>languages,</b> though a <b>command</b> <b>language</b> usually has stronger coupling to the underlying operating system. <b>Command</b> <b>languages</b> often have either very simple grammars or syntaxes very close to natural language, to shallow the learning curve, as with many other domain-specific languages.|$|R
40|$|This is {{the first}} set of five volumes which {{describe}} the software architecture for the Computational Structural Mechanics Testbed. Derived from NICE, an integrated software system developed at Lockheed Palo Alto Research Laboratory, the architecture is composed of the <b>command</b> <b>language</b> CLAMP, the <b>command</b> <b>language</b> interpreter CLIP, and the data manager GAL. Volumes 1, 2, and 3 (NASA CR's 178384, 178385, and 178386, respectively) describe CLAMP and CLIP, and the CLIP-processor interface. Volumes 4 and 5 (NASA CR's 178387 and 178388, respectively) describe GAL and its low-level I/O. CLAMP, an acronym for <b>Command</b> <b>Language</b> for Applied Mechanics Processors, is designed to control the flow of execution of processors written for NICE. Volume 1 presents the basic elements of the CLAMP language and is intended for all users...|$|R
