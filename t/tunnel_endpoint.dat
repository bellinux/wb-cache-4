17|21|Public
5000|$|<b>Tunnel</b> <b>endpoint</b> {{identifier}} (TEID): A 32-bit(4-octet) field used to multiplex different {{connections in}} the same GTP tunnel.|$|E
5000|$|... 6to4, {{the most}} common IPv6 over IPv4 {{tunneling}} protocol, requires that the <b>tunnel</b> <b>endpoint</b> have a public IPv4 address. However, many hosts currently attach to the IPv4 Internet through one or several NAT devices, usually because of IPv4 address shortage. In such a situation, the only available public IPv4 address is assigned to the NAT device, and the 6to4 <b>tunnel</b> <b>endpoint</b> must be implemented on the NAT device itself. Many NAT devices currently deployed, however, cannot be upgraded to implement 6to4, for technical or economic reasons.|$|E
5000|$|... 6to4 {{requires}} a public IPv4 address, but provides a large 48-bit IPv6 prefix for each <b>tunnel</b> <b>endpoint,</b> {{and has a}} lower encapsulation overhead. Point-to-point tunnels can be more reliable and are more accountable than Teredo, and typically provides permanent IPv6 addresses that do {{not depend on the}} IPv4 address of the <b>tunnel</b> <b>endpoint.</b> Some point-to-point tunnel brokers also support UDP encapsulation to traverse NATs (for instance, the AYIYA protocol can do this). On the other hand, point-to-point tunnels normally require registration. Automated tools (for instance AICCU) make it easy to use Point-to-Point tunnels.|$|E
50|$|The Teredo {{protocol}} also encapsulates {{detailed information}} about the <b>tunnel's</b> <b>endpoint</b> in its data packets.|$|R
5000|$|The {{endpoint}} of {{at least}} one of the two <b>tunnel</b> <b>endpoints</b> should be able to change to provide mobility features.|$|R
50|$|Automatic {{tunneling}} {{refers to}} a technique by which the routing infrastructure automatically determines the <b>tunnel</b> <b>endpoints.</b> Some automatic tunneling techniques are below.|$|R
5000|$|The 6in4 {{protocol}} has {{no security}} features, thus {{one can easily}} inject IPv6 packets by spoofing the source IPv4 address of a <b>tunnel</b> <b>endpoint</b> and sending {{it to the other}} endpoint. This problem can partially be solved by implementing network ingress filtering (not near the exit point but close to the true source) or with IPsec.|$|E
50|$|A TSP {{session is}} {{initiated}} by the TSP client in the goal of establishing an end-to-end tunnel with the TSP server (tunnel broker). The session consists of a basic exchange of XML-encoded data using TCP or UDP. After the negotiation of tunnel setup parameters, the session is terminated and the client undertakes the task of configuring its local <b>tunnel</b> <b>endpoint.</b>|$|E
50|$|Teredo {{can only}} provide a single IPv6 address per <b>tunnel</b> <b>endpoint.</b> As such, {{it is not}} {{possible}} to use a single Teredo tunnel to connect multiple hosts, unlike 6to4 and some point-to-point IPv6 tunnels. The bandwidth available to all Teredo clients toward the IPv6 Internet is limited by the availability of Teredo relays, which are no different than 6to4 relays in that respect.|$|E
50|$|At {{the borders}} between the source {{network and the}} transit network, {{as well as the}} transit network and the {{destination}} network, gateways are used that establish the end-points of the IP tunnel across the transit network. Thus, the IP <b>tunnel</b> <b>endpoints</b> become native IP routers that establish a standard IP route between the source and destination networks. Packets traversing these end-points from the transit network are stripped from their transit frame format headers and trailers used in the tunnelling protocol and thus converted into native IP format and injected into the IP stack of the <b>tunnel</b> <b>endpoints.</b> In addition, any other protocol encapsulations used during transit, such as IPsec or Transport Layer Security, are removed.|$|R
5000|$|... 6to4 is {{recommended}} by [...] It uses protocol 41 encapsulation. <b>Tunnel</b> <b>endpoints</b> {{are determined by}} using a well-known IPv4 anycast address on the remote side, and embedding IPv4 address information within IPv6 addresses on the local side. 6to4 {{is the most common}} tunnel protocol currently deployed.|$|R
50|$|Many {{protocols}} {{can be used}} to tunnel data over IP networks. Some of them, like SSL, SSH, or L2TP create {{virtual network}} interfaces and give the impression of a direct physical connections between the <b>tunnel</b> <b>endpoints.</b> On a Linux host for example, these interfaces would be called tun0.|$|R
50|$|The {{separate}} tunnels {{are identified}} by a TEID (<b>Tunnel</b> <b>Endpoint</b> Identifier) in the GTP-U messages, {{which should be}} a dynamically allocated random number. If this random number is of cryptographic quality, then it will provide a measure of security against certain attacks. Even so, the requirement of the 3GPP standard is that all GTP traffic, including user data should be sent within secure private networks, not directly connected to the Internet. This happens on UDP port 2152.|$|E
50|$|NSAPI is {{also used}} {{as part of the}} Tunnel Identifier between GPRS Support Nodes (GSNs). The user {{identity}} (International Mobile Subscriber Identity (IMSI)) and the application identifier (NSAPI) are integrated into the Tunnel Identifier (GTPv0) (TID) or <b>Tunnel</b> <b>Endpoint</b> Identifier (GTPv1) (TEID) that uniquely identifies the subscriber’s sublink between the GSNs (SGSN and GGSN). The SGSN inserts the NSAPI along with the SGSN address in the “Create PDP Context Request.” One PDP context may have several (secondary) PDP contexts and NSAPI. The NSAPI is an integer value within the PDP context header.|$|E
50|$|Data is {{transmitted}} {{as if it}} were passing through private connections. Prior to transmission packets are encapsulated (wrapped) in a new packet, with a new header. Contained in the header is routing information. This logical path that the encapsulated packets travel through is called a tunnel. When each packet reaches the <b>tunnel</b> <b>endpoint,</b> it is “decapsulated” and forwarded to its final destination. Both tunnel endpoints need to support the same tunnelling protocol. Tunnelling protocols are operated at either layer 2 or layer 3 of the OSI model (Open Systems Interconnection).  Layer-2 VPN uses the layer 2 frame such as the Ethernet while layer-3 uses layer 3 packets such as IP.  Layer-3 VPN starts at layer 3, where it discards the incoming layer-2 frame and generates a new layer-2 frame at the destination. The most commonly used tunnelling protocols are IPsec, L2TP, PPTP and SSL. A packet with a private non-routable IP address can be sent inside a packet with globally unique IP address, thereby extending a private network over the Internet.|$|E
50|$|<b>Tunnel</b> <b>endpoints</b> must be {{authenticated}} before secure VPN tunnels can be established. User-created remote-access VPNs may use passwords, biometrics, {{two-factor authentication}} or other cryptographic methods. Network-to-network tunnels often use passwords or digital certificates. They permanently store {{the key to}} allow the tunnel to establish automatically, without intervention from the administrator.|$|R
50|$|Teredo alleviates {{this problem}} by {{encapsulating}} IPv6 packets within UDP/IPv4 datagrams, which most NATs can forward properly. Thus, IPv6-aware hosts behind NATs can serve as Teredo <b>tunnel</b> <b>endpoints</b> even when they don't have a dedicated public IPv4 address. In effect, a host that implements Teredo can gain IPv6 connectivity with no cooperation from the local network environment.|$|R
50|$|Even though 6in4 tunnels are static in nature, {{with the}} help of for example the {{heartbeat}} protocol one can still have dynamic <b>tunnel</b> <b>endpoints.</b> The heartbeat protocol signals {{the other side of the}} tunnel with its current endpoint location. A tool such as AICCU can then update the endpoints, in effect making the endpoint dynamic while still using the 6in4 protocol. Tunnels of this kind are generally called 'proto-41 heartbeat' tunnels.|$|R
30|$|SGW‐C and PGW‐C {{represent}} the control {{functions of the}} SGW and PGW, respectively.They are responsible for allocating the <b>tunnel</b> <b>endpoint</b> identifiers (TEIDs) when establishing GTP tunnels, UE IP allocation, and session establishment. These functions, together with the MME, are virtualized and packaged as applications {{on top of the}} MC. In fact, SGW‐C and PGW‐C can be combined as a single application instead of running separately. However, for easy software development, these two gateway control functions are developed as two independent modules on the mobile controller instead of only one module which has the functionality of both.|$|E
40|$|A proper {{support for}} {{communications}} has to provide fault tolerance capabilities {{such as the}} preservation of established connections in case of failures. Multi-homing addresses this issue, but the currently available solution based in massive BGP route injection presents serious scalability limitations, since it contributes to the exponential growth of the BGP table size. An alternative solution based on the configuration of tunnels between the multihomed site exit routers and the ISP border routers has been proposed for IPv 6 in RFC 3178. However, the amount of manual configuration imposed by this solution on the ISP side prevents its wide adoption. In particular, this solution requires at the ISP the manual configuration of a <b>tunnel</b> <b>endpoint</b> per each multihome...|$|E
40|$|SUMMARY Tunneling is {{commonly}} used in several transition mechanisms. Some of the mechanisms discover the <b>tunnel</b> <b>endpoint</b> automatically by their own means. This paper describes several tunnel discovery mechanisms for IPv 6 traversal beyond IPv 4 legacy networks and suggests a new mechanism by which the DHCPv 4 server can automatically provide configuration information about IPv 6 -in-IPv 4 tunnel. Dual stack nodes attached to IPv 4 network can communicate with other IPv 6 networks by this mechanism beyond IPv 4 networks without user intervention. Implementations {{have shown that the}} proposed mechanism can be a convenient and valuable tunnel discovery mechanism in some cases. key words: IPv 6, tunneling, IPv 6 -in-IPv 4 tunnel, DHCP 1...|$|E
5000|$|Virtual Extensible LAN (VXLAN) is {{a network}} {{virtualization}} technology {{that attempts to}} address the scalability problems associated with large cloud computing deployments. It uses a VLAN-like encapsulation technique to encapsulate MAC-based OSI layer 2 Ethernet frames within layer 4 UDP packets, using 4789 as the default IANA-assigned destination UDP port number. [...] VXLAN endpoints, which terminate VXLAN tunnels and may be both virtual or physical switch ports, are known as VXLAN <b>tunnel</b> <b>endpoints</b> (VTEPs).|$|R
5000|$|... 6in4 {{tunneling}} {{requires the}} <b>tunnel</b> <b>endpoints</b> to be explicitly configured, either by an administrator manually or the operating system's configuration mechanisms, or by an automatic service {{known as a}} tunnel broker; this is {{also referred to as}} automated tunneling. Configured tunneling is usually more deterministic and easier to debug than automatic tunneling, and is therefore recommended for large, well-administered networks. Automated tunneling provides a compromise between the ease of use of automatic tunneling and the deterministic behavior of configured tunneling.|$|R
30|$|Hence in this paper, the <b>endpoint</b> to <b>endpoint</b> <b>tunnel</b> {{method is}} considered.|$|R
40|$|IP Fast ReRoute (FRR) {{mechanisms}} {{have been}} proposed to achieve fast failover for supporting Quality of Services (QoS) assurance. However, these mechanisms do not consider network performance after affected traffic is rerouted onto repair paths. As a result, QoS deterioration may still happen due to post-failure traffic congestion in the network, which nullifies the effectiveness of IP FRR. In this paper, by considering IP tunneling as the underlying IP FRR mechanism, we proposed an efficient algorithm to judiciously select tunnel endpoints such that the network performance is optimized after the repair paths are activated for rerouting. According to the simulation results using real operational network topologies and traffic matrices, the algorithm achieves significant improvement on post-failure load balancing compared to the traditional IGP re-convergence and plain <b>tunnel</b> <b>endpoint</b> selection without such consideration. Categories and Subject Descriptor...|$|E
40|$|Abstract — Security {{and privacy}} {{are two major}} {{concerns}} in supporting roaming users across administrative domains. In current practices, a roaming user often uses encrypted tunnels, e. g., Virtual Private Networks (VPNs), to protect the secrecy and privacy of her communications. However, due to its encrypted nature, the traffic flowing through these tunnels cannot be examined and regulated by the foreign network’s firewall, which may lead the foreign network widely open to various attacks from the Internet. This threat can be alleviated if the users reveal their traffic to the foreign network or the foreign network reveals its firewall rules to the tunnel endpoints. However, neither approach is desirable in practice due to privacy concerns. In this paper, we propose a Cross-Domain Cooperative Firewall (CDCF) that allows two collaborative networks to enforce each other’s firewall rules in an oblivious manner. In CDCF, when a roaming user establishes an encrypted tunnel between his home network and the foreign network, the <b>tunnel</b> <b>endpoint</b> (e. g., a VPN server) can regulate the traffic and enforce the foreign network’s firewall rules, without knowing these rules. The key ingredients in CDCF are the distribution of firewall primitives across network domains, and the enabling technique of efficient oblivious membership verification. We have implemented CDCF and integrated it with the OpenVPN software, and evaluated its performance using extensive experiments. Our results show that CDCF can protect the foreign network from encrypted tunnel traffic with minimal overhead. I...|$|E
40|$|Abstract: In {{this paper}} we propose new design for network and {{protocols}} architectures of future 5 G mobile networks. The proposed design is based on user-centric mobile environment with heterogeneous radio access technologies. In the proposed design the user terminal has possibility to change the Radio Access Technology - RAT based on certain criteria. For that purpose we split the network layer on two network sub-layers, lower and upper one. The lower one is network IP layer, providing identification of the wireless interface to the given mobile network, so there are different IP addresses for different RAT interfaces. The upper IP layer, so-called here virtual network layer provides identification of the network layer towards the applications in the mobile terminals, and {{there is only one}} IP address, so tunneling is used over different RATs towards the central <b>tunnel</b> <b>endpoint</b> called Policy Router, which establishes IP tunnels to the mobile terminal via different available RATs to the terminal. The selection of the RAT is performed by the mobile terminal using the proposed user agent for multi-criteria decision making based on the experience from the performance measurements of different RATs performed by the mobile terminal in the given time window in the past. We present results of simulation analysis of the proposed intelligent Mobile RAT selection algorithm on the user-side for scenario with two RAT technologies, one Wireless WAN and one Wireless LAN. The obtained results showed that the proposed algorithm is significantly better compared to the traditional approaches for RAT selection. Also, the proposed solution in fact provide possibility for throughput aggregation on the network layer, where we already have carrier aggregation on Layer 2 in 4 G technologies such as LTE-Advanced...|$|E
40|$|International audienceThe Personal Network (PN) concept {{extends the}} Personal Area Network (PAN) by {{including}} remote personal nodes, such as nodes {{at home or}} in the office. This extension is achieved through dynamic tunnels established between the remote PN entities. Scalability presents a major challenge for tunnel management in PNs due to their dynamic nature and the increasing number of simultaneously supported PNs. To reduce the PN management complexity, this paper proposes to use a peer-to-peer-based publish/subscribe naming (PPNS) system. The PPNS system enables an automated provisioning of the location information in the <b>tunnel</b> <b>endpoints.</b> A centralised management approach is proposed for the on-demand PN establishment and a distributed management approach is proposed for the always-on PN establishmen...|$|R
40|$|Abstract — Drifting {{overlays}} enable enterprises a {{level of}} {{control over their own}} DDoS defenses and routing choices, rather than leaving them at the mercy of their ISPs. Customers connected via a single ISP often lack control over their own network traffic. ISPs cannot allow individual customers to override their routing, nor can they support per-customer DDoS defense. By coupling dynamic partial overlays with traffic ‘safe houses’, enterprises can play versions of shell games with <b>tunnel</b> <b>endpoints</b> and packets. These drifting overlays allow enterprises control over their own vulnerabilities. Keywords-Denial of Service, Overlays resources. By making safe houses and the tunneling path selectable at runtime and dynamically reconfigurable, enterprises can play versions of shell games with tunnels and packets. A type of shell game, developed under the DynaBone project [3] here at ISI, is applied to manage the traffic...|$|R
40|$|Operating System {{fingerprinting}} is a reconnaissance {{method used}} by Whitehats and Blackhats alike. Current techniques for fingerprinting {{do not take}} into account tunneling protocols, such as IPSec, SSL/TLS, and SSH, which effectively `wrap` network traffic in a ciphertext mantle, thus potentially rendering passive monitoring ineffectual. Whether encryption makes VPN <b>tunnel</b> <b>endpoints</b> immune to fingerprinting, or yields the encrypted contents of the VPN tunnel entirely indistinguishable, is a topic that has received modest coverage in academic literature. This study addresses these question by targeting two tunnelling protocols: IPSec and SSL/TLS. A new fingerprinting methodology is presented, several fingerprinting discriminants are identified, and test results are set forth, showing that endpoint identities can be uncovered, and that some of the contents of encrypted VPN tunnels can in fact be discerned. Dissertation (MSc (Computer Science)) [...] University of Pretoria, 2006. Computer Scienceunrestricte...|$|R
40|$|PURPOSE: Because tibial {{fixation}} of soft-tissue grafts in {{anterior cruciate}} ligament (ACL) reconstruction is problematic, this study aimed to develop a means of delivering bone graft evenly around tendon autograft and define any mechanical, radiologic, or histologic benefit using an ovine model. METHODS: A device to deliver bone graft evenly throughout the tibial tunnel was developed. Forty mature sheep underwent simulated quadruple hamstring tendon-ACL reconstruction by use of a bioresorbable interference screw, either with or without bone graft augmentation of the tibial <b>tunnel.</b> <b>Endpoint</b> data were derived at time 0 and after 6 weeks in vivo. Radiostereometric analysis provided quantitation of the translational characteristics; computed tomography evaluated tunnel volume, and measures of yield strength and stiffness were obtained. Sequential fluorochrome administration assessed bone formation, and light microscopy surveyed the biological response. RESULTS: Radiostereometric analysis highlighted differences in the translational characteristics of ACL-deficient knees when compared with intact knees. Reconstructed knees (with or without autograft) showed significantly greater translation when compared with unoperated knees at 6 weeks; autograft bone augmentation provided no benefit. Neither tunnel volume nor yield strength nor stiffness was improved {{with the addition of}} autograft bone. No untoward histologic responses were observed. Bone apposition rates were similar between treatment groups. An even distribution of bone graft throughout the tunnels was observed. CONCLUSIONS: This model has confirmed the ability of the bone graft-delivery system to evenly distribute bone graft throughout the tunnels. However, the study has failed to show improvement in stability or fixation strength after augmentation with autograft bone. CLINICAL RELEVANCE: The autograft bone-delivery system may provide a means of establishing an osteoconductive/inductive environment. At this early juncture (6 weeks), no benefit could be defined. Its use in combination with bone morphogenetic proteins or stem cells may provide more rapid fixation, rehabilitation, and reconstitution of bone volume within the tunnel. Stuart Roy, Mark Fernhout, Richard Stanley, Margaret McGee, Tania Carbone, John R. Field and Peter Dobso...|$|E
40|$|IPsec {{supports}} {{secure communication}} over potentially insecure network components such as intermediate routers. IPsec protocols support two operating modes, transport mode and tunnel mode. Explicit Congestion Notification (ECN) is an experimental {{addition to the}} IP architecture that provides notification of onset of congestion to delay- or losssensitive applications. ECN provides congestion notifications to enable adaptation to network conditions without the impact of dropped packets [RFC 2481]. The use of two bits in the IP header for ECN experimentation conflicts with header processing at IPsec <b>tunnel</b> <b>endpoints</b> {{in a manner that}} makes ECN unusable in the presence of IPsec tunnels. This document considers issues related to this conflict, describes two alternative solutions, and updates the IPsec architecture [RFC 2401] to include these alternatives. Support for Floyd, Black, and Ramakrishnan [Page 1] draft-ietf-ipsec-ecn- 02 IPsec with ECN December 1999 {{one or the other of}} these alt [...] ...|$|R
40|$|OpenFlow is {{a widely}} used {{protocol}} in Software Defined Networking (SDN). Transport layer security (TLS) is used for communication security between the SDN controller {{and each of the}} OpenFlow switches. How- ever, OpenFlow does not provide any cryptographic security through OpenFlow. This thesis explores the possibility of adding encryption to the datap- ath that can be controlled from a Software Defined Networking (SDN) controller. A virtual testbed is created using Pox, Open vSwitch (OVS), and Virtualbox. In the virtual testbed, different encryption concepts are tried out, and related performance testing is performed. Then, the solution is ported to a physical network consisting of a computer, two Raspberry Pi devices, and a router. A replay attack was tested on Generic Routing Encapsulation (GRE) and Internet Protocol Security (IPsec). The performance overhead from encryption and Pre Shared Key (PSK) renewal was evaluated. Some leaking traffic was discovered when changing PSK. Different ways of changing the PSK were tried out and evaluated. The best solution turned out to be adding new <b>tunnel</b> <b>endpoints</b> with a new PSK...|$|R
40|$|This {{document}} redefines how {{the explicit}} congestion notification (ECN) field of the IP header should be constructed on entry to and exit from any IP-in-IP tunnel. On encapsulation, it updates RFC 3168 to bring all IP-in-IP tunnels (v 4 or v 6) into line with RFC 4301 IPsec ECN processing. On decapsulation, it updates both RFC 3168 and RFC 4301 to add new behaviours for previously unused combinations of inner and outer headers. The new rules ensure the ECN field is correctly propagated across a tunnel whether {{it is used to}} signal one or two severity levels of congestion; whereas before, only one severity level was supported. <b>Tunnel</b> <b>endpoints</b> can be updated in any order without affecting pre-existing uses of the ECN field, thus ensuring backward compatibility. Nonetheless, operators wanting to support two severity levels (e. g., for pre-congestion notification [...] PCN) can require compliance with this new specification. A thorough analysis of the reasoning for these changes and the implications is included. In the unlikely event that the new rules do not meet a specific need, RFC 4774 gives guidance on designing alternate ECN semantics, and this document extends that to include tunnelling issues...|$|R
40|$|Tunnelling of Explicit Congestion Notification draft-ietf-tsvwg-ecn-tunnel- 06 This {{document}} redefines how {{the explicit}} congestion notification (ECN) field of the IP header should be constructed on entry to and exit from any IP in IP tunnel. On encapsulation it updates RFC 3168 to bring all IP in IP tunnels (v 4 or v 6) into line with RFC 4301 IPsec ECN processing. On decapsulation it updates both RFC 3168 and RFC 4301 to add new behaviours for previously unused combinations of inner and outer header. The new rules ensure the ECN field is correctly propagated across a tunnel whether {{it is used to}} signal one or two severity levels of congestion, whereas before only one severity level was supported. <b>Tunnel</b> <b>endpoints</b> can be updated in any order without affecting pre-existing uses of the ECN field (backward compatible). Nonetheless, operators wanting to support two severity levels (e. g. for pre-congestion notification [...] PCN) can require compliance with this new specification. A thorough analysis of the reasoning for these changes and the implications is included. In the unlikely event that the new rules do not meet a specific need, RFC 4774 gives guidance on designing alternate ECN semantics and this document extends that to include tunnelling issues...|$|R
40|$|Mobile ad-hoc {{wireless}} {{networks are}} established in improvised environments through the mutual cooperation of its participating nodes. These nodes often {{operate in a}} physically insecure environment and, as a result, are vulnerable to capture and compromise. In addition, {{the nature of the}} wireless communication medium restricts enforcement of rigourous node memberships and so a number of malicious nodes may also participate in the network. These nodes, in order to snoop or sabotage, can undertake a variety of attacks against the network. Among these, wormhole attacks have unusual significance primarily due to their modus operandi and peculiar attack pattern. In such attacks, two or more malicious colluding nodes create a higher level virtual tunnel in the network, which is employed to transport packets between the <b>tunnel</b> <b>endpoints.</b> These <b>tunnels</b> emulate shorter links in the network and so act as bait to unsuspecting network nodes which, by default, seek shorter routes. The benefit gained by the malicious nodes is that they are able to conduct a variety of attacks against the tunnelled traffic. In this paper, we present a novel trust-based scheme for identifying and isolating nodes that create a wormhole in the network, without engaging any cryptographic means. With the help of extensive simulations, we demonstrate that our scheme functions effectively in the presence of malicious colluding nodes and does not impose any unnecessary conditions upon the network establishment and operation phase. Keywords: Ad-hoc, attacks, network, routing protocol, security, trust...|$|R
