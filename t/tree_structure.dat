4175|3825|Public
5|$|An {{example of}} this type of {{decomposition}} into interdigitating trees can be seen in some simple types of mazes, with a single entrance and no disconnected components of its walls. In this case both the maze walls and the space between the walls {{take the form of a}} mathematical tree. If the free space of the maze is partitioned into simple cells (such as the squares of a grid) then this system of cells can be viewed as an embedding of a planar graph, in which the <b>tree</b> <b>structure</b> of the walls forms a spanning tree of the graph and the <b>tree</b> <b>structure</b> of the free space forms a spanning tree of the dual graph. Similar pairs of interdigitating trees can also be seen in the tree-shaped pattern of streams and rivers within a drainage basin and the dual tree-shaped pattern of ridgelines separating the streams.|$|E
5|$|The {{levels are}} {{displayed}} in an overworld with a branching, <b>tree</b> <b>structure.</b> The player must pursue multiple branches to further the story. Optional, side-story branches do not advance the main plot but have the hardest puzzles. The story is told through chains of emails, which are unlocked by completing puzzles. The player assumes {{the role of an}} American Muslim National Security Agency agent who determines whether the hacked emails are pertinent to national security. The ethics of government surveillance are a core theme of the game.|$|E
5|$|The design {{architecture}} of USB is asymmetrical in its topology, {{consisting of a}} host, a multitude of downstream USB ports, and multiple peripheral devices connected in a tiered-star topology. Additional USB hubs may {{be included in the}} tiers, allowing branching into a <b>tree</b> <b>structure</b> with up to five tier levels. A USB host may implement multiple host controllers and each host controller may provide one or more USB ports. Up to 127 devices, including hub devices if present, may be connected to a single host controller. USB devices are linked in series through hubs. One hub—built into the host controller—is the root hub.|$|E
5000|$|Computer science uses <b>tree</b> <b>structures</b> {{extensively}} (see <b>Tree</b> (data <b>structure)</b> and telecommunications.) ...|$|R
30|$|For any web {{document}} set, {{one or more}} “entry points” might be available. That is, the documents {{can be considered as}} one or more <b>tree</b> <b>structures</b> conceptually. Documents (nodes) will be connected by hyperlinks (edges) in <b>tree</b> <b>structures.</b>|$|R
40|$|The {{representation}} {{of objects in}} images as <b>tree</b> <b>structures</b> is {{of great interest to}} vision, as they can represent articulated objects such as people as well as other structured objects like arteries in human bodies, roads, circuit board patterns, etc. <b>Tree</b> <b>structures</b> are often related to the symmetry axis {{representation of}} shapes, which captures their local symmetries. Algorithms have been introduced to detect (i) open contours in images in quadratic time (ii) closed contours in images in cubic time, and (iii) <b>tree</b> <b>structures</b> from contours in quadratic time. The algorithms are based on dynamic programming and Single Source Shortest Path algorithms. However, in this paper, we show that the problem of finding <b>tree</b> <b>structures</b> in images in a principled manner is a much harder problem. We argue that the optimization problem of finding <b>tree</b> <b>structures</b> in images is essentially equivalent to a variant of the Steiner Tree problem, which is NP-hard. Nevertheless, an approximate polynomial-time algorithm for this problem exists: we apply a fast implementation of the Goemans-Williamson approximate algorithm to the problem of finding a tree representation after an image is transformed by a local symmetry mapping. Examples of extracting <b>tree</b> <b>structures</b> from images illustrate the idea and applicability of the approximate method. 1...|$|R
5|$|Many {{problems}} in data analysis concern clustering, grouping data items into clusters of closely related items. Hierarchical clustering is {{a version of}} cluster analysis in which the clusters form a hierarchy or tree-like structure rather than a strict partition of the data items. In some cases, this type of clustering may be performed {{as a way of}} performing cluster analysis at multiple different scales simultaneously. In others, the data to be analyzed naturally has an unknown <b>tree</b> <b>structure</b> and the goal is to recover that structure by performing the analysis. Both of these kinds of analysis can be seen, for instance, in the application of hierarchical clustering to biological taxonomy. In this application, different living things are grouped into clusters at different scales or levels of similarity (species, genus, family, etc). This analysis simultaneously gives a multi-scale grouping of the organisms of the present age, and aims to accurately reconstruct the branching process or evolutionary tree that in past ages produced these organisms.|$|E
25|$|As {{seen in the}} {{underlying}} <b>tree</b> <b>structure</b> for (3a), the silent subunit BECOME is embedded within the Verb Phrase (VP), resulting in the inchoative change-of-state meaning (y become z). In {{the underlying}} <b>tree</b> <b>structure</b> for (3b), the silent subunits CAUS and BECOME are both embedded within the VP, resulting in the causative change-of-state meaning (x cause y become z).|$|E
25|$|FidoNet is {{politically}} organized into a <b>tree</b> <b>structure,</b> with {{different parts of}} the tree electing their respective coordinators. The FidoNet hierarchy consists of zones, regions, networks, nodes and points broken down more-or-less geographically.|$|E
40|$|XML queries {{typically}} specify {{patterns of}} selection predicates on multiple elements that have some specified <b>tree</b> <b>structured</b> relationships. The primitive <b>tree</b> <b>structured</b> relationships are parent-child and ancestor-descendant, and finding all occurrences {{of these relationships}} in an XML database is a core operation for XML query processing...|$|R
50|$|For {{any given}} subband {{analysis}} filter bank, we can split it into further subbands {{as shown in}} figure 8. By repeating this operation we can actually build a <b>tree</b> <b>structured</b> analysis bank. Example of a 1D <b>tree</b> <b>structured</b> filter bank is the one that results in an octave stacking of the passbands. In the 2D case, <b>tree</b> <b>structures</b> based on simple two-channel modules can offer sophisticated band-splitting schemes, especially if we combine the various configurations shown above.The directional filter bank which will be discussed below is one such example.|$|R
25|$|GP evolves {{computer}} programs, traditionally {{represented in}} memory as <b>tree</b> <b>structures.</b> <b>Trees</b> {{can be easily}} evaluated in a recursive manner. Every tree node has an operator function and every terminal node has an operand, making mathematical expressions easy to evolve and evaluate. Thus traditionally GP favors the use of programming languages that naturally embody <b>tree</b> <b>structures</b> (for example, Lisp; other functional programming languages are also suitable).|$|R
25|$|In {{a binary}} tree, a node with two {{children}} cannot be deleted unambiguously. However, in certain binary trees (including binary search trees) these nodes can be deleted, though with a rearrangement of the <b>tree</b> <b>structure.</b>|$|E
25|$|Asymmetric c-command is the {{relation}} that holds between two categories, A and B, if A c-commands B but B does not c-command A. This relationship is a primitive in Kayne's theory of linearization, {{the process that}} converts a <b>tree</b> <b>structure</b> into a flat (structureless) string of terminal nodes.|$|E
25|$|Following are {{examples}} of Larson's tests {{to show that the}} hierarchical (superior) order of any two objects aligns with a linear order, so that the second is governed (c-commanded) by the first. This is in keeping with X'Bar Theory of Phrase Structure Grammar, with Larson's <b>tree</b> <b>structure</b> using the empty Verb to which the V is raised.|$|E
40|$|The <b>tree</b> <b>structured</b> {{decomposition}} is {{a promising}} approach for checking robust stability of systems {{with a large}} number of uncertain parameters. If a given system allows such a decomposition, then the value set can be constructed extremely fast. In the following algorithms are presented, which find <b>tree</b> <b>structures</b> of characteristic polynomials and transfer functions...|$|R
50|$|Nodes {{are often}} {{arranged}} into <b>tree</b> <b>structures.</b> These <b>structures</b> are binary <b>trees.</b>|$|R
5000|$|... #Caption: The Sidra <b>Trees</b> <b>structure</b> of the Convention Center in Doha, Qatar.|$|R
25|$|Their {{hypothesis}} {{shows that}} there is a lower verb embedded within a VP shell that combines with an upper verb (can be invisible), thus creating a VP shell (as seen in the tree diagram to the right). Most current theories no longer allow the ternary <b>tree</b> <b>structure</b> of (9a) and (9b), so the theme and the goal/recipient are seen in a hierarchical relationship within a binary branching structure.|$|E
25|$|The {{anatomical}} {{structure of the}} lungs is less complex in reptiles than in mammals, with reptiles lacking the very extensive airway <b>tree</b> <b>structure</b> found in mammalian lungs. Gas exchange in reptiles still occurs in alveoli however. Reptiles do not possess a diaphragm. Thus, breathing occurs via {{a change in the}} volume of the body cavity which is controlled by contraction of intercostal muscles in all reptiles except turtles. In turtles, contraction of specific pairs of flank muscles governs inhalation and exhalation.|$|E
25|$|The {{comparative}} method, {{the staple}} method of reconstructing a proto-language or ancestor {{of a group}} of languages apparently related because of similarities in the tree model of historical linguistics, has been enhanced by the application of the phylogenetic method. Within it, linguistic features take the place of molecular sequences. In biology, the goal of comparing genetic sequences is to determine the percentage of similarity between the chromosomes of two species; they may then be hypothesized to have branched from each other on the tree at a time consistent with the rate of change of each. In linguistic phylogenetic comparisons, the desired result is a percentage of similarity between languages from which a <b>tree</b> <b>structure</b> may be reconstructed. Each branch, or level, represents a proto-language.|$|E
40|$|The {{emergence}} of complex data objects that must to be indexed and accessed in databases {{has created a}} need for access methods that are both dynamic and efficient. Lately, metric <b>tree</b> <b>structures</b> have become a popular way of handling this because of the advantages they have compared to traditional methods based on spatial indexing. The most common way to handle indexing is to build <b>tree</b> <b>structures</b> and then prune out branches of the trees during search, and for a dynamic indexing structure {{it is important that}} these trees stay balanced {{in order to keep the}} worst case search time as low as possible. Normally, this is done based on complex criteria and reshuffling operations. Another way to handle balancing is General Balanced Trees (GBT), proposed by Arne Andersson (Journal of Algorithms 30, 1999), which uses simple, global criteria for rebalancing binary search trees by using total and partial rebuilding. This thesis explores if it is possible to apply this to metric <b>tree</b> <b>structures,</b> and especially two static metric <b>tree</b> <b>structures</b> called the Vantage Point Tree and the Multiple Vantage Point Tree. It discusses how to best make these into dynamic <b>tree</b> <b>structures</b> and how to apply balancing by using GBT paradigms on them. The results of the performance of the new <b>tree</b> <b>structures</b> are analyzed, and the results are compared against already existing structures. The results shows that this works for balancing the trees, and that the structures perform reasonably well compared to already existing structures. </p...|$|R
50|$|George 3 {{provided}} a <b>tree</b> <b>structured</b> file store, inspired {{in part by}} Multics.|$|R
50|$|An {{argument}} {{can be thought of}} as two or more contradicting <b>tree</b> <b>structures.</b>|$|R
25|$|Richard Kayne {{proposed}} {{the idea of}} unambiguous paths {{as an alternative to}} c-commanding relationships, which is the type of structure seen in examples (8). The idea of unambiguous paths stated that an antecedent and an anaphor should be connected via an unambiguous path. This means that the line connecting an antecedent and an anaphor cannot be broken by another argument. When applied to ditransitive verbs, this hypothesis introduces the structure in diagram (8a). In this <b>tree</b> <b>structure</b> {{it can be seen that}} the same path can be traced from either DP to the verb. Tree diagram (7b) illustrates this structure with an example from English. This analysis was a step toward binary branching trees, which was a theoretical change that was furthered by Larson's VP-shell analysis.|$|E
25|$|Aggressiveness also {{arises from}} a need of space. Young pike {{tend to have}} their food robbed by larger pike. Pike are {{aggressive}} if not given enough space because they are territorial. They use a form of foraging known as sit-and-wait. Unlike species such as perch, pike undergo bursts of energy instead of actively chasing down prey. As such, {{a fair amount of}} inactive time occurs until they find prey. Hunting efficiency decreases with competition; the larger the pike, the larger the area controlled by that particular pike. An inverse relation to vegetation density and pike size exists, which is due to the possibility of cannibalism from the largest pike. This makes sense, as the smaller pike need more vegetation to avoid being eaten. Large pike do not have this worry and can afford the luxury of a large line of sight. They prefer a <b>tree</b> <b>structure</b> habitat.|$|E
25|$|Adventure {{games have}} strong storylines with {{significant}} dialog, and sometimes make {{effective use of}} recorded dialog or narration from voice actors. This genre of game is known for representing dialog as a conversation tree. Players are able to engage a non-player character by choosing a line of pre-written dialog from a menu, which triggers a response from the game character. These conversations are often designed as a <b>tree</b> <b>structure,</b> with players deciding between each branch of dialog to pursue. However, there are always {{a finite number of}} branches to pursue, and some adventure games devolve into selecting each option one-by-one. Conversing with characters can reveal clues about how to solve puzzles, including hints about what that character would want before they will cooperate with the player. Other conversations will have far-reaching consequences, deciding to disclose a valuable secret that has been entrusted to the player. Characters may also be convinced to reveal their own secrets, either through conversation or by giving them something that will benefit them.|$|E
40|$|Data {{that can}} conceptually {{be viewed as}} <b>tree</b> <b>structures</b> abounds in domains such as bio-informatics, web logs, XML {{databases}} and multi-relational databases. Besides structural information such as nodes and edges, <b>tree</b> <b>structured</b> data also often contains attributes, that represent properties of nodes. Current algorithms for finding frequent patterns in structured data, do not take these attributes into account, and hence potentially useful information is neglected. We present FAT-miner, an algorithm for frequent pattern discovery in <b>tree</b> <b>structured</b> data with attributes. To illustrate the applicability of FAT-miner, we use it to explore the properties of good and bad loans in a well-known multi-relational financial database. ...|$|R
5000|$|Engel, J. (1998). <b>Tree</b> <b>Structured</b> Function Estimation with Haar Wavelets. Verlag Dr. Kovač: Hamburg ...|$|R
50|$|In {{computer}} science and mathematical logic, an infinite tree automaton {{is a state}} machine that deals with infinite <b>tree</b> <b>structures.</b> It {{can be viewed as}} an extension from a finite tree automaton, which accepts only finite <b>tree</b> <b>structures.</b> It can also be viewed as an extension of some infinite word automatons such as the Büchi automaton and the Muller automaton.|$|R
500|$|Latin uses {{morphology}} {{to express}} the distinction between subject and object, whereas English uses word order. Another example of how syntactic rules contribute to meaning is the rule of inverse word order in questions, which exists in many languages. This rule explains why when in English, the phrase [...] "John is talking to Lucy" [...] is turned into a question, it becomes [...] "Who is John talking to?", and not [...] "John is talking to who?". The latter example {{may be used as}} a way of placing special emphasis on [...] "who", thereby slightly altering the meaning of the question. Syntax also includes the rules for how complex sentences are structured by grouping words together in units, called phrases, that can occupy different places in a larger syntactic structure. Sentences can be described as consisting of phrases connected in a <b>tree</b> <b>structure,</b> connecting the phrases to each other at different levels. To the right is a graphic representation of the syntactic analysis of the English sentence [...] "the cat sat on the mat". The sentence is analyzed as being constituted by a noun phrase, a verb, and a prepositional phrase; the prepositional phrase is further divided into a preposition and a noun phrase, and the noun phrases consist of an article and a noun.|$|E
2500|$|One common {{balanced}} <b>tree</b> <b>structure</b> is {{a binary}} <b>tree</b> <b>structure</b> {{in which the}} left and right subtrees of every node differ in height by no more than 1. One may also consider binary trees where no leaf is much farther away from the root than any other leaf. (Different balancing schemes allow different definitions of [...] "much farther".) ...|$|E
2500|$|A {{reference}} to the root object of the <b>tree</b> <b>structure,</b> {{also known as the}} catalog ...|$|E
40|$|The {{syntactic}} tagging of the Prague Dependency Treebank (PDT) is {{divide into}} two steps, the first resulting in analytic <b>tree</b> <b>structures</b> (ATS) {{and the second}} in tectogrammatical <b>tree</b> <b>structures</b> (TGTS). The present paper describes the transition procedures, automatic and manual, from ATS to TGTS and illustrates these procedures on two Czech sentences. Syntactic tagging in The Prague Dependency Treebank Project is conceived of in two steps: (i) analytic <b>tree</b> <b>structures</b> (ATS), in which every word form and punctuation mark is explicitly represented as a node of a rooted tree, with no additional nodes added (except for {{the root of the}} tree of every sentence) and with edges of the tree corresponding to (surface) syntactic dependency relations, (ii) tectogrammatical <b>tree</b> <b>structures</b> (TGTS) corresponding to the underlying sentence representations; TGTSs have the shape of dependency trees with the verb as the root of the tree and its daughter nodes representing nodes depending on the gove [...] ...|$|R
40|$|Abstract. <b>Tree</b> <b>structured</b> data such as HTML/XML {{files are}} repre-sented by rooted trees with ordered {{children}} and edge labels. Knowledge representations for <b>tree</b> <b>structured</b> data are quite important to discover interesting features which such <b>tree</b> <b>structured</b> data have. In this paper, as {{a representation of}} structural features we propose a <b>structured</b> ordered <b>tree</b> pattern, called a term tree, which is a rooted tree pattern consisting of ordered children and structured variables. A variable in a term tree can be substituted by an arbitrary tree. Deciding whether or not each given <b>tree</b> <b>structured</b> data has structural features is a core problem for data mining of large <b>tree</b> <b>structured</b> data. We consider a problem of deciding {{whether or not a}} term tree t matches a tree T, that is, T is obtained from t by substituting some trees for variables in t. Such a problem is called a membership problem for t and T. Given a term tree t and a tree T, we present an O(nN) time algorithm of solving the membership problem for t and T, where n and N are the numbers of vertices in t and T, respectively. We also report some experiments on applying our matching algorithm to a collection of real Web documents. ...|$|R
50|$|Refal can {{be applied}} to the {{processing}} and transformation of <b>tree</b> <b>structures,</b> similarly to XSLT.|$|R
