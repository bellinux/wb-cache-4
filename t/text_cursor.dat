22|25|Public
2500|$|A {{computer}} keyboard comprises alphanumeric or character keys for typing, modifier keys for altering {{the functions of}} other keys, navigation keys for moving the <b>text</b> <b>cursor</b> on the screen, function keys and system command keys – such as [...] and [...] – for special actions, and often a numeric keypad to facilitate calculations.|$|E
5000|$|... #Caption: A {{blinking}} <b>text</b> <b>cursor</b> while typing {{the word}} Wikipedia.|$|E
5000|$|Clicking on an atom in the {{structure}} view sets the <b>text</b> <b>cursor</b> to the line that contains this atom.|$|E
5000|$|Cursor customisation. The {{mouse and}} <b>text</b> <b>cursors</b> {{can often be}} {{modified}} in several ways, such as circling it to help the user locate it on the screen.|$|R
5000|$|As {{computer}} technology developed, the American National Standards Institute X3 committee invented a standard method of terminal control using escape sequences called [...] "ANSI X3.64-1979". This protocol allowed for <b>text</b> and <b>cursor</b> positioning {{as well as}} defining foreground and background color attributes for the text.|$|R
50|$|Animated ASCII art {{started in}} 1970 from {{so-called}} VT100 animations produced on VT100 terminals. These animations were simply <b>text</b> with <b>cursor</b> movement instructions, deleting and erasing the characters necessary to appear animated. Usually, they represented a long hand-crafted process undertaken {{by a single}} person to tell a story.|$|R
5000|$|LDA #31: JSR OSWRCH \ move <b>text</b> <b>cursor</b> LDA #10: JSR OSWRCH \ x-coordinate LDA #15: JSR OSWRCH \ y-coordinate ...|$|E
50|$|Examples {{of private}} escape codes include the DECTCEM (DEC <b>text</b> <b>cursor</b> enable mode) shown below.It was first {{introduced}} for the VT-300 series of video terminals.|$|E
50|$|The Atari {{screen editor}} {{implements}} the <b>text</b> <b>cursor</b> by simply inverting the character at the cursor position (by XOR with $80). It does not flash.|$|E
25|$|Typing a TAB {{character}} on the command line causes Octave {{to attempt to}} complete variable, function, and file names (similar to Bash's tab completion). Octave uses the <b>text</b> before the <b>cursor</b> as the initial portion of the name to complete.|$|R
40|$|Large {{information}} displays {{are common}} in public and semipublic spaces but still require rapid and lightweight ways for users to interact with them. We present BlueTone, a framework for developing large display applications which will interpret and react to dual-tone multi-frequency sounds transmitted from mobile phones paired with the display using the Bluetooth headset profile. BlueTone enables <b>text</b> entry, <b>cursor</b> manipulation and menu selection without requiring the installation of any special software on a user’s mobile phone. Author Keywords BlueTone, public display, at a distance interaction, Bluetoot...|$|R
50|$|In many text {{processing}} programs, such as web browsers or word processors, clicking on <b>text</b> moves the <b>cursor</b> to that location. Clicking {{and holding the}} left button will allow users to highlight the selected text enabling the user with more options to edit or use the text.|$|R
5000|$|Moves the <b>text</b> <b>cursor</b> to the {{position}} ( [...] , [...] ), where 0 &le; [...] and 0 &le; [...] The position (0, 0) is the upper left corner.|$|E
50|$|The {{blinking}} of the <b>text</b> <b>cursor</b> {{is usually}} temporarily suspended {{when it is}} being moved; otherwise, the cursor may change position {{when it is not}} visible, making its location difficult to follow.|$|E
5000|$|In text {{editors of}} the vi family, one means to track block {{boundaries}} is to position the <b>text</b> <b>cursor</b> {{over one of the}} braces, and press the [...] key. The cursor then jumps to the opposing brace. Since the text cursor's [...] key (viz., the [...] key) retained directional positioning information (whether the [...] or [...] key was formerly pressed), the dot macro (the [...] key) could then be used to place the <b>text</b> <b>cursor</b> on the next brace, given a suitable coding style. Instead, inspecting the block boundaries using the [...] key can be used to enforce a coding standard.|$|E
50|$|Multiple {{selections}} and cursors {{are typically}} created {{by using a}} keyboard shortcut to select repeated instances of the same text or text fragments surrounded by the same delimiters, by using a search feature to select all instances of a search term, by selecting the same column in multiple lines, or by selecting <b>text</b> or <b>cursor</b> positions with a mouse. The Lapis experimental web browser and text editor is also able to infer selections based on concept learning from positive and negative examples given by the user during {{a process known as}} selection guessing.|$|R
2500|$|In {{a review}} of four word processors, The Transactor in May 1986 praised SpeedScript as [...] "extremely sophisticated", citing its large <b>text</b> buffer, logical <b>cursor</b> navigation, and undo command. While criticizing its lack of right justification, the {{magazine}} concluded that SpeedScript was not only [...] "an easy winner" [...] among budget-priced word processors, but also [...] "a serious contender even {{when compared with the}} higher priced programs".|$|R
5000|$|The MS-1 {{was what}} Roland {{refers to as}} a [...] "phrase sampler" [...] and {{featured}} eight rubber pads that triggered individual samples assigned to them. The eight pads were arranged into five banks {{for a total of}} 40 sampled sounds - 16 sounds (banks A & B) with the built-in flash memory and up to 24 (banks C, D & E) expanded with the insertion of a PCMCIA memory card. Without a card, only banks A & B could be used. Programming of the MS-1 was possible {{through the use of a}} small LCD display and menu-driven settings entered with left and right directional buttons which increased or decreased numerical values and controlled a <b>text</b> editing <b>cursor.</b>|$|R
5000|$|....TOS - [...] "TOS" [...] {{program that}} doesn't use GEM — i.e., {{similar to a}} PC's [...]EXE or [...]COM running in a CLI-mode box. The desktop clears the screen, turns on the <b>text</b> <b>cursor,</b> and hides the mouse pointer.|$|E
5000|$|The user selects or [...] "highlights" [...] {{the text}} or file for moving by some method, {{typically}} by dragging over the text or file name with the pointing-device or holding down the Shift key while using the arrow keys {{to move the}} <b>text</b> <b>cursor.</b>|$|E
50|$|It {{allows users}} to move the <b>text</b> <b>cursor,</b> search the command history, control a kill ring (a more {{flexible}} version of a copy/paste clipboard) and use tab completion on a text terminal. As a cross-platform library, readline allows applications on various systems to exhibit identical line-editing behavior.|$|E
5000|$|Whereas {{cut-and-paste}} {{often takes}} {{place with a}} mouse-equivalent in Windows-like GUI environments, it may also occur entirely from the keyboard, especially in UNIX text editors, such as Pico or vi. Cutting and pasting without a mouse can involve a selection (for which [...] is pressed in most graphical systems) or the entire current line, {{but it may also}} involve <b>text</b> after the <b>cursor</b> {{until the end of the}} line and other more sophisticated operations.|$|R
40|$|Live meeting {{documents}} require different techniques for effectively retrieving important pieces of information. During live meetings, people share web sites, edit presentation slides, and share code editors. A simple {{approach is to}} index with Optical Character Recognition (OCR) the video frames, or key-frames, being shared and let user retrieve them. Here we show that a more useful approach {{is to look at}} what actions users take inside the live document streams. Based on observations of real meetings, we focus on two important signals: text editing and mouse cursor motion. We describe the detection of <b>text</b> and <b>cursor</b> motion, their implementation in our WebRTC (Web Real-Time Communication) -based system, and how users are better able to search live documents during a meeting based on these extracted actions. Categories and Subject Descriptor...|$|R
50|$|For instance, in vi, {{replacing}} a word is replacement text, {{which is a}} combination of two independent commands (change and word-motion) together with a transition into and out of insert mode. <b>Text</b> between the <b>cursor</b> position {{and the end of the}} word is overwritten by the replacement text. The operation can be repeated at some other location by typing , the effect being that the word starting that location will be replaced with the same replacement text.|$|R
5000|$|A {{computer}} keyboard comprises alphanumeric or character keys for typing, modifier keys for altering {{the functions of}} other keys, navigation keys for moving the <b>text</b> <b>cursor</b> on the screen, function keys and system command keys - such as [...] and [...] - for special actions, and often a numeric keypad to facilitate calculations.|$|E
50|$|A {{vertical}} line <b>text</b> <b>cursor</b> {{with a small}} left-pointing or right-pointing appendage are for indicating the direction of text flow on systems that support bi-directional text, and is thus usually known among programmers as a 'bidi cursor'. In some cases, the cursor may split into two parts, each indicating where left-to-right and right-to-left text would be inserted.|$|E
50|$|A typical {{text box}} is a {{rectangle}} of any size, possibly with a border {{that separates the}} text box {{from the rest of}} the interface. Text boxes may contain zero, one, or two scrollbars. Text boxes usually display a <b>text</b> <b>cursor</b> (commonly a blinking vertical line), indicating the current region of text being edited. It is common for the mouse cursor to change its shape when it hovers over a text box.|$|E
5000|$|Notifications can be synced between devices; dismissing a {{notification}} on, for example, a laptop, {{will also}} dismiss {{it from a}} phone. Certain types of notifications now allow inline replies. The start screen now has the option to display wallpapers as a background of the screen behind translucent tiles, rather than within the tiles. The messaging app adds support for internet-based Skype messaging alongside SMS, similarly to iMessage, and can synchronize these conversations with other devices. The camera app has been updated to match the [...] "Lumia Camera" [...] app previously exclusive to Lumia products, and a new Photos app aggregates content from local storage and OneDrive, and can perform automatic enhancements to photos. The on-screen keyboard now contains a virtual pointing stick for manipulating the <b>text</b> editing <b>cursor,</b> a dedicated voice input button, and can be shifted towards {{the left or right}} of the screen to improve one-handed usability on larger devices.|$|R
50|$|According to {{the preface}} of The Early English <b>Text</b> Society the <b>Cursor</b> Mundi is a {{collection}} of poignant and vivid versions of stories arranged “in an orderly, encyclopedic yet fundamentally digressive manner”. A modern scholar would rarely find an encyclopedia with the size and vast content of the Cursor Mundi. In fact, two modern undertakings of the project add up to over seven volumes: The Early English Text Society, and a Southern version of the text written in five volumes (The Ottawa Project) simply because {{of the size of the}} text. Both of these versions are mere adaptations of the original Northern version.|$|R
5000|$|Acorn MOS {{implements}} {{character recognition}} so that text printed on {{screen in the}} system font can be selected with the arrow keys and input with the [...] key {{as though it was}} being typed. To activate screen editing the user moves the hardware <b>cursor</b> to the <b>text</b> to be read and the OS displays a second cursor in software at the original position. Pressing [...] copies one character from the hardware cursor to the software cursor and advances both, so that holding the key down copies a section of the <b>text,</b> the <b>cursors</b> wrapping around the vertical edges of the screen as necessary. If the screen scrolls during editing, the hardware cursor's position is adjusted to follow the text. The user can make changes to the text during the copy, and user-defined characters are recognised in graphics modes. Screen editing is terminated when [...] or [...] are pressed, which have their usual effects. Character recognition is made available to users in the API with a call to read the character at the current cursor position.|$|R
50|$|Inkwell, when activated, {{appears as}} semi-transparent yellow lined paper, {{on which the}} user sees their writing appear. When the user stops writing, their writing is {{interpreted}} by Inkwell and pasted into the current application (wherever the active <b>text</b> <b>cursor</b> is), as if the user had simply typed the words. The user can also force Inkwell to not interpret their writing, instead using it to paste a hand-drawn sketch into the active window.|$|E
50|$|In most {{command-line}} interfaces or text editors, the <b>text</b> <b>cursor,</b> {{also known}} as a caret, is an underscore, a solid rectangle, or a vertical line, which may be flashing or steady, indicating where text will be placed when entered (the insertion point). In text mode displays, {{it was not possible to}} show a vertical bar between characters to show where the new text would be inserted, so an underscore or block cursor was used instead. In situations where a block was used, the block was usually created by inverting the pixels of the character using the boolean math exclusive or function. On text editors and word processors of modern design on bitmapped displays, the vertical bar is typically used instead.|$|E
5000|$|MS-DOS itself did {{not provide}} any way to {{position}} the <b>text</b> <b>cursor</b> other than to advance it after displaying each letter (teletype mode). While the BIOS video interface routines were adequate for rudimentary output, they were necessarily less efficient than direct hardware addressing, as they added extra processing; {{they did not have}} [...] "string" [...] output, but only character-by-character teletype output, and they inserted delays to prevent CGA hardware [...] "snow" [...] (a display artifact of CGA cards produced when writing directly to screen memory)——an especially bad artifact since they were called by IRQs, thus making multitasking very difficult. A program that wrote directly to video memory could achieve output rates 5 to 20 times faster than making system calls. Turbo Pascal used this technique from its earliest versions.|$|E
50|$|A gap buffer in {{computer}} science is a dynamic array that allows efficient insertion and deletion operations clustered near the same location. Gap buffers are especially common in text editors, where most changes to the text occur {{at or near the}} current location of the <b>cursor.</b> The <b>text</b> is stored in a large buffer in two contiguous segments, with a gap between them for inserting new <b>text.</b> Moving the <b>cursor</b> involves copying <b>text</b> {{from one side of the}} gap to the other (sometimes copying is delayed until the next operation that changes the text). Insertion adds new text at the end of the first segment; deletion deletes it.|$|R
5000|$|The HP Pre 3 {{features}} a 3.58-inch multi-touch, capacitive touchscreen with {{a resolution of}} 800-by-480 pixels. The Pre 3 has three physical buttons for input, including the volume up/down buttons in the side, and the power button in the top. For navigating through the OS, the Pre 3 has a [...] "gesture area", where you can swipe up to enter the card like multitasking view, swipe {{from right to left}} to go back in an application, swipe from left to right to go forward, or optionally swipe completely to the right or left to switch applications. Modifier keys combined with gestures enable <b>text</b> selection and <b>cursor</b> positioning, while command shortcuts are triggered by holding a tap in the gesture area while pressing a key on the keyboard.|$|R
40|$|Traditional {{methods of}} {{teaching}} the laboratory course for Comparative Anatomy of the Vertebrates could be improved by applying current computer technology to construct an interactive, multimedial atlas of dissection. Five specimens used in comparative anatomy courses at most institutions were chosen as representative members of the Phylum Chordata: amphioxus, lamprey, dogfish shark, mud puppy, and cat. Specimens were dissected according to the modified method of Wischnitzer, 1993, and each stage was photographed with a Kodak DC 120 digital zoom camera. These images were processed on a Power Macintosh 7600 computer with Adobe Photoshop v. 5. 0. The atlas was constructed from these images using Macromedia Authorware v. 4. 0. 3. Each image contains a series of interactive objects that display a highlight and descriptive <b>text</b> as the <b>cursor</b> passes over each object...|$|R
