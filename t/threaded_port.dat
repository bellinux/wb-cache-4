1|15|Public
5000|$|The {{housing is}} the {{component}} that holds {{all of the}} other elements of the rotary union together. The housing has an inlet port, which is a <b>threaded</b> <b>port</b> to which the hose supplying the medium will be attached. The rotary union may also have an outlet port, if the same joint is being used both to supply fluid to a roll and to remove fluid from the roll. In smaller rotary unions the housing is stationary. In larger rotary unions the housing is usually bolted to the drum or roll using a flange. In these cases the housing rotates at the same speed as the drum ...|$|E
40|$|We {{present a}} {{simplified}} method for molding internally <b>threaded</b> fluidic <b>ports</b> in microfluidic devices using a deformable mold and dual-cure OSTE+ polymer. We demonstrate a lab-on-a-chip device where monolithically integrated chip-to-world threaded interfaces, vias and microchannels are reaction injection molded in one single step. Â  QC 20140922 </p...|$|R
5000|$|Apple has {{then decided}} {{to create their own}} protocol, {{imposing}} all parameters related to synchronization like the sampling frequency. This session protocol is called [...] "AppleMIDI" [...] in Wireshark software. Session management with AppleMIDI protocol requires two UDP ports, the first one is called [...] "Control Port", the second one is called [...] "Data Port". When used within a multithread implementation, only the Data port requires a [...] "real-time" [...] <b>thread,</b> the other <b>port</b> can be controlled by a normal priority <b>thread.</b> These two <b>ports</b> must be located at two consecutive location (n / n+1), the first one can be any of the 65536 possible ports.|$|R
3000|$|The {{endoscopic}} <b>threaded</b> imaging <b>port</b> (EndoTIP TM Stortz, Tutlingen, GDR) {{is probably}} the instrument of choice in very large women because the abdominal wall is elevated under laparoscopic vision during the entry process. The upward force and clockwise rotational movement allows all the layers of the abdominal wall to be seen, as they are {{picked up by the}} outer threads of the trocar and spread radially as the muscle and fascia are penetrated until a clear view appears of the peritoneum where a site of final penetration can be selected [41]. Evidence Level IV [...]...|$|R
40|$|Checkpointing, process migration, {{and similar}} {{services}} {{need to have}} access {{not only to the}} memory of the constituent processes, but also to the complete state of all kernel provided objects (e. g., <b>threads</b> and <b>ports)</b> involved. Traditionally, a major stumbling block in these operations is acquiring and re-creating the state in the operating system. We have implemented a transparent user-mode checkpointer as an application on our Fluke microkernel. This microkernel consistently and cleanly supports the importing and exporting of fundamental kernel state safely to and from user applications. Implementing a transparent checkpointing facility with this sort of kernel support simplifies the implementation, and expands its flexibility and power. 1...|$|R
40|$|In this article, a denotational {{definition}} of synchronous subset of SystemC is proposed. The subset treated includes modules, processes, <b>threads,</b> wait statement, <b>ports</b> and signals. We propose formal model for System C delta delay. Also, we give a complete semantic definition for the language's two-phase scheduler. The proposed semantic can constitute {{a base for}} validating the equivalence of synchronous HDL subsets...|$|R
50|$|Auxiliary valves {{in complex}} {{hydraulic}} systems may have auxiliary valve blocks to handle various duties unseen to the operator, such as accumulator charging, cooling fan operation, air conditioning power, etc. They are usually custom valves {{designed for the}} particular machine, and may consist of a metal block with ports and channels drilled. Cartridge valves are <b>threaded</b> into the <b>ports</b> and may be electrically controlled by switches or a microprocessor to route fluid power as needed.|$|R
40|$|Architecture Analysis and Design Language (AADL) {{is often}} used to model safety-critical {{real-time}} systems. Model transformation is widely used to extract a formal specification so that AADL models can be verified and analyzed by existing tools. Timed Abstract State Machine (TASM) is a formalism not only able to specify behavior and communication but also timing and resource aspects of the system. To verify functional and nonfunctional properties of AADL models, this paper presents a methodology for translating AADL to TASM. Our main contribution is to formally define the translation rules from an adequate subset of AADL (including <b>thread</b> component, <b>port</b> communication, behavior annex and mode change) into TASM. Based on these rules, a tool called AADL 2 TASM is implemented using Atlas Transformation Language (ATL). Finally, a case study from an actual data processing unit of a satellite is provided to validate the transformation and illustrate the practicality of the approach...|$|R
40|$|Architecture Analysis and Design Language (AADL) is an {{architecture}} description language standard for embedded real-time systems {{widely used in}} the avionics and aerospace industry to model safety-critical applications. To verify and analyze the AADL models, model transformation technologies are often used to automatically extract a formal specification suitable for analysis and verification. In this process, it remains a challenge {{to prove that the}} model transformation preserves the semantics of the initial AADL model or, at least, some of the specific properties or requirements it needs to satisfy. This paper presents a machine checked semantics-preserving transformation of a subset of AADL (including periodic <b>threads,</b> data <b>port</b> communications, mode changes, and the AADL behavior annex) into Timed Abstract State Machines (TASM). The AADL standard itself lacks at present a formal semantics to make this translation validation possible. Our contribution is to bridge this gap by providing two formal semantics for the subset of AADL. The execution semantics provided by the AADL standard is formalized as Timed Transition Systems (TTS). This formalization gives a reference expression of AADL semantics which can be compared with the TASM-based translation (for verification purpose). Finally, the verified transformation is mechanized in the theorem prover Coq...|$|R
5000|$|SP-8 {{internals}} {{are identical}} to those of an Ion, with a few minor differences. First, the SP-8's regulator is canted 15 degrees forward; the Ion's is vertical. The SP-8's pressure gauge is mounted on the right, unlike the Ion (and almost all other markers) which has the gauge on the left. The SP-8 ships with a straight [...] "blade" [...] trigger, while the Ion has a curved [...] "wave" [...] trigger. Finally, the SP-8's breech section is drilled for a right-hand feed tube (so that top-mounted accessories such as scopes will not be blocked by the feed tube or hopper), while the Ion is set up for traditional vertical feed. The SP-8 is thus forced to use a plastic 45-degree elbow adapter to mount a hopper, which (because it is prone to frequent breakage) is a criticized feature. The Ion, by contrast, has a <b>threaded</b> vertical feed <b>port</b> that accepts all standard Impulse-threaded feednecks. Aftermarket adapters have been released that allow the SP-8 {{to use the same}} Impulse-threaded feednecks as the Ion while eliminating the plastic elbow.|$|R
40|$|This {{document}} {{describes a}} portable light-weight thread runtime system for uni- and multiprocessors targeted at irregular applications. Unlike most other thread packages, which utilize hard-coded scheduling policies, Active Threads provides a general mechanism for building data structure specific thread schedulers and for composing multiple scheduling policies {{within a single}} application. This allows modules developed separately to retain their scheduling policies when used together in a single application. Flexible scheduling policies can exploit the temporal and spatial locality inherent in many applications. In spite of the added flexibility, the Active Threads API is close to that of more conventional thread packages. Simple synchronization is achieved by standard mutexes, semaphores, and condition variables while more powerful parallel constructs can be easily built from threads, thread bundles (collections of threads with similar properties such as schedulers) and user-defined synchronization objects. Active Threads can be used directly by application and library writers or as a virtual machine target for compilers for parallel languages. The package is retargeted by <b>porting</b> the Active <b>Threads</b> Portability Interface that includes only eight primitives. Active <b>Threads</b> has been <b>ported</b> to several hardware platforms including SPARC, Intel i 386 and higher, DEC Alpha AXP, HPPA and outperformed vendor provided threa...|$|R
40|$|The sealing {{assembly}} for a port of a valve or {{the like}} is disclosed. In detail, the sealing assembly includes the port having a circular shaped end with a circular shaped knife-edge thereon. The sealing assembly further includes a hollow cap having a closed first end with an aperture therethrough and an open second end. The cap further includes internal threads adapted to mate with the external <b>threads</b> of the <b>port.</b> A gasket is mounted within the cap having flat first and second principle sides and made of a deformable metal, the first principle side of the gasket for mounting against the circular shaped knife edge of the port. A plunger having a circular shaped disc portion is adapted to fit within the hollow cap and is engagable with the first principle surface of the gasket and includes a shaft portion extending out of the aperture. The cap and shaft of the plunger include external wrenching flats. Thus when the cap is screwed onto the port and the plunger is prevented from rotating by a wrench mounted on the wrenching flats of the shaft portion of the plunger, the gasket is forced into engagement with the knife edge in pure compression and no rotation of the gasket occurs causing the knife edge to locally deform the gasket sealing of the port...|$|R
40|$|The {{analysis}} and verification of an AADL model usually requires its transformation into the meta-model of this model-checker or that schedulability analysis tool. However, one challenging {{problem is to}} prove that the transformation into the target model of computation (MoC) preserves the semantics of the original AADL model or at least some of its properties. Moreover, the AADL standard lacks a formal semantics to make the validation of this translation possible. Albeit some of the related works give informal explanations on the model transformations they apply to interpret or compile AADL, the formal proof of semantics preservation remains in most cases altogether impossible. Our contribution is to bridge this gap by providing two formal semantics for a synchronous subset of AADL, which includes periodic <b>threads</b> and data <b>port</b> communications. Its operational semantics is formalized as a TTS (Timed Transition System). This formalization is one prerequisite to the formal proof of semantics preservation for our model transformation from AADL sources to our target verification formalism: TASM (Timed Abstract State Machine). In this paper, an abstract syntax of (our subset of) AADL is given, together with the abstract syntax of TASM. The translation is formalized by a family of semantics functions, which associates each AADL construct to a TASM fragment. Then, the proof of simulation equivalence between the TTSs of the AADL and the TASM models is formalized and mechanized using the proof assistant Coq...|$|R
40|$|Memories : : : : : : : : : : : : : : : : : : : : : : : : 18 6. 3 Address Spaces : : : : : : : : : : : : : : : : : : : : : : : : : : 24 6. 4 Pages : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 27 6. 5 Task Memory Reference : : : : : : : : : : : : : : : : : : : : : 31 7 Message Queues and Messages 33 7. 1 Message Queues : : : : : : : : : : : : : : : : : : : : : : : : : : 33 7. 2 Reply Ports : : : : : : : : : : : : : : : : : : : : : : : : : : : : 34 7. 3 Messages : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 35 8 Physical Resources 40 8. 1 Processor Sets and Processors : : : : : : : : : : : : : : : : : : 40 8. 2 Devices : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 44 8. 3 Hosts : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 44 i 9 Special Purpose Ports 45 9. 1 Task Special Ports : : : : : : : : : : : : : : : : : : : : : : : : 45 9. 2 <b>Thread</b> Special <b>Ports</b> : : : : : : : : : : : : : : : : : : : : : : : 47 9. 3 Processor Special Ports [...] ...|$|R

