58|86|Public
5000|$|Raw <b>TCP</b> <b>socket</b> {{connection}}: A raw <b>TCP</b> <b>socket</b> connection {{which can}} be initiated from the terminal server or from the remote host/server. This can be point-to-point or shared, where serial devices (like card readers, scanners, bar code readers, weight scales, etc.) can be shared amongst multiple devices. TCP sessions can be initiated from the TCP server application or from the terminal server.|$|E
5000|$|... {{is used on}} {{the server}} side, and causes a bound <b>TCP</b> <b>socket</b> to enter {{listening}} state.|$|E
5000|$|A TCP session, {{which is}} synonymous to a TCP virtual circuit, a TCP connection, or an {{established}} <b>TCP</b> <b>socket.</b>|$|E
5000|$|Network <b>sockets,</b> {{including}} <b>TCP</b> <b>sockets</b> in ESTABLISHED state (see below) ...|$|R
50|$|Racket's system {{interface}} includes asynchronous non-blocking I/O, green threads, synchronization channels, semaphores, sub-processes, and <b>TCP</b> <b>sockets.</b>|$|R
5000|$|The use of <b>TCP</b> <b>sockets</b> {{also allows}} for users to {{remotely}} control XMMS2 daemons over a TCP/IP network.|$|R
5000|$|The {{following}} script shows all applications setting <b>TCP</b> <b>socket</b> {{options on}} the system, what options are being set, {{and whether the}} option is set successfully or not: ...|$|E
5000|$|... {{is used on}} {{the client}} side, and assigns a free local port number to a socket. In case of a <b>TCP</b> <b>socket,</b> it causes an attempt to {{establish}} a new TCP connection.|$|E
5000|$|TCP offload: {{different}} vendors {{use different}} terms for this, {{but the idea}} is that normally each HTTP request from each client is a different TCP connection. This feature utilizes HTTP/1.1 to consolidate multiple HTTP requests from multiple clients into a single <b>TCP</b> <b>socket</b> to the back-end servers.|$|E
5000|$|The Relay service {{provides}} outward-facing in-session {{communication and}} operates on <b>TCP</b> <b>sockets.</b> Communication is encrypted with the AES-256 block cipher.|$|R
50|$|Generally <b>TCP</b> <b>sockets</b> {{are handled}} by {{spawning}} a separate server to handle each connection concurrently. UDP sockets are generally handled {{by a single}} server instance that handles all packets on that port.|$|R
5000|$|Implemented by mod_fcgid. This module {{used to be}} third-party, but {{was granted}} to the ASF as an Apache HTTP Server subproject in 2009, shepherded by Chris Darroch. It only {{supports}} UNIX <b>sockets,</b> no <b>TCP</b> <b>sockets.</b>|$|R
5000|$|The {{distinctions between}} a socket (internal representation), socket {{descriptor}} (abstract identifier), and socket address (public address) are subtle, {{and these are}} not carefully distinguished in everyday usage. Further, specific definitions of a [...] "socket" [...] differ between authors and often refers specifically to an internet socket or <b>TCP</b> <b>socket.</b>|$|E
50|$|SEXYZ (Synchronet External X-Modem, Y-Modem, Z-Modem) is an {{external}} file transfer program which supports X/Y/ZModem transfers. It was written {{to break the}} reliance on old DOS external protocols such as FDSZ and CEXYZ. It supports <b>TCP</b> <b>socket</b> and stdio transfers. It is functional and very little additional development on this is planned.|$|E
5000|$|In Python, the [...] module {{has both}} a [...] class and a [...] class. They act as servers for UDP and <b>TCP</b> <b>socket</b> servers, respectively. Additionally, {{there are two}} mixin classes: [...] and [...] Normally, all new {{connections}} are handled within the same process. By extending [...] with the [...] as follows: ...|$|E
50|$|Tests were {{previously}} performed using the HTTP protocol at Layer 7 of the OSI model. To further improve accuracy, Speedtest.net now performs tests via direct <b>TCP</b> <b>sockets</b> {{and uses a}} custom protocol for communication between servers and clients.|$|R
50|$|Since an {{attacker}} {{must be able}} {{to establish}} <b>TCP</b> <b>sockets</b> to affect the target, white-listing access to TCP services on critical systems and routers is the currently most effective means for mitigation. Using IPsec is also an effective mitigation.|$|R
30|$|The {{purpose was}} {{to find out how}} fast tweets can be {{streamed}} into the cloud platform without processing of tweets. AsterixDB’s REST API and data feeds were experimented for data ingestion. Respectively, loading of tweets was implemented to Spark with <b>TCP</b> <b>sockets.</b>|$|R
5000|$|The Quagga {{architecture}} {{consists of}} a core daemon (zebra) which is an abstraction layer to the underlying Unix kernel and presents the Zserv API over a Unix-domain socket or <b>TCP</b> <b>socket</b> to Quagga clients. The Zserv clients typically implement a routing protocol and communicate routing updates to the zebra daemon. Existing Zserv clients are: ...|$|E
5000|$|The Transmission Control Protocol (TCP) is a connection-oriented {{protocol}} {{that provides}} a variety of error correction and performance features for transmission of byte streams. A process creates a <b>TCP</b> <b>socket</b> by calling the [...] function with the parameters for the protocol family (...) , the socket mode for Stream Sockets (...) , and the IP protocol identifier for TCP (...) [...]|$|E
50|$|The {{ability to}} embed Java applets into browsers (starting with Netscape 2.0 in March 1996) made two-way {{sustained}} communications possible, using a raw <b>TCP</b> <b>socket</b> to communicate between the browser and the server. This socket can remain open {{as long as}} the browser is at the document hosting the applet. Event notifications can be sent in any format text or binary and decoded by the applet.|$|E
50|$|A server {{may create}} several {{concurrently}} established <b>TCP</b> <b>sockets</b> {{with the same}} local port number and local IP address, each mapped to its own server-child process, serving its own client process. They are treated as different sockets by the operating system, since the remote socket address (the client IP address and/or port number) are different; i.e. since they have different socket pair tuples.|$|R
5000|$|... 2) Sockstress: In {{its most}} basic use, sockstress simply opens <b>TCP</b> <b>sockets</b> and sends a {{specified}} TCP stress test. It can optionally send an application specific TCP payload (i.e. 'GET / HTTP/1.0' request). By default, post attack it ignores subsequent communications on the established socket. It can optionally ACK probes for active sockets.The attacks {{take advantage of the}} exposed resources the target makes available post handshake.|$|R
50|$|Many NAT {{implementations}} {{follow the}} port preservation design for TCP: {{for a given}} outgoing TCP communication, they use the same values as internal and external port numbers. NAT port preservation for outgoing TCP connections is crucial for TCP NAT traversal, because as TCP requires that one port can only be used for one communication at a time, programs bind distinct <b>TCP</b> <b>sockets</b> to ephemeral ports for each TCP communication, rendering NAT port prediction impossible for TCP.|$|R
5000|$|EGD gathers random entropy {{from various}} sources, {{processes}} it to remove bias and improve cryptographic quality, and then makes it available over a Unix domain socket (with [...] being a common choice) or over a <b>TCP</b> <b>socket.</b> The entropy gathering usually entails periodically forking subprocesses to query {{attributes of the}} system that are likely to be frequently changing and unpredictable, such as monitoring CPU, I/O, and network usage as well as the contents of various log files and temporary directories.|$|E
5000|$|FastAGI is an {{extension}} to AGI which allows the external program to run at a separate network host to avoid the overhead of creating a new process for every call on the Asterisk server. It uses a <b>TCP</b> <b>socket</b> for communication to the external host which provides the function of an AGI service, {{in a manner of}} the client-server model. The default TCP port for FastAGI is 4573. Similar to HTTP uniform resource identifiers (URIs), FastAGI employs a URI format of.agi://hostname:port/program/path ...|$|E
50|$|When {{using the}} VGL Transport, VirtualGL {{compresses}} the rendered 3D images in process {{using the same}} optimized JPEG codec that TurboVNC uses. VirtualGL then sends the compressed images over a dedicated <b>TCP</b> <b>socket</b> to a VirtualGL Client application running on the client machine. The VirtualGL Client is responsible for decompressing the images and drawing the pixels into the appropriate X window. Meanwhile, the non-OpenGL elements of the application's display are sent over the network using the standard remote X11 protocol and rendered on the client machine.|$|E
50|$|The Asterisk {{software}} {{includes many}} features available in proprietary PBX systems: voice mail, conference calling, {{interactive voice response}} (phone menus), and automatic call distribution. Users can create new functionality by writing dial plan scripts in several of Asterisk's own extensions languages, by adding custom loadable modules written in C, or by implementing Asterisk Gateway Interface (AGI) programs using any programming language capable of communicating via the standard streams system (stdin and stdout) or by network <b>TCP</b> <b>sockets.</b>|$|R
50|$|The Icinga Core manages {{monitoring}} tasks, receiving check {{results from}} various plug-ins. It then communicates these {{results to the}} IDODB (Icinga Data Out Database) through the IDOMOD (Icinga Data Out Module) interface and IDO2DB (Icinga Data Out to Database) service daemon over SSL encrypted <b>TCP</b> <b>sockets.</b> Though both come packaged (also known as IDOUtils) with the Core; they are single standing components, which can be separated to distribute the data and processes across multiple servers for distributed systems monitoring.|$|R
5000|$|The [...] library (or its equivalent) {{internally}} uses {{a native}} lower-level IPC mechanism {{to transport the}} required D-Bus messages between the two processes in {{both ends of the}} D-Bus connection. D-Bus specification doesn't mandate which particular IPC transport mechanisms should be available to use, as it's the communications library that decides what transport methods it supports. For instance, in Linux and Unix-like operating systems [...] typically uses Unix domain sockets as the underlying transport method, but it also supports <b>TCP</b> <b>sockets.</b>|$|R
5000|$|Real-Time Cmix (RTcmix) {{is one of}} the MUSIC-N {{family of}} {{computer}} music programming languages. RTcmix is descended from the MIX program developed by Paul Lansky at Princeton University in 1978 to perform algorithmic composition using digital audio soundfiles on a IBM 3031 mainframe computer. After synthesis functions were added, the program was renamed Cmix in the 1980s. Real-time capability was added by Brad Garton and David Topper in the mid-1990s, with support for <b>TCP</b> <b>socket</b> connectivity, [...] interactive control of the scheduler, and object-oriented embedding of the synthesis engine into fully featured applications.|$|E
50|$|Each chat {{connection}} from {{client to}} server is persistent. The <b>TCP</b> <b>socket</b> remains {{open for the}} duration of the chat session. This assists with implementing the idea of “presence” in the community, as the server knows who is connected and where they are chatting at all times. A disadvantage of persistent connections is the proliferation of server side connections as the number of chatters grows. Many chat systems deal with scale of connections by using non-persistent UDP based connections, at the expense of accurate, up-to-date presence information for all the chatters. The VPchat server deals with this by using a two layered system.|$|E
5000|$|Sockstress is a user-land <b>TCP</b> <b>socket</b> stress {{framework}} that can complete arbitrary numbers of open sockets without incurring the typical overhead of tracking state. Once the socket is established, it {{is capable of}} sending TCP attacks that target specific types of kernel and system resources such as Counters, Timers, and Memory Pools. Obviously, some of the attacks described here are considered [...] "well known". However, the full effects of these attacks is less known. Further, there are more attacks yet to be discovered/documented. As researchers document ways of depleting specific resources, attack modules could be added into the sockstress framework.|$|E
50|$|Because <b>TCP</b> <b>sockets</b> can be {{constructed}} to behave as blocking channels in the CSP sense, {{it is possible to}} distribute JCSP processes across multiple computers. This is achieved using the JCSP Net extension that provides channels with CSP semantics using TCP. Because CSP is compositional, it does not matter in behaviour terms whether processes are co-located or distributed. The only difference is in the relative performance. So it is possible, for example, to develop an application on a single server then compare multi-processor version of the same application with the aim of optimising the performance.|$|R
50|$|With this solution, the peers {{will first}} connect {{to a third}} party server that will save their port mapping value and give to both peers the port mapping value of the other peer. In a second step, both peers will reuse the same local {{endpoint}} to perform a TCP simultaneous open with each other. This unfortunately {{requires the use of}} the SO_REUSEADDR on the <b>TCP</b> <b>sockets,</b> and such use violates the TCP standard and can lead to data corruption. It should only be used if the application can protect itself against such data corruption.|$|R
40|$|Comparing {{programming}} languages is {{a common}} topic among programmers and software developers. With the recent changes in programming standards and continual upgrades in hardware design, many new programming languages are being developed, while existing ones are currently going through several enhancements in terms of design and implementation. In this research, we present a comparative study of four programming languages, C, Java, C#, and Jython, {{with respect to the}} following criteria: memory consumption, CPU utilization, and execution time. Each test was performed in a distributed system using <b>TCP</b> <b>sockets</b> with 1, 2, 4 and 8 clients, and on a symmetric multiprocessing system...|$|R
