1926|1901|Public
25|$|Documentation â€“ In more {{expressive}} type systems, types {{can serve}} as a form of documentation clarifying the intent of the programmer. For example, if a programmer declares a function as returning a <b>timestamp</b> type, this documents the function when the <b>timestamp</b> type can be explicitly declared deeper in the code to be an integer type.|$|E
25|$|The Unix epoch (the {{date and}} time {{associated}} with a zero <b>timestamp)</b> begins the midnight before the first of January 1970.|$|E
25|$|These are high-precision {{timekeeping}} {{devices such}} as atomic (cesium, rubidium) clocks, GPS clocks or other radio clocks. They generate a very accurate pulse per second signal that triggers an interrupt and <b>timestamp</b> on a connected computer. Stratum 0 devices are also known as reference clocks.|$|E
5000|$|Linked <b>timestamping</b> - Binary hash {{chains are}} a key {{component}} in linked <b>timestamping.</b>|$|R
40|$|<b>Timestamps</b> {{stored on}} digital media play an {{important}} role in digital investigations. Unfortunately, <b>timestamps</b> may be manipulated, and also refer to a clock that can be erroneous, failing or maladjusted. This reduces the evidentiary value of <b>timestamps.</b> This paper takes the approach that historical adjustments to a clock can be hypothesized in a clock hypothesis. Clock hypotheses can then be tested for consistency with stored <b>timestamps.</b> A formalism for the definition and testing of a clock hypothesis is developed, and test methods for clock hypothesis consistency are demonstrated. With the number of <b>timestamps</b> found in typical digital investigations, the methods presented in this paper can justify clock hypotheses without having to rely on <b>timestamps</b> from external sources. This increases the evidentiary value of <b>timestamps,</b> even when the originating clock has been erroneous, failing or maladjusted...|$|R
50|$|Linked <b>timestamping</b> {{is a type}} of trusted <b>timestamping</b> where issued time-stamps {{are related}} to each other.|$|R
25|$|When {{the first}} bird returns, its trainer removes {{the ring and}} places it in a slot in the clock. The time that the ring {{was placed in the}} clock is {{recorded}} as the official time that the competing bird arrived home. From this <b>timestamp</b> an average speed is measured and a winner of the race can be found.|$|E
25|$|Older {{versions}} of Motorola Oncore VP, UT, GT, and M12 GPS receivers had a software bug {{that would cause}} a single <b>timestamp</b> to be off by a day if no leap second was scheduled for 256 weeks. On November 28, 2003, this happened. At midnight, the receivers with this firmware reported November 29, 2003 for one second and then reverted to November 28, 2003.|$|E
25|$|Causal Vector Engine (CVE) {{mechanics}} {{are implemented}} simply, with an expandable view of SQL constructs written in stored procedures. If A causes B, and causality must occur within N number of transactions, then SQL ORDER BY <b>timestamp</b> clause creates a result set that increments a counter of all transactions that occurred within a timeframe, N number of matching B to occurrence A transactions. The creation of additional stored procedures is accomplished through the CVE console application or by using any standard database developer's toolkit.|$|E
40|$|Projet ARCHIVarious <b>timestamping</b> {{mechanisms}} {{has been}} provided in order to characterize the partial order between events occuring in a distributed computation. Using the order induced by such <b>timestamping</b> mechanisms, one can reasonn about causal or concurrent relation-ships between events. However comparisons between <b>timestamps</b> can induce false assumptions on these relationships. The order induced by the <b>timestamps</b> {{is not always the}} existing partial one in a distributed execution. It is in these terms that we study the accuracy of three <b>timestamping</b> mechanisms, showing the type of compromise (space-accuracy tradeoffs) one has to make when using them...|$|R
50|$|PTPd {{accuracy}} {{depends on}} how IEEE 1588 packets are <b>timestamped</b> on the participating machines. Currently, IEEE 1588 packets are <b>timestamped</b> in software in most implementations, i.e., interrupt latency, OS scheduling, and other software issues influence {{the accuracy of the}} acquired <b>timestamps,</b> and therefore, the accuracy of time synchronization. However, some hardware supports recording of <b>timestamps</b> in hardware, making it possible to acquire more precise send and receive <b>timestamps.</b> Software supporting this feature is starting to emerge providing increased and load independent accuracy. For example, a modified PTPd is available.|$|R
40|$|This thesis {{deals with}} the field of <b>timestamping,</b> digital signing and {{cryptography}} in general. Content {{is divided into two}} main parts, first being the overview of standards and technology behind <b>timestamping.</b> The second part deals with trusted <b>timestamping</b> authority as an entity, which offers <b>timestamping</b> services to outside enviroment. The need for this kind of authorities and their purpose is also explained. We present public key infrastructure (PKI) and various cryptographic standards and technologies. The central piece of this thesis is a presentation of RFC 3161 standard that defines the way, technology and data structures that are needed for <b>timestamping</b> any kind of digital document. The shortcomings and limitations of RFC 3161 standard are also presented. We also present multiple ways of offering <b>timestamping</b> services over internet. At the end we present the software for implementing trusted <b>timestamping</b> authority, that was made as a part of this thesis...|$|R
25|$|The Microsoft Excel {{spreadsheet}} program {{had a very}} elementary Y2K problem: Excel (in both Windows and Mac versions, when they are set to start at 1900) incorrectly set the year 1900 as a leap year for compatibility with Lotus 1-2-3. In addition, the years 2100, 2200, and so on, were regarded as leap years. This bug was fixed in later versions, but since the epoch of the Excel <b>timestamp</b> was set to the meaningless date of 0 January 1900 in previous versions, the year 1900 is still regarded as a leap year to maintain backward compatibility.|$|E
25|$|The clocks at CERN and LNGS {{had to be}} in sync, and {{for this}} the {{researchers}} used high-quality GPS receivers, backed up with atomic clocks, at both places. This system timestamped both the proton pulse and the detected neutrinos to a claimed accuracy of 2.3nanoseconds. But the <b>timestamp</b> could not be read like a clock. At CERN, the GPS signal came only to a receiver at a central control room, and had to be routed with cables and electronics to the computer in the neutrino-beam control room which recorded the proton pulse measurement (Fig.3). The delay of this equipment was 10,085nanoseconds and this value had {{to be added to the}} time stamp. The data from the transducer arrived at the computer with a 580nanoseconds delay, and this value had to be subtracted from the time stamp. To get all the corrections right, physicists had to measure exact lengths of the cables and the latencies of the electronic devices. On the detector side, neutrinos were detected by the charge they induced, not by the light they generated, and this involved cables and electronics as part of the timing chain. Fig.4 shows the corrections applied on the OPERA detector side.|$|E
2500|$|... "Not all {{concurrency}} control algorithms use locks... Three other techniques are <b>timestamp</b> ordering, serialization graph testing, and commit ordering. <b>Timestamp</b> ordering assigns each transaction a <b>timestamp</b> and ensures that conflicting operations execute in <b>timestamp</b> order. Serialization graph testing tracks conflicts and {{ensures that the}} serialization graph is acyclic. Commit ordering ensures that conflicting operations {{are consistent with the}} relative order in which their transactions commit, which can enable interoperability of systems using different {{concurrency control}} mechanisms." ...|$|E
50|$|This data {{is usually}} {{presented}} in a consistent format, allowing for easy comparison of two different records and tracking progress over time; the practice of recording <b>timestamps</b> in a consistent manner along with the actual data is called <b>timestamping.</b> The sequential numbering of events is sometimes called <b>timestamping.</b>|$|R
40|$|Partial-order data {{structures}} used in distributed-system observation tools typically use vector <b>timestamps</b> to efficiently determine event precedence. Unfortunately, all current dynamic vector-timestamp algorithms either {{require a}} vector of size {{equal to the}} number of processes in the computation or require a graph search operation to determine event precedence. This fundamentally limits the scalability of such observation systems. In this paper we present an algorithm for hierarchical, clustered vector <b>timestamps.</b> We present results for a variety of computation environments that demonstrate such <b>timestamps</b> can reduce space consumption by more than an order-of-magnitude over Fidge/Mattern <b>timestamps</b> while still providing acceptable time bounds for computing <b>timestamps</b> and determining event precedence. ...|$|R
50|$|Windows NT and its {{descendants}} keep internal <b>timestamps</b> as UTC {{and make}} the appropriate conversions for display purposes; all NTFS <b>timestamps</b> are in UTC.|$|R
2500|$|... +-------------+----------+ [...] | [...] | time_id | <b>timestamp</b> [...] | ...|$|E
2500|$|... t0 is the client's <b>timestamp</b> of {{the request}} packet transmission, ...|$|E
2500|$|... t1 is the server's <b>timestamp</b> of {{the request}} packet reception, ...|$|E
40|$|In {{this paper}} we {{describe}} an {{implementation of a}} temporal relational database management system based on attribute <b>timestamping.</b> For this purpose we modify an existing software [6] which supports set-valued attributes. The algebraic language of the system includes relational algebra operators, restructuring operators and temporal operators. We use this system {{to carry out a}} performance evaluation of different types of temporal databases: databases using attribute <b>timestamping,</b> databases using tuple <b>timestamping</b> where relations are in temporal normal form and databases using tuple <b>timestamping</b> where a single relation is used. We run sample queries against these types of temporal databases and measure processing time of these queries. This study verifies that the major performance trade off is between the restructuring (unpack) operation needed in databases using attribute <b>timestamping</b> and the join operation needed in databases using tuple <b>timestamping.</b> Furthermore, keeping all [...] ...|$|R
40|$|Abstract. <b>Timestamping</b> is a {{cryptographic}} technique providing {{us with a}} {{proof of}} existence of a message/document at a given time. Several <b>timestamping</b> schemes have already been proposed. In this paper, we shortly review existing schemes and then fully define a new <b>timestamping</b> system based on skip lists. We show that our scheme offers good performances...|$|R
5000|$|<b>Timestamping.</b> The ROA, as a TSA (Time Stamping Authority), {{provides}} a <b>timestamping</b> server for official certifications through a standard digital certificate x509 v3. This system {{is used by}} the whole public administration in Spain for <b>timestamping</b> their transactions. This service is available through the SARA Network (Sistema de Aplicaciones y Redes para las Administraciones).|$|R
2500|$|... t3 is the client's <b>timestamp</b> of the {{response}} packet reception.|$|E
2500|$|... t2 is the server's <b>timestamp</b> of the {{response}} packet transmission and ...|$|E
2500|$|Other related network {{tools were}} {{available}} both then and now. They include the Daytime and Time protocols for recording {{the time of}} events, {{as well as the}} ICMP <b>Timestamp</b> and IP <b>Timestamp</b> option (...) [...] More complete synchronization systems, although lacking NTP's data analysis and clock disciplining algorithms, include the Unix daemon timed, which uses an election algorithm to appoint a server for all the clients; and the Digital Time Synchronization Service (DTSS), which uses a hierarchy of servers similar to the NTP stratum model.|$|E
5000|$|To be able {{to control}} when outputs on a port occur with respect to the port's clock, outputs can be <b>timestamped</b> or timed. The <b>timestamped</b> statement: ...|$|R
40|$|Temporal {{indeterminacy}} is {{an inherent}} problem which arises when capturing and manipulating temporal data in many ap-plication areas. As such, representation and manipulation of <b>timestamps</b> with indeterminacy {{is a requirement}} for these ap-plications. We present an extension of Allenâ€™s thirteen in-terval relationships to indeterminate temporal intervals based on a novel representation for indeterminate <b>timestamps.</b> The <b>timestamps</b> {{can be derived from}} and translated to interval constraints. We provide a set of simple and useful operators for manipulating both convex and non-convex indeterminate intervals represented by these <b>timestamps...</b>|$|R
50|$|To {{ensure that}} {{recorded}} video files are not tampered with {{once they have}} been recorded, videos can be <b>timestamped</b> in a tamper-proof manner, a procedure termed trusted <b>timestamping.</b> One method for trusted <b>timestamping</b> video files involves immediately storing the unique hash of the file on the decentralized Blockchain of a cryptocurrency to securely prove its time of existence.|$|R
2500|$|Notepad {{also has}} a simple {{built-in}} logging function. Each time a file that starts with [...]LOG is opened, the program inserts a text <b>timestamp</b> on {{the last line of}} the file.|$|E
2500|$|There {{are some}} {{modifications}} and extensions to the diff formats {{that are used}} and understood by certain programs and in certain contexts. [...] For example, some revision control systemsâ€”such as Subversionâ€”specify a version number, [...] "working copy", or any other comment instead of or {{in addition to a}} <b>timestamp</b> in the diff's header section.|$|E
2500|$|Beginning in PDF 1.3, FDF {{can be used}} {{to define}} a {{container}} for annotations that are separate from the PDF document they apply to. FDF typically encapsulates information such as X.509 certificates, requests for certificates, directory settings, <b>timestamp</b> server settings, and embedded PDF files for network transmission. The FDF uses the MIME content type application/vnd.fdf, filename extension [...]fdf and on Mac OS it uses file type 'FDF'.|$|E
40|$|The {{distribution}} of keys {{in a computer}} network using single key or public key encryption is discussed. We {{consider the possibility that}} communication keys may be compromised, and show that key distribution protocols with <b>timestamps</b> prevent replays of compromised keys. The <b>timestamps</b> have the additional benefit of replacing a two-step handshake. Key Words and Phrases: encryption, encryption keys, key distribution, communications, ecurity, <b>timestamps...</b>|$|R
40|$|The use of <b>timestamps</b> in key {{distribution}} protocols was suggested by Denning and Sacco [DS 81]. <b>Timestamps</b> are now used in most production authentication services including Kerberos [SNS 88]. Concerns {{have been raised}} about the security implications of this practice [Gon 92]. <b>Timestamps</b> are necessary in authentication protocols that support multiple authentication without multiple requests to an authentication server. Kehne, SchÃ¶nwÃ¤lder, and LangendÃ¶rfer [KSL 92] have proposed a nonce-based protocol for multiple authentications that they claim improves upon the Kerberos protocol {{because it does not}} depend on the presence of synchronized clocks. This note discusses the use of <b>timestamps</b> as nonces and demonstrates a nonce-based mutualauthentication protocol requiring only four messages, one less than described in [KSL 92], and the same number of messages required for mutual-authentication in Kerberos. The note concludes by suggesting extensions to our protocol that allow the use of verifier issued <b>timestamps</b> as nonces while recovering some (though not all) of the benefits of traditional <b>timestamps...</b>|$|R
50|$|Time capture is {{the concept}} of making sense of time-related data based on <b>timestamps</b> {{generated}} by system software. Software that run on PCs and other digital devices rely on internal software clocks to generate <b>timestamps.</b> In turn, these <b>timestamps</b> {{serve as the basis for}} representing when an event has occurred (i.e. when an outgoing call was made), and for how long that event lasted (i.e. the duration of a phone call).|$|R
