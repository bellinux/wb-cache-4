228|398|Public
50|$|Object-oriented Abstract <b>Type</b> <b>Hierarchy</b> (OATH) is a {{class library}} for C++ from Texas Instruments.|$|E
5000|$|Because of this meaning, {{programming}} language Perl 6 uses [...] "Mu" [...] for {{the root of}} its <b>type</b> <b>hierarchy.</b>|$|E
50|$|Axiom is a free, {{general-purpose}} computer algebra system. It {{consists of an}} interpreter environment, a compiler and a library, which defines a strongly typed, mathematically (mostly) correct <b>type</b> <b>hierarchy.</b>|$|E
40|$|This paper aims {{to provide}} <b>type</b> <b>hierarchies</b> for Korean passive constructions {{on the basis}} of their forms within the HPSG framework. The <b>type</b> <b>hierarchies</b> {{proposed}} in this paper are based on the classification of Korean passives; suffixal passives, auxiliary passives, inherent passives, and passive light verb constructions. Verbs are divided into five subtypes in accordance with the possibility of passivization. We also provide <b>type</b> <b>hierarchies</b> for verbal nouns and passive light verbs. ...|$|R
5000|$|As {{additional}} {{file system}} <b>types,</b> <b>hierarchy</b> structure and supported media increased, additional features needed some specialized functions: ...|$|R
40|$|<b>Type</b> <b>hierarchies</b> {{abound in}} Artificial Intelligence, Data Bases and Programming Languages. Although their size, use and {{complexity}} differs, all share a central inference mechanism: Inheritance of information, their raison d 2 ̆ 7 etre. This paper discusses various <b>types</b> of <b>type</b> <b>hierarchies</b> and inheritance mechanisms, concluding with a proposed generalized inheritance mapping approach to resolve issues of lateral and upward inheritance (to augment the traditional downward approach), {{as well as}} default reasoning and limited non-monotonic inference...|$|R
50|$|The {{cumulative}} <b>type</b> <b>hierarchy,</b> {{also known}} as the von Neumann universe, is claimed by Gregory H. Moore (1982) to be inaccurately attributed to von Neumann. The first publication of the von Neumann universe was by Ernst Zermelo in 1930.|$|E
5000|$|A {{universal}} {{base class}} or other item {{at the top}} of a run time class hierarchy (often relevant in object-oriented programming) or type hierarchy; it is often possible to create objects with this (run time) type, or it could be found when one examines the <b>type</b> <b>hierarchy</b> programmatically, in languages that support it ...|$|E
50|$|Consider {{the design}} of a 2D {{computer-aided}} design (CAD) system. At its core there are several types to represent basic geometric shapes like circles, lines, and arcs. The entities are ordered into layers, and {{at the top of the}} <b>type</b> <b>hierarchy</b> is the drawing, which is simply a list of layers, plus some added properties.|$|E
40|$|We are {{considering}} <b>typed</b> <b>hierarchies</b> of total, continuous functionals over base types that are complete, separable metric spaces. P. Urysohn [17, 18] constructed a complete, separable metric space U. One {{of the properties}} of U is that every other separable metric space can be isometrically embedded into U. We discuss why U may be considered as the universal model of possibly infintary outputs of algorithms, and show that all our <b>typed</b> <b>hierarchies</b> may be topologically embedded, type by type, into the corresponding hierarchy over U. Restricting our base types to effective, separable Banach spaces, we also prove a density theorem and an effective embedding theorem. These are our main technical results...|$|R
40|$|In this paper, we {{construct}} a new even constrained B(C) <b>type</b> Toda <b>hierarchy</b> and derive its B(C) type Block type additional symmetry. Also we generalize the B(C) <b>type</b> Toda <b>hierarchy</b> to the N-component B(C) <b>type</b> Toda <b>hierarchy</b> which is proved to have symmetries of a coupled ⊗^NQT_+ algebra (N-folds direct {{product of the}} positive half of the quantum torus algebra QT). Comment: 13 Pages, accepted for publication in the Journal of Nonlinear Scienc...|$|R
40|$|Abstract. We are {{considering}} <b>typed</b> <b>hierarchies</b> of total, continuous functionals using complete, separable metric spaces {{at the base}} types. We {{pay special attention to}} the socalled Urysohn space constructed by P. Urysohn. One of the properties of the Urysohn space is that every other separable metric space can be isometrically embedded into it. We discuss why the Urysohn space may be considered as the universal model of possibly infinitary outputs of algorithms. The main result is that all our <b>typed</b> <b>hierarchies</b> may be topologically embedded, type by type, into the corresponding hierarchy over the Urysohn space. As a preparation for this, we prove an effective density theorem that is also of independent interest. 1...|$|R
50|$|A {{fundamental}} {{operation on}} this <b>type</b> <b>hierarchy</b> is saving a drawing to the system's native file format. At first glance {{it may seem}} acceptable to add local save methods to all types in the hierarchy. But it is also useful {{to be able to}} save drawings to other file formats. Adding ever more methods for saving into many different file formats soon clutters the relatively pure original geometric data structure.|$|E
50|$|When {{compilation}} is {{not available}} at run-time there are additional complications {{for the implementation of}} metaobject protocol. For example, it is possible to change the <b>type</b> <b>hierarchy</b> with such a protocol but doing so may cause problems for code compiled with an alternative class model definition. Some environments have found innovative solutions for this, e.g., by handling metaobject issues at compile time. A good example of this is OpenC++.|$|E
50|$|Multiple {{dispatch}} (also termed multimethods in Lisp) is a {{generalization of}} single dispatch the polymorphic mechanism used in common object-oriented programming (OOP) languages that uses inheritance. In Julia, all concrete types are subtypes of abstract types, {{directly or indirectly}} subtypes of the Any type, which is {{the top of the}} <b>type</b> <b>hierarchy.</b> Concrete types can not be subtyped, but composition is used over inheritance, that is used by traditional object-oriented languages (see also inheritance vs subtyping).|$|E
40|$|We obtain variational {{formulas}} for holomorphic {{objects on}} Riemann surfaces {{with respect to}} arbitrary local coordinates on the moduli space of complex structures. These formulas are written {{in terms of a}} canonical object on the moduli space which corresponds to the pairing between the space of quadratic differentials and the tangent space to the moduli space. This canonical object satisfies certain commutation relations which appear to be the same as the ones that emerged in the integrability theory of Whitham <b>type</b> <b>hierarchies.</b> Driven by this observation, we develop the theory of Whitham <b>type</b> <b>hierarchies</b> integrable by hydrodynamic reductions as a theory of certain differential-geometric objects. As an application we prove that the universal Whitham hierarchy is integrable by hydrodynamic reductions. Comment: Latex, 21 page...|$|R
40|$|Bracket {{preserving}} gauge equivalence {{is established}} between several two-boson generated KP <b>type</b> of <b>hierarchies.</b> These KP hierarchies reduce under symplectic reduction (via Dirac constraints) to KdV, mKdV and Schwarzian KdV hierarchies. Under this reduction the gauge equivalence is taking {{form of the}} conventional Miura maps between the above KdV <b>type</b> of <b>hierarchies.</b> ...|$|R
40|$|Abstract. We {{compare the}} definability of total functionals over the reals in two functional-programming {{approaches}} to exact real-number datatype of real numbers; and the intensional approach, {{in which one}} encodes real numbers using ordinary datatypes. We show that the <b>type</b> <b>hierarchies</b> coincide up to second-order types, and we relate this fact to an analogous comparison of <b>type</b> <b>hierarchies</b> over the external and internal real numbers in Dana Scott’s category of equilogical spaces. We {{do not know whether}} similar coincidences hold at third-order types. However, we relate this question to a purely topological conjecture about the Kleene-Kreisel continuous functionals over the natural numbers. Finally, although it is known that, in the extensional approach, parallel primitives are necessary for programming total first-order functions, we demonstrate that, in the intensional approach, such primitives are not needed for second-order types and below. ...|$|R
50|$|Responsibility-driven design {{focuses on}} the objects as {{behavioral}} abstractions which are characterized by their responsibilities. The CRC-card modelling technique is used to generate these behavioral abstractions. The rest of the object structure including data attributes are assigned later, as and when required. This makes the design follow <b>type</b> <b>hierarchy</b> for inheritance which improves encapsulation and {{makes it easier to}} identify abstract classes. It can also group the classes together based on their clients which is considered a unique ability.|$|E
5000|$|JSBML (Java Systems Biology Markup Language) is an {{open-source}} Java™ (API) for the SBML (Systems Biology Markup Language [...] ) format. Its API {{strives to}} attain a strong similarity to the Java binding of the corresponding library libSBML, but is entirely implemented in Java and therefore platform independent. JSBML provides an elaborated abstract <b>type</b> <b>hierarchy,</b> whose data types implement or extend many interfaces and abstract classes from the standard Java library. In this way, JSBML integrates smoothly into existing Java projects, and provides methods to read, write, evaluate, and manipulate the content of SBML documents.|$|E
50|$|HPSG generates strings by {{combining}} signs, which {{are defined by}} their location within a <b>type</b> <b>hierarchy</b> and by their internal feature structure, represented by attribute value matrices (AVMs). Features take types or lists of types as their values, and these values may in turn have their own feature structure. Grammatical rules are largely expressed through the constraints signs place on one another. A sign's feature structure describes its phonological, syntactic, and semantic properties. In common notation, AVMs are written with features in upper case and types in italicized lower case. Numbered indices in an AVM represent token identical values.|$|E
40|$|I give an {{overview}} of recent progress in constructing the KdV, mKdV and NLS <b>type</b> <b>hierarchies</b> with extended N= 4 supersymmetry. Comment: 12 pages, LaTeX, Talk given at International Seminar "Supersymmetry And Quantum Field Theory", dedicated {{to the memory of}} Dmitrij Volkov (Kharkov, Ukraine) January 5 - 7, 1997 (to be published in Proceedings...|$|R
40|$|This paper {{deals with}} the {{question}} whether <b>type</b> <b>hierarchies</b> together with default inheritance {{can be used to}} describe derivational morphology. Given the challenges provided by Krieger and Nerbonne (1993) it seems impossible to do derivation without embedding and as will become clear the price for doing derivation with default inheritance is very high indeed...|$|R
40|$|Categorial grammars {{are driven}} by substructural logics. These are {{fragments}} of modal logics for the structures the grammar deals with. We will discuss modal language {{as a means of}} access to families of relevant structures: formal languages, <b>type</b> <b>hierarchies,</b> relation algebras [...] arrow models, and vector spaces. This is the cross-roads of our title, where open directions abound...|$|R
50|$|Peirce {{arrived at}} his own system of three {{categories}} after a thoroughgoing study of his predecessors, with special reference to the categories of Aristotle, Kant, and Hegel. The names that he used for his own categories varied with context and occasion, but ranged from reasonably intuitive terms like quality, reaction, and representation to maximally abstract terms like firstness, secondness, and thirdness, respectively. Taken in full generality, nth-ness {{can be understood as}} referring to those properties that all n-adic relations have in common. Peirce's distinctive claim is that a <b>type</b> <b>hierarchy</b> of three levels is generative of all that we need in logic.|$|E
5000|$|Clearly {{the type}} of {{the result of the}} [...] {{operator}} must be in some sense the type unification of the types of its second and third operands. In C this is accomplished for numeric types by arithmetic promotion; since C does not have a <b>type</b> <b>hierarchy</b> for pointer types, pointer operands may only be used if they are of the same type (ignoring type qualifiers) or one is void or NULL. It is undefined behaviour to mix pointer and integral or incompatible pointer types; thus number = spell_out_numbers ? [...] "forty-two" [...] : 42;will result in a compile-time error in most compilers.|$|E
50|$|Both {{languages}} allow automatic boxing and unboxing, i.e. {{they allow}} for implicit casting between any primitive types {{and the corresponding}} reference types. In C#, the primitive types are subtypes of the Object type. In Java this is not true; any given primitive type and the corresponding wrapper type have no specific relationship with each other, except for autoboxing and unboxing, which act as syntactic sugar for interchanging between them. This was done intentionally, to maintain backward compatibility with prior versions of Java, in which no automatic casting was allowed, and the programmer worked with two separate sets of types: the primitive types, and the wrapper (reference) <b>type</b> <b>hierarchy.</b>|$|E
40|$|We {{compare the}} definability of total functionals over the reals in two functional-programming {{approaches}} to exact real-number computation: the extensional approach, {{in which one}} has an abstract datatype of real numbers; and the intensional approach, in which one encodes real numbers using ordinary datatypes. We show that the <b>type</b> <b>hierarchies</b> coincide up to second-order types, and we relate this fact to an analogous comparison of <b>type</b> <b>hierarchies</b> over the external and internal real numbers in Dana Scott's category of equilogical spaces. We {{do not know whether}} similar coincidences hold at third-order types. However, we relate this question to a purely topological conjecture about the Kleene-Kreisel continuous functionals over the natural numbers. Finally, although it is known that, in the extensional approach, parallel primitives are necessary for programming total first-order functions, we demonstrate that, in the intensional approach, such primitives are not needed for second-order types and below...|$|R
40|$|We {{construct}} a <b>typed</b> <b>hierarchy</b> of effective algebraic domains with totality of height the first recursively Mahlo ordinal. The hierarchy {{is based on}} the empty type and the domains for singleton, boolean values and natural numbers, and it is closed under dependent sums and pro-ducts of effectivly parameterised families of types, and under universes closed under a very general universe operator...|$|R
40|$|We {{display a}} new {{integrable}} perturbation for both N= 1 and N= 2 superconformal minimal models. These perturbations break supersymmetry explicitly. Their existence was expected {{on the basis}} of the classification of integrable perturbations of conformal field theories in terms of distinct classical KdV <b>type</b> <b>hierarchies</b> sharing a common second Hamiltonian structure. Comment: 10 pages (harvmac), LAVAL PHY- 20 - 9...|$|R
50|$|Since JSBML {{has been}} {{implemented}} considerably {{later than the}} first version of libSBML, it could therefore benefit from the existence of the specifications of SBML in the Levels 1-3. Hence, JSBML has not just been developed by porting existing C code from the libSBML project into a new Java™. Instead, the developers used this as a chance to completely redesign the class and API structure. This is why JSBML provides a much richer abstract <b>type</b> <b>hierarchy</b> compared to libSBML. Furthermore, the development of JSBML enabled making design decisions that are not possible in libSBML because no backward compatibility had to be considered at this time.|$|E
50|$|In another example, if Number, Rational, and Integer are types {{such that}} Number :> Rational and Number :> Integer, a {{function}} written {{to take a}} Number will work equally well when passed an Integer or Rational as when passed a Number. The actual type of the object can be hidden from clients into a black box, and accessed via object identity.In fact, if the Number type is abstract, it {{may not even be}} possible to get your hands on an object whose most-derived type is Number (see abstract data type, abstract class). This particular kind of <b>type</b> <b>hierarchy</b> is known—especially {{in the context of the}} Scheme programming language—as a numerical tower, and usually contains many more types.|$|E
50|$|Second, {{language}} interactions reveal {{relations between}} languages. Developers {{should be able}} to jump between related elements in different artifacts. Ease of navigation between different software artifacts is an important criterion for tools in traditional development environments. Although we have performed no empirical studies in this area, we hypothesize that proper navigation facilities increase productivity. This claim is supported by the observation that all major development environments today offer quite sophisticated navigation facilities such as <b>type</b> <b>hierarchy</b> browser or the ability to quickly locate and jump to references to a method definition. The development environments can provide these navigation facilities because they maintain a continuously updated model of the sourcefiles {{in the form of an}} abstract syntax tree.|$|E
40|$|This paper {{shows an}} {{approach}} to profit from type information about planning objects in a partial-order planner. The approach turns out to combine representational and computational advantages. On the one hand, <b>type</b> <b>hierarchies</b> allow better structuring of domain specifications. On the other hand, operators contain type constraints which reduce the search space of the planner as they partially achieve the functionality of filter conditions...|$|R
40|$|Alfa-informatica & BCN, University of Groningen {vannoord, gosse}Olet. rug. nl parsers and {{generators}} {{for natural}} languages. The package {{is written in}} Sicstus Prolog and Tcl/Tk. The system provides a graphical user interface with a command interpreter, {{and a number of}} visualisation tools, including visualisation of fea- ture structures, syntax trees, <b>type</b> <b>hierarchies,</b> lexical hierarchies, feature structure trees, definite clause definitions, grammar rules, lexical entries, and graphs of statis- tical information of various kinds...|$|R
40|$|We {{develop the}} theory of Whitham <b>type</b> <b>hierarchies</b> {{integrable}} by hydrodynamic reductions as a theory of certain differential-geometric objects. As an application we construct Gibbons-Tsarev systems associated to moduli space of algebraic curves of arbitrary genus and prove that the universal Whitham hierarchy is integrable by hydrodynamic reductions. Comment: 23 pages, Latex, overlapped with arXiv: 1505. 07779 [math. AG] but different emphasis is given here: this paper is designed for Integrable systems communit...|$|R
