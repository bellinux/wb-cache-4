9|21|Public
50|$|Latches are {{available}} as integrated circuits, usually with multiple latches per chip. For example, 74HC75 is a quadruple <b>transparent</b> <b>latch</b> in the 7400 series.|$|E
5000|$|A <b>transparent</b> <b>latch</b> is {{basically}} {{one bit of}} memory which is updated when an enable signal is raised. Again, {{there are many other}} ways this can be expressed in VHDL.-- latch template 1:Q <= D when Enable = '1' else Q;-- latch template 2:process(D,Enable)begin if Enable = '1' then Q <= D; end if;end process; ...|$|E
5000|$|Latches are {{designed}} to be transparent. That is, input signal changes cause immediate changes in output. Additional logic can be added to a simple <b>transparent</b> <b>latch</b> to make it non-transparent or opaque when another input (an [...] "enable" [...] input) is not asserted. When several transparent latches follow each other, using the same enable signal, signals can propagate through all of them at once. However, by following a transparent-high latch with a transparent-low (or opaque-high) latch, a master-slave flip-flop is implemented.|$|E
40|$|We {{describe}} a synthesis technique for power optimization in combinational logic circuits. We remove unnecessary signal transitions in circuits by addin <b>transparent</b> <b>latches.</b> Observability don’t-care sets (bDCs) {{are used to}} find such transitions, places where latches are inserted, and conditions for disabling the latches. We propose an algorithm for adding <b>transparent</b> <b>latches</b> to reduce power dissipation in circuits, and a method for estimating the reduced power because of the latches. We also present experimental results to show the eflectiveness of the technique on benchmark circuits. ...|$|R
50|$|<b>Transparent</b> <b>latches</b> are {{typically}} used as I/O ports or in asynchronous systems, or in synchronous two-phase systems (synchronous systems that use a two-phase clock), where two latches operating on different clock phases prevent data transparency as in a master-slave flip-flop.|$|R
30|$|In {{order to}} by-pass a {{pipeline}} register, {{we have used}} two methods. In the first one, the pipeline register logic is organized {{in such a way}} that a signal can pass through it regardless of the clock signal when the VSP is enabled. This solution can be implemented if the pipeline registers are made up of <b>transparent</b> <b>latches.</b> It is simple, but its drawback is the cost-effectiveness of using <b>transparent</b> <b>latches</b> in the pipeline. In the second method, the logic gates and multiplexors are involved. The multiplexors are meant to decide which pipeline registers are active and which ones are to be shutdown when the unification signal is applied. An example of this solution is shown in [24].|$|R
5000|$|This latch {{exploits}} {{the fact}} that, {{in the two}} active input combinations (01 and 10) of a gated SR latch, R is the complement of S. The input NAND stage converts the two D input states (0 and 1) to these two input combinations for the next [...] latch by inverting the data input signal. The low state of the enable signal produces the inactive [...] "11" [...] combination. Thus a gated D-latch may {{be considered as a}} one-input synchronous SR latch. This configuration prevents application of the restricted input combination. It is also known as <b>transparent</b> <b>latch,</b> data latch, or simply gated latch. It has a data input and an enable signal (sometimes named clock, or control). The word transparent comes from the fact that, when the enable input is on, the signal propagates directly through the circuit, from the input D to the output Q.|$|E
5000|$|The next {{interesting}} {{structure is}} a transparent latch; {{it will pass}} the input to the output when the gate signal is set for [...] "pass-through", and captures the input and stores it upon transition of the gate signal to [...] "hold". The output will remain stable regardless of the input signal while the gate is set to [...] "hold". In the example below the [...] "pass-through" [...] level of the gate would be when {{the value of the}} if clause is true, i.e. gate = 1. This is read [...] "if gate is true, the din is fed to latch_out continuously." [...] Once the if clause is false, the last value at latch_out will remain and is independent of the value of din.// <b>Transparent</b> <b>latch</b> examplereg latch_out;always @(gate or din) if(gate) latch_out = din; // Pass through state // Note that the else isn't required here. The variable // latch_out will follow the value of din while gate is // high. When gate goes low, latch_out will remain constant.|$|E
40|$|The 74 AHC 273; 74 AHCT 273 is a {{high-speed}} Si-gate CMOS device and is pin compatible with Low-power Schottky TTL (LSTTL). It is specified {{in compliance with}} JEDEC standard No. 7 -A. The 74 AHC 273; 74 AHCT 273 has eight edge-triggered, D-type flip-flops with individual D inputs and Q outputs. The common clock (CP) and master reset (MR) inputs, load and reset (clear) all flip-flops simultaneously. The state of each D input, one set-up time before the LOW-to-HIGH clock transition, is transferred to the corresponding output (Qn) of the flip-flop. All outputs will be forced LOW, independent of clock or data inputs, by a LOW on the MR input. The device is useful for applications where only the true output is required and the clock and master reset are common to all storage elements. ■ Balanced propagation delays ■ All inputs have Schmitt-trigger actions ■ Inputs accept voltages higher than VCC ■ Ideal buffer for MOS microcontroller or memory ■ Common clock and master reset ■ Related product versions: ◆ 74 AHC 377; 74 AHCT 377 for clock enable version ◆ 74 AHC 373; 74 AHCT 373 for <b>transparent</b> <b>latch</b> version ◆ 74 AHC 374; 74 AHCT 374 for 3 -state version ■ Input levels...|$|E
50|$|It is {{relatively}} easy for an inexperienced developer to produce code that simulates successfully but that cannot be synthesized into a real device, or is too large to be practical. One particular pitfall is the accidental production of <b>transparent</b> <b>latches</b> rather than D-type flip-flops as storage elements.|$|R
40|$|Many design {{techniques}} {{have been proposed}} to optimize {{the performance of a}} digital system implemented in a given technology. Each of these techniques can be advantageous in particular appli-cations, and they are often applied individually to enhance performance. Previous results had shown that signi cant enhancement could be achieved when several optimizations were applied concurrently to systems with edge-triggered ip- ops. However concurrent optimization framework does not exist for systems with <b>transparent</b> <b>latches.</b> It motivates us to formulate the concurrent optimization as a mixed integer linear programming for digital systems with <b>transparent</b> <b>latches.</b> This methodology is applicable to optimize a broad range of digital systems originally designed under either single or multi-phase clocking. In addition, we present a new optimization technique- resynchronization, which allows the insertion of latches in the shortest paths and thus avoids race condition. As a result, our framework is ready to include the resynchronization technique. Our formulation has been applied to several design examples and is able to signi cantly reduce the clock period. 1 This research is partially supported by NSF grant MIP- 92 - 12346...|$|R
40|$|Clocking {{frequencies}} {{continue to}} increase due to the de-mand for higher performance. Together with the larger die sizes, multiple clock cycles are now required to cross a chip. A routing tool must thus insert registers as well as buffers while minimizing the path latency. This paper ad-dresses optimal buffered path construction across multiple clock cycles using 2 -phase <b>transparent</b> <b>latches.</b> We demon-strate the benefits of routing using latches over registers, and we present a polynomial routing algorithm. Our results confirm the correctness of our algorithm. 1...|$|R
40|$|ATV, the Abstract Timing Verifier, is {{a program}} to perform static tim-ing {{analysis}} of dependency graphs derived from logic designs, analyzing representation of time and delays that enables a user to choose the represen-tation of time and delays most suitable to a particular analysis. Such representations include single numbers, ranges [min-max], and statistical descriptions (mean and standard deviation), or asymmetric rise/fall versions of all of these. The sophisticated user may develop new models and plug them in to the program. This technical report consists of {{the main body of}} my dissertation of the same title. It describes the background of the Abstract Timing Model that A TV uses, several different timing models, implementation of the principle algorithm for clock phase length analysis of <b>transparent</b> <b>latch</b> designs, and results of using the program. Detailed information about how to use the pro-gram is available in the companion technical report, User's Guide to ATV, an Abstract Timing Verifier, which also appeared as the appendix to my dissertation. Report Documentation Page Form ApprovedOMB No. 0704 - 0188 Public reporting burden for the collection of information is estimated to average 1 hour per response, including the time for reviewing instructions, searching existing data sources, gathering and maintaining the data needed, and completing and reviewing the collection of information. Send comments regarding this burden estimate or any other aspect of this collection of information...|$|E
40|$|Abstract. We {{propose a}} {{technology}} mapping algorithm that takes existing structural tech-nology-mapping algorithms based on dynam-ic programming [1, 3, 4] and extends them to retime pipelined circuits. If the circuit to be mapped has a tree structure, our algorithm generates an optimal solution compatible with that structure. The algorithm {{takes into account}} gate delays and capacitive loads as latches are moved across the logic. It also supports latches with embedded logic: i. e., cells that combine a D latch with a combin-ational gate at little extra cost in latch delay. simple <b>transparent</b> <b>latch</b> and a gate (denoted f(x 1,x 2, [...] .,xn)) for only little more delay and area than the latch itself. These cell libraries are often incomplete; e. g., a typical cell lib-rary based on tristate latches may embed only D, AND 2, AND 3, and OR 2 gates in latches, disallowing larger gates and inverting gates. For such asymmetric libraries, a simple change of latch polarity (i. e., retiming across an inverter) may enable or disable the embed-ding of a gate within the latch. Such effects are not modeled by previous work. Furthermore, the application of existing re-timing algorithms [5, 6, 7] after technology mapping is suboptimal. The smallest possible latch movement is a movement across a single mapped gate. But this ignores the pos-sibility of breaking a large gate into smaller pieces and placing the latch between them to meet a delay constraint. 1. Introduction. Th...|$|E
40|$|The 74 ALVCH 16373 is 16 -bit D-type <b>transparent</b> <b>latch</b> {{featuring}} separate D-type inputs {{for each}} latch and 3 -state outputs for bus oriented applications. Incorporates bus hold data inputs which {{eliminate the need}} for external pull-up or pull-down resistors to hold unused inputs. One latch enable (LE) input and one output enable (OE) are provided per 8 -bit section. The 74 ALVCH 16373 consists of 2 sections of eight D-type transparent latches with 3 -state true outputs. When LE is HIGH, data at the nDn inputs enter the latches. In this condition the latches are transparent, therefore a latch output will change each time its corresponding D-input changes. When LE is LOW, the latches store the information that was present at the nDn inputs at a set-up time preceding the LOW-to-HIGH transition of LE. When OE is LOW, the contents of the eight latches are available at the outputs. When OE is HIGH, the outputs go to the high-impedance OFF-state. Operation of the OE input does not affect the state of the latches. 2. Features and benefits Wide supply voltage range from 1. 2 V to 3. 6 V Complies with JEDEC standard JESD 8 -B CMOS low power consumption MULTIBYTE flow-through standard pin-out architecture Low inductance multiple VCC and GND pins for minimum noise and ground bounce Direct interface with TTL levels All data inputs have bus hold Output drive capability 50 � transmission lines at 85 �C Current drive � 24 mA at VCC = 3. 0 VNXP Semiconductor...|$|E
40|$|Delay {{variation}} due to crosstalk {{has made}} timing analysis a hard problem. In sequential circuits with <b>transparent</b> <b>latches,</b> crosstalk makes the clock schedule verification even harder. In this paper, we {{point out a}} false negative problem in current clock schedule verification techniques and propose a new approach based on switching windows. In this approach, coupling delay calculations are naturally combined with latch iterations. A novel algorithm is given for clock schedule verification {{in the presence of}} crosstalk and primary experiments show promising results. 1...|$|R
40|$|The 74 LVC 16373 A and 74 LVCH 16373 A are 16 -bit D-type <b>transparent</b> <b>latches</b> {{featuring}} separate D-type inputs with bus hold (74 LVCH 16373 A only) {{for each}} latch and 3 -state outputs for bus-oriented applications. One Latch Enable (LE) input and one Output Enable (OE) are provided for each octal. Inputs can be driven from either 3. 3 V or 5 V devices. When disabled, up to 5. 5 V {{can be applied}} to the outputs. These features allow the use of these devices in mixed 3. 3 V and 5 V applications. The device consists of two sections of eight D-type <b>transparent</b> <b>latches</b> with 3 -state true outputs. When LE is HIGH, data at the Dn inputs enter the latches. In this condition, the <b>latches</b> are <b>transparent,</b> that is, the latch outputs change each time its corresponding D-input changes. The latches store the information that was present at the D-inputs one set-up time (tsu) preceding the HIGH-to-LOW transition of LE. When OE is LOW, the contents of the eight latches are available at the outputs. When OE is HIGH, the outputs go to the high impedance OFF-state. Operation of the OE input does not affect the state of the latches. Bus hold on the data inputs eliminates the need for external pull-up resistors to hold unused inputs. 2. Features and benefits � 5 V tolerant inputs/outputs for interfacing with 5 V logic � Wide supply voltage range from 1. 2 V to 3. 6 V � CMOS low power consumption � Multibyte flow-through standard pinout architecture � Multiple low inductance supply pins for minimum noise and ground bounce � Direct interface with TTL levels � All data inputs have bus hold (74 LVCH 16373 A only) � High-impedance when VCC = 0...|$|R
40|$|Abstract — Level-sensitive <b>transparent</b> <b>latches</b> {{are widely}} used in {{high-performance}} sequential circuit designs. Under process variations, the timing of a transparently latched circuit will adapt random delays at runtime due to time borrowing. The central problem to determine the timing yield is to compute the probability {{of the presence of}} a positive cycle in the latest latch timing graph. Existing algorithms are either optimistic since cycles are omitted or require iterations that cannot be polynomially bounded. In this paper, we present the first algorithm to compute such probability based on block-based statistical timing analysis that, first, covers all cycles through a structural graph traversal, and second, terminates within a polynomial number of statistical “sum ” and “max ” operations. Experimental results confirm that the proposed approach is effective and efficient. I...|$|R
40|$|Abstract — Now a days, an Electronic {{circuits}} {{are designed}} by using EDA tools. This {{can be implemented}} in Field Programmable Gate Arrays (FPGA). In FPGA, the pulsed latches are replaced by flip-flops for timing optimization. Pulsed <b>latches</b> are <b>transparent</b> <b>latches</b> driven by a clock with a non standard duty cycle. Latches are used for timing optimization and it can avoid the power and area utilization. This {{can be achieved by}} using Common Clock Method to reduce the power and timing constraints in different flip flops. In level triggering, certain flip-flops are replaced with latches for performance gain, but it will increasing the delay in short paths. Comparing with level triggering, the edge triggering perform faster in well defined moment in time. In FPGA performance can be improved by applying Common Clock and Delay Padding can be optimized...|$|R
40|$|Cycle {{simulation}} techniques, such as levelized com-piled code, can ordinarily {{be applied}} only to synchronous designs. They usually {{cannot be applied to}} designs con-taining circuit features like combinational paths, multi-ple clock domains, generated clocks, asynchronous re-sets, and <b>transparent</b> <b>latches.</b> This paper presents a novel partitioning algorithm that partitions a non-cycle-simulatable circuit containing these features into sub-circuits that can be cycle simulated. Cycle simulation techniques {{can be applied to the}} individual sub-circuits, and the whole collection of sub-circuits can be simulated together using conventional co-simulation techniques. Empirical results demonstrate that this approach brings the benets of cycle simulation to circuits that were pre-viously impossible to cycle simulate. The partitioning algorithm requires time and space linear in the size of the circuit, and in practice is very fast. We also dis-cuss how the key ideas presented here can be applied to accelerate HDL simulation. ...|$|R
40|$|Clock skew is an {{increasing}} concern for high-speed circuit designers. Circuit designers use <b>transparent</b> <b>latches</b> and skew-tolerant domino circuits to hide clock skew from the critical path {{and take advantage of}} shared portions of the clock network to budget less skew between nearby elements than across the entire die, but current timing analysis algorithms do not handle correlated clock skews. This paper extends the Sakallah [...] Mudge [...] Olukotun (SMO) latch-based timing analysis to include different amounts of clock skew between different elements. The key change is that departure times from each latch must be defined with respect to launching clocks so that the skew between the launching and receiving clocks can be determined at each receiver. The exact analysis leads to an explosion in the number of timing constraints, but most constraints are not tight in practical situations and {{a modified version of the}} Szymanski [...] Shenoy relaxation algorithm gives exact results with only a small incre [...] ...|$|R
40|$|Abstract—An {{asynchronous}} pipeline {{style is}} introduced for highspeed applications, called MOUSETRAP. The pipeline uses standard <b>transparent</b> <b>latches</b> and static logic in its datapath, and small latch controllers consisting {{of only a}} single gate per pipeline stage. This simple structure is combined with an efficient and highly-concurrent event-driven protocol between adjacent stages. Post-layout SPICE simulations of a ten-stage pipeline with a 4 -bit wide datapath indicate throughputs of 2. 1 – 2. 4 GHz in a 0. 18 - m TSMC CMOS process. Similar results were obtained when the datapath width was extended to 16 bits. This performance is competitive even with that of wave pipelines [40], [19], without the accompanying problems of complex timing and much design effort. Additionally, the new pipeline gracefully and robustly adapts to variable speed environments. The pipeline stages are extended to fork and join structures, to handle more complex system architectures. Index Terms—Asynchronous, clocked CMOS, gate-level pipelines, latch controllers, micropipelines, pipeline processing, transition signaling, wave pipelining. I...|$|R
40|$|We {{consider}} {{the problem of}} finding an optimal clock schedule, i. e. optimal arrival times for clock signals at latches of a VLSI chip. We describe a general model which includes all previously considered models. Then we show how to optimize the cycle time and optimally balance slacks on data paths and on clocktree paths. The problem of finding a clock schedule with the optimum cycle time was solved before, either by linear programming or by binary search, using a test for negative circuits in a digraph as a subroutine. We show that the parametric shortest path algorithm of Young, Tarjan and Orlin solves this problem optimally. Incidentally, this yields a new efficient method for timing analysis with <b>transparent</b> <b>latches.</b> Then we extend this algorithm to the slack balancing problem: To make the chip less sensitive to routing detours, process variations and manufacturing skew it is desirable to have as few critical paths as possible. We show {{how to find the}} clock schedule wit [...] ...|$|R
40|$|Abstract—We explore using pulsed latches for timing opti-mization – a {{first in}} the FPGA community. Pulsed <b>latches</b> are <b>transparent</b> <b>latches</b> driven by a clock with a {{non-standard}} (non- 50 %) duty cycle. We exploit existing functionality within commercial FPGA chips to implement latch-based optimizations {{that do not have}} the power or area drawbacks associated with other timing optimization approaches, such as clock skew and retiming. We propose an algorithm that iteratively replaces certain flip-flops in a logic design with latches for an improvement in circuit speed. Results show that much of the performance improvement achieved by using multiple skewed clocks can also be achieved using a single clock and latches. We also consider the impact of short delay paths (i. e. minimum delays), which can cause hold-time violations. Under conservative minimum delay assumptions, our latch-based optimization, operating on the routed design, provides a 5 % performance improvement, on average, essentially for “free ” (i. e. without any re-routing/delay padding). We show that short paths greatly hinder the ability of using latches for speed improvement, motivating further work to reduce their effects. I...|$|R
40|$|Abstract—With {{increasing}} process variation, binning {{has become}} an important technique to improve the values of fabricated chips, especially in high performance microprocessors where <b>transparent</b> <b>latches</b> are widely used. In this paper, we formulate and solve the binning optimiza-tion problem that decides the bin boundaries and their testing order to maximize the benefit (considering the test cost) for a transparently-latched circuit. The problem is decomposed into three sub-problems which are solved sequentially. First, to compute the clock period distribu-tion of the transparently-latched circuit, a sample-based SSTA approach is developed {{which is based on}} the generalized stochastic collocation method (gSCM) with Sparse Grid technique. The minimal clock period on each sample point is found by solving a minimal cycle ratio problem in the constraint graph. Second, a greedy algorithm is proposed to maximize the sales profit by iteratively assigning each boundary to its optimal position. Then, an optimal algorithm of O(n logn) runtime is used to generate the optimal testing order of bin boundaries to minimize the test cost, based on alphabetic tree. Experiments on all the ISCAS’ 89 sequential benchmarks with 65 -nm technology show 6. 69 % profit improvement and 14. 00 % cost reduction in average. The results also demonstrate that the proposed SSTA method achieves an error of 0. 70 % and speedup of 110 X in average compared with the Monte Carlo simulation...|$|R
40|$|Abstract—Clock skew is an {{increasing}} concern for high-speed circuit designers. Circuit designers use <b>transparent</b> <b>latches</b> and skew-tolerant domino circuits to hide clock skew from the critical path {{and take advantage of}} shared portions of the clock network to budget less skew between nearby elements than across the entire die, but current timing analysis algorithms do not handle correlated clock skews. This paper extends the Sakallah–Mudge–Olukotun (SMO) latch-based timing analysis to include different amounts of clock skew between different elements. The key change is that departure times from each latch must be defined with respect to launching clocks so that the skew between the launching and receiving clocks can be determined at each receiver. The exact analysis leads to an explosion in the number of timing constraints, but most constraints are not tight in practical situations and {{a modified version of the}} Szymanski–Shenoy relaxation algorithm gives exact results with only a small increase in runtime. The timing analysis formulation also captures the effects of skew on edge-triggered flip-flops, domino circuits, and min-delay constraints. Our exact algorithm, applied to a supercomputer node controller with over 12 000 clocked elements, finds the system can run 50 – 90 ps faster than a single skew analysis would predict and requires searching fewer than 4 % more latch departures than conventional algorithms. With the less conservative skew budgets enabled by better timing analysis, we expect clocked systems will remain viable to multi-GHz frequencies. Index Terms—Clock skew, domino, min-delay, timing analysis...|$|R
40|$|We {{propose a}} 32 x 32 -bit {{multiplier}} with reduced delay compared to conventional multiplication algorithms. An efficient radix- 2 recording logic generates the partial products. A 2 -phase micro pipeline latch controller is used which controls a 4 -phase pipeline with standard <b>transparent</b> level sensitive <b>latches.</b> The design employs the modified Booth algorithm diminishing 8 bits {{at a time}} with an iterative structure. Assign extension algorithm is also employed in this study. Furthermore, the early termination scheme speeds up the multiplication operation. The multiplication time is 3. 1 n sec at a 1. 3 -V power supply. Present multiplication algorithm showed 13 % speed improvement, 14 % power savings and 9. 5 % reduction in transistor count {{when compared to the}} conventional multiplication algorithms...|$|R
40|$|An {{asynchronous}} pipelined 32 × 32 -bit iterative multiplier {{is presented}} in this paper. The multiplier supports 32 × 32 -bit integer multiplication of both signed and unsigned operands. A 2 -phase micropipeline latch controller is used which controls a 4 -phase pipeline with standard <b>transparent</b> level sensitive <b>latches.</b> The design employs the modified Booth algorithm diminishing 8 bits at a time with an iterative structure. A sign extension algorithm is also employed in this work. Furthermore, the early termination scheme speeds up the multiplication operation. The multiplier consists {{of a total of}} 10700 CMOS elements and completes an 32 × 32 -bit multiplication in 12 ns under the typical conditions. This work is also very low power and costs only 50 % energy per operation of that of Amulet 3 i multiplier. ...|$|R
40|$|Prior {{work has}} shown that {{collapsible}} pipelining techniques {{have the potential to}} significantly reduce clocking activity, which can consume up to 70 % of the dynamic power in modern high performance microprocessors. Previous collapsible pipeline proposals either rely on single phase clocking (by forcing <b>latches</b> into <b>transparent</b> state) or do not discuss the mechanisms by which stages are merged. In this work two flip-flop designs featuring an additional transparent state suitable for collapsing stages are presented. Transparency is achieved either by decoupling the master and slave clocks to keep both <b>latches</b> <b>transparent,</b> or by using a bypass mux that routes around the flip-flop. Both of these designs are evaluated in the context of transparently gated pipelines, an ad-hoc collapsible pipelining technique. Detailed analysis shows that the decoupled clock flipflop is the most attractive in terms of energy and delay. 1...|$|R
40|$|Energy {{consumption}} can {{be reduced}} by scaling down frequency when peak performance is not needed. A lower frequency permits slower circuits, and hence a lower supply voltage. Energy reduction comes from voltage reduction, a technique called Dynamic Voltage Scaling (DVS). This paper makes {{the case that the}} useful frequency range of DVS is limited because there is a lower bound on voltage. Lowering frequency permits voltage reduction until the lowest voltage is reached. Beyond that point, lowering frequency further does not save energy because voltage is constant. However, there is still opportunity for energy reduction outside the influence of DVS. If frequency is lowered enough, pairs of pipeline stages can be merged to form a shallower pipeline. The shallow pipeline has better instructions-per-cycle (IPC) than the deep pipeline. Since energy also depends on IPC, energy is reduced for a given frequency. Accordingly, we propose Dynamic Pipeline Scaling (DPS). A DPS-enabled deep pipeline can merge adjacent pairs of stages by making the intermediate <b>latches</b> <b>transparent</b> and disabling corresponding feedback paths. Thus, a DPS-enabled pipeline has a deep mode for higher frequencies within the influence of DVS, and a shallow mode for lower frequencies. Shallow mode extends the frequency range for which energy reduction is possible. For frequencies outside the influence of DVS, a DPS-enabled deep pipeline consumes from 23 % to 40 % less energy than a rigid deep pipeline...|$|R

