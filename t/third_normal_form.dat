57|10000|Public
25|$|Star and {{snowflake}} schemas {{are most}} {{commonly found in}} dimensional data warehouses and data marts where speed of data retrieval {{is more important than}} the efficiency of data manipulations. As such, the tables in these schemas are not normalized much, and are frequently designed at a level of normalization short of <b>third</b> <b>normal</b> <b>form.</b>|$|E
50|$|In {{database}} normalization, one of {{the important}} features of <b>third</b> <b>normal</b> <b>form</b> is that it excludes certain types of transitive dependencies. E.F. Codd, the inventor of the relational model, introduced the concepts of transitive dependence and <b>third</b> <b>normal</b> <b>form</b> in 1971.|$|E
5000|$|Edgar F. Codd, the {{inventor}} of the relational model (RM), introduced the concept of normalization and what is now known as the first normal form (1NF) in 1970. Codd went on to define the second normal form (2NF) and <b>third</b> <b>normal</b> <b>form</b> (3NF) in 1971, and Codd and Raymond F. Boyce defined the Boyce-Codd normal form (BCNF) in 1974. Informally, a relational database relation is often described as [...] "normalized" [...] if it meets <b>third</b> <b>normal</b> <b>form.</b> Most 3NF relations are free of insertion, update, and deletion anomalies.|$|E
40|$|In this paper, {{based on}} {{equivalence}} classes of attributes there are formulated necessary and sufficient conditions that constraint a database schema {{to be in}} the second, <b>third</b> or Boyce-Codd <b>normal</b> <b>forms.</b> These conditions offer a polynomial complexity for the testing algorithms of the normalizations level...|$|R
40|$|Abstract. The time-periodic scalar delay {{differential}} equation ˙x(t) = γf(t, x(t − 1)) is considered, {{which leads to}} a resonant bifurcation of the equilibrium at critical values of the parameter. Using Floquet theory, spectral projection and center manifold reduction, we give conditions for the stability properties of the bifurcating invariant curves and fourperiodic orbits. The coefficients of the <b>third</b> order <b>normal</b> <b>form</b> are derived explicitly. We show that the 1 : 4 resonance has no effect on equations of the form ˙z(t) = −γr(t) g(x(t− 1)) ...|$|R
5000|$|Fourth <b>normal</b> <b>form</b> (4NF) is a <b>normal</b> <b>form</b> used in {{database}} normalization. Introduced by Ronald Fagin in 1977, 4NF is {{the next}} level of normalization after Boyce-Codd <b>normal</b> <b>form</b> (BCNF). Whereas the second, <b>third,</b> and Boyce-Codd <b>normal</b> <b>forms</b> are concerned with functional dependencies, 4NF is concerned with a more general type of dependency known as a multivalued dependency. A table is in 4NF if and only if, for every one of its non-trivial multivalued dependencies X [...] Y, X is a superkey—that is, X is either a candidate key or a superset thereof.|$|R
50|$|The data vault {{modeling}} components follow {{hub and spokes}} architecture. This modeling {{style is}} a hybrid design, consisting of the best practices from both <b>third</b> <b>normal</b> <b>form</b> and star schema. The data vault model is not a true <b>third</b> <b>normal</b> <b>form,</b> and breaks some of its rules, {{but it is a}} top-down architecture with a bottom up design. The data vault model is geared to be strictly a data warehouse. It is not geared to be end-user accessible, which when built, still requires the use of a data mart or star schema based release area for business purposes.|$|E
5000|$|Normal {{forms are}} {{database}} normalization levels which determine the [...] "goodness" [...] of a table. Generally, the <b>third</b> <b>normal</b> <b>form</b> {{is considered to}} be a [...] "good" [...] standard for a relational database.|$|E
5000|$|The <b>third</b> <b>normal</b> <b>form</b> (3NF) is {{a normal}} form used in {{database}} normalization. 3NF was originally defined by E.F. Codd in 1971. Codd's definition states that a table is in 3NF {{if and only if}} both of the following conditions hold: ...|$|E
40|$|Abstract. There {{are only}} very few {{approaches}} to normalizing objectoriented data. In this paper we present {{an approach to}} normalization of the object-oriented conceptual model based on UML class diagrams. First part of the paper describes the current status {{in the area of}} formal methods used for object-oriented data modeling. Second part presents four normalization rules, which are based on own experience and modi ed Ambler-Beck approach. These normalization rules are introduced on an example. Our method has been used in education at several universities. It has been and is also used for database design in software development projects, which we carried out. Recently, development of the CASE tool based on this approach has been started. Keywords. Data normalization, object-oriented data model (ODM), relational data model (RDM), rst object-oriented <b>normal</b> <b>form</b> (1 ONF), second objectoriented <b>normal</b> <b>form</b> (2 ONF), <b>third</b> object-oriented <b>normal</b> <b>form</b> (3 ONF), fourth object-oriented <b>normal</b> <b>form</b> (4 ONF). ...|$|R
40|$|Efficient and well-managed {{urban bus}} {{transport}} systems supported by information systems with decision support capabilities developed {{within the framework}} of an advanced Relational Data Base Management System (RDBMS) can provide critical information at the right moment and assisttransport managers in conducting performance evaluations. This paper includes discussions {{on the use of the}} entity-relationship (E-R) model (a semantic data modelling technique) in the development of thestructure of the conceptual database for the information system planned to be implemented using RDBMS. The E-R data modelling approach enables database designers in obtaining the <b>third</b> <b>normal</b> <b>forms</b> of related databases for the efficient functioning of the information system. The inportance of decision tables in the development of DSS modules using Expert System shells are also discussed. The DSS modules will assist transport managers in the analysis of operational performance for bus depots or the organization as a whole. The E-R diagrams generated and the decision files developed will serve as important documents that can enhance the adaptability of the DSS to the changing needs ofthe organizations. The conceptualization of the information system to support decision-making in an RDBMS framework provides the advantage of a very low disk seek time and facilitates frequent generation of reports...|$|R
40|$|Abstract-Normal forms play {{a central}} role in the design of {{relational}} databases. Several <b>normal</b> <b>forms</b> for temporal relational databases have been proposed. These definitions are particular to specific temporal data models, which are numerous and incompatible. This paper attempts to rectify this situation. We define a consistent framework of temporal equivalents of the important conventional database design concepts: functional dependencies, primary keys, and <b>third</b> and Boyce-Codd <b>normal</b> <b>forms.</b> This framework is enabled by making a clear distinction between the logical concept of a temporal relation and its physical representation. As a result, the role played by temporal <b>normal</b> <b>forms</b> during temporal database design closely parallels that of <b>normal</b> <b>forms</b> during conventional database design. These new <b>normal</b> <b>forms</b> apply equally well to all temporal data models that have timeslice operators, including those employing tuple timestamping, backlogs, and attribute value timestamping. As a basis for our research, we conduct a thorough examination of existing proposals for temporal dependencies, keys, and <b>normal</b> <b>forms.</b> To demonstrate the generality of our approach, we outline how <b>normal</b> <b>forms</b> and dependency theory can also be applied to spatial and spatiotemporal databases. Index Terms-Temporal relation, valid time, transaction time, functional dependency, data semantics, <b>normal</b> <b>form,</b> database design. ...|$|R
50|$|Elementary key {{normal form}} (EKNF) {{is a subtle}} {{enhancement}} on <b>third</b> <b>normal</b> <b>form,</b> thus EKNF tables are in 3NF by definition. This happens when {{there is more than}} one unique composite key and they overlap. Such cases can cause redundant information in the overlapping column(s).|$|E
50|$|Boyce-Codd {{normal form}} (or BCNF or 3.5NF) {{is a normal}} form used in {{database}} normalization. It is a slightly stronger version of the <b>third</b> <b>normal</b> <b>form</b> (3NF). BCNF was developed in 1974 by Raymond F. Boyce and Edgar F. Codd to address certain types of anomalies not dealt with by 3NF as originally defined.|$|E
50|$|Star and {{snowflake}} schemas {{are most}} {{commonly found in}} dimensional data warehouses and data marts where speed of data retrieval {{is more important than}} the efficiency of data manipulations. As such, the tables in these schemas are not normalized much, and are frequently designed at a level of normalization short of <b>third</b> <b>normal</b> <b>form.</b>|$|E
40|$|Intuitive but {{completely}} novel {{strategies have}} been proposed which provides noteworthy improvement in reducing the query response time, assuming a database is designed in <b>third</b> or higher <b>normal</b> <b>form</b> to avoid obvious design pitfalls. In query construction, the Cartesian product {{has been replaced by}} a novel substitution approach, which reduces both the query execution time and space many order magnitudes compared to the traditional approaches, along with other benefits. We had implemented many database-applications with the proposed paradigm to cope with the practical bottlenecks of the database-systems. Hence the proposed paradigm had been rigorously and positively tested for its practical usefulness. The proposed substitution based paradigm, compared to the traditional query execution by Cartesian approach, performs faster and effective having both time and space complexities reduced significantly. Griffith Sciences, School of Information and Communication TechnologyFull Tex...|$|R
40|$|AbstractIn this paper, {{we propose}} the {{application}} of formal methods to Software Engineering. The most used data model is the relational model and we present, within the general framework of lattice theory, this analysis of functional dependencies. For this reason, we characterize the concept of f-family {{by means of a}} new concept which we call non-deterministic ideal operator (nd. ideal-o). The study of nd. ideal-o. s allows us to obtain results about functional dependencies as trivial particularizations, to clarify the semantics of the functional dependencies and to progress in their efficient use, and to extend the concept of schema. Moreover, the algebraic characterization of the concept of Key of a schema allows us to propose new formal definitions in the lattice framework for classical <b>normal</b> <b>forms</b> in relation schemata. We give a formal definition of the <b>normal</b> <b>forms</b> for functional dependencies more frequently used in the bibliography: the second <b>normal</b> <b>form</b> (2 FN), the <b>third</b> <b>normal</b> form(3 FN) and Boyce–Codd's <b>normal</b> <b>form</b> (FNBC) ...|$|R
5000|$|A head <b>normal</b> <b>form</b> is {{not always}} a <b>normal</b> <b>form,</b> because the applied {{arguments}} [...] need not be normal. However, the converse is true: any <b>normal</b> <b>form</b> is also a head <b>normal</b> <b>form.</b> In fact, the <b>normal</b> <b>forms</b> are exactly the head <b>normal</b> <b>forms</b> in which the subterms [...] are themselves <b>normal</b> <b>forms.</b> This gives an inductive syntactic description of <b>normal</b> <b>forms.</b>|$|R
50|$|The {{dimensional}} approach {{refers to}} Ralph Kimball's approach {{in which it}} is stated that the data warehouse should be modeled using a Dimensional Model/star schema. The normalized approach, also called the 3NF model (<b>Third</b> <b>Normal</b> <b>Form)</b> refers to Bill Inmon's approach {{in which it is}} stated that the data warehouse should be modeled using an E-R model/normalized model.|$|E
50|$|The <b>third</b> <b>normal</b> <b>form,</b> Boyce-Codd {{normal form}}, {{fourth normal form}} and fifth normal form are special cases of the domain/key normal form. All have either functional, multi-valued or join {{dependencies}} that can be converted into (super)keys. The domains on those normal forms were unconstrained so all domain constraints are satisfied. However, transforming a higher normal form into domain/key normal form {{is not always a}} dependency-preserving transformation and therefore not always possible.|$|E
50|$|A denormalized {{data model}} {{is not the}} same as a data model that has not been normalized, and denormalization should only take place after a {{satisfactory}} level of normalization has taken place and that any required constraints and/or rules have been created to deal with the inherent anomalies in the design. For example, all the relations are in <b>third</b> <b>normal</b> <b>form</b> and any relations with join and multi-valued dependencies are handled appropriately.|$|E
50|$|An {{arbitrary}} propositional formula {{may have}} a very complicated structure. It is often convenient to work with formulas that have simpler <b>forms,</b> known as <b>normal</b> <b>forms.</b> Some common <b>normal</b> <b>forms</b> include conjunctive <b>normal</b> <b>form</b> and disjunctive <b>normal</b> <b>form.</b> Any propositional formula {{can be reduced to}} its conjunctive or disjunctive <b>normal</b> <b>form.</b>|$|R
50|$|A formula in {{negation}} <b>normal</b> <b>form</b> can be {{put into}} the stronger conjunctive <b>normal</b> <b>form</b> or disjunctive <b>normal</b> <b>form</b> by applying distributivity.|$|R
50|$|Relations are {{classified}} {{based upon the}} types of anomalies to which they're vulnerable. A database that's in the first <b>normal</b> <b>form</b> is vulnerable to all types of anomalies, while a database that's in the domain/key <b>normal</b> <b>form</b> has no modification anomalies. <b>Normal</b> <b>forms</b> are hierarchical in nature. That is, the lowest level is the first <b>normal</b> <b>form,</b> and the database cannot meet the requirements for higher level <b>normal</b> <b>forms</b> without first having met all {{the requirements of the}} lesser <b>normal</b> <b>forms.</b>|$|R
50|$|Boyce-Codd {{normal form}} (or BCNF) was {{developed}} in 1974 by Boyce and Edgar F. Codd. It {{is a type of}} normal form that is used in database normalization. The goal of relational database design is to generate a set of database schemas that store information without unnecessary redundancy. Boyce-Codd accomplishes this and allows users to retrieve information easily. Using BCNF, databases will have all redundancy removed based on functional dependencies. It is a slightly stronger version of the <b>third</b> <b>normal</b> <b>form.</b>|$|E
50|$|<b>Third</b> <b>normal</b> <b>form</b> is {{a normal}} form that is used in {{normalizing}} a database design to reduce the duplication of data and ensure referential integrity by ensuring that (1) the entity is in second normal form, and (2) all the attributes in a table are determined only by the candidate keys of that relation and not by any non-prime attributes. 3NF was designed to improve database processing while minimizing storage costs. 3NF data modeling was ideal for online transaction processing (OLTP) applications with heavy order entry type of needs.|$|E
50|$|A hybrid DW {{database}} is kept on <b>third</b> <b>normal</b> <b>form</b> {{to eliminate}} data redundancy. A normal relational database, however, is not efficient for business intelligence reports where dimensional modelling is prevalent. Small data marts can shop for {{data from the}} consolidated warehouse and use the filtered, specific data for the fact tables and dimensions required. The DW provides a single source of information from which the data marts can read, providing {{a wide range of}} business information. The hybrid architecture allows a DW to be replaced with a master data management repository where operational, not static information could reside.|$|E
40|$|In {{this paper}} we {{introduce}} {{the class of}} additive <b>normal</b> <b>form</b> games, which is a subset of <b>normal</b> <b>form</b> games. In additive <b>normal</b> <b>form</b> games, the actions of each agent contribute some amount to the final payoff of all the agents. The contributions of the agents {{are assumed to be}} additive. We discuss the necessary and sufficient conditions for a <b>normal</b> <b>form</b> game to be an additive <b>normal</b> <b>form</b> game and show exactly how a <b>normal</b> <b>form</b> game may be converted to our additive representation...|$|R
50|$|It's {{much easier}} to build a {{database}} in domain/key <b>normal</b> <b>form</b> {{than it is to}} convert lesser databases which may contain numerous anomalies. However, successfully building a domain/key <b>normal</b> <b>form</b> database remains a difficult task, even for experienced database programmers. Thus, while the domain/key <b>normal</b> <b>form</b> eliminates the problems found in most databases, it tends to be the most costly <b>normal</b> <b>form</b> to achieve. However, failing to achieve the domain/key <b>normal</b> <b>form</b> may carry long-term, hidden costs due to anomalies which appear in databases adhering only to lower <b>normal</b> <b>forms</b> over time.|$|R
40|$|In logic, {{there are}} various <b>normal</b> <b>forms</b> for formulae; for example, {{disjunctive}} and conjunctive <b>normal</b> <b>form</b> for formulae of propositional logic or prenex <b>normal</b> <b>form</b> for formulae of predicate logic. There are algorithms for ‘reducing’ a given formula to a semantically equivalent formula in <b>normal</b> <b>form.</b> <b>Normal</b> <b>forms</b> are used {{in a variety of}} contexts including proofs of completeness, automated theorem proving, logic programming etc. In this paper, we develop a <b>normal</b> <b>form</b> for unitary Euler diagrams with shading. We give an algorithm for reducing a given Euler diagram to a semantically equivalent diagram in <b>normal</b> <b>form</b> and hence a decision procedure for determining whether two Euler diagrams are semantically equivalent. Potential applications of the <b>normal</b> <b>form</b> include clutter reduction and automated theorem proving in systems based on Euler diagrams...|$|R
5000|$|An {{alternative}} design uses two tables:Columns do {{not contain}} more than one telephone number in this design. Instead, each Customer-to-Telephone Number link appears on its own row. Using Customer ID as key, a one-to-many relationship exists between the name and the number tables. A row in the [...] "parent" [...] table, Customer Name, {{can be associated with}} many telephone number rows in the [...] "child" [...] table, Customer Telephone Number, but each telephone number belongs to one, and only one customer. [...] It is worth noting that this design meets the additional requirements for second and <b>third</b> <b>normal</b> <b>form.</b>|$|E
5000|$|For some time, {{it was all}} but {{forgotten}} (or considered irrelevant) {{that there}} were any other database models besides Relational. The Relational model and notion of <b>third</b> <b>normal</b> <b>form</b> were the de facto standard for all data storage. However, prior to the dominance of Relational data modeling from about 1980 to 2005 the hierarchical database model was commonly used, and since 2000 or 2010, many NoSQL models that are non-relational including Documents, triples, key-value stores and graphs are popular. Arguably, geospatial data, temporal data and text data are also separate models, though indexed, queryable text data is generally termed a [...] "search engine" [...] rather than a database.|$|E
5000|$|Consequently, the {{arguments}} about EAV vs. [...] "relational" [...] design reflect incomplete {{understanding of the}} problem: An EAV design should be employed only for that sub-schema of a database where sparse attributes need to be modeled: even here, {{they need to be}} supported by <b>third</b> <b>normal</b> <b>form</b> metadata tables. There are relatively few database-design problems where sparse attributes are encountered: this is why the circumstances where EAV design is applicable are relatively rare. Even where they are encountered, a set of EAV tables {{is not the only way}} to address sparse data: an XML-based solution (discussed below) is applicable when the maximum number of attributes per entity is relatively modest, and the total volume of sparse data is also similarly modest. An example of this situation is the problems of capturing variable attributes for different product types.|$|E
40|$|In {{this paper}} {{the problem of}} finding a <b>normal</b> <b>form</b> of triangles and plane quadrilaterals up to {{similarity}} is considered. Several <b>normal</b> <b>forms</b> for triangles and a <b>normal</b> <b>form</b> for quadrilaterals of special case are described. <b>Normal</b> <b>forms</b> of simple plane objects such as triangles {{can be used in}} mathematics teaching...|$|R
40|$|<b>Normal</b> <b>forms</b> of Boolean {{functions}} {{allow to}} check whether two given Boolean expressions describe the same Boolean function. The disjunctive <b>normal</b> <b>form</b> (DNF) {{as well as}} the conjunctive <b>normal</b> <b>form</b> (CNF) are widely used. Sometimes an algebraic <b>normal</b> <b>form</b> is taken into account in order to compare or to evaluate given Boolean functions. The basic property of each <b>normal</b> <b>form</b> is the unique representation of the given Boolean function. The aim {{of this paper is to}} study whether there are other <b>normal</b> <b>forms</b> of Boolean functions which allow a more detailed exploration of properties of Boolean Functions. In order to do this we extend the theory of Boolean <b>normal</b> <b>forms</b> in several directions. ...|$|R
50|$|The first {{example is}} also in conjunctive <b>normal</b> <b>form</b> and the last two are in both conjunctive <b>normal</b> <b>form</b> and {{disjunctive}} <b>normal</b> <b>form,</b> but the second example is in neither.|$|R
