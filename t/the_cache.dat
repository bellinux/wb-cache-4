6055|6295|Public
5|$|After Cersei {{fails to}} appear, Lancel Lannister {{is sent to}} {{retrieve}} her. Lancel follows one of Cersei's spies beneath the Sept, and finds a wildfire cache about to explode. He is stabbed in the spine before he can disarm <b>the</b> <b>cache.</b> Inside the Sept, Margaery Tyrell, realizing that Cersei has set a trap, warns the crowd to leave, but the High Sparrow prevents anyone from leaving. The wildfire ignites and destroys the Great Sept, killing everyone inside. King Tommen Baratheon witnesses the explosion from the Red Keep and commits suicide by jumping out a window.|$|E
5|$|Both serials were {{promptly}} {{released on}} iTunes, with DVD releases following {{over the next}} few months. Both on the iTunes and the DVD release, episode 3 of The Web of Fear was represented by a tele-snap reconstruction, edited by John Kelly. Episode 3 {{had been part of the}} same find, but by the end of protracted negotiations for the return of the film cans, the episode had disappeared from <b>the</b> <b>cache,</b> with the presumption that it was sold to a private collector.|$|E
5|$|Concurrent {{highways}} I-15/84 continue south, {{parallel to}} rail {{belonging to the}} Union Pacific Railroad (UP) past the Wellsville Mountain Wilderness, to an interchange at 1100West in Brigham City, also known as US-91, which once in Brigham City becomes concurrent with US-89 and the two highways travel northeast from Brigham City into Box Elder Canyon towards Logan {{in the heart of}} <b>the</b> <b>Cache</b> Valley. US-89 closely parallels I-15/84 east,as the highways pass Willard Bay, the Willard Bay State Park and Bear River Migratory Bird Refuge before crossing into Weber County.|$|E
40|$|We {{consider}} wireless <b>caches</b> {{placed in}} <b>the</b> plane {{according to a}} homogeneous Poisson process. A data file is stored at <b>the</b> <b>caches,</b> which have limited storage capabilities. Clients can contact <b>the</b> <b>caches</b> to retrieve <b>the</b> data. <b>The</b> <b>caches</b> store <b>the</b> data {{according to one of}} the two data allocation strategies: partitioning & coding. We consider the Pareto front of the expected deployment cost of <b>the</b> <b>caches</b> and <b>the</b> expected cost of a client retrieving the data from <b>the</b> <b>caches.</b> More precisely, we investigate their Pareto front. We show that there is a strong trade-off between the expected retrieval and the expected deployment cost under the partitioning and the coding strategies...|$|R
40|$|Abstract—We {{consider}} wireless <b>caches</b> {{placed in}} <b>the</b> plane {{according to a}} homogeneous Poisson process. A data file is stored at <b>the</b> <b>caches,</b> which have limited storage capabilities. Clients can contact <b>the</b> <b>caches</b> to retrieve <b>the</b> data. <b>The</b> <b>caches</b> store <b>the</b> data {{according to one of}} the two data allocation strategies: partitioning & coding. We consider the Pareto front of the expected deployment cost of <b>the</b> <b>caches</b> and <b>the</b> expected cost of a client retrieving the data from <b>the</b> <b>caches.</b> We show that there is a strong trade-off between the expected retrieval and the expected deployment cost under the partitioning and the coding strategies. We also show that under coding, it is optimal to deploy a high number of caches, each with low storage capacity. Index Terms—Wireless communication, networks of caches, coding, cost optimization I...|$|R
50|$|These {{coherency}} {{states are}} maintained through communication between <b>the</b> <b>caches</b> and <b>the</b> backing store. <b>The</b> <b>caches</b> have different responsibilities when blocks are read or written, {{or when they}} learn of other caches issuing reads or writes for a block.|$|R
5|$|The {{status of}} one bird on the North American list, the ivory-billed woodpecker, is controversial. Until 2005 this bird was widely {{considered}} to be extinct. In April of that year, {{it was reported that}} at least one adult male bird had been sighted in <b>the</b> <b>Cache</b> River National Wildlife Refuge in Arkansas. This report however, has not been universally accepted, and the American Birding Association still lists the ivory-billed woodpecker as extinct.|$|E
5|$|In September 2013, an {{outbreak}} of a mutant Cordyceps fungus ravages the United States, transforming its human hosts into cannibalistic monsters known as infected. In the suburbs of Austin, Texas, Joel (Troy Baker) flees the chaos with his brother Tommy (Jeffrey Pierce) and daughter Sarah (Hana Hayes). As they flee, Sarah is shot by a soldier and dies in Joel's arms. In the twenty years that follow, most of civilization is destroyed by the infection. Survivors live in heavily policed quarantine zones, independent settlements, and nomadic groups. Joel works as a smuggler with his partner Tess (Annie Wersching) in the quarantine zone in the North End of Boston, Massachusetts. They hunt down Robert (Robin Atkin Downes), a black-market dealer, to recover a stolen weapons cache. Before Tess kills him, Robert reveals that he traded <b>the</b> <b>cache</b> with the Fireflies, a rebel militia opposing the quarantine zone authorities.|$|E
5|$|The NCVP is {{underlain}} by {{four large}} crustal fragments, namely Stikinia, Yukon-Tanana, Cassiar and Cache Creek. Stikinia comprises volcanic, plutonic and sedimentary rocks that {{were created in}} an island arc environment during the Paleozoic and Mesozoic eras. Mélange and abyssal peridotites, formed largely in an ancient oceanic basin, are the primary rocks of <b>the</b> <b>Cache</b> Creek Terrane. These are also Paleozoic to Mesozoic in age and are intersected by younger granitic intrusions. Yukon-Tanana and Cassiar consist of sedimentary and metamorphic rocks derived from the North American continent. The rocks of these two terranes are displaced and autochthonous in nature.|$|E
40|$|The {{objective}} {{of this paper is}} to improve the use of the hardware resources of <b>the</b> trace <b>cache</b> mechanism, reducing <b>the</b> implementation cost with no performance degradation, eliminating trace and basic block replication. Two previous works approach a cost reduction for <b>the</b> trace <b>cache.</b> <b>The</b> software trace <b>cache</b> is a code reordering scheme which builds as many traces at compile-time as possible. This increases the performance of the core fetch unit, providing traces from <b>the</b> instruction <b>cache,</b> and obtaining similar or better performance with less trace <b>cache</b> storage space. <b>The</b> block-based trace <b>cache</b> is a hardware alternative to <b>the</b> trace <b>cache</b> targeting an elimination of the basic block redundancy among the stored traces. <b>The</b> trace <b>cache</b> used together with <b>the</b> software trace <b>cache</b> are generating a high degree of redundancy between the traces stored in <b>the</b> trace <b>cache</b> and those present in <b>the</b> instruction <b>cache.</b> Also, <b>the</b> block-based trace <b>cache</b> introduces a high degree of fragmentation wit [...] ...|$|R
2500|$|During read {{streaming}} {{into the}} CPU, a custom prefetch instruction, extended data cache block touch (xDCBT) prefetches data directly to <b>the</b> L1 data <b>cache</b> of <b>the</b> intended core, which skips putting {{the data in}} <b>the</b> L2 <b>cache</b> to avoid thrashing <b>the</b> L2 <b>cache.</b> Writes streaming from each core skip <b>the</b> L1 <b>cache,</b> due to its no-write allocation (avoids thrashing of high-bandwidth, transient, write-only data streams on <b>the</b> L1 <b>cache),</b> and goes directly to <b>the</b> L2 <b>cache.</b>|$|R
50|$|Initially {{we assume}} that all <b>the</b> <b>caches</b> are empty.Note: <b>The</b> term {{snooping}} referred to below is a protocol for maintaining cache coherency in symmetric multiprocessing environments. All <b>the</b> <b>caches</b> on <b>the</b> bus monitor(snoop) the bus {{if they have a}} copy of the block of data that is requested on the bus.|$|R
5|$|Where the two chough species occur together, {{there is}} only limited {{competition}} for food. An Italian study showed that the vegetable part of the winter diet for the red-billed chough was almost exclusively Gagea bulbs, whilst the Alpine chough took berries and hips. In June, red-billed choughs fed on Lepidoptera larvae whereas Alpine choughs ate cranefly pupae. Later in the summer, the Alpine chough mainly consumed grasshoppers, whilst the red-billed chough added cranefly pupae, fly larvae and beetles to its diet. Both choughs will hide food in cracks and fissures, concealing <b>the</b> <b>cache</b> with a few pebbles.|$|E
5|$|At first Chitty-Chitty-Bang-Bang {{is just a}} big and {{powerful}} car, but as the book progresses the car surprises the family by beginning to exhibit independent actions. This first happens while the family is caught in a traffic jam {{on their way to}} the beach for a picnic. The car suddenly instructs Commander Pott to pull a switch which causes Chitty-Chitty-Bang-Bang to sprout wings and take flight over the stopped cars on the road. Commander Pott flies them to Goodwin Sands in the English Channel where the family picnics, swims, and sleeps. While the family naps, the tide comes in threatening to drown them. Chitty-Chitty-Bang-Bang wakes them just in time with a hiss of steam. At the car's direction, Commander Pott pulls another switch which causes it to transform into a hovercraft-like vehicle. They make for the French coast and land on a beach near Calais. They explore along the beach and find a cave boobytrapped with some devices intended to scare off intruders. At the back of the cave is a store of armaments and explosives. The family detonates <b>the</b> <b>cache</b> of explosives and flees the cave.|$|E
5|$|In the summer, the Alpine chough feeds {{mainly on}} {{invertebrates}} collected from pasture, such as beetles (Selatosomus aeneus and Otiorhynchus morio {{have been recorded}} from pellets), snails, grasshoppers, caterpillars and fly larvae. The diet in autumn, winter and early spring becomes mainly fruit, including berries such as the European Hackberry (Celtis australis) and Sea-buckthorn (Hippophae rhamnoides), rose hips, and domesticated crops such as apples, grapes and pears where available. It has been observed eating flowers of Crocus vernus albiflorus, including the pistils, perhaps {{as a source of}} carotenoids. The chough will readily supplement its winter diet with food provided by tourist activities in mountain regions, including ski resorts, refuse dumps and picnic areas. Where additional food is available, winter flocks are larger and contain a high proportion of immature birds. The young birds principally frequent the sites with the greatest food availability, such as refuse dumps. Both chough species will hide food in cracks and fissures, concealing <b>the</b> <b>cache</b> with a few pebbles.|$|E
50|$|<b>The</b> {{lower level}} <b>caches</b> L2 and L3 are {{accessed}} {{only when there}} is a miss in <b>the</b> L1 <b>cache</b> implies <b>the</b> frequency of access to <b>the</b> lower level <b>caches</b> is less compared to <b>the</b> L1 <b>cache.</b> Therefore, <b>the</b> unified organization is implemented in <b>the</b> lower level <b>caches</b> as having a single port will suffice.|$|R
50|$|The level 1 (L1) caches {{each have}} a {{capacity}} of 128 KB. They are both two-way set associative and have 64-byte line size. They are virtually indexed and physically tagged. <b>The</b> instruction <b>cache</b> is accessed via a 256-bit bus. <b>The</b> data <b>cache</b> is accessed with two 128-bit buses. <b>The</b> data <b>cache</b> consists of eight banks separated by 32-bit boundaries. It uses a write-back policy. <b>The</b> data <b>cache</b> writes to <b>the</b> L2 <b>cache</b> with its own 128-bit unidirectional bus.|$|R
50|$|Multi-level caches can be {{designed}} in various ways {{depending on whether the}} content of one cache is present in other level of caches. If all blocks in <b>the</b> higher level <b>cache</b> are also present in <b>the</b> lower level <b>cache,</b> then <b>the</b> lower level <b>cache</b> is said to be inclusive of <b>the</b> higher level <b>cache.</b> If <b>the</b> lower level <b>cache</b> contains blocks that are not present in <b>the</b> higher level <b>cache,</b> then <b>the</b> lower level <b>cache</b> is said to be exclusive of <b>the</b> higher level <b>cache.</b> If <b>the</b> contents of <b>the</b> lower level <b>cache</b> are neither strictly inclusive nor exclusive of <b>the</b> higher level <b>cache,</b> then it is called non-inclusive non-exclusive (NINE) cache.|$|R
5|$|When US-89 {{was created}} in 1926, it only went {{as far north as}} Spanish Fork, where {{travelers}} could continue to Salt Lake City via US-91. The highway was extended north to the Canada–US border near Glacier National Park in the mid-1930s, though a dispute between Utah and Idaho on the one side and Wyoming on the other was not settled until 1938. The American Association of State Highway Officials decided in favor of Utah and Idaho, placing US-89 on or near US-91 between Spanish Fork and Logan, where it split northeasterly to Yellowstone National Park. (US-89 only left US-91 twice: between Farmington and Ogden, where it still travels today, and via an all-weather route from Brigham City into <b>the</b> <b>Cache</b> Valley, now SR-38 and SR-30.) Wyoming's preferred routing, which left US-91 at Provo, instead became US-189. Beginning in the 1950s, Interstate 15 was constructed, replacing US-91 for through traffic south of Brigham City, and leading to that route's truncation there in 1974. On the other hand, US-89 follows independent corridors south of Spanish Fork and north of Logan. It has not been truncated, and mostly follows US-91's final alignment, except between Farmington and Ogden (where old US-91 is now I-15, SR-126, and SR-26).|$|E
5|$|Fran {{once lived}} with her sisters Jote and Mjrn in Eruyt Village, the secluded Viera {{settlement}} in Golmore Jungle, but became restless and desired to see the outside world. This was {{a major source of}} conflict between her and the other viera, especially her elder sister Jote, who served as the village matriarch. Fran argued that although all Viera begin their lives in the forest, they are not necessarily bound to remain there to the end. When the party encounters an impassable Viera barrier on the path through Golmore, Fran is forced to return to the village and ask for help. She learns from Jote that their youngest sister Mjrn has run off to the nearby magicite mines. When Fran finds her and brings her back, Mjrn reveals she wishes to leave Golmore, but Fran advises her against doing so, relating how her own independence has cost her her family and the ability to commune with the Wood. Fran accepts that she is now part of the Hume world, and asks for a confirmation from Jote that the Wood accepts her before she leaves. Jote replies that The Wood misses her child and is jealous of the hume that has taken her away. Fran smiles {{for the first time in}} the game, knowing her sister is lying and still cares for her, as she leaves The Wood for good. In Revenant Wings, Balthier and Fran are searching for <b>the</b> <b>Cache</b> of Glabados. Fran was voiced by Nicole Fantl in English and by Rika Fukami in Japanese. She also appears in Itadaki Street Portable.|$|E
5|$|US-89 {{meets the}} current {{alignment}} of US-91 {{in the southern}} outskirts of Brigham City, turning east for an overlap on the city's southeast bypass. (SR-13 and SR-90 are the former alignment through Brigham City.) The two routes head east up Box Elder Canyon in the southern Wellsville Mountains, finally leaving {{the valley of the}} Great Salt Lake into a small valley that contains Mantua Reservoir (elevation 5200 feet/1585 m). US-89/US-91 turns north there, bypassing the town of Mantua to the west, and continues to ascend through Dry Canyon to Sardine Summit (elevation 5900 feet/1798 m). Another small valley leads to Wellsville Canyon, where the four-lane roadway again turns east and descends into <b>the</b> <b>Cache</b> Valley. In that valley, US-89/US-91 heads northeast, bypassing Wellsville to the east, into downtown Logan. US-91 continues northerly from Logan into Idaho, but US-89 splits to the east, beginning a long climb of the Bear River Range through Logan Canyon. The Logan Canyon Scenic Byway, a Utah and National Scenic Byway, begins at Logan and follows US-89 up the canyon, past the access road to the Beaver Mountain ski area, to Garden City and on to the state line. Bear Lake Summit (elevation 7800ft/2377 m), {{at the top of the}} range, is the highest point on US-89 in Utah, from which it descends the east slope via horseshoe curves to Garden City on the shore of Bear Lake (elevation 5900ft/1798 m). The final segment of US-89 to the Idaho state line follows the lake's west shore, its location constrained by the Bear River Range just to the west.|$|E
40|$|While set-associative caches incur fewer misses than directmapped caches, they {{typically}} have slower hit times and higher power consumption, when multiple tag and data banks are probed in parallel. This paper presents <b>the</b> location <b>cache</b> structure which significantly reduces the power consumption for large setassociative caches. We propose {{to use a}} small cache, called location <b>cache</b> to store <b>the</b> location of future cache references. If there is a hit in <b>the</b> location <b>cache,</b> <b>the</b> supported <b>cache</b> is accessed as a direct-mapped <b>cache.</b> Otherwise, <b>the</b> supported <b>cache</b> is referenced as a conventional set-associative <b>cache.</b> <b>The</b> worst case access latency of <b>the</b> location <b>cache</b> system is <b>the</b> {{same as that of}} a conventional <b>cache.</b> <b>The</b> location <b>cache</b> is virtually indexed so that operations on it can be performed in parallel with the TLB address translation. These advantages make it ideal for L 2 cache systems where traditional way-predication strategies perform poorly. We used <b>the</b> CACTI <b>cache</b> model to evaluate the power consumption and access latency of proposed cache architecture. Simplescalar CPU simulator was used to produce final results. It is shown that <b>the</b> proposed location <b>cache</b> architecture is powerefficient. In <b>the</b> simulated <b>cache</b> configurations, up-to 47 % of cache accessing energy and 25 % of average cache access latency can be reduced...|$|R
5000|$|... listing {{statistics}} on <b>the</b> <b>caches</b> for frequently-used {{objects in the}} Linux kernel ...|$|R
40|$|The {{objective}} {{of this paper is}} to improve the use of the hardware resources of <b>the</b> trace <b>cache</b> mechanism, reducing <b>the</b> implementation cost with no performance degradation. We achieve that by eliminating the replication of traces between <b>the</b> instruction <b>cache</b> and <b>the</b> trace <b>cache.</b> As we show, <b>the</b> trace <b>cache</b> mechanism is generating a high degree of redundancy between the traces stored in <b>the</b> trace <b>cache</b> and those built by the compiler, already present in <b>the</b> instruction <b>cache.</b> Furthermore, code reordering techniques like <b>the</b> software trace <b>cache</b> arrange <b>the</b> basic blocks in a program so that the fall-through path is the most common, effectively increasing this trace redundancy. We propose selective trace storage to avoid trace redundancy between <b>the</b> trace <b>cache</b> and <b>the</b> instruction <b>cache.</b> A simple modification of the fill unit allows <b>the</b> trace <b>cache</b> to store only those traces containing taken branches, which can nor be obtained in a single cycle from <b>the</b> instruction <b>cache.</b> Our results show that selective trace storage and <b>the</b> software trace <b>cache</b> used on a 32 entry trace cache (2 KB) perform as well as a 2048 entry trace cache (128 KB) without the enhancements. This shows that the cooperation between hardware and software is crucial to improve the performance and reduce the requirements of hardware mechanisms in the fetch engine. Peer ReviewedPostprint (published version...|$|R
25|$|Prior to IE7, {{clearing}} <b>the</b> <b>cache</b> used {{to clear}} the index but the files themselves were not reliably removed, posing a potential security and privacy risk. In IE7 and later, when <b>the</b> <b>cache</b> is cleared, <b>the</b> <b>cache</b> files are more reliably removed, and the index.dat file is overwritten with null bytes.|$|E
25|$|Moreover, D {{algorithms}} can {{be designed}} for important algorithms (e.g., sorting, FFTs, and matrix multiplication) to be optimal cache-oblivious algorithms–they use <b>the</b> <b>cache</b> in a probably optimal way, in an asymptotic sense, regardless of <b>the</b> <b>cache</b> size. In contrast, the traditional approach to exploiting <b>the</b> <b>cache</b> is blocking, as in loop nest optimization, {{where the problem is}} explicitly divided into chunks of the appropriate size—this can also use <b>the</b> <b>cache</b> optimally, but only when the algorithm is tuned for the specific cache size(s) of a particular machine.|$|E
25|$|Divide-and-conquer {{algorithms}} naturally {{tend to make}} {{efficient use}} of memory caches. The reason is that once a sub-problem is small enough, it and all its sub-problems can, in principle, be solved within <b>the</b> <b>cache,</b> without accessing the slower main memory. An algorithm designed to exploit <b>the</b> <b>cache</b> {{in this way is}} called cache-oblivious, because it does not contain <b>the</b> <b>cache</b> size as an explicit parameter.|$|E
30|$|Cache policy design {{focuses on}} how to cache {{contents}} in cache-enabled mobile networks. It refers to different policies on caching insertion and caching eviction. Caching insertion policies decide whether to cooperate with other caching nodes and how contents or chunks {{can be stored in}} <b>the</b> <b>caches,</b> and caching eviction policies concern the dynamics of contents in <b>the</b> <b>caches.</b>|$|R
40|$|A {{group of}} web caches can be {{organized}} into a cooperative hierarchy where {{a search for}} a requested object is performed among <b>the</b> cooperating peer <b>caches</b> before <b>the</b> object request is sent to the origin web server. Such cooperation improves the overall hit ratio but introduces the overhead of an additional step in request processing as well as additional workload on <b>the</b> <b>caches</b> and more traffic in the network. The main goal of cooperation is to improve the response time observed by clients, but the result can be the opposite, if, e. g., the network between <b>the</b> <b>caches</b> is very busy. In this paper, we present an Adaptive Hierarchy Management System to dynamically configure a hierarchy of caches based on existing conditions, without human intervention. The system consists of a centralized controller and distributed agents installed on <b>the</b> <b>caches.</b> <b>The</b> agents collect and report information on <b>cache</b> usage. <b>The</b> controller monitors the underlying network and determines the best hierarchy based on cache and network information. The new hierarchy is then broadcast to all agents. The agents deploy the new hierarchy by reconfiguring <b>the</b> <b>caches.</b> <b>The</b> optimal hierarchy is based on the available bandwidth on the links between <b>the</b> <b>caches</b> and <b>the</b> inter-cache hit ratio. The system was validated by processing web traces on a Squid cache hierarchy. Performance improvement of up to 30 % was observed with an adaptive hierarchy under varying network conditions...|$|R
30|$|However, picoJava {{implements}} a 64 -word stack buffer as discrete registers. Spill {{and fill}} of that stack buffer is performed in background by the hardware. Therefore, the stack buffer closely interacts with <b>the</b> data <b>cache.</b> <b>The</b> interference between the folding unit, the instruction buffer, <b>the</b> instruction <b>cache,</b> <b>the</b> stack buffer, <b>the</b> data <b>cache,</b> and <b>the</b> memory interface causes complications in modeling picoJava for WCET analysis.|$|R
25|$|The {{portion of}} highway between <b>the</b> <b>Cache</b> Wye and Cache itself was renumbered {{to become part}} of SH-115 in 1962. The same year, the portion of road leading west from <b>the</b> <b>Cache</b> Wye to SH-54 was added to the highway, {{bringing}} it to its present-day extent. At this time, the road between SH-54 and <b>the</b> <b>Cache</b> Wye was gravel. It was paved in 1973.|$|E
25|$|In this case, the {{included}} link points, {{not to a}} client IP or direct source, but to a source cache which stores the IPs of other clients contacting it to download the same file. Once a client connects to <b>the</b> <b>cache,</b> it is served IPs for alternate sources, while its own IP is stored within <b>the</b> <b>cache</b> and forwarded {{to the next one}} connecting to <b>the</b> <b>cache.</b> This system operates similar to a BitTorrent tracker.|$|E
25|$|Additionally, Opencaching sites allow {{users to}} rate and report on {{existing}} geocaches. This {{allows users to}} see what other cachers think of <b>the</b> <b>cache</b> and it encourages participants to place higher quality caches. The rating system also greatly reduces the problem of abandoned or unsatisfactory caches still being listed after repeated negative comments or posts in <b>the</b> <b>cache</b> logs.|$|E
50|$|In {{order to}} simplify logging of GeoKrety, <b>the</b> website fetches <b>cache</b> {{information}} (like a waypoint name, coordinates, description) from many popular geocaching services. For fully supported services, only a GeoKret's Tracking Code (printed in the label) and <b>the</b> <b>cache's</b> waypoint are required, as all other data (like <b>the</b> <b>cache's</b> title and coordinates) are completed automatically. As of 8 January 2012, there were 665997 waypoints (with full <b>cache</b> information) in <b>the</b> geokrety.org database.|$|R
5000|$|... #Caption: Incoherent caches: <b>The</b> <b>caches</b> have {{different}} {{values of a}} single address location.|$|R
40|$|Cost-effective {{cooperation}} among {{a network of}} edge caches is widely accepted as an effective mechanism for enhancing the scalability, performance, and reliability of edge <b>cache</b> networks. However, <b>the</b> {{problem of how to}} form cache groups for achieving effective and efficient cooperation in edge cache networks has largely been unexplored. In this paper, we identify two important factors that need to be considered while forming cooperative groups, namely, network proximities of edge caches and network distances of <b>the</b> <b>caches</b> to <b>the</b> origin server. We propose two novel cache clustering schemes for accurately partitioning <b>the</b> <b>caches</b> of a given edge cache network into specified number of <b>cache</b> groups. <b>The</b> first scheme, called the Selective Landmarks scheme (SL scheme), accurately partitions <b>the</b> edge <b>cache</b> network into cooperative groups based on the network proximities of <b>the</b> <b>caches.</b> <b>The</b> second <b>cache</b> group formation scheme, called Server Distance sensitive Selective Landmarks scheme (SDSL scheme), provides a careful combination network proximities and server distances. Our experiments indicate that the proposed techniques can yield significant performance benefits. ...|$|R
