225|108|Public
5000|$|Client-server {{model of}} {{distributed}} computing using <b>three-tier</b> <b>architecture</b> ...|$|E
50|$|DotNetNuke uses a <b>three-tier</b> <b>architecture</b> {{model with}} a core {{framework}} providing support to the extensible modular structure.|$|E
50|$|The legacy three-tier DCN {{architecture}} {{follows a}} multi-rooted tree based network topology composed of three layers of network switches, namely access, aggregate, and core layers. The servers {{in the lowest}} layers are connected directly {{to one of the}} edge layer switches. The aggregate layer switches interconnects multiple access layer switches together. All of the aggregate layer switches are connected to each other by core layer switches. Core layer switches are also responsible for connecting the data center to the Internet. The three-tier is the common network architecture used in data centers. However, <b>three-tier</b> <b>architecture</b> is unable to handle the growing demand of cloud computing. The higher layers of the three-tier DCN are highly oversubscribed. Moreover, scalability is another major issue in three-tier DCN. Major problems faced by the <b>three-tier</b> <b>architecture</b> include, scalability, fault tolerance, energy efficiency, and cross-sectional bandwidth. The <b>three-tier</b> <b>architecture</b> uses enterprise-level network devices at the higher layers of topology that are very expensive and power hungry.|$|E
40|$|An e-Transaction is {{one that}} executes exactly-once despite failures. This paper {{describes}} a distributed protocol that implements the abstraction of e-Transactions in <b>three-tier</b> <b>architectures.</b> <b>Three-tier</b> <b>architectures</b> are typically Internet-oriented architectures, where the end-user interacts with front-end clients (e. g., browsers) that invoke middle-tier application servers (e. g., web servers) to access back-end databases. We implement the e-Transaction abstraction using an asynchronous replication scheme that preserves the three-tier nature of the architecture and introduces a very acceptable overhead with respect to unreliable solutions. ...|$|R
40|$|<b>Three-Tier</b> <b>Architectures</b> enable {{software}} {{systems to}} deploy functionality on the networkArchitectural Foundation � For this purpose, {{we need an}} architecture that � supports a remote method invocation paradigm � provides location transparency � allows to add, exchange, or remove services dynamically � hides system details from the developerBroker Architecture...|$|R
40|$|International audienceInnovative {{machine-to-machine}} infrastructures {{have been}} recently defined to integrate IT applications and industrial applications. Many {{of them are}} based on Service-Oriented architectures. In this paper, we focus on <b>three-tier</b> <b>architectures</b> including OSGi gateways to connect field devices and the Internet. We present a deployment manager automating {{as much as possible}} the deployment operations...|$|R
50|$|In {{software}} engineering, multitier architecture (often {{referred to}} as n-tier architecture) or multilayered architecture is a client-server architecture in which presentation, application processing, and data management functions are physically separated. The most widespread use of multitier architecture is the <b>three-tier</b> <b>architecture.</b>|$|E
5000|$|The framework's {{architecture}} {{is based on}} the multi-tier architecture model for the development of software systems. Building on a <b>three-tier</b> <b>architecture</b> and following the dependency inversion principle JVx allows for easy development of efficiently maintained applications. The framework provides full support for all tiers.|$|E
50|$|Tryton is a three-tier {{high-level}} {{general purpose}} computer application platform on top of which is built an Enterprise resource planning (ERP) business solution {{through a set of}} Tryton modules.The <b>three-tier</b> <b>architecture</b> consists of the Tryton client, the Tryton server and the Database management system (mainly PostgreSQL).|$|E
40|$|Innovative {{machine-to-machine}} infrastructures {{have been}} recently defined to integrate IT applications and industrial applications. Many {{of them are}} based on Service-Oriented architectures. In this paper, we focus on <b>three-tier</b> <b>architectures</b> including OSGi gateways to connect field devices and the Internet. We present a deployment manager automating {{as much as possible}} the deployment operations. Key words: Service-oriented architectures, service deployment, OSGi gateways, power distribution. 1...|$|R
40|$|When {{designing}} {{distributed applications}} for enterprise information systems {{you have to}} decide how to distribute application functionality or responsibility between distributed processing contexts in order to optimize the usage of components and resources involved. The <b>three-tier</b> distribution <b>architecture</b> describes the partitioning of your application functionality into three tiers: front-end clients, domain or application servers, and a storage and DB-server. Name <b>Three-Tier</b> Distribution <b>Architecture</b> Aliases <b>Three-Tier</b> Client/Server <b>Architecture</b> Balanced Client/Server Architecture Context You have to design applications for distributed enterprise information systems where usually some desktop components will access or modify shared resources, mostly located within a non-active database. Problem How can you partition application functionality or responsibility between distributed processing contexts best in order to optimize the usage of components and resources involved? Forces Yo [...] ...|$|R
50|$|The DCell {{exhibits}} {{very high}} robustness against random and targeted attacks and retains {{most of its}} node in the giant cluster after even 10% of targeted failure. multiple failures whether targeted or random, {{as compared to the}} fat tree and three-tier DCNs. One of the major reasons for high robustness and connectivity of the DCell is its multiple connectivity to other nodes that is not found in fat tree or <b>three-tier</b> <b>architectures.</b>|$|R
50|$|Apart {{from the}} usual {{advantages}} of modular software with well-defined interfaces, the <b>three-tier</b> <b>architecture</b> is intended to allow {{any of the three}} tiers to be upgraded or replaced independently in response to changes in requirements or technology. For example, a change of operating system in the presentation tier would only affect the user interface code.|$|E
50|$|N-tier {{application}} architecture provides a model by which developers can create flexible and reusable applications. By segregating an application into tiers, developers acquire {{the option of}} modifying or adding a specific layer, instead of reworking the entire application. A <b>three-tier</b> <b>architecture</b> is typically composed of a presentation tier, a domain logic tier, and a data storage tier.|$|E
50|$|<b>Three-tier</b> <b>architecture</b> is a {{client-server}} {{software architecture}} pattern {{in which the}} user interface (presentation), functional process logic ("business rules"), computer data storage and data access are developed and maintained as independent modules, most often on separate platforms. It was developed by John J. Donovan in Open Environment Corporation (OEC), a tools company he founded in Cambridge, Massachusetts.|$|E
40|$|Abstract: E-Learning 2. 0 uses Web 2. 0 {{tools for}} e-learning. New {{services}} on the Internet can be swiftly integrated into existing applications; students can create MashUps, for instance, {{using a variety}} of services on the Internet. The main risk {{comes from the fact that}} students and teachers are not entirely aware that their institution does not control these services. The servers are located in a variety of countries, thus privacy laws also differ. In addition, as most Web applications are built as <b>three-tier</b> <b>architectures,</b> typical security weaknesses exist, such as invalid input, a lack of server-side checks, and excessive privileges...|$|R
30|$|Combining {{the storage}} {{advantages}} of fixed equipments and mobile terminals in ultra-dense environment, we model a <b>three-tier</b> heterogeneous <b>architecture</b> to distribute data. Furthermore, we introduce {{the concept of}} many-to-one D 2 D communication in the user layer.|$|R
40|$|DBMS {{technology}} is evolving to manage {{not only the}} data features of the domain but also the behavioral characteristics as illustrated by object-oriented and active DBMS. In spite of the ongoing evolution of DBMS, Entity/Relationship techniques are still widely used without substantial changes since they were initially conceived. E/R schemas as conceptual models, are clearly lacking a behavioral counterpart. This paper proposes the notion of stimulus as the driving force that guide {{the whole process of}} database application development. The paper addresses how stimuli can be identified and described during analysis, and how this definition is refined during design and implementation. An example is used throught the paper to illustrate these ideas. Keywords: Database modeling, <b>Three-tier</b> <b>architectures...</b>|$|R
5000|$|In three-tier organization, {{applications}} are structured around three physical tiers: client, application, and database. The database is normally an RDBMS. The application contains the business logic, {{running on a}} server and communicates with the client using HTTP. The client on web applications is a web browser that runs HTML generated by the application layer. The term {{should not be confused}} with MVC, where, unlike in <b>three-tier</b> <b>architecture,</b> it is considered a good practice to keep business logic away from the controller, the [...] "middle layer".|$|E
5000|$|The {{end-to-end}} traceability of data {{flows through}} n-tier systems is a challenging task which {{becomes more important}} when systems increase in complexity. The Application Response Measurement defines concepts and APIs for measuring performance and correlating transactions between tiers. Generally, the term [...] "tiers" [...] is used to describe physical distribution of components of a system on separate servers, computers, or networks (processing nodes). A <b>three-tier</b> <b>architecture</b> then will have three processing nodes. The term [...] "layers" [...] refer to a logical grouping of components {{which may or may}} not be physically located on one processing node.|$|E
50|$|GO-Global is a {{server-based}} computing {{product that}} can, among other things, provide two-tier, client-server applications {{with many of}} the benefits of a <b>three-tier</b> <b>architecture,</b> or cloud computing (server-based computing). With GO-Global, users can connect to applications remotely — from offices, homes, from the road, or anywhere Internet or dial-up connectivity is available. Applications are installed on a central server, but look and feel like the natively-run, locally installed application. Local and remote users can log on to their company’s server and have secure access to all the applications and data they use at work, including email, office productivity suites, management applications, and custom software.|$|E
40|$|Current web {{database}} connectivity solutions lack {{an object}} oriented architecture for Java applications. In particular, Java is object oriented and most legacy databases are relational. This thesis proposes a {{design and implementation}} of an object oriented Java database class hierarchy for relational database interfaces. The work reported here consists of: (1) analysis of Java Database Connectivity specification, (2) discussion of two-tier and <b>three-tier</b> <b>architectures</b> for database systems, (3) mapping of relation database structure to an object model, and (4) development of a Java based framework to exercise the JDBC interfaces. This work provides: (1) an object model for the relational database; (2) Integration with a middleware application for network connectivity; and (3) A Java application client to support SQL access and manipulation[URL]...|$|R
40|$|The {{synchronization}} among thin, {{independent and}} concurrent processes {{in an open}} distributed system is a fundamental issue in current architectures (e. g. middlewares, <b>three-tier</b> <b>architectures</b> etc.). "Independent process" means no message has to be exchanged among the processes to synchronize themselves and "open" means {{that the number of}} processes that require to synchronize changes along the time. In this paper we present the specification of a sequencer service that allows independent processes to get a sequence number {{that can be used to}} label successive operations (e. g. to allow a set of independent and concurrent processes to get a total order on these labelled operations). Moreover, we propose an implementation of the sequencer service in the timed asynchronous model along with its correctness proof...|$|R
40|$|Introduction History In {{the early}} days of Database technology, there were datastores and users, and the users interacted {{directly}} with the datastores. This quickly became unworkable, and the Database industry developed the Client/Server Architecture. In this architecture, the users run client applications which talk directly to the DBMS server. These systems allowed a divers set of applications to be written which communicate with the DBMS, thus providing flexibility to the users of the data [1]. As businesses grew larger and grew to depend on their DBMSs for more and more business functionality, even the Client/Server architecture began to have shortcomings appear. More and more business logic was being coded into the various applications and the need for this logic to be centralized arose. This brought about the evolution of the <b>three-tier</b> <b>architectures,</b> where a middle layer server incorporating the business logic of the organization acts as a go-between for the use...|$|R
50|$|Though Infinity died, in 1996, {{with the}} dream of the toolkit that was {{expected}} to model any innovation a financial engineer could have designed, the other systems are still well and alive in trading rooms. Born during the same period, they share many technical features, such as a <b>three-tier</b> <b>architecture,</b> whose back-end runs on a Unix platform, a relational database on either Sybase or Oracle, and a graphical user interface written in English, since their clients are anywhere in the world. Deal capture of transactions by traders, position-keeping, measure of market risks (interest-rates and foreign exchange), calculation of Profit & Loss (P&L), per desk or trader, control of limits set per counterparty, are the main functionalities delivered by these systems.|$|E
50|$|To combat {{this and}} other problems, testers have gone ‘under the hood’ and {{collected}} GUI interaction data from the underlying windowing system. By capturing the window ‘events’ into logs the interactions with the system {{are now in a}} format that is decoupled from the appearance of the GUI. Now, only the event streams are captured. There is some filtering of the event streams necessary since the streams of events are usually very detailed and most events aren’t directly relevant to the problem. This approach can be made easier by using an MVC architecture for example and making the view (i. e. the GUI here) as simple as possible while the model and the controller hold all the logic. Another approach is to use the software's built-in assistive technology, to use an HTML interface or a <b>three-tier</b> <b>architecture</b> that makes it also possible to better separate the user interface {{from the rest of the}} application.|$|E
40|$|AbstractThe researching aim of {{this paper}} is to explain the {{extended}} <b>three-tier</b> <b>architecture</b> system. It analyzes the differences of the <b>three-tier</b> <b>architecture</b> and extends <b>three-tier</b> <b>architecture</b> and explains its design process. Using the Web disk as the example, this paper discusses the functions of the data model, data factories, data layer, business layer and expands their development process, and finally analyzes the advantages of extended <b>three-tier</b> <b>architecture...</b>|$|E
40|$|In {{this paper}} we {{describe}} a software infrastructure that unifies replication and transaction processing in <b>three-tier</b> <b>architectures</b> and, thus, provides high availability and fault tolerance for enterprise applications. The infrastructure {{is based on}} the Fault Tolerant CORBA and CORBA Object Transaction Service standards, and works with commercial-off-the-shelf application servers and database systems. The infrastructure replicates the application servers to protect the business logic processing. In addition, it repli-cates the transaction coordinator, which renders the two-phase commit protocol non-blocking and, thus, avoids po-tentially long service disruptions caused by coordinator failure. The infrastructure handles the interactions between the application servers and the database servers through replicated gateways that prevent duplicate requests from reaching the database servers. The infrastructure imple-ments client-side automatic failover mechanisms, which guarantees that clients know the outcome of the requests that they have made. The infrastructure starts the transac-tions at the application servers, and retries aborted trans-actions, caused by process or communication failures, au-tomatically on the behalf of the clients. ...|$|R
40|$|It is well {{accepted}} that {{different types of}} distributed architectures require different degrees of coupling. For example, in client-server and <b>three-tier</b> <b>architectures,</b> application components are generally tightly coupled, both {{with one another and}} with the underlying middleware. Meanwhile, in off-line transaction processing, grid computing and mobile applications, the degree of coupling between application components and with the underlying middleware needs to be minimized. Terms such as ‘synchronous’, ‘asynchronous’, ‘blocking’, ‘non-blocking’, ‘directed’, and ‘non-directed’ are often used to refer to the degree of coupling required by an architecture or provided by a middleware. However, these terms are used with various connotations. Although various informal definitions have been provided, {{there is a lack of}} an overarching formal framework to unambiguously communicate architectural requirements with respect to (de-) coupling. This article addresses this gap by: (i) formally defining three dimensions of (de-) coupling; (ii) relating these dimensions to existing middleware; and (iii) proposing notational elements to represent various coupling integration patterns. This article also discusses a prototype that demonstrates the feasibility of its implementation...|$|R
40|$|This paper {{considers}} {{the provision of}} broadband wireless access (BWA) for users on the road. A Wi-Fi based system, which utilises a <b>three-tier</b> network <b>architecture,</b> is suggested as a readily available way of achieving BWA for road vehicles. However, {{the use of this}} approach and technology still poses a number of specific challenges. We identify and examine in greater depth a number of the challenges, and propose possible solutions to overcome them...|$|R
40|$|This master's thesis {{deals with}} analysis, design and {{implementation}} of an information system that allows easy extensibility with <b>three-tier</b> <b>architecture.</b>   System is developed using object oriented approach by programming language PHP, relational database server MySQL and web services and protocol SOAP. The View tier is implemented by web technologies XHTML and CSS. Analysis and design of this system is done with using the modeling language UML.     In this thesis is described the problem of multi-tier software architecture, theory of development information's systems and described {{design and implementation}} of an information system with a <b>three-tier</b> <b>architecture</b> and it's application in the society SDC...|$|E
40|$|Abstract—In {{the last}} few years, {{numerous}} multimedia archives have made extensive use of digitized storage and annotation technologies. Still, the development of single points of access, providing common and uniform access to their data, despite the efforts and accomplishments of standardization organizations, has remained an open issue as it involves the integration of various large-scale heterogeneous and heterolingual systems. This paper describes a mediator system that achieves architectural integration through an extended <b>three-tier</b> <b>architecture</b> and content integration through semantic modeling. The described system has successfully integrated five multimedia archives, quite different in nature and content from each other, while also providing easy and scalable inclusion of more archives in the future. Index Terms—Architectural integration, concept taxonomy, document analysis, mediator, message-oriented middleware, MPEG- 7, multimedia archives, semantic modeling, <b>three-tier</b> <b>architecture.</b> I...|$|E
40|$|In this paper, {{we propose}} an {{extended}} version of our component-based {{framework for the}} development of educational presentation systems. The improvement is the application of a <b>three-tier</b> <b>architecture.</b> In contrast to related work, the introduction of new multimedia types, their rendering and storage can be completely decoupled from the core system...|$|E
50|$|An {{appliance}} {{can be used}} on its own, or it can be part of a <b>three-tier</b> federated <b>architecture.</b> In {{this case}} the operator would configure zones, regions and a single super-region. Appliances can be assigned to a specific zone or region, and are configured with specific roles so that work is coordinated with the region. Most roles are multi-master and distribute workload automatically via a queue, but some roles like the database are master/slave.|$|R
50|$|CSA uses {{a two or}} <b>three-tier</b> {{client-server}} <b>architecture.</b> The Management Center 'MC' (or Management Console) {{contains the}} program logic; an MS SQL database backend is used to store alerts and configuration information; the MC and SQL database may be co-resident on the same system. The Agent is installed on the desktops and/or servers to be protected. The Agent communicates with the Management Center, sending logged events to the Management Center and receiving updates in rules when they occur.|$|R
40|$|Apex, an {{elaboration}} of the <b>three-tier</b> type <b>architecture</b> used successfully in many autonomy applications, is designed around {{the concept of}} modular reasoning and control services (RCSs) with response-time characteristics as a primary factor in module delineation. We believe this approach reflects a valuable synthesis of requirements from diverse missions types and systems, and avoids pitfalls commonly seen in autonomy architecture design. The paper presents {{an overview of the}} architecture, its design rationale and its deployment in Unmanned Aeria...|$|R
