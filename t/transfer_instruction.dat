9|102|Public
50|$|The 1973 Xerox Alto, {{where the}} term bit blit originated, {{had a bit}} block <b>transfer</b> <b>instruction</b> {{implemented}} in microcode, making it much faster than the same operation written on the CPU. The microcode was implemented by Dan Ingalls.|$|E
50|$|ICICI Bank UK PLC, Germany branch {{provides}} money {{transfer and}} tracking service (Money2India Europe, Money2India.EU) in 20 European countries. The platform facilitates money transfer to India by allowing remitter to initiate money <b>transfer</b> <b>instruction</b> on M2E. Depending {{on the country}} of residence and the financial institution with which the user is holding the bank account, he / she has an option to transfer money through payment gateway integrated with the platform—with guaranteed exchange rate.|$|E
50|$|Upon {{returning}} to the Philippine Embassy, the group calls Chairman Salonga and Congressman Cojuangco {{on the success of}} the Operation, and rushes to complete the required formal documents. Dr. Salvioni questions the urgency of the Filipino team, but was ignored and Ordoñez signed the request accordingly. The letter arrived at the FDJP with 15 minutes to spare before the 6:00 pm deadline. FDJP was to act on the request, and by Monday, July 7, have the Zurich Court execute a <b>transfer</b> <b>instruction</b> to the Swiss banks.|$|E
40|$|This study {{investigated}} ways to support young children’s STEM learning {{and ability to}} generalize their knowledge across informal learning experiences. Participants were 128 parents and their 4 - to 8 -year-old children (Mage = 6. 63, SD = 1. 38). Families {{were randomly assigned to}} receive engineering <b>instructions,</b> <b>transfer</b> <b>instructions,</b> both engineering and <b>transfer</b> <b>instructions,</b> or neither. They were then observed working together to solve an engineering problem, and immediately afterward, the children were invited to solve a second engineering problem on their own. Families who received engineering instructions – either alone or in combination with the <b>transfer</b> <b>instructions</b> - were more successful at solving the first engineering problem than those who received only <b>transfer</b> <b>instructions</b> or no instructions. Moreover, parents asked more open-ended questions and talked more about science and mathematics if they received both engineering and <b>transfer</b> <b>instructions.</b> Lastly, children who received both engineering and <b>transfer</b> <b>instructions</b> were better at solving the second engineering problem than those who received only one set of instructions or no instructions. Implications of the work for research in the field and for informal educational environments and their visitors are discussed...|$|R
5000|$|... {{international}} funds <b>transfer</b> <b>instructions,</b> either into {{or out of}} Australia, of any amount, and ...|$|R
30|$|Current Intel PT {{implementations}} record only control <b>transfer</b> <b>instructions</b> like conditional {{jumps and}} indirect function calls, and simply ignore all memory access events. Future Intel processor releases will reportedly include a new instruction named PTWRITE to insert software-defined value into the trace to enhance debuggers (Strong et al. 2015). As PTWRITE is still unavailable on current processor releases yet (Hunter 2017), DTrace emulates PTWRITE by encoding the memory data load and store events with control <b>transfer</b> <b>instructions</b> and synthesizes the events from the trace.|$|R
5000|$|The 10 PPs were {{implemented}} virtually; there was CPU hardware {{only for a}} single PP. This CPU hardware was shared and operated on 10 PP register sets which represented each of the 10 PP states (similar to modern multithreading processors). The PP register barrel would [...] "rotate", with each PP register set presented to the [...] "slot" [...] which the actual PP CPU occupied. The shared CPU would execute all or some portion of a PP's instruction whereupon the barrel would [...] "rotate" [...] again, presenting the next PP's register set (state). Multiple [...] "rotations" [...] of the barrel were needed to complete an instruction. A complete barrel [...] "rotation" [...] occurred in 1000 nanoseconds (100 nanoseconds per PP), and an instruction could take from 1 to 5 [...] "rotations" [...] of the barrel to be completed, or more {{if it was a}} data <b>transfer</b> <b>instruction.</b>|$|E
40|$|Part 2 : WorkshopInternational audienceBoth dynamic binary {{translation}} {{systems and}} optimization systems store the translated or optimized code {{in the software}} maintained code cache for reuse. The performance of the code cache is crucial. Translated code is usually organized as code blocks in the code cache and each code block transfer control {{to the next one}} through a control <b>transfer</b> <b>instruction.</b> As the target address of a control <b>transfer</b> <b>instruction</b> {{is in the form of}} its source program counter, the conventional code cache system has to check the address mapping table for the translated target address to find the required target code block, which will cause considerable performance degradation. Control transfer instructions can be divided into two categories as direct control transfer instructions and indirect control transfer instructions. For indirect control transfer instructions, the target address is hold in the register or memory element whose content can be changed during the execution of the program. It is difficult to chain the indirect control transfer instructions with a fixed translated target address through pure software approaches. A novel indirect control transfer chaining approach is proposed in this paper. The principle of the technique is to insert custom chaining instructions into the translated code block while translating the indirect control transfer instructions and execute those chaining instructions to implement dynamical chaining. Some special hardware and software assists are proposed in this paper. Evaluation of the proposed approach is conducted on a code cache simulator. Experiment results show that our hardware assisted indirect control <b>transfer</b> <b>instruction</b> chaining approach can improve the performance of the code cache system dramatically...|$|E
30|$|Marker {{verification}} A {{group of}} markers are verified {{together for a}} control <b>transfer</b> <b>instruction.</b> Since they have complete information for the control transfer, the same verification process can be performed {{regardless of whether they}} come from fragments or a whole code. Thus, we can use the code watchdogs, which monitor the wireless network to detect attacks from binary code fragments. The recipient devices also have a whole updated program binary code. The program binary code with semantics markers can be repeatedly checked in the software attestation process. To prevent the attacker from illegally generating semantics markers, the marker is protected by a key. We assume the key is shared with the payload generator, code watchdogs, and the recipient devices.|$|E
30|$|Intel PT records all {{control flow}} <b>transfer</b> <b>instructions</b> by default, which fill the Trace Buffer with large {{quantities}} of uninteresting packets to DTrace like conditional branch taken-not-taken. The irrelevant packets increase the burden of packet decoding {{and the number of}} interrupts for the Trace Buffer filling events.|$|R
50|$|CPU: 8-bit HuC6280A, a {{modified}} 65SC02 running at 1.79, or 7.16 MHz (switchable by software). Features integrated bankswitching hardware (driving a 21-bit {{external address bus}} from a 6502-compatible 16-bit address bus), an integrated general-purpose I/O port, a timer, block <b>transfer</b> <b>instructions,</b> and dedicated move instructions for communicating with the HuC6270A VDC.|$|R
50|$|Processors usually fetch {{instructions}} sequentially from memory, but control <b>transfer</b> <b>instructions</b> {{change the}} sequence {{by placing a}} new value in the PC. These include branches (sometimes called jumps), subroutine calls, and returns. A transfer that is conditional on the truth of some assertion lets the computer follow a different sequence under different conditions.|$|R
40|$|Past {{understanding}} of regulation effectiveness in securities market in China are limited on the phenomenon description, {{or on the}} effect of the penalties for non-compliance, and the existing literature commonly focus on comprehensive empirical analysis for regulation effectiveness in securities market. By the questionnaire survey toward regulators, fund companies, securities firms, listed companies, this paper carried on the overall evaluation for effectiveness of China's securities regulation as well as “The Listed Company Termination of the Restricted Stock Share <b>Transfer</b> <b>Instruction</b> Opinion ” issued by The Securities Regulatory Commission in China. The results show that all respondents to overall evaluation of the effectiveness of securities regulation and the specific evaluation of specific policy effect did not reach the level of 4 points (full score 7 points) ...|$|E
40|$|Internationally in {{secondary}} schools, lessons are typically taught by subject specialists, raising {{the question of}} how to accommodate teaching which bridges the sciences and humanities. This is the first study to look at how students make sense of the teaching they receive in two subjects (science and religious education) when one subject’s curriculum explicitly refers to cross-disciplinary study and the other does not. Interviews with 61 students in seven schools in England suggested that students perceive a permeable boundary between science and their learning in science lessons and also a permeable boundary between religion and their learning in RE lessons, yet perceive a firm boundary between science lessons and RE lessons. We concluded that it is unreasonable to expect students to <b>transfer</b> <b>instruction</b> about cross-disciplinary perspectives across such impermeable subject boundaries. Finally we consider the implications of these findings for the successful management of cross-disciplinary education...|$|E
40|$|Our 1989 - 1991 {{research}} on Testing and Fault-Tolerant Design Techniques culminated in numerous results reflected in over 37 publications, {{a large number}} of presentations at national and international meetings and followup implementations in computer industry. Here is a brief overview of the most important projects. 1. Topological Testing. We have continued working on our new concept, topological testing, and demonstrated several applications in the area of multiprocessor testing. Topological testing uses graph theoretic optimization methods, such as the Traveling Salesman Problem, the Chinese Postman Problem, coloring, path covering and partitioning to minimize the test time. The topological testing techniques can be applied to test a system's behavior and its organization at each level of the system's hierarchy; namely, circuit, logic, register <b>transfer,</b> <b>instruction</b> and processor-memory-switch levels. Specifically, the topological testing approach was demonstrated by developing tests for the multistage interconnection network and the hypercube network. We have also developed optimal test sets for mesh networks and further increased a test coverage by including solutions for priority circuits...|$|E
30|$|Two-step marker {{injection}} Injecting markers into program {{binary code}} may alter {{the address of}} program text, and it skews the target address of control <b>transfer</b> <b>instructions.</b> Thus, binary rewriting requires a painful job to update all the address of control <b>transfer</b> <b>instructions</b> even in the position-independent code (PIC). This {{is the reason why}} binary rewriting on a code is being used in limited ways. In order to avoid the problem, we first inject empty slots to a source code to prepare space for the semantics markers and compile the source code. At the binary code, the slots will then occupy spaces for markers. We fill the slots by computing semantics markers for that position. Since space for markers already exists at compile time, no address of the program code needs to be changed; thus, no additional binary rewriting is required.|$|R
5000|$|The Hudson Soft HuC6280 is a {{modified}} 65C02 with an effective clock rate of 1.79 or 7.16 MHz (switchable by software). The integrated components of this 8-bit processor include a timer, general-purpose I/O port, and bankswitching hardware (which drives a 21-bit {{external address bus}} from a 6502-compatible 16-bit address bus). It is capable of block <b>transfer</b> <b>instructions,</b> as well as dedicated move instructions for communicating with the TurboDuos video display controller, the HuC6270A.|$|R
25|$|In {{taking into}} {{consideration}} such an application, {{emphasis is placed on}} the ability of a foreign court to follow due process. The Act also requires the Secretary of Treasury to take all reasonable steps to encourage foreign governments make it a requirement to include the name of the originator in wire <b>transfer</b> <b>instructions</b> sent to the United States and other countries, with the information to remain with the transfer from its origination until the point of disbursement.|$|R
50|$|The console's CPU is a Hudson Soft HuC6280 8-bit {{microprocessor}} {{operating at}} 1.79 MHz and 7.16 MHz. It features integrated bank-switching hardware (driving a 21-bit {{external address bus}} from a 6502-compatible 16-bit address bus), an integrated general-purpose I/O port, a timer, block <b>transfer</b> <b>instructions,</b> and dedicated move instructions for communicating with the HuC6270A VDC. Its 16-bit graphics processor and video color encoder chip were also developed by Hudson Soft. It holds 8 kB of work RAM and 64 kB of video RAM.|$|R
40|$|This study {{reports the}} effects of {{instruction}} to use interactive imagery on the memory performance of 8 - 9 year-old and 10 - 11 year-old children. Within each age group children were experimentally assessed for metamemory ability and teacher assessed for verbal competence. Comparisons of imagery use under conditions of no instruction, minimal instruction (hint), explicit <b>instruction</b> and <b>transfer</b> of <b>instruction</b> are reported, Statistical analyses revealed an overall benefit of instruction for both age groups of children. This was regardless of verbal competence and matameory ability, except for younger low metamemory ability and medium verbal competence children. Explicit instruction benefited all children except the younger children with low metamemory ability. <b>Transfer</b> of <b>instruction</b> was exhibited by the older group of children irrespective of metamemory ability and verbal competence. <b>Transfer</b> of <b>instruction</b> was only exhibited by younger children with high metamemory ability. It is concluded that metamemory, as assessed in the present study, is a viable predictor of memory performance...|$|R
5|$|She {{started from}} her home port on 13 November 1971 and reached her patrol {{location}} by 18 November. She remained there until 25 November when she was shifted to a new patrol location and remained there until 30 November. On 30 November, she rendezvoused with Karanj at sea to <b>transfer</b> <b>instructions</b> and subsequently then left for Bombay and reached there by 4 December 1971. During her patrols, she encountered fair weather and monitored a number of tankers and commercial aircraft flying on international routes. She was originally intended to lay mines but the plan was later cancelled.|$|R
5000|$|The Secretary of the Treasury {{must take}} all {{reasonable}} steps to encourage foreign governments {{to require the}} inclusion of the name of the originator in wire <b>transfer</b> <b>instructions</b> sent to the United States and other countries, with the information to remain with the transfer from its origination until the point of [...] They must also report annually to the Committee on Financial Services of the House of Representatives and the Committee on Banking, Housing, and Urban Affairs of the Senate on the progress Treasury is making on this issue and what is impeding progress of implementing the wire transfer identification scheme.|$|R
40|$|A {{predecessor}} {{machine is}} a random-access machine with a predecessor operation (i. e., an instruction which subtracts 1 from {{the contents of}} a memory cell), but with no operation which can increase {{the contents of a}} cell. A regressing function is a partial function which never yields an output larger than the maximum of its inputs and a constant. Unlike the situation for random-access machines with a successor operation, it does not matter whether or not predecessor machines with loop control also have conditional <b>transfer</b> <b>instructions.</b> Furthermore, the class of functions computable by predecessor loop machines consists of exactly those regressing functions which are computable by deterministic linear-bounded automata...|$|R
40|$|In this episode, Chris Gaiser (professor {{of biology}} at Linfield College) and Mike Crosser (professor of physics at Linfield College) discuss genetically {{modified}} organisms, specifically with two examples in plants: Roundup Ready® crops and Golden rice. It turns out that every living organism uses the same genetic language for making proteins. This means {{that it is possible}} to <b>transfer</b> <b>instructions</b> from one organism into another and make both produce the same proteins. This trick has been used in a handful of crops for varying purposes. Crosser and Gaiser discuss how this process is done, as well as some pros and cons to the practice...|$|R
5000|$|This is {{the only}} {{technique}} provided for many RISC processors, but CISC architectures such as x86 support additional techniques. For example, the x86 instruction set contains the instructions SYSCALL/SYSRET and SYSENTER/SYSEXIT (these two mechanisms were independently created by AMD and Intel, respectively, but in essence they do the same thing). These are [...] "fast" [...] control <b>transfer</b> <b>instructions</b> {{that are designed to}} quickly transfer control to the kernel for a system call without the overhead of an interrupt. Linux 2.5 began using this on the x86, where available; formerly it used the INT instruction, where the system call number was placed in the EAX register before interrupt 0x80 was executed.|$|R
50|$|On 1 January 1965, the 1st Battle Group, 1st Infantry was {{redesigned}} as the 1st Battalion, 1st Infantry. With {{the exception}} of <b>transferring</b> tactical <b>instruction</b> to the Office of Military Instruction (now DMI) in 1961, its mission was essentially unchanged. The 2nd Battalion was then assigned to Fort Benning, Georgia.|$|R
3000|$|... “…the {{astonishing}} rise in data volumes, computational power, and connectivity, especially new low-power wide-area networks; {{the emergence}} of analytics and business-intelligence capabilities; new forms of human-machine interaction such as touch interfaces and augmented-reality systems; and improvements in <b>transferring</b> digital <b>instructions</b> to the physical world, such as advanced robotics and 3 -D printing”.|$|R
40|$|REC/ 8 is a CONVERT program, {{realized}} in the CTSS LISP of Project MAC, for compiling RED expressions into the machine language of the PDP- 8 computer. Since the compilation consists in its majority of subroutines calls (to be compiled, after removal of LISP parentheses by MACPO- 8) the technique is applicable with trivial modification to any other computer having the subroutine jump and indirect <b>transfer</b> <b>instructions.</b> The purpose {{of the program is}} both to compile REC expressions and to illustrate the workings of the REC language, and accordingly a description of this language is given. It contains operators and predicates; flow of control is achieved by parentheses which define subexpressions, colon which implies interaction, and semicolon which terminates the execution of an expression. Predicates pass control to the position following the next colon or semicolon, allowing the execution of alternative expression strings...|$|R
40|$|Graduation date: 1972 This {{thesis is}} {{concerned}} with the design of an external multiplication package which can be utilized as an I/O device with a PDP- 8 /L computer. The multiplier and multiplicand are assumed to be 12 bit integers. The 24 bit product can be transferred back to the accumulator of computer 12 bits at a time. The control pulses for the operation are supplied by the computer through I/O <b>transfer</b> <b>instructions.</b> The multiplication package was constructed on three printed-circuit cards, using only standard TTL IC chips. No other components were needed. It is simple, inexpensive and much faster than the method of repeated addition which must ordinarily be used in the PDP- 8. This paper also shows a division algorithm using the multiplier and trial-and-error. This method of division is faster than repeated subtraction...|$|R
40|$|Current taint {{checking}} architectures monitor tainted {{data usage}} mainly with control <b>transfer</b> <b>instructions.</b> An alarm is raised once the program counter becomes tainted. However, such architectures are not effective against non-control data attacks. In this paper {{we present a}} generic instructionlevel runtime taint checking architecture for handling noncontrol data attacks. Under our architecture, instructions are classified as either Taintless-Instructions or Tainted-Instructions prior to program execution. An instruction is called a Tainted-Instruction if {{it is supposed to}} deal with tainted data. Otherwise it is called a Taintless-Instruction. A security alert is raised whenever a Taintless-Instruction encounters tainted data at runtime. The proposed architecture is implemented on the SimpleScalar simulator. The preliminary results from experiments on SPEC CPU 2000 benchmarks show that there are a significant amount of Taintless-Instructions. We also demonstrate effective usages of our architecture to detect buffer overflow and format string attacks...|$|R
50|$|Technical presentations serve engineering, {{scientific}} and high tech purposes, describing advances in technology, problem resolution, product design and project status. In general, technical presentations serve {{one of two}} purposes: (1) to inform (e.g., knowledge <b>transfer,</b> classroom <b>instruction)</b> or (2) to persuade (e.g., convincing others to adopt a design approach or accept {{the results of an}} evaluation process).|$|R
5000|$|... <b>Instruction</b> <b>Transfer</b> Register (ITR), 33 bits (32 {{instruction}} {{plus one}} status bit) used to execute processor instructions {{while in a}} special [...] "Debug Mode" [...] (see below) ...|$|R
40|$|Xidian UniversityDLLs (Dynamic Link Libraries) {{are usually}} {{protected}} by various anti-reversing engineering techniques. One technique commonly used is code packing as packed DLLs hinder static code analysis such as disassembly. In this paper, we propose {{a technique to}} reconstruct a binary file for static analysis by loading a DLL and triggering and monitoring {{the execution of the}} entry-point function and exported functions of packed DLLs. By monitoring all memory operations and control <b>transfer</b> <b>instructions,</b> our approach extracts the original hidden code which is written into the memory at run-time and constructs a binary based on the original DLL, the codes extracted and the records of control transfers. To demonstrate its effectiveness, we implemented our prototype ReconPD based on QEMU. The experiments show that ReconPD is able to analyze the packed DLLs, yet practical in terms of performance. Moreover, the reconstructed binary files can be successfully analyzed by static analysis tools, such as IDA Pro. © 2009 Springer Berlin Heidelberg...|$|R
40|$|High-performing on-chip {{instruction}} caches {{are crucial}} to keep fast processors busy. Unfortunately, while on-chip caches are usually successful at intercepting instruction fetches in loop-intensive engineering codes, they are less {{able to do so}} in large systems codes. To improve the performance of the latter codes, the compiler can be used to lay out the code in memory for reduced cache conflicts. Interestingly, such an operation leaves the code in a state that can be exploited by a new type of instruction prefetching: guarded sequential prefetching. The idea is that the compiler leaves hints in the code as to how the code was laid out. Then, at run time, the prefetching hardware detects these hints and uses them to prefetch more effectively. This scheme can be implemented very cheaply: one bit encoded in control <b>transfer</b> <b>instructions</b> and a prefetch module that requires minor extensions to existing next-line sequential prefetchers. Furthermore, the scheme can be turned off and on at ru [...] ...|$|R
50|$|The {{performance}} of the processor is highly influenced by the methods employed to <b>transfer</b> data and <b>instructions</b> {{to and from the}} processor.The less the time needed for the transfers the better the processor performance.|$|R
40|$|In {{this present}} study {{includes}} the Very Large Scale Integration (VLSI) system implementation of 200 MHz, 8 -bit, 90 nm Complementary Metal Oxide Semiconductor (CMOS) Arithmetic and Logic Unit (ALU) processor control with logic gate design style and 0. 12 µm six metal 90 nm CMOS fabrication technology. The system blocks and the behaviour are defined and the logical design is implemented in gate {{level in the}} design phase. Then, the logic circuits are simulated and the subunits are converted in to 90 nm CMOS layout. Finally, in order to construct the VLSI system these units are placed in the floor plan and simulated with analog and digital, logic and switch level simulators. The results of the simulations indicates that the VLSI system can control different instructions which can divided into sub groups: <b>transfer</b> <b>instructions,</b> arithmetic and logic instructions, rotate and shift instructions, branch instructions, input/output instructions, control instructions. The data bus {{of the system is}} 16 -bit. It runs at 200 MHz, and operating power is 1. 2 V. In this paper, the parametric analysis of the system, the design steps and obtained results are explained...|$|R
