156|775|Public
25|$|When {{renaming}} a file, {{even when}} extensions are being displayed, Explorer highlights only the filename without selecting the extension. Renaming multiple files is quicker as pressing Tab automatically renames the existing file or folder {{and opens the}} file name <b>text</b> <b>field</b> for the next file for renaming. Shift+Tab allow renaming {{in the same manner}} upwards.|$|E
25|$|The Windows Desktop Search {{functionality}} {{is exposed}} via a Windows Taskbar mounted deskbar. It provides a <b>text</b> <b>field</b> to type the query {{and the results}} are presented in a flyout pane. It also integrates as a Windows Explorer window. On selecting a file in the Explorer window, a preview of the file is shown in the right hand side of the window, without opening the application which created the file. Web searches can be initiated from both interfaces, but that will open the browser to search the terms using the default search engine.|$|E
25|$|The {{database}} {{features of}} the HyperCard system {{are based on the}} storage of the state of all of the objects on the cards in the physical file representing the stack. The database did not exist as a separate system within the HyperCard stack; no database engine or similar construct exists. Instead, the state of any object in the system was considered to be live and editable at any time. From the HyperCard runtime's perspective, {{there was no difference between}} moving a <b>text</b> <b>field</b> on the card and typing into it, both operations simply changed the state of the target object within the stack. Such changes are immediately saved when complete, so typing into a field caused that text to be stored to the stack's physical file. The system operates in a largely stateless fashion, with no need to save during operation. This is in common with many database-oriented systems, although somewhat different from document-based applications.|$|E
5000|$|Multi-language {{support with}} multi-language <b>text</b> <b>fields</b> and URLs ...|$|R
5000|$|All file {{names and}} <b>text</b> <b>fields</b> are stored as big-endian UCS-2, as {{specified}} in the Joliet extensions.|$|R
50|$|Claims {{would be}} stored by typing text into {{standardised}} <b>text</b> <b>fields,</b> and saving photos or scans of documents.|$|R
2500|$|Each HyperCard object class, {{contains}} {{a set of}} [...] "properties". For example, buttons are a type of object, and come in standard styles. To determine, say, whether a checkbox style button is in fact checked, a script can simply call the highlight property, which would return either true or false. [...] In a similar way, objects can be analyzed via functions. For example, the number of lines in <b>text</b> <b>field</b> (another type of object) can be determined by {{a variant of the}} number function, called simply as [...] This is very useful when performing a given action on each separate line of the field. The script that implements the action need only call the function to know exactly the number of lines it must process. [...] Should the field data change, the already coded function call will still be accurate.|$|E
2500|$|The final {{key element}} in HyperCard was the script, a single code-carrying element of every object within the stack. The script was a <b>text</b> <b>field</b> which {{contents}} were interpreted in the HyperTalk language (detailed below). Like any other property, the script of any object could be edited {{at any time and}} changes were saved {{as soon as they were}} complete. When the user invokes actions in the GUI, like clicking on a button or typing into a field, these actions are translated into events by the HyperCard runtime. [...] The runtime then examines the script of the object that was the target of the event, like a button, to see if its script object contains code for that event, code termed a handler. If it does, the HyperTalk engine runs the handler, if it does not, the runtime examines other objects in the visual hierarchy.|$|E
5000|$|... flash.text:TextField - A dynamic, {{optionally}} interactive <b>text</b> <b>field</b> object.|$|E
50|$|Creating PDFs with {{fillable}} forms such as <b>text</b> <b>fields,</b> check boxes, radio buttons, and combo and list boxes.|$|R
5000|$|Plan [...] "one-semester" [...] view, {{where the}} teacher can edit <b>text</b> <b>fields</b> with what was agreed upon during IRL talks with the pupil.|$|R
5000|$|Regular {{expression}} patterns: Occasionally, <b>text</b> <b>fields</b> {{will have}} to be validated this way. For example, phone numbers may be required to have the pattern (999) 999-9999.|$|R
5000|$|When {{it comes}} to the {{rendering}} on the screen of a file-select control, there is some variation among web browsers. Typically, on a Windows-based platform, user agents will render a file-select control as a <b>text</b> <b>field,</b> together with a [...] "Browse" [...] button. When the [...] "Browse" [...] button is pressed, a file dialog opens, with which actual file selection on one's platform can take place. After selection, the filename of the selected file is displayed in the <b>text</b> <b>field,</b> with its full path. Alternatively, instead of using the [...] "Browse" [...] button, the filename can be entered directly in the <b>text</b> <b>field.</b>|$|E
5000|$|This is {{the classic}} Hello world program in IFC:import netscape.application.*;import netscape.util.*;public class HelloWorld extends Application { public void init (...) { super.init (...) // Create a <b>text</b> <b>field</b> TextField textField = new TextField(100, 24, 128, 24); // Set the string to be {{displayed}} in the <b>text</b> <b>field.</b> textField.setStringValue("Hello World"); // Add the <b>text</b> <b>field</b> to the view hierarchy. mainRootView (...) [...]addSubview(textField); } // This method allows HelloWorld to run as a stand alone application. public static void main(String args) { HelloWorld app = new HelloWorld (...) ExternalWindow mainWindow = new ExternalWindow (...) app.setMainRootView(mainWindow.rootView (...) [...] ); Size size = mainWindow.windowSizeForContentSize(320, 200); mainWindow.sizeTo(size.width, size.height); mainWindow.show (...) app.run (...) }} ...|$|E
5000|$|TextField - A simple dynamic {{or input}} <b>text</b> <b>field.</b> Inherits the Movieclip type.|$|E
40|$|A Java {{program in}} a GUI {{environment}} has been developed for the numerical solution of basic partial differential equations and applied to Au diffusion in Si affected by vacancies and self-interstitials. <b>Text</b> <b>fields</b> of selected parameters for the calculation are set on the display, and the calculation starts by checking the start button after putting values on the <b>text</b> <b>fields.</b> The calculated results are plotted immediately after the finish of the calculation as the concentration profiles of substitutional Au, interstitial Au, vacancies and self-interstitials, and their diffusion can be presented immediately, resulting {{in the identification of}} the diffusion mechanism. By changing the values of the <b>text</b> <b>fields,</b> new results can be represented immediately. The diffusion of Au in Si can be simulated correctly and easily by this program. Results from the program for one set of conditions are shown, including images produced on the display...|$|R
40|$|In many {{manufacturing}} companies, large databases containing data on {{failures and}} repairs of products are maintained. This paper {{reports on a}} case where information from such a database is extracted. Such information extracted could be useful for identifying opportunities for reliability improvements in the products. The database was obtained from a manufacturer of inkjet printers and contains both fixed-format and free-form <b>text</b> <b>fields.</b> At present, techniques developed in data mining and information retrieval are mainly designed to handle either fixed-format or free-form <b>text</b> <b>fields,</b> but not a combination of both. The approach taken in {{this paper is to}} first transform the free-form <b>text</b> <b>fields</b> into a number of fixed-format fields through analysis of the frequency of key words. Association analysis was then carried out on the resulting fixed-format fields. Results obtained from the analysis produced a number of associations that could contribute to improving product reliability. Singapore-MIT Alliance (SMA...|$|R
50|$|Incremental search {{has been}} criticised for exhibiting low affordance, as the <b>text</b> <b>fields</b> which provide it offer no visual {{indication}} {{of that fact}} until after the user begins typing.|$|R
5000|$|Ten lines will {{be loaded}} into the first <b>text</b> <b>field.</b> (denoted as [...] "field 1"), and seen as: ...|$|E
5000|$|... form controls: button (various shapes, {{including}} tab buttons), <b>text</b> <b>field,</b> text area, drop-down list, list box, checkbox, {{radio button}} ...|$|E
5000|$|... jqxDateTimeInput - a date picker widget {{that enables}} the user to select a date or time using a popup {{calendar}} display or by keyboard input into the <b>text</b> <b>field.</b>|$|E
50|$|The {{generic term}} {{for any of}} the {{building}} blocks that make up an application in a graphical user interface. Examples of widgets: buttons, radiobuttons, <b>text</b> <b>fields,</b> frames, and <b>text</b> labels.|$|R
50|$|Version 2.4 of the {{specification}} prescribes {{that all}} <b>text</b> <b>fields</b> (the fields that {{start with a}} T, except for TXXX) can contain multiple values separated by a null character. The null character varies by character encoding.|$|R
50|$|Most of {{the symbols}} {{designate}} specific points, and {{consist of a}} frame (a geometric border), a fill, a constituent icon, and optional symbol modifiers. The latter are optional <b>text</b> <b>fields</b> or graphic indicators that provide additional information.|$|R
5000|$|... is {{an object}} reference, here denoted by the layer number of a <b>text</b> <b>field.</b> Almost all {{standard}} object classes are supported, {{and may be}} referred to in several, highly-intuitive ways.|$|E
50|$|An {{informal}} protocol {{is a list}} {{of methods}} that a class can opt to implement. It is specified in the documentation, since it has no presence in the language. Informal protocols are implemented as a category (see below) on NSObject and often include optional methods, which, if implemented, can change the behavior of a class. For example, a <b>text</b> <b>field</b> class might have a delegate that implements an informal protocol with an optional method for performing auto-completion of user-typed text. The <b>text</b> <b>field</b> discovers whether the delegate implements that method (via reflection) and, if so, calls the delegate's method to support the auto-complete feature.|$|E
5000|$|Also in 2014, Google Plus {{introduced}} a new gender category called [...] "Custom", which generates a freeform <b>text</b> <b>field</b> and a pronoun field, and also provides users with an option to limit who can see their gender.|$|E
5000|$|Dynamic content: dynamic pages {{which are}} {{returned}} {{in response to}} a submitted query or accessed only through a form, especially if open-domain input elements (such as <b>text</b> <b>fields)</b> are used; such fields are hard to navigate without domain knowledge.|$|R
40|$|The {{resource}} contains grammatical {{descriptions of}} around 100 varieties of Romani. The description is organised by chapters following standard grammatical outlines. Chapters include questions, and data {{are arranged in}} data <b>fields</b> (<b>text</b> <b>fields</b> containing examples), and analytical fields (pre-defined value lists) ...|$|R
50|$|The society publishes peer-reviewed {{scientific}} journals, conference proceedings, monographs, tutorial <b>texts,</b> <b>field</b> guides, {{and reference}} volumes {{in print and}} online. In 2015, the society provided more than $5.2 million in support of optics education and outreach programs around the world.|$|R
5000|$|Within Mac OS X v10.4, Spotlight can be {{accessed}} {{from a number of}} places. Clicking on an icon in the top-right of the menu bar opens up a <b>text</b> <b>field</b> where a search query can be entered. Finder windows also have a <b>text</b> <b>field</b> in the top-right corner where a query can be entered, as do the standard load and save dialogue boxes. Both of these text fields immediately start listing results of the search as soon as the user starts typing in a search term, returning items that either match the term, or items that start with the term. The search results can be further refined by adding criteria in a Finder window such as [...] "Created Today" [...] or [...] "Size Greater than 1 KB".|$|E
5000|$|... {{uses the}} [...] command {{to display a}} dialog box with a <b>text</b> <b>field</b> the user can type into, and when the dialog is {{completed}} by hitting [...] or clicking , the value is assigned to the [...] pseudo-variable. The code then copies the value into a card field using the [...] assignment operator.|$|E
50|$|When {{renaming}} a file, {{even when}} extensions are being displayed, Explorer highlights only the filename without selecting the extension. Renaming multiple files is quicker as pressing Tab automatically renames the existing file or folder {{and opens the}} file name <b>text</b> <b>field</b> for the next file for renaming. Shift+Tab allow renaming {{in the same manner}} upwards.|$|E
50|$|An Undeclared <b>Fielded</b> <b>Text</b> file {{does not}} {{start with the}} 2 special lines. It is not implicitly {{associated}} with a <b>Fielded</b> <b>Text</b> meta file/stream. Applications need to explicitly associate a Meta file with an undeclared <b>Fielded</b> <b>Text</b> file {{in order to determine}} its structure and format. Existing CSV, Fixed Length <b>field</b> and other <b>text</b> files containing table(s) of values are undeclared <b>Fielded</b> <b>Text</b> files.|$|R
5000|$|A Declared <b>Fielded</b> <b>Text</b> file {{starts with}} 2 special lines which {{reference}} the Meta {{associated with the}} text file. The Meta reference can either be a URI, a file or embedded within the Text File as comments. Declared <b>Fielded</b> <b>Text</b> files always begin with the characters [...] "|!Fielded Text^|" [...] (without quotes) to identify the files as a declared <b>Fielded</b> <b>Text</b> file. A file extension of [...] "ftx" [...] is often used for Declared <b>Fielded</b> <b>Text</b> files. The standard also proposes that the MIME type text/fielded {{be used to identify}} <b>Fielded</b> <b>Text</b> data streams.|$|R
40|$|Java {{programs}} with a {{graphical user interface}} (GUI) environment {{have been developed for}} an image learning of electric characteristics of resistance (R), capacitance (C), inductance (L), and their circuits. <b>Text</b> <b>fields</b> of selected parameters for the numerical calculation of the differential equations to describe the electric characteristics of the circuit are set on the display, such as the frequency of applied voltage and the values of R, C, L, time increments, and calculation times. The calculation used Runge-Kutta method is initiated by clicking the start button after inputting the desired values into the <b>text</b> <b>fields.</b> The calculated results are plotted immediately after the completion of the calculation as a figure on the display for the simulation of the electric characteristics of the circuit, such as changes in the voltages and currents with time. By changing the values in the <b>text</b> <b>fields,</b> the new results are represented immediately, and the new electric characteristics of the new circuit can be easily simulated. These Java programs are useful in education applications for rapidly and accurately image learning for the electric characteristics of the circuit. This program is also useful for learning the phenomena expressed by ordinary differential equations...|$|R
