74|602|Public
5|$|According to routine testing {{performed}} by CNet, write operations to typical Hi-Speed hard drives can sustain rates of 25–30MB/s, while read operations are at 30–42MB/s; this is 70% {{of the total}} available bus bandwidth. For USB3.0, typical write speed is 70–90MB/s, while read speed is 90–110MB/s. Mask tests, also known as eye diagram tests, are {{used to determine the}} quality of a signal in the time domain. They are defined in the referenced document as part of the electrical <b>test</b> <b>description</b> for the high-speed (HS) mode at 480Mbit/s.|$|E
5000|$|Software <b>Test</b> <b>Description</b> (STD) - Test cases/procedures for {{qualification}} testing ...|$|E
5000|$|Feature: Function to <b>test</b> <b>description</b> Free text Scenario: Scenario 1 Given {{preconditions}} When actions Then results Scenario: Scenario 2 ...|$|E
30|$|The test file {{consists}} of a sequence of <b>test</b> <b>descriptions</b> (each of which occupying several lines). For instance the description of Test 4908 is as follows.|$|R
40|$|The work {{described}} in this paper depicts an approach how to close the lack of structure for <b>test</b> specifications, <b>test</b> <b>descriptions</b> and <b>test</b> data representations. On {{the example of a}} test data representation with the eXtensible Markup Languange (XML), it will be shown how to form the structure using the behavioural atomic element and two testing patterns, i. e. for test stimuli and test reactions. The patterns are described using Petri net semantics. The scalability and flexibility of the approach, i. e. enabling the consideration of domain specific information, will also be shown on the example of the testing format. The pros and cons for using non-black box information in <b>test</b> <b>descriptions</b> and reference black box behaviour specification for reactive systems, like actions, tasks and processes as well as system states in addition to the interface events, will also be discussed in this paper...|$|R
40|$|The {{structural}} design, analysis, {{and mechanical}} {{integration of the}} synchronous meteorological satellite system are presented. The subjects discussed are: (1) spacecraft configuration, (2) structural design, (3) static load tests, (4) fixed base sinusoidal vibration survey, (5) flight configuration sinusoidal vibration tests, (6) spacecraft acoustic test, and (7) separation and shock <b>test.</b> <b>Descriptions</b> of the auxiliary propulsion subsystem, the apogee boost motor, communications system, and thermal control subsystem are included...|$|R
5000|$|The first {{generation}} of intelligent verification tools optimized {{one part of the}} verification process known as Regression testing with a feature called automated coverage feedback. With automated coverage feedback, the <b>test</b> <b>description</b> is automatically adjusted to target design functionality that has not been previously verified (or [...] "covered") by other tests existing tests. A key property of automated coverage feedback is that, given the same test environment, the software will automatically change the tests to improve functional design coverage in response to changes in the design.|$|E
50|$|According to routine testing {{performed}} by CNet, write operations to typical Hi-Speed hard drives can sustain rates of 25-30 MB/s, while read operations are at 30-42 MB/s; this is 70% {{of the total}} available bus bandwidth. For USB 3.0, typical write speed is 70-90 MB/s, while read speed is 90-110 MB/s. Mask tests, also known as eye diagram tests, are {{used to determine the}} quality of a signal in the time domain. They are defined in the referenced document as part of the electrical <b>test</b> <b>description</b> for the high-speed (HS) mode at 480 Mbit/s.|$|E
50|$|Increased {{complexity}} of ASICs lead to requirements of more complex test programs with longer development times. An automated test program generation could simplify and speed up this process. Teradyne Inc. together with Robert Bosch GmbH agreed to developed a concept and a tool chain for an automated test-program generation. To achieve this a tester independent programming language was required. Hence, UTSL, {{a programming language}} that enables detailed description of tests that can be translated into the ATE specific programming language was developed. The ATE manufacturers need to provide a Test Program Generator that uses the UTSL <b>test</b> <b>description</b> as inputs and generates the ATE-specific test code with optimal resource mapping and better practice program code.|$|E
40|$|International audienceEfficient Service Level Agreements (SLA) {{management}} and anticipation of Service Level Objectives (SLO) breaches become mandatory {{to guarantee the}} fulfilled services {{in the context of}} softwarized networks. In this paper, using Artificial Neural Networks, we design, specify and evaluate a framework for cognitive SLA enforcement of networking services involving Virtualized Network Functions (VNFs) and SDN controllers. A proof of concept, a <b>testbed</b> <b>description</b> and an extensive performance evaluation assess the validation of the proposed framewor...|$|R
40|$|Manure is a {{nutrient}} resource. To get {{the most}} value from this resource, you need accurate information on nutrient content, which means testing manure for content. This bulletin discusses collecting representative manure samples, selecting an analytical laboratory, requesting key nutrient analyses and usable reporting units from laboratories, choosing on-farm tests for manure nitrogen (N) content, and determining testing needs for different manure handling and storage systems. Supplemented with tables, glossary, reference lists, and <b>test</b> <b>descriptions.</b> 12 pages...|$|R
40|$|Three {{experiments}} {{were conducted in}} which college students read, and then attempted to match, a series of written descriptive passages with the referent photographs on which they were based; the photographs sho wed {{the face of an}} actor, representing a variety of emotional expressions. In Experiment I, subjects provided with a series of context passages depicting a narrow range of emotions (neither pleasant nor unpleasant) chose “matches” having more extreme pleasantness values than did subjects provided with context passages depicting a wide range of descriptions on the pleasantness dimension when responding to <b>test</b> <b>descriptions</b> embedded within the context series. In Experiments II and III, contrast effects were obtained; subjects who had read mostly unpleasant context passages chose more pleasant referents in response to neutral <b>test</b> <b>descriptions</b> than did those who had read mostly pleasant descriptions. The results of all three experiments suggested that these effects were mediated in large part by a response bias, the tendency to use each response alternative with roughly equal frequency. In Experiments II and III, there was suggestive evidence for the possibility that a more central (or perceptual) mechanism may also have contributed to the observed results...|$|R
40|$|The {{contribution}} {{discusses the}} main properties {{and benefits of}} an atomic element for the formal behavioural black box <b>test</b> <b>description.</b> This element enables the handling of complex functional behaviour in test scenarios by its horizontal composition and the domain specific <b>test</b> <b>description</b> by its extendable vertical differentiation. The atomic element {{is derived from the}} Design by Contract TM which is a powerful concept to increase correctness and robustness of software applications. The atomic element, its composition and differentiation are a common basis for the formal <b>test</b> <b>description</b> with UML, with Petri Nets and with XML. The train’s safety-critical on-board unit of the European Train Control System (ETCS) representing a complex, real-time system is used as application example...|$|E
40|$|Software {{tests are}} {{intellectual}} assets, too, and are {{as valuable as}} source code to a software project. Over the long term, maintainable software tests significantly lower a project's cost. It is very difficult, however, to write maintainable software tests, especially executable ones. Existing approaches - including natural language, tables or forms, test scripts, programming languages, and <b>test</b> <b>description</b> languages - all are problematic, as discussed in this paper. Another solution is a <b>test</b> <b>description</b> language that provides a mechanism to specify software tests while separating different concerns of automated software testing. In this paper, we analyze the current situation of software <b>test</b> <b>description.</b> We propose a description language just for software testers: TestTalk. We present examples to illustrate the benefits of TestTalk and discuss implementation issues of this language. The primary goal of TestTalk is to enable tests to be written once, and then used by anyo [...] ...|$|E
40|$|A {{mass market}} in {{reusable}} components demands {{a high level}} of component quality, testing being a crucial part of software quality assurance. For components modelled in UML there are significant advantages to using UML also for the <b>test</b> <b>description</b> language. Since we wish to describe tests of non-trivial temporal ordering properties, we define our <b>test</b> <b>description</b> language based around UML interaction diagrams, seeking inspiration from the work on conformance testing of telecom protocols. We aim at a fully integrated approach which can be captured in a UML component testing profile...|$|E
50|$|Born in {{the city}} of Málaga in al-Andalus (Muslim-controlled Spain) {{at the end of the}} twelfth century, Ibn al-Bayṭār learned botany from the Málagan {{botanist}} Abū al-ʿAbbās al-Nabātī with whom he started collecting plants in and around Spain. Al-Nabātī was responsible for developing an early scientific method, introducing empirical and experimental techniques in the <b>testing,</b> <b>description</b> and identification of numerous materia medica, and separating unverified reports from those supported by actual tests and observations. Such an approach was thus adopted by Ibn al-Bayṭār.|$|R
5000|$|An {{executable}} {{script is}} needed for each test case. It should be written according to <b>test</b> case <b>description</b> which defines the PDU sequence and verification points.|$|R
40|$|TestML is an XML-based {{language}} for {{the exchange of}} <b>test</b> <b>descriptions</b> in automotive systems design and mainly introduced through the structural definition of an XML schema as an independent exchange format for existing tools and methods covering {{a wide range of}} different test technologies. In this paper, we present a rigorous formal behavioral semantics for TestML by means of Abstract State Machines (ASMs). Our semantics is a concise, unambiguous, high-level specification for TestML-based implementations and serves as a basis to define exact and well-defined mappings between existing test languages and TestML...|$|R
40|$|International audienceA formal yet {{user-friendly}} <b>test</b> <b>description</b> language {{could increase}} the possibilities for automation in the testing phase {{while at the same}} time gaining widespread acceptance Scenario languages are currently one of the most popular formats for describing interactions between possibly distributed components The question of giving a solid formal basis to scenario languages such as MSC has also received a lot of attention In this article we discuss using one of the most widely-known scenario languages UML sequence diagrams as the basis for a formal <b>test</b> <b>description</b> language for use in the distributed system context...|$|E
40|$|Abstract. Two {{tools are}} {{presented}} which support test case management for accessibility test suites. Creating test suites for the Web Content Ac-cessibility Guidelines 2. 0 is one major {{objective of the}} EU-funded project BenToWeb 1. Parsifal is a desktop application which easily allows editing <b>test</b> <b>description</b> les. <b>Test</b> <b>description</b> les compose an XML layer con-taining descriptive information about the particular test cases. Amfortas is a web application which allows controlled evaluation of the test suites by users. Controlled in that sense means, that Amfortas not only stores the evaluation results, but also {{is aware of the}} physical and technical condition of the evaluator. ...|$|E
40|$|Tyt. z nagłówka. Bibliogr. s. 475 - 477. Acceptance {{tests are}} usually {{created by a}} client after {{a part of a}} system is implemented. However, some methodologies propose the {{elaboration}} of test cases before implementing a system. This approach increases the probability of system implementation that fulfills requirements, but may be problematic for customers and testers. To allow acceptance testing in such conditions, we propose to define test cases by recording them on an interactive mockup (a low detailed user-interface prototype). The paper focuses on <b>Test</b> <b>Description</b> Language, a notation used to store test cases. Dostępny również w formie drukowanej. KEYWORDS: acceptance test case, use case, mockup, <b>Test</b> <b>Description</b> Language...|$|E
40|$|The high {{temperature}} catalytic dissocation of SO 3 {{is an important}} chemical process being considered {{in the development and}} application of solar-thermal energy conversion, transport, and storage systems. A facility for evaluating chemical converter-heat exchangers at temperatures to 1000 C with high flow rates of gaseous SO 3 feedstock has been assembled and operated on the NMSU campus. Several quartz and metal reactors containing different catalyst configurations have been <b>tested.</b> <b>Descriptions</b> of the <b>test</b> facility and of the reactors are given along with a presentation and discussion of experimental results...|$|R
40|$|To obtain {{repeatable}} {{results in}} modern networks, <b>test</b> <b>descriptions</b> need an expanded stream parameter framework that also augments aspects specified as Type-P for test packets. This memo updates the IP Performance Metrics (IPPM) Framework, RFC 2330, with advanced considerations for measurement methodology and testing. The existing framework mostly assumes deterministic connectivity, {{and that a}} single test stream will represent {{the characteristics of the}} path when it is aggregated with other flows. Networks have evolved and <b>test</b> stream <b>descriptions</b> must evolve with them; otherwise, unexpected network features may dominate the measured performance. This memo describes new stream parameters for both network characterization and support of application design using IPPM metrics. Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes. This document {{is a product of the}} Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by th...|$|R
40|$|Qualitative {{approaches}} {{have much to}} offer family psychology. Among the uses for qualitative methods are theory building, model and hypothesis <b>testing,</b> <b>descriptions</b> of lived experiences, typologies, items for surveys and measurement tools, and case examples that answer ques-tions that surveys cannot. Despite the usefulness of these products, issues related to gener-alizability, subjectivity, and language, among others, block some researchers from appreci-ating the contributions that qualitative methods can make. This article provides descriptions of procedures that lead to these useful products and discusses alternative ways of under-standing aspects of qualitative approaches that some researchers view as problematic...|$|R
40|$|In {{this paper}} we {{introduce}} automatic methods for restructuring source codes written in <b>test</b> <b>description</b> languages. We modify {{the structure of}} these sources without making any changes to their behavior. This technique is called refactorisation. There are many approaches to refactorisation. The goal of our refactorisation methods {{is to increase the}} maintainability of source codes. We focus on TTCN- 3 (Testing and Test Control Notation), which is a rapidly spreading <b>test</b> <b>description</b> language nowadays. A TTCN- 3 source consists of a data description (static) part and a test execution (dynamic) part. We have developed models and refactorisation methods based on these models, separately for the two parts. The static part is mapped into a layered graph structure, while the dynamic part is mapped to a CEFSM (Communicating Extended Finite State Machine) – based model. ...|$|E
40|$|In: Miesenberger K et al (eds). Proceedings of the 10 th International Conference ICCHP 2006 (Linz, Austria, July 2006), LNCS 4061, pp. 215 - 222. Berlin-Heidelberg: Springer-VerlagTwo {{tools are}} {{presented}} which support test case management for accessibility test suites. Creating test suites for the Web Content Accessibility Guidelines 2. 0 is one major {{objective of the}} EU-funded project BenToWeb. Parsifal is a desktop application which easily allows editing <b>test</b> <b>description</b> files. <b>Test</b> <b>description</b> files compose an XML layer containing descriptive information about the particular test cases. Amfortas is a web application which allows controlled evaluation of the test suites by users. Controlled in that sense means, that Amfortas not only stores the evaluation results, but also {{is aware of the}} physical and technical condition of the evaluator. status: publishe...|$|E
40|$|Software {{tests are}} {{intellectual}} assets {{that are as}} valuable as source code. Over the long term, maintainable software tests significantly lower a project's cost. It is very difficult, however, to write maintainable software tests, especially executable ones. Existing approaches - including natural languages, tabular formats, scripting and programming languages, and several <b>test</b> <b>description</b> languages - are all problematic, as briefly discussed in this paper. The solution we propose is TestTalk, a <b>test</b> <b>description</b> language that provides mechanisms to specify software tests while separating the various concerns of automated software testing. TestTalk is designed for testers. Software testing concepts such as application states, scenarios, boundary-based test input selection, and category-based test input selection, are explicitly supported by TestTalk. TestTalk tests are automated by a transformational approach. The Problem To develop high-quality software products, software teams inves [...] ...|$|E
40|$|International audienceSoftware Networks {{built by}} {{combining}} Software Defined Networks (SDN), Network Function Virtualization (NFV) and Cloud principles call for agile and dynamic automation of management operations to ensure continuous provisioning and deployment of networked resources and services. In this context, efficient Service Level Agreements (SLA) management and anticipation of Service Level Objectives (SLO) breaches become essential to fulfill established service contracts with clients. In this paper, we design and specify {{a framework for}} cognitive SLA enforcement (using Artificial Neural Network learning) for networking services involving VNFs (Virtualized Network Functions) and SDN controllers. A proof of concept, a <b>testbed</b> <b>description</b> and an extensive evaluation assess {{the performance of the}} proposed framewor...|$|R
40|$|Checking of web {{accessibility}} {{can be carried}} out in several ways along the same international standards and depending on the scale, the quality, availability of tools and the interpretation method that is followed. The Unified Web Evaluation Methodology is developed by European expert organizations and offers <b>test</b> <b>descriptions</b> to evaluate WCAG 1. 0 conformance covering level AA, a clear sampling scheme, improved aggregations supporting confidence levels, Score cards and other instruments to help communicate the results of evaluations clearer and on more levels. The aim is to establish the UWEM as the basis for {{web accessibility}} evaluation, policy support and possible certification in Europe...|$|R
40|$|This report {{supersedes}} NACA-TR- 129 {{which is}} now obsolete. Aircraft power-plant instruments include tachometers, engine thermometers, pressure gages, fuel-quantity gages, fuel flow meters and indicators, and manifold pressure gages. The report includes {{a description of the}} commonly used types and some others, the underlying principle utilized in the design, and some design data. The inherent errors of the instrument, the methods of making laboratory <b>tests,</b> <b>descriptions</b> of the <b>test</b> apparatus, and data in considerable detail in the performance of commonly used instruments are presented. Standard instruments and, in cases where it appears to be of interest, those used as secondary standards are described. A bibliography of important articles is included...|$|R
40|$|Software {{tests are}} {{intellectual}} assets {{that are as}} valuable as source code. Over the long term, maintainable software tests significantly lower a project's cost. It is very difficult, however, to write maintainable software tests, especially executable ones. Existing approaches - including natural languages, tabular formats, scripting and programming languages, and several <b>test</b> <b>description</b> languages - are all problematic. The solution we propose is TestTalk, a <b>test</b> <b>description</b> language that provides mechanisms to specify software tests while separating the various concerns of automated software testing. 1. The Problem To develop high-quality software products, software teams invest significant portions of their resources on designing, implementing, and sometimes automating software tests. It is desirable but difficult to extend the life spans of these software tests. Changes in application implementation, platforms, or testing environments can all cause existing software tests to bec [...] ...|$|E
40|$|In {{response}} to the Environmental Protection Agency`s requirements for evaluating radioactive emissions from stacks, this test plan was developed. The test plan employs the use of low resolution (NaI) portable gamma spectrometry to identify and measure gamma emitting radionuclides from HEPA filters. The <b>test</b> <b>description,</b> expected results, and test set-up and steps are discussed...|$|E
40|$|Although {{programming}} {{languages are}} widely used for writing automated software test code, we argue {{that this is a}} harmful practice for software quality assurance. Programming languages are designed to implement complex algorithms and do not provide a natural mechanism for describing software tests. Software tests consist of sequences of test actions - such as, inputting test input data, checking test outcomes, and recording test results - and not only executing the application-under-test. We dissect a sample software test written in C++ and identify several harmful effects of writing software tests in programming languages. We believe that the problems we identify are overcome by using a language specifically designed for describing software tests. We briefly describe TestTalk, a <b>test</b> <b>description</b> language under development, and provide a sample software test written in TestTalk. Keywords: Software Testing, Test Automation, Software Quality Assurance, <b>Test</b> <b>Description</b> 2 1 Introductio [...] ...|$|E
40|$|Success {{coming with}} MBT highly {{depends on the}} {{availability}} of the underlying system specification and the acceptance of related tools. In industrial practice is has been found very often that the system specification could not be fully completed and need to be restricted to selected parts. The Architecture-driven test approach (ADT) considers a system specification that is decomposed following different viewpoint that allows an easier understanding due to various abstractions. In this contribution we discuss how we extend our work that has been introduced earlier on ADT in order to execute ADT-based <b>test</b> <b>descriptions</b> against real systems {{in the context of the}} automotive domain...|$|R
40|$|R topics documented: amtest [...] 2 amtest. efron [...] . 4 mn 6. 9 [...] 5 Index 7 1 2 amtest amtest <b>Testing</b> {{multiple}} outcomes <b>Description</b> <b>Testing</b> multiple endpoints or outcomes measures {{by providing}} a corrected significance level to assess the uncorrected, marginal p-values against. Usage amtest(modelList, varName, vcov. = c("sandwich", "model-based"), sig. level = 0. 05, display = TRUE, adjp=FALSE) Argument...|$|R
40|$|This paper {{presents}} the results of a small sample of ASME B 16. 9 welding tee burst tests. The intent {{of this study was to}} make a comparison between what is commonly accepted in industry as a B 16. 9 welding tee to the burst test requirements of B 16. 9 paragraph 9. The tests conducted show that the current fabrication techniques and some accepted criteria for B 16. 9 certification can produce thin sections in the tee which do not meet the required burst test pressures. The <b>test</b> <b>descriptions</b> and results are presented as well as recommendations for future study and potential modifications to the ASME B 16. 9 standard to address the concerns...|$|R
