62|115|Public
50|$|Unlike the POSIX <b>terminal</b> <b>interface,</b> the Seventh Edition Unix <b>terminal</b> <b>interface</b> {{recorded}} {{input and}} output baud rates directly in the data structure.|$|E
50|$|In the POSIX <b>terminal</b> <b>interface,</b> these modes {{have been}} {{superseded}} {{by a system}} of just two input modes: canonical and non-canonical. The handling of signal-generating special characters in the POSIX <b>terminal</b> <b>interface</b> is independent of input mode, and is separately controllable.|$|E
50|$|The Seventh Edition Unix <b>terminal</b> <b>interface</b> is the {{generalized}} abstraction, comprising both an Application Programming Interface for programs {{and a set}} of behavioural expectations for users, of a terminal as historically available in Seventh Edition Unix. It has been largely superseded by the POSIX <b>terminal</b> <b>interface.</b>|$|E
50|$|New in CP-6 {{was the use}} of {{communications}} and <b>terminal</b> <b>interfaces</b> through minicomputer (Honeywell Level 6)-based front-end processors, connected locally, remotely, or in combination.|$|R
50|$|The 72-character metaphor {{continued}} {{for a while}} as hardware progressed to larger memory and <b>terminal</b> <b>interfaces.</b> Even with its limitations, this approach supported highly sophisticated applications.|$|R
50|$|In 1994, Bungie Software {{released}} Marathon. The game's dark corridors, eerie background music, stairs & platforms, strange aliens, {{and story}} told through <b>terminal</b> <b>interfaces</b> created a unique {{experience on the}} Mac.|$|R
5000|$|Book 1: Application Independent ICC to <b>Terminal</b> <b>Interface</b> Requirements ...|$|E
5000|$|<b>Terminal</b> <b>Interface</b> Monitor (TIM), that handled booting, keypad, seven-segment LEDs, and {{cassette}} tape ...|$|E
50|$|The POSIX <b>{{terminal}}</b> <b>interface</b> {{is derived}} from the terminal interfaces of various Unix systems.|$|E
50|$|The Sectéra Wireline <b>Terminal</b> <b>interfaces</b> {{between a}} {{standard}} telephone {{and the local}} exchange to the PSTN. It is connected by standard RJ11 jack. The device cannot be used to communicate without a connected telephone.|$|R
50|$|SMG$ is {{a library}} of screen {{management}} routines for OpenVMS. These routines allow programs to create text-based, <b>terminal</b> <b>interfaces</b> in a terminal-independent manner. This is similar in concept to the ncurses library made popular under UNIX.|$|R
2500|$|... the <b>terminal</b> user <b>{{interface}}</b> - {{what the}} travel agent interacts with by typing commands; this interface takes the commands an Agent has input, recognizes the commands, and then formats {{the result of}} those commands to be displayed on the 'green screen' (aka the <b>terminal</b> user <b>interface)</b> ...|$|R
50|$|The code as {{presented}} will {{run on a}} PDP-11/40 with RK-05 disk drive, LP-11 line printer interface, PCL-11 paper tape writer and KL-11 <b>terminal</b> <b>interface,</b> or a suitable PDP-11 emulator, such as SIMH.|$|E
50|$|DMR/dPMR {{does not}} {{currently}} appear {{on this list}} {{due to lack of}} mature standard (is still under active development), does not meet manufacturer interoperability requirements currently, has significant vendor lock-in issues and has no clearly defined user <b>terminal</b> <b>interface</b> standard.|$|E
50|$|Expect, an {{extension}} to the Tcl scripting language written by Don Libes, {{is a program}} to automate interactions with programs that expose a text <b>terminal</b> <b>interface.</b> Expect was originally written in 1990 for Unix systems, but since became available for Microsoft Windows and other systems.|$|E
50|$|Telenet {{supported}} remote concentrators for IBM 3270 family intelligent terminals, which communicated, via X.25 to Telenet-written {{software that}} ran in IBM 370x series front-end processors. Telenet also supported Block Mode <b>Terminal</b> <b>Interfaces</b> (BMTI) for IBM Remote Job Entry terminals supporting the 2780/3780 and HASP Bisync protocols.|$|R
5000|$|... the <b>terminal</b> user <b>{{interface}}</b> - {{what the}} travel agent interacts with by typing commands; this interface takes the commands an Agent has input, recognizes the commands, and then formats {{the result of}} those commands to be displayed on the 'green screen' (aka the <b>terminal</b> user <b>interface)</b> ...|$|R
25|$|DLCs can be {{configured}} as universal (UDLCs) or integrated (IDLCs). Universal DLCs {{have two}} terminals, a central office terminal (COT) and a remote terminal (RT), that function similarly. Both <b>terminals</b> <b>interface</b> with analog signals, convert to digital signals, and transport {{to the other}} side where the reverse is performed.|$|R
5000|$|Options: As of 1984, <b>Terminal</b> <b>interface</b> (eight terms supported), Terminal display, Terminal analog panel ($150), External sound {{digitiser}} ($1,650), Visual effects generator interface ($1,000), Custom interfaces ($1,000~), 10 MB {{mass storage}} & controller ($12,600), 9-track magnetic tape & controller ($8,800), Extra sound synthesiser modules ($4,900) ...|$|E
50|$|The POSIX <b>terminal</b> <b>interface</b> is the {{generalized}} abstraction, comprising both an Application Programming Interface for programs, {{and a set}} of behavioural expectations for users of a terminal, as defined by the POSIX standard and the Single Unix Specification. It is a historical development from the terminal interfaces of BSD version 4 and Seventh Edition Unix.|$|E
50|$|In SIMPLE, {{the method}} for exchanging TDL {{messages}} {{is to take}} the host generated message traffic from the MIDS/JTIDS <b>terminal</b> <b>interface</b> and repackage it for transmission across the SIMPLE network. The receiving SIMPLE node extracts the TDL message traffic from the received packet and presents it to the host interface {{as if it had been}} received from a MIDS/JTIDS terminal.|$|E
2500|$|... the layouts of {{particular}} screens of the <b>terminal</b> user <b>interface</b> ...|$|R
50|$|The {{operating}} system supported inter-system communication, job submission and file transfer between CP-6 systems and between CP-6 and CP-V and {{to and from}} IBM and other HASP protocol systems. The system used communications and <b>terminal</b> <b>interfaces</b> through a Honeywell Level 6 minicomputer-based front-end processor. Asynchronous, bisynchronous and TCP/IP communications protocols were supported.|$|R
5000|$|Router> enable Router# {{configure}} <b>terminal</b> Router(config)# <b>interface</b> s0/0/0 Router(config)# ip route 10.10.20.0 255.255.255.0 192.168.100.1 ...|$|R
50|$|Samterm {{presents}} {{windows to}} files being edited {{and to a}} persistent command window which accepts input as sam commands. Most common editing operations are quickly and naturally accomplished with the point-and-click interface, which also functions inside the command window. This latter fact allows commands to be edited (and resubmitted) just as any other text, a function inherited from the DMD 5620 <b>terminal</b> <b>interface.</b>|$|E
50|$|Because {{the input}} and output of the {{original}} game is over a <b>terminal</b> <b>interface,</b> it is relatively easy in Unix to redirect output to another program. One such program, Rog-O-Matic, was developed in 1981 to play and win the game, by four graduate students in the Computer Science Department at Carnegie-Mellon University in Pittsburgh: Andrew Appel, Leonard Harney, Guy Jacobson and Michael Loren Mauldin.|$|E
50|$|PolyMorphic Systems' first {{products}} were several interface boards {{based on the}} then-popular S-100 bus. These were compatible with other microcomputers such as the Altair 8800 and IMSAI 8080. The first was an A/D and D/A converter board. This {{was followed by a}} video <b>terminal</b> <b>interface</b> (VTI) card which became the primary display device for their systems. Later board-level products included CPU, RAM, and disk controller cards.|$|E
50|$|The group {{published}} its specifications {{under the}} name X/Open Portability Guide (or XPG). Issue 1 covered basic operating system interfaces, and was published {{within a year of}} the group's formation. Issue 2 followed in 1987, and extended the coverage to include Internationalization, <b>Terminal</b> <b>Interfaces,</b> Inter-Process Communication, and the programming languages C, COBOL, FORTRAN, and Pascal, as well as data access interfaces for SQL and ISAM. In many cases these were profiles of existing international standards.|$|R
5000|$|It {{was created}} in 1979 by SAS, Braathens and Swedish Railways. Many travel {{companies}} had computerized their systems at the time, and provided <b>terminal</b> <b>interfaces</b> for travel agencies. Each had their own system, often involving widely different codes and procedures. It was cumbersome and expensive for a travel agency to have multiple terminals, each one connected to a different provider. SMART solved this, by providing a single interface over the public data network Datex.|$|R
5000|$|... 1983: Sensitive {{device and}} systems {{electronics}} are now protected against surge voltages. Phoenix Contact special <b>terminal</b> blocks, <b>Interface,</b> and TRABTECH represent further innovations from the 1980s.|$|R
50|$|ISPF {{primarily}} {{provides an}} IBM 3270 <b>terminal</b> <b>interface</b> {{with a set}} of panels. Each panel may include menus and dialogs to run tools on the underlying Time Sharing Option (TSO). Generally, these panels just provide a convenient interface to do tasks—most of them execute modules of IBM mainframe utility programs to do the actual work. ISPF is frequently used to manipulate z/OS data sets via its Program Development Facility named ISPF/PDF, where PDF refers to Program Development Facility.|$|E
50|$|STREAMS's {{design is}} a modular {{architecture}} for implementing full-duplex I/O between kernel and device drivers. Its most frequent uses {{have been in}} developing terminal I/O (line discipline) and networking subsystems. In System V Release 4, the entire <b>terminal</b> <b>interface</b> was reimplemented using STREAMS. An important concept in STREAMS {{is the ability to}} push drivers custom code modules which can modify the functionality of a network interface or other device together to form a stack. Several of these drivers can be chained together in order.|$|E
50|$|The Big Board (1980) and Big Board II (1982) were Z80 based single-board {{computers}} {{designed by}} Jim Ferguson. They provided a complete CP/M compatible computer system {{on a single}} printed circuit board, including CPU, memory, disk drive interface, keyboard and video monitor interface. The printed circuit board was sized so as to allow attachment to an 8 inch floppy disk drive. The Big Board II added a hard disk drive interface, enhancements to system speed (4 MHz vs. 2.5 MHz) and enhancements to the <b>terminal</b> <b>interface.</b>|$|E
5000|$|From {{the late}} 1960s onwards, {{interactive}} computing such as via text-based computer <b>terminal</b> <b>interfaces</b> (as in Unix shells or read-eval-print loops), and later {{graphical user interfaces}} became common. Non-interactive computation, both one-off jobs such as compilation, and processing of multiple items in batches, became retrospectively referred to as batch processing, and the oxymoronic term batch job (in early use often [...] "batch of jobs") became common. Early use is particularly found at the University of Michigan, around the Michigan Terminal System (MTS); examples from 1968 and 1969: ...|$|R
5000|$|FRESS was a {{continuation}} of work done on van Dam's previous hypertext system, HES, developed the previous year. FRESS ran on an IBM 360-series mainframe running VM/CMS. It improved on HES's capabilities in many ways, inspired by Douglas Engelbart's NLS. FRESS implemented {{one of the first}} virtual <b>terminal</b> <b>interfaces,</b> in order to provide device-independence. It could run on various terminals from dumb typewriters up to the Imlac PDS-1 graphical minicomputer. On the PDS-1, it supported multi-window WYSIWYG editing and graphics display. The PDS-1 used a light pen, not a mouse, and the light pen could be [...] "clicked" [...] using a foot-pedal.|$|R
30|$|We have {{therefore}} designed an embedded {{biological engineering}} piece of equipment. The equipment outside of biological data should embed the required amount of energy. The device can obtain a biological engineering survey object scale. The equipment size and embedded objects of the reproduction life cycle would be compared {{by measuring the}} parameters of biological engineering. According to the measurement parameters, embedded devices for biological embedded engineering guarantee stability. There are some peripheral <b>terminal</b> <b>interfaces</b> in the embedded devices. These interfaces are used to establish the high coupling reaction environment for the intrinsic biological reproduction. The biological response module was designed in the embedded equipment.|$|R
