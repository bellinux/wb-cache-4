138|127|Public
25|$|In {{the late}} 18th century, {{there were several}} {{attempts}} <b>to</b> <b>recompile</b> the major halakhic opinions into a simpler, more accessible form.|$|E
25|$|Windows Interface Source Environment (WISE) was a {{licensing}} {{program from}} Microsoft which allowed developers <b>to</b> <b>recompile</b> and run Windows-based applications on Unix and Macintosh platforms. WISE SDKs {{were based on}} an emulator of the Windows API that could run on those platforms.|$|E
5000|$|As Ruby is an {{interpreted}} language, there's no need <b>to</b> <b>recompile</b> {{the application}} frequently during development.|$|E
5000|$|In {{addition}} {{to all of the}} efforts listed above, all applications had <b>to</b> be <b>recompiled</b> <b>to</b> become LFS-aware. The resulting binaries were typically not running on older releases of the same operating system. This was, and to some extent still remains, a problem for some application vendors.|$|R
5000|$|XCP {{allows a}} client to access memory on the ECU using a format defined in a {{separate}} A2L file. Because the A2L format file contains all the information to access the information, the ECU code does not have <b>to</b> be <b>recompiled</b> <b>to</b> access different measurements or calibrations.|$|R
50|$|Established on November 2, 1938, {{the park}} is officially named the Eduardo Ruiz National Park, named after a local writer and {{historian}} who dedicated himself <b>to</b> <b>recompiling</b> local legends. The park has 450 hectares of forest, 19 of which are centered {{on the origin of}} the Cupatitzio River, and open to the public. It is located in the northwestern park of the city and is completely surrounded by urban development.|$|R
5000|$|PHP {{interface}} - For {{the creation}} of custom web pages without having <b>to</b> <b>recompile</b> the cgi's ...|$|E
50|$|In {{the late}} 18th century, {{there were several}} {{attempts}} <b>to</b> <b>recompile</b> the major halakhic opinions into a simpler, more accessible form.|$|E
50|$|ACARM-ng's daemon allows {{addition}} {{and removal}} of new plug-ins {{without the need}} <b>to</b> <b>recompile</b> the core package. It makes system development and testing much easier.|$|E
50|$|All {{computer}} {{operating systems}} {{are designed for}} a particular computer architecture. Most software applications are limited to particular operating systems running on particular architectures. Although architecture-independent operating systems and applications exist, most need <b>to</b> be <b>recompiled</b> <b>to</b> run on a new architecture. See also a list of common operating systems and their supporting architectures.|$|R
5000|$|Configuring event hooks to run {{arbitrary}} code at specific times, for example <b>to</b> automatically <b>recompile</b> source code after saving a buffer (...) ...|$|R
50|$|At a time (in the 1960s and 1970s) when IBM/360 series {{programs}} had <b>to</b> be <b>recompiled</b> <b>to</b> run {{in different}} machine and/or operating system environments, one significant {{feature of the}} 1900 series was that programs would function unaltered on any 1900 system, i.e. {{without the need for}} recompilation. Unfortunately ICT, and later ICL, was unable to capitalise on this major advantage to make significant inroads into IBM's customer base.|$|R
5000|$|PHP4Delphi {{allows you}} to embed the PHP {{interpreter}} into your Delphi application so you can extend and customize the application without having <b>to</b> <b>recompile</b> it.|$|E
50|$|Windows Interface Source Environment (or WISE) was a {{licensing}} {{program from}} Microsoft which allowed developers <b>to</b> <b>recompile</b> and run Windows-based applications on UNIX and Macintosh platforms.|$|E
50|$|The most {{important}} run-time debugging feature was {{the ability to}} change the code on the fly while debugging. This allowed for bugs to be fixed while debugging without the need <b>to</b> <b>recompile.</b>|$|E
50|$|The CDS {{software}} is constituted of a kernel which {{is able to}} create the GUI hierarchy specified in the DF during initialization, thus not needing <b>to</b> be <b>recompiled</b> if the GUI definition changes.|$|R
5000|$|Software build scripts such as Unix Make, Node npm install, php composer, Twitter bower install, or Apache Ant. They need to {{know what}} files have changed so only the correct files need <b>to</b> be <b>recompiled.</b>|$|R
50|$|XVT Net allows {{applications}} built {{using either}} of the other editions <b>to</b> be <b>recompiled</b> as a networked application. The application may then be run on a server which thin clients can connect {{to in order to}} use the application.|$|R
50|$|The engine {{also had}} the ability <b>to</b> <b>recompile</b> {{collections}} of part hierarchies into single composite parts on the fly, which was how the game {{was able to keep}} so much animation on the screen.|$|E
5000|$|In computing, Maak is {{a utility}} similar to make, {{designed}} to build complex software systems while avoiding the need <b>to</b> <b>recompile</b> {{the entire system}} every time a change is made. [...] "Maak" [...] is Dutch for [...] "make".|$|E
50|$|When a {{dictionary}} object is changed, {{a program that}} references the changed object will automatically reference the new version {{the next time the}} program runs. Because ABAP is interpreted, it is not necessary <b>to</b> <b>recompile</b> programs that reference changed dictionary objects.|$|E
50|$|With modular kernels {{it allows}} adding filesystems as any kernel module, even third party ones. With non-modular kernels however it {{requires}} the kernel <b>to</b> be <b>recompiled</b> with the new filesystem code (and in closed-source kernels, this makes third party filesystem impossible).|$|R
5000|$|The {{technique}} used was to only virtualize the guest interrupt control. This method allowed the real-time kernel {{to convert the}} guest operating system into a system that was completely preemptible but that could still directly control, for example, storage devices. In particular, standard drivers for the guest worked without source modification although they needed <b>to</b> be <b>recompiled</b> <b>to</b> use the virtualization [...] "hooks". See also paravirtualization. The UNIX [...] "pipe" [...] was adapted to permit real-time and non-real-time programs to communicate although other methods such as shared memory were also added.|$|R
50|$|Content {{developed}} for the Development Kit 2 using SDK version 0.8 or above are compatible with the Rift; however content {{developed for}} the Development Kit 1 or with older versions of the SDK will have <b>to</b> be <b>recompiled</b> using the latest SDK version to be compatible.|$|R
5000|$|The new {{platform}} bore {{little resemblance}} to its predecessor. While programmers expected to be able <b>to</b> <b>recompile</b> their Visual Basic source to a [...]NET target, {{the reality of the}} situation was that Visual Basic [...]NET was a vastly different paradigm.|$|E
50|$|When using {{late binding}} the {{timestamp}} check is not performed, and the stored procedure is executed via an anonymous PL/SQL block. While {{this can be}} slower, it removes the need <b>to</b> <b>recompile</b> all of the client applications when a stored procedure changes.|$|E
5000|$|ColdFusion 8 {{natively}} supports [...]NET {{within the}} CFML syntax. ColdFusion developers can simply call any [...]NET assembly without needing <b>to</b> <b>recompile</b> or alter the assemblies in any way. Data types are automatically translated between ColdFusion and [...]NET (example: [...]NET DataTable â†’ ColdFusion Query).|$|E
50|$|XS modules are {{difficult}} to write and maintain, and they may only be installed if a C compiler and the header files that the Perl interpreter was compiled against are available. Also, new versions of Perl may break binary compatibility requiring XS modules <b>to</b> be <b>recompiled.</b>|$|R
50|$|Just-in-time {{compilation}} {{can make}} use of runtime information <b>to</b> dynamically <b>recompile</b> parts of the executed code to generate a more efficient native code. If the dynamic profile changes during execution, it can deoptimize the previous native code, and generate a new code optimized with {{the information from the}} new profile.|$|R
5000|$|An {{example of}} why it might be desired to do {{this would be a}} {{software}} project needs <b>to</b> be <b>recompiled</b> with make. The makefile has been changed and make needs to be run again. However, if make is run immediately it will return:$ makemake: nothing to be done for `all' ...|$|R
50|$|Windows Interface Source Environment (WISE) was a {{licensing}} {{program from}} Microsoft which allowed developers <b>to</b> <b>recompile</b> and run Windows-based applications on Unix and Macintosh platforms. WISE SDKs {{were based on}} an emulator of the Windows API that could run on those platforms.|$|E
5000|$|... "Universal" [...] {{binaries}} {{are also}} provided for 32 and 64 bits linux distributions as self extractable tgz archive files. Those binaries can be run [...] "as is", no need <b>to</b> <b>recompile</b> the sources (only Python {{and the standard}} X11 graphical libraries must be installed).|$|E
50|$|In both cases, VirtualBox uses CSAM and PATM {{to inspect}} and patch the {{offending}} instructions whenever a fault occurs. VirtualBox {{also contains a}} dynamic recompiler, based on QEMU <b>to</b> <b>recompile</b> any real mode or protected mode code entirely (e.g. BIOS code, a DOS guest, or any operating system startup).|$|E
50|$|SOM defines an {{interface}} between programs, or between libraries and programs, so that an object's interface {{is separated from}} its implementation. SOM allows classes of objects to be defined in one programming language and used in another, and it allows libraries of such classes to be updated without requiring client code <b>to</b> be <b>recompiled.</b>|$|R
5000|$|The {{compiler}} {{was particularly}} noteworthy, {{as could be}} expected given Multiflow's technology. The company built a new compiler, in a similar style to that developed at Yale, but industrial-strength and with the incorporation of much commercially-necessary capability. In addition to implementing aggressive trace scheduling, it was known for its reliability, for its incorporation of state-of-the-art optimization, and {{for its ability to}} handle simultaneously many different language variants and all of the different object-code incompatible models of the Multiflow Traces. (While code from a 7/X00 could run correctly on a 14/X00, the nature of the architecture mandated that it would have <b>to</b> be <b>recompiled</b> <b>to</b> run faster than it did on the 7/.) ...|$|R
40|$|Abstractâ€”This paper {{describes}} the extensibility mechanism {{that has been}} incorporated to the CAIN Adaptation Engine, that provides audiovisual content adaptation based on user preferences, network capabilities and terminal limitations. The integration of new adaptation modules needs no code modifications in the core system, so {{it does not have}} <b>to</b> be <b>recompiled</b> for adding or modifying adaptation modules...|$|R
