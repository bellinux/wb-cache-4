1984|2471|Public
500|$|Kriegsmarine Commander of Submarines (...) Karl Dönitz {{devised a}} plan to attack Scapa Flow by {{submarine}} {{within days of the}} outbreak of war. Its goal would be twofold: first, that displacing the Home Fleet from Scapa Flow would slacken the British North Sea blockade and grant Germany greater freedom to attack the Atlantic convoys; second, the blow would be a symbolic act of vengeance, striking at the same location where the German High Seas Fleet had surrendered and scuttled itself following Germany's defeat in the First World War. Dönitz hand-picked Kapitänleutnant Günther Prien for the <b>task,</b> <b>scheduling</b> the raid for the night of 13/14 October 1939, when the tides would be high and the night moonless.|$|E
5000|$|Hardware accelerators for <b>task</b> <b>scheduling</b> and synchronization: ...|$|E
5000|$|... #Subtitle level 3: Heterogeneous multi-processing (global <b>task</b> <b>scheduling)</b> ...|$|E
40|$|Aim at {{the problem}} of <b>tasks</b> <b>scheduling</b> problem for grid {{computing}} based on fuzzy constraints, propose <b>tasks</b> <b>scheduling</b> model of grid computing about <b>tasks</b> <b>scheduling</b> problem. Using fuzzy AHP(analytic hierarchy process) processes fuzzy constraints weight value. Utilize the merit of differential evolutionary algorithm, that is, the algorithm don 2 ̆ 7 t need objective function is continuous and differentiable. Propose fuzzy differential evolutionary algorithm, the algorithm can process <b>tasks</b> <b>scheduling</b> for grid computing based on fuzzy constraint. In the experiments, compare the proposed algorithm with the existing algorithms. the proposed algorithm is more favorable than the existing algorithm in term of reliability, security and drooped task numbers...|$|R
30|$|The Nb_Task and the Nb_Task_Slave are {{the number}} of <b>tasks</b> <b>scheduled</b> on the Master and {{the number of}} <b>tasks</b> <b>scheduled</b> on the Slave, respectively. As noted here, these two signals were added solely for the purpose of {{simulation}} in ModelSim (to check the scheduling result). In the real case we do not need these two output signals since this information comes from the partitioning block.|$|R
5000|$|... cron is most {{suitable}} for <b>scheduling</b> repetitive <b>tasks.</b> <b>Scheduling</b> one-time <b>tasks</b> is often more easily accomplished using the associated at utility.|$|R
5000|$|Version 7: 2000 (dynamic cache, <b>task</b> <b>scheduling</b> and event handling, {{cross-platform}} administration tools) ...|$|E
5000|$|Director, {{which manages}} {{end-user}} connection, authentication & authorisation, and workflow <b>task</b> <b>scheduling</b> and execution.|$|E
5000|$|El-Rewini, Hesham, Theodore G. Lewis, and Hesham H. Ali. <b>Task</b> <b>scheduling</b> in {{parallel}} and distributed systems. Prentice-Hall, Inc., 1994.|$|E
40|$|Abstract. Real-time <b>task</b> <b>schedule</b> {{problem in}} Chip-Multiprocessor (CMP) {{receives}} wide attention in recent years. It {{is partly because}} the increasing demand for CMP solutions call for better schedule algorithm to exploit the full potential of hardware, {{and partly because of}} the complexity of schedule problem, which itself is an NP-hard problem. To address this <b>task</b> <b>schedule</b> problem, various of heuristics have been studied, among which, Genetic Algorithm (GA), Particle Swarm Optimization (PSO) and Simulated Annealing (SA) are the most popular ones. In this paper, we implement these 3 schedule heuristics, and compare their performance under the context of real-time <b>tasks</b> <b>scheduling</b> on CMP. According to the results of our intensive simulations, PSO has the best fitness optimization of these 3 algorithms, and SA is the most efficient algorithm...|$|R
40|$|Coupled <b>tasks</b> <b>scheduling</b> was {{originally}} introduced for modelling complex radar devices. It is still used for controlling such devices and applied in similar applications. This paper considers {{a problem of}} coupled <b>tasks</b> <b>scheduling</b> on one processor, under the assumptions that all processing times are equal to 1, the gap has a constant exact length and the precedence constraints are strict. Although it is proven that the problem stated above is NP-hard in the strong sense if the precedence constraints have a form of a general graph, {{it is possible to}} solve some of its relaxed versions in polynomial time. This paper contains a solution for the problem of coupled <b>tasks</b> <b>scheduling</b> with an assumption that the precedence constraints graph has a form of chains and it presents an algorithm that can solve the problem with such assumption in time O(n[*]log[*]n). ...|$|R
50|$|Beyond {{organizing}} and sharing files, these applications can often {{also be used}} as a business communication tool for assigning <b>tasks,</b> <b>scheduling</b> meetings, and maintaining contact information.|$|R
50|$|PIC {{projects}} may utilize Real time {{operating systems}} such as FreeRTOS, AVIX RTOS, uRTOS, Salvo RTOS or other similar libraries for <b>task</b> <b>scheduling</b> and prioritization.|$|E
5000|$|<b>Task</b> <b>scheduling,</b> {{where the}} Stateflow chart {{is used to}} {{schedule}} when specific tasks occur, either within the Stateflow chart or within the overall Simulink model ...|$|E
50|$|By {{removing}} run-time <b>task</b> <b>scheduling</b> and mutex locking—two services traditionally {{served by}} an RTOS—Atom can {{eliminate the need}} and overhead of an RTOS in embedded applications.|$|E
40|$|Grid {{computing}} {{is a form}} of {{distributed computing}} that involves coordinating and sharing computing, application, data storage or network resources across dynamic and geographically dispersed organizations. The goal of grid <b>tasks</b> <b>scheduling</b> is to achieve high system throughput and to match the application need with the available computing resources. This is matching of resources in a non-deterministically shared heterogeneous environment. The complexity of scheduling problem increases with the size of the grid and becomes highly difficult to solve effectively. To obtain good methods to solve this problem a new area of research is implemented. This area is based on developed heuristic techniques that provide an optimal or near optimal solution for large grids. In this paper we introduce a <b>tasks</b> <b>scheduling</b> algorithm for grid computing. The algorithm is based on simulated annealing method. The paper shows how to search for the best <b>tasks</b> <b>scheduling</b> for grid computing...|$|R
40|$|Fermilab {{will enter}} a new {{operational}} era with {{the installation of}} the Main Injector (MI), a circular accelerator and the Recycler (RCYC), a anti-proton storage ring. This transition will induce {{a significant increase in the}} complexity of the operational scenarios undertaken and has prompted the design of a more sophisticated task scheduler, one that is capable of providing a level of versatility, efficiency and automation to the process of generating <b>task</b> <b>schedules.</b> <b>Task</b> <b>schedules,</b> which serve to co-ordinate the various Fermilab machines, are currently defined by utilizing a de-centralized repository of heuristics related to how the different machines interact. The proposed task scheduler encapsulates these heuristics by resolving <b>task</b> <b>schedules</b> into sets of task groupings termed modules and then assigning various attributes to these modules. These attributes, which denote heuristics such as how quicky MI resets can be generated, serve to define the relationship of tasks within module [...] ...|$|R
40|$|The Space Station Axiomatic Fault Isolating Expert Systems (SAFTIES) system {{deals with}} the {{hierarchical}} distribution of control and knowledge among independent expert systems doing fault isolation and scheduling of Space Station subsystems. On its lower level, fault isolation is performed on individual subsystems. These fault isolation expert systems contain knowledge about the performance requirements of their particular subsystem and corrective procedures which {{may be involved in}} repsonse to certain performance errors. They can control the functions of equipment in their system and coordinate system <b>task</b> <b>schedules.</b> On a higher level, the Executive contains knowledge of all resources, <b>task</b> <b>schedules</b> for all systems, and the relative priority of all resources and tasks. The executive can override any subsystem <b>task</b> <b>schedule</b> in order to resolve use conflicts or resolve errors that require resources from multiple subsystems. Interprocessor communication is implemented using the SAFTIES Communications Interface (SCI). The SCI is an application layer protocol which supports the SAFTIES distributed multi-level architecture...|$|R
50|$|While in {{traditional}} multi-user computer systems and early supercomputers, job scheduling {{was in effect}} a <b>task</b> <b>scheduling</b> problem for processing and peripheral resources, in a massively parallel system, the job management system needs to manage the allocation of both computational and communication resources. It is essential to tune <b>task</b> <b>scheduling,</b> and the operating system, in different configurations of a supercomputer. A typical parallel job scheduler has a master scheduler which instructs some number of slave schedulers to launch, monitor, and control parallel jobs, and periodically receives reports from them {{about the status of}} job progress.|$|E
50|$|Webware for Python is an object-oriented, Python web {{application}} framework. The suite uses well known design patterns {{and includes a}} fast application server, servlets, Python Server Pages (PSP), object-relational mapping, <b>Task</b> <b>Scheduling,</b> Session Management, and many other features.|$|E
5000|$|Mapping : In {{the fourth}} and final stage of the design of {{parallel}} algorithms, the developers specify where each task is to execute. This mapping problem does not arise on uniprocessors or on shared-memory computers that provide automatic <b>task</b> <b>scheduling.</b>|$|E
40|$|This paper {{presents}} the dynamic <b>tasks</b> <b>scheduling</b> algorithm for heterogeneous systems in real time. The method for initial information transformation is proposed which allows solving scheduling problem by known methods. ? ?????? ????????? ???????? ????????????? ????????????? ????? ? ???????????? ??????? ? ???????? ???????. ??????????? ????? ?????????????? ???????? ??????????, ??????????? ?????? ?????? ???????????? ?????????? ????????...|$|R
40|$|Abstract. Parallel test {{is the key}} {{technology}} of the NxTest technology and the parallel test <b>tasks</b> <b>scheduling</b> {{is one of the}} important part of parallel test. The mathematical model of the problem was introduced, according to the advantage of solving the problem of dynamic scheduling with artificial bee colony algorithm; an approach of parallel test scheduling based on artificial bee colony algorithm is brought forward. An example was given, the result of simulation shows that this algorithm’s constringency fast and the result has a high precision, it is an efficient way of solving the problem of optimized parallel test <b>tasks</b> <b>scheduling...</b>|$|R
40|$|Suppose that {{a project}} {{consists}} of n separate tasks and {{one and only}} one task can be completed in one time period. However, since some tasks can be started only before others have been completed, only feasible <b>task</b> <b>schedules</b> are considered. There is a cost associated with the time at which a task is completed and the project cost {{is equal to the}} sum of all the task costs. How can a feasible <b>task</b> <b>schedule</b> with minimum project cost be found for completing the entire project? This research proposes using a genetic algorithm to solve this problem efficiently...|$|R
50|$|WinZip 10 {{added support}} for {{creating}} and extracting PPMd-compressed ZIP archives. It {{was the last}} major release to officially support Windows 98/ME. WinZip Pro was added in this release, which added automation and <b>task</b> <b>scheduling</b> features. This version was released in 2005.|$|E
5000|$|WDDM 1.0/1.1 only allows {{rudimentary}} <b>task</b> <b>scheduling</b> using [...] "batch queue" [...] granularity; {{improvements to}} multitasking, {{as well as}} fast context switching and support for virtual memory, were initially expected in versions tentatively named WDDM 2.0 and WDDM 2.1, which were announced at WinHEC 2006.|$|E
50|$|The {{underlying}} AmigaOS {{allows the}} Workbench to launch multiple applications that can execute concurrently. This is achieved through Exec, the Amiga's multi-tasking kernel, which handles memory management, message passing, and <b>task</b> <b>scheduling.</b> Applications launched from Workbench could report their success back to Workbench, {{but this was}} not a requirement and few actually did.|$|E
40|$|We {{present an}} auction-based {{approach}} {{to allocate tasks}} that have complex time constraints and interdependencies {{to a group of}} cooperative agents. The approach combines the advantages of planning and scheduling with the ability to make distributed decisions. We focus on methods for modeling and evaluating the decisions an agent must make when deciding how to <b>schedule</b> <b>tasks.</b> In particular, we discuss how to specify <b>task</b> <b>schedules</b> when requesting quotes from other agents. The way <b>tasks</b> are <b>scheduled</b> affects the number and types of bids received, and therefore the quality of the solutions that can be produced...|$|R
40|$|Distributed {{real-time}} and embedded (DRE) {{systems are}} often subject to stringent timing constraints. Scheduling techniques, such as rate monotonic scheduling, {{can be used}} to ensure that real-time deadlines are met. Although a processor cache can reduce the time required for a <b>task</b> <b>schedule</b> to execute, multiple <b>task</b> execution <b>schedules</b> may exist that meet deadlines but differ in cache utilization efficiency. It is hard to determine which <b>task</b> execution <b>schedules</b> will utilize the processor cache most efficiently and provide the greatest reductions in execution time without jeopardizing real-time deadlines. The work in this paper provides three key contributions to predictive performance evaluation of processor caching in DRE systems. First, we present the System Metric for Application Cache Knowledge (SMACK), which is a novel approach to quantify the expected cache utilization efficiency of different schedules. Second, we employ SMACK to predict the relative execution time and cache misses of 11 simulated software systems with 2 different execution schedules per system. Third, we empirically evaluate the impact of using SMACK as a heuristic to alter <b>task</b> <b>schedules</b> to reduce system execution time. Our results show that heuristic scheduling with SMACK increases cache performance, reduces execution time, and satisfies real-time scheduling constraints and safety requirements without requiring significant hardware or software changes...|$|R
30|$|MapReduce {{simplifies}} many of {{the difficulties}} encountered in parallelizing data management operations across a cluster of individual machines, thus becoming a simple model for distributed computing. Applying MapReduce, many complexities, such as data partition, <b>tasks</b> <b>scheduling</b> across many machines, machine failures handling, and inter-machine communications are reduced.|$|R
50|$|Atom is a {{concurrent}} programming language intended for embedded applications. Atom features compile-time <b>task</b> <b>scheduling</b> and generates code with deterministic execution time and memory consumption, simplifying worst case execution time analysis for applications that require hard realtime performance. Atom's concurrency model {{is that of}} guarded atomic actions, which eliminates the need for, and the problems of using, mutex locks.|$|E
50|$|Trace support through generic trace macros. Tools such as Tracealyzer (a.k.a. FreeRTOS+Trace, {{provided}} by the FreeRTOS partner Percepio) can thereby record and visualize the runtime behavior of FreeRTOS-based systems. This includes <b>task</b> <b>scheduling</b> and kernel calls for semaphore and queue operations. Tracealyzer is a commercial tool, but also available in a feature-limited free version. The full version is priced at US$1,200.|$|E
5000|$|The general {{principle}} of grid computing {{is to use}} distributed computing resources from diverse administrative domains to solve a single task, by using resources as they become available. Traditionally, most grid systems have approached the <b>task</b> <b>scheduling</b> challenge by using an [...] "opportunistic match-making" [...] approach in which tasks are matched to whatever resources may be available at a given time.|$|E
50|$|Most of {{the work}} needed to run Sunward {{is done by the}} members. Maintenance work is broken into small monthly job {{allocations}} on a <b>task</b> <b>schedule.</b> These <b>tasks</b> are distributed to all members. Examples include plowing snow, facilitating meetings, tending trees, managing finances, mopping floors, etc.|$|R
40|$|This paper {{presents}} an algorithm for off-line <b>scheduling</b> of communicating <b>tasks</b> with precedence and exclusion constraints in distributed hard real-time systems. Tasks {{are assumed to}} communicate via message passing based on a time-bounded communication paradigm such as the real-time channel [1]. The algorithm uses a branch-and-bound (B&B) technique {{to search for a}} <b>task</b> <b>schedule</b> by minimizing maximum task lateness (defined as the difference between task completion time and task deadline), and exploits the interplay between <b>task</b> and message <b>scheduling</b> {{to improve the quality of}} solution. It generates a complete schedule at each vertex in the search tree, and can be made to yield a feasible schedule (found before reaching an optimal solution), or proceed until an optimal <b>task</b> <b>schedule</b> is found. We have conducted an extensive simulation study to evaluate the performance of the proposed algorithm. The algorithm is shown to scale well with respect to system size, and degree of intertask intera [...] ...|$|R
5000|$|Project management. Manage project plans, <b>task</b> assignments, <b>scheduling.</b>|$|R
