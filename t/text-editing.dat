61|4|Public
25|$|Notepad is {{a simple}} text editor for Microsoft Windows and a basic <b>text-editing</b> program which enables {{computer}} users to create documents. It was first released as a mouse-based MS-DOS program in 1983, and has been included in all versions of Microsoft Windows since Windows 1.0 in 1985.|$|E
25|$|The core {{functionality}} {{of the site}} relies on standard HTML and HTTP features, allowing for wide compatibility among platforms and browsers; Flickr's functionality includes RSS and Atom feeds and an API that enables independent programmers to expand its services. This includes {{a large number of}} third-party Greasemonkey scripts that enhance and extend the functionality of Flickr. In 2006, Flickr was the second most extended site on userscripts.org. Organizr and most of Flickr's other <b>text-editing</b> and tagging interfaces use Ajax, with which most modern browsers are compliant. Images can be posted to the user's photostream via email attachments, which enables direct uploads from many cameraphones and applications. Flickr uses the Geo microformat on over 3 million geotagged images.|$|E
50|$|The CPT Communicator was an add-on to the CPT 4200 {{that allowed}} {{data to be}} {{transferred}} from one <b>text-editing</b> machine to another, or between a <b>text-editing</b> machine and a remote computer, via phone lines. Price: not available.|$|E
5000|$|... 2011: [...] "Spain - Looting the Seas" [...] - an ICIJ {{investigation}} into how Spain {{is the biggest}} receiver of fish-industry subsidies {{while at the same}} time being the biggest offender. Laurin advised and <b>text-edited</b> on the project.|$|R
5000|$|The album {{ends with}} a short extract from one of Trios concerts, that {{includes}} a <b>text-edited</b> short version of the Jamaican folk song Banana Boat Song which was a hit for Harry Belafonte. Instead of the final chant [...] "Day-O" [...] of the original, Behrens shouts: [...] "Tri-o" [...] to which the audience responds [...] "Tri-i-i-o".|$|R
30|$|Besides {{the crash}} problem, {{we also need}} to test if IM-Visor can {{guarantee}} that a user app is able to run without any input data missing or input data disorder (the input data are from IM-Visor and IME apps). For each user app, we design several different use cases, and for each use case, we use some commonly used IME apps including Sogou, QQ, TouchPal, Baidu and iFly to test. We have tested 10 typical user apps including the Email Client and SMS. For the Email Client we design two use cases including normal log-in and resumed log-in (i.e., the user is typing and then he picks up a phone call and resumes to log in after hanging up). For the SMS, we also design two use cases including normal <b>text-edit</b> and resumed <b>text-edit.</b> After experiments for 20 times, we manually verify and find that a user app can work normally without any data missing or data disorder.|$|R
50|$|Sam extends {{its basic}} <b>text-editing</b> command set to {{handling}} of multiple files, providing similar pattern-based conditional and loop commands for filename specification. Any sequence of <b>text-editing</b> commands may be applied {{as a unit}} to each such specification.|$|E
5000|$|Suffix trees {{can be used}} {{to solve}} a large number of string {{problems}} that occur in <b>text-editing,</b> free-text search, computational biology and other application areas. Primary applications include: ...|$|E
5000|$|XEmacs <b>text-editing</b> {{features}} {{commands to}} manipulate words and paragraphs (deleting them, moving them, moving through them, and so forth), syntax highlighting for making source code easier to read, and [...] "keyboard macros" [...] for performing arbitrary batches of editing commands {{defined by the}} user.|$|E
40|$|ABSTRACT: In the {{leaf-cutting ant}} Alta vollen-weideri, the worker caste {{exhibits}} a pronounced size-polymorphism, and {{division of labor}} is dependent on worker size (alloethism). Behavior is largely guided by olfaction, and the olfactory system is highly developed. In a recent study, two different pheno-types of the antennal lobe of Alta vollenweideri work-ers were found: MG- and RG-phenotype (with/with-out a macroglomerulus). Here we ask whether the glomerular numbers are related to worker size. We found that the antennal lobes of small workers con-tain ~ 390 glomeruli (Iow-number; LN-phenotype), and in large workers we found a substantially higher number of ~ 440 glomeruli (high-number; HN-pheno-type). All LN-phenotype workers and some small HN-phenotype workers do not possess an MG (LN-RG-phenotype and HN-RG-phenotype), and the remaining majority of HN-phenotype workers do possess an MG (HN-MG-phenotype). Using mass-staining of antennal olfactory receptor neurons we CK, CJK, and WR conceived and designed the experiments. CK collected the data. CK and CJK analyzed the data and wrote the manuscript. WR <b>text-edited</b> the manuscript...|$|R
50|$|Notepad is {{a simple}} text editor for Microsoft Windows and a basic <b>text-editing</b> program which enables {{computer}} users to create documents. It was first released as a mouse-based MS-DOS program in 1983, and has been included in all versions of Microsoft Windows since Windows 1.0 in 1985.|$|E
50|$|Dixon met {{his first}} wife, {{journalist}} Trudi Groves {{who was then}} {{a partner in a}} <b>text-editing</b> company, in 1987. After marrying in 1988 and selling his baking business, they moved to Belgium, but later returned to the UK and lived in Surrey, with their two children. Dixon has three children from prior relationships.|$|E
50|$|The system offered linked <b>text-editing</b> work {{stations}} that shared a storage unit a central processor unit, CRT-based display stations (IBM 5253 and 5254), a daisy wheel printer (IBM 5257) and an ink jet printer (IBM 5258). Depending on the model, {{from one to}} 18 display stations and from three to 12 printers could be attached.|$|E
50|$|Although no {{software}} {{beyond a}} scanning utility is {{a feature of}} any scanner, many scanners come bundled with software. Typically, {{in addition to the}} scanning utility, some type of image-editing application (such as Photoshop), and optical character recognition (OCR) software are supplied. OCR software converts graphical images of text into standard text that can be edited using common word-processing and <b>text-editing</b> software; accuracy is rarely perfect.|$|E
50|$|It also {{supports}} several more advanced capabilities, such as batch editing/saving/renaming, fine-tuning of midtones, highlights, and shadows, and red-eye removal. It can adjust brightness, contrast, hue, and saturation, including automatic adjustments that {{can sometimes be}} quite helpful. It also has easy-to-use features such as one-click image compression, and resizing to a user's own choice. It does not however, offer any sort of actual drawing or <b>text-editing</b> tools.|$|E
5000|$|The PDP-1 uses punched {{paper tape}} as its primary storage medium. Unlike punched card decks, which could be sorted and re-ordered, paper tape is {{difficult}} to physically edit. This inspired the creation of <b>text-editing</b> programs such as Expensive Typewriter and TECO. Because it is equipped with online and offline printers that were based on IBM electric typewriter mechanisms, {{it is capable of}} what, in 1980s terminology, would be called [...] "letter-quality printing" [...] and therefore inspired TJ-2, arguably the first word processor.|$|E
5000|$|Map {{providers}} generally collect, aggregate {{and supply}} {{data in a}} well-defined and documented file format that is specifically intended for information interchange, e.g. Navteq uses Standard Interchange Format (SIF) and GDF, while Tele Atlas uses a proprietary form of GDF. [...] It is usually in a plain-text form (ASCII) consisting of fields that are easily parsed and interpreted by the various parties who will handle it. The portable format allows additions, deletions and modifications to be readily performed by simple <b>text-editing</b> programs.|$|E
5000|$|Apart {{from the}} usual <b>text-editing</b> capabilities, {{collaborative}} editing is one of SubEthaEdit's marquee features. The collaboration is document-based, non-locking, and non-blocking. Anyone participating in the collaborative edit can type in the document anywhere at any time. Using Bonjour (formerly Rendezvous) and BEEP, SubEthaEdit works without any configuration on the LAN but can also coordinate collaborative editing over the Internet. SubEthaEdit {{can be used for}} distributed pair programming and collaborative note-taking in conferences. In 2007, TheCodingMonkeys licensed this [...] "Subetha Engine" [...] to Panic for use in Coda.|$|E
5000|$|Plug-ins {{appeared}} {{as early as}} the mid 1970s, when the EDT text editor running on the Unisys VS/9 operating system using the UNIVAC Series 90 mainframe computers provided the ability to run a program from the editor and to allow such a program to access the editor buffer, thus allowing an external program to access an edit session in memory. [...] The plug-in program could make calls to the editor to have it perform <b>text-editing</b> services upon the buffer that the editor shared with the plug-in. The Waterloo Fortran compiler used this feature to allow interactive compilation of Fortran programs edited by EDT.|$|E
5000|$|The core {{functionality}} {{of the site}} relies on standard HTML and HTTP features, allowing for wide compatibility among platforms and browsers; Flickr's functionality includes RSS and Atom feeds and an API that enables independent programmers to expand its services. This includes {{a large number of}} third-party Greasemonkey scripts that enhance and extend the functionality of Flickr. In 2006, Flickr was the second most extended site on userscripts.org. [...] Organizr and most of Flickr's other <b>text-editing</b> and tagging interfaces use Ajax, with which most modern browsers are compliant. Images can be posted to the user's photostream via email attachments, which enables direct uploads from many cameraphones and applications. Flickr uses the Geo microformat on over 3 million geotagged images.|$|E
50|$|Commands {{are sent}} to the editor by typing in text {{in the same manner}} as {{entering}} regular text, but the first character of the line (other than a space) is the command symbol, which defaults to the at sign ("@"). When a line begins with an @, the remainder of the line is used as a <b>text-editing</b> command. To enter a line of text beginning with @ which is not an editor command, it is necessary to prefix the line with a second @ sign, in which case, the first @ will be stripped off, and the line taken as text rather than a command. It is also possible to issue a command that the command indicator be changed from @ to a different character. One use for this feature is to write scripts to have EDT perform various actions upon another file. The command set of the editor includes the ability to create unattended programmable editing sessions through the use of test, comparison, branch and looping functions.|$|E
40|$|Abstract]: The {{ability to}} {{identify}} schematic knowledge is an important goal for both assessment and instruction. In the current paper, schematic knowledge of statistical probability theory is explored from the declarative-procedural framework using multiple methods of assessment. A sample of 90 undergraduate introductory statistics students was required to classify 10 pairs of probability problems as similar or different; to identify whether 15 problems contained sufficient, irrelevant, or missing information (text-edit); and to solve 10 additional problems. The complexity of the schema on which the problems were based was also manipulated. Detailed analyses compared <b>text-editing</b> and solution accuracy {{as a function of}} <b>text-editing</b> category and schema complexity. Results showed that <b>text-editing</b> tends to be easier than solution and differentially sensitive to schema complexity. While <b>text-editing</b> and classification were correlated with solution, only <b>text-editing</b> problems with missing information uniquely predicted success. In light of previous research these results suggest that <b>text-editing</b> is suitable for supplementing the assessment of schematic knowledge in development...|$|E
40|$|Research {{indicates}} that older adults have difficulty acquiring <b>text-editing</b> skills. associated with <b>text-editing</b> programs create problems for older learners given the age-related changes in cognitive abilities. study compared the learning efficiency {{of older adults}} for three <b>text-editing</b> programs which varied in format and command structure. of 45, computer naive, women {{ranging in age from}} 4 0 to 70 years participated. The results indicated significant differences in learning efficiency as a function of <b>text-editing</b> program. Participants using a full screen editor with pull down menus demonstrated significantly better performance than did those using other programs. difficulties encountered by subjects during learning. information can be used as input into the design of future software and training programs. The data suggest that the cognitive demands This A total Data was also collected regarding types of This type o...|$|E
40|$|Machine {{learning}} {{research has}} been very successful at producing powerful, broadly applicable classification learners. However, many practical learning problems do not fit the classification framework well, {{and as a result}} the initial phase of suitably formulating the problem and incorporating the relevant domain knowledge can be very difficult and time-consuming. Here we propose a framework to systematize and speed this process, based on the notion of version space algebra. We extend the notion of version spaces beyond concept learning, and propose that carefully-tailored version spaces for complex applications can be built by composing simpler, restricted version spaces. We illustrate our approach with SMARTedit, a programming by demonstration application for repetitive <b>text-editing</b> that uses version space algebra to guide a search over <b>text-editing</b> action sequences. We demonstrate the system on a suite of repetitive <b>text-editing</b> problems and present experimental re [...] ...|$|E
40|$|This study {{reports on}} the effect of {{different}} levels of proficiency on the students 2 ̆ 7 achievements in collaborative learning instruction among 30 Persian-speaking EFL college students. Having been divided into dyads with different levels of proficiency, these subjects participated in nine sessions of collaborative instruction based on the form focused collaborative <b>text-editing</b> task. The results of this study are obtained through the analyses of the proficiency gains in formal aspects of language in <b>text-editing</b> pre and post-tests and text-reconstruction post-test. The study highlights the significant effect of this type of instruction on more proficient students. Reasons provided in this study are the language analytic ability of the students, learning styles and strategies, and motivation. The findings of this study are helpful to teachers of the classes with heterogeneous language proficiency. <br /...|$|E
40|$|Este trabalho estuda o campo da edição de texto na produção {{editorial}} de livros no Brasil. O objetivo é apontar algumas distinções necessárias às pesquisas acadêmicas sobre edição de textos, e importantes para a formação de pesquisadores e profissionais. A proposta centra-se nas principais etapas (edição de texto, preparação de originais e revisão de provas) que compõem o processo por que passa um texto a ser transformado em livro. Parte-se de análise dos manuais de editoração e de pesquisas acadêmicas que tangenciam o tema. E articula-se um diálogo entre alguns trabalhos acadêmicos das áreas de psicolinguística e psicologia cognitiva sobre leitura em suas relações possíveis com os estudos em editoração e a experiência empírica dos editores de texto. Contribui-se, assim, para o aprimoramento dos conhecimentos sobre a edição de texto, entre eles: as etapas, os objetivos principais e secundários, as estratégias, as tarefas e um conjunto de elementos necessários para que um profissional atue como editor de texto consciente de sua intervenção. It is {{the purpose}} of this thesis to study the field of <b>text-editing</b> in the Brazilian book publishing industry. Its main aim is to point out a few distinctions deemed necessary not only to the academic research but also to the formation of researchers and professionals in this particular field of study and work. In order to achieve this goal, the main phases the text goes through {{on its way to becoming}} a book [...] <b>text-editing,</b> copy-editing and proofreading [...] are here taken into account and characterized. Examining the available manuals and academic papers on the book editing field is the starting point of this research. It then goes on to promoting a dialogue between the book editing field and other areas of expertise, such as psycholinguistics and cognitive psychology, that also deal with the process of reading. The possible relationships this dialogue reveals and the actual praxis of text editing are then analyzed. Contributing to a better knowledge of what <b>text-editing</b> actually involves is therefore a primary aim of this thesis. It intends to shed some light on the specific phases, primary and secondary goals and strategies <b>text-editing</b> comprises, as well as on a series of elements needed not only for the praxis of <b>text-editing</b> itself but also for a more conscientious practice of this activity...|$|E
40|$|This work {{is focused}} on {{enhancing}} highly interactive <b>text-editing</b> applications with gestures. Concretely, we study CATTI, a handwriting transcription system that follows a corrective feedback paradigm, where both the user and the system collaborate efficiently to produce a high-quality text transcription. CATTI-like applications demand fast and accurate gesture recognition, for which we observed that current gesture recognizers are not adequate enough. In response to this need we developed MinGestures, a parametric context-aware gesture recognizer. Our contributions include a number of stroke features for disambiguating copy-mark gestures from handwritten text, plus the integration of these gestures in a CATTI application. It becomes finally possible to create highly interactive stroke-based <b>text-editing</b> interfaces, without worrying to verify the user intent onscreen. We performed a formal evaluation with 22 e-pen users and 32 mouse users using a gesture vocabulary of 10 symbols. MinGestures achieved an outstanding accuracy (less than 1 % error rate) with very high performance (less than 1 ms of recognition times). We then integrated MinGestures in a CATTI prototype and tested {{the performance of the}} interactive handwriting system when it is driven by gestures. Our results show that using gestures in interactive handwriting applications is both advantageous and convenient when gestures are simple but context-aware. Taken together, this work suggests that <b>text-editing</b> interfaces not only can be easily augmented with simple gestures, but also may substantially improve user productivity...|$|E
40|$|In many {{information}} retrieval and <b>text-editing</b> applications {{it is necessary}} to be able to locate quickly some or all occurrences of user-specified patterns of words and phrases in text. This paper describes a simple, efficient algorithm to locate all occurrences of any of a finite number of keywords and phrases in an arbitrary text string...|$|E
40|$|Microprocessor-based {{system for}} {{document}} production work scheduling, and change control and management information aids in design, development, {{and control of}} software. Main components Z 80 microprocessor, floppydisk and hard-disk drives, and a character printer. System linked to large computer. Major software components are control program monitor (CP/M), <b>text-editing</b> and wordprocessing system, workbreakdown-schedule processor, and data-base management tool...|$|E
40|$|This article {{surveys and}} critiques the {{literature}} on using style checkers and the <b>text-editing</b> capabilities of the computer to assist in revising technical writing. The literature on <b>text-editing</b> capabilities is inconclusive because it is largely anecdotal and methodologically flawed. The literature on style checkers is similarly inconclusive. To better assess {{the value of the}} computer, we need to examine the basic premise of the research on revising and word processing: that more revising leads to higher-quality writing. We need to be sure that our evaluative techniques for measuring writing improvement are valid; to focus our attention not only on computer novices but also on computer-experienced writers; to examine other factors that affect how writers use word processing and that in turn might affect writing quality; and to examine more carefully the differences among word processors and among the different style checkers to determine their effects on writing behavior and writing quality...|$|E
40|$|Programming by {{demonstration}} enables {{users to}} easily personalize their applications, automating repetitive tasks simply by executing a few examples. We formalize programming by demonstration as a machine learning problem: given {{the changes in}} the application state that result from the user's demonstrated actions, learn the general program that maps from one application state to the next. We present a methodology for learning in this space of complex functions. First we extend version spaces to learn arbitrary functions, not just concepts. Then we introduce the version space algebra, a method for composing simpler version spaces to construct more complex spaces. Finally, we apply our version space algebra to the <b>text-editing</b> domain and describe an implemented system called SMARTedit that learns repetitive <b>text-editing</b> procedures by example. We evaluate our approach by measuring the number of examples required for the system to learn a procedure that works on the remainder of ex [...] ...|$|E
40|$|Programming by {{demonstration}} systems acquire {{procedural knowledge}} from examples, {{and then use}} that knowledge to execute the learned procedure on new instances. We present an architecture, called version space algebra, for learning this type of procedural knowledge, and describe an implemented system for programming by demonstration in the <b>text-editing</b> domain. We present results showing the system's effectiveness at acquiring procedures from {{a small number of}} examples...|$|E
40|$|ESDAPT {{computer}} program provides graphical programming environment for developing APT (Automatically Programmed Tool) programs for controlling {{numerically controlled machine}} tools. Establishes graphical user interface providing user with APT syntax-sensitive <b>text-editing</b> subprogram and windows for displaying geometry and tool paths. APT geometry statements also created by use of menus and screen picks. Written in C language, yacc, lex, and XView for use on Sun 4 -series computers running SunOS...|$|E
40|$|This {{study was}} set up to {{investigate}} whether various Focus on Form techniques facilitate L 2 grammar learning. The study involved a pre-test─post-test design with treatment and control group and attempted to examine the relative effectiveness of three focus on form techniques, i. e. input enhancement, output and collaborative output, on learning English passive forms. Forty-four Iranian learners of English were selected to participate in the study. The participants were assigned to one of the four groups consisting of input enhancement (IE) (n= 11), input enhancement together with individual <b>text-editing</b> task (IE+TE) (n= 11), input enhancement together with collaborative <b>text-editing</b> task (IE+TE+CO) (n= 12) and a control group (CG) (n= 10). The pretests and posttests were administered using a multiple choice and a fill in the blank test in context. The result of the study showed that among the three treatment groups, IE+TE and IE+TE+CO outperformed the control group in the acquisition of passive forms. Furthermore, {{there was no significant difference}} between IE+TE and IE+TE+CO in the acquisition of passive forms...|$|E
40|$|Languages and {{documents}} are used extensively in software development. Pan is a language based editing system {{that provides the}} benefits of powerful incremental analysis of formalized language documents in a <b>text-editing</b> context. In the Ensemble project, we are extending the Pan language technology, creating new language-based capabilities, and incorporating new document technology based on experience with the V OR T E X system. High quality multimedia presentation {{is being used to}} enhance understanding of software documents. Language-based methods provide a well-founded basis for delivering the document services. ...|$|E
40|$|This {{paper is}} in closed access. This paper {{demonstrates}} {{a new approach}} to the building of a syntax-directed editor (SDE). The approach does not force the user to adopt a top-down syntax-oriented view of editing but supports the traditional <b>text-editing</b> approach of deciding which token to write next. Choices are made from menus listing only the tokens that are syntactically legal at a given point. The actual menus used by the editor are created by reference to the tables used by an LALR parser-generator...|$|E
