13|5054|Public
40|$|Truth {{maintenance}} {{systems have}} been used in recently developed problem solving systems. A <b>truth</b> <b>maintenance</b> <b>system</b> (<b>TMS)</b> is designed to be used by deductive systems to maintain the logical relations among the beliefs which those systems manipulate. These relations are used to incrementally modify the belief structure when premises are changed, giving a more flexible context mechanism than has been present in earlier artificial intelligence systems. The relations among beliefs {{can also be used to}} directly trace the source of contradictions or failures, resulting in far more efficient backtracking...|$|E
40|$|In {{a recent}} paper, Konolige has {{introduced}} {{a new version of}} autoepistemic logic (AEL), which is based on a strong notion of groundedness. We show that it is well-suited for formalizing the concept of justified belief in a non-monotonic <b>truth</b> <b>maintenance</b> <b>system</b> (<b>TMS).</b> If we consider the justifications of a TMS as formulae of the form it computes the set of non-modal atoms of a strongly grounded AEL-extension. It is shown that a variant of Dressler's encoding of nonmonotonic justifications in an assumptionbased TMS is correct, and thus also inherits the AEL semantics We argue that more work is needed to come {{to a better understanding of}} backtracking routines and so-called nogood inferences, which are identified as sources of ungrounded conclusions. These results contribute to bridging the gap between theory and implementation in the field of nonmonotonic reasonin...|$|E
40|$|Implicit {{enumeration}} {{of prime}} implicates in <b>Truth</b> <b>Maintenance</b> <b>System</b> (<b>TMS)</b> is investigated. CMS (Clause Management System), {{an extension of}} Assumption-based TMS (ATMS), that accepts any type of justification has a burden to compute all prime implicates, since its complexity is NP-complete. To improve the performance of multiple-context TMS such compact representation of boolean functions. In this paper, we propose a BDD-based Multiple-context TMS (BMTMS) and present the design and implementation of interface between TMS and BDD. The interface provides high level specifications of logical formulas, and has mechanisms to schedule BDD commands to avoid combinatorial explosions in constructing BDDs. In BMTMS, most TMS operations are carried out without enumerating all prime implicates. 1 INTRODUCTION The capability of thinking with explicit multiple alternatives is required by sophisticated problem solving systems such as qualitative simulation, multi-fault diagnosis or non-monotonic reas [...] ...|$|E
40|$|General purpose <b>truth</b> <b>maintenance</b> <b>systems</b> have {{received}} considerable {{attention in the}} past few years. This paper discusses the functionality of <b>truth</b> <b>maintenance</b> <b>systems</b> and compares various existing algorithms. Applications and directions for future research are also discussed. Introduction In 1978 Jon Doyle wrote a masters thesis at the MIT AI Laboratory entitled "Truth <b>Maintenance</b> <b>Systems</b> for Problem Solving" [Doyle, 1979]. In this thesis Doyle described an independent module called a <b>truth</b> <b>maintenance</b> <b>system,</b> or TMS, which maintained beliefs for general problem solving systems. In the twelve years since the appearance of Doyle's TMS a large body of literature has accumulated on <b>truth</b> <b>maintenance.</b> The seminal idea appears not to have been any particular technical mechanism but rather the general concept of an independent module for <b>truth</b> (or belief) <b>maintenance.</b> All <b>truth</b> <b>maintenance</b> <b>systems</b> manipulate proposition symbols and relationships between proposition symbols. I will use [...] ...|$|R
40|$|Belief <b>maintenance</b> <b>systems</b> {{are natural}} {{extensions}} of <b>truth</b> <b>maintenance</b> <b>systems</b> that use probabilities rather than boolean truth-values. This paper introduces a general method for belief maintenance, based on (the propositional fragment of) probabilistic logic, that extends the Boolean Constraint Propagation method {{used by the}} logic-based <b>truth</b> <b>maintenance</b> <b>systems.</b> From the concept of probabilistic entailment, we derive a set of constraints on the (probabilistic) truth-values of propositions and we prove their soundness. These constraints are complete {{with respect to a}} well-defined set of clauses, and their partial incompleteness is compensated by a gain in computational efficiency. 1 Introduction <b>Truth</b> <b>maintenance</b> <b>systems</b> (tmss) are independent reasoning modules which incrementally maintain the beliefs of a general problem solving system, enabling it to reason with temporary assumptions in the growth of incomplete information. The concept of <b>truth</b> <b>maintenance</b> <b>system</b> is due to Doyle [...] ...|$|R
5000|$|J. Doyle. A <b>Truth</b> <b>Maintenance</b> <b>System.</b> AI. Vol. 12. No 3, pp. 251-272. 1979.|$|R
40|$|In text generation, {{various kinds}} of choices need to be decided. In the {{conventional}} framework, which can be called "one-path generation framework," these choices are decided in an order designed carefully in advance. However, many researchers {{have pointed out that}} the choices, generally, depend on one another and the one-path generation framework cannot handle these interdependencies sufficiently. Our previous paper proposed introducing a revision process into text generation for solving this problem. In our framework, the overall generation process consists of the initial generation process, followed by the revision process. The revision process gives us opportunities to change choices that have already been made. In general, a change in a choice point may cause changes in other choice points, and such dependencies can be managed by <b>Truth</b> <b>Maintenance</b> <b>System</b> (<b>TMS).</b> However, {{it is well known that}} dependency network management in TMS requires some computational overhead in general. We n [...] ...|$|E
40|$|This paper {{presents}} a logically complete assumption based {{truth maintenance system}} (ATMS) {{that is part of}} a complex blast furnace computer aided piloting system [5]. This system is built on an efficient and logically complete propositional constraint solver that has been successfully used for industrial applications in computer aided design. 1 Introduction A reasoning maintenance system (RMS) is a critical part of a reasoning system, since it is responsible for assuring that the inferences made by that system are valid. The reasoning system provides the RMS with information about each inference it performs, and in return the RMS provides the reasoning system with information about the whole set of inferences. Several implementations of reasoning maintenance systems have been proposed in the past, remarkable ones being Doyle's <b>truth</b> <b>maintenance</b> <b>system</b> (<b>TMS)</b> [6], and De Kleer's assumption-based truth maintenance system (ATMS) [7]. Both of them suffer from some limitations. The [...] ...|$|E
40|$|A <b>truth</b> <b>maintenance</b> <b>system</b> (<b>TMS)</b> is {{a general}} problem solving {{facility}} designed to work in tandem with an inference engine. Justification-based TMSs (the most commonly used TMSs) have not a sufficient expressive power for many applications. Logic-based TMSs overcome this limitation but are untractable. So, McAllester, or Forbus and de Kleer have proposed to encode formulae in clauses and to run the efficient Boolean Constraint Propagation algorithm (BCP), what lose the completeness of the deductions. In this paper, we introduce the model of Constraint Satisfaction Problems (CSPs) underlining {{that the notion of}} local completeness (called local-consistency in CSPs) has already been widely treated in CSPs. We then propose an encoding of McAllester's TMS in Dynamic CSP {{to be able to use}} CSPs techniques. We show that not only we can compute as many deductions as BCP for the same timeconsuming, but also we can outperform the local completeness computed for a slight more running-time. Finally [...] ...|$|E
50|$|Many {{kinds of}} <b>truth</b> <b>maintenance</b> <b>systems</b> exist. Two major types are single-context and multi-context <b>truth</b> <b>maintenance.</b> In single context systems, {{consistency}} is maintained among all facts in memory (KB) and {{relates to the}} notion of consistency found in classical logic. Multi-context systems support paraconsistency by allowing consistency to be relevant to a subset of facts in memory, a context, according to the history of logical inference. This is achieved by tagging each fact or deduction with its logical history. Multi-agent <b>truth</b> <b>maintenance</b> <b>systems</b> perform <b>truth</b> <b>maintenance</b> across multiple memories, often located on different machines. de Kleer's assumption-based <b>truth</b> <b>maintenance</b> <b>system</b> (ATMS, 1986) was utilized in systems based upon KEE on the Lisp Machine. The first multi-agent TMS was created by Mason and Johnson. It was a multi-context system. Bridgeland and Huhns created the first single-context multi-agent system.|$|R
25|$|Knowledge Engineering Environment (KEE) used {{an object}} system called UNITS and {{integrated}} {{it with an}} inference engine and a <b>truth</b> <b>maintenance</b> <b>system</b> (ATMS).|$|R
5000|$|G. M. Provan (1988). A {{complexity}} analysis of assumption-based <b>truth</b> <b>maintenance</b> <b>systems.</b> In B. Smith and G. Kelleher, editors, Reason <b>Maintenance</b> <b>Systems</b> and their Applications, pages 98-113. Ellis Horwood, New York.|$|R
40|$|The aim of {{this paper}} is to provide a tool which makes {{possible}} non-monotonic reasoning in a propositional knowledge system based on multivalued logic with certainty factors and fuzzy logic. The support system which results in the non-monotony will be a <b>Truth</b> <b>Maintenance</b> <b>System</b> (<b>TMS).</b> Particularly, we will use ATMS (TMS based on assumptions) defined by De Kleer. From this ATMS we will extend its use in case we have monotonic reasoning systems based on [0, 1] valued logic and fuzzy logic. The latter case will be designed to reason with fuzzy truth values, although a parallel approach can be made by using directly linguistic labels. Keywords: Truth Maintenance System, Fuzzy Logic, Multivalued Logic, Knowledge Base System, Inconsistency. 1 Introduction Knowledge systems are used with ever greater efficacy in a great deal of scientific and social activities. Not long ago, was measured this efficacy according to the quality of knowledge representation and to the correct working of the reas [...] ...|$|E
40|$|To {{choose their}} actions, {{reasoning}} programs {{must be able}} to make assumptions and subsequently revise their beliefs when discoveries contradict these assumptions. The <b>Truth</b> <b>Maintenance</b> <b>System</b> (<b>TMS)</b> is a problem solver subsystem for performing these functions by recording and maintaining the reasons for program beliefs. Such recorded reasons are useful in constructing explanations of program actions in guiding the course of action of a problem solver. This paper describes (1) the representations and structure of the TMS, (2) the mechanisms used to revise the current set of beliefs, (3) how dependency-directed backtracking changes the current set of assumptions, (4) techniques for summarizing explanations of beliefs, (5) how to organize problem solvers into "dialectically arguing" modules, (6) how to revise models of the belief systems of others, and (7) methods for embedding control structures in patterns of assumptions. We stress the need of problem solvers to choose between alternative systems of beliefs, and outline a mechanism by which a problem solver can employ rules guiding choices of what to believe, what to want, and what to do...|$|E
40|$|RUP (Reasoning Utility Package) is a {{collection}} of procedures for performing various computations relevant to automated reasoning. RUP contains a <b>truth</b> <b>maintenance</b> <b>system</b> (<b>TMS)</b> which can be used to perform simple propositional deduction (unit clause resolution) to record justifications, to track down underlying assumptions and to perform incremental modifications when premises are changed. This TMS can be used with an automatic premise controller which automatically retracts "assumptions" before "solid facts" when contradictions arise and searches for the most solid proof of an assertion. RUP also contains a procedure for efficiently computing all the relevant consequences of any set of equalities between ground terms. A related utility computes "substitution simplifications" of terms under an arbitrary set of unquantified equalities and a user defined simplicity order. RUP also contains demon writing macros which allow one to write PLANNER like demons that trigger on various types of events in the data base. Finally there is a utility for reasoning about partial orders and arbitrary transitive relations. In writing all of these utilities an attempt has been made to provide a maximally flexible environment for automated reasoning...|$|E
5000|$|G. M. Provan (1990). The {{computational}} {{complexity of}} multiple-context <b>truth</b> <b>maintenance</b> <b>systems.</b> In Proceedings of the Ninth European Conference on Artificial Intelligence (ECAI'90), pages 522-527.|$|R
40|$|This paper {{describes}} {{how to use}} an assumption-based <b>truth</b> <b>maintenance</b> <b>system</b> (ATMS) to significantly speed up qualitative reasoning. Specifically, we introduce three organizing abstractions for ATMS-based problem solvers (many-worlds databases, justify/interpret cycles, and closed-world tables). We illustrate their utility by describing the Qualitative Process Engine (qPE), an implementation of Qualitative Process theory that is roughly 95 times-faster and signficantly simpler than the previous implementation. After analyzing gPE's performance, we draw some general conclusions about {{the advantages and disadvantages}} of assumption-based <b>truth</b> <b>maintenance</b> <b>systems.</b> Program:ENGINEERIN...|$|R
50|$|KEE {{supports}} {{non-monotonic reasoning}} through {{the concepts of}} worlds. Worlds allow provide alternative slot-values of frames. Through an assumption-based <b>Truth</b> <b>maintenance</b> <b>system</b> inconsistencies can be detected and analyzed.|$|R
40|$|In complex {{reasoning}} tasks, as expressible by Answer Set Programming (ASP), problems often {{permit for}} multiple solutions. In dynamic environments, where knowledge is continuously changing, {{the question arises}} how a given model can be incrementally adjusted relative to new and outdated information. This paper introduces Ticker, a prototypical engine for well-defined logical reasoning over streaming data. Ticker builds on a practical fragment of the recent rule-based language LARS which extends Answer Set Programming for streams by providing flexible expiration control and temporal modalities. We discuss Ticker's reasoning strategies: First, the repeated one-shot solving mode calls Clingo on an ASP encoding. We show how this translation can be incrementally updated when new data is streaming in or time passes by. Based on this, we build on Doyle's classic justification-based <b>truth</b> <b>maintenance</b> <b>system</b> (<b>TMS)</b> to update models of non-stratified programs. Finally, we empirically compare the obtained evaluation mechanisms. This paper is under consideration for acceptance in TPLP. Comment: Paper presented at the 33 nd International Conference on Logic Programming (ICLP 2017), Melbourne, Australia, August 28 to September 1, 2017, 24 pages, LaTeX, 4 PDF figures (arXiv: 1707. 05304...|$|E
40|$|This paper {{discusses}} {{possibilities and}} promises of an advanced knowledge-based design support {{system based on}} a framework called DRIFT (Design Rationale Integration Framework of Three layers), which captures reflective design process as a byproduct of inherent design actions. DRIFT is an integration framework of three aspects of design process, i. e., action level, model operation level and argument level. Action level represents a sequence of design operations. Model operation level represents a state transition of design states, each of which records a design snapshot {{as a set of}} labels defined over the ontology for conceptually representing an artifact. A <b>truth</b> <b>maintenance</b> <b>system</b> (<b>TMS)</b> is adopted to manage model operation level across the design process. Argument level represents a process of setting problems and alternatives, which is captured by Issue-based Information System (IBIS). The linkages among three levels in principle enable to automatically capture and manage the whole design process through tracking design operations over a design support system. This paper introduces an example of DRIFTbased implementation to show the power of the framework, and then discusses possibilities and promises of an advanced knowledge-based design support system...|$|E
40|$|Constraints, {{in various}} forms, are {{ubiquitous}} to design problems. In this paper, we provide a formal characterization of a generalized constraint satisfaction problem (CSP) {{that can be}} used to model many types of design/planning problems, and the architecture of an imlemented reasoning system for solving this problem. The architecture includes a <b>truth</b> <b>maintenance</b> <b>system</b> (<b>TMS)</b> which is specifically designed to reason about the relationships expressed in the constraints as a problem solution evolves. The CSP consists of two types of data. The first type of datum corresponds to assignments that are handled by the problem solver, and the second type corresponds to constraint terms handled by the TMS. The dependency network, representing the relationships among constraint terms, is static and generally quite small, depending on the number of constraint terms. Also, justifications are never manipulated (only evaluated). This results in an architecture that makes efficient use of both space and time. The need for efficient TMSs, even though these might deal only with certain classes of problems, is underscored by the fact that general purpose TMSs have often been found to be highly inefficient for solving large problems. We also show how certain instances of the generalized CSP can be formulated as an integer programming problem, special cases of which can be solved efficiently using mathematical (integer) programming techniques. ...|$|E
40|$|Many procedurally-oriented {{problem solving}} {{systems can be}} viewed as {{performing}} a mixture of computation and deduction, with much of the computation serving to decide what deductions should be made. This results in bits and pieces of deductions being strewn throughout the program text and execution. This paper describes a problem solver subsystem called a <b>truth</b> <b>maintenance</b> <b>system</b> which collects and maintains these bits of deductions. Automatic functions of the <b>truth</b> <b>maintenance</b> <b>system</b> then use these pieces of "proofs" to consistently update a data base of program beliefs and to perform a powerful form of backtracking called dependency-directed backtracking...|$|R
40|$|To {{choose their}} actions, {{reasoning}} programs {{must be able}} to draw conclusions from limited information and subsequently revise their beliefs when discoveries invalidate previous assumptions. A <b>truth</b> <b>maintenance</b> <b>system</b> is a problem solver subsystem for performing these functions by recording and maintaining the reasons for program beliefs. These recorded reasons are useful in constructing explanations of program actions in "responsible" programs, and in guiding the course of action of a problem solver. This paper describes the structure of a <b>truth</b> <b>maintenance</b> <b>system,</b> methods for encoding control structures in patterns of reasons for beliefs, and the method of dependency-directed backtracking...|$|R
50|$|Systems {{specifically}} implementing {{belief revision}} are: Immortal, SATEN, and BReLS. Two systems including a belief revision feature are SNePS and Cyc. <b>Truth</b> <b>maintenance</b> <b>systems</b> {{are used in}} Artificial Intelligence to implement belief revision.|$|R
40|$|This {{research}} studies currently available maintenance methodologies for expert system knowledge bases and taxonomically classifies {{them according to}} the functions they perform. The classification falls into two broad categories. These are: (1) Methodologies for building a more maintainable expert system knowledge base. This section covers techniques applicable to the development phases. Software engineering approaches {{as well as other}} approaches are discussed. (2) Methodologies for maintaining an existing knowledge base. This section is concerned with the continued maintenance of an existing knowledge base. It is divided into three subsections. The first subsection discusses tools and techniques which aid the understanding of a knowledge base. The second looks at tools which facilitate the actual modification of the knowledge base, while the last secttion examines tools used for the verification or validation of the knowledge base. Every main methodology or tool selected for this study is analysed according to the function it was designed to perform (or its objective); the concept or principles behind the tool or methodology: and its implementation details. This is followed by a general comment {{at the end of the}} analysis. Although expert systems as a rule contain significant amount of information related to the user interface, database interface, integration with conventional software for numerical calculations, integration with other knowledge bases through black boarding systems or network interactions, this research is confined to the maintenance of the knowledge base only and does not address the maintenance of these interfaces. Also not included in this thesis are Truth Maintenance Systems. While a <b>Truth</b> <b>Maintenance</b> <b>System</b> (<b>TMS)</b> automatically updates a knowledge base during execution time, these update operations are not considered 2 ̆ 7 maintenance 2 ̆ 7 in the sense as used in this thesis. Maintenance in the context of this thesis refers to perfective, adaptive, and corrective maintenance (see introduction to chapter 4). TMS on the other hand refers to a collection of techniques for doing belief revision (Martin, 1990). That is, a TMS maintains a set of beliefs or facts in the knowledge base to ensure that they remain consistent during execution time. From this perspective, TMS is not regarded as a knowledge base maintenance tool for the purpose of this study...|$|E
5000|$|U. Junker and K. Konolige (1990). Computing the {{extensions}} of autoepistemic and default logics with a <b>truth</b> <b>maintenance</b> <b>system.</b> In Proceedings of the Eighth National Conference on Artificial Intelligence (AAAI'90), pages 278-283. MIT Press.|$|R
50|$|Defeasibility as corrigibility: Here, {{a person}} learns {{something}} new that annuls a prior inference. In this case, defeasible reasoning provides a constructive mechanism for belief revision, like a <b>truth</b> <b>maintenance</b> <b>system</b> as envisioned by Jon Doyle.|$|R
5000|$|A <b>truth</b> <b>maintenance</b> <b>system,</b> or TMS, is a {{knowledge}} representation method for representing both beliefs and their dependencies and an algorithm called the [...] "truth maintenance algorithm" [...] that manipulates and maintains the dependencies. The name <b>truth</b> <b>maintenance</b> {{is due to}} the ability of these systems to restore consistency.|$|R
40|$|It is {{possible}} to incorporate a system which manages a knowledge base into an expert system. Because, by using this system, we can rebuild knowledge bases which have no logical contradictions with knowledge of experts and phenomena which we experience daily. However, {{it is difficult to}} build beyond systems in the machining field due to the existence of many kinds of knowledge, if we want to achieve rebuilding of the knowledge bases using current representation language. Thus, we developed a <b>truth</b> <b>maintenance</b> <b>system</b> for knowledge bases by using a new predicate-logic representation language. This paper describes how to manage knowledge bases and how to treat the functions in a <b>truth</b> <b>maintenance</b> <b>system</b> using this system when contradictions occur in the practical machining problem...|$|R
2500|$|Non-monotonic {{reasoning}}. Non-monotonic reasoning allows {{various kinds}} of hypothetical reasoning. The system associates facts asserted with the rules and facts used to justify them and as those facts change updates the dependent knowledge as well. In rule based systems this capability {{is known as a}} <b>truth</b> <b>maintenance</b> <b>system.</b>|$|R
40|$|Finding {{the stable}} models of a {{knowledge}} base is a signicant computational problem in articial intelligence. This task {{is at the}} computational heart of <b>truth</b> <b>maintenance</b> <b>systems,</b> autoepistemic logic, and default logic. Unfortunately, it is NP-hard. In this paper we present a hierarchy of classes of knowledge bases,...|$|R
5000|$|Non-monotonic {{reasoning}}. Non-monotonic reasoning allows {{various kinds}} of hypothetical reasoning. The system associates facts asserted with the rules and facts used to justify them and as those facts change updates the dependent knowledge as well. In rule based systems this capability {{is known as a}} <b>truth</b> <b>maintenance</b> <b>system.</b>|$|R
40|$|This paper {{presents}} a logically complete assumption based <b>truth</b> <b>maintenance</b> <b>system</b> (ATMS) {{that is part}} of a complex blast furnace computer aided piloting system [5]. This system is built on an efficient and logically complete propositional constraint solver that has been successfully used for industrial applications in computer aided design. ...|$|R
5000|$|Raymond Reiter (June 12, 1939 [...] - [...] September 16, 2002), was a Canadian {{computer}} scientist and logician. He {{was one of}} the founders of the field of non-monotonic reasoning with his work on default logic, model-based diagnosis, closed world reasoning, and <b>truth</b> <b>maintenance</b> <b>systems.</b> He also contributed to the situation calculus.|$|R
40|$|We {{demonstrate}} how order-theoretic abstractions {{can be useful}} in identifying, formalizing, and exploiting relationships between seemingly dissimilar AI algorithms that perform computations on partially-ordered sets. In particular, we show how the order-theoretic concept of an anti-chain can be used to provide an efficient representation for such sets when they satisfy certain special properties. We use anti-chains to identify and analyze the basic operations and representation optimizations in the version space learning algorithm [10] and the assumption-based <b>truth</b> <b>maintenance</b> <b>system</b> (ATMS) [2, 3]. Our analysis allows us to (1) extend the known theory [7, 10, 8] of admissibility of concept spaces for incremental version space merging, and (2) develop new, simpler label-update algorithms for ATMS's with DNF assumption formulas. Contents 1 Introduction 2 2 Representing Sets as Anti-Chains 4 3 Version Spaces 17 4 Assumption-Based <b>Truth</b> <b>Maintenance</b> <b>Systems</b> 32 5 Extended ATMS's 46 6 Ackno [...] ...|$|R
40|$|<b>Truth</b> <b>Maintenance</b> <b>Systems</b> (TMSs) are {{important}} tools for caching beliefs and inferences that support search and explanation tasks of general problem solvers. For embedded real-time systems, fast {{response from the}} TMSs is especially required. To achieve this, Nayak and Williams [9] presented an Incremental <b>Truth</b> <b>Maintenance</b> <b>System</b> (ITMS) based on depth-first numbering to avoid spending {{a significant percentage of}} time on calculating labels that remain constant between contexts. However, the goal of incremental context switching is downgraded by the approximate method they chose, because it may miss qualified propositions or even choose the unqualified for resupport; it may also bring the propagation to stop unintentionally. The algorithm based on root antecedents shown in this paper serves exactly the same purpose, while it avoids the problems encountered in Nayak and Williams' ITMS by adopting a mechanism based on propositional root antecedents that allows constant conclusions to be identified precisely...|$|R
