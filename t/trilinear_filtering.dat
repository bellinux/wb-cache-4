32|16|Public
500|$|Physically, the Dreamcast {{measures}} [...] {{and weighs}} [...] [...] The Dreamcast's main CPU is a two-way 360MIPS superscalar Hitachi SH-4 32-bit RISC clocked at 200MHz with an 8 Kbyte instruction cache and 16 Kbyte data cache and a 128-bit graphics-oriented floating-point unit delivering 1.4GFLOPS. Its 100MHz NEC PowerVR2 rendering engine, {{integrated with the}} system's ASIC, is capable of drawing more than 3 million polygons per second and of deferred shading. Sega estimated that the Dreamcast was theoretically capable of rendering 7 million raw polygons per second, or 6 million with textures and lighting, but noted that [...] "game logic and physics reduce peak graphic performance." [...] Graphics hardware effects include <b>trilinear</b> <b>filtering,</b> gouraud shading, z-buffering, spatial anti-aliasing, per-pixel translucency sorting and bump mapping. The system can output approximately 16.77 million colors simultaneously and displays interlaced or progressive scan video at 640×480 video resolution. Its 67MHz Yamaha AICA sound processor, with a 32-bit ARM7 RISC CPU core, can generate 64 voices with PCM or ADPCM, providing ten times {{the performance of the}} Saturn's sound system. [...] The Dreamcast has 16 MB main RAM, along with an additional 8 MB of RAM for graphic textures and 2 MB of RAM for sound. [...] The system reads media using a 12x speed Yamaha GD-ROM Drive. In addition to Windows CE, the Dreamcast supports several Sega and middleware application programming interfaces. In most regions, the Dreamcast included a removable modem for online connectivity, which was modular for future upgrades. The original Japanese model and all PAL models had a transfer rate of 33.6kbit/s, while consoles sold in the US and in Japan after September 9, 1999 featured a 56 kbit/s dial-up modem.|$|E
2500|$|The most {{graphically}} demanding Nintendo 64 {{games that}} arrived on larger 32 or 64MB cartridges {{are the most}} advanced and detailed of the 32-bit/64-bit generation. [...] In order to maximize use of the Nintendo 64 hardware developers had {{to create their own}} custom microcode. [...] Nintendo 64 games running on custom microcode benefited from much higher polygon counts in tandem with more advanced lighting, animation, physics and AI routines than its 32-bit competition. Conker's Bad Fur Day is arguably the pinnacle of its generation combining multicolored real-time lighting that illuminates each area to real-time shadowing and detailed texturing replete with a full in game facial animation system. [...] The Nintendo 64's graphics chip is capable of executing many more advanced and complex rendering techniques than its competitors. [...] It is the first home console to feature <b>trilinear</b> <b>filtering,</b> which allowed textures to look very smooth. This contrasted with the Saturn and PlayStation, which used nearest-neighbor interpolation and produced more pixelated textures. [...] Overall however the results of the Nintendo cartridge system were mixed and this was tied primarily to its storage medium.|$|E
50|$|<b>Trilinear</b> <b>filtering</b> is an {{extension}} of the bilinear texture filtering method, which also performs linear interpolation between mipmaps.|$|E
50|$|Each {{anisotropic}} filtering probe {{is often}} {{in itself a}} filtered MIP map sample, which adds more sampling to the process. Sixteen trilinear anisotropic samples might require 128 samples from the stored texture, as <b>trilinear</b> MIP map <b>filtering</b> needs to take four samples times two MIP levels and then anisotropic sampling (at 16-tap) needs to take sixteen of these <b>trilinear</b> <b>filtered</b> probes.|$|R
5000|$|Single clock {{bilinear}} and <b>trilinear</b> texture <b>filtering</b> {{and texture}} compositing ...|$|R
5000|$|Support for bilinear, <b>trilinear,</b> {{anisotropic}} <b>filtering,</b> Alpha to Coverage, hardware Tessellation and Predicated Tiling.|$|R
5000|$|Hardware features: Detailed {{texture mapping}} with {{perspective}} correction, anti-aliasing, Z-buffering, bilinear filtering, <b>trilinear</b> <b>filtering,</b> Gouraud shading, 8-bit alpha blending, {{level of detail}} management ...|$|E
50|$|Bilinear and trilinear texture filtering, MIP Mapping, alpha blending, {{and video}} texture mapping. <b>Trilinear</b> <b>filtering</b> is full-speed on ViRGE/DX and later, termed 'SmartFilter' technology.|$|E
50|$|To {{solve this}} problem, <b>trilinear</b> <b>filtering</b> interpolates between {{the results of}} {{bilinear}} filtering on the two mipmaps nearest to the detail required for the polygon at the pixel. If the pixel would take up 1/100 of the texture in one direction, <b>trilinear</b> <b>filtering</b> would interpolate between the result of filtering the 128*128 mipmap as y1 with x1 as 128, {{and the result of}} filtering on the 64*64 mipmap as y2 with x2 as 64, and then interpolate to x = 100.|$|E
50|$|Between {{its birth}} in 1995 and {{retirement}} near the year 2000, the ViRGE family received regular upgrades. The ViRGE/DX boosted {{the performance of}} the original ViRGE/325 by improving perspective correction and implementing a full-speed <b>trilinear</b> <b>filter.</b> The ViRGE/GX added support for more modern SD/SGRAM. The ViRGE/GX2 {{was one of the first}} VGA chipsets to support AGP, although the level of support extended little beyond electrical compliance. Substantial use of AGP's feature-set would have to wait until the Savage 3D.|$|R
5000|$|Larrabee {{included}} one major fixed-function graphics hardware feature: texture sampling units. These perform <b>trilinear</b> and anisotropic <b>filtering</b> and texture decompression.|$|R
40|$|In volume-rendering applications, an {{appropriate}} resampling filter can be chosen {{by making a}} compromise between quality and efficiency. For realtime volume visualization, usually the <b>trilinear</b> <b>filter</b> is used, since its evaluation is directly supported by the recent GPUs. Although higher-order filters (e. g. quadratic or cubic filters) ensure much higher image quality, due to their larger support, they are significantly more expensive to evaluate even if a GPU acceleration is applied. Instead of higher-order filtering, in this paper, we propose a frequency-domain upsampling on an optimal Body-Centered Cubic (BCC) lattice. The obtained BCCsampled representation is rendered by using a simple GPU-accelerated trilinear B-spline reconstruction. Although this approach doubles the storage requirements, it provides similar quality as the most popular cubic filters, but for a significantly lower computational overhead. ...|$|R
50|$|Since it uses both {{larger and}} smaller mipmaps, <b>trilinear</b> <b>filtering</b> {{cannot be used}} in places where the pixel is smaller than a texel on the {{original}} texture, because mipmaps larger than the original texture are not defined. Fortunately bilinear filtering still works, {{and can be used}} in these situations without worrying too much about abruptness because bilinear and <b>trilinear</b> <b>filtering</b> provide the same result when the pixel size is exactly the same as the size of a texel on the appropriate mipmap.|$|E
50|$|Like {{bilinear}} and <b>trilinear</b> <b>filtering,</b> anisotropic filtering eliminates aliasing effects, but improves {{on these}} other techniques by reducing blur and preserving detail at extreme viewing angles.|$|E
50|$|<b>Trilinear</b> <b>filtering</b> is {{a remedy}} {{to a common}} {{artifact}} seen in mipmapped bilinearly filtered images: an abrupt and very noticeable change in quality at boundaries where the renderer switches from one mipmap level to the next. <b>Trilinear</b> <b>filtering</b> solves this by doing a texture lookup and bilinear filtering on the two closest mipmap levels (one higher and one lower quality), and then linearly interpolating the results. This results in a smooth degradation of texture quality as distance from the viewer increases, rather than a series of sudden drops. Of course, closer than Level 0 {{there is only one}} mipmap level available, and the algorithm reverts to bilinear filtering.|$|E
40|$|In {{the field}} of Volume Rendering, pre-integration {{techniques}} for arbitrary transfer functions has certainly led to the most significant and convincing results both quality and performance wise on standard PC consumer graphics. By showing that the ideal scalar signal along the cast rays is better approximated by a succession of polynomial curves as opposed to linear segments, we propose a new method for pre-integrated volume rendering. This method {{is based on a}} second order polynomial interpolation of the scalar values, allowing it to converge more rapidly towards the integration of a volume reconstructed by a <b>trilinear</b> <b>filter.</b> This approach manages to capture the smoothness of the volume’s details without the need of further ray resampling, and consequently succeeds in reducing the visual artefacts in comparison to previous techniques. Futhermore, we adapt an existing technique to compute our pre-integration tables using the GPU, thus making our approach suitable for transfer function manipulations...|$|R
50|$|GeForce 8 {{performs}} {{significantly better}} texture filtering than its predecessors that used various optimizations and visual tricks {{to speed up}} rendering without impairing filtering quality. The GeForce 8 line correctly renders an angle-independent anisotropic filtering algorithm along with full <b>trilinear</b> texture <b>filtering.</b> G80, though not its smaller brethren, is equipped with much more texture filtering arithmetic ability than the GeForce 7 series. This allows high-quality filtering with a much smaller performance hit than previously.|$|R
40|$|The paper {{focuses on}} the {{improvement}} of the quality of isosurfaces fitted on volume datasets with respect to standard MC solutions. The new solution presented improves the precision in the reconstruction process using an approach based on mesh renement and driven by the evaluation of the <b>trilinear</b> reconstruction <b>filter.</b> The iso-surface reconstruction process is adaptive, to ensure that the complexity of the fitted mesh will not become excessive. The proposed approach has been tested on many datasets; we discuss the precision of the obtained meshs and report data on fitted meshes complexity and processing times...|$|R
50|$|Modern Graphics {{processing}} units provide specialised fixed function units called texture samplers or {{texture mapping}} units to perform texture mapping, usually with <b>trilinear</b> <b>filtering</b> or better multi-tap anisotropic filtering and hardware for decoding specific formats such as DXTn. As of 2016, texture mapping hardware is ubiquitous as most SOCs contain a suitable GPU.|$|E
5000|$|Anisotropic {{filtering}} is {{the highest}} quality filtering available in current consumer 3D graphics cards. Simpler, [...] "isotropic" [...] techniques use only square mipmaps which are then interpolated using bi- or <b>trilinear</b> <b>filtering.</b> (Isotropic means same in all directions, and hence is used to describe {{a system in which}} all the maps are squares rather than rectangles or other quadrilaterals.) ...|$|E
50|$|The Ticket to Ride IV {{included}} an integrated 250 MHz RAMDAC, support {{for up to}} 32 MiB SDRAM, full scene anti-aliasing, per pixel fog, specular, and alpha effects, 10-level detail per pixel MIP mapping, bilinear and <b>trilinear</b> <b>filtering,</b> 8 bits per texel, 8 KB on-chip texture cache, hardware MPEG-1 and MPEG-2, and a full IEEE 754 floating point pipeline 3D rendering setup engine.|$|E
5000|$|G200 {{supported}} full 32-bit {{color depth}} rendering which substantially pushed the image quality upwards by eliminating dithering artifacts {{caused by the}} then-more-typical 16-bit color depth. Matrox called their technology Vibrant Color Quality (VCQ). The chip also supported features such as <b>trilinear</b> mip-map <b>filtering</b> and anti-aliasing (though this was rarely used). The G200 could render 3D at all resolutions supported in 2D. Architecturally, the 3D pipeline was laid out as a single pixel pipeline with a single texture management unit. The core contained a RISC processor called the [...] "WARP core", that implemented a triangle setup engine in microcode.|$|R
5000|$|GS effects include: Read-Write textures, Emboss Bump Mapping, Dot3 Bump Mapping (Normal Mapping), multiple-light sources, per-vertex lighting, Volumetric Fog, Mipmapping, LOD, Spherical Harmonic Lighting, High Dynamic Range(HDR) Rendering, Motion Blur, Heat Haze, Bloom, Depth of Field, Shadow Volumes, Shadow Mapping, Lightmapping, Environment Mapping, Render to Texture, Alpha Blending, Alpha Test, Destination Alpha Test, Depth Test, Scissor Test, Transparency effects, framebuffer effects, {{post-processing}} effects, Perspective-Correct Texture Mapping, Edge-AAx2 (poly sorting required), Bilinear, <b>Trilinear</b> texture <b>filtering,</b> Multi-pass, Palletizing (4-bit = 6:1 ratio, 8-bit = 3:1), NURBS, Bezier Curves, Bezier Surfaces, B-Splines, Offscreen Drawing, Framebuffer Mask, Flat Shading, Gouraud Shading, Cel Shading, Dithering, Texture Swizzling.|$|R
40|$|Abstract—A {{high-speed}} three-dimensional (3 -D) graphics SoC {{for consumer}} applications is presented. A 166 -MHz 3 -D graphics full pipeline engine with performance of 33 Mvertices/s and 1. 3 Gtexels/s, and 333 -MHz ARM 11 RISC processor, and video composition IPs are integrated {{together on a}} single chip. The geometry part of 3 -D graphics IP provides full programmability in vertex and triangle level, and two-level multi-texturing with <b>trilinear</b> MIPMAP <b>filtering</b> are realized in the rasterization part. Per-pixel effects such as fog effects, alpha blending, and stencil test are also implemented in the proposed 3 -D graphics IP. The rasterization architecture is designed for reducing external memory accesses to achieve the peak performance. The chip is fabricated using 0. 13 m CMOS technology and its area is 7. 1 7. 0 mm P. Index Terms—Application processor, consumer application, multimedia, 3 -D graphics. I...|$|R
50|$|The texture {{filtering}} {{capabilities of}} R200 are also improved over its predecessor. For anisotropic filtering, Radeon 8500 uses a technique {{similar to that}} used in R100, but improved with <b>trilinear</b> <b>filtering</b> and some other refinements. However, it is still highly angle-dependent and the driver sometimes forces bilinear filtering for speed. NVIDIA's GeForce 4 Ti series offered a more accurate anisotropic implementation, but with a greater performance impact.|$|E
50|$|Anisotropic {{filtering}} (AF) is {{a method}} of enhancing the image quality of textures on surfaces that are far away and steeply angled {{with respect to the}} point of view. Older techniques, such as bilinear and <b>trilinear</b> <b>filtering,</b> do {{not take into account the}} angle a surface is viewed from, which can result in aliasing or blurring of textures. By reducing detail in one direction more than another, these effects can be reduced.|$|E
50|$|Virtua Fighter 3 {{came out}} in 1996, with the {{introduction}} of Taka-Arashi and Aoi Umenokoji. Aside from improving the graphics via use of the Model 3 (such as mipmapping, multi-layer anti-aliasing, <b>trilinear</b> <b>filtering</b> and specular highlighting), the game also introduced undulations in some stages and a fourth button, Dodge. Virtua Fighter 3tb in 1997 was the first major update in series history, implementing tournament battles featuring more than two characters (though not simultaneously as in Tekken Tag Tournament).|$|E
40|$|Abstract — A {{low-power}} three-dimensional (3 -D) graphics {{rendering engine}} with lighting acceleration is designed and implemented for handheld multimedia terminals. The lighting unit is hardware implemented and {{integrated into the}} chip for the low-power acceleration of the 3 D graphics applications. We adopt the following three steps to handle the memory bandwidth problem for rendering operations. I) We find bilinear MIPMAP is the best texture filtering algorithm for handheld systems based on our developed energy-efficiency metric. With this observation, we adopt bilinear MIPMAP for our texture filtering unit, which requires only 50 % of texture memory bandwidth compared with <b>trilinear</b> MIPMAP <b>filtering,</b> II) We put the depth test operation into the earlier stage of the graphics pipeline, which eliminates texture memory accesses for invisible pixels, III) We develop a power-efficient small cache system as the interface to rendering memory. The accelerator takes 181 K gates and the performance reaches 20 Mpixels/s. A test chip is implemented with 1 -poly 6 -metal 0, 18 um CMOS technology. It operates at the frequency of 20 MHz with 14. 7 mW power consumption 1...|$|R
50|$|The GeForce 2 {{architecture}} {{is similar to}} the previous GeForce 256 line but with various improvements. Compared to the 220 nm GeForce 256, GeForce 2 is built on a 180 nm manufacturing process, making the silicon more dense and allowing for more transistors and a higher clock speed. The most significant change for 3D acceleration is the addition of a second texture mapping unit to each of the four pixel pipelines. Some say the second TMU was there in the original Geforce NSR (NVIDIA Shading Rasterizer) but dual-texturing was disabled due to a hardware bug; NSR's unique ability to do single-cycle <b>trilinear</b> texture <b>filtering</b> supports this suggestion. This doubles the texture fillrate per clock compared to the previous generation and is the reasoning behind the GeForce 2 GTS's naming suffix: GigaTexel Shader (GTS). The GeForce 2 also formally introduces the NSR (Nvidia Shading Rasterizer), a primitive type of programmable pixel pipeline that is somewhat similar to later pixel shaders. This functionality is also present in GeForce 256 but was unpublicized. Another hardware enhancement is an upgraded video processing pipeline, called HDVP (high definition video processor). HDVP supports motion video playback at HDTV-resolutions (MP@HL).|$|R
50|$|Texturing {{and final}} output aboard the R600 core is similar but also {{distinct}} from R580. R600 {{is equipped with}} 4 texture units that are decoupled (independent) from the shader core, like in the R520 and R580 GPUs.The render output units (ROPs) of Radeon HD 2000 series now performs the task of Multisample anti-aliasing (MSAA) with programmable sample grids and maximum of 8 sample points, instead of using pixel shaders as in Radeon X1000 series. Also new is the capability to filter FP16 textures, popular with HDR lighting, at full-speed. ROP can also perform <b>trilinear</b> and anisotropic <b>filtering</b> on all texture formats. On R600, this totals 16 pixels per clock for FP16 textures, while higher precision FP32 textures filter at half-speed (8 pixels per clock).|$|R
5000|$|The Savage4 gained {{numerous}} design-wins with board-vendors, including Diamond Multimedia (Stealth III S540) and Creative Labs. The Savage4 series' single cycle <b>trilinear</b> <b>filtering</b> and S3TC texture compression {{created a}} 3D card with exceptional image quality. However, by continuing with a bandwidth-constraining 64-bit memory bus, S3 guaranteed this graphics card {{would never be}} a performance part under 32-bit color. Drivers were again an issue with S3's product; holding back overall performance and causing compatibility issues with software and hardware.|$|E
50|$|<b>Trilinear</b> <b>filtering</b> {{still has}} weaknesses, because the pixel is still assumed {{to take up}} a square area on the texture. In particular, when a texture is at a steep angle {{compared}} to the camera, detail can be lost because the pixel actually takes up a narrow but long trapezoid: in the narrow direction, the pixel is getting information from more texels than it actually covers (so details are smeared), and in the long direction the pixel is getting information from fewer texels than it actually covers (so details fall between pixels). To alleviate this, anisotropic ("direction dependent") filtering can be used.|$|E
5000|$|For example, {{consider}} rendering {{settings of}} the era with 24-bit color, with basic 3D compositing with <b>trilinear</b> <b>filtering</b> and no anti-aliasing: At 640 x 480 resolution it would require 1,900 MB/s of memory bandwidth; at 1024 x 768 resolution it would require 4,900 MB/s. Even basic anti-aliasing {{would be expected to}} roughly double those figures. For reference, SGI's then-current [...] RealityEngine2 machines featured a then-high memory bandwidth of about 10,000 MB/s, which was the reason these machines were widely used in 3D graphics. A typical PC {{of the era}} using AGP 2X could offer only 508 MB/s.|$|E
5000|$|The chip {{adopted an}} {{architecture}} consisting of 8 pixel pipelines, each with 1 texture mapping unit (an 8x1 design). While this {{differed from the}} older chips using 2 (or 3 for the original Radeon) texture units per pipeline, this did not mean R300 could not perform multi-texturing as efficiently as older chips. Its texture units could perform a new loopback operation which allowed them to sample up to 16 textures per geometry pass. The textures can be any combination of one, two, or three dimensions with bilinear, <b>trilinear,</b> or anisotropic <b>filtering.</b> This {{was part of the}} new DirectX 9 specification, along with more flexible floating-point-based Shader Model 2.0+ pixel shaders and vertex shaders. Equipped with 4 vertex shader units, R300 possessed over twice the geometry processing capability of the preceding Radeon 8500 and the GeForce4 Ti 4600, in addition to the greater feature-set offered compared to DirectX 8 shaders.|$|R
50|$|The TNT was {{designed}} as a follow up to the RIVA 128 and a response to 3Dfx's introduction of the Voodoo2. It added a second pixel pipeline, practically doubling rendering speed, and used considerably faster memory. Unlike the Voodoo2 (but like the slower Matrox G200) it also added support for a 32-bit (truecolor) pixel format, 24-bit Z-buffer in 3D mode, an 8-bit stencil buffer and support for 1024×1024 pixels textures. Improved texture filtering techniques, partially assisted by newly added <b>trilinear</b> <b>filtering,</b> dramatically improved image quality compared to the TNT's predecessor. It also added support for up to 16 MiB of SDR SDRAM. TNT was a single chip solution.|$|E
50|$|Each {{bitmap image}} of the mipmap set is a {{downsized}} duplicate of the main texture, but at a certain reduced level of detail. Although the main texture would still be used when the view is sufficient to render it in full detail, the renderer will switch to a suitable mipmap image (or in fact, interpolate between the two nearest, if <b>trilinear</b> <b>filtering</b> is activated) when the texture is viewed from a distance or at a small size. Rendering speed increases since the number of texture pixels (texels) being processed per display pixel can be much lower for similar results with the simpler mipmap textures. If using {{a limited number of}} texture samples per display pixel (as is the case with bilinear filtering) then artifacts are reduced since the mipmap images are effectively already anti-aliased. Scaling down and up is made more efficient with mipmaps as well.|$|E
