23|80|Public
5000|$|<b>Text</b> <b>templates</b> for {{standard}} phrases, address labels and Japanese emoticons.|$|E
5000|$|... in case {{of plain}} <b>text</b> <b>templates,</b> the {{expression}} type must be an instance of Text.Shakespeare.Text.ToText ...|$|E
50|$|Word {{count is}} a common feature in these editors. Other aids can include spell checkers, auto-corrections and quick <b>text</b> <b>templates.</b>|$|E
5000|$|<b>Text</b> <b>Template</b> Transformation Toolkit, a {{technology}} developed by Microsoft ...|$|R
40|$|This paper {{analyses}} MDE {{approach to}} software engineering {{as well as}} OMG’s MDA and Microsoft DSL Tools. MS DSL Tools are a powerful addition to MS Visual Studio 2005 for creating your own Domain Specific Language metamodels and generating IDEs for working with it. Then {{you can make a}} <b>text</b> <b>template</b> to transform your model directly into code. The work describes developed aggregate modeling language metamodel. It also explains <b>text</b> <b>template</b> language for model transformations. The research also includes analysis of the possibility to use model transformations to generate code for data acquisition form database...|$|R
5000|$|Microsoft's <b>Text</b> <b>Template</b> Transformation Toolkit (usually {{referred}} to as [...] "T4") is a <b>template</b> based <b>text</b> generation framework included with Visual Studio. T4 source files are usually denoted by the file extension [...] ".tt".|$|R
5000|$|... the lt (lazy text, same as stext) and st (strict text) quasiquoters: they {{introduce}} <b>Text</b> <b>templates,</b> for {{e-mail or}} text/plain http content type.|$|E
50|$|The macro {{preprocessor}} {{operates as}} a text-replacement tool. It is employed to re-use <b>text</b> <b>templates,</b> typically in computer programming applications, but also in text editing and text-processing applications. Most users require m4 as a dependency of GNU autoconf.|$|E
5000|$|Resource Hacker (also {{known as}} ResHacker or ResHack) {{is a free}} {{resource}} extraction utility and resource compiler for Windows developed by Angus Johnson. It {{can be used to}} add, modify or replace most resources within Windows binaries including strings, images, dialogs, menus, VersionInfo and Manifest resources. It can also create resource files (*.res) from scratch and the latest release (May 2, 2015) provides a number of <b>text</b> <b>templates</b> to facilitate this.|$|E
50|$|Along with {{typeface}} and {{font style}} enhancements, this version includes animated <b>text</b> effect <b>templates,</b> {{and the ability}} for users {{to create their own}} <b>text</b> effect <b>templates.</b> Moreover the function to change the disc output format on the fly was introduced in the authoring module.|$|R
50|$|Along with {{typeface}} and {{font style}} enhancements, this version includes animated <b>text</b> effect <b>templates,</b> more <b>text</b> effects, {{and the ability}} for users {{to create their own}} <b>text</b> effect <b>templates.</b> Furthermore the version offer full 4K support: 4K Video playback, 4k Video footage and more.|$|R
5000|$|Snippet Manager {{to store}} and apply <b>text</b> snippets, <b>templates</b> or scripts ...|$|R
50|$|An {{invitation}} wording is {{a compilation}} of various wedding invitation verses, wordings and <b>text</b> <b>templates</b> for all the special ceremonies. From the wedding invitation text {{it is possible to}} get a comprehensive idea about the type of wedding for instance whether it is Hindu or Christian wedding celebration. In the same manner Hindu invitations are incomplete without wordings. The wordings have a significant relevance while designing a perfect card. The invitation wordings in a Hindu wedding card are very formal, and wordings are used in the card for various ceremonies which include Mehandi, engagement, Wedding Sangeet, Wedding Ceremony and reception Invitation Wording.|$|E
40|$|A {{multilingual}} Internet-based employment advertisement {{system is}} described. Job ads are submitted as e-mail texts, analysed by an example-based pattern matcher {{and stored in}} language-independent schemas in an object-oriented database. Users can search the database {{in their own language}} and get customized summaries of the job ads. The query engine uses symbolic case-based reasoning techniques, while the generation module integrates canned <b>text,</b> <b>templates,</b> and grammar rules to produce texts and hypertexts in a simple way...|$|E
40|$|This paper {{proposes a}} new {{approach}} to the problem of extracting Web communities. Due to the variety of topics found on the Internet, discovering online communities becomes a really difficult task. In our method, we exploit the observation that pages across the Web refer to other pages of a community using similar <b>text</b> <b>templates</b> in their links. Therefore, by creating patterns that describe these templates we can find a large subset of the pages of a specific community. ...|$|E
40|$|The current OpenModelica Complier (OMC) {{translates}} Modelica models into executable Ccodethrough several stages. The Code Generator is {{the final}} stage of the compiler whichgenerates target C-code from the optimized sorted equations. Recently, the Code Generator inOMC has been rewritten using the OpenModelica <b>text</b> <b>template</b> language. This gives a moreconcise and easier to understand code generator. Modeling and simulation is becomingincreasingly used in several application areas. There is demand for the OpenModelicaComplier (OMC) to generate code in languages like C#, CSharp, XML, JAVA and so on. Inthis thesis work, we implement a Java code generator to translate the internal equation-basedmodels in OpenModelica and its extension MetaModelica into a Java code representation. Tocreate the Java code generator we used the OpenModelica <b>text</b> <b>template</b> language, also calledSusan. This work is an important step on the way to finalize a full version of a Java CodeGenerator for the OpenModelica Complier (OMC) ...|$|R
40|$|The {{objective}} of this master thesis {{is to develop a}} translation from the internal equation-based model representation in OpenModelica to an XML form which can be imported in the ACADO open source toolkit, in order to enable integrated dynamic modeling and optimization. The development is mostly done in the Eclipse plugin using the OpenModelica <b>text</b> <b>template</b> language Susan, (described in [2] and in Chapter 12 of [3]), which is a strongly typed, efficiently compiled <b>text</b> <b>template</b> language similar to the StringTemplate language used for many Java and web applications. The result will be integrated in the OMOptim optimization tool (see below) The OpenModelica platform, containing the OpenModelica Compiler (OMC), is an open source Modelica-based modeling and simulation environment intended for industrial and academic usage. Its long-term development is supported by a non-profit organization – the Open Source Modelica Consortium (OSMC), currently including 33 organizations. Fig. 1. A) OpenModelica MDT Eclipse plugin b) OMOptim tool in OpenModelica...|$|R
40|$|The 3 D Additivist Cookbook, devised {{and edited}} by Morehshin Allahyari & Daniel Rourke, {{is a free}} {{compendium}} of imaginative, provocative works from over 100 world-leading artists, activists and theorists. The 3 D Additivist Cookbook contains. obj and. stl files for the 3 D printer, as well as critical and fictional <b>texts,</b> <b>templates,</b> recipes, (im) practical designs and methodologies for living in this most contradictory of times...|$|R
30|$|A final {{question}} {{that this study}} raises is whether there are parallel definitions for LSP performance assessment in writing and ‘chat’ support in this industry. Much of the IT support in call centres is now carried out through synchronous and asynchronous email and chat. Many customer complaints relate to poor customer relationship building using inappropriately long responses that {{appear to have been}} cut and pasted from <b>text</b> <b>templates</b> provided by the business. This would provide a further rich area for LSP writing assessment research for work and at work.|$|E
40|$|The paper {{proposes a}} new {{approach}} to computer translation of technical scientific publications. The described method is based on the interactive use of translation templates which allow to improve the translation quality due to the rational distribution of functions between a domain expert, a human translator (a linguist) and computer software. The procedures for creating <b>text</b> <b>templates</b> and for template-based computer translation of publications were developed. An example of the translation and the results of experimental studies were given. The evaluation of the effectiveness of the proposed approach compared to the existing systems of computer translation was made|$|E
40|$|A {{community}} of interacting software agents can support an activity of human agents. We describe an experiment {{based on an}} existing information server showing how software agents compete {{for the attention of}} the user with the intention to support her in an informationrich task through providing her some useful comment. To be successful in the competition, agents have to capture contextual parameters about the current activity of the user and render them in a context-sensitive annotation to information. The outcome of the competition for attention consists of a weighted topic structure, annotated with <b>text</b> <b>templates.</b> The annotated topic structure is the basis for generating a context-sensitive navigation node by a process of template expansion and aggregation...|$|E
30|$|The {{function}} of template sharing function shares a template among users. In Cloud services or hosting services, many System Integrators or resellers build and manage services for end users. The {{function of}} template sharing is generalized for multi-tier sharing model of cloud or hosting services. This {{can be used}} not only a <b>text</b> <b>template</b> file sharing but also restricted sharing of software with license such as OS images or restricted codes sharing for multi-vendor developments.|$|R
40|$|This {{paper is}} focused on {{describing}} a technique of creating object-relational transformation components by using code generation system based on database struc-ture. It reviews existing ORM solutions, as well as highlights their main advantages and drawbacks. We describe a technique to create relational-object transformation components by using code generation system to automatically generate persistence layer based on the database structure. <b>Text</b> <b>template</b> engine is used to generate SQL queries, business classes and APIs to access data from application code. Provided default implementations are sufficient to quickly obtain working persistence layer...|$|R
40|$|The {{main goal}} of this bachelor's thesis is to {{generate}} procedurally a forest (landscape with plants described in <b>text</b> <b>template).</b> Landscape is generated using Perlin noise and the interpret of L-systems was implemented for plants generation purposes. Both these techniques are {{described in more detail}} in theory section as well as the implementation section of this thesis. Furthermore, techniques such as phong lightning model, normal-mapping, shadow-mapping, realistic water, skybox and spriting for better realistic look of the scene, are also discussed in this thesis. Implemented application can also be used for the export of generated plant models in format. obj for further use by some extern application (for example Blender) ...|$|R
40|$|Efficient {{data entry}} by clinicians remains a {{significant}} challenge for electronic medical records. Current approaches have largely focused on either structured data entry, {{which can be}} limiting in expressive power, or free-text entry, which restricts {{the use of the}} data for automated decision support. Text-based templates are a semi-structured data entry method that has been used to assist physicians in manually entering clinical notes, by allowing them to edit predefined example notes. We analyzed changes made to 18, 726 sentences from <b>text</b> <b>templates,</b> using a natural language processor. The most common changes were addition or deletion of normal observations, or changes in certainty. We identified common modifications that could be captured in structured form by a graphical user interface...|$|E
40|$|This paper {{proposes a}} life-like {{presentation}} agent system called TablePresenter. In the TablePresenter, a user ed-its a table on Microsoft Excel, and also specifies the pre-sentation contents for explaining {{the table in}} the form of tree structure, called presentation tree. The system then generates animated presentation by an agent. Presenta-tion trees have intermediate nodes labeled as “contrast ” and “compare, ” and such types of nodes are associated with ap-propriate speech <b>text</b> <b>templates</b> with gesture specifications. Traversing the presentation tree then yields speech texts for explaining the table, and the resultant texts animate the agent. We developed a prototype TablePresenter system, and it successfully generated animated presentations for ta-bles. KEY WORDS life-like agent, interface agent, pedagogical agent, virtual human, presentation, TablePresenter. ...|$|E
40|$|Ryo Okuya, 1 Masaomi Kimura, 2 Michiko Ohkura, 2 Fumito Tsuchiya 3 1 Graduate School of Engineering and Science, 2 Faculty of Engineering, Shibaura Institute of Technology, Tokyo, 3 School of Pharmacy, International University of Health and Welfare, Tokyo, Japan Abstract: To prevent {{prescription}} errors {{caused by}} information systems, a database to store complete and accurate drug {{information in a}} user-friendly format is needed. In previous studies, the primary method for obtaining data stored in a database is to extract drug information from package inserts by employing pattern matching or more sophisticated methods such as text mining. However, {{it is difficult to}} obtain a complete database because there is no strict rule concerning expressions used to describe drug information in package inserts. The authors&# 39; strategy was to first build a database and then automatically generate package inserts by embedding data in the database using templates. To create this database, the support of pharmaceutical companies to input accurate data is required. It is expected that this system will work, because these companies can earn merit for newly developed drugs to decrease the effort to create package inserts from scratch. This study designed the table schemata for the database and <b>text</b> <b>templates</b> to generate the package inserts. To handle the variety of drug-specific information in the package inserts, this information in drug composition descriptions was replaced with labels and the replacement descriptions utilizing cluster analysis were analyzed. To improve the method by which frequently repeated ingredient information and/or supplementary information are stored, the method was modified by introducing repeat tags in the templates to indicate repetition and improving the insertion of data into the database. The validity of this method was confirmed by inputting the drug information described in existing package inserts and checking that the method could regenerate the descriptions in the original package insert. In future research, the table schemata and <b>text</b> <b>templates</b> will be extended to regenerate other information in the package inserts. Keywords: medical safety, drug information, package insert, drug database, cluster analysi...|$|E
5000|$|Layout constructor: page layout, cartographic {{elements}} (view, legend, north, scale, frames, image, <b>text,</b> graphic), grid, <b>templates.</b>|$|R
50|$|Template Builder is an {{extension}} to Microsoft Word that simplifies the development of Rich <b>Text</b> Format <b>templates.</b> Templates created using Template Builder are transformed into XSL Stylesheets {{that can be used}} to generate PDF, RTF, Microsoft Excel and HTML outputs.|$|R
40|$|The {{increase}} towards Object Oriented Design {{creates a}} big gap between OO and relational database. In the other side, relational database {{still a big}} favor in designing business-powered application. Developers use Object Relational Mapping (ORM) {{to fill the gap}} between OO and RDBMS but still, the problem in the association of RDBMS and OO exists which caused underestimation towards ORM methodology. This research provides a solution to detect relationship inside tables of database, generate LINQ query to map the field of tables to the attribute of the entity classes. Using T 4 <b>text</b> <b>templating</b> we are able to generate the whole Data Access Object class which provides transparent encapsulation and relational mapping for the system...|$|R
40|$|A {{multilingual}} Internet-based employment advertisement {{system is}} described. Job ads are submitted as e-mail texts, analysed by an example-based pattern matcher {{and stored in}} language-independent schemas in an object-oriented database. Users can search the database {{in their own language}} and get customized summaries of the job ads. The query engine uses symbolic case-based reasoning techniques, while the generation module integrates canned <b>text,</b> <b>templates,</b> and grammar rules to produce texts and hypertexts in a simple way. 1 Introduction Free movement of labour across national boundaries is an important aim of the European Union. 1 One of the prerequisites for this open labour market is accessibility of information about employment opportunities, both {{from the point of view}} of people seeking work, and of their potential employers. However, many EU citizens are denied full access to employment opportunities because information may not be readily available, and even where it [...] ...|$|E
40|$|Current work in surface {{realization}} {{concentrates on}} the use of general, abstract algorithms that interpret large, reversible grammars. Only little attention has been paid so far to the many small and simple applications that require coverage of a small sublanguage at different degrees of sophistication. The system TG/ 2 described in this paper 1 can be smoothly integrated with deep generation processes, it integrates canned <b>text,</b> <b>templates,</b> and context-free rules into a single formalism, it allows for both textual and tabular output, and it can be parameterized according to linguistic preferences. These features are based on suitably restricted production system techniques and on a generic backtracking regime. 1 Motivation Current work in surface realization {{concentrates on the}} use of general, abstract algorithms that interpret declaratively defined, non-directional grammars. It is claimed that this way, a grammar can be reused for parsing and generation, or a generator can [...] ...|$|E
40|$|Abstract. Software architects {{consider}} capturing {{and sharing}} architectural decision knowledge increasingly important; many tacit dependencies exist in this knowledge. Architectural decision modeling makes these dependencies explicit {{and serves as}} a foundation for decision knowledge management tools. In practice, however, <b>text</b> <b>templates</b> and informal rich pictures rather than models are used to capture the decision knowledge; a formal definition of model entities and their relations is missing in {{the current state of the}} art. In this paper, we propose such a formal definition of architectural decision models as directed acyclic graphs with several types of nodes and edges. In our models, architectural decision topic groups, issues, alternatives, and outcomes form trees of nodes connected by edges expressing containment and refinement, decomposition, and triggers dependencies, as well as logical relations such as (in) compatibility of alternatives. The formalization can be used to verify integrity constraints and to organize the decision making process; decision types and dependency patterns can be identified. A reusable architectural decision model supporting service-oriented architecture design serves as our example. We present tool support and give a quantitative evaluation...|$|E
50|$|WebMacro {{can also}} be used to {{generate}} arbitrary <b>text</b> output from <b>templates</b> (one of its uses is automated code generation).|$|R
40|$|This paper shows a way {{to derive}} test cases for system level black-box-testing from the {{specification}} models already elaborated in the requirements analysis phase. The basis for this process is the UML (Unified Modelling Language) use case model. It provides {{a good way to}} describe both the interaction with the user and the system behavior. The concept of a <b>text</b> <b>template</b> driven structure editor is presented. Such an editor can be used to construct a formalised use case description in a user-friendly way. According to the principles of the – already known – statistical usage testing, which aims at a statement about the fitness of the system for the intended purpose, the most likely usage scenarios are chosen as test cases. It is shown how the Marcov property of the system description can be preserved in the case of data dependent system behaviour...|$|R
5000|$|However, in 1984 Mindscape, Inc. {{released}} an interactive version of Racter, developed by Inrac Corporation, for DOS, Amiga and Apple II computers. The published Racter {{was similar to}} a chatterbot. The BASIC program that was released by Mindscape was far less sophisticated than anything that could have written the fairly sophisticated prose of The Policeman's Beard. The commercial version of Racter could be likened to a computerized version of Mad Libs, the game in which you {{fill in the blanks}} in advance and then plug them into a <b>text</b> <b>template</b> to produce a surrealistic tale. The commercial program attempted to parse text inputs, identifying significant nouns and verbs, which it would then regurgitate to create [...] "conversations," [...] plugging the input from the user into phrase templates which it then combined, along with modules that conjugated English verbs.|$|R
