4|10000|Public
50|$|The suites {{include other}} build tools, such as libraries, and <b>tools</b> <b>for</b> <b>threading</b> and {{performance}} analysis.|$|E
50|$|While the Intel {{compiler}} {{can generate}} a gprof-compatible profiling output, Intel {{also provides a}} kernel-level, system-wide statistical profiler as a separate product called VTune. VTune features an easy-to-use GUI (integrated into Visual Studio for Windows, Eclipse for Linux) {{as well as a}} command-line interface. In addition to the VTune profiler, there is Intel Advisor that specializes in vectorization optimization and <b>tools</b> <b>for</b> <b>threading</b> design and prototyping.|$|E
50|$|While the Intel {{compiler}} {{can generate}} a gprof compatible profiling output, Intel {{also provides a}} kernel level, system-wide statistical profiler called Intel VTune Amplifier. VTune can be used from a command line or thru an included GUI on Linux or Windows. It can also be integrated into Visual Studio on Windows, or Eclipse on Linux). In addition to the VTune profiler, there is Intel Advisor that specializes in vectorization optimization and <b>tools</b> <b>for</b> <b>threading</b> design and prototyping.|$|E
50|$|Groupware—Technologies that {{facilitate}} collaboration and sharing of organisational information. One {{of the earliest}} successful products in this category was Lotus Notes: it provided <b>tools</b> <b>for</b> <b>threaded</b> discussions, sharing of documents, organisation-wide uniform email, etc.|$|R
5000|$|... #Subtitle level 2: Machine <b>tools</b> used <b>for</b> <b>threading</b> {{blind holes}} ...|$|R
5000|$|At {{least two}} U.S. tool {{manufacturers}} have manufactured <b>tools</b> <b>for</b> <b>thread</b> milling in blind holes: Ingersoll Cutting Tools of Rockford, Illinois, and Tooling Systems of Houston, Texas, who introduced the ThredMil in 1977, {{a device that}} milled large internal threads in the blind holes of oil well blowout preventers. Today many CNC milling machines can run such a thread milling cycle (see a video of such {{a cut in the}} [...] "External links" [...] section).|$|R
40|$|The bachelor’s thesis <b>Tools</b> <b>for</b> <b>threading</b> {{and their}} use deals with issues {{connected}} to tools, the materials used and their usage {{in the field of}} mechanical engineering. Individual parts of the thesis cover types of <b>tools</b> <b>for</b> <b>threading,</b> methods of threading and materials suitable for tap making. Further, the range of monolithic milling taps in the producers’ supply is also analysed...|$|E
40|$|Real {{structure}} of heteroepitaxial GaN and AlGaN layers is studied by diffuse x-ray scattering. A new developed method based on Monte Carlo simulation enabling to determine densities of threading dislocations in c-plane GaN and stacking faults in a-plane GaN is presented. The results of Monte Carlo simulations are compared with ones obtained {{by use of}} other conventional techniques. The advantages and limitations of the new method are discussed in detail. The methods accuracy is estimated as about 15 %. We have shown that our method is a reliable <b>tool</b> <b>for</b> <b>threading</b> dislocations and stacking faults densities determination...|$|R
50|$|Intel {{also offers}} a <b>tool</b> <b>for</b> memory and <b>threading</b> error {{detection}} called Intel Inspector XE. Regarding memory errors, it helps detect memory leaks, memory corruption, allocation/de-allocation of API mismatches and inconsistent memory API usage. Regarding threading errors, it helps detect data races (both heap and stack), deadlocks and thread and synch API errors.|$|R
2500|$|The <b>tooling</b> used <b>for</b> <b>thread</b> milling can be solid or indexable. <b>For</b> {{internal}} <b>threads,</b> solid cutters {{are generally}} limited to holes larger than , and indexable internal thread cutting tools {{are limited to}} holes larger than [...] The advantage {{is that when the}} insert wears out it is easily and more cost effectively replaced. The disadvantage is the cycle time is generally longer than solid tools. Note that solid multiple-form thread cutting tools look similar to taps, but they differ in that the cutting tool does not have a backtaper and there is not a lead-in chamfer. This lack of a lead-in chamfer allows the threads to be formed within one pitch length of the bottom of a blind hole.|$|R
50|$|The {{trapezoidal}} {{metric thread}} form {{is similar to}} the Acme thread form, except the thread angle is 30°. It is codified by DIN 103. Although metric screw threads are generally more prevalent worldwide than imperial threads, the Acme thread is very common worldwide, and may be more widely used than the trapezoidal metric thread. This is not surprising, as manufacturers today are usually capable of making whichever threads (metric or imperial) are best for any given application (based on customer expectations or tooling availability). It may be that the <b>tooling</b> <b>for</b> Acme <b>threads</b> has been so dominant (compared to trapezoidal metric) that customers tend to want Acme <b>threads</b> <b>for</b> power screws regardless of metric standards used elsewhere in the product.|$|R
40|$|Abstract: The tapping {{cutter bar}} is {{developed}} {{to replace the}} manual tapping of internal thread to obtain machining accuracy and efficiency for large batch of machining internal thread of small diameter, which is a tapping <b>tool</b> <b>for</b> machine use featuring economic and practical as well as helping {{to solve the problems}} of low efficiency, inferior accuracy and easy-breaking of tappers. 0. Preface In practical production process, machining of internal <b>thread</b> <b>for</b> large diameter can be realized by using lathe <b>tool</b> <b>for</b> internal <b>thread,</b> but this method is difficult to machine internal thread of parts with small diameter, which is usually done by first drilling of base hole of the thread after machining process, and then using tapper to obtain the internal thread manually or with machine. By this traditional method <b>for</b> internal <b>thread</b> processing, the processes are distracted that increases time for handling, loading and unloading. It also lead to low efficiency, low accuracy of the perpendicularity error of thread. What’s more, tapper are always likely to break during tapping process, especially for parts with small diameter, and the depth of the thread is hard to control. To solve the problems mentioned above, a new type of tapping <b>tool</b> <b>for</b> machine use is developed. The tool bar could be inserted into the tapper hole on the lathe tailstock or installed o...|$|R
40|$|Abstract. Thermal {{spraying}} {{technologies are}} {{an effective way}} to ensure surface protection against destructive effects of wear, corrosion and oxidizing phenomena which can be applied in majority industrial sectors for improving properties of new parts or for reconditioning worn out parts technology. The powders used in this study are mainly used in the repair of cast iron parts (e. g. engine blocks) and in build- up of press <b>tools</b> <b>for</b> car bodies, <b>threads,</b> turbine-guided vanes, rotating valves and shafts in eccentric presses. Three types of tubular composites based on WC powders were studied which demonstrated that this technology improved their properties...|$|R
40|$|The Inte l ® Thread Checker is a runtime {{analysis}} <b>tool</b> <b>for</b> automatically finding <b>threading</b> related {{defects in}} multithreading applications. An unsynchronized memory reference which causes non-deterministic behavior – {{a problem that}} is notoriously hard to find – is one such defect which the Thread Checker finds with ease. These data races are pinpointed for the user at specific locations in the application’s source code. Modern threading APIs (such as Windows or POSIX threading APIs) have a rich set of threading and synchronization constructs which allow for complex interactions between threads – more than simply locks protecting a critical section. The Thread Checker uses an analysis algorithm which allows the transitive effects of these APIs to be reflected. This paper will use a motivating example to illustrate {{the operation of the}} Intel ® Thread Checker. The usage model, instrumentation approach, and runtime analysis algorithm will be presented. ...|$|R
40|$|Proyecto de Graduación (Licenciatura en Ingeniería en Costrucción) Instituto Tecnológico de Costa Rica. Escuela de Ingeniería en Construcción, 2013. The present project {{aimed to}} {{establish}} an operational model to be applicable in the control and the supervision of public work contracts developed by the Oficina de Ingeniería of ITCR. To establish this model, developing and diagramming the process of public work execution were necessary {{to be carried out}} in that department. According to the rules of government contracting, a documentary research was conducted to determine the process of public works. Then, inside of this process was developed an inspection check; an applicable tool to facilitate the work of the project s inspectors. Also, another revision <b>tool</b> <b>for</b> administrative <b>thread</b> was proposed that were useful to the project coordinator. Finally, the operational model that allows the control and supervision of public works contracts developed in the Oficina de Ingeniería was established. From this project was concluded that in the Oficina de Ingeniería is developed a contract execution process made up of seventeen administrative threads. Finally, incorporating to the normal procedures the tools and the indicated processes were recommended in order to get an effective control and a supervision of public work contracts. Instituto Tecnológico de Costa Rica. Escuela de Ingeniería en Construcción. Oficina de Ingeniería del Instituto Tecnológico de Costa Rica...|$|R
5000|$|Round-robin {{scheduling}} <b>for</b> <b>threads</b> at {{the same}} priority level ...|$|R
5000|$|Plastic, fabric {{or metal}} {{stringing}} material <b>for</b> <b>threading</b> beads ...|$|R
50|$|Support <b>for</b> <b>threads</b> {{that allows}} {{creation}} of multithreaded, scalable applications.|$|R
50|$|NetBSD uses a {{multilevel}} feedback queue with priorities {{ranging from}} 0-223. 0-63 are reserved <b>for</b> time-shared <b>threads</b> (default, SCHED_OTHER policy), 64-95 <b>for</b> user <b>threads</b> which entered kernel space, 96-128 <b>for</b> kernel <b>threads,</b> 128-191 <b>for</b> user real-time <b>threads</b> (SCHED_FIFO and SCHED_RR policies), and 192-223 for software interrupts.|$|R
5000|$|McCalls Special Products Limited of Rotherham, <b>for</b> <b>threaded</b> bar {{and cable}} systems.|$|R
5000|$|In AIX Version 4 {{there are}} three {{possible}} values <b>for</b> <b>thread</b> scheduling policy: ...|$|R
5000|$|Modula-3—modern {{member of}} Algol family with {{extensive}} support <b>for</b> <b>threads,</b> mutexes, condition variables ...|$|R
5000|$|... 1823: He {{was awarded}} a Vulcan medal for a screw tap <b>for</b> <b>thread</b> cutting.|$|R
50|$|Linux, {{since the}} {{introduction}} of NPTL and the Linux 2.6 kernel, has proper support <b>for</b> <b>thread</b> cancellation.|$|R
5000|$|NoResponseCheck Tool — Analyzes {{the logs}} <b>for</b> <b>threads</b> {{reporting}} as non-responsive {{to differentiate between}} non-responsive and slow threads.|$|R
50|$|Thus, in barrier {{synchronization}} {{of multiple}} threads {{there will always}} be a few threads that will end up waiting <b>for</b> other <b>threads</b> as in the above example thread 1 keeps waiting <b>for</b> <b>thread</b> 2 and 3. This results in severe degradation of the process performance.|$|R
50|$|Pth also {{provides}} API emulation <b>for</b> POSIX <b>threads</b> <b>for</b> backward compatibility.|$|R
5000|$|... #Subtitle level 3: Minimum Standard <b>for</b> Jewelry <b>Threading</b> <b>for</b> Initial Piercings ...|$|R
5000|$|By {{rotation}} of core (internal <b>threaded</b> components)—Used <b>for</b> <b>threaded</b> components, where the component is automatically ejected by rotating the core insert.|$|R
5000|$|... {{items for}} synchronisation: mutexes and {{counting}} semaphores, used <b>for</b> <b>thread</b> synchtonization, signalling from ISR to a thread and guarding shared resources, ...|$|R
40|$|Static program slicing is an {{established}} method for analyzing sequential programs, especially for program understanding, debugging and testing. Until now, {{there was no}} slicing method <b>for</b> <b>threaded</b> programs which handles interference correctly. We present such a method which also calculates more precise static slices. This paper extends the well known structures of the control flow graph and the program dependence graph <b>for</b> <b>threaded</b> programs with interference. This new technique does not require serialization of threaded programs...|$|R
5000|$|The Linux kernel gained {{support for}} deferrable timers in 2.6.22, and {{controllable}} [...] "timer slack" [...] <b>for</b> <b>threads</b> in 2.6.28 allowing timer coalescing.|$|R
40|$|Abstract — Here it is {{explained}} how {{can be designed}} by an easy form, and using HDL <b>tool,</b> a <b>thread</b> <b>for</b> implement the algorithm for natural binary format to decimal (BCD) format. In order to achieve that, here is released an explanation of such algorithm in a fast and needed way. In VHDL, structural style {{will be used for}} build each one modules for the Arithmetic Unit as well as those modules for Control Unit. The program is the set of instructions. Each instruction is a single operation as a sum, a shift, a comparison and so on. Every those instructions are carried out by a single module in VHDL. The memory to store the program it is implement by array of registers. That array is executed in a sequence by which is driven by a Program Counter (PC). The complete architecture it is explain step by step in order to it can be used as application note or a tutorial, and repeated by teachers, students and hobbyist. The complete processor it is builds in a single CPLD from Lattice Semiconductor. That is the ispMAC...|$|R
60|$|Lazarus {{would make}} a fine poem, wouldn't he? I lie here, weaving a great many schemes. I am seldom at a loss <b>for</b> <b>thread.</b>|$|R
40|$|The {{effect of}} a plain hole on the fatigue {{properties}} of a body undergoing uniaxial loading is a well-studied area. However, for the case of threaded holes that are not being used together with a bolt, little {{can be found in}} the literature. In this project, stress concentration factors, Ktn, <b>for</b> <b>threaded</b> holes, following the ISO metric standard, have been calculated using finite element models in ANSYS. Based on theser esults, estimations of the fatigue notch factor, Ktf, <b>for</b> the <b>threaded</b> holes were derived. The magnitude of Ktf depends on how the notch sensitivity index, q, is being determined. In this project, both Neuber’s and Peterson’s formulas were used as estimates of q and a comparison between the two methods was made. The stress concentration factors <b>for</b> the <b>threaded</b> holes were significantly higher than the corresponding stress concentration factors for plain holes. As the size of the hole and the surrounding body was increased, Ktn decreased. In the fatigue analysis, Peterson’s formula predicted higher values of the fatigue notch factor compared to Neuber’s and could therefore be useful in design purposes. Furthermore, the reduction in fatigue strength <b>for</b> the <b>threaded</b> holes, compared to the plain holes, was calculated. These results showed that the percentage decrease in fatigue strength <b>for</b> <b>threaded</b> holes was approximately the same, regardless if Neuber’s or Peterson’s estimation of q was used. The reduction in fatigue strength <b>for</b> <b>threaded</b> holes with a coarse pitch, compared to plain holes, varied from about 16 % for the smallest diameter tested(M 6) to about 10 % for the biggest (M 68). The corresponding reduction <b>for</b> <b>threaded</b> holes with a fine pitch varied from about 14 % for the smallest diameter (M 6) to about 9 % for the biggest (M 64). As the size of the hole and the surrounding body was increased, the threads’ effect on the fatigue strength decreased...|$|R
50|$|The core {{elements}} of OpenMP are the constructs <b>for</b> <b>thread</b> creation, workload distribution (work sharing), data-environment management, thread synchronization, user-level runtime routines and environment variables.|$|R
