13|182|Public
40|$|ET-LOTOS is a timed and {{probabilistic}} {{extension of}} the standard specification language LOTOS. In this paper, it is shown how such an extension {{can be used to}} model the behaviour of the real <b>time</b> <b>scheduler</b> of the FIP protocol. Since ET-LOTOS has been designed specifically to enable direct performance evaluation from formal specifications, the possibility of analyzing the performance and the correctness of FIP real <b>time</b> <b>scheduler</b> directly from the specification is also discusse...|$|E
40|$|It is {{well-known}} that wireless scheduling algorithm could exploit multi-user diversity {{to enhance the}} network capacity of wireless systems. However, the advantage of scheduling with respect to network coverage is a relatively unexplored topic. We consider a wireless system with an access point or base station equipped with   ¡ transmit antennas as well as ¢ mobiles with single receive antenna. With multiple transmit antenna, there are additional degrees of freedom which could deliver either spatial multiplexing gain and/or spatial diversity gain. The spatial multiplexing allows simultaneous transmission to multiple clients {{at the same time}} and frequency and therefore contributes to network capacity gain. On the other hand, the spatial diversity offers robustness to channel fading and contributes to the network coverage. With cross layer scheduling, there is also multi-user selection diversity which contributes to both network capacity and coverage. In this paper, we propose a common analytical design framework for both capacity-optimized scheduler and coverage-optimized scheduler design. We show that both problems could be cast into a common optimization problem with an adjustable parameter £ ¤   ¡. We found that tradeoff in the space <b>time</b> <b>scheduler</b> is required only for users close to the base station. For example, the space <b>time</b> <b>scheduler</b> should exploit spatial multiplexing (£ ¥   ¡) and spatial diversity (£ ¥ ¦) to optimize the network capacity and network coverage respectively. On the other hand, for users that are far from the base station, the space <b>time</b> <b>scheduler</b> shoul...|$|E
30|$|The Repast Simphony core {{plug-ins}} provide major simulation functions, including time scheduling, space management, behavior activation, {{and random}} number generation (North et al. 2007). Repast Simphony space management uses contexts and projections. Repast Simphony provides a discrete event <b>time</b> <b>scheduler</b> that uses double precision real numbers for event times. The scheduler also allows events with otherwise identical {{times to be}} differentiated with an optional priority ranking. The Repast scheduler offers imperative scheduling and declarative scheduling for both sequential and concurrent activities, as discussed later in this section.|$|E
5000|$|TIMESLICE (OS/2 only) : Configures {{minimum and}} maximum <b>time</b> slices for <b>scheduler.</b>|$|R
40|$|General purpose {{operating}} systems need integrated real time scheduling. It has recently become standard practice to run soft real time applications, such as multimedia and games programs, on general purpose desktop systems. The {{operating systems}} in use on these platforms employ scheduling algorithms {{derived from the}} traditional multi-user timesharing world, which are unsuitable for real <b>time</b> purposes. The <b>scheduler</b> {{is viewed as a}} box" whose behaviour depends in an unpredictable way on the entire system load. Many hard real time systems use static priorities instead, but these are not suitable for the dynamic task sets encountered in a general purpose computing environment. A large number of prototype systems with improved real <b>time</b> <b>schedulers</b> have been created in the past. Unfortunately, designers of these systems placed constraints on the operating system structure which are incompatible with ubiquitous monolithic kernels, client-server architectures, existing standards and a [...] ...|$|R
40|$|Abstract: We {{consider}} {{the problem of}} verifying invariance properties for duration systems. Such systems are (extended) timed graphs with duration variables. They are especially suitable for describing real <b>time</b> <b>schedulers.</b> However, {{for this kind of}} systems, the verification problem of invariance properties is in general undecidable. We propose an over approximation method based on a particular extension of a given duration system, and we show that our over approximation includes all the digitization of all the real computations of the duration system. The over-approximated system can then be used to perform an interesting close analysis of invariance properties of the initial system, while other existing approaches fail...|$|R
40|$|This paper {{presents}} design {{principles and}} algorithm {{for building a}} real <b>time</b> <b>scheduler.</b> The primary objective of the scheduler is to assign arrival aircraft to a favorable landing runway and schedule them to land at times that minimize delays. A further objective of the scheduler is to allocate delays between high altitude airspace far from the airport and low altitude airspace near the airport. A method of delay allocation is described that minimizes the average operating cost {{in the presence of}} errors in controlling aircraft to a specified landing time...|$|E
40|$|SUBJECT: GRAND GULF NUCLEAR STATION- FINAL EXERCISE REPORT Dr. Mr. Eaton: Enclosed is {{a copy of}} the Federal Emergency Management Agency's (FEMA) Region VI {{exercise}} {{evaluation report}} of the March 6, 2002, emergency preparedness exercise at the Grand Gulf Nuclear Generating Station. The exercise was originally scheduled for September 19, 2001, but was granted a one <b>time</b> <b>scheduler</b> exemption due to the events of September 11, 2001. The report indicates that FEMA VI observed no deficiencies and one area requiring corrective action (ARCA) during the exercise. The purpose of this letter is to transmit to you the results of the FEMA VI evaluation of the emergency exercise. No response to the Nuclear Regulatory Commission is required. If you have any further questions, please contact Ryan E. Lantz of my staff at (817) 860 - 8158...|$|E
40|$|Abstract—In open {{real-time}} {{systems with}} a non-stationary workload, tasks can be dynamically mapped to servers. If a server-based, slack reclamation scheduler is used, each task reserves {{a fraction of}} the bandwidth based on its resource esti-mation. However, the slack <b>time</b> <b>scheduler</b> makes no guarantee to a task beyond its processor capacity reserve, i. e., the scheduler cannot guarantee that a soft real-time task will receive a higher quality of service than is specified by its resource reservation. Nevertheless users often assume that a desired quality of service (QoS) can be achieved using an optimistic resource reservation. Even though existing slack time schedulers perform well in a closed real-time system (with well-behaved applications, station-ary workloads, or excessive processor speed), their performance can drop significantly when a task changes its workload. We identify resource underbooking and overbooking problems i...|$|E
50|$|After {{the user}} has {{selected}} a product category, the next screen presents links for solving the problem, device information, a call link {{with an estimated}} wait <b>time,</b> a <b>scheduler,</b> and a screen for chatting with an agent by instant message.|$|R
50|$|The {{scheduler}} will lists all {{the tasks}} and their dependencies {{on each other}} in terms of execution and start <b>times.</b> The <b>scheduler</b> will produce optimal schedule in terms of number of processors to be used or the total time of execution for the application.|$|R
40|$|Graphic {{rendering}} {{is expensive}} {{in terms of}} computation. We investigate distributing it by applying the powerful computing technique called grid computing, and showing how this technology has a great effectiveness and high performance. The paper shows how to develop a java drawing framework for drawing in the distributed environment by dividing the work upon nodes in grid computing and selecting the best nodes for job assignments to have the jobs executed in {{the least amount of}} <b>time.</b> <b>Schedulers</b> are limited in individual capability, but when deployed in large numbers can represent a strong force similar to a colony of ants or swarm of bees. The paper also presents a mechanism for load balancing based on swarm intelligence such as Ant colony optimization and Particle swarm Optimization...|$|R
40|$|Checking a page's {{accessibility}} (not mapped, {{read only}} or read/write) is sometimes useful for operating system kernels. We describe a technique for extending a processor's instruction set (by software) so that accessibility tests can {{in most cases}} be done faster than parsing the page table tree by software. 1 Motivation Operating system kernels sometimes need to know, whether a page is actually mapped or not, i. e. whether the data can be accessed without page fault. This is useful in some situations when the kernel accesses user data: ffl An interrupt handler may use a special (faster) method when the user data is actually mapped. ffl The kernel may check whether the user stack is writable before accessing it. ffl A hard real <b>time</b> <b>scheduler</b> may use the page accessibility information to decide whether a task can be scheduled or not. In these situations one gains performance, if the virtual addresses are directly used for memory access. This requires that the accessibility can be ret [...] ...|$|E
40|$|In {{previous}} works we have introduced the DTT (Deficit Transmission <b>Time)</b> <b>scheduler,</b> an algorithm {{to be run}} at the Access Point to contrast the performance anomaly affecting IEEE 802. 11 based networks. DTT has indeed proved to be very effective, as {{it is able to}} guarantee proportional fairness and isolation to downlink flows. et, due to its centralized nature, it can only put in place a suboptimal solution, as the uplink flows are still uncontrolled. We have therefore extended the idea of DTT to a distributed version of the scheduler, called Distributed DTT or (DT) (2). The paper, beyond describing this new algorithm,presents the results of an extensive set of simulations. These) 2 show that (DT is able to defeat the performance anomaly for uplink flows, thus complementing its ancestor perfectly. A useful side effect is the reduction of the bottleneck effect, that allows more fairness between uplink and downlink directions. We show that these achievements are crucial in supporting the emerging Voice Over WLAN services...|$|E
40|$|As {{concerns}} about energy consumption grow,the power {{consumption of the}} EPON becomes a matterof increasing importance. In respect of energy efficiency,the current standard has no management protocols aimingto reduce power consumption in EPONs. In this paper,we propose an Energy Management Mechanism (EMM) for downlink EPON systems. The proposed mechanism isdesigned to enhance the standardized control scheme inEPON with the objective to increase energy efficiency whilesatisfying diverse QoS requirements. The main idea is toput an Optical Network Unit (ONU) into the sleep modeand determine a suitable wakeup <b>time</b> <b>scheduler</b> at theOptical Line Terminal (OLT). A generic EPON system isconsidered, which is composed of an OLT and several ONUsthat are EMM enabled. An energy consumption optimizationproblem aimed at saving energy is proposed and twoheuristic sleep mode scheduling policies are addressed tosolve it. The scheduling algorithms are tightly coupled withthe upstream bandwidth allocation and downstream transmissionscheduling together through an integrated approachin which awake time in ONUs is minimized. There is atrade-off decision between maximizing the power saving andguaranteeing the network performance at the same time. Simulation results show that an EMM-based EPON withwell designed scheduling disciplines is essential to achievingsignificant energy saving while meeting the delay constraint...|$|E
40|$|Abstract—We {{present a}} new dynamic {{scheduling}} on multicore architectures. This is an {{improvement of the}} Optimal Finish <b>Time</b> (OFT) <b>scheduler</b> introduced by Lemerre[7] reducing preemptions. Our result is compared with other schedulers and we show that our algorithm can handle with more general scheduling problems. I...|$|R
40|$|In {{traditional}} remote procedure calls (RPC), execution {{moves to}} the data. In traditional distributed shared memory (DSM) data {{moves to the}} executing processor's local memory. Our initial goal was to combine these two, {{to be able to}} designate execution where most of the necessary data are present. Several run [...] <b>time</b> <b>schedulers</b> and DSM software systems are available, but the potential benefits of two-way cooperation between them has not been fully investigated. In designing our system an unexpected synergism emerged. The information exchange between scheduler and shared memory software has the potential to enhance the performance of the DSM as well as the scheduler. Keywords: Distributed Shared Memory, Release Consistency, Run [...] time Scheduling, Petri [...] Network, NEC Cenju [...] 3 This paper was sponsored in part by NEC System Laboratories. 1 Introduction A natural idea to increase a system's performance is using multiple processors working on different parts of the same problem at the same [...] ...|$|R
40|$|This paper {{describes}} {{investigations into}} linking computational mathematics systems (CMSs) with the Java-based Repast agent-based modeling toolkit. The {{goal is to}} build an interactive and seamless agent simulation environment that benefits from the strongest points of each component. In general, CMSs such as Mathematica and MATLAB are fully integrated development environments. Their interpretative nature and seamless integration of graphical and statistical analysis capabilities provide immediate feedback to users during the model prototyping and development phases. These features make CMSs particularly useful as rapid prototype development tools {{or as part of}} large-scale model development efforts that use agent-based modeling toolkits. Large-scale agentbased modeling environments, such as Repast, support features specific to agent modeling, including the availability of sophisticated <b>time</b> <b>schedulers,</b> agent communications mechanisms, flexible interaction topologies, and facilities for storing and displaying agent states. Typically, Repast users build models by incorporating Repast library components into their own programs or by using a visual scripting environmen...|$|R
40|$|Job {{scheduling}} for a MapReduce cluster {{has been}} an active research topic in recent years. However, measurement traces from real-world production environment show that the duration of tasks within a job vary widely. The overall elapsed time of a job, i. e. the so-called flowtime, is often dictated by one or few slowly-running tasks within a job, generally referred as the "stragglers". The cause of stragglers include tasks running on partially/intermittently failing machines or the existence of some localized resource bottleneck(s) within a MapReduce cluster. To tackle this online job scheduling challenge, we adopt the task cloning approach and design the corresponding scheduling algorithms which aim at minimizing the weighted sum of job flowtimes in a MapReduce cluster based on the Shortest Remaining Processing <b>Time</b> <b>scheduler</b> (SRPT). To be more specific, we first design a 2 -competitive offline algorithm when the variance of task-duration is negligible. We then extend this offline algorithm to yield the so-called SRPTMS+C algorithm for the online case and show that SRPTMS+C is (1 +ϵ) -speed o(1 /ϵ^ 2) -competitive in reducing the weighted sum of job flowtimes within a cluster. Both of the algorithms explicitly consider the precedence constraints between the two phases within the MapReduce framework. We also demonstrate via trace-driven simulations that SRPTMS+C can significantly reduce the weighted/unweighted sum of job flowtimes by cutting down the elapsed time of small jobs substantially. In particular, SRPTMS+C beats the Microsoft Mantri scheme by nearly 25...|$|E
40|$|The {{multi-user}} MIMO {{space time}} scheduling {{problem is the}} prime focus of the paper. Optimizing the link level performance of the MIMO system does not always imply achieving scheduling level optimization. Therefore, the design optimization across the link layer and the scheduling layer {{is very important to}} fully exploit the temporal and spatial dimensions of the communication channel. In this paper, we shall address the design of the optimal space <b>time</b> <b>scheduler</b> for the multi-user MIMO system based on an information theoretical approach. We shall assume partial feedback channel, namely a scaler rate-feedback channel is available to the transmitter respectively but the full channel matrix is unknown to the transmitter. With the partial feedback, we found that the optimal resource allocation strategy is water-filling in both the temporal domain and spatial domain. The optimal scheduler should allocate all the power to at most nR users at any particular instant. The optimal scheduler performance depends on the total number of user (K), the number of receive antenna at the base station (nR), and the number of transmit antenna at the mobile (nT). The scheduling gain increases with nR due to the distributed MIMO configuration formed between mobile users and base station. With single power feedback channel, the scheduling gain reduces as nT increases, illustrating that transmit diversity hurts the scheduling performance in the case of scalar feedback. Finally, scheduling performance improves as K increases due to the multi-user selection diversity. ...|$|E
40|$|Today’s sensor {{firmware}} {{consists of}} a single-entity microcontroller program. To keep production cost as low as possible, microcontrollers with limited amount of memory space are used widely in industry. As a result, most of firmware developed for small embedded system is written in assembly language to make squeeze in all functions in the limited memory resources. Since the firmware is written as a single-entity program with potential connection between different parts, {{it is not easy}} for the engineers to change the code. For example, changes {{in one part of the}} program could affect and disturb functions in other parts of the program. To lower the risk of introducing errors that could cause sensor malfunction when firmware changes are made and increase real time performance, it would be interesting to study the possibility of introducing some kinds of real-time operating system. However, because of the very limited resources of the microcontroller, the smallest RTOS would probably be too big for our application. The main purpose of this master thesis is to develop a proper software platform for CO 2 sensor based on concepts from ROTS, by which it will be easy and safe to maintain the firmware, and get better real time performance. To reach this goal, the master thesis is divided into three major parts. Firstly, some common software architecture concepts are described in advance; that will be extracted for future work. Secondly, a scheduler based on RTOS concept is delivered. Finally, the real <b>time</b> <b>scheduler</b> passes both functional and performance testing; it will be ported to new hardware platform in future products. Acknowledge This master thesis is written as a partial fulfillment of the requirement of Departmen...|$|E
5000|$|Running {{concurrently}} means [...] "in parallel". In a multi-core (multiple processor) system, the piped commands may literally be executing at {{the same}} <b>time,</b> otherwise the <b>scheduler</b> in the operating system time-slices between them.|$|R
5|$|The {{director}} of the central Alabama VA system is being fired after a variety of problems were found by the VA Inspector General, including long wait <b>times</b> that some <b>schedulers</b> were instructed to conceal.|$|R
40|$|Abstract. In this article, we {{experiment}} a way {{to extend}} an Ada library called Cheddar. Cheddar provides a domain specific language. Programs written with this domain specific language can be interpreted in order to perform real time scheduling analysis of real time systems. By the past, different projects showed that the Cheddar programming language is useful for the modeling of real <b>time</b> <b>schedulers.</b> But these experiments also showed that the interpreter is lacking of efficiency in case of large scheduling simulations. In this article, by designing a Cheddar metamodel, we investigate on how to compile such Cheddar programs in order to extend the Cheddar library. For such a purpose, we use Platypus, a meta CASE Tool based on EXPRESS. For a given Cheddar program and with a meta-model of Cheddar handled by Platypus, we can generate a set of Ada packages. Such Ada packages can be compiled and integrated as builtin schedulers into Cheddar. Then, the efficiency of scheduling simulations can be increased. Key words: Meta-modeling, Ada code generating, Cheddar, Platypus...|$|R
40|$|In {{the present}} master thesis play of young {{children}} and it’s role in their everyday life in the setup of state kindergartens in Russia were explored. The reason why I have addressed to this topic {{is the lack of}} free time for play in kindergarten’s of Moscow due to a very busy <b>time</b> <b>scheduler</b> in kindergartens, filled with different activities organized and controlled by adults. The fieldwork that this research is based on was conducted in one of state kindergartens of Moscow in Autumn 2011. I used method of participant observation as the main research method in this study. My main informants were 25 young children between 5 and 6 years attending the kindergarten. A theoretical framework of this study was provided by Social studies of children and childhood. Play is seen in frames of cultural analytical perspective as a part of children’s culture, where children are appearing to be active agents. Children’s play culture is not homogenous so different cultural changes impact children’s play culture. Also in this thesis play I am seeing as part of children’s everyday life. In this study I have elaborated only on some aspects of children’s play and its role in their everyday life in kindergarten: time and place for play in children’s everyday life; diversity of play in kindergarten’s setup; participation in play and role of adult’s in play as a part of children’s everyday life. Importance of children’s agency in their everyday life was specially emphasized. Study findings confirm that everyday life of children in the studied state kindergarten is very busy and filled with different activities, most of which are organized and controlled by adults. Children use any opportunity to play. Activities, organized and controlled by teachers are seen by children as a part of their everyday life, {{but at the same time}} as their duty. They not always like this activities and rather often getting tired from them. Adults (teachers) can be allowed by children to participate in children’s play but children do not let them to have main initiative and control in their play. The level of adult’s control can be seen as a criteria for children’s choices of place to play: children prefer places where adults have less control. In play children are active agents and meaning makers so play can be seen as one of activities in which children have the opportunity to resist adult’s control in kindergarten. </p...|$|E
30|$|The first {{algorithm}} uses an opportunistic scheduler {{which only}} adapts the power per frequency sub-band, {{which is then}} distributed equally among activated beams. We call this opportunistic algorithm (OA). It leaves full choice to the actual scheduler as to which beam to activate at what <b>time.</b> The <b>scheduler</b> can therefore decide opportunistically (⇒ opportunistic algorithm). However, the power budget per PRB which is distributed (equally) among activated beams is determined by an associated control scheme.|$|R
30|$|Software {{components}} failures (scheduler and portal components) {{contribute to}} increase the climatology execution <b>time.</b> The <b>scheduler</b> runs on the portal machine as a process and its deactivation, for unknown reasons, caused the non-submission of jobs to grid nodes. To address this problem, the portal can periodically check scheduler status and restart in case of scheduler inactivity. We could not identify the problems related to portal and we re-installed the portal to fix this problem.|$|R
40|$|Pipeline {{transport}} {{represents one}} of the most important means of moving oil derivatives to different locations. It is both a reliable and inexpensive means of transport, and it yields small variable costs along with a great degree of reliability. Pipeline scheduling is not a trivial task; it involves considerable <b>time</b> from <b>schedulers.</b> Discussed here is a real-application case of a tool that helps schedulers simulate pipeline performance as a means of creating a feasible schedule for a particular time span...|$|R
40|$|In this paper, we {{deal with}} {{multiprocessor}} task scheduling with ready times and prespecified processor allocation. We consider an on-line scenario where tasks arrive over time, and, {{at any point in}} <b>time,</b> the <b>scheduler</b> only has knowledge of the released tasks. An application of this problem arises in wavelength division multiplexing broadcasting where the main future will be in the so-called one-to-many transmission. We propose algorithms to find lower bounds of the minimum makespan, and present experiments on various scenarios...|$|R
40|$|The paper {{describes}} a general purpose scheduler into {{which one can}} add knowledge necessary to solve specific scheduler problems. The approach typifies how software should be developed for specific classes of applications. Using a general scheduler {{is analogous to the}} use of an expert system shell to which one adds application specific rules. The authors performed experiments for adding knowledge to three classes of schedulers-job shop schedulers, transportation <b>schedulers</b> and <b>time</b> tabling <b>schedulers.</b> They show how the framework provides flexibility in performing experiments...|$|R
30|$|The {{implementation}} of the proposed scheduling scheme in the designed wireless network is as follows: every <b>time</b> the DL <b>scheduler</b> is run, it checks whether any SPS UEs are due in that particular sub-frame. If true, then SPS UEs submit to the DL scheduler as they have high priority over dynamic UEs.|$|R
40|$|Keywords–high availability; safety {{critical}} systems; timed automata; task scheduler; digital axle counter; railway signaling; Abstract—The paper revisits {{the approach of}} distributed timed automata {{in order to improve}} and optimize the methodology used in order to increase the availability of a {{safety critical}} system and implements using embedded real <b>time</b> task <b>scheduler.</b> A double wheel counter or digital axle counter system, a typical safety critical system that is used in solid state based railway signaling systems, is considered for achieving higher availability under certain failures. The improvement in the software architecture is influenced by the theory of task <b>scheduler</b> of real <b>time</b> operating system...|$|R
50|$|Most commonly, within some {{scheduling}} scheme, one process must be switched {{out of the}} CPU so another {{process can}} run.This context switch can be triggered by the process making itself unrunnable, such as by waiting for an I/O or synchronization operation to complete. On a pre-emptive multitasking system, the scheduler may also switch out processes which are still runnable. To prevent other processes from being starved of CPU <b>time,</b> preemptive <b>schedulers</b> often configure a timer interrupt to fire when a process exceeds its time slice. This interrupt ensures that the scheduler will gain control to perform a context switch.|$|R
30|$|Time-stepped agents {{activate}} {{once for}} each <b>scheduler</b> <b>time</b> increment. The time counter normally increases in fixed increments of one unit for each step. Schedulers often implement time-step scheduling by repeatedly scanning through {{a list of}} agents. This list may be constant or may be randomized over time to allow the agent activation order to vary.|$|R
30|$|All {{the tasks}} of a DFG are thus modeled identically, and the only {{real-time}} constraint is on the total execution <b>time.</b> At each <b>scheduler</b> invocation, this total execution time corresponds to the longest path in the mapped task graph. It then depends both on the application partitioning and on the chosen order of execution on processors.|$|R
40|$|Abstract. In {{this paper}} we {{continue}} our investigation of stochastic (and hence dynamic) variants of classical scheduling problems. Such problems can be modeled as duration probabilistic automata (DPA), a well-structured class of acyclic timed automata where temporal uncertainty is interpreted as a bounded uniform distribution of task durations [18]. In [12] we have developed a framework for computing the expected performance of a given scheduling policy. In the present paper we move from analysis to controller synthesis and develop a dynamicprogramming style procedure for automatically synthesizing (or approximating) expected <b>time</b> optimal <b>schedulers,</b> using an iterative computation of a stochastic time-to-go function over the state and clock space of the automaton. ...|$|R
