2201|10000|Public
5|$|US Navy divers {{began its}} initial recovery, later {{aided by a}} team of {{volunteer}} divers from Great Britain, Iceland, Norway and the United States, bringing up the remains that were sent to the Northrop Aircraft Corporation in Hawthorne, California. Restoration was completed by a 300 strong volunteer group, including 14 retired ex-Northrop employees who had been involved in the original N-3PB production line. The complex restoration required the construction of replacement parts primarily by <b>templating</b> many damaged or corroded original aircraft components {{in order to create a}} complete airframe. In November 1980 the restored N-3PB was gifted to Norway by the Northrop Aircraft Corporation and the San Diego Aerospace Museum. This only surviving aircraft is currently on exhibition as part of Norwegian Armed Forces Aircraft Collection at Gardermoen, Norway.|$|E
25|$|Rails 3.1 {{introduced}} Sass {{as standard}} CSS <b>templating.</b>|$|E
25|$|A view in {{the default}} {{configuration}} of Rails is an erb file, which is evaluated and converted to HTML at run-time. Alternatively, many other <b>templating</b> systems {{can be used for}} views.|$|E
3000|$|... - There are {{two methods}} to {{register}} a template: <b>template</b> extraction and <b>template</b> upload. The function described in <b>Template</b> extraction from existing tenant extracts a valid <b>template</b> in an extraction case. In the other side, the <b>template</b> sharing function validates a <b>template</b> in a <b>template</b> upload case because a <b>template</b> {{described by a}} user may have format or logical errors.|$|R
5000|$|Although C++ <b>templates,</b> Java {{generics}}, and [...]NET generics {{are often}} considered similar, generics only mimic the basic behavior of C++ <b>templates.</b> Some {{of the advanced}} <b>template</b> features utilized by libraries such as Boost and STLSoft, and implementations of the STL itself, for <b>template</b> metaprogramming (explicit or partial specialization, default <b>template</b> arguments, <b>template</b> non-type arguments, <b>template</b> <b>template</b> arguments, ...) are not available with generics.|$|R
40|$|Are you {{confused}} {{about the difference}} between style <b>templates,</b> table <b>templates,</b> tagset <b>templates,</b> and graph <b>templates?</b> Do you wonder how they're all used with ODS? This paper provides an overview of all the different <b>template</b> types and how they're used with the Output Delivery System. From style and table <b>templates,</b> that first appeared with SAS ® 7 to the newest graph <b>templates</b> that appeared with SAS ® 9. 2, this paper will provide an overview and several concrete examples for each <b>template</b> type. Along the way, we'll also discuss the <b>template</b> garden (SASHELP. TMPLMST) where all the <b>templates</b> live, how to transplant your <b>templates</b> to a different garden, how to come up with your own new variety of <b>templates</b> (PROC <b>TEMPLATE),</b> and how to find your way to the new <b>template</b> garden (ODS PATH). New features of PROC <b>TEMPLATE</b> syntax (such as the IMPORT statement) will be highlighted...|$|R
25|$|Drupal themes use {{standardized}} formats {{that may}} be generated by common third-party theme design engines. Many are written in the PHPTemplate engine or, to a lesser extent, the XTemplate engine. Some templates use hard-coded PHP. Drupal 8 will integrate the Twig <b>templating</b> engine.|$|E
25|$|In an OS, {{distributed}} and {{cloud computing}} context, <b>templating</b> refers {{to creating a}} single virtual machine image as a guest operating system, then saving it {{as a tool for}} multiple running virtual machines. The technique is used both in virtualization and cloud computing management, and is common in large server warehouses.|$|E
25|$|Besides {{elevating}} privacy concerns, HTML5 {{also adds}} a few tools to enhance user privacy. A mechanism is defined whereby user agents can share blacklists of domains {{that should not}} be allowed to access web storage. Content Security Policy is a proposed standard whereby sites may assign privileges to different domains, enforcing harsh limitations on JavaScript use to mitigate cross-site scripting attacks. HTML5 also adds HTML <b>templating</b> and a standard HTML parser which replaces the various parsers of web browser vendors. These new features formalize previously inconsistent implementations, reducing the number of vulnerabilities though not eliminating them entirely.|$|E
50|$|In C++, class {{declarations}} can {{be generated}} from class <b>templates.</b> Such class <b>templates</b> represent a family of classes. An actual class declaration is obtained by instantiating the <b>template</b> {{with one or more}} <b>template</b> arguments. A <b>template</b> instantiated with a particular set of arguments is called a <b>template</b> specialization.|$|R
50|$|C++ uses <b>templates</b> {{to enable}} generic {{programming}} techniques. The C++ Standard Library includes the Standard <b>Template</b> Library or STL {{that provides a}} framework of <b>templates</b> for common data structures and algorithms. <b>Templates</b> in C++ may {{also be used for}} <b>template</b> metaprogramming, which is a way of pre-evaluating some of the code at compile-time rather than run-time. Using <b>template</b> specialization, C++ <b>Templates</b> are considered Turing complete.|$|R
50|$|Concepts are an {{extension}} to C++'s <b>templates,</b> published as an ISO Technical Specification ISO/IEC TS 19217:2015. They are named boolean predicates on <b>template</b> parameters, evaluated at compile time. A concept {{may be associated}} with a <b>template</b> (class <b>template,</b> function <b>template,</b> or member function of a class <b>template),</b> in which case it serves as a constraint: it limits the set of arguments that are accepted as <b>template</b> parameters.|$|R
500|$|The cyclol {{model was}} {{consistent}} with the general properties then attributed to folded proteins. [...] (1) Centrifugation studies had shown that folded proteins were significantly denser than water (~1.4 g/mL) and, thus, tightly packed; Wrinch assumed that dense packing should imply regular packing. [...] (2) Despite their large size, some proteins crystallize readily into symmetric crystals, consistent with the idea of symmetric faces that match up upon association. [...] (3) Proteins bind metal ions; since metal-binding sites must have specific bond geometries (e.g., octahedral), it was plausible to assume that the entire protein also had similarly crystalline geometry. [...] (4) As described above, the cyclol model provided a simple chemical explanation of denaturation and the difficulty of cleaving folded proteins with proteases. (5) Proteins were assumed to be responsible for the synthesis of all biological molecules, including other proteins. [...] Wrinch noted that a fixed, uniform structure would be useful for proteins in <b>templating</b> their own synthesis, analogous to the Watson-Francis Crick concept of DNA <b>templating</b> its own replication. [...] Given that many biological molecules such as sugars and sterols have a hexagonal structure, it was plausible to assume that their synthesizing proteins likewise had a hexagonal structure. [...] Wrinch summarized her model and the supporting molecular-weight experimental data in three review articles.|$|E
2500|$|By default, {{the server}} uses Embedded Ruby in the HTML views, with files having an html.erb extension. [...] Rails {{supports}} swapping-in alternative <b>templating</b> languages, such as HAML and Mustache.|$|E
2500|$|A {{web browser}} and web server are a client–server architecture; often a web cache {{is also used}} to improve performance. [...] Overall, there are five types of <b>templating</b> systems, {{classified}} based on when assembly happens - placeholders are substituted for variable information (such as names, addresses, and product info) and sub-templates: ...|$|E
40|$|The {{technological}} pluralism is {{an important}} challenge of the twenty-first century. A <b>template</b> is a computer document which has a basic format. It can be used many different times. A <b>template</b> is also a system that helps the source to arrange information on a computerscreen. Most web pages on web sites are based on <b>template</b> which is a file {{that serves as a}} starting point for a new document. The television <b>templates</b> also consist of interesting page transitions, easy-to-use content management systems, drop down menus, photo galleries, custom fonts, full screen background images, contact us forms, Google maps, social networking icons, rollover effects, photo galleries and so on. The users can click the link, and the item content displays within the context of its associated Portal <b>Template.</b> The portal <b>templates</b> for items are created through the same wizard that is used for creating Portal <b>Templates</b> for pages. The television <b>templates</b> are designed to deliver video but are equally suitable for photos or other multimedia. The television <b>templates</b> also offer a thoughtful arrangement of elements and color, fonts, effects, style, and layout to your plain slides via our <b>templates.</b> The television news channels adopt the new innovative customization of TV <b>template</b> evaluated by channels. The television <b>templates</b> facilitate better understanding and appreciation of the product and project requirements among the audience. The television <b>templates</b> basically include website <b>templates,</b> flash <b>templates,</b> e-commerce <b>templates,</b> Facebook <b>templates,</b> responsive <b>templates</b> and other <b>templates</b> which include amazing features...|$|R
2500|$|<b>Template</b> resource: web <b>templates</b> {{specified}} {{according to}} a <b>template</b> language; ...|$|R
40|$|Fig. 1. In {{the optimum}} <b>template</b> {{selection}} model, 8 <b>templates</b> {{are used as}} <b>template</b> candidates; 3 of the <b>templates</b> and the target subject images are shown here; the hand-drawn ACC on the subject and <b>templates</b> are also displayed in color (paracingulate in red). Also shown are the normalized mutual information (MI) calculated by comparing the warped <b>template</b> with the target image, and the overlap ratios (ORs), calculated by comparing the automated segmentation with the ground truth manual segmentation. Fig. 2. Mean overlap ratios (OR) are compared when using individual <b>templates</b> (average of the mean OR over the 9 <b>templates)</b> against the optimal <b>template</b> method. Error bars were calculated as standard error {{of the difference between}} the mean OR of the optimal <b>template</b> and the individual <b>templates.</b> The OR for the Colin <b>template</b> is shown for comparison...|$|R
2500|$|The {{study of}} MOFs {{developed}} {{from the study of}} zeolites, except for the use of preformed ligands. MOFs and zeolites are produced almost exclusively by hydrothermal or solvothermal techniques, where crystals are slowly grown from a hot solution. In contrast with zeolites, MOFs are constructed from bridging organic ligands that remain intact throughout the synthesis. Zeolite synthesis often makes use of a [...] "template". Templates are ions that influence the structure of the growing inorganic framework. [...] Typical <b>templating</b> ions are quaternary ammonium cations, which are removed later. In MOFs, the framework is templated by the SBU (secondary building unit) and the organic ligands. A <b>templating</b> approach that is useful for MOFs intended for gas storage is the use of metal-binding solvents such as N,N-diethylformamide and water. In these cases, metal sites are exposed when the solvent is evacuated, allowing hydrogen to bind at these sites.|$|E
2500|$|Programming {{languages}} such as Perl, Ruby, C, and Java support template processing either natively, {{or through}} add-on libraries and modules. JavaServer Pages (JSP), PHP, and Active Server Pages (ASP with VBScript, JScript or other languages) are examples, themselves, of web template engines. [...] These technologies are typically used in server-side <b>templating</b> systems, {{but could be}} adapted for use on a [...] "edge-side" [...] proxy or for static page generation.|$|E
2500|$|Replica – Owned by Warren Pietsch at the Texas Flying Legends Museum in Houston, Texas. This aircraft, {{known as}} the [...] "Blayd" [...] Zero, is a {{reconstruction}} based on <b>templating</b> original Zero components recovered from the South Pacific. To be considered a [...] "restoration" [...] and not a reproduction, the builders used {{a small fraction of}} parts from the original Zero landing gear in the reconstruction. It was built as a A6M2 Model 21. [...] This aircraft was damaged in a ground accident on March 15, 2016, when a Goodyear FG-1D Corsair taxiing behind it overran the tail of the Zero, with the Corsair's propeller shredding roughly the last third of the Zero's fuselage and its control surfaces.|$|E
5000|$|<b>Template</b> parsing: Stags (a {{specific}} FuelPHP <b>template</b> engine) and Mustache <b>template</b> {{engines are}} included; drivers for Markdown, Smarty, Twig, Haml, Jade and Dwoo <b>template</b> engines.|$|R
30|$|When the above-described <b>template</b> {{matching}} is {{used for}} lattice rescoring in LVCSR, the computation and storage overheads are still high. However, certain redundancies in the training <b>templates</b> {{can be reduced to}} improve computation and storage efficiency. We propose three methods of <b>template</b> selection and compression to address this problem. In <b>template</b> selection, the goal is to choose a small subset of <b>templates</b> as the representatives for the full set of training <b>templates.</b> In <b>template</b> compression, new GMMs are generated for labeling the frames of the selected <b>template</b> representatives so as to better capture the information in the training <b>Templates.</b>|$|R
30|$|CloudFormation and Heat do {{not have}} a {{mechanism}} of <b>template</b> sharing. Our TM server provides a function to share <b>templates</b> and facilitate <b>templates</b> re-use. For example, when a small business owner would like to build a shopping site, a System Integrator provides a verified Web 3 -tier structure <b>template,</b> then the small business owner selects the <b>template</b> and build the environment with one or two clicks. If we share <b>templates</b> unconditionally, there is a risk of malicious <b>template</b> spreading. Thus, it is necessary to limit a range of <b>template</b> sharing within contractual relationships. Here, we explain logics of <b>template</b> sharing.|$|R
2500|$|Stone (usually granite) countertops and {{bathroom}} vanities both involve a finished slab of stone, usually polished but sometimes with another finish (such as honed or sandblasted). Industry standard thicknesses in the United States are 3/4" [...] (2cm) and 1.25" [...] (3cm). Often 2cm slabs will be laminated {{at the edge}} to create {{the appearance of a}} thicker edge profile. The slabs are cut to fit the top of the kitchen or bathroom cabinet, by measuring, <b>templating</b> or digital <b>templating.</b> Countertop slabs are commonly sawn from rough blocks of stone by reciprocating gangsaws using steel shot as abrasive. More modern technology utilizes diamond wire saws which use less water and energy. Multi-wire saws with as many as 60 wires can slab a block in less than two hours. The slabs are finished (i.e., polished, honed), then sealed with resin to fill micro-fissures and surface imperfections typically due to the loss of poorly bonded elements such as biotite. The fabricators shop cuts these slabs down to final size and finishes the edges with equipment such as hand-held routers, grinders, CNC equipment, or polishers. In 2008, concerns were raised regarding radon emissions from granite countertops; the National Safety Council states that the contributions of radon to inside air come from the soil and rock around the residence (69%), the outdoor air and the water supply (28%), and only 2.5% from all building materials-including granite countertops. [...] A concerned homeowner can employ ASTM radon mitigation and removal techniques. [...] The stone for countertops or vanities is usually granite, but often is marble (especially for vanity tops), and is sometimes limestone or slate. The majority of the stone for this application is produced in Brazil, Italy, and China.|$|E
2500|$|The term [...] "epigenetics", however, {{has been}} used to {{describe}} processes which have not been demonstrated to be heritable such as some forms of histone modification; there are therefore attempts to redefine it in broader terms that would avoid the constraints of requiring heritability. For example, Adrian Bird defined epigenetics as [...] "the structural adaptation of chromosomal regions so as to register, signal or perpetuate altered activity states." [...] This definition would be inclusive of transient modifications associated with DNA repair or cell-cycle phases as well as stable changes maintained across multiple cell generations, but exclude others such as <b>templating</b> of membrane architecture and prions unless they impinge on chromosome function. Such redefinitions however are not universally accepted and are still subject to dispute. The NIH [...] "Roadmap Epigenomics Project", ongoing as of 2016, uses the following definition: [...] "For purposes of this program, epigenetics refers to both heritable changes in gene activity and expression (in the progeny of cells or of individuals) and also stable, long-term alterations in the transcriptional potential of a cell that are not necessarily heritable." ...|$|E
5000|$|<b>Templating</b> (using {{a native}} {{template}} engine although other <b>templating</b> engines can be used, such as jquery.tmpl) ...|$|E
40|$|A {{generalized}} {{kinetic model}} for dilute radical <b>template</b> polymerizations involving preferential monomer adsorption by the <b>template</b> and following classical kinetics is described. By simulation, {{the influence of}} preferential monomer adsorption and of various rate constants pertaining to complexation, <b>template</b> propagation, and <b>template</b> termination of growing chain radicals on the rate enhancement induced by a <b>template</b> was examined {{as a function of}} <b>template</b> concentration. This model has been applied to some known <b>template</b> polymerization systems. For some of these, <b>template</b> rate constants could be estimated by curve fitting to experimentally determined polymerization rate vs <b>template</b> concentration plots...|$|R
2500|$|C++ <b>templates</b> enable generic programming. C++ {{supports}} function, class, alias {{and variable}} <b>templates.</b> <b>Templates</b> may be parameterized by types, compile-time constants, and other <b>templates.</b> <b>Templates</b> are implemented by instantiation at compile-time. To instantiate a <b>template,</b> compilers substitute specific arguments for a <b>template's</b> parameters {{to generate a}} concrete function or class instance. Some substitutions are not possible; these are eliminated by an overload resolution policy described by the phrase [...] "Substitution failure is not an error" [...] (SFINAE). <b>Templates</b> are a powerful tool {{that can be used}} for generic programming, <b>template</b> metaprogramming, and code optimization, but this power implies a cost. <b>Template</b> use may increase code size, because each <b>template</b> instantiation produces a copy of the <b>template</b> code: one for each set of <b>template</b> arguments, however, this is the same or smaller amount of code that would be generated if the code was written by hand. This is in contrast to run-time generics seen in other languages (e.g., Java) where at compile-time the type is erased and a single <b>template</b> body is preserved.|$|R
3000|$|... are {{elements}} of fuzzy feedback MIN <b>template</b> and fuzzy feedback MAX <b>template,</b> fuzzy feed-forward MIN <b>template,</b> and fuzzy feed-forward MAX <b>template</b> in X-layer, respectively; p [...]...|$|R
50|$|Because of Pylons' {{loosely coupled}} layers, other <b>templating</b> {{languages}} {{can be used}} as well. Genshi, an XML-based <b>templating</b> language, can be used in lieu of either Mako or Myghty.|$|E
50|$|The Topsite <b>Templating</b> System is an {{open source}} <b>templating</b> system written in the Python {{programming}} language. It is designed to allow simple melding of Python code with static content.|$|E
50|$|<b>Templating</b> becomes {{useful when}} the {{information}} distributed may change, {{is too large}} to be maintained in various HTML pages by available human resources and not large enough to require heavier server-side <b>templating.</b>|$|E
40|$|Automatic <b>template</b> {{instantiation}} in DIGITAL C++ version 6. 0 {{employs a}} compile-time scheme that generates instantiation object files into a repository. This paper {{provides an overview}} of the C++ <b>template</b> facility and the <b>template</b> instantiation process, including manual and automatic instantiation techniques. It reviews the features of <b>template</b> instantiation in DIGITAL C++ and focuses on {{the development and implementation of}} automatic <b>template</b> instantiation in DIGITAL C++ version 6. 0. The <b>template</b> facility within the C++ language allows the user to provide a <b>template</b> for a class or function and then apply specific arguments to the <b>template</b> to specify a type or function. The process of applying arguments to a <b>template,</b> referred to as <b>template</b> instantiation, causes specific code to be generated to implement the functions and static data members of the instantiated <b>template</b> as needed by the program. Automatic <b>template</b> instantiation relieves the user of determining which <b>template</b> entities need to be instantiated and where they should be instantiated. In this paper, we review the C++ <b>template</b> facility and describe approaches to implementing automatic <b>template</b> instantiation. We follow that with a discussion of the facilities, rationale, and experience of the DIGITAL C++ automatic <b>template</b> instantiation support. We then describe the design of the DIGITAL C++ version 6. 0 automatic <b>template</b> instantiation facility and indicate areas to be explored for further improvement. C++ <b>Template</b> Facility The C++ language provides a <b>template</b> facility that allows the user to create a family of classes or functions that are parameterized by type. 1, 2 For example, a user may provide a Stack <b>template,</b> which defines a stack class for its argument type. Consider the following <b>template</b> declaration: <b>template</b> class Stack { T *top_of_stack; public: void push (T arg); void pop (T & arg); The act of applying the arguments to the <b>template</b> is referred to as <b>template</b> instantiation. An instantiation of a <b>template</b> creates a new type or function that is defined for the specified types. Stack creates a class that provides a stack of the type int. Stack creates a class that provides a stack of user_class. The types int and user_class are the arguments for the <b>template</b> Stack...|$|R
5000|$|A class <b>template</b> {{provides}} a specification for generating classes based on parameters. Class <b>templates</b> are generally used to implement containers. A class <b>template</b> is instantiated by passing a given set of types {{to it as}} <b>template</b> arguments. The C++ Standard Library contains many class <b>templates,</b> in particular the containers adapted from the Standard <b>Template</b> Library, such as [...]|$|R
3000|$|... - Extracted <b>templates</b> {{are held}} in the <b>template</b> sharing {{function}} described in <b>Template</b> sharing. Extracted <b>templates</b> {{can be used for}} stack create, update or download to edit.|$|R
