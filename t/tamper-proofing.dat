36|306|Public
5000|$|A bulla ( [...] , plural bullae) is an inscribed clay or {{soft metal}} (such as lead or tin) or bitumen or wax token used in {{commercial}} and legal documentation {{as a form}} of identification and for <b>tamper-proofing</b> whatever is attached to it (or, in the historical form, contained in it). In their oldest attested form, as used in the ancient Near and Middle East of the 8th millennium BCE onwards, bullae were hollow ball-like clay envelopes that contained other smaller tokens that identified the quantity and types of goods being recorded. In this form, bullae represent one of the earliest forms of specialization in the ancient world, and likely required skill to create. From about the 4th millennium BCE onwards, as communications on papyrus and parchment became widespread, bullae evolved into simpler tokens that were attached to the documents with cord, and impressed with a unique sign (i.e. seal) to provide the same kind of authoritative identification and for <b>tamper-proofing.</b> Bullae are still occasionally attached to documents for these purposes (cf. papal bull).|$|E
50|$|In February 2014 the European Parliament passed {{regulations}} requiring standardization {{and quality}} control for liquids and vaporizers, disclosure of ingredients in liquids, and child-proofing and <b>tamper-proofing</b> for liquid packaging. In April 2014 the FDA published proposed regulations for e-cigarettes. In the US some states tax e-cigarettes as tobacco products, and some state and regional governments have broadened their indoor smoking bans to include e-cigarettes. As of 9 October 2015, at least 48 states and 2 territories banned e-cigarette sales to minors.|$|E
5000|$|Arxan's {{products}} {{are based on}} patented security techniques for code hardening, <b>tamper-proofing,</b> key security and node locking. The core technology consists of a multi-layered, interconnected network of Guards that each perform a specific security function and are embedded into application binaries to make programs tamper-aware, tamper-resistant, and self-healing. The company claims a three-layer protection paradigm of defend, detect and react as a differentiating approach. By detecting when an attack is being attempted and responding to detected attacks with alerts and repairs, this protection helps secure software against hacking attacks and threats such as: ...|$|E
50|$|The Encaprin hoax {{influenced}} the 1989 FDA federal {{guidelines for the}} manufacture of <b>tamper-proof</b> products, which called {{for a minimum of}} two layers of <b>tamper-proof</b> packaging for two-piece capsule products, and the use of <b>tamper-proof</b> capsule sealing technologies.|$|R
40|$|Cryptographic {{assumptions}} regarding <b>tamper-proof</b> hardware tokens {{have gained}} increasing attention. Even if the <b>tamper-proof</b> hardware is issued {{by one of}} the parties, and hence not necessarily trusted by the other, many tasks become possible: Tamper proof hardware is sufficient for universally composable protocols, for information-theoretically secure protocols, and even can be used to create software that can only be used once (one-time programs). However, all known protocols employing <b>tamper-proof</b> hardware are either indirect, i. e. additional computational assumptions must be used to obtain general two party computations, or a large number of devices must be used. Unfortunately, issuing multiple independent <b>tamper-proof</b> devices requires much stronger isolation assumptions. This work is the extended version of a recent result of the same authors, where {{for the first time a}} protocol was presented that realizes universally composable two party computations (and even one-time programs) with information-theoretic security using only a single <b>tamper-proof</b> device issued {{by one of the}} mutually distrusting parties. Now, we present the first protocols for multiple one-time memories (OTMs), and reusable and bidirectional commitment and obliviou...|$|R
5000|$|The {{paper tape}} {{canister}} has several <b>tamper-proof</b> design features: ...|$|R
40|$|In {{this paper}} {{we present a}} novel fragile {{watermarking}} scheme for the <b>tamper-proofing</b> of multimedia signals. Unlike previously proposed techniques, the novel approach provides spatial and frequency domain information on how the signal is modified. We call such a technique a telltale <b>tamper-proofing</b> method. Our design embeds a fragile watermark in the discrete wavelet domain of the signal by quantizing the corresponding coefficients with user-specified keys. Tamper detection is possible in the localized spatial and frequency regions of the given signal. We provide analysis, simulations and comparisons with two other <b>tamper-proofing</b> methods to show {{the potential of the}} proposed approach in detecting and characterizing the distortion imposed on the signal. ...|$|E
40|$|Abstract—The lack of robust <b>tamper-proofing</b> techniquesinsecurityapplicationshasprovidedattackers {{the ability}} to {{virtually}} circumvent mathematically strong cryptographic primitives by directlyattackingthehardware. Consequently,physical <b>tamper-proofing</b> has emerged as an essential elementinsecuresystemdesign. Tothisend,physical unclonablefunctions(PUF) havebeenproposedto build tamper proof hardware and thereby create secure data storages. A delay based PUF scheme wasproposedwhichusestheintrinsicprocessvariationstorandomizeswitchesandtherebyimplement a pseudorandom function family. When tampered with,thedeviceexperiencesachangeinitsinternal physicalparameters. Thiswillalterthepseudorandomfunctionfamily. Therefore,renderinganattack unsuccessful. Inthispaper,weproposeadelaybased PUFcircuitthatisconstructedfromtristatebuffers. TheproposedPUFcircuitconsumeslesspowerand requireslessarea. Furthermore,wedevelopalinear delaymodelwhichturnsouttobeidenticaltothat ofswitch based PUFs. Hence,the nonlinearization techniquesproposedtosecureswitchbasedPUFscan directlybeappliedtosecuretristatePUFsaswell...|$|E
40|$|Abstract—A novel {{constant}} <b>tamper-proofing</b> software watermark technique {{based on}} H encryption function is presented. First we split the watermark into smaller pieces before encoding them using CLOC scheme. With the watermark pieces, a many-to-one function (H function) as the decoding function is constructed {{in order to}} avoid the pattern-matching or reverse engineering attack. The results of the function are encoded into constants as the parameters of opaque predicates or appended to the condition branches of the program to make the pieces relevant. The feature of interaction among the pieces improves the <b>tamper-proofing</b> ability because there being one piece destroyed, the program will not work correctly. The simulation shows that the performance of the proposed scheme is good and can resist many kinds of attacks. Index Terms — constant <b>tamper-proofing,</b> CLOC encoding, opaque predicate, H function I...|$|E
5000|$|Nitrokey's <b>tamper-proof</b> design protects it from {{sophisticated}} physical attacks.|$|R
40|$|<b>Tamper-proof</b> {{devices are}} pretty powerful. They {{typically}} make security applications simpler (provided that the <b>tamper-proof</b> assumption is not violated). For application requiring privacy, we observe that some properties may become harder (if possible at all) to achieve when devices are maliciously used. We take {{the example of}} deniability, receiptfreeness, and anonymity. We formalize the trusted agent model which assumes <b>tamper-proof</b> hardware {{in a way which}} captures the notion of programmable secure hardware. This model defines a functionality relative to which deniability requires provers to use a tamper proof hardware. Otherwise, any asymmetric situation in which the malicious verifiers have more powerful <b>tamper-proof</b> devices than the honest ones makes deniability impossible. We conclude by observing that the ability to put boundaries in computing devices prevents from providing full control on how private information spreads: the concept of sealing a device is in some sense incompatible with some privacy notions...|$|R
5000|$|... where a <b>tamper-proof</b> {{ability to}} call from {{one point to}} another is needed.|$|R
40|$|A novel c onstant <b>tamper-proofing</b> {{software}} watermark technique {{based on}} H encryption function is presented. First we split the watermark into smaller pieces before encoding them using CLOC scheme. With the watermark pieces, a many-to-one function (H function) as the decoding function is constructed {{in order to}} avoid the pattern-matching or reverse engineering attack. The results of the function are encoded into constants as the parameters of opaque predicates or appended to the condition branches of the program to make the pieces relevant. The feature of interaction among the pieces improves the <b>tamper-proofing</b> ability because there being one piece destroyed, the program will not work correctly. The simulation shows that the performance of the proposed scheme is good and can resist many kinds of attacks. </span...|$|E
40|$|This paper {{describes}} a semi-fragile watermarking scheme for image authentication and <b>tamper-proofing.</b> Each watermark bit is du-plicated and randomly {{embedded in the}} original image in the discrete wavelet domain by modifying the corresponding image coeffi-cients through quantization. The modification is made so that it has {{little effect on the}} image and the watermarking is robust against tampering. The watermark bits for authentication are obtained by a majority vote on the extracted bits. The bits that lose the vote are treated as having been tampered with, and the location of the bits indicates the positions that have been tampered with. Thus, authen-tication and <b>tamper-proofing</b> can be done by observing images of watermarks that win and lose votes. The proposed scheme is robust against JPEG compression or acceptable modification, but sensitive to malicious attacks such as cutting and pasting...|$|E
40|$|Three major aspects in the {{protection}} of digital documents have been pointed out, each of them with different requirements: first copyright protection, protecting ownership and usage rights# secondly <b>tamper-proofing,</b> aiming at checking documentintegrity# and thirdly authentication, the purpose {{of which is to}} check the authenticity of a document. While robust watermarks are typically used for copyright protection, fragile or semi-fragile watermarks are proposed to solve tamperproofing and authentication. However both concepts are generally proposed separately# further, most of robust watermarking schemes are vulnerable to the copy attack, whichallows copying a watermark from one document to another without need for any apriori knowledge [4]. In this paper we propose an hybrid watermarking method which joins a highly robust watermark with a fragile/semi-fragile watermark, combining copyright protection and <b>tamper-proofing,</b> and being at the same time resistant against copy attack# the fragile information is inserted in a way which fully preserves the robust part...|$|E
5000|$|Secure Logger pattern {{can be used}} to log {{sensitive}} data and ensuring <b>tamper-proof</b> storage ...|$|R
5000|$|Ensuring the {{security}} of cargo while in-transit via the use of locks and <b>tamper-proof</b> seals ...|$|R
5000|$|Identifying Key - {{specification}} {{information of}} vehicle that detects {{for a specific}} vehicle (<b>tamper-proof</b> hardware) ...|$|R
40|$|AbstractÐWe {{identify}} {{three types}} of attack on the intellectual property contained in software and three corresponding technical defenses. A defense against reverse engineering is obfuscation, a process that renders software unintelligible but still functional. A defense against software piracy is watermarking, a process {{that makes it possible}} to determine the origin of software. A defense against tampering is <b>tamper-proofing,</b> so that unauthorized modifications to software (for example, to remove a watermark) will result in nonfunctional code. We briefly survey the available technology for each type of defense. Index TermsÐObfuscation, watermarking, <b>tamper-proofing,</b> intellectual property protection. æ 1 BACKGROUNDÐMALICIOUS CLIENTS VS. MALICIOUS HOSTS UNTIL recently, most computer security research was concerned with protecting the integrity of a benign host and its data from attacks from malicious client programs (Fig. 1 a). This assumption of a benign host is present in Neumann's influential taxonomy of ªcomputer-related risks,º in which the job of a security expert is to design and administer computer systems that will fulfill ªcertai...|$|E
40|$|SUMMARY This paper {{describes}} a semi-fragile watermarking scheme for image authentication and <b>tamper-proofing.</b> Each watermark bit is duplicated and randomly {{embedded in the}} original image in the discrete wavelet domain by modifying the corresponding image coefficients through quantization. The modifications are made so that they have {{little effect on the}} image and that the watermarking is robust against tampering. The watermark image for authentication is reconstructed by taking a weighted vote on the extracted bits. The bits that lose the vote are treated as having been tampered with, and the locations of the lost bits as indicating tampered positions. Thus, authentication and <b>tamper-proofing</b> can be done by observing the images of watermarks that win and lose votes. Sieving, emphasis, and weighted vote were found to be effectively make the authentication and tamper detection more accurate. The proposed scheme is robust against JPEG compression or acceptable modifications, but sensitive to malicious attacks such as cutting and pasting. key words: watermarking, DWT, semi-fragile, authentication, tamper-proofin...|$|E
30|$|Obfuscation {{techniques}} aim {{at making}} reverse engineering a difficult task. They {{are based on}} semantics-preserving transformations which manage to considerably worsen the results provided by standard software analysis tools. <b>Tamper-proofing</b> techniques aim at detecting unauthorised software modifications and responding to them. Detection methods are based on code introspection, state inspection and/or environment verification. The responding methods vary, but the most common ones are program termination, performance degradation, or program restore.|$|E
5000|$|Each vessel {{must have}} port-to-port {{monitoring}} of its movements via two <b>tamper-proof</b> Vessel Monitoring System (VMS) units on board; ...|$|R
5000|$|... #Caption: A Duke Energy {{technician}} {{removes the}} <b>tamper-proof</b> seal from an electricity meter at a residence in Durham, North Carolina ...|$|R
50|$|The {{fraudulent}} practice of passing-back a ticket {{can be overcome}} by making the ticket {{in the form of}} a <b>tamper-proof</b> wristband.|$|R
40|$|This report {{documents}} {{the attempt to}} raise security for clients against a threat model, with these three at-tacks; Man In The Middle (MITM), phishing, and tampering attacks. The analysis describes security mechanisms and existing technology to prevent the three attacks in the threat model. It was discovered in the analysis that there exists tech-nology to prevent MITM and phish-ing attacks, but no security mecha-nism exist to prevent tampering of Java client programs. Instead of designing and implement-ing existing technology as secu-rity mechanisms to prevent MITM and phishing attacks, the project should be, to design and imple-ment a possible <b>tamper-proofing</b> se-curity mechanism for Java client programs. In the design and imple-mentation chapters, documentation of the prototype <b>tamper-proofing</b> se-curity mechanism is found. The test shows that the security mechanism is not sufficient, to en-sure that the client was actual tamper-proof. However, when the prototype was tested, a nice prop-erty {{was found in the}} embedding of an illegal byte array operation, which could make it possible to al-low one to trust the client for a small period of time...|$|E
40|$|We {{identify}} {{three types}} of attack on the intellectual property contained in software and three corresponding technical defenses. A defense against reverse engineering is obfuscation, a process that renders software unintelligible but still functional. A defense against software piracy is watermarking, a process {{that makes it possible}} to determine the origin of software. A defense against tampering is <b>tamper-proofing,</b> so that unauthorized modifications to software (for example, to remove a watermark) will result in nonfunctional code. We briefly survey the available technology for each type of defense...|$|E
40|$|Software piracy,Software protection,Watermarking Software {{watermarking}} {{is a tool}} used {{to combat}} software piracy by embedding identifying information into a program. Most existing proposals for software watermarking have the shortcoming that the mark can be destroyed via fairly straightforward semantics-preserving code transformations. This paper introduces path-based watermarking,a new approach to software watermarking based on the dynamic branching behavior of programs. The advantage of this technique is that error-correcting and <b>tamper-proofing</b> techniquescanbeusedtomakepath-basedwatermarksresilient against {{a wide variety of}} attacks. Experimental results,usingbothJavabytecodeandIA- 32 nativecode,indicate that even relatively large watermarks can be embedded into programs at modest cost. 1...|$|E
5000|$|The {{reference}} validation mechanism must be <b>Tamper-proof.</b> Without this property, an attacker can {{undermine the}} mechanism itself and thence violate the security policy.|$|R
50|$|Produce a <b>tamper-proof</b> {{certificate}} containing {{information that}} the erasure has been successful and written to all sectors of the device, along with data about the device and standard used.|$|R
2500|$|New {{cylinders}} and {{valve gear}} were provided, fractionally smaller at 17¼" [...] × 24". Wheel arrangement was now 2-2-2, shortening the wheelbase still further to 14'10". Ramsbottom also included his newly designed <b>tamper-proof</b> safety valves.|$|R
40|$|Abstract This paper {{describes}} {{methods of}} improving previously reported semi-fragile watermarking scheme which {{makes use of}} duplicating the watermark image and voting in tamper-detection process for image authentication and <b>tamper-proofing.</b> The watermark image for authentication is reconstructed by taking a weighted vote on the extracted bits instead of using majority vote. The bits that lose the vote are sieved and emphasized. Experimental {{results show that the}} improved scheme can reconstruct the highly visible watermark image and detect the tamper accurately even if the watermarked image is distorted severely...|$|E
40|$|The use {{of quantum}} {{correlations}} to attack security protocols {{is an important}} research line deserving growing attention. An important class of cryptographic protocols used as building blocks for several other more complex protocols is zero-knowledge proof systems. One of the properties that zero-knowledge proof systems are assumed to satisfy {{is that it is}} impossible for the verifier to show to a third party that he has interacted with the prover (impossibility of transferring proofs). Herein, it is shown how Bell pairs, together with <b>tamper-proofing,</b> can be used to break the impossibility of transferring proofs for an important class of zero-knowledge proof systems...|$|E
40|$|Software watermarks — bitstrings {{encoding}} {{some sort}} of identifying information that are embedded into executable programs — are an important tool against software piracy. Most existing proposals for software watermarking have the shortcoming {{that they can be}} destroyed via fairly straightforward semantics-preserving code transformations. This paper introduces path-based watermarking, a new approach to software watermarking based on the dynamic branching behavior of programs. We show how error-correcting and <b>tamper-proofing</b> techniques {{can be used to make}} path-based watermarks resilient against a wide variety of attacks. Experimental results, using both Java bytecode and IA- 32 native code, indicate that even relatively large watermarks can be embedded into programs at modest cost. 1...|$|E
50|$|Atmel {{also has}} chips {{specialized}} for the smart energy and smart metering markets. These chips combine microprocessors with <b>tamper-proof</b> hardware security and {{power line communication}} modems. The parts also integrate analog front-ends for accurate metrology.|$|R
5000|$|The Grid Security Infrastructure (GSI), {{formerly}} {{called the}} [...] Globus Security Infrastructure, is a specification for secret, <b>tamper-proof,</b> delegatable communication between software in a grid computing environment. Secure, authenticatable communication is enabled using asymmetric encryption.|$|R
5000|$|New {{cylinders}} and {{valve gear}} were provided, fractionally smaller at 17¼" [...] × 24". Wheel arrangement was now 2-2-2, shortening the wheelbase still further to 14' 10". Ramsbottom also included his newly designed <b>tamper-proof</b> safety valves.|$|R
