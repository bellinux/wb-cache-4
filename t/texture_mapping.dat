1363|982|Public
5|$|Id Software's use of <b>texture</b> <b>mapping</b> in Catacomb 3-D, a {{precursor}} to Wolfenstein 3D, was influenced by Ultima Underworld. Conflicting accounts exist regarding the extent of this influence, however. In the book Masters of Doom, author David Kushner asserts that the concept was discussed only briefly during a 1991 telephone conversation between Paul Neurath and John Romero. However, Doug Church has said that John Carmack saw the game's summer 1990 software convention demo, and recalled a comment from Carmack that he could write a faster texture mapper. Paul Neurath has recounted the incident similarly, with both Carmack and Romero present.|$|E
5|$|Ultima Underworlds game {{engine was}} written by a small team. Chris Green {{provided}} the game's <b>texture</b> <b>mapping</b> algorithm, which was applied to walls, floors and ceilings. The engine allowed for transparencies, walls at 45 degree angles, multiple tile heights and inclined surfaces, and other aspects. Ultima Underworld was the first video game to implement many of these effects. The game {{was also the first}} indoor, real-time, 3D first-person game to allow the player to look up and down, and to jump.|$|E
5|$|At JAMMA's 1992 Amusement Machine Show in Japan, {{held during}} 27–19 August 1992, Namco debuted a racing game called Sim Drive for the Namco System 22 arcade system board. It was {{a sequel to}} Eunos Roadster Driving Simulator, a Mazda MX-5 driving {{simulation}} arcade game that Namco developed with Mazda and released in 1990. Its 3D polygon graphics stood out for its use of Gouraud shading and <b>texture</b> <b>mapping.</b> After a location test at the show, where it was previewed by the November 1992 issue of Electronic Gaming Monthly, Sim Drive had a limited Japanese release in December 1992, but {{did not get a}} mass-market release. It served as a prototype for Ridge Racer.|$|E
5000|$|... newmtl Textured Ka 1.000 1.000 1.000 Kd 1.000 1.000 1.000 Ks 0.000 0.000 0.000 d 1.0 illum 2 map_Ka lemur.tga # {{the ambient}} <b>texture</b> <b>map</b> map_Kd lemur.tga # the diffuse <b>texture</b> <b>map</b> (most of the time, it will # {{be the same}} as the ambient <b>texture</b> <b>map)</b> map_Ks lemur.tga # {{specular}} color <b>texture</b> <b>map</b> map_Ns lemur_spec.tga # specular highlight component map_d lemur_alpha.tga # the alpha <b>texture</b> <b>map</b> map_bump lemur_bump.tga # some implementations use 'map_bump' instead of 'bump' below ...|$|R
5000|$|... #Caption: Examples of multitexturing (click {{for larger}} image);1: Untextured sphere, 2: <b>Texture</b> and bump <b>maps,</b> 3: <b>Texture</b> <b>map</b> only, 4: Opacity and <b>texture</b> <b>maps.</b>|$|R
50|$|In July 2013, Flash Player 11.8 was released, which {{increased}} the maximum <b>texture</b> <b>map</b> size to 4096 x 4096, {{in addition to}} supporting rectangular (non-square) <b>texture</b> <b>maps</b> for Stage3D content. This allowed for greater detail in <b>texture</b> <b>maps,</b> and larger <b>texture</b> atlases to be created enabling better performance.|$|R
5|$|Ideas {{from the}} Deep, now {{formally}} established as id Software, {{used some of}} these to prototype ideas for their own games. Adrian Carmack used them to push his preferred, dark art style, while John Carmack began to experiment with 3D computer graphics, which until then was largely the purview of flight simulation games such as Wing Commander (1990). Carmack found that this was {{largely due to the}} limitations of personal computers of the time, which had difficulty displaying a fast action game in 3D due to the number of surfaces it needed to calculate. During 1991, he experimented with limiting the possible surfaces the computer needed to display, creating game levels with walls designed only on a flat grid rather than with arbitrary shapes or angles. He also took the unusual approach of creating the displayed graphics through ray casting, in which only the surfaces visible to the player were calculated rather than the entire area surrounding the player. After six weeks of development, Carmack had created a rudimentary 3D game engine that used animated 2D sprites for enemies. Id Software then used the engine for the April 1991 Softdisk game Hovertank 3D, in which the player drives a tank through a plane of colored walls and shoots nuclear monsters. In the fall of 1991, after the team—sans Wilbur—had relocated to Madison, Wisconsin, and he had largely finished the engine work for Commander Keen in Goodbye, Galaxy, Carmack learned about , a role-playing game in development by Blue Sky Productions. Ultima Underworld was planned to display texture-mapped 3D graphics without Hovertanks restrictions of flat walls and simple lighting. Deciding that he could add <b>texture</b> <b>mapping</b> without sacrificing the engine's speed or greatly increasing the system requirements as Underworld was doing, Carmack enhanced the engine over six weeks from Hovertank 3D for another Softdisk game, the November 1991 Catacomb 3-D. Upon seeing it, Scott Miller of Apogee began to push the team to make a 3D shareware action game.|$|E
25|$|Morton order space filling curves for GPU cache {{coherency}} in <b>texture</b> <b>mapping,</b> rasterisation and indexing of turbulence data.|$|E
25|$|The Super FX is a RISC CPU {{designed}} {{to perform functions}} that the main CPU can not feasibly do. The chip is primarily used to create 3D game worlds made with polygons, <b>texture</b> <b>mapping</b> and light source shading. The chip {{can also be used}} to enhance 2D games.|$|E
5000|$|In {{order to}} simplify and {{streamline}} development time, three base character skeletons were shared amongst the six character classes. [...] Characters were modeled then multiple <b>texture</b> <b>maps</b> were applied. Specular and normal maps {{were added to}} the model prior to the main <b>texture</b> <b>map.</b> The <b>texture</b> <b>map</b> was then added with any team-colorized sections painted in greyscale tones. [...] A team color mask is then applied to give the character a team-aligned texture. [...] Robot characters also have multiple <b>texture</b> <b>maps</b> to signify damage received. The music for the game was composed by Cris Velasco of Monarch Audio.|$|R
40|$|A {{compression}} {{scheme for}} calibrated images depicting a static scene from arbitrary viewpoints is presented. 3 -D scene geometry is reconstructed, and view-dependent <b>texture</b> <b>maps</b> are generated from all images. Texture is wavelet-coded using the SPIHT coding scheme extended to 4 -D, exploiting correlations within {{as well as}} between <b>texture</b> <b>maps.</b> During decoding, all <b>texture</b> <b>maps</b> are simultaneously and progressively reconstructed. The coder provides 3 -D scene geometry and multiple <b>texture</b> <b>maps,</b> enabling the use of graphics hardware to accelerate the rendering process. Three image sets acquired from real-world objects are used to evaluate the model-based coding scheme. Coding eÆciency is shown for geometry approximations of dierent accuracy...|$|R
50|$|Some engines {{were able}} to render <b>texture</b> <b>mapped</b> Heightmaps (e.g. Nova Logic's Voxel Space, and the engine for outcast) via Bresenham-like {{incremental}} algorithms, producing {{the appearance of a}} <b>texture</b> <b>mapped</b> landscape without the use of traditional geometric primitives.|$|R
25|$|<b>Texture</b> <b>mapping</b> {{has matured}} into a {{multistage}} process with many layers; generally, {{it is not}} uncommon to implement <b>texture</b> <b>mapping,</b> bump mapping or isosurfaces, normal mapping, lighting maps including specular highlights and reflection techniques, and shadow volumes into one rendering engine using shaders, which are maturing considerably. Shaders are now very nearly a necessity for advanced work in the field, providing considerable complexity in manipulating pixels, vertices, and textures on a per-element basis, and countless possible effects. Their shader languages HLSL and GLSL are active fields of research and development. Physically based rendering or PBR, which implements even more maps to simulate real optic light flow, is an active research area as well, along with advanced optics areas like subsurface scattering and photon mapping. Experiments into the processing power required to provide graphics in real time at ultra-high-resolution modes like Ultra HD are beginning, though beyond reach of all but the highest-end hardware.|$|E
25|$|<b>Texture</b> <b>mapping</b> is {{a method}} for adding detail, surface texture, or colour to a computer-generated graphic or 3D model. Its {{application}} to 3D graphics was pioneered by Dr Edwin Catmull in 1974. A texture map is applied (mapped) {{to the surface of}} a shape, or polygon. This process is akin to applying patterned paper to a plain white box. Multitexturing is the use of more than one texture at a time on a polygon. Procedural textures (created from adjusting parameters of an underlying algorithm that produces an output texture), and bitmap textures (created in an image editing application or imported from a digital camera) are, generally speaking, common methods of implementing texture definition on 3D models in computer graphics software, while intended placement of textures onto a model's surface often requires a technique known as UV mapping (arbitrary, manual layout of texture coordinates) for polygon surfaces, while non-uniform rational B-spline (NURB) surfaces have their own intrinsic parameterization used as texture coordinates. <b>Texture</b> <b>mapping</b> as a discipline also encompasses techniques for creating normal maps and bump maps that correspond to a texture to simulate height and specular maps to help simulate shine and light reflections, as well as environment mapping to simulate mirror-like reflectivity, also called gloss.|$|E
25|$|During {{his time}} at Microsoft and Definition Six, Hecker wrote an {{influential}} programming column for Game Developer Magazine. Two series of articles from this column still serve today as standard references on their respective subjects. The first series was the first complete synthesis of perspectively-correct <b>texture</b> <b>mapping</b> and formed the mathematical basis for many important game rasterizers, including Michael Abrash's rasterizer for the 3D title Quake. The second was a series on rigid body dynamics simulation for games, complete with an extensive bibliography of rigid body dynamics resources. The articles {{were part of a}} general push by Hecker to incorporate more interactive physics into games, which at the time in 1996 rarely featured any physical simulation. In the summer of 1997, Hecker stepped down as author of the regular column to focus on game development full-time.|$|E
40|$|We {{present a}} system for interactively {{modelling}} and styling hair on an arbitrary surface using <b>texture</b> <b>maps.</b> <b>Texture</b> <b>maps</b> are used to modulate characteristics of hair strands on the surface, and combinations of these <b>texture</b> <b>maps</b> represent {{a great deal of}} information about a hairstyle. We render the scenes in real-time, enabling the user to interactively design and style hair to their liking. Our techniques are designed for real-time facial animation, though they can be applied to the simulation of hair in general. ...|$|R
40|$|A {{commonly}} encountered {{problem when}} creating 3 D models of large real scenes is unnatural color texture fusion. Due to variations in lighting and camera settings (both manual and automatic), captured color <b>texture</b> <b>maps</b> {{of the same}} 3 D structures can have very different appearances. When fusing multiple <b>texture</b> <b>maps</b> to create larger models, this color variation leads to poor appearance with patchwork color tilings on homogeneous surfaces. This paper extends previous research on pairwise global color correction to multiple overlapping <b>texture</b> <b>map</b> images. The central idea is to estimate a set of blending transformations that minimize the overall global color discrepancy between the <b>texture</b> <b>maps,</b> thus spreading residual color errors, rather than letting them accumulate. Ó 2006 Elsevier B. V. All rights reserved...|$|R
50|$|Displacement mapping {{includes}} the term mapping {{which refers to}} a <b>texture</b> <b>map</b> being used to modulate the displacement strength. The displacement direction is usually the local surface normal. Today, many renderers allow programmable shading which can create high quality (multidimensional) procedural textures and patterns at arbitrary high frequencies. The {{use of the term}} mapping becomes arguable then, as no <b>texture</b> <b>map</b> is involved anymore. Therefore, the broader term displacement is often used today to refer to a super concept that also includes displacement based on a <b>texture</b> <b>map.</b>|$|R
25|$|One {{of these}} {{students}} was Edwin Catmull. Catmull had just come from The Boeing Company and {{had been working on}} his degree in physics. Growing up on Disney, Catmull loved animation yet quickly discovered {{that he did not have}} the talent for drawing. Now Catmull (along with many others) saw computers as the natural progression of animation and they wanted to be part of the revolution. The first animation that Catmull saw was his own. He created an animation of his hand opening and closing. He also pioneered <b>texture</b> <b>mapping</b> to paint textures on three-dimensional models in 1974, now considered one of the fundamental techniques in 3D modeling. It became one of his goals to produce a feature-length motion picture using computer graphics - a goal he would achieve two decades later after his founding role in Pixar. In the same class, Fred Parke created an animation of his wife's face.|$|E
25|$|In development, the programmers {{wanted to}} find a way to provide more {{variation}} and visual effects for the players, although they were already strained by memory limitations on the Xbox 360 for Left 4 Dead. One key development factor was recognizing a way to create greater variation in the appearance of the common infected through a number of modeling and rendering tasks. Simple changes of the underlying geometry of the model, either the head or the body, with the resulting effects on the <b>texture</b> <b>mapping</b> was one means to create apparent variation. Another means was created by using different head textures along with various blood and dirt maps, and similarly different wounds applied to the body texture. A final means to alter the tone of both the skin and the clothing worn by the infected. As a result, a single infected model could have up to 24,000 variations within the game. This allowed Valve to effectively only keep two to six common infected core models in memory for each level, leaving only the unique infected for each campaign and the special infected as their own unique models. As a result, the memory use for the infected dropped by 50%. Valve's programmers also sought how to better represent damage the players did to the infected by showing inflicted wounds in the appropriate location and in a manner based on the weapon used, allowing for the inclusion of more resilient infected creatures in advanced game modes. They had simulated this in Left 4 Dead by having five possible character models that would result from a fatal attack but felt this could be advanced further. Already limited by memory concerns on the Xbox 360 that prevented further variations on the core infected models, the team devised a system of using textures with transparencies combined with ellipsoid culling from any infected character model to simulate the wounds, with several graphical process simplifications to avoid taxing the rendering system. This allowed the team to simulate up to two such wounds on each infected using only 13% of the memory resources of the based system in Left 4 Dead.|$|E
500|$|Id Software's Hovertank 3D pioneered {{ray casting}} {{technology}} in May 1991 to enable faster gameplay than 1980s vehicle simulators; {{and six months}} later Catacomb 3-D introduced another advance, <b>texture</b> <b>mapping,</b> in November 1991. The second game to use <b>texture</b> <b>mapping</b> was , a March 1992 action role-playing game by Looking Glass Technologies that featured a first-person viewpoint and an advanced graphics engine. In October 1990, id developer John Romero learned about <b>texture</b> <b>mapping</b> from {{a phone call to}} Paul Neurath. Romero described the <b>texture</b> <b>mapping</b> technique to id programmer John Carmack, who remarked, [...] "I can do that.", and would feel motivated by Looking Glass's example to do the same in Catacomb 3-D. Catacomb 3-D also introduced the display of the protagonist's hand and weapon (in this case, magical spells) on the screen, whereas previously aspects of the player's avatar were not visible. The experience of developing Ultima Underworld would make it possible for Looking Glass to create the Thief and System Shock series years later.|$|E
40|$|Environment mapping is a {{technique}} by which a <b>texture</b> <b>map</b> or maps contain {{the view of the}} environment from a particular point. The <b>texture</b> <b>map</b> is then addressed using a function of a reflection or refraction vector when rendering an object. There are several forms of environment mapping: spherical, dual paraboloid, and cubic to name a few. They are all basically the same concept, but diffe...|$|R
40|$|The solid map {{provides}} a view-independent method for solid texturing using an ordinary 2 -D surface <b>texture</b> <b>map.</b> The solid map transforms a model's polygons into 2 -D texture space without overlap. It then rasterizes the polygons in this space, interpolating the solid texture coordinates across the pixels of the polygon. These stored solid texture coordinates are then read by a texture synthesis procedure, which generates a color that is stored at the corresponding {{location in the}} <b>texture</b> <b>map.</b> This <b>texture</b> <b>map</b> when applied to the model's polygons yields a procedural solid texturing of the model...|$|R
50|$|<b>Texture</b> <b>map</b> {{statements}} {{may also}} have option parameters (see full spec).|$|R
500|$|Ultima Underworld II {{was built}} with an {{improved}} {{version of the}} game engine used for its predecessor. The team enhanced its visual capabilities: they broadened the first-person view by 30%, expanded the color palette, added more 3D objects, increased the size and animation of character sprites and wrote a new <b>texture</b> <b>mapping</b> algorithm. Director Paul Neurath commented that Ultima Underworlds <b>texture</b> <b>mapping</b> had failed to [...] "look quite {{as good as we}} had hoped", and that the new system realized their vision. The game's code is roughly 30% larger than that of Ultima Underworld—bloat that Church attributed to [...] "second project syndrome".|$|E
500|$|During {{release for}} arcade system board, Ridge Racer was {{described}} by Namco as [...] "the most realistic driving game ever". It featured three-dimensional polygon graphics with <b>texture</b> <b>mapping.</b> The PlayStation version was shown at the 1995 Electronic Entertainment Expo event, and was an innovation {{in the use of}} three-dimensional polygons. Ridge Racer was released in Japan on 3 December 1994, in North America on 9 September 1995, and in Europe on 29 September as a launch title for the PlayStation.|$|E
500|$|Mode 7 {{is a form}} of <b>texture</b> <b>mapping</b> {{available}} on the SNES which allows a raster graphical plane to be rotated and scaled freely, simulating the appearance of 3D environments without processing any polygons. The Mode 7 rendering applied in F-Zero consists of a single-layer which is scaled and rotated around the vehicle. This pseudo-3D capability of the SNES was designed to be represented by the game. 1UP.com's Jeremy Parish stated that F-Zero and Pilotwings [...] "existed almost entirely for the sake of showing [...] off" [...] as they outclassed the competition.|$|E
5000|$|The {{ability to}} index <b>texture</b> <b>maps,</b> {{environment}} maps, and shadow depth maps ...|$|R
40|$|A new and easy-to-implement {{method for}} direct volume {{rendering}} that uses 3 D <b>texture</b> <b>maps</b> for acceleration, and incorporates directional lighting, is described. The implementation, called Voltx, produces high-quality images at nearly interactive speeds on workstations with hardware support for three-dimensional <b>texture</b> <b>maps.</b> Previously reported methods did not incorporate a light model, {{and did not}} address issues of multiple <b>texture</b> <b>maps</b> for large volumes. Our research shows that these extensions impact performance by about a factor of ten. Voltx supports orthographic, perspective, and stereo views. This paper describes the theory and implementation of this technique, and compares it to the shear-warp factorization approach. A rectilinear data set is converted into a three-dimensional <b>texture</b> <b>map</b> containing color and opacity information. Quantized normal vectors and a lookup table provide efficiency. A new tesselation of the sphere is described, which serves {{as the basis for}} normal-vec [...] ...|$|R
40|$|Mesh {{geometry}} {{can be used}} {{to model}} both object shape and details. If <b>texture</b> <b>maps</b> are involved, it is common to let mesh geometry mainly model object shapes and let the <b>texture</b> <b>maps</b> model the most object details, optimising data size and complexity of an object. To support efficient object rendering and transmission, model simplification can be applied to reduce the modelling data. However, existing methods do not well consider how object features are jointly represented by mesh geometry and <b>texture</b> <b>maps,</b> having problems in identifying and preserving important features for simplified objects. To address this, we propose a visual saliency detection method for simplifying textured 3 D models. We produce good simplification results by jointly processing mesh geometry and <b>texture</b> <b>map</b> to produce a unified saliency map for identifying visually important object features. Results show that our method offers a better object rendering quality than existing methods...|$|R
500|$|The {{success of}} these games has been {{attributed}} to their innovative gaming experience rather than audiovisual effects. Papers published by the Columbia Business School indicate both American and Japanese children prefer the actual gameplay of a game over special audio or visual effects. In Pokémon games, the lack of these artificial effects has actually been said to promote the child's imagination and creativity. [...] "With all the talk of game engines and <b>texture</b> <b>mapping</b> and so on, there is something refreshing about this superlative gameplay which makes you ignore the cutesy 8-bit graphics" [...] commented The Guardian.|$|E
500|$|Development of {{the game}} began in January 1998, {{spanning}} two years with manpower that steadily increased from 20 to 50 at peak development phase. The storyline conceived for the game follows Ashley Riot's origins as a dedicated government agent prior to being the titular [...] "vagrant" [...] who is [...] "involved in many incidents" [...] after the events in Leá Monde. Inspiration for the plot is derived from Hollywood [...] "classic and blockbuster" [...] films as well as European and Asian films. The gameplay was conceived to cater to hardcore gamers who do not [...] "ask for hints and read through strategy guides". However, Matsuno revealed that over half {{of the game}}'s story was cut due to capacity and development time constraints. Memory issues was considered the most challenging aspect of the game development, with the team forced to adjust the game's interface, <b>texture</b> <b>mapping</b> and polygon mesh in maps, as well as removing gaming elements such as AI-controlled supporting non-player characters that would have joined Ashley {{in the middle of the}} game.|$|E
500|$|Notable in the {{development}} of Super Mario Kart was its use of Mode 7 graphics. First seen in F-Zero, Mode 7 is a form of <b>texture</b> <b>mapping</b> available on the SNES which allows a plane to be rotated and scaled freely, achieving a pseudo-three-dimensional appearance. 1UP.com have credited the use of Mode 7 with giving the game graphics which at the time of release were considered to be [...] "breathtaking". Retrospective reflection on the Mode 7 visuals was mixed, with IGN stating that the once revolutionary technology now looks [...] "crude and flickery" [...] while the Video Game Bible describes them as [...] "beautiful" [...] and adding to the game. Super Mario Kart featured a DSP (Digital Signal Processor) chip; DSPs were used in SNES games as they provided a better handling of floating point calculations to assist with three-dimensional maths. The DSP-1 chip that was used in Super Mario Kart went on to be the most popular DSP chip to be used in SNES games. The music for the title was created by composer Soyo Oka.|$|E
30|$|Our texture model computes <b>texture</b> <b>maps.</b> These {{maps are}} {{computed}} in three steps.|$|R
40|$|The RealityEngine TM {{graphics}} {{system is}} the first {{of a new generation of}} systems designed primarily to render <b>texture</b> <b>mapped,</b> antialiased polygons. This paper describes the architecture of the RealityEngine graphics system, then justifies some of the decisions made during its design. The implementation is near-massively parallel, employing 353 independent processors in its fullest configuration, resulting in a measured fill rate of over 240 million antialiased, <b>texture</b> <b>mapped</b> pixels per second. Rendering performance exceeds 1 million antialiased, <b>texture</b> <b>mapped</b> triangles per second. In addition to supporting the functions required of a general purpose, high-end graphics workstation, the system enables realtime, “outthe-window” image generation and interactive image processing...|$|R
50|$|Cortical {{maps are}} {{collections}} (areas) of minicolumns {{in the brain}} cortex that {{have been identified as}} performing a specific information processing function (<b>texture</b> <b>maps,</b> color maps, contour maps, etc.).|$|R
