58|3|Public
5000|$|<b>Telescript</b> is an {{object-oriented}} programming language written by General Magic {{as part of}} the overall Magic Cap system. <b>Telescript</b> programs used a modified C-like syntax known as High <b>Telescript,</b> and were compiled to a stack-based language called Low <b>Telescript</b> for execution. Low <b>Telescript</b> ran within virtual machine interpreters, or [...] "Telescript engines", on host computers.|$|E
5000|$|The {{basic model}} of <b>Telescript</b> {{is similar to}} Java, and differs {{primarily}} in where the applications would run. Java was modelled {{to make it possible}} to download Java applications onto any platform and run them locally. <b>Telescript</b> essentially reversed this, allowing end-user equipment with limited capabilities to upload <b>Telescript</b> programs to servers to allow them {{to take advantage of the}} server's capabilities. <b>Telescript</b> could even migrate a running program; the language included features to marshal a program's code and serialized state, transfer it to another <b>Telescript</b> engine (on a device or a server) to continue execution, and finally return to the originating client or server device to deliver its output.|$|E
5000|$|The {{developers}} saw a {{time when}} <b>Telescript</b> application engines would be widely available across various communications systems, first the cell phone networks and desktop machines, and later the internet. Eventually <b>Telescript</b> would become ubiquitous, and interconnected <b>Telescript</b> engines would form a [...] "Telescript Cloud" [...] across which mobile applications could execute.Stationary, long-lived processes called [...] "places" [...] would run in the cloud permanently and provide services to agents which would [...] "go" [...] {{from one place to}} another to access services, collect information, and eventually dispatch results back to the user.|$|E
5000|$|<b>Telescript's</b> {{agent and}} places {{concepts}} were invoked simply by sub-classing those two classes, Agent and Place, {{both of which}} were subclasses of Process. For code clarity, one could place both of these in a single file, and even gather them into a single module. The following code defines the agents needed to implement a store that sells Pies: ...|$|R
5000|$|Although <b>Telescript's</b> {{control and}} layout was {{inspired}} by C, its precise syntax was considerably different. One obvious difference was the replacement of C-style curly braces with parentheses at the definition level, retaining curly braces for grouping statements within logic and flow control statements, {{and the use of}} the colon to separate a name from its definition. The following code defines the interface for objects of the type Pie: ...|$|R
40|$|RNA-seq {{protocols}} {{that focus}} on transcript termini are well-suited for applications in which template quantity is limiting. Here we show that, when applied to end-sequencing data, analytical methods designed for global RNA-seq produce computational artifacts. To remedy this we created the End Sequence Analysis Toolkit (ESAT). As a test, we first compared end-sequencing and bulk RNA-seq using RNA from dendritic cells stimulated with lipopolysaccharide (LPS). As predicted by the <b>telescripting</b> model for transcriptional bursts, ESAT detected an LPS-stimulated shift to shorter 32 ̆ 7 -isoforms that was not evident by conventional computational methods. Then, droplet-based microfluidics was used to generate 1, 000 cDNA libraries, each from an individual pancreatic islet cell. ESAT identified 9 distinct cell types, three distinct beta-cell types, and a complex interplay between hormone secretion and vascularization. ESAT, then, offers a much-needed and generally applicable computational pipeline for either bulk or single cell RNA end-sequencing...|$|R
5000|$|... "Silicon Valley" [...] (American Experience) — <b>Telescript</b> by Randall MacLowry and Michelle Ferrari; Story by Randall MacLowry; PBS (tie) ...|$|E
5000|$|Like {{many modern}} OO languages, <b>Telescript</b> {{separated}} interface and implementation, placing these in [...] files for the interface, and [...] files {{for the implementation}} (t as in [...] "t"elescript). Uncommonly, the language also defined a third type of file, , which combined multiple [...] files together. Compiled code {{was placed in a}} [...] file, which was guided by linker instructions in a [...] file. The External Application Framework allowed C++ code to be called by <b>Telescript.</b>|$|E
5000|$|... "The Fabric of the Cosmos: The Illusion of Time" [...] (Nova) — <b>Telescript</b> by Randall MacLowry, {{story by}} Joseph McMaster and Randall MacLowry; PBS ...|$|E
5000|$|... "The Fabric of the Cosmos: Quantum Leap" [...] (Nova) — <b>Telescript</b> by Josh Rosen and Julia Cort, {{story by}} Joseph McMaster and Josh Rosen; PBS ...|$|E
50|$|<b>Telescript</b> was {{modelled}} on {{the concept}} of small programs known as agents that would interact with computing services known as places all of which would run on a cluster of one or more servers that hosted what was called a <b>Telescript</b> cloud. The user's handheld device was one such place, albeit one with limited capabilities. The model assumed that most information and services would be provided by places running on larger server computers hosted by the communications providers like AT&T. Even early documents refer to this as running in the cloud. User-facing programs would consist of a number of such agents, which might run locally, on the provider's hosts, or even be forwarded to 3rd party servers. To coordinate communications, <b>Telescript</b> also included the concepts of a telename that uniquely identified users, and teleaddresses which identified the device even as it moved between networks.|$|E
5000|$|... "The {{beauty of}} <b>Telescript</b> ... is that now, {{instead of just}} having a device to program, {{we now have the}} entire Cloud out there, where a single program can go and travel to many {{different}} sources of information and create sort of a virtual service. No one had conceived that before. The example Jim White designer of <b>Telescript,</b> X.400uses now is a date-arranging service where a software agent goes to the flower store and orders flowers and then goes to the ticket shop and gets the tickets for the show, and everything is communicated to both parties." ...|$|E
5000|$|<b>Telescript</b> {{includes}} several built-in collection types, , , , and , {{the last of}} which is essentially a List with text indexes (one half of a Dictionary). One common source of errors in <b>Telescript</b> was that while a collection as a whole could be passed back in an agent, individual items within it were owned by the place. Thus if one used , it would arrive back on the user's device as null. The solution was additional syntax, the [...] and [...] hints, which caused the ownership of returned values to be changed on return, and thus be serialized into the results when returning to the original place.|$|E
50|$|The authentication/authorization {{system of}} the mobile agents in <b>Telescript</b> created a high {{coupling}} between the device and the target Place. As a result, deployment of agent-based technology was incredibly difficult, and never reached fruition before the PersonaLink service was shut down.|$|E
50|$|Programs {{could also}} be written in the new <b>Telescript</b> {{programming}} language, which made communications a first-class primitive of the language. <b>Telescript</b> was compiled into a cross-platform bytecode {{in much the same}} fashion as the Java programming language, but was able to migrate running processes between virtual machines. This radical idea defined a robust agent that could serialize its code, data, and state, deploy itself across one or more remote computers, and resume execution at the next instruction with all state intact. For instance, a user might start a <b>Telescript</b> application on their handheld that purchased movie tickets; when they had complete the basic input, the agent would migrate itself over the cell phone network and begin running on the movie theatre's server. There, the migrated user agent would interact with other agents running on the server to perform the actual purchase. The server would complete the transaction, fill out results data in the original agent, and migrate it back to the user's device. The agent might perform days- or weeks-long tasks after the client disconnected, and dispatch updates periodically to the client. The user-end software was tasked primarily with request and display.|$|E
5000|$|The term cloud {{has been}} used to refer to {{platforms}} for distributed computing. In Wired's April 1994 feature [...] "Bill and Andy's Excellent Adventure II" [...] on the Apple spin-off General Magic, Andy Hertzfeld commented on General Magic's distributed programming language <b>Telescript</b> that: ...|$|E
50|$|<b>Telescript</b> was {{generally}} stateless {{in terms of}} data lifetime. All data within the program, both instance and local variables, were always serialized. Agents could be invoked or suspended at any instant, and would not lose their state. This same mechanism also allowed agents to be easily communicated between hosts.|$|E
50|$|Sub-classes {{were known}} as flavors; the PieBuyer class {{outlined}} above is a flavor of Agent. <b>Telescript</b> also included the concept of mix-in classes, which offered features similar to multiple inheritance by allowing the creation of classes containing only code that could then be included in other classes. Mix-ins were not flavors.|$|E
50|$|General Magic had {{originally}} {{developed as a}} team within Apple Inc., and were spun off in 1990. When they began to generate some press buzz in 1992, Apple decided to enter the same market with their Newton tablet computer. General Magic were {{unable to find a}} niche within the market, and <b>Telescript</b> services were soon deprecated in favor of new products unrelated to mobile computing.|$|E
50|$|Irby then co-founded {{and was the}} Senior Vice President of Engineering for Metaphor Computer Systems, and {{was later}} Executive Vice President of product {{development}} at General Magic, which created the Magic Cap and <b>Telescript</b> products. Most recently, Irby worked for Silicon Graphics (SGI), where he contributed to their consumer products and technology, and managed the engineering team that had previously developed the Nintendo 64. Irby retired in 1997.|$|E
50|$|The systems also {{suffered}} from being introduced {{with no real}} infrastructure behind them. Since the cell carriers were not yet running any <b>Telescript</b> services, the entire distributed system was reduced to running applications on the handheld. Further, the World Wide Web and Mosaic were gaining rapid acceptance, and met users' needs well enough to obviate demand for General Magic's walled-garden solutions. Partners ended production of Magic Cap devices by 1997.|$|E
50|$|Love Letters is a 1999 American made-for-television drama film {{directed}} by Stanley Donen {{and based on}} the 1988 play by A. R. Gurney. Gurney adapted his own work for the <b>telescript,</b> dramatizing scenes and portraying characters that were merely described in the play. Donen had envisioned it to be a feature film, but a limited budget restricted him to make a TV movie and he shot the film in only 17 days. It is his last film as of 2016. Love Letters originally premiered on ABC on April 12, 1999.|$|E
5000|$|... “Shameless” {{was adapted}} from a long-running award-winning British {{television}} drama of the same name. HBO began developing an American version of Shameless after striking a deal with John Wells in January 2009. By October 2009 the development had moved to Showtime. John Wells Productions taped a pilot episode for the cable network in December 2009. William H. Macy stars in the lead role as Frank Gallagher. Also joining the cast were former Dragonball Evolution co-stars Emmy Rossum as Fiona and Justin Chatwin as Steve. Paul Abbott, whose semi-autobiographical <b>telescript</b> became the pilot episode for the original UK version, is credited as an executive producer on the U.S. version.|$|E
5000|$|<b>Telescript</b> was {{object-oriented}} (OO) {{and used}} a number of uncommon terms to describe object state and communications. Attributes correspond to what other languages refer to as instance variables or fields. Method calls were known as requests, and the act of running a method's implementation was known as performing it. All such calls always responded with a message indicating success or failure, {{it was up to}} the requesting object to optionally trap those and respond to them. Hints on how to pass the data into and out of method calls were known as constraints, and covered the common [...] "by ref" [...] and [...] "by value", among others.|$|E
5000|$|The first {{personal}} computer-based teleprompter, Compu=Prompt {{appeared in}} 1982. It was invented and marketed by Courtney M. Goodin and Laurence B. Abrams in Los Angeles, California. The custom software and specially-redesigned camera hardware {{ran on the}} Atari 800 Personal Computer, which featured smooth hardware-assisted scrolling. Their company later became ProPrompt, Inc., which is still providing teleprompting services over 32 years later. Other paper-based teleprompting companies Electronic Script Prompting, QTV and <b>Telescript</b> followed suit and developed their own software several years later, when computers with enough graphics power to provide the smooth scrolling text became available. In January 2010 Compu=Prompt received a Technology and Engineering Emmy Award for [...] "Pioneering Development in Electronic Prompting".|$|E
5000|$|The Magic Cap {{operating}} system included a new [...] "mobile agent" [...] technology named <b>Telescript.</b> Conceptually, the agents would carry work orders, travel to a [...] "Place" [...] {{outside of the}} handheld device, complete their work, {{and then return to}} the device with the results. When the Magic Cap devices were delivered, the only Place for agents to travel was the PersonaLink service provided by AT&T. The agents had little access to functionality, since each agent had to be strictly authorized and its scope of inquiry was limited to the software modules installed on the PersonaLink servers. The payload carried by these agents was also hampered by the slow baud rate of the modems in the devices of 2400 bit/s.|$|E
5000|$|The model also {{differs from}} {{traditional}} solutions {{in the way}} that data exchange occurs in the case of interacting programs. For instance, if the user chooses to buy one of the barbecues they found in their previous search, in a conventional system the task of filling out the order forms and confirming payment would be accomplished through direct communications between the user's device and the remote server, requiring a [...] "live" [...] communications channel throughout the process. In the <b>Telescript</b> model, a new agent with the information needed to complete the purchase is sent to that vendor's store place, interacts with the store place or agents from the vendor, and then returns with the success or failure. The main communications takes place between the agents and places on the remote server, so communications over the network are required only at the start and end of the process.|$|E
50|$|HBO began {{developing}} an American version of Shameless after striking {{a deal with}} John Wells in January 2009. By October 2009 the development had moved to Showtime. John Wells Productions filmed a pilot episode for the cable network in December 2009. William H. Macy stars in the lead role as Frank Gallagher. Also joining the cast were former Dragonball Evolution co-stars Emmy Rossum as Fiona and Justin Chatwin as Steve. Paul Abbott, whose semi-autobiographical <b>telescript</b> became the pilot episode for the original UK version, is credited as an executive producer on the U.S. version. In April 2010, Showtime green-lit the series with a twelve-episode order. In late August Joan Cusack was cast as Sheila, a romantic interest for Frank, replacing Allison Janney, who portrayed the role in the pilot. A preview of the pilot aired on December 12, 2010, after the Season 5 finale of Dexter. The first season officially began airing on Showtime on Sunday, January 9, 2011.|$|E
5000|$|For example, {{consider}} a shopping application that the user asks to find prices {{on a new}} barbecue grill they wish to purchase. In a traditional client-server model, the application would form a number of queries, send them {{to a number of}} services, and then collect the results and display them. In the <b>Telescript</b> model, the application would instead build a new agent populated with the data from the request, stamp it with their name and address, and then send that to a store place on a server for processing. That server could then handle the request directly, or hand off the agent to other places, like the actual vendors' places, for further processing. The results could be placed in the agent's internal data fields and sent back through the network to the user's device, or a new [...] "messenger" [...] agent could be spawned to carry only the result data and sent back to minimize network data transfer.|$|E
40|$|<b>Telescript</b> is a {{software}} technology for building distributed applications using the mobile agent paradigm. <b>Telescript</b> mobile agents are migrating processes {{capable of being}} executed on any <b>Telescript</b> service host. Currently, <b>Telescript</b> incorporates safety and security features sufficient for deploying {{the first generation of}} mobile agent applications, subject to certain operating restrictions. The ultimate goal is the safe hosting of arbitrary, previously unseen programs, or "programming the network. " 1. 0 Introduction <b>Telescript</b> is an interpreted, object-oriented language for writing mobile agents [1, 2, 3]. In common with other object-oriented languages, a <b>Telescript</b> program is basically a collection of hierarchically organized classes, with subclassing and multiple inheritance. However, <b>Telescript</b> also includes built-in classes that support pre-emptively multitasked, priority scheduled process objects. A single <b>Telescript</b> engine can simultaneously host processes on behalf of multipl [...] ...|$|E
40|$|Mobile {{agents are}} {{software}} programs which can move themselves around in computer networks to "do their job". <b>Telescript</b> is a technology specifically {{designed as a}} platform for such agents. This paper describes how <b>Telescript</b> agents can be created and controlled via ordinary web browsers {{and how they can}} interact with Java applets...|$|E
40|$|An Introduction to Safety and Security in <b>Telescript</b> <b>Telescript</b> is a {{software}} technology for building distributed applications using mobile agents [Wh 95 a, Wh 95 b, STAN 95, IBM 95 a]. Telescriptextends {{the concept of}} remote programming, the ability to upload and execute programs to a remote processor, with migrating processes. A <b>Telescript</b> mobile agent is a migrating process that is able to move autonomously during its execution to a differentprocessor and continue executing there. Mobile agents conceptually move the client to the server, where stationary processes, or places, service their requests. When it is done in a place, an agent might choose to move itself to a different processor, carry results back towhere it originated, or simply terminate. Clearly, security {{is a major concern}} in this scenario. The operator of a <b>Telescript</b> processor wants some assurance that nothing bad willcome of its decision to admit an incoming agent. The host platform wants to know who is responsible for the agent. The agent, on the other hand, would like to trust that private information it is carrying will not be disclosed arbitrarily. It needs to trust the operator of theplatform. The server application responsible for the place might also like to set its own policies...|$|E
40|$|This paper {{gives an}} {{introduction}} into the two object-oriented programming environments <b>Telescript</b> and Java which both allow to write mobile code. It illustrates {{some of the}} more interesting features of these languages as platforms for mobile software agents. Further emphasis lies on the cooperation of agents in these two object-oriented worlds. Moreover, several descriptions of some higher-level agents scenarios are given...|$|E
40|$|An {{information}} agent manages all or {{a portion of}} a user's information space. The electronic resources in this space are often distributed across a network and can contain tremendous quantities of data. Mobile agents provide efficient access to such resources and are a powerful tool for implementing {{information agent}}s. A mobile agent is an autonomous program that can migrate from machine to machine in a heterogeneous network. By migrating to the location of a resource, the agent can access the resource efficiently even if network conditions are poor or the resource has a low-level interface. <b>Telescript</b> is the best-known mobile-agent system. <b>Telescript,</b> however, requires the programmer to learn and work with a complex object-oriented language and a complex security model. Agent Tcl, on the other hand, is a simple, flexible, and secure system that is based on the Tcl scripting language and the Safe Tcl extension. In this paper we describe the architecture of Agent Tcl and its current impl [...] ...|$|E
40|$|An open {{problem in}} mobile agent {{research}} is the interaction between agents in different `worlds'. In this paper, we survey various approaches to agent interaction and discuss the interoperation between <b>Telescript</b> and ffMAIN agents {{through the use of}} the Hypertext Transfer Protocol (HTTP) and the shared information space provided by ffMAIN. Keywords: mobile agents, interaction, HTTP, <b>Telescript,</b> ffMAIN, KQML 1 Introduction Mobile agents [...] -programs that can move around in a computer network on behalf of their users [...] -are attracting more and more attention. Various research efforts take place in this area, for example TACOMA (Tromsø and Cornell, [1]), Ara (Universit at Kaiserslautern, [2]), Mole (Universitat Stuttgart, [3]), and the projects InAMoS and InAVAS of the DAI Laboratory/TU Berlin [4]. Several interpreted languages are suitable for the programming of mobile code. Among them Java [5], Tcl (with extensions like [incr tcl] or AgentTcl) [6], Python [7], and Perl [8]. Commercially a [...] ...|$|E
40|$|When {{faced with}} the term “mobile agent”, most {{software}} developers imagine, at best, maintenance, visualization, or debugging problems that would make mobile agents difficult to use in any production application. At worst, they imagine security problems that would make mobile agents only one step short of viruses and worms. Even those software developers who recognize these two visions as exaggerated often dismiss mobile agents as a technology that does not provide any benefits over their normal distributed-computing practices. These developer biases arise from reasons both simple – early unrealized hype and an unfortunate name – and profound – legitimate concerns about security, efficiency, and programmer convenience. To overcome the biases, the mobile-agent community must view their current systems only as excellent vehicles for exploring the hard research problems, and must make an intense effort to move individual mobile-code ideas and techniques into simpler, but initially more palatable, mobile-code systems. 1. A Hard Place [...] . The first system {{commonly referred to as}} a mobile-agent system was <b>Telescript</b> from General Magic [3], which was released in 1994 and served as the cornerstone of the AT&T PersonaLink service. Today, despite Telescript’s clear technical strengths, General Magic, <b>Telescript</b> and PersonaLink are long gone, and mobile agents are used only rarely, if at all, in production systems. Although the reasons for the failure of PersonaLink and then <b>Telescript</b> might be clear in hindsight, the continued absence of commercial mobileagent activity is less so. In fact, there seem to be many reasons why mobile agents should be everywhere. Researchers have gained a flawed, but effective, underlying execution environment with the advent of Java, achieved new breakthroughs in security, reliability and efficiency, and demonstrated performance benefits across a range of applications. Why have these reasons not been enough? The answer ap...|$|E
