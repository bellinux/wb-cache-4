0|174|Public
40|$|In October 2010, the Council {{initiated}} a trailing amendment to require <b>trawl</b> <b>sweep</b> modifications on nonpelagic trawl vessels {{fishing in the}} Central Gulf of Alaska (GOA). The action was initiated in conjunction with final action on the GOA Tanner crab bycatch measures. A similar gear modification, which requires elevating devices {{to be placed on}} the <b>trawl</b> <b>sweeps</b> to lift the sweep off the seafloor, was implemented beginning in 2011 for flatfish vessels in the Bering Sea. Bering Sea research has demonstrated that elevated sweeps can reduce unobserved mortality of crab from interacting with the <b>trawl</b> <b>sweeps.</b> Unlike the modification required to the Bering Sea (BS) <b>trawl</b> <b>sweeps,</b> however, which is required only in the directed flatfish fisheries, the proposed <b>trawl</b> <b>sweep</b> modification for the Central GOA would apply to all non-pelagic trawl fisheries (e. g., flatfish, Pacific cod, pollock, and rockfish). These other target fisheries {{were not included in the}} BS <b>trawl</b> <b>sweep</b> modification amendment, and the BS analysis did not address whether sweep modifications would work effectively for other target fisheries. The Council spent time during the October Council meeting debating the merits of whether the <b>trawl</b> <b>sweep</b> modification should apply to all trawl target fisheries, and whether it should be required GOA wide, or be limited to only the Central GOA. By including the western GOA trawl fleet in this proposed amendment, the Council was concerned that they could be requiring a gear modification for a fleet of largely smal...|$|R
40|$|This {{action would}} require nonpelagic trawl vessels {{targeting}} flatfish in the Central Gulf of Alaska to use elevating devices on <b>trawl</b> <b>sweeps</b> {{to raise them}} off the seafloor. The purpose of this action is to reduce unobserved crab injury and mortality in the Central Gulf of Alaska from potential adverse effects of nonpelagic trawl gear for flatfish fishing. This action also modified existing regulations to increase the maximum length permissible for door and new bridles between the <b>trawl</b> <b>sweeps</b> from 180 feet to 185 feet in the Bering Sea. This modification is to accommodate the use of connecting devices, such as hammerlocks, attached to net and door bridles. Prepared by staff of the...|$|R
50|$|The {{algorithm}} maintains both a <b>sweep</b> <b>line</b> and a beach line, {{which both}} {{move through the}} plane as the algorithm progresses. The <b>sweep</b> <b>line</b> is a straight line, which we may by convention assume to be vertical and moving left to right across the plane. At {{any time during the}} algorithm, the input points left of the <b>sweep</b> <b>line</b> will have been incorporated into the Voronoi diagram, while the points right of the <b>sweep</b> <b>line</b> will not have been considered yet. The beach line is not a straight line, but a complicated, piecewise curve {{to the left of the}} <b>sweep</b> <b>line,</b> composed of pieces of parabolas; it divides the portion of the plane within which the Voronoi diagram can be known, regardless of what other points might be right of the <b>sweep</b> <b>line,</b> from the rest of the plane. For each point left of the <b>sweep</b> <b>line,</b> one can define a parabola of points equidistant from that point and from the sweep line; the beach line is the boundary of the union of these parabolas. As the <b>sweep</b> <b>line</b> progresses, the vertices of the beach line, at which two parabolas cross, trace out the edges of the Voronoi diagram. The beach line progresses by keeping each parabola base exactly half way between the points initially swept over with the <b>sweep</b> <b>line,</b> and the new position of the <b>sweep</b> <b>line.</b> Mathematically, this means each parabola is formed by using the <b>sweep</b> <b>line</b> as the directrix and the input point as the focus.|$|R
40|$|Abstract: This Environmental Assessment/Regulatory Impact Review/Initial Regulatory Flexibility Analysis {{analyzes}} {{a proposed}} gear modification to require non-pelagic trawl vessels targeting flatfish in the Bering Sea subarea to use elevating devices on <b>trawl</b> <b>sweeps</b> {{to raise them}} off the seafloor. The action follows from BSAI Amendment 89, Bering Sea Habitat Conservation Measures. The analysis also evaluates changes to the southern boundary of the Northern Bering Sea Research Area to create an area where anyone fishing with non-pelagic trawl gear must use the modified <b>trawl</b> <b>sweeps</b> required by regulation, and changes to the boundary of the St Matthew Island Habitat Conservation Area {{to be consistent with}} the Council’s intent to protect blue king crab habitat. Finally, the document addresses certain housekeeping amendments to the Fishery Management Plan for Groundfish of the Bering Sea and Aleutian Islands Management Area, which are required to correct typographical and non-substantive errors. (this page is blank) Table of Contents Table of Contents [...] . ...|$|R
40|$|Analysis {{analyzes}} Amendment 94 to the Fishery Management Plan for Groundfish of the Bering Sea and Aleutian Islands Management Area (FMP) {{and gear}} modification for nonpelagic trawl vessels targeting flatfish in the Bering Sea subarea. The regulations require elevating devices on <b>trawl</b> <b>sweeps</b> {{to raise them}} off the seafloor and to reduce the potential impact on bottom habitat. The action follows from Amendment 89, Bering Sea Habitat Conservation Measures. This analysis also evaluates changes to the southern boundary of the Northern Bering Sea Research Area to create an area (Modified Gear Trawl Zone), wherein anyone fishing with nonpelagic trawl gear must use modified <b>trawl</b> <b>sweeps</b> and evaluates changes to the eastern boundary of the Saint Matthew Island Habitat Conservation Area {{to be consistent with}} the Council’s intent to protect blue king crab habitat. Finally, the document addresses certain housekeeping amendments to the FMP, which are required to correct typographical and non-substantive errors and to ensure consistency with the Magnuson-Stevens Fishery Conservation and Management Act. (this page is blank) Executive Summary ES. ...|$|R
50|$|In {{computational}} geometry, a <b>sweep</b> <b>line</b> algorithm or plane sweep {{algorithm is}} an algorithmic paradigm {{that uses a}} conceptual <b>sweep</b> <b>line</b> or <b>sweep</b> surface to solve various problems in Euclidean space. It {{is one of the}} key techniques in computational geometry.|$|R
40|$|Abstract: This Environmental Assessment/Regulatory Impact Review/Initial Regulatory Flexibility Analysis {{analyzes}} proposed Amendment 94 to the Fishery Management Plan for Groundfish of the Bering Sea and Aleutian Islands Management Area (FMP) {{and regulation}} revisions to require gear modification for nonpelagic trawl vessels targeting flatfish in the Bering Sea subarea. The regulations would require elevating devices on <b>trawl</b> <b>sweeps</b> {{to raise them}} off the seafloor to reduce the potential impact on bottom habitat. The action follows from Amendment 89, Bering Sea Habitat Conservation Measures. This analysis also evaluates changes to the southern boundary of the Northern Bering Sea Research Area to create an area where anyone fishing with nonpelagic trawl gear must use modified <b>trawl</b> <b>sweeps</b> and evaluates changes to the eastern boundary of the Saint Matthew Island Habitat Conservation Area {{to be consistent with}} the Council’s intent to protect blue king crab habitat. Finally, the document addresses certain housekeeping amendments to the FMP, which are required to correct typographical and non-substantive errors and to ensure consistency with the Magnuson-Stevens Fishery Conservation and Management Act. (this page is blank) For agenda item C- 5 (a) NPFMC October 2009 For agenda item C- 5 (a...|$|R
5000|$|A single Stick made up {{the stop}} groups (stops), patrols, ambushes and often <b>sweep</b> <b>lines,</b> {{although}} larger <b>sweep</b> <b>lines</b> could be made up from para-sticks or by combining the sticks positioned by the G-Cars, or from those sticks transported by the [...] "Landtail". In all formations the MAG gunner was next in position to the Stick Leader.|$|R
5000|$|... #Caption: Animation of Fortune's algorithm, a <b>sweep</b> <b>line</b> {{technique}} for constructing Voronoi diagrams.|$|R
50|$|The {{algorithm}} maintains as data structures {{a binary}} search tree describing the combinatorial structure of the beach line, and a priority queue listing potential future events that could change the beach line structure. These events include the addition of another parabola to the beach <b>line</b> (when the <b>sweep</b> <b>line</b> crosses another input point) {{and the removal of}} a curve from the beach <b>line</b> (when the <b>sweep</b> <b>line</b> becomes tangent to a circle through some three input points whose parabolas form consecutive segments of the beach line). Each such event may be prioritized by the x-coordinate of the <b>sweep</b> <b>line</b> at the point the event occurs. The algorithm itself then consists of repeatedly removing the next event from the priority queue, finding the changes the event causes in the beach line, and updating the data structures.|$|R
40|$|Otter trawls {{are very}} {{effective}} at capturing flatfish, {{but they can}} affect the seaf loor ecosystems where they are used. Alaska f latf ish trawlers have very long cables (called sweeps) between doors and net to herd fish {{into the path of}} the <b>trawl.</b> These <b>sweeps,</b> which ride on and can disturb the seaf loor, account for most of the area affected by these trawls and hence {{a large proportion of the}} potential for damage to seaf loor organisms. We examined modifications to otter trawls, such that disk clusters were installed at 9 -m intervals to raise <b>trawl</b> <b>sweeps</b> small distances above the seafloor, greatly reducing the area of direct seafloor contact. A critical consideration was whether flatfish would still be herded effectively by these sweeps. We compared conventional and modified sweeps using a twin trawl system and analyzed the volume and composition of the resulting catches. We tested sweeps raised 5, 7. 5, and 10 cm and observed no significant losses of flatfish catch until sweeps were raised 10 cm, and those losses were relatively small (5 – 10...|$|R
50|$|Initialize {{a binary}} search tree T of the line {{segments}} that cross the <b>sweep</b> <b>line</b> L, ordered by the y-coordinates of the crossing points. Initially, T is empty.|$|R
50|$|The {{resulting}} graph {{has only}} a linear number of edges and can be constructed in O(n log n) using a divide and conquer algorithm or a <b>sweep</b> <b>line</b> algorithm.|$|R
5000|$|In {{order to}} {{efficiently}} maintain the intersection {{points of the}} <b>sweep</b> <b>line</b> L with the input line segments and the sequence of future events, the Bentley-Ottmann algorithm maintains two data structures: ...|$|R
50|$|Modern {{implementations}} for Boolean {{operations on}} polygons {{tend to use}} plane sweep algorithms (or <b>Sweep</b> <b>line</b> algorithms). A list of papers using plane sweep algorithms for Boolean operations on polygons {{can be found in}} References below.|$|R
50|$|Note {{that if you}} {{are moving}} downwards, the points where both of the {{vertices}} are below the <b>sweep</b> <b>line</b> are 'split points'. They mark a split in the polygon. From there you have to consider both sides separately.|$|R
50|$|In Dijkstra's {{algorithm}} for {{the shortest}} path problem, vertices {{of a given}} weighted graph are extracted in increasing order by their distance from the starting vertex, and a priority queue is {{used to determine the}} closest remaining vertex to the starting vertex. Therefore, in this application, the priority queue operations are monotonic.In discrete event simulation, events are prioritized by the times at which they happen, and again are extracted monotonically. Similarly, in <b>sweep</b> <b>line</b> algorithms in computational geometry, events at which the <b>sweep</b> <b>line</b> crosses a point of interest are prioritized by the coordinate of the crossed point, and these events are extracted in monotonic ordering.A monotonic extraction order also occurs in the best-first version of branch and bound.|$|R
5000|$|A {{deliberate}} attacking movement {{called a}} [...] "Skirmish" [...] was carried out, {{ending in a}} run through of the enemy position. Three basic skirmishing techniques were employed, usually by <b>Sweep</b> <b>lines</b> containing a few Sticks. The first method of skirmishing involved splitting the <b>Sweep</b> <b>line</b> into two equal sections, called flanks, with one flank moving forward while the second flank covered the first. When the first flank went prone and restarted shooting, the second flank would then run forward until some meters past {{the line of the}} first, and so on. This method is the least likely to result in a friendly fire incident, but it is also the easiest to counter.|$|R
2500|$|Following the visitor's fight song, {{the band}} {{transitions}} into the school's 1911-1931 fight song [...] "Varsity". [...] The band once again forms <b>sweep</b> <b>lines</b> and marches {{back to the}} middle of the field to form another Block M similar to the Fanfare M.|$|R
5000|$|The second {{skirmish}} option {{had every}} second {{member of the}} <b>sweep</b> <b>line</b> designated {{as one of the}} flanks, with each member of that flank passing between and through members of the other. The covering flankers stopped shooting as those moving forward passed them.|$|R
50|$|The {{algorithm}} {{does not}} need to maintain explicitly a representation of the <b>sweep</b> <b>line</b> L or its position in the plane. Rather, the position of L is represented indirectly: it is the vertical line through the point associated with the most recently processed event.|$|R
5000|$|Fortune's {{algorithm}} is a <b>sweep</b> <b>line</b> algorithm for generating a Voronoi diagram from {{a set of}} points in a plane using O(n log n) time and O(n) space. It was originally published by Steven Fortune in 1986 in his paper [...] "A sweepline algorithm for Voronoi diagrams." ...|$|R
5000|$|The {{main idea}} of the Bentley-Ottmann {{algorithm}} {{is to use a}} <b>sweep</b> <b>line</b> approach, in which a vertical line L moves from left to right across the plane, intersecting the input line segments in sequence as it moves. The algorithm is described most easily in its general position, meaning: ...|$|R
40|$|In {{the thesis}} we first {{describe}} {{the definition of}} a Voronoi diagram and several properties of Voronoi diagrams in the plane. We also define triangulations of the plane and the concept of a Delaunay triangulation, and present the connection between Voronoi diagrams and Delaunay triangulations. We then present three different algorithms for constructing a Voronoi diagram in the plane, and provide a more detailed description of Fortune’s algorithm which {{is an example of a}} <b>sweep</b> <b>line</b> algorithm. <b>Sweep</b> <b>line</b> algorithms are especially widespread in computational geometry and are used for solving various problems in Euclidean space. We selected Fortune’s algorithm for constructing Voronoi diagrams, and implemented it in the Java programming language. The performance of our implementation of the algorithm was checked on several randomly generated datasets and on a dataset of geographic coordinates of public charging stations for electric cars in Slovenia...|$|R
50|$|The Bentley-Ottmann {{algorithm}} itself maintains data structures {{representing the}} current vertical ordering of the intersection {{points of the}} <b>sweep</b> <b>line</b> with the input line segments, {{and a collection of}} potential future events formed by adjacent pairs of intersection points. It processes each event in turn, updating its data structures to represent the new set of intersection points.|$|R
40|$|Introduction The Voronoi diagram is an {{important}} data structure in computational geometry. Given n sites in the plane, the Voronoi diagram partitions the plane into n regions. The region of a site p consists of all those points that lie closer to p than {{to any of the}} other sites. For a survey on Voronoi diagrams and their applications we refer to Aurenhammer [1]. A generalization of the <b>sweep</b> <b>line</b> method of Fortune [2] was developed in [4] which will be presented here. To achieve this generalization, the <b>sweep</b> <b>line</b> was replaced by a general sweep curve. In order to look for sweep curves that are feasable for such an algorithm, equidistant curves were introduced. It turned out that there are two useful forms of sweep curves for the Euclidian plane, lines and circles. As a further result, a sweep algorithm based on sweep circles was implemented; thi...|$|R
50|$|For each point, {{check if}} the {{neighboring}} points are {{both on the}} same side of the 'sweep line', a horizontal or vertical line on which the point being iterated lies. If they are, check the next <b>sweep</b> <b>line</b> on the other side. Break the polygon on the line between the original point and one of the points on this one.|$|R
40|$|Given {{a set of}} {{horizontal}} line segments, the hive-graph is a data structure that supports queries of the form "given a point p belonging to a line segment report the segment above (or below) and visible from p", answering in constant time. It has been introduced in a static setting [1]. In this paper we provide algorithms that maintain a hive-graph {{of a set of}} n horizontal line segments between two vertical <b>sweep</b> <b>lines.</b> The <b>sweep</b> <b>lines</b> can independently move right and left (giving rise to insertions and deletions of endpoints). Space and update time are O(n) and O(log n), respectively. We retain the optimal query time of the static solution. What we actually maintain is a simplified version of the original hive-graph, obtained through a relaxation of its constraint on rectangles abutting. 1 Introduction The hive-graph is a data structure introduced by Chazelle [1], in the framework of the filtering search technique, to the purpose of solving problems of the following form: p [...] ...|$|R
50|$|The {{idea behind}} {{algorithms}} {{of this type}} is to imagine that a line (often a vertical line) is swept or moved across the plane, stopping at some points. Geometric operations are restricted to geometric objects that either intersect or are {{in the immediate vicinity}} of the <b>sweep</b> <b>line</b> whenever it stops, and the complete solution is available once the line has passed over all objects.|$|R
40|$|Let H be {{a set of}} n {{lines in}} the plane. Assume that no three lines {{intersect}} at a point and {{that none of the}} lines is vertical. Each line intersects n − 1 other lines and thus is divided into n edges. The regions, edges and vertices partition the plane into a subdivision known as arrangement. If we use a vertical <b>sweep</b> <b>line,</b> we need to sort n 2 intersection points. Whether it is possible to sort the n 2 intersection points determined by n lines in o(n 2 log n) is still an open problem. In topological sweep we compromise the straightness of the sweepline to acheive better time and space complexities than vertical <b>line</b> <b>sweep.</b> The idea of topological sweep is to use a curved line (topological line) with some special properties to simulate a vertical line. Using a topological <b>line</b> to <b>sweep</b> the arrangement, we need only O(n 2) timeandO(n) space. A topological line (cut) is a monotonic line in y-direction which intersects every other line exactly once. It is specified by a sequence of edges (c 1,c 2,,,,,cn), each contains an intersection point of the cut with a different line in the arrangement. Notice that a vertical <b>sweep</b> <b>line</b> runs from −∞ to ∞ in the y-direction and intersects each line in the arrangement exactly once. A cut has the same properties by definition. The sweep will be implemented by starting with leftmost cut which includes all semi-infinite edges and pushing it to the right till it becomes the rightmost cut, in a series of elementary steps. An elementary step is performed when the topological <b>line</b> <b>sweeps</b> past a vertex of the arrangement. To keep the <b>sweep</b> <b>line</b> a topological line, we can only past a vertex which is the intersection point of 2 consecutive edges in the current cut. (Otherwise, it will intersect some line more than once.) Do we always have such a vertex during the process of sweeping? That is, will the topological sweep get stuck? Lemma 1. 1 There always exist two consecutive edges of the cut with a common right endpoint, unless we are considering the rightmost cut. 1 c[j...|$|R
25|$|Typically {{the first}} stops were {{positioned}} {{in areas where}} the enemy was thought likely to pass through, often a riverbed or dry , where there was more vegetation impeding enemy movement. If there was a hill or ridge that gave outstanding observation, then stops might be placed there. Depending on the circumstances, the helibourne stops could form the main <b>sweep</b> <b>line</b> immediately upon insertion instead of waiting for the paratrooper elements of the force.|$|R
40|$|This paper {{considers}} some implementation {{issues in}} a path planner for achieving uniform coverage of a non-Euclidean bony surface embedded in R 3 space. The target application for this planner is bone removal in orthopaedic surgery, but the technique can also be applied to other general surface-coverage problems. Specifically, we use cellular decomposition and <b>sweep</b> <b>lines</b> to generate a set of meaningful way-points for the bone-burring robot to visit, then navigate between these way-points using potential functions...|$|R
50|$|The Vatti {{algorithm}} involves processing both {{subject and}} clipping polygon edges {{in an orderly}} fashion, starting with the lowermost edges and working towards the top; this is conceptually similar to the Bentley-Ottmann algorithm. This <b>sweep</b> <b>line</b> approach divides the problem space by scanlines, imaginary horizontal lines that pass through every vertex of the participating polygons. These scanlines outline scanbeams - the spaces between adjacent scanlines. These scanbeams are processed in turn, starting with the lowest scanbeam, with the algorithm adding points of intersection within these scanbeams into the solution polygons.|$|R
50|$|In {{computational}} geometry, the Bentley-Ottmann {{algorithm is}} a <b>sweep</b> <b>line</b> algorithm for listing all crossings {{in a set}} of line segments. It extends the Shamos-Hoey algorithm, a similar previous algorithm for testing whether or not a set of line segments has any crossings. For an input consisting of n line segments with k crossings, the Bentley-Ottmann algorithm takes time O((n + k) log n). In cases where k = o(n2 / log n), this is an improvement on a naïve algorithm that tests every pair of segments, which takes O(n2).|$|R
50|$|The {{third option}} {{was called a}} Pepper Pot. This {{involved}} individuals of the <b>Sweep</b> <b>line</b> or Stick, randomly getting up and moving forward, or going prone and covering, and so on. It {{is more difficult to}} implement when in larger numbers, but is also the hardest to counter because prone troops rise from their positions in a very random and seemingly uncoordinated fashion. Sticks of four always used something resembling the Pepper Pot when on the assault, or split pairs if a serious attempt at out-flanking the enemy position was intended.|$|R
50|$|Blake won the 1989-90 Whitbread race, {{where he}} skippered Steinlager 2 to an {{unprecedented}} clean <b>sweep</b> of <b>line,</b> handicap and overall honours {{on each of the}} race's six legs.|$|R
