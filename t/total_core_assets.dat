0|924|Public
40|$|Setting up and {{stabilizing}} reusable <b>core</b> <b>assets</b> for {{a family}} of similar products is the first step towards reuse via software Product Line (SPL) approach. Additional variation mechanisms are applied to help in configuring and customizing <b>core</b> <b>assets</b> during reuse-based derivation of custom products. Initially, companies tend to adopt simple variation mechanisms such as preprocessing, parameter files and build tools. For relatively small SPLs, say with <b>core</b> <b>assets</b> in range of 50 KLOC, this strategy works well. However, as the size of <b>core</b> <b>assets</b> grows and the impact of features spreads through <b>core</b> <b>assets,</b> application of multiple, and usually incompatible variation mechanisms becomes increasingly difficult...|$|R
40|$|Product line (PL) {{engineering}} is a software engineering paradigm, which guides organizations toward {{the development of}} products from <b>core</b> <b>assets</b> rather than the development of products one by one from scratch [1 – 3]. Two major activities of PL software engineering are <b>core</b> <b>asset</b> development (i. e., PL engineering) and product development (i. e., application engineering) using the <b>core</b> <b>assets...</b>|$|R
40|$|Product line {{engineering}} {{is a widely}} used approach for the efficient development of whole portfolios of software products. The basis of the approach is that products are built from a <b>core</b> <b>asset</b> base, a collection of artifacts that have been designed specifically for use across the portfolio. To account for differences among the software products, some adaptations of the <b>core</b> <b>assets</b> are usually required. These adaptations should be planned before development and made easy for the product developers to use without jeopardizing existing properties of the <b>core</b> <b>assets.</b> In a product line {{with a large number}} of products and <b>core</b> <b>assets,</b> as well as requirements to make fine-grained adjustments, managing variability can become problematic very quickly. Mismanagement may result in adding unnecessary variability, implementing variation mechanisms more than once, selecting incompatible or awkward variation mechanisms, and missing required variations. As the product line grows and evolves, the need for variability increases, and managing the variability grows increasingly difficult. This report describes the concepts needed when creating <b>core</b> <b>assets</b> with included variability. These concepts provide guidelines to <b>core</b> <b>asset</b> creators on how to model the variability explicitly, so it is handled consistently throughout the product line and managing the variability becomes feasible...|$|R
25|$|Hitachi {{purchased}} the Next Generation Packet <b>Core</b> <b>assets.</b>|$|R
50|$|By 2007, CoolBrands {{was selling}} off {{most or all}} of its <b>core</b> <b>assets.</b>|$|R
40|$|The Software Product Line {{strategy}} resorts {{often on}} a platform team, being responsible for the <b>core</b> <b>assets.</b> A central problem is that this platform team becomes a bottleneck in the development organization, as conflicting requirements are asked for by many different <b>core</b> <b>assets</b> users. This presentation is about how Open Source Development Methods help to decouple product and platform teams. The idea is that working in an Open Source manner within the borders of a company gives {{the right amount of}} flexibility to each product team, while allowing the platform team to focus on the long term business targets and build a sustainable set of <b>core</b> <b>assets...</b>|$|R
40|$|Dynamic {{reconfiguration}} {{approaches in}} the literature have focused on specific problems of each application area (e. g., context awareness [1], autonomous software component version control, etc.), and development of reusable and dynamically reconfigurable <b>core</b> <b>assets</b> has not been fully investigated. As such, a research theme that addresses development issues for reusable and dynamically reconfigurable <b>core</b> <b>assets</b> has emerged and it is called dynamic software product lines (DSPLs) [2]...|$|R
40|$|Abstract. In {{software}} product line engineering, <b>core</b> <b>assets</b> are reusable artifacts that {{are intended to}} be used by a family of {{software product}}s in order to improve development productivity and quality of particular software products. In order to support the construction and maintenance of <b>core</b> <b>assets,</b> various modeling methods have been proposed. However, the assessment of these methods is still in an incubation stage. In fact, only several frameworks for comparing and evaluating these methods have been suggested. These mainly refer to lists of criteria whose examination is sometimes subjective and opinion-dependent. In this paper, we call for empirical evaluation of the comprehension and utilization of <b>core</b> <b>assets</b> and report the initial results of a series of studies we performed in this context...|$|R
50|$|In April 2010, APEX {{announced}} that it was considering selling the mine as it didn't consider it a <b>core</b> <b>asset</b> anymore.|$|R
40|$|MasterSoftware Product Line Engineering (SPLE) is a {{paradigm}} for improving reusability {{and quality of}} software. Nevertheless, organizations adopting SPLE feel burdened to develop new reusable assets for a product line. The extractive approach was suggested {{to solve this problem}} by extracting <b>core</b> <b>assets</b> from legacy systems. To make <b>core</b> <b>assets</b> with this approach, it is required to identify commonalities and variabilities, evaluate the design of each source code, and refactor source code to create <b>core</b> <b>assets.</b> These activities need to be supported by tools. However, there is no public workbench that can support the entire process of the extractive approach. This thesis suggests a workbench and proposes its detail through conceptual and physical models. Additionally, it explores feasibility and suggests ways for developing a workbench based on open source tools...|$|R
50|$|The <b>core</b> <b>asset</b> of the IEP is the Global Peace Index (GPI), {{which is}} now {{considered}} the benchmark study in measuring peace.|$|R
40|$|A {{software}} product line organization exists to produce products. Much {{of the research}} on creating products via product lines has focused on developing <b>core</b> <b>assets</b> such as requirements, architectures, and components. This technical note presents the results of a study that focused on how product line organizations create products (e. g., their production strategy and how <b>core</b> <b>assets</b> are used in the production process). These results include compiled responses to the questionnaire used in the study and follow-up interviews...|$|R
40|$|The wide {{adaptation}} of product line engineering in software industry has enabled cost effective development {{of high quality}} software for diverse market segments. In software product line (SPL), a family of software is specified {{with a set of}} <b>core</b> <b>assets</b> representing reusable features with their variability, dependencies, and constraints. From such <b>core</b> <b>assets,</b> valid software products are configured after thoroughly analysing the represented features and their properties. However, current implementations of SPL lack effective means to configure a valid product as <b>core</b> <b>assets</b> specified in SPL, being high-dimensional data, are often too complex to analyse. This paper presents a time and cost effective methodology with associated tool supports to design a SPL model, analyse features, and configure a valid product. The proposed approach uses eXtensible Markup Language (XML) to model SPL, where an adequate schema is defined to precisely specify <b>core</b> <b>assets.</b> Furthermore, it enables automated product configuration by (i) extracting all the properties of required features from a given SPL model and calculating them with Alloy Analyzer; (ii) generating a decision model with appropriate eXtensible Stylesheet Language Transformation (XSLT) instructions embedded in each resolution effect; and (iii) processing XSLT instructions of all the selected resolution effects...|$|R
40|$|Using the {{automated}} production and management system of modern manufacturing industry production line for reference, a new industrialized PL-ISEE model was proposed by authors in article [8]. In the new model, the middle {{part of the}} PL-ISEE architecture, data layer, is composed of the software components bus and environment database supporting platform which achieves the storage and managements of product line <b>core</b> <b>assets</b> data. According to the organisation structure and assembling needs of product line <b>core</b> <b>asset</b> components, the PL-ISEE database platform framework and its schema and view design as well as implementation methods are further researched in the paper. The data model, database schema and application views of the database platform are designed and created by using a united <b>core</b> <b>asset</b> data model and product line assembling evolution model. The schema and views based the database platform can well satisfy all the ability requirements of the <b>core</b> <b>asset</b> data integration and assembling producing mode of software product line engineering. Finally, the realizing method of the new industrialized PL-ISEE database support platform based on the CORBA architecture is also proposed and discussed in detail.     <br /...|$|R
50|$|The {{investor}} should {{construct a}} portfolio with money allocated to 6 <b>core</b> <b>asset</b> classes, diversifying among them and biasing toward the equity sections.|$|R
50|$|Following {{the sale}} Yahoo! Japan will {{continue}} to use the name Yahoo! under license from Verizon Communications, the current owner of Yahoo!'s <b>core</b> <b>assets.</b>|$|R
40|$|Consideration of {{the quality}} of {{software}} requirements is a critical activity that is directly connected to the success of a software project. In the product line engineering domain, software requirements are a fundamental part of all the <b>core</b> <b>assets</b> that can be reused in other products. In order to reuse <b>core</b> <b>assets</b> in a family product, an activity that determines quality factors with respect to the software requirements is more important in this domain than in other domains. Although there are many researches on the identification of commonality and variability issues, the consideration of quality factors for satisfying the determined software requirements has not been actively studied. In this paper, we propose a systematic method that evaluates usability in terms of user opinions published on a social network service during the development of <b>core</b> <b>assets</b> in the field of domain engineering...|$|R
40|$|Software {{product lines}} Software product lines {{provide a means}} for realizing (1) {{reduction}} of development costs, (2) reduction of maintenance costs, (3) shorten time-to-market, and (4) increase the overall quality. Software product lines are defined as "a set of software-intensive ystems sharing a common, managed set offealures saticij'ing the spe 4 /ic needc of a particular market segment or mission and that are developed from {{a common set of}} <b>core</b> <b>assets</b> in a prescribed way. The key insight is to exploit the commonaliues between different products. These commonalities are captured by <b>core</b> <b>assets.</b> <b>Core</b> <b>assets</b> provide a certain degree of variability so that these assets can be used in different contexts. The product line scope defines which products one can derive from the <b>core</b> <b>asset</b> base, i. e. the pool of <b>core</b> <b>assets.</b> It thus specifies implicitly what variability these <b>core</b> <b>assets</b> need to provide. <b>Core</b> <b>assets</b> encompass, among others, a product line architecture, and reusable components. The product line architecture is a reference architecture applicable to all the products included in the product line scope. Each product has its own derivation of the product line architecture, designed for the specific needs of that particular product. Obviously, the products in the product line scope differ from each other also. In order to deal with variability that cannot be captured in <b>core</b> <b>assets,</b> product-specific assets need to be developed to augment the provided functionality. These product-specific assets need to be designed to fit in the software architecture of the product. The software product line processes can be categorized in three main activities, i. e. <b>core</b> <b>asset</b> development, product development, and management. <b>Core</b> <b>asset</b> development is concerned with the product line scope and with the development and evolution of the <b>core</b> <b>asset</b> base. Product development is the process of deriving products from the software product line, making use of both <b>core</b> <b>assets</b> and productspecific assets. Finally, management has to orchestrate both the aforementioned processes, including setting the roadmap for future evolution. Funding software product line activities When one institutionalizes a software reuse program, the following four cost types play a role. • C the costs that an organization makes to adopt the software product line practices • Ci, the development and maintenance costs of the <b>core</b> <b>asset</b> base • the development costs of the product-specific assets • C,,,., the costs of integrating a <b>core</b> <b>asset</b> in a product With respect to the funding model, only C. and Ce will have to be dealt with. The former is the encapsulation of all the costs related to transition the organization from a traditional approach to product development to a software product line approach to product development. The latter is the encapsulation of the costs related to the development, maintenance, and evolution of the <b>core</b> <b>assets.</b> The other two cost types, C and C,,, are both directly related to a particular product, so these costs can be accounted to the subject products. When institutionalizing a software product line approach, one has to deal with different issues. First, the initial user of a <b>core</b> <b>asset</b> needs to be compensated for {{the fact that he has}} to deal with all the childhood illnesses. Second, the business units need some incentive to adopt <b>core</b> <b>assets</b> into their product development. Third, the business units do not only need some incentive to adopt <b>core</b> <b>assets,</b> but they need some incentive to adopt the latest releases of <b>core</b> <b>assets</b> also. These two issues particularly play a role in organizations where the use of the <b>core</b> <b>assets</b> has not been proven beneficial. Finally, when the <b>core</b> <b>asset</b> development is performed solely by one business unit, this business unit forms the bottleneck with respect to development and maintenance of <b>core</b> <b>assets.</b> Therefore, other business units should be involved in the development and maintenance of these assets also. This requires an incentive also, since the development of a <b>core</b> <b>asset</b> typically requires more effort than the development of a simihar productspecific asset. The funding model proposed in this thesis is referred to as the adjustable incentive-driven funding model, further referred to as the aid modeL The aid model was derived from the fiat tax model and the reward-based model. The general idea is that all business units initially are accounted for the same amount. However, their behavior with respect to the four identified issues is taken into account also. By doing so, the required amounts per business unit can differ. Determining the funds all the business units are accounted for is done through six simple steps. The first step requires that the different types of behavior, i. e. behavior related to the aforementioned issues, are provided a certain value. For this purpose, every type of behavior makes use of a behavior constant. The higher value such a constant has, the more impact the subject issue will have on the actual amount that a business unit has to pay. The second step is concerned with quantifying the behavior of all the different business units. Each business unit has a behavior variable, i. e. a variable related to one of the four aforementioned issues. The lower value a business unit scores for these variables, the more beneficial it will be. The third step determines the score of a business unit by summing up the multiplication of all its behavior variables with the corresponding behavior constants. The fourth step then prescribes to calculate the overall score, i. e. the sum of the scores of all the individual business units. The fifth step is used to calculate the cost factor. It is obtained by dividing the projected costs with the overall score. Finally, the cost factor is multiplied by the scores of each of the individual business units to derive the funds that they will have to provide. Measuring software product line practices Institutionalizing and sustaining a software product line effort typically is a hard and bumpy road. Strong management commitment is a requirement for doing it successfully. Management has to, among other things, set goals to strive for. Maybe more importantly, the progress towards meeting these goals has to be measured. If the goals are not achieved, or progress towards doing so is stagnating, measuring properties of a software product line effort makes an organization aware that certain aspects of the software product line effort are not covered properly. With respect to the three fundamental software product line activities, the following business concerns were identified. First, the product line scope needs to be determined adequately. For instance, a too large product line strains assets beyond their ability to accommodate the required variability. Second, the future evolution of <b>core</b> <b>assets</b> needs to be accommodated through for instance documenting how this evolution can be carried through. Third, the use of <b>core</b> <b>assets</b> should be more beneficial than developing a similar product-specific asset from scratch. This obviously is necessary to justify the existence of the software product line. In addition, the use of <b>core</b> <b>assets</b> needs to be stimulated through providing proper production plans and corresponding support. The production plans prescribe how the <b>core</b> <b>assets</b> can be utilized to develop a certain product. By prescribing how this is done, the assets will be utilized in a more structured and more efficient manner. Furthermore, product developers only are concerned with developing and maintaining products as efficient and as fast as possible, as soon as possible, and with a high as possible profit margin. Finally, since management has to orchestrate the other two fundamental activities, management must be equipped with tools to provide the necessary resources, coordinate, and supervise. In order to address all the above business concerns, three levels of metrics are introduced. These metrics are categorized according to their relevance to the three typical levels of corporate strategy, i. e. operational, business-level, and corporate-leveL These strategy levels exhibit a short-term focus, a mid-term focus, and a long-term focus respectively. With respect to the operational strategies, four different metrics are proposed. The first two metrics are referred to as the absolute reuse level and the relative reuse leveL The absolute reuse level states what percentage of an asset results from existing assets. The relative reuse level states what percentage of the available and suitable assets for a given product are utilized for the development of a product. The additional reuse effort reflects how much effort is required to develop a <b>core</b> <b>asset</b> relative to the effort it requires to develop a similar product-specific asset. Additional effort is required for, among other things, incorporate variability. Integrating a <b>core</b> <b>asset</b> does not come free. It has to be tailored according to the requirements of a given product and integrated into that product. These costs, however, typically are lower than developing a product-specific asset from scratch. The integration effort reflects how much effort is required to tailor and integrate a <b>core</b> <b>asset</b> in a product context relative to the effort it requires to develop a similar product-specific asset. The second level of strategy, the business-level, comprises a cost-benefit analysis. The focus is on the costs and benefits of a particular product. For the costs, the four cost types described above can be utilized. These costs can be extracted from both the amount a business unit is required according to the institutionalized funding model and the project planning. The former provides C, and C, and the latter provides C and C,,. Two different types of benefits were identified, i. e. tangible and intangible benefits. The former can easily be calculated. The tangible benefits comprise the benefits regarding the development costs and the maintenance costs. The intangible benefits can only be estimated, since these are dependenton for instance the market in which an organization operates. To deal with intangible benefits, the use of scenarios is proposed. A scenario is composed of a worst-case and a best-case. A scenario thus contains a bandwidth. The worst-case bound represents which benefits certainly are gained and the bestcase represents an optimistic, yet realistic view on the benefits. The cost-benefit analysis as a whole also contains a bandwidth of values. The third and final metric level addresses the corporate-level strategy. It is concerned with the longterm health of the software product line, which is reflected in for instance the product line scope. Two types of scenarios are used, i. e. architectural scenarios and strategic scenarios. The architectural scenario represents what features are enabled by transforming the product line architecture and the strategic scenario represents future evolutions of the market in which the organization operates, the available technologies, and the products. Each architectural scenario has a certain value in each strategic scenario, dependent on how much value the enabled features of that architectural scenario have in a certain strategic scenario. By analyzing and making assumptions on future evolutions, the product line scope can evolve accordingly. ...|$|R
50|$|The Hemerdon Tungsten and Tin Project is Wolf Minerals <b>core</b> <b>asset.</b> It {{is located}} near the Plymouth in Devon County, in the {{southwest}} of the UK.|$|R
40|$|Abstract. Product Line Engineering {{is being}} {{accepted}} as a representative software reuse methodology by using <b>core</b> <b>assets</b> and product line architecture {{is known as a}} key element of <b>core</b> <b>assets.</b> However, current research on product line engineering has room to provide specific and detailed guidelines of designing product line architectures and reflecting variability in the architecture. In this paper, we present a reference model and a process to design the architecture with detailed instructions. Especially architectural variability is codified by describing decision model representing variation. ...|$|R
50|$|In 1994, Deripaska became {{director}} general of the plant at the age of 26. In 1997, the smelter became the <b>core</b> <b>asset</b> of Sibirsky (Siberian) Aluminium Group.|$|R
40|$|A Software Product Line is a “set of software-intensive systems {{sharing a}} common, managed set of {{features}} that satisfy {{the specific needs}} of a particular market segment or mission and that are developed from a common set of <b>core</b> <b>assets</b> in a prescribed way” 1. A software product line (or software product family) approach promotes planned and proactive reuse of <b>core</b> <b>assets</b> and architecture-centric development, achieving a substantial increment in product quality and a reduced time to market. Because of this, Software Product Line Engineering has received a lot of attention in recent years...|$|R
40|$|Many {{software}} engineers try {{very hard}} not to use the word “reuse ” because many methods and tools intended to promote reuse have failed to meet expectations. As soon as they learn that a software product line involves reuse they turn away quickly. The “attached process ” that accompanies every <b>core</b> <b>asset</b> in a product line makes software reuse effective instead of frustrating. In this issue of Strategic Software Engineering I will describe how attached processes are created and how they fit into the <b>core</b> <b>asset</b> and product building processes. ...|$|R
40|$|Abstract. A {{production}} plan, {{which describes}} how <b>core</b> <b>assets</b> {{are used to}} develop products, has {{an important role in}} product line engineering as a communication medium between <b>core</b> <b>asset</b> developers and product developers. Recently, there have been efforts to address issues related to production planning; however, most of them focus on the process and business/management aspects of production planning, and not much emphasis is given to technical issues such as deciding features that will be made as <b>core</b> <b>assets</b> and their granularity. In this paper, we introduce a feature-based approach to product line production planning and illustrate how our approach addresses these technical issues. In our approach, a feature model and feature binding information are used as primary input to production plan development. A product line production plan developed using our approach could be easily customized to a product-specific production plan, because it was developed with consideration of units of product configurations as well as their integration techniques. ...|$|R
50|$|Post Today - Circulation {{is around}} 320,000. This is the <b>core</b> <b>asset</b> of media empire, Post Publishing PCL. The online {{edition of the}} paper is Thailand's most popular news website.|$|R
50|$|The Financial Post {{was first}} {{published}} in 1907 by John Bayne Maclean. It was a weekly publication, and one of the <b>core</b> <b>assets</b> of Maclean's media business, which eventually became Maclean-Hunter.|$|R
50|$|The company's major {{resource}} plays {{are located}} in the Williston Basin and Shaunavon resource play in southern Saskatchewan. The company’s additional <b>core</b> <b>asset</b> is located in the Uinta basin in Utah.|$|R
30|$|The {{process of}} SPL {{development}} also influences the engineering requirements. In this process, unlike {{the development process}} of traditional applications, there are three essential activities (Northrop and Clements 2007): <b>core</b> <b>assets</b> development, product development, and management. <b>Core</b> <b>assets</b> development, also known as Domain Engineering, aims to define commonalities and variability and to develop the artifacts for reuse. Product development, also known as Application Engineering, includes the development of final products with reuse. Finally, management is related directly to {{the control of the}} processes and activities, in order to allow the previous two activities to work together.|$|R
40|$|Abstract. In this paper, {{we present}} a {{comparison}} of two implementations of our proposed MDA approach for managing variability in a software product line. The implementations correspond to two representative frameworks based on the Model Driven Engineering (MDE) principles. These frameworks are the Graphical Modeling Framework (GMF) and the Generic Model Environment (GME). We built the <b>core</b> <b>assets</b> of the product line and we generated applications using the two different frameworks. The <b>core</b> <b>assets</b> that we built are: feature models, metamodels, mapping models, and three different types of transformation rules. We built the transformation rules using tw...|$|R
50|$|Deripaska {{was general}} manager and the main {{shareholder}} of the Sayanogorsk Smelter (1994-97) and held the post of president of Sibirsky Aluminium Investment Industrial Group (1997-2001), which later became the <b>core</b> <b>asset</b> of RUSAL.|$|R
40|$|Software Product Line (SPL) is an {{effective}} approach in software reuse in which <b>core</b> <b>assets</b> can be shared {{among the members of}} the product line with an explicit treatment of variability. <b>Core</b> <b>assets,</b> which are developed for reuse in domain engineering, are selected for product specific derivation in application engineering. Decision making support during product derivation is crucial to assist in making multiple decisions during product specific derivation. Multiple decisions are to be resolved at the architectural level as well as the detailed design level, address the need for assisting the decision making process during <b>core</b> <b>asset</b> derivation. Architectural level decision making is based on imprecise, uncertain and subjective nature of stakeholder for making architectural selection based on non- functional requirements (NFR). Furthermore, detail design level involves the selection of suitable features which have the rationale behind each decision. The rationale for the selection, if not documented properly, will also result in loss of tacit knowledge. Therefore, a multi-attribute architecture design decision technique is proposed to overcome the above mentioned problem. The technique combines Fuzzy Analytical Hierarchy Process (FAHP) with lightweight architecture design decision documentation to support the decision making during <b>core</b> <b>asset</b> derivation. We demonstrate our approach using the case study of Autonomous Mobile Robot (AMR). The case study implementation shows showed that the proposed technique supports software engineer in the process of decision making at the architecture and detail design levels...|$|R
40|$|Abstract. Product line {{software}} engineering (PLSE) is an emerging {{software engineering}} paradigm, which guides organizations toward {{the development of}} products from <b>core</b> <b>assets</b> rather than the development of products one by one from scratch. In order to develop highly reusable <b>core</b> <b>assets,</b> PLSE must {{have the ability to}} exploit commonality and manage variability among products from a domain perspective. Feature modeling {{is one of the most}} popular domain analysis techniques, which analyzes commonality and variability in a domain to develop highly reusable <b>core</b> <b>assets</b> for a product line. Various attempts have been made to extend and apply it to the development of software product lines. However, feature modeling can be difficult and time-consuming without a precise understanding of the goals of feature modeling and the aid of practical guidelines. In this paper, we clarify the concept of features and the goals of feature modeling, and provide practical guidelines for successful product line software engineering. The authors have extensively used feature modeling in several industrial product line projects and the guidelines described in this paper are based on these experiences. ...|$|R
40|$|The {{research}} on software product line will face two problems: {{one is the}} design of new industrialized PL-ISEE model (that is component based assembly line), another is the implementation of product line <b>core</b> <b>asset</b> and COTS component agent bus. In the paper, a new industrialized PL-ISEE model is firstly proposed by the authors. One of the main parts framed the new PL-ISEE is the <b>core</b> <b>asset</b> and COTS component agent bus. To realize the agent bus and component based software assembly line, the broker idea and architecture based on CORBA are introduced. The broker architecture and basic framework model adapted to the new PL-ISEE component agent bus requirements are designed, and its implementation mechanisms are systemically discussed. The PL-ISEE realized by the broker architecture will have more advantages on the locating transparency, dynamic updates and expansion of the <b>core</b> <b>asset</b> component servers of software product line, system platform independence and portability, interoperability and interactivity between different agent systems. These advantages are very useful to implement the new PL-ISEE and industrialization production of the component based software products...|$|R
50|$|In 1987, Sara Lee Household and Body Care {{purchased}} the Ty-D-Bol brand from near-bankrupt Papercraft Holdings, operating {{it as part}} of its Kiwi Brands division in Douglassville, Pennsylvania. After years of selling <b>core</b> <b>assets</b> to stay afloat, Papercraft folded in 1991.|$|R
40|$|A {{technology}} for enhanced reusability and maintainability based on Bassett's frames XVCL {{is a public}} domain {{technology for}} enhanced reusability and maintainability developed in the Software Engineering Lab at NUS. XVCL is a variation mechanism. It simplifies managing product variants, so-called software Product Lines (SPL). While product variants may differ in user requirements, design decisions, platforms on which they run, etc., still much similarity exists among them. XVCL helps us reuse what’s similar among them, without being overwhelmed by tedious tasks of dealing with differences. In SPL terminology, XVCL helps design reusable <b>core</b> <b>assets</b> for product variants forming an SPL, and automate customizations of assets during reuse-based development of product variants. Then, XVCL helps in follow up evolution of product variants, to meet needs of their respective customers. XVCL’s unique capability {{is that it can}} selectively propagate changes from <b>core</b> <b>assets</b> to product variants that need these changes, without affecting other product variants that do not need them. This allows us to keep evolving reusable <b>core</b> <b>assets</b> and all product variants in sync one with another. Product variants consist of code (that may be written in multiple programming languages) ...|$|R
40|$|Software {{product lines}} promise {{benefits}} like development and maintenance effort reduction, {{time to market}} decrease, and quality improvement, all resulting from planned and systematic reuse of common <b>core</b> <b>assets.</b> However, very little quantitative data has been measured so far to prove these promises...|$|R
