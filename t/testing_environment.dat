982|4427|Public
5|$|Newton (test plate) {{interferometry}} {{is frequently}} {{used in the}} optical industry for testing the quality of surfaces as they are being shaped and figured. Fig.13 shows photos of reference flats being used to check two test flats {{at different stages of}} completion, showing the different patterns of interference fringes. The reference flats are resting with their bottom surfaces in contact with the test flats, and they are illuminated by a monochromatic light source. The light waves reflected from both surfaces interfere, resulting in a pattern of bright and dark bands. The surface in the left photo is nearly flat, indicated by a pattern of straight parallel interference fringes at equal intervals. The surface in the right photo is uneven, resulting in a pattern of curved fringes. Each pair of adjacent fringes represents a difference in surface elevation of half a wavelength of the light used, so differences in elevation can be measured by counting the fringes. The flatness of the surfaces can be measured to millionths of an inch by this method. To determine whether the surface being tested is concave or convex with respect to the reference optical flat, any of several procedures may be adopted. One can observe how the fringes are displaced when one presses gently on the top flat. If one observes the fringes in white light, the sequence of colors becomes familiar with experience and aids in interpretation. Finally one may compare the appearance of the fringes as one moves ones head from a normal to an oblique viewing position. These sorts of maneuvers, while common in the optical shop, are not suitable in a formal <b>testing</b> <b>environment.</b> When the flats are ready for sale, they will typically be mounted in a Fizeau interferometer for formal testing and certification.|$|E
25|$|In {{an effort}} to address this complication, neurite outgrowths (either axonal or dendritic) in {{response}} to applied compounds have recently been proposed as a more accurate distinction between true neurotoxins and cytotoxins in an in-vitro <b>testing</b> <b>environment.</b> Due to the significant inaccuracies associated with this process, however, it has been slow in gaining widespread support. Additionally, biochemical mechanisms have become more widely used in neurotoxin testing, such that compounds can be screened for sufficiency to induce cell mechanism interference, like the inhibition of acetylcholinesterase capacity of organophosphates (includes DDT and sarin gas). Though methods of determining neurotoxicity still require significant development, the identification of deleterious compounds and toxin exposure symptoms has undergone significant improvement.|$|E
2500|$|Less theoretically, an {{interesting}} application of computer simulation is to simulate computers using computers. In computer architecture, {{a type of}} simulator, typically called an emulator, {{is often used to}} execute a program that has to run on some inconvenient type of computer (for example, a newly designed computer that has not yet been built or an obsolete computer that is no longer available), or in a tightly controlled <b>testing</b> <b>environment</b> (see Computer architecture simulator and Platform virtualization). [...] For example, simulators have been used to debug a microprogram or sometimes commercial application programs, before the program is downloaded to the target machine. Since the operation of the computer is simulated, all of the information about the computer's operation is directly available to the programmer, and the speed and execution of the simulation can be varied at will.|$|E
30|$|The Planing phase also {{includes}} practices {{that address the}} definition of the <b>test</b> <b>environment.</b> In regard to this, Elicit <b>test</b> <b>environment</b> needs and Analyse the <b>test</b> <b>environment</b> requirements are ranked as mandatory and as clearly inter-related.|$|R
30|$|There {{is higher}} {{probability}} for line-of-sight (LOS) links in the RMa <b>test</b> <b>environment</b> {{compared to the}} UMa <b>test</b> <b>environment</b> because of the higher distances expected to be encountered in the RMa <b>test</b> <b>environment,</b> see Table 1 {{in this article as}} well as Table Aone-three of Annex 1 in [1]. In addition to the improvement in the geometry, this effect seems to lead to higher BF gains for the RMa <b>test</b> <b>environment</b> as well as more favorable MU-MIMO ZF operation compared to UMa.|$|R
3000|$|Since the SINR {{distributions}} of the UMa and UMi <b>test</b> <b>environments</b> are similar (see Figure 4) and UMa has higher user mobility (30 km/h) compared to UMi (3 km/h), {{it is reasonable}} to expect that the performance of the UMa <b>test</b> <b>environment</b> is degraded compared to the performance of the UMi <b>test</b> <b>environment.</b> One would expect that the spectral efficiency would further reduce for the RMa <b>test</b> <b>environment</b> because of the higher mobility of 120 km/h as compared to the UMa <b>test</b> <b>environment</b> (30 km/h). However, the simulation results reveal better performance than the UMa for both the cell and cell-edge user spectral efficiencies. This effect {{can be explained by the}} following observations: [...]...|$|R
5000|$|Keynote {{launches}} Web Site Performance {{index for}} 2008 Olympics Keynotes introduces KITE (Keynote Internet <b>Testing</b> <b>Environment)</b> [...] Keynote launches MITE (Mobile Internet <b>Testing</b> <b>Environment)</b> - desktop based mobile testing ...|$|E
50|$|CUTEr (Constrained and Unconstrained <b>Testing</b> <b>Environment,</b> revisited) is an {{open source}} <b>testing</b> <b>environment</b> for {{optimization}} and linear algebra solvers. CUTEr provides a collection of test problems along {{with a set of}} tools to help developers design, compare, and improve new and existing test problem solvers.|$|E
50|$|To ensure {{consistent}} results, {{the performance}} <b>testing</b> <b>environment</b> should be isolated from other environments, such as user acceptance testing (UAT) or development. As a best practice {{it is always}} advisable to have a separate performance <b>testing</b> <b>environment</b> resembling the production environment as much as possible.|$|E
30|$|Implement the <b>test</b> <b>environment</b> and Perform <b>test</b> <b>environment</b> intake <b>test)</b> {{address the}} <b>environment</b> {{implementation}} and ensuring it is operational, respectively. The conclusion regarding this phase {{is that the}} four practices are sufficient to create an adequate environment to run the tests.|$|R
50|$|The {{purpose of}} the <b>test</b> <b>environment</b> is to allow either {{automated}} tests or human testers to exercise new and changed code. After the developer accepts the new code and configurations through unit testing in the development environment, the items are moved {{to one or more}} <b>test</b> <b>environments.</b> Upon <b>test</b> failure, the <b>test</b> <b>environment</b> can remove the faulty code from the test platforms, contact the responsible developer, and provide detailed test and result logs. If all tests pass, the <b>test</b> <b>environment</b> or a continuous integration framework controlling the tests can automatically promote the code to the next deployment environment.|$|R
50|$|The {{supporting}} processes are <b>test</b> <b>environment,</b> <b>test</b> tools, and selection of test professionals.|$|R
50|$|Simulator: Simulates the <b>testing</b> <b>environment</b> {{where the}} {{software}} product {{is to be}} used.|$|E
5000|$|... {{developing}} the future education and <b>testing</b> <b>environment</b> through its Learning to Drive programme ...|$|E
5000|$|Xpediter/TSO offers {{complete}} control of application code execution in the batch <b>testing</b> <b>environment</b> ...|$|E
5000|$|Configure the Test <b>Environment.</b> Prepare the <b>test</b> <b>environment,</b> tools, and {{resources}} necessary to execute each strategy, as features and components become available for test. Ensure that the <b>test</b> <b>environment</b> is instrumented for resource monitoring as necessary.|$|R
40|$|Application <b>test</b> <b>environments</b> {{managed by}} {{temporary}} resources can cause spikes in release costs, {{high rates of}} defects that leak into production systems and consequent losses. Test environment services delivered via a dedicated managed services approach represents a superior alternative that delivers greater monetary benefits and fosters enhanced reputation as well as brand loyalty. Executive Summary This much about testing is incontrovertible: Poor <b>test</b> <b>environment</b> configuration, downtime, and the unavailability of <b>test</b> <b>environments</b> can impact {{the quality of the}} testing process as well as the code itself. This is caused primarily by the lack of ownership and management of <b>test</b> <b>environments.</b> The reasons are manifold. For starters, mos...|$|R
50|$|Having a <b>test</b> <b>environment</b> {{can lead}} to {{failures}} in tested systems when they deploy in the production environment because the production environment may differ from the <b>test</b> <b>environment</b> in a significant way. However, building a replica of a production environment is cost prohibitive. Instead, the <b>test</b> <b>environment,</b> or a separate pre-production environment ("staging") should be built to be a scalable version of the actual production environment to both alleviate costs while maintaining technology stack composition and nuances. Within these <b>test</b> <b>environments,</b> service virtualization is commonly used to obtain on-demand access to dependencies (e.g., APIs, third-party applications, services, mainframes, etc.) that are beyond the team's control, still evolving, or too complex to configure in a virtual test lab.|$|R
5000|$|User {{acceptance}} <b>testing</b> <b>environment,</b> where business stakeholders {{can test}} against their original business requirements, ...|$|E
50|$|For testing non-internet applications, virtual {{instances}} of <b>testing</b> <b>environment</b> {{can be quickly}} set up to do automated testing of the application.The cloud testing service providers provide essential <b>testing</b> <b>environment</b> as per the requirement of the application under test. The actual testing of applications is performed by the testing team of the organization which owns the application or third party testing vendors.|$|E
5000|$|A CAPE-OPEN <b>testing</b> <b>environment</b> {{into which}} {{components}} can be plugged and tested for conformity against the CAPE-OPEN specifications.|$|E
50|$|In {{the testing}} phase, the team {{structure}} of the test team varies as per the stage of a current project. Many times the testers working on the project in a team keep changing and {{the knowledge of the}} environments used for a particular test cycle is lost.Moreover, the <b>test</b> <b>environments</b> are continuously evolving and it becomes eminent for someone to own the <b>test</b> <b>environment</b> configuration and its usage details. This is where establishing a <b>test</b> <b>environment</b> management (TEM) would prove to be a boon.|$|R
40|$|This thesis {{deals with}} finding the most {{suitable}} method for text entry using the Leap Motion sensor. The <b>test</b> <b>environment</b> serves to try out different methods. The <b>test</b> <b>environment</b> contains two methods for text entry using the Leap Motion sensor and one solution using the mouse, which is used for comparison. A sample text is used for verification. After the test is done the <b>test</b> <b>environment</b> evaluates it and saves the results. The tests have confirmed, that both used methods after proper training are suitable for text entry...|$|R
40|$|The {{test bench}} {{methodology}} helps the design engineer to structure the simulation of his circuit. As showedin this paper, the test bench methodology can further bedevelopedinorder to efficiently reuse simulation stimuli and response {{for the real}} device under test. As FPGAs are very often usedtoprototype an ASIC design, an easy switch between simulation and real hardwaretest is necessary to establish a rapid prototyping design and <b>test</b> <b>environment.</b> Our ProTest system closes {{the gap between the}} simulation and the <b>test</b> <b>environment</b> with a low cost and easy to use computer [...] aided [...] <b>test</b> <b>environment.</b> 1...|$|R
5000|$|AppScan Standard Edition - Desktop {{software}} for automated Web application security <b>testing</b> <b>environment</b> for IT Security, auditors, and penetration testers ...|$|E
5000|$|Integration and testing: Brings all {{the pieces}} {{together}} into a special <b>testing</b> <b>environment,</b> then checks for errors, bugs and interoperability.|$|E
5000|$|Systems {{integration}} <b>testing</b> <b>environment,</b> where basic {{testing of}} a system's integration points to other upstream or downstream {{systems can be}} tested, ...|$|E
50|$|In {{the test}} plan the <b>test</b> <b>environment</b> is described.|$|R
5000|$|Creation of new <b>test</b> <b>environments</b> as per requirement. (Supply management) ...|$|R
5000|$|... #Caption: A Galileo <b>test</b> <b>environment</b> Pseudolite in the Berchtesgaden Alps ...|$|R
50|$|Typical {{functionality}} includes <b>testing</b> <b>environment</b> (sandboxing), audit trail/version control, {{ability to}} A/B test different solutions, tag deduplication, and role-based access to data.|$|E
5000|$|... 2008 Advanced Medical Engineering {{developed}} the world's first wireless spirometer with 3D Tilt-Sensing for far greater quality {{control in the}} <b>testing</b> <b>environment.</b>|$|E
50|$|A sandbox is a <b>testing</b> <b>environment</b> that {{isolates}} untested code {{changes and}} outright experimentation from the production environment or repository, {{in the context}} of software development including Web development and revision control.|$|E
5000|$|Specify a {{profiling}} {{tool for the}} development/component unit <b>test</b> <b>environment</b> ...|$|R
30|$|Performing the Conduct test {{progress}} reviews and Conduct product quality reviews practices means {{keeping track of}} both the testing process status and the product quality, respectively. Monitor defects addresses gathering metrics that concern incidents (also referred to as issues), while Analyse issues, Take corrective action and Manage corrective action are clearly inter-related practices. The two other practices considered mandatory within this phase are Co-ordinate the availability and usage of the <b>test</b> <b>environments</b> and Report and manage <b>test</b> <b>environment</b> incidents. Both are important since either unavailability or incidents in the <b>test</b> <b>environment</b> may compromise the activity as a whole.|$|R
5000|$|Allocation of <b>test</b> <b>environments</b> to {{teams as}} per requirement. (Demand management) ...|$|R
