28|240|Public
5000|$|Type A (<b>Top</b> <b>Type)</b> - The <b>Top</b> <b>Type</b> is for {{world-class}} {{universities that}} {{have the potential to}} be ranked in the top 100 in world university rankings. Each Type A university will receive ¥420 million ($US 4.2 million) annually.|$|E
5000|$|M996 Mini-ambulance, two-litter, hard <b>top</b> (<b>type</b> {{classified}} but not produced) ...|$|E
50|$|Several typed {{programming}} languages provide explicit {{support for}} the <b>top</b> <b>type.</b>|$|E
50|$|A popular {{example of}} a badly {{considered}} design is containers of <b>top</b> <b>types,</b> like the Java containers before Java generics were introduced, which requires downcasting of the contained objects {{so that they can}} be used again.|$|R
50|$|In dynamically-typed languages, {{the second}} concept {{does not exist}} (any value can be {{assigned}} to any variable anyway), so only the first (class hierarchy) is discussed. This article tries {{to stay with the}} first concept when discussing <b>top</b> <b>types,</b> but also mention the second concept in languages where it is significant.|$|R
40|$|In the {{preceding}} paper {{we have seen}} that the <b>top</b> <b>types</b> of labor are relatively scarce in China and this raises the issue of income inequality under competition. Our main finding is that inequality would multiply indeed. Subsidiary, the nature of inequality would shift from the rural-urban divide to differences between social classes. The existing negative relationship between development and inequality would be dissolved by competition. ...|$|R
5000|$|... #Caption: Two PC Card devices:Xircom RealPort (<b>top)</b> <b>type</b> III and 3Com (bottom) type II.|$|E
5000|$|The <b>top</b> <b>type</b> {{is used as}} {{a generic}} type, more so in {{languages}} without parametric polymorphism. For example, before introduing generics in Java 5, collection classes in the Java library (excluding Java arrays) held references of type [...] In this way, any non-intrinsic type could be inserted into a collection. The <b>top</b> <b>type</b> is also often used to hold objects of unknown type.|$|E
50|$|In statically-typed languages, {{there are}} two different, often confused, {{concepts}} when discussing the <b>top</b> <b>type.</b>|$|E
50|$|Soft tops with glass, {{plastic or}} {{flexible}} vinyl windows are used. The common off-road soft <b>top</b> <b>types</b> are: full soft top (covers the interior, doors, and includes windows), halftops (cover the space above the front seats, doors with windows, backdrop {{behind the front}} seats and stretch over the rear seats and cargo area), bikini tops (cover the roof area above the interior and cargo compartment, or just the space above the front seats).|$|R
5000|$|... #Caption: Janney {{couplers}} {{were required}} by the 1893 Safety Appliance Act. An older, <b>top</b> operated, <b>type</b> is shown to the right.|$|R
50|$|Giampa {{designed}} the Bodoni 26 font, which was {{named in the}} <b>top</b> 100 <b>Types</b> in a {{survey conducted by the}} Type Directors Club.|$|R
5000|$|... #Caption: Picture {{showing the}} {{similarity}} between 50 Ω (bottom) and 75 Ω (<b>top)</b> <b>Type</b> N connectors ...|$|E
5000|$|In {{languages}} with {{a structural}} type system, the <b>top</b> <b>type</b> is the empty structure. For example, objects in OCaml are structurally typed; the empty object type (the type of objects with no methods), , is the <b>top</b> <b>type</b> of object types. Any OCaml object can be explicitly upcasted to this type, although {{the result would}} be of no use. Go also uses structural typing; and all types implement the empty interface: [...]|$|E
5000|$|In Common Lisp {{the symbol}} , amongst its other uses, {{is also the}} name of a type that has no values. It is the {{complement}} of [...] which is the <b>top</b> <b>type.</b> The type named [...] is sometimes confused with the type named , which has one value, namely the symbol [...] itself.|$|E
5000|$|The first concept often {{implies the}} second, i.e., if a {{universal}} base class exists, then a variable that {{can point to}} an object of this class can also point to an object of any class. However, several languages have types in the second regard above (e.g., [...] in C++, [...] in Objective-C, [...] in Go), static types which variables can accept any object value, but which do not reflect real run time types that an object can have in the type system, so are not <b>top</b> <b>types</b> in the first regard.|$|R
5000|$|... #Caption: French Clarendon <b>type</b> (<b>top)</b> {{compared}} to a conventional Clarendon design.|$|R
5000|$|<b>Top</b> hat section, <b>type</b> O, or type Ω, with hat-shaped cross section.|$|R
5000|$|Objective-C. It is {{possible}} {{to create a new}} base class by not specifying a parent class for a class, although this is highly unusual. [...] is conventionally used as the base class in the original Objective-C run times. In the OpenStep and Cocoa Objective-C libraries, [...] is conventionally the universal base class. The <b>top</b> <b>type</b> for pointers to objects is [...]|$|E
5000|$|The <b>top</b> <b>type</b> {{may also}} be seen as the implied type of non-statically typed languages. Languages with run time typing often provide downcasting (or type refinement) to allow {{discovering}} a more specific type for an object at run time. In C++, downcasting from [...] cannot be done in a safe way, where failed downcasts are detected by the language run time.|$|E
5000|$|Because {{the bottom}} type {{is used to}} {{indicate}} {{the lack of a}} normal return, it typically has no values. It contrasts with the <b>top</b> <b>type,</b> which spans all possible values in a system, and a unit type, which has exactly one value. The bottom type is sometimes confused with the so-called [...] "void type", which is actually a unit type, albeit one with no defined operations.|$|E
5000|$|Stockade fence, a waist-high {{or higher}} solid fence {{composed}} of contiguous or very closely spaced round logs, posts, stakes, or half-round boards {{pointed at the}} <b>top.</b> This <b>type</b> of fence is commonly used for privacy.|$|R
50|$|In the United States, the Federal Trade Commission (FTC) {{found that}} {{fraudulent}} or misleading buyers clubs {{were one of}} the <b>top</b> three <b>types</b> of consumer fraud in 2011, affecting about 0.6% of the US population every year.|$|R
5000|$|... #Caption: <b>Top</b> of four <b>types</b> of MMC cards (clockwise from left): MMC, RS-MMC, MMCplus, MMCmobile, metal {{extender}} ...|$|R
5000|$|Waseda {{consistently}} {{ranks among}} the most academically selective and prestigious universities in Japanese university rankings. It is often ranked alongside Keio University, its rival, as the best private university in Japan. In 2015-2016, Waseda ranked 212th in the QS World University Rankings. Waseda is among the <b>top</b> <b>type</b> of the select Japanese universities assigned additional funding under the Ministry of Education, Culture, Sports, Science and Technology's [...] "Global 30" [...] Project to enhance Japan's global educational competitiveness.|$|E
50|$|In 2014 the {{university}} was selected under the Super Global Universities program that began as an initiative of Prime Minister Shinzō Abe who stated its aim was to help more of Japan's universities rank in the top 100 worldwide. Under the program, it is listed in the top university category or Type A—(Top Type) The <b>Top</b> <b>Type</b> is for world-class universities that {{have the potential to}} be ranked in the top 100 in world university rankings. Each Type A university will receive ¥420 million ($US 4.2 million) annually until 2023.|$|E
5000|$|The {{notion of}} top {{is also found}} in propositional calculus, {{corresponding}} to a formula which is true in every possible interpretation. It has a similar meaning in predicate calculus. In description logic, top is used to refer to the set of all concepts. This is intuitively like the use of the <b>top</b> <b>type</b> in programming languages. For example, in the Web Ontology Language (OWL), which supports various description logics, top corresponds to the class , where all classes are subclasses of [...] (the bottom type or empty set corresponds to [...] ).|$|E
5000|$|... #Caption: Pyramidal {{microwave}} horn antenna, with a bandwidth of 0.8 to 18 GHz. A {{coaxial cable}} feedline {{attaches to the}} connector visible at <b>top.</b> This <b>type</b> is called a ridged horn; the curving fins visible inside {{the mouth of the}} horn increase the antenna's bandwidth.|$|R
50|$|The nine-volt battery, or 9-volt battery, in {{its most}} common form was {{introduced}} for the early transistor radios. It has a rectangular prism shape with rounded edges and a polarized snap connector at the <b>top.</b> This <b>type</b> is commonly used in walkie-talkies, clocks and smoke detectors.|$|R
5000|$|Blade fuses (also called spade or plug-in fuses), with {{a plastic}} body and two prongs that fit into sockets, are mostly used in automobiles. Each fuse is printed with the rated current in amperes on the <b>top.</b> These <b>types</b> of fuses come in six {{different}} physical dimensions: ...|$|R
50|$|The <b>top</b> <b>type</b> in {{the type}} theory of mathematics, logic, and {{computer}} science, commonly abbreviated as top or by the down tack symbol (⊤), is the universal type, sometimes called the universal supertype as all other types in any given type system are subtypes of top. In most cases it is the type which contains every possible object {{in the type}} system of interest. It is {{in contrast with the}} bottom type, or the universal subtype, which every other type is supertype of and in most cases it is the type that contains no members at all.|$|E
5000|$|C and C++ {{also support}} the pointer to void type (specified as [...] ), {{but this is}} an {{unrelated}} notion. Variables of this type are pointers to data of an unspecified type, so in this context (but not the others) [...] acts roughly like a universal or <b>top</b> <b>type.</b> A program can probably convert a pointer to any type of data (except a function pointer) to a pointer to void and back to the original type without losing information, which makes these pointers useful for polymorphic functions. The C language standard does not guarantee that the different pointer types have the same size.|$|E
5000|$|The {{original}} UCC can had {{a capacity}} of 250 ml. In the 1970s, 190 ml cans appeared, and both of these can sizes still exist. Size does not denote type of flavor in either the 250 or 190 ml can, but iced coffee cans tend to be short and fat and contain 280 ml. American-sized (350 ml) cans are almost non-existent, although Dydo produces one of that size called [...] "American Coffee". Barrel-shaped cans are also fairly popular, while {{an aspect of the}} Roots' marketing campaign is the company's unique [...] "waist-shaped" [...] can. A new kind of cone <b>top</b> <b>type</b> can with a twist-off cap has appeared in recent years, and many companies offer at least one of their coffee types in this kind of container.|$|E
2500|$|Any {{convertible}} bond structure, on <b>top</b> of its <b>type,</b> would bear a certain range of additional features {{as defined in}} its issuance prospectus: ...|$|R
50|$|U.S. Military vehicle plates had the <b>top</b> letters by <b>type</b> {{of force}} and station type, then two numbers, one letter and four numbers.|$|R
40|$|FIGURES 202 – 207. Habitus and Habitat. 202 Habitat of Bradyporus (C.) avanos, Kayseri-Pınarbaşı, 203 Male of Bradyporus (C.) gocmeni, 204 Female of Bradyporus (C.) gocmeni, 205 Habitat of Bradyporus (C.) gocmeni, <b>Top</b> Dağı (<b>type</b> locality), 206 Male of Bradyporus (C.) conophallus, 207 Habitat of Bradyporus (C.) conophallus, N. of Eğirdir Gölü (type locality) ...|$|R
