5|12|Public
5000|$|... 1973 EXAPT 1.1 is {{provided}} for the programming of straight-cut and continuous-path controlled drilling and milling machines and machining centres. At the Hanover Fair (IHA 73) the interactive access to a mainframe via <b>time-sharing</b> <b>terminal</b> fort he part program entry and correction is presented and starts {{the replacement of the}} punch card.|$|E
50|$|In {{its basic}} form, the Joymaker is a remote <b>time-sharing</b> <b>terminal</b> which uses radio {{communications}} instead of wire lines, and interacts with its user via voice {{rather than a}} keyboard and text output. It is small and light enough to be worn or carried, resembling in some cases a small sceptre. It can also dispense various medications, stimulants etc. from reservoirs within it.|$|E
5000|$|The largest {{unit of work}} is the [...] "Run." [...] This {{is taken}} from the factory [...] "production run" [...] {{terminology}} and generally equates to job or session on other systems. A Run is defined by its [...] "run stream." [...] A run stream is a sequence of control statements that represent the steps to be taken. They may include file handling, program execution, and branches of control. A batch Run is typically stored as a file and is scheduled by a [...] "Start" [...] command from within another Run or by the operator. A time sharing Run is initiated by logging in from a <b>time-sharing</b> <b>terminal</b> and inputting the @RUN command. Often the @RUN statement and the second control statement (often @ADD or a program execution) are generated automatically based on the user profile. Security authorizations are validated based on the authenticated user-id and other information supplied on the Run control statement.|$|E
50|$|Computers used {{teleprinters}} {{for input}} and output {{from the early days}} of computing. Punched card readers and fast printers replaced teleprinters for most purposes, but teleprinters continued to be used as interactive <b>time-sharing</b> <b>terminals</b> until video displays became widely available in the late 1970s.|$|R
5000|$|... #Caption: <b>Time-sharing</b> {{computer}} <b>terminals</b> {{connected to}} central computers, {{such as the}} TeleVideo ASCII character mode smart terminal pictured here, were sometimes used {{before the advent of}} the PC.|$|R
40|$|After the {{simplified}} {{version of}} the 41 -Node Stolwijk Metabolic Man Model was implemented on the Sigma 3 and UNIVAC 1110 computers in batch mode, it became desirable to make certain revisions. First, the availability of <b>time-sharing</b> <b>terminals</b> {{makes it possible to}} provide the capability and flexibility of conversational interaction between user and model. Secondly, recent physiological studies show the need to revise certain parameter values contained in the model. Thirdly, it was desired to make quantitative and accurate predictions of evaporative water loss for humans in an orbiting space station. The result of the first phase of this effort are reported...|$|R
40|$|The NASA Work Unit System is a {{management}} information system for research tasks (i. e., work units) performed under NASA grants and contracts. It supplies profiles to indicate how much effort is being expended to what types of research, where the effort is being expended, and how funds are being distributed. The user obtains information by entering requests on the keyboard of a <b>time-sharing</b> <b>terminal.</b> Responses are received as video displays or typed messages at the terminal, or as lists printed in the computer room for subsequent delivery by messenger...|$|E
40|$|Reports were scanned {{in black}} and white at a {{resolution}} of 600 dots per inch and were converted to text using Adobe Paper Capture Plug-in. A set of seven statistical analysis programs has been made available for use on an interactive mini-computer. These programs are designed for easy use and should allow novice computer users a convenient way to analyze their data. This report presents the information on how {{to gain access to the}} computer through a <b>time-sharing</b> <b>terminal</b> and how to use the programs. The programs perform the following types of analyses: simple sample descriptions and histogram plots, t-tests on unpaired samples, one-way analysis of variance, least squares regressions with linear and various equations for curves with plots of the fit equations, polynomial regressions, multiple regressions, and contingency tables...|$|E
40|$|In testing {{complex systems}} and {{components}} under dynamic thermal-vacuum environments, {{it is desirable}} to optimize the environment control sequence {{in order to reduce}} test duration and cost. This paper describes an approach where a computer is utilized as part of the test control operation. Real time test data is made available to the computer through <b>time-sharing</b> <b>terminals</b> at appropriate time intervals. A mathematical model of the test article and environmental control equipment is then operated on using the real time data to yield current thermal status, temperature analysis, trend prediction and recommended thermal control setting changes to arrive at the required thermal condition. The data acquisition interface and the time-sharing hook-up to an IBM- 370 computer is described along with a typical control program and data demonstrating its use...|$|R
50|$|As {{hardware}} became smaller, {{he developed}} the PILOT language (Programmed Inquiry, Learning Or Teaching) that {{made it easy for}} non-programmers to write sequences of machine-administered teaching or testing using the <b>time-share</b> <b>terminals</b> in use in 1970, and then microcomputers when they became available a decade later.The National Library of Medicine adopted PILOT as its primary computer language for the dissemination and exchange of computer-based instructional materials in the health sciences, and used it for instructing medical librarians in using MEDLINE. Starkweather chaired a working group for the Institute of Electrical and Electronic Engineers from 1987 through 1991 that established standards for PILOT. The language was in active use for many years. However, the introduction of microcomputers also attracted capital to a budding software industry, and this ended the early period when most non-business software was created in universities; Starkweather thereafter turned his energy to administration.|$|R
40|$|Abstract: The Programmer's Workbench (PWB) is a {{specialized}} computing facility dedicated to satisfying {{the needs of}} developers of computer programs. The PWB might well be called a &quot;human-end &quot; computer; like &quot;front-end &quot; and &quot;back-end &quot; com-puters, it improves productivity by efficient specialization. It pro-vides a convenient working environment and a uniform set of programming tools to {{a diverse group of}} programming projects. These projects produce software for various &quot;target &quot; computers, including IBM System/ 370 and UNIVAC 1100 systems of much greater size than the PWB machines. The projects range in size from several people up to several hundred. The first PWB machine was installed in October, 1973; usage, acceptance, and interest have grown rapidly since that time. The PWB currently supports about 110 <b>time-sharing</b> <b>terminals,</b> utilizing a network of four DEC PDP- 11 computers, all running the UNIX Time-Sharing System. The PWB adds tools to UNIX to support large projects. This paper gives an overview of the PWB and its development; further details appear in the five following companion paper...|$|R
50|$|Steve Wozniak {{first used}} the BASIC {{computer}} {{language in the}} late 1960s on a <b>time-sharing</b> computer <b>terminal</b> in his California high school. He read BASIC Computer Games {{as a member of}} the Homebrew Computer Club during the 1970s, and decided that any computer he designed would be able to both play the games in the book and run the logic simulations he worked with at Hewlett-Packard (HP). Wozniak knew that Bill Gates had written Altair BASIC for the Intel 8080 microprocessor, and hoped that he would be the first to write one for the MOS Technology 6502.|$|R
40|$|Energy {{efficient}} {{operation of}} process equipment requires attentive operation by well-trained personnel. Use {{of a computer}} simulation model together with a conversational computer program, which provides dynamic game playing opportunities for the trainee, has proven a very effective training tool. The programs {{have been used in}} plants and refineries, and they demonstrate the ability to develop rapidly within the Operator Trainee a real understanding of the variables affecting process performance. Experience with a furnace firing computer training program is described. Using a <b>time-share</b> computer <b>terminal,</b> the Operator participates in a conversational training experience in which he is taught startup, routine operation, and to cope with operating problems on a gas and/or oil fired process furnace. Specific operator-oriented problems are encountered and solved by making control adjustments in the simulator program which has been developed. In using the program, the trainee is challenged to achieve or exceed firing efficiency goals set for the furnace. A variety of operating conditions are presented. As an extension of the success experienced with the furnace program, a new program has been developed simulating a crude oil distillation unit. The Distillation Column Operator training program is designed to facilitate an understanding of distillation principles and the effect on energy efficiency for the various product quality and yields achieved. The results of Operator acceptance of these programs is that a wider application of the principle's computer simulator training to other industry processes is warranted...|$|R
2500|$|The {{idea for}} SAGE {{grew out of}} Project Whirlwind, a World War II {{computer}} development effort, when the War Department realized that the Whirlwind computer might anchor a continent-wide advance warning system. Developed during the 1950s by Massachusetts Institute of Technology (MIT) Lincoln Laboratories engineers and scientists for the U.S. Air Force, SAGE monitored North American skies for possible attack by manned aircraft and missiles for twenty-five years. Aside from its strategic importance, SAGE set the foundation for mass data-processing systems and foreshadowed many computer developments of the 1960s. The heart of the system, the IBM AN/FSQ-7 computer, was the first computer to have an internal memory composed of [...] "magnetic cores," [...] thousands of tiny ferrite rings that served as reversible electromagnets. SAGE also introduced computer-driven graphic displays, online keyboard <b>terminals,</b> <b>time-sharing,</b> high-availability computation with a redundant AN/FSQ-7 to fail over if the primary system went down, digital signal processing, digital transmission over leased telephone lines, digital track-while-scan, digital simulation, computer networking, and duplex computing.|$|R
40|$|Display terminals, {{although}} {{faster than}} typewriter devices, do not implicitly create {{records of the}} user’s interactive sessions. Based {{on the premise that}} a display terminal session facility that also has the record-keeping functions of typewriter terminals would increase productivity, a research project was undertaken that has resulted in the session manager discussed. Experience with the system is summarized. A <b>time-sharing</b> display <b>terminal</b> session manager by J. M. McCrossin, R. P. O’Hara, and L. R. Koster Display terminals are tending to supplant typewriter terminals as the interactive computing terminal of choice. To many interactive users, display terminals offer special features that increase productivity, especially for programmers. Part of the increased productivity comes from the display terminal itself (e. g., the capability of on-screen editing). To take full advantage of display <b>terminals,</b> however, the <b>time-sharing</b> system must provide support of a very different sort than that needed for typewriter <b>terminals.</b> Most <b>time-sharing</b> systems are line oriented because they have been designed to be accessed from typewriter terminals. In a lineoriented system, the user accomplishes work by typing command statements one line at a time on a keyboard. The system responds with one or more lines of messages or other output. Thus a terminal session is a conversation between the user and the system, and is recorded on the typewriter terminal sheet, which serves as a hard copy record. If a user wants to review a command or output from earlier in a session, he merely looks back on the terminal sheet. Although display terminals offer many advantages over type-writers, such as high-speed data display and quietness of opera-Copyright 1978 by International Business Machines Corporation. Copying is per-mitted without payment of royalty provided that (1) each reproduction is done without alteration and (2) the Journal reference and IBM copyright notice are included on the first page. The title and abstract may be used without further permission in computer-based and other information-service systems. Permission to republish other excerpts should be obtained from the Editor...|$|R
40|$|Many of today's {{telecommunications}} systems rely on strict timing and synchronization requirements. This {{is the case}} of cellular telephony (3 G, 4 G/LTE), where base stations need accurate and stable frequency clocks in order to obtain their carrier radio frequencies, arbitrate the frequency- and <b>time-shared</b> access of <b>terminals,</b> and coordinate the handover of terminals between adjacent cells. The imminent deployment of 5 G networks, with a much higher density of cells and speed, will further increase the need for synchronization. On the one hand, Synchronous Ethernet (SyncE) is a well-known, cheap, scalable Ethernet data plane, with the addition of special messages that convey frequency synchronization information. On the other hand, Precision Time Protocol (PTP) is a widely used protocol to transport time information, and used to synchronize nodes in networks. On top of that, SDN is a new networking paradigm that provides an abstraction of the forwarding function, decoupling the data plane from the control plane. The control of the network is moved to the controller, an external centralized entity that manages the network configuration based on policies through a southbound interface, for example OpenFlow. SDN architecture opens the way to the virtualization of network functions, the global optimization of network operations, and reduces operational costs. Two solutions proposed moving SyncE and PTP to SDN networks: SyncE has been introduced in SDN with the SDN-enabled SyncE networks and PTP with the ReversePTP. SDN-enabled SyncE proposed extensions to OpenFlow 1. 0 which enables the SDN network to control the circulation of ESMC PDU, the possibility of transmitting SyncE statistics and to build synchronization trees based on SyncE. ReversePTP proposed extensions to OpenFlow which enabled the SDN network to request the time to each node, so the SDN controllers know clock offsets between slave clocks (network elements) and itself (master clock). These extensions allow to coordinate the handover of terminals between adjacent cells in mobile networks and a kind of PTP. However, there is no solution in the literature which proposes an SDN+PTP+SyncE (i. e. a full synchronous) solution. This master thesis proposes multiple standard extensions of the OpenFlow protocol in order to deploy Fully-Synchronous SDN (FSS) networks. For that, SyncE and PTP are studied and implemented in the SDN architecture. The proposed extensions and modifications have been deployed and successfully tested in a real environment. Results showed a good performance on PTP time-stamping...|$|R

