83|919|Public
25|$|If {{water is}} not allowed to flow in or out of the soil, the stress path is called an {{undrained}} stress path. During undrained shear, if the particles are surrounded by a nearly incompressible fluid such as water, then the density of the particles cannot change without drainage, but the water pressure and effective stress will change. On the other hand, if the fluids are allowed to freely drain out of the pores, then the pore pressures will remain constant and the <b>test</b> <b>path</b> is called a drained stress path. The soil is free to dilate or contract during shear if the soil is drained. In reality, soil is partially drained, somewhere between the perfectly undrained and drained idealized conditions.|$|E
500|$|A {{method of}} {{establishing}} precise geodetic baselines, invented by Yrjö Väisälä, exploited the low coherence length of white light. Initially, white light was split in two, with the reference beam [...] "folded", bouncing back-and-forth six times between a mirror pair spaced precisely 1 m apart. Only if the <b>test</b> <b>path</b> was precisely 6 times the reference path would fringes be seen. Repeated applications {{of this procedure}} allowed precise measurement of distances up to 864 meters. Baselines thus established were used to calibrate geodetic distance measurement equipment, leading to a metrologically traceable scale for geodetic networks measured by these instruments. (This method has been superseded by GPS.) ...|$|E
5000|$|A {{paper by}} Bozinovic et al. {{published}} in Science in 2013 claims the successful demonstration of an OAM-multiplexed fiber-optic transmission system over a 1.1 km <b>test</b> <b>path.</b> The test system {{was capable of}} using up to 4 different OAM channels simultaneously, using a fiber with a [...] "vortex" [...] refractive-index profile. They also demonstrated combined OAM and WDM using the same apparatus, but using only two OAM modes.|$|E
40|$|Software {{testing is}} an {{important}} but complex part of software development life cycle. The optimization of the software testing process is a major challenge, and the generation of the independent <b>test</b> <b>paths</b> remains unsatisfactory. In this paper, we present an approach based on metaheuristic firefly algorithm to generate optimal <b>test</b> <b>paths.</b> In order to optimize the <b>test</b> case <b>paths,</b> we use a modified firefly algorithm by defining appropriate objective function and introducing guidance matrix in traversing the graph. Our simulations and comparison show that the <b>test</b> <b>paths</b> generated are critical and optimal paths...|$|R
40|$|We {{propose a}} RT-Level {{hierarchical}} test generation methodology {{based on the}} concept of transparent hierarchical <b>test</b> <b>paths,</b> which results in significant test generation speedup over traditional gate-level ATPG, while preserving equivalent fault coverage and vector count. Additionally, we demonstrate how hierarchical <b>test</b> <b>paths</b> may assist in design diagnosis and debug through an algorithm that disambiguates among several possibly faulty modules in a design. Furthermore, we devise an online test methodology using invariance inherent in hierarchical <b>test</b> <b>paths</b> and in the algorithm implemented by controller/datapath pairs. This scheme results in fault security in excess of 90 % while keeping the hardware overhead below 40 %. Utilization of hierarchical <b>test</b> <b>paths</b> not only for off-line test but also for design diagnosis and on-line test helps in reducing the overhead associated with each of these tasks, by amortizing the cost of the required hardware...|$|R
40|$|<b>Path</b> <b>testing</b> {{requires}} generating all paths {{through the}} program to be tested, and finding a set of program inputs that will execute every path. The number of possible paths in programs containing loops is infinite, {{and so it is}} very difficult, if not impossible, to test all of them. <b>Path</b> <b>testing</b> can be relaxed by selecting a subset of all executable paths that fulfill a certain path selection criterion and finding test data to cover it. The automatic generation of such <b>test</b> <b>paths</b> leads to more <b>test</b> coverage <b>paths</b> thus resulting in efficient and effective testing strategy. This paper presents a genetical swarm optimization (GSO) based technique, which effectively combines a genetic algorithm (GA) based technique and a particle swarm optimization (PSO) based technique, for automatic generation of a set of <b>test</b> <b>paths</b> that cover the all-uses criterion. Experiments have been carried out {{to evaluate the effectiveness of}} the proposed GSO approach in <b>test</b> <b>paths</b> generation compared to the GA and PSO approaches...|$|R
5000|$|A {{method of}} {{establishing}} precise geodetic baselines, invented by Yrjö Väisälä, exploited the low coherence length of white light. Initially, white light was split in two, with the reference beam [...] "folded", bouncing back-and-forth six times between a mirror pair spaced precisely 1 m apart. Only if the <b>test</b> <b>path</b> was precisely 6 times the reference path would fringes be seen. Repeated applications {{of this procedure}} allowed precise measurement of distances up to 864 meters. Baselines thus established were used to calibrate geodetic distance measurement equipment, leading to a metrologically traceable scale for geodetic networks measured by these instruments. (This method has been superseded by GPS.) ...|$|E
50|$|If {{water is}} not allowed to flow in or out of the soil, the stress path is called an {{undrained}} stress path. During undrained shear, if the particles are surrounded by a nearly incompressible fluid such as water, then the density of the particles cannot change without drainage, but the water pressure and effective stress will change. On the other hand, if the fluids are allowed to freely drain out of the pores, then the pore pressures will remain constant and the <b>test</b> <b>path</b> is called a drained stress path. The soil is free to dilate or contract during shear if the soil is drained. In reality, soil is partially drained, somewhere between the perfectly undrained and drained idealized conditions.|$|E
40|$|Abstract – It is {{well known}} that the output signals {{measured}} by an automatic test equipment (ATE) system are not only due to the device-under-test (DUT), but also due to the <b>test</b> <b>path.</b> For example, if the intersymbol interference (ISI) due to the <b>test</b> <b>path</b> is not negligible, then the performance of the DUT can be grossly underestimated. In this paper, we propose a generic model for both the <b>test</b> <b>path</b> and the DUT. By using a cascading model, we will illustrate the measured signals due to the <b>test</b> <b>path</b> and DUT combined, in contrast to the measured signals due to the DUT alone. We will investigate both the effect of the limited bandwidth and the effect of ringing. We will illustrate the eye-diagrams of the DUT, and conceptually identify and separate the impact of the <b>test</b> <b>path</b> on the eye-diagrams. Keywords –ATE, Jitter, ISI, Eye-diagram. I...|$|E
40|$|We {{define a}} model of {{learning}} probabilistic acyclic circuits using value injection queries, in which an arbitrary subset of wires is set to fixed values, and the value on the single output wire is observed. We adapt the approach of using <b>test</b> <b>paths</b> from the Circuit Builder algorithm [AACW 06] {{to show that there}} is a polynomial time algorithm that uses value injection queries to learn Boolean probabilistic circuits of constant fan-in and log depth. In the process, we discover that <b>test</b> <b>paths</b> fail utterly for circuits over alphabets of size greater than two and establish upper and lower bounds on the attenuation factor for general and transitively reduced Boolean probabilistic circuits of <b>test</b> <b>paths</b> versus general experiments. To overcome the limitations of <b>test</b> <b>paths</b> for non-Boolean alphabets, we introduce function injection queries, which allow the symbols on a wire to be mapped to other symbols rather than just to themselves or constants...|$|R
40|$|Abstract — Adaptive path-delay {{testing is}} a testing {{methodology}} that reduces redundant test patterns {{based on the}} measured process condition of a die under test (DUT). To improve testing efficiency, process conditions are clustered into a limited number of clusters, each of which has a corresponding set of test patterns. The test pattern set of a cluster must include all potential timing-critical paths of all process conditions in the cluster. Hence, high-quality clustering is needed to minimize redundant <b>test</b> <b>paths.</b> In this paper, we propose a new clustering heuristic to minimize the expected number of redundant <b>test</b> <b>paths</b> in adaptive path-delay testing. Our experimental results on randomly generated testcases show that the proposed clustering heuristic can reduce the expected number of <b>test</b> <b>paths</b> by up to 40 % compared to the previous Greedy clustering algorithm of Uezono et al. [5]. To address unique attributes of an industrial testcase obtained from the authors of [5], we integrate the dynamic-programming restricted-partitioning technique of [1], which improves the expected number of <b>test</b> <b>paths</b> by up to 5 % compared to the Greedy algorithm...|$|R
40|$|Abstract—One {{of the key}} {{problems}} in <b>path</b> <b>testing</b> is building a path through specified set of stalemates particularly which contain loops. Traditional genetic algorithm has been successfully used in software testing activities such as finding test data, selecting test cases and test cases prioritization. In this paper, we introduce a new variable length genetic algorithm. Based on the new algorithm, we present a new strategy for automatically generating a set of basis <b>test</b> <b>paths</b> {{which can be used}} as <b>testing</b> <b>paths</b> in any basis <b>path</b> <b>testing</b> technique. We define all elements of genetic algorithm such as chromosome representation, crossover, mutation, and fitness function to be compatible with path generation. In addition, we present a case study to show the efficiency of our strategy...|$|R
40|$|It is {{well known}} that the output signals {{measured}} by a test/measurement system are not only due to the device-under-test (DUT), but also due to the <b>test</b> <b>path</b> or test interfaces. For example, if the intersymbol interference (ISI) due to the <b>test</b> <b>path</b> is not negligible, then the performance of the DUT can be grossly underestimated or overestimated, depending on whether it is an output test or input test. In this paper, we propose a generic model with extension to high orders for both the <b>test</b> <b>path</b> and the DUT. By using a cascading model, we will illustrate the measured signals due to the <b>test</b> <b>path</b> and DUT combined, in contrast to the measured signals due to the DUT alone. We will investigate both the effect of the limited bandwidth and the effect of ringing. We will illustrate the eye-diagrams of the DUT, and conceptually identify, separate, and de-embed the impact of the <b>test</b> <b>path</b> on the eye-diagrams, resulting in accurate measurement results and yield for the DUT...|$|E
40|$|This Master 9 ̆ 2 s thesis {{documents}} a {{new test}} {{method for detection}} of small delay faults in FPGA routing network. The main purpose of the test is accurate detection of faults {{in all parts of}} the network. The second aim is minimizing test application time. The work of the thesis consisted of four parts. First, a literature study was performed to get background knowledge of FPGA architecture and basics of testing. Second, detection accuracy was defined and measured in SPICE for test paths with different number of fan-out. Third, test configurations were developed. And finally, detection accuracies for the proposed test method were calculated. The SPICE measurements were performed on an interconnect model of FPGA. They revealed that detection accuracy of defects tested by branches of a <b>test</b> <b>path</b> is less than detection accuracy of defects tested by stems of a <b>test</b> <b>path.</b> In addition, it was observed that detection accuracy is best in the beginning of a <b>test</b> <b>path.</b> In the proposed test method detection accuracy is improved by testing all segments outside switch matrices by <b>test</b> <b>path</b> stems, and applying test patterns to all bidirectional segments in both directions. A comparison to two previous test methods showed that the proposed test method is more accurate while keeping the same number of test configurations. The detection accuracy can be improved further by allowing more test configurations...|$|E
40|$|A novel testing {{strategy}} is proposed {{that is designed}} to detect small delay defects by creating internal signal races. The races are created by launching transitions along two paths simultaneously, a reference path and a <b>test</b> <b>path.</b> The arrival times of the transitions on a common or ‘convergence’ gate determine the result of the race. The presence of a small delay defect on the <b>test</b> <b>path</b> creates a static hazard on the output of the convergence gate that is directed to the input of a scan-latch. A glitch detector is added to the scan latch to record {{the presence or absence of}} the glitch. Advancement of technology to nanometer feature sizes and new materials is changing the pareto of defect types, making defects such as resistive open vias, mouse bites an...|$|E
5000|$|There {{should be}} no ICMP echo request/reply {{filtering}} on the network; this includes Quality of Service (QoS) mechanisms (which often affects ICMP) {{at any point in}} the <b>testing</b> <b>path.</b>|$|R
40|$|Software testing {{plays an}} {{important}} role for evaluation {{of the quality of the}} software. Quality of the software depends upon the kind of testing strategies applied by the software tester who generates valid and invalid test cases for evaluating the quality of software. For optimizing the <b>testing</b> procedure, <b>testing</b> <b>paths</b> are very valuable to judge the quality of the software. From the literature, it is revealed that it is big challenge to optimize the <b>testing</b> <b>paths.</b> In the present work, the concept of genetic algorithm is used for prioritization of test cases generated from Unified Modeling Language. <b>Testing</b> <b>paths</b> are generated from activity diagram is designed for generation of test cases from design specification which will further reduce the cost of software testing. Branch coverage technique and predicate coverage methods are used for prioritization of test cases by identifying the independent paths. Information flow metric and decision node based genetic function are used through a case study...|$|R
40|$|The paper proposes System Dependence Graph (SDG) based {{algorithm}} {{to select}} different <b>test</b> <b>paths</b> for <b>testing</b> polymorphic call-sites. SDG, includes control and data dependencies, helps both the testers and developers of object-oriented programs {{to better understand}} the polymorphic interactions within the software. In addition, the algorithm considers only the method bindings of a polymorphic call-site having different definition sets. As a result, the number of <b>test</b> <b>paths</b> for <b>testing</b> polymorphism gets reduced. Also, the algorithm has been implemented in a prototype Graphical User Interface (GUI) based tool. The results are obtained by using the tool, which demonstrate the proposed technique...|$|R
40|$|AbstractSoftware {{test suite}} {{optimization}} {{is one of}} the most important problems in software engineering research. This paper deals with Automatic Generation of Feasible Independent Paths and Software Test Suite Optimization using Artificial Bee Colony (ABC) based novel search technique. In this approach, ABC combines both global search methods done by scout bees and local search method done by employed bees and onlooker bees. The parallel behavior of these three bees makes generation of feasible independent paths and software test suite optimization faster. Test Cases are generated using <b>Test</b> <b>Path</b> Sequence Comparison Method as the fitness value objective function. This paper also presents an approach for the automated generation of feasible independent <b>test</b> <b>path</b> based on the priority of all edge coverage criteria. Finally, this paper compares the efficiency of ABC based approach with various approaches...|$|E
40|$|We {{propose a}} {{methodology}} that examines design modules and identifies appropriate vector justification and response propagation requirements for hierarchical test. Based on a cell-level analysis and transparency composition methodology, test requirements for a module {{are defined as}} a set of fine-grained input and output bit clusters and pertinent justification and propagation values. The identified test requirements are independent of the actual test set and are adjusted to the cell-level connectivity and inherent regularity of the module. As a result, they combine the generality required for fast hierarchical <b>test</b> <b>path</b> construction with the accuracy necessary for minimizing the incurred DFT hardware overhead, thus fostering costeffective hierarchical test. Experimental results on several modules verify the ability of the proposed methodology to moderate the cost of hierarchical <b>test</b> <b>path</b> construction through accurate, compact, and highly parametrizable test requirement definition. 1...|$|E
30|$|This paper {{reported}} on the various preliminary tests, including the followings that were conducted on the MPs: Antenna Impedance, The Antenna Gain, Power Consumption, Antenna Range <b>Test,</b> <b>Path</b> Loss, and Stability Test. Antenna Impedance tests proved the feasibility of a low-cost PCB antenna, helping to keep {{the cost of the}} device low, although there is some room for improvement.|$|E
40|$|Abstract- Software {{complexity}} and the malwares are increasing exponentially since {{the number of}} web users is increasing exponentially. Therefore exhaustive and extensive testing of websites has become a necessity today. But testing a website is not 100 % exhaustive due to page explosion problem. The basis <b>test</b> <b>paths</b> obtained from the Page-Test-Trees (PTTs) are reused for white box testing of websites. This saves {{significant amount of time}} required to generate <b>test</b> <b>paths</b> and hence <b>test</b> cases as compared to the existing approaches of white box testing. The cost and efforts are also minimized. The proposed technique ensures better website testing coverage as white box testing provides better results than black box testing...|$|R
40|$|Software {{quality is}} {{primarily}} {{determined by the}} quality of the software development process. The goals of software testing are to assess and improve the quality of software. Software testing has proven to be difficult in the absence of design information. Without an adequate understanding of a program’s structure, it is difficult to test it properly. Program recognition is a technology that can help testers to recover a program’s design and, consequently, make software testing effective. Syntactically, a program is a sequence of statements. If the flow of the program can be recovered and used to analyze the <b>testing</b> <b>paths</b> automatically, then generating test data based on adequate testing criteria will help testers to understand the program structure and efficiently improve the software quality. This paper provides a method for analyzing the control-flow of a program and obtaining to the original program structure. An approach to analyzing the <b>testing</b> <b>paths</b> automatically to <b>test</b> every branch of a program is provided. The proposed method defines a number of command types and test data generating rules. An algorithm to scan program and analysis <b>testing</b> <b>paths</b> is also provided. This will allow testers to recover...|$|R
40|$|UML State Chart Diagrams are {{the basic}} models used to derive <b>test</b> <b>paths</b> from intermediategraphs {{generated}} automatically using graph coverage techniques {{in addition to the}} tool support provided byMBT Tool TestOptimal’s Basic as well as ProMBT version. The <b>test</b> <b>Paths</b> Generated covers Node Coverage,Edge Coverage, Edge Pair Coverage as well as most importantly Prime Path coverage which is till today notexplored much. The algorithm employed is Prefix based combined with Chinese postman Problem Algorithmtogether. From State charts, first of all Model Coverage Graphs are constructed with help of TestOptimal andthen Test Paths are generated one by one. Testing is often incomplete, i. e. cannot cover all possible systembehaviours. There are several heuristic means to measure the quality of test suites, e. g. fault detection,mutation analysis, or coverage criteria. These means of quality measurement {{can also be used to}} decide whento stop testing. This paper is centred upon coverage criteria. There are many different kinds of coveragecriteria, e. g. focused on data flow, control flow, transition sequences, or boundary values. In this paper, wewill present new approaches, e. g. to combine coverage criteria and generation of <b>test</b> <b>paths</b> manually as wellas automatically using tools based on Chinese postman and prefix based algorithms...|$|R
40|$|This {{study will}} analyze the {{influence}} of commitment to the job satisfaction and motivation auditor as an intervening variable. The goal is to test the motivation variable as an intervening variable. Unruk test {{used to analyze the}} effect ofcommitment on job satisfaction, namely regression test, <b>test</b> <b>path</b> analysis (path analysis) and also statistical test T. Data were obtained from responses to questionnaires distributed to the auditors who work in public accounting firm in Central Java. The results of the analysis states that the commitment has a positive and significant effect on job satisfaction auditors. Of the <b>test</b> <b>path</b> analysis can be seen that the relationship between organizational commitment and professional commitment is a direct relationship without motivation as an intervening variable. So if the auditor wants improved job satisfaction, then an auditor must have a strong commitment both to the organization and the profession...|$|E
40|$|Abstract — In this paper, we {{proposed}} a unified capture scheme for both small delay defect detection (SDD) and online aging prediction. A unified capture scheme can be easily incorporated into the original clock distribution system in the chip. We are introducing a new method to detect the small delay defects without using faster than at speed clock. It will significantly reduce the test power issues. A novel testing strategy can be proposed {{that is designed to}} detect small delay defects by creating internal signal races. The races are created by launching transitions along the two paths simultaneously, a reference path and a <b>test</b> <b>path.</b> The arrival time of the transitions on a common or convergence gate will determine the result of the race. The presence of a small delay defect on the <b>test</b> <b>path</b> creates a static hazard on the convergence gate that is directed to the input of a scan –latch. A glitch detector is added to the scan latch to record {{the presence or absence of}} the glitch...|$|E
40|$|Software {{testing is}} the last phase of the {{development}} cycle. The important role in software development is software Testing. In today’s software industry, the design of software tests is mostly based on the tester’s expertise, while test automation tools are limited to execution of preplanned tests only. Testing effort can be classified into three parts, they are test case generation, test execution and test evaluation. This paper presents a novel approach to generate the automated test paths. Due to the delay {{in the development of}} software, testing has to be done in a short time. This led to automation of testing because its efficiency and also requires less man power. In this proposed approach, by using one of the most standard Unified Modeling Language (UML) Activity Diagram, construct the Activity Dependency table(ADT), then generate the Test paths. Then the <b>test</b> <b>path</b> are prioritized by using the Tabu search algorithm. The prioritized <b>test</b> <b>path</b> can be used in system testing, regressing testing and integration testing. Then also form the Cyclomatic diagram to check the efficiency of the test scenario...|$|E
40|$|A {{test program}} {{is a series of}} tests that are {{equipped}} with test conditions in which the test data are obtained by referring to product specification. It is used to validate the functionality of a microprocessor {{to make sure that it}} works as expected and meets increases, it requires more tests to detect all the possible defects, which contributes to more complicated test programs. Large amount of tests with each test having multiple out-going ports in the test program leads to huge number of possible <b>test</b> <b>paths.</b> It is difficult for the test engineers to analyze the test flows of the test program due to large amount of <b>tests</b> <b>paths.</b> Consequently, a visualization model is proposed to assist the test engineers to better understand the test program flow structure...|$|R
40|$|Basis <b>path</b> <b>testing</b> {{is a very}} {{powerful}} structural testing criterion. The number of <b>test</b> <b>paths</b> equals to the cyclomatic complexity of program defined by McCabe. Traditional test generation methods select the paths either without consideration of the constraints of variables or interactively. In this note, an efficient method is presented to generate a set of feasible basis paths. The experiments show that this method can generate feasible basis paths for real-world C programs automatically in acceptable time...|$|R
40|$|The {{generation}} of test cases {{is the most}} challenging part of software testing phase for the software tester. Test cases are such that as it unable the detection of errors. To determine how much software testing is enough is a difficult job. Testing is advisable to identify the risk against the cost of additional testing effort. To assign priorities to test cases will guarantee that the main tests have been done. The main objective of software testing is to identify defects and correcting those defects improves Software Quality. This paper represents a noble approach to automatic {{generation of}} test cases. In this approach, UML sequence diagram is the source to generate the test cases by convert it to sequence diagram graph to further generate the <b>test</b> <b>paths.</b> Then the <b>test</b> <b>paths</b> are prioritizing by using the Genetic Algorithm along with Tab...|$|R
40|$|International audienceThis paper {{deals with}} the optimal path {{placement}} for a manipulator based on energy consumption. It proposes a methodology to determine the optimal location of a given <b>test</b> <b>path</b> within the workspace of a manipulator with minimal electric energy used by the actuators while {{taking into account the}} geometric, kinematic and dynamic constraints. The proposed methodology is applied to the Orthoglide~ 3 -axis, a three-degree-of-freedom translational parallel kinematic machine (PKM), as an illustrative example...|$|E
40|$|In {{this paper}} we analyze the {{complexity}} of algorithms for two problems that arise in automatic <b>test</b> <b>path</b> generation for programs: the problem of building a path through a specified set of flow graph nodes {{and the problem of}} building a path which satisfies impossible-pairs restrictions in a flow graph. We give a highly efficient algorithm for the first problem, and show that the second problem is NO-complete in the sense of Cook and Karp...|$|E
40|$|This paper {{deals with}} the optimal path {{placement}} for a manipulator based on energy consumption. It proposes a methodology to determine the optimal location of a given <b>test</b> <b>path</b> within the workspace of a manipulator with minimal electric energy used by the actuators while {{taking into account the}} geometric, kinematic and dynamic constraints. The proposed methodology is applied to the Orthoglide 3 -axis, a three-degree-of-freedom translational parallel kinematic machine (PKM), as an illustrative example...|$|E
40|$|Abstract: Testing {{plays an}} {{important}} role in the software development to identify the difficulties in process very well. In case of code based <b>testing,</b> <b>path</b> <b>testing</b> plays a very crucial role. The importance of <b>path</b> <b>testing</b> is to check the code coverage as well as to identify the code significance. Better the test sequence is estimated, better the testing is performed. It also affects the testing code and test case reusability. There are number of factors on which code sequence is decided. This paper presents a framework that helps in implementing dynamic programming approach that will work on the basis of fault as well as future aspects of test cases to estimate path sequence...|$|R
40|$|Modern {{software}} design tools use finite-state machines (FSMs) arranged in hierarchical fashion. Many techniques {{have been developed}} for testing software modelled as an FSM, but none explicitly addressing designs modelled as a hierarchical FSM (HFSM). Additionally, the problem of explosion in the number of <b>test</b> <b>paths</b> precludes the <b>testing</b> of all possible paths through the HFSM [Holzmann 91]. This thesis presents a practical and scalable method for testing a design modelled as an HFSM. The method is based on graph traversal and uses the hierarchy of the underlying directed graph. A recursive algorithm computes breadth, the number of paths needed just to cover all transitions at least once. This idea is extended to cover all states, all inputs, and all outputs. This method is complementary to existing formal methods for conformance testing and protocol testing. Breadth is a lower bound on the number of <b>test</b> <b>paths</b> to cover the HFSM...|$|R
40|$|Correct {{functioning}} of object-oriented software {{depends upon the}} successful integration of classes. While individual classes may function correctly, several new faults can arise when these classes are integrated together. In this paper, we present a technique to enhance testing of interactions among modal classes. The technique combines UML collaboration diagrams and statecharts to automatically generate an intermediate test model, called SCOTEM (State COllaboration TEst Model). The SCOTEM is then used to generate valid <b>test</b> <b>paths.</b> We also define various coverage criteria to generate <b>test</b> <b>paths</b> from the SCOTEM model. In order to assess our technique, we have developed a tool and applied it to a case study to investigate its fault detection capability. The {{results show that the}} proposed technique effectively detects all the seeded integration faults when complying with the most demanding adequacy criterion and still achieves reasonably good results for less expensive adequacy criteria...|$|R
