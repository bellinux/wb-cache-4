1|9|Public
40|$|All {{areas of}} {{language}} and speech technology, directly or indirectly, require handling of real (unrestricted) text. For example, Text-to-Speech systems directly {{need to work on}} real text, whereas Automatic Speech Recognition systems depend on language models that are trained on text. This paper reports our ongoing effort on Hindi Text Normalization. In that, a novel approach to text normalization, wherein tokenization and initial token classification are combined into one stage followed by a second level of <b>token</b> <b>sense</b> disambiguation, is described. Tokenization and initial token classification are performed using a lexical analyser that is derived from various token definitions in the form of regular expressions. For second level of <b>token</b> <b>sense</b> disambiguation, application of decision lists and decision trees are explored. Token-to-word rules are then applied, which are specific for each token type and also for each format within a token type...|$|E
40|$|We {{propose a}} {{variation}} of Wythoff's game on three piles of <b>tokens,</b> in the <b>sense</b> that the losing positions {{can be derived from}} the Tribonacci word instead of the Fibonacci word for the two piles game. Thanks to the corresponding exotic numeration system built on the Tribonacci sequence, deciding whether a game position is losing or not can be computed in polynomial time. Peer reviewe...|$|R
40|$|International audienceSmartTokens are small-sized {{tangible}} <b>tokens</b> {{that can}} <b>sense</b> multiple types of motion, multiple types of touch/grip, and send input events wirelessly as state-machine transitions. By providing an open platform for embedding basic sensing capabilities within small form-factors, SmartTokens extend the design space of tangible user interfaces. We describe the de- sign {{and implementation of}} SmartTokens and illustrate {{how they can be}} used in practice by introducing a novel TUI design for event notification and personal task management...|$|R
40|$|Abstract. We {{propose a}} simple cast-as-intended remote e-voting {{protocol}} where the security {{is based on}} the use of secure (and trusted) smart cards that incorporate incard numeric keyboards and LCD displays, and can perform a limited number of cryptographic operations (like encryption, signing, and random number generation). The protocol, while very simple, is significantly more secure (in the sense of “cast-as-intended”) and convenient to use than the e-voting protocol currently used in Norway. The protocol is developed primarily with the idea of deploying it in Estonia within the next 3 to 10 years. Since in Estonia, a vast majority of the population already has ID-cards with digital signing and authentication functionality, and the use of ID-cards is a required prerequisite to participate in Estonian e-voting anyway, our assumption of every voter having a secure hardware <b>token</b> makes <b>sense</b> in this concrete context...|$|R
40|$|Most {{lower speed}} (approx. 10 Mbps) local area {{networks}} use adaptive or random access protocols like Ethernet. Others at higher speed use demand assignment like token or slotted rings. These include Cambridge ring and electronic token ring systems. Fairness issues in representatives of such protocols are discussed. In particular, Fiber Distributed Data Interface (FDDI) {{was selected as}} a demand access protocol using <b>tokens,</b> Carrier <b>Sensed</b> Multiple Access/Ring Network (CSMA/RN) a random access protocol, and Distributed Queue Dual Bus (DQDB) a demand access protocol using reservations. Fairness at the media access level was the focus, i. e., attaining access or being excessively delayed when a message is queued to be sent {{as a function of}} network location. Within that framework, the essential fairness of FDDI was observed along with severe fairness problems in DQDB and some problems for CSMA/RN. Several modifications were investigated and their ameliorative effect is shown. Finally, a unified presentation which allows comparisons of the three protocols' fairness when normalized to their capacity is given...|$|R
40|$|We {{continue}} {{the line of}} work initiated by Katz (Eurocrypt 2007) on using tamper-proof hardware for universally composable secure computation. As our main result, we show an efficient oblivious-transfer (OT) protocol in which two parties each create and exchange a single, stateless token and can then run an unbounded number of OTs. Our result yields what we believe is the most practical and efficient known approach for oblivious transfer based on tamper-proof tokens, and implies that the parties can perform (repeated) secure computation of arbitrary functions without exchanging additional tokens. Motivated by this result, we investigate the minimal number of stateless tokens needed for universally composable OT / secure computation. We prove that our protocol is optimal in this regard for constructions making black-box use of the <b>tokens</b> (in a <b>sense</b> we define). We also show that nonblack-box techniques {{can be used to}} obtain a construction using only a single stateless token...|$|R
50|$|Young was widowed in 1873, however, he {{was still}} working in 1875 {{surveying}} dangerous structures in the City as is attested by the Metropolitan Board of Works. Apart from the strikingly ornate civic and commercial buildings he designed, Young's legacy, especially in the City of London, was to ensure {{in his role as}} surveyor, that buildings falling into disrepair would be adequately put right and on several occasions, he asked for 'substitutions' with surveyor colleagues so that he could personally superintend the repairs as an architect, notably in Houndsditch and Cannon Street. John Young left a quiet <b>token</b> of his <b>sense</b> of humour in the carved mice on the parapet of a warehouse in Eastcheap. He died at home in St Mary's Lodge in March 1877. He and his wife were buried in the churchyard of St. Mary Stoke Newington. His son, John, continued John Young & Son, specialising in civic and church architecture. He was a friend of the novelist, George Thackeray and became a Fellow of the British Institute of Architects, a distinction that had eluded his energetic father. John Young Junior died in 1910 in Brentwood, Essex.|$|R
2500|$|TeX {{commands}} commonly {{start with}} a backslash and are grouped with curly braces. Almost all of TeX's syntactic properties can be changed on the fly, which makes TeX input hard to parse by anything but TeX itself. TeX is a macro- and token-based language: many commands, including most user-defined ones, are expanded on the fly until only unexpandable tokens remain, which are then executed. Expansion itself is practically free from side effects. Tail recursion of macros takes no memory, and if-then-else constructs are available. This makes TeX a Turing-complete language even at the expansion level. The system {{can be divided into}} four levels: in the first, characters are read from the input file and assigned a category code (sometimes called [...] "catcode", for short). Combinations of a backslash (actually, any character of category zero) followed by letters (characters of category 11) or a single other character are replaced by a control-sequence <b>token.</b> In this <b>sense,</b> this stage is like lexical analysis, although it does not form numbers from digits. In the next stage, expandable control sequences (such as conditionals or defined macros) are replaced by their replacement text. The input for the third stage is then a stream of characters (including ones with special meaning) and unexpandable control sequences (typically assignments and visual commands). Here characters get assembled into a paragraph. TeX's paragraph breaking algorithm works by optimizing breakpoints over the whole paragraph. The fourth stage breaks the vertical list of lines and other material into pages.|$|R

