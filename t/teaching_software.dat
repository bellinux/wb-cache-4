226|374|Public
50|$|The Learning Resource Server Medicine (LRSMed) is a free-to-access {{catalog of}} {{electronic}} learning and <b>teaching</b> <b>software</b> modules {{for education in}} medicine and dentistry available in English and German.|$|E
50|$|Kay is {{credited}} to {{have created the}} first computer laboratory for English studies in the world, developing cutting-edge <b>teaching</b> <b>software,</b> and {{first of its kind}} research-led courses in literary and linguistic computing.|$|E
5000|$|Over {{the past}} ten years, Edelman's {{programming}} work has included websites for the U.S. Army and the FBI and <b>teaching</b> <b>software</b> to the U.S. Congress and the World Bank. His work in the dot com boom of the 1990s influenced his first novel Infoquake ...|$|E
5000|$|Free {{software}} such as Superscan and Hacme Bank {{have been}} released by Foundstone since its early inception. The security centric tools provide aid to penetration testers in ethical hacking and <b>teach</b> <b>software</b> developers security fundamentals.|$|R
40|$|This paper {{discusses}} {{the reform of}} teaching contents, teaching model, <b>teaching</b> method of <b>software</b> engineering courses, and assesses {{the effects of a}} series of reform measures and programs. It for-med a case-driven methodology to <b>teach</b> <b>software</b> engineering. The <b>teaching</b> practice undertaken by Northeast Petroleum University has shown that the methodology provides graduate students with the opportunities to experience the realistic software engineering problems and environ-ments, and then effectively raise their interest in learning...|$|R
40|$|This paper {{discusses}} {{my experience}} with developing a case study to improve a student's analytical capabilities and introduce the importance of considering maintenance and implementation issues in software design. The case study, developed as a classroom assignment, proved an effective tool to <b>teach</b> <b>software</b> engineering students {{that there are more}} things to consider than performance specifications. 1 : Introductio...|$|R
5000|$|University of Wales, Aberystwyth awarded {{internal}} {{funding to}} further develop its ‘integrated project support environment for <b>teaching</b> <b>software</b> engineering’. Ratcliffe, M. B., Stotter-Brooks, T. J., Bott M. F. & Whittle, B. R. ‘The TIPSE: An IPSE for Teaching’, Software Engineering Journal, 7, (5), pp 347-356, September 1992.|$|E
5000|$|Loceff has sneaked {{in several}} subtle {{references}} to his teaching career on 24. Milo Pressman's CTU password is [...] "foothill94022." [...] 94022 is the postal code for Foothill College in Los Altos Hills, California. In a previous {{episode of the}} show, a character used the secret password [...] "Etudes", {{the name of his}} online <b>teaching</b> <b>software.</b>|$|E
50|$|The LRSMed {{includes}} electronic {{learning and}} <b>teaching</b> <b>software</b> modules {{for education in}} medicine and dentistry, which are deployed in the World Wide Web free of charge. The learning resources are described with a quasi-standard of metadata, the IMS Learning Resource Meta-data Information Model. Users are able to search for entries using several parameters as medical field, type of learning resource and language.|$|E
50|$|Mavis Beacon is {{a fictional}} {{character}} {{created for the}} Mavis Beacon <b>Teaches</b> Typing <b>software.</b>|$|R
5000|$|Mavis Beacon, the eponymous African-American typing {{instructor}} of the Mavis Beacon <b>Teaches</b> Typing <b>software</b> ...|$|R
40|$|A large {{financial}} company, {{struggling with}} legacy systems {{that did not}} interoperate, performed a pilot project to <b>teach</b> <b>software</b> architecture to an enthusiastic application development team. Experienced mentors, including the author, worked with the application team for seven months to complete their engineering goal successfully. However, the mentors were unsuccessful {{in their attempt to}} train any of the six members of the application team to create architecture models on their own, though they were able to create them collaboratively with the mentors. This surprising result is due to the application team’s strong preference for concrete artifacts over abstract ones. Even more surprising, an application developer from a different project, “Developer X”, read the architecture modeling documentation on an internal website and, without mentoring, created architecture models within a few days. In light of this failure to <b>teach</b> <b>software</b> architecture, two short-term strategies are suggested for the use of software architecture in companies. 1...|$|R
50|$|The ISR {{applied a}} {{computer-assisted}} system to teach conversational English to North Korean teens. Along with <b>teaching</b> <b>software</b> introduced to DPRK, the ISR {{was known to}} be the first-ever NGO to bring educators and have them teach North Korean high school students in classrooms. In the summer of 2008, five Korean American professionals of the ISR delegation taught conversational English to DPRK high school students. Based on an education model from the United Kingdom, ISR plans to improve quality of DPRK education program for both the teachers and the students in high schools.|$|E
50|$|A {{few years}} later, Rajesh becomes {{responsible}} and settles in an IT job that involves <b>teaching</b> <b>software</b> classes for newcomers and interns. Rajesh {{lives with his}} librarian grandfather Subrahmanyam aka Subbuni (Nagesh), who means the world to him; he even turns down a very lucrative job assignment in Singapore {{to be with his}} grandfather. Rajesh, on a trip to a friend’s wedding in Bangalore, comes across Reena (Reema Sen) and is smitten by her beauty but does not get to meet her. To his pleasant surprise, he sees her again in Chennai, but is again unable to meet her.|$|E
50|$|Unlike most games, as well {{as other}} {{particular}} <b>teaching</b> <b>software,</b> Art Academy does not grade the player’s/art trainee’s performance in accomplishing any of the lessons, as it fully depends on the player/art trainee if (s)he is willing to follow the guides and/or practical training. Lessons can be unlocked anyway regardless of performance, as long as the player/art trainee simply passes through the stages to finish up each lesson. In fact, practical training is absolutely open (only limited by unlocked tools as stated per lesson), as the player/art trainee does not even have to follow the actual lesson at all.|$|E
5000|$|A {{comparison}} of tools for <b>teaching</b> formal <b>software</b> verification. Ingo Feinerer and Gernot Salzer. Springer, 2008 ...|$|R
40|$|A {{reflection}} {{on how best}} to <b>teach</b> <b>software</b> engineering, how to organize the programming curriculum, and what role universities can play in the development of software engineering. Discusses in particular the role of teaching concepts vs. tools, the notion of "inverted curriculum" (or "Progressive Opening of the Black Boxes"). Ideas from this paper have been applied at various institutions, in particular ETH in Zurich...|$|R
50|$|Beginning {{with the}} 2011-2012 {{academic}} year, Morristown-Beard School now requires {{all students to}} purchase an iPad and use the tablet device to assist schoolwork. The school's curriculum includes multiple electives that <b>teach</b> <b>software</b> development for iOS, the operating system that drives iPads, iPhones, and Apple TVs. Morristown-Beard School also runs a dedicated 1000 Mbit/s Wi-Fi network to enable students' and faculty iPads to access the Internet.|$|R
5000|$|Classrooms are {{the best}} and {{favorite}} places of all children, from Class I to XII. The school does not just have a teacher standing {{in the corner of}} a classroom and dictating stuff which makes children sleep and the act of education boring. All classrooms of the school are equipped with a Superior Digital Technology now common to only a countable number of schools in Kerala. It is the Plasma TV. Bhavan's Girinagar was the first school to introduce it in the Kochi City of Kerala. The classes of the school now have the [...] "TeachNext Education"—An All-India Company's <b>Teaching</b> <b>Software</b> installed in its Plasma TV, for all classes from Std. I to XII.|$|E
5000|$|Mashey holds a Ph.D. in {{computer}} science from Pennsylvania State University, where he developed the ASSIST assembler language <b>teaching</b> <b>software.</b> He worked on the PWB/UNIX operating system at Bell Labs from 1973 to 1983, authoring the PWB shell, {{also known as the}} [...] "Mashey Shell". He then moved to Silicon Valley to join Convergent Technologies, ending as director of software. He joined MIPS Computer Systems in early 1985, managing operating systems development, and helping design the MIPS RISC architecture, as well as specific CPUs, systems and software. He continued similar work at Silicon Graphics (1992-2000), contributing to the design of the NUMAflex modular computer architecture using NUMAlink, ending as VP and chief scientist.|$|E
50|$|According to its president, Teachers College, Columbia University {{provides}} {{solutions to}} the difficult problems of urban education, reaffirming its original mission in providing {{a new kind of}} education for those left most in need by society or circumstance. The college continues its collaborative research with urban and suburban school systems that strengthen teaching in such fundamental areas as reading, writing, science, mathematics, and the arts; prepares leaders to develop and administer psychological and health care programs in schools, hospitals and community agencies; and advances technology for the classroom, developing new <b>teaching</b> <b>software</b> and keeping teachers abreast of new developments. Teachers College also houses a wide range of applied psychology degrees, including one of the nation's leading programs in Organizational Psychology.|$|E
40|$|LEGO Serious Play (LSP) is a {{methodology}} that helps people brainstorm and discuss complex ideas through storytelling and metaphors. LSP {{has been successfully}} applied in higher education as a mechanism for team building and promoting creativity. In this paper, we discuss using LSP to <b>teach</b> several core <b>software</b> engineering topics through hands-on case studies. Initial results suggest that LSP has {{a positive impact on}} student learning, while also improving student engagement with the course material. This paper describes the details of two LSP-based case studies along with many practical aspects of using LSP to <b>teach</b> <b>software</b> engineering...|$|R
40|$|Teaching the PSP: Challenges and Lessons Learned by Jurgen Borstler, David Carrington, Gregory W Hislop, Susan Lisack, Keith Olson, and Laurie Williams, pp. 42 - 48. Soft-ware {{engineering}} {{educators need}} to provide environments where students learn about the size and complexity of modern software systems and the techniques available for managing these difficulties. Five universities used the Personal <b>Software</b> Process to <b>teach</b> <b>software</b> engineering concepts {{in a variety of}} contexts...|$|R
50|$|Software Technology & Success Skills - <b>teaches</b> {{students}} <b>software</b> applications (mainly from Microsoft) {{and skills}} that help students get jobs.|$|R
40|$|The current {{remote sensing}} {{experimental}} teaching lacks excellent <b>teaching</b> <b>software.</b> Considering this problem, a systematic design thought about remote sensing curriculum experimental <b>teaching</b> <b>software</b> {{was introduced in}} this paper. We analyzed the current situation and problems of remote sensing experimental teaching, and at some aspects such as strengthening theoretical study, implementing inquiry learning, application of information and visualization. On this basis, a design idea of developing remote sensing experimental <b>teaching</b> <b>software</b> was put forward...|$|E
40|$|Abstract: In this paper, we {{introduce}} the mathematics <b>teaching</b> <b>software,</b> {{in which we}} mainly focus on the series limit. More specifically, we comment on the clarification ofthe series limit, and the common formula {{for a variety of}} limit as well as the common process. This mathematics <b>teaching</b> <b>software</b> can give intermediate result which others can not present, but also provide an intermediate process. Most importantly, it can solve the unsolved problem which other software can not. ...|$|E
40|$|Software {{engineering}} typically {{requires more}} effort in maintenance than in development time. As such, software engineering education needs to actively include software evolution. <b>Teaching</b> <b>software</b> evolution to undergraduate students usually includes the theoretical aspects, but doesn’t normally include the actual implementation. This paper describes {{the practice of}} <b>teaching</b> <b>software</b> evolution to undergraduate computing students at Monash University. It demonstrates how the four maintenance activities- corrective, adaptive, perfective and preventative- can be included into the practical component of a software engineering course, providing students with a much more realistic view of software engineering. 1...|$|E
50|$|Educators {{are often}} {{required}} to be certified in digital literacy to <b>teach</b> certain <b>software</b> and, more prevalently, to prevent plagiarism amongst students.|$|R
3000|$|We {{used the}} {{concepts}} presented in Table 1 {{for the design}} of the MoLIC diagram shown in Fig. 2. The game aims to teach the detection of types of defects that can be found in an artifact through a playful environment. Thus, students (users) may practice the concepts regarding inspection that were listed during their classes. The game can be used by professors that <b>teach</b> <b>software</b> inspection as a practical exercise. The MoLIC diagram has the following elements: [...]...|$|R
40|$|This paper {{describes}} {{an approach to}} teaching and learning that combines elements of ludic engagement, gamification and digital creativity {{in order to make}} the learning of a serious subject a fun, interactive and inclusive experience for students regardless of their gender, age, culture, experience or any disabilities that they may have. This approach has been successfully used to <b>teach</b> <b>software</b> engineering to first year students but could in principle be transferred to any subject or discipline...|$|R
40|$|Abstract. With {{the rapid}} {{development}} of multimedia technology, multimedia teaching, as an advanced teaching method, {{is widely used}} in teaching, and leads teaching reform of colleges and universities. Multimedia <b>teaching</b> <b>software</b> greatly improves class effect by graphic illustrations and combination of dynamics and statics. But now {{there are also some}} problems about multimedia <b>teaching</b> <b>software,</b> such as poor universality, simple design, electronic blackboard, lack of artistry and interactivity, the paper puts forward evaluation principles and three-level evaluation index system of multimedia software for teaching, which have some reference value and realistic significance...|$|E
40|$|This volume {{contains}} all papers accepted for the International Teach UML Workshop on <b>Teaching</b> <b>Software</b> Modelling with the Unified Modeling Language in Academia and Industry {{that was held}} {{in conjunction with the}} 3 rd Balkan Conference in Informatics (BCI' 2007) in Sofia, Bulgaria. The focus of this workshop was to initiate an exchange of ideas and experiences on best practices for <b>teaching</b> <b>Software</b> Modelling, UML and OOD in general. The workshop provided a forum to experts and practitioners for the presentation of best practices and the discussion of innovative approaches towards teaching the subject in academia and industry...|$|E
40|$|Software reuse {{is one of}} the {{important}} topics in a software engineering course. Ada and C++ are traditionally two popular languages for <b>teaching</b> <b>software</b> reuse and software engineering in general. This paper reports our experience by adopting JavaBeans as an example component architecture in our upper-level software engineering course: CSIS 499 - Special Topics in Software Engineering, which emphasizes software reuse and software metrics. Both software development for reuse and with reuse are discussed based on JavaBeans. The benefits of <b>teaching</b> <b>software</b> reuse with JavaBeans include: well-defined component model, no portability overhead [2], availability of building tools, support for reusability metrics, and adaptability to different levels of students...|$|E
40|$|This paper {{presents}} {{an approach to}} <b>teaching</b> a <b>Software</b> Engineering course, as well as significant feedback from {{the students who were}} enrolled in the first offering of the course using this approach. The course provided students with conceptual material as well as experience with a large project. Just teaching concepts or major topics, while important, is not sufficient; students need hands-on exposure to doing a large project in order to comprehend the complexity of building real systems. On the other hand a course cannot “teach ” only a project because students need a conceptual framework, approaches, and techniques upon which to base the complexities of software engineering. The feedback from the students who took the first offering of the course provides useful information to anyone who <b>teaches</b> <b>Software</b> Engineering in addition to instructors about to teach the subject for the first time. 1...|$|R
40|$|Mellon University is {{to bridge}} the gap between {{experience}} and academics. One way to transfer experience to young software engineers is through case studies designed tofocus students on speci c software engineering problems. This paper discusses my experience with developing a case study to improve a student's analytical capabilities and introduce the importance ofconsidering maintenance and implementation issues in software design. The case study, developed as a classroom assignment, proved an e ective tool to <b>teach</b> <b>software</b> engineering students that there aremore things to consider than performance speci cations. ...|$|R
40|$|The {{development}} of a CASE tool that supports Jackson’s methods – Problem Frames, JSD and JSP- is urged and justified. Jackson’s methods are sound, and fundamental ideas about design provide unity to his thought; in short, his contributions deserve {{to be part of}} the software engineering curriculum. A CASE tool would help to achieve this end. Moreover, teachers need a CASE tool to <b>teach</b> <b>software</b> engineering effectively – a Jackson methods CASE tool would help demonstrate the benefits of sound design convincingly to students. Finally, a Jackson Methods CASE tool would further research. 1...|$|R
