247|556|Public
25|$|GP evolves {{computer}} programs, traditionally {{represented in}} memory as tree structures. Trees {{can be easily}} evaluated in a recursive manner. Every tree node has an operator function and every <b>terminal</b> <b>node</b> has an operand, making mathematical expressions easy to evolve and evaluate. Thus traditionally GP favors the use of programming languages that naturally embody tree structures (for example, Lisp; other functional programming languages are also suitable).|$|E
25|$|The game on {{the right}} has two players: 1 and 2. The numbers by every non-terminal node {{indicate}} to which player that decision node belongs. The numbers by every <b>terminal</b> <b>node</b> represent the payoffs to the players (e.g. 2,1 represents a payoff of 2 to player 1 and a payoff of 1 to player 2). The labels by every edge of the graph are {{the name of the}} action that edge represents.|$|E
25|$|A play {{is thus a}} {{path through}} the tree from the root to a <b>terminal</b> <b>node.</b> At any given non-terminal node {{belonging}} to Chance, an outgoing branch is chosen according to the probability distribution. At any rational player's node, the player must choose one of the equivalence classes for the edges, which determines precisely one outgoing edge except (in general) the player doesn't know which one is being followed. (An outside observer knowing every other player's choices up to that point, and the realization of Nature's moves, can determine the edge precisely.) A pure strategy for a player thus consists of a selectionchoosing precisely one class of outgoing edges for every information set (of his). In a game of perfect information, the information sets are singletons. It's less evident how payoffs should be interpreted in games with Chance nodes. It is assumed that each player has a von Neumann–Morgenstern utility function defined for every game outcome; this assumption entails that every rational player will evaluate an a priori random outcome by its expected utility.|$|E
5000|$|The arcs from <b>terminal</b> <b>nodes</b> to {{the target}} {{variable}} <b>nodes</b> are weighted (<b>terminal</b> <b>nodes</b> are nodes directly connected {{to the target}} variable nodes). The weight is the conditional mutual information due to the arc.|$|R
2500|$|Informally, Kayne's theory {{states that}} if a nonterminal {{category}} A c-commands another nonterminal category B, all the <b>terminal</b> <b>nodes</b> dominated by A must precede all of the <b>terminal</b> <b>nodes</b> dominated by B (this statement is {{commonly referred to as}} the [...] "Linear Correspondence Axiom" [...] or LCA). Moreover, this principle must suffice to establish a complete and consistent ordering of all <b>terminal</b> <b>nodes</b> [...] if it cannot consistently order all of the <b>terminal</b> <b>nodes</b> in a tree, the tree is illicit. Consider the following tree: ...|$|R
30|$|Sensor {{monitoring}} {{is carried}} out directly on the <b>terminal</b> <b>nodes.</b>|$|R
2500|$|... every (directed) path in {{the tree}} from the root to a <b>terminal</b> <b>node</b> can cross each {{information}} set at most once ...|$|E
2500|$|Tseng {{suggests}} A-not-A occurs post-syntactically, at the morphological level. It is {{movement that}} occurs overtly at the phonetic form, after the syntactic movement has occurred. A-not-A is {{a feature of}} T that operates on the closest, c-commanded morphosyntactic words (MWd), and not subwords (SWd). The elements that undergo post-syntactic movement are morphosyntactic words (MWd). A node X [...] is a MWd iff X is the highest segment and X is not contained in another X. A node X is a SWd if X [...] is a <b>terminal</b> <b>node</b> and not an MWd. The A-not-A operation is a MWd to MWd movement.|$|E
50|$|Each {{branch of}} the tree ends in a <b>terminal</b> <b>node.</b> Each {{observation}} falls into one and exactly one <b>terminal</b> <b>node,</b> and each <b>terminal</b> <b>node</b> is uniquely defined {{by a set of}} rules.|$|E
30|$|The major {{advantage}} of the classical hard decision tree construction algorithm is that its <b>terminal</b> <b>nodes</b> can be split independently. In hard decision tree, <b>terminal</b> <b>nodes</b> represent non-overlapped regions of the contextual factor space; therefore, after splitting a leaf, all values obtained for other leaves are still valid, {{and it is not}} required to calculate them once again. This advantage causes the algorithm to be computationally tractable. However, in the soft decision tree construction procedure, the different <b>terminal</b> <b>nodes</b> may cover overlapped regions of the contextual space and splitting a leaf using a soft question affects the parameters of all other leaves. Consequently, as opposed to the conventional hard decision tree structure, here, after splitting a leaf, it is required to update all values obtained for all <b>terminal</b> <b>nodes,</b> and it needs tremendous amount of computations.|$|R
40|$|The Minimum Weighted Tree Reconstruction (MWTR) problem {{consists}} {{of finding a}} minimum length weighted tree connecting a set of <b>terminal</b> <b>nodes</b> {{in such a way}} that the length of the path between each pair of <b>terminal</b> <b>nodes</b> is greater than or equal to a given distance between the considered pair of <b>terminal</b> <b>nodes.</b> This problem has applications in several areas, namely, the inference of phylogenetic trees, the modeling of traffic networks and the analysis of internet infrastructures. In this paper, we investigate the MWTR problem and we present two compact mixed-integer linear programming models to solve the problem. Computational results using two different sets of instances, one from the phylogenetic area and another from the telecommunications area, show that the best of the two models is able to solve instances of the problem having up to 15 <b>terminal</b> <b>nodes.</b> SCOPUS: ar. jinfo:eu-repo/semantics/publishe...|$|R
5000|$|... #Caption: Network <b>terminal</b> <b>nodes</b> are at {{the edges}} of the network ...|$|R
50|$|PACTOR radio {{equipment}} {{consists of an}} HF transceiver, a computer and a <b>terminal</b> <b>node</b> controller. Software running on the computer drives the <b>terminal</b> <b>node</b> controller. The most commonly used Amateur program for this purpose is Airmail.|$|E
50|$|<b>Terminal</b> <b>node</b> controller: Microchip's PIC microcontroller, {{which is}} {{interfaced}} with the Transceiver.|$|E
5000|$|It {{consists}} of a single node with out-degree = 0 (<b>terminal</b> <b>node)</b> ...|$|E
30|$|But {{generally}} a model has 3 – 5 splits in a tree, rendering 4 – 6 <b>terminal</b> <b>nodes.</b>|$|R
30|$|It {{begins with}} a very small tree with initial model {{containing}} as small as one split generating 2 <b>terminal</b> <b>nodes.</b>|$|R
3000|$|... (communications energy) has {{decreased}} considerably {{due to the}} reduced distances from <b>terminal</b> <b>nodes</b> to their assigned base stations, {{and the number of}} SD connections has increased to 3782. Figure 5 (c) shows the network at an equilibrium configuration, in which no significant forces act on the backbone nodes. The network cost has reached a minimum for the given network conditions (<b>terminal</b> <b>nodes</b> layout and atmospheric conditions), and there are 4556 [*]SD pairs connected.|$|R
5000|$|... 6PACK, {{used with}} some <b>terminal</b> <b>node</b> controllers, uses a {{different}} set of 64 characters.|$|E
50|$|The Ultra-High Frequency (UHF) unit {{contains}} a radio and a <b>terminal</b> <b>node</b> controller (TNC) {{and is the}} spacecraft’s primary communications system.|$|E
5000|$|... every (directed) path in {{the tree}} from the root to a <b>terminal</b> <b>node</b> can cross each {{information}} set at most once ...|$|E
3000|$|... at {{the lower}} left graph. The {{oscillations}} show the excitation-reaction process that undergoes as <b>terminal</b> <b>nodes</b> move and the DWB reacts.|$|R
5000|$|After {{syntactic}} {{operations are}} complete, certain morphological operations (see below) apply before any assignment of phonological content to the <b>terminal</b> <b>nodes.</b>|$|R
40|$|Abstract — In this paper, {{we provide}} a new unified {{approach}} {{to analyze and}} solve multicast-based network inference problems. We show that the outcome variables induced by the transmission of a multicast packet form a Markov random field on the multicast tree. We present an algorithm that recovers the multicast tree topology based on the values of an additive tree metric on pairs of the <b>terminal</b> <b>nodes.</b> We prove the correctness of the algorithm. We also give several examples of an additive tree metric for which the values on pairs of the <b>terminal</b> <b>nodes</b> can be estimated from traffic measurements taken at the receivers. In addition, we propose an algorithm to recover the link performance parameters from the joint distribution of the outcome variables at the <b>terminal</b> <b>nodes.</b> I...|$|R
50|$|Morphologically {{conditioned}} allomorphy {{may involve}} suppletion (as in go-Ø/wen-t) or readjustment rules that apply {{in the context}} of certain Vocabulary items (as in buy-Ø/bough-t). Suppletion and readjustment rules apply to a <b>terminal</b> <b>node</b> and its associated Vocabulary item - unlike affixation, which combines this <b>terminal</b> <b>node</b> with a separate <b>terminal</b> <b>node</b> that has its own distinct (though potentially null) Vocabulary item. Suppletion arises from the competition of Vocabulary items for insertion into a <b>terminal</b> <b>node.</b> Competition involving root Vocabulary items is a topic of ongoing research, however. Early work in Distributed Morphology suggests that a single, abstract lexical root appears in the syntax; in this view, roots do not compete for insertion into root nodes, but exist in free variation, constrained only by semantic and pragmatic well-formedness. Subsequent research has suggested that the distribution of root Vocabulary items can be grammatically restricted (Embick 2000, Pfau 2000, Marantz 2013); this means that roots may be featurally restricted and thus subject to competition. The issue of whether root alternations such as buy-Ø/bough-t are better handled by suppletion or readjustment rules remains a topic of debate (Embick & Marantz 2008, Siddiqi 2009, Bonet & Harbour 2012).|$|E
50|$|Impoverishment (a term {{introduced}} into the theory in Bonet 1991) refers {{to a change in}} the feature content on a <b>terminal</b> <b>node</b> prior to Vocabulary Insertion, resulting in a less marked feature content. This can be accomplished by deleting a feature or by changing it from a marked to an unmarked value (e.g. +plural to -plural). Impoverishment accounts for cases in which spell-out of a <b>terminal</b> <b>node</b> by a featurally specific Vocabulary Item is blocked by a less specific Vocabulary Item.|$|E
5000|$|The {{general idea}} is to compute the {{impedance}} [...] at a <b>terminal</b> <b>node</b> of the Y circuit with impedances , [...] to adjacent nodes in the Δ circuit by ...|$|E
40|$|AbstractAssume a {{communication}} network, consisting of switching nodes which make connections (like telephone exchanges) and <b>terminal</b> <b>nodes</b> which use these connections (like subscribers, computer terminals, etc.). The <b>terminal</b> <b>nodes</b> {{are at the}} periphery of the network, whereas switching nodes are internal to the network. In this paper it is shown how Milner's calculus of communicating systems (CCS) can be applied to specify and verify the communication behaviour of switching nodes. Starting from a specification of the communication behaviour of <b>terminal</b> <b>nodes,</b> a specification for the protocol between <b>terminal</b> <b>nodes</b> and the network of switching nodes is systematically derived. In a similar way the communication behaviour of switching nodes inside the network is derived. Verification is based on a formal abstraction mechanism which shows the equivalence of a specification and the corresponding design. The expansion theorem of CCS, together with certain laws from CCS, provide such a mechanism. With these, it is proved that the behaviour of a network of switching nodes is observation equivalent to a single switching node, which proves the consistency of the specification of the communication behaviour of the network as a whole and the combined behaviour of its constituents, the switching nodes...|$|R
3000|$|An {{adjacency}} matrix of network topology {{is defined as}} A = ([...] a_ij)_n × n, where n {{is the number of}} nodes, a_ij is a binary variable, if a_ij = 1 demonstrates i-node is connected to another j-node by a branch. Otherwise, a_ij = 0. The degree of i-node is defined as D_vi = ∑_j = 1 ^na_ij. Generally a distribution network incorporates a few kinds of <b>nodes,</b> i.e. <b>terminal</b> <b>nodes,</b> electric T-nodes and junction nodes. So the different sets of degree value D_vi = 1, D_vi = 2 and D_vi> 3 are corresponding to the <b>terminal</b> <b>nodes,</b> junction nodes and T-nodes.|$|R
3000|$|... of <b>terminal</b> <b>nodes</b> {{is given}} and the {{objective}} is to find a connected subgraph, spanning all the terminals with minimal aggregate weights for all [...]...|$|R
50|$|H.S.M. Coxeter {{called it}} 421 because its Coxeter-Dynkin diagram has three {{branches}} of length 4, 2, and 1, {{with a single}} node on the <b>terminal</b> <b>node</b> of the 4 branch.|$|E
5000|$|... {{function}} quiescence_search(node, depth) if node appears quiet or node is a <b>terminal</b> <b>node</b> or depth = 0 return {{estimated value}} of node else [...] //One might use minimax or alpha-beta search here... search children of node using recursive applications of quiescence_search return estimated value of children [...] //...and here function normal_search(node, depth) if node is a <b>terminal</b> <b>node</b> return estimated value of node else if depth = 0 if node appears quiet return estimated value of node else return estimated value from quiescence_search(node, reasonable_depth_value) else search children of node using recursive applications of normal_search return estimated value of children ...|$|E
5000|$|WME lists {{that reach}} the end of a branch of beta nodes {{represent}} a complete match for a single production, and are passed to terminal nodes. These nodes are sometimes called p-nodes, where [...] "p" [...] stands for production. Each <b>terminal</b> <b>node</b> represents a single production, and each WME list that arrives at a <b>terminal</b> <b>node</b> represents a complete set of matching WMEs for the conditions in that production. For each WME list it receives, a production node will [...] "activate" [...] a new production instance on the [...] "agenda". Agendas are typically implemented as prioritised queues.|$|E
30|$|Steps 2 and 3 are {{repeated}} for all later partitions until the model’s fit does not improve or the observations are spread too thinly over <b>terminal</b> <b>nodes.</b>|$|R
3000|$|... − 1 and slope below 111.04 % and − 0.40, respectively. Taking {{into account}} that we have {{obtained}} three <b>terminal</b> <b>nodes</b> for ES, the resulting IP map would include just three IP categories: high IP, 77 %; medium IP, 34.1 %; and low IP, 15.4 %. In {{the case of the}} MS tree model, the IP map would also define three categories, whereas the EG tree model has only two categories: high and low. Finally, although the MG tree includes four <b>terminal</b> <b>nodes,</b> the cut-off at node 3 was for an LFMCt [...]...|$|R
50|$|Hierarchical {{patterns}} of prominence like those represented in metrical trees can {{also apply to}} rhythm in music. The prominence level of a note {{is determined by the}} relative prominence of all the nodes above it. The timing of notes also depends on the metrical tree for a particular tune. Each node at the bottom level of the tree (<b>terminal</b> <b>nodes)</b> receives a beat. Empty <b>terminal</b> <b>nodes</b> correspond to rests or form part of a note that spans several beats. Syncopation in music can result when relatively strong nodes are empty.|$|R
