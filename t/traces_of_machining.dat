0|10000|Public
40|$|AbstractOnline {{monitoring}} and source <b>tracing</b> <b>of</b> <b>machining</b> error is <b>of</b> great significance for ensuring machining quality and improving machining efficiency. For an open numerical controller, the built-in sensors signals can be captured through driver interface in machining process. These signals contain various information <b>of</b> <b>machining</b> conditions <b>of</b> <b>machine</b> tool. The capture {{and analysis of}} the built-in sensors signals can be used for the online {{monitoring and}} source <b>tracing</b> <b>of</b> <b>machining</b> error. In this paper, an novel approach is developed for machining error monitoring and source tracing based on built-in sensor signal analysis and multi-body system theory. A ball screw grinding process was monitored, and the analysis results show the validity of the approach...|$|R
40|$|Operating systems {{represent}} {{large pieces}} of complex software that are carefully tested and broadly deployed. Despite this, developers frequently have little more than their source code to understand how they behave. This static representation of a system results in limited insight into execution dynamics, such as what code is important, how data flows through a system, or how threads interact with one another. We describe Tralfamadore, a system that preserves complete <b>traces</b> <b>of</b> <b>machine</b> execution as an artifact that can be queried and analyzed with a library of simple, reusable operators, {{making it easy to}} develop and run new dynamic analyses. We demonstrate the benefits of this approach with several example applications, including a novel unified source and execution browser. Categories and Subject Descriptors D. 2. 5 [Software Engineering]...|$|R
40|$|In this paper, {{we examine}} the problem <b>of</b> {{predicting}} <b>machine</b> availability in desktop and enterprise computing environments. Predicting the duration that a machine will run until it restarts (availability duration) is critically useful to application scheduling and resource characterization in federated systems. We describe one parametric model fitting technique and two non-parametric prediction techniques, comparing their accuracy in predicting the quantiles <b>of</b> empirically observed <b>machine</b> availability distributions. We describe each method analytically and evaluate its precision using a synthetic <b>trace</b> <b>of</b> <b>machine</b> availability constructed from a known distribution. To detail their practical efficacy, we apply them to machine availability traces from three separate desktop and enterprise computing environments, and evaluate each method {{in terms of the}} accuracy with which it predicts availability in a trace driven simulation. Our results indicate that availability duration can be predicted with quantifiable confidence bounds and that these bounds can be used as conservative bounds on lifetime predictions. Moreover, a non-parametric method based on a binomial approach generates the most accurate estimates...|$|R
40|$|This work {{presents}} Hoard, a peer-to-peer enhancement for the widely-used Network File System (NFS). Certain features–such as location transparency, mobility transparency, load balancing, {{and file}} replication–are missing from NFS but are {{commonly found in}} peer-to-peer storage applications. On the other hand, features that NFS provides–specifically hierarchical file organization, directory listings, and file permissions–are missing from most peer-to-peer storage applications. Hoard strives to provide a low-overhead enhancement for NFS through a NFS server that leverages a peer-to-peer routing substrate for efficient node communication. By blending the strengths of NFS with those of peer-to-peer, Hoard provides a single, reliable, shared file system {{that acts as a}} large redundant storage with normal NFS semantics. We present the design, implementation, and evaluation of the Hoard file system. Our experiments show that, for an eight-node system, Hoard adds 25 % overhead to unmodified NFS, it achieves load balancing in distributed directories, and it guarantees 99. 99 % or better file availability using the availability <b>trace</b> <b>of</b> <b>machines</b> in a large organization over a period of 35 days...|$|R
5000|$|Kirkus Reviews {{said that}} Royko [...] "convincingly and energetically" [...] {{describes}} Daley's rise {{and the many}} scandals and intrigues threaded through his career. [...] "Without either sentimentality or moralism, Royko <b>traces</b> the integuments <b>of</b> <b>machine</b> politics: key offices; the significance of each scandal; the way Daley has used his dual status as party chairman and mayor to consolidate a one-man rule any Soviet apparatchik would envy".|$|R
40|$|Schedules Once a state-machine {{specification}} is constructed, we {{can study}} its real-time properties by examining its execution traces. More precisely, the state-machine model is parameterized {{by a set}} of jobs J with attributes such as their starting time, their priority, and their duration. The <b>traces</b> <b>of</b> the <b>machine</b> are sequences <b>of</b> state-transitions performed by the system for this particular set of jobs. From such traces, it is trivial to construct abstract schedules that can be analyzed using the support library. As previously, timing properties can be very general or valid only for special instances of the job parameters that satisfy relevant assumptions. An Example: The Priority-Ceiling Protocol We have performed a full PVS formalization and verification of a nontrivial scheduling algorithm. This shows that precise and rigorous analysis of fairly complex scheduling approaches can be performed with modern theorem provers. Our case study was the priority-ceiling protocol, introdu [...] ...|$|R
5000|$|B. Kartheuser refuted {{point by}} point these revisionist theses. The only fact {{was that it}} was {{contrary}} to articles 23c and 23d of the Annex of the Hague Convention of 1907 concerning the laws and customs of war on land that state [...] "It is especially prohibited [...]. To kill or wound an enemy who, having laid down arms, or having no longer means of defence, has surrendered at discretion, [...] " [...] that 9 members of the SD and Gestapo were executed without trial on the afternoon of the 8th of June. As for the claimed mutilations, it was only <b>traces</b> <b>of</b> <b>machine</b> gun shots. According to a witness, Robert Lajugie, [...] "from the surrender of the besieged, I saw the bodies of the victims. Some certainly were damaged and it is true that there were some fractured skulls and exposed brain matter, but that {{was the result of a}} concentration of automatic gunfire. … It is in this state that elements of the 2nd SS Panzer Division Das Reich found their compatriots with, in addition, the further damage from the carting off of the bodies by the arrivals, berserk as they were, using tools which could crush the bodies or heads." [...] This story is confirmed by Dr Heinz Schmidt, doctor to the 3rd battalion of the : [...] "Because we wanted to have a presentable justification for our reprisals, I was cited as the physician in the square along with the Chief Doctor of the Das Reich division. He asked me if I had seen the mutilations of the bodies of our fallen soldiers in the town. Contrary to claims that this was the case, I stated emphatically that I had not seen any mutilation on the sixty dead that I saw.|$|R
40|$|Abstract—We {{consider}} {{the problem of}} constructing critical paths from incomplete information. In general, a directed acyclic graph of tasks with their execution times (i. e., a task graph) is necessary to extract critical paths. We assume, however, that only the set of tasks, and their start and end times are known, e. g., an execution trace {{in the form of}} a Gantt chart. This information can be extracted from real machines or from the output of analysis tools, whereas extraction of the exact task graph often is problematic due to imperative modeling formalisms and complicated platform semantics (resource allocation, varying execution speeds). We show that, based on start and end times only, an overapproximation of the critical paths of an unknown task graph can be extracted nevertheless. Furthermore, this approach is generalized to deal with “noisy ” execution <b>traces</b> <b>of</b> real <b>machines</b> in which control overhead is present. Finally, we discuss various methods to deal with false positives, and apply our approach to a complex industrial case study. Keywords-Embedded systems, critical path analysis, task graph. I...|$|R
40|$|In this paper, {{we first}} {{introduce}} a novel class of graphs, namely supergrid. Supergrid graphs include grid graphs and triangular grid graphs as their subgraphs. The Hamiltonian cycle and path problems for grid graphs and triangular grid graphs {{were known to}} be NP-complete. However, they are unknown for supergrid graphs. The Hamiltonian cycle (path) problem on supergrid graphs can be applied to control the stitching <b>traces</b> <b>of</b> computerized sewing <b>machines.</b> In this paper, we will prove that the Hamiltonian cycle problem for supergrid graphs is NP-complete. It is easily derived from the Hamiltonian cycle result that the Hamiltonian path problem on supergrid graphs is also NP-complete. We then show that two subclasses of supergrid graphs, including rectangular (parallelism) and alphabet, always contain Hamiltonian cycles...|$|R
40|$|By 2000, {{clubs in}} NSW Australia collectively {{operated}} around 75, 000 gaming machines or 8 per cent <b>of</b> high intensity <b>machines</b> worldwide. This study examines how these clubs have strategically managed {{the issue of}} problem gambling. Stage One <b>traces</b> the development <b>of</b> <b>machine</b> gambling in these not-for-profit venues and explains how increased commercialisation diminished their social contract and exacerbated problem gambling. Stage Two analyses how other factors also fuelled the emergence of problem gambling as a significant social issue. Stage Three considers the relevance of theoretical and applied models of social responsibility to NSW clubs in addressing problem gambling. The fourth and fifth stages draw on interviews, case studies and a survey to assess how NSW clubs interpreted their social responsibilities in gambling by the late 1990 s, while Stage Six assesses their congruence with stakeholder expectations. The seventh stage considers implications of key developments during the late 1990 s which saw the clubs 2 ̆ 7 stance evolve from reluctant acceptance to pragmatic involvement when faced with government inquiries and responsible gambling legislation...|$|R
40|$|A supergrid graph is {{a finite}} induced {{subgraph}} of the infinite graph {{associated with the}} two-dimensional supergrid. The supergrid graphs contain grid graphs and triangular grid graphs as subgraphs. The Hamiltonian cycle problem for grid and triangular grid graphs {{was known to be}} NP-complete. In the past, we have shown that the Hamiltonian cycle problem for supergrid graphs is also NP-complete. The Hamiltonian cycle problem on supergrid graphs can be applied to control the stitching <b>trace</b> <b>of</b> computerized sewing <b>machines.</b> In this paper, we will study the Hamiltonian cycle property of linear-convex supergrid graphs which form a subclass of supergrid graphs. A connected graph is called $k$-connected if there are $k$ vertex-disjoint paths between every pair of vertices, and is called locally connected if the neighbors of each vertex in it form a connected subgraph. In this paper, we first show that any 2 -connected, linear-convex supergrid graph is locally connected. We then prove that any 2 -connected, linear-convex supergrid graph contains a Hamiltonian cycle. Comment: 17 pages, 24 figur...|$|R
40|$|The {{commonly}} used plunger injection {{system in the}} microinjection molding (lIM) process has separate screw melting, metering, and injection units. As a result, extra operating parameters and complexity are introduced, in comparison with conventional injection molding. In this study, a lIM machine was used to obtain micromoldings of polyoxymethylene, high-density polyethylene, and polycarbonate. A data acquisition system was developed to record <b>traces</b> <b>of</b> data regarding the evolution of process variables with time. Cavity filling was followed, at the millisecond time scale, using short-shot experiments and <b>traces</b> <b>of</b> injection pressure, runner pressure, and plunger position. Six characteristic process parameters (CPPs) were defined to characterize both the cavity filling and packing stages. The method of design of experiments was used to investigate the effects <b>of</b> <b>machine</b> settings on the CPPs. Metering size, which was optimized for each set <b>of</b> <b>machine</b> variables, was also used as a CPP. Injection speed was the most significant factor affecting plunger velocity and injection pressure during cavity filling, while the effects of mold and melt temperature varied with the material and machine settings. Peer reviewed: YesNRC publication: Ye...|$|R
40|$|International audienceThis paper {{presents}} a new distributed computation model adapted to manycore processors. In this model, the run is {{spread on the}} available cores by fork machine instructions produced by the compiler, for example at function calls and loops iterations. This approach is to be opposed to the actual model of computation based on cache and predictor. Cache efficiency relies on data locality and predictor efficiency relies on the reproducibility of the control. Data locality and control reproducibility are less effective when the execution is distributed. The computation model proposed {{is based on a}} new core hardware. Its main features are described in this paper. This new core is the building block of a manycore design. The processor automatically parallelizes an execution. It keeps the computation deterministic by constructing a totally ordered <b>trace</b> <b>of</b> the <b>machine</b> instructions run. References are renamed, including memory, which fixes the communications and synchronizations needs. When a data is referenced, its producer is found in the trace and the reader is synchronized with the writer. This paper shows how a consumer can be located in the same core as its producer, improving parallel locality and parallelization quality. Our determin-istic and fine grain distribution of a run on a manycore processor is compared with OS primitives and API based parallelization (e. g. pthread, OpenMP or MPI) and to compiler automatic paralleliza-tion of loops. The former implies (i) a high OS overhead meaning that only coarse grain parallelization is cost-effective and (ii) a non deterministic behaviour meaning that appropriate synchronization to eliminate wrong results is a challenge. The latter is unable to fully parallelize general purpose programs due to structures like functions, complex loops and branches...|$|R
40|$|Protocols and the {{irreducible}} <b>traces</b> <b>of</b> embodiment: the Viterbi algorithm and {{the mosaic}} <b>of</b> <b>machine</b> time Introduction: machine time is non-lived? Machine time, {{it has often}} been argued in critical thought, is inhuman or non-lived time. Machine time is a relatively abstract, taken for granted term that refers to the speed at which mechanisms and devices carry out operations. Usually, responsibility for the deleterious and positive effects of technological speed is attributed to the high rat...|$|R
50|$|Another {{factor in}} stain removal {{is the fact}} that stains can {{sometimes}} comprise two separate staining agents, which require separate forms <b>of</b> removal. A <b>machine</b> oil stain could also contain <b>traces</b> <b>of</b> metal, for example.|$|R
40|$|International audienceBoolean {{reversible}} circuits are boolean circuits made of reversible elementary gates. Despite their constrained form, {{they can}} simulate any boolean function. The synthesis and validation of a reversible circuit simulating a given function {{is a difficult}} problem. In 1985, Bennett proposed to generate reversible circuits from <b>traces</b> <b>of</b> execution <b>of</b> Turing <b>machines.</b> In this paper, we propose a novel presentation of this approach, adapted to higher-order programs. Starting with a PCF-like language, we use a monadic representation <b>of</b> the <b>trace</b> <b>of</b> execution to turn a regular boolean program into a circuit-generating code. We show that a circuit <b>traced</b> out <b>of</b> a program computes the same boolean function as the original program...|$|R
40|$|Turing {{machines}} {{have been}} well studided {{in the context of}} Computability theory, looking at computations starting from a very specific state and a given input. We intend to study here Turing machines {{from the point of view}} of dynamical systems, that is consider Turing machines starting from any input, and any possible state. This model is very interesting from this point of view, and intimately linked with the dynamics of piecewise affine maps and area-preserving diffeomorphisms [4, 3] While most properties of the model are of course intrisically undecidable, it turns out that many dynamical properties, and more generally properties about its long term behaviour, are computable [2, 1]. Many of these properties can be obtained from the <b>trace</b> <b>of</b> the Turing <b>machine,</b> which consists in the sequences of states and symbols the machine visits. In fact, it is often sufficient to know where the machine is coming from instead of its exact state. This means many results may be formulated and proved for a larger class of dynamical systems, called abstract Turing machines, which share many properties with Turing machines, but for which the set of states is not visible (and may even be infinite albeit compact) The goal of the internship is to investigate this abstract model, and to formulate efficient criteria to decide whether a given abstract Turing machine corresponds to a concrete Turing <b>machine.</b> Knowledge <b>of</b> Computability Theory, in particular <b>of</b> Turing <b>machines,</b> is appreciated. Knowl-edge of Symbolic Dynamics, or basics of Topology, will be useful but is not required...|$|R
6000|$|... 311. I first {{repeated}} Wollaston's fourth experiment[A], {{in which}} the ends of coated silver wires are immersed in a drop of sulphate of copper. By passing the electricity <b>of</b> the <b>machine</b> through such an arrangement, that end in the drop which received the electricity became coated with metallic copper. One hundred turns <b>of</b> the <b>machine</b> produced an evident effect; two hundred turns a very sensible one. The decomposing action was however very feeble. Very little copper was precipitated, and no sensible <b>trace</b> <b>of</b> silver from the other pole appeared in the solution.|$|R
40|$|Simulation {{offers many}} {{benefits}} of studying the cache behavior of modern chip-multiprocessor architectures. Most existing full system simulators, however, have difficulties in simulating a virtualized x 86 host {{due to the}} lack of virtualization support or high runtime overhead caused by the complex pipelined CPU model. We propose a new framework to address these issues, called vC-SIMx 86, which enables full system simulation of the cache behavior of x 86 virtualization hosts. vCSIMx 86 splits the simulation process into two key steps – generating memory access traces and simulating the cache model. There are two main advantages of splitting the process: (i) the ability to leverage existing system emulation and cache simulation tools and (ii) reducing the overall cache simulation time. We identify and then demonstrate the required modifications to the system emulator (QEMU) and cache simulators (e. g., DineroIV) in order to facilitate support of virtualization. To validate the accuracy and effectiveness of vCSIMx 86, we (i) compare the memory access <b>traces</b> <b>of</b> an emulated <b>machine</b> with real program behavior and (ii) simulate cache models with different parameters. Moreover, we have defined a new classification scheme of cache misses as a case study for using vCSIMx 86. The evaluation results show that cache misses due to VM interference are an important factor to the cache performance...|$|R
40|$|Speedup {{learning}} is a branch <b>of</b> <b>machine</b> learning that studies learning mechanisms for speeding up problem solvers based on problem solving experience. The input to a speedup learner typically consists of observations of prior problem-solving experience, which may include <b>traces</b> <b>of</b> the problem solver’s operations and/or solutions to solved problems. The output is knowledge that the problem solver can exploit to find solutions more quickly than before learning without seriously effecting solution quality. The most distinctive feature of speedup learning, compared to most branches <b>of</b> <b>machine</b> learning, is that the learned knowledge does not provide the problem solver {{with the ability to}} solve new problem instances. Rather, the learned knowledge is intended solely to facilitate faster solution times compared to the solver without the knowledge. Motivation and Background Much of the work in computer science and especially artificial intelligence aims at developing practically efficient problem solvers for combinatoriall...|$|R
30|$|Type 1 attacks: In type 1 attacks, a {{customer}} or an outside attacker inside the virtual machine deletes, destroys, or manipulates {{his or her}} <b>traces</b> <b>of</b> files of incidents (e.g., access logs, rootkits, or temporary files) or hides evidence in slack space or other hiding places in the file systems [29]. The conventional collection method of IaaS clouds, which is taking snapshots, cannot preserve <b>traces</b> <b>of</b> type 1 attacks because the evidence may be removed or tampered with before acquisition <b>of</b> the virtual <b>machine’s</b> snapshot.|$|R
40|$|A central {{problem in}} multistrategy {{learning}} systems is {{the selection and}} sequencing <b>of</b> <b>machine</b> learning algorithms for particular situations. This is typically done by the system designer who analyzes the learning task and implements the appropriate algorithm or sequence of algorithms for that task. We propose {{a solution to this}} problem which enables an AI system with a library <b>of</b> <b>machine</b> learning algorithms to select and sequence appropriate algorithms autonomously. Furthermore, instead of relying on the system designer or user to provide a learning goal or target concept to the learning system, our method enables the system to determine its learning goals based on analysis of its successes and failures at the performance task. The method involves three steps: Given a performance failure, the learner examines a <b>trace</b> <b>of</b> its reasoning prior to the failure to diagnose what went wrong (blame assignment); given the resultant explanation of the reasoning failure, the learner posts explicit [...] ...|$|R
50|$|Different {{from the}} popular caching ideas in the memory hierarchy, this {{approach}} aims at an application-oriented caching mechanism, which adopts prediction-assisted prefetching based on given execution <b>traces</b> <b>of</b> applications. The designs of embedded systems are considered with a limited set of applications, such {{as a set of}} selected system programs in mobile phones or arcade games <b>of</b> amusement-park <b>machines.</b> Besides, SRAM capacity and computing power are constrained in the implementation.|$|R
40|$|Boolean {{reversible}} circuits are boolean circuits made of reversible elementary gates. Despite their constrained form, {{they can}} simulate any boolean function. The synthesis and validation of a reversible circuit simulating a given function {{is a difficult}} problem. In 1973, Bennett proposed to generate reversible circuits from <b>traces</b> <b>of</b> execution <b>of</b> Turing <b>machines.</b> In this paper, we propose a novel presentation of this approach, adapted to higher-order programs. Starting with a PCF-like language, we use a monadic representation <b>of</b> the <b>trace</b> <b>of</b> execution to turn a regular boolean program into a circuit-generating code. We show that a circuit <b>traced</b> out <b>of</b> a program computes the same boolean function as the original program. This technique has been successfully applied to generate large oracles with the quantum programming language Quipper. Comment: 21 pages. A shorter preprint has been accepted for publication in the Proceedings of Reversible Computation 2016. The final publication is available at [URL]...|$|R
5000|$|... str(T) = the {{ordinary}} <b>trace</b> <b>of</b> T0 0 &minus; {{the ordinary}} <b>trace</b> <b>of</b> T11.|$|R
2500|$|... where [...] is the <b>trace</b> <b>of</b> {{the matrix}} [...] Thus, we can express [...] in terms <b>of</b> the <b>trace</b> <b>of</b> powers of [...]|$|R
40|$|Reactive search {{techniques}} typically rely on {{the search}} history in order to adapt heuristics to the local conformation of the search space. By viewing search history as the <b>trace</b> <b>of</b> the optimization program, we aim to apply strategies for learning from example-traces, as developed in the fields <b>of</b> <b>machine</b> learning and inductive logic programming. We believe that Proof Tree Kernels, which we recently developed as a similarity measure between program traces, should provide a useful ingredient to fully exploit search histories. By retaining much of the structural information contained in traces, they can be employed to model the space conformation in order to appropriately adapt search heuristics or develop evaluation scores for candidate moves. ...|$|R
50|$|War in the Age <b>of</b> Intelligent <b>Machines</b> (1991) {{is a book}} by Manuel DeLanda, {{in which}} he <b>traces</b> the history <b>of</b> warfare {{and the history of}} technology.|$|R
5000|$|Fuchsian {{groups are}} {{discrete}} subgroups <b>of</b> [...] The <b>trace</b> <b>of</b> {{an element in}} [...] is well-defined up to sign (by taking the <b>trace</b> <b>of</b> an arbitrary preimage in [...] ) and the <b>trace</b> field <b>of</b> [...] is the field generated over [...] by the <b>traces</b> <b>of</b> all elements of [...] (see for example in [...] ).|$|R
50|$|The set of fair executions of I/O {{automaton}} A {{is represented}} by fairexecs(A). Let β be the <b>trace</b> <b>of</b> a fair execution of A. Then β is a fair <b>trace</b> <b>of</b> A. The set fair <b>traces</b> <b>of</b> A {{is represented by}} fairtraces(A).|$|R
40|$|Recent {{advances}} in genetics have allowed increasing acutely the capacities {{of the formation}} of reliable evidence in conducting forensic examinations. Thus, <b>traces</b> <b>of</b> biological origin are important sources of information about a crime. Currently, around the world, sexual offenses have increased, and among them are those in which the criminals use various detergents to remove <b>traces</b> <b>of</b> their crime. A feature of modern synthetic detergents is the presence of biological additives - enzymes. Enzymes purposefully destroy stains of biological origin. To study {{the nature and extent of}} the impact of modern washing powders on saliva stains on the physical evidence, specially prepared test specimens of different types of tissues to which saliva was applied have been examined. Materials and Methods: Washing <b>machines</b> <b>of</b> famous manufacturers of household appliances have been used with different production characteristics and advertised brands of washing powder for test washing. Over 3, 500 experimental samples were tested. After washing, the <b>traces</b> <b>of</b> saliva were identified using modern research methods of forensic medicine. Results: The influence was tested and the dependence of the use of different washing programs, types <b>of</b> washing <b>machines</b> and washing powders in the process <b>of</b> establishing saliva <b>trace</b> and identify <b>of</b> the stains on the physical evidence while washing was revealed. The results of experimental and practical expert studies have shown that in most cases it is not possible to draw the conclusions in the identification <b>of</b> saliva <b>traces</b> on physical evidence after washing. This is a consequence of the effect of biological additives and other additional factors on <b>traces</b> <b>of</b> saliva during washing. Conclusions: On the basis of the results of the study, the feasibility <b>of</b> saliva <b>traces</b> <b>of</b> the stains on physical evidence after washing is established. The use of modern molecular genetic methods makes it possible to partially solve the problems arising in the study of unlaundered evidence. Additional study of physical evidence after washing facilitates detection and investigation of sexual offenses against women and children...|$|R
500|$|<b>Traces</b> <b>of</b> Land, <b>Traces</b> <b>of</b> People: Contemporary Images of Ontario, Ontario Legislature, Queen’s Park, Toronto, Nov. 1999-July 2000 ...|$|R
50|$|The <b>trace</b> <b>of</b> the {{identity}} matrix is {{the dimension of}} the space; this leads to generalizations <b>of</b> dimension using <b>trace.</b> The <b>trace</b> <b>of</b> an idempotent matrix A (for which A2 = A) is the rank <b>of</b> A. The <b>trace</b> <b>of</b> a nilpotent matrix is zero.|$|R
40|$|The {{purpose of}} this paper is to discuss the inequalities for the <b>trace</b> <b>of</b> self-conjugate {{quaternion}} matrix. We present the inequality for eigenvalues and <b>trace</b> <b>of</b> self-conjugate quaternion matrices. Based on the inequality above, we obtain several inequalities for the <b>trace</b> <b>of</b> quaternion positive definite matrix. </p...|$|R
50|$|The {{rediscovery of}} the palace site began in the 1960s with the local Enfield Archaeological Society finding <b>traces</b> <b>of</b> Tudor vaulted brink drains, and <b>traces</b> <b>of</b> the royal apartments. Subsequent digs in 2004 and 2005 have {{revealed}} further <b>traces</b> <b>of</b> the palace and its associated outbuildings.|$|R
40|$|This paper {{introduces}} {{some key}} aspects <b>of</b> <b>machine</b> translation {{in order to}} situate {{the role of the}} bilingual lexicon in transfer-based systems. It then discusses the data-driven approach to extracting bilingual knowledge automatically from bilingual texts, <b>tracing</b> the processes <b>of</b> alignment at different levels of granularity. The paper concludes with some suggestions for future work. peer-reviewe...|$|R
