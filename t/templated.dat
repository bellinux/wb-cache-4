1726|10000|Public
5|$|Only recently, the {{assembly}} {{process of the}} 19S regulatory particle has been elucidated to considerable extent. The 19S regulatory particle assembles as two distinct subcomponents, the base and the lid. Assembly of the base complex is facilitated by four assembly chaperones, Hsm3/S5b, Nas2/p27, Rpn14/PAAF1, and Nas6/gankyrin (names for yeast/mammals). These assembly chaperones bind to the AAA-ATPase subunits and their main function {{seems to be to}} ensure proper assembly of the heterohexameric AAA-ATPase ring. To date it is still under debate whether the base complex assembles separately, whether {{the assembly}} is <b>templated</b> by the 20S core particle, or whether alternative assembly pathways exist. In addition to the four assembly chaperones, the deubiquitinating enzyme Ubp6/Usp14 also promotes base assembly, but it is not essential. The lid assembles separately in a specific order and does not require assembly chaperones.|$|E
25|$|Viral {{replication}} is nuclear, and is lysogenic. Entry {{into the}} host cell {{is achieved by}} attachment of the viral glycoproteins to host receptors, which mediates endocytosis. Replication follows the dsDNA bidirectional replication model. DNA <b>templated</b> transcription, with some alternative splicing mechanism is the method of transcription. Translation takes place by leaky scanning. The virus exits the host cell by , and budding.|$|E
25|$|Hoerni headed Amelco {{until the}} summer of 1963, and, after the {{conflict}} with the Teledyne owners, for three years headed Union Carbide Electronics. In July 1967, supported by the watch company Société Suisse pour l'Industrie Horlogère (the predecessor of Swatch Group) founded Intersil, the company that created the market for custom CMOS circuits. The circuits developed by Intersil for Seiko in 1969–1970 contributed {{to the rise of}} Japanese electronic watches. Intersil and Intel weren't competitors as Intel released a limited set of <b>templated</b> circuits for computers and sold them initially only in the U.S. market, whereas Intersil focused on custom CMOS circuits with low power consumption and sold them worldwide.|$|E
50|$|Facelets {{provides}} a facility for <b>templating.</b> A Facelets file can reference a master <b>template</b> and provide {{content for the}} placeholders this master <b>template</b> defines. The file that references such a <b>template</b> is called the <b>template</b> client. <b>Template</b> clients themselves can again {{be used as a}} <b>template</b> for other <b>template</b> clients and as such a hierarchy of <b>templates</b> can be created.|$|R
3000|$|... - There are {{two methods}} to {{register}} a template: <b>template</b> extraction and <b>template</b> upload. The function described in <b>Template</b> extraction from existing tenant extracts a valid <b>template</b> in an extraction case. In the other side, the <b>template</b> sharing function validates a <b>template</b> in a <b>template</b> upload case because a <b>template</b> {{described by a}} user may have format or logical errors.|$|R
5000|$|Although C++ <b>templates,</b> Java {{generics}}, and [...]NET generics {{are often}} considered similar, generics only mimic the basic behavior of C++ <b>templates.</b> Some {{of the advanced}} <b>template</b> features utilized by libraries such as Boost and STLSoft, and implementations of the STL itself, for <b>template</b> metaprogramming (explicit or partial specialization, default <b>template</b> arguments, <b>template</b> non-type arguments, <b>template</b> <b>template</b> arguments, ...) are not available with generics.|$|R
500|$|Fungal {{proteins}} exhibiting <b>templated</b> {{conformational change}} {{were discovered in}} the yeast Saccharomyces cerevisiae by Reed Wickner in the early 1990s. For their mechanistic similarity to mammalian prions, they were termed yeast prions. [...] Subsequent to this, a prion has also {{been found in the}} fungus Podospora anserina. These prions behave similarly to PrP, but, in general, are nontoxic to their hosts. Susan Lindquist's group at the Whitehead Institute has argued some of the fungal prions are not associated with any disease state, but may have a useful role; however, researchers at the NIH have also provided arguments suggesting that fungal prions could be considered a diseased state. There is mounting evidence that fungal proteins have evolved specific functions that are beneficial to the microorganism that enhance their ability to adapt to their diverse environments.|$|E
2500|$|The {{study of}} MOFs {{developed}} {{from the study of}} zeolites, except for the use of preformed ligands. MOFs and zeolites are produced almost exclusively by hydrothermal or solvothermal techniques, where crystals are slowly grown from a hot solution. In contrast with zeolites, MOFs are constructed from bridging organic ligands that remain intact throughout the synthesis. Zeolite synthesis often makes use of a [...] "template". Templates are ions that influence the structure of the growing inorganic framework. [...] Typical templating ions are quaternary ammonium cations, which are removed later. In MOFs, the framework is <b>templated</b> by the SBU (secondary building unit) and the organic ligands. A templating approach that is useful for MOFs intended for gas storage is the use of metal-binding solvents such as N,N-diethylformamide and water. In these cases, metal sites are exposed when the solvent is evacuated, allowing hydrogen to bind at these sites.|$|E
2500|$|Mammalian Orthoreovirus virions are non-enveloped with {{icosahedral}} symmetry {{created by}} a double-layered capsid reaching about 80nm wide. Each capsid contains 10 segments of double stranded RNA (dsRNA) genome. The inner capsid or core particle (T=2) contains five different proteins: σ2, λ1, λ2, λ3, and μ2 and is approximately 70nm in diameter. One hundred and twenty copies of the λ1 protein arranged in 12 decameric units make up the shell of the inner capsid structure. This shell is stabilized by {{one hundred and fifty}} copies of the σ2 protein that 'clamp' [...] adjacent λ1 monomers together. At the 12 five-fold axes of symmetry, pentamers of the λ2 protein form turret-like structures that protrudes {{from the surface of the}} shell. In the center of the λ2 turret a channel allows viral mRNAs to be extruded during transcription. The channel is 70Å at its base and 15Å at its narrowest point. [...] The core also contains within it twelve copies of λ3, the RNA-dependent RNA polymerase. One λ3 protein is found slightly offset from each of the twelve pentameric λ2 turrets. Closely associated with λ3 are one or two copies of μ2, a transcriptase cofactor. μ2 has been found to have some enzymatic functions, such as NTPase activity. The λ3 protein is responsible for transcription of the double-stranded RNA genome segments. Each transcript is threaded through the λ2 pentameric turret as it is being extruded. Guanylyltransferase enzmatic activity in the λ2 turret adds a 5' guanosine cap to the extruded mRNA. In addition, two methyltransferase domains found in the λ2 structure act to methylate the 7N position of the added guanosine and the 2' O of the first <b>templated</b> nucleotide, which in all cases is also a guanosine. The outer capsid (T=13) is composed of μ1 and σ3 proteins with λ2, in compound with σ1, interspersed around the capsid. It has been proposed that λ2 is involved in replication due to its placement at the fivefold axes and its ability to interact with λ3 in solution. σ1, a filamentous trimer extruding from the outer capsid, [...] is responsible for cell attachment by interacting with sialic acid and other entry receptors. μ1 and σ3 are both involved in the attachment and thus entry of the virus via receptor-mediated endocytosis involving the formation of clathrin-coated pits.|$|E
40|$|Are you {{confused}} {{about the difference}} between style <b>templates,</b> table <b>templates,</b> tagset <b>templates,</b> and graph <b>templates?</b> Do you wonder how they're all used with ODS? This paper provides an overview of all the different <b>template</b> types and how they're used with the Output Delivery System. From style and table <b>templates,</b> that first appeared with SAS ® 7 to the newest graph <b>templates</b> that appeared with SAS ® 9. 2, this paper will provide an overview and several concrete examples for each <b>template</b> type. Along the way, we'll also discuss the <b>template</b> garden (SASHELP. TMPLMST) where all the <b>templates</b> live, how to transplant your <b>templates</b> to a different garden, how to come up with your own new variety of <b>templates</b> (PROC <b>TEMPLATE),</b> and how to find your way to the new <b>template</b> garden (ODS PATH). New features of PROC <b>TEMPLATE</b> syntax (such as the IMPORT statement) will be highlighted...|$|R
50|$|In C++, class {{declarations}} can {{be generated}} from class <b>templates.</b> Such class <b>templates</b> represent a family of classes. An actual class declaration is obtained by instantiating the <b>template</b> {{with one or more}} <b>template</b> arguments. A <b>template</b> instantiated with a particular set of arguments is called a <b>template</b> specialization.|$|R
50|$|C++ uses <b>templates</b> {{to enable}} generic {{programming}} techniques. The C++ Standard Library includes the Standard <b>Template</b> Library or STL {{that provides a}} framework of <b>templates</b> for common data structures and algorithms. <b>Templates</b> in C++ may {{also be used for}} <b>template</b> metaprogramming, which is a way of pre-evaluating some of the code at compile-time rather than run-time. Using <b>template</b> specialization, C++ <b>Templates</b> are considered Turing complete.|$|R
5000|$|A minimal, <b>templated</b> Tapestry {{application}} needs only three files: ...|$|E
5000|$|Can use {{arbitrary}} websites as dictionaries via <b>templated</b> URL patterns ...|$|E
5000|$|... #Caption: The {{schematic}} presentation how the {{nucleic acid}} <b>templated</b> chemistry works within cells ...|$|E
50|$|Concepts are an {{extension}} to C++'s <b>templates,</b> published as an ISO Technical Specification ISO/IEC TS 19217:2015. They are named boolean predicates on <b>template</b> parameters, evaluated at compile time. A concept {{may be associated}} with a <b>template</b> (class <b>template,</b> function <b>template,</b> or member function of a class <b>template),</b> in which case it serves as a constraint: it limits the set of arguments that are accepted as <b>template</b> parameters.|$|R
40|$|The {{technological}} pluralism is {{an important}} challenge of the twenty-first century. A <b>template</b> is a computer document which has a basic format. It can be used many different times. A <b>template</b> is also a system that helps the source to arrange information on a computerscreen. Most web pages on web sites are based on <b>template</b> which is a file {{that serves as a}} starting point for a new document. The television <b>templates</b> also consist of interesting page transitions, easy-to-use content management systems, drop down menus, photo galleries, custom fonts, full screen background images, contact us forms, Google maps, social networking icons, rollover effects, photo galleries and so on. The users can click the link, and the item content displays within the context of its associated Portal <b>Template.</b> The portal <b>templates</b> for items are created through the same wizard that is used for creating Portal <b>Templates</b> for pages. The television <b>templates</b> are designed to deliver video but are equally suitable for photos or other multimedia. The television <b>templates</b> also offer a thoughtful arrangement of elements and color, fonts, effects, style, and layout to your plain slides via our <b>templates.</b> The television news channels adopt the new innovative customization of TV <b>template</b> evaluated by channels. The television <b>templates</b> facilitate better understanding and appreciation of the product and project requirements among the audience. The television <b>templates</b> basically include website <b>templates,</b> flash <b>templates,</b> e-commerce <b>templates,</b> Facebook <b>templates,</b> responsive <b>templates</b> and other <b>templates</b> which include amazing features...|$|R
2500|$|<b>Template</b> resource: web <b>templates</b> {{specified}} {{according to}} a <b>template</b> language; ...|$|R
5000|$|... #Caption: A cyclic metallo-porphyrin tetramer {{created by}} <b>templated</b> {{synthesis}} around a fifth porphyrin ...|$|E
50|$|Dna <b>templated</b> {{transcription}} is {{the method}} of transcription. Amoeba serve as the natural host.|$|E
5000|$|... #Caption: Structure of nickel-aquo nitrate {{complex of}} the ligand {{derived from the}} <b>templated</b> trimerization of 2-aminobenzaldehyde.|$|E
40|$|Fig. 1. In {{the optimum}} <b>template</b> {{selection}} model, 8 <b>templates</b> {{are used as}} <b>template</b> candidates; 3 of the <b>templates</b> and the target subject images are shown here; the hand-drawn ACC on the subject and <b>templates</b> are also displayed in color (paracingulate in red). Also shown are the normalized mutual information (MI) calculated by comparing the warped <b>template</b> with the target image, and the overlap ratios (ORs), calculated by comparing the automated segmentation with the ground truth manual segmentation. Fig. 2. Mean overlap ratios (OR) are compared when using individual <b>templates</b> (average of the mean OR over the 9 <b>templates)</b> against the optimal <b>template</b> method. Error bars were calculated as standard error {{of the difference between}} the mean OR of the optimal <b>template</b> and the individual <b>templates.</b> The OR for the Colin <b>template</b> is shown for comparison...|$|R
5000|$|<b>Template</b> parsing: Stags (a {{specific}} FuelPHP <b>template</b> engine) and Mustache <b>template</b> {{engines are}} included; drivers for Markdown, Smarty, Twig, Haml, Jade and Dwoo <b>template</b> engines.|$|R
30|$|When the above-described <b>template</b> {{matching}} is {{used for}} lattice rescoring in LVCSR, the computation and storage overheads are still high. However, certain redundancies in the training <b>templates</b> {{can be reduced to}} improve computation and storage efficiency. We propose three methods of <b>template</b> selection and compression to address this problem. In <b>template</b> selection, the goal is to choose a small subset of <b>templates</b> as the representatives for the full set of training <b>templates.</b> In <b>template</b> compression, new GMMs are generated for labeling the frames of the selected <b>template</b> representatives so as to better capture the information in the training <b>Templates.</b>|$|R
5000|$|A <b>templated</b> style system {{intended}} to simplify customisation {{and keep the}} PHP code separate from the HTML.|$|E
50|$|Viral {{replication}} is nucleo-cytoplasmic. Dna <b>templated</b> transcription is {{the method}} of transcription. Amoeba serve as the natural host.|$|E
5000|$|Los Filtros With {{birth of}} {{moderate}} <b>templated</b> waters, {{it is located}} to only 30 km from Camargo's city ...|$|E
30|$|CloudFormation and Heat do {{not have}} a {{mechanism}} of <b>template</b> sharing. Our TM server provides a function to share <b>templates</b> and facilitate <b>templates</b> re-use. For example, when a small business owner would like to build a shopping site, a System Integrator provides a verified Web 3 -tier structure <b>template,</b> then the small business owner selects the <b>template</b> and build the environment with one or two clicks. If we share <b>templates</b> unconditionally, there is a risk of malicious <b>template</b> spreading. Thus, it is necessary to limit a range of <b>template</b> sharing within contractual relationships. Here, we explain logics of <b>template</b> sharing.|$|R
40|$|A {{generalized}} {{kinetic model}} for dilute radical <b>template</b> polymerizations involving preferential monomer adsorption by the <b>template</b> and following classical kinetics is described. By simulation, {{the influence of}} preferential monomer adsorption and of various rate constants pertaining to complexation, <b>template</b> propagation, and <b>template</b> termination of growing chain radicals on the rate enhancement induced by a <b>template</b> was examined {{as a function of}} <b>template</b> concentration. This model has been applied to some known <b>template</b> polymerization systems. For some of these, <b>template</b> rate constants could be estimated by curve fitting to experimentally determined polymerization rate vs <b>template</b> concentration plots...|$|R
50|$|A <b>template</b> {{processor}} (also {{known as}} a <b>template</b> engine or <b>template</b> parser) is software designed to combine <b>templates</b> with a data model to produce result documents. The language that the <b>templates</b> are written in is {{known as a}} <b>template</b> language or <b>templating</b> language. For purposes of this article, a result document is any kind of formatted output, including documents, web pages, or source code (in source code generation), either in whole or in fragments. A <b>template</b> engine is ordinarily included {{as a part of a}} web <b>template</b> system or application framework, and may be used also as a preprocessor or filter.|$|R
5000|$|... #Caption: NMR Cryoporometry Pore Size Distribution for an SBA-15 <b>templated.</b> silica, using a Gibbs-Thomson {{calibration}} from sol-gel silicas.|$|E
5000|$|In prior {{versions}} of C++, only functions, classes or type aliases could be <b>templated.</b> C++14 now allows {{the creation of}} variables that are <b>templated.</b> An example given in the proposal is a variable [...] that can be read to get the value of pi for various types (e.g., [...] when read as an integral type; the closest value possible with , [...] or [...] precision when read as , [...] or , respectively; etc.).|$|E
5000|$|BackupPC SME Contrib is an add-on to SME Server {{that allows}} {{integration}} of BackupPC into the SME <b>templated</b> UI.|$|E
2500|$|C++ <b>templates</b> enable generic programming. C++ {{supports}} function, class, alias {{and variable}} <b>templates.</b> <b>Templates</b> may be parameterized by types, compile-time constants, and other <b>templates.</b> <b>Templates</b> are implemented by instantiation at compile-time. To instantiate a <b>template,</b> compilers substitute specific arguments for a <b>template's</b> parameters {{to generate a}} concrete function or class instance. Some substitutions are not possible; these are eliminated by an overload resolution policy described by the phrase [...] "Substitution failure is not an error" [...] (SFINAE). <b>Templates</b> are a powerful tool {{that can be used}} for generic programming, <b>template</b> metaprogramming, and code optimization, but this power implies a cost. <b>Template</b> use may increase code size, because each <b>template</b> instantiation produces a copy of the <b>template</b> code: one for each set of <b>template</b> arguments, however, this is the same or smaller amount of code that would be generated if the code was written by hand. This is in contrast to run-time generics seen in other languages (e.g., Java) where at compile-time the type is erased and a single <b>template</b> body is preserved.|$|R
3000|$|... are {{elements}} of fuzzy feedback MIN <b>template</b> and fuzzy feedback MAX <b>template,</b> fuzzy feed-forward MIN <b>template,</b> and fuzzy feed-forward MAX <b>template</b> in X-layer, respectively; p [...]...|$|R
40|$|Automatic <b>template</b> {{instantiation}} in DIGITAL C++ version 6. 0 {{employs a}} compile-time scheme that generates instantiation object files into a repository. This paper {{provides an overview}} of the C++ <b>template</b> facility and the <b>template</b> instantiation process, including manual and automatic instantiation techniques. It reviews the features of <b>template</b> instantiation in DIGITAL C++ and focuses on {{the development and implementation of}} automatic <b>template</b> instantiation in DIGITAL C++ version 6. 0. The <b>template</b> facility within the C++ language allows the user to provide a <b>template</b> for a class or function and then apply specific arguments to the <b>template</b> to specify a type or function. The process of applying arguments to a <b>template,</b> referred to as <b>template</b> instantiation, causes specific code to be generated to implement the functions and static data members of the instantiated <b>template</b> as needed by the program. Automatic <b>template</b> instantiation relieves the user of determining which <b>template</b> entities need to be instantiated and where they should be instantiated. In this paper, we review the C++ <b>template</b> facility and describe approaches to implementing automatic <b>template</b> instantiation. We follow that with a discussion of the facilities, rationale, and experience of the DIGITAL C++ automatic <b>template</b> instantiation support. We then describe the design of the DIGITAL C++ version 6. 0 automatic <b>template</b> instantiation facility and indicate areas to be explored for further improvement. C++ <b>Template</b> Facility The C++ language provides a <b>template</b> facility that allows the user to create a family of classes or functions that are parameterized by type. 1, 2 For example, a user may provide a Stack <b>template,</b> which defines a stack class for its argument type. Consider the following <b>template</b> declaration: <b>template</b> class Stack { T *top_of_stack; public: void push (T arg); void pop (T & arg); The act of applying the arguments to the <b>template</b> is referred to as <b>template</b> instantiation. An instantiation of a <b>template</b> creates a new type or function that is defined for the specified types. Stack creates a class that provides a stack of the type int. Stack creates a class that provides a stack of user_class. The types int and user_class are the arguments for the <b>template</b> Stack...|$|R
