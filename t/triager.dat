21|16|Public
40|$|A key {{collaborative}} hub {{for many}} software development projects {{is the issue}} tracking system, or bug repository. The use of a bug repository can improve the software devel-opment process {{in a number of}} ways including allowing developers who are geographically distributed to communicate about project development. However, reports added to the repository need to be triaged by a human, called the <b>triager,</b> to determine if reports are meaningful. If a report is meaningful, the <b>triager</b> decides how to organize the report for integration into the project's development process. We call <b>triager</b> decisions with the goal of determining if a report is meaningful, repository-oriented decisions, and <b>triager</b> decisions that organize reports for the development process, development-oriented decisions. Triagers can become overwhelmed by the number of reports added to the repository. Time spent triaging also typically diverts valuable resources away from the improvement of the product to the managing of the development process. To assist triagers, this dissertation presents a machine learning approach to create recommenders that assist with a variety of development-oriented decisions. In this way, we strive to reduce human involvement i...|$|E
40|$|An {{open source}} project {{typically}} maintains an open bug repository so that bug reports {{from all over}} the world can be gathered. When a new bug report is submitted to the repository, a person, called a <b>triager,</b> examines whether it is a duplicate of an existing bug report. If it is, the <b>triager</b> marks it as DUPLICATE and the bug report is removed from consideration for further work. In the literature, there are approaches exploiting only natural language information to detect duplicate bug reports. In this paper we present a new approach that further involves execution information. In our approach, when a new bug report arrives, its natural language information and execution information are compared with those of the existing bug reports. Then, a small number of existing bug reports are suggested to the <b>triager</b> as the most similar bug reports to the new bug report. Finally, the <b>triager</b> examines the suggested bug reports to determine whether the new bug report duplicates an existing bug report. We calibrated our approach on a subset of the Eclipse bug repository and evaluated our approach on a subset of the Firefox bug repository. The experimental results show that our approach can detect 67 %- 93 % of duplicate bug reports in the Firefox bug repository, compared to 43 %- 72 % using natural language information alone...|$|E
40|$|Abstract—We {{present an}} {{approach}} to identify duplicate bug reports expressed in free-form text. Duplicate reports needs to be identified to avoid a situation where duplicate reports get assigned to multiple developers. Also, duplicate reports can contain complementary information which can be useful for bug fixing. Automatic identification of duplicate reports (from thousands of existing reports in a bug repository) can increase the productivity of a <b>Triager</b> by {{reducing the amount of}} time a <b>Triager</b> spends in searching for duplicate bug reports of any incoming report. The proposed method uses character N-gram-based model for the task of duplicate bug report detection. Previous approaches are word-based whereas this study investigates the usefulness of low-level features based on characters which have certain inherent advantages (such as natural-language independence, robustness towards noisy data and effective handling of domain specific term variations) over word-based features for the problem of duplicate bug report detection. The proposed solution is evaluated on a publicly-available dataset consisting of more than 200 thousand bug reports from the open-source Eclipse project. The dataset con-sists of ground-truth (pre-annotated dataset having bug reports tagged as duplicate by the <b>Triager).</b> Empirical results and evaluation metrics quantifying retrieval performance indicate that the approach is effective...|$|E
40|$|Abstract—Triage is {{of great}} {{interest}} in software projects because {{it has the potential}} to reduce developer effort by involving a broader base of non-developer contributors to filter and augment reported issues. Using issue tracking data and interviews with experienced contributors we investigate ways to quantify the impact of <b>triagers</b> on reducing the number of issues developers need to resolve in two OSS projects: Mozilla and Gnome. We find the primary impact of <b>triagers</b> to involve issue filtering, filling missing information, and determining the relevant product. While <b>triagers</b> were good at filtering invalid issues and as accurate as developers in filling in missing issue attributes, they had more difficulty accurately pinpointing the relevant product. We expect that this work will highlight the importance of issue triage in software projects and will help design further studies on understanding and improving triage practices. I...|$|R
40|$|Bug triaging is an {{important}} activity in any software development project. It involves <b>triagers</b> working through the set of unassigned bugs, determining {{for each of the}} bugs whether it represents a new issue that should receive attention, and, if so, assigning it to a developer and a milestone. Current bug tracking tools provide only minimal support for bug triaging, and especially break down when users must triage a large number of bug reports, since those reports can only be viewed one-by-one. This dissertation seeks to further our understanding of bug triaging, particularly the conjecture that allowing <b>triagers</b> to work and organize bugs in sets better matches {{what they want to do}} when they triage. Our vehicle for exploring this conjecture is PorchLight, a prototype triaging environment that uses tags, assigned to individual bug reports by queries expressed in a specialized bug tagging language, to organize bug reports into meaningful sets so <b>triagers</b> can more easily explore, organize, and ultimately work with bugs in sets. We describe the current challenges in supporting bug triaging, the design decisions upon which PorchLight rests, and the technical aspects of the implementation. We conducted two studies using PorchLight. The first was a preliminary user study to test the concept, assess the usability of the tool, and to determine if <b>triagers</b> would be able to employ the basic features. The second was a participant observation study with four participants over a set of six sessions in which we engaged them in discussions about their approach to triaging, and performed triaging using bugs from projects with which they were familiar. Our study led to several key findings. We found that triaging can be a highly context-dependent activity that varies between individuals and projects. Through our discussions with the participants, we also uncovered latent workflows that were realized through the exploration of bugs in sets. Finally, the ability to directly work with bugs in sets rather than individually seems to have enabled <b>triagers</b> to both think about, and work with, bugs more naturally, particularly when there are a large number of bugs that need to be triaged...|$|R
40|$|This article {{describes}} a think-aloud study conducted to identify {{factors that influence}} the decisions made by digital reference "triagers" when performing triage on questions received by digital reference services. This study follows and expands on a Delphi study that identified factors that <b>triagers</b> agreed on after the fact of their performance of triage by identifying factors that <b>triagers</b> take into consideration during their performance of question triage. Thirty-eight factors that influence triage decisions were identified, in eight categories. Eight of these factors are intrinsic to the question itself; the remaining thirty factors are extrinsic to the question, situating it in a context for the user and the service. These factors {{must be taken into}} consideration by any future system for automated triage...|$|R
40|$|Open source {{projects}} incorporate bug triagers to {{help with}} the task of bug report assignment to developers. One of the tasks of a <b>triager</b> is to identify whether an incoming bug report is a duplicate of a pre-existing report. In order to detect duplicate bug reports, a <b>triager</b> either relies on his memory and experience or on the search capabilties of the bug repository. Both these approaches can be time consuming for the <b>triager</b> and may also lead to the misidentication of duplicates. It has also been suggested that duplicate bug reports are not necessarily harmful, instead they can complement each other to provide additional information for developers to investigate the defect at hand. This motivates the need for automated or semi-automated techniques for duplicate bug detection. In the literature, two main approaches have been proposed to solve this problem. The first approach is to prevent duplicate reports from reaching developers by automatically filtering them while the second approach deals with providing the <b>triager</b> a list of top-N similar bug reports, allowing the <b>triager</b> to compare the incoming bug report with the ones provided in the list. Previous works have tried to enhance the quality of the suggested lists, but the approaches either suffered a poor Recall Rate or they incurred additional runtime overhead, making the deployment of a retrieval system impractical. To the extent of our knowledge, there has been little work done to do an exhaustive comparison of the performance of different Information Retrieval Models (especially using more recent techniques such as topic modeling) on this problem and understanding the effectiveness of different heuristics across various application domains. In this thesis, we compare the performance of word based models (derivatives of the Vector Space Model) such as TF-IDF, Log-Entropy with that of topic based models such as Latent Semantic Indexing (LSI), Latent Dirichlet Allocation (LDA) and Random Indexing (RI). We leverage heuristics that incorporate exception stack frames, surface features, summary and long description from the free-form text in the bug report. We perform experiments on subsets of bug reports from Eclipse and Firefox and achieve a recall rate of 60 % and 58 % respectively. We find that word based models, in particular a Log-Entropy based weighting scheme, outperform topic based ones such as LSI and LDA. Using historical bug data from Eclipse and NetBeans, we determine the optimal time frame for a desired level of duplicate bug report coverage. We realize an Online Duplicate Detection Framework that uses a sliding window of a constant time frame as a first step towards simulating incoming bug reports and recommending duplicates to the end user...|$|E
40|$|Abstract—Bug {{assignment}} in large software projects is typically a time-consuming and tedious task; effective assignment requires that bug triagers hold significant contextual information {{about both the}} reported bugs and the pool of available developers. In this paper, we propose an auction-based multiagent mechanism for assigning bugs to developers that is intended to minimize backlogs and overall bug lifetime. In this approach, developers and triagers are both modeled as intelligent software agents working on behalf of individuals in a multiagent environment. Upon receiving a bug report, <b>triager</b> agents auction off the bug and collect the requests. Developer agents compute their bids {{as a function of}} the developer’s profile, preferences, current schedule of assigned bugs, and estimated time-to-fix of the bug. This value is then sent to the <b>triager</b> agent for the final decision. We use the Eclipse and Firefox bug repositories to validate our approach; our studies suggest that the proposed auction-based multiagent mechanism can improve the bug assignment process compared to currently practised methods. In particular, we found a 16 % improvement in the number of fixed bugs compared to the historic data, based on a sample size of 213, 000 bug reports over a period of 6 years. Index Terms—Multiagent system, market mechanism, bug lifetime, bug repositories I...|$|E
40|$|The role of triage {{in digital}} {{forensics}} is disputed, with some practitioners questioning its reliability for identifying evidential data. Although successfully {{implemented in the}} field of medicine, triage has not established itself to the same degree in digital forensics. This article presents a novel approach to triage for digital forensics. Case-Based Reasoning Forensic <b>Triager</b> (CBR-FT) is a method for collecting and reusing past digital forensic investigation information in order to highlight likely evidential areas on a suspect operating system, thereby helping an investigator to decide where to search for evidence. The CBR-FT framework is discussed and the results of twenty test triage examinations are presented. CBR-FT {{has been shown to be}} a more effective method of triage when compared to a practitioner using a leading commercial application...|$|E
40|$|Pediatricians spend a {{considerable}} amount of time handling medical problems by telephone. A program was developed to provide decision support, standardization of practice and documentation for pediatric telephone <b>triagers.</b> Written in HyperCard® the program allows rapid access to protocols and a simplified mechanism for documentation of findings. Obstacles to implementation are reviewed...|$|R
40|$|Abstract—Bugs are prevalent. To improve {{software}} quality, developers often allow {{users to}} report bugs {{that they found}} using a bug tracking system such as Bugzilla. Users would specify among other things, {{a description of the}} bug, the component that is affected by the bug, and the severity of the bug. Based on this information, bug <b>triagers</b> would then assign a priority level to the reported bug. As resources are limited, bug reports would be investigated based on their priority levels. This priority assignment process however is a manual one. Could we do better? In this paper, we propose an automated approach based on machine learning that would recommend a priority level based on information available in bug reports. Our approach considers multiple factors, temporal, textual, author, related-report, severity, and product, that potentially affect the priority level of a bug report. Thes...|$|R
40|$|Assigning newly {{reported}} bugs {{to project}} developers is a time-consuming and tedious task for <b>triagers</b> using the traditional manual bug triage process. Previous efforts for creating automatic bug assignment systems use machine learning and information-retrieval techniques. These approaches commonly use tf-idf, a statistical computation technique for weighting terms based on term frequency. However, tf-idf {{does not consider}} the metadata, such as the time frame at which a term was used, when calculating {{the weight of the}} terms. This study proposes an alternate term-weighting technique to improve the accuracy of automatic bug assignment approaches that use a term-weighting technique. This technique includes the use of metadata in addition to the statistical computation to calculate the term weights. Moreover, it restricts the set of terms used to only nouns. It was found that when using only nouns and the proposed term-weighting technique, the accuracy of an automatic bug assignment approach improves from 12 to 49 % over tf-idf for three open-source projects...|$|R
40|$|Abstract—An {{efficient}} bug management {{process is}} critical {{for the success of}} software projects. Prior work has focused on improving this process, for example, by automating bug triag-ing, detecting duplicate bugs, and understanding the rationale for re-opening bugs. This paper continues this line of work by exploring the people who are involved in the bug management process. In particular we develop four patterns that distill the different relations between the people involved in the process: the reporter, <b>triager,</b> and fixer of a bug. Through a case study on the Eclipse Platform and JDT projects, we demonstrate that these patterns {{have an impact on the}} efficiency of the bug management process. For example, we find that using our patterns project personnel can improve their efficiency through better communication about bugs before assigning them. I...|$|E
40|$|In {{open-source}} {{software development}} a new bug firstly is found by developers or users. Then the bug {{is described as}} a bug report, which is submitted to a bug repository. Finally the bug <b>triager</b> checks the bug report and typically assigns a developer to fix the bug. The assignment process is time-consuming and error-prone. Furthermore, a large number of bug reports are tossed (reassigned) to other developers, which increases bug-fix time. In order to quickly identify the fixer to bug reports we present an approach based on the bug tossing history and textual similarities between bug reports. This proposed approach is evaluated on Eclipse and Mozilla. The results show that our approach can significantly improve the efficiency of bug assignment: the bug fixer is often identified with fewer tossing events. </p...|$|E
40|$|Abstract- Duplicate bug report {{describes}} {{problems for}} which there is already a report in a bug repository. For many open source projects, the number of duplicate reports represents a significant percentage of the repository, so automatic identification of duplicate reports are very important and need let’s avoid wasting time a <b>triager</b> spends in searching for duplicate bug reports of any incoming report. In this paper we want to present a novel approach which it can help better of duplicate bug report identification. The proposed approach has two novel features: firstly, use n-gram features for the task of duplicate bug report detection. Secondly, apply cluster shrinkage technique to improve the detection performance. We tested our approach on three popular open source projects: Apache, Argo UML, and SVN. We have also conducted empirical studies. The experimental results show that the proposed scheme can effectively improve the detection performance compared with previous methods...|$|E
40|$|Univ SE Calif, Ctr Syst & Software Engn, ABB, Microsoft Res, IEEE, ACMSIGSOFT, N Carolina State Univ Comp SciBug {{assignment}} {{is an important}} step in bug life-cycle management. In large projects, this task would consume a substantial amount of human effort. To compare with the previous studies on automatic bug assignment in FOSS (Free/Open Source Software) projects, we conduct a case study on a proprietary software project in China. Our study consists of two experiments of automatic bug assignment, using Chinese text and the other non-text information of bug data respectively. Based on text data of the bug repository, the first experiment uses SVM to predict bug assignments and achieve accuracy close to that by human <b>triagers.</b> The second one explores the usefulness of non-text data in making such prediction. The main results from our study includes that text data are most useful data in the bug tracking system to triage bugs, and automation based on text data could effectively reduce the manual effort...|$|R
40|$|The {{number of}} bug reports in complex {{software}} increases dramatically. Now bugs are triaged manually, bug triage or assignment is a labor-intensive and time-consuming task. Without {{knowledge about the}} structure of the software, testers often specify the component of a new bug wrongly. Meanwhile, it is difficult for <b>triagers</b> to determine the component of the bug only by its description. We dig out the components of 28, 829 bugs in Eclipse bug project have been specified wrongly and modified at least once. It results in these bugs have to be reassigned and delays the process of bug fixing. The average time of fixing wrongly-specified bugs is longer than that of correctly-specified ones. In order to solve the problem automatically, we use historical fixed bug reports as training corpus and build classifiers based on support vector machines and Naïve Bayes to predict the component of a new bug. The best prediction accuracy reaches up to 81. 21...|$|R
40|$|Individual {{contribution}} {{and performance}} assessment is a stan-dard practice conducted in organizations {{to measure the}} value addition by various contributors. Accurate measure-ment of individual contributions based on pre-defined ob-jectives, roles and Key Performance Indicators (KPIs) is a challenging task. In this paper, we propose a contribution and performance assessment framework (called as Samik-sha) {{in the context of}} Software Maintenance. The focus of the study presented in this paper is Software Maintenance Activities (such as bug fixing and feature enhancement) per-formed by bug reporters, bug <b>triagers,</b> bug fixers, software developers, quality assurance and project managers facili-tated by an Issue Tracking System. We present the result of a survey that we conducted to un-derstand practitioner’s perspective and experience (specifi-cally on the topic of contribution assessment for software maintenance professionals). We propose several performance metrics covering different aspects (such as number of bugs fixed weighted by priority and quality of bugs reported) and various roles (such as bug reporter and bug fixer). We con-duct a series of experiments on Google Chromium Project data (extracting data from the issue tracker for Google Chr-omium Project) and present results demonstrating the ef-fectiveness of our proposed framework...|$|R
40|$|Duplicate bug reports, reports which {{describe}} {{problems or}} enhancements {{for which there}} is already a report in a bug repository, consume time of bug triagers and software developers that might better be spent working on reports that describe unique requests. For many open source projects, the number of duplicate reports represents a significant percentage of the repository, numbering in the thousands of reports for many projects. In this thesis, we introduce an approach to suggest potential duplicate bug reports to a bug <b>triager</b> who is processing a new report. We tested our approach on four popular open source projects, achieving the best precision and recall rates of 29 % and 50 % respectively on reports from the popular Firefox open source project. We report on a user study in which we investigated whether our approach can help novice bug triagers process reports from the Firefox repository. Despite the relatively low precision and recall rates of our approach, we found that its use does increase the duplicate detection accuracy of novice bug triagers, while significantly reducing th...|$|E
40|$|AbstractDue to {{increase}} in demands of software and decreased delivery span of software, assuring the quality of software is becoming a challenge. However, no software can claim to be error free due {{to the complexity of}} software and inadequate testing. There is a well-known principle of testing, which states that exhaustive testing is impossible. Hence, maintenance activities are required to ensure smooth functioning of the software. Many open source software provides bug tracking systems to aid corrective maintenance task. These bug tracking systems allow users to report the bugs that are encountered while operating the software. However, in software maintenance, severity prediction has gained much attention recently. Bugs having higher severity should be fixed prior to the bugs having lesser severity. <b>Triager</b> analyzes the bug reports and assesses the severity based upon his/her knowledge and experience. But due to the presence {{of a large number of}} bug reports, it becomes a tedious job to manually assign severity. Thus, there is growing need for making the whole process of severity prediction automatic. The paper presents an approach of creating a dictionary of critical terms specifying severity using two different feature selection methods, namely- info gain and Chi square and classification of bug reports are performed using Naïve Bayes Multinomial (NBM) and K-nearest neighbor (KNN) algorithms...|$|E
40|$|AbstractBug {{resolution}} in Open Source Software {{is an important}} aspect of Open Source Software management. Bug {{resolution in}}volves reporting a bug, triaging a bug and solving a bug. The task of solving a bug is analogous to problem solving in a Resolution Network. The duty of the <b>triager</b> is to identify the member with correct expertise to solve the bug as well as to identify any other member to whom the bug has to be tossed when the member is unable to solve the bug. The member though, may not have solved the bug, but may have made a significant contribution towards solving it in terms of fixing its severity, making comments, fixing its component etc. Th e work done by that member needs to be preserved. In addition, automated support is needed to find the optimal set of developers who can collaborate on a given bug. The order in which the bug can be tossed among the set of developers needs to be established. The current techniques in Open Source Software Bug Triaging involves modeling the reassignment of bugs as a goal-oriented path model. A new framework with the additional capabilities is proposed. The proposed framework models the reassignment of bugs as Enriched Adaptive Bug Triaging System (EABTS) based on actual path model...|$|E
40|$|Abstract—The {{number of}} bug reports in complex {{software}} increases dramatically. Since bugs are still triaged manually, bug triage or assignment is a labor-intensive and time-consuming task. Without {{knowledge about the}} structure of the software, testers often specify the component of a new bug incorrectly. Meanwhile, it is difficult for <b>triagers</b> to determine the component of the bug only by its description. For instance, we dig out the components of 28, 829 bugs from the Eclipse bug project, which have been specified incorrectly and modified at least once, and indicated that these bugs have to be reassigned and the process of bug fixing has to be delayed. The average time of fixing incorrectly specified bugs is longer than that of correctly specified ones. In order to solve the problem automatically, we use historical fixed bug reports as training corpus and build classifiers based on support vector machines and Naïve Bayes to predict the component of a new bug. The best predicting precision reaches up to 81. 21 % on our validation corpus of Eclipse project. Index Terms—bug reports, bug triage, text classification, predictive model I...|$|R
40|$|Abstract—Duplicate defects put extra {{overheads}} {{on software}} organizations, {{as the cost}} and effort of managing duplicate defects are mainly redundant. Due {{to the use of}} natural language and various ways to describe a defect, it is usually hard to investigate duplicate defects automatically. This problem is more severe in large software organizations with huge defect repositories and massive number of defect reporters. Ideally, an efficient tool should prevent duplicate reports from reaching developers by automatically detecting and/or filtering duplicates. It also should be able to offer defect <b>triagers</b> a list of top-N similar bug reports and allow them to compare the similarity of incoming bug reports with the suggested duplicates. This demand has motivated us to design and develop a search-based duplicate bug detection framework at BlackBerry. The approach follows a generalized process model to evaluate and tune the performance of the system in a systematic way. We have applied the framework on software projects at BlackBerry, in addition to the Mozilla defect repository. The experimental results exhibit the performance of the developed framework and highlight the high impact of parameter tuning on its performance...|$|R
40|$|Abstract—In this paper, {{we propose}} a novel {{approach}} for assisting human bug <b>triagers</b> in large open source software projects by semi-automating the bug assignment process. Our approach employs a simple and efficient n-gram-based algorithm for approximate string matching on the character level. We propose and implement a recommender prototype which collects the natural language textual information available in the summary and description fields of the previously resolved bug reports and classifies that information {{in a number of}} separate inverted lists with respect to the resolver of each issue. These inverted lists are considered as vocabulary-based expertise and interest models of the developers. Given a new bug report, the recommender creates all possible n-grams of the strings, evaluates their similarities to the available expertise models concerning a number of well-known string similarity measures, namely Cosine, Dice, Jaccard and Overlap coefficients. Finally, the top three developers are recommended as proper candidates for resolving this new issue. Experimental results on 5200 bug reports of the Eclipse JDT project show weighted average precision value of 90. 1 % and weighted average recall value of 45. 5 %. Keywords-software deployment and maintenance; semiautomated bug triage; approximate string retrieval; open source software. I...|$|R
40|$|Software bugs are {{inevitable}} and bug fixing {{is an essential}} and costly phase during software development. Such defects are often reported in bug reports which are stored in an issue tracking system, or bug repository. Such reports need to be assigned to the most appropriate developers who will eventually fix the issue/bug reported. This process is often called Bug Triaging. Manual bug triaging is a difficult, expensive, and lengthy process, since it needs the bug <b>triager</b> to manually read, analyze, and assign bug fixers for each newly reported bug. Triagers can become overwhelmed {{by the number of}} reports added to the repository. Time and efforts spent into triaging typically diverts valuable resources away from the improvement of the product to the managing of the development process. To assist triagers and improve the bug triaging efficiency and reduce its cost, this thesis proposes Bugzie, a novel approach for automatic bug triaging based on fuzzy set and cachebased modeling of the bug-fixing capability of developers. Our evaluation results on seven large-scale subject systems show that Bugzie achieves significantly higher levels of efficiency and correctness than existing state-of-the-art approaches. In these subject projects, Bugzie 2 ̆ 7 s accuracy for top- 1 and top- 5 recommendations is higher than those of the second best approach from 4 - 15...|$|E
40|$|Bug {{repositories}} {{are usually}} maintained in software projects. Testers or users submit bug reports to identify various issues with systems. Sometimes {{two or more}} bug reports correspond to the same defect. To address the problem with duplicate bug reports, a person called a <b>triager</b> needs to manually label these bug reports as duplicates, and link them to their ”master ” reports for subsequent maintenance work. However, in practice there are considerable duplicate bug reports sent daily; requesting triagers to manually label these bugs could be highly time consuming. To address this issue, recently, several techniques have be proposed using various similarity based metrics to detect candidate duplicate bug reports for manual verification. Automating triaging has been proved challenging as two reports of the same bug could be written in various ways. There is still much room for improvement in terms of accuracy of duplicate detection process. In this paper, we leverage recent advances on using discriminative models for information retrieval to detect duplicate bug reports more accurately. We have validated our approach on three large software bug repositories from Firefox, Eclipse, and OpenOffice. We show that our technique could result in 17 – 31 %, 22 – 26 %, and 35 – 43 % relative improvement over state-of-the-art techniques in OpenOffice, Firefox, and Eclipse datasets respectively using commonly available natural language information only...|$|E
40|$|International audienceFor {{complex and}} popular software, project teams could receive {{a large number}} of bug reports. It is often tedious and costly to {{manually}} assign these bug reports to developers who have the expertise to fix the bugs. Many bug triage techniques have been proposed to automate this process. In this pa-per, we describe our study on applying conventional bug triage techniques to projects of different sizes. We find that the effectiveness of a bug triage technique largely depends on the size of a project team (measured {{in terms of the number}} of developers). The conventional bug triage methods become less effective when the number of developers increases. To further improve the effectiveness of bug triage for large projects, we propose a novel recommendation method called BugFixer, which recommends developers for a new bug report based on historical bug-fix in-formation. BugFixer constructs a Developer-Component-Bug (DCB) network, which models the relationship between developers and source code components, as well as the relationship be-tween the components and their associated bugs. A DCB network captures the knowledge of "who fixed what, where". For a new bug report, BugFixer uses a DCB network to recommend to <b>triager</b> a list of suitable developers who could fix this bug. We evaluate BugFixer on three large-scale open source projects and two smaller industrial projects. The experimental results show that the proposed method outperforms the existing methods for large projects and achieves comparable performance for small projects...|$|E
40|$|Bugs are prevalent. To improve {{software}} quality, developers often allow {{users to}} report bugs {{that they found}} using a bug tracking system such as Bugzilla. Users would specify among other things, {{a description of the}} bug, the component that is affected by the bug, and the severity of the bug. Based on this information, bug <b>triagers</b> would then assign a priority level to the reported bug. As resources are limited, bug reports would be investigated based on their priority levels. This priority assignment process however is a manual one. Could we do better? In this paper, we propose an automated approach based on machine learning that would recommend a priority level based on information available in bug reports. Our approach considers multiple factors, temporal, textual, author, related-report, severity, and product, that potentially affect the priority level of a bug report. These factors are extracted as features which are then used to train a discriminative model via a new classification algorithm that handles ordinal class labels and imbalanced data. Experiments on more than a hundred thousands bug reports from Eclipse show that we can outperform baseline approaches in terms of average F-measure by a relative improvement of 58. 61 %...|$|R
40|$|Akut insjuknande patienter söker vård via akutmottagningen där bedömning av patientens hälsotillstånd sker vilket benämns som <b>triagering.</b> Akutmottagningens miljö utmärks av ett hektiskt arbetstempo som kan upplevas främmande och skrämmande för den inkomna patienten. Den stressiga miljön kan påverka det fysiska, psykiska och emotionella välmåendet och trigga stresspåslaget hos patienterna. Syftet med litteraturstudien var att undersöka patientens upplevelse av stressfaktorer på en akutmottagning. Metoden genomfördes som en litteraturstudie genom strukturerade sökningar efter vetenskapliga artiklar som analyserades och sammanställdes i ett resultat vilket skapade en ökad förståelse för problemområdet. Utifrån tio resultatartiklar genererades fyra teman som berörde stressfaktorer ur olika aspekter. De teman som uppkom var Miljöns påverkan, Psykisk påverkan, Väntetid och brist på {{information}} samt Sjuksköterskans påverkan. En betydande slutsats från resultatet är att sjuksköterske - patientrelationen är en viktig del i att förbättra patientens upplevelse och för att patienten ska känna förtroende, tillit samt solidaritet till sjuksköterskan. Lärdom från litteraturstudien kan utvinnas och sjuksköterskan kan erhålla bättre förutsättningar att bemöta patienten.  Acutely {{ill patients}} seek care through the emergency department, where {{assessment of the}} patient's health status occurs which is called triage. The environment of the emergency department {{is characterized by a}} hectic work pace that may feel foreign and frightening for the incoming patient. The stressful environment may influence the physical, mental and emotional well-being of the patient and trigger stress. The aim {{of this study was to}} investigate the patient's experience of stress factors at an emergency department. The method emerged as a literature study through structured searches for scientific articles, which were analyzed and compiled in a result that created a greater understanding of the problem. Based on the results of ten articles, four themes were generated which referred to stressors from different aspects. The themes that emerged was the environmental impact, psychological impact, waiting time and lack of information and the nurse impact. A significant conclusion from the result is that the nurse–patient relationship is an important part of improving the patient experience and make the patient feel confidence, trust and solidarity to the nurse. Knowledge from the literature study can be extracted which may improve the nurse’s encounter with the patient. ...|$|R
40|$|Aims: To {{describe}} {{the presence of}} trauma team activation and outcomes of health care interventions in two trauma team levels. Background: Trauma {{is the most common}} cause of death among Swedish men aged < 44 years. Every year ca 4500 people in Sweden dies due to trauma. During the 90 ’s, hospitals in USA developed a two level trauma activation algorithm to speed up the initial assessment for the injured patients who needed it, and to conserve resources when patients didn’t need to see the full trauma team. Design: This study is a retrospective records audit over trauma team activations during 2 years. Methods: This study audited trauma team activations through medical records during the period 1 / 1 2013 - 31 / 12 2014 on Norrlands university hospital in Umeå, Sweden. Results: Of all the trauma team activations 35 % activated the large trauma team and 65 % the small trauma team. Average age was 44 years and 61 % of the patients were men while 39 % were women. 36, 3 % of the large trauma team activations were in need of anaesthesiological interventions and 1 % of the small trauma team activations. 47, 8 % was in need of Intensive care of the large trauma team activation and 3, 5 % of the small trauma team activation. 41, 6 % of the large trauma team activation was planned for surgery within the first 24 -hours and 4, 5 of the small. Mean wardtime was 8, 49 days for the large trauma team activation and 2, 86 days for small trauma team activation. Mortality for large trauma team activation was 8, 8 % compared to 1, 5 of the small. Conclusion: This study shows that two levels of trauma team activation can provide a safe and appropriate care. More longitudinal and multicenter studies is necessary for increased evidence. Syfte: Att beskriva förekomst av aktiverade traumalarm samt utfall av vårdinsatser i två traumalarmsnivåer. Bakgrund: Trauma är den vanligaste dödsorsaken bland män under 44 år i Sverige, totalt avlider ca 4500 personer per år till följd av trauma. I USA infördes under 90 -talet två traumalarmsnivåer för att öka patientsäkerheten och spara vårdresurser. Design: Denna studie är en retrospektiv journalgranskning över traumalarm som inträffat under en 2 års period. Metod: Studien granskade aktiverade traumalarm via journaldata från perioden 1 / 1 - 2013 t. o. m 31 / 12 - 2014 på Norrlands Universitetssjukhus i Umeå. Resultat: Av de aktiverade traumalarmen var 35 % stora och 65 % små. Medelåldern var 44 år och 61 % av patienterna var män medan 39 % var kvinnor. 36, 3 % av de stora traumalarmen var i behov av narkoskompetens och 1 % av de små. 47, 8 % av de stora traumalarmen var i behov av IVA-vård samt 3, 5 % av de små. 41, 6 % av stora traumalarm planerades för operation inom 24 timmar och 4, 5 % av de små. Medelvårdtiden var 8, 49 dygn för stora traumalarm och 2, 86 dygn för små traumalarm. Mortaliteten för stort traumalarm var 8, 8 % jämfört med 1, 5 % av de små traumalarmen. Slutsats: Denna studie visar på att <b>triagering</b> enligt två traumalarmsnivåer för vuxna kan i hög grad ge en patientsäker och ändamålsenlig vård. Fler longitudinella och multicenterstudier i området är nödvändigt för ökad evidens...|$|R
40|$|Bugs are {{prevalent}} in software systems. To improve {{the reliability of}} software systems, developers often allow end users to provide feedback on bugs that they encounter. Users could perform this by sending a bug report in a bug report management system like Bugzilla. This process however is uncoordinated and distributed, which means that many users could submit bug reports reporting the same problem. These {{are referred to as}} duplicate bug reports. The existence of many duplicate bug reports may cause much unnecessary manual efforts as often a <b>triager</b> would need to manually tag bug reports as being duplicates. Recently, {{there have been a number}} of studies that investigate duplicate bug report problem which in effect answer the following question: given a new bug report, retrieve k other similar bug reports. This, however, still requires substantive manual effort which could be reduced further. Jalbert and Weimer are the first to introduce the direct detection of duplicate bug reports, it answers the question: given a new bug report, classify if it as a duplicate bug report or not. In this paper, we extend Jalbert and Weimer 2 ̆ 7 s work by improving the accuracy of automated duplicate bug report identification. We experiments with bug reports from Mozilla bug tracking system which were reported between February 2005 to October 2005, and find that we could improve the accuracy of the previous approach by about 160...|$|E
40|$|Abstract—Software bug {{classification}} is {{a precondition}} for bug fixation and it plays {{a vital role in}} software maintenance. It is found that bug fixation often takes long due to the distribution of misclassified or non-classified bugs by the <b>triager</b> among the developers. In this paper, we propose an adaptive bug classification approach on CVE dataset that involves two Bayesian classifiers such as Naive Bayes and Bayes net, and takes adaptive decision for classification. Naive Bayes is a classification algorithm which adopts a naive approach regarding class conditional distribution during classification and assumes that all the features of a sample are conditionally independent given the class label. Bayes net is a graphical representation of a set of random variables and their conditional dependencies via a directed acyclic graph. It can be used for knowledge representation as well as classification. Exploiting the domain knowledge about the bug class, we conduct the experiments from two different view points- group-based approach and general approach. In case of group-based approach, both classifiers are learned using the bug group-specific samples and selected features from five groups. In case of general approach, 28, 266 bug samples and 64 bug features are considered. Experiments show that Bayes net classifier has more potential than Naive Bayes for classification with CVE dataset and therefore it is preferable. However, it is also found that Naive Bayes classifier performs fairly well in CVE bug classification due to its simplistic concept and less number of parameters. Index Terms—Software bug classification; Bayes net; CVE; Conditional independence; ExTax...|$|E
40|$|Due to the {{unavoidable}} bugs {{appearing in}} {{the most of the}} software systems, bug resolution {{has become one of the}} most important activities in software maintenance. For large-scale software programs, developers usually depend on bug reports to fix the given bugs. When a new bug is reported, a <b>triager</b> has to complete two important tasks that include severity identification and fixer assignment. The purpose of severity identification is to decide how quickly the bug report should be addressed while fixer assignment means that the new bug needs to be assigned to an appropriate developer for fixing. However, a large number of bug reports submitted every day increase triagers' workload, thus leading to the reduction in the accuracy of severity identification and fixer assignment. Therefore it is necessary to develop an automatic approach to perform severity prediction and fixer recommendation instead of manual work. This article proposes a more accurate approach to accomplish the goal. We firstly utilize modified REP algorithm (i. e., REPtopic) and K-Nearest Neighbor (KNN) classification to search the historical bug reports that are similar to a new bug. Next, we extract their features (e. g., assignees and similarity) to develop the severity prediction and fixer recommendation algorithms. Finally, by adopting the proposed algorithms, we achieve severity prediction and semi-automatic fixer recommendation on five popular open source projects, including GNU Compiler Collection (GCC), OpenOffice, Eclipse, NetBeans, and Mozilla. The results demonstrated that our method can improve the performance of severity prediction and fixer recommendation through comparison with the cutting-edge studies. Department of Computin...|$|E
40|$|In this paper, {{we propose}} a {{software}} tool {{that can be}} used to speed up the software development lifecycle by automating the process of assigning new bugs to developers. Open bug repositories are now very common, and they are provided to the software users as a means to report any bugs they find while using the software. Many of the bugs reported complain about exceptions that are thrown by the program during normal operation of the software. Users report these bugs to the development team using bug reporting tools, (e. g. Bugzilla), and as a result of that, a person called Bug <b>Triager</b> tries to link between this bug and a developer who can fix it. Sometimes, the source of the bug is unclear, and as a result of that the developer can be reassigned several times. In this project, we propose an approach to automate this process by recommending developers who can fix a bug that complains from an exception. Moreover, we provide a ranking of developers according to their expected relationship with the bug so that more than one developer can work on the bug if needed, or if the first recommendation is unavailable. The approach is based on network analysis, and uses link prediction to rank developers with respect to a bug report. Moreover, in this report, in addition to using link prediction, we show several applications to using network analysis in the context of software analysis, like importance ranking and visualization. The Eclipse open source project was taken as a case study, and its CVS and Bugzilla repositories were the source of the datasets used to evaluate our approach. Experimental evaluation of the link prediction approach for recommending developers reveals its effectiveness and shows that its recommendations were similar to the actual bug assignments to a far extent...|$|E
40|$|A {{software}} Bug report contains {{information about}} the bug {{in the form of}} problem description and comments using natural language texts. Managing reported bugs is a significant challenge for a project manager when the number of bugs for a software project is large. Prior to the assignment of a newly reported bug to an appropriate developer, the <b>triager</b> (e. g., manager) attempts to categorize it into existing categories and looks for duplicate bugs. The goal is to reuse existing knowledge to fix or resolve the new bug, and she often {{spends a lot of time}} in reading a number of bug reports. When fixing or resolving a bug, a developer also consults with a series of relevant bug reports from the repository in order to maximize the knowledge required for the fixation. It is also preferable that developers new to a project first familiarize themselves with the project along with the reported bugs before actually working on the project. Because of the sheer numbers and size of the bug reports, manually analyzing a collection of bug reports is time-consuming and ineffective. One of the ways to mitigate the problem is to analyze summaries of the bug reports instead of analyzing full bug reports, and there have been a number of summarization techniques proposed in the literature. Most of these techniques generate extractive summaries of bug reports. However, it is not clear how useful those generated extractive summaries are, in particular when the developers do not have prior knowledge of the bug reports. In order to better understand the usefulness of the bug report summaries, in this thesis, we first reimplement a state of the art unsupervised summarization technique and evaluate it with a user study with nine participants. Although in our study, 70 % of the time participants marked our developed summaries as a reliable means of comprehending the software bugs, the study also reports a practical problem with extractive summaries. An extractive summary is often created by choosing a certain number of statements from the bug report. The statements are extracted out of their contexts, and thus often lose their consistency, which makes it hard for a manager or a developer to comprehend the reported bug from the extractive summary. Based on the findings from the user study and in order to further assist the managers as well as the developers, we thus propose an interactive visualization for the bug reports that visualizes not only the extractive summaries but also the topic evolution of the bug reports. Topic evolution refers to the evolution of technical topics discussed in the bug reports of a software system over a certain time period. Our visualization technique interactively visualizes such information which can help in different project management activities. Our proposed visualization also highlights the summary statements within their contexts in the original report for easier comprehension of the reported bug. In order to validate the applicability of our proposed visualization technique, we implement the technique as a standalone tool, and conduct both a case study with 3914 bug reports and a user study with six participants. The experiments in the case study show that our topic analysis can reveal useful keywords or other insightful {{information about the}} bug reports for aiding the managers or triagers in different management activities. The findings from the user study also show that our proposed visualization technique is highly promising for easier comprehension of the bug reports...|$|E

