3|3|Public
25|$|Notepad is {{a simple}} text editor for Microsoft Windows and a basic <b>text-editing</b> <b>program</b> which enables {{computer}} users to create documents. It was first released as a mouse-based MS-DOS program in 1983, and has been included in all versions of Microsoft Windows since Windows 1.0 in 1985.|$|E
40|$|Research {{indicates}} that older adults have difficulty acquiring text-editing skills. associated with text-editing programs create problems for older learners given the age-related changes in cognitive abilities. study compared the learning efficiency {{of older adults}} for three text-editing programs which varied in format and command structure. of 45, computer naive, women {{ranging in age from}} 4 0 to 70 years participated. The results indicated significant differences in learning efficiency as a function of <b>text-editing</b> <b>program.</b> Participants using a full screen editor with pull down menus demonstrated significantly better performance than did those using other programs. difficulties encountered by subjects during learning. information can be used as input into the design of future software and training programs. The data suggest that the cognitive demands This A total Data was also collected regarding types of This type o...|$|E
5000|$|The PDP-1 uses punched {{paper tape}} as its primary storage medium. Unlike punched card decks, which could be sorted and re-ordered, paper tape is {{difficult}} to physically edit. This inspired the creation of <b>text-editing</b> <b>programs</b> such as Expensive Typewriter and TECO. Because it is equipped with online and offline printers that were based on IBM electric typewriter mechanisms, {{it is capable of}} what, in 1980s terminology, would be called [...] "letter-quality printing" [...] and therefore inspired TJ-2, arguably the first word processor.|$|R
5000|$|Map {{providers}} generally collect, aggregate {{and supply}} {{data in a}} well-defined and documented file format that is specifically intended for information interchange, e.g. Navteq uses Standard Interchange Format (SIF) and GDF, while Tele Atlas uses a proprietary form of GDF. [...] It is usually in a plain-text form (ASCII) consisting of fields that are easily parsed and interpreted by the various parties who will handle it. The portable format allows additions, deletions and modifications to be readily performed by simple <b>text-editing</b> <b>programs.</b>|$|R
40|$|Thesis (Ph. D.) [...] University of Washington, 2001 Programming by {{demonstration}} (PBD) enables {{users to}} construct programs to automate repetitive tasks without writing {{a line of}} code. The key idea in PBD is to generalize from the user's demonstration of the program on a concrete example to a robust program that will work in new situations. Previous approaches to PBD have employed heuristic, domain-specific algorithms to generalize from {{a small number of}} examples. In this thesis, we formalize programming by demonstration as a machine learning problem: given the changes in the application state that result from the user's demonstrated actions, learn the sequence of instructions that map from one application state to the next. We propose a domain-independent machine learning approach to PBD that is capable of learning useful programs from a small number of examples. This approach addresses two difficult questions: (1) How do we construct the search space of possible program statements? (2) How do we search this large space efficiently?Our solution is based on the concept of version space algebra. Mitchell [55] formalized concept learning as a search through a version space of hypotheses consistent with the examples. Concept learning may be thought of as learning functions that map from an instance to a binary classification. In this work, we extend version spaces to apply to complex functions: functions that map from one complex object to another. We then present version space algebra, a means for combining several small spaces in order to construct complex version spaces. To illustrate the approach, we describe the SMARTedit programming by demonstration system for learning repetitive <b>text-editing</b> <b>programs.</b> SMARTedit is capable of learning useful programs from as little as a single training example. Finally, we generalize programming by demonstration to the broader problem of learning programs with loops and conditionals from traces of their execution behavior. We demonstrate this generalization with the SMARTpython system that is capable of learning programs with loops and conditionals from traces of the programs' execution...|$|R

