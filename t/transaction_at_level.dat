0|10000|Public
30|$|Transactive {{energy uses}} <b>transactions</b> <b>at</b> the retail <b>level.</b>|$|R
5000|$|This insight {{would be}} {{interactional}} {{at best and}} not transactional--reciprocal and co-constituetive <b>transactions</b> <b>at</b> the <b>levels</b> of individual, group, and environment (including man-as-organism and its ecological situations).|$|R
50|$|Using a market-based approach, One Acre Fund {{facilitates}} {{activities and}} <b>transactions</b> <b>at</b> various <b>levels</b> of the farming value chain, including seed sourcing and market support. In 2015, farmers {{who worked with}} One Acre Fund realized a 300% return on their investment and significantly increased farm income on every planted acre.|$|R
40|$|In {{the last}} decade, Turkish Customs has {{introduced}} various e-customs applications {{as a key}} component of customs modernization program. One of the main objectives of these applications was to simplify and speed up the foreign trade transactions. The aim {{of this study is to}} assess the current situation about the success of these applications <b>at</b> national <b>level</b> and identify the factors that may influence on the use of e-customs applications. Identifying the factors that hamper the deployment of e-customs applications may lead to more successful implementation of computerisation of foreign trade <b>transactions</b> <b>at</b> national <b>level...</b>|$|R
40|$|The {{concurrency}} control requirements for transaction processing in a multilevel secure file system {{are different from}} those in conventional transaction processing systems. In particular, there is the need to coordinate <b>transactions</b> <b>at</b> different security <b>levels</b> avoiding both potential timing covert channels and the starvation of <b>transactions</b> <b>at</b> higher security <b>levels.</b> Suppose a <b>transaction</b> <b>at</b> a lower security level attempts to write a data item that is being read by a <b>transaction</b> <b>at</b> a higher security level. On the one hand, a timing covert channel arises if the <b>transaction</b> <b>at</b> the lower security level is either delayed or aborted by the scheduler. On the other hand, the <b>transaction</b> <b>at</b> the high security level may be subjected to an indefinite delay if it is forced to abort repeatedly. This paper extends the classical two-phase locking mechanism to multilevel secure file systems. The scheme presented here prevents potential timing covert channels and avoids the abort of higher level transactions nonetheless guaranteeing serializability. The programmer is provided with a powerful set of linguistic constructs that supports exception handling, partial rollback, and forward recovery. The proper use of these constructs can prevent the indefinite delay in completion of a higher level transaction, and allows the programmer to trade off starvation with transaction isolation...|$|R
5000|$|Since each {{isolation}} {{level is}} stronger than those below, in that no higher isolation level allows an action forbidden by a lower one, the standard permits a DBMS to run a <b>transaction</b> <b>at</b> an isolation <b>level</b> stronger than that requested (e.g., a [...] "Read committed" [...] transaction may actually be performed at a [...] "Repeatable read" [...] isolation level).|$|R
30|$|The {{original}} {{models of}} NoSQL databases {{do not support}} transactions, as described above. In order to address this issue, various transactional systems have been emerged for NoSQL databases. Depending on the data models and architectural styles existing approaches handle <b>transactions</b> <b>at</b> three different <b>levels</b> such as middleware, data store, and client side. Examples of middleware transactional systems include, Deuteromony [18], G-Store [17], Google Megastore [15], and CloudTPS [19]. Systems such as Spanner [16], and Granola [21] handle <b>transactions</b> <b>at</b> the data store level. ReTSO [20] handle <b>transactions</b> <b>at</b> the client side.|$|R
40|$|Abstract—The {{concurrency}} control requirements for transaction processing in a multilevel secure file system {{are different from}} those in conventional transaction processing systems. In particular, there is the need to coordinate <b>transactions</b> <b>at</b> different security <b>levels</b> avoiding both potential timing covert channels and the starvation of <b>transactions</b> <b>at</b> higher security <b>levels.</b> Suppose a <b>transaction</b> <b>at</b> a lower security level attempts to write a data item that is being read by a <b>transaction</b> <b>at</b> a higher security level. On the one hand, a timing covert channel arises if the <b>transaction</b> <b>at</b> the lower security level is either delayed or aborted by the scheduler. On the other hand, the <b>transaction</b> <b>at</b> the high security level may be subjected to an indefinite delay if it is forced to abort repeatedly. This paper extends the classical two-phase locking mechanism to multilevel secure file systems. The scheme presented here prevents potential timing covert channels and avoids the abort of higher level transactions nonetheless guaranteeing serializability. The programmer is provided with a powerful set of linguistic constructs that supports exception handling, partial rollback, and forward recovery. The proper use of these constructs can prevent the indefinite delay in completion of a higher level transaction, and allows the programmer to trade off starvation with transaction isolation. Index Terms—Data management system, file system management, transaction processing, {{concurrency control}}, two-phase locking, exception handling, security kernel, mandatory access control, covert channels...|$|R
50|$|Based on the {{information}} provided by SWIFT FIN, RITS makes a final and irrevocable settlement by the simultaneous crediting and debiting of Exchange Settlement Accounts (ESAs) held at the Reserve Bank. When RITS notifies ASX Settlement of the settlement of the gross amount across ESAs, and ASX Settlement messages CHESS, which finalises the <b>transaction</b> <b>at</b> the participant <b>level</b> by transferring the shareholding from one security holding to the other.|$|R
30|$|In [20], a {{hierarchical}} transactive control architecture combines market <b>transactions</b> <b>at</b> the tertiary <b>level</b> with inter-area and unit-level {{control at the}} primary and secondary level. The purpose of the hierarchical transactive control is to ensure frequency regulating, using optimal allocation of resources {{in the presence of}} uncertainties in renewables and load. Models and controllers developed <b>at</b> the tertiary <b>level</b> follow the standard market-clearing procedure that aims at social-welfare maximization. The problem is solved iteratively, and the global asymptotic stability of the overall system is established.|$|R
40|$|Due to {{increasing}} complexity of SoC and shortening life time cycle of product, {{time to market}} becomes a major challenge in SoC design. To overcome this problem, an abstract representation of the platform under development {{can be used by}} software developers at the early stage of the development. This abstracted platform is then refined until its complete specification. For now, it remains difficult to implement and simulate a system that mixes TLM and RTL code. In this paper, we proposed a first step to bridge this gap by using CCSL as a mean to synchronize the system interfaces independently of their abstraction level. We describe a potential way to logically specify <b>transaction</b> <b>at</b> different <b>levels</b> of abstraction. 1...|$|R
40|$|Existing {{algorithms}} for mining {{association rule}} <b>at</b> multiple concept <b>level,</b> restricted mining strong association among the concept <b>at</b> same <b>level</b> of a hierarchy. However mining level-crossing association rule <b>at</b> multiple concept <b>level</b> {{may lead to}} the discovery of mining strong association among <b>at</b> different <b>level</b> of hierarchy. In this study, a top-down progressive deepening method is developed for mining level-crossing association rules in large transaction databases by extension of some existing multiple-level association rule mining techniques. This method is using concept of reduced support and refine the <b>transaction</b> table <b>at</b> each <b>level...</b>|$|R
40|$|International audienceDue to {{increasing}} complexity of SoC and shortening life time cycle of product, {{time to market}} becomes a ma- jor challenge in SoC design. To overcome this problem, an abstract representation of the platform under develop- ment {{can be used by}} software developers at the early stage of the development. This abstracted platform is then re- ﬁned until its complete speciﬁcation. For now, it remains difﬁcult to implement and simulate a system that mixes TLM and RTL code. In this paper, we proposed a ﬁrst step to bridge this gap by using CCSL as a mean to synchro- nize the system interfaces independently of their abstrac- tion level. We describe a potential way to logically specify <b>transaction</b> <b>at</b> different <b>levels</b> of abstraction...|$|R
40|$|Abstract: Existing {{algorithms}} for mining {{association rule}} <b>at</b> multiple concept <b>level,</b> restricted mining strong association among the concept <b>at</b> same <b>level</b> of a hierarchy. However mining level-crossing association rule <b>at</b> multiple concept <b>level</b> {{may lead to}} the discovery of mining strong association among <b>at</b> different <b>level</b> of hierarchy. In this study, a top-down progressive deepening method is developed for mining level-crossing association rules in large transaction databases by extension of some existing multiple-level association rule mining techniques. This method is using concept of reduced support and refine the <b>transaction</b> table <b>at</b> each <b>level.</b> Key words: Mining algorithms, mining association rules, level-crossing association rule...|$|R
30|$|One {{limitation}} {{of previous studies}} is that they mainly addressed inter-firm relationships within a country, so they have little {{to say about the}} linkages of firms in different countries. Important exceptions include studies on global ownership structure [20], and global R&D partnerships [21]. However, no work has yet investigated the structure of global customer-supplier linkages, which is the key to understanding the nature of the above incidences (i.e., the global financial crisis and the disruption of global supply chains by natural disasters). Given this background, we investigate the global aspect of inter-firm linkages using a unique dataset that contains information on business relationships (both domestic and international) for about 400, 000 firms worldwide. This is the first contribution of this paper. Note that if one aggregates transactions (purchases and sales) <b>at</b> the firm <b>level,</b> one obtains <b>transactions</b> <b>at</b> the country <b>level,</b> called international trade by economists. The network structure of international trade has recently been studied by economists and physicists [22 – 28]. Our investigation of international <b>transactions</b> <b>at</b> the firm <b>level</b> is closely related to those studies, but our firm level data reveal that firms are more likely to transact with other firms in the same industry rather than other firms in the same home country, which is quite different from what is assumed in studies on international trade. We will expand this point below.|$|R
40|$|We use {{a unique}} dataset on trading <b>transactions</b> <b>at</b> the firm <b>level</b> to {{investigate}} a complementary effect in international transactions between sellers and buyers; trading transactions {{are more likely to}} be international when both sellers and buyers are large in size than when either sellers or buyers are large. Our econometric analysis provides evidence for the complementary effect between trading partners on the likelihood of international trade, which is most prominent for exports from North to South. Self-selection, Firm heterogeneity, Matching, Developing countries, Developed countries, International trade, Business enterprises...|$|R
5000|$|Francis Cianfrocca, the CEO of Bayshore Networks, wrote, [...] "The administration’s {{management}} of the Chrysler bankruptcy {{has led to an}} astonishingly reckless abrogation of contract law that will introduce a new level of uncertainty into business <b>transactions</b> <b>at</b> all <b>levels,</b> and make wealth generation more difficult going forward... An extraordinary uncertainty has been created when {{the most powerful man in}} the world can rewrite contracts and choose winners and losers in private negotiations as he sees fit. Since this is an unquantifiable uncertainty, and not a quantifiable risk, its effect on business and investor confidence will be large and unpredictable. As in the 1930s, a time when government also cavalierly rewrote private contracts, the prudent approach for business will be to invest minimally and wait for another administration." ...|$|R
40|$|Many {{transaction}} processing applications execute <b>at</b> isolation <b>levels</b> lower than SERIALIZABLE {{in order to}} increase throughput and reduce response time. However, the resulting schedules might not be serializable and, hence, not necessarily correct. The semantics of a particular application determines whether that application will run correctly <b>at</b> a lower <b>level</b> and, in practice, it appears that many applications do. The decision to choose an isolation <b>level</b> <b>at</b> which to run an application and the analysis of the correctness of the resulting execution is usually done informally. In this paper, we develop a formal technique to analyze and reason about the correctness of the execution of an application <b>at</b> isolation <b>levels</b> other than SERIALIZABLE. We use a new notion of correctness, semantic correctness, a criterion weaker than serializability, to investigate correctness. In particular, for each isolation level, we prove a condition under which the execution of <b>transactions</b> <b>at</b> that <b>level</b> will be semantically correct. In addition to the ANSI/ISO isolation levels of READ UNCOMMITTED, READ COMMITTED, and REPEATABLE READ, we also prove a condition for correct execution at the READ-COMMITTED with first-committer-wins and at SNAPSHOT isolation. We assume that different transactions in the same application can be executing <b>at</b> different <b>levels,</b> but that each <b>transaction</b> is executing <b>at</b> least at READ UNCOMMITTED...|$|R
40|$|We {{employ a}} {{sensemaking}} lens to study economic <b>transactions</b> <b>at</b> the micro <b>level,</b> investigating how social distance affects {{the logic of}} exchange. In transcripts of 87 two-party negotiations, we find that most pairs quickly coordinate on a shared logic of exchange and improvise in accord with its implied rules throughout their interaction. Negotiators turn to three dynamic processes— trust-testing, process clarification, and emotional punctuation—when they have difficulty moving the interaction toward a coherent, mutually agreed upon improvisation. The improvisations {{take the form of}} openness, mutual gain, or haggling, and mediate the effects of social distance on economic outcomes...|$|R
40|$|This paper {{presents}} a theoretical basis for global concurrency control to maintain global serializability in multidatabase systems. Three correctness criteria are formulated {{to utilize the}} intrinsic characteristics of global <b>transactions</b> <b>at</b> the global <b>level</b> to determine the serialization order of global sub <b>transactions</b> <b>at</b> each local site. In particular, two new types of serializabiIity, chain-conflicting serializability and sharing serializability, are proposed, and an optimal criterion (termed hybrid serializability) combining these two basic criteria is discussed. These criteria offer the advantage of imposing no restrictions on local sites other than local serializability while retaining global serializability. The graph testing techniques of the three criteria are provided as guidance for global transaction scheduling. In addition, the optimal aspect of hybrid serializability defines the upper limit on global serializability in multidatabase systems...|$|R
40|$|Abstract—Many {{transaction}} processing applications execute <b>at</b> isolation <b>levels</b> lower than SERIALIZABLE {{in order to}} increase throughput and reduce response time. However, the resulting schedules might not be serializable and, hence, not necessarily correct. The semantics of a particular application determines whether that application will run correctly <b>at</b> a lower <b>level</b> and, in practice, it appears that many applications do. The decision to choose an isolation <b>level</b> <b>at</b> which to run an application and the analysis of the correctness of the resulting execution is usually done informally. In this paper, we develop a formal technique to analyze and reason about the correctness of the execution of an application <b>at</b> isolation <b>levels</b> other than SERIALIZABLE. We use a new notion of correctness, semantic correctness, a criterion weaker than serializability, to investigate correctness. In particular, for each isolation level, we prove a condition under which the execution of <b>transactions</b> <b>at</b> that <b>level</b> will be semantically correct. In addition to the ANSI/ISO isolation levels of READ UNCOMMITTED, READ COMMITTED, and REPEATABLE READ, we also prove a condition for correct execution at the READ-COMMITTED with first-committer-wins and at SNAPSHOT isolation. We assume that different transactions in the same application can be executing <b>at</b> different <b>levels,</b> but that each <b>transaction</b> is executing <b>at</b> least at READ UNCOMMITTED. Index Terms—Isolation levels, correctness, serializability, transactions...|$|R
40|$|ANSI SQL- 92 [MS, ANSI] defines Isolation Levels {{in terms}} of {{phenomena}}: Dirty Reads, Non-Repeatable Reads, and Phantoms. This paper shows that these phenomena and the ANSI SQL definitions fail to properly characterize several popular isolation levels, including the standard locking implementations of the levels covered. Ambiguity in the statement of the phenomena is investigated and a more formal statement is arrived at; in addition new phenomena that better characterize isolation types are introduced. Finally, an important multiversion isolation type, called Snapshot Isolation, is defined. 1. Introduction Running concurrent <b>transactions</b> <b>at</b> different isolation <b>levels</b> allows application designers to trade off concurrency and throughput for correctness. Lower isolation <b>levels</b> increase <b>transaction</b> concurrency <b>at</b> the risk of allowing transactions to observe a fuzzy or incorrect database state. Surprisingly, some <b>transactions</b> can execute <b>at</b> the highest isolation level (perfect serializa [...] ...|$|R
30|$|The {{advent of}} the {{internet}} {{has made it possible}} to quantify demand on a larger scale. Potential home buyers start gathering information about dwellings by browsing the internet, and may subsequently contact an agency to obtain more detailed information or organize a viewing. Wu and Brynjolfsson [20] are the first to use internet data to quantify demand, showing that the number of Google housing-related searches is predictive of future price appreciations and higher volume of <b>transactions</b> <b>at</b> the city <b>level.</b> (See also Ref. [21] for Google searches.) Van Dijk and Francke [22] come to the same conclusion, but their measure of demand is the aggregate number of clicks on housing ads on a Dutch website, where aggregation is performed again <b>at</b> the city <b>level.</b>|$|R
40|$|AbstractWe offer a {{reference}} model for nested <b>transactions</b> <b>at</b> the <b>level</b> of memory accesses, and sketch possible hardware architecture designs that implement that model. We describe both closed and open nesting. The model is abstract {{in that it}} does not relate to hardware, such as caches, but describes memory as seen by each transaction, memory access conflicts, and the effects of commits and aborts. The hardware sketches describe approaches to implementing the model using bounded size caches in a processor with overflows to memory. In addition to a model that will support concurrency within a transaction, we describe a simpler model that we call linear nesting. Linear nesting supports only a single thread of execution in a transaction nest, but may be easier to implement. While we hope that the model is a good target to which to compile transactions from source languages, the mapping from source constructs to nested transactional memory {{is beyond the scope of}} the paper...|$|R
3000|$|... (2) Stimuli Generation: Stimuli {{generation}} {{reads the}} compact, human-readable testcase definition and expands the testcase into still model-independent stimuli files. To {{be independent of}} the details of the implementation, stimuli are described <b>at</b> <b>transaction</b> <b>level.</b> Typical transactions are transceiver configuration, packet transmission, or packet reception. For each such operation, stimuli files provide the information required to operate the design under verification (DUV). The stimuli generation for the testcase structure described in the previous subsection is summarized by the pseudocode snippet in Algorithm 1.|$|R
40|$|A {{multilevel}} secure (MLS) database {{is intended}} to protect classified information from unauthorized users based on the classification of the data and the clearances of the users. The concurrency control requirements for transaction processing in multilevel secure database management systems (MLS/DBMSs) {{are different from those}} in conventional transaction processing systems. In MLS/DBMSs, coordination of <b>transactions</b> <b>at</b> different security <b>levels</b> is needed to avoid both covert channels and the starvation of high security level transactions. In this paper we outline the transaction processing requirements in MLS/DBMSs, and survey the mechanisms proposed to address these requirements and propose a new secure multiversion concurrency control protocol. We also investigate the relative performance of existing secure concurrency control protocols while varying workloads...|$|R
40|$|We offer a {{reference}} model for nested <b>transactions</b> <b>at</b> the <b>level</b> of memory accesses, and sketch possible hardware architecture designs that implement that model. We describe both closed and open nesting. The model is abstract {{in that it}} does not relate to hardware, such as caches, but describes memory as seen by each transaction, memory access conflicts, and the effects of commits and aborts. The hardware sketches describe approaches to implementing the model using bounded size caches in a processor with overflows to memory. In addition to a model that will support concurrency within a transaction, we describe a simpler model that we call linear nesting. Linear nesting supports only a single thread of execution in a transaction nest, but may be easier to implement. While we hope that the model is a good target to which to compile transactions from source languages, the mapping from source constructs to nested transactional memory {{is beyond the scope of}} the paper. c ○ 2006 Elsevier B. V. All rights reserved...|$|R
40|$|This paper {{examines}} {{the effect of}} the benefits of corporate control to managers on the relationship between managerial ownership and the stock returns of acquiring firms in corporate control <b>transactions.</b> <b>At</b> low <b>levels</b> of managerial ownership, agency costs of equity (such as perquisite consumption) reduce the returns earned by acquirers. As the managerial stake in the acquiring firm increases, the interests of managers are more closely aligned with those of shareholders, reducing the acquisition premium. <b>At</b> sufficiently high <b>levels</b> of managerial ownership, managers value a reduction in the risk of their nondiversified financial portfolio. However, managers enjoy nonassignable private benefits of control <b>at</b> high <b>levels</b> of ownership which they are not willing to lose by selling their stake in the financial markets. These benefits of control are increasing in the managerial ownership stake and can lead to managers 'overpaying' even when they own a substantial fraction of the firm. Examining mergers that occurred during 1985 to 1991, we find evidence of such a nonmonotonic relationship between the stock returns earned by acquirers and their managerial ownership level. Further, we find that acquiring firms with high levels of managerial ownership tend to diversify more than acquiring firms with low levels of managerial ownership. ...|$|R
40|$|We {{present a}} method to {{calibrate}} empirically the demand parameters in a merger simulation model by using brand-level profit margin data. While the approach can be generalized, we develop these ideas within a particular framework - the PCAIDS (proportionality-calibrated AIDS) model. We show that the brand-level margins effectively define product "nests" (products that are especially close substitutes) and substantially increase the flexibility of PCAIDS for modeling critical own- and cross-price elasticities. The model is particularly valuable for <b>transactions</b> <b>at</b> the wholesale <b>level</b> (where scanner data do not exist) and for geographic markets that span national borders (where comparable data may not be available), since other methods to derive elasticities, particularly those based on econometric estimation, {{may not be possible}} or may not be reliable. ...|$|R
40|$|Networks-on-chip (NoC) are a {{scalable}} interconnect {{solution to}} multiprocessor systems on chip (MPSoC). NoCs transport data in packets which are fragments of transactions, such as {{read and write}} actions of IPs. For debug purposes, reconstructing <b>transactions</b> <b>at</b> run-time is essential. Run-time analysis of the NoC behavior <b>at</b> <b>transaction</b> <b>level</b> makes the complete MPSoC easier to understand. We present a NoC analyzer able to monitor NoC <b>transactions</b> <b>at</b> run-time. The proposed hardware transaction monitor is able to reconstruct on-chip, <b>at</b> run-time, NoC <b>transactions</b> from bit-level intercepted router link communication. Four NoC analyzer modes are detailed raising the abstraction level gradually from physical raw to logical connectionbased, transaction-based and abstract transaction eventbased. Each mode is analyzed for area and bandwidth in an experimental setup based on several Æthereal NoC designs. A transaction monitor has an area cost of 0. 026 mm 2 in a 0. 13 µm CMOS technology, and for several MPEG/audio case studies, the entire monitoring system adds an average of 5 % to the NoC area. We show the versatility of our NoC analyzer by run-time monitoring user connections and the Configuration Master IP in the NoC...|$|R
30|$|Pricing is {{the most}} {{effective}} profit lever (Dolan and Simon 1996). This is a process for determining what a company will receive in exchange for its products or services. Pricing can be considered in industry, market, and <b>transaction</b> <b>levels.</b> <b>At</b> the industry <b>level,</b> the main focus is on the overall economics of the industry, including price changes of the supply and demand changes of the customer. On the other hand, in the market level the competitive situation of the price in comparison with the value differential of the product to that of the comparative competing products will be considered. Pricing <b>at</b> the <b>transaction</b> <b>level</b> focuses on managing the implementation of discounts away from the reference or the price list which occur {{both on and off the}} invoice or receipt.|$|R
40|$|One of the {{weaknesses}} of database replication protocols, compared to centralized DBMSs, {{is that they are}} unable to manage concurrent execution of <b>transactions</b> <b>at</b> different isolation <b>levels.</b> In the last years, some theoretical works related to this research line have appeared but none of them has proposed and implemented a real replication protocol with support to multiple isolation levels. This paper takes advantage of our MADIS middleware and one of its implemented Snapshot Isolation protocols to design and implement SIRC, a protocol that is able to execute concurrently both Generalized Snapshot Isolation (GSI) and Generalized Loose Read Committed (GLRC) transactions. We have also made a performance analysis to show how this kind of protocols can improve the system performance and decrease the transaction abortion rate in applications that do not require the strictest isolation level in every transaction. ...|$|R
40|$|Abstract — The {{notion of}} trust has {{traditionally}} been utilized <b>at</b> <b>transaction</b> <b>level</b> in order to bypass expensive security checks. In this paper, we extend the trust model to individual programs. Moreover, we develop a self assessment/monitoring framework for trust based on control flow integrity that {{can be incorporated into}} a compiler. We also extend the concept of Schneider’s enforceable security policy into that of an enforceable trust policy. This trust assessment model has been implemented with SUIF and gcc C compilers. An architectural modification to support efficient management of control flow integrity based trust model has also been developed and is being evaluated. I...|$|R
40|$|Most {{concurrency}} control algorithms for multilevel secure databases based on kernelized architecture prevent covert channels between <b>transactions</b> <b>at</b> different security <b>levels</b> by preempting the high security transaction {{in the event}} of a data conflict with a lower security transaction. In environments with moderate to high levels of contention between low and high security transactions, this can lead to poor performance and even starvation of high security transactions. In this paper, we examine this problem of unfairness in {{concurrency control}} mechanisms for secure databases. Based on an analysis of the performance of a secure version of twophase locking, we propose three different modifications to the protocol that address the problem of starvation of high security transactions. Through a detailed simulation study, we examine the fairness and performance of these approaches for a variety of workloads. 1 Introduction In a secure database, the concurrency control algorithm must ensure [...] ...|$|R
40|$|One of the {{weaknesses}} of replicated protocols, compared to centralized ones, {{is that they are}} unable to manage concurrent execution of <b>transactions</b> <b>at</b> different isolation <b>levels.</b> In the last years, some theoretical works related to this research line have appeared but none of them has proposed and implemented a real replication protocol with support to multiple isolation levels. This paper takes advantage of our MADIS middleware and one of its implemented Snapshot Isolation protocols to design and implement the SIRC-Rep, a protocol that is able to execute concurrently both Generalized Snapshot Isolation (SI) and Read Committed (RC) transactions. We have also made a performance analysis to show how this kind of protocols can improve the system performance and decrease the transaction abortion rate in applications that do not require the strictest isolation level in every transaction. ∗ This work has been partially supported by the Spanis...|$|R
40|$|This paper {{looks at}} a {{hitherto}} neglected extensive margin of international trade by investigating {{for the first time}} the frequency at which German exporters and importers trade a given good with a given country. Imports and exports show a high degree of lumpiness. In a given year about half of all firm-good-country combinations are recorded only once or twice for trade with EU countries, and this is the case for more than 60 percent of all firm-good-country combinations in trade with non-EU countries. The frequency of recorded transactions tends to decline with an increase in the number of transactions per year. This is in accordance with the presence of per-shipment fixed costs that provide an incentive for trading firms to engage in cross-border transactions infrequently. Empirical models show that for Germany the frequency of <b>transactions</b> <b>at</b> the firm-good-country <b>level</b> tends to decrease with an increase in per-shipment costs when unobserved firm and goods characteristics are controlled for...|$|R
