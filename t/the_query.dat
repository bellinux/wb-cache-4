10000|10000|Public
5|$|The {{right-hand}} {{side of the}} above equation is the sure information, i.e. information which can be certainly extracted from the database regardless of what values are used to replace Nulls in the database. In the example we considered above, it's {{easy to see that}} the intersection of all possible models (i.e. the sure information) of <b>the</b> <b>query</b> selecting WHERE Age = 22 is actually empty because, for instance, the (unlifted) query returns no rows for the relation EmpH37. More generally, it was shown by Imielinski and Lipski that Codd tables are a weak representation system if <b>the</b> <b>query</b> language is restricted to projections, selections (and renaming of columns). However, as soon as we add either joins or unions to <b>the</b> <b>query</b> language, even this weak property is lost, as evidenced in the next section.|$|E
5|$|The key {{difference}} between QA technology and document search is that document search takes a keyword query and returns {{a list of}} documents, ranked in order of relevance to <b>the</b> <b>query</b> (often based on popularity and page ranking), while QA technology takes a question expressed in natural language, seeks to understand it in much greater detail, and returns a precise answer to the question.|$|E
5|$|Progressive {{alignments}} are {{not guaranteed}} to be globally optimal. The primary problem is that when errors are made at any stage in growing the MSA, these errors are then propagated through to the final result. Performance is also particularly bad {{when all of the}} sequences in the set are rather distantly related. Most modern progressive methods modify their scoring function with a secondary weighting function that assigns scaling factors to individual members of <b>the</b> <b>query</b> set in a nonlinear fashion based on their phylogenetic distance from their nearest neighbors. This corrects for non-random selection of the sequences given to the alignment program.|$|E
40|$|This dataset {{contains}} <b>the</b> <b>queries</b> {{used for}} <b>the</b> benchmarking of the RDF stores for the EU Publications Office (PO). <b>The</b> <b>queries</b> are divided in three categories according to <b>the</b> types of <b>queries.</b> <b>The</b> initial <b>queries</b> from PO where validated using Jena tool {{to make them}} compliant with any SPARQL endpoint...|$|R
30|$|The {{neighbor}} {{region of}} <b>the</b> <b>queried</b> object {{will be the}} parallel line where <b>the</b> <b>queried</b> object is and the corresponding left and right division regions. We calculate {{the distance between the}} data objects in the above three parts and <b>the</b> <b>queried</b> object, sorting and inserting these data objects into the sorting queue.|$|R
30|$|Collision: both of <b>the</b> <b>queried</b> tags stay. <b>The</b> two <b>queried</b> tags are identified.|$|R
5|$|Structural {{alignments}} {{can compare}} two sequences or multiple sequences. Because these alignments rely on information about all <b>the</b> <b>query</b> sequences' three-dimensional conformations, the method {{can only be}} used on sequences where these structures are known. These are usually found by X-ray crystallography or NMR spectroscopy. It is possible to perform a structural alignment on structures produced by structure prediction methods. Indeed, evaluating such predictions often requires a structural alignment between the model and the true known structure to assess the model's quality. Structural alignments are especially useful in analyzing data from structural genomics and proteomics efforts, {{and they can be}} used as comparison points to evaluate alignments produced by purely sequence-based bioinformatics methods.|$|E
5|$|The {{combinatorial}} extension (CE) {{method is}} similar to DALI in that it too breaks each structure in <b>the</b> <b>query</b> set {{into a series of}} fragments that it then attempts to reassemble into a complete alignment. A series of pairwise combinations of fragments called aligned fragment pairs, or AFPs, are used to define a similarity matrix through which an optimal path is generated to identify the final alignment. Only AFPs that meet given criteria for local similarity are included in the matrix as a means of reducing the necessary search space and thereby increasing efficiency. A number of similarity metrics are possible; the original definition of the CE method included only structural superpositions and inter-residue distances but has since been expanded to include local environmental properties such as secondary structure, solvent exposure, hydrogen-bonding patterns, and dihedral angles.|$|E
25|$|The user is also {{provided}} with a link to view the alignment of <b>the</b> <b>query</b> sequence with the genome assembly. The matches between <b>the</b> <b>query</b> and genome assembly are blue and {{the boundaries of the}} alignments are lighter in colour. These exon boundaries indicate splice sites.|$|E
5000|$|In <b>the</b> above <b>query</b> <b>the</b> outer <b>query</b> is SELECT employee_number, name FROM {{employees}} AS emp WHERE salary > ...and <b>the</b> inner <b>query</b> (<b>the</b> correlated subquery) is SELECT AVG(salary) FROM employees WHERE department = emp.department ...|$|R
40|$|This paper {{describes}} our {{approaches for}} the Plagiarism Detection – Source Retrieval task of PAN 2014. We combined and improved methodology used at PAN 2012 and PAN 2013. Our system combines {{three types of}} queries: The keywords-based queries; the paragraph-based queries; and <b>the</b> headers-based <b>queries.</b> <b>The</b> <b>queries</b> are distinguished also by other properties such as <b>the</b> phrase <b>query</b> or <b>the</b> positional <b>query.</b> <b>The</b> <b>queries</b> are submitted to two search engines – Chatnoir and Indri – according to their properties. <b>The</b> <b>query’s</b> position serves for the search control, minimization {{of the total number}} of executed <b>queries</b> is <b>the</b> system’s priority. Downloaded documents are textually compared with the suspicious document and if a similarity is found, the downloaded document is reported...|$|R
30|$|When {{the search}} is {{finished}} in the cluster class where <b>the</b> <b>queried</b> object is, if it still fails to find all the neighbor objects meeting the conditions, we search the next class nearest to <b>the</b> <b>queried</b> object, add <b>the</b> <b>queried</b> object into <b>the</b> new found cluster class {{to form a new}} region, and continue to carry on division and <b>query</b> in <b>the</b> new region, until we find all the neighbor objects.|$|R
25|$|BLAT indexes the genome/protein database, {{retains the}} index in memory, and then scans <b>the</b> <b>query</b> {{sequence}} for matches. BLAST, {{on the other}} hand, builds an index of <b>the</b> <b>query</b> sequences and searches through the database for matches. A BLAST variant called MegaBLAST indexes 4 databases to speed up alignments.|$|E
25|$|Most IR systems compute a numeric {{score on}} how well each object in the {{database}} match <b>the</b> <b>query,</b> and rank the objects according to this value. The top ranking objects are then shown to the user. The process may then be iterated if the user wishes to refine <b>the</b> <b>query.</b>|$|E
25|$|The main mode of {{retrieving}} {{data from}} a SQL Server database is querying for it. <b>The</b> <b>query</b> is expressed using a variant of SQL called T-SQL, a dialect Microsoft SQL Server shares with Sybase SQL Server due to its legacy. <b>The</b> <b>query</b> declaratively specifies {{what is to be}} retrieved. It is processed by <b>the</b> <b>query</b> processor, which figures out the sequence of steps that will be necessary to retrieve the requested data. The sequence of actions necessary to execute a query is called a query plan. There might be multiple ways to process the same query. For example, for a query that contains a join statement and a select statement, executing join on both the tables and then executing select on the results would give the same result as selecting from each table and then executing the join, but result in different execution plans. In such case, SQL Server chooses the plan that is expected to yield the results in the shortest possible time. This is called query optimization and is performed by <b>the</b> <b>query</b> processor itself.|$|E
40|$|A {{function}} f is self-reducible {{if it can}} be computed {{given an}} oracle for f. In a random-self-reduction <b>the</b> <b>queries</b> must be made {{in such a way that}} the distribution of <b>the</b> ith <b>query</b> is independent of the input that gave rise to it. Randomself -reductions have many applications, including countless cryptographic protocols, probabilistically checkable proofs, average-case complexity, and program checking. A simpler model of randomized self-reducibility is coherence, in which the only condition on <b>the</b> <b>queries</b> is that <b>the</b> input itself may not be among <b>the</b> <b>queries.</b> We show that there is a function which is random-self-reducible with 2 rounds of queries, but which is not even coherent, even if polynomial advice is allowed, when <b>the</b> <b>queries</b> must be made in a single round. 1 Introduction Informally, we say that a function f self-reduces {{if it can be}} computed efficiently by making queries to f. For a function to be random-self-reducible, <b>the</b> <b>queries</b> must be made at random in such a way that t [...] ...|$|R
40|$|An {{orientation}} of a grid is called unique sink orientation (USO) if {{each of its}} nonempty subgrids has a unique sink. Particularly, the original grid itself has a unique global sink. In this work we investigate {{the problem of how}} to find the global sink using minimum number of queries to an oracle. There are two different oracle models: <b>the</b> vertex <b>query</b> model where <b>the</b> {{orientation of}} all edges incident to <b>the</b> <b>queried</b> vertex are provided, and <b>the</b> edge <b>query</b> model where <b>the</b> orientation of <b>the</b> <b>queried</b> edge is provided. In the 2 -dimensional case, we design an optimal linear deterministic algorithm for <b>the</b> vertex <b>query</b> model and an almost linear deterministic algorithm for <b>the</b> edge <b>query</b> model, previously <b>the</b> best known algorithms run in O(N logN) time for <b>the</b> vertex <b>query</b> model and O(N^ 1. 404) time for <b>the</b> edge <b>query</b> model...|$|R
30|$|Each {{mobile user}} {{receives}} <b>queries</b> from <b>the</b> sensors {{of the other}} mobile users to disseminate <b>the</b> <b>queries</b> through broadcast. If <b>the</b> received <b>queries</b> exist on <b>the</b> list of the mobile user, then <b>the</b> <b>queries</b> and their related reports are re-ranked. Otherwise, the information on <b>the</b> <b>queries</b> and <b>the</b> reports is updated to the mobile user O's list. The duplicates are checked for each received <b>query,</b> and only <b>the</b> copy with the smallest rank is kept. That is, this process attempts to significantly reduce duplicated transmissions by disseminating only new data to old neighbors, or only old data to new neighbors.|$|R
25|$|Another new {{addition}} in SC2K is <b>the</b> <b>query</b> tool. Using <b>the</b> <b>query</b> tool on tiles reveals {{information such as}} structure name and type, altitude, and land value. Certain tiles also display additional information; power plants, for example, display the percentage of power being consumed when queried, and querying roads displays the amount of traffic on that tile. Querying a library and selecting 'Ruminate' displays an essay written by Neil Gaiman.|$|E
25|$|Jet {{passes the}} data {{retrieved}} for <b>the</b> <b>query</b> in a dynaset. This {{is a set}} of data that is dynamically linked back to the database. Instead of having <b>the</b> <b>query</b> result stored in a temporary table, where the data cannot be updated directly by the user, the dynaset allows the user to view and update the data contained in the dynaset. Thus, if a university lecturer queries all students who received a distinction in their assignment and finds an error in that student's record, they would only need to update the data in the dynaset, which would automatically update the student's database record without the need for them to send a specific update query after storing <b>the</b> <b>query</b> results in a temporary table.|$|E
25|$|Another {{application}} is in database theory, where a relational {{model of a}} database {{is essentially the same}} thing as a relational structure. It turns out that a conjunctive query on a database can be described by another structure in the same signature as the database model. A homomorphism from the relational model to the structure representing <b>the</b> <b>query</b> is the same thing as a solution to <b>the</b> <b>query.</b> This shows that the conjunctive query problem is also equivalent to the homomorphism problem.|$|E
40|$|Many {{software}} {{systems that}} use a database lack main-tainability and adjustability, for <b>the</b> produced <b>queries</b> {{are hard to}} reconstruct and inspect. For instance, the relations between <b>the</b> <b>queries,</b> established by <b>the</b> host language, {{are not easy to}} identify. This information however is vital when adapting the application in order to prevent unexpected be-haviours. This paper focuses on queries embedded in a host language, while by reconstructing and analysing <b>the</b> <b>queries,</b> insight is gained in its complexity. Also the interac-tion between <b>the</b> <b>queries</b> and <b>the</b> host language is taken into account. For instance, the explicit structure and relations within a database often are complemented with implicit relations established in the application itself. Therefore analysing the application with respect to <b>the</b> SQL <b>queries</b> it contains, is needed to detect and distil those relationships. As a result, a framework is presented for extracting SQL queries out of host languages and for indicating the quality of <b>the</b> <b>queries.</b> ...|$|R
40|$|Objective To {{develop a}} model based upon factors {{able to predict}} the time spent {{answering}} drug-related queries to Norwegian drug information centres (DICs). Setting and method Drug-related queries received at 5 DICs in Norway from March to May 2007 {{were randomly assigned to}} 20 employees until each of them had answered a minimum of five <b>queries.</b> <b>The</b> employees reported the number of drugs involved, the type of literature search performed, and whether <b>the</b> <b>queries</b> were considered judgmental or not, using a specifically developed scoring system. Main outcome measures The scores of these three factors were added together to define a workload score for each query. Workload and its individual factors were subsequently related to the measured time spent answering <b>the</b> <b>queries</b> by simple or multiple linear regression analyses. Results Ninety-six query/answer pairs were analyzed. Workload significantly predicted the time spent answering <b>the</b> <b>queries</b> (adjusted R 2  =  0. 22, P <  0. 001). Literature search was the individual factor best predicting the time spent answering <b>the</b> <b>queries</b> (adjusted R 2  =  0. 17, P <  0. 001), and this variable also contributed the most in the multiple regression analyses. Conclusion The most important workload factor predicting the time spent handling <b>the</b> <b>queries</b> in this study was the type of literature search that had to be performed. <b>The</b> categorisation of <b>queries</b> as judgmental or not, also affected the time spent answering <b>the</b> <b>queries.</b> <b>The</b> number of drugs involved did not significantly influence the time spent answering drug information queries...|$|R
5000|$|In <b>the</b> above nested <b>query</b> <b>the</b> inner <b>query</b> {{has to be}} re-executed {{for each}} employee. (A {{sufficiently}} smart implementation may cache <b>the</b> inner <b>query's</b> result on a department-by-department basis, {{but even in the}} best case <b>the</b> inner <b>query</b> must be executed once per department. See [...] "Optimizing correlated subqueries" [...] below.) ...|$|R
25|$|Notice {{that with}} the code as stated above, <b>the</b> <b>query</b> ?- sibling(sally, sally). also succeeds. One would insert {{additional}} goals to describe the relevant restrictions, if desired.|$|E
25|$|If {{the browser}} {{does not support}} ismap then <b>the</b> <b>query</b> string must not {{be added to the}} anchor URL and the server should respond {{appropriately}} (for example, by returning a text-only navigation page).|$|E
25|$|The ROLAP {{approach}} can leverage database authorization controls such as row-level security, whereby <b>the</b> <b>query</b> results are filtered depending on preset criteria applied, for example, {{to a given}} user or group of users (SQL WHERE clause).|$|E
30|$|Since our {{experiments}} {{have shown that}} the editor’s performance can decrease with large architecture models, a future direction is to study mechanisms that increase the performance of <b>the</b> <b>queries</b> included in <b>the</b> view specification model (i.e. mainly <b>the</b> <b>queries</b> that navigate <b>the</b> metrics model).|$|R
30|$|The {{algorithm}} CQGS (Candidate <b>Queries</b> Generation using <b>the</b> threshold Similarity) {{extract from}} the filtered log file {{the set of}} candidate queries {{that are similar to}} <b>the</b> current <b>query</b> taking into account a predetermined similarity threshold s. The algorithm takes as input <b>the</b> number of <b>queries</b> in <b>the</b> filtered log file, <b>the</b> current user <b>query,</b> <b>the</b> SIM function (which computes the spatio-semantic similarity between two MDX <b>queries)</b> and <b>the</b> similarity threshold s. SIM function is used to compute the spatio-semantic similarity values between <b>the</b> current <b>query</b> and <b>the</b> <b>queries</b> presented in <b>the</b> filtered log file.|$|R
40|$|The {{purpose of}} this {{research}} was to develop <b>queries</b> that quantify <b>the</b> utilization of comparison imaging in free-text radiology reports. <b>The</b> <b>queries</b> searched for common phrases that indicate whether comparison imaging was utilized, not available, or not mentioned. <b>The</b> <b>queries</b> were iteratively refined and tested on random samples of 100 reports with human review as a reference standard until the precision and recall of <b>the</b> <b>queries</b> did not improve significantly between iterations. Then, query accuracy was assessed on a new random sample of 200 reports. Overall accuracy of <b>the</b> <b>queries</b> was 95. 6 %. <b>The</b> <b>queries</b> were then applied to a database of 1. 8 million reports. Comparisons were made to prior images in 38. 69 % of the reports (693, 955 / 1, 793, 754), were unavailable in 18. 79 % (337, 028 / 1, 793, 754), and were not mentioned in 42. 52 % (762, 771 / 1, 793, 754). The results show that queries of text reports can achieve greater than 95 % accuracy in determining the utilization of prior images...|$|R
25|$|When {{the step}} of {{creating}} aggregate tables is skipped, <b>the</b> <b>query</b> performance then suffers because the larger detailed tables must be queried. This can be partially remedied by adding additional aggregate tables, {{however it is}} still not practical to create aggregate tables for all combinations of dimensions/attributes.|$|E
25|$|An {{information}} retrieval process begins when a user enters a query into the system. Queries are formal statements of information needs, for example search strings in web search engines. In {{information retrieval}} a query does not uniquely identify a single {{object in the}} collection. Instead, several objects may match <b>the</b> <b>query,</b> perhaps with different degrees of relevancy.|$|E
25|$|When {{aligning}} nucleotides, BLAT {{uses the}} third method requiring two perfect word matches of size 11 (11-mers). When aligning proteins, the BLAT version determines the search methodology used: when the client/server version is used, BLAT searches for three perfect 4-mer matches; when the stand-alone version is used, BLAT searches {{for a single}} perfect 5-mer between <b>the</b> <b>query</b> and database sequences.|$|E
40|$|We {{consider}} {{the problem of}} answering queries about a sensitive dataset subject to differential privacy. <b>The</b> <b>queries</b> may be chosen adversarially from a larger set Q of allowable queries {{in one of three}} ways, which we list in order from easiest to hardest to answer: Offline: <b>The</b> <b>queries</b> are chosen all at once and the differentially private mechanism answers <b>the</b> <b>queries</b> in a single batch. Online: <b>The</b> <b>queries</b> are chosen all at once, but the mechanism only receives <b>the</b> <b>queries</b> in a streaming fashion and must answer each <b>query</b> before seeing <b>the</b> next <b>query.</b> Adaptive: <b>The</b> <b>queries</b> are chosen one at a time and the mechanism must answer each <b>query</b> before <b>the</b> next <b>query</b> is chosen. In particular, each query may depend on the answers given to previous queries. Many differentially private mechanisms are just as efficient in the adaptive model as they are in the offline model. Meanwhile, most lower bounds for differential privacy hold in the offline setting. This suggests that the three models may be equivalent. We prove that these models are all, in fact, distinct. Specifically, we show that there is a family of statistical queries such that exponentially more queries from this family can be answered in the offline model than in the online model. We also exhibit a family of search queries such that exponentially more queries from this family can be answered in the online model than in the adaptive model. We also investigate whether such separations might hold for simple queries like threshold <b>queries</b> over <b>the</b> real line...|$|R
5000|$|If <b>the</b> inner <b>query</b> used in {{multiple}} <b>queries,</b> <b>the</b> inner <b>query</b> {{can be stored}} as a view, and then join the view: ...|$|R
3000|$|We first <b>query</b> <b>the</b> pointer which {{points to}} the data list where <b>the</b> <b>queried</b> object is, and achieve the {{corresponding}} parallel line; [...]...|$|R
