535|4954|Public
5|$|In {{automatic}} <b>test</b> <b>pattern</b> <b>generation,</b> finding cliques {{can help}} to bound {{the size of a}} test set. In bioinformatics, clique-finding algorithms have been used to infer evolutionary trees, predict protein structures, and find closely interacting clusters of proteins. Listing the cliques in a dependency graph is an important step in the analysis of certain random processes. In mathematics, Keller's conjecture on face-to-face tiling of hypercubes was disproved by , who used a clique-finding algorithm on an associated graph to find a counterexample.|$|E
50|$|Sometimes {{automatic}} <b>test</b> <b>pattern</b> <b>generation</b> {{is used to}} help {{design the}} series of tests.|$|E
50|$|A card an {{associated}} hardware that allowed for complex video waveform and vectorscope analysis and <b>test</b> <b>pattern</b> <b>generation.</b>|$|E
40|$|Random {{testing is}} a well known concept that each test is {{selected}} randomly regardless of the test previously applied. This paper introduces the antirandom testing which each test applied is chosen such that its total distance from all previous tests is maximum. And one automatic <b>test</b> <b>patterns</b> <b>generation</b> tool using this concept is implemented. At the same time, one popular test generation and simulation tool Nemesis is used to simulate the <b>test</b> <b>patterns</b> generated from Random testing, Antirandom testing and Nemesis which used the Boolean satis ability method, by comparing their fault coverage for stuck-at and bridgeIDDQ in some Benchmark circuits, {{the advantages and disadvantages}} in these three methods are obvious, the suitable situation for each method can be easily found. ...|$|R
40|$|This work {{presents}} {{a new approach}} for testing MOS circuits. The proposed model {{is based on the}} idea that for each kind of fault a dedicated set of <b>test</b> <b>patterns</b> can be generated. In particular for the case of large defects, we defined a dedicated fault model and suggested an approach for detecting such defects with a minimum amount of patterns. 1. Introduction The steady increase of the device complexity of VLSI circuits and reliability requirements in electronic systems make it mandatory to increase the quality of IC-testing. To this purpose, considerable effort has been made. Instead of the classical stuck-at-fault model more and more approaches based on bridging faults and stuck-open faults became common. This means that not only the logical structure of a circuit has to be considered but also the layout. Therefore, an automatic <b>test</b> <b>patterns</b> <b>generation</b> procedure requires the following three inputs: the logical structure of the circuit, the layout, and the defects to be detec [...] ...|$|R
40|$|In {{the domain}} of Safety Real-Time Systems the problem of testing {{represents}} always a big effort in terms of time, costs and efficiency to guarantee an adequate coverage degree. Exhaustive tests may, in fact, not be practicable for large and distributed systems. This paper describes the testing process followed during the validation of the CERN’s LHC Access System [1], responsible for monitoring and preventing physical risks for the personnel accessing the underground areas. In the paper we also present a novel strategy for the testing problem, intended to drastically reduce {{the time for the}} <b>test</b> <b>patterns</b> <b>generation</b> and execution. In particular, we propose a methodology for black-box testing that relies on the application of Model Checking techniques. Model Checking is a formal method from computer science, commonly adopted to prove correctness of system’s models through an automatic system’s state space exploration against some property formulas...|$|R
5000|$|Automatic <b>test</b> <b>pattern</b> <b>generation,</b> ATPG - generates pattern-data to {{systematically}} exercise as many logic-gates, and other components, as possible.|$|E
50|$|Automatic <b>test</b> <b>pattern</b> <b>generation</b> {{is a term}} of art in {{electronic}} design automation for the automatic generation of test vectors for electronic circuits.|$|E
50|$|Prabhu Goel (born 1951) is an Indian-American researcher, {{entrepreneur}} and businessman, {{known for}} having developed the PODEM Automatic <b>test</b> <b>pattern</b> <b>generation</b> and Verilog hardware description language.|$|E
40|$|We {{present a}} method for testing the {{implementation}} of graph transformation specifications focusing on test case <b>generation</b> for graph <b>pattern</b> matching. We propose an extensible fault model {{for the implementation of}} transformations based on common programmer faults and the technicalities of graph transformations. We integrate traditional hardware testing (combinational circuits) and software testing techniques (mutant generation) for generating test cases. Key words: graph transformation, <b>testing,</b> <b>test</b> <b>generation,</b> <b>pattern</b> matching...|$|R
40|$|Abstract—Systems-on-a-chip (SOCs) {{with many}} complex {{intellectual}} property cores require a {{large volume of}} data for manufacturing test. The computing power of the embedded processor in a SOC {{can be used to}} test the cores within the chip boundary, reducing the test time and memory requirements. This paper discusses techniques that use the computing power of the embedded processor in a more sophisticated way. The processor can generate and reuse random numbers to construct <b>test</b> <b>patterns</b> and selectively apply only those patterns that contribute to the fault coverage, significantly reducing the <b>pattern</b> <b>generation</b> time, the total number of test applications and, hence, the test time. It can also apply deterministic <b>test</b> <b>patterns</b> that have been compressed using the characteristics of the random patterns {{as well as those of}} the deterministic patterns themselves, which leads to high compression of test data. We compare three fast run-length coding schemes which are easily implemented and effective for test-data compression. We also demonstrate the effectiveness of the proposed approach by applying it to some benchmark circuits and by comparing it with other available techniques. Index Terms—Built-in self test (BIST), data compression/decompression, embedded core testing, processor-based <b>testing,</b> random <b>pattern</b> <b>generation,</b> system-on-a-chip (SOC), <b>test</b> time. I...|$|R
40|$|Abstract | This paper {{reports the}} design of a T est P atternGenerator (TPG) for V LSI circuits. The on-chip TPG is so {{designed}} that it generates <b>test</b> <b>patterns</b> while avoiding <b>generation</b> of a given Prohibited Pattern Set (PPS). The design ensures desired pseudo-random qualit y of the <b>test</b> <b>patterns</b> generated. The experimental results conrm high quality of randomness while ensur-ing fault coverage close to the gures achieved with a typical Pseudo Random Pattern Generator (PRPG) de-signed around maximal length LFSR=CA. Compared to the conventional PRPG it incurs no additional cost. I...|$|R
5000|$|RTL to GDS II {{implementation}} and signoff: Genus Synthesis, Joules Power Analysis, Innovus Place & Route, Tempus Timing SIgnoff, Voltus Power Integrity Signoff, Modus Automatic <b>Test</b> <b>Pattern</b> <b>Generation.</b>|$|E
50|$|DFT {{plays an}} {{important}} role in the development of test programs and as an interface for test application and diagnostics. Automatic <b>test</b> <b>pattern</b> <b>generation,</b> or ATPG, is much easier if appropriate DFT rules and suggestions have been implemented.|$|E
50|$|The CDCL {{algorithm}} {{has made}} SAT solvers {{so powerful that}} they are being used effectively in several real world application areas like AI planning, bioinformatics, software <b>test</b> <b>pattern</b> <b>generation,</b> software package dependencies, hardware and software model checking, and cryptography.|$|E
50|$|PBIST was {{originally}} adopted by large memory chips that have high pin counts and operate at high frequencies, thereby exceeding {{the capability of}} production testers.The purpose of PBIST is to avoid developing and buying more sophisticated and very expensive testers. The interface between PBIST, which is internal to the processor, and the external tester environment is through the standard JTAG TAP controller pins. Algorithms and controls are fed into the chip through the TAP controller’s Test Data Input (TDI) pin. The final result of the PBIST test is read out through the Test Data Output (TDO) pin. PBIST supports the entire algorithmic memory testing requirements imposed by the production testing methodology. In order to support all of the required test algorithms, PBIST must {{have the capability to}} store the required programs locally in the device. It must also be able to perform different address generation schemes, different <b>test</b> data <b>pattern</b> <b>generation,</b> looping schemes, and data comparisons.|$|R
40|$|The delay fault <b>test</b> <b>pattern</b> set {{generated}} by timing unaware com-mercial ATPG tools mostly affects very short paths, thereby in-creasing the escape chance of smaller delay defects. These small delay defects might be activated on longer paths during functional operation and cause a timing failure. This paper presents an im-proved <b>pattern</b> <b>generation</b> technique for transition fault model, {{which provides a}} higher coverage of small delay defect that lie along the long paths, using a commercial no-timing ATPG tool. The pro-posed technique pre-processes the scan flip-flops based on their least slack path and the detectable delay defect size. A new delay defect size metric based on the affected path length and required increase in test frequency is developed. We then perform <b>pattern</b> <b>generation</b> and apply a novel pattern selection technique to screen <b>test</b> <b>patterns</b> affecting longer paths. Using this technique will pro-vide the opportunity of using existing timing unaware ATPG tools as slack based ATPG. The resulting pattern set improves the defect screening capability of small delay defects...|$|R
40|$|As {{manufacturing}} technology scales down to 65 nm and below, fabricated chips {{are becoming increasingly}} vulnerable to timing-related defects and parametric failures. This leads to increased yield loss and escape and reduced reliability. Scan-based at-speed delay test is becoming an indispensable method for nanometer technology designs to target the timing-related failures. However, the delay <b>test</b> <b>patterns</b> that are generally generated cannot meet the specific requirements raised from manufacturing test experience. In this work, we develop techniques to target several practical <b>test</b> <b>pattern</b> issues. The first is Small-delay defect (SDD) <b>pattern</b> <b>generation</b> using timing-aware method or N-detect method is extremely time-consuming and requires very large memory to store the test data. This is not affordable for most IC companies thus {{both of them are}} rarely used in practice. The second issue is the widely used transition delay <b>test</b> <b>patterns</b> which are generated using 1 -detect method have very low SDD coverage which is not acceptable to guarantee low DPM level. A pattern set that has a compact size as well as satisfying SDD coverage is highly required. The third issue is comparing with functional <b>test</b> <b>pattern,</b> delay <b>test</b> <b>pattern</b> (structural <b>test</b> <b>pattern)</b> cannot provide a reliable result in the speed binning process because of inaccurate mimicking functional running status. It is highly possible that the incorrectly binned chips would fail in the field, thus increase customer return and reduced profitability. The performance mismatch between delay test and functional test needs to be reduced. Besides, In order to solve above problems, we propose novel testing techniques including: (1) TDF pattern selection and pattern evaluation using critical faults; (2) Compact TDF <b>pattern</b> <b>generation</b> to maximize SDD coverage; (3) Worst-case path-based delay test generation considering power supply noise (PSN). The developed procedures help improve yield, reliability and reduce the test cost. Based on the research investigation and development, test time reduction, speed binning delay test generation, and physical diagnosis are also implemented in the industrial work derived from the research topics within this program...|$|R
50|$|In a {{full scan}} design, {{automatic}} <b>test</b> <b>pattern</b> <b>generation</b> (ATPG) is particularly simple. No sequential pattern generation is required - combinatorial tests, which are {{much easier to}} generate, will suffice. If you have a combinatorial test, it can be easily applied.|$|E
50|$|Fault {{coverage}} {{refers to}} the percentage of some type of fault that can be detected during the test of any engineered system. High fault coverage is particularly valuable during manufacturing test, and techniques such as Design For Test (DFT) and automatic <b>test</b> <b>pattern</b> <b>generation</b> are used to increase it.|$|E
50|$|A fault {{coverage}} test passes when {{at least a}} specified percentage of all possible faults can be detected. If it does not pass, at least three options are possible. First, the designer can augment or otherwise improve the vector set, perhaps by using a more effective automatic <b>test</b> <b>pattern</b> <b>generation</b> tool. Second, the circuit may be re-defined for better fault detectibility (improved controllability and observability). Third, the designer may simply accept the lower coverage.|$|E
40|$|In this paper, {{a genetic}} {{algorithm}} (GA) approach for the weighted random testing is discussed. Analyzing optimal weights for weighted random testing {{is a very}} complicated problem. GA is applied to obtain efficient weights for random <b>pattern</b> <b>generation.</b> Simulation results show that GA is an effective method to solve the problem. 1. Introduction Testing has become a costly part in LSI fabrication processes {{because of the difficulty}} of test generation and the long time for test application. Using random or pseudo-random <b>test</b> <b>patterns</b> for LSI <b>testing</b> is an inexpensive approach compared with computing <b>test</b> <b>patterns</b> by deterministic algorithms. Moreover, random testing has the advantage that test application can be performed by a self-test scheme[1, 2]. However, the number of the <b>test</b> <b>patterns</b> needed to obtain a sufficient fault coverage may be too large, and all circuits are not always random testable. The tradeoff exists between test complexity and test length. A major approach to reduce [...] ...|$|R
40|$|The {{presence}} of delay-inducing defects is causing increasing {{concern in the}} semiconductor industry today. To test for such delay-inducing defects, scan-based transition fault testing techniques are being implemented. There exist organized techniques to generate <b>test</b> <b>patterns</b> for the transition fault model and the two popular methods being used are Broad-side delay test (Launch-from-capture) and Skewed load delay test (Launch-from-shift). Each method has its own drawbacks and many practical issues are associated with <b>pattern</b> <b>generation</b> and application. Our work focuses on the implementation and comparison of these transition fault testing techniques on multiple industrial ASIC designs. In this thesis, we present results from multiple designs and compare the two techniques with respect to <b>test</b> coverage, <b>pattern</b> volume and <b>pattern</b> <b>generation</b> time. For both methods, we discuss the effects of multiple clock domains, tester hardware considerations, false and multi-cycle paths {{and the implications of}} using a low cost tester. We then consider the implications of <b>pattern</b> volume on <b>testing</b> both stuck-at and transition faults and the effects of using transition fault patterns to tes...|$|R
40|$|Abstract: ATPG tool {{generated}} {{patterns are}} {{a major component of}} test data for large SOCs. With increasing sizes of chips, higher integration involving IP cores and the need for patterns targeting multiple fault models for better defect coverage in newer technologies, the issues of adequate coverage and reasonable test data volume and application time dominate the economics of test. We address the problem of generating compact set of <b>test</b> <b>patterns</b> across multiple fault models. Traditional approaches use separate ATPG for each fault models and minimize patterns either during <b>pattern</b> <b>generation</b> through static or dynamic compaction, or after <b>pattern</b> <b>generation</b> by simulating all patterns over all fault models for static compaction. We propose a novel ATPG technique where all fault models of interest are concurrently targeted in a single ATPG run. Patterns are generated in small intervals, each consisting of 16, 32 or 64 patterns. In each interval fault model specific ATPG setups generate separate pattern sets for their respective fault model. An effectiveness criterion then selects exactly one of those pattern sets. The selected set covers untargeted faults that would have required the most additional <b>patterns.</b> <b>Pattern</b> <b>generation</b> intervals are repeated until required coverage for faults of all models of interest is achieved. The sum total of all selected interval pattern sets is the overall test set for the DUT. Experiments on industrial circuits show pattern count reductions of 21 % to 68 %. The technique is independent of any special ATPG tool or scan compression technique and requires no change or additional support in an existing ATPG system...|$|R
50|$|CSUs can be {{categorized}} by the class of service they support (DS1, DS3, DDS, etc.) and by the capabilities within that class. For example, basic DS1 (T1) CSUs support loopback of each interface and will produce Alarm indication signal to the provider's NIU (Network Interface Device) {{in the event of}} loss of signal from the customer-premises equipment (CPE). More advanced units will include internal monitors of the performance of the carrier in both directions and may have <b>test</b> <b>pattern</b> <b>generation</b> and monitor capabilities.|$|E
50|$|In {{automatic}} <b>test</b> <b>pattern</b> <b>generation,</b> finding cliques {{can help}} to bound {{the size of a}} test set. In bioinformatics, clique-finding algorithms have been used to infer evolutionary trees, predict protein structures, and find closely interacting clusters of proteins. Listing the cliques in a dependency graph is an important step in the analysis of certain random processes. In mathematics, Keller's conjecture on face-to-face tiling of hypercubes was disproved by , who used a clique-finding algorithm on an associated graph to find a counterexample.|$|E
50|$|Since the SAT {{problem is}} NP-complete, only {{algorithms}} with exponential worst-case complexity {{are known for}} it. In spite of this, efficient and scalable algorithms for SAT were developed {{over the last decade}} and have contributed to dramatic advances in our ability to automatically solve problem instances involving tens of thousands of variables and millions of constraints (i.e. clauses). Examples of such problems in electronic design automation (EDA) include formal equivalence checking, model checking, formal verification of pipelined microprocessors, automatic <b>test</b> <b>pattern</b> <b>generation,</b> routing of FPGAs, planning, and scheduling problems, and so on. A SAT-solving engine is now considered to be an essential component in the EDA toolbox.|$|E
40|$|Abstract — Automatic-test-pattern {{generation}} algorithms generate circuit <b>test</b> <b>patterns,</b> {{can identify}} redundant circuit logic and compare various circuit implementations. Functional test is impractical for larger circuits and E-beam testing was very expensive. To overcome the above said difficulties structural test is used. D {{algorithm was proposed}} for <b>pattern</b> <b>generation</b> but this algorithm proved to be highly ineffective for faults which needed multiple paths to be sensitized simultaneously. To overcome this inefficiency PODEM was introduced. PODEM expanded the binary decision tree around primary input variables only, thus accelerating the algorithm. PODEM algorithm had a subroutine to check the existence of D-frontier. If not, PODEM backtracks immediately, thus speeding up the process. Backtracing is an important method introduced by Goel in PODEM. I...|$|R
40|$|Electron beam {{writer is}} a tool for writing {{patterns}} into a sensitive material (resist) in a high resolution. During the patterning, areas adjacent to the beam incidence point are exposed due to electron scattering effects in solid state (resist and the substrate). Consequently, this phenomenon, also called proximity effect, causes that the exposed pattern can be broader {{in comparison to the}} designed. In this contribution we present a software for proximity effect simulation and a software for proximity effect correction (PEC). The software is based on the model using the density of absorbed energy in resist layer and the model of resist development process. A simulation of proximity effect was carried out on binary lithography <b>patterns,</b> and consequently <b>testing</b> <b>patterns</b> were exposed with a corrected dose. As <b>pattern</b> <b>generation,</b> we used the e-beam writer TESLA BS 600 working with fixed energy 15 keV and variable size rectangular shaped beam. The simulations of binary <b>testing</b> <b>patterns</b> and exposed patterns without PEC were compared. Finally, we compared the testing structures with PEC and without PEC, and we showed that the PEC tool works reliably for the e-beam writer BS 600...|$|R
40|$|This paper {{describes}} {{a new and}} highly efficient approach for weighted random <b>pattern</b> <b>generation.</b> In contrast to the state-of-the-art approaches, where input specific weights are computed, the proposed method {{is based on the}} computation of global weights. This set of a very few weights (e. g., 4 or 8) is pattern oriented and therefore, with each weight the generation of the related random patterns is uniquely specified. Starting with a deterministic <b>test</b> <b>pattern</b> set and the inherent pattern specific weights, columns or rows can be inverted such that the initial weights are maximized in order to minimize the number of random patterns. Our experiments with the prototype system POWER-TEST (Pattern Oriented WEighted Random TESTing) show that very high fault coverage can be achieved with low computation and implementation effort at low self-test hardware costs...|$|R
50|$|Test {{compression}} is {{a technique}} used to reduce the time and cost of testing integrated circuits. The first ICs were tested with test vectors created by hand. It proved {{very difficult to get}} good coverage of potential faults, so Design for testability (DFT) based on scan and automatic <b>test</b> <b>pattern</b> <b>generation</b> (ATPG) were developed to explicitly test each gate and path in a design. These techniques were very successful at creating high-quality vectors for manufacturing test, with excellent test coverage. However, as chips got bigger the ratio of logic to be tested per pin increased dramatically, and the volume of scan test data started causing a significant increase in test time, and required tester memory. This raised the cost of testing.|$|E
50|$|The {{clock speed}} of 20 MHz was quite {{high for the}} era and the {{designers}} were {{very concerned about the}} practicalities of distributing a clock signal of this speed on a board. A lower external clock of 5 MHz was used and this was multiplied up to the required internal frequency using a phase-locked loop (PLL). The internal clock actually had four non-overlapping phases and designers were free to use whichever combination of these they wanted so {{it could be argued that}} the transputer actually ran at 80 MHz. Dynamic logic was used in many parts of the design to reduce area and increase speed. Unfortunately, these techniques are difficult to combine with automatic <b>test</b> <b>pattern</b> <b>generation</b> scan testing so they fell out of favour for later designs.|$|E
50|$|A stuck-at {{fault is}} a {{particular}} fault model used by fault simulators and automatic <b>test</b> <b>pattern</b> <b>generation</b> (ATPG) tools to mimic a manufacturing defect within an integrated circuit. Individual signals and pins {{are assumed to be}} stuck at Logical '1', '0' and 'X'. For example, an input is tied to a logical 1 state during test generation to assure that a manufacturing defect with that type of behavior can be found with a specific test pattern. Likewise the input could be tied to a logical 0 to model the behavior of a defective circuit that cannot switch its output pin.Not all faults can be analyzed using the stuck-at fault model. Compensation for static hazards, namely branching signals, can render a circuit untestable using this model. Also, redundant circuits cannot be tested using this model, since by design there is no change in any output {{as a result of a}} single fault.|$|E
40|$|Testing {{integrated}} circuits to verify their operating frequency, known as delay testing, {{is essential to}} achieve acceptable product quality. The high cost of functional testing has driven the industry to automatically-generated structural tests, applied by low-cost testers taking advantage of design-for-test (DFT) circuitry on the chip. Traditional at-speed functional testing of digital circuits is increasingly challenged by new defect types and {{the high cost of}} functional test development. This research addressed the problems of accurate delay testing in DSM circuits by targeting resistive open and short circuits, while taking into account manufacturing process variation, power dissipation and power supply noise. In this work, we developed a class of structural delay tests in which we extended traditional launch-on-capture delay testing to additional launch and capture cycles. We call these Pseudofunctional Tests (PFT). A <b>test</b> <b>pattern</b> is scanned into the circuit, and then multiple functional clock cycles are applied to it with at-speed launch and capture for the last two cycles. The circuit switching activity over an extended period allows the off-chip power supply noise transient to die down prior to the at-speed launch and capture, achieving better timing correlation with the functional mode of operation. In addition, we also proposed advanced compaction methodologies to compact the generated <b>test</b> <b>patterns</b> into a smaller test set {{in order to reduce the}} test application time. We modified our CodGen K longest paths per gate automatic <b>test</b> <b>pattern</b> generator to implement PFT <b>pattern</b> <b>generation.</b> Experimental results show that PFT test generation is practical in terms of test generation time...|$|R
5000|$|... #Subtitle level 2: Unfolding {{problem and}} cutting <b>pattern</b> <b>generation</b> ...|$|R
5000|$|... #Subtitle level 3: Neurophysiological metronomes: neural {{circuits}} for <b>pattern</b> <b>generation</b> ...|$|R
