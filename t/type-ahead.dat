23|0|Public
2500|$|The Worm in Paradise is {{the third}} and final {{instalment}} of the Silicon Dreams trilogy and is a departure from the previous games. It [...] "evolved alongside a 12 month enhancement on Level 9's own adventure system. Standard features include a 1,000 word vocabulary, a very highly-advanced English input, memory-enhancing text compression, the now familiar and very much appreciated <b>type-ahead,</b> and multi-tasking so a player need never wait while a picture is drawn." [...] This was the first game using version 3 of the A-Code system. It was released for four fewer platforms, excluding the Lynx, Memotech MTX, Nascom and Oric-1 compared to the two previous releases.|$|E
50|$|Three {{different}} ways of searching: find dialog, thumbnail filter and <b>type-ahead</b> find.|$|E
5000|$|Provides {{autocomplete}} feature (suggestion {{lists and}} <b>type-ahead</b> functionality) for user interactions involving text-entry. It supports {{a variety of}} data-source formats. It also supports server-side data-sources via XMLHttpRequest.|$|E
50|$|<b>Type-ahead</b> queries or auto-complete search bars provide {{potential}} search terms while a user types. The suggestions {{capability is}} provided as an optional component specified within an index called a suggester construction. The suggester construction provides {{information about the}} list of fields to be considered as content sources for suggestions.|$|E
5000|$|TeamPage Fall 2014 release [...] New {{features}} include: {{support for}} @ style user [...] "mentions"; updated popup profile card, profile page, and unified search to make @ user names more visible; interactive @ name auto completion works in TeamPage articles, comments and status posts; a new combo-box control for entry forms that supports <b>type-ahead</b> completion for spaces, projects and milestones; moving entries between spaces. Other changes include: TeamPage SDK updates; internationalization updates; performance improvements and bug fixes.|$|E
50|$|Lotus Development {{acquired}} cc:Mail, Inc. (formerly PCC Systems), {{which was}} a Silicon Valley startup, in 1991 and used the cc:Mail technology to enhance Lotus Notes. Lotus Notes features derived from cc:Mail included Shared Mail, client <b>type-ahead</b> addressing, enhancements to the Notes MTA (also called Router), and the Notes Passthru feature. Lotus developed a version of cc:Mail Remote for the HP 95LX. cc:Mail Remote was {{also included in the}} built-in software of the HP 100LX, HP 200LX and HP OmniGo 700LX.|$|E
50|$|TeamPage Winter 2012 release: Calendar Events used {{to record}} meeting and other dates can be created, edited and shown along with project, {{milestone}} and task related dates. Project, task and milestone dashboards can now shown Twitter style status dialog {{focused on that}} specific activity; zoom out to see all status dialog in a space, from a person, or a merge stream of all status your have permission to see; <b>type-ahead</b> navigation and Attivio query completion suggestions; emailed notifications include a list of attached files; new sort options for Project, Milestone, Task sections; Java 7 update; user interface and performance improvements; developer updates.|$|E
5000|$|The Worm in Paradise is {{the third}} and final {{instalment}} of the Silicon Dreams trilogy and is a departure from the previous games. It [...] "evolved alongside a 12 month enhancement on Level 9's own adventure system. Standard features include a 1,000 word vocabulary, a very highly-advanced English input, memory-enhancing text compression, the now familiar and very much appreciated <b>type-ahead,</b> and multi-tasking so a player need never wait while a picture is drawn." [...] This was the first game using version 3 of the A-Code system. It was released for four fewer platforms, excluding the Lynx, Memotech MTX, Nascom and Oric-1 compared to the two previous releases.|$|E
5000|$|The {{environment}} for the boot program is very simple: the CPU is in real mode and the general-purpose and segment registers are undefined, except CS, SS, SP, and DL. CS is always zero and IP is initially [...] Because boot programs are always loaded at this fixed address, {{there is no need}} or motivation for a boot program to be relocatable. DL contains the drive number, as used with INT 13h, of the boot device, unless the BIOS is one that does not set the drive number in DL and then DL is undefined. SS:SP points to a valid stack that is presumably large enough to support hardware interrupts, but otherwise SS and SP are undefined. (A stack must be already set up in order for interrupts to be serviced, and interrupts must be enabled in order for the system timer-tick interrupt, which BIOS always uses at least to maintain the time-of-day count and which it initializes during POST, to be active and for the keyboard to work. The keyboard works even if the BIOS keyboard service is not called; keystrokes are received and placed in the 15-character <b>type-ahead</b> buffer maintained by BIOS.) The boot program must set up its own stack (or at least MS-DOS 6 acts like it must), because the size of the stack set up by BIOS is unknown and its location is likewise variable; although the boot program can investigate the default stack by examining SS:SP, it is easier and shorter to just unconditionally set up a new stack.|$|E
40|$|Users often search spatial {{databases}} like yellow page data using keywords to find businesses {{near their}} current loca-tion. Such searches {{are increasingly being}} performed from mobile devices. Typing the entire query is cumbersome and prone to errors, especially from mobile phones. We address this problem by introducing <b>type-ahead</b> search functional-ity on spatial databases. Like keyword search on spatial data, <b>type-ahead</b> search needs to be location-aware, i. e., with every letter being typed, it needs to return spatial ob-jects whose names (or descriptions) are valid completions of the query string typed so far, and which rank highest in terms of proximity to the user’s location and other static scores. Existing solutions for <b>type-ahead</b> search cannot be used directly as they are not location-aware. We show that a straight-forward combination of existing techniques for per-forming <b>type-ahead</b> search with those for performing prox-imity search perform poorly. We propose a formal model for query processing cost and develop novel techniques that optimize that cost. Our empirical evaluations on real and synthetic datasets demonstrate the effectiveness of our tech-niques. To {{the best of our}} knowledge, this is the first work on location-aware <b>type-ahead</b> search...|$|E
40|$|<b>Type-ahead</b> search can {{on-the-fly}} find answers as a {{user types}} in a keyword query. A main challenge in this search paradigm is the high-efficiency requirement that queries must be answered within milliseconds. In this paper we study {{how to answer}} top-k queries in this paradigm, i. e., as a user types in a query letter by letter, we want to efficiently find the k best answers. Instead of inventing completely new algorithms from scratch, we study challenges when adopting existing top-k algorithms in the literature that heavily rely on two basic list-access methods: random access and sorted access. We present two algorithms to support random access efficiently. We develop novel techniques to support efficient sorted access using list pruning and materialization. We extend our techniques to support fuzzy <b>type-ahead</b> search which allows minor errors between query keywords and answers. We report our experimental results on several real large data sets {{to show that the}} proposed techniques can answer top-k queries efficiently in <b>type-ahead</b> search...|$|E
40|$|<b>Type-ahead</b> {{search is}} a new information-access paradigm, in which systems can find answers to keyword queries “on-the-fly ” as a user types in a query. It {{improves}} traditional autocomplete search by allowing query keywords to appear at different places in an answer. In this paper we study the problem of automatic URL completion and prediction using fuzzy <b>type-ahead</b> search. That is, we interactively find rel-evant URLs that contain words matching query keywords, even approximately, as the user types in a query. Support-ing fuzzy search is very important when the user has limited knowledge about URLs. We describe the design and im-plementation of our method, and report the experimental results on Firefox...|$|E
40|$|Abstract—TASTIER is a {{research}} project on the new information-access paradigm called <b>type-ahead</b> search, in which systems find answers to a keyword query on-the-fly as users type in the query. In this paper we study how to support fuzzy <b>type-ahead</b> search in TASTIER. Supporting fuzzy search is important when users have limited knowledge about the exact representation of the entities they are looking for, such as people records in an online directory. We have developed and deployed several such systems, {{some of which have}} been used by many people on a daily basis. The systems received overwhelmingly positive feedbacks from users due to their friendly interfaces with the fuzzy-search feature. We describe the design and implementation of the systems, and demonstrate several such systems. We show that our efficient techniques can indeed allow this search paradigm to scale on large amounts of data. I...|$|E
40|$|Abstract. SPARQL query {{composition}} {{is difficult for}} the lay-person or even the experienced bioinformatician {{in cases where the}} data model is unfamiliar. Established best-practices and internationalization concerns dictate that semantic web ontologies should use terms with opaque identifiers, further complicating the task. We present SPARQL Assist: a web application that addresses these issues by providing context-sensitive <b>type-ahead</b> completion to existing web forms. Ontological terms are suggested using their labels and descriptions, leveraging existing XML support for internationalization and language-neutrality...|$|E
40|$|In a {{traditional}} keyword-search system over XML data, a user composes a keyword query, submits {{it to the}} system, and retrieves relevant answers. In the case where the user has limited knowledge about the data, often the user feels “left in the dark ” when issuing queries, and has to use a try-and-see approach for finding information. In this paper, we study fuzzy <b>type-ahead</b> search in XML data, a new information-access paradigm in which the system searches XML data on the fly a...|$|E
40|$|Abstract—In a {{traditional}} keyword-search system over XML data, a user composes a keyword query, submits {{it to the}} system, and retrieves relevant answers. In the case where the user has limited knowledge about the data, often the user feels “left in the dark ” when issuing queries, and has to use a try-and-see approach for finding information. In this paper, we study fuzzy <b>type-ahead</b> search in XML data, a new information-access paradigm in which the system searches XML data on the fly as the user types in query keywords. I...|$|E
40|$|SPARQL query {{composition}} {{is difficult for}} the lay-person or even the experienced bioinformatician {{in cases where the}} data model is unfamiliar. Established best-practices and internationalization concerns dictate that semantic web ontologies should use terms with opaque identifiers, further complicating the task. We present SPARQL Assist: a web application that addresses these issues by providing context-sensitive <b>type-ahead</b> completion to existing web forms. Ontological terms are suggested using their labels and descriptions, leveraging existing XML support for internationalization and language-neutrality. Comment: in Adrian Paschke, Albert Burger, Andrea Splendiani, M. Scott Marshall, Paolo Romano: Proceedings of the 3 rd International Workshop on Semantic Web Applications and Tools for the Life Sciences, Berlin,Germany, December 8 - 10, 201...|$|E
40|$|Background: SPARQL query {{composition}} {{is difficult for}} the lay-person, and even the experienced bioinformatician {{in cases where the}} data model is unfamiliar. Moreover, established best-practices and internationalization concerns dictate that the identifiers for ontological terms should be opaque rather than human-readable, which further complicates the task of synthesizing queries manually. Results: We present SPARQL Assist: a Web application that addresses these issues by providing context-sensitive <b>type-ahead</b> completion during SPARQL query construction. Ontological terms are suggested using their multi-lingual labels and descriptions, leveraging existing support for internationalization and language-neutrality. Moreover, the system utilizes the semantics embedded in ontologies, and within the query itself, to help prioritize the most likely suggestions. Conclusions: To ensure success, the Semantic Web must be easily available to all users, regardless of locale, training, or preferred language. By enhancing support for internationalization, and moreover by simplifying the manual construction of SPARQL queries through the use of controlled-natural-language interfaces, we believe we have made some early steps towards simplifying access to Semantic Web resources. Backgroun...|$|E
40|$|Abstract — When a user submits a query, {{they often}} feel “left {{in the dark}} ” when they have {{incomplete}} knowledge about the original data. At that time, {{they have to make}} use of a try-and-see technique for searching data. To solve this problem, a recent development has been made i. e., auto complete. By using simple keywords, users can get relief from the structured query language. The main objective of web search engine is “block-level ” search engine. The primary difficulty is known as block extraction from a web page with reverence to a query. We give a formulation of the similarity of blocks and introduce the notion of “layout tree”. In this paper, we study flossy <b>type-ahead</b> inquest in XML facts, a new information-access paradigm in which the system searches XML facts. Our planned technique has the following features: 1) Inquest as you type: It expands Auto complete by sustaining queries with numerous keywords in XML facts. 2) Flossy: It can get high class responses that hav...|$|E
40|$|Abstract Background SPARQL query {{composition}} {{is difficult for}} the lay-person, and even the experienced bioinformatician {{in cases where the}} data model is unfamiliar. Moreover, established best-practices and internationalization concerns dictate that the identifiers for ontological terms should be opaque rather than human-readable, which further complicates the task of synthesizing queries manually. Results We present SPARQL Assist: a Web application that addresses these issues by providing context-sensitive <b>type-ahead</b> completion during SPARQL query construction. Ontological terms are suggested using their multi-lingual labels and descriptions, leveraging existing support for internationalization and language-neutrality. Moreover, the system utilizes the semantics embedded in ontologies, and within the query itself, to help prioritize the most likely suggestions. Conclusions To ensure success, the Semantic Web must be easily available to all users, regardless of locale, training, or preferred language. By enhancing support for internationalization, and moreover by simplifying the manual construction of SPARQL queries through the use of controlled-natural-language interfaces, we believe we have made some early steps towards simplifying access to Semantic Web resources. </p...|$|E
40|$|Existing keyword-search {{systems in}} {{relational}} databases require users {{to submit a}} complete query to compute answers. Often users feel “left in the dark” when they have limited knowledge about the data, and {{have to use a}} try-and-see method to modify queries and find answers. In this paper we propose a novel approach to keyword search in the relational world, called Tastier. A Tastier system can bring instant gratification to users by supporting <b>type-ahead</b> search, which finds answers “on the fly” as the user types in query keywords. A main challenge is how to achieve a high interactive speed for large amounts of data in multiple tables, so that a query can be answered efficiently within milliseconds. We propose efficient index structures and algorithms for finding relevant answers on-the-fly by joining tuples in the database. We devise a partition-based method to improve query performance by grouping relevant tuples and pruning irrelevant tuples efficiently. We also develop a technique to answer a query efficiently by predicting highly relevant complete queries for the user. We have conducted a thorough experimental evaluation of the proposed techniques on real data sets to demonstrate the efficiency and practicality of this new search paradigm...|$|E
40|$|Geo-textual {{data are}} {{ubiquitous}} these days. Recent study on spatial keyword search {{focused on the}} processing of queries which retrieve objects that match certain keywords within a spatial region. To ensure e ective data retrieval, vari- ous extensions were done including the tolerance of errors in keyword matching and the search-as-you-type feature us- ing pre x matching. We present MESA, a map application to support di erent variants of spatial keyword query. In this demonstration, we adopt the autocompletion paradigm that generates the initial query as a pre x matching query. If there are few matching results, other variants are per- formed {{as a form of}} relaxation that reuses the processing done in earlier phases. The types of relaxation allowed in- clude spatial region expansion and exact/approximate pre- x/substring matching. MESA adopts the client-server ar- chitecture. It provides fuzzy <b>type-ahead</b> search over geo- textual data. The core of MESA is to adopt a unifying search strategy, which incrementally applies the relaxation in an appropriate order to maximize the eciency of query processing. In addition, MESA equips a user-friendly inter- face to interact with users and visualize results. MESA also provides customized search {{to meet the needs of}} di erent users...|$|E
40|$|In {{information}} retrieval, query auto completion (QAC), {{also known}} as <b>type-ahead</b> [Xiao et al., 2013, Cai et al., 2014 b] and auto-complete suggestion [Jain and Mishne, 2010], refers to the following functionality: given a preﬁx consisting {{of a number of}} characters entered into a search box, the user interface proposes alternative ways of extending the preﬁx to a full query. Ranking query completions is a challenging task due to the limited length of preﬁxes entered by users, the large volume of possible query completions matching a preﬁx, and the broad range of possible search intents. In recent years, a large number of query auto completion approaches have been proposed that produce ranked lists of alternative query completions by mining query logs. In this survey, we review work on query auto completion that has been published before 2016. We focus mainly on web search and provide a formal deﬁnition of the query auto completion problem. We describe two dominant families of approaches to the query auto completion problem, one based on heuristic models and the other based on learning to rank. We also identify dominant trends in published work on query auto completion, viz. the use of time-sensitive signals and the use of user-speciﬁc signals. We describe the datasets and metrics that are used to evaluate algorithms for query auto completion. We also devote a chapter to efﬁciency and a chapter to presentation and interaction aspects of query auto completion. We end by discussing related tasks as well as potential research directions to further the area...|$|E

