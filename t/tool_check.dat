3|1818|Public
40|$|When {{working with}} {{children}} in participatory design activities ethical questions arise that are not always considered in a standard ethics review. This paper highlights five challenges around the ethics {{of the value of}} design and the ethics of the children’s participation and presents a new <b>tool,</b> <b>CHECk</b> that deals with three of these challenges by virtue of two checklists that are designed to challenge researchers in CCI and HCI to critically consider the reasons for involving children in design projects and to examine how best to describe design activities in order that children can better consent to participate...|$|E
40|$|The {{article is}} {{associated}} with the creation of a usability lab where various types of tests performed using static and dynamic tools for evaluating the characteristics of usability, accessibility and Communicability by indicators in the software testing process with the user's presence. It also addresses the current situation in Cuba on the issue of evidence of these characteristics and the impact it could bring to the development teams. In addition, an analysis of the result of applying a <b>tool</b> (<b>check</b> list) to multiple Web applications on tests conducted at the National Center for Software Quality Cuba (CALISOFT). We also present a set of best practices that support the development of web applications to suit the user...|$|E
40|$|Web {{analytics}} is the measurement, collection, {{analysis and}} summarizing of internet data {{for purposes of}} understanding and optimizing web usage. To check the web analytics the website IJCT is considered. This paper {{is the first step}} to analyze the availability and performability of the site. Availability depicts that for how much time the system is up i. e. check the utilization of the system on which that site works.   Performability is the method to analyze each and every module separately and clearly in an efficient manner. Availability and performability collectively check the reliability of the system to ensure the performance measurement of that system. Web analytics is not just a tool for measuring and depicting website traffic but {{can be used as a}} tool for business research and market research, as well as a means to check and improve upon the effectiveness and utilization of a web site. The tool used for the web analytics for this site is AWStats. AWStats is an open source Web analytics reporting tool, which used for analyzing the amount of data from Internet services such as web, streaming media, mail and FTP servers. This <b>tool</b> <b>check</b> the performance of the IJCT separately by dividing one month module to days in month, week in month,hours in month,contribution  of various countries, traffic generated etc. This paper deal with the securitization of IJCT for January month to indicate how many events and functionality occurs during surfing on this journal by various users on the Web. This critique helps us to identify the throughput of IJCT.  Here it is clear that users do not actually read: instead, they download and upload the data. A study of different online journals defines that this website scored massive response instead of the short time span. It completely and efficiently elaborate the usage of the IJCT by stating user visited, number of visits,  number of hits,bandwidth and many more. </p...|$|E
40|$|Portable <b>tool</b> <b>checks</b> {{bushings}} and bearings in hard-to-reach {{places to}} ensure they are properly staked. Actuator plate with surfaces at 45 degrees to hydraulic cylinder shaft turns push or pull perpendicular to original direction. Tool makes unnecessary to disassemble equipment {{to gain access to}} parts...|$|R
40|$|KRONOS [6, 8] {{is a tool}} {{developed}} with the aim to assist the user to validate complex real-time systems. The <b>tool</b> <b>checks</b> whether a real-tinae system modeled by a timed automaton [4] satisfies a timing property specified by a formula of the temporal logic TCTL [3]. KRONOS implements the symbolic model-checkin...|$|R
5000|$|Notable <b>Tools</b> that <b>check</b> for {{compliance}} with High Integrity C++ are: ...|$|R
40|$|SQLServer, SQLite ?? PostgreSQL. ??? ????????? ???????? ???????????????? ?????????? ?????? ???? (????????? CHECK) ?? ???????. ???????????? ??????????, ???????? ? ?????? ??????????? ????????. ?????????? ???????? ???? ??????????? ???????????? ??? ?? ????? ??????? ? ?????????? ??? ????, ?? ????????????????, ????? ?????, ?? ?????????????, ?? ????????? ?????????? ?????????. This article {{deals with}} the issue of {{effectiveness}} of using different <b>tools</b> for constraints <b>checking</b> in the relational databases such as SQLServer, SQLite and PostgreSQL. The regular database <b>tools</b> (<b>CHECK</b> procedure) and triggers are being used to check the constraints. The results got in the different operating systems are being compared. The conclusions on appropriateness of using different tools depending on databases being used, data types being checked and a number of simultaneous tests are given. ? ?????? ?????? ??????????????? ????????????? ?????????? ????????? ?????????? ???????? ??????????? ? ??????????? ????? ????? ?? ??????? ???? SQLServer, SQLite ? PostgreSQL. ??? ???????? ??????????? ???????????? ??????????? ???????? ???? (????????? CHECK) ? ????????. ???????????? ??????????, ?????????? ? ?????? ???????????? ????????. ?????????? ?????? ? ???????????????? ????????????? ??? ??? ?????? ??????? ? ??????????? ?? ???????????? ????, ????? ??????????? ?????? ? ?????????? ????????????? ????????...|$|R
40|$|Thesis {{describes}} {{design and}} implementation of the tol for querying SQL databases (SQL console), that makes querying for senior SQL developer a lot easier and more efficient. <b>Tool</b> <b>checks</b> object names written by user (tables, views, [...] .) and enables partially written object names completing. Tool, for better orientation in written code, highlights syntax of queries what helps also as error prevention...|$|R
40|$|We {{present a}} system for sound static {{checking}} of security policies for database-backed Web applications. Our <b>tool</b> <b>checks</b> a combination of access control and information flow policies, where the policies vary based on database contents. For instance, one or more database tables may represent an access control matrix, controlling who may read or write which cells {{of these and other}} tables. Using symbolic evaluation and automated theorem-proving, our <b>tool</b> <b>checks</b> these policies statically, requiring no program annotations (beyond the policies themselves) and adding no run-time overhead. Specifications {{come in the form of}} SQL queries as policies: for instance, an application’s confidentiality policy is a fixed set of queries, whose results provide an upper bound on what information may be released to the user. To provide userdependent policies, we allow queries to depend on what secrets the user knows. We have used our prototype implementation to check several programs representative of the data-centric Web applications that are common today. ...|$|R
40|$|Economical <b>tool</b> <b>checks</b> {{operation}} of automatic circuit analyzer. Each loop is addressed directly from analyzer console by switching internal analyzer bridge to resistance equal that of connecting cable plus specified limiting test value. Procedure verifies whether detected faults in circuit under test are actually due to analyzer malfunction. Standard-length universal test cables {{make it possible}} to shift detector tool from cable to cable without resistance compensation...|$|R
50|$|Chinese farmers {{occasionally}} used backscratchers as a <b>tool</b> to <b>check</b> livestock for fleas and ticks as well.|$|R
5000|$|HistoricalStats <b>Tool</b> — <b>Checks</b> usage {{patterns}} of individual users and provides statistics on a per-day per-user basis.|$|R
5000|$|OutOf Coverage <b>Tool</b> — <b>Checks</b> {{for users}} {{who have not}} sent/received in a {{specified}} period of time.|$|R
40|$|The MRO Sequence <b>Checking</b> <b>Tool</b> program, mro_check, automates {{significant}} {{portions of}} the MRO (Mars Reconnaissance Orbiter) sequence checking procedure. Though MRO has similar checks to the ODY s (Mars Odyssey) Mega <b>Check</b> <b>tool,</b> the <b>checks</b> needed for MRO are unique to the MRO spacecraft. The MRO sequence <b>checking</b> <b>tool</b> automates {{the majority of the}} sequence validation procedure and check lists that are used to validate the sequences generated by MRO MPST (mission planning and sequencing team). The tool performs more than 50 different checks on the sequence. The automation varies from summarizing data about the sequence needed for visual verification of the sequence, to performing automated checks on the sequence and providing a report for each step. To allow for the addition of new checks as needed, this tool is built in a modular fashion...|$|R
5000|$|The {{earliest}} [...] "grammar checkers" [...] were {{programs that}} checked for punctuation and style inconsistencies, {{rather than a}} complete range of possible grammatical errors. The first system was called Writer's Workbench, and was a set of writing tools included with Unix systems {{as far back as}} the 1970s. The whole Writer's Workbench package included several separate <b>tools</b> to <b>check</b> for various writing problems. The [...] "diction" [...] <b>tool</b> <b>checked</b> for wordy, trite, clichéd or misused phrases in a text. The tool would output a list of questionable phrases, and provide suggestions for improving the writing. The [...] "style" [...] tool analyzed the writing style of a given text. It performed a number of readability tests on the text and output the results, and gave some statistical information about the sentences of the text.|$|R
50|$|Malware {{has used}} {{alternate}} data streams to hide code. As a result, malware scanners {{and other special}} <b>tools</b> now <b>check</b> for alternate data streams.|$|R
5000|$|SMTP also {{provides}} <b>tools</b> for <b>checking</b> a domain’s DKIM records in DNS {{as well as}} for checking forward-confirmed reverse DNS (FCdDNS) for an IP.|$|R
40|$|TestEra {{is a novel}} {{framework}} for automated testing of Java programs. We have built TestEra upon Alloy, a lightweight first-order relational language, and the Alloy Analyzer, a fully automatic simulation and <b>checking</b> <b>tool.</b> <b>Checking</b> a Java program with TestEra involves modeling the correctness criteria for the program in Alloy and specifying abstraction and concretization translations between instances of Alloy models and Java data structures. TestEra automatically generates all nonisomorphic test cases within a given input size and verifies the correctness...|$|R
5000|$|In {{cases where}} the {{component}} store is corrupted, the [...] "System Update Readiness tool" [...] (CheckSUR) can be installed on Windows 7, Windows Vista, Windows Server 2008 R2 or Windows Server 2008, replaced by [...] "Deployment Image Service and Management Tool" [...] (DISM) for Windows 10, Windows 8.1, Windows 8, Windows Server 2012 R2 or Windows Server 2012. This <b>tool</b> <b>checks</b> the store against its own payload and repairs the corruptions that it detects by downloading required files through Windows update.|$|R
5000|$|Racket {{comes with}} three logic {{programming}} languages: Racklog, a Prolog-like language; a Datalog implementation; and a miniKanren port. Unlike the Scribble syntax, {{the first two}} of these languages use a completely new syntax rather than an extension of S-expressions. If you use it in DrRacket, you'll see that it provides proper highlighting, the usual host of <b>tools</b> <b>check</b> syntax, and a Prolog/Datalog REPL.#lang datalogancestor(A, B) :- parent(A, B).ancestor(A, B) :- parent(A, C), D = C, ancestor(D, B).parent(john, douglas).parent(bob, john).ancestor(A, B)? ...|$|R
30|$|The {{optimization}} is {{coupled with}} resolution of power system DAEs in (3), (4) {{as well as}} dynamic constraints in (5)–(8), which dramatically increase the computational complexities and make the feasible solutions of the nonlinear optimization problem nonconvex. In addition, no gradient information can easily be obtained and used. Therefore, an idea {{to deal with this}} complex problem is to use black optimization, which takes the simulation <b>tool,</b> <b>checking</b> of post-fault voltage recovery constraints, obtaining speed deviations of generators, and calculating the objective function as a black box.|$|R
50|$|The {{product family}} {{consists}} of Polyspace Code Prover and Polyspace Bug Finder. The Code Prover module annotates source code with a color-coding scheme {{to indicate the}} status of each element in the code. It uses formal methods-based static code analysis to verify program execution at the language level. The <b>tool</b> <b>checks</b> each code instruction by taking into account all possible values of every variable at every point in the code, providing a formal diagnostic for each operation in the code under both normal and abnormal usage conditions.|$|R
5000|$|Checking Aids When {{there are}} special <b>tools</b> for <b>checking</b> parts, this section shows {{a picture of}} the tool and {{calibration}} records, including dimensional report of the tool.|$|R
25|$|Regulations. Scrutineering is {{conducted}} {{within the confines}} of parc fermé where judges use a series of specially manufactured gauges and accurate measuring <b>tools</b> to <b>check</b> the car's compliance.|$|R
50|$|While {{automated}} <b>checking</b> <b>tools</b> {{are helpful}} for website development and maintenance, they cannot guarantee that a document will display as intended in all browsers. Developers should always test documents {{in a variety}} of browsers (including mobile browsers) to locate problems that cannot be detected with a computerized <b>checking</b> <b>tool.</b>|$|R
40|$|Web {{accessibility}} <b>tool</b> <b>checks</b> {{whether a}} particular website is easily {{accessible to the disabled}} persons or not. This tool compares the Web Content Accessibility Guideline (WCAG) 2. 0 standard guidelines with the content of any website or any html page and report the corresponding error. The content is tested automatically via computer programs. This program contains a crawler which navigates from the tools home page to the home page of the URL (uniform resource locater) entered. Then it reads the page line by line, compare it with WCAG standard and report the corresponding error...|$|R
25|$|Software <b>tools</b> {{exist to}} <b>check</b> and detect {{counterfeit}} products.|$|R
50|$|Many {{other tools}} are {{available}} to support Software Product Lines including FaMa, FeatureIDE, Pure::Variants, Ahead, and others. For a full list of available <b>tools</b> please <b>check</b> the feature model wiki page.|$|R
40|$|Written text is an {{important}} component in the process of knowledge acquisition and communication. Poorly written text fails to deliver clear ideas to the reader no matter how revolutionary and ground-breaking these ideas are. Providing text with good writing style is essential to transfer ideas smoothly. While we have sophisticated <b>tools</b> to <b>check</b> for stylistic problems in program code, we do not apply the same techniques for written text. In this paper we present TextLint, a rule-based <b>tool</b> to <b>check</b> for common style errors in natural language. TextLint provides a structural model of written text and an extensible rule-based checking mechanism. ...|$|R
40|$|This paper {{describes}} bus analysis {{needs for}} a new bus, called STbus, in a new SOC design flow based on CoWare N 2 C tool. This flow allows architects to explore and evaluate different STbus architectures for the same system on chip. A waveform analyzer is being developed to take the outputs of the CoWare simulation as inputs and provides reports and graphs about all the STBus features: signals latencies, bus and fifos occupancies, throughputs and bandwidths. Moreover, the <b>tool</b> <b>checks</b> STBus protocol rules and evaluates cycle accuracy discrepancies between CoWare C models and VHDL models. 1...|$|R
3000|$|... that, {{during a}} {{periodic}} control {{and particularly in}} case of suspicion of misuse, the CPS stakeholder will have <b>tools</b> to <b>check</b> which precise version of the software is embedded in a CPS device.|$|R
40|$|Abstract: Unified {{dependability}} {{modeling and}} analysis consists of both functional and non-functional modeling and analysis techniques. Nowadays {{one of the}} most popular modeling techniques is UML. Functional properties of an UML model can be validated and verified by existing modeling <b>tools.</b> <b>Checking</b> of non-functional properties, like those related to dependability is of a growing importance while they cannot be easily derived from UML models. Despite the fact of the existence of a unified concept and terminology of dependability notions and mechanisms, little convergence is observable between the specific fields in dependability engineering. This paper presents a methodology for the uniform modeling of the different dependability related attributes. ...|$|R
5000|$|... “Top 10 Training <b>Tools</b> You Should <b>Check</b> Out in 2015.” - Fitnovatives Blog, AceFitness.Org ...|$|R
5000|$|Web Static Analyzer <b>Tool</b> (WebSAT) - <b>checks</b> {{web page}} HTML against typical {{usability}} guidelines ...|$|R
40|$|We review two {{surveys of}} {{large-scale}} system management, observing common problems across tools and over many years. We {{also note that}} filesystem management tools interfere with filesystem integrity <b>checking</b> <b>tools.</b> Radmind, an integrated filesystem management and integrity <b>checking</b> <b>tool,</b> solves many of these problems. Radmind also provides a useful platform upon which to build further large-scale, automatic system management tools...|$|R
40|$|In {{the early}} stages of system development, model {{checking}} is a good practice for examining the WSNs (Wireless Sensor Networks). Model checking involves verifying a systemś properties based on the systemś finite state model. For varying applications like computers and wireless communication prior to expensive simulations, model checking has become a vital requirement in order to investigate the performance and reliability. In this paper for the first time, we are presenting probabilistic and hybrid model <b>checking</b> <b>tools</b> which are being implemented to analyse and verify the WSN applications and their examples. Here we are categorizing the model <b>checking</b> <b>tools</b> and presenting how they have been used for the investigation of various behaviours of WSN solutions. Consequently, this paper helps readers/researchers to choose the appropriate model <b>checking</b> <b>tool</b> and to get benefited in shape of validating their solutions. The paper has also highlighted the problems of existing model <b>checking</b> <b>tools</b> within WSN domain...|$|R
