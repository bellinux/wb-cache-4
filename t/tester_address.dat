0|12|Public
50|$|A digital computer's memory, more {{specifically}} main memory, consists of many memory locations, each having a physical address, a code, which the CPU (or other device) {{can use to}} access it. Generally only system software, i.e. the BIOS, operating systems, and some specialized utility programs (e.g., memory <b>testers),</b> <b>address</b> physical memory using machine code operands or processor registers, instructing the CPU to direct a hardware device, called the memory controller, to use the memory bus or system bus, or separate control, address and data busses, to execute the program's commands. The memory controllers' bus consists {{of a number of}} parallel lines, each represented by a binary digit (bit). The width of the bus, and thus the number of addressable storage units, and the number of bits in each unit, varies among computers.|$|R
40|$|System reliability, {{availability}} and robustness {{are often not}} well understood by system architects, engineers and developers. They often don't understand what drives customer's availability expectations, how to frame verifiable availability/robustness requirements, how to manage and budget availability/robustness, how to methodically architect and design systems that meet robustness requirements, and so on. The book takes a very pragmatic approach of framing reliability and robustness as a functional aspect of a system so that architects, designers, developers and <b>testers</b> can <b>address</b> it as a concrete, functional attribute of a system, rather than an abstract, non-functional notion" [...] Provided by publisher...|$|R
40|$|Abstract Diamond {{indenters}} {{used in a}} Rockwell {{hardness tester}} can dramatically affect {{the performance of the}} test. For this reason, it is important to find a method that can characterise the indenter. Current methods of verifying diamond indenter geometry have failed to thoroughly predict the performance when in use in the Rockwell <b>tester.</b> The paper <b>addresses</b> a possible method to use depth data during the test to characterise the indenter...|$|R
40|$|International audienceTesting data-intensive {{systems is}} {{paramount}} {{to increase our}} reliance on e-governance services. An incorrectly computed tax can have catastrophic consequences {{in terms of public}} image. Testers at Norwegian Customs and Excise reveal that faults occur from interactions between database features such as field values. Taxation rules, for example, are triggered due to an interaction between 10, 000 items, 88 country groups, and 934 tax codes. There are about 12. 9 trillion 3 -wise interactions. Finding interactions to uncover specific faults is like finding a needle in a haystack. Can we surgically generate a test database for interactions that interest <b>testers?</b> We <b>address</b> this question with a methodology and tool to automatically populate a test database that covers all T-wise interactions for selected features. generates a constraint model of interactions in and solves it using a divide-and-combine strategy. Our experiments demonstrate scalability of our methodology and we project its industrial applications...|$|R
40|$|It is {{well known}} that the {{friction}} performance is a system property. The coefficient of friction and its stability, wear rate and the propensity to vibration and noise are always characteristics of a system and {{it is not easy to}} predict their performance based on smaller scale friction tests. This paper discusses the relation between performances of different-scale testers and possibility to model the friction performance of real systems in small simpler <b>testers.</b> It <b>addressed</b> the application of “scaling laws,” the application of typically adopted scaling strategies in friction industry and the testing strategies based on understanding of phenomena on the friction surface and in the friction systems. Full scale AKM standard dyno test and small tester (Bruker UMT) are related and the testing strategy is suggested. It is concluded that in spite of the fact that the scaling and simulations do not allow for a perfect prediction of performance (friction is a system property), it is still possible to make educated decisions on the research and development stage, when proper testing strategy on a smaller scale is adopted...|$|R
40|$|Nightly/daily {{building}} and smoke testing ” have become widespread since they often reveal bugs {{early in the}} software development process. During these builds, software is compiled, linked, and (re) tested {{with the goal of}} validating its basic functionality. Although successful for conventional software, smoke tests are difficult to develop and automatically rerun for software that has a graphical user interface (GUI). In this paper, we describe a framework called DART (Daily Automated Regression <b>Tester)</b> that <b>addresses</b> the needs of frequent and automated re-testing of GUI software. The key to our success is automation: DART automates everything from structural GUI analysis, test case generation, test oracle creation, to code instrumentation, test execution, coverage evaluation, regeneration of test cases, and their re-execution. Together with the operating system’s task scheduler, DART can execute frequently with little input from the developer/tester to retest the GUI software. We provide results of experiments showing the time taken and memory required for GUI analysis, test case and test oracle generation, and test execution. We also empirically compare the relative costs of employing different levels of detail in the GUI test cases. 1...|$|R
40|$|Abstract:- The {{main purpose}} of this paper is to analyze the robust {{stability}} for a fuzzy vehicle steering control system. In general, fuzzy control system is a nonlinear control system. Therefore, the fuzzy controller may be linearized by the use of describing function first. After then, parameter plane method is then applied to determine the conditions of robust stability when the system has perturbed or adjustable parameters. A systematic procedure is proposed to solve this problem. The effects of plant parameters and control factors are both considered here. Furthermore, the problem of relative stability by using gain-phase margin <b>tester</b> is also <b>addressed.</b> The limit cycles provided by a static fuzzy controller can be easily suppressed if the control factors are chosen properly. Simulation results show the efficiency of our approach. Key-Words:- Vehicle steering system, fuzzy control, parameter plane, limit cycle, gain-phase margins...|$|R
40|$|In {{this paper}} a method is {{introduced}} how to automate the test program implementation process using generic code templates. The basic concept of templates {{is to offer}} the user form sheets, {{which can be used}} to instantiate generic test functions and to generate tester code fitting smoothly into a production test program [...] For this purpose a template is composed of different parts, which contain native test system specific code, user configurable parameters, references to external data bases and special syntax elements in order to control the code generation process. During our work especially the generation of mixed-signal <b>tester</b> code is <b>addressed.</b> 2. Keywords test planning test program generation design-to-test link tester independent data base Quality assurance has been evolving to a main topic for the design of new products during the last five years. It is obvious that high quality goals strongly influence the way how test programs are bein...|$|R
40|$|With the {{widespread}} deployment of broadband connections worldwide, software development and maintenance {{are increasingly being}} done by multiple engineers, often working around-theclock to maximize code churn rates. To ensure rapid quality assurance of such software, techniques such as “nightly/daily building and smoke testing ” have become widespread since they often reveal bugs early in the software development process. During these builds, a development version of the software is checked out from the source code repository tree, compiled, linked, and (re) tested {{with the goal of}} (re) validating its basic functionality. Although successful for conventional software, smoke tests are difficult to develop and automatically rerun for software that has a graphical user interface (GUI). In this paper, we describe a framework called DART (Daily Automated Regression <b>Tester)</b> that <b>addresses</b> the needs of frequent and automated re-testing of GUI software. The key to our success is automation: DART automates everything from structural GUI analysis, smoke test case generation, test oracle creation, to code instrumentation, test execution, coverage evaluation, regeneration of test cases, and their re-execution. Together with the operating system’s task scheduler, DART can execute frequently with little input from the developer/tester to retest the GUI software. We provide results of experiments showing the time taken and memory required for GUI analysis, test case and test oracle generation, and test execution. We empirically compare the relative costs of employing different levels of detail in the GUI test oracle. We also show the events and statements covered by the smoke test cases. ...|$|R
40|$|Software Reverse Engineering (SRE) is the {{practice}} of analyzing a software system, either {{in whole or in}} part, to extract design and implementation information. A typical SRE scenario would involve a software module that has worked for years and carries several rules of a business in its lines of code. Unfortunately the source code of the application has been lost; what remains is “native ” or “binary ” code. Reverse engineering skills are also used to detect and neutralize viruses and malware as well as to protect intellectual property. It became frighteningly apparent during the Y 2 K crisis that reverse engineering skills were not commonly held amongst programmers. Since that time, much research has been undertaken to formalize the types of activities that fall into the category of reverse engineering so that these skills can be taught to computer programmers and <b>testers.</b> To help <b>address</b> the lack of software reverse engineering education, several peer-reviewed articles on software reverse engineering, re-engineering, reuse, maintenance, evolution, and security were gathered with the objective of developing relevant, practical exercises for instructional purposes. The research revealed that SRE is fairly well described and most of the related activities fall into one of tw...|$|R
40|$|Introduction Parallel to {{the growing}} {{interest}} in the deployment of digital games as an instructional tool for educational and social purposes and their theoretical underpinning and viability (Egenfeldt-Nielsen, 2006), the social aspect of gaming itself has also gained interest as in how various forms of human interaction in digital games and game play manifest. For example, Zagal, Nussbaum and Rosas (2002) developed a model for multiplayer game design to support initial steps in the design process of multiplayer games, proposing that social interaction depends on elements of the game (i. e. player(s), rules and goals, and props and tools) and characteristics of a multiplayer game. Moreover, mobile technologies offer new opportunities to embed and exploit multiplayer game and/or game features to various contexts, potentially adding an extra element to the human interaction and digital games, such as the spatial {{environment in which the}} digital game is played). For instance, due to GPS integration in mobile devices, game play progression in so called location-based games is based on players’ interaction with certain game features in a predefined physical location. For example, Huizinga, Admiraal, Akkerman and Dam (2009) developed a mobile city game for students from secondary education to acquire historical knowledge and motivation for history. Likewise, Facer et al. (2004) developed a mobile game experience to encourage the development of children’s conceptual understanding of animal behavior in a direct physical interaction with space and with other players. Due to new game formats, new media and technology opportunities, the social aspect of multiplayer digital gaming the complexity of optimizing game design and eventually game play rises. This paper therefore aims to further explore the competition and cooperation elements (Zagal et al, 2002) for a location-based serious game. This study {{was part of a larger}} study aimed to design and develop a game-based road safety campaign from a user-centered design perspective using several mixed methods throughout the game development process (Pagulayan, Keeker, Wixon, Romero, & Fuller, 2003). The goal was to develop a serious game to enhance the awareness of road safety and to stimulate safe behavior on the road among adolescents. In the first part of the game development process a literature review, interviews and focus groups with relevant stakeholders resulted in a game design concept. [Reference removed to protect anonymity] involved stakeholders in a co-design sessions to gather input on the perception and needs of the target group on several game mechanics. Insights obtained in part one led to the creation of a beta version of the game ‘City Jam’. The game’s goal is to become the most popular band of the city by collecting virtual items spread throughout the city center and therefore competing against one another in teams (four > team < ten); each team consists of two to four players and players have the option to cooperate given the game mechanics and features. In order to evaluate the results we considered a social hourglass shaped framework as to describe cooperation and competition during game play (see figure 1). Methodology Three field tests were deployed during the game development process of the beta version of the location-based serious game ‘City Jam’ with roughly one and a half month between each test. A total of 43 adolescents from the third cycle of secondary education were recruited from eight schools (see table 1). Field test	Game testers (N= 41) 	Number of teams 	Age range (years) 	Gender 				M	F 1 	 18 	 4 	 14 - 18 	 15 	 3 2 	 7 	 3 	 14 - 17 	 6 	 1 3 	 16 	 5 	 15 - 17 	 8 	 8 Table 1. demographics of game testers in the iterative testing phase. Each field test consisted of two parts: the game test and a focus group held directly afterwards to evaluate the game play and experience among the target group. In preparation for each field test a checklist with predefined and/or adjusted goals to optimize game experience were established in collaboration with the game developer. Game mechanics throughout the development process were subject to adjustment based on the insights and results obtained in the test phase. In the game test audio and video recordings were gathered with a Go Pro camera with head mount and audio recordings and survey data were collected in focus groups sessions with (a selection of) the game testers. A semi structured list was used as guidance throughout the focus group. Survey field test included game experience. However, given that the full final version of the game was developed after field test three, researchers evaluated the value of the Likert scale survey on its contribution and decided to reduce survey to open questions only: game testers were asked to write down the 3 most positive and 3 most negative experiences during game play. The field tests were held after school time in the low traffic city center. Each game test was approximately two hours and focus group sessions were around one hour. Results Our preliminary results from field test one showed that on the competitive level sabotaging other teams (dropping virtual bombs to steal points) was considered one of the most positive aspects of overall game play. Also, the menu function ‘newsfeed’ was also received positive as to obtain knowledge on the movements and actions of other teams (although not all teams used this function). Although game testers enjoyed the location based game (good concept), they stated that the game was seen as an individual rather than a team game. Discussing strategy, explaining game features was mixed from team to team and <b>testers</b> <b>addressed</b> that they were not always involved in the game given the restriction of game play on one tablet (size, visibility and walking makes cooperation difficult). Additional physical maps with information on items and scores for non-tablet holders for each team were often neglected during game play. Four promo actions (e. g. taking group pictures with virtual fans) were integrated as to promote cooperation and interaction, however, actual interaction with these elements were considered as mildly interactive. When players were asked during the focus group which elements they would add to improve game experience, several suggestions were made to interact with other groups (via chat) and to expand options and scores of sabotaging other teams. Furthermore suggestions were made to improve cooperation (extra tablet or sync with mobile devices). Field test two results strengthened the positive game experience of sabotaging other teams as it was a recurrent topic of discussion in the focus group. In focus groups, teams addressed that city maps were not used during game play although a game element was changed so that pubs were removed from the tablet map and only shown on the physical city map in order to stimulate cooperation within teams. Traffic questions implemented in the game with the purpose to stimulate cooperation and discussion resulted in mixed results; some teams negotiate and in other teams the tablet holder made decisions and proceeded without mentioning or providing team members with information. Some game <b>testers</b> <b>addressed</b> that the game was not that difficult and in another team the switching of tablet was a considerable issue, which influenced negative game experience on an individual level and resulted in minimal cooperation within the team. In field test three, new game mechanics were integrated and introduced to game testers as to improve cooperation (and to a lesser extent competition, hence it was evaluated based on the previous field tests that this game dynamic was working to expectations in line with the expectations and goals of the game). Results showed that sabotaging was again one of the top positively received game mechanics. The role of a bodyguard was implemented to safeguard that the game was played in a safe manner; hence tablet usage can lead to a decrease in situational awareness due to attention shift. However, all game testers were confused on the extra roles implemented in the game, given the initial role of ‘musician on tour’ and traffic participant. Furthermore, go pro results obtained showed that although interaction during game play is obvious, game related cooperation was mild. As in previous field tests, the improvement in theory did not match expectations on cooperation improvement; decisions and strategy for game play were mainly discussed among two players who were directly into contact with the tablet. The other team member(s) were seldom involved and often not aware of their status in the game. Traffic questions were mostly discussed together which influenced cooperation positively and promo actions were received as positive. A full analysis on the extensive audio and video data will be conducted as to evaluate how to optimize cooperation and competition considering the hourglass social framework in a location-based serious game...|$|R
40|$|Automatic face {{recognition}} (AFR) technologies have seen dramatic improvements in performance {{over the past}} decade, and such systems are now widely used for security and commercial applications. Since recognizing faces is a task that humans are understood {{to be very good}} at, it is common to question the relative performance of AFR and human <b>testers.</b> This paper <b>addresses</b> this question by: 1) conducting recognition tests on commercial AFR systems and human testers, and 2) developing statistical methods to compare the performance of different biometric matchers. Face recognition performance was tested by presenting face image pairs; humans were asked to respond on a scale of “Same”, “Probably Same”, “Not sure”, “Probably Different”, and “Different”, while the biometric match score was measured from AFR systems. To evaluate these results, two new statistical evaluation techniques are developed. The first is a new way to normalize match score distributions, where a normalized match score, ˆt, is calculated {{as a function of the}} angle from a representation of (FMR, FNMR) values in polar coordinates from some center. Using this normalization we develop a second methodology to calculate an average detection error trade-off (DET) curve, and show that this method is equivalent to direct averaging of DET data along each angle from the center. This procedure is then applied to compare the performance of the best AFR algorithms available to us in the years 1999, 2001, 2003, 2005 and 2006, in comparison to human scores. Results show algorithms have dramatically improved in performance over that time; in 2006, the ratio of human participants performing better than AFR to those performing worse is 0. 78. I...|$|R

