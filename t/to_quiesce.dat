4|3|Public
50|$|<b>To</b> <b>quiesce</b> is {{to pause}} or alter a device or {{application}} {{to achieve a}} consistent state, usually {{in preparation for a}} backup or other maintenance. In software applications that modify information stored on disk, this generally involves flushing any outstanding writes; see buffering. With telecom applications, this generally involves allowing existing callers to finish their call but preventing new calls from initiating.|$|E
50|$|Particular {{care must}} be taken when {{designing}} systems with bussed signals which are wired to more than one hot-swap component. When a hot-swap component is inserted its input and output signal pins will represent a temporary short-circuit to ground. This can cause unwanted ground-level pulses on the signals which can disturb the operation of other hot-swap components in the system. This was a problem for early parallel SCSI disk-drives. One common design solution is to protect bussed signal pins with series diodes or resistors. CMOS buffer devices are now available with specialized inputs and outputs that minimize disturbance of bussed signals during the hot-swap operation. If all else fails, another solution is <b>to</b> <b>quiesce</b> the operation of all components during the hot-swap operation.|$|E
40|$|There {{are times}} when the {{execution}} of an object needs to be suspended and later resumed either due to the object responding to external events or processing requirements internal to the object. The Microthread pattern simplifies the management of an objectâ€™s execution when the object needs to start, stop, and resume its execution. This pattern has shown itself to be useful in both stand alone and distributed applications. An example usage is shown along with the benefits and liabilities of using the pattern. An implementation outline is also provided along with some sample code. Finally, patterns related to the Microthread pattern are listed. 1. 0 Intent Allow an object to start, stop, and resume its execution. This allows an object to be contextually sensitive to events during its execution or <b>to</b> <b>quiesce</b> while waiting for events or resources needed to continue execution...|$|E
50|$|Perhaps {{the best}} known support for this was {{incorporated}} into Microsoft Shadow Copies which was introduced in Microsoft Windows Server 2003. For an application <b>to</b> be <b>quiesced</b> during the shadow copy process, it must register itself {{as a writer and}} it is responsible for putting itself into a quiescent mode upon notification.|$|R
5000|$|Snapshot backup: A {{snapshot}} is an instantaneous {{function of}} some storage systems that presents {{a copy of}} the file system as if it were frozen at a specific point in time, often by a copy-on-write mechanism. An effective way to back up live data is <b>to</b> temporarily <b>quiesce</b> them (e.g. close all files), take a snapshot, and then resume live operations. At this point the snapshot can be backed up through normal methods. [...] While a snapshot is very handy for viewing a filesystem as it was at a different point in time, it is hardly an effective backup mechanism by itself.|$|R
40|$|Large {{tube filling}} bubbles rising up through {{quiescent}} fluid in a vertical tube are {{commonly known as}} Taylor bubbles. Their apparent simplicity of form and behaviour has led to them being viewed and modelled as a paradigm for both large bubble dynamics, where there is no continuous gas flow, and slug flow for the case of continuous gas flow. Central to this approach is the question: what diameter tubes support stable Taylor bubbles? In this paper we examine the case of low viscosity Taylor bubbles through experiments and theory and show that they exist in much wider diameter tubes than had previously been reported. In order for the bubbles to be stable a settling period is required to allow the column <b>to</b> sufficiently <b>quiesce.</b> This settling period is compared favourably with the classical stability analysis of Batchelor (1987). We also observe such bubbles rising in an oscillatory manner if the gas input is abruptly curtailed. The oscillations match theoretical predictions well...|$|R
40|$|Incremental {{algorithms}} {{for evaluating}} attribute grammars (AGs) have been extensively studied in recent years, {{primarily because of}} their application in language-based environments. Ordered attribute grammars are a subclass of AGs for which efficient evaluators can be constructed. Previous incremental algorithms for ordered attribute grammars only allowed one modification to the program at a time, requiring attribute evaluation due to one change <b>to</b> <b>quiesce</b> before another one due to a second change can start. This article presents new incremental evaluation algorithms for ordered attribute grammars that can handle asynchronous program modifications in an optimal manner. Support for asynchronous changes is necessary in environments for multiple users, where different programmers may be making changes to {{different parts of the}} program simultaneously. The key to the optimality of the algorithm is an ordering of the attribute evaluations so that an attribute affected by more than one change will only be evaluated once if the changes happen concurrently...|$|E

