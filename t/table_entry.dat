203|627|Public
5|$|<b>Table</b> <b>entry</b> without text {{indicate}} that information regarding building height {{has not yet}} been released.|$|E
5|$|<b>Table</b> <b>entry</b> without text {{indicate}} {{that one or}} more of the following information regarding building heights, floor counts and/or year of completion has not yet been released.|$|E
5|$|Jeppesen {{made the}} {{simplest}} modification to the U.S. Navy tables by drawing {{a new line}} to reduce no-stop limits on an otherwise unchanged table. Divers were recommended to remain within the modified no-stop limit. If {{one of the new}} time limits was not listed on the U.S. Navy table, the next shorter <b>table</b> <b>entry</b> was to be selected.|$|E
5000|$|Page <b>table</b> <b>entries</b> for IBM PowerPC's hashed page tables have a no-execute page bit. [...] Page <b>table</b> <b>entries</b> for radix-tree page {{tables in}} the Power ISA have {{separate}} permission bits granting read/write and execute access.|$|R
5000|$|The {{number of}} branch history <b>table</b> <b>entries</b> was doubled to 2,048.|$|R
50|$|The control <b>table</b> <b>entries</b> {{are then}} much {{more similar to}} {{conditional}} statements in procedural languages but, crucially, without the actual (language dependent) conditional statements (i.e. instructions) being present (the generic code is physically in the interpreter that processes the <b>table</b> <b>entries,</b> not in the table itself - which simply embodies the program logic via its structure and values).|$|R
25|$|In the tables, columns {{represent}} {{the current state}} and rows {{represent the}} current symbol read from the tape. Each <b>table</b> <b>entry</b> is a string of three characters, indicating the symbol to write onto the tape, the direction to move, and the new state (in that order). The halt state is shown as H.|$|E
25|$|The {{following}} table {{summarizes the}} major events {{and characteristics of}} the periods of time making up the geologic time scale. This table is arranged with the most recent geologic periods at the top, and the most ancient at the bottom. The height of each <b>table</b> <b>entry</b> does not correspond to the duration of each subdivision of time.|$|E
25|$|If {{the symbol}} width is n, the codes of width n+1 fall {{naturally}} into two blocks: the lower block of 2n codes for coding single symbols, {{and the upper}} block of 2n codes {{that will be used}} by the decoder for sequences of length greater than one. Of that upper block, the first two codes are already taken: 2n for CLEAR and 2n + 1 for STOP. The decoder must also be prevented from using the last code in the upper block, 2n+1 − 1, because when the decoder fills that slot, it will increase the code width. Thus in the upper block there are 2n − 3 codes available to the decoder that won't trigger an increase in code width. Because the decoder is always one step behind in maintaining the table, it does not generate a <b>table</b> <b>entry</b> upon receiving the first code from the encoder, but will generate one for each succeeding code. Thus the encoder can generate 2n − 2 codes without triggering an increase in code width. Therefore the encoder must emit extra CLEAR codes at intervals of 2n − 2 codes or less to make the decoder reset the coding dictionary. The GIF standard allows such extra CLEAR codes to be inserted in the image data at any time. The composite data stream is partitioned into sub-blocks that each carry from 1 to 255 bytes.|$|E
5000|$|As long as not all <b>table</b> <b>entries</b> {{are exactly}} full, repeat the {{following}} steps: ...|$|R
5000|$|Complex {{expressions}} cannot {{always be}} used directly in data <b>table</b> <b>entries</b> for comparison purposes ...|$|R
5|$|<b>Table</b> <b>entries</b> without text {{indicate}} that information regarding building heights {{has not yet}} been released.|$|R
2500|$|... /USERVA=nnn [...] Customizes {{the amount}} of memory, in megabytes, that is {{allocated}} to processes when using the /3GB switch. This switch permits more page <b>table</b> <b>entry</b> kernel memory but still maintains almost 3 GB of process memory space.|$|E
2500|$|There are {{two ways}} to mark tones in the scheme, appending a number {{to the end of the}} {{syllable}} or using diacritical marks. [...] Each tone's corresponding contour based on Yuen Ren Chao scheme in later studies is given in the second line of its <b>table</b> <b>entry.</b>|$|E
2500|$|CPUID {{can be used}} to {{determine}} if [...] pages are supported. [...] In all three cases, the [...] bits are required to be equal to the 48th bit, or in other words, the low [...] are sign extended to the higher bits. This is done to allow a future expansion of the addressable range, without compromising backwards compatibility. [...] In all levels of the page table, the page <b>table</b> <b>entry</b> includes a no-execute bit.|$|E
5|$|<b>Table</b> <b>entries</b> without text {{indicate}} that information regarding floor counts {{have not been}} determined or remain unknown.|$|R
5000|$|<b>Table</b> <b>entries</b> without text {{indicate}} that information regarding building heights, and/or use {{has not yet}} been released.|$|R
5000|$|To {{generate}} the table, first initialize [...] While doing this, divide the <b>table</b> <b>entries</b> into three categories: ...|$|R
5000|$|When a multi-dimensional {{control table}} {{is used to}} {{determine}} program flow, the normal [...] "hardware" [...] Program Counter function is effectively simulated with either a pointer to the first (or next) <b>table</b> <b>entry</b> or else an index to it. [...] "Fetching" [...] the instruction involves decoding the data in that <b>table</b> <b>entry</b> - without necessarily copying all {{or some of the}} data within the entry first. Programming languages that are able to use pointers have the dual advantage that less overhead is involved, both in accessing the contents and also advancing the counter to point to the next <b>table</b> <b>entry</b> after execution. Calculating the next 'instruction' address (i.e. <b>table</b> <b>entry)</b> can even be performed as an optional additional action of every individual <b>table</b> <b>entry</b> allowing loops and or jump instructions at any stage.|$|E
5000|$|The segment address {{inside the}} {{descriptor}} <b>table</b> <b>entry</b> is expanded to 32 bits so every byte {{of the physical}} memory {{can be defined as}} bound of the segment. The limit value inside the descriptor <b>table</b> <b>entry</b> is expanded to 20 bits and completed with a granularity flag (G-bit, for short): ...|$|E
5000|$|DS:SI = {{points to}} the 16-byte MBR {{partition}} <b>table</b> <b>entry</b> used (see above) ...|$|E
5|$|<b>Table</b> <b>entries</b> with dashes (—) {{indicate}} that information regarding building dates of completion {{has not yet}} been released.|$|R
5|$|<b>Table</b> <b>entries</b> with dashes (—) {{indicate}} that information regarding building heights or dates of completion {{have not been}} released.|$|R
5|$|<b>Table</b> <b>entries</b> without text {{indicate}} that information regarding a building's expected {{year of completion}} {{has not yet been}} released.|$|R
50|$|The {{flowchart}} provided {{explains the}} working of a TLB. If it is a TLB miss, then the CPU checks the page {{table for the}} page <b>table</b> <b>entry.</b> If the ‘present bit’ is set, then the page is in main memory, and the processor can retrieve the frame number from the page <b>table</b> <b>entry</b> to form the physical address. The processor also updates the TLB to include the new page <b>table</b> <b>entry.</b> Finally, if the present bit is not set, then the desired page {{is not in the}} main memory and a page fault is issued. Then a page fault interrupt is called which executes the page fault handling routine.|$|E
5000|$|PTE (page <b>table</b> <b>entry)</b> coalescing, which {{combines}} 4kiB page tables into 32kiB page size.|$|E
50|$|The segment address {{inside the}} {{descriptor}} <b>table</b> <b>entry</b> has {{a length of}} 24 bits so every byte of the physical memory {{can be defined as}} bound of the segment. The limit value inside the descriptor <b>table</b> <b>entry</b> has a length of 16 bits so segment length can be between 1 byte and 216 byte. The calculated linear address equals the physical memory address.|$|E
5|$|<b>Table</b> <b>entries</b> without text {{indicate}} that information regarding floor counts, and/or dates of completion {{has not yet}} been released.|$|R
25|$|<b>Table</b> <b>entries</b> without text {{indicate}} that information regarding a building's expected {{year of completion}} {{has not yet been}} released.|$|R
5|$|<b>Table</b> <b>entries</b> with dashes (—) {{indicate}} that information regarding building heights or dates of completion {{has not yet}} been released.|$|R
5000|$|Assume {{we have a}} data {{structure}} [...] that is always aligned to a 16 byte boundary. In other words, the least significant 4 bits of a table entry's address are always 0 (...) [...] We could use these 4 bits to mark the <b>table</b> <b>entry</b> with extra information. For example, bit 0 might mean read only, bit 1 might mean dirty (the <b>table</b> <b>entry</b> needs to be updated), and so on.|$|E
5000|$|The 1-bit per pixel (1bpp) format {{supports}} 2 distinct colors, (for example: {{black and}} white). The pixel values {{are stored in}} each bit, with the first (left-most) pixel in the most-significant bit of the first byte. Each bit is an index into a table of 2 colors. An unset bit will refer to the first color <b>table</b> <b>entry,</b> and a set bit will refer to the last (second) color <b>table</b> <b>entry.</b>|$|E
5000|$|A typeglob {{value is}} a symbol <b>table</b> <b>entry.</b> The main use of typeglobs is {{creating}} symbol table aliases. For example: ...|$|E
25|$|<b>Table</b> <b>entries</b> without text {{indicate}} that information regarding building heights and/or expected {{year of completion}} {{has not yet been}} released.|$|R
500|$|...<b>Table</b> <b>entries</b> with dashes (—) {{indicate}} that information regarding building heights and/or dates of completion {{has not yet}} been released.|$|R
50|$|Translation lookaside buffer (TLB) <b>entries</b> {{and page}} <b>table</b> <b>entries</b> in PA-RISC 1.1 and PA-RISC 2.0 support read-only, read/write, read/execute, and read/write/execute pages.|$|R
