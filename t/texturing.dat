2359|10000|Public
5|$|Daybreaker {{received}} mixed {{to positive}} reviews from music critics. Some reviewers praised the band for <b>texturing</b> and progressing their sound, and for writing socio-political lyrics. The album was criticised for sounding forced or formulaic. At Metacritic, which assigns a normalized rating out of 100 to reviews from mainstream critics, Daybreaker received an average score of 73, based on 8 reviews, which indicates generally favourable reviews.|$|E
5|$|The {{album was}} written and {{recorded}} {{in two months}} while the band was still on tour in support of their previous record, Happiness... Is Not a Fish That You Can Catch, which had only been released 14 months prior. A combination of lead singer-songwriter Raine Maida's prolific songwriting {{at the time and}} lead-guitarist Mike Turner's discovery of The Age of Spiritual Machines in a bookstore hurried the completion of the album. The band only took a break from recording to organize and perform at Summersault in 2000. Unlike their previous releases, this one features a more organic, acoustic sound, and less obvious layering and electronic <b>texturing.</b>|$|E
5|$|The {{game was}} {{developed}} rather quickly as {{a sequel to}} the Nintendo 64 title Hey You, Pikachu! and to promote the Nintendo e-Reader accessory, and uses a novel 3D <b>texturing</b> effect. It was first showcased at Electronic Entertainment Expo (E3) 2003 and later through a month-long series of promotional events in Sapporo, Hokkaido, Japan. It was released on July 18, 2003, in Japan, December 1 in North America, and April 2, 2004, in Europe. In Japan, the game sold 66,373 copies in its first year. It received mixed reviews, which generally criticized its low level of interactivity and repetitive sound effects, though its collecting aspects and visuals were somewhat better received.|$|E
5000|$|Texturing: 1D/2D/3D <b>textures,</b> cubemaps, multi-texturing, <b>texture</b> arrays, <b>texture</b> rectangles, {{render to}} <b>texture,</b> <b>texture</b> {{coordinate}} generation, <b>texture</b> combiners, mipmapping and mipmaps generation, anisotropic filtering, compressed <b>textures,</b> depth <b>textures,</b> integer <b>textures,</b> non normalized <b>textures,</b> <b>texture</b> buffers, multisample <b>textures.</b>|$|R
5000|$|... 3 Each SM in the GF100 {{contains}} 4 <b>texture</b> filtering {{units for}} every <b>texture</b> address unit. The complete GF100 die contains 64 <b>texture</b> address units and 256 <b>texture</b> filtering units Each SM in the GF104/106/108 architecture contains 8 <b>texture</b> filtering units for every <b>texture</b> address unit. The complete GF104 die contains 64 <b>texture</b> address units and 512 <b>texture</b> filtering units, the complete GF106 die contains 32 <b>texture</b> address units and 256 <b>texture</b> filtering units and the complete GF108 die contains 16 <b>texture</b> address units and 128 <b>texture</b> filtering units.|$|R
40|$|<b>Texture</b> {{synthesis}} {{has been}} an active and important research area in computer graphics and image processing. The goal of <b>texture</b> synthesis is to generate a new <b>texture</b> image from a <b>texture</b> sample such that the new mimic <b>texture</b> image is sufficiently different and appears as the same underlying stochastic process as the original <b>texture</b> sample. Traditional <b>texture</b> synthesis techniques require prohibitively large amount of computer storage and synthesis time to generate a limited size of <b>texture</b> image. This thesis addresses an efficient and simple enough technique for synthesizing <b>textures</b> that facilitates memory efficient <b>textures</b> with an infinite large of size. The synthesizing process generates an initial <b>texture</b> block from the <b>texture</b> sample and subsequently all other <b>texture</b> blocks by measuring the joint occurrence of <b>texture</b> discrimination features. A final <b>texture</b> image is then synthesized by sampling consecutive spatial frequency bands from the <b>texture</b> sample. Based on the assumption of spatial locality, <b>texture</b> images synthesized with this method are visually indistinguishable from the <b>texture</b> samples while preserving local patterns {{for a wide variety}} of deterministic and stochastic <b>textures...</b>|$|R
5|$|Groomed trail skiing {{occurs at}} facilities, such as Nordmarka (Oslo), Royal Gorge Cross Country Ski Resort and Gatineau Park, Quebec, where trails {{are laid out}} and groomed for both classic and skate-skiing. Such {{grooming}} and track setting (for classic technique) requires specialized equipment and techniques that adapt to {{the condition of the}} snow. Trail preparation employs snow machines that tow snow compaction, <b>texturing</b> and track-setting devices. Groomers must adapt such equipment to the condition of the snow—crystal structure, temperature, degree of compaction, moisture content, etc. Depending on the initial condition of the snow, grooming may achieve an increase in density for new-fallen snow or a decrease in density for icy or compacted snow. Cross-country ski facilities may incorporate a course design that meets homologation standards for such organizations as the International Olympic Committee, the International Ski Federation or national standards. Standards address course distances, degree of difficulty with maximums in elevation difference and steepness—both up and downhill, plus other factors. Some facilities have night-time lighting on select trails—called lysløype (light trails) in Norwegian and elljusspår (electric light trails) in Swedish. The first lysløype were opened in 1946 in Nordmarka and at Byåsen (Trondheim).|$|E
5|$|The PlayStation 3 version {{supports}} display {{resolutions of}} 720p and 1080p – the former with {{and the latter}} without anti-aliasing – while the Vita version runs at 720x408 pixels. Graphical features such as the water effects and lighting were improved. Other changes include the addition of bloom, the move from circular to dynamic shadows and tweaks to environmental geometry and <b>texturing.</b> The developers revised the 3D models for both games: most models merely received new textures but those of the playable characters were rebuilt completely with noticeable changes to their faces. The cutscenes and prerendered environments needed to be adjusted from a 4:3 to a 16:9 screen ratio, the process of which required lots of art and programming readjustments. For example, the widescreen display led to character models being visible in a cutscene although they were to appear only in a later shot; these instances had to be corrected. Both the prerendered background images and cutscenes were cropped {{at the top and}} bottom to fit the new screen ratio. However, they received a bump in resolution to appear much clearer than in the PlayStation 2 version. The gameplay also needed to be duplicated while bringing it up to the standard of a high definition game, which was harder than the team thought.|$|E
25|$|Reflection can {{be reduced}} by <b>texturing</b> the surface with 3D pyramids or 2D grooves (gratings).|$|E
40|$|Procedural <b>textures</b> can be {{effectively}} {{used to enhance}} the visual realism of computer rendered images. Procedural <b>textures</b> can provide higher realism for 3 -D objects than traditional hardware <b>texture</b> mapping methods which use memory to store 2 -D <b>texture</b> images. This paper proposes a new method of hardware <b>texture</b> mapping in which <b>texture</b> images are synthesized using FPGAs. This method is very efficient for <b>texture</b> mapping procedural <b>textures</b> {{of more than two}} input variables. By synthesizing these <b>textures</b> on the fly, the large amount of memory required to store their multidimensional <b>texture</b> images is eliminated, making <b>texture</b> mapping of 3 -D <b>textures</b> and parameterized <b>textures</b> feasible in hardware. This paper shows that using FPGAs, procedural <b>textures</b> can be synthesized at high speed, with a small hardware cost. Data on the performance and the hardware cost of synthesizing procedural <b>textures</b> in FPGAs are presented. This paper also presents, the FPGA implementations of two Perlin noise based 3 -D procedural <b>textures.</b> ...|$|R
40|$|Abstract—A <b>texture</b> {{representation}} should corroborate various {{functions of}} a <b>texture.</b> In this paper, {{we present a}} novel approach that incorporates <b>texture</b> features for retrieval in an examplar-based <b>texture</b> compaction and synthesis algorithm. The original <b>texture</b> is compacted and compressed in the encoder to obtain a thumbnail <b>texture,</b> which the decoder then synthesizes to obtain a perceptually high quality <b>texture.</b> We propose using a probabilistic framework based on the generalized EM algorithm to analyze the solutions of the approach. Our experiment results show that a high quality synthesized <b>texture</b> can be generated in the decoder from a compressed thumbnail <b>texture.</b> The number of bits in the com-pressed thumbnail is 400 times lower than that in the original tex-ture and 50 times lower than that needed to compress the orig-inal <b>texture</b> using JPEG 2000. We also show that, in terms of re-trieval and synthesization, our compressed and compacted <b>textures</b> perform better than compressed cropped <b>textures</b> and compressed compacted <b>textures</b> derived by the patchwork algorithm. Index Terms—Examplar-based approach, <b>texture</b> compaction, <b>texture</b> compression, <b>texture</b> retrieval, <b>texture</b> synthesis. I...|$|R
40|$|Abstract. <b>Texture</b> {{compression}} {{technology is}} {{an effective way to}} improve the capacity of the <b>texture</b> without increasing the <b>texture</b> memory. This paper studies a <b>texture</b> compression method based on mipmap technology, details several <b>texture</b> compression formats, and describes the <b>texture</b> file of several formats generating and corresponding parameters adjustment. Practical results show that the <b>texture</b> compression method based on mipmap technology can not only achieve high <b>texture</b> compression ratio, but also cause no effect on the <b>texture</b> quality...|$|R
25|$|The P95PR {{introduced}} in 2005 incorporates a Picatinny rail {{into the frame}} and adds a new nonslip <b>texturing</b> in the polymer frame. This model replaced the original P95 in production.|$|E
25|$|For {{the past}} years, {{researchers}} {{have been trying to}} reduce the price of solar cells while maximizing efficiency. Thin-film solar cell is a cost-effective second generation solar cell with much reduced thickness at the expense of light absorption efficiency. Efforts to maximize light absorption efficiency with reduced thickness have been made. Surface <b>texturing</b> is one of techniques used to reduce optical losses to maximize light absorbed. Currently, surface <b>texturing</b> techniques on silicon photovoltaics are drawing much attention. Surface <b>texturing</b> could be done in multiple ways. Etching single crystalline silicon substrate can produce randomly distributed square based pyramids on the surface using anisotropic etchants. Recent studies show that c-Si wafers could be etched down to form nano-scale inverted pyramids. Multicrystalline silicon solar cells, due to poorer crystallographic quality, are less effective than single crystal solar cells, but mc-Si solar cells are still being used widely due to less manufacturing difficulties. It is reported that multicrystalline solar cells can be surface-textured to yield solar energy conversion efficiency comparable to that of monocrystalline silicon cells, through isotropic etching or photolithography techniques. Incident light rays onto a textured surface do not reflect back out to the air as opposed to rays onto a flat surface. Rather some light rays are bounced back onto the other surface again due to the geometry of the surface. This process significantly improves light to electricity conversion efficiency, due to increased light absorption. This texture effect as well as the interaction with other interfaces in the PV module is a challenging optical simulation task. A particularly efficient method for modeling and optimization is the OPTOS formalism. In 2012, researchers at MIT reported that c-Si films textured with nanoscale inverted pyramids could achieve light absorption comparable to 30 times thicker planar c-Si. In combination with anti-reflective coating, surface <b>texturing</b> technique can effectively trap light rays within a thin film silicon solar cell. Consequently, required thickness for solar cells decreases with the increased absorption of light rays.|$|E
25|$|On August 9, 2007, SIGGRAPH 2007 {{featured}} a seminar titled Spor(T), including segments Player Driven Procedural <b>Texturing,</b> Creating Spherical Worlds, Fast Object Distribution, and Rigblocks: Player-Deformable Objects, given by Spore development team members Andrew Willmott, Ocean Quigley, Henry Goffin, Chris Hecker, Shalin Shodhan and David DeBry. Andrew Willmott has made available slides and videos from the seminar detailing the techniques.|$|E
40|$|This paper {{presents}} an adaptive multiple <b>texture</b> {{approach to the}} problem of <b>texture</b> packing for 3 D video games. In modern graphics hardware, <b>texture</b> size is typically constrained to width and height dimensions that are powers of two. To reduce the <b>texture</b> management overhead caused by storing individual <b>textures,</b> <b>texture</b> packing algorithms are used to pack multiple <b>textures</b> into a single powers-oftwo <b>texture.</b> Current <b>texture</b> packing techniques are very limiting as they are capable of packing <b>textures</b> only into a single <b>texture</b> of predefined size. This can result in significant wasted <b>texture</b> space due to the powers-of-two <b>texture</b> size restrictions. In the proposed technique, individual arbitrarily sized rectangular <b>textures</b> are packed into multiple <b>textures</b> in an adaptive manner. This approach reduces the amount of wasted <b>texture</b> space in a more efficient manner by adaptively determining the quantity as well as size of <b>textures</b> being used during the packing process. Experimental results demonstrate the effectiveness of this technique in packing <b>textures</b> in an efficient and automated fashion. This makes it well suited for improving <b>texture</b> management in future 3 D video games, where resources are limited and a high frame rate needs to be achieved to provide a truly immersive experience...|$|R
40|$|AbstractPreattentive <b>texture</b> {{segregation}} {{was examined}} using <b>textures</b> composed of randomly placed, oriented line segments. A difference in <b>texture</b> element orientation produced an illusory, or orientation-defined, <b>texture</b> edge. Subjects discriminated between two <b>textures,</b> {{one with a}} straight <b>texture</b> edge and one with a “wavy” <b>texture</b> edge. Across conditions {{the orientation of the}} <b>texture</b> elements and the orientation of the <b>texture</b> edge varied. Although the orientation difference across the <b>texture</b> edge (the “texture gradient”) is an important determinant of <b>texture</b> segregation performance, {{it is not the only}} one. Evidence from several experiments suggests that configural effects are also important. That is, orientation-defined <b>texture</b> edges are strongest when the <b>texture</b> elements (on one side of the edge) are parallel to the edge. This result is not consistent with a number of <b>texture</b> segregation models including feature- and filter-based models. One possible explanation is that the second-order channel used to detect a <b>texture</b> edge of a particular orientation gives greater weight to first-order input channels of that same orientation...|$|R
40|$|<b>Texture</b> mapping non-developable {{surfaces}} is a {{very hard}} problem. In this project I try to sidestep the whole <b>texture</b> mapping procedure and instead synthesize <b>texture</b> directly {{on the surface of}} the object. I propose a new <b>texture</b> synthesis algorithm and show its effectiveness on planar <b>texture.</b> This algorithm is then applied to the problem of surface <b>texture</b> with some encouraging results. 1 Introduction In this section I will discuss the use of <b>texture</b> in graphics, the reasons for considering <b>texture</b> synthesis, and advantages of synthesizing <b>texture</b> directly on surfaces. 1. 1 <b>Texture</b> in graphics Although no one can agree on the precise definition of <b>texture,</b> most agree that it must possess some sort of repeated structure (thus an a notion of an element, called a texel). <b>Textures</b> can be purely structured or purely stochastics but most are somewhere in between. In computer graphics <b>texture</b> and <b>texture</b> mapping (placement of <b>texture</b> onto predefined geometry) is one of the most popular tools [...] ...|$|R
25|$|Borax is a {{component}} of many detergents, cosmetics, and enamel glazes. It is used to make buffer solutions in biochemistry, as a fire retardant, as an anti-fungal compound, {{in the manufacture of}} fiberglass, as a flux in metallurgy, neutron-capture shields for radioactive sources, a <b>texturing</b> agent in cooking, as a precursor for other boron compounds, and along with its inverse, boric acid, is useful as an insecticide.|$|E
25|$|First, {{although}} single crystals of YBCO have a {{very high}} critical current density, polycrystals {{have a very}} low critical current density: only a small current can be passed while maintaining superconductivity. This problem is due to crystal grain boundaries in the material. When the grain boundary angle is greater than about 5°, the supercurrent cannot cross the boundary. The grain boundary problem can be controlled to some extent by preparing thin films via CVD or by <b>texturing</b> the material to align the grain boundaries.|$|E
25|$|Graphically, The Sims 2 is more {{detailed}} than The Sims and lets players view its world in full 3D. This {{is a change}} from earlier Sim games, such as SimCity 2000, which used dimetric projection and fixed resolutions, as the camera was in The Sims. In The Sims, Sims are 3D meshes, but The Sims 2 introduces far more detail in mesh quality, texture quality, and animation capability. A Sim's facial features are customizable and unique, and Sims can smile, frown, and blink. The player can adjust a Sim's features in the in-game Create-a-Sim tool; for example, noses {{can be made to}} be very large or very small. <b>Texturing</b> is achieved through use of raster images, though it appears more lifelike.|$|E
40|$|In {{this paper}} we provide an {{approach}} for automatic <b>texture</b> description based on visual <b>texture</b> properties. A set of <b>texture</b> features which directly {{coincide with the}} human visual perception of <b>textures</b> could be useful for e. g. domain independent <b>texture</b> classification in image retrieval systems like IRIS (Hermes et al. (1995)). Therefore, this set of items concerning the visual properties was tested on natural <b>textures</b> {{as well as on}} synthetic <b>textures.</b> Various statistical <b>texture</b> features were evaluated and we found a direct mapping between certain statistical <b>texture</b> features and the items of the set of visual <b>texture</b> properties. Therefore, we provide a way of domain independent classification of <b>textures...</b>|$|R
40|$|Image {{quilting}} is a <b>texture</b> synthesis {{technique to}} create a large <b>texture</b> by wrapping around patches of a small <b>texture</b> {{in a way that}} the repetition of small <b>texture</b> is not noticeable. The basic algorithm is to randomly select small patches in a given <b>texture.</b> These patches are then positioned in a large <b>texture</b> to be synthesized and blended across boundaries to remove the appearance of boundaries across patches. The algorithm is useful to create large isotropic <b>textures</b> from small isotropic <b>textures.</b> We have extended the algorithm to create large isotropic <b>textures</b> from a given anisotropic <b>texture</b> by using only the desired areas in the synthesized <b>texture...</b>|$|R
50|$|<b>Texture</b> in {{painting}} is {{the look and}} feel of the canvas. It is based on the paint, and its application, or the addition of materials such as ribbon, metal, wood, lace, leather and sand. The concept of 'painterliness' also has bearing on <b>texture.</b> The <b>texture</b> stimulates two different senses; sight and touch. There are four types of <b>texture</b> in art: actual <b>texture,</b> simulated <b>texture,</b> abstract <b>texture,</b> and invented <b>texture.</b>|$|R
25|$|The most {{promising}} method developed to utilize this material involves deposition of YBCO on flexible metal tapes coated with buffering metal oxides. This {{is known as}} coated conductor. Texture (crystal plane alignment) can be introduced into the metal tape itself (the RABiTS process) or a textured ceramic buffer layer can be deposited, {{with the aid of}} an ion beam, on an untextured alloy substrate (the IBAD process). Subsequent oxide layers prevent diffusion of the metal from the tape into the superconductor while transferring the template for <b>texturing</b> the superconducting layer. Novel variants on CVD, PVD, and solution deposition techniques are used to produce long lengths of the final YBCO layer at high rates. Companies pursuing these processes include American Superconductor, Superpower (a division of Furukawa Electric), Sumitomo, Fujikura, Nexans Superconductors, and European Advanced Superconductors. A much larger number of research institutes have also produced YBCO tape by these methods.|$|E
25|$|Virtual goods include buildings, vehicles, {{devices of}} all kinds, animations, clothing, skin, hair, jewelry, flora and fauna, and works of art. Services include {{business}} management, entertainment, and custom content creation (which {{can be broken}} up into the following six categories: building, <b>texturing,</b> scripting, animating, art direction, and the position of producer/project funder). L$ can be purchased using US dollars and other local currencies on the LindeX exchange provided by Linden Lab. Customer USD wallets obtained from Linden Dollar sales on the Lindex are most commonly used to pay Second Lifes own subscription and tier fees; only {{a relatively small number}} of users earn enough profit to request a refund to PayPal. According to figures published by Linden Lab, about 64,000 users made a profit in Second Life in February 2009, of whom 38,524 made less than US$10, while 233 made more than US$5000. Profits are derived from selling virtual goods, renting land, and a broad range of services.|$|E
500|$|Several Treasure Planet {{video games}} were {{released}}. Disney Interactive released the naval strategy game [...] for the PC in October 2002, while Sony Computer Entertainment released a Treasure Planet action video {{game for the}} PlayStation and PlayStation 2 in November, developed by Bizarre Creations. The company used Softimage's XSI engine for modeling, <b>texturing</b> and animation, and released a Making-of video on their Facebook page in 2008. A Game Boy Advance game based on the film was also released.|$|E
40|$|We {{present an}} {{approach}} for decorating surfaces with progressivelyvariant <b>textures.</b> Unlike a homogeneous <b>texture,</b> a progressivelyvariant <b>texture</b> can model local <b>texture</b> variations, including the scale, orientation, color, and shape variations of <b>texture</b> elements. We describe techniques for modeling progressively-variant <b>textures</b> in 2 D {{as well as}} for synthesizing them over surfaces. For 2 D <b>texture</b> modeling, our feature-based warping technique allows the user to control the shape variations of <b>texture</b> elements, making it possible to capture complex <b>texture</b> variations such as those seen in animal coat patterns. In addition, our feature-based blending technique can create a smooth transition between two given homogeneous <b>textures,</b> with progressive changes of both shapes and colors of <b>texture</b> elements. For synthesizing <b>textures</b> over surfaces, the biggest challenge is that the synthesized <b>texture</b> elements tend to break apart as they progressively vary. To address this issue, we propose an algorithm based on texton masks, which mark most prominent <b>texture</b> elements in the 2 D <b>texture</b> sample. By leveraging the power of texton masks, our algorithm can maintain the integrity of the synthesized <b>texture</b> elements on the target surface...|$|R
50|$|Patch-based <b>texture</b> {{synthesis}} {{creates a}} new <b>texture</b> by copying and stitching together <b>textures</b> at various offsets, similar {{to the use of}} the clone tool to manually synthesize a <b>texture.</b> Image quilting and graphcut <b>textures</b> are the best known patch-based <b>texture</b> synthesis algorithms. These algorithms tend to be more effective and faster than pixel-based <b>texture</b> synthesis methods.|$|R
40|$|Conventional {{mappings}} {{from the}} <b>texture</b> plane to three-dimensional surfaces fail {{to maintain the}} arc length of the <b>texture</b> when it is mapped onto the surface. This leads to unnatural <b>texture</b> appearance. In addition, <b>texture</b> gradient information is distorted, leading to poor perception of depth. We have developed an efficient algorithm which warps the <b>texture</b> in the <b>texture</b> plane such that the arc length of the <b>texture</b> on the three-dimensional surface is approximately preserved everywhere on the surface. This leads to much more natural <b>texture</b> appearance and preserves <b>texture</b> gradient information. <b>Texture</b> images are preprocessed before the mapping from the <b>texture</b> plane to the three-dimensional surface so no additional run time overhead is incurred compared to conventional two-dimensional <b>texture</b> mapping methods...|$|R
500|$|Banjo-Kazooie {{employs a}} very {{advanced}} technique to render its graphics. The characters were created with minimal amounts of <b>texturing</b> {{to give them}} a sharp and clean look, while the backgrounds use very large textures split into 64×64 pieces, which was the largest texture size the Nintendo 64 could render. As a result, this technique caused significant memory fragmentation issues. However, the developers managed to create a proprietary system that could [...] "reshuffle" [...] memory as players played through the game to solve the fragmentation. According to lead programmer Chris Sutherland, [...] "I'd doubt many N64 games of the time did anything like that". The fact that the player could be transformed into small creatures was implemented to give some of the worlds a different sense of scale.|$|E
500|$|The game's {{graphics}} {{were generally}} praised by critics. GameSpot's Andrew Park stated that virtually {{everything in the}} PC version [...] "looks bright, colorful and clean" [...] when playing in 3D-accelerated mode, but called its <b>texturing</b> minimal. GameSpot's Ben Stahl also called the N64 version's track design [...] "innovative and cute", as well as saying the tracks and backgrounds have a [...] "somewhat real look" [...] {{that makes it easier}} to tell where the player should be driving. IGN's reviewer for the PC version praised the game's background animations, stating that they not only [...] "add to the atmosphere of the game, but also affect the way it plays". However, some reviewers criticised the game's performance, with IGN's Sam Bishop stating that the PlayStation version's load times between levels are horrendous and Next Generation Chris Charla calling the N64 version's framerate [...] "nauseatingly slow". Conversely, IGN's Winnie Imperio called the N64 version's framerate [...] "consistent, if not entirely smooth".|$|E
500|$|Visual Effects Supervisor Tim Burke {{said that}} [...] "It {{was such a}} major job to stage the Battle of Hogwarts, {{and we had to}} do it in {{different}} stages of production. We had shots with complex linking camera moves from wide overviews, to flying into windows and interior spaces. So, we took the plunge at the end of 2008, and started rebuilding the school digitally with Double Negative." [...] He {{went on to say that}} [...] "It's taken two years– getting renders out, <b>texturing</b> every facet of the building, constructing interiors to see through windows, building a destruction version of the school. We can design shots with the knowledge that we have this brilliant digital miniature that we can do anything with. With a practical Hogwarts, we would have shot it last summer and been so tied down. Instead, as David Yates finds the flow and structure, we are able to handle new concepts and ideas." ...|$|E
40|$|Motivated {{by the low}} {{structural}} delity for near-regular <b>textures</b> {{in current}} <b>texture</b> synthesis algorithms, we propose and implement an alternative <b>texture</b> synthesis method for near-regular <b>texture.</b> We view such <b>textures</b> as statistical departures from regular patterns and argue that {{a thorough understanding of}} their structures in terms of their translation symmetries can enhance existing methods of <b>texture</b> synthesis. We demonstrate the perils of <b>texture</b> synthesis for near-regular <b>texture</b> and the promise of faithfully preserving the regularity as well as the randomness in a near-regular <b>texture</b> sample...|$|R
5000|$|Type: Determines {{the type}} of resource: surface, volume, <b>texture,</b> cube <b>texture,</b> volume <b>texture,</b> surface <b>texture,</b> index buffer or vertex buffer.|$|R
40|$|Image <b>textures</b> {{can easily}} be created using <b>texture</b> {{synthesis}} by example. However, creating procedural <b>textures</b> is much more difficult. This is unfortunate, since procedural <b>textures</b> have significant advantages over image <b>textures.</b> In this paper we {{address the problem of}} <b>texture</b> synthesis by example for procedural <b>textures.</b> We introduce a method for procedural multiresolution noise by example. Our method computes the weights of a procedural multiresolution noise, a simple but common class of procedural <b>textures,</b> from an example. We illustrate this method by using it as a key component in a method for <b>texture</b> synthesis by example for isotropic stochastic procedural <b>textures.</b> Our method significantly facilitates the creation of these procedural <b>textures.</b> status: publishe...|$|R
