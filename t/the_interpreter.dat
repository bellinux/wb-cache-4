2902|4610|Public
5|$|Perl is {{distributed}} with over 250,000 functional tests for core Perl language and over 250,000 functional tests for core modules. These run {{as part of}} the normal build process and extensively exercise <b>the</b> <b>interpreter</b> and its core modules. Perl developers rely on the functional tests to ensure that changes to <b>the</b> <b>interpreter</b> do not introduce software bugs; additionally, Perl users who see that <b>the</b> <b>interpreter</b> passes its functional tests on their system can have a high degree of confidence that it is working properly.|$|E
5|$|<b>The</b> <b>interpreter</b> has an {{object-oriented}} architecture. All of {{the elements}} of the Perl language—scalars, arrays, hashes, coderefs, file handles—are represented in <b>the</b> <b>interpreter</b> by C structs. Operations on these structs are defined by a large collection of macros, typedefs, and functions; these constitute the Perl C API. The Perl API can be bewildering to the uninitiated, but its entry points follow a consistent naming scheme, which provides guidance to those who use it.|$|E
5|$|Perl is {{implemented}} as a core interpreter, written in C, {{together with a}} large collection of modules, written in Perl and C. , <b>the</b> <b>interpreter</b> is 150,000 lines of C code and compiles to a 1MB executable on typical machine architectures. Alternatively, <b>the</b> <b>interpreter</b> can be compiled to a link library and embedded in other programs. There are nearly 500 modules in the distribution, comprising 200,000 lines of Perl and an additional 350,000 lines of C code (much of the C code in the modules consists of character encoding tables).|$|E
40|$|This paper {{provides}} {{an analysis of}} <b>the</b> <b>interpreter’s</b> speeches using an aligned simultaneous monologue in-terpreting corpus. The following points have been investigated: (1) <b>the</b> <b>interpreter’s</b> speaking speed, (2) the interpreting unit of simultaneous in-terpretation, and (3) {{the difference between the}} beginning time of the lecturer’s utterance and that of <b>the</b> <b>interpreter’s</b> utterance. This paper also describes characteristic features about the timing at which profes-sional simultaneous interpreters start to speak. The analysis will be avail-able {{for the development of a}} simul-taneous machine interpreting system. ...|$|R
40|$|In this paper, we {{describe}} {{a number of}} rule interpreters, {{each of which is}} presented in production rule form. Each of <b>the</b> <b>interpreters</b> can be executed as an ordinary ELEKTRA ruleset which interprets all or some of the rules in an ELEKTRA system. <b>The</b> <b>interpreters,</b> therefore, override <b>the</b> default behaviour of <b>the</b> ELEKTRA <b>interpreter.</b> Some of <b>the</b> <b>interpreters</b> that {{we describe}} are capable of interpreting themselves: others can be combined into larger, reflective <b>interpreters.</b> <b>The</b> aim of the paper is not, however, to show how sophisticated reflective processing can be achieved in ELEKTRA, but, rather, to show that ELEKTRA is powerful enough to support a wide variety of different interpreters without requiring any changes to its code. None of <b>the</b> <b>interpreters</b> requires additional system code in order to work: ELEKTRA provides all of the facilities used by the rulesets as part of its standard library. This paper is offered as additional evidence of the enormous power of the ELEKTRA system...|$|R
5000|$|The {{following}} {{is an example of}} manipulating a stack in Common Lisp ("" [...] is <b>the</b> Lisp <b>interpreter's</b> prompt; lines not starting with [...] "" [...] are <b>the</b> <b>interpreter's</b> responses to expressions): ...|$|R
5|$|According to {{the mission}} plan, the first {{helicopter}} would hover over the compound's yard while its full team of SEALs fast-roped to the ground. At the same time, the second helicopter would fly to {{the northeast corner of}} the compound and deploy <b>the</b> <b>interpreter,</b> the dog and handler, and four SEALs to secure the perimeter. The team in the courtyard was to enter the house from the ground floor.|$|E
5|$|At compile time, <b>the</b> <b>interpreter</b> parses Perl code into a syntax tree. At run time, it executes {{the program}} by walking the tree. Text is parsed only once, and the syntax tree is subject to {{optimization}} before it is executed, so that execution is relatively efficient. Compile-time optimizations on the syntax tree include constant folding and context propagation, but peephole optimization is also performed.|$|E
5|$|Hoshi Sato, {{played by}} Linda Park, is {{communications}} {{officer of the}} Enterprise and linguistic genius. Capable of learning alien languages extremely quickly, Hoshi serves as <b>the</b> <b>interpreter</b> between the Enterprise crew and new alien species, even after the universal translator is on-line. She suffered anxiety about her place on board originally, but exposure to frequent danger helped her realize her value to the ship.|$|E
40|$|On {{the method}} of Zadig [...] The rise and {{progress}} of palæontology [...] Lectures on evolution [...] <b>The</b> <b>interpreters</b> of Genesis and <b>the</b> <b>interpreters</b> of nature [...] Mr. Gladstone and Genesis [...] The lights {{of the church and}} the light of science [...] Hasisadra's adventure [...] The evolution of theology: an anthropological study Mode of access: Internet. Recon 5...|$|R
5000|$|Seeing Ourselves: Who are <b>the</b> <b>Interpreters</b> of Contemporary Society, Canterbury Press Norwich 1998 ...|$|R
5000|$|Laymon, Charles M. (editor), <b>The</b> <b>Interpreter's</b> One-Volume Commentary on the Bible, Abingdon Press (1971) ...|$|R
5|$|In early {{versions}} of Perl, database interfaces {{were created by}} relinking <b>the</b> <b>interpreter</b> with a client-side database library. This was sufficiently difficult that it was done {{for only a few}} of the most-important and most widely used databases, and it restricted the resulting perl executable to using just one database interface at a time.|$|E
5|$|Perl has a Turing-complete grammar because parsing can be {{affected}} by run-time code executed during the compile phase. Therefore, Perl cannot be parsed by a straight Lex/Yacc lexer/parser combination. Instead, <b>the</b> <b>interpreter</b> implements its own lexer, which coordinates with a modified GNU bison parser to resolve ambiguities in the language.|$|E
5|$|All {{versions}} of Perl do automatic data-typing and automatic memory management. <b>The</b> <b>interpreter</b> knows {{the type and}} storage requirements of every data object in the program; it allocates and frees storage for them as necessary using reference counting (so it cannot deallocate circular data structures without manual intervention). Legal type conversions — for example, conversions from number to string — are done automatically at run time; illegal type conversions are fatal errors.|$|E
40|$|Objective: To explore i) {{the ways}} in which empathic {{communication}} is expressed in interpreter-mediated consultations; ii) <b>the</b> <b>interpreter's</b> effect on <b>the</b> expression of empathic communication. Methods: We coded 9 video-recorded interpreter-mediated simulated consultations by using the Empathic Communication Coding System (ECCS) which we used for each interaction during interpreter-mediated consultations. We compared patients' empathic opportunities and doctors' responses as expressed by the patients and doctors and as rendered by <b>the</b> <b>interpreters.</b> Results: In 44 of the 70 empathic opportunities there was a match between the empathic opportunities as expressed by the patients and as rendered by <b>the</b> <b>interpreters.</b> In 26 of the 70 empathic opportunities, we identified 5 shift categories (reduced emotion, omitted emotion, emotion transformed into challenge, increased challenge/progress, twisted challenge) in <b>the</b> <b>interpreter's</b> rendition to <b>the</b> doctor. These were accompanied by changes in the level of empathy and in the content of the doctors' empathic responses. Conclusion: The interpreters' renditions {{had an impact on the}} patients' empathic opportunities and on the doctors' empathic responses in one third of the coded interactions. Practice implications: Curricula with a focus on intercultural communication and/or empathy should consider the complexity of interpreter-mediated interaction and <b>the</b> <b>interpreter's</b> impact on <b>the</b> construction of empathy. status: accepte...|$|R
40|$|The Korean Armistice Negotiations {{are among}} the major {{historical}} events shaping geopolitical situations in East Asia after World War II. While previous studies of the negotiations followed mainly the approach of traditional historical research, the present study offers a new perspective of the ‘neglected’ participants – <b>the</b> <b>interpreters</b> {{who worked for the}} series of negotiations. An analysis of “post-hoc accounts” of interpreters, using a micro-historical approach, demonstrates complexity of interpreting for wartime negotiations and reveals various conflicts in the interpreting of armistice negotiations as perceived by <b>the</b> <b>interpreters.</b> Intense conflicts were found in the interpreting activity, including: conflicts between <b>the</b> <b>interpreters</b> {{on both sides of the}} negotiations, hidden conflicts between <b>the</b> <b>interpreters</b> and their principals, conflicts between different interpreter roles, conflicts over language use between the two sides of the negotiations, and conflicts arising from misconceptions of the interpreting activity. It was also discovered that <b>the</b> <b>interpreters</b> in <b>the</b> armistice negotiations were generally loyal as the army soldiers instead of maintaining a neutral stance, such as is expected from professional <b>interpreters</b> nowadays. <b>The</b> micro-historical study of the interpreters’ accounts of the major historical events can be useful in exploring and explaining what is hidden behind the complexity of conflicts, thus offering a new approach to interpreting studies as well as to historical studies...|$|R
2500|$|... "John, Letters of," [...] <b>The</b> <b>Interpreter's</b> Dictionary of <b>the</b> Bible (Nashville, 1962), ii. 946 ff.|$|R
5|$|When {{referring}} to the language, the name is normally capitalized (Perl) as a proper noun. When {{referring to}} <b>the</b> <b>interpreter</b> program itself, the name is often uncapitalized (perl) because most Unix-like file systems are case-sensitive. Before {{the release of the}} first edition of Programming Perl, it was common to refer to the language as perl; Randal L. Schwartz, however, capitalized the language's name in the book to make it stand out better when typeset. This case distinction was subsequently documented as canonical.|$|E
5|$|Favre {{spent his}} early adult years among the natives along the Tombigbee River, being {{initially}} {{employed by the}} French as an interpreter of the Choctaw language, but soon coming into the employ of the British and later the Spanish. Favre also understood the Chickasaw language, but at one point his translation was challenged by James Colbert (grandfather of Holmes Colbert), who had married into the Chickasaw tribe, replaced Favre as interpreter. which {{was not a problem}} earlier for Spain during the Treaty of Natchez in 1793, nor at any other time in the long history of his duties for France. Favre was said to be a confidante and personal friend of the celebrated Choctaw Indian chief Pushmataha. Genealogist Heitzmann relates that at one point Favre acted as <b>the</b> <b>interpreter</b> between Pushmataha and the military commanders Andrew Jackson and General Thomas Hinds.|$|E
5|$|The {{idea that}} would spawn Microsoft {{initiated}} when Paul Allen showed Bill Gates {{the first of}} January, 1975 issue of Popular Electronics that demonstrated the Altair 8800. Allen and Gates saw potential to develop an implementation of the programming language BASIC interpreter for the system. Bill Gates called the creators of the new microcomputer, Micro Instrumentation and Telemetry Systems (MITS), offering to demonstrate the implementation {{in order to win}} a contract with the company. Allen and Gates had neither an interpreter nor an Altair system, yet in the eight weeks before the demo, they developed an interpreter. When Allen flew to Albuquerque to meet with MITS, <b>the</b> <b>interpreter</b> worked and MITS agreed to distribute Altair BASIC. Allen and Gates left Boston, where Allen worked for Honeywell and Gates was enrolled in Harvard, moved to Albuquerque (where MITS was located), and co-founded Microsoft there. Revenues of the company totaled $16,005 by the end of 1976.|$|E
30|$|All <b>the</b> <b>interpreters</b> in <b>the</b> {{system are}} examined, {{including}} external users, internal users, and administrators.|$|R
5000|$|... "Brief Encounter in the Smoking Area," [...] (ss) <b>The</b> <b>Interpreter’s</b> House #16 February 2001; read online ...|$|R
2500|$|Laymon, Charles M., <b>The</b> <b>Interpreter's</b> One Volume Commentary on the Bible: Introduction and Commentary, Abingdon Press, (1971).|$|R
5|$|The Spanish {{believed}} that by pressing ahead to Lake Petén Itzá they would {{link up with}} a simultaneous expedition headed by President Barrios himself, unaware that Barrios had not reached the region. Díaz de Velasco sent out a scouting party of 50 musketeers accompanied by native archers on 6 April. They soon found evidence of recent Itza camps in the area, estimated to be a month old. The scouts found a clear road heading north to the Itza kingdom, and the army set off along it. The main force camped about ten leagues (26miles or 42km) south of the lake, while a smaller scouting party was sent off ahead; this consisted of two Spanish soldiers, two archers and two muleteers from Verapaz, with two Ch'ol-speaking native interpreters. The scouting party advanced to the savannah just {{to the south of}} Lake Petén Itzá, where they encountered about 30 Itza hunters armed with spears, shields and bows, accompanied by hunting dogs. The hunters drew their weapons and prepared to fight, but the Mopan interpreter was instructed to explain that the Spanish party were traders who came in peace, accompanied by missionaries. The Spanish began to suspect that <b>the</b> <b>interpreter</b> was plotting against them with the Itza hunters, and one of the Verapaz archers dragged him out from among the hunters. The encounter degenerated into a scuffle, and the Itzas once again drew weapons. The Spanish fired their muskets, fatally wounding two hunters, and a Verapaz Indian charged the Itzas with a machete. The hunters fled, leaving the scouting party in possession of the food and arrows at the hunting camp.|$|E
25|$|Davidson {{points out}} that beliefs and {{meanings}} are inseparable. A person holds a sentence true {{based on what he}} believes and what he takes the sentence to mean. If <b>the</b> <b>interpreter</b> knew what a person believed when that person held a sentence to be true, the meaning of the sentence could then be inferred. Vice versa, if <b>the</b> <b>interpreter</b> knew what a person took a sentence to mean when that person held it to be true, the belief of the speaker could be inferred. So Davidson doesn't allow <b>the</b> <b>interpreter</b> to have access to beliefs as evidence, since <b>the</b> <b>interpreter</b> would then be begging the question. Instead, Davidson allows that <b>the</b> <b>interpreter</b> can reasonably ascertain when a speaker holds a sentence true, without knowing anything about a particular belief or meaning. That will then allow <b>the</b> <b>interpreter</b> to construct hypotheses relating a speaker and an utterance to a particular state of affairs at a particular time.|$|E
25|$|However, VRI {{cannot be}} used for {{situations}} in which all parties are speaking via telephone alone. With video relay service (VRS), the sign language user, <b>the</b> <b>interpreter,</b> and the hearing person are in three separate locations, thus allowing the two clients {{to talk to each}} other on the phone through <b>the</b> <b>interpreter.</b>|$|E
2500|$|Buttrick, G. A. and C. M. Laymon. [...] 1971. <b>The</b> <b>Interpreter's</b> One Volume Commentary on the Bible, pp.13–14[...]|$|R
2500|$|... "The Chronology of the New Testament," [...] <b>The</b> <b>Interpreter's</b> Dictionary of <b>the</b> Bible (Nashville, 1962), i. 599 ff.|$|R
5000|$|Buttrick, G. A. and C. M. Laymon. 1971. <b>The</b> <b>Interpreter's</b> One Volume Commentary on the Bible, pp. 13-14[...]|$|R
25|$|Unlike {{more modern}} APL compilers, this product {{produced}} machine code that would execute only in <b>the</b> <b>interpreter</b> environment, {{it was not}} possible to eliminate <b>the</b> <b>interpreter</b> component. The compiler could compile many scalar and vector operations to machine code, but it would rely on the APL interpreter's services to perform some more advanced functions, rather than attempt to compile them. However, dramatic speedups did occur, especially for heavily iterative APL code.|$|E
25|$|Sign {{language}} interpreting involves considerable {{effort on}} the part of <b>the</b> <b>interpreter,</b> since sign languages are distinct natural languages with their own construction, semantics and syntax, different from the aural version of the same principal language.|$|E
25|$|It was {{reported}} on Wednesday 26 October that <b>the</b> <b>interpreter,</b> Julia Kushnir, was seeking apologies from those newspapers who had published erroneous reports {{that she was}} a prostitute, and that she was likely to sue for damages if the newspapers did not comply.|$|E
40|$|On verso of t. -p. : Authorized edition. On {{the method}} of Zadig [...] The rise and {{progress}} of palæontology [...] Lectures on evolution [...] <b>The</b> <b>interpreters</b> of Genesis and <b>the</b> <b>interpreters</b> of nature [...] Mr. Gladstone and Genesis [...] The lights {{of the church and}} the light of science [...] Hasisadra's adventure [...] The evolution of theology: an anthropological study Mode of access: Internet. Imperfect copy: Half-title wanting...|$|R
40|$|Dawn of {{creation}} and of worship / W. E. Gladstone [...] <b>The</b> <b>interpreters</b> of Genesis and <b>the</b> <b>interpreters</b> of nature / T. H. Huxley [...] Postscript to solar myths / Max Müller [...] Proem to Genesis / W. E. Gladstone [...] Dawn {{of creation}} / Albert Réville [...] Mr. Gladstone and Genesis / T. H. Huxley [...] A protest and a plea / E. Lynn Linton. Mode of access: Internet...|$|R
5000|$|<b>The</b> Omega <b>interpreter</b> is {{a strict}} pure {{functional}} programming <b>interpreter</b> similar to <b>the</b> Hugs Haskell <b>interpreter.</b> <b>The</b> syntax closely {{resembles that of}} Haskell but with important differences: ...|$|R
