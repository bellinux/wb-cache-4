49|168|Public
50|$|Set up a scene. If a {{model is}} not rigged, use <b>top</b> <b>node</b> to position.|$|E
5000|$|This {{can then}} be {{evaluated}} depth-first, starting at the <b>top</b> <b>node</b> (the first [...] ): ...|$|E
50|$|The {{important}} aspect of these tree structures—regardless of whether one uses constituency or dependency to show the structure of phrases—is that they are identified as adjective phrases by the label on the <b>top</b> <b>node</b> of each tree.|$|E
30|$|In Table  3, No. 16 of the <b>top</b> 20 <b>nodes</b> in method 2 can {{be found}} in the <b>top</b> 20 <b>nodes</b> of method 3. No. 9 and No. 10 of the <b>top</b> 20 <b>nodes</b> in method 1 {{can be found}} in the <b>top</b> 20 <b>nodes</b> of methods 2, 3, respectively. It is notable that there are 9 common nodes (emphasized by bold font) among the <b>top</b> 20 <b>nodes</b> in methods 1, 2 and 3. What’s more, No. 16 and No. 14 of the <b>top</b> 20 <b>nodes</b> in methods 2 and 3 {{can be found in}} the <b>top</b> 30 <b>nodes</b> of method 1, respectively. No. 19 and No. 18 of the <b>top</b> 20 <b>nodes</b> in methods 2, 3 {{can be found in the}} <b>top</b> 50 <b>nodes</b> of method 1, respectively. The {{relative}} rankings of these common nodes are different in three methods. The above facts show that node importance rankings of power grid evaluated by methods 1, 2 and 3 have many similarities.|$|R
30|$|From the {{available}} survey data identify one <b>top</b> level <b>node,</b> e.g., performance, cost, safety, etc. As discussed above, these are typically {{directly related to}} the business’s KPIs. One such objective becomes the <b>top</b> level <b>node</b> in the model. Without loss of generality, in this study we assume that there is one principal objective, hence one <b>top</b> level <b>node</b> (Customer satisfaction), although this node itself could comprise multiple sub-goals.|$|R
50|$|The {{distance}} between merged clusters is monotone increasing {{with the level}} of the merger: the height of each node in the plot is proportional to the value of the intergroup dissimilarity between its two daughters (the <b>top</b> <b>nodes</b> representing individual observations are all plotted at zero height).|$|R
5000|$|Actually, a [...] find {{operation}} can {{be implemented}} if parent pointers at each node are maintained. You would start at the absolute bottom-most element of the <b>top</b> <b>node</b> (similar to the left-most child in a heap) and move either up or right to find the element of interest.|$|E
5000|$|The {{rules in}} a TAG are trees {{with a special}} leaf node known as the foot node, which is {{anchored}} to a word. There {{are two types of}} basic trees in TAG: initial trees (often represented as [...] ) and auxiliary trees (...) [...] Initial trees represent basic valency relations, while auxiliary trees allow for recursion.Auxiliary trees have the root (<b>top)</b> <b>node</b> and foot node labeled with the same symbol.A derivation starts with an initial tree, combining via either substitution or adjunction. Substitution replaces a frontier node with another tree whose <b>top</b> <b>node</b> has the same label. The root/foot label of the auxiliary tree must match the label of the node at which it adjoins. Adjunction can thus have the effect of inserting an auxiliary tree into the center of another tree.|$|E
5000|$|In a {{triangular}} {{portion of a}} grid (as in the images below), the number of shortest grid paths from a given node to the <b>top</b> <b>node</b> of the triangle is the corresponding entry in Pascal's triangle. On a Plinko game board shaped like a triangle, this distribution should give the probabilities of winning the various prizes.|$|E
3000|$|Job {{centrality}} analysis Next, we {{evaluate the}} <b>top</b> <b>nodes</b> having the highest centrality {{values in the}} job-level and organization-level graphs for Singapore, Switzerland, and Hong Kong, as shown in Figs.  14,   15, and  16, respectively. The results provide several interesting insights. For the job graph, {{we find that the}} top in-degree, out-degree, and PageRank jobs are overall dominated by major industries. 6 [...]...|$|R
3000|$|... {{between the}} two vectors can be maximum even when {{comparing}} only a few <b>top</b> ranked <b>nodes</b> for α as small as 0.5 /ρ [...]...|$|R
5000|$|... #Caption: The {{interface}} of TIS-100 {{presents the}} player with 12 assembly language-based nodes and other options to develop code in. In this puzzle, the <b>top</b> right <b>node</b> in red is unavailable for use.|$|R
5000|$|Imagine each {{number in}} the {{triangle}} is a node in a grid which {{is connected to the}} adjacent numbers above and below it. Now for any node in the grid, count the number of paths there are in the grid (without backtracking) which connect this node to the <b>top</b> <b>node</b> (1) of the triangle. The answer is the Pascal number associated to that node.|$|E
50|$|In {{functional}} programming, fold (also termed reduce, accumulate, aggregate, compress, or inject) {{refers to}} a family of higher-order functions that analyze a recursive data structure and through use of a given combining operation, recombine the results of recursively processing its constituent parts, building up a return value. Typically, a fold is presented with a combining function, a <b>top</b> <b>node</b> of a data structure, and possibly some default values to be used under certain conditions. The fold then proceeds to combine elements of the data structure's hierarchy, using the function in a systematic way.|$|E
5000|$|The {{labels on}} the nodes {{in the trees}} are acronyms: A = {{adjective}}, Adv = adverb, AP = adjective phrase, N = noun/pronoun, P = preposition, PP = prepositional phrase. The constituency trees identify these phrases as adjective phrases by labeling the <b>top</b> <b>node</b> with AP, and the dependency trees accomplish the same thing by positioning the A node {{at the top of}} the tree. The following trees illustrate the structure of head-initial adjective phrases, i.e. adjective phrases that have their head on the left side of the phrase: ...|$|E
40|$|In recent years, wide {{attention}} has been drawn {{to the problem of}} containing worm propagation in smartphones. Unlike existing containment models for worm propagation, we study how to prevent worm propagation through the immunization of key nodes (e. g.; the <b>top</b> k influential <b>nodes).</b> Thus, we propose a novel containment model based on an influence maximization algorithm. In this model, we introduce a social relation graph to evaluate the influence of nodes and an election mechanism to find the most influential nodes. Finally, this model provides a targeted immunization strategy to disable worm propagation by immunizing the <b>top</b> k influential <b>nodes.</b> The experimental results show that the model not only finds the most influential <b>top</b> k <b>nodes</b> quickly, but also effectively restrains and controls worm propagation...|$|R
30|$|Stage II(a): {{identify}} {{key factors}} Identify the key {{factors that affect}} the principal objective(s) defined in Stage I. Key factors will become parent <b>nodes</b> of the <b>top</b> level <b>node</b> and will have further sub factors influencing them.|$|R
5000|$|... #Caption: Structure {{before and}} after pruning. First the <b>top</b> {{right-most}} <b>node</b> becomes a sink from receiving a NO. Being a sink with only one incoming edge, it is trimmed. Same goes for its parent and the central branch.|$|R
50|$|In {{this example}} the random {{experiment}} consists of flipping three fair coins. The experiment {{is illustrated by}} the rooted tree in the adjacent diagram. There are eight outcomes, each corresponding to a leaf in the tree. A trial of the random experiment corresponds to taking a random walk from the root (the <b>top</b> <b>node</b> in the tree, where no coins have been flipped) to a leaf. The successful outcomes are those in which at least two coins came up tails. The interior nodes in the tree correspond to partially determined outcomes, where only 0, 1, or 2 of the coins have been flipped so far.|$|E
50|$|Our join {{operation}} will combine two auxiliary {{trees as}} long as they have the property that the <b>top</b> <b>node</b> of one (in the reference tree) is a child of the bottom node of the other (essentially, that the corresponding preferred paths can be concatenated). This will work based on the concatenate operation of red-black trees, which combines two trees {{as long as}} they have the property that all elements of one are less than all elements of the other, and split, which does the reverse. In the reference tree, note that there exist two nodes in the top path such that a node is in the bottom path if and only if its key-value is between them. Now, to join the bottom path to the top path, we simply split the top path between those two nodes, then concatenate the two resulting auxiliary trees on either side of the bottom path's auxiliary tree, and we have our final, joined auxiliary tree.|$|E
50|$|All {{representations}} {{of a system}} are {{defined in terms of}} a function map (FMap) and a type map (TMap). With USL, all functions in a system and their relationships are defined with a set of FMaps. Similarly, all types in a system and their relationships are defined with a set of TMaps. FMaps represent the dynamic (doing) world of action by capturing functional and temporal (including priority) characteristics. TMaps represent the static (being) world of objects by capturing spatial characteristics - for example, containment of one object by another or relationships between locations of objects in space. FMaps are inherently integrated with TMaps. Three universal primitive structures derived from the set of axioms and non-primitive structures derived ultimately in terms of the primitive structures specify each map. Primitive structures are universal in that they are able to be used to derive new abstract universal structures, functions or types. The process of deriving new objects (i.e., structures, types and functions) is equivalent to the process of deriving new types in a constructive type theory. Primitive functions, corresponding to primitive operations on types defined in a TMap, reside at the bottom nodes of an FMap. Primitive types, each defined by its own set of axioms, reside at the bottom nodes of a TMap. Each primitive function (or type) can be realized as a <b>top</b> <b>node</b> of a map on a lower (more concrete) layer of the system. Resident at every node on a map is the same kind of object (for example, a function on every node of an FMap and a type on a TMap). The object at each node plays multiple roles; for example, the object can serve as a parent (in control of its children) or a child (being controlled by its parent). Whereas each function on an FMap has a mapping from its input to output (domain to codomain), each type on a TMap has a relation between its domain and codomain. A structure relates each parent and its children according to the set of rules derived from the axioms of control. A primitive structure provides a relationship of the most primitive form (finest grain) of control. All maps are defined ultimately in terms of the primitive structures and therefore abide by the rules associated with each structure: A parent controls its children to have a dependent (Join), independent (Include), or decision-making relationship (Or).|$|E
30|$|Following Stage I of the {{development}} approach described above, the principal objective of this model was identified {{as the level of}} Customer Satisfaction among Queensland Rail’s customers, which translated into a <b>top</b> level <b>node</b> Customer Satisfaction in the Bayesian Network.|$|R
5000|$|The {{algorithm}} stores intervals for nodes of {{the tree}} as opposed to single point-valued estimates. Then, leaf nodes {{of the tree}} can be searched until one of the <b>top</b> level <b>nodes</b> has an interval which is clearly [...] "best." ...|$|R
30|$|We {{proposed}} a ranking system for {{communities in which}} rate communities based on their influence {{on the rest of}} network. As the interest in finding top communities and <b>top</b> <b>nodes</b> in each community grows, various methods have been developed to discover the ranking pattern. Our algorithm uses centrality concept to find top communities in each dataset. In this method, the number of intra community offspring of each node is counted and compared to the total number of nodes in the dataset and then a method of normalization is applied. As a result, the {{proposed a}}lgorithm can find how topology important a node can be (more offspring to outside communities shows more influence).|$|R
30|$|We {{consider}} {{every time}} <b>top</b> <b>node</b> from the segment tree {{and if the}} <b>top</b> <b>node</b> has both edges, we take any node from it and change its two endpoints value and update its information according to the updating protocols.|$|E
3000|$|... [...]. With these assumptions, we may {{construct}} the HM {{tree in a}} straightforward way starting from bottom node coming up to <b>top</b> <b>node.</b>|$|E
30|$|When we can {{see that}} there is only one edge mainEdge in the <b>top</b> <b>node</b> of the segment tree and its {{priority}} is third lowest priority which is 3 (updating protocol number 1 and 6), so that means the other nodes in the segment tree are as same as <b>top</b> <b>node</b> or other nodes contain faulty nodes or having second lowest or first lowest priority edges so we do not need to consider those nodes in this time. But if segment trees topNode contains faulty nodes of the network, then as it follows lowest priority based updating protocols. So consensus will never occur we can claim that easily.|$|E
5000|$|A (gap-1) morass on an {{uncountable}} regular cardinal κ {{consists of}} a tree of height κ + 1, with the top level having κ+-many nodes. The nodes are taken to be ordinals, and functions [...] between these ordinals are associated to the edges in the tree order. It is required that the ordinal structure of the <b>top</b> level <b>nodes</b> be [...] "built up" [...] as the direct limit of the ordinals in the branch to that node by the maps π, so the lower level nodes {{can be thought of}} as approximations to the (larger) <b>top</b> level <b>node.</b> A long list of further axioms is imposed to have this happen in a particularly [...] "nice" [...] way.|$|R
5000|$|A few {{authors of}} 20th-century books on Christian {{symbolism}} (such as Edward N. West in Outward Signs: The Language of Christian Symbolism, 1989) {{have been of}} the opinion that the form of the diagram with one vertex down and the captions [...] "PATER" [...] and [...] "FILIUS" [...] in the two <b>top</b> <b>nodes</b> is more appropriate for Western Christianity with its Filioque, while the form of the diagram with one vertex up represents more closely the doctrine of the Trinity in Eastern Christianity (without the Filioque) [...] - [...] though this hyper-refined interpretation does not agree with 13th-century usage, nor with the use of versions of the diagram with one vertex up by modern Catholics and Protestants.|$|R
40|$|We {{analyze the}} gene {{expression}} data of Zebrafish under the combined framework of complex networks and random matrix theory. The nearest neighbor spacing {{distribution of the}} corresponding matrix spectra follows random matrix predictions of Gaussian orthogonal statistics. Based on the eigenvector analysis we can divide the spectra into two parts, first part for which the eigenvector localization properties match with the random matrix theory predictions, {{and the second part}} for which they show deviation from the theory and hence are useful to understand the system dependent properties. Spectra with the localized eigenvectors can be characterized into three groups based on the eigenvalues. We explore the position of localized nodes from these different categories. Using an overlap measure, we find that the <b>top</b> contributing <b>nodes</b> in the different groups carry distinguished structural features. Furthermore, the <b>top</b> contributing <b>nodes</b> of the different localized eigenvectors corresponding to the lower eigenvalue regime form different densely connected structure well separated from each other. Preliminary biological interpretation of the genes, associated with the <b>top</b> contributing <b>nodes</b> in the localized eigenvectors, suggests that the genes corresponding to same vector share common features. Comment: 6 pages, four figures (accepted in EPL...|$|R
3000|$|... for the <b>top</b> <b>node</b> of {{the pyramid}} is updated. 3 D PMM computes layers of nodes, as {{illustrated}} in Figure  15 (c). Nodes in a layer have one index (i, j or k) in common. All nodes in one layer can be updated entirely in parallel {{since there are no}} dependencies between the computed nodes, since the value of a <b>top</b> <b>node</b> does not depend on other top nodes, see Figure  15 (c). After processing a layer, the computed values are used as bottom-pyramid values to compute the next layer of nodes. An iteration through the domain for an increasing or decreasing common index is referred to as a subsweep. A set of all six subsweeps, increasing and decreasing i, j, k indices, are referred to as a sweep.|$|E
40|$|The {{mechanisms}} {{controlling the}} partitioning of seed composition constituents {{along the main}} stem in soybean are still controversial. Therefore, {{the objective of this}} study was to investigate seed protein, oil, and fatty acids partitioning in soybean cultivars along the main stem. The cultivars were DT 97 - 4290, maturity group (MG) IV; Stressland, MG IV; Hutcheson, MG V; TracyM, MG VI. Seeds were harvested based on position on the plant (top nodes, middle nodes, and bottom nodes). At R 8 (physiological maturity stage), DT 97 - 4290, Hutcheson, and Stressland had higher percentage of protein and oleic acid and lower percentage of oil and linolenic acid in <b>top</b> <b>node</b> seed compared with bottom node seed. The increase of protein in <b>top</b> <b>node</b> compared with the bottom node across the two experiments ranged from 15. 5 to 19. 5 %, 7. 0 to 10. 5 %, 14. 2 to 15. 8 %, 11. 2 to 16. 5 %, respectively for DT 97 - 4290, Hutcheson, Stressland, and TracyM. Except for TracyM, the increase of oleic acid in the <b>top</b> <b>node</b> ranged from 45. 4 to 93 %, depending on the cultivar. Conversely, the decrease in the <b>top</b> <b>node</b> seed ranged from 14. 4 to 26. 8 % for oil and from 5. 7 to 34. 4 % for linolenic acid, depending on the cultivar. The partitioning trend of seed composition constituents at R 6 (seed - fill stage) was inconsistent. Except for Stressland, seed oleic acid was higher at R 6 than at R 8. The higher protein and oleic acid concentrations in the <b>top</b> <b>node</b> seed was accom- panied by higher activity of nitrate reductase activity, higher chlorophyll concentration, higher nitrogen (N) and sulfur (S) percentages in the fully expanded leaves at R 5 -R 6 growth stage, and higher seed nitrogen (N) and sulfur (S) percentages in DT 97 - 4290 and Stressland. The current research suggests that the partitioning of seed protein, oil, and fatty acids in nodes along the plant depended on the position of node on the main stem, cultivar differences, seed N and S status, and tissue N and S partitioning. The higher nitrate reductase activity at the top nodes, accompanied higher protein and oleic acid, and the changes of oleic acid at R 6 and R 8 along the stem, were not previously reported, and need further investigation. The current knowledge is useful for soybean germplasm selection for desirable traits such protein and oleic acid, and for accurate measurements of seed composition constituents in breeding lines...|$|E
40|$|In this paper, {{we propose}} decision-tree-based multiclass sup-port vector machines. In training, at the <b>top</b> <b>node,</b> we deter-mine the {{hyperplane}} that separates a class (or some classes) from the others. If the separated classes include plural classes, at the node {{connected to the}} <b>top</b> <b>node,</b> we determine the hy-perplane that separates the classes. We repeat this proce-dure until only one class remains in the separated region. This can resolve the unclassifiable regions {{that exist in the}} conventional SVMs, but a new problem arises. Namely, the division of the feature space depends on the structure of a decision tree. To maintain high generalization ability, the most separable classes should be separated at the upper nodes of a decision tree. For this, we propose four types of decision trees based on separability measured by the Eu-clidean distances between class centers and Mahalanobis-distance-based classifiers. We demonstrate the effectiveness of our methods over conventional SVMs using benchmark data sets. 1...|$|E
50|$|The {{following}} is the grammar for the CIF format with cifFile being the <b>top</b> level grammar <b>node.</b>|$|R
500|$|Bridge {{topology}} is {{an important}} topology with many uses in both linear and non-linear applications, including, amongst many others, the bridge rectifier, the Wheatstone bridge and the lattice phase equaliser. [...] There are several ways that bridge topology is rendered in circuit diagrams. [...] The first rendering in figure 1.8 is the traditional depiction of a bridge circuit. [...] The second rendering clearly shows the equivalence between the bridge topology and a topology derived by series and parallel combinations. [...] The third rendering is more commonly known as lattice topology. [...] It is not so obvious that this is topologically equivalent. [...] It {{can be seen that}} this is indeed so by visualising the <b>top</b> left <b>node</b> moved {{to the right of the}} <b>top</b> right <b>node.</b>|$|R
50|$|Bridge {{topology}} is {{an important}} topology with many uses in both linear and non-linear applications, including, amongst many others, the bridge rectifier, the Wheatstone bridge and the lattice phase equaliser. There are several ways that bridge topology is rendered in circuit diagrams. The first rendering in figure 1.8 is the traditional depiction of a bridge circuit. The second rendering clearly shows the equivalence between the bridge topology and a topology derived by series and parallel combinations. The third rendering is more commonly known as lattice topology. It is not so obvious that this is topologically equivalent. It {{can be seen that}} this is indeed so by visualising the <b>top</b> left <b>node</b> moved {{to the right of the}} <b>top</b> right <b>node.</b>|$|R
