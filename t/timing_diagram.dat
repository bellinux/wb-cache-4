90|98|Public
25|$|The <b>timing</b> <b>diagram</b> {{is shown}} to the right. The timing is further {{described}} below and applies to both the master and the slave device.|$|E
50|$|A digital <b>timing</b> <b>diagram</b> is a {{representation}} {{of a set of}} signals in the time domain. A <b>timing</b> <b>diagram</b> can contain many rows, usually one of them being the clock. It is a tool that is ubiquitous in digital electronics, hardware debugging, and digital communications. Besides providing an overall description of the timing relationships, the digital <b>timing</b> <b>diagram</b> can help find and diagnose digital logic hazards.|$|E
5000|$|... #Caption: <b>Timing</b> <b>diagram</b> for an MRI {{spin echo}} pulse sequence.|$|E
40|$|The use of <b>timing</b> <b>diagrams</b> is {{recommended}} {{in the design}} and testing of multi-task Ada programs. By displaying the task states vs. time, <b>timing</b> <b>diagrams</b> can portray the simultaneous threads of data flow and control which characterize tasking programs. This description of the system's dynamic behavior from conception to testing is a necessary adjunct to other graphical techniques, such as structure charts, which essentially give a static view of the system. A series of steps {{is recommended}} which incorporates <b>timing</b> <b>diagrams</b> into the design process. Finally, a description is provided of a prototype Ada Execution Analyzer (AEA) which automates the production of <b>timing</b> <b>diagrams</b> from VAX/Ada debugger output...|$|R
40|$|Symbolic Timing Diagrams [DJS 95] {{have been}} {{introduced}} to increase acceptance of formal specification methods among hardware designers. Within the FORMAT project [KD 96] they {{have been used as}} input language to automated verification tools. They have proven to be very valuable for easy to understand specifications of critical system requirements. Over the past few years, quantitative (real time) timing aspects have gained increasing attendance in formal specification and verification. Intuitively, adding real time requirements to the graphical denotation of symbolic <b>timing</b> <b>diagrams</b> is easily accomplished by annotating constraint arcs to carry time intervals. In this paper we define the formal semantics of real time <b>timing</b> <b>diagrams</b> by a translation to timed propositional temporal logic. It is intended as technical reference and assumes some knowledge on STD. For an introduction to real time symbolic <b>timing</b> <b>diagrams</b> refer to [FJ 96] 1 Introduction Symbolic <b>timing</b> <b>diagrams</b> [DJS 95] are used [...] ...|$|R
40|$|Abstract. Timing {{diagrams}} {{are useful}} for capturing temporal specifications in which all mentioned events are required to occur. We first show that translating <b>timing</b> <b>diagrams</b> with both partial orders on events and don’t-care regions to LTL potentially yields exponentially larger formulas containing several non-localized terms corresponding to the same event. This raises a more fundamental question: which modalities allow a textual temporal logic to capture such diagrams using a single term for each event? We define the shapes of partial orders that are captured concisely by a hierarchy of textual linear temporal logics containing future and past time operators, as well Laroussinie et al’s forgettable past operator and our own unforeseen future operator. Our results give insight into the temporal abstractions that underlie <b>timing</b> <b>diagrams</b> and suggest that the abstractions in LTL are significantly weaker than those captured by <b>timing</b> <b>diagrams.</b> ...|$|R
5000|$|... #Caption: <b>Timing</b> <b>diagram</b> of a C-element and {{inclusive}} OR gate ...|$|E
5000|$|... #Caption: A <b>timing</b> <b>diagram</b> for the Serial Peripheral Interface Bus ...|$|E
5000|$|... #Caption: Simplified <b>timing</b> <b>diagram</b> for two-dimensional-Fourier-transform (2DFT) Spin Echo (SE) pulse {{sequence}} ...|$|E
40|$|In {{this paper}} an {{approach}} is presented for the hierarchical verification {{of the memory}} control units, I/O adapters and processor interconnect units as found in multiprocessor computer systems. It is shown how such units could be verified better and faster {{by the introduction of}} random executable <b>timing</b> <b>diagrams</b> and associated CAD tool support. Furthermore, it is shown how the <b>timing</b> <b>diagrams</b> for the unit network verification are easily derived from the <b>timing</b> <b>diagrams</b> specified for the units. The multiprocessor hardware test showed the effectiveness of the proposed verification approach. 1. Introduction To keep pace with the processing performance growth of 75 % per year, not only the complexity of the processor unit (PU) with its caches will increase, but also that of the supporting units, like processor interconnect units, memory control units and I/O adaptors. To reduce the time the PU waits for data, many complex functions must be performed by such units. These chips for example h [...] ...|$|R
40|$|The {{principles}} of high level modeling of digital hardware circuits using the extended <b>timing</b> <b>diagrams</b> (ETD) formalism, which adds conditions, events, action expressions, and particular constraints to traditional <b>timing</b> <b>diagrams,</b> are described. Hierarchy and concurrency are also integrated {{so that a}} full top-down design becomes possible, enhancing {{at the same time}} the readability. While, for simulation purposes, the implementation of the formalism generates behavioral VHDL (VHSIC Hardware Description Language) models, a dedicated high-level translator generates VHDL code for synthesis. Both the ETD formalism and its implementation are part of MODES, a more complex modeling expert system including complementary editors...|$|R
40|$|As {{embedded}} systems {{become more and}} more complex, early availability of unambiguous specification of their intended behaviour has become an important factor for quality and timely delivery. Consequently, the quest for rapid prototyping methods for such specifications arises. Addressing these issues, the computer architecture group of Oldenburg University has devoted a major line of research towards automatic prototyping of embedded controllers from fully formal specifications given as real-time symbolic <b>timing</b> <b>diagrams</b> (RTSTDs, for short). RTSTDs are a graphical formalism for specifying behavioural requirements on hard real-time {{embedded systems}}. They are a full-fledged metric-time temporal logic, but with a graphical syntax reminiscent of the informal <b>timing</b> <b>diagrams</b> widely used in electrical engineering. Within this survey article, we will explain real-time symbolic <b>timing</b> <b>diagrams</b> as well as the ICOS tool-box supporting RTSTD-based requirements capture and rapid prototyping. ICOS integrates a variety of tools for RTSTDs, ranging from graphical specification editors over tautology checking and counterexample generation to code generators emitting C or VHDL, thus bridging the gap from specification to prototype generation. ...|$|R
5000|$|... #Caption: <b>Timing</b> <b>Diagram</b> showing {{part of one}} {{possible}} schedule for the example.|$|E
5000|$|A {{more typical}} <b>timing</b> <b>diagram</b> has {{just a single}} clock and {{numerous}} data lines ...|$|E
50|$|Timing {{diagrams}} {{are used}} to explore the behaviors of objects throughout a given period of time. A <b>timing</b> <b>diagram</b> is a special form of a sequence diagram. The differences between <b>timing</b> <b>diagram</b> and sequence diagram are the axes are reversed so that the time is increased {{from left to right}} and the lifelines are shown in separate compartments arranged vertically.|$|E
40|$|Abstract. Correct {{design of}} {{interface}} circuits {{is crucial for}} the development of high-speed SoCs (GALS systems) using IP cores. In this paper, we propose abstract <b>timing</b> <b>diagrams</b> as a formalism for reasoning about synchronization issues in different interface designs at a high level of abstraction. The advantage of using this formalism is that it permits reasoning about synchronization problems in interfacing schemes, even without knowing low-level implementation details. We show {{that it is possible to}} reason about the correctness and limitations of several existing interfacing schemes using this formalism. We also provide an example where reasoning using abstract <b>timing</b> <b>diagrams</b> guides us towards designing a new interface circuit for high-speed SoCs...|$|R
5000|$|Jubin Mitra's 8085 Simulator - Open source (under GNU license) software. Supports many {{assembler}} directives, <b>timing</b> <b>diagrams</b> and {{a virtual}} emulation kit. The specialty of this software {{is that it}} can traverse a given program backwards in most cases.|$|R
40|$|Coded or {{modulated}} {{digital data}} converts to nonreturn to zero /NRZ/ data. Technique includes logic implementation and pertinent <b>timing</b> <b>diagrams.</b> Demodulation to NRZ facilitates digital logic operations on incoming data. Phase-delay modulation has advantage of inherent self-timing {{not present in}} NRZ modulation...|$|R
5000|$|... #Caption: <b>Timing</b> <b>diagram</b> {{over one}} rev. for angle, angular velocity, angular acceleration, and angular jerk ...|$|E
5000|$|... #Caption: Example <b>timing</b> <b>diagram</b> of a MSB {{frame in}} LVDS mode (single-ended slave select, LVDS clock and data).|$|E
50|$|The <b>timing</b> <b>diagram</b> example on {{the right}} {{describes}} the Serial Peripheral Interface (SPI) Bus.Most SPI master nodes {{have the ability to}} set the clock polarity (CPOL) and clock phase (CPHA) with respect to the data.This <b>timing</b> <b>diagram</b> shows the clock for both values of CPOL and the values for the two data lines (MISO & MOSI) for each value of CPHA.Note that when CPHA=1 then the data is delayed by one-half clock cycle.|$|E
50|$|Captured {{information}} is decoded from raw digital form into a human-readable format that lets users easily review exchanged information. Protocol analyzers {{vary in their}} abilities to display data in multiple views, automatically detect errors, determine root causes of errors, generate <b>timing</b> <b>diagrams,</b> reconstruct TCP and UDP data streams, etc.|$|R
40|$|Lagrein is a {{tool that}} allows {{exploring}} how a software system has been developed. It supports visualization of multiple metrics, it links requirements to code expected to implement them and couples code with the effort spent in producing it. Moreover, it shows the system's evolution using animation and <b>timing</b> <b>diagrams...</b>|$|R
40|$|Abstract The paper investigates {{properties}} of change diagrams. They {{are able to}} model a subclass of concurrent systems, for example asynchronous circuits or <b>timing</b> <b>diagrams.</b> The following results are described: Change diagrams {{are related to the}} class of dynamic min-max graphs. E cient algorithms for timing analysis are derived. Liveness and boundedness properties are investigated...|$|R
50|$|A <b>timing</b> <b>diagram</b> in the Unified Modeling Language 2.0 is a {{specific}} type of interaction diagram, where the focus is on timing constraints.|$|E
50|$|The <b>timing</b> <b>diagram</b> {{is shown}} to the right. The timing is further {{described}} below and applies to both the master and the slave device.|$|E
50|$|QUCS has a {{graphical}} interface for schematic capture. Simulation {{data can}} be represented in various types of diagrams, including Smith-Chart, Cartesian, Tabular, Polar, Smith-Polar combination, 3D-Cartesian, Locus Curve, <b>Timing</b> <b>Diagram</b> and Truth Table.|$|E
40|$|The operation, maintenance, and {{integration}} of the applications explorer mission heat capacity mapping radiometer is illustrated in block diagrams and detail schematics of circuit functions. Data format and logic <b>timing</b> <b>diagrams</b> are included along with radiometric and electronic calibration data. Mechanical and electrical configuration is presented to provide interface details for integration of the HCMR instrument to AEM spacecraft...|$|R
40|$|We {{present a}} novel {{set of tools}} for {{performing}} symbolic timing verification of <b>timing</b> <b>diagrams.</b> The tools are multi-purpose with uses in verification, derivation of synthesis constraints, and design evaluation. Our methodology is based on using techniques for manipulating Presburger formulas. We demonstrate using several interesting examples that the method is efficient in practice and should be considered for inclusion in commercial tools...|$|R
40|$|We {{present a}} model for a library of {{synchronous}} VLSI components, which describes both their function and their <b>timing</b> <b>diagrams,</b> without describing the internal implementation of the circuit. Our model is based on Synchronous Data Flow, with extentions to model VLSI circuits, and to verify that a system designed with VLSI components from our library is properly synchronized. Initialization and termination conditions are explicitly checked...|$|R
5000|$|... #Caption: <b>Timing</b> <b>diagram</b> for DBPSK and DQPSK. The {{binary data}} stream {{is above the}} DBPSK signal. The {{individual}} bits of the DBPSK signal are grouped into pairs for the DQPSK signal, which only changes every Ts = 2Tb.|$|E
50|$|The {{specific}} {{purpose of the}} desmodromic system is to force the valves {{to comply with the}} <b>timing</b> <b>diagram</b> as consistently as possible. In this way, any lost energy is negligible, the performance curves are more uniform and dependability is better.|$|E
50|$|In the <b>timing</b> <b>diagram,</b> {{the columns}} {{represent}} time slices with time increasing to the right, and the processes all start their periods at time slice 0. The timing diagram's alternating {{blue and white}} shading indicates each process's periods, with deadlines at the color changes.|$|E
40|$|Conference on Lasers and Electro-Optics and 2006 Quantum Electronics and Laser Science Conference, CLEO/QELS 2006, Long Beach, CA, 21 - 26 May 2006 We {{report the}} first {{demonstration}} of all-optical packet switching of 160 Gb/s packets with all-optical header processing of the 10 Gb/s packet headers. The <b>timing</b> <b>diagrams</b> {{before and after}} packet switching are shown. Department of Electrical EngineeringDepartment of Electronic and Information EngineeringRefereed conference pape...|$|R
40|$|Abstract. In this paper, {{the time}} series of annual {{precipitation}} of Poyang Lake were analyzed which use <b>timing</b> <b>diagrams,</b> autocorrelation analysis, the center moved smoothed analysis spectral analysis and other methods. It {{was found that}} the time series of annual precipitation of Poyang Lake is a random strong non-stationary time series; there is a slow increase in long-term trends and changes in the quasi-periodic sequence of 3 years and 25 years...|$|R
5000|$|A logic {{analyzer}} is an electronic instrument that captures and displays multiple signals from a digital system or digital circuit. A {{logic analyzer}} may convert the captured data into <b>timing</b> <b>diagrams,</b> protocol decodes, state machine traces, assembly language, or may correlate assembly with source-level software. Logic Analyzers have advanced triggering capabilities, and are useful when a user {{needs to see}} the timing relationships between many signals in a digital system.|$|R
