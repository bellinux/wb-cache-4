31|0|Public
30|$|In [41], {{the authors}} design a {{middleware}} {{that supports the}} development of multi-tenant SOA applications. In such applications both tenants and application providers can define policies. The middleware uses a message dispatch mechanism in order to guide incoming request messages to the right service instance {{as indicated by the}} global and <b>tenant-specific</b> policies. The relevant policies are processed in two steps. In the first step, all the global policies are applied, and in the second step <b>tenant-specific</b> policies are taken into account. This paper, however, focuses on the use of policies in a multi-cloud context, thus containing multiple run-time environments. These policies are then used to select a PaaS platform within the multi-cloud. Furthermore, the PaaSHopper middleware supports more complex policies that relate to the active tenant as well as the current message type.|$|E
40|$|International audienceApplication-level {{multi-tenancy}} is {{an increasingly}} prominent architectural pattern in Software-as-a-Service (SaaS) applications that enables multiple tenants (customers) to share common application functionality and resources among each other. This has the disadvantage that multi-tenant applications are often limited {{in terms of}} customizability: one application should fit {{the needs of all}} customers. In this paper, we present our experiences with developing a multi-tenant SaaS document processing system using current state-of-practice workflow technologies from the JBoss family. We specifically focus on the customizability w. r. t. the different <b>tenant-specific</b> requirements, and the manageability of the <b>tenant-specific</b> customizations. Our main experiences are threefold: (i)  we were insufficiently able to modularize the activities and compositions that constitute the document processing workflow, (ii)  we lacked support for describing tenant-level variations independently, and (iii)  the workflow engine we employed is too centralized in terms of control, which limits resilience and thereby endangers scalability of the document processing application...|$|E
30|$|As the log {{management}} {{service is a}} data-driven application, the analysis activities should occur near the storage location to avoid the (expensive) migration of large data sets. In addition, <b>tenant-specific</b> constraints are applicable to the geographical placement of the data. For example, a financial company requires that the data may only be stored in a data center in the same country, or even using a dedicated storage infrastructure to ensure strict isolation.|$|E
40|$|Software as a Service (SaaS) {{has been}} {{increasingly}} adopted by software vendors as their main software delivery model, as {{it provides the}} opportunity to offer their software applications to a larger market and {{to benefit from the}} economies of scale. One of the key enablers to leverage economies of scale is multi-tenancy: resources are shared among multiple customer organizations (the so-called tenants), which leads to higher resource utilization and scalability. The highest degree of resource sharing is achieved with application-level multi-tenancy. However, this focus on increased resource sharing typically results in a one-size-fits-all approach. As a consequence, multi-tenant SaaS applications are inherently limited in terms of flexibility and variability, and cannot be customized to the different and varying requirements of the different tenants. This dissertation presents both a middleware framework and a software engineering method to facilitate the development, operation and management of customizable, multi-tenant SaaS applications. More specifically, the middleware framework improves the flexibility of multi-tenant SaaS applications by enabling <b>tenant-specific</b> customizations, while preserving the economies of scale and limiting the application engineering complexity. The focus is on dynamically composing software variants on a per tenant basis as well as on enforcing <b>tenant-specific</b> performance service level agreements (SLAs) throughout the SaaS application. The service line engineering (SLE) method aims to reduce the management complexity of many co-existing <b>tenant-specific</b> configurations as well as the effort to provision tenants and to update and maintain the customizable SaaS application. This work has been validated and evaluated in the context of two types of industry-relevant SaaS applications, i. e. a request-driven online hotel booking application and a batch-driven document processing application. We have implemented different prototypes on top of existing cloud platforms and the evaluation shows the effectiveness of our solution while introducing only a very limited performance overhead. nrpages: 213 status: publishe...|$|E
40|$|Software-as-a-Service (SaaS) {{applications}} are multi-tenant software applications that are delivered as highly configurable web services to individual customers, which are called tenants in this context. For reasons of complexity management and to lower maintenance cost, SaaS providers maintain and deploy a single {{version of the}} application code for all tenants. As a result, however, custom-made extensions for individual tenants cannot be e ciently integrated and managed. In this paper we show that by using a context-oriented programming model, cross-tier <b>tenant-specific</b> software variations can be easily integrated into the single-version application code base. Moreover, the selection of which variations to execute can be configured on a per tenant basis. Concretely, we provide a technical case study based on Google App Engine (GAE), a cloud platform for building multitenant web applications. We contribute by showing: (a) how ContextJ, a context-oriented programming (COP) language, {{can be used with}} GAE, (b) the increase in flexibility and customizability of <b>tenant-specific</b> software variations using ContextJ as compared to Google’s dependency injection framework Guice, and (c) that the performance of using ContextJ is comparable to Guice. Based on these observations, we {{come to the conclusion that}} COP can be helpful for providing software variations in SaaS...|$|E
30|$|To {{evaluate}} {{the degree of}} tenant isolation between tenants, four tenants (referred to as tenant 1, 2, 3, and 4) were configured based on access to the functionality/component of the GSD tool {{that is to be}} served to multiple tenants. Accesses to this functionality is associated with a tenant identifier that is attached to every request. Based on this identifier, a <b>tenant-specific</b> configuration is retrieved from the tenant configuration file and used to adjust the behaviour of the GSD tool’s functionality that is being accessed.|$|E
30|$|Access {{control is}} an {{important}} part of application-level security that limits the actions (e.g., read, write) which a subject (e.g., a physician) can take on an object in the system (e.g., a patient file). Access control rules are often externalized from the application they constrain and expressed in modular, declarative access control policies for reasons of separation of concerns and modifiability. Policy-based access control fits SaaS applications well, because it allows <b>tenant-specific</b> security logic to be externalized from the shared application and be bound at run-time.|$|E
40|$|Best Paper Award Distributed SystemsSoftware-as-a-Service (SaaS) {{applications}} are multi-tenant software applications that are delivered as highly configurable web services to individual customers, which are called tenants in this context. For reasons of complexity management and to lower maintenance cost, SaaS providers maintain and deploy a single {{version of the}} application code for all tenants. As a result, however, custom-made extensions for individual tenants cannot be efficiently integrated and managed. In this paper we show that by using a context-oriented programming model, cross-tier <b>tenant-specific</b> software variations can be easily integrated into the single-version application code base. Moreover, the selection of which variations to execute can be configured on a per tenant basis. Concretely, we provide a technical case study based on Google App Engine (GAE), a cloud platform for building multi-tenant web applications. We contribute by showing: (a) how ContextJ, a context-oriented programming (COP) language, {{can be used with}} GAE, (b) the increase in extensibility and customizability of <b>tenant-specific</b> software variations using ContextJ as compared to Google's dependency injection framework Guice, and (c) that the performance of using ContextJ is comparable to Guice. Based on these observations, we {{come to the conclusion that}} COP can be helpful for providing software variations in SaaS. status: publishe...|$|E
30|$|At {{the very}} basic degree of multitenancy, tenants share {{application}} components {{as much as}} possible which translates to increased utilisation of underlying resources. However, while some application components may benefit from a low degree of isolation between tenants, other components may need a higher degree of isolation because the component may either be too critical or needs to be configured very specifically for individual tenants because of their unique deployment requirements. Again, <b>tenant-specific</b> requirements, such as laws and corporate regulations, may even further increase the degree of isolation required between tenants.|$|E
30|$|Policy types. The PaaSHopper {{middleware}} currently supports {{two types}} of policies: tenant policies and spill-over policies. A tenant policy defines all <b>tenant-specific</b> constraints. These policies are automatically isolated from each other due to our multi-tenant data store abstraction. A tenant policy is coupled {{to the type of}} the message (e.g. confidential messages) that is sent to the requested component (and which is indicated by the messageType field in the CallContext, as illustrated in Figure 3). For each message type, the tenant policy can list several constraints to which the receiving component must comply. Listing ?? defines the grammar for describing tenant policies that are currently supported.|$|E
30|$|Walraven et al {{implemented}} a run-time enforcement of performance isolation {{to comply with}} <b>tenant-specific</b> SLAs over distributed environments for multitenant SaaS using a real-world workflow-based SaaS offering (i.e., an online B 2 B document processing) executing on a JBoss AS-based private cloud platform [14]. Walraven et al. has also {{implemented a}} middleware framework for enforcing performance isolation using a multitenant implementation of a hotel booking application deployed {{on top of a}} cluster for illustration [17]. Krebs et al. implemented a multitenancy performance benchmark for a web application based on the TCP-W benchmark where the authors evaluated the maximum throughput and the number of tenants that can be served by a platform [18].|$|E
30|$|Software-as-a-Service or SaaS {{is a type}} {{of cloud}} {{computing}} in which a tenant rents access to a shared application hosted by a provider[1]. The tenant is an organization representing multiple end-users, who use the application through a thin client, typically a web browser. The provider protects the data in the application, for example by ensuring tenant isolation or preventing data leakage. However, for the tenant, SaaS is a form of outsourcing: while the SaaS application belongs to the provider, the application data, although hosted by the provider, still belongs to the tenant. Therefore, SaaS applications should also enable the tenants to control access to their data in the application, based on <b>tenant-specific</b> access control policies.|$|E
40|$|Traditional {{checkpointing}} {{techniques are}} facing a grave challenge when applied to multi-tenancy soft-ware-as-a-service (SaaS) systems due to the huge scale of the system state and the diversity of users ’ require-ments {{on the quality of}} services. This paper proposes the notion of tenant level checkpointing and an algo-rithm that exploits Big Data techniques to checkpoint tenant’s meta-data, which are widely used in configur-ing SaaS for <b>tenant-specific</b> features. The paper pre-sents a prototype implementation of the proposed tech-nique using NoSQL database Couchbase and reports the experiments that compare it with traditional im-plementation of checkpointing using file systems. Ex-periments show that the Big Data approach has a sig-nificantly lower latency in comparison with the tradi-tional approach...|$|E
30|$|As {{multi-tenancy}} enables multiple tenants {{to use the}} SaaS application simultaneously, it {{is important}} to make the application components stateless and to evaluate the policies on a per call basis, i.e. at each interaction. This implies that requested instances cannot be stored within the member variables of an application component. While experimenting with the use of (traditional) dependency injection [25] techniques to inject the selected component in the client component as a member variable, it became clear to us that when executing a tenant call this often led to concurrency control issues. Dependencies thus need to be re-resolved for each call, as different policies apply for different tenants. For example, in [26] we also required a tenant-aware dependency injector to enable <b>tenant-specific</b> customization of SaaS applications.|$|E
40|$|Simulation {{can benefit}} from cloud {{computing}} that often comes with thousands of processors and its software is structured as Software-as-a-Service (SaaS) with its Multi-Tenancy Architecture (MTA). To support multiple tenants, simulation SaaS models need be modeled and customized to fulfill the various functional and quality requirements of individual tenants. The multitude options of <b>tenant-specific</b> data have made the simulation models and execution processes rather complicated. This paper presents P 4 -SimSaaS that comes with an new ontology system and an innovative tenant related policy specification for Simulation SaaS. P 4 -SimSaaS can reduce the complexity in the MTA simulation models and consequently increase the flexibility in MTA simulation execution environment. A case study is offered to demonstrate the entire framework. ...|$|E
40|$|A service-based SaaS {{application}} {{can achieve}} {{economies of scale}} by sharing partner services between tenants at runtime, following the Single-Instance Multi-Tenancy (SIMT) model. However, supporting runtime sharing with <b>tenant-specific</b> functional and performance variations in an SIMT application is challenging. We propose an approach, Software-Defined Service Networking (SDSN), to addressing this challenge. SDSN realizes an SIMT application with a managed service network (SN) {{and a set of}} managed virtual service networks (VSNs) that share the SN. The SN connects a set of services according to their capability and interoperability. To achieve the requirements of a particular tenant, a VSN uses a subset of the services under a particular architecture and a control policy. We describe how the SN and its VSNs are designed and enacted to achieve the SIMT objectives. We show the feasibility of the SDSN, demonstrate the utilization benefits it achieves, and quantify the runtime overhead it incurs...|$|E
30|$|A final {{possible}} {{extension of}} this work is a generalization to more than two parties. This paper focused on a tenant renting access to a SaaS application and that tenant wanting to enforce <b>tenant-specific</b> access control policies on that application. This situation can be extended to more than two parties, e.g., a patient monitoring system provided to multiple hospitals which collaboratively provide care to the same patient. In our experience, this situation reduces to each hospital applying its specific policies to the shared application, {{in which case the}} algorithm can separately be applied to each hospital policy without change. Should a situation arise that does not show this pattern (i.e., a federation in which a single policy reasons about data of more than two parties), the algorithm should be extended. However, we do expect the techniques in this paper to apply to this situation as well.|$|E
40|$|Multi-tenancy {{has shown}} {{promising}} results in achieving high operational cost efficiency by sharing {{hardware and software}} resources among multiple customer organisations, called tenants. In the context of cloud computing, this paradigm enables cloud providers to reduce operational costs by dividing resources and to simplify application management and maintenance. Maximum cost efficiency is achieved with application-level multi-tenancy. However, this high level of resource sharing complicates performance isolation between the different tenants, i. e. ~ensuring compliance with the SLAs of the different tenants and ensuring that the behaviour of one tenant cannot adversely affect {{the performance of the}} other tenants. This paper explores the challenges of performance isolation in the context of multi-tenant SaaS applications. In addition, we propose a middleware architecture to enforce performance isolation based on the <b>tenant-specific</b> SLAs, using a tenant-aware profiler and a scheduler. Our prototype reveals promising initial results. status: publishe...|$|E
30|$|In {{this paper}} we {{described}} access control for SaaS applications {{and focused on}} the challenges of confidentiality-aware and efficient policy evaluation, as motivated by an e-health case study. We proposed to address these challenges by decomposing and distributing the <b>tenant-specific</b> policies across tenant and provider in order to keep sensitive tenant data local while evaluating parts of the policies near the data they require as much as possible. This process, we call policy federation. We defined a widely-applicable attribute-based policy model, described an algorithm for policy federation in detail and elaborated on the design of supporting technology. Our approach succeeds in keeping the sensitive tenant data confidential and has the ability to improve policy evaluation time as well. This work fits in a growing collection of performance techniques for policy-based and attribute-based access control. With the maturation of these technologies and the growing ecosystem of service-oriented business coalitions, we believe that the need for federated access control and for policy federation in particular will only grow.|$|E
40|$|A single-instance {{multi-tenant}} (SIMT) SaaS application {{enables a}} SaaS provider to achieve {{economies of scale}} through runtime sharing. However, runtime sharing can make <b>tenant-specific</b> variations difficult to achieve in such an application. In this paper, we propose an approach to realizing SIMT SaaS applications, {{which is based on}} Dynamic Software Product Lines (DSPL) and supports runtime sharing and variation. With the collaboration among a subset of services as the unit of composition, the commonality among the tenants' requirements is realized in the DSPL architecture by sharing collaboration units, and their variability is realized by composing different collaboration units, all at runtime. In addition, we adopt a feature-based high-level representation of the commonality and variability between the tenants' requirements to facilitate the runtime creation and reconfiguration of their application variants. We compare our approach with two alternative approaches in terms of development effort and degree of sharing. We further quantify the runtime overhead incurred by our multi-tenancy support...|$|E
40|$|Cloud service {{providers}} {{benefit from a}} vast majority of customers due to variability and making profit from commonalities between the cloud services that they provide. Recently, application configuration dimensions has been increased dramatically due to multi-tenant, multi-device and multi-cloud paradigm. This challenges the configuration and customization of cloud-based software that are typically offered as a service due to the intrinsic variability. In this paper, we present a model-driven approach based on variability models originating from the software product line community to handle such multi-dimensional variability in the cloud. We exploit orthogonal variability models to systematically manage and create <b>tenant-specific</b> configuration and customizations. We also demonstrate how such variability models can be utilized {{to take into account the}} already deployed application parts to enable harmonized deployments for new tenants in a multi-cloud setting. The approach considers application functional and non-functional requirements to provide a set of valid multi-cloud configurations. We illustrate our approach through a case study...|$|E
40|$|In the Cloud Computing paradigm, Software-as-a-Service (SaaS) is a {{delivery}} model that allows small-to-mid-sized organizations (called tenants) to out-source {{the operation of}} their business applications to a SaaS provider, and consume the (software) service on-demand and remotely via the Internet. For tenants, key requirements to that service are (i) cost efficiency and (ii) reliable service quality. Moreover, (iii. a) business applications are often subject to fast-changing requirements, and (iii. b) tenants appreciate being able to benefit from trending technologies. In addressing those requirements, SaaS providers rely on sharing resources among tenants (called multi tenancy), typically up to the application level, and operate the application at large scale. The SaaS delivery model, while providing many benefits additional to cost efficiency, inherently limits control by a tenant. As a result, its success is bound to establishing and maintaining tenants' trust into the SaaS application's operation. To that end, evolving multi-tenant SaaS applications are insufficiently supported: For some upgrades scenarios, either service quality or cost efficiency can be maintained during their enactment, but not both. In practice, necessary trade-offs are decided for on a per-upgrade basis and affect all tenants of the SaaS application equally and simultaneously. In this dissertation, we present a middleware and a complementary software (upgrade) development process to (i) efficiently support customization of tenant-perceived behaviour during an upgrade enactment, called transition behaviour. Moreover, our middleware (ii) improves on the service degradation imposed to tenants, and (iii) supports efficient operation of <b>tenant-specific</b> generations of the application that result from tenants delaying or rejecting an upgrade. We have evaluated a prototype of our middleware (built on top of OSGi) and relying on {{a case study of}} an industrial multi-tenant SaaS provider. Our evaluation shows that customizable transition behaviours are able to satisfy a spectrum of tenant requirements within a shared application, reducing the impact of an upgrade enactment to their business up to an acceptable level. Moreover, we show that our middleware supports multi tenancy across generations, rendering the operation of <b>tenant-specific</b> generations nearly cost neutral, and discuss the deployments and effects of our middleware at large scale. More generally, our approach successfully addresses the prominently perceived lack of control in Cloud Computing, paving the way for trust into remotely consumed software services that support quick time-to-market. nrpages: 141 status: publishe...|$|E
40|$|Software-as-a-Service (SaaS) {{is a type}} {{of cloud}} {{computing}} in which a tenant rents access to a shared, typically web-based application hosted by a provider. Access control for SaaS should enable the tenant to control access to data that are located at the provider based on <b>tenant-specific</b> access control policies. To achieve this, state-of-practice SaaS applications provide application-specific access control configuration interfaces and as a result, the tenant policies are evaluated at the provider side. This approach does not support collaboration between provider-side and tenant-side access control infrastructures, thus scattering tenant access control management and forcing the tenant to disclose sensitive access control data. To address these issues, we describe the concept of federated authorization in which management and evaluation of the tenant policies is externalized from the SaaS application to the tenant. This centralizes tenant access control management and lowers the required trust in the provider. This paper presents a generic middleware architecture for federated authorization, describing required extensions to current policy languages and a distributed execution environment. Our evaluation explores the trade-off between performance and security and shows that federated authorization is a feasible and promising approach. status: publishe...|$|E
40|$|Application-level {{multi-tenancy}} is {{an architectural}} approach for Software-as-a-Service (SaaS) applications which enables high operational cost efficiency by sharing one application instance among multiple customer organizations (the so-called tenants). However, {{the focus on}} increased resource sharing typically results in a one-size-fits-all approach. In principle, the shared application instance satisfies only the requirements common to all tenants, without supporting potentially different and varying requirements of these tenants. As a consequence, multi-tenant SaaS applications are inherently limited in terms of flexibility and variability. This paper presents an integrated service engineering method, called service line engineering, that supports co-existing <b>tenant-specific</b> configurations and that facilitates the development and management of customizable, multi-tenant SaaS applications, without compromising scalability. Specifically, the method spans the design, implementation, configuration, composition, operations and maintenance of a SaaS application that bundles all variations {{that are based on}} a common core. We validate this work by illustrating the benefits of our method {{in the development of a}} real-world SaaS offering for document processing. We explicitly show that the effort to configure and compose an application variant for each individual tenant is significantly reduced, though at the expense of a higher initial development effort. status: publishe...|$|E
40|$|The {{multi-tenancy}} of a cloud usually {{leads to}} security concerns over network isolation around each cloud tenant's virtual resources. However, verifying network isolation in cloud virtual networks poses several unique challenges. The {{sheer size of}} virtual networks implies a prohibitive complexity, whereas the constant changes in virtual resources demand a short response time. To make things worse, such networks typically allow fine-grained (e. g., VM-level) and distributed (e. g., security groups) network access control. Those challenges can either invalidate existing approaches or cause an unacceptable delay which prevents runtime applications. In this thesis, we present TenantGuard, a scalable system for verifying cloud-wide, VM-level network isolation at runtime. We {{take advantage of the}} hierarchical nature of virtual networks, efficient data structures, incremental verification, and parallel computation to reduce the performance overhead of security verification. We implement our approach based on OpenStack and evaluate its performance both in-house and on Amazon EC 2, which confirms its scalability and efficiency (13 seconds for verifying 168 millions of VM pairs). We further integrate TenantGuard with Congress, an OpenStack policy service, to verify the compliance of isolation results against <b>tenant-specific</b> high level security policies...|$|E
40|$|Multi-tenant Software-as-a-Service (SaaS) {{applications}} are increasingly built on combinations of cloud storage technologies and providers in a so-called multi-cloud setup. One {{advantage is that}} such a setup helps satisfying the different [...] -sometimes even contrasting [...] - storage requirements of different customer organizations (tenants). In such a multi-cloud environment, the application data is distributed and replicated over multiple cloud storage systems, each differing profoundly in supported data models, development APIs, performance, scalability, availability, and durability. Despite the clear benefits, managing such a multi-cloud storage architecture in practice is non-trivial. Addressing this complexity in the application layer is far from ideal, as it inherently limits the flexibility with which continuously changing application-wide and <b>tenant-specific</b> storage requirements can be met. To alleviate this, we present a reusable data management middleware that (i) makes abstraction of multiple cloud storage technologies and thus also providers; (ii) follows a policy-driven approach for making data placement decisions; and (iii) provides tenant customization support, i. e. by allowing tenants to define storage configurations and data storage policies. We validate and evaluate our prototype implementation {{in the context of}} a realistic multi-cloud SaaS application. Our performance benchmark results indicate that the benefits of the proposed middleware can be achieved with acceptable overhead. status: publishe...|$|E
30|$|Software-as-a-Service (SaaS) {{is a type}} {{of cloud}} {{computing}} in which a tenant rents access to a shared, typically web-based application hosted by a provider. Access control for SaaS should enable the tenant to control access to data that are located at the provider side, based on <b>tenant-specific</b> access control policies. Moreover, with the growing adoption of SaaS by large enterprises, access control for SaaS has to integrate with on-premise applications, inherently leading to a federated set-up. However, {{in the state of the}} art, the provider completely evaluates all policies, including the tenant policies. This (i) forces the tenant to disclose sensitive access control data and (ii) limits policy evaluation performance by having to fetch this policy-specific data. To address these challenges, we propose to decompose the tenant policies and evaluate the resulting parts near the data they require as much as possible while keeping sensitive tenant data local to the tenant environment. We call this concept policy federation. In this paper, we motivate the need for policy federation using an in-depth case study analysis in the domain of e-health and present a policy federation algorithm based on a widely-applicable attribute-based policy model. Furthermore, we show the impact of policy federation on policy evaluation time using the policies from the case study and a prototype implementation of supporting middleware. As shown, policy federation effectively succeeds in keeping the sensitive tenant data confidential and at the same time improves policy evaluation time in most cases.|$|E
40|$|Virtualization-based cloud {{computing}} has dominated today 2 ̆ 7 s data centers by supporting consolidated servers, converged infrastructures, and horizontal scalability. To provide high resource density and low cost of ownership, current clouds typically involve a multi-tenancy architecture, {{which consists of}} a mix of layered software and hardware to realize virtually dedicated computing and storage capabilities for cloud tenants. Despite significant benefits of multi-tenancy, new challenges arise in the aspects of efficiency, fairness and customizability of cloud resource sharing. ^ In this dissertation, we present an integrated cloud storage system consisting of three key components, StorM, vFair and BASS, to address key challenges in multi-tenancy cloud storage systems. In particular, BASS bridges the I/O data addressability gap between the storage and network stacks of cloud block storage with a novel byte-addressable storage stack. BASS not only avails the benefits of using variable-length I/O requests which avoids unnecessary data transfer, but also enables a highly efficient non-blocking approach which eliminates the blocking time of write processes. vFair addresses the fair I/O resource allocation and scheduling problem using a new I/O scheduling framework, which takes per-IO cost into consideration along with a two-level scheduling architecture. vFair strikes a good balance between fairness and I/O resource utilization, regardless of I/O workloads and patterns. Finally, StorM enables a storage middle-box platform to support software-defined cloud storage services. With StorM, <b>tenant-specific</b> storage data security and reliability services can be freely defined by tenants, while the infrastructure-level support of middle-boxes is transparently taken care by cloud providers. ...|$|E
40|$|The {{paradigm}} of service-oriented computing (SOC) {{has received a}} lot of attention over the last years and has changed the way software systems are designed. The promise of SOC is to provide flexibility and agility on the level of systems development. At the heart of service-based systems are services that provide platform- and technology-independent, computational elements that can be composed into loosely coupled networks of collaborating applications in order to reflect an organisation's business-level objectives. A popular approach for defining such business flows as a cooperation of services is workflow (or service) composition. The shift towards SOC has also impacted the delivery and consumption of software systems. Recently, cloud computing has become an emerging mechanism that fits into this evolution. The combination of fast expanding technologies with increasing competitiveness drives more and more companies to the outsourcing of parts of their business IT operations to third-party cloud providers. This enables them {{to take advantage of the}} cloud provider's expertise and to reduce their cost by sharing resources to exploit economies of scale. In the cloud, service-based systems can be deployed as Software-as-a-Service (SaaS) applications that can be purchased and consumed remotely over the internet. Due to increasing user demands and evolving requirements these service-based systems should be able to adapt to both dynamic changes in operational requirements and environmental conditions, while providing predictable behavior with respect to service qualities such as response time, availability, scalability, and security. State-of-the-art industry standards in workflow composition, however, exhibit major limitations regarding modularity and flexibility to support complex and highly dynamic service compositions. Hence, in this context three interesting research challenges appear that are addressed in this dissertation. First, traditional service composition solutions should be able to enforce policy (or rule) specifications that describe how the workflow composition must adapt to changing requirements and circumstances. Second, an important aspect of adaptive service composition is that it requires the capability to dynamically change the levels of quality of service (QoS) to satisfy customers demand by selecting the appropriate participating services. Third, with the trend of cloud computing, cloud providers want to make full use of economies of scale by hosting their services following a multi-tenant model, where a single application is used to serve multiple customers (called tenants). In such a multi-tenant setting, the cloud provider should be able to tailor its business processes to meet the functional and non-functional requirements of each tenant. This dissertation delivers four core contributions. First, we present a realistic application that has been developed using state-of-the-art technologies in service-oriented computing. This application is used as a practical case-study to expose some key limitations in current industry standards and technologies that motivate our remaining contributions. Second, we propose a portable framework for the enforcement of dynamic adaptation policies in business processes. The framework is inspired by the model-view-controller (MVC) pattern, commonly used for adding dynamism to web pages. Third, we present a theoretical approach to effectively deal with the composition of services that require certain levels of quality. As actual QoS support of participating services changes over time, the service composition problem must be treated as a decision problem under uncertainty. Therefore, we have developed an algorithm for predicting whether the QoS of a service composition execution will be compliant with a service level agreement (SLA) between a customer and the service (composition) provider. Fourth, we capitalize on the shift from supply to demand driven processes by proposing a middleware that provides the mechanisms to perform requirement-driven adaptation of shared process templates in a multi-tenant SaaS environment. We validate our work in several respects. To demonstrate the feasibility of our work, the proposed ideas have been prototyped. To measure the expressiveness of our adaptive workflow approach, we analyze its customization support by means of an extensive classification of change patterns and change support features. To analyze the performance of our prediction algorithm, used for selecting appropriate participating services in a composition, we introduce two performance indicators for comparing different QoS prediction algorithms. Our validation on both real as well as simulated QoS data shows that the proposed algorithms outperform existing approaches. To evaluate the effectiveness of <b>tenant-specific</b> customization in the context of Software as a Service in practice, we apply our approach on a case-study in the healthcare domain. Our measures confirm that the middleware improves the QoS of a composition with an acceptable performance overhead. status: publishe...|$|E

