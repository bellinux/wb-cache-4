1|15|Public
40|$|Database systems serving cloud {{platforms}} must serve {{large numbers}} of applications (or tenants). In addition to managing tenants with small data footprints, different schemas, and variable load patterns, such multitenant data platforms must minimize their operating costs by efficient resource sharing. When deployed over a pay-per-use infrastructure, elastic scaling and load balancing, enabled by low cost live migration of tenant databases, is critical to tolerate load variations while minimizing operating cost. However, existing databases—relational databases and Key-Value stores alike—lack low cost live migration techniques, thus resulting in heavy performance impact during elastic scaling. We present Albatross, a technique for live migration in a multitenant database serving OLTP style workloads where the persistent database image is stored in a network attached storage. Albatross migrates the database cache {{and the state of}} active transactions to ensure minimal impact on transaction execution while allowing transactions active during migration to continue execution. It also guarantees serializability while ensuring correctness during failures. Our evaluation using two OLTP benchmarks shows that Albatross can migrate a live <b>tenant</b> <b>database</b> with no aborted transactions, negligible impact on transaction latency and throughput both during and after migration, and an unavailability window as low as 300 ms. 1...|$|E
30|$|In this approach, common {{contents}} from tenant {{information are}} separated as in [25]. This technique introduces {{the concept of}} <b>tenants</b> at <b>database</b> layer so that database engine can select an appropriate area for storage of data for that tenant.|$|R
40|$|The {{consolidation}} of multiple tenants onto a single RDBMS instance {{turned out to}} be benefical with respect to resource utilization and scalability. The consolidation implies that multiple tenants share the physical resources available for the RDBMS instance. If the available resources tend to get insufficient to meet the SLAs agreed with the tenants, migration of a <b>tenant’s</b> <b>database</b> from one RDBMS instance to another is compelling. Highly available services demand for live migration techniques that come with minimal service interruption and low performance impact. This paper meets the demand for live migration techniques by contributing ProRea. ProRea is a live database migration approach designed for multi-tenant RDBMS that run OLTP workloads under snapshot isolation. ProRea extends concepts of existing live database migration approaches to accomplish minimal service interruption, high efficiency and very low migration overhead. Measurements of a prototypical ProRea implementation underpin its good performance...|$|R
40|$|Part 1 : Cross-Domain Conference and Workshop on Multidisciplinary Research and Practice for Information Systems (CD-ARES 2013) International audienceThe {{database}} of multi-tenant Software as a Service (SaaS) applications has challenges in designing {{and developing a}} relational database for multi-tenant applications. In addition, combining relational tables and virtual relational tables to make them work together and act as one database for each single tenant is a hard and complex problem to solve. Based on our multi-tenant Elastic Extension Tables (EET), we are proposing in this paper a multi-tenant database proxy service to combine multi-tenant relational tables and virtual relational tables, to make them act as one database for each single <b>tenant.</b> This combined <b>database</b> is suitable to run with multi-tenant SaaS single instance applications, which allow <b>tenants</b> designing their <b>database</b> and automatically configuring its behavior during application runtime execution. In addition, these applications allow retrieving tenants data by simply calling functions from this service which spare tenants from spending money and efforts on writing SQL queries and backend data management codes, and instead allowing them to focus on their business and to create their web, mobile, and desktop applications. The feasibility and effectiveness of the proposed service are verified by using experimental data on some of this service functions...|$|R
40|$|Public cloud {{providers}} who support a Database-as-a-Service offering must efficiently allocate computing resources {{to each of}} their customers {{in order to reduce}} the total number of servers needed without incurring SLA violations. For example, Microsoft serves more than one million database customers on its Azure SQL Database platform. In order to avoid unnecessary expense and stay competitive in the cloud market, Microsoft must pack <b>database</b> <b>tenants</b> onto servers as efficiently as possible. This thesis examines a dataset which contains anonymized customer resource usage statistics from Microsoft's Azure SQL Database service over a three-month period in late 2014. Using this data, this thesis contributes several new algorithms to efficiently pack <b>database</b> <b>tenants</b> onto servers by collocating tenants with compatible usage patterns. An experimental evaluation shows that the placement algorithms, specifically the Scalar Static algorithm and the Dynamic algorithm, are able to pack databases onto half of the machines used in production while incurring fewer SLA violations. The evaluation also shows that with two different cost models these algorithms can save 80 % of operational costs compared to the algorithms used in production in late 2014. by Rebecca Taft. Thesis: S. M., Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, 2015. Cataloged from PDF version of thesis. Includes bibliographical references (pages [68]-[70]) ...|$|R
40|$|A {{multi-tenant}} database {{cluster is}} a concept of a data-storage subsystem for cloud applications with the multi-tenant architecture. The cluster {{is a set of}} relational database servers with the single entry point, combined into one unit with a cluster controller. This system is aimed to be used by applications developed according to Software as a Service (SaaS) paradigm and allows to place <b>tenants</b> at <b>database</b> servers so that providing their isolation, data backup and the most effective usage of available computational power. One of the most important problems about such a system is an effective distribution of data into servers, which affects the degree of individual cluster nodes load and faulttolerance. This paper considers the data-management approach, based on the usage of a load-balancing quality measure function. This function is used during initial placement of new tenants and also during placement optimization steps. Standard schemes of metaheuristic optimization such as simulated annealing and tabu search are used to find a better tenant placement. </p...|$|R
40|$|A {{multitenant}} {{database management}} system (DBMS) in the cloud must continuously monitor the trade-off betweenefficient resource sharing among multiple application <b>databases</b> (<b>tenants)</b> and their performance. Considering the scale of hundreds to thousands of tenants in such multitenant DBMSs, manual approaches for continuous monitoring are not tenable. A self-managing controller of amultitenantDBMSfacesseveralchallenges. Forinstance,howto characterize a tenant given its variety of workloads, how to reduce the impact of tenant colocation, and how to detect and mitigate a performancecrisiswhereoneormoretenants’desiredservicelevel objective (SLO) isnot achieved. WepresentDelphi,aself-managingsystemcontrollerforamultitenant DBMS, and Pythia, a technique to learn behavior through observation and supervision using DBMS-agnostic database level performance measures. Pythia accurately learns tenant behavior even when multiple <b>tenants</b> share a <b>database</b> process, learns good and bad tenant consolidation plans (or packings), and maintains a per-tenant history to detect behavior changes. Delphi detects performance crises, and leverages Pythia to suggests remedial actionsusingahill-climbingsearchalgorithmtoidentifyanewtenant placement strategy to mitigate violating SLOs. Our evaluation {{using a variety of}} tenant types and workloads shows that Pythia can learn a tenant’s behavior with more than 92 % accuracy and learn the quality of packings with more than 86 % accuracy. During a performance crisis, Delphi is able to reduce 99 th percentile latencies by 80 %, and can consolidate 45 % more tenants than a greedy baseline, which balances tenant load without modeling tenant behavior. Categories andSubject Descriptor...|$|R
40|$|Server {{consolidation}} {{is important}} in situations where a sequence of <b>database</b> <b>tenants</b> need to be allocated (hosted) dynamically on a minimum number of cloud server machines. Given a tenant’s load defined {{by the amount of}} resources that the tenant requires and a service-level- agreement (SLA) between the tenant customer and the cloud service provider, resource cost savings can be achieved by consolidating multiple <b>database</b> <b>tenants</b> on server machines. Ad- ditionally, in realistic settings, server machines might fail causing their tenants to become un- available. To address this, service providers place multiple replicas of each tenant on different servers and reserve extra capacity to ensure that tenant failover will not result in overload on any remaining server. The focus of this thesis is on providing effective strategies for placing tenants on server machines so that the SLA requirements are met in the presence of failure of one or more servers. We propose the Cube-Fit (CUBEFIT) algorithm for multitenant database server consolidation that saves resource costs by utilizing fewer servers than existing approaches for analytical workloads. Additionally, unlike existing consolidation algorithms, CUBEFIT can tolerate multiple server failures while ensuring that no server becomes overloaded. We provide extensive theoretical analysis and experimental evaluation of CUBEFIT. We show that compared to existing algorithms, the average case and worst case behavior of CUBEFIT is superior and that CUBEFIT produces near-optimal tenant allocation when the number of tenants is large. Through evaluation and deployment on a cluster of up to 73 machines as well as through simulation stud- ies, we experimentally demonstrate the efficacy of CUBEFIT in practical settings...|$|R
40|$|Cloud {{computing}} {{is characterized}} by shared infrastructure and a decoupling between its operators and tenants. These two characteristics impose new challenges to databases applications hosted in the cloud, namely: (i) how to price database services, (ii) how to isolate <b>database</b> <b>tenants,</b> and (iii) how to optimize database performance on this shared infrastructure. We argue that today’s solutions, based on virtual-machines, do not properly address these challenges. We hint at new research directions to tackle these problems and argue that these three challenges share a common need for accurate predictive models of performance and resource utilization. We present initial predictive models for the important class of OLTP/Web workloads and show {{how they can be}} used to address these challenges. 1...|$|R
40|$|This essay {{addresses}} {{the impacts of}} electronic tenancy databases upon social relations {{in the field of}} private rental tenancy in Australia. Insights arise from research carried out, in 2002 – 3, in the eastern, mainland states of Australia that included interviews with tenants and property managers in the private rental sector. Property managers viewed tenancy databases as a tool for efficient, effective and professional risk management, and ‘professional’ practice was held to render misconduct or improper listings extremely unlikely. In this context, tenants were individualized and expected to actively work to construct, maintain and document their reputation as a ‘good tenant’. For <b>tenants,</b> tenancy <b>databases</b> could have a particular, definitive effect. ‘Not being listed’ (along with getting a full rental bond refund, references from previous landlords, and so on) is an indicator that helps build a satisfactory, personal rental history. On the other hand, being ‘listed’ is read as a prime indicator of risk and effectively overriding other aspects of a tenant’s application for tenancy. ‘Listed’ tenants find themselves being forced to shift further and further away from the formal rental market and ultimately into insecure and inappropriate housing arrangements at the periphery...|$|R
40|$|Motivated by {{the growing}} {{popularity}} of database-as-a-service clouds, this paper presents ShuttleDB, a holis-tic approach enabling flexible, automated elasticity of <b>database</b> <b>tenants</b> in the cloud. We first propose a database-aware live migration and replication method designed to work with off-the-shelf databases without any database engine modifications. We then combine these database-aware techniques with VM-level mech-anisms to implement a flexible elasticity approach that can achieve efficient scale up, scale out, or scale back for diverse tenants with fluctuating workloads. Our experi-mental evaluation of the ShuttleDB prototype shows that by applying migration and replication techniques at the tenant level, automated elasticity can be achieved both intra- and inter-datacenter in a database agnostic way. We further show that ShuttleDB can reduce the time and data transfer needed for elasticity by 80 % or more com-pared to tenant-oblivious approaches. ...|$|R
40|$|The study {{described}} in this article uses a random sample of households in the Multi family <b>Tenant</b> Characteristics System <b>database</b> and the <b>Tenant</b> Rental Assistance Certification System database to address the following questions: Does a significant difference exist in the mobility patterns of households {{in each of the three}} primary assisted housing programs? What household characteristics affect the probability of leaving assisted housing? The analysis shows that individual characteristics play an important role in determining assisted housing tenure, and significant differences in individual characteristics exist across the three primary assisted housing programs. The analysis also shows that location and neighborhood factors do affect household tenure in assisted housing programs. The results from this study clearly confirm that basic economic conditions play a significant role in determining whether a household stays or leaves an assisted housing program...|$|R
40|$|There {{has been}} a great {{interest}} in exploiting the cloud as a platform for database as a service. As with other cloud-based services, database services may enjoy cost efficiency through consolidation: hosting multiple databases within a single physical server. Aggressive consolidation, however, may hurt the service quality, leading to SLA violation penalty, which in turn reduces the total business profit, called SLA profit. In this paper, we consider the problem of tenant placement in the cloud for SLA profit maximization, which, as will be shown in the paper, is strongly NP-hard. We propose SLA profit-aware solutions for <b>database</b> <b>tenant</b> placement based on our model for expected penalty computation for multitenant servers. Specifically, we present two approximation algorithms, which have constant approximation ratios, and we further discuss improving the quality of tenant placement using a dynamic programming algorithm. Extensive experiments based on TPC-W workload verified the performance of the proposed approaches...|$|R
40|$|AbstractMulti-tenant {{database}} {{is a new}} database solution {{which is}} significant for Software as a service (SaaS) and Big Data applications {{in the context of}} cloud computing paradigm. This multi-tenant database has significant design challenges to develop a solution that ensures a high level of data quality, accessibility, and manageability for the <b>tenants</b> using this <b>database.</b> In this paper, we propose a multi-tenant data management service called Elastic Extension Tables Schema Handler Service (EETSHS), which is based on a multi-tenant database schema called Elastic Extension Tables (EET). This data management service satisfies tenants’ different business requirements, by creating, managing, organizing, and administratinglarge volumes of structured, semi-structured, and unstructured data. Furthermore, it combines traditional relational data with virtual relational data in a single database schema and allows tenants to manage this data by calling functions from this service. We present algorithms for frequently used functions of this service, and perform several experiments to measure the feasibility and effectiveness of managing multi-tenant data using these functions. We report experimental results of query execution timesfor managing tenants’ virtual and traditional relational data showing that EET schema is a good candidate for the management of multi-tenant data for SaaS and Big Data applications...|$|R
40|$|In Finland {{living in}} an {{apartment}} that one owns is common and nationally the built environment is the largest asset class in terms of invested private equity. Residential real estate investing is also very common with most investors owning between one and three investment apartments. One of the key elements of residential investing is tenant selection as the cash flow that an investment apartment generates comes from tenants paying their rents. Tenant selection is especially crucial the fewer apartments an investor owns: if an investor has two apartments {{and one of them}} is empty his income is reduced by 50 %. If an investor has 1000 apartments and 100 of them are empty, his income is reduced by only 10 %. Irrespective of the number of apartments an investor owns however, missed rents constitute a considerable financial loss to the landlord and therefore it is in the investor’s best interest to minimize the number of bad tenants. The literature review concentrated on how investors, real estate consultants, various organizations etc. vet their applicants. The reason for studying how the aforementioned groups compare their applicants is that no studies were found where residential tenants had been directly studied with regard to their tendency to pay their rents on time. When landlords compare potential tenants, financial aspects, the stability and ability of making lease payments is heavily weighed. The empirical part concentrated on a regression analysis of SATO’s <b>tenant</b> information <b>database</b> where people who lived alone were chosen for detailed analysis. Linear and logistic regressions were chosen as the regression methods. Linear regression modeling was done using IBM SPSS and logistic regression was done using Waikato Environment for Knowledge Analysis (WEKA), a program utilizing machine learning. In conclusion no connections were found between the inability to pay rents on time and any of the factors included in the study. It is important to note that the data did not include information such as the financial records of the tenants, nor did it include their criminal records, tendency to use micro financing (pikavippi) or other potentially relevant information on the ability of the individual to manage their personal finances...|$|R
40|$|Bad tenants {{can be a}} {{real problem}} for not paying rent on time or leaving {{properties}} in a mess. Lodged information about bad <b>tenants</b> in tenancy <b>databases</b> assists estate agents and landlords make more informed decisions. The study examines the need for residential tenancy databases in Nigeria. Often times, details on a tenancy application form {{may not be enough to}} make an informed decision about whether or not the applicant will be a good tenant. The study employed study focus groups using semi-structured face-to-face interviews to gather data among ten principals of estate surveying and valuation firms in Ikeja, Lagos on the one hand; ten prominent local estate agents; five prominent practicing lawyers, ten landlords of multi-tenanted properties and forty tenants within Baruwa/Ipaja neighbourhood in Alimosho Local Government Council area of Lagos State, on the other hand through purposive sampling method. The survey was carried out between September and December, 2013. Data were analysed using tables, percentages and ranking. The study showed that landlords, estate agents and lawyers ranked ability to guide and guard against loss of income to all participants in the real estate business as first and paramount reason for the call for tenancy database. The need to minimize capital loss to landlords was ranked second with ensuring a reduction in overhead expenses by landlords as third. However, public feelings about landlord’s rights on control of building use and character or emotions have no stron...|$|R

