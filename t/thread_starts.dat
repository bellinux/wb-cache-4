8|136|Public
5000|$|Once all the Boot and System {{drivers have}} been loaded, the kernel (system <b>thread)</b> <b>starts</b> the Session Manager Subsystem (...) [...]|$|E
5000|$|Note {{that without}} precautions, this {{approach}} can be detected by the target process due to the DLL_THREAD_ATTACH notifications sent to every loaded module as a <b>thread</b> <b>starts.</b>|$|E
5000|$|Number of teeth, N : How many teeth a gear has, an integer. In {{the case}} of worms, it {{is the number of}} <b>thread</b> <b>starts</b> that the worm has.|$|E
5000|$|Single-process {{design with}} only several threads. No {{processes}} or <b>threads</b> <b>started</b> per connection.|$|R
500|$|July 26, 2006: [...] "Who is Essjay?" [...] <b>thread</b> <b>started</b> on {{watchdog}} site Wikipedia Review, {{the ensuing}} discussion brings {{to light the}} contradictions.|$|R
5000|$|... {{threading}} operations include a)all {{types of}} {{external and internal}} thread forms using a single point tool also taper <b>threads,</b> double <b>start</b> <b>threads,</b> multi <b>start</b> <b>threads,</b> worms as used in worm wheel reduction boxes, leadscrew with single or multistart threads. b) {{by the use of}} threading boxes fitted with 4 form tools, up to 2" [...] diameter threads but it is possible to find larger boxes than this.|$|R
50|$|For a given screw {{diameter}} {{and quantity of}} <b>thread</b> <b>starts</b> more rollers corresponds to higher static load capacity, but not necessarily to a higher dynamic load capacity. Preloaded split nuts and double nuts are available to eliminate backlash.|$|E
50|$|In Windows NT, {{the boot}} loader is called NTLDR. It is {{responsible}} for accessing the file system on the boot drive, for starting ntoskrnl.exe and for loading boot-time device drivers into memory. Once all the Boot and System drivers have been loaded, the kernel (system <b>thread)</b> <b>starts</b> the Session Manager Subsystem (smss.exe), which in turn starts winlogon, which loads the graphical identification and authentication library.|$|E
50|$|Thread {{synchronization}} {{is defined}} as a mechanism which ensures that two or more concurrent processes or threads do not simultaneously execute some particular program segment known as critical section. Processes' access to critical section is controlled by using synchronization techniques. When one <b>thread</b> <b>starts</b> executing the critical section (serialized segment of the program) the other thread should wait until the first thread finishes. If proper synchronization techniques are not applied, it may cause a race condition where the values of variables may be unpredictable and vary depending on the timings of context switches of the processes or threads.|$|E
5000|$|Create a new {{thread in}} the target process with the <b>thread's</b> <b>start</b> address set to be the address of LoadLibrary and the {{argument}} set to {{the address of the}} string just uploaded into the target.|$|R
50|$|Like Marvel Team-Up and Avenging Spider-Man before it, Superior Spider-Man Team-Up {{features}} a team-up format where Spider-Man is partnered {{with a different}} character each issue. It will continue plot <b>threads</b> <b>started</b> in Avenging Spider-Man and run in tandem with Dan Slott's main Superior Spider-Man title.|$|R
40|$|Note: This post {{connects to}} the {{conversational}} <b>thread</b> <b>started</b> here in March, which focused on sharing lessons and insights about leadership challenges faced by CAOs and other senior administrators as we seek ways to ease the tension between our goals for access, completion rates, and educational quality...|$|R
40|$|One of {{the most}} {{important}} requirements imposed to the modern mechanisms is economic feasibility. Therefore, considered as advanced are mechanical transducers of rotary motion to translational one, where rolling friction is mainly realized. They include planetary roller-screw mechanisms (PRSM). PRSM has a large variety of features. The design feature of PRSM is multiple starts of screw and nut thread. Rollers, as a rule, are made single-threaded. Number of screw <b>thread</b> <b>starts</b> which equals to a number of nut <b>thread</b> <b>starts,</b> has an effect on almost all performance characteristics of PRSM. This article covers comprehensively enough the influence of screw <b>thread</b> <b>starts</b> quantity on: kinematical parameters of PRSM, transfer function, mechanism radial dimensions, efficiency, power values, required characteristics of electric motor. As a result of investigations the graphs of dimensionless parameters vs. number of screw <b>thread</b> <b>starts</b> have been plotted, which are demonstrative and common. Being high enough the PRSM efficiency can vary within 20 … 25 % and more. It depends on a variety of mechanism part parameters; primarily on geometrical ones, as well as on a number of screw <b>thread</b> <b>starts.</b> Previously the methods of PRSM design calculation consisted in determination of the main geometric parameters of mechanism parts, then in determination of mechanism efficiency. At that, it was not always possible to design the economically feasible PRSM structure. Introduction of a dimensionless value – a relation of PRSM part thread pitch to average screw thread diameter – contributed to successive plotting of the assemblage of curves for relation of efficiency to the indicated ratio and a number of screw <b>thread</b> <b>starts.</b> By taking this assemblage of curves as a basis, the method of economically feasible PRSM structures calculation and design was proposed.   The essence of the developed method lies in that selection or definition of a number of screw <b>thread</b> <b>starts</b> helps to determine the relation of PRSM parts thread pitch to average diameter of screw thread which provides the maximum possible efficiency. Given further are check calculations confirming the operation capability of the selected PRSM design. </p...|$|E
40|$|This {{research}} {{focuses on}} the development of a persistent navigation algorithm for a hovering vehicle with a single, downward-facing visible spectrum camera. A successful persistent navigation algorithm allows a vehicle to: * Continuously estimate its location and pose within a local, if not global, coordinate frame. * Continuously align incoming data to both temporally proximal and temporally distant data. For aerial images, this alignment is equivalent to image mosaicking, as is commonly used in aerial photogrammetry to produce broad-scale photomaps from a sequence of discrete images. * Operate relative to, and be commanded relative to the sensor data, rather than relative to an abstract coordinate system. The core application space considered here is moderate-to-high altitude aerial mapping, and a number of sets of high-resolution, high-overlap aerial photographs are used as the core test data set. These images are captured from a sufficient altitude that the apparent perspective shift of objects on the ground is minimized [...] the scene is effectively planar. As such, this research focuses heavily on the properties and advantages available when processing such planar images. This research is split into two threads which track the two main challenges in visual persistent navigation: the association and alignment of visual data given significant image change, and the development of an estimation algorithm and data storage structure with bounded computational and storage costs for a fixed map size. Persistent navigation requires the robot to accurately align incoming images against historical data. By its nature, however, visual data contains a high degree of variability despite minimal changes in the scene itself. As a simple example, as the sun moves and weather conditions change, the apparent illumination and shading of objects in the scene can vary significantly. More critically, image alignment must be robust to change in the scene itself, as that change is often a critical output from the robot's re-exploration. This problem is considered in two contexts. First, a set of state-of-the-art feature detection algorithms are evaluated against sample data sets which include both temporally proximal and disparate images of the same location. The capacity of each algorithm to identify repeated point features is measured for a spectrum of algorithm-specific parameter values. Next, the potential of using a prior estimate on the inter-image geometry to improve the robustness of precise image alignment is considered for two phases of the image alignment process: feature matching and robust outlier rejection. A number of geometry-aware algorithms are proposed for both phases, and tested against similar sets of similar and disparate aerial images. While many of the proposed algorithms do improve on the performance of the unguided algorithms, none are vastly superior. The second <b>thread</b> <b>starts</b> by considering the problem of navigation fromdownward-looking aerial images from the perspective of Simultaneous Localization and Mapping (SLAM). This leads to the development of Simultaneous Mosaicking and Resectioning Through Planar Image Graphs (SMARTPIG), an online, iterative mosaicking and SLAM algorithm built on the assumption of a planar scene. A number of samples of SMARTPIG outputs are shown, including mosaics of a 600 -meter square airport with approximately 3 -meter reprojection errors relative to ground control points. SMARTPIG, like most SLAM algorithms, does not fulfill the criteria for persistent navigation because the computational and storage costs are proportional to the total mission length, not the total area explored. SMARTPIG is evolved towards persistent navigation by the introduction of the featurescape, a storage structure for long-term point-feature data, to produce Planar Image Graphs for PErsistent Navigation (PIGPEN). PIGPEN is demonstrated perfoming robot re-localization onto an existing SMARTPIG mosaic with an accuracy comparable to the original mosaic...|$|E
500|$|A clip of Winehouse's {{music was}} {{included}} in the [...] "Roots and Influences" [...] area that looked at connections between different artists at the Rock and Roll Hall of Fame Annex NYC, which opened in December 2008. One <b>thread</b> <b>started</b> with Billie Holiday, continued with Aretha Franklin and Mary J. Blige, and then finished with Winehouse.|$|R
50|$|After a long hiatus {{marked by}} {{censorship}} of homosexual themes, modern historians {{picked up the}} <b>thread,</b> <b>starting</b> with Erich Bethe in 1907 and continuing with K. J. Dover and many others. These scholars have shown that same-sex relations were openly practised, largely with official sanction, {{in many areas of}} life from the 7th century BC until the Roman era.|$|R
40|$|Hardware support got us pretty far: working locks, {{and even}} (as {{with the case}} of the ticket lock) {{fairness}} in lock acquisition. However, we still have a problem: what to do when a context switch occurs in a critical section, and <b>threads</b> <b>start</b> to spin endlessly, waiting for the interrupt (lock-holding) thread to be run again...|$|R
5000|$|A clip of Winehouse's {{music was}} {{included}} in the [...] "Roots and Influences" [...] area that looked at connections between different artists at the Rock and Roll Hall of Fame Annex NYC, which opened in December 2008. One <b>thread</b> <b>started</b> with Billie Holiday, continued with Aretha Franklin and Mary J. Blige, and then finished with Winehouse.|$|R
40|$|This paper {{presents}} a program logic for reasoning about multithreaded Java-like programs with concurrency primitives such as dynamic thread creation, thread joining and reentrant object monitors. The logic {{is based on}} concurrent separation logic. It is the first detailed adaptation of concurrent separation logic to a multithreaded Java-like language. The program logic associates a unique static access permission with each heap location, ensuring exclusive write accesses and ruling out data races. Concurrent reads are supported through fractional permissions. Permissions can be transferred between <b>threads</b> upon <b>thread</b> <b>starting,</b> <b>thread</b> joining, initial monitor entrancies and final monitor exits. In order to distinguish between initial monitor entrancies and monitor reentrancies, auxiliary variables keep track of multisets of currently held monitors. Data abstraction and behavioral subtyping are facilitated through abstract predicates, which are also used to represent monitor invariants, preconditions for <b>thread</b> <b>starting</b> and postconditions for thread joining. Value-parametrized types allow to conveniently capture common strong global invariants, like static object ownership relations. The program logic is presented for a model language with Java-like classes and interfaces, the soundness of the program logic is proven, {{and a number of}} illustrative examples are presented...|$|R
50|$|In 1876, the Mile End <b>Thread</b> Mills <b>started</b> operating, giving {{employment}} {{to several hundred}} operators.|$|R
5000|$|Hard cron: a cron <b>thread</b> gets <b>started</b> on web2py startup. For Windows and Rocket/standalone web2py installs.|$|R
50|$|<b>Thread</b> 1 <b>starts</b> running pop: ret = A; next = B;Thread 1 gets {{interrupted}} {{just before}} the compare_exchange_weak...|$|R
30|$|The {{biodiesel}} {{was kept}} inside the flash and fire point apparatus, and a cotton thread {{was placed in}} it. The biodiesel was heated with a gas stove. Another ignited cotton thread was dragged {{on the surface of}} the former thread. The temperature at which the spark came out of first thread was noted as the flash point of the biodiesel, and the temperature at which the <b>thread</b> <b>started</b> burning was noted as the fire point of the biodiesel.|$|R
5000|$|The {{developers}} did {{not consider}} Dreamfall a direct sequel to The Longest Journey, but rather a [...] "follow-up, set in the same universe, but telling a different story", hence the different title and a new protagonist (Zoë Castillo). The direct sequel would have starred April Ryan in the main role and continued the plot <b>threads</b> <b>started</b> in the first game. In 2013, this sequel was announced as The Longest Journey Home, {{which would have been}} produced after Dreamfall Chapters, the sequel to Dreamfall.|$|R
5000|$|It {{consists}} of three entwined stories that takes the readers to a journey from a secluded Tibetan Monastery in the 16th century, through the Great Famine in the 1800s, {{all the way to}} present day. [...] The karmic <b>threads</b> <b>start</b> to twist and intertwine between the stories leaving you questioning - why does the fateful karma interfere with our lives and how far does it reach? How do we end up in the relationships that we have? What is the thing bringing them forward? ...|$|R
5000|$|Skweee has, during late 2008 {{and early}} 2009, started to {{influence}} the sound of dubstep. A <b>thread</b> <b>started</b> on the dubstepforum made the scene aware of skweee. Producers such as Rusko, Gemmy, Joker, Zomby, Rustie, [...] among others, have given their take on the sound, resulting in several releases on the boundary between skweee and dubstep. The gap between dubstep and skweee has been further bridged by artists such as DJ Pontificate and underground ambient artist Chohmo, {{as evidenced by the}} former's release [...] "Skweeeal." ...|$|R
50|$|Community activists {{discovered}} altered {{versions of}} CryptoNote whitepapers with digital signatures not corresponding to Nicolas van Saberhagen PGP key and missing PGP watermarks. This incident has {{been attributed to}} documents' forgery. The possible goal of people behind this action was to refute claims about public availability of CryptoNote since 2012 in order to gain competitive advantage. Modified whitepaper included link to discussion <b>thread</b> <b>started</b> in May, 2013 on bitcointalk.org forum and have been generated using TeX Live software released in 2013 with XMP date property set to 2014.|$|R
5000|$|Correia's works include {{magic and}} often mythical monsters, such as vampires and werewolves. His stories are {{typically}} action-oriented with accurate and detailed depictions of firearms usage. Correia {{used to be}} active on firearms discussion boards, where he would write about his interest in weapons and low budget monster movies, and also get inspiration from various online threads. The original rough draft of Dead Six started out in such a <b>thread</b> <b>started</b> by Mike Kupari on the [...] "The High Road" [...] gun forum called [...] "Welcome Back, Mr. Nightcrawler".|$|R
40|$|This paper motivates and {{presents}} a program logic for reasoning about multithreaded Java-like programs with concurrency primitives such as dynamic thread creation, thread joining and reentrant object monitors. The logic {{is based on}} concurrent separation logic. It is the first detailed adaptation of concurrent separation logic to a multithreaded Java-like language. The program logic associates a unique static access permission with each heap location, ensuring exclusive write accesses and ruling out data races. Concurrent reads are supported through fractional permissions. Permissions can be transferred between <b>threads</b> upon <b>thread</b> <b>starting,</b> <b>thread</b> joining, initial monitor entrancies and final monitor exits. This paper presents the basic principles to reason about thread creation and thread joining. It finishes with an outlook how this logic will evolve into a full-fledged verification technique for Java (and possibly other multithreaded languages) ...|$|R
50|$|On the Dungeons & Dragons {{official}} website, a long ongoing article <b>thread</b> has <b>started</b> {{describing the}} Border Kingdoms {{and all the}} various states and kingdoms and other places in it in detail.|$|R
40|$|This paper {{describes}} a formalization of multi-threaded Java bytecode in Coq. The formalization {{builds on the}} existing Bicolano formalization for sequential Java bytecode – which captures basically all aspects of sequential bytecode supported by the CLDC (Java for mobile phones) platform. We use a special extension framework to extend the existing formalization in a systematic way. The formalization is complete: it models all aspects related to concurrency: monitors, <b>thread</b> <b>start</b> and completion, the wait-notify mechanism and the interrupt mechanism, {{and it does not}} require any transformation of the bytecode. The formalization is developed to be suited for program verification and static analysis. ...|$|R
40|$|A {{compiler}} for multi-threaded object-oriented programs needs {{information about}} the sharing of objects {{for a variety of}} reasons: to implement optimizations, to issue warnings, to add instrumentation to detect access violations that occur at runtime. An Object Use Graph (OUG) statically captures accesses from different threads to objects. An OUG extends the Heap Shape Graph (HSG), which is a compile-time abstraction for runtime objects (nodes) and their reference relations (edges). An OUG specifies for a specific node in the HSG a partial order of events relevant to the corresponding runtime object(s). Relevant events include read and write access, object escape, <b>thread</b> <b>start</b> and join. OUGs have been implemented [...] ...|$|R
30|$|If we move a bit above a Leviathan {{concept of}} a state we must admit {{that it is very}} {{important}} role is to create a sphere for human interaction where smaller identities can be formed and to nudge people toward each other in order to make sure those <b>threads</b> <b>start</b> connecting them. It should send signals and provide symbols to society, which would help people come together. It should also seek and develop points where this coming together can occur, above all, in the Russian language and culture. It must refrain completely from sending signals and imposing symbols which would divide various social, ethnic and religious groups.|$|R
50|$|According to one account, a {{silkworm}} cocoon {{fell into}} her tea, {{and the heat}} unwrapped the silk until it stretched across her entire garden. When the silk ran out, she saw a small cocoon and realized that this cocoon {{was the source of}} the silk. Another version says that she found silkworms eating the mulberry leaves and spinning cocoons. She collected some cocoons, then sat down to have some tea. While she was sipping a cup, she dropped a cocoon into the steaming water. A fine <b>thread</b> <b>started</b> to separate itself from the silkworm cocoon. Leizu found that she could unwind this soft and lovely thread around her finger.|$|R
5000|$|<b>Thread</b> {{execution}} <b>starts</b> at {{the beginning}} of the function [...] To terminate the thread correctly, [...] must call [...] or end with [...] "return 0", freeing memory allocated by the run time library to support the thread.|$|R
5000|$|Galaxy Zoo (GZ) is {{a project}} online since July 2007 which seeks to {{classify}} up to one million galaxies. In July 2007, {{a few days after}} the start of GZ, a discussion was started on GZ's Internet forum by Hanny Van Arkel called [...] "Give peas a chance" [...] in which various green objects were posted. This <b>thread</b> <b>started</b> humorously, as the name is a word play of the title of the John Lennon song [...] "Give Peace a Chance", but by December 2007, it had become clear that some of these unusual objects were a distinct group of galaxies. These [...] "Pea galaxies" [...] appear in the SDSS as unresolved green images. This is because the Peas have a very bright, or powerful, Spectral line in their spectra for highly-ionized oxygen, which in SDSS color composites increases the luminosity, or brightness, of the [...] "r" [...] color band with respect to the two other color bands [...] "g" [...] and [...] "i". The [...] "r" [...] color band shows as green in SDSS images. Enthusiasts, calling themselves the [...] "Peas Corps" [...] (another humorous play on the Peace Corps), collected over a hundred of these Peas, which were eventually placed together into a dedicated discussion <b>thread</b> <b>started</b> by Carolin Cardamone in July 2008. The collection, once refined, provided values that could be used in a systematic computer search of the GZ database of one million objects, which eventually resulted in a sample of 251 Pea galaxies, also known as Green Peas (GPs).|$|R
