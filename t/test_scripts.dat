218|230|Public
50|$|There {{are various}} means for {{executing}} <b>test</b> <b>scripts.</b>|$|E
5000|$|This API {{also allows}} {{automated}} <b>test</b> <b>scripts</b> {{to interact with}} the UI.|$|E
5000|$|Automated testing tools (examples: <b>Test</b> <b>scripts)</b> For {{executing}} tests {{after each}} daily build.|$|E
40|$|Abstract. At present, the {{automated}} real-time embedded software testing {{is a hot}} topic. Automated testing is essentially based on user programming and how to build <b>test</b> <b>script</b> quickly and effectively {{is one of the}} key problems to be resolved. In this paper, the object-oriented and framework technologies are introduced into the real-time embedded software testing field and the real-time testing object framework (RT-TOF) is studied firstly. And then, the <b>test</b> <b>script</b> generation process based on RT-TOF is proposed. Furthermore, the design of RT-TOF is put forward. Finally, the <b>test</b> <b>script</b> sample of the avionics embedded software system testing is given. Practical application of RT-TOF in engineering shows that the method proposed in this paper can improve the efficiency of automated testing greatly and the <b>test</b> <b>script</b> based on RT-TOF has better maintainability and reusability...|$|R
50|$|The weekly {{broadcasts}} of the EBS attention {{signal and}} <b>test</b> <b>script</b> {{made it a}} significant part of the American cultural fabric of its time, and became the subject of a great number of jokes and skits, such as the sung versions of the <b>test</b> <b>script</b> in the late 1970s. In addition, many people have testified to being frightened by the test patterns and attention signal as children.|$|R
50|$|Collections of {{test cases}} are {{sometimes}} incorrectly termed a test plan, a <b>test</b> <b>script,</b> {{or even a}} test scenario.|$|R
5000|$|Test development: Test procedures, test scenarios, test cases, test datasets, <b>test</b> <b>scripts</b> to use {{in testing}} software.|$|E
50|$|Intermediate {{products}} to test are the: requirements, system design, test strategy, test plan, <b>test</b> <b>scripts,</b> unit test results, prototype.|$|E
50|$|Even if {{the final}} product is not to contain the {{scripting}} engine, it may nevertheless be very useful for writing <b>test</b> <b>scripts.</b>|$|E
50|$|Some NWS Weather Forecast Offices, such {{as those}} based in Taunton, Massachusetts and Phoenix, Arizona, use a {{completely}} different <b>test</b> <b>script.</b>|$|R
50|$|One of {{the most}} {{recently}} developed test system platforms employs instrumentation equipped with onboard <b>test</b> <b>script</b> processors combined with a high-speed bus. In this approach, one “master” instrument runs a <b>test</b> <b>script</b> (a small program) that controls {{the operation of the}} various “slave” instruments in the test system, to which it is linked via a high-speed LAN-based trigger synchronization and inter-unit communication bus. Scripting is writing programs in a scripting language to coordinate a sequence of actions.|$|R
50|$|Navigation {{through the}} program, {{reading of the}} data sources, and logging of test status and {{information}} are all coded in the <b>test</b> <b>script.</b>|$|R
50|$|Authors of test plans, test cases, and <b>test</b> <b>scripts</b> {{can place}} {{a lock on}} their {{artifacts}} to prevent others from editing them.|$|E
50|$|Introduced in version 8.1 of Rational Functional Tester, this {{technology}} enables testers to edit <b>test</b> <b>scripts</b> by acting against screen {{shots of the}} application.|$|E
5000|$|A {{batch system}} {{is needed to}} manage test suites and test cases so that large number of <b>test</b> <b>scripts</b> can run {{automatically}} without user intervention.|$|E
5000|$|All Gherkin files {{have the}} [...] file extension. They contain a single Feature {{definition}} {{for the system}} under test and are an executable <b>test</b> <b>script.</b>|$|R
50|$|A <b>test</b> <b>script</b> in {{software}} <b>testing</b> {{is a set}} of instructions that will be performed on the system under test to test that the system functions as expected.|$|R
40|$|At first, {{the core}} ideology, {{advantage}} and principle of Software Testing Automation Framework (STAF) {{are presented in}} this paper. Several automated testing frameworks are summarized and analyzed. In addition, date driven automation test framework is given more attention. Test script is the important composing part of software test automation. Then this paper introduces several technologies of script along with their characteristics. Every technology applies to different places. Moreover, an automated test system with an automated <b>test</b> <b>script</b> language XML which is implemented {{to solve the problems}} in current automatic testing solutions. The design and implantation of the <b>test</b> <b>script</b> automation framework based on apache ant is put forward. The proposed key technology details of framework are also introduced. We take the automation test methodology of database connectivity operations by ODBC data source as example for validation, using auto <b>test</b> <b>script</b> as the key technology. Finally, the results demonstrate that it can best increase software test effectiveness and reduce workloads as well as save more efforts...|$|R
5000|$|HP WinRunner {{software}} was an automated functional GUI testing tool that allowed a user to record and play back user interface (UI) interactions as <b>test</b> <b>scripts.</b>|$|E
50|$|One of the {{benefits}} of using <b>test</b> <b>scripts</b> is that they can be run repeatedly throughout the test cycle, as functional errors and/or system-wide defects are gradually resolved over time, in order to improve the reliability, capacity or performance of any, or all, hardware or software components in the system under test. For functional and regression testing, test programmers would typically define a network of just one simulated terminal executing <b>test</b> <b>scripts</b> tailored to evaluate a comprehensive set of transactions (database enquiry or data entry) serially, and at slow or average rates of message traffic. For system testing, performance/capacity testing, stress testing and benchmarking, the same test programmers would define large networks of dozens or even thousands of simulated terminals, each running - for example - a range of these functional <b>test</b> <b>scripts,</b> now grouped together to exercise as many system components as possible at high rates of message traffic.|$|E
50|$|Rational Quality Manager {{provides}} a full-featured manual test editor. Existing manual <b>test</b> <b>scripts</b> can be imported from Rational Manual Tester. Reuse and automation capabilities {{can be added}} to manual tests by using keywords.|$|E
5000|$|... 5. Scripting:The {{variety of}} devices makes {{executing}} a <b>test</b> <b>script</b> (scripting) a key challenge. As devices differ in keystrokes, input methods, menu structure and display properties single script does not function on every device.|$|R
25|$|Scripts are {{recorded}} in Selenese, a special <b>test</b> <b>scripting</b> language for Selenium. Selenese provides commands for performing actions in a browser (click a link, select an option), and for retrieving {{data from the}} resulting pages.|$|R
50|$|Choosing {{the right}} framework/scripting {{technique}} helps in maintaining lower costs. The {{costs associated with}} <b>test</b> <b>scripting</b> are due to development and maintenance efforts. The approach of <b>scripting</b> used during <b>test</b> automation has effect on costs.|$|R
50|$|TPNS {{provides}} {{a number of}} solutions to automate the creation of <b>test</b> <b>scripts.</b> The script generation facilities described {{in the next three}} sections are also available in Workload Simulator for z/OS and S/390 (WSim).|$|E
5000|$|WET UIPreliminary Script {{development}} {{can be done}} using the WET UI which is easy to use. Using the WET UI, a tester can create Test Definitions, Object Repositories and {{the first draft of}} the <b>test</b> <b>scripts.</b>|$|E
5000|$|With TPNS V3R1 (1989), IBM {{added the}} Structured Translator Language - or 'STL', a TPNS {{high-level}} scripting language with a syntax based on REXX - {{to make it}} easier for <b>test</b> <b>scripts</b> to be written by programmers familiar with REXX or similar structured programming languages. STL therefore made it possible to write <b>test</b> <b>scripts,</b> not only for the usual activity of simulated terminal operators, but also for exchanges between TPNS-simulated programs and real application programs or, for example, to prototype elements of an ATM shared network. Scripts written in STL must be translated into the TPNS language before the simulation run and a translator utility (ITPSTL) is supplied for that purpose.|$|E
5000|$|Every Wednesday {{morning at}} 11:25 a.m. Eastern time, the {{forecast}} office in Gray sends out the weekly test signal to all weather radio stations operated by their office, including WNG575. The <b>test</b> <b>script</b> is as follows: ...|$|R
5000|$|The <b>test</b> <b>script</b> {{modularity}} framework {{requires the}} creation of small, independent scripts that represent modules, sections, and functions of the application-under-test. These small scripts are then used in a hierarchical fashion to construct larger tests, realizing a particular test case.|$|R
50|$|While {{automation}} cannot reproduce {{everything that}} a human can do (and all the ways they think of doing it), {{it can be very}} useful for regression testing. However, it does require a well-developed test suite of <b>testing</b> <b>scripts</b> in order to be truly useful.|$|R
5000|$|IDE An {{integrated}} {{development environment}} for visually recording, editing & debugging load <b>test</b> <b>scripts.</b> WebLOAD's proxy-based recorder records HTTP activity. Test are generated in JavaScript and can be enhanced and edited using various tools in the IDE.|$|E
50|$|With Rational Quality Manager, <b>test</b> <b>scripts</b> can {{be managed}} and {{executed}} that were created with tools such as IBM Rational Functional Tester, IBM Rational Performance Tester, Rational Service Tester for SOA Quality, and IBM Rational AppScan® Tester Edition.|$|E
5000|$|RFX builder allows rapid {{prototyping}} of new effects, transitions, generators, utilities and tools. Custom RFX scripts can be exported {{to share with}} others or downloaded and imported. <b>Test</b> <b>scripts</b> are run in a sandbox to allow safe testing of new plugins.|$|E
50|$|DéjàClick for Mozilla Firefox uses a {{proprietary}} feature known as TrueUser technology when generating <b>testing</b> <b>scripts.</b> TrueUser automatically detects and adjusts for dynamic features of Rich Internet applications, including cookies, caching, certificates, JavaScript and delayed user-responses. User activity is recorded and played back automatically. This allows for quick problem-detection and -resolution.|$|R
50|$|In {{software}} testing, a {{test harness}} or automated test framework {{is a collection}} of software and test data configured to test a program unit by running it under varying conditions and monitoring its behavior and outputs. It has two main parts: the test execution engine and the <b>test</b> <b>script</b> repository.|$|R
50|$|Scripts may be {{automatically}} {{recorded and}} edited manually providing autocompletion {{support and the}} ability to move commands around quickly.Scripts are recorded in Selenese, a special <b>test</b> <b>scripting</b> language for Selenium. Selenese provides commands for performing actions in a browser (click a link, select an option), and for retrieving data from the resulting pages.|$|R
