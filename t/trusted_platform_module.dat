406|561|Public
5|$|Initial {{development}} on WoA took place by porting code from Windows 7; Windows Mobile smartphones {{were used to}} test early builds of WoA {{because of lack of}} readily available ARM-based tablets. Later testing was performed using a custom-designed array of rack-mounted ARM-based systems. Changes to the Windows codebase were made to optimize the OS for the internal hardware of ARM devices, but a number of technical standards traditionally used by x86 systems are also used. WoA devices would use UEFI firmware, and have a software-based <b>Trusted</b> <b>Platform</b> <b>Module</b> to support device encryption and UEFI Secure Boot. ACPI is also used to detect and control plug and play devices and provide power management outside the SoC. To enable wider hardware support, peripherals such as human interface devices, storage and other components that use USB and I²C connections use class drivers and standardized protocols. Windows Update serves as the mechanism for updating all system drivers, software, and firmware.|$|E
25|$|TPM1.2 (<b>Trusted</b> <b>Platform</b> <b>Module</b> from Infineon Technologies or Nuvoton) {{used for}} the theft control feature.|$|E
25|$|Updated {{certification}} requirements were implemented {{to coincide with}} Windows 8.1. As of 2014, all certified devices with integrated displays must contain a 720p webcam and higher quality speakers and microphones, while all certified devices that support Wi-Fi must support Bluetooth as well. As of 2015, all certified devices must contain <b>Trusted</b> <b>Platform</b> <b>Module</b> 2.0 chips.|$|E
5000|$|<b>Trusted</b> <b>platform</b> <b>modules</b> (TPMs) secure devices by {{integrating}} cryptographic capabilities onto access devices, {{through the use}} of microprocessors, or so-called computers-on-a-chip. TPMs used in conjunction with server-side software offer a way to detect and authenticate hardware devices, preventing unauthorized network and data access.|$|R
40|$|This book {{describes}} the primary uses for <b>Trusted</b> <b>Platform</b> <b>Modules</b> (TPMs) and practical considerations {{such as when}} TPMs {{can and should be}} used, when they shouldn't be, what advantages they provide, and how to actually make use of them, with use cases and worked examples of how to implement these use cases on a real system...|$|R
50|$|Both schemes {{are based}} on {{techniques}} for doing proofs of knowledge.Proofs of knowledge relying on the discrete logarithm problem for groups of known order and on the special RSA problem for groups of hidden order {{form the basis for}} most of today's group signature and anonymous credential systems. Moreover, direct anonymous attestation a protocol for authenticating <b>trusted</b> <b>platform</b> <b>modules</b> is based on the same techniques.|$|R
25|$|Apple {{does not}} authorize {{the use of}} Mac OS X on any x86 PC other than the ones it has {{developed}} itself. The company used technical means (although not the <b>Trusted</b> <b>Platform</b> <b>Module,</b> or TPM, as has been widely mis-reported), to tie Mac OS to the systems it distributed to developers after announcing its switch to Intel's chips.|$|E
25|$|June 6, 2005: Apple announces {{its plans}} to switch to Intel {{processors}} at the Worldwide Developer Conference and released a Developer Transition System, a PC running an Intel build of Mac OS X 10.4.1 with a <b>Trusted</b> <b>Platform</b> <b>Module</b> in a modified Power Mac G5 case, to all Select and Premier members of the Apple Developer Connection at a price of $999.|$|E
25|$|After {{the initial}} {{announcement}} of first Intel-based Mac hardware configurations, reporting a <b>Trusted</b> <b>Platform</b> <b>Module</b> among system components, {{it was believed}} that the TPM is responsible for handling the DRM protection. It was later proven to not be the case. The keys are actually contained within the System Management Controller, a component exclusive to Apple computers, and can be easily retrieved from it. These two 32-byte keys form a human-readable ASCII string copyrighted by Apple, establishing another possible line of legal defence against prospective clone makers.|$|E
50|$|On Debian, one can {{install the}} rng-tools package (apt-get install rng-tools) that {{supports}} the true random number generators (TRNGs) found in CPUs supporting the RdRand instruction, <b>Trusted</b> <b>Platform</b> <b>Modules</b> and in some Intel, AMD, or VIA chipsets, effectively increasing the entropy collected into /dev/random and potentially improving the cryptographic potential. This is especially useful on headless systems that have no other sources of entropy.|$|R
50|$|Considerable {{attention}} has been devoted in verifying the computation of functions performed by untrusted workers {{including the use of}} secure coprocessors, <b>Trusted</b> <b>Platform</b> <b>Modules</b> (TPMs), interactive proofs, probabilistically checkable proofs, efficient arguments, and Micali’s CS proofs. These verifications are either interactive which require the client to interact with the worker to verify the correctness proof, or are non-interactive protocols which can be proven in the random oracle model.|$|R
50|$|The X99 chipset {{supports}} Virtualization Technology for Directed I/O (Intel VT-d), {{which provides}} hardware support for virtualization by implementing an input/output {{memory management unit}} (IOMMU). The chipset also integrates a Low Pin Count (LPC) interface, supporting interrupt controllers, timers, power management, super I/O, real-time clock (RTC), etc. Integrated Serial Peripheral Interface (SPI) allows interfacing with devices such as <b>Trusted</b> <b>Platform</b> <b>Modules</b> (TPMs) and serial flash devices. System Management Bus (SMBus) is also provided, with additional support for I2C devices.|$|R
500|$|BitLocker {{originated}} {{as a part}} of Microsoft's Next-Generation Secure Computing Base {{architecture in}} 2004 as a feature tentatively codenamed [...] "Cornerstone", and was designed to protect information on devices, particularly in the event that a device was lost or stolen; another feature, titled [...] "Code Integrity Rooting", was designed to validate the integrity of Microsoft Windows boot and system files. When used in conjunction with a compatible <b>Trusted</b> <b>Platform</b> <b>Module</b> (TPM), BitLocker can validate the integrity of boot and system files before decrypting a protected volume; an unsuccessful validation will prohibit access to a protected system. BitLocker was briefly called Secure Startup prior to Windows Vista being released to manufacturing.|$|E
500|$|On {{compatible}} hardware, Windows 8.1 {{also features}} a transparent [...] "device encryption" [...] system based on BitLocker. Encryption begins {{as soon as a}} user begins using the system; the recovery key is stored to either the user's Microsoft account or an Active Directory login, allowing it to be retrieved from any computer. While device encryption is offered on all versions of Windows 8.1 unlike BitLocker (which is exclusive to the Pro and Enterprise editions), device encryption requires that the device meet the Connected Standby specification and have a <b>Trusted</b> <b>Platform</b> <b>Module</b> (TPM) 2.0 chip. Windows 8.1 also introduces improved fingerprint recognition APIs, which allows user login, User Account Control, Windows Store and Windows Store apps to use enrolled fingerprints as an authentication method. A new kiosk mode known as [...] "Assigned Access" [...] was also added, allowing a device to be configured to use a single app in a restricted environment. Additionally, Windows Defender includes an intrusion detection system which can scan network activity for signs of malware. Windows 8.1 also allows third-party VPN clients to automatically trigger connections.|$|E
2500|$|In March 2010, Google {{software}} security engineer Will Drewry discussed Chrome OS security. Drewry described Chrome OS as a [...] "hardened" [...] operating system featuring auto-updating and sandbox features that will reduce malware exposure. He said that Chrome OS netbooks will be shipped with <b>Trusted</b> <b>Platform</b> <b>Module</b> (TPM), and include both a [...] "trusted bootpath" [...] and a physical switch under the battery compartment that actuates a developer mode. That mode drops some specialized security functions but increases developer flexibility. Drewry also {{emphasized that the}} open source nature of the operating system will contribute greatly to its security by allowing constant developer feedback.|$|E
50|$|While {{hardware}} may be {{a source}} of insecurity, such as with microchip vulnerabilities maliciously introduced during the manufacturing process, hardware-based or assisted computer security also offers an alternative to software-only computer security. Using devices and methods such as dongles, <b>trusted</b> <b>platform</b> <b>modules,</b> intrusion-aware cases, drive locks, disabling USB ports, and mobile-enabled access may be considered more secure due to the physical access (or sophisticated backdoor access) required in order to be compromised. Each of these is covered in more detail below.|$|R
40|$|Abstract—We define secure {{operations}} with tree-formed, pro-tected verification data registers. Functionality is conceptually added to <b>Trusted</b> <b>Platform</b> <b>Modules</b> (TPMs) to handle Platform Configuration Registers (PCRs) which represent roots of hash trees protecting {{the integrity of}} tree-formed Stored Measurement Logs (SMLs). This enables verification and update of an inner node of an SML and even attestation to its value with the same security level as for ordinary PCRs. As an important application, it is shown how certification of SML subtrees enables attestation of platform properties. I...|$|R
40|$|<b>Trusted</b> <b>platform</b> <b>modules</b> (TPMs) {{can provide}} a variety of {{security}} functionalities. However, the TPM specification is highly complex and the deployment of TPM-based solutions is a difficult and delicate task. In this paper we propose the use of security patterns to specify TPM-based security solutions. The refined notion of security patterns developed in the SERENITY research project allows us to produce precise specifications of TPM-based solutions for particular security goals. This approach makes TPM technology available to system engineers without in-depth knowledge of trusted computing specifications...|$|R
2500|$|In May 2004, Microsoft {{changed its}} plans to include the Next-Generation Secure Computing Base {{technology}} with Longhorn. The technology, better known by its original code-name of [...] "Palladium", had garnered much criticism from analysts, security specialists and researchers, and was often cited by advocates of non-Microsoft operating systems {{as a reason to}} migrate to their preferred platform. Ross Anderson, for example, published a paper, collating many of these concerns and criticisms {{as part of a larger}} analysis on Trusted Computing. In light of a large amount of negative response not only from analysts, but enterprise customers and software developers, Microsoft shelved many aspects of the NGSCB project for an indefinite period of time. The only aspect of NGSCB that was included with the final release of the operating system is [...] "BitLocker", which can make use of a <b>Trusted</b> <b>Platform</b> <b>Module</b> chip to facilitate secure startup and full-drive encryption.|$|E
2500|$|Service Pack 1 Beta {{was only}} {{released}} on Microsoft Connect to selected testers on September 24, 2007. This build was offered optionally through Windows Update through a registry key installed by the tester. This key was later {{leaked to the}} net resulting in its deactivation by Microsoft. With this release the build number for Vista jumped to 6001.16659.070916-1443. This build also removed the Group Policy Management Console (GPMC) from client computers, {{to be replaced by}} a downloadable version at a later date. Also removed was the [...] "Search" [...] menu option from the right hand bar of the start menu (including the option to re-add it from the Start Menu customization list). This build broke the [...] "HP Touch smart" [...] family of applications, and also caused bugs with resuming from sleep, and in some cases rendered some 64-bit PCs with <b>Trusted</b> <b>Platform</b> <b>Module</b> (TPM) chips unable to finish booting. This build also contained unspecified improvements in Speed and responsiveness of the OS.|$|E
5000|$|... #Subtitle level 2: Disk {{encryption}} and <b>Trusted</b> <b>Platform</b> <b>Module</b> ...|$|E
40|$|Abstract: One of {{the most}} {{important}} use-cases of Trusted Computing is Remote Attestation. It allows platforms to get a trustworthy proof of the loaded software and current configuration of certain remote platforms, thereby enabling them to make decisions about the remote platforms’ trust status. Common concepts like Internet Protocol security or Transport Layer Security make these decisions based on shared secrets or certificates issued by third parties. Unlike remote at-testation, these concepts do not take the current configuration or currently loaded software of the platforms into account. Consequently, combining remote attestation and existing secure channel concepts can solve the long lasting problem of secure channels that have to rely on insecure chan-nel endpoints. Although this gap can now be closed by Trusted Computing, one important prob-lem remains unsolved: A platform’s configuration changes every time new software is loaded. Consequently, a reliable and in-time method to provide a proof for this configuration change-especially on multiprocess machines- is required to signal the platforms involved in the com-munication that a configuration change of the respectively other platform has taken place. Our research results show that a simple reporting mechanism can be integrated into current <b>Trusted</b> <b>Platform</b> <b>Modules</b> and Transport Layer Security implementations with a few additional <b>Trusted</b> <b>Platform</b> <b>Modules</b> commands and a few extensions to the TLS protocol...|$|R
30|$|Krautheim[12] {{proposes to}} achieve cloud {{security}} through {{the introduction of}} <b>Trusted</b> <b>Platform</b> <b>Modules</b> (TPM) in all datacenter equipment. It is not clear, however, how the user could verify that a TPM is indeed present in any given cloud infrastructure. You might argue that the cloud provider could assert, and have an auditor confirm that they are using a TPM, but this is really not much better than today’s situation where providers are asserting that they will treat your data properly, and all their certifications {{is a testament to}} them staying true to their words.|$|R
40|$|We define secure {{operations}} with tree-formed, protected verification data registers. Functionality is conceptually added to <b>Trusted</b> <b>Platform</b> <b>Modules</b> (TPMs) to handle Platform Configuration Registers (PCRs) which represent roots of hash trees protecting {{the integrity of}} tree-formed Stored Measurement Logs (SMLs). This enables verification and update of an inner node of an SML and even attestation to its value with the same security level as for ordinary PCRs. As an important application, it is shown how certification of SML subtrees enables attestation of platform properties. Comment: 9 pages, 1 figur...|$|R
5000|$|Storage of {{cryptographic}} {{keys in the}} system's <b>Trusted</b> <b>Platform</b> <b>Module</b> (TPM) ...|$|E
50|$|TCG's {{original}} {{goal was}} {{the development of}} a <b>Trusted</b> <b>Platform</b> <b>Module</b> (TPM), a semiconductor intellectual property core or integrated circuit that conforms to the <b>trusted</b> <b>platform</b> <b>module</b> specification put forward by the Trusted Computing Group and which is to be included with computers to enable trusted computing features. TCG-compliant functionality has since been integrated directly into certain mass-market chipsets.|$|E
5000|$|... #Caption: <b>Trusted</b> <b>Platform</b> <b>Module</b> {{installed}} on a motherboard, {{and using the}} LPC bus ...|$|E
40|$|Abstract: The large {{variety of}} {{security}} mechanisms available for wireless devices {{makes it difficult}} to identify the combination that is most cost-effective, secure, and accessible for doctors and patients to use. Our project investigates the various security mechanisms such as biometric scanners, data encryption and mobile <b>Trusted</b> <b>Platform</b> <b>Modules.</b> We will study the advantages/disadvantages of each mechanism and perform trade-off analysis respective to cost, feasibility, energy consumption and satisfying the doctor-patient needs. Table of Contents Problem Statement [...] . 3 Why is enhancing wireless security necessary? [...] 3 Who are the project stakeholders? [...] ...|$|R
30|$|Once {{a set of}} {{properties}} for slice is determined, proper technologies should be selected. There {{is a need to}} perform analysis of available slicing enabling technologies and then to determine potential security risks connected with each of the technology. Based on this risk analysis, there should be proposed countermeasures to minimize the risk. Technology can relate with protocols (e.g., OpenFlow as SDN protocol, routing protocols, cryptographic protocols), architecture paradigm (e.g., software-defined networking), implementations (e.g., SDN controller implementations, devices’ firmware, operating systems) and hardware (e.g., used processors, <b>Trusted</b> <b>Platform</b> <b>Modules,</b> smart cards, USIM chips— Universal Subscriber Identity Module chips).|$|R
40|$|Usage {{controls}} {{allow the}} distributor of some information to limit how recipients {{of that information}} may use it. The Trusted Computing Group has standardized <b>Trusted</b> <b>Platform</b> <b>Modules</b> (TPMs) that are built into {{an increasing number of}} computers and could greatly harden usage controls against circumvention. However, existing operating systems support TPMs only partially. We describe UCLinux, a novel Linux Security Module that, unlike previous work, supports TPM-based attestation, sealing, and usage controls on existing processors and with minimal modifications in the operating system kernel and applications. Experiments show that UCLinux has modest impact on the system’s boot latency and run-time performance...|$|R
5000|$|... #Caption: Components of a <b>Trusted</b> <b>Platform</b> <b>Module</b> {{complying}} with the TPM version 1.2 standard ...|$|E
50|$|A <b>Trusted</b> <b>Platform</b> <b>Module</b> {{contains}} an embedded controller that performs cryptographic functions and nothing else.|$|E
5000|$|TPM1.2 (<b>Trusted</b> <b>Platform</b> <b>Module</b> from Infineon Technologies or Nuvoton) {{used for}} the theft control feature.|$|E
40|$|Security {{enforcement}} in {{wireless sensor networks}} {{is by no means}} an easy task, due to the inherent resource-constrained nature of sensor nodes. To facilitate security enforcement, we propose to incorporate more powerful high-end Security Enforcement Facilitators (SEFs) into wireless sensor networks. In particular, the SEFs are equipped with TCG-compliant <b>Trusted</b> <b>Platform</b> <b>Modules</b> (TPMs) to protect cryptographic secrets, perform authenticated booting and attest their platform state to a remote base station. As such, the SEFs act as online trusted third parties to effectively monitor the states of sensor nodes, help in key management, simplify secure routing, and facilitate access control. ...|$|R
40|$|In cloud {{networking}} users {{may want}} to control where their virtual resources are stored or processed, e. g., only in western Europe {{and not in the}} US. Cloud networking is the combined management of cloud computing and network infrastructures of different providers and enables dynamic and flexible placement of virtual resources in this distributed environment. In this paper, we propose a mechanism for verifying the geographic location of a virtual resource. Our approach uses <b>Trusted</b> <b>Platform</b> <b>Modules</b> (TPM) to identify physical machines and a trusted authority which verifies the actual location. In addition, our approach enables the verification of the trustworthiness of the machine of the cloud operator...|$|R
40|$|This paper {{presents}} a simulation toolset for estimating {{the impact of}} <b>Trusted</b> <b>Platform</b> <b>Modules</b> (TPMs) {{on the performance of}} applications that use TPM services, especially in multi-core environments. The proposed toolset, consisting of an integrated CPU/TPM simulator and a set of microbenchmarks that exercise the major TPM services, can be used to analyze and optimize the performance of TPM-based systems and the TPM itself. In this paper, we consider two such optimizations: (1) exploiting multiple TPMs; and (2) reordering requests within the software stack to minimize queueing delays. Our studies indicate that both techniques result in significant performance improvement, especially as the number of concurrent applications using the TPM increases. 1...|$|R
