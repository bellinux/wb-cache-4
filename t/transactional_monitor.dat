2|16|Public
50|$|The MBean {{represents}} a resource {{running in the}} Java virtual machine, such as an application or a Java EE technical service (<b>transactional</b> <b>monitor,</b> JDBC driver, etc.). They {{can be used for}} collecting statistics on concerns like performance, resources usage, or problems (pull); for getting and setting application configurations or properties (push/pull); and notifying events like faults or state changes (push).|$|E
40|$|Component-oriented {{middleware}} {{becomes the}} privileged substrate for distributed computing in heterogeneous and open environments. Technically they promote {{the notion of}} container as structure to host application components. They transparently take charge of a large set of technical or non-functional services like security or transactions. The transaction service is integrated using a set of transaction demarcation (TD) policies. Nevertheless, they are strongly linked to a specific <b>transactional</b> <b>monitor</b> {{and they are not}} often isolated. The main contribution {{of this paper is to}} propose a component-based framework to deal with TD policies. Thus, this framework allows one to instantiate several configurations of TD policies with different platforms like EJB, CCM, OSGi,WebServices and several transactional monitors like JTS, OTS, WS-T, BTP, etc. It proposes an extensible abstraction of TD policies. This framework shows that no performance degradation is introduced by the refactoring process...|$|E
40|$|Abstract. <b>Transactional</b> <b>monitors</b> are {{proposed}} {{as an alternative}} to monitors based on mutual-exclusion synchronization for object-oriented programming languages. <b>Transactional</b> <b>monitors</b> have execution semantics similar to mutualexclusion monitors but implement monitors as lightweight transactions that can be executed concurrently (or in parallel on multiprocessors). They alleviate many of the constraints that inhibit construction of transparently scalable and robust applications. We undertake a detailed study of alternative implementation schemes for <b>transactional</b> <b>monitors.</b> These different schemes are tailored to different concurrent access patterns, and permit a given application to use potentially different implementations in different contexts. We also examine the performance and scalability of these alternative approaches {{in the context of the}} Jikes Research Virtual Machine, a state-of-the-art Java implementation. We show that <b>transactional</b> <b>monitors</b> are competitive with mutualexclusion synchronization and can outperform lock-based approaches up to five times on a wide range of workloads. ...|$|R
40|$|<b>Transactional</b> <b>monitors</b> are {{proposed}} {{as an alternative}} to monitors based on mutualexclusion synchronization for object-oriented programming languages. <b>Transactional</b> <b>monitors</b> have execution semantics similar to mutual-exclusion monitors but implement monitors as lightweight transactions that can be executed concurrently (or in parallel on multiprocessors). They alleviate many of the constraints that inhibit construction of transparently scalable and robust applications. We undertak...|$|R
5000|$|Management of post <b>transactional</b> {{performance}} <b>monitoring</b> {{and evaluation}} ...|$|R
40|$|IONS FOR RELIABLE DISTRIBUTED COMPUTING Reliable {{distributed}} systems are challenging to build because programmers {{have to deal}} with many complex issues such as reliable communication, failure detection, replication, and consistency management. A reliable distributed environment is one that provides abstractions for hiding failures by ensuring continuous availability (liveness), and preventing failures from putting the application in a inconsistent state (safety). Two main paradigms for building reliable {{distributed systems}} have emerged over the last decades: the transaction paradigm [Bernstein et al. 1987] in databases, and the group paradigm [Birman and Van Renesse 1993] for client-server main memory applications. Although useful in the development of distributed systems, current reliable distributed environments such as group communication toolkits or <b>transactional</b> <b>monitors,</b> are hardly extensible or customizable for specific application needs. The limitations of those systems are ma [...] ...|$|R
40|$|Although {{useful in}} the {{development}} of distributed systems, current reliable distributed environments, such as group communication toolkits (e. g., Isis, Totem, Phoenix) or <b>transactional</b> <b>monitors</b> (e. g., Encina, Tuxedo), are hardly extensible or customisable for specific application needs. The limitations of those systems are mainly due to their underlying distributed protocols, which are usually designed and implemented in an ad hoc manner. This paper presents Bast, an object-oriented framework for building fault-tolerant distributed applications. We also show how Bast is used to implement distributed protocols, by providing centralised and distributed design patterns. In particular, we present how we built atomic commitment and atomic multicast protocols, which provide adequate support {{for a wide range of}} fault-tolerant distributed applications. We detail customisation facilities of Bast and discuss our design in the light of different alternatives. Finally, we present Bast implementations in Smalltalk and Java, and we point out some optimisation issues...|$|R
40|$|This paper proposes two {{approaches}} to managing concurrency in Java using a guarded region abstraction. Both approaches use revocation of such regions – {{the ability to}} undo their effects automatically and transparently. These new techniques alleviate many of the constraints that inhibit construction of transparently scalable and robust concurrent applications. The first solution, revocable monitors, augments existing mutual exclusion monitors {{with the ability to}} resolve priority inversion and deadlock dynamically, by reverting program execution to a consistent state when such situations are detected, while preserving Java semantics. The second technique, <b>transactional</b> <b>monitors,</b> extends the functionality of revocable monitors by implementing guarded regions as lightweight transactions that can be executed concurrently (or in parallel on multiprocessor platforms). The presentation includes discussion of design and implementation issues for both schemes, as well as a detailed performance study to compare their behavior with the traditional, state-of-the-art implementation of Java monitors based on mutual exclusion...|$|R
40|$|This paper {{describes}} Bast, an open object-oriented {{framework for}} building reliable distributed application and middleware. Specialised environments, such as group communication toolkits (e. g., Isis, Totem) or <b>transactional</b> <b>monitors</b> (e. g., Encina, Tuxedo), are hardly extensible or customisable for speci c needs, because their underlying protocols are hidden and implemented {{in an ad}} hoc manner. In contrast, Bast provides customisable distributed protocols as basic components for reliable distributed computing. In the Bast framework, a hierarchy of protocol objects is made available for subclassing to both application and middleware programmers. We illustrate this point by presenting how transactional and group-oriented software is build from abstract protocol objects, by rede ning callback operations. The resulting objects provide adequate support {{for a wide range}} of reliable distributed applications. We also detail protocol composition and tuning facilities of Bast. Here, we isolate distributed algorithms into separate objects, and we bind them to protocol objects via the Strategy pattern. We also present our implementations of Bast in Smalltalk and Java, discuss our design in the light of di erent alternatives, and point out some optimisation issues. ...|$|R
40|$|As {{more and}} more {{object-oriented}} <b>transactional</b> processing <b>monitors</b> are being developed, users in industries such as banking and telecommunications need systematic and critical evaluations of {{the strengths and weaknesses}} of these products. This paper presents the Middleware Evaluation Project (MEP) which aims to provide an impartial evaluation based on rigorously derived tests and benchmarks. The evaluation framework based on TPC’s benchmark C will firstly be presented followed by discussions on the set of evaluation criteria. Preliminary results on the OTM product OrbixOTM will also be given. 1...|$|R
40|$|Concurrency {{control in}} modern {{programming}} languages is typically managed using mechanisms based on mutual exclusion, such as mutexes or monitors. All such mechanisms share similar properties that make construction of scalable and robust applications a non-trivial task. Implementation of user-defined protocols synchronizing concurrent shared data accesses requires programmers to make careful use of mutual-exclusion locks {{in order to}} avoid safety-related problems, such as deadlock or priority inversion. On the other hand, providing a required level of safety may lead to oversynchronization and, as a result, negatively affect the level of achievable concurrency. ^ Transactions are a concurrency control mechanism developed in the context of database systems. Transactions offer a higher level of abstraction than mutual exclusion which simplifies implementation of synchronization protocols. Additionally, in order to increase concurrency, transactions relax restrictions on the interleavings allowed between concurrent data access operations, without compromising safety. ^ This dissertation presents a new approach to managing concurrency in programming languages, drawing its inspiration from optimistic transactions. This alternative way of looking at concurrency management issues is an attempt to improve the current state-of-the-art both in terms of performance and with respect to software engineering benefits. ^ Three different approaches are presented here: revocable monitors are an attempt to improve traditional mutual exclusion, safe futures propose a new way of thinking about concurrency in a context of imperative programming languages and, finally, <b>transactional</b> <b>monitors</b> try to reconcile transactions and mutual exclusion within a single concurrency abstraction. ...|$|R
50|$|Electronic {{invoicing}} (also called e-invoicing) {{is a form}} {{of electronic}} billing. E-invoicing methods are used by trading partners, such as customers and their suppliers, to present and <b>monitor</b> <b>transactional</b> documents between one another and ensure the terms of their trading agreements are being met. These documents include invoices, purchase orders, debit notes, credit notes, payment terms and instructions, and remittance slips.|$|R
40|$|Payments for {{watershed}} services (PWS) are {{schemes that}} use funds from water users (including governments) {{as an incentive}} for landholders to improve their land management practices. They are increasingly seen as a viable policy alternative to watershed management issues, and a means of addressing chronic problems such as declining water flows, deteriorating water quality and flooding. In some places, local governments, donor agencies and NGOs are actively trying to upscale and replicate PWS schemes across the area. While their apparent success and progress in launching new initiatives is encouraging, {{there is still much}} to be learned from formative experiences in this field, especially with regard to monitoring and evaluation. In this paper we discuss the monitoring and evaluation criteria behind compliance or <b>transactional</b> <b>monitoring,</b> which ensures that contracts are followed, and effectiveness conditionality, which looks at how schemes manage to achieve their environmental objectives regardless of the degree of compliance. Although the two are usually linked, a high degree of compliance does not necessarily ensure that a scheme is effective. This is because a poorly designed scheme may target the wrong land managers and land that is at least risk, meaning that payments do not generate the desired hydro-ecological or conservation benefits. As the levering capacity to demand payments for better watershed management increases, so does the need to understand the dynamics of such activities and demonstrate their impacts. While the growing interest in such schemes shows that participants believe in the principle of land management, evidence of their impact is needed to determine which initiatives genuinely add value and are worth pursuing. ...|$|R
40|$|Abstract: In {{this paper}} we compare various {{statistical}} {{method of estimation}} of missing data values. Missing data estimation {{is a part of}} data farming. Data Farming is a process to grow the data & provides a more comprehensive understanding of the possible outcomes, and offers the opportunity to discover outliers, surprises. Many times data mining task use existing data collected for various other purposes, such as daily <b>transactional</b> data, <b>monitoring</b> & control data. Sometimes, the data set might be missing some values, to estimate these missing values various statistical methods exist in the literature. In this paper a comparison among these methods is given with implementation & comparative results on the real life data set. This research work will be helpful to understand the effect of missing values on the mining process...|$|R
40|$|According to {{the modern}} theory of social capital (see Coleman (1990), Putnam (1993), Fukuyama (1995)), {{widespread}} trust would influence the economic performances of a country through a) reduction of <b>transactional</b> costs (<b>monitoring</b> and preventive activities {{to protect themselves from}} being exploited in economic transactions) and legal disputes; b) higher percentage of time devoted to innovation in new products or processes; c) higher reliability of formal institutions like the government and the central bank which implies that people can adopt more appropriate horizons in making investment decisions and choose production technologies that are optimal over the long, rather than short, run; d) a stronger social cohesion due to the sharing of ethical norms which induces cooperative behaviours and organisational innovations. On the basis of these theories a large number of empirical contributions which confirm the existence of a positive relation between growth, efficiency and the level of trust has been produced. Following the seminal work by Knack et al. (ibidem), we try to explain growth in Brazil over the period 2000 - 2003 using indicators of social capital. We develop our analysis at the most detailed geographical level, considering all 5507 municipalities. This choice is motivated by the great heterogeneity inside every country in terms of growth rate. While we observe homogeneity in some countries, like Sergipe, in other countries, like Sao Paulo, we have huge differences. This forces us to consider the municipalities as unit of observation; otherwise the country level would force us to loose all the heterogeneity. In order to obtain good measures of social capital, we start from a set of objective measure, and then analyse then with factor component analysis. We find a robust evidence of the positive effect of social capital on growth rates of income per capita. DYNREG 15...|$|R
40|$|This paper applies Intel R © Transactional Synchronization Exten-sions (Intel R © TSX) to elide JavaTM monitor locks. By {{utilizing}} the transactional execution capability inside a Java Virtual Machine (JVM), applications running {{on top of}} the JVM transparently ben-efit without source or bytecode modifications. While others have previously examined transactional execution of Java programs, we find that the absence of a guarantee on even-tual transactional commit requires a software fallback, and present a novel design where the fallback code harmoniously coexists with the JVM locking mechanism. We also find that if not used judi-ciously, a real implementation of hardware transactional memory can significantly degrade application performance. Therefore, we propose an adaptive algorithm that selectively deoptimizes transac-tional lock elision where necessary. Evaluation of the Intel TSX-enabled JVM with various Java workloads shows promising results. For workloads that utilize a significant number of coarse-grained <b>monitors,</b> <b>transactional</b> lock elision provides a substantial performance improvement: up to 1. 18 x on a standard Java benchmark suite. In contrast, on work-loads with monitor locks that are hard to elide, our adaptive deop-timization approach prevents significant performance degradation from lock elision overheads. 1...|$|R
40|$|Influenced by the recent, ongoing {{financial}} crisis spreading {{across the world}} 2 ̆ 7 s economies, my dissertation studies aspects of the connections between securitization – originating and selling loans – in the banking sector and economic instability. In the first chapter, “Bank Monitoring and Liquidity in the Secondary Market for Loans”, I study transactional loans and traditional–relationship loans in a dynamic lending model. In the model, since transactional loans are easier to resell, a bank 2 ̆ 7 s benefit from transactional lending over relationship lending is increasing in secondary market loan liquidity (investors 2 ̆ 7 willingness to pay). The relative payoff is also increasing {{in the proportion of}} banks that choose transactional lending because lower quality borrowers prefer <b>transactional</b> lenders, who <b>monitor</b> them less. When liquidity rises above a given threshold, all banks switch to transactional lending. However, greater liquidity also increases the economy–wide default risk since banks reduce their monitoring effort. If the latter effect is strong enough, securitization can lower welfare. The previous study suggests that the problems in securitization may come from information asymmetry in both the primary and secondary loan markets. My second chapter, “Securitization and Lending Competition” (with David Frankel), studies the effects of securitization on interbank lending competition when banks see private signals of local applicants 2 ̆ 7 repayment chances. We find that if banks cannot securitize, the outcome is efficient: they lend to their most creditworthy local applicants. With securitization, banks lend also to remote applicants with strong observables in order to lessen the lemons problem they face in selling their securities. This reliance on observables is inefficient and raises the conditional and unconditional default risk. Finally, Chapter 3, “Credit Termination and the Technology Bubbles”, studies the financial instability from a different angle. I consider a credit cycles model in which firms face technology shocks to the riskiness of different types of projects. The new project arriving is more attractive to the firms but even riskier. The riskiness of the new project is not observed by banks as occurred during the technology bubbles. After observing a higher default rate, banks deny future loans to entrepreneurs more often in order to affect their choice of projects ex ante. The model is used to explain the boom–and–bust of the dot–com bubble in the late 1990 s...|$|R

