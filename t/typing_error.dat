109|9640|Public
5|$|Newspaper {{headlines}} in most World Cup nations trumpeted the shocking upset, except ironically in the United States and England. There {{was only one}} American journalist at the World Cup: Dent McSkimming of the St. Louis Post-Dispatch; he could not persuade the newspaper {{to pay for the}} trip, and had taken time off work to cover the event. His report of the match was the only one to appear in any major American newspaper. In England, newspapers at the time were generally small, and only had a single page devoted to sports. Because the English cricket team happened to suffer their first-ever defeat by the West Indies the very same day, that was the major story in most publications. Legend has it that in publications that did report the World Cup match, so unexpected was the result that it was presumed that the 1–0 scoreline was a <b>typing</b> <b>error</b> and so it was reported that England had won on a scoreline of 10–0 or 10–1. However, historical newspapers online at The British Newspaper Archive show that the story is a myth.|$|E
25|$|Following the {{completion}} of the series, the official Pop Idol companion book published percentages of votes for each contestant every week. In some circumstances, the book suggested that the bottom 2 or 3 contestants were not the same as announced by the show hosts. It is not known if the incorrect result was announced, or if the book merely made a <b>typing</b> <b>error.</b> However, the contestant deemed to have had the lowest percentage was always eliminated on that week, meaning the overall result of the show was not changed.|$|E
2500|$|The {{first two}} columns of keys are: e, t, a, o, i, n; and s, h, r, d, l, u. A Linotype {{operator}} would often {{deal with a}} <b>typing</b> <b>error</b> by running the fingers down these two rows, thus filling out the line with the nonsense words etaoin shrdlu. This {{is known as a}} [...] "run down". It is often quicker to cast a bad slug than to hand-correct the line within the assembler. The slug with the run down is removed once it has been cast, or by the proofreader.|$|E
40|$|AbstractPrevious {{methods have}} {{generally}} identified {{the location of}} a <b>type</b> <b>error</b> as a particular program point or the program subtree rooted at that point. We present a new approach that identifies {{the location of a}} <b>type</b> <b>error</b> as a set of program points (a slice) all of which are necessary for the <b>type</b> <b>error.</b> We identify the criteria of completeness and minimality for <b>type</b> <b>error</b> slices. We discuss the advantages of complete and minimal <b>type</b> <b>error</b> slices over previous methods of presenting <b>type</b> <b>errors.</b> We present and prove the correctness of algorithms for finding complete and minimal <b>type</b> <b>error</b> slices for implicitly typed higher-order languages like Standard ML...|$|R
40|$|SML (a higher-order function-oriented {{imperative}} programming language) {{depends on}} automated inference of sophisticated type information. Existing implementations have confusing <b>type</b> <b>error</b> messages. <b>Type</b> <b>error</b> slicing gives the programmer more helpful <b>type</b> <b>error</b> information: (1) It identifies all program points {{that contribute to}} a <b>type</b> <b>error</b> rather than blaming just one point. (2) It exhibits {{a slice of the}} original program’s syntax instead of showing an internal representation of some program subtree which may have been substantially transformed. (3) It avoids showing internal details of inferred types which were not written by the programmer. A <b>type</b> <b>error</b> slice contains all information needed to understand the error, and avoids irrelevant information. Similar to other previous work for better handling of <b>type</b> <b>errors,</b> <b>type</b> <b>error</b> slicing was initially developed for a very tiny to...|$|R
40|$|Previous {{methods have}} {{generally}} identified {{the location of}} a <b>type</b> <b>error</b> as a particular program point or the program subtree rooted at that point. We present a new approach that identifies {{the location of a}} <b>type</b> <b>error</b> as a set of program points (a slice) all of which are necessary for the <b>type</b> <b>error.</b> We describe algorithms for finding minimal <b>type</b> <b>error</b> slices for implicitly typed higher-order languages like Standard ML...|$|R
2500|$|Poirot's secretary, Miss Felicity Lemon, has few human weaknesses. The only {{mistakes}} {{she makes}} within the series are a <b>typing</b> <b>error</b> during {{the events of}} Hickory Dickory Dock and the mis-mailing of an electricity bill, although {{she was worried about}} strange events surrounding her sister at the time. Poirot described her as being [...] "Unbelievably ugly and incredibly efficient. Anything that she mentioned as worth consideration usually was worth consideration." [...] She is an expert on nearly everything and plans to create the perfect filing system. She also worked for the government statistician-turned-philanthropist Parker Pyne. Whether this was during one of Poirot’s numerous retirements or before she entered his employ is unknown. In The Agatha Christie Hour, she was portrayed by British actress Angela Easterling, while in Agatha Christie's Poirot she was portrayed by Pauline Moran. A marked difference from the text exists in Moran's portrayal, where she is an attractive, fashionable, and emotional woman showing an occasional soft corner for Poirot. She also appears far more often in the TV series, making an appearance in most episodes and often being a bigger part of the plot. On a number of occasions, she joins Poirot in his inquiries or seeks out answers alone at his request.|$|E
2500|$|As with {{previous}} titles, the team used traditional Japanese horror as an aesthetic starting point, {{with the main}} purpose being {{to make it as}} frightening for players as possible. In aid of this, the flashback videos and the core concepts of rescuing people from supernatural hot spots was brought in, although several proposed elements related to this ended up being cut. The main cast went through revisions, although a male character was decided upon early on. Yuuri was created relatively quickly, but the team had trouble deciding who the third character would be. An initial idea of having Miku Hinasaki as a playable character was dropped as her story arc had been resolved in earlier games. Instead, the character of Miu was created, with Kikuchi initially thinking her name was a <b>typing</b> <b>error</b> with Miku's name before reading the full story draft. Ren was initially going to record events on the mountain to offer a different perspective. The relationship between Ren and his assistant Rui Kagamiya was modeled after that between the character Kogoro Akechi and his live-in assistant Yoshio Kobayashi. The female characters' clothing was designed to make them look [...] "sexy" [...] when it got wet. The story and characters combined elements from four previous proposals for games in the series. Maiden of Black Water features the largest number of storylines up to that point, but due to the amount of narrative he wanted to include, Shibata ended up neglecting other elements such as Mount Hikami's history of suicides. The mountain setting was also taken from one of these scrapped storylines. Mount Hikami was originally suggested by Nintendo, and was based around multiple real locations in Japan, including Mount Osore and the Tōjinbō sea cliffs. The theme of suicide on the mountain was inspired by Aokigahara, a forest located on Mount Fuji notorious as a suicide site.|$|E
5000|$|In 1999, {{the band}} entered two songs (this {{is not a}} <b>typing</b> <b>error)</b> ...|$|E
40|$|The <b>type</b> <b>error</b> {{message of}} a {{standard}} type checker for a functional language gives only a single location as potential cause of the <b>type</b> <b>error.</b> If that location is not the cause, which often is the case, then the <b>type</b> <b>error</b> message hardly helps in locating the real cause. Here we present a method that uses a standard type checker to enumerate locations that potentially cause the <b>type</b> <b>error,</b> each with an actual and a counter-factual type for the given location. Adding our method to existing compilers requires only limited effort but improves <b>type</b> <b>error</b> debugging substantially...|$|R
40|$|Abstract. Previous {{methods have}} {{generally}} identified {{the location of}} a <b>type</b> <b>error</b> as a particular program point or the program subtree rooted at that point. We present a new approach that identifies {{the location of a}} <b>type</b> <b>error</b> as a set of program points (a slice) all of which are necessary for the <b>type</b> <b>error.</b> We describe algorithms for finding minimal <b>type</b> <b>error</b> slices for implicitly typed higher-order languages like Standard ML...|$|R
40|$|AbstractCompilers for {{languages}} {{with type}} inference algorithms produce confusing <b>type</b> <b>error</b> messages {{and give a}} single error location which is often {{far away from the}} real location of the <b>type</b> <b>error.</b> Attempts at solving this problem 1) fail to include the multiple program points which make up the <b>type</b> <b>error,</b> 2) often report tree fragments which do not correspond to any place in the user program, and 3) give incorrect type information/diagnosis which can be highly confusing. We present Skalpel, a <b>type</b> <b>error</b> slicing tool which solves these problems by giving the programmer all and only the information involved with a <b>type</b> <b>error</b> to significantly aid in diagnosis and repair of <b>type</b> <b>errors.</b> Skalpel consists of a sophisticated new constraint generator which is linear in size and a new constraint solver which is terminating...|$|R
50|$|Sterling was {{originally}} ordered {{with the name}} Stirling, apparently due to a <b>typing</b> <b>error.</b>|$|E
5000|$|... #Caption: Comparison of {{hatching}} systems, {{published by}} Oszkár Bárczay in Budapest, 1897 (n.b.:'Pegoing' is a <b>typing</b> <b>error</b> for 'Segoing'.) ...|$|E
50|$|Important note: The value 3.4 in the {{equation}} for ξ {{is different from the}} value 3.24 in the original publication. The 3.24 has been verified to be a <b>typing</b> <b>error.</b>|$|E
40|$|<b>Type</b> <b>error</b> reports provide programmers with a {{description}} of <b>type</b> <b>errors</b> which exist in their code. Such descriptions are frequently of poor quality, as they often present just one point in the program, rather than all locations in the code which contribute to that <b>type</b> <b>error.</b> Skalpel is a <b>type</b> <b>error</b> report system for the Standard ML language which tackles this problem, by presenting all and only the locations in the program which contribute to the <b>type</b> <b>error.</b> While the original Skalpel gives substantially better error reports than comparable systems, it has a number of limitations such as a lack of support for language features and poor efficiency. In this research we have made a number of contributions, including a full critique of both the Skalpel core theoretical system and its extensions, support for the remaining features of Standard ML, an analysis and improvements to the efficiency, and an investigation {{for the first time on}} Skalpel’s theoretical properties...|$|R
30|$|Considering an α <b>type</b> <b>error</b> of 0.05, a β <b>type</b> <b>error</b> of 0.10 and a {{difference}} of SR changes between arms of 10 % of the primary endpoint (SR change) as clinically meaningful, 50 patients should have been enrolled in each arm.|$|R
30|$|According to the {{empirical}} results (Tables  6, 7, 8), the prediction {{accuracy of the}} LASSO–NN model is 88.96  % (<b>Type</b> I <b>error</b> rate is 12.22  %; <b>Type</b> II <b>error</b> rate is 7.50  %), the prediction accuracy of the LASSO–CART model is 88.75  % (<b>Type</b> I <b>error</b> rate is 13.61  %; <b>Type</b> II <b>error</b> rate is 14.17  %), and the prediction accuracy of the LASSO–SVM model is 89.79  % (<b>Type</b> I <b>error</b> rate is 10.00  %; <b>Type</b> II <b>error</b> rate is 15.83  %). Our comparison follows that of Kirkos et al. (2007 a, b), Tasi and Huang (2010) and Chen et al. (2014). We not only focus on the hit ratio of the models, but also consider the <b>Type</b> I <b>error</b> and <b>Type</b> II <b>error</b> rates.|$|R
50|$|Haji Rahimni bin Haji Pundut (born 5 January 1987) is a Bruneian footballer {{who plays}} for Setia Perdana FC in the Brunei Premier League as a striker. Due to a <b>typing</b> <b>error,</b> his patronym is mistakenly {{referred}} to as Pundat.|$|E
5000|$|According to Belgarath, {{the name}} of the Rivan prince who survived the {{assassination}} of the royal family was Geran, whereas in Castle of Wizardry, the name was Gareth. It has been acknowledged that this is a <b>typing</b> <b>error</b> in [...] "Castle of Wizardry".|$|E
5000|$|In Germany, Johnny Logan {{released}} a German-language version of [...] "What's Another Year", entitled [...] "Was ist schon ein Jahr". In Portugal the single was released (in English) {{with a minor}} <b>typing</b> <b>error</b> on the front sleeve as [...] "What's Another Year!" ...|$|E
40|$|Polymorphic type {{checking}} algorithm efficiently locate <b>type</b> <b>errors</b> in programs, but users find error {{reporting from}} such algorithms hard to comprehend. We {{are investigating the}} development of a new polymorphic type checker that reports <b>type</b> <b>errors</b> in a more understandable form. Here we present the results of an experiment into human checking of incorrectly-typed polymorphic programs. We hope to identify the sequences of techniques people use to explain different categories of error. An outline of a <b>type</b> <b>error</b> explanation system incorporating our heuristics is given...|$|R
40|$|We have {{constructed}} {{an explanation}} system for polymorphic types, motivated by analysis of human type explanations. Qualitative and quantitative comparison of human expert and our computer generated explanations of polymorphic <b>type</b> <b>errors</b> {{suggests that they}} are very similar. Keywords Polymorphic types; <b>type</b> <b>error</b> explanation; mechanical explanation. 1...|$|R
30|$|<b>Type</b> I <b>errors</b> may {{not have}} serious {{consequences}} when compared to <b>Type</b> II <b>errors.</b> If the auditor wrongly classifies a GC firm as healthy, then he/she can be sued. If an auditor issues a wrong audit report due to his/her misjudgment, then this will affect not only the enterprise and stakeholders, but also many investors. Moreover, the CPA may be sued. The costs for <b>Type</b> II <b>errors</b> are thus rather severe. We have developed three GCD prediction models. In the LASSO–NN model, the <b>Type</b> I <b>error</b> rate is 12.22  % and the <b>Type</b> II <b>error</b> rate is 7.50  %; in the LASSO–CART model, the <b>Type</b> I <b>error</b> rate is 13.61  % and the <b>Type</b> II <b>error</b> rate is 14.17  %; and in the LASSO–SVM model, the <b>Type</b> I <b>error</b> rate is 10.00  % and the <b>Type</b> II <b>error</b> rate is 15.83  %. These error rates are all lower than 20  %, especially in the LASSO–NN model where the <b>Type</b> II <b>error</b> rate is only 7.50  %. This is a key contribution of this paper.|$|R
5000|$|Kayes autobiography, René and Me: An Autobiography (co-written with Hilary Bonner), was {{published}} in 1989. In the book, he described his experiences as a shy, gay, overweight, typecast youth. The unusual spelling of his name (usually spelt [...] "Gordon") {{was the result of}} a British Actors Equity Association <b>typing</b> <b>error.</b>|$|E
50|$|The {{conventional}} Japanese {{keyboard layout}} {{is considered by}} some to be unsuitable for Japanese input. In the JIS kana system, as has been mentioned earlier, some characters are placed far up in the numbers row, making the possibility of <b>typing</b> <b>error</b> higher. The input of numbers is also a problem because some characters share the key positions with numbers.|$|E
50|$|With {{the end of}} the São Paulo State Championship of 2013, he {{returned}} to Palmeiras, where he earned a position in the starting eleven after taking it out of Ayrton. A bureaucratic problem when he renewed his contract in October 2013, which was supposed to end in 2014, but because of a <b>typing</b> <b>error,</b> ended in 2013, caused Luís Filipe to be sidelined.|$|E
40|$|Typically a <b>type</b> <b>error</b> is {{reported}} when unication fails, {{even though the}} programmer 's actual error may have occurred much earlier in the program. The W and M inference algorithms report the site where a type conict is detected. The error message is isolated information: {{it is not clear}} from the error information the relationship between the site and {{the context in which the}} subexpression was typed. As a result, the error message may give little help to locate the source of the error. This report investigates better methods of explaining type conicts. We are trying to nd a method that may be eective even when the user has little knowledge about type checking. We have implemented an improved <b>type</b> <b>error</b> explanation system and have proposed and implemented a hybrid algorithm. 1 Introduction It is known that the place where a <b>type</b> <b>error</b> was detected may not be the place where the <b>type</b> <b>error</b> actually originated. The source of a <b>type</b> <b>error</b> may be far from where it is detected. This is b [...] ...|$|R
40|$|Producing {{precise and}} helpful <b>error</b> {{messages}} for <b>type</b> inference {{is still a}} challenge for implementations of functional languages. Current approaches often lack precision in terms of locating the origins of <b>type</b> <b>errors.</b> Moreover, suggestions for how to fix <b>type</b> <b>errors</b> that are offered by some tools are also often vague or incorrect. To address this problem we have developed {{a new approach to}} identifying <b>type</b> <b>errors</b> that is based on delaying typing decisions and systematically gathering context information to support the delayed decision making. Our technique, which we call lazy typing, is based on explicitly representing conflicting <b>types</b> and <b>type</b> <b>errors</b> in choice <b>types</b> that will be accumulated during the typing process. The structure of these types is then analyzed to produce error messages and, in many cases, also type-change suggestions. We will demonstrate that lazy typing is often more precise in locating <b>type</b> <b>errors</b> than existing tools and that it can also produce good type-change suggestions. We do not consider lazy typing as a replacement for other techniques, but rather as an addition that could help improve other approaches...|$|R
40|$|One of the {{features}} of functional languages, such as Haskell and SML, is that the data types of the variables and functions can be inferred from their usage. Unfortunately when an error occurs from this type inference, it may be difficult for a novice programmer to trace the error's source. We introduce two categories of <b>type</b> <b>errors.</b> Explicit <b>type</b> <b>errors</b> are caused by the user attempting to use incompatible types together. Attributed <b>type</b> <b>errors</b> are the result of editing or syntactical mistakes that are not detected until type checking occurs. The programmer requires differing forms of error messages to debug each category of <b>type</b> <b>error</b> more effectively. We present these display systems and determine that to implement them, the type of each sub-expression in the code must be inferred. This can be implemented using an algorithm given by Beaven and Stansifer...|$|R
50|$|This {{album was}} {{released}} in Europe with a yellow cover (with no lyrical translations and a contains a <b>typing</b> <b>error</b> on the track listing), and in the U.S. with a purple cover. The US version only contains the two remixes by Alec Empire, whereas European version features an extra remix by the Japanese electronic band Audio Active. both of these versions are out of print, and very hard to find.|$|E
5000|$|It {{has been}} {{observed}} that a TECO command sequence more closely resembles transmission line noise than readable text. One of the more entertaining games to play with TECO is to type your name in as a command line and try to guess what it does. Just about any possible <b>typing</b> <b>error</b> while talking with TECO will probably destroy your program, or even worse - introduce subtle and mysterious bugs in a once working subroutine.|$|E
5000|$|It is also {{possible}} that he was a composer, as sheet music by a composer called W. R. Cave was published early in the 20th century. The National Library of Australia identifies the composer as William Rendell Cave (spelling the middle name's second vowel as an [...] "e" [...] rather than [...] "a"). (Due to a <b>typing</b> <b>error</b> in this library entry, the reference to his death year is inconclusive (given as [...] "191").) ...|$|E
40|$|This paper {{describes}} an empirical study on <b>typing</b> <b>errors</b> made by children during a text copy exercise. The literature on text input errors is first examined, focussing on studies of errors that occur during keyboard typing. A study of errors made by children during typing is described {{and the results}} from this study are analysed using visual inspection and already published error categorisation methods. These methods are compared with respect to the types and number of errors categorised and uncategorised. We identify and define new kinds of <b>typing</b> <b>errors</b> and use these, together with previously defined <b>error</b> <b>types,</b> to outline an expanded and more detailed method (ExpECT) for the classification of <b>typing</b> <b>errors.</b> ExpECT is compared with the previously examined categorisation methods and is shown to be a more thorough and broader method for the analysis of <b>typing</b> <b>errors.</b> Categories and Subject Descriptors H. 5. 5 [Information Interfaces and Presentation (e. g., HCI) ]: User Interfaces- input devices and strategies, interaction styles, evaluation/methodology...|$|R
40|$|This paper {{presents}} {{a method that}} has enabled us to make a selection of <b>error</b> <b>types</b> and <b>error</b> production mechanisms relevant to the HUMAN European project, and discusses the reasons underlying those choices. We claim that this method has the advantage {{that it is very}} exhaustive in determining the relevant <b>error</b> <b>types</b> and <b>error</b> production mechanisms, and that the final objects are selected according to explicit requirements, without missing relevant <b>error</b> <b>types</b> and <b>error</b> production mechanisms...|$|R
40|$|Existing compilers {{for many}} {{languages}} have confusing <b>type</b> <b>error</b> messages. <b>Type</b> <b>error</b> slicing (TES) helps the programmer by isolating {{the part of}} a program contributing to a <b>type</b> <b>error,</b> but unfortunately TES was initially done for a tiny toy language. Extending TES to a full programming language is extremely challenging, and for SML we needed a number of innovations and generalisations. Some issues would be faced for any language, and some are SMLspecific but representative of the complexity of language-specific issues likely to be faced for other languages. We solve both kinds of issues and present a simple, general constraint system for providing <b>type</b> <b>error</b> slices for ill-typed programs. Our constraint system elegantly and efficiently handles features like the intricate open SML feature. We show how the simple clarity of <b>type</b> <b>error</b> slices can demystify language features known to confuse users. We also provide in an appendix a case study on how to use our TES to help modifying user data types, and extend the core language presented in the main body of this report to handle more of the implementation of our system. These extensions allow handling local declarations, type declarations and some uses of signatures. 1...|$|R
