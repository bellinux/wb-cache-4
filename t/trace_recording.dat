17|913|Public
5000|$|The Al <b>Trace</b> <b>recording</b> was {{released}} by Regent Records as catalog number 117. The record first reached the Billboard charts on June 18, 1948 and lasted 22 weeks on the chart, peaking at #1. A separate Al <b>Trace</b> <b>recording,</b> recorded 1946 for Sterling 3023, reached #21 in Billboards [...] "Most PlayedIn Juke Boxes" [...] survey in a 3-week chart run. Bob Vincent sang lead on both versions.|$|E
5000|$|Rusophycus is a trace fossil allied to Cruziana. [...] Rusophycus is the resting <b>trace,</b> <b>recording</b> {{the outline}} of the tracemaker; Cruziana is made when the {{organism}} moved. [...] Both are typically associated with trilobites but can also made by other arthropods.|$|E
50|$|Since {{the early}} 20th century, {{sufficient}} {{information has been}} available from seismometers to allow the location, depth and magnitude of earthquakes to be calculated. In terms of identifying the fault responsible for an earthquake {{where there is no}} clear surface <b>trace,</b> <b>recording</b> the locations of aftershocks generally gives a strong indication of the strike of the fault.|$|E
5000|$|... <b>trace,</b> <b>Recorded</b> by Thalia Myers on Spectrum NMC Recordings (NMC 0051) ...|$|R
5000|$|... #Caption: <b>Tracing</b> <b>record</b> {{office at}} the Home Postal Centre RE, Nottingham (1944) ...|$|R
5000|$|... #Caption: 48 Hour Bravo pH {{monitoring}} A {{sample of}} Bravo pH <b>tracing</b> <b>recorded</b> over 48 hours ...|$|R
50|$|Real-time {{operating}} systems (RTOS) often supports tracing of operating system events. A graphical view is presented {{by a host}} PC tool, based on a recording of the system behavior. The <b>trace</b> <b>recording</b> can be performed in software, by the RTOS, or by special tracing hardware. RTOS tracing allows developers to understand timing and performance issues of the software system and gives {{a good understanding of}} the high-level system behaviors. Commercial tools like RTXC Quadros or IAR Systems exists.|$|E
40|$|The ULTRA (UAH Logging, <b>Trace</b> <b>Recording,</b> and Analysis) {{instrumentation}} system provides an accurate and low-cost means of collecting traces of Message Passing Interface (MPI) program execution. These traces preserve the original parallel program's data-dependencies by recording each MPI operation performed; the message source, destination, and size; {{and the number}} of application instructions preceding the operation. Using these traces enables low-cost simulations for determining the performance of various node and communication hardware combinations although the cluster used to collect the data and the cluster being simulated differ significantly...|$|E
40|$|Abstract—Many {{years of}} {{research}} on dependable, faulttolerant software systems yielded a myriad of tool implementations for vulnerability analysis and experimental validation of resilience measures. <b>Trace</b> <b>recording</b> and fault injection are among the core functionalities these tools provide for hardware debuggers or system simulators, partially including some means to automate larger experiment campaigns. We argue that current fault-injection tools are too highly specialized for specific hardware devices or simulators, and are developed in poorly modularized implementations impeding evolution and maintenance. In this article, we present a novel design approach for a fault-injection infrastructure that allows experimenting researchers to switch simulator or hardware backends with little effort, fosters experiment code reuse, and retains {{a high level of}} maintainability. I...|$|E
30|$|However, using {{a single}} <b>trace</b> <b>record,</b> SVD leads to signal loss. Therefore, further {{research}} is needed to improve this issue.|$|R
5000|$|Received: when an SMTP server {{accepts a}} message it inserts this <b>trace</b> <b>record</b> {{at the top}} of the header (last to first).|$|R
5000|$|The dynamic {{information}} of the particles {{is derived from}} an autocorrelation of the intensity <b>trace</b> <b>recorded</b> during the experiment. The second order autocorrelation curve is generated from the intensity trace as follows: ...|$|R
40|$|The UAH Logging, <b>Trace</b> <b>Recording,</b> and Analysis {{instrumentation}} (ULTRA) provides highly repeatable (0. 0002 % variation) application instruction {{counts for}} parallel programs which are invariant to the communication network used, {{the number of}} processors used, and the MPI communication library used. ULTRA, implemented as an MPI profiling wrapper, avoids the data collection system artifacts of timebased measurements by using instruction counts as the basic measure of work performed and records the operation performed {{and the amount of}} data sent for each network operation. These measurements can be scaled appropriately for various target architectures. ULTRA's instrumentation overhead is minimized by using the Pentium II processors's performance monitoring hardware, allowing large, production-run applications to be quickly characterized...|$|E
40|$|Introduction Analysing and visualising the {{run-time}} behaviour of a distributed program requires collecting {{performance data}} during its execution. This is usually done through program instrumentation that inserts <b>trace</b> <b>recording</b> instructions into the program. The intrusiveness of inserted extra code {{to the original}} program may make the existing errors vanish, or can cause new errors to appear. It will not only change the real-time execution speed, but also change the probability of making particular non-deterministic choices. Cai and Turner proposed a logical clock approach (LCA) to control the inter-process communication [1]. It uses a logical clock in each process to reflect the real time execution of the process when running without monitoring. Not relying on any special hardware, this approach achieves minimum intrusiveness and makes the monitoring effect on the original program completely independent from {{the amount of time}} spent on monitoring activities. A main problem w...|$|E
40|$|This thesis {{deals with}} {{theoretical}} design and practical realization of map editing application. The first chapter {{is focused on}} theoretical explanation {{of the most important}} terms in GPS describing basic principles and position monitoring possibilities. Further is described block scheme of GPS receiver. Next chapter describes NMEA 0183 protocol which is used for data transfer between GPS module and application. At the end of theoretical part is some information about geodetic system WGS- 84 and files for <b>trace</b> <b>recording.</b> Application is creating in. NET Compact Framework in C# language. Application is able to load map in image format. Trace from specific file format can be displayed into map. Application can show currently recording trace too. Trace can be divided on segments according to type roads. Weak signal in record trace can be modified by correction methods. At the end of this thesis are instructions to using created application...|$|E
30|$|To {{show the}} results of our trace {{synchronization}} algorithm, we traced simultaneously a running virtual machine and its host. We then merged the <b>traces</b> <b>recorded</b> from both systems and used Trace Compass to view the result.|$|R
40|$|Branch {{predictors}} and processor front-ends {{have been}} the focus of a number of computer architecture studies. Typically they are evaluated separately from other components using trace-driven simulation based on instruction traces. To offer a faithful representation of processor's workload the traces are very large, and hence difficult to manage if kept in uncompressed form. In order to reduce simulation overhead due to the processing of non-branch instructions, we propose a new form of instruction trace, the Branch Instruction Trace (BIT), suitable for simulation of dynamic branch prediction mechanisms, fetch engines, and trace caches. A novel method for lossless trace compression, which can be applied to both ASCII and binary BIT traces, is also introduced. The proposed method relies on the <b>trace</b> <b>record</b> table (TRT) consisting of unique <b>trace</b> <b>records.</b> The <b>trace</b> size can be reduced by replacing each <b>trace</b> <b>record</b> by its ID in the TRT, since the number of unique <b>trace</b> <b>records</b> is much less than the trace length. We further extend this idea and replace an entire N-tuple of BIT records with its ID from the N-Tuple Record Table (N-TRT). The analysis shows that for a subset of SPEC CPU 2000 benchmarks 8 -tuple replacement yields significant compression ratio (40 for binary traces and 32 - 43 for ASCII traces), while keeping N-TRT size reasonable. When combined with the common compression tools such as gzip the compression ratio is 195 - 3888 for binary, and 306 - 4604 for ASCII traces, while gzipped-only traces achieve compression ratio 20201 for binary, and 20 - 216 for ASCII traces...|$|R
50|$|To {{qualify as}} Definitive Diagnostic Data {{it must be}} {{possible}} to correlate the data with a user's experience of a problem instance, {{and for that reason}} they will typically be time stamped event information. Log and <b>trace</b> <b>records</b> are common sources of Definitive Diagnostic Data.|$|R
40|$|So far, {{the search}} for Opportunistic Network (ON) {{applications}} has focused on urban/rural scenarios where the combined use of mobility and the store-carry-and-forward paradigm helpfully recovers from network partitions and copes with node sparsity. This paper explores the chance of using ONs in workplaces, where the node distribution is denser, thus contributing to reduce the message delivery latency, and where we still find similar needs for informal and unplanned network platforms to support human social relationships and interactions. Both a survey and <b>trace</b> <b>recording</b> experiments {{have been used to}} support the analysis of this mobility setting. The ability of recording very short contact times (i. e. lasting few seconds) allowed to interestingly show the slightly different role the social relationships play in dense scenarios and how the large amount of contacts (both short and long), occurring in densily populated spaces, actually contribute to reduce the message-delivery latency and to increase the delivery probability. ...|$|E
40|$|As one of {{the finest}} works of man, the artistic {{creation}} has always been a major source of interest for psychologists. Several authors now consider that this process can be understood as a transitional space that metaphorizes the primary maternal relationship, first object of desire, first inkling of Desire. They regard the maternal relationship as an envelope which will later on serve as a projective screen for enabling the emergence of artistic productions. The purpose of our presentation is to further explore the func-tions associated with the artistic productions of 7 professional painters, as well as to better define the relationship they have developed with their art work. The results are discussed {{in the context of the}} «Moi-peau» model developed by the French psychoanalyst, Didier Anzieu (1985), in terms of the following functions: maintenance, containment, protective-shield, individuation, consensuality, sexual stimulation support, libidinal reloading, and <b>trace</b> <b>recording.</b> Overall, they indicate that the process of artistic creation is intimately linked with the artist's ability to elaborate the following tensions: body vs. mind, archaism vs. representation, and sensoriality vs. mentalization. The artist is a «person» who articulates the psychic processes coming from the inkling of desire (maternal function), as much as those arising from of the Desire (paternal function). SCOPUS: ar. jinfo:eu-repo/semantics/publishe...|$|E
40|$|Abstract—Smartphones {{represent}} {{the most serious}} threat to user privacy of any widely-deployed computing technology because these devices are always on and always connected, making them the perfect candidate to know most about the owner. Unfortunately, existing permission models provide smartphone users with limited protection, {{in part due to}} the difficulty to users in distinguishing between legitimate and illegitimate use of their data; for example, a mapping app may upload the same location information it uses to download maps (legitimate) to a marketing agency interested in delivering location-based ads (illegitimate). As a result, smartphone users find themselves forced to make burdensome and error-prone tradeoffs between app functionality and privacy. To combat this, we propose a new approach called PocketMocker. By allowing substitution of real data streams with artificial or mocked data, PocketMocker allows users to manipulate impressions of their behavior in well-defined ways, such as appearing more fit, more social, or more on-time than they actually are. Instead of focusing on privacy, we explore providing users with better management of their smartphone-derived digital identities. We discuss the design of PocketMocker, which uses user-initiated context <b>trace</b> <b>recording</b> and replay to enable objective-driven context mocking. Our evaluation shows that users want to use PocketMocker, that PocketMocker can mock popular smartphone apps, and that PocketMocker is usable. I...|$|E
30|$|As Winne and Baker (2013) noted, “Self-regulated {{learning}} is a behavioral expression of metacognitively guided motivation.” Consequently, every <b>trace</b> <b>records</b> a motivated choice about how to learn. Analyzing trace data could better understand and discover meaningful behavioral patterns about rate of progress, effort spent, or time management.|$|R
40|$|Objectives—(a) To {{determine}} the force-time trace {{that occurs when}} a spring mounted simulated upper jaw is impacted; (b) to examine if mouthguards of variable quality have significant influence on such force-time traces; (c) to attempt to relate physical events to {{the profile of the}} force-time <b>traces</b> <b>recorded...</b>|$|R
30|$|The {{tracing system}} {{provides}} detailed {{information at the}} session level for the UE. This information is contained in events which include measurements reported by the UE and signaling messages exchanged between the network elements. There are two different approaches for recording this information: UE traces and cell traces. The UE <b>traces</b> <b>record</b> events from those UEs which have been selected by the operator. This allows operators to monitor a certain user {{if it is not}} getting the appropriate QoS. The cell <b>traces</b> <b>record</b> information from all UEs or a subset of UEs (provided some filters) in a selected cell. This approach can be used by operators for network optimization and troubleshooting purposes, since it provides larger datasets of per-user level statistics than UE traces. For this reason, cell traces have been used in this work.|$|R
40|$|This article {{discusses}} {{issues and}} solutions regarding traceability for Systems Engineering projects. A review of industrial Systems Engineering practice is presented based on observations and {{studies that have}} been carried out at different original equipment manufacturers (OEMs). The studies reveal challenges in communication, data-transparency and data-consistency resulting among others from diverse and inhomogeneous toolsets. Existing traceability solutions, which are one possibility to address these challenges, struggle to achieve satisfactory cost/benefit ratios. Thus, further improvements of existing approaches with new concepts and ideas are required. The article presents a morphological schema for traceability approaches. Its aim is to support attribute recombination to new research solutions and to overcome existing problems with naming conventions. The application of the schema is shown at the example of two novel approaches from Fraunhofer IPK and Daimler AG which are focusing on issues in trace link recording within Systems Engineering projects. The implementation, evaluation and functional comparison for both approaches are presented based on an exemplary automotive system. First results show a significant reduction of required <b>trace</b> <b>recording</b> efforts and good acceptance from engineers in the automotive industry. The developed schema and the two approaches contribute to the establishment of traceability for process improvement in future Systems Engineering projects...|$|E
40|$|Context: The bright, compact {{ultraviolet}} {{sources that}} appear in flare ribbons are interpreted as sites of energisation of the chromosphere, most likely by electron beams from the corona. Previously we have developed an algorithm to track these compact sources in observations by the Transition Region and Coronal Explorer (<b>TRACE),</b> <b>recording</b> position and intensity. We now exploit this further. Aims: We aim at identifying conjugate footpoint pairs by cross-correlating the TRACE 1600 Å lightcurves in one particular event – the 2002 -July- 17 M 8. 5 flare. We also seek the spatial relationship between the magnetic flux transfer (reconnection) rate, well-connected locations, and energy input by electrons. Methods: We performed wavelet à trous filtering on the UV light curves, followed by a linear cross-correlation, to identify well-correlated pairs. We used RHESSI data to determine the locations of strong electron beam input. Results: Maps of footpoint pairs were produced {{in which we can}} identify well-separated locations that have well-correlated 1600 Å light curves. The time lag between credible conjugate footpoint brightenings can be a few seconds. The flare magnetic connectivity is found to evolve with time. RHESSI hard X-ray sources are found where the flux transfer rate is highest. Conclusions: We propose that the correlated footpoints are in fact conjugate pairs that are magnetically linked. In some instances, this linkage may be via a coronal null. The time lag in many cases is consistent with excitation by relativistic particles, but correlations with a longer time lag may suggest excitation by waves. </p...|$|E
40|$|AbstractMethod {{inlining}} {{is one of}} {{the most}} important optimizations in method-based just-in-time (JIT) compilers. It widens the compilation scope and therefore allows optimizing multiple methods as a whole, which increases the performance. However, if method inlining is used too frequently, the compilation time increases and too much machine code is generated. This has negative effects on the performance. Trace-based JIT compilers only compile frequently executed paths, so-called traces, instead of whole methods. This may result in faster compilation, less generated machine code, and better optimized machine code. In the previous work, we implemented a <b>trace</b> <b>recording</b> infrastructure and a trace-based compiler for JavaTM, by modifying the Java HotSpot VM. Based on this work, we evaluate the effect of trace inlining on the performance and the amount of generated machine code. Trace inlining has several major advantages when compared to method inlining. First, trace inlining is more selective than method inlining, because only frequently executed paths are inlined. Second, the recorded traces may capture information about virtual calls, which simplify inlining. A third advantage is that trace information is context sensitive so that different method parts can be inlined depending on the specific call site. These advantages allow more aggressive inlining while the amount of generated machine code is still reasonable. We evaluate several inlining heuristics on the benchmark suites DaCapo 9. 12 Bach, SPECjbb 2005, and SPECjvm 2008 and show that our trace-based compiler achieves an up to 51 % higher peak performance than the method-based Java HotSpot client compiler. Furthermore, we show that the large compilation scope of our trace-based compiler has a positive effect on other compiler optimizations such as constant folding or null check elimination...|$|E
30|$|Intelligent {{packaging}} has intelligent functions, such as sensing, detecting, <b>tracing,</b> <b>recording,</b> {{and communicating}} [140]. This system utilizes {{a number of}} indicators for monitoring the food quality in terms of microbial growth as well as temperature and packing integrity [144, 145], whereas smart packaging possesses the susceptibilities of intelligent and active packaging.|$|R
5000|$|... #Caption: <b>Trace</b> Adkins, <b>recorded</b> three Number One {{country music}} hits.|$|R
5000|$|... 2012 Kevin Bowe & The Okemah Prophets: Natchez <b>Trace,</b> Okemah <b>Records</b> ...|$|R
40|$|This report {{presents}} the work made at UNL {{in order to}} be able to use the Tape/PVM from IMAG as a monitor system for the Grapnel environment. This included extending Tape/PVM to fully support a new type of event for the recording of Grapnel level actions [...] -the activation (execution) of each graphical block. This work was carried out using version 0. 9 of Tape/PVM and package 0. 16 of the grp 2 c compiler and Grapnel library. The changes that are needed to this library and to the compiler are reported, so that a Grapnel program can use this monitoring tool. A small example of it's use is also presented. 1 Extending Tape/PVM events 1. 1 The <b>trace</b> <b>recording</b> mechanism The mechanism used by Tape/PVM[1] for detecting and recording the PVM events is based on the replacement of the PVM primitives with instrumented functions. These functions are responsible for triggering the recording of new trace records describing the event. The new functions have the same name as the original ones plus the prefix `T'. Tpvm_XXXX buffer local trace file process libtape global trace file Figure 1 : Collecting trace records These functions will call the original PVM functions and generate a event record that includes the time stamp, type of event, and all the other information needed for describing each particular event. These information is collected by the Tape/PVM monitoring e-mail: vad [...] -jcc@di. fct. unl. pt 161 system, first in the local buffers of the monitoring library, them it is transfered to the trace file of the local host and finally (when the program terminates), will be merged into one global trace file. The starting function of this recording process for each event is the tapevevent() in lib/tse. c (prototype in include/tape. h). This function formats and saves each event record an [...] ...|$|E
40|$|Event tracing of {{applications}} under dynamic execution {{is crucial for}} performance modeling, optimization and trace- driven simulations. However, collecting and processing events, especially memory addresses, is extremely expensive {{in terms of time}} and space requirements. It is also challenging to find the right platform and the right tools to perform tracing. Such challenges greatly hinder the feasibility of tracing memory of large, long running, parallel applications. In this thesis, the challenges in tracing memory are explored and several solutions are exhibited to face each challenge. The philosophy of these solutions, schemes and workarounds is to find balance in the time and space on available platforms with available tools. Specifically, the time required to acquire memory traces can be greatly reduced by carefully identifying all causes of slowdown and addressing them in the design of built-for-the-purpose tracers. Techniques, including buffering, chaining and delayed instrumentation, are introduced and have been shown to reduce the time cost of memory tracing by more than 80 % when used with traditional instrumentation tools. In addition, a lightweight instrumentation tool ALITER, which only causes two-fold slowdown in collecting full memory traces, is introduced to demonstrate the benefits of asynchronous tracing schemes. Path grammar guided trace compression and trace approximation are explored in this thesis to reduce space costs of memory tracing. The efficacy of low-level general purpose compression schemes is greatly enhanced when they are organized around information about program structure and phases; combined with <b>trace</b> <b>recording</b> designed to capture the locality properties of random events, not the exact random events themselves, space required to store traces can be reduced by many orders of magnitude. These techniques enable one to generate reusable intermediate representations of memory traces, which are small enough to be stored on the disk, accurate enough for trace-driven simulations and fast enough to collect and process. Together with working through practical issues of availability, these advances make trace-driven simulation of full scale HPC applications feasibl...|$|E
50|$|The village can <b>trace</b> its <b>recorded</b> history back to {{the seventh}} century.|$|R
30|$|Due to the {{automatic}} and self-initiative nature of OCSO optimization, {{it is essential}} to inform users what has happened before, during and after the optimization and leave complete service optimization <b>trace</b> <b>records.</b> Logging and Notification Controller enters the resource information, utilization, decision and optimization details to logs and notifies the user where necessary and at each critical state.|$|R
5000|$|In November 1988, YU Grupa {{released}} Ima nade (There Is Hope). The album's biggest hits were [...] "Mornar" [...] ("Sailor") and {{the power}} ballad [...] "Dunavom šibaju vetrovi" [...] ("Winds Blow by the Danube"). This album was followed by Tragovi (<b>Traces),</b> <b>recorded</b> with Đelmaš on the drums once again, and featuring Pera Joe, Saša Lokner and Nikola Čuturilo as guests.|$|R
40|$|A commercially {{available}} motion phantom (QUASAR, Modus Medical) was modified for programmable motion control {{with the aim}} of reproducing patient respiratory motion in one dimension in both the anterior-posterior and superior-inferior directions, as well as, providing controllable breath-hold and sinusoidal patterns for the testing of radiotherapy gating systems. In order to simulate realistic patient motion, the DC motor was replaced by a stepper motor. A separate &# 039;chest-wall&# 039; motion platform was also designed to accommodate a variety of surrogate marker systems. The platform employs a second stepper motor that allows for the decoupling of the chest-wall and insert motion. The platform&# 039;s accuracy was tested by replicating patient <b>traces</b> <b>recorded</b> with the Varian real-time position management (RPM) system and comparing the motion platform&# 039;s <b>recorded</b> motion <b>trace</b> with the original patient data. Six lung cancer patient <b>traces</b> <b>recorded</b> with the RPM system were uploaded to the motion platform&# 039;s in-house control software and subsequently replicated through the phantom motion platform...|$|R
